head	1.356;
access;
symbols
	gdb_7_6_1-2013-08-30-release:1.346
	gdb_7_6-2013-04-26-release:1.346
	gdb_7_6-branch:1.346.0.2
	gdb_7_6-2013-03-12-branchpoint:1.346
	gdb_7_5_1-2012-11-29-release:1.339.2.1
	gdb_7_5-2012-08-17-release:1.339.2.1
	gdb_7_5-branch:1.339.0.2
	gdb_7_5-2012-07-18-branchpoint:1.339
	gdb_7_4_1-2012-04-26-release:1.330.2.1
	gdb_7_4-2012-01-24-release:1.330.2.1
	gdb_7_4-branch:1.330.0.2
	gdb_7_4-2011-12-13-branchpoint:1.330
	gdb_7_3_1-2011-09-04-release:1.329
	gdb_7_3-2011-07-26-release:1.329
	gdb_7_3-branch:1.329.0.2
	gdb_7_3-2011-04-01-branchpoint:1.329
	gdb_7_2-2010-09-02-release:1.326
	gdb_7_2-branch:1.326.0.2
	gdb_7_2-2010-07-07-branchpoint:1.326
	gdb_7_1-2010-03-18-release:1.319
	gdb_7_1-branch:1.319.0.2
	gdb_7_1-2010-02-18-branchpoint:1.319
	gdb_7_0_1-2009-12-22-release:1.312
	gdb_7_0-2009-10-06-release:1.312
	gdb_7_0-branch:1.312.0.2
	gdb_7_0-2009-09-16-branchpoint:1.312
	arc-sim-20090309:1.280
	msnyder-checkpoint-072509-branch:1.309.0.2
	msnyder-checkpoint-072509-branchpoint:1.309
	arc-insight_6_8-branch:1.280.0.6
	arc-insight_6_8-branchpoint:1.280
	insight_6_8-branch:1.280.0.4
	insight_6_8-branchpoint:1.280
	reverse-20081226-branch:1.293.0.2
	reverse-20081226-branchpoint:1.293
	multiprocess-20081120-branch:1.292.0.2
	multiprocess-20081120-branchpoint:1.292
	reverse-20080930-branch:1.291.0.2
	reverse-20080930-branchpoint:1.291
	reverse-20080717-branch:1.284.0.4
	reverse-20080717-branchpoint:1.284
	msnyder-reverse-20080609-branch:1.284.0.2
	msnyder-reverse-20080609-branchpoint:1.284
	drow-reverse-20070409-branch:1.257.0.2
	drow-reverse-20070409-branchpoint:1.257
	gdb_6_8-2008-03-27-release:1.280
	gdb_6_8-branch:1.280.0.2
	gdb_6_8-2008-02-26-branchpoint:1.280
	gdb_6_7_1-2007-10-29-release:1.266
	gdb_6_7-2007-10-10-release:1.266
	gdb_6_7-branch:1.266.0.2
	gdb_6_7-2007-09-07-branchpoint:1.266
	insight_6_6-20070208-release:1.247
	gdb_6_6-2006-12-18-release:1.247
	gdb_6_6-branch:1.247.0.2
	gdb_6_6-2006-11-15-branchpoint:1.247
	insight_6_5-20061003-release:1.242
	gdb-csl-symbian-6_4_50_20060226-12:1.239.6.1
	gdb-csl-sourcerygxx-3_4_4-25:1.230
	nickrob-async-20060828-mergepoint:1.243
	gdb-csl-symbian-6_4_50_20060226-11:1.239.6.1
	gdb-csl-sourcerygxx-4_1-17:1.239
	gdb-csl-20060226-branch-local-2:1.239
	gdb-csl-sourcerygxx-4_1-14:1.239
	gdb-csl-sourcerygxx-4_1-13:1.239
	gdb-csl-sourcerygxx-4_1-12:1.239
	gdb-csl-sourcerygxx-3_4_4-21:1.239
	gdb_6_5-20060621-release:1.242
	gdb-csl-sourcerygxx-4_1-9:1.239
	gdb-csl-sourcerygxx-4_1-8:1.239
	gdb-csl-sourcerygxx-4_1-7:1.239
	gdb-csl-arm-2006q1-6:1.239
	gdb-csl-sourcerygxx-4_1-6:1.239
	gdb-csl-symbian-6_4_50_20060226-10:1.239.6.1
	gdb-csl-symbian-6_4_50_20060226-9:1.239.6.1
	gdb-csl-symbian-6_4_50_20060226-8:1.239.6.1
	gdb-csl-coldfire-4_1-11:1.239
	gdb-csl-sourcerygxx-3_4_4-19:1.239
	gdb-csl-coldfire-4_1-10:1.239
	gdb_6_5-branch:1.242.0.6
	gdb_6_5-2006-05-14-branchpoint:1.242
	gdb-csl-sourcerygxx-4_1-5:1.239
	nickrob-async-20060513-branch:1.242.0.4
	nickrob-async-20060513-branchpoint:1.242
	gdb-csl-sourcerygxx-4_1-4:1.239
	msnyder-reverse-20060502-branch:1.242.0.2
	msnyder-reverse-20060502-branchpoint:1.242
	gdb-csl-morpho-4_1-4:1.239
	gdb-csl-sourcerygxx-3_4_4-17:1.239
	readline_5_1-import-branch:1.241.0.2
	readline_5_1-import-branchpoint:1.241
	gdb-csl-20060226-branch-merge-to-csl-symbian-1:1.239
	gdb-csl-symbian-20060226-branch:1.239.0.6
	gdb-csl-symbian-20060226-branchpoint:1.239
	gdb-csl-20060226-branch-merge-to-csl-local-1:1.239
	msnyder-reverse-20060331-branch:1.240.0.2
	msnyder-reverse-20060331-branchpoint:1.240
	gdb-csl-available-20060303-branch:1.239.0.4
	gdb-csl-available-20060303-branchpoint:1.239
	gdb-csl-20060226-branch:1.239.0.2
	gdb-csl-20060226-branchpoint:1.239
	gdb_6_4-20051202-release:1.230
	msnyder-fork-checkpoint-branch:1.230.0.10
	msnyder-fork-checkpoint-branchpoint:1.230
	gdb-csl-gxxpro-6_3-branch:1.230.0.8
	gdb-csl-gxxpro-6_3-branchpoint:1.230
	gdb_6_4-branch:1.230.0.6
	gdb_6_4-2005-11-01-branchpoint:1.230
	gdb-csl-arm-20051020-branch:1.230.0.4
	gdb-csl-arm-20051020-branchpoint:1.230
	msnyder-tracepoint-checkpoint-branch:1.230.0.2
	msnyder-tracepoint-checkpoint-branchpoint:1.230
	gdb-csl-arm-20050325-2005-q1b:1.229
	gdb-csl-arm-20050325-2005-q1a:1.229
	csl-arm-20050325-branch:1.229.0.2
	csl-arm-20050325-branchpoint:1.229
	gdb-post-i18n-errorwarning-20050211:1.229
	gdb-pre-i18n-errorwarning-20050211:1.229
	gdb_6_3-20041109-release:1.226
	gdb_6_3-branch:1.226.0.2
	gdb_6_3-20041019-branchpoint:1.226
	drow_intercu-merge-20040921:1.224
	drow_intercu-merge-20040915:1.224
	jimb-gdb_6_2-e500-branch:1.214.0.6
	jimb-gdb_6_2-e500-branchpoint:1.214
	gdb_6_2-20040730-release:1.214
	gdb_6_2-branch:1.214.0.2
	gdb_6_2-2004-07-10-gmt-branchpoint:1.214
	gdb_6_1_1-20040616-release:1.190.2.1
	gdb_6_1-2004-04-05-release:1.190
	drow_intercu-merge-20040402:1.194
	drow_intercu-merge-20040327:1.194
	ezannoni_pie-20040323-branch:1.194.0.2
	ezannoni_pie-20040323-branchpoint:1.194
	cagney_tramp-20040321-mergepoint:1.192
	cagney_tramp-20040309-branch:1.190.0.4
	cagney_tramp-20040309-branchpoint:1.190
	gdb_6_1-branch:1.190.0.2
	gdb_6_1-2004-03-01-gmt-branchpoint:1.190
	drow_intercu-20040221-branch:1.188.0.2
	drow_intercu-20040221-branchpoint:1.188
	cagney_bfdfile-20040213-branch:1.185.0.2
	cagney_bfdfile-20040213-branchpoint:1.185
	drow-cplus-merge-20040208:1.183
	carlton_dictionary-20040126-merge:1.182
	cagney_bigcore-20040122-branch:1.182.0.2
	cagney_bigcore-20040122-branchpoint:1.182
	drow-cplus-merge-20040113:1.178
	drow-cplus-merge-20031224:1.178
	drow-cplus-merge-20031220:1.178
	carlton_dictionary-20031215-merge:1.178
	drow-cplus-merge-20031214:1.178
	carlton-dictionary-20031111-merge:1.178
	gdb_6_0-2003-10-04-release:1.155.2.2
	kettenis_sparc-20030918-branch:1.161.0.4
	kettenis_sparc-20030918-branchpoint:1.161
	carlton_dictionary-20030917-merge:1.161
	ezannoni_pie-20030916-branchpoint:1.161
	ezannoni_pie-20030916-branch:1.161.0.2
	cagney_x86i386-20030821-branch:1.159.0.2
	cagney_x86i386-20030821-branchpoint:1.159
	carlton_dictionary-20030805-merge:1.158
	carlton_dictionary-20030627-merge:1.155
	gdb_6_0-branch:1.155.0.2
	gdb_6_0-2003-06-23-branchpoint:1.155
	jimb-ppc64-linux-20030613-branch:1.151.0.2
	jimb-ppc64-linux-20030613-branchpoint:1.151
	cagney_convert-20030606-branch:1.148.0.2
	cagney_convert-20030606-branchpoint:1.148
	cagney_writestrings-20030508-branch:1.144.0.4
	cagney_writestrings-20030508-branchpoint:1.144
	jimb-ppc64-linux-20030528-branch:1.147.0.4
	jimb-ppc64-linux-20030528-branchpoint:1.147
	carlton_dictionary-20030523-merge:1.147
	cagney_fileio-20030521-branch:1.147.0.2
	cagney_fileio-20030521-branchpoint:1.147
	kettenis_i386newframe-20030517-mergepoint:1.146
	jimb-ppc64-linux-20030509-branch:1.144.0.2
	jimb-ppc64-linux-20030509-branchpoint:1.144
	kettenis_i386newframe-20030504-mergepoint:1.143
	carlton_dictionary-20030430-merge:1.142
	kettenis_i386newframe-20030419-branch:1.140.0.2
	kettenis_i386newframe-20030419-branchpoint:1.140
	carlton_dictionary-20030416-merge:1.140
	cagney_frameaddr-20030409-mergepoint:1.140
	kettenis_i386newframe-20030406-branch:1.138.0.4
	kettenis_i386newframe-20030406-branchpoint:1.138
	cagney_frameaddr-20030403-branchpoint:1.138
	cagney_frameaddr-20030403-branch:1.138.0.2
	cagney_framebase-20030330-mergepoint:1.137
	cagney_framebase-20030326-branch:1.134.0.2
	cagney_framebase-20030326-branchpoint:1.134
	cagney_lazyid-20030317-branch:1.131.0.2
	cagney_lazyid-20030317-branchpoint:1.131
	kettenis-i386newframe-20030316-mergepoint:1.131
	offbyone-20030313-branch:1.129.0.2
	offbyone-20030313-branchpoint:1.129
	kettenis-i386newframe-20030308-branch:1.127.0.2
	kettenis-i386newframe-20030308-branchpoint:1.127
	carlton_dictionary-20030305-merge:1.126
	cagney_offbyone-20030303-branch:1.125.0.2
	cagney_offbyone-20030303-branchpoint:1.125
	carlton_dictionary-20030207-merge:1.123
	interps-20030203-mergepoint:1.122
	interps-20030202-branch:1.122.0.2
	interps-20030202-branchpoint:1.122
	cagney-unwind-20030108-branch:1.115.0.2
	cagney-unwind-20030108-branchpoint:1.115
	carlton_dictionary-20021223-merge:1.110
	gdb_5_3-2002-12-12-release:1.100
	carlton_dictionary-20021115-merge:1.107
	kseitz_interps-20021105-merge:1.107
	kseitz_interps-20021103-merge:1.107
	drow-cplus-merge-20021020:1.106
	drow-cplus-merge-20021025:1.106
	carlton_dictionary-20021025-merge:1.106
	carlton_dictionary-20021011-merge:1.104
	drow-cplus-branch:1.103.0.2
	drow-cplus-branchpoint:1.103
	kseitz_interps-20020930-merge:1.102
	carlton_dictionary-20020927-merge:1.102
	carlton_dictionary-branch:1.102.0.2
	carlton_dictionary-20020920-branchpoint:1.102
	gdb_5_3-branch:1.100.0.6
	gdb_5_3-2002-09-04-branchpoint:1.100
	kseitz_interps-20020829-merge:1.100
	cagney_sysregs-20020825-branch:1.100.0.4
	cagney_sysregs-20020825-branchpoint:1.100
	readline_4_3-import-branch:1.100.0.2
	readline_4_3-import-branchpoint:1.100
	gdb_5_2_1-2002-07-23-release:1.66.2.1
	kseitz_interps-20020528-branch:1.85.0.2
	kseitz_interps-20020528-branchpoint:1.85
	cagney_regbuf-20020515-branch:1.84.0.2
	cagney_regbuf-20020515-branchpoint:1.84
	jimb-macro-020506-branch:1.81.0.2
	jimb-macro-020506-branchpoint:1.81
	gdb_5_2-2002-04-29-release:1.66.2.1
	gdb_5_2-branch:1.66.0.2
	gdb_5_2-2002-03-03-branchpoint:1.66
	gdb_5_1_1-2002-01-24-release:1.33.2.3
	gdb_5_1_0_1-2002-01-03-release:1.33.2.2.4.1
	cygnus_cvs_20020108_pre:1.52
	gdb_5_1_0_1-2002-01-03-branch:1.33.2.2.0.4
	gdb_5_1_0_1-2002-01-03-branchpoint:1.33.2.2
	gdb_5_1-2001-11-21-release:1.33.2.2
	gdb_s390-2001-09-26-branch:1.33.2.2.0.2
	gdb_s390-2001-09-26-branchpoint:1.33.2.2
	gdb_5_1-2001-07-29-branch:1.33.0.2
	gdb_5_1-2001-07-29-branchpoint:1.33
	dberlin-typesystem-branch:1.29.0.2
	dberlin-typesystem-branchpoint:1.29
	gdb-post-ptid_t-2001-05-03:1.25
	gdb-pre-ptid_t-2001-05-03:1.25
	insight-precleanup-2001-01-01:1.17
	gdb-post-protoization-2000-07-29:1.13
	gdb-pre-protoization-2000-07-29:1.13
	gdb-premipsmulti-2000-06-06-branch:1.13.0.2
	gdb-premipsmulti-2000-06-06-branchpoint:1.13
	gdb-post-params-removal-2000-06-04:1.13
	gdb-pre-params-removal-2000-06-04:1.13
	gdb-post-params-removal-2000-05-28:1.12
	gdb-pre-params-removal-2000-05-28:1.12
	gdb_5_0-2000-05-19-release:1.5.2.1
	gdb_4_18_2-2000-05-18-release:1.5.2.1
	gdb_4_95_1-2000-05-11-snapshot:1.5.2.1
	gdb_4_95_0-2000-04-27-snapshot:1.5.2.1
	gdb_5_0-2000-04-10-branch:1.5.0.2
	gdb_5_0-2000-04-10-branchpoint:1.5
	repo-unification-2000-02-06:1.1.1.21
	insight-2000-02-04:1.1.1.21
	gdb-2000-02-04:1.1.1.21
	gdb-2000-02-02:1.1.1.21
	gdb-2000-02-01:1.1.1.21
	gdb-2000-01-31:1.1.1.21
	gdb-2000-01-26:1.1.1.20
	gdb-2000-01-24:1.1.1.20
	gdb-2000-01-17:1.1.1.20
	gdb-2000-01-10:1.1.1.20
	gdb-2000-01-05:1.1.1.20
	gdb-1999-12-21:1.1.1.20
	gdb-1999-12-13:1.1.1.20
	gdb-1999-12-07:1.1.1.19
	gdb-1999-12-06:1.1.1.19
	gdb-1999-11-16:1.1.1.19
	gdb-1999-11-08:1.1.1.19
	gdb-1999-11-01:1.1.1.19
	gdb-1999-10-25:1.1.1.19
	gdb-1999-10-18:1.1.1.19
	gdb-1999-10-11:1.1.1.18
	gdb-1999-10-04:1.1.1.17
	gdb-1999-09-28:1.1.1.17
	gdb-1999-09-21:1.1.1.17
	gdb-1999-09-13:1.1.1.16
	gdb-1999-09-08:1.1.1.16
	gdb-1999-08-30:1.1.1.15
	gdb-1999-08-23:1.1.1.14
	gdb-1999-08-16:1.1.1.13
	gdb-1999-08-09:1.1.1.12
	gdb-1999-08-02:1.1.1.11
	gdb-1999-07-26:1.1.1.11
	gdb-1999-07-19:1.1.1.11
	gdb-1999-07-12:1.1.1.10
	gdb-post-reformat-19990707:1.1.1.10
	gdb-1999-07-07-post-reformat-snapshot:1.1.1.10
	gdb-pre-reformat-19990707:1.1.1.10
	gdb-1999-07-07:1.1.1.10
	gdb-1999-07-05:1.1.1.10
	gdb-1999-06-28:1.1.1.9
	gdb-1999-06-21:1.1.1.8
	gdb-1999-06-14:1.1.1.7
	gdb-1999-06-07:1.1.1.6
	gdb-1999-06-01:1.1.1.5
	gdb-4_18-branch:1.1.1.1.0.2
	gdb-4_18-release:1.1.1.1
	gdb-1999-05-25:1.1.1.4
	gdb-1999-05-19:1.1.1.3
	gdb-1999-05-10:1.1.1.3
	gdb-19990504:1.1.1.3
	gdb-19990422:1.1.1.2
	SNAPSHOT:1.1.1
	gdb-4_18:1.1.1.1
	GDB_4_18:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.356
date	2013.09.16.18.00.34;	author shebs;	state dead;
branches;
next	1.355;

1.355
date	2013.08.13.16.12.03;	author tromey;	state Exp;
branches;
next	1.354;

1.354
date	2013.06.28.18.59.50;	author tromey;	state Exp;
branches;
next	1.353;

1.353
date	2013.06.27.19.17.27;	author palves;	state Exp;
branches;
next	1.352;

1.352
date	2013.06.26.16.04.05;	author tromey;	state Exp;
branches;
next	1.351;

1.351
date	2013.06.25.13.01.27;	author qiyao;	state Exp;
branches;
next	1.350;

1.350
date	2013.05.08.05.50.47;	author brobecke;	state Exp;
branches;
next	1.349;

1.349
date	2013.05.06.14.15.50;	author brobecke;	state Exp;
branches;
next	1.348;

1.348
date	2013.04.19.18.41.32;	author palves;	state Exp;
branches;
next	1.347;

1.347
date	2013.04.19.18.32.54;	author palves;	state Exp;
branches;
next	1.346;

1.346
date	2013.01.01.06.32.57;	author brobecke;	state Exp;
branches;
next	1.345;

1.345
date	2012.12.22.17.51.11;	author muller;	state Exp;
branches;
next	1.344;

1.344
date	2012.12.16.19.00.04;	author jkratoch;	state Exp;
branches;
next	1.343;

1.343
date	2012.12.09.18.39.59;	author jkratoch;	state Exp;
branches;
next	1.342;

1.342
date	2012.09.13.17.35.35;	author jkratoch;	state Exp;
branches;
next	1.341;

1.341
date	2012.08.22.17.31.45;	author tromey;	state Exp;
branches;
next	1.340;

1.340
date	2012.08.07.16.49.38;	author jkratoch;	state Exp;
branches;
next	1.339;

1.339
date	2012.07.12.07.56.50;	author eliz;	state Exp;
branches
	1.339.2.1;
next	1.338;

1.338
date	2012.06.15.09.21.36;	author eliz;	state Exp;
branches;
next	1.337;

1.337
date	2012.04.25.10.59.10;	author qiyao;	state Exp;
branches;
next	1.336;

1.336
date	2012.03.13.21.02.39;	author devans;	state Exp;
branches;
next	1.335;

1.335
date	2012.01.13.14.31.55;	author jkratoch;	state Exp;
branches;
next	1.334;

1.334
date	2012.01.05.09.41.03;	author brobecke;	state Exp;
branches;
next	1.333;

1.333
date	2012.01.04.08.17.20;	author brobecke;	state Exp;
branches;
next	1.332;

1.332
date	2012.01.02.02.28.58;	author jkratoch;	state Exp;
branches;
next	1.331;

1.331
date	2011.12.19.13.37.33;	author jkratoch;	state Exp;
branches;
next	1.330;

1.330
date	2011.04.19.18.04.08;	author tromey;	state Exp;
branches
	1.330.2.1;
next	1.329;

1.329
date	2011.02.04.19.10.12;	author palves;	state Exp;
branches;
next	1.328;

1.328
date	2011.01.05.05.09.54;	author brobecke;	state Exp;
branches;
next	1.327;

1.327
date	2010.10.20.22.53.36;	author devans;	state Exp;
branches;
next	1.326;

1.326
date	2010.06.22.05.03.19;	author shebs;	state Exp;
branches;
next	1.325;

1.325
date	2010.06.21.16.24.59;	author shebs;	state Exp;
branches;
next	1.324;

1.324
date	2010.06.03.19.06.59;	author devans;	state Exp;
branches;
next	1.323;

1.323
date	2010.05.02.23.52.14;	author jkratoch;	state Exp;
branches;
next	1.322;

1.322
date	2010.04.26.12.01.44;	author muller;	state Exp;
branches;
next	1.321;

1.321
date	2010.03.10.18.20.07;	author tromey;	state Exp;
branches;
next	1.320;

1.320
date	2010.02.19.19.14.38;	author tromey;	state Exp;
branches;
next	1.319;

1.319
date	2010.02.13.04.57.11;	author brobecke;	state Exp;
branches;
next	1.318;

1.318
date	2010.02.05.21.51.38;	author devans;	state Exp;
branches;
next	1.317;

1.317
date	2010.02.05.18.30.44;	author devans;	state Exp;
branches;
next	1.316;

1.316
date	2010.01.01.11.38.33;	author brobecke;	state Exp;
branches;
next	1.315;

1.315
date	2010.01.01.07.54.37;	author brobecke;	state Exp;
branches;
next	1.314;

1.314
date	2009.11.07.19.46.57;	author brobecke;	state Exp;
branches;
next	1.313;

1.313
date	2009.10.08.13.08.26;	author jkratoch;	state Exp;
branches;
next	1.312;

1.312
date	2009.09.13.16.28.29;	author brobecke;	state Exp;
branches;
next	1.311;

1.311
date	2009.08.26.04.16.38;	author rwild;	state Exp;
branches;
next	1.310;

1.310
date	2009.08.22.17.08.09;	author rwild;	state Exp;
branches;
next	1.309;

1.309
date	2009.07.10.19.38.00;	author tromey;	state Exp;
branches;
next	1.308;

1.308
date	2009.07.10.18.48.40;	author tromey;	state Exp;
branches;
next	1.307;

1.307
date	2009.07.02.17.21.07;	author uweigand;	state Exp;
branches;
next	1.306;

1.306
date	2009.07.02.17.12.27;	author uweigand;	state Exp;
branches;
next	1.305;

1.305
date	2009.06.07.22.33.25;	author palves;	state Exp;
branches;
next	1.304;

1.304
date	2009.06.04.15.15.48;	author uweigand;	state Exp;
branches;
next	1.303;

1.303
date	2009.05.07.18.40.43;	author brobecke;	state Exp;
branches;
next	1.302;

1.302
date	2009.04.23.18.46.14;	author brobecke;	state Exp;
branches;
next	1.301;

1.301
date	2009.04.16.17.42.00;	author brobecke;	state Exp;
branches;
next	1.300;

1.300
date	2009.04.14.18.18.41;	author muller;	state Exp;
branches;
next	1.299;

1.299
date	2009.03.21.10.24.35;	author eliz;	state Exp;
branches;
next	1.298;

1.298
date	2009.02.06.22.50.52;	author palves;	state Exp;
branches;
next	1.297;

1.297
date	2009.01.14.11.47.07;	author jsm28;	state Exp;
branches;
next	1.296;

1.296
date	2009.01.07.21.42.50;	author palves;	state Exp;
branches;
next	1.295;

1.295
date	2009.01.07.04.42.45;	author brobecke;	state Exp;
branches;
next	1.294;

1.294
date	2008.12.28.23.35.52;	author palves;	state Exp;
branches;
next	1.293;

1.293
date	2008.11.26.05.26.40;	author jkratoch;	state Exp;
branches;
next	1.292;

1.292
date	2008.10.27.11.37.40;	author palves;	state Exp;
branches;
next	1.291;

1.291
date	2008.09.27.21.29.30;	author tromey;	state Exp;
branches;
next	1.290;

1.290
date	2008.09.12.10.39.03;	author palves;	state Exp;
branches;
next	1.289;

1.289
date	2008.09.11.14.27.00;	author uweigand;	state Exp;
branches;
next	1.288;

1.288
date	2008.08.12.20.12.04;	author bauermann;	state Exp;
branches;
next	1.287;

1.287
date	2008.08.01.01.09.00;	author shebs;	state Exp;
branches;
next	1.286;

1.286
date	2008.07.29.20.26.53;	author shebs;	state Exp;
branches;
next	1.285;

1.285
date	2008.07.22.02.10.14;	author shebs;	state Exp;
branches;
next	1.284;

1.284
date	2008.05.16.00.27.24;	author drow;	state Exp;
branches;
next	1.283;

1.283
date	2008.05.02.11.07.25;	author schwab;	state Exp;
branches;
next	1.282;

1.282
date	2008.04.30.21.16.46;	author drow;	state Exp;
branches;
next	1.281;

1.281
date	2008.04.20.00.03.25;	author csilvers;	state Exp;
branches;
next	1.280;

1.280
date	2008.02.13.05.05.29;	author deuling;	state Exp;
branches;
next	1.279;

1.279
date	2008.01.28.20.21.03;	author drow;	state Exp;
branches;
next	1.278;

1.278
date	2008.01.18.17.07.40;	author deuling;	state Exp;
branches;
next	1.277;

1.277
date	2008.01.05.16.49.53;	author palves;	state Exp;
branches;
next	1.276;

1.276
date	2008.01.05.15.12.56;	author brobecke;	state Exp;
branches;
next	1.275;

1.275
date	2007.11.15.06.14.26;	author vprus;	state Exp;
branches;
next	1.274;

1.274
date	2007.10.24.20.29.14;	author drow;	state Exp;
branches;
next	1.273;

1.273
date	2007.10.22.14.25.13;	author uweigand;	state Exp;
branches;
next	1.272;

1.272
date	2007.10.19.12.26.35;	author uweigand;	state Exp;
branches;
next	1.271;

1.271
date	2007.10.17.13.36.45;	author drow;	state Exp;
branches;
next	1.270;

1.270
date	2007.10.13.00.06.54;	author uweigand;	state Exp;
branches;
next	1.269;

1.269
date	2007.10.12.15.30.05;	author uweigand;	state Exp;
branches;
next	1.268;

1.268
date	2007.10.11.19.01.43;	author drow;	state Exp;
branches;
next	1.267;

1.267
date	2007.10.01.00.17.58;	author drow;	state Exp;
branches;
next	1.266;

1.266
date	2007.07.05.12.22.32;	author uweigand;	state Exp;
branches;
next	1.265;

1.265
date	2007.07.04.21.51.23;	author eliz;	state Exp;
branches;
next	1.264;

1.264
date	2007.07.03.12.21.22;	author uweigand;	state Exp;
branches;
next	1.263;

1.263
date	2007.06.29.00.23.44;	author msnyder;	state Exp;
branches;
next	1.262;

1.262
date	2007.06.25.04.21.02;	author nickrob;	state Exp;
branches;
next	1.261;

1.261
date	2007.05.08.23.39.14;	author uweigand;	state Exp;
branches;
next	1.260;

1.260
date	2007.04.11.18.36.50;	author sje;	state Exp;
branches;
next	1.259;

1.259
date	2007.04.11.11.11.12;	author drow;	state Exp;
branches;
next	1.258;

1.258
date	2007.04.10.11.58.15;	author drow;	state Exp;
branches;
next	1.257;

1.257
date	2007.03.30.17.21.48;	author drow;	state Exp;
branches;
next	1.256;

1.256
date	2007.03.30.12.57.44;	author drow;	state Exp;
branches;
next	1.255;

1.255
date	2007.03.30.01.18.17;	author uweigand;	state Exp;
branches;
next	1.254;

1.254
date	2007.03.27.19.11.11;	author uweigand;	state Exp;
branches;
next	1.253;

1.253
date	2007.02.08.21.00.35;	author drow;	state Exp;
branches;
next	1.252;

1.252
date	2007.02.02.19.48.50;	author eliz;	state Exp;
branches;
next	1.251;

1.251
date	2007.01.20.16.51.56;	author eliz;	state Exp;
branches;
next	1.250;

1.250
date	2007.01.20.16.35.45;	author eliz;	state Exp;
branches;
next	1.249;

1.249
date	2007.01.04.19.42.10;	author drow;	state Exp;
branches;
next	1.248;

1.248
date	2007.01.01.14.04.18;	author brobecke;	state Exp;
branches;
next	1.247;

1.247
date	2006.11.10.19.20.37;	author drow;	state Exp;
branches;
next	1.246;

1.246
date	2006.10.17.21.55.24;	author drow;	state Exp;
branches;
next	1.245;

1.245
date	2006.09.21.13.47.56;	author drow;	state Exp;
branches;
next	1.244;

1.244
date	2006.09.02.15.27.16;	author eliz;	state Exp;
branches;
next	1.243;

1.243
date	2006.05.15.04.39.03;	author nickrob;	state Exp;
branches;
next	1.242;

1.242
date	2006.04.22.23.12.03;	author cagney;	state Exp;
branches
	1.242.4.1;
next	1.241;

1.241
date	2006.04.18.19.20.08;	author drow;	state Exp;
branches;
next	1.240;

1.240
date	2006.03.28.19.19.16;	author jimb;	state Exp;
branches;
next	1.239;

1.239
date	2006.02.13.08.34.11;	author woodzltc;	state Exp;
branches
	1.239.6.1;
next	1.238;

1.238
date	2006.02.06.22.14.31;	author drow;	state Exp;
branches;
next	1.237;

1.237
date	2006.01.25.21.15.42;	author jimb;	state Exp;
branches;
next	1.236;

1.236
date	2006.01.25.18.48.57;	author jimb;	state Exp;
branches;
next	1.235;

1.235
date	2006.01.20.21.58.16;	author jimb;	state Exp;
branches;
next	1.234;

1.234
date	2006.01.04.19.31.27;	author msnyder;	state Exp;
branches;
next	1.233;

1.233
date	2005.12.24.15.22.36;	author eliz;	state Exp;
branches;
next	1.232;

1.232
date	2005.12.23.19.26.16;	author eliz;	state Exp;
branches;
next	1.231;

1.231
date	2005.11.26.00.04.38;	author brobecke;	state Exp;
branches;
next	1.230;

1.230
date	2005.04.10.21.20.27;	author eliz;	state Exp;
branches;
next	1.229;

1.229
date	2005.01.04.19.25.46;	author cagney;	state Exp;
branches;
next	1.228;

1.228
date	2004.12.25.10.19.48;	author kettenis;	state Exp;
branches;
next	1.227;

1.227
date	2004.12.04.14.02.44;	author eliz;	state Exp;
branches;
next	1.226;

1.226
date	2004.10.12.19.14.31;	author cagney;	state Exp;
branches;
next	1.225;

1.225
date	2004.10.08.15.34.31;	author jjohnstn;	state Exp;
branches;
next	1.224;

1.224
date	2004.09.12.15.20.49;	author cagney;	state Exp;
branches;
next	1.223;

1.223
date	2004.09.11.20.53.16;	author hilfingr;	state Exp;
branches;
next	1.222;

1.222
date	2004.09.03.17.13.48;	author cagney;	state Exp;
branches;
next	1.221;

1.221
date	2004.08.24.19.58.24;	author cagney;	state Exp;
branches;
next	1.220;

1.220
date	2004.08.21.09.37.20;	author chastain;	state Exp;
branches;
next	1.219;

1.219
date	2004.08.14.21.11.43;	author kettenis;	state Exp;
branches;
next	1.218;

1.218
date	2004.08.11.22.23.04;	author brobecke;	state Exp;
branches;
next	1.217;

1.217
date	2004.08.06.20.47.25;	author kettenis;	state Exp;
branches;
next	1.216;

1.216
date	2004.08.05.14.12.40;	author cagney;	state Exp;
branches;
next	1.215;

1.215
date	2004.08.03.02.02.24;	author cagney;	state Exp;
branches;
next	1.214;

1.214
date	2004.07.01.20.25.54;	author kettenis;	state Exp;
branches;
next	1.213;

1.213
date	2004.06.30.20.01.23;	author kettenis;	state Exp;
branches;
next	1.212;

1.212
date	2004.06.28.23.59.29;	author cagney;	state Exp;
branches;
next	1.211;

1.211
date	2004.06.20.17.18.07;	author cagney;	state Exp;
branches;
next	1.210;

1.210
date	2004.06.18.21.36.16;	author cagney;	state Exp;
branches;
next	1.209;

1.209
date	2004.06.14.22.26.34;	author cagney;	state Exp;
branches;
next	1.208;

1.208
date	2004.06.13.13.42.33;	author cagney;	state Exp;
branches;
next	1.207;

1.207
date	2004.06.09.13.33.54;	author cagney;	state Exp;
branches;
next	1.206;

1.206
date	2004.06.08.19.58.15;	author cagney;	state Exp;
branches;
next	1.205;

1.205
date	2004.06.07.04.31.11;	author tausq;	state Exp;
branches;
next	1.204;

1.204
date	2004.06.07.02.12.59;	author tausq;	state Exp;
branches;
next	1.203;

1.203
date	2004.05.08.22.26.10;	author cagney;	state Exp;
branches;
next	1.202;

1.202
date	2004.05.08.21.52.50;	author cagney;	state Exp;
branches;
next	1.201;

1.201
date	2004.05.08.21.27.03;	author cagney;	state Exp;
branches;
next	1.200;

1.200
date	2004.05.08.20.48.52;	author cagney;	state Exp;
branches;
next	1.199;

1.199
date	2004.05.08.20.16.34;	author cagney;	state Exp;
branches;
next	1.198;

1.198
date	2004.05.01.16.52.30;	author cagney;	state Exp;
branches;
next	1.197;

1.197
date	2004.04.30.14.40.56;	author cagney;	state Exp;
branches;
next	1.196;

1.196
date	2004.04.04.14.03.57;	author cagney;	state Exp;
branches;
next	1.195;

1.195
date	2004.04.02.23.20.50;	author cagney;	state Exp;
branches;
next	1.194;

1.194
date	2004.03.23.15.16.47;	author cagney;	state Exp;
branches;
next	1.193;

1.193
date	2004.03.23.14.48.00;	author cagney;	state Exp;
branches;
next	1.192;

1.192
date	2004.03.19.17.43.34;	author cagney;	state Exp;
branches;
next	1.191;

1.191
date	2004.03.18.20.13.34;	author cagney;	state Exp;
branches;
next	1.190;

1.190
date	2004.02.26.20.52.08;	author cagney;	state Exp;
branches
	1.190.2.1
	1.190.4.1;
next	1.189;

1.189
date	2004.02.24.15.41.29;	author cagney;	state Exp;
branches;
next	1.188;

1.188
date	2004.02.16.21.49.22;	author cagney;	state Exp;
branches
	1.188.2.1;
next	1.187;

1.187
date	2004.02.16.18.20.05;	author cagney;	state Exp;
branches;
next	1.186;

1.186
date	2004.02.14.17.01.01;	author cagney;	state Exp;
branches;
next	1.185;

1.185
date	2004.02.12.17.46.40;	author ezannoni;	state Exp;
branches;
next	1.184;

1.184
date	2004.02.11.15.11.35;	author ezannoni;	state Exp;
branches;
next	1.183;

1.183
date	2004.01.26.20.52.13;	author cagney;	state Exp;
branches;
next	1.182;

1.182
date	2004.01.20.09.29.18;	author chastain;	state Exp;
branches;
next	1.181;

1.181
date	2004.01.17.21.56.00;	author drow;	state Exp;
branches;
next	1.180;

1.180
date	2004.01.17.18.24.15;	author cagney;	state Exp;
branches;
next	1.179;

1.179
date	2004.01.13.17.06.37;	author cagney;	state Exp;
branches;
next	1.178;

1.178
date	2003.11.10.22.47.31;	author cagney;	state Exp;
branches;
next	1.177;

1.177
date	2003.10.20.15.38.02;	author cagney;	state Exp;
branches;
next	1.176;

1.176
date	2003.10.18.12.28.05;	author kettenis;	state Exp;
branches;
next	1.175;

1.175
date	2003.10.14.20.23.29;	author kevinb;	state Exp;
branches;
next	1.174;

1.174
date	2003.10.10.07.08.53;	author ksakamot;	state Exp;
branches;
next	1.173;

1.173
date	2003.10.03.20.56.43;	author cagney;	state Exp;
branches;
next	1.172;

1.172
date	2003.10.02.20.28.31;	author cagney;	state Exp;
branches;
next	1.171;

1.171
date	2003.09.30.19.12.19;	author cagney;	state Exp;
branches;
next	1.170;

1.170
date	2003.09.30.13.29.44;	author cagney;	state Exp;
branches;
next	1.169;

1.169
date	2003.09.29.20.24.04;	author cagney;	state Exp;
branches;
next	1.168;

1.168
date	2003.09.29.20.18.51;	author cagney;	state Exp;
branches;
next	1.167;

1.167
date	2003.09.22.23.20.54;	author chastain;	state Exp;
branches;
next	1.166;

1.166
date	2003.09.22.00.49.51;	author green;	state Exp;
branches;
next	1.165;

1.165
date	2003.09.21.19.23.15;	author kettenis;	state Exp;
branches;
next	1.164;

1.164
date	2003.09.19.20.11.42;	author cagney;	state Exp;
branches;
next	1.163;

1.163
date	2003.09.19.20.09.45;	author cagney;	state Exp;
branches;
next	1.162;

1.162
date	2003.09.18.22.39.21;	author cagney;	state Exp;
branches;
next	1.161;

1.161
date	2003.09.13.14.12.41;	author kettenis;	state Exp;
branches
	1.161.2.1;
next	1.160;

1.160
date	2003.09.11.15.17.18;	author cagney;	state Exp;
branches;
next	1.159;

1.159
date	2003.08.18.20.04.56;	author cagney;	state Exp;
branches;
next	1.158;

1.158
date	2003.08.04.20.43.57;	author cagney;	state Exp;
branches;
next	1.157;

1.157
date	2003.07.24.18.56.37;	author drow;	state Exp;
branches;
next	1.156;

1.156
date	2003.07.22.18.18.10;	author cagney;	state Exp;
branches;
next	1.155;

1.155
date	2003.06.22.04.28.04;	author drow;	state Exp;
branches
	1.155.2.1;
next	1.154;

1.154
date	2003.06.19.15.04.05;	author drow;	state Exp;
branches;
next	1.153;

1.153
date	2003.06.16.16.52.24;	author cagney;	state Exp;
branches;
next	1.152;

1.152
date	2003.06.16.16.47.44;	author cagney;	state Exp;
branches;
next	1.151;

1.151
date	2003.06.13.18.30.38;	author cagney;	state Exp;
branches;
next	1.150;

1.150
date	2003.06.09.02.10.35;	author cagney;	state Exp;
branches;
next	1.149;

1.149
date	2003.06.09.01.02.07;	author cagney;	state Exp;
branches;
next	1.148;

1.148
date	2003.06.01.23.05.43;	author cagney;	state Exp;
branches;
next	1.147;

1.147
date	2003.05.21.19.52.39;	author cagney;	state Exp;
branches;
next	1.146;

1.146
date	2003.05.17.06.00.00;	author cagney;	state Exp;
branches;
next	1.145;

1.145
date	2003.05.14.20.29.15;	author troth;	state Exp;
branches;
next	1.144;

1.144
date	2003.05.05.17.56.57;	author cagney;	state Exp;
branches
	1.144.4.1;
next	1.143;

1.143
date	2003.05.03.19.39.23;	author cagney;	state Exp;
branches;
next	1.142;

1.142
date	2003.04.29.01.49.48;	author cagney;	state Exp;
branches;
next	1.141;

1.141
date	2003.04.28.16.17.29;	author cagney;	state Exp;
branches;
next	1.140;

1.140
date	2003.04.08.21.25.33;	author cagney;	state Exp;
branches
	1.140.2.1;
next	1.139;

1.139
date	2003.04.08.21.20.06;	author cagney;	state Exp;
branches;
next	1.138;

1.138
date	2003.03.31.19.01.21;	author cagney;	state Exp;
branches
	1.138.2.1;
next	1.137;

1.137
date	2003.03.30.14.59.02;	author cagney;	state Exp;
branches;
next	1.136;

1.136
date	2003.03.27.15.29.45;	author cagney;	state Exp;
branches;
next	1.135;

1.135
date	2003.03.26.22.39.53;	author cagney;	state Exp;
branches;
next	1.134;

1.134
date	2003.03.25.18.54.16;	author cagney;	state Exp;
branches
	1.134.2.1;
next	1.133;

1.133
date	2003.03.24.03.54.51;	author cagney;	state Exp;
branches;
next	1.132;

1.132
date	2003.03.18.17.44.23;	author brobecke;	state Exp;
branches;
next	1.131;

1.131
date	2003.03.14.17.07.00;	author cagney;	state Exp;
branches;
next	1.130;

1.130
date	2003.03.13.21.45.43;	author cagney;	state Exp;
branches;
next	1.129;

1.129
date	2003.03.12.16.50.47;	author cagney;	state Exp;
branches;
next	1.128;

1.128
date	2003.03.10.15.28.41;	author cagney;	state Exp;
branches;
next	1.127;

1.127
date	2003.03.05.23.14.18;	author cagney;	state Exp;
branches
	1.127.2.1;
next	1.126;

1.126
date	2003.03.03.23.28.55;	author cagney;	state Exp;
branches;
next	1.125;

1.125
date	2003.03.02.04.02.25;	author cagney;	state Exp;
branches
	1.125.2.1;
next	1.124;

1.124
date	2003.03.02.00.11.43;	author cagney;	state Exp;
branches;
next	1.123;

1.123
date	2003.02.04.23.59.26;	author cagney;	state Exp;
branches;
next	1.122;

1.122
date	2003.02.01.20.51.06;	author cagney;	state Exp;
branches;
next	1.121;

1.121
date	2003.02.01.17.28.41;	author cagney;	state Exp;
branches;
next	1.120;

1.120
date	2003.01.29.16.10.53;	author cagney;	state Exp;
branches;
next	1.119;

1.119
date	2003.01.15.19.35.28;	author cagney;	state Exp;
branches;
next	1.118;

1.118
date	2003.01.13.23.27.17;	author cagney;	state Exp;
branches;
next	1.117;

1.117
date	2003.01.13.23.25.55;	author cagney;	state Exp;
branches;
next	1.116;

1.116
date	2003.01.10.22.51.57;	author chastain;	state Exp;
branches;
next	1.115;

1.115
date	2003.01.09.18.46.02;	author cagney;	state Exp;
branches;
next	1.114;

1.114
date	2003.01.05.01.38.41;	author drow;	state Exp;
branches;
next	1.113;

1.113
date	2003.01.04.22.37.48;	author drow;	state Exp;
branches;
next	1.112;

1.112
date	2003.01.02.14.36.48;	author cagney;	state Exp;
branches;
next	1.111;

1.111
date	2002.12.23.18.53.16;	author kettenis;	state Exp;
branches;
next	1.110;

1.110
date	2002.12.11.02.26.38;	author cagney;	state Exp;
branches;
next	1.109;

1.109
date	2002.12.01.19.07.16;	author cagney;	state Exp;
branches;
next	1.108;

1.108
date	2002.11.28.21.38.44;	author cagney;	state Exp;
branches;
next	1.107;

1.107
date	2002.10.26.17.19.28;	author cagney;	state Exp;
branches;
next	1.106;

1.106
date	2002.10.18.18.50.43;	author kevinb;	state Exp;
branches;
next	1.105;

1.105
date	2002.10.17.18.33.36;	author kevinb;	state Exp;
branches;
next	1.104;

1.104
date	2002.10.11.14.01.04;	author drow;	state Exp;
branches;
next	1.103;

1.103
date	2002.10.03.22.30.01;	author jjohnstn;	state Exp;
branches
	1.103.2.1;
next	1.102;

1.102
date	2002.09.19.15.43.49;	author cagney;	state Exp;
branches
	1.102.2.1;
next	1.101;

1.101
date	2002.09.19.13.14.46;	author brobecke;	state Exp;
branches;
next	1.100;

1.100
date	2002.08.24.00.21.37;	author cagney;	state Exp;
branches;
next	1.99;

1.99
date	2002.08.21.16.34.10;	author cagney;	state Exp;
branches;
next	1.98;

1.98
date	2002.08.16.00.27.46;	author cagney;	state Exp;
branches;
next	1.97;

1.97
date	2002.08.01.17.18.34;	author cagney;	state Exp;
branches;
next	1.96;

1.96
date	2002.08.01.16.49.25;	author cagney;	state Exp;
branches;
next	1.95;

1.95
date	2002.07.24.23.51.36;	author cagney;	state Exp;
branches;
next	1.94;

1.94
date	2002.07.10.16.07.19;	author brobecke;	state Exp;
branches;
next	1.93;

1.93
date	2002.06.27.15.30.32;	author cagney;	state Exp;
branches;
next	1.92;

1.92
date	2002.06.26.20.58.48;	author tromey;	state Exp;
branches;
next	1.91;

1.91
date	2002.06.09.17.15.40;	author cagney;	state Exp;
branches;
next	1.90;

1.90
date	2002.06.09.15.11.47;	author kettenis;	state Exp;
branches;
next	1.89;

1.89
date	2002.06.09.02.11.12;	author cagney;	state Exp;
branches;
next	1.88;

1.88
date	2002.06.08.17.50.59;	author cagney;	state Exp;
branches;
next	1.87;

1.87
date	2002.06.01.20.14.16;	author cagney;	state Exp;
branches;
next	1.86;

1.86
date	2002.05.31.01.36.16;	author cagney;	state Exp;
branches;
next	1.85;

1.85
date	2002.05.21.15.36.03;	author thorpej;	state Exp;
branches
	1.85.2.1;
next	1.84;

1.84
date	2002.05.13.17.20.59;	author cagney;	state Exp;
branches
	1.84.2.1;
next	1.83;

1.83
date	2002.05.12.03.09.12;	author cagney;	state Exp;
branches;
next	1.82;

1.82
date	2002.05.12.02.16.05;	author cagney;	state Exp;
branches;
next	1.81;

1.81
date	2002.05.04.19.57.22;	author cagney;	state Exp;
branches;
next	1.80;

1.80
date	2002.04.24.16.28.16;	author cagney;	state Exp;
branches;
next	1.79;

1.79
date	2002.04.24.13.48.34;	author davem;	state Exp;
branches;
next	1.78;

1.78
date	2002.04.22.01.39.54;	author davem;	state Exp;
branches;
next	1.77;

1.77
date	2002.04.21.15.52.35;	author cagney;	state Exp;
branches;
next	1.76;

1.76
date	2002.04.19.19.33.57;	author eliz;	state Exp;
branches;
next	1.75;

1.75
date	2002.04.14.13.38.07;	author cagney;	state Exp;
branches;
next	1.74;

1.74
date	2002.04.13.15.56.42;	author chastain;	state Exp;
branches;
next	1.73;

1.73
date	2002.04.10.05.11.35;	author chastain;	state Exp;
branches;
next	1.72;

1.72
date	2002.04.06.00.02.52;	author cagney;	state Exp;
branches;
next	1.71;

1.71
date	2002.03.27.21.16.33;	author cagney;	state Exp;
branches;
next	1.70;

1.70
date	2002.03.19.02.49.53;	author cagney;	state Exp;
branches;
next	1.69;

1.69
date	2002.03.18.16.14.04;	author cagney;	state Exp;
branches;
next	1.68;

1.68
date	2002.03.18.16.09.32;	author cagney;	state Exp;
branches;
next	1.67;

1.67
date	2002.03.04.20.38.10;	author fnf;	state Exp;
branches;
next	1.66;

1.66
date	2002.02.24.17.18.25;	author cagney;	state Exp;
branches
	1.66.2.1;
next	1.65;

1.65
date	2002.02.23.20.59.55;	author cagney;	state Exp;
branches;
next	1.64;

1.64
date	2002.02.06.13.00.49;	author rearnsha;	state Exp;
branches;
next	1.63;

1.63
date	2002.01.29.16.32.02;	author cagney;	state Exp;
branches;
next	1.62;

1.62
date	2002.01.29.03.51.19;	author cagney;	state Exp;
branches;
next	1.61;

1.61
date	2002.01.22.17.15.56;	author cagney;	state Exp;
branches;
next	1.60;

1.60
date	2002.01.20.19.26.50;	author cagney;	state Exp;
branches;
next	1.59;

1.59
date	2002.01.20.18.19.30;	author cagney;	state Exp;
branches;
next	1.58;

1.58
date	2002.01.20.18.05.54;	author cagney;	state Exp;
branches;
next	1.57;

1.57
date	2002.01.20.04.23.29;	author cagney;	state Exp;
branches;
next	1.56;

1.56
date	2002.01.18.04.51.10;	author cagney;	state Exp;
branches;
next	1.55;

1.55
date	2002.01.15.19.06.22;	author cagney;	state Exp;
branches;
next	1.54;

1.54
date	2002.01.15.19.01.20;	author cagney;	state Exp;
branches;
next	1.53;

1.53
date	2002.01.15.01.29.24;	author cagney;	state Exp;
branches;
next	1.52;

1.52
date	2002.01.05.04.30.42;	author cagney;	state Exp;
branches;
next	1.51;

1.51
date	2002.01.04.05.20.09;	author cagney;	state Exp;
branches;
next	1.50;

1.50
date	2001.12.30.06.25.15;	author eliz;	state Exp;
branches;
next	1.49;

1.49
date	2001.12.20.21.16.31;	author jimb;	state Exp;
branches;
next	1.48;

1.48
date	2001.12.15.16.53.24;	author cagney;	state Exp;
branches;
next	1.47;

1.47
date	2001.12.02.02.57.18;	author cagney;	state Exp;
branches;
next	1.46;

1.46
date	2001.11.24.21.47.51;	author fnf;	state Exp;
branches;
next	1.45;

1.45
date	2001.11.21.22.26.48;	author jimb;	state Exp;
branches;
next	1.44;

1.44
date	2001.11.13.18.52.53;	author jimb;	state Exp;
branches;
next	1.43;

1.43
date	2001.11.06.11.01.22;	author corinna;	state Exp;
branches;
next	1.42;

1.42
date	2001.11.01.16.17.08;	author fnf;	state Exp;
branches;
next	1.41;

1.41
date	2001.10.16.01.58.07;	author cagney;	state Exp;
branches;
next	1.40;

1.40
date	2001.10.15.18.18.30;	author cagney;	state Exp;
branches;
next	1.39;

1.39
date	2001.09.08.10.53.45;	author kettenis;	state Exp;
branches;
next	1.38;

1.38
date	2001.09.08.10.43.27;	author kettenis;	state Exp;
branches;
next	1.37;

1.37
date	2001.09.08.10.28.20;	author kettenis;	state Exp;
branches;
next	1.36;

1.36
date	2001.09.06.12.01.36;	author ezannoni;	state Exp;
branches;
next	1.35;

1.35
date	2001.08.15.14.47.53;	author cgf;	state Exp;
branches;
next	1.34;

1.34
date	2001.07.31.17.30.56;	author drow;	state Exp;
branches;
next	1.33;

1.33
date	2001.07.26.18.38.29;	author cagney;	state Exp;
branches
	1.33.2.1;
next	1.32;

1.32
date	2001.07.24.10.35.42;	author kettenis;	state Exp;
branches;
next	1.31;

1.31
date	2001.07.20.01.14.05;	author juanito;	state Exp;
branches;
next	1.30;

1.30
date	2001.07.07.16.20.57;	author cagney;	state Exp;
branches;
next	1.29;

1.29
date	2001.07.04.20.52.14;	author cagney;	state Exp;
branches;
next	1.28;

1.28
date	2001.06.29.16.21.45;	author cagney;	state Exp;
branches;
next	1.27;

1.27
date	2001.05.14.20.24.23;	author cagney;	state Exp;
branches;
next	1.26;

1.26
date	2001.05.10.10.29.37;	author eliz;	state Exp;
branches;
next	1.25;

1.25
date	2001.05.03.10.24.19;	author eliz;	state Exp;
branches;
next	1.24;

1.24
date	2001.04.01.09.07.08;	author eliz;	state Exp;
branches;
next	1.23;

1.23
date	2001.03.26.11.51.50;	author eliz;	state Exp;
branches;
next	1.22;

1.22
date	2001.03.21.11.39.23;	author eliz;	state Exp;
branches;
next	1.21;

1.21
date	2001.03.20.18.16.28;	author cagney;	state Exp;
branches;
next	1.20;

1.20
date	2001.03.06.08.21.42;	author kevinb;	state Exp;
branches;
next	1.19;

1.19
date	2001.02.11.05.48.30;	author eliz;	state Exp;
branches;
next	1.18;

1.18
date	2001.01.04.15.39.28;	author nsd;	state Exp;
branches;
next	1.17;

1.17
date	2000.12.05.00.44.34;	author cagney;	state Exp;
branches;
next	1.16;

1.16
date	2000.11.24.11.02.59;	author cagney;	state Exp;
branches;
next	1.15;

1.15
date	2000.08.10.13.42.29;	author kettenis;	state Exp;
branches;
next	1.14;

1.14
date	2000.08.10.11.05.52;	author eliz;	state Exp;
branches;
next	1.13;

1.13
date	2000.05.31.10.18.58;	author cagney;	state Exp;
branches;
next	1.12;

1.12
date	2000.05.01.16.12.01;	author jimb;	state Exp;
branches;
next	1.11;

1.11
date	2000.05.01.04.34.06;	author cagney;	state Exp;
branches;
next	1.10;

1.10
date	2000.04.17.10.46.50;	author eliz;	state Exp;
branches;
next	1.9;

1.9
date	2000.04.14.18.46.17;	author jimb;	state Exp;
branches;
next	1.8;

1.8
date	2000.04.12.02.26.59;	author dberlin;	state Exp;
branches;
next	1.7;

1.7
date	2000.04.10.15.50.02;	author jimb;	state Exp;
branches;
next	1.6;

1.6
date	2000.04.10.15.33.19;	author jimb;	state Exp;
branches;
next	1.5;

1.5
date	2000.04.08.17.49.31;	author jimb;	state Exp;
branches
	1.5.2.1;
next	1.4;

1.4
date	2000.03.23.23.50.51;	author fnasser;	state Exp;
branches;
next	1.3;

1.3
date	2000.02.23.19.45.45;	author jimb;	state Exp;
branches;
next	1.2;

1.2
date	2000.02.22.19.22.25;	author jimb;	state Exp;
branches;
next	1.1;

1.1
date	99.04.16.01.34.07;	author shebs;	state Exp;
branches
	1.1.1.1;
next	;

1.339.2.1
date	2012.08.07.16.51.52;	author jkratoch;	state Exp;
branches;
next	;

1.330.2.1
date	2012.01.06.04.43.35;	author brobecke;	state Exp;
branches;
next	;

1.242.4.1
date	2006.08.28.07.48.46;	author nickrob;	state Exp;
branches;
next	;

1.239.6.1
date	2006.04.11.21.58.25;	author drow;	state Exp;
branches;
next	;

1.190.2.1
date	2004.06.14.22.25.31;	author cagney;	state Exp;
branches;
next	;

1.190.4.1
date	2004.03.21.23.57.40;	author cagney;	state Exp;
branches;
next	;

1.188.2.1
date	2004.03.27.17.38.00;	author drow;	state Exp;
branches;
next	1.188.2.2;

1.188.2.2
date	2004.09.16.17.01.36;	author drow;	state Exp;
branches;
next	;

1.161.2.1
date	2004.03.23.20.17.04;	author ezannoni;	state Exp;
branches;
next	;

1.155.2.1
date	2003.08.04.20.43.35;	author cagney;	state Exp;
branches;
next	1.155.2.2;

1.155.2.2
date	2003.08.18.20.12.32;	author cagney;	state Exp;
branches;
next	;

1.144.4.1
date	2003.06.03.20.54.42;	author cagney;	state Exp;
branches;
next	;

1.140.2.1
date	2003.05.04.11.37.47;	author kettenis;	state Exp;
branches;
next	1.140.2.2;

1.140.2.2
date	2003.05.18.09.44.33;	author kettenis;	state Exp;
branches;
next	;

1.138.2.1
date	2003.04.10.21.33.51;	author cagney;	state Exp;
branches;
next	;

1.134.2.1
date	2003.03.30.16.35.24;	author cagney;	state Exp;
branches;
next	;

1.127.2.1
date	2003.03.16.14.01.54;	author kettenis;	state Exp;
branches;
next	;

1.125.2.1
date	2003.03.05.05.00.04;	author cagney;	state Exp;
branches;
next	;

1.103.2.1
date	2002.10.26.17.12.16;	author drow;	state Exp;
branches;
next	1.103.2.2;

1.103.2.2
date	2003.12.14.20.27.43;	author drow;	state Exp;
branches;
next	1.103.2.3;

1.103.2.3
date	2004.02.09.19.43.53;	author drow;	state Exp;
branches;
next	;

1.102.2.1
date	2002.10.11.22.23.00;	author carlton;	state Exp;
branches;
next	1.102.2.2;

1.102.2.2
date	2002.10.25.23.49.56;	author carlton;	state Exp;
branches;
next	1.102.2.3;

1.102.2.3
date	2002.11.15.19.19.10;	author carlton;	state Exp;
branches;
next	1.102.2.4;

1.102.2.4
date	2002.12.23.19.39.07;	author carlton;	state Exp;
branches;
next	1.102.2.5;

1.102.2.5
date	2003.02.07.19.17.56;	author carlton;	state Exp;
branches;
next	1.102.2.6;

1.102.2.6
date	2003.03.06.00.56.35;	author carlton;	state Exp;
branches;
next	1.102.2.7;

1.102.2.7
date	2003.04.16.19.56.59;	author carlton;	state Exp;
branches;
next	1.102.2.8;

1.102.2.8
date	2003.05.01.00.46.55;	author carlton;	state Exp;
branches;
next	1.102.2.9;

1.102.2.9
date	2003.05.23.18.40.49;	author carlton;	state Exp;
branches;
next	1.102.2.10;

1.102.2.10
date	2003.06.27.21.50.18;	author carlton;	state Exp;
branches;
next	1.102.2.11;

1.102.2.11
date	2003.08.05.17.13.20;	author carlton;	state Exp;
branches;
next	1.102.2.12;

1.102.2.12
date	2003.09.17.21.28.46;	author carlton;	state Exp;
branches;
next	1.102.2.13;

1.102.2.13
date	2003.11.11.23.51.09;	author carlton;	state Exp;
branches;
next	1.102.2.14;

1.102.2.14
date	2004.01.26.19.11.39;	author carlton;	state Exp;
branches;
next	;

1.85.2.1
date	2002.06.20.01.36.06;	author kseitz;	state Exp;
branches;
next	1.85.2.2;

1.85.2.2
date	2002.07.22.21.47.10;	author kseitz;	state Exp;
branches;
next	1.85.2.3;

1.85.2.3
date	2002.08.09.18.34.31;	author kseitz;	state Exp;
branches;
next	1.85.2.4;

1.85.2.4
date	2002.08.30.22.52.50;	author kseitz;	state Exp;
branches;
next	1.85.2.5;

1.85.2.5
date	2002.10.01.00.46.22;	author kseitz;	state Exp;
branches;
next	1.85.2.6;

1.85.2.6
date	2002.11.03.22.29.13;	author ezannoni;	state Exp;
branches;
next	;

1.84.2.1
date	2002.06.15.16.43.12;	author cagney;	state Exp;
branches;
next	;

1.66.2.1
date	2002.04.19.19.37.03;	author eliz;	state Exp;
branches;
next	;

1.33.2.1
date	2001.07.31.17.25.57;	author drow;	state Exp;
branches;
next	1.33.2.2;

1.33.2.2
date	2001.08.15.16.20.33;	author cgf;	state Exp;
branches
	1.33.2.2.4.1;
next	1.33.2.3;

1.33.2.3
date	2001.12.30.06.19.47;	author eliz;	state Exp;
branches;
next	;

1.33.2.2.4.1
date	2002.01.03.05.40.50;	author cagney;	state Exp;
branches;
next	;

1.5.2.1
date	2000.04.12.05.16.56;	author cagney;	state Exp;
branches;
next	1.5.2.2;

1.5.2.2
date	2000.05.31.08.16.50;	author cagney;	state Exp;
branches;
next	;

1.1.1.1
date	99.04.16.01.34.07;	author shebs;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.04.26.18.25.59;	author shebs;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	99.05.05.14.43.11;	author shebs;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	99.05.25.18.05.58;	author jsm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	99.06.01.15.42.19;	author jsm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	99.06.07.19.18.53;	author jsm;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	99.06.14.18.08.36;	author jsm;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	99.06.21.13.27.08;	author jsm;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	99.06.28.16.02.15;	author jsm;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	99.07.05.17.55.30;	author jsm;	state Exp;
branches;
next	1.1.1.11;

1.1.1.11
date	99.07.19.23.28.30;	author jsm;	state Exp;
branches;
next	1.1.1.12;

1.1.1.12
date	99.08.09.21.34.06;	author jsm;	state Exp;
branches;
next	1.1.1.13;

1.1.1.13
date	99.08.16.19.54.25;	author jsm;	state Exp;
branches;
next	1.1.1.14;

1.1.1.14
date	99.08.23.22.36.30;	author jsm;	state Exp;
branches;
next	1.1.1.15;

1.1.1.15
date	99.08.31.01.06.32;	author jsm;	state Exp;
branches;
next	1.1.1.16;

1.1.1.16
date	99.09.08.23.59.45;	author shebs;	state Exp;
branches;
next	1.1.1.17;

1.1.1.17
date	99.09.22.03.25.17;	author jsm;	state Exp;
branches;
next	1.1.1.18;

1.1.1.18
date	99.10.12.04.37.26;	author jsm;	state Exp;
branches;
next	1.1.1.19;

1.1.1.19
date	99.10.19.02.46.41;	author jsm;	state Exp;
branches;
next	1.1.1.20;

1.1.1.20
date	99.12.14.01.05.39;	author jsm;	state Exp;
branches;
next	1.1.1.21;

1.1.1.21
date	2000.02.01.03.19.13;	author jsm;	state Exp;
branches;
next	;


desc
@@


1.356
log
@	* README: Update references to writing code for GDB.
	* configure.ac (build_warnings): Remove obsolete comment.
	* configure: Regenerate.
	* gdbarch.sh: Remove references to gdbint.texinfo.
	* gdbarch.h: Regenerate.
	* gdbtypes.c (objfile_type): Remove comments referencing internals
	manual and D10V.

	[gdb/doc]
	Remove the internals manual gdbint.texinfo.
	* Makefile.in (INFO_DEPS): Remove gdbint.info.
	(PDFFILES): Remove gdbint.pdf.
	(HTMLFILES): Remove gdbint/index.html.
	(HTMLFILES_INSTALL): Remove gdbint.
	(GDBINT_DOC_FILES): Remove.
	(dvi): Remove gdbint.dvi.
	(ps): Remove gdbint.ps.
	* gdbint.texinfo: Remove file.
	* gdb.texinfo (Maintenance Commands): Remove reference to gdbint.
@
text
@\input texinfo   @@c -*- texinfo -*-
@@setfilename gdbint.info
@@include gdb-cfg.texi
@@settitle @@value{GDBN} Internals
@@setchapternewpage off
@@dircategory Software development
@@direntry
* Gdb-Internals: (gdbint).	The GNU debugger's internals.
@@end direntry

@@copying
Copyright @@copyright{} 1990-2013 Free Software Foundation, Inc.
Contributed by Cygnus Solutions.  Written by John Gilmore.
Second Edition by Stan Shebs.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
Texts.  A copy of the license is included in the section entitled ``GNU
Free Documentation License''.
@@end copying

@@ifnottex
This file documents the internals of the GNU debugger @@value{GDBN}.

@@insertcopying
@@end ifnottex

@@syncodeindex vr fn

@@titlepage
@@title @@value{GDBN} Internals
@@subtitle A guide to the internals of the GNU debugger
@@author John Gilmore
@@author Cygnus Solutions
@@author Second Edition:
@@author Stan Shebs
@@author Cygnus Solutions
@@page
@@tex
\def\$#1${{#1}}  % Kluge: collect RCS revision info without $...$
\xdef\manvers{\$Revision$}  % For use in headers, footers too
{\parskip=0pt
\hfill Cygnus Solutions\par
\hfill \manvers\par
\hfill \TeX{}info \texinfoversion\par
}
@@end tex

@@vskip 0pt plus 1filll
@@insertcopying
@@end titlepage

@@contents

@@node Top
@@c Perhaps this should be the title of the document (but only for info,
@@c not for TeX).  Existing GNU manuals seem inconsistent on this point.
@@top Scope of this Document

This document documents the internals of the GNU debugger, @@value{GDBN}.  It
includes description of @@value{GDBN}'s key algorithms and operations, as well
as the mechanisms that adapt @@value{GDBN} to specific hosts and targets.

@@menu
* Summary::
* Overall Structure::
* Algorithms::
* User Interface::
* libgdb::
* Values::
* Stack Frames::
* Symbol Handling::
* Language Support::
* Host Definition::
* Target Architecture Definition::
* Target Descriptions::
* Target Vector Definition::
* Native Debugging::
* Support Libraries::
* Coding Standards::
* Misc Guidelines::
* Porting GDB::
* Versions and Branches::
* Start of New Year Procedure::
* Releasing GDB::
* Testsuite::
* Hints::

* GDB Observers::  @@value{GDBN} Currently available observers
* GNU Free Documentation License::  The license for this documentation
* Concept Index::
* Function and Variable Index::
@@end menu

@@node Summary
@@chapter Summary

@@menu
* Requirements::
* Contributors::
@@end menu

@@node Requirements
@@section Requirements
@@cindex requirements for @@value{GDBN}

Before diving into the internals, you should understand the formal
requirements and other expectations for @@value{GDBN}.  Although some
of these may seem obvious, there have been proposals for @@value{GDBN}
that have run counter to these requirements.

First of all, @@value{GDBN} is a debugger.  It's not designed to be a
front panel for embedded systems.  It's not a text editor.  It's not a
shell.  It's not a programming environment.

@@value{GDBN} is an interactive tool.  Although a batch mode is
available, @@value{GDBN}'s primary role is to interact with a human
programmer.

@@value{GDBN} should be responsive to the user.  A programmer hot on
the trail of a nasty bug, and operating under a looming deadline, is
going to be very impatient of everything, including the response time
to debugger commands.

@@value{GDBN} should be relatively permissive, such as for expressions.
While the compiler should be picky (or have the option to be made
picky), since source code lives for a long time usually, the
programmer doing debugging shouldn't be spending time figuring out to
mollify the debugger.

@@value{GDBN} will be called upon to deal with really large programs.
Executable sizes of 50 to 100 megabytes occur regularly, and we've
heard reports of programs approaching 1 gigabyte in size.

@@value{GDBN} should be able to run everywhere.  No other debugger is
available for even half as many configurations as @@value{GDBN}
supports.

@@node Contributors
@@section Contributors

The first edition of this document was written by John Gilmore of
Cygnus Solutions. The current second edition was written by Stan Shebs
of Cygnus Solutions, who continues to update the manual.

Over the years, many others have made additions and changes to this
document. This section attempts to record the significant contributors
to that effort. One of the virtues of free software is that everyone
is free to contribute to it; with regret, we cannot actually
acknowledge everyone here.

@@quotation
@@emph{Plea:} This section has only been added relatively recently (four
years after publication of the second edition). Additions to this
section are particularly welcome.  If you or your friends (or enemies,
to be evenhanded) have been unfairly omitted from this list, we would
like to add your names!
@@end quotation

A document such as this relies on being kept up to date by numerous
small updates by contributing engineers as they make changes to the
code base. The file @@file{ChangeLog} in the @@value{GDBN} distribution
approximates a blow-by-blow account. The most prolific contributors to
this important, but low profile task are Andrew Cagney (responsible
for over half the entries), Daniel Jacobowitz, Mark Kettenis, Jim
Blandy and Eli Zaretskii.

Eli Zaretskii and Daniel Jacobowitz wrote the sections documenting
watchpoints.

Jeremy Bennett updated the sections on initializing a new architecture
and register representation, and added the section on Frame Interpretation.


@@node Overall Structure

@@chapter Overall Structure

@@value{GDBN} consists of three major subsystems: user interface,
symbol handling (the @@dfn{symbol side}), and target system handling (the
@@dfn{target side}).

The user interface consists of several actual interfaces, plus
supporting code.

The symbol side consists of object file readers, debugging info
interpreters, symbol table management, source language expression
parsing, type and value printing.

The target side consists of execution control, stack frame analysis, and
physical target manipulation.

The target side/symbol side division is not formal, and there are a
number of exceptions.  For instance, core file support involves symbolic
elements (the basic core file reader is in BFD) and target elements (it
supplies the contents of memory and the values of registers).  Instead,
this division is useful for understanding how the minor subsystems
should fit together.

@@section The Symbol Side

The symbolic side of @@value{GDBN} can be thought of as ``everything
you can do in @@value{GDBN} without having a live program running''.
For instance, you can look at the types of variables, and evaluate
many kinds of expressions.

@@section The Target Side

The target side of @@value{GDBN} is the ``bits and bytes manipulator''.
Although it may make reference to symbolic info here and there, most
of the target side will run with only a stripped executable
available---or even no executable at all, in remote debugging cases.

Operations such as disassembly, stack frame crawls, and register
display, are able to work with no symbolic info at all.  In some cases,
such as disassembly, @@value{GDBN} will use symbolic info to present addresses
relative to symbols rather than as raw numbers, but it will work either
way.

@@section Configurations

@@cindex host
@@cindex target
@@dfn{Host} refers to attributes of the system where @@value{GDBN} runs.
@@dfn{Target} refers to the system where the program being debugged
executes.  In most cases they are the same machine, in which case a
third type of @@dfn{Native} attributes come into play.

Defines and include files needed to build on the host are host
support.  Examples are tty support, system defined types, host byte
order, host float format.  These are all calculated by @@code{autoconf}
when the debugger is built.

Defines and information needed to handle the target format are target
dependent.  Examples are the stack frame format, instruction set,
breakpoint instruction, registers, and how to set up and tear down the stack
to call a function.

Information that is only needed when the host and target are the same,
is native dependent.  One example is Unix child process support; if the
host and target are not the same, calling @@code{fork} to start the target
process is a bad idea.  The various macros needed for finding the
registers in the @@code{upage}, running @@code{ptrace}, and such are all
in the native-dependent files.

Another example of native-dependent code is support for features that
are really part of the target environment, but which require
@@code{#include} files that are only available on the host system.  Core
file handling and @@code{setjmp} handling are two common cases.

When you want to make @@value{GDBN} work as the traditional native debugger
on a system, you will need to supply both target and native information.

@@section Source Tree Structure
@@cindex @@value{GDBN} source tree structure

The @@value{GDBN} source directory has a mostly flat structure---there
are only a few subdirectories.  A file's name usually gives a hint as
to what it does; for example, @@file{stabsread.c} reads stabs,
@@file{dwarf2read.c} reads @@sc{DWARF 2}, etc.

Files that are related to some common task have names that share
common substrings.  For example, @@file{*-thread.c} files deal with
debugging threads on various platforms; @@file{*read.c} files deal with
reading various kinds of symbol and object files; @@file{inf*.c} files
deal with direct control of the @@dfn{inferior program} (@@value{GDBN}
parlance for the program being debugged).

There are several dozens of files in the @@file{*-tdep.c} family.
@@samp{tdep} stands for @@dfn{target-dependent code}---each of these
files implements debug support for a specific target architecture
(sparc, mips, etc).  Usually, only one of these will be used in a
specific @@value{GDBN} configuration (sometimes two, closely related).

Similarly, there are many @@file{*-nat.c} files, each one for native
debugging on a specific system (e.g., @@file{sparc-linux-nat.c} is for
native debugging of Sparc machines running the Linux kernel).

The few subdirectories of the source tree are:

@@table @@file
@@item cli
Code that implements @@dfn{CLI}, the @@value{GDBN} Command-Line
Interpreter.  @@xref{User Interface, Command Interpreter}.

@@item gdbserver
Code for the @@value{GDBN} remote server.

@@item gdbtk
Code for Insight, the @@value{GDBN} TK-based GUI front-end.

@@item mi
The @@dfn{GDB/MI}, the @@value{GDBN} Machine Interface interpreter.

@@item signals
Target signal translation code.

@@item tui
Code for @@dfn{TUI}, the @@value{GDBN} Text-mode full-screen User
Interface.  @@xref{User Interface, TUI}.
@@end table

@@node Algorithms

@@chapter Algorithms
@@cindex algorithms

@@value{GDBN} uses a number of debugging-specific algorithms.  They are
often not very complicated, but get lost in the thicket of special
cases and real-world issues.  This chapter describes the basic
algorithms and mentions some of the specific target definitions that
they use.

@@section Prologue Analysis

@@cindex prologue analysis
@@cindex call frame information
@@cindex CFI (call frame information)
To produce a backtrace and allow the user to manipulate older frames'
variables and arguments, @@value{GDBN} needs to find the base addresses
of older frames, and discover where those frames' registers have been
saved.  Since a frame's ``callee-saves'' registers get saved by
younger frames if and when they're reused, a frame's registers may be
scattered unpredictably across younger frames.  This means that
changing the value of a register-allocated variable in an older frame
may actually entail writing to a save slot in some younger frame.

Modern versions of GCC emit Dwarf call frame information (``CFI''),
which describes how to find frame base addresses and saved registers.
But CFI is not always available, so as a fallback @@value{GDBN} uses a
technique called @@dfn{prologue analysis} to find frame sizes and saved
registers.  A prologue analyzer disassembles the function's machine
code starting from its entry point, and looks for instructions that
allocate frame space, save the stack pointer in a frame pointer
register, save registers, and so on.  Obviously, this can't be done
accurately in general, but it's tractable to do well enough to be very
helpful.  Prologue analysis predates the GNU toolchain's support for
CFI; at one time, prologue analysis was the only mechanism
@@value{GDBN} used for stack unwinding at all, when the function
calling conventions didn't specify a fixed frame layout.

In the olden days, function prologues were generated by hand-written,
target-specific code in GCC, and treated as opaque and untouchable by
optimizers.  Looking at this code, it was usually straightforward to
write a prologue analyzer for @@value{GDBN} that would accurately
understand all the prologues GCC would generate.  However, over time
GCC became more aggressive about instruction scheduling, and began to
understand more about the semantics of the prologue instructions
themselves; in response, @@value{GDBN}'s analyzers became more complex
and fragile.  Keeping the prologue analyzers working as GCC (and the
instruction sets themselves) evolved became a substantial task.

@@cindex @@file{prologue-value.c}
@@cindex abstract interpretation of function prologues
@@cindex pseudo-evaluation of function prologues
To try to address this problem, the code in @@file{prologue-value.h}
and @@file{prologue-value.c} provides a general framework for writing
prologue analyzers that are simpler and more robust than ad-hoc
analyzers.  When we analyze a prologue using the prologue-value
framework, we're really doing ``abstract interpretation'' or
``pseudo-evaluation'': running the function's code in simulation, but
using conservative approximations of the values registers and memory
would hold when the code actually runs.  For example, if our function
starts with the instruction:

@@example
addi r1, 42     # add 42 to r1
@@end example
@@noindent
we don't know exactly what value will be in @@code{r1} after executing
this instruction, but we do know it'll be 42 greater than its original
value.

If we then see an instruction like:

@@example
addi r1, 22     # add 22 to r1
@@end example
@@noindent
we still don't know what @@code{r1's} value is, but again, we can say
it is now 64 greater than its original value.

If the next instruction were:

@@example
mov r2, r1      # set r2 to r1's value
@@end example
@@noindent
then we can say that @@code{r2's} value is now the original value of
@@code{r1} plus 64.

It's common for prologues to save registers on the stack, so we'll
need to track the values of stack frame slots, as well as the
registers.  So after an instruction like this:

@@example
mov (fp+4), r2
@@end example
@@noindent
then we'd know that the stack slot four bytes above the frame pointer
holds the original value of @@code{r1} plus 64.

And so on.

Of course, this can only go so far before it gets unreasonable.  If we
wanted to be able to say anything about the value of @@code{r1} after
the instruction:

@@example
xor r1, r3      # exclusive-or r1 and r3, place result in r1
@@end example
@@noindent
then things would get pretty complex.  But remember, we're just doing
a conservative approximation; if exclusive-or instructions aren't
relevant to prologues, we can just say @@code{r1}'s value is now
``unknown''.  We can ignore things that are too complex, if that loss of
information is acceptable for our application.

So when we say ``conservative approximation'' here, what we mean is an
approximation that is either accurate, or marked ``unknown'', but
never inaccurate.

Using this framework, a prologue analyzer is simply an interpreter for
machine code, but one that uses conservative approximations for the
contents of registers and memory instead of actual values.  Starting
from the function's entry point, you simulate instructions up to the
current PC, or an instruction that you don't know how to simulate.
Now you can examine the state of the registers and stack slots you've
kept track of.

@@itemize @@bullet

@@item
To see how large your stack frame is, just check the value of the
stack pointer register; if it's the original value of the SP
minus a constant, then that constant is the stack frame's size.
If the SP's value has been marked as ``unknown'', then that means
the prologue has done something too complex for us to track, and
we don't know the frame size.

@@item
To see where we've saved the previous frame's registers, we just
search the values we've tracked --- stack slots, usually, but
registers, too, if you want --- for something equal to the register's
original value.  If the calling conventions suggest a standard place
to save a given register, then we can check there first, but really,
anything that will get us back the original value will probably work.
@@end itemize

This does take some work.  But prologue analyzers aren't
quick-and-simple pattern patching to recognize a few fixed prologue
forms any more; they're big, hairy functions.  Along with inferior
function calls, prologue analysis accounts for a substantial portion
of the time needed to stabilize a @@value{GDBN} port.  So it's
worthwhile to look for an approach that will be easier to understand
and maintain.  In the approach described above:

@@itemize @@bullet

@@item
It's easier to see that the analyzer is correct: you just see
whether the analyzer properly (albeit conservatively) simulates
the effect of each instruction.

@@item
It's easier to extend the analyzer: you can add support for new
instructions, and know that you haven't broken anything that
wasn't already broken before.

@@item
It's orthogonal: to gather new information, you don't need to
complicate the code for each instruction.  As long as your domain
of conservative values is already detailed enough to tell you
what you need, then all the existing instruction simulations are
already gathering the right data for you.

@@end itemize

The file @@file{prologue-value.h} contains detailed comments explaining
the framework and how to use it.


@@section Breakpoint Handling

@@cindex breakpoints
In general, a breakpoint is a user-designated location in the program
where the user wants to regain control if program execution ever reaches
that location.

There are two main ways to implement breakpoints; either as ``hardware''
breakpoints or as ``software'' breakpoints.

@@cindex hardware breakpoints
@@cindex program counter
Hardware breakpoints are sometimes available as a builtin debugging
features with some chips.  Typically these work by having dedicated
register into which the breakpoint address may be stored.  If the PC
(shorthand for @@dfn{program counter})
ever matches a value in a breakpoint registers, the CPU raises an
exception and reports it to @@value{GDBN}.

Another possibility is when an emulator is in use; many emulators
include circuitry that watches the address lines coming out from the
processor, and force it to stop if the address matches a breakpoint's
address.

A third possibility is that the target already has the ability to do
breakpoints somehow; for instance, a ROM monitor may do its own
software breakpoints.  So although these are not literally ``hardware
breakpoints'', from @@value{GDBN}'s point of view they work the same;
@@value{GDBN} need not do anything more than set the breakpoint and wait
for something to happen.

Since they depend on hardware resources, hardware breakpoints may be
limited in number; when the user asks for more, @@value{GDBN} will
start trying to set software breakpoints.  (On some architectures,
notably the 32-bit x86 platforms, @@value{GDBN} cannot always know
whether there's enough hardware resources to insert all the hardware
breakpoints and watchpoints.  On those platforms, @@value{GDBN} prints
an error message only when the program being debugged is continued.)

@@cindex software breakpoints
Software breakpoints require @@value{GDBN} to do somewhat more work.
The basic theory is that @@value{GDBN} will replace a program
instruction with a trap, illegal divide, or some other instruction
that will cause an exception, and then when it's encountered,
@@value{GDBN} will take the exception and stop the program.  When the
user says to continue, @@value{GDBN} will restore the original
instruction, single-step, re-insert the trap, and continue on.

Since it literally overwrites the program being tested, the program area
must be writable, so this technique won't work on programs in ROM.  It
can also distort the behavior of programs that examine themselves,
although such a situation would be highly unusual.

Also, the software breakpoint instruction should be the smallest size of
instruction, so it doesn't overwrite an instruction that might be a jump
target, and cause disaster when the program jumps into the middle of the
breakpoint instruction.  (Strictly speaking, the breakpoint must be no
larger than the smallest interval between instructions that may be jump
targets; perhaps there is an architecture where only even-numbered
instructions may jumped to.)  Note that it's possible for an instruction
set not to have any instructions usable for a software breakpoint,
although in practice only the ARC has failed to define such an
instruction.

Basic breakpoint object handling is in @@file{breakpoint.c}.  However,
much of the interesting breakpoint action is in @@file{infrun.c}.

@@table @@code
@@cindex insert or remove software breakpoint
@@findex target_remove_breakpoint
@@findex target_insert_breakpoint
@@item target_remove_breakpoint (@@var{bp_tgt})
@@itemx target_insert_breakpoint (@@var{bp_tgt})
Insert or remove a software breakpoint at address
@@code{@@var{bp_tgt}->placed_address}.  Returns zero for success,
non-zero for failure.  On input, @@var{bp_tgt} contains the address of the
breakpoint, and is otherwise initialized to zero.  The fields of the
@@code{struct bp_target_info} pointed to by @@var{bp_tgt} are updated
to contain other information about the breakpoint on output.  The field
@@code{placed_address} may be updated if the breakpoint was placed at a
related address; the field @@code{shadow_contents} contains the real
contents of the bytes where the breakpoint has been inserted,
if reading memory would return the breakpoint instead of the
underlying memory; the field @@code{shadow_len} is the length of
memory cached in @@code{shadow_contents}, if any; and the field
@@code{placed_size} is optionally set and used by the target, if
it could differ from @@code{shadow_len}.

For example, the remote target @@samp{Z0} packet does not require
shadowing memory, so @@code{shadow_len} is left at zero.  However,
the length reported by @@code{gdbarch_breakpoint_from_pc} is cached in
@@code{placed_size}, so that a matching @@samp{z0} packet can be
used to remove the breakpoint.

@@cindex insert or remove hardware breakpoint
@@findex target_remove_hw_breakpoint
@@findex target_insert_hw_breakpoint
@@item target_remove_hw_breakpoint (@@var{bp_tgt})
@@itemx target_insert_hw_breakpoint (@@var{bp_tgt})
Insert or remove a hardware-assisted breakpoint at address
@@code{@@var{bp_tgt}->placed_address}.  Returns zero for success,
non-zero for failure.  See @@code{target_insert_breakpoint} for
a description of the @@code{struct bp_target_info} pointed to by
@@var{bp_tgt}; the @@code{shadow_contents} and
@@code{shadow_len} members are not used for hardware breakpoints,
but @@code{placed_size} may be.
@@end table

@@section Single Stepping

@@section Stepping over runtime loader dynamic symbol resolution code
@@cindex Procedure Linkage Table, stepping over
@@cindex PLT, stepping over
@@cindex resolver, stepping over

If the program uses ELF-style shared libraries, then calls to
functions in shared libraries go through stubs, which live in a table
called the PLT (@@dfn{Procedure Linkage Table}).  The first time the
function is called, the stub sends control to the dynamic linker,
which looks up the function's real address, patches the stub so that
future calls will go directly to the function, and then passes control
to the function.

If we are stepping at the source level, we don't want to see any of
this --- we just want to skip over the stub and the dynamic linker.
The simple approach is to single-step until control leaves the dynamic
linker.

However, on some systems (e.g., Red Hat's 5.2 distribution) the
dynamic linker calls functions in the shared C library, so you can't
tell from the PC alone whether the dynamic linker is still running.
In this case, we use a step-resume breakpoint to get us past the
dynamic linker, as if we were using @@code{next} to step over a
function call.

The @@code{in_solib_dynsym_resolve_code} function says whether we're in
the dynamic linker code or not.  Normally, this means we single-step.
However, if @@code{gdbarch_skip_solib_resolver} then returns non-zero,
then its value is an address where we can place a step-resume
breakpoint to get past the linker's symbol resolution function.

The @@code{in_dynsym_resolve_code} hook of the @@code{target_so_ops}
vector can generally be implemented in a pretty portable way, by
comparing the PC against the address ranges of the dynamic linker's
sections.

The @@code{gdbarch_skip_solib_resolver} implementation is generally
going to be system-specific, since it depends on internal details of
the dynamic linker.  It's usually not too hard to figure out where to
put a breakpoint, but it certainly isn't portable.
@@code{gdbarch_skip_solib_resolver} should do plenty of sanity
checking.  If it can't figure things out, returning zero and getting
the (possibly confusing) stepping behavior is better than signaling an
error, which will obscure the change in the inferior's state.  */

@@section Signal Handling

@@section Thread Handling

@@section Inferior Function Calls

@@section Longjmp Support

@@cindex @@code{longjmp} debugging
@@value{GDBN} has support for figuring out that the target is doing a
@@code{longjmp} and for stopping at the target of the jump, if we are
stepping.  This is done with a few specialized internal breakpoints,
which are visible in the output of the @@samp{maint info breakpoint}
command.

@@findex gdbarch_get_longjmp_target
To make this work, you need to define a function called
@@code{gdbarch_get_longjmp_target}, which will examine the
@@code{jmp_buf} structure and extract the @@code{longjmp} target address.
Since @@code{jmp_buf} is target specific and typically defined in a
target header not available to @@value{GDBN}, you will need to
determine the offset of the PC manually and return that; many targets
define a @@code{jb_pc_offset} field in the tdep structure to save the
value once calculated.

@@section Watchpoints
@@cindex watchpoints

Watchpoints are a special kind of breakpoints (@@pxref{Algorithms,
breakpoints}) which break when data is accessed rather than when some
instruction is executed.  When you have data which changes without
your knowing what code does that, watchpoints are the silver bullet to
hunt down and kill such bugs.

@@cindex hardware watchpoints
@@cindex software watchpoints
Watchpoints can be either hardware-assisted or not; the latter type is
known as ``software watchpoints.''  @@value{GDBN} always uses
hardware-assisted watchpoints if they are available, and falls back on
software watchpoints otherwise.  Typical situations where @@value{GDBN}
will use software watchpoints are:

@@itemize @@bullet
@@item
The watched memory region is too large for the underlying hardware
watchpoint support.  For example, each x86 debug register can watch up
to 4 bytes of memory, so trying to watch data structures whose size is
more than 16 bytes will cause @@value{GDBN} to use software
watchpoints.

@@item
The value of the expression to be watched depends on data held in
registers (as opposed to memory).

@@item
Too many different watchpoints requested.  (On some architectures,
this situation is impossible to detect until the debugged program is
resumed.)  Note that x86 debug registers are used both for hardware
breakpoints and for watchpoints, so setting too many hardware
breakpoints might cause watchpoint insertion to fail.

@@item
No hardware-assisted watchpoints provided by the target
implementation.
@@end itemize

Software watchpoints are very slow, since @@value{GDBN} needs to
single-step the program being debugged and test the value of the
watched expression(s) after each instruction.  The rest of this
section is mostly irrelevant for software watchpoints.

When the inferior stops, @@value{GDBN} tries to establish, among other
possible reasons, whether it stopped due to a watchpoint being hit.
It first uses @@code{STOPPED_BY_WATCHPOINT} to see if any watchpoint
was hit.  If not, all watchpoint checking is skipped.

Then @@value{GDBN} calls @@code{target_stopped_data_address} exactly
once.  This method returns the address of the watchpoint which
triggered, if the target can determine it.  If the triggered address
is available, @@value{GDBN} compares the address returned by this
method with each watched memory address in each active watchpoint.
For data-read and data-access watchpoints, @@value{GDBN} announces
every watchpoint that watches the triggered address as being hit.
For this reason, data-read and data-access watchpoints
@@emph{require} that the triggered address be available; if not, read
and access watchpoints will never be considered hit.  For data-write
watchpoints, if the triggered address is available, @@value{GDBN}
considers only those watchpoints which match that address;
otherwise, @@value{GDBN} considers all data-write watchpoints.  For
each data-write watchpoint that @@value{GDBN} considers, it evaluates
the expression whose value is being watched, and tests whether the
watched value has changed.  Watchpoints whose watched values have
changed are announced as hit.

@@c FIXME move these to the main lists of target/native defns

@@value{GDBN} uses several macros and primitives to support hardware
watchpoints:

@@table @@code
@@findex TARGET_CAN_USE_HARDWARE_WATCHPOINT
@@item TARGET_CAN_USE_HARDWARE_WATCHPOINT (@@var{type}, @@var{count}, @@var{other})
Return the number of hardware watchpoints of type @@var{type} that are
possible to be set.  The value is positive if @@var{count} watchpoints
of this type can be set, zero if setting watchpoints of this type is
not supported, and negative if @@var{count} is more than the maximum
number of watchpoints of type @@var{type} that can be set.  @@var{other}
is non-zero if other types of watchpoints are currently enabled (there
are architectures which cannot set watchpoints of different types at
the same time).

@@findex TARGET_REGION_OK_FOR_HW_WATCHPOINT
@@item TARGET_REGION_OK_FOR_HW_WATCHPOINT (@@var{addr}, @@var{len})
Return non-zero if hardware watchpoints can be used to watch a region
whose address is @@var{addr} and whose length in bytes is @@var{len}.

@@cindex insert or remove hardware watchpoint
@@findex target_insert_watchpoint
@@findex target_remove_watchpoint
@@item target_insert_watchpoint (@@var{addr}, @@var{len}, @@var{type})
@@itemx target_remove_watchpoint (@@var{addr}, @@var{len}, @@var{type})
Insert or remove a hardware watchpoint starting at @@var{addr}, for
@@var{len} bytes.  @@var{type} is the watchpoint type, one of the
possible values of the enumerated data type @@code{target_hw_bp_type},
defined by @@file{breakpoint.h} as follows:

@@smallexample
 enum target_hw_bp_type
   @@{
     hw_write   = 0, /* Common (write) HW watchpoint */
     hw_read    = 1, /* Read    HW watchpoint */
     hw_access  = 2, /* Access (read or write) HW watchpoint */
     hw_execute = 3  /* Execute HW breakpoint */
   @@};
@@end smallexample

@@noindent
These two macros should return 0 for success, non-zero for failure.

@@findex target_stopped_data_address
@@item target_stopped_data_address (@@var{addr_p})
If the inferior has some watchpoint that triggered, place the address
associated with the watchpoint at the location pointed to by
@@var{addr_p} and return non-zero.  Otherwise, return zero.  This
is required for data-read and data-access watchpoints.  It is
not required for data-write watchpoints, but @@value{GDBN} uses
it to improve handling of those also.

@@value{GDBN} will only call this method once per watchpoint stop,
immediately after calling @@code{STOPPED_BY_WATCHPOINT}.  If the
target's watchpoint indication is sticky, i.e., stays set after
resuming, this method should clear it.  For instance, the x86 debug
control register has sticky triggered flags.

@@findex target_watchpoint_addr_within_range
@@item target_watchpoint_addr_within_range (@@var{target}, @@var{addr}, @@var{start}, @@var{length})
Check whether @@var{addr} (as returned by @@code{target_stopped_data_address})
lies within the hardware-defined watchpoint region described by
@@var{start} and @@var{length}.  This only needs to be provided if the
granularity of a watchpoint is greater than one byte, i.e., if the
watchpoint can also trigger on nearby addresses outside of the watched
region.

@@findex HAVE_STEPPABLE_WATCHPOINT
@@item HAVE_STEPPABLE_WATCHPOINT
If defined to a non-zero value, it is not necessary to disable a
watchpoint to step over it.  Like @@code{gdbarch_have_nonsteppable_watchpoint},
this is usually set when watchpoints trigger at the instruction
which will perform an interesting read or write.  It should be
set if there is a temporary disable bit which allows the processor
to step over the interesting instruction without raising the
watchpoint exception again.

@@findex gdbarch_have_nonsteppable_watchpoint 
@@item int gdbarch_have_nonsteppable_watchpoint (@@var{gdbarch})
If it returns a non-zero value, @@value{GDBN} should disable a
watchpoint to step the inferior over it.  This is usually set when
watchpoints trigger at the instruction which will perform an
interesting read or write.

@@findex HAVE_CONTINUABLE_WATCHPOINT
@@item HAVE_CONTINUABLE_WATCHPOINT
If defined to a non-zero value, it is possible to continue the
inferior after a watchpoint has been hit.  This is usually set
when watchpoints trigger at the instruction following an interesting
read or write.

@@findex STOPPED_BY_WATCHPOINT
@@item STOPPED_BY_WATCHPOINT (@@var{wait_status})
Return non-zero if stopped by a watchpoint.  @@var{wait_status} is of
the type @@code{struct target_waitstatus}, defined by @@file{target.h}.
Normally, this macro is defined to invoke the function pointed to by
the @@code{to_stopped_by_watchpoint} member of the structure (of the
type @@code{target_ops}, defined on @@file{target.h}) that describes the
target-specific operations; @@code{to_stopped_by_watchpoint} ignores
the @@var{wait_status} argument.

@@value{GDBN} does not require the non-zero value returned by
@@code{STOPPED_BY_WATCHPOINT} to be 100% correct, so if a target cannot
determine for sure whether the inferior stopped due to a watchpoint,
it could return non-zero ``just in case''.
@@end table

@@subsection Watchpoints and Threads
@@cindex watchpoints, with threads

@@value{GDBN} only supports process-wide watchpoints, which trigger
in all threads.  @@value{GDBN} uses the thread ID to make watchpoints
act as if they were thread-specific, but it cannot set hardware
watchpoints that only trigger in a specific thread.  Therefore, even
if the target supports threads, per-thread debug registers, and
watchpoints which only affect a single thread, it should set the
per-thread debug registers for all threads to the same value.  On
@@sc{gnu}/Linux native targets, this is accomplished by using
@@code{ALL_LWPS} in @@code{target_insert_watchpoint} and
@@code{target_remove_watchpoint} and by using
@@code{linux_set_new_thread} to register a handler for newly created
threads.

@@value{GDBN}'s @@sc{gnu}/Linux support only reports a single event
at a time, although multiple events can trigger simultaneously for
multi-threaded programs.  When multiple events occur, @@file{linux-nat.c}
queues subsequent events and returns them the next time the program
is resumed.  This means that @@code{STOPPED_BY_WATCHPOINT} and
@@code{target_stopped_data_address} only need to consult the current
thread's state---the thread indicated by @@code{inferior_ptid}.  If
two threads have hit watchpoints simultaneously, those routines
will be called a second time for the second thread.

@@subsection x86 Watchpoints
@@cindex x86 debug registers
@@cindex watchpoints, on x86

The 32-bit Intel x86 (a.k.a.@@: ia32) processors feature special debug
registers designed to facilitate debugging.  @@value{GDBN} provides a
generic library of functions that x86-based ports can use to implement
support for watchpoints and hardware-assisted breakpoints.  This
subsection documents the x86 watchpoint facilities in @@value{GDBN}.

(At present, the library functions read and write debug registers directly, and are
thus only available for native configurations.)

To use the generic x86 watchpoint support, a port should do the
following:

@@itemize @@bullet
@@findex I386_USE_GENERIC_WATCHPOINTS
@@item
Define the macro @@code{I386_USE_GENERIC_WATCHPOINTS} somewhere in the
target-dependent headers.

@@item
Include the @@file{config/i386/nm-i386.h} header file @@emph{after}
defining @@code{I386_USE_GENERIC_WATCHPOINTS}.

@@item
Add @@file{i386-nat.o} to the value of the Make variable
@@code{NATDEPFILES} (@@pxref{Native Debugging, NATDEPFILES}).

@@item
Provide implementations for the @@code{I386_DR_LOW_*} macros described
below.  Typically, each macro should call a target-specific function
which does the real work.
@@end itemize

The x86 watchpoint support works by maintaining mirror images of the
debug registers.  Values are copied between the mirror images and the
real debug registers via a set of macros which each target needs to
provide:

@@table @@code
@@findex I386_DR_LOW_SET_CONTROL
@@item I386_DR_LOW_SET_CONTROL (@@var{val})
Set the Debug Control (DR7) register to the value @@var{val}.

@@findex I386_DR_LOW_SET_ADDR
@@item I386_DR_LOW_SET_ADDR (@@var{idx}, @@var{addr})
Put the address @@var{addr} into the debug register number @@var{idx}.

@@findex I386_DR_LOW_RESET_ADDR
@@item I386_DR_LOW_RESET_ADDR (@@var{idx})
Reset (i.e.@@: zero out) the address stored in the debug register
number @@var{idx}.

@@findex I386_DR_LOW_GET_STATUS
@@item I386_DR_LOW_GET_STATUS
Return the value of the Debug Status (DR6) register.  This value is
used immediately after it is returned by
@@code{I386_DR_LOW_GET_STATUS}, so as to support per-thread status
register values.
@@end table

For each one of the 4 debug registers (whose indices are from 0 to 3)
that store addresses, a reference count is maintained by @@value{GDBN},
to allow sharing of debug registers by several watchpoints.  This
allows users to define several watchpoints that watch the same
expression, but with different conditions and/or commands, without
wasting debug registers which are in short supply.  @@value{GDBN}
maintains the reference counts internally, targets don't have to do
anything to use this feature.

The x86 debug registers can each watch a region that is 1, 2, or 4
bytes long.  The ia32 architecture requires that each watched region
be appropriately aligned: 2-byte region on 2-byte boundary, 4-byte
region on 4-byte boundary.  However, the x86 watchpoint support in
@@value{GDBN} can watch unaligned regions and regions larger than 4
bytes (up to 16 bytes) by allocating several debug registers to watch
a single region.  This allocation of several registers per a watched
region is also done automatically without target code intervention.

The generic x86 watchpoint support provides the following API for the
@@value{GDBN}'s application code:

@@table @@code
@@findex i386_region_ok_for_watchpoint
@@item i386_region_ok_for_watchpoint (@@var{addr}, @@var{len})
The macro @@code{TARGET_REGION_OK_FOR_HW_WATCHPOINT} is set to call
this function.  It counts the number of debug registers required to
watch a given region, and returns a non-zero value if that number is
less than 4, the number of debug registers available to x86
processors.

@@findex i386_stopped_data_address
@@item i386_stopped_data_address (@@var{addr_p})
The target function
@@code{target_stopped_data_address} is set to call this function.
This
function examines the breakpoint condition bits in the DR6 Debug
Status register, as returned by the @@code{I386_DR_LOW_GET_STATUS}
macro, and returns the address associated with the first bit that is
set in DR6.

@@findex i386_stopped_by_watchpoint
@@item i386_stopped_by_watchpoint (void)
The macro @@code{STOPPED_BY_WATCHPOINT}
is set to call this function.  The
argument passed to @@code{STOPPED_BY_WATCHPOINT} is ignored.  This
function examines the breakpoint condition bits in the DR6 Debug
Status register, as returned by the @@code{I386_DR_LOW_GET_STATUS}
macro, and returns true if any bit is set.  Otherwise, false is
returned.

@@findex i386_insert_watchpoint
@@findex i386_remove_watchpoint
@@item i386_insert_watchpoint (@@var{addr}, @@var{len}, @@var{type})
@@itemx i386_remove_watchpoint (@@var{addr}, @@var{len}, @@var{type})
Insert or remove a watchpoint.  The macros
@@code{target_insert_watchpoint} and @@code{target_remove_watchpoint}
are set to call these functions.  @@code{i386_insert_watchpoint} first
looks for a debug register which is already set to watch the same
region for the same access types; if found, it just increments the
reference count of that debug register, thus implementing debug
register sharing between watchpoints.  If no such register is found,
the function looks for a vacant debug register, sets its mirrored
value to @@var{addr}, sets the mirrored value of DR7 Debug Control
register as appropriate for the @@var{len} and @@var{type} parameters,
and then passes the new values of the debug register and DR7 to the
inferior by calling @@code{I386_DR_LOW_SET_ADDR} and
@@code{I386_DR_LOW_SET_CONTROL}.  If more than one debug register is
required to cover the given region, the above process is repeated for
each debug register.

@@code{i386_remove_watchpoint} does the opposite: it resets the address
in the mirrored value of the debug register and its read/write and
length bits in the mirrored value of DR7, then passes these new
values to the inferior via @@code{I386_DR_LOW_RESET_ADDR} and
@@code{I386_DR_LOW_SET_CONTROL}.  If a register is shared by several
watchpoints, each time a @@code{i386_remove_watchpoint} is called, it
decrements the reference count, and only calls
@@code{I386_DR_LOW_RESET_ADDR} and @@code{I386_DR_LOW_SET_CONTROL} when
the count goes to zero.

@@findex i386_insert_hw_breakpoint
@@findex i386_remove_hw_breakpoint
@@item i386_insert_hw_breakpoint (@@var{bp_tgt})
@@itemx i386_remove_hw_breakpoint (@@var{bp_tgt})
These functions insert and remove hardware-assisted breakpoints.  The
macros @@code{target_insert_hw_breakpoint} and
@@code{target_remove_hw_breakpoint} are set to call these functions.
The argument is a @@code{struct bp_target_info *}, as described in
the documentation for @@code{target_insert_breakpoint}.
These functions work like @@code{i386_insert_watchpoint} and
@@code{i386_remove_watchpoint}, respectively, except that they set up
the debug registers to watch instruction execution, and each
hardware-assisted breakpoint always requires exactly one debug
register.

@@findex i386_cleanup_dregs
@@item i386_cleanup_dregs (void)
This function clears all the reference counts, addresses, and control
bits in the mirror images of the debug registers.  It doesn't affect
the actual debug registers in the inferior process.
@@end table

@@noindent
@@strong{Notes:}
@@enumerate 1
@@item
x86 processors support setting watchpoints on I/O reads or writes.
However, since no target supports this (as of March 2001), and since
@@code{enum target_hw_bp_type} doesn't even have an enumeration for I/O
watchpoints, this feature is not yet available to @@value{GDBN} running
on x86.

@@item
x86 processors can enable watchpoints locally, for the current task
only, or globally, for all the tasks.  For each debug register,
there's a bit in the DR7 Debug Control register that determines
whether the associated address is watched locally or globally.  The
current implementation of x86 watchpoint support in @@value{GDBN}
always sets watchpoints to be locally enabled, since global
watchpoints might interfere with the underlying OS and are probably
unavailable in many platforms.
@@end enumerate

@@section Checkpoints
@@cindex checkpoints
@@cindex restart
In the abstract, a checkpoint is a point in the execution history of
the program, which the user may wish to return to at some later time.

Internally, a checkpoint is a saved copy of the program state, including
whatever information is required in order to restore the program to that
state at a later time.  This can be expected to include the state of 
registers and memory, and may include external state such as the state
of open files and devices.

There are a number of ways in which checkpoints may be implemented
in gdb, e.g.@@: as corefiles, as forked processes, and as some opaque
method implemented on the target side.

A corefile can be used to save an image of target memory and register
state, which can in principle be restored later --- but corefiles do
not typically include information about external entities such as 
open files.  Currently this method is not implemented in gdb.

A forked process can save the state of user memory and registers, 
as well as some subset of external (kernel) state.  This method 
is used to implement checkpoints on Linux, and in principle might
be used on other systems.

Some targets, e.g.@@: simulators, might have their own built-in 
method for saving checkpoints, and gdb might be able to take
advantage of that capability without necessarily knowing any
details of how it is done.


@@section Observing changes in @@value{GDBN} internals
@@cindex observer pattern interface
@@cindex notifications about changes in internals

In order to function properly, several modules need to be notified when
some changes occur in the @@value{GDBN} internals.  Traditionally, these
modules have relied on several paradigms, the most common ones being
hooks and gdb-events.  Unfortunately, none of these paradigms was
versatile enough to become the standard notification mechanism in
@@value{GDBN}.  The fact that they only supported one ``client'' was also
a strong limitation.

A new paradigm, based on the Observer pattern of the @@cite{Design
Patterns} book, has therefore been implemented.  The goal was to provide
a new interface overcoming the issues with the notification mechanisms
previously available.  This new interface needed to be strongly typed,
easy to extend, and versatile enough to be used as the standard
interface when adding new notifications.

See @@ref{GDB Observers} for a brief description of the observers
currently implemented in GDB. The rationale for the current
implementation is also briefly discussed.

@@node User Interface

@@chapter User Interface

@@value{GDBN} has several user interfaces, of which the traditional
command-line interface is perhaps the most familiar.

@@section Command Interpreter

@@cindex command interpreter
@@cindex CLI
The command interpreter in @@value{GDBN} is fairly simple.  It is designed to
allow for the set of commands to be augmented dynamically, and also
has a recursive subcommand capability, where the first argument to
a command may itself direct a lookup on a different command list.

For instance, the @@samp{set} command just starts a lookup on the
@@code{setlist} command list, while @@samp{set thread} recurses
to the @@code{set_thread_cmd_list}.

@@findex add_cmd
@@findex add_com
To add commands in general, use @@code{add_cmd}.  @@code{add_com} adds to
the main command list, and should be used for those commands.  The usual
place to add commands is in the @@code{_initialize_@@var{xyz}} routines at
the ends of most source files.

@@findex add_setshow_cmd
@@findex add_setshow_cmd_full
To add paired @@samp{set} and @@samp{show} commands, use
@@code{add_setshow_cmd} or @@code{add_setshow_cmd_full}.  The former is
a slightly simpler interface which is useful when you don't need to
further modify the new command structures, while the latter returns
the new command structures for manipulation.

@@cindex deprecating commands
@@findex deprecate_cmd
Before removing commands from the command set it is a good idea to
deprecate them for some time.  Use @@code{deprecate_cmd} on commands or
aliases to set the deprecated flag.  @@code{deprecate_cmd} takes a
@@code{struct cmd_list_element} as it's first argument.  You can use the
return value from @@code{add_com} or @@code{add_cmd} to deprecate the
command immediately after it is created.

The first time a command is used the user will be warned and offered a
replacement (if one exists). Note that the replacement string passed to
@@code{deprecate_cmd} should be the full name of the command, i.e., the
entire string the user should type at the command line.

@@anchor{UI-Independent Output}
@@section UI-Independent Output---the @@code{ui_out} Functions
@@c This section is based on the documentation written by Fernando
@@c Nasser <fnasser@@redhat.com>.

@@cindex @@code{ui_out} functions
The @@code{ui_out} functions present an abstraction level for the
@@value{GDBN} output code.  They hide the specifics of different user
interfaces supported by @@value{GDBN}, and thus free the programmer
from the need to write several versions of the same code, one each for
every UI, to produce output.

@@subsection Overview and Terminology

In general, execution of each @@value{GDBN} command produces some sort
of output, and can even generate an input request.

Output can be generated for the following purposes:

@@itemize @@bullet
@@item
to display a @@emph{result} of an operation;

@@item
to convey @@emph{info} or produce side-effects of a requested
operation;

@@item
to provide a @@emph{notification} of an asynchronous event (including
progress indication of a prolonged asynchronous operation);

@@item
to display @@emph{error messages} (including warnings);

@@item
to show @@emph{debug data};

@@item
to @@emph{query} or prompt a user for input (a special case).
@@end itemize

@@noindent
This section mainly concentrates on how to build result output,
although some of it also applies to other kinds of output.

Generation of output that displays the results of an operation
involves one or more of the following:

@@itemize @@bullet
@@item
output of the actual data

@@item
formatting the output as appropriate for console output, to make it
easily readable by humans

@@item
machine oriented formatting--a more terse formatting to allow for easy
parsing by programs which read @@value{GDBN}'s output

@@item
annotation, whose purpose is to help legacy GUIs to identify interesting
parts in the output
@@end itemize

The @@code{ui_out} routines take care of the first three aspects.
Annotations are provided by separate annotation routines.  Note that use
of annotations for an interface between a GUI and @@value{GDBN} is
deprecated.

Output can be in the form of a single item, which we call a @@dfn{field};
a @@dfn{list} consisting of identical fields; a @@dfn{tuple} consisting of
non-identical fields; or a @@dfn{table}, which is a tuple consisting of a
header and a body.  In a BNF-like form:

@@table @@code
@@item <table> @@expansion{}
@@code{<header> <body>}
@@item <header> @@expansion{}
@@code{@@{ <column> @@}}
@@item <column> @@expansion{}
@@code{<width> <alignment> <title>}
@@item <body> @@expansion{}
@@code{@@{<row>@@}}
@@end table


@@subsection General Conventions

Most @@code{ui_out} routines are of type @@code{void}, the exceptions are
@@code{ui_out_stream_new} (which returns a pointer to the newly created
object) and the @@code{make_cleanup} routines.

The first parameter is always the @@code{ui_out} vector object, a pointer
to a @@code{struct ui_out}.

The @@var{format} parameter is like in @@code{printf} family of functions.
When it is present, there must also be a variable list of arguments
sufficient used to satisfy the @@code{%} specifiers in the supplied
format.

When a character string argument is not used in a @@code{ui_out} function
call, a @@code{NULL} pointer has to be supplied instead.


@@subsection Table, Tuple and List Functions

@@cindex list output functions
@@cindex table output functions
@@cindex tuple output functions
This section introduces @@code{ui_out} routines for building lists,
tuples and tables.  The routines to output the actual data items
(fields) are presented in the next section.

To recap: A @@dfn{tuple} is a sequence of @@dfn{fields}, each field
containing information about an object; a @@dfn{list} is a sequence of
fields where each field describes an identical object.

Use the @@dfn{table} functions when your output consists of a list of
rows (tuples) and the console output should include a heading.  Use this
even when you are listing just one object but you still want the header.

@@cindex nesting level in @@code{ui_out} functions
Tables can not be nested.  Tuples and lists can be nested up to a
maximum of five levels.

The overall structure of the table output code is something like this:

@@smallexample
  ui_out_table_begin
    ui_out_table_header
    @@dots{}
    ui_out_table_body
      ui_out_tuple_begin
        ui_out_field_*
        @@dots{}
      ui_out_tuple_end
      @@dots{}
  ui_out_table_end
@@end smallexample

Here is the description of table-, tuple- and list-related @@code{ui_out}
functions:

@@deftypefun void ui_out_table_begin (struct ui_out *@@var{uiout}, int @@var{nbrofcols}, int @@var{nr_rows}, const char *@@var{tblid})
The function @@code{ui_out_table_begin} marks the beginning of the output
of a table.  It should always be called before any other @@code{ui_out}
function for a given table.  @@var{nbrofcols} is the number of columns in
the table. @@var{nr_rows} is the number of rows in the table.
@@var{tblid} is an optional string identifying the table.  The string
pointed to by @@var{tblid} is copied by the implementation of
@@code{ui_out_table_begin}, so the application can free the string if it
was @@code{malloc}ed.

The companion function @@code{ui_out_table_end}, described below, marks
the end of the table's output.
@@end deftypefun

@@deftypefun void ui_out_table_header (struct ui_out *@@var{uiout}, int @@var{width}, enum ui_align @@var{alignment}, const char *@@var{colhdr})
@@code{ui_out_table_header} provides the header information for a single
table column.  You call this function several times, one each for every
column of the table, after @@code{ui_out_table_begin}, but before
@@code{ui_out_table_body}.

The value of @@var{width} gives the column width in characters.  The
value of @@var{alignment} is one of @@code{left}, @@code{center}, and
@@code{right}, and it specifies how to align the header: left-justify,
center, or right-justify it.  @@var{colhdr} points to a string that
specifies the column header; the implementation copies that string, so
column header strings in @@code{malloc}ed storage can be freed after the
call.
@@end deftypefun

@@deftypefun void ui_out_table_body (struct ui_out *@@var{uiout})
This function delimits the table header from the table body.
@@end deftypefun

@@deftypefun void ui_out_table_end (struct ui_out *@@var{uiout})
This function signals the end of a table's output.  It should be called
after the table body has been produced by the list and field output
functions.

There should be exactly one call to @@code{ui_out_table_end} for each
call to @@code{ui_out_table_begin}, otherwise the @@code{ui_out} functions
will signal an internal error.
@@end deftypefun

The output of the tuples that represent the table rows must follow the
call to @@code{ui_out_table_body} and precede the call to
@@code{ui_out_table_end}.  You build a tuple by calling
@@code{ui_out_tuple_begin} and @@code{ui_out_tuple_end}, with suitable
calls to functions which actually output fields between them.

@@deftypefun void ui_out_tuple_begin (struct ui_out *@@var{uiout}, const char *@@var{id})
This function marks the beginning of a tuple output.  @@var{id} points
to an optional string that identifies the tuple; it is copied by the
implementation, and so strings in @@code{malloc}ed storage can be freed
after the call.
@@end deftypefun

@@deftypefun void ui_out_tuple_end (struct ui_out *@@var{uiout})
This function signals an end of a tuple output.  There should be exactly
one call to @@code{ui_out_tuple_end} for each call to
@@code{ui_out_tuple_begin}, otherwise an internal @@value{GDBN} error will
be signaled.
@@end deftypefun

@@deftypefun {struct cleanup *} make_cleanup_ui_out_tuple_begin_end (struct ui_out *@@var{uiout}, const char *@@var{id})
This function first opens the tuple and then establishes a cleanup
(@@pxref{Misc Guidelines, Cleanups}) to close the tuple.
It provides a convenient and correct implementation of the
non-portable@@footnote{The function cast is not portable ISO C.} code sequence:
@@smallexample
struct cleanup *old_cleanup;
ui_out_tuple_begin (uiout, "...");
old_cleanup = make_cleanup ((void(*)(void *)) ui_out_tuple_end,
                            uiout);
@@end smallexample
@@end deftypefun

@@deftypefun void ui_out_list_begin (struct ui_out *@@var{uiout}, const char *@@var{id})
This function marks the beginning of a list output.  @@var{id} points to
an optional string that identifies the list; it is copied by the
implementation, and so strings in @@code{malloc}ed storage can be freed
after the call.
@@end deftypefun

@@deftypefun void ui_out_list_end (struct ui_out *@@var{uiout})
This function signals an end of a list output.  There should be exactly
one call to @@code{ui_out_list_end} for each call to
@@code{ui_out_list_begin}, otherwise an internal @@value{GDBN} error will
be signaled.
@@end deftypefun

@@deftypefun {struct cleanup *} make_cleanup_ui_out_list_begin_end (struct ui_out *@@var{uiout}, const char *@@var{id})
Similar to @@code{make_cleanup_ui_out_tuple_begin_end}, this function
opens a list and then establishes cleanup
(@@pxref{Misc Guidelines, Cleanups})
that will close the list.
@@end deftypefun

@@subsection Item Output Functions

@@cindex item output functions
@@cindex field output functions
@@cindex data output
The functions described below produce output for the actual data
items, or fields, which contain information about the object.

Choose the appropriate function accordingly to your particular needs.

@@deftypefun void ui_out_field_fmt (struct ui_out *@@var{uiout}, char *@@var{fldname}, char *@@var{format}, ...)
This is the most general output function.  It produces the
representation of the data in the variable-length argument list
according to formatting specifications in @@var{format}, a
@@code{printf}-like format string.  The optional argument @@var{fldname}
supplies the name of the field.  The data items themselves are
supplied as additional arguments after @@var{format}.

This generic function should be used only when it is not possible to
use one of the specialized versions (see below).
@@end deftypefun

@@deftypefun void ui_out_field_int (struct ui_out *@@var{uiout}, const char *@@var{fldname}, int @@var{value})
This function outputs a value of an @@code{int} variable.  It uses the
@@code{"%d"} output conversion specification.  @@var{fldname} specifies
the name of the field.
@@end deftypefun

@@deftypefun void ui_out_field_fmt_int (struct ui_out *@@var{uiout}, int @@var{width}, enum ui_align @@var{alignment}, const char *@@var{fldname}, int @@var{value})
This function outputs a value of an @@code{int} variable.  It differs from
@@code{ui_out_field_int} in that the caller specifies the desired @@var{width} and @@var{alignment} of the output.
@@var{fldname} specifies
the name of the field.
@@end deftypefun

@@deftypefun void ui_out_field_core_addr (struct ui_out *@@var{uiout}, const char *@@var{fldname}, struct gdbarch *@@var{gdbarch}, CORE_ADDR @@var{address})
This function outputs an address as appropriate for @@var{gdbarch}.
@@end deftypefun

@@deftypefun void ui_out_field_string (struct ui_out *@@var{uiout}, const char *@@var{fldname}, const char *@@var{string})
This function outputs a string using the @@code{"%s"} conversion
specification.
@@end deftypefun

Sometimes, there's a need to compose your output piece by piece using
functions that operate on a stream, such as @@code{value_print} or
@@code{fprintf_symbol_filtered}.  These functions accept an argument of
the type @@code{struct ui_file *}, a pointer to a @@code{ui_file} object
used to store the data stream used for the output.  When you use one
of these functions, you need a way to pass their results stored in a
@@code{ui_file} object to the @@code{ui_out} functions.  To this end,
you first create a @@code{ui_stream} object by calling
@@code{ui_out_stream_new}, pass the @@code{stream} member of that
@@code{ui_stream} object to @@code{value_print} and similar functions,
and finally call @@code{ui_out_field_stream} to output the field you
constructed.  When the @@code{ui_stream} object is no longer needed,
you should destroy it and free its memory by calling
@@code{ui_out_stream_delete}.

@@deftypefun {struct ui_stream *} ui_out_stream_new (struct ui_out *@@var{uiout})
This function creates a new @@code{ui_stream} object which uses the
same output methods as the @@code{ui_out} object whose pointer is
passed in @@var{uiout}.  It returns a pointer to the newly created
@@code{ui_stream} object.
@@end deftypefun

@@deftypefun void ui_out_stream_delete (struct ui_stream *@@var{streambuf})
This functions destroys a @@code{ui_stream} object specified by
@@var{streambuf}.
@@end deftypefun

@@deftypefun void ui_out_field_stream (struct ui_out *@@var{uiout}, const char *@@var{fieldname}, struct ui_stream *@@var{streambuf})
This function consumes all the data accumulated in
@@code{streambuf->stream} and outputs it like
@@code{ui_out_field_string} does.  After a call to
@@code{ui_out_field_stream}, the accumulated data no longer exists, but
the stream is still valid and may be used for producing more fields.
@@end deftypefun

@@strong{Important:} If there is any chance that your code could bail
out before completing output generation and reaching the point where
@@code{ui_out_stream_delete} is called, it is necessary to set up a
cleanup, to avoid leaking memory and other resources.  Here's a
skeleton code to do that:

@@smallexample
 struct ui_stream *mybuf = ui_out_stream_new (uiout);
 struct cleanup *old = make_cleanup (ui_out_stream_delete, mybuf);
 ...
 do_cleanups (old);
@@end smallexample

If the function already has the old cleanup chain set (for other kinds
of cleanups), you just have to add your cleanup to it:

@@smallexample
  mybuf = ui_out_stream_new (uiout);
  make_cleanup (ui_out_stream_delete, mybuf);
@@end smallexample

Note that with cleanups in place, you should not call
@@code{ui_out_stream_delete} directly, or you would attempt to free the
same buffer twice.

@@subsection Utility Output Functions

@@deftypefun void ui_out_field_skip (struct ui_out *@@var{uiout}, const char *@@var{fldname})
This function skips a field in a table.  Use it if you have to leave
an empty field without disrupting the table alignment.  The argument
@@var{fldname} specifies a name for the (missing) filed.
@@end deftypefun

@@deftypefun void ui_out_text (struct ui_out *@@var{uiout}, const char *@@var{string})
This function outputs the text in @@var{string} in a way that makes it
easy to be read by humans.  For example, the console implementation of
this method filters the text through a built-in pager, to prevent it
from scrolling off the visible portion of the screen.

Use this function for printing relatively long chunks of text around
the actual field data: the text it produces is not aligned according
to the table's format.  Use @@code{ui_out_field_string} to output a
string field, and use @@code{ui_out_message}, described below, to
output short messages.
@@end deftypefun

@@deftypefun void ui_out_spaces (struct ui_out *@@var{uiout}, int @@var{nspaces})
This function outputs @@var{nspaces} spaces.  It is handy to align the
text produced by @@code{ui_out_text} with the rest of the table or
list.
@@end deftypefun

@@deftypefun void ui_out_message (struct ui_out *@@var{uiout}, int @@var{verbosity}, const char *@@var{format}, ...)
This function produces a formatted message, provided that the current
verbosity level is at least as large as given by @@var{verbosity}.  The
current verbosity level is specified by the user with the @@samp{set
verbositylevel} command.@@footnote{As of this writing (April 2001),
setting verbosity level is not yet implemented, and is always returned
as zero.  So calling @@code{ui_out_message} with a @@var{verbosity}
argument more than zero will cause the message to never be printed.}
@@end deftypefun

@@deftypefun void ui_out_wrap_hint (struct ui_out *@@var{uiout}, char *@@var{indent})
This function gives the console output filter (a paging filter) a hint
of where to break lines which are too long.  Ignored for all other
output consumers.  @@var{indent}, if non-@@code{NULL}, is the string to
be printed to indent the wrapped text on the next line; it must remain
accessible until the next call to @@code{ui_out_wrap_hint}, or until an
explicit newline is produced by one of the other functions.  If
@@var{indent} is @@code{NULL}, the wrapped text will not be indented.
@@end deftypefun

@@deftypefun void ui_out_flush (struct ui_out *@@var{uiout})
This function flushes whatever output has been accumulated so far, if
the UI buffers output.
@@end deftypefun


@@subsection Examples of Use of @@code{ui_out} functions

@@cindex using @@code{ui_out} functions
@@cindex @@code{ui_out} functions, usage examples
This section gives some practical examples of using the @@code{ui_out}
functions to generalize the old console-oriented code in
@@value{GDBN}.  The examples all come from functions defined on the
@@file{breakpoints.c} file.

This example, from the @@code{breakpoint_1} function, shows how to
produce a table.

The original code was:

@@smallexample
 if (!found_a_breakpoint++)
   @@{
     annotate_breakpoints_headers ();

     annotate_field (0);
     printf_filtered ("Num ");
     annotate_field (1);
     printf_filtered ("Type           ");
     annotate_field (2);
     printf_filtered ("Disp ");
     annotate_field (3);
     printf_filtered ("Enb ");
     if (addressprint)
       @@{
         annotate_field (4);
         printf_filtered ("Address    ");
       @@}
     annotate_field (5);
     printf_filtered ("What\n");

     annotate_breakpoints_table ();
   @@}
@@end smallexample

Here's the new version:

@@smallexample
  nr_printable_breakpoints = @@dots{};

  if (addressprint)
    ui_out_table_begin (ui, 6, nr_printable_breakpoints, "BreakpointTable");
  else
    ui_out_table_begin (ui, 5, nr_printable_breakpoints, "BreakpointTable");

  if (nr_printable_breakpoints > 0)
    annotate_breakpoints_headers ();
  if (nr_printable_breakpoints > 0)
    annotate_field (0);
  ui_out_table_header (uiout, 3, ui_left, "number", "Num");		/* 1 */
  if (nr_printable_breakpoints > 0)
    annotate_field (1);
  ui_out_table_header (uiout, 14, ui_left, "type", "Type");		/* 2 */
  if (nr_printable_breakpoints > 0)
    annotate_field (2);
  ui_out_table_header (uiout, 4, ui_left, "disp", "Disp");		/* 3 */
  if (nr_printable_breakpoints > 0)
    annotate_field (3);
  ui_out_table_header (uiout, 3, ui_left, "enabled", "Enb");	/* 4 */
  if (addressprint)
    @@{
     if (nr_printable_breakpoints > 0)
       annotate_field (4);
     if (print_address_bits <= 32)
       ui_out_table_header (uiout, 10, ui_left, "addr", "Address");/* 5 */
     else
       ui_out_table_header (uiout, 18, ui_left, "addr", "Address");/* 5 */
    @@}
  if (nr_printable_breakpoints > 0)
    annotate_field (5);
  ui_out_table_header (uiout, 40, ui_noalign, "what", "What");	/* 6 */
  ui_out_table_body (uiout);
  if (nr_printable_breakpoints > 0)
    annotate_breakpoints_table ();
@@end smallexample

This example, from the @@code{print_one_breakpoint} function, shows how
to produce the actual data for the table whose structure was defined
in the above example.  The original code was:

@@smallexample
   annotate_record ();
   annotate_field (0);
   printf_filtered ("%-3d ", b->number);
   annotate_field (1);
   if ((int)b->type > (sizeof(bptypes)/sizeof(bptypes[0]))
       || ((int) b->type != bptypes[(int) b->type].type))
     internal_error ("bptypes table does not describe type #%d.",
                     (int)b->type);
   printf_filtered ("%-14s ", bptypes[(int)b->type].description);
   annotate_field (2);
   printf_filtered ("%-4s ", bpdisps[(int)b->disposition]);
   annotate_field (3);
   printf_filtered ("%-3c ", bpenables[(int)b->enable]);
   @@dots{}
@@end smallexample

This is the new version:

@@smallexample
   annotate_record ();
   ui_out_tuple_begin (uiout, "bkpt");
   annotate_field (0);
   ui_out_field_int (uiout, "number", b->number);
   annotate_field (1);
   if (((int) b->type > (sizeof (bptypes) / sizeof (bptypes[0])))
       || ((int) b->type != bptypes[(int) b->type].type))
     internal_error ("bptypes table does not describe type #%d.",
                     (int) b->type);
   ui_out_field_string (uiout, "type", bptypes[(int)b->type].description);
   annotate_field (2);
   ui_out_field_string (uiout, "disp", bpdisps[(int)b->disposition]);
   annotate_field (3);
   ui_out_field_fmt (uiout, "enabled", "%c", bpenables[(int)b->enable]);
   @@dots{}
@@end smallexample

This example, also from @@code{print_one_breakpoint}, shows how to
produce a complicated output field using the @@code{print_expression}
functions which requires a stream to be passed.  It also shows how to
automate stream destruction with cleanups.  The original code was:

@@smallexample
    annotate_field (5);
    print_expression (b->exp, gdb_stdout);
@@end smallexample

The new version is:

@@smallexample
  struct ui_stream *stb = ui_out_stream_new (uiout);
  struct cleanup *old_chain = make_cleanup_ui_out_stream_delete (stb);
  ...
  annotate_field (5);
  print_expression (b->exp, stb->stream);
  ui_out_field_stream (uiout, "what", local_stream);
@@end smallexample

This example, also from @@code{print_one_breakpoint}, shows how to use
@@code{ui_out_text} and @@code{ui_out_field_string}.  The original code
was:

@@smallexample
  annotate_field (5);
  if (b->dll_pathname == NULL)
    printf_filtered ("<any library> ");
  else
    printf_filtered ("library \"%s\" ", b->dll_pathname);
@@end smallexample

It became:

@@smallexample
  annotate_field (5);
  if (b->dll_pathname == NULL)
    @@{
      ui_out_field_string (uiout, "what", "<any library>");
      ui_out_spaces (uiout, 1);
    @@}
  else
    @@{
      ui_out_text (uiout, "library \"");
      ui_out_field_string (uiout, "what", b->dll_pathname);
      ui_out_text (uiout, "\" ");
    @@}
@@end smallexample

The following example from @@code{print_one_breakpoint} shows how to
use @@code{ui_out_field_int} and @@code{ui_out_spaces}.  The original
code was:

@@smallexample
  annotate_field (5);
  if (b->forked_inferior_pid != 0)
    printf_filtered ("process %d ", b->forked_inferior_pid);
@@end smallexample

It became:

@@smallexample
  annotate_field (5);
  if (b->forked_inferior_pid != 0)
    @@{
      ui_out_text (uiout, "process ");
      ui_out_field_int (uiout, "what", b->forked_inferior_pid);
      ui_out_spaces (uiout, 1);
    @@}
@@end smallexample

Here's an example of using @@code{ui_out_field_string}.  The original
code was:

@@smallexample
  annotate_field (5);
  if (b->exec_pathname != NULL)
    printf_filtered ("program \"%s\" ", b->exec_pathname);
@@end smallexample

It became:

@@smallexample
  annotate_field (5);
  if (b->exec_pathname != NULL)
    @@{
      ui_out_text (uiout, "program \"");
      ui_out_field_string (uiout, "what", b->exec_pathname);
      ui_out_text (uiout, "\" ");
    @@}
@@end smallexample

Finally, here's an example of printing an address.  The original code:

@@smallexample
  annotate_field (4);
  printf_filtered ("%s ",
        hex_string_custom ((unsigned long) b->address, 8));
@@end smallexample

It became:

@@smallexample
  annotate_field (4);
  ui_out_field_core_addr (uiout, "Address", b->address);
@@end smallexample


@@section Console Printing

@@section TUI

@@node libgdb

@@chapter libgdb

@@section libgdb 1.0
@@cindex @@code{libgdb}
@@code{libgdb} 1.0 was an abortive project of years ago.  The theory was
to provide an API to @@value{GDBN}'s functionality.

@@section libgdb 2.0
@@cindex @@code{libgdb}
@@code{libgdb} 2.0 is an ongoing effort to update @@value{GDBN} so that is
better able to support graphical and other environments.

Since @@code{libgdb} development is on-going, its architecture is still
evolving.  The following components have so far been identified:

@@itemize @@bullet
@@item
Observer - @@file{gdb-events.h}.  
@@item
Builder - @@file{ui-out.h}
@@item
Event Loop - @@file{event-loop.h}
@@item
Library - @@file{gdb.h}
@@end itemize

The model that ties these components together is described below.

@@section The @@code{libgdb} Model

A client of @@code{libgdb} interacts with the library in two ways.

@@itemize @@bullet
@@item
As an observer (using @@file{gdb-events}) receiving notifications from
@@code{libgdb} of any internal state changes (break point changes, run
state, etc).
@@item
As a client querying @@code{libgdb} (using the @@file{ui-out} builder) to
obtain various status values from @@value{GDBN}.
@@end itemize

Since @@code{libgdb} could have multiple clients (e.g., a GUI supporting
the existing @@value{GDBN} CLI), those clients must co-operate when
controlling @@code{libgdb}.  In particular, a client must ensure that
@@code{libgdb} is idle (i.e.@@: no other client is using @@code{libgdb})
before responding to a @@file{gdb-event} by making a query.

@@section CLI support

At present @@value{GDBN}'s CLI is very much entangled in with the core of
@@code{libgdb}.  Consequently, a client wishing to include the CLI in
their interface needs to carefully co-ordinate its own and the CLI's
requirements.

It is suggested that the client set @@code{libgdb} up to be bi-modal
(alternate between CLI and client query modes).  The notes below sketch
out the theory:

@@itemize @@bullet
@@item
The client registers itself as an observer of @@code{libgdb}.
@@item
The client create and install @@code{cli-out} builder using its own
versions of the @@code{ui-file} @@code{gdb_stderr}, @@code{gdb_stdtarg} and
@@code{gdb_stdout} streams.
@@item
The client creates a separate custom @@code{ui-out} builder that is only
used while making direct queries to @@code{libgdb}.
@@end itemize

When the client receives input intended for the CLI, it simply passes it
along.  Since the @@code{cli-out} builder is installed by default, all
the CLI output in response to that command is routed (pronounced rooted)
through to the client controlled @@code{gdb_stdout} et.@@: al.@@: streams.
At the same time, the client is kept abreast of internal changes by
virtue of being a @@code{libgdb} observer.

The only restriction on the client is that it must wait until
@@code{libgdb} becomes idle before initiating any queries (using the
client's custom builder).

@@section @@code{libgdb} components

@@subheading Observer - @@file{gdb-events.h}
@@file{gdb-events} provides the client with a very raw mechanism that can
be used to implement an observer.  At present it only allows for one
observer and that observer must, internally, handle the need to delay
the processing of any event notifications until after @@code{libgdb} has
finished the current command.

@@subheading Builder - @@file{ui-out.h}
@@file{ui-out} provides the infrastructure necessary for a client to
create a builder.  That builder is then passed down to @@code{libgdb}
when doing any queries.

@@subheading Event Loop - @@file{event-loop.h}
@@c There could be an entire section on the event-loop
@@file{event-loop}, currently non-re-entrant, provides a simple event
loop.  A client would need to either plug its self into this loop or,
implement a new event-loop that @@value{GDBN} would use.

The event-loop will eventually be made re-entrant.  This is so that
@@value{GDBN} can better handle the problem of some commands blocking
instead of returning.

@@subheading Library - @@file{gdb.h}
@@file{libgdb} is the most obvious component of this system.  It provides
the query interface.  Each function is parameterized by a @@code{ui-out}
builder.  The result of the query is constructed using that builder
before the query function returns.

@@node Values
@@chapter Values
@@section Values

@@cindex values
@@cindex @@code{value} structure
@@value{GDBN} uses @@code{struct value}, or @@dfn{values}, as an internal
abstraction for the representation of a variety of inferior objects
and @@value{GDBN} convenience objects.

Values have an associated @@code{struct type}, that describes a virtual
view of the raw data or object stored in or accessed through the
value.

A value is in addition discriminated by its lvalue-ness, given its
@@code{enum lval_type} enumeration type:

@@cindex @@code{lval_type} enumeration, for values.
@@table @@code
@@item @@code{not_lval}
This value is not an lval.  It can't be assigned to.

@@item @@code{lval_memory}
This value represents an object in memory.

@@item @@code{lval_register}
This value represents an object that lives in a register.

@@item @@code{lval_internalvar}
Represents the value of an internal variable.

@@item @@code{lval_internalvar_component}
Represents part of a @@value{GDBN} internal variable.  E.g., a
structure field.

@@cindex computed values
@@item @@code{lval_computed}
These are ``computed'' values.  They allow creating specialized value
objects for specific purposes, all abstracted away from the core value
support code.  The creator of such a value writes specialized
functions to handle the reading and writing to/from the value's
backend data, and optionally, a ``copy operator'' and a
``destructor''.

Pointers to these functions are stored in a @@code{struct lval_funcs}
instance (declared in @@file{value.h}), and passed to the
@@code{allocate_computed_value} function, as in the example below.

@@smallexample
static void
nil_value_read (struct value *v)
@@{
  /* This callback reads data from some backend, and stores it in V.
     In this case, we always read null data.  You'll want to fill in
     something more interesting.  */

  memset (value_contents_all_raw (v),
          value_offset (v),
          TYPE_LENGTH (value_type (v)));
@@}

static void
nil_value_write (struct value *v, struct value *fromval)
@@{
  /* Takes the data from FROMVAL and stores it in the backend of V.  */

  to_oblivion (value_contents_all_raw (fromval),
               value_offset (v),
               TYPE_LENGTH (value_type (fromval)));
@@}

static struct lval_funcs nil_value_funcs =
  @@{
    nil_value_read,
    nil_value_write
  @@};

struct value *
make_nil_value (void)
@@{
   struct type *type;
   struct value *v;

   type = make_nils_type ();
   v = allocate_computed_value (type, &nil_value_funcs, NULL);

   return v;
@@}
@@end smallexample

See the implementation of the @@code{$_siginfo} convenience variable in
@@file{infrun.c} as a real example use of lval_computed.

@@end table

@@node Stack Frames
@@chapter Stack Frames

@@cindex frame
@@cindex call stack frame
A frame is a construct that @@value{GDBN} uses to keep track of calling
and called functions.

@@cindex unwind frame
@@value{GDBN}'s frame model, a fresh design, was implemented with the
need to support @@sc{dwarf}'s Call Frame Information in mind.  In fact,
the term ``unwind'' is taken directly from that specification.
Developers wishing to learn more about unwinders, are encouraged to
read the @@sc{dwarf} specification, available from
@@url{http://www.dwarfstd.org}.

@@findex frame_register_unwind
@@findex get_frame_register
@@value{GDBN}'s model is that you find a frame's registers by
``unwinding'' them from the next younger frame.  That is,
@@samp{get_frame_register} which returns the value of a register in
frame #1 (the next-to-youngest frame), is implemented by calling frame
#0's @@code{frame_register_unwind} (the youngest frame).  But then the
obvious question is: how do you access the registers of the youngest
frame itself?

@@cindex sentinel frame
@@findex get_frame_type
@@vindex SENTINEL_FRAME
To answer this question, @@value{GDBN} has the @@dfn{sentinel} frame, the
``-1st'' frame.  Unwinding registers from the sentinel frame gives you
the current values of the youngest real frame's registers.  If @@var{f}
is a sentinel frame, then @@code{get_frame_type (@@var{f}) @@equiv{}
SENTINEL_FRAME}.

@@section Selecting an Unwinder

@@findex frame_unwind_prepend_unwinder
@@findex frame_unwind_append_unwinder
The architecture registers a list of frame unwinders (@@code{struct
frame_unwind}), using the functions
@@code{frame_unwind_prepend_unwinder} and
@@code{frame_unwind_append_unwinder}.  Each unwinder includes a
sniffer.  Whenever @@value{GDBN} needs to unwind a frame (to fetch the
previous frame's registers or the current frame's ID), it calls
registered sniffers in order to find one which recognizes the frame.
The first time a sniffer returns non-zero, the corresponding unwinder
is assigned to the frame.

@@section Unwinding the Frame ID
@@cindex frame ID

Every frame has an associated ID, of type @@code{struct frame_id}.
The ID includes the stack base and function start address for
the frame.  The ID persists through the entire life of the frame,
including while other called frames are running; it is used to
locate an appropriate @@code{struct frame_info} from the cache.

Every time the inferior stops, and at various other times, the frame
cache is flushed.  Because of this, parts of @@value{GDBN} which need
to keep track of individual frames cannot use pointers to @@code{struct
frame_info}.  A frame ID provides a stable reference to a frame, even
when the unwinder must be run again to generate a new @@code{struct
frame_info} for the same frame.

The frame's unwinder's @@code{this_id} method is called to find the ID.
Note that this is different from register unwinding, where the next
frame's @@code{prev_register} is called to unwind this frame's
registers.

Both stack base and function address are required to identify the
frame, because a recursive function has the same function address for
two consecutive frames and a leaf function may have the same stack
address as its caller.  On some platforms, a third address is part of
the ID to further disambiguate frames---for instance, on IA-64
the separate register stack address is included in the ID.

An invalid frame ID (@@code{outer_frame_id}) returned from the
@@code{this_id} method means to stop unwinding after this frame.

@@code{null_frame_id} is another invalid frame ID which should be used
when there is no frame.  For instance, certain breakpoints are attached
to a specific frame, and that frame is identified through its frame ID
(we use this to implement the "finish" command).  Using
@@code{null_frame_id} as the frame ID for a given breakpoint means
that the breakpoint is not specific to any frame.  The @@code{this_id}
method should never return @@code{null_frame_id}.

@@section Unwinding Registers

Each unwinder includes a @@code{prev_register} method.  This method
takes a frame, an associated cache pointer, and a register number.
It returns a @@code{struct value *} describing the requested register,
as saved by this frame.  This is the value of the register that is
current in this frame's caller.

The returned value must have the same type as the register.  It may
have any lvalue type.  In most circumstances one of these routines
will generate the appropriate value:

@@table @@code
@@item frame_unwind_got_optimized
@@findex frame_unwind_got_optimized
This register was not saved.

@@item frame_unwind_got_register
@@findex frame_unwind_got_register
This register was copied into another register in this frame.  This
is also used for unchanged registers; they are ``copied'' into the
same register.

@@item frame_unwind_got_memory
@@findex frame_unwind_got_memory
This register was saved in memory.

@@item frame_unwind_got_constant
@@findex frame_unwind_got_constant
This register was not saved, but the unwinder can compute the previous
value some other way.

@@item frame_unwind_got_address
@@findex frame_unwind_got_address
Same as @@code{frame_unwind_got_constant}, except that the value is a target
address.  This is frequently used for the stack pointer, which is not
explicitly saved but has a known offset from this frame's stack
pointer.  For architectures with a flat unified address space, this is
generally the same as @@code{frame_unwind_got_constant}.
@@end table

@@node Symbol Handling

@@chapter Symbol Handling

Symbols are a key part of @@value{GDBN}'s operation.  Symbols include
variables, functions, and types.

Symbol information for a large program can be truly massive, and
reading of symbol information is one of the major performance
bottlenecks in @@value{GDBN}; it can take many minutes to process it
all.  Studies have shown that nearly all the time spent is
computational, rather than file reading.

One of the ways for @@value{GDBN} to provide a good user experience is
to start up quickly, taking no more than a few seconds.  It is simply
not possible to process all of a program's debugging info in that
time, and so we attempt to handle symbols incrementally.  For instance,
we create @@dfn{partial symbol tables} consisting of only selected
symbols, and only expand them to full symbol tables when necessary.

@@section Symbol Reading

@@cindex symbol reading
@@cindex reading of symbols
@@cindex symbol files
@@value{GDBN} reads symbols from @@dfn{symbol files}.  The usual symbol
file is the file containing the program which @@value{GDBN} is
debugging.  @@value{GDBN} can be directed to use a different file for
symbols (with the @@samp{symbol-file} command), and it can also read
more symbols via the @@samp{add-file} and @@samp{load} commands. In
addition, it may bring in more symbols while loading shared
libraries.

@@findex find_sym_fns
Symbol files are initially opened by code in @@file{symfile.c} using
the BFD library (@@pxref{Support Libraries}).  BFD identifies the type
of the file by examining its header.  @@code{find_sym_fns} then uses
this identification to locate a set of symbol-reading functions.

@@findex add_symtab_fns
@@cindex @@code{sym_fns} structure
@@cindex adding a symbol-reading module
Symbol-reading modules identify themselves to @@value{GDBN} by calling
@@code{add_symtab_fns} during their module initialization.  The argument
to @@code{add_symtab_fns} is a @@code{struct sym_fns} which contains the
name (or name prefix) of the symbol format, the length of the prefix,
and pointers to four functions.  These functions are called at various
times to process symbol files whose identification matches the specified
prefix.

The functions supplied by each module are:

@@table @@code
@@item @@var{xyz}_symfile_init(struct sym_fns *sf)

@@cindex secondary symbol file
Called from @@code{symbol_file_add} when we are about to read a new
symbol file.  This function should clean up any internal state (possibly
resulting from half-read previous files, for example) and prepare to
read a new symbol file.  Note that the symbol file which we are reading
might be a new ``main'' symbol file, or might be a secondary symbol file
whose symbols are being added to the existing symbol table.

The argument to @@code{@@var{xyz}_symfile_init} is a newly allocated
@@code{struct sym_fns} whose @@code{bfd} field contains the BFD for the
new symbol file being read.  Its @@code{private} field has been zeroed,
and can be modified as desired.  Typically, a struct of private
information will be @@code{malloc}'d, and a pointer to it will be placed
in the @@code{private} field.

There is no result from @@code{@@var{xyz}_symfile_init}, but it can call
@@code{error} if it detects an unavoidable problem.

@@item @@var{xyz}_new_init()

Called from @@code{symbol_file_add} when discarding existing symbols.
This function needs only handle the symbol-reading module's internal
state; the symbol table data structures visible to the rest of
@@value{GDBN} will be discarded by @@code{symbol_file_add}.  It has no
arguments and no result.  It may be called after
@@code{@@var{xyz}_symfile_init}, if a new symbol table is being read, or
may be called alone if all symbols are simply being discarded.

@@item @@var{xyz}_symfile_read(struct sym_fns *sf, CORE_ADDR addr, int mainline)

Called from @@code{symbol_file_add} to actually read the symbols from a
symbol-file into a set of psymtabs or symtabs.

@@code{sf} points to the @@code{struct sym_fns} originally passed to
@@code{@@var{xyz}_sym_init} for possible initialization.  @@code{addr} is
the offset between the file's specified start address and its true
address in memory.  @@code{mainline} is 1 if this is the main symbol
table being read, and 0 if a secondary symbol file (e.g., shared library
or dynamically loaded file) is being read.@@refill
@@end table

In addition, if a symbol-reading module creates psymtabs when
@@var{xyz}_symfile_read is called, these psymtabs will contain a pointer
to a function @@code{@@var{xyz}_psymtab_to_symtab}, which can be called
from any point in the @@value{GDBN} symbol-handling code.

@@table @@code
@@item @@var{xyz}_psymtab_to_symtab (struct partial_symtab *pst)

Called from @@code{psymtab_to_symtab} (or the @@code{PSYMTAB_TO_SYMTAB} macro) if
the psymtab has not already been read in and had its @@code{pst->symtab}
pointer set.  The argument is the psymtab to be fleshed-out into a
symtab.  Upon return, @@code{pst->readin} should have been set to 1, and
@@code{pst->symtab} should contain a pointer to the new corresponding symtab, or
zero if there were no symbols in that part of the symbol file.
@@end table

@@section Partial Symbol Tables

@@value{GDBN} has three types of symbol tables:

@@itemize @@bullet
@@cindex full symbol table
@@cindex symtabs
@@item
Full symbol tables (@@dfn{symtabs}).  These contain the main
information about symbols and addresses.

@@cindex psymtabs
@@item
Partial symbol tables (@@dfn{psymtabs}).  These contain enough
information to know when to read the corresponding part of the full
symbol table.

@@cindex minimal symbol table
@@cindex minsymtabs
@@item
Minimal symbol tables (@@dfn{msymtabs}).  These contain information
gleaned from non-debugging symbols.
@@end itemize

@@cindex partial symbol table
This section describes partial symbol tables.

A psymtab is constructed by doing a very quick pass over an executable
file's debugging information.  Small amounts of information are
extracted---enough to identify which parts of the symbol table will
need to be re-read and fully digested later, when the user needs the
information.  The speed of this pass causes @@value{GDBN} to start up very
quickly.  Later, as the detailed rereading occurs, it occurs in small
pieces, at various times, and the delay therefrom is mostly invisible to
the user.
@@c (@@xref{Symbol Reading}.)

The symbols that show up in a file's psymtab should be, roughly, those
visible to the debugger's user when the program is not running code from
that file.  These include external symbols and types, static symbols and
types, and @@code{enum} values declared at file scope.

The psymtab also contains the range of instruction addresses that the
full symbol table would represent.

@@cindex finding a symbol
@@cindex symbol lookup
The idea is that there are only two ways for the user (or much of the
code in the debugger) to reference a symbol:

@@itemize @@bullet
@@findex find_pc_function
@@findex find_pc_line
@@item
By its address (e.g., execution stops at some address which is inside a
function in this file).  The address will be noticed to be in the
range of this psymtab, and the full symtab will be read in.
@@code{find_pc_function}, @@code{find_pc_line}, and other
@@code{find_pc_@@dots{}} functions handle this.

@@cindex lookup_symbol
@@item
By its name
(e.g., the user asks to print a variable, or set a breakpoint on a
function).  Global names and file-scope names will be found in the
psymtab, which will cause the symtab to be pulled in.  Local names will
have to be qualified by a global name, or a file-scope name, in which
case we will have already read in the symtab as we evaluated the
qualifier.  Or, a local symbol can be referenced when we are ``in'' a
local scope, in which case the first case applies.  @@code{lookup_symbol}
does most of the work here.
@@end itemize

The only reason that psymtabs exist is to cause a symtab to be read in
at the right moment.  Any symbol that can be elided from a psymtab,
while still causing that to happen, should not appear in it.  Since
psymtabs don't have the idea of scope, you can't put local symbols in
them anyway.  Psymtabs don't have the idea of the type of a symbol,
either, so types need not appear, unless they will be referenced by
name.

It is a bug for @@value{GDBN} to behave one way when only a psymtab has
been read, and another way if the corresponding symtab has been read
in.  Such bugs are typically caused by a psymtab that does not contain
all the visible symbols, or which has the wrong instruction address
ranges.

The psymtab for a particular section of a symbol file (objfile) could be
thrown away after the symtab has been read in.  The symtab should always
be searched before the psymtab, so the psymtab will never be used (in a
bug-free environment).  Currently, psymtabs are allocated on an obstack,
and all the psymbols themselves are allocated in a pair of large arrays
on an obstack, so there is little to be gained by trying to free them
unless you want to do a lot more work.

Whether or not psymtabs are created depends on the objfile's symbol
reader.  The core of @@value{GDBN} hides the details of partial symbols
and partial symbol tables behind a set of function pointers known as
the @@dfn{quick symbol functions}.  These are documented in
@@file{symfile.h}.

@@section Types

@@unnumberedsubsec Fundamental Types (e.g., @@code{FT_VOID}, @@code{FT_BOOLEAN}).

@@cindex fundamental types
These are the fundamental types that @@value{GDBN} uses internally.  Fundamental
types from the various debugging formats (stabs, ELF, etc) are mapped
into one of these.  They are basically a union of all fundamental types
that @@value{GDBN} knows about for all the languages that @@value{GDBN}
knows about.

@@unnumberedsubsec Type Codes (e.g., @@code{TYPE_CODE_PTR}, @@code{TYPE_CODE_ARRAY}).

@@cindex type codes
Each time @@value{GDBN} builds an internal type, it marks it with one
of these types.  The type may be a fundamental type, such as
@@code{TYPE_CODE_INT}, or a derived type, such as @@code{TYPE_CODE_PTR}
which is a pointer to another type.  Typically, several @@code{FT_*}
types map to one @@code{TYPE_CODE_*} type, and are distinguished by
other members of the type struct, such as whether the type is signed
or unsigned, and how many bits it uses.

@@unnumberedsubsec Builtin Types (e.g., @@code{builtin_type_void}, @@code{builtin_type_char}).

These are instances of type structs that roughly correspond to
fundamental types and are created as global types for @@value{GDBN} to
use for various ugly historical reasons.  We eventually want to
eliminate these.  Note for example that @@code{builtin_type_int}
initialized in @@file{gdbtypes.c} is basically the same as a
@@code{TYPE_CODE_INT} type that is initialized in @@file{c-lang.c} for
an @@code{FT_INTEGER} fundamental type.  The difference is that the
@@code{builtin_type} is not associated with any particular objfile, and
only one instance exists, while @@file{c-lang.c} builds as many
@@code{TYPE_CODE_INT} types as needed, with each one associated with
some particular objfile.

@@section Object File Formats
@@cindex object file formats

@@subsection a.out

@@cindex @@code{a.out} format
The @@code{a.out} format is the original file format for Unix.  It
consists of three sections: @@code{text}, @@code{data}, and @@code{bss},
which are for program code, initialized data, and uninitialized data,
respectively.

The @@code{a.out} format is so simple that it doesn't have any reserved
place for debugging information.  (Hey, the original Unix hackers used
@@samp{adb}, which is a machine-language debugger!)  The only debugging
format for @@code{a.out} is stabs, which is encoded as a set of normal
symbols with distinctive attributes.

The basic @@code{a.out} reader is in @@file{dbxread.c}.

@@subsection COFF

@@cindex COFF format
The COFF format was introduced with System V Release 3 (SVR3) Unix.
COFF files may have multiple sections, each prefixed by a header.  The
number of sections is limited.

The COFF specification includes support for debugging.  Although this
was a step forward, the debugging information was woefully limited.
For instance, it was not possible to represent code that came from an
included file.  GNU's COFF-using configs often use stabs-type info,
encapsulated in special sections.

The COFF reader is in @@file{coffread.c}.

@@subsection ECOFF

@@cindex ECOFF format
ECOFF is an extended COFF originally introduced for Mips and Alpha
workstations.

The basic ECOFF reader is in @@file{mipsread.c}.

@@subsection XCOFF

@@cindex XCOFF format
The IBM RS/6000 running AIX uses an object file format called XCOFF.
The COFF sections, symbols, and line numbers are used, but debugging
symbols are @@code{dbx}-style stabs whose strings are located in the
@@code{.debug} section (rather than the string table).  For more
information, see @@ref{Top,,,stabs,The Stabs Debugging Format}.

The shared library scheme has a clean interface for figuring out what
shared libraries are in use, but the catch is that everything which
refers to addresses (symbol tables and breakpoints at least) needs to be
relocated for both shared libraries and the main executable.  At least
using the standard mechanism this can only be done once the program has
been run (or the core file has been read).

@@subsection PE

@@cindex PE-COFF format
Windows 95 and NT use the PE (@@dfn{Portable Executable}) format for their
executables.  PE is basically COFF with additional headers.

While BFD includes special PE support, @@value{GDBN} needs only the basic
COFF reader.

@@subsection ELF

@@cindex ELF format
The ELF format came with System V Release 4 (SVR4) Unix.  ELF is
similar to COFF in being organized into a number of sections, but it
removes many of COFF's limitations.  Debugging info may be either stabs
encapsulated in ELF sections, or more commonly these days, DWARF.

The basic ELF reader is in @@file{elfread.c}.

@@subsection SOM

@@cindex SOM format
SOM is HP's object file and debug format (not to be confused with IBM's
SOM, which is a cross-language ABI).

The SOM reader is in @@file{somread.c}.

@@section Debugging File Formats

This section describes characteristics of debugging information that
are independent of the object file format.

@@subsection stabs

@@cindex stabs debugging info
@@code{stabs} started out as special symbols within the @@code{a.out}
format.  Since then, it has been encapsulated into other file
formats, such as COFF and ELF.

While @@file{dbxread.c} does some of the basic stab processing,
including for encapsulated versions, @@file{stabsread.c} does
the real work.

@@subsection COFF

@@cindex COFF debugging info
The basic COFF definition includes debugging information.  The level
of support is minimal and non-extensible, and is not often used.

@@subsection Mips debug (Third Eye)

@@cindex ECOFF debugging info
ECOFF includes a definition of a special debug format.

The file @@file{mdebugread.c} implements reading for this format.

@@c mention DWARF 1 as a formerly-supported format

@@subsection DWARF 2

@@cindex DWARF 2 debugging info
DWARF 2 is an improved but incompatible version of DWARF 1.

The DWARF 2 reader is in @@file{dwarf2read.c}.

@@subsection Compressed DWARF 2

@@cindex Compressed DWARF 2 debugging info
Compressed DWARF 2 is not technically a separate debugging format, but
merely DWARF 2 debug information that has been compressed.  In this
format, every object-file section holding DWARF 2 debugging
information is compressed and prepended with a header.  (The section
is also typically renamed, so a section called @@code{.debug_info} in a
DWARF 2 binary would be called @@code{.zdebug_info} in a compressed
DWARF 2 binary.)  The header is 12 bytes long:

@@itemize @@bullet
@@item
4 bytes: the literal string ``ZLIB''
@@item
8 bytes: the uncompressed size of the section, in big-endian byte
order.
@@end itemize

The same reader is used for both compressed an normal DWARF 2 info.
Section decompression is done in @@code{zlib_decompress_section} in
@@file{dwarf2read.c}.

@@subsection DWARF 3

@@cindex DWARF 3 debugging info
DWARF 3 is an improved version of DWARF 2.

@@subsection SOM

@@cindex SOM debugging info
Like COFF, the SOM definition includes debugging information.

@@section Adding a New Symbol Reader to @@value{GDBN}

@@cindex adding debugging info reader
If you are using an existing object file format (@@code{a.out}, COFF, ELF, etc),
there is probably little to be done.

If you need to add a new object file format, you must first add it to
BFD.  This is beyond the scope of this document.

You must then arrange for the BFD code to provide access to the
debugging symbols.  Generally @@value{GDBN} will have to call swapping
routines from BFD and a few other BFD internal routines to locate the
debugging information.  As much as possible, @@value{GDBN} should not
depend on the BFD internal data structures.

For some targets (e.g., COFF), there is a special transfer vector used
to call swapping routines, since the external data structures on various
platforms have different sizes and layouts.  Specialized routines that
will only ever be implemented by one object file format may be called
directly.  This interface should be described in a file
@@file{bfd/lib@@var{xyz}.h}, which is included by @@value{GDBN}.

@@section Memory Management for Symbol Files

Most memory associated with a loaded symbol file is stored on
its @@code{objfile_obstack}.  This includes symbols, types,
namespace data, and other information produced by the symbol readers.

Because this data lives on the objfile's obstack, it is automatically
released when the objfile is unloaded or reloaded.  Therefore one
objfile must not reference symbol or type data from another objfile;
they could be unloaded at different times.

User convenience variables, et cetera, have associated types.  Normally
these types live in the associated objfile.  However, when the objfile
is unloaded, those types are deep copied to global memory, so that
the values of the user variables and history items are not lost.


@@node Language Support

@@chapter Language Support

@@cindex language support
@@value{GDBN}'s language support is mainly driven by the symbol reader,
although it is possible for the user to set the source language
manually.

@@value{GDBN} chooses the source language by looking at the extension
of the file recorded in the debug info; @@file{.c} means C, @@file{.f}
means Fortran, etc.  It may also use a special-purpose language
identifier if the debug format supports it, like with DWARF.

@@section Adding a Source Language to @@value{GDBN}

@@cindex adding source language
To add other languages to @@value{GDBN}'s expression parser, follow the
following steps:

@@table @@emph
@@item Create the expression parser.

@@cindex expression parser
This should reside in a file @@file{@@var{lang}-exp.y}.  Routines for
building parsed expressions into a @@code{union exp_element} list are in
@@file{parse.c}.

@@cindex language parser
Since we can't depend upon everyone having Bison, and YACC produces
parsers that define a bunch of global names, the following lines
@@strong{must} be included at the top of the YACC parser, to prevent the
various parsers from defining the same global names:

@@smallexample
#define yyparse         @@var{lang}_parse
#define yylex           @@var{lang}_lex
#define yyerror         @@var{lang}_error
#define yylval          @@var{lang}_lval
#define yychar          @@var{lang}_char
#define yydebug         @@var{lang}_debug
#define yypact          @@var{lang}_pact 
#define yyr1            @@var{lang}_r1   
#define yyr2            @@var{lang}_r2   
#define yydef           @@var{lang}_def  
#define yychk           @@var{lang}_chk  
#define yypgo           @@var{lang}_pgo  
#define yyact           @@var{lang}_act  
#define yyexca          @@var{lang}_exca
#define yyerrflag       @@var{lang}_errflag
#define yynerrs         @@var{lang}_nerrs
@@end smallexample

At the bottom of your parser, define a @@code{struct language_defn} and
initialize it with the right values for your language.  Define an
@@code{initialize_@@var{lang}} routine and have it call
@@samp{add_language(@@var{lang}_language_defn)} to tell the rest of @@value{GDBN}
that your language exists.  You'll need some other supporting variables
and functions, which will be used via pointers from your
@@code{@@var{lang}_language_defn}.  See the declaration of @@code{struct
language_defn} in @@file{language.h}, and the other @@file{*-exp.y} files,
for more information.

@@item Add any evaluation routines, if necessary

@@cindex expression evaluation routines
@@findex evaluate_subexp
@@findex prefixify_subexp
@@findex length_of_subexp
If you need new opcodes (that represent the operations of the language),
add them to the enumerated type in @@file{expression.h}.  Add support
code for these operations in the @@code{evaluate_subexp} function
defined in the file @@file{eval.c}.  Add cases
for new opcodes in two functions from @@file{parse.c}:
@@code{prefixify_subexp} and @@code{length_of_subexp}.  These compute
the number of @@code{exp_element}s that a given operation takes up.

@@item Update some existing code

Add an enumerated identifier for your language to the enumerated type
@@code{enum language} in @@file{defs.h}.

Update the routines in @@file{language.c} so your language is included.
These routines include type predicates and such, which (in some cases)
are language dependent.  If your language does not appear in the switch
statement, an error is reported.

@@vindex current_language
Also included in @@file{language.c} is the code that updates the variable
@@code{current_language}, and the routines that translate the
@@code{language_@@var{lang}} enumerated identifier into a printable
string.

@@findex _initialize_language
Update the function @@code{_initialize_language} to include your
language.  This function picks the default language upon startup, so is
dependent upon which languages that @@value{GDBN} is built for.

@@findex allocate_symtab
Update @@code{allocate_symtab} in @@file{symfile.c} and/or symbol-reading
code so that the language of each symtab (source file) is set properly.
This is used to determine the language to use at each stack frame level.
Currently, the language is set based upon the extension of the source
file.  If the language can be better inferred from the symbol
information, please set the language of the symtab in the symbol-reading
code.

@@findex print_subexp
@@findex op_print_tab
Add helper code to @@code{print_subexp} (in @@file{expprint.c}) to handle any new
expression opcodes you have added to @@file{expression.h}.  Also, add the
printed representations of your operators to @@code{op_print_tab}.

@@item Add a place of call

@@findex parse_exp_1
Add a call to @@code{@@var{lang}_parse()} and @@code{@@var{lang}_error} in
@@code{parse_exp_1} (defined in @@file{parse.c}).

@@item Edit @@file{Makefile.in}

Add dependencies in @@file{Makefile.in}.  Make sure you update the macro
variables such as @@code{HFILES} and @@code{OBJS}, otherwise your code may
not get linked in, or, worse yet, it may not get @@code{tar}red into the
distribution!
@@end table


@@node Host Definition

@@chapter Host Definition

With the advent of Autoconf, it's rarely necessary to have host
definition machinery anymore.  The following information is provided,
mainly, as an historical reference.

@@section Adding a New Host

@@cindex adding a new host
@@cindex host, adding
@@value{GDBN}'s host configuration support normally happens via Autoconf.
New host-specific definitions should not be needed.  Older hosts
@@value{GDBN} still use the host-specific definitions and files listed
below, but these mostly exist for historical reasons, and will
eventually disappear.

@@table @@file
@@item gdb/config/@@var{arch}/@@var{xyz}.mh
This file is a Makefile fragment that once contained both host and
native configuration information (@@pxref{Native Debugging}) for the
machine @@var{xyz}.  The host configuration information is now handled
by Autoconf.

Host configuration information included definitions for @@code{CC},
@@code{SYSV_DEFINE}, @@code{XM_CFLAGS}, @@code{XM_ADD_FILES},
@@code{XM_CLIBS}, @@code{XM_CDEPS}, etc.; see @@file{Makefile.in}.

New host-only configurations do not need this file.

@@end table

(Files named @@file{gdb/config/@@var{arch}/xm-@@var{xyz}.h} were once
used to define host-specific macros, but were no longer needed and
have all been removed.)

@@subheading Generic Host Support Files

@@cindex generic host support
There are some ``generic'' versions of routines that can be used by
various systems.

@@table @@file
@@cindex remote debugging support
@@cindex serial line support
@@item ser-unix.c
This contains serial line support for Unix systems.  It is included by
default on all Unix-like hosts.

@@item ser-pipe.c
This contains serial pipe support for Unix systems.  It is included by
default on all Unix-like hosts.

@@item ser-mingw.c
This contains serial line support for 32-bit programs running under
Windows using MinGW.

@@item ser-go32.c
This contains serial line support for 32-bit programs running under DOS,
using the DJGPP (a.k.a.@@: GO32) execution environment.

@@cindex TCP remote support
@@item ser-tcp.c
This contains generic TCP support using sockets.  It is included by
default on all Unix-like hosts and with MinGW.
@@end table

@@section Host Conditionals

When @@value{GDBN} is configured and compiled, various macros are
defined or left undefined, to control compilation based on the
attributes of the host system.  While formerly they could be set in
host-specific header files, at present they can be changed only by
setting @@code{CFLAGS} when building, or by editing the source code.

These macros and their meanings (or if the meaning is not documented
here, then one of the source files where they are used is indicated)
are:

@@ftable @@code
@@item @@value{GDBN}INIT_FILENAME
The default name of @@value{GDBN}'s initialization file (normally
@@file{.gdbinit}).

@@item CRLF_SOURCE_FILES
@@cindex DOS text files
Define this if host files use @@code{\r\n} rather than @@code{\n} as a
line terminator.  This will cause source file listings to omit @@code{\r}
characters when printing and it will allow @@code{\r\n} line endings of files
which are ``sourced'' by gdb.  It must be possible to open files in binary
mode using @@code{O_BINARY} or, for fopen, @@code{"rb"}.

@@item DEFAULT_PROMPT
@@cindex prompt
The default value of the prompt string (normally @@code{"(gdb) "}).

@@item DEV_TTY
@@cindex terminal device
The name of the generic TTY device, defaults to @@code{"/dev/tty"}.

@@item ISATTY
Substitute for isatty, if not available.

@@item FOPEN_RB
Define this if binary files are opened the same way as text files.

@@item PRINTF_HAS_LONG_LONG
Define this if the host can handle printing of long long integers via
the printf format conversion specifier @@code{ll}.  This is set by the
@@code{configure} script.

@@item LSEEK_NOT_LINEAR
Define this if @@code{lseek (n)} does not necessarily move to byte number
@@code{n} in the file.  This is only used when reading source files.  It
is normally faster to define @@code{CRLF_SOURCE_FILES} when possible.

@@item lint
Define this to help placate @@code{lint} in some situations.

@@item volatile
Define this to override the defaults of @@code{__volatile__} or
@@code{/**/}.
@@end ftable


@@node Target Architecture Definition

@@chapter Target Architecture Definition

@@cindex target architecture definition
@@value{GDBN}'s target architecture defines what sort of
machine-language programs @@value{GDBN} can work with, and how it works
with them.

The target architecture object is implemented as the C structure
@@code{struct gdbarch *}.  The structure, and its methods, are generated
using the Bourne shell script @@file{gdbarch.sh}.

@@menu
* OS ABI Variant Handling::
* Initialize New Architecture::
* Registers and Memory::
* Pointers and Addresses::
* Address Classes::
* Register Representation::
* Frame Interpretation::
* Inferior Call Setup::
* Adding support for debugging core files::
* Defining Other Architecture Features::
* Adding a New Target::
@@end menu

@@node  OS ABI Variant Handling
@@section Operating System ABI Variant Handling
@@cindex OS ABI variants

@@value{GDBN} provides a mechanism for handling variations in OS
ABIs.  An OS ABI variant may have influence over any number of
variables in the target architecture definition.  There are two major
components in the OS ABI mechanism: sniffers and handlers.

A @@dfn{sniffer} examines a file matching a BFD architecture/flavour pair
(the architecture may be wildcarded) in an attempt to determine the
OS ABI of that file.  Sniffers with a wildcarded architecture are considered
to be @@dfn{generic}, while sniffers for a specific architecture are
considered to be @@dfn{specific}.  A match from a specific sniffer
overrides a match from a generic sniffer.  Multiple sniffers for an
architecture/flavour may exist, in order to differentiate between two
different operating systems which use the same basic file format.  The
OS ABI framework provides a generic sniffer for ELF-format files which
examines the @@code{EI_OSABI} field of the ELF header, as well as note
sections known to be used by several operating systems.

@@cindex fine-tuning @@code{gdbarch} structure
A @@dfn{handler} is used to fine-tune the @@code{gdbarch} structure for the
selected OS ABI.  There may be only one handler for a given OS ABI
for each BFD architecture.

The following OS ABI variants are defined in @@file{defs.h}:

@@table @@code

@@findex GDB_OSABI_UNINITIALIZED
@@item GDB_OSABI_UNINITIALIZED
Used for struct gdbarch_info if ABI is still uninitialized.

@@findex GDB_OSABI_UNKNOWN
@@item GDB_OSABI_UNKNOWN
The ABI of the inferior is unknown.  The default @@code{gdbarch}
settings for the architecture will be used.

@@findex GDB_OSABI_SVR4
@@item GDB_OSABI_SVR4
UNIX System V Release 4.

@@findex GDB_OSABI_HURD
@@item GDB_OSABI_HURD
GNU using the Hurd kernel.

@@findex GDB_OSABI_SOLARIS
@@item GDB_OSABI_SOLARIS
Sun Solaris.

@@findex GDB_OSABI_OSF1
@@item GDB_OSABI_OSF1
OSF/1, including Digital UNIX and Compaq Tru64 UNIX.

@@findex GDB_OSABI_LINUX
@@item GDB_OSABI_LINUX
GNU using the Linux kernel.

@@findex GDB_OSABI_FREEBSD_AOUT
@@item GDB_OSABI_FREEBSD_AOUT
FreeBSD using the @@code{a.out} executable format.

@@findex GDB_OSABI_FREEBSD_ELF
@@item GDB_OSABI_FREEBSD_ELF
FreeBSD using the ELF executable format.

@@findex GDB_OSABI_NETBSD_AOUT
@@item GDB_OSABI_NETBSD_AOUT
NetBSD using the @@code{a.out} executable format.

@@findex GDB_OSABI_NETBSD_ELF
@@item GDB_OSABI_NETBSD_ELF
NetBSD using the ELF executable format.

@@findex GDB_OSABI_OPENBSD_ELF
@@item GDB_OSABI_OPENBSD_ELF
OpenBSD using the ELF executable format.

@@findex GDB_OSABI_WINCE
@@item GDB_OSABI_WINCE
Windows CE.

@@findex GDB_OSABI_GO32
@@item GDB_OSABI_GO32
DJGPP.

@@findex GDB_OSABI_IRIX
@@item GDB_OSABI_IRIX
Irix.

@@findex GDB_OSABI_INTERIX
@@item GDB_OSABI_INTERIX
Interix (Posix layer for MS-Windows systems).

@@findex GDB_OSABI_HPUX_ELF
@@item GDB_OSABI_HPUX_ELF
HP/UX using the ELF executable format.

@@findex GDB_OSABI_HPUX_SOM
@@item GDB_OSABI_HPUX_SOM
HP/UX using the SOM executable format.

@@findex GDB_OSABI_QNXNTO
@@item GDB_OSABI_QNXNTO
QNX Neutrino.

@@findex GDB_OSABI_CYGWIN
@@item GDB_OSABI_CYGWIN
Cygwin.

@@findex GDB_OSABI_AIX
@@item GDB_OSABI_AIX
AIX.

@@end table

Here are the functions that make up the OS ABI framework:

@@deftypefun {const char *} gdbarch_osabi_name (enum gdb_osabi @@var{osabi})
Return the name of the OS ABI corresponding to @@var{osabi}.
@@end deftypefun

@@deftypefun void gdbarch_register_osabi (enum bfd_architecture @@var{arch}, unsigned long @@var{machine}, enum gdb_osabi @@var{osabi}, void (*@@var{init_osabi})(struct gdbarch_info @@var{info}, struct gdbarch *@@var{gdbarch}))
Register the OS ABI handler specified by @@var{init_osabi} for the
architecture, machine type and OS ABI specified by @@var{arch},
@@var{machine} and @@var{osabi}.  In most cases, a value of zero for the
machine type, which implies the architecture's default machine type,
will suffice.
@@end deftypefun

@@deftypefun void gdbarch_register_osabi_sniffer (enum bfd_architecture @@var{arch}, enum bfd_flavour @@var{flavour}, enum gdb_osabi (*@@var{sniffer})(bfd *@@var{abfd}))
Register the OS ABI file sniffer specified by @@var{sniffer} for the
BFD architecture/flavour pair specified by @@var{arch} and @@var{flavour}.
If @@var{arch} is @@code{bfd_arch_unknown}, the sniffer is considered to
be generic, and is allowed to examine @@var{flavour}-flavoured files for
any architecture.
@@end deftypefun

@@deftypefun {enum gdb_osabi} gdbarch_lookup_osabi (bfd *@@var{abfd})
Examine the file described by @@var{abfd} to determine its OS ABI.
The value @@code{GDB_OSABI_UNKNOWN} is returned if the OS ABI cannot
be determined.
@@end deftypefun

@@deftypefun void gdbarch_init_osabi (struct gdbarch info @@var{info}, struct gdbarch *@@var{gdbarch}, enum gdb_osabi @@var{osabi})
Invoke the OS ABI handler corresponding to @@var{osabi} to fine-tune the
@@code{gdbarch} structure specified by @@var{gdbarch}.  If a handler
corresponding to @@var{osabi} has not been registered for @@var{gdbarch}'s
architecture, a warning will be issued and the debugging session will continue
with the defaults already established for @@var{gdbarch}.
@@end deftypefun

@@deftypefun void generic_elf_osabi_sniff_abi_tag_sections (bfd *@@var{abfd}, asection *@@var{sect}, void *@@var{obj})
Helper routine for ELF file sniffers.  Examine the file described by
@@var{abfd} and look at ABI tag note sections to determine the OS ABI
from the note.  This function should be called via
@@code{bfd_map_over_sections}.
@@end deftypefun

@@node Initialize New Architecture
@@section Initializing a New Architecture

@@menu
* How an Architecture is Represented::
* Looking Up an Existing Architecture::
* Creating a New Architecture::
@@end menu

@@node How an Architecture is Represented
@@subsection How an Architecture is Represented
@@cindex architecture representation
@@cindex representation of architecture

Each @@code{gdbarch} is associated with a single @@sc{bfd} architecture,
via a @@code{bfd_arch_@@var{arch}} in the @@code{bfd_architecture}
enumeration.  The @@code{gdbarch} is registered by a call to
@@code{register_gdbarch_init}, usually from the file's
@@code{_initialize_@@var{filename}} routine, which will be automatically
called during @@value{GDBN} startup.  The arguments are a @@sc{bfd}
architecture constant and an initialization function.

@@findex _initialize_@@var{arch}_tdep
@@cindex @@file{@@var{arch}-tdep.c}
A @@value{GDBN} description for a new architecture, @@var{arch} is created by
defining a global function @@code{_initialize_@@var{arch}_tdep}, by
convention in the source file @@file{@@var{arch}-tdep.c}.  For example,
in the case of the OpenRISC 1000, this function is called
@@code{_initialize_or1k_tdep} and is found in the file
@@file{or1k-tdep.c}.

@@cindex @@file{configure.tgt}
@@cindex @@code{gdbarch}
@@findex gdbarch_register
The resulting object files containing the implementation of the
@@code{_initialize_@@var{arch}_tdep} function are specified in the @@value{GDBN}
@@file{configure.tgt} file, which includes a large case statement
pattern matching against the @@code{--target} option of the
@@code{configure} script.  The new @@code{struct gdbarch} is created
within the @@code{_initialize_@@var{arch}_tdep} function by calling
@@code{gdbarch_register}:

@@smallexample
void gdbarch_register (enum bfd_architecture    @@var{architecture},
                       gdbarch_init_ftype      *@@var{init_func},
                       gdbarch_dump_tdep_ftype *@@var{tdep_dump_func});
@@end smallexample

The @@var{architecture} will identify the unique @@sc{bfd} to be
associated with this @@code{gdbarch}.  The @@var{init_func} funciton is
called to create and return the new @@code{struct gdbarch}.  The
@@var{tdep_dump_func} function will dump the target specific details
associated with this architecture.

For example the function @@code{_initialize_or1k_tdep} creates its
architecture for 32-bit OpenRISC 1000 architectures by calling:

@@smallexample
gdbarch_register (bfd_arch_or32, or1k_gdbarch_init, or1k_dump_tdep);
@@end smallexample

@@node Looking Up an Existing Architecture
@@subsection Looking Up an Existing Architecture
@@cindex @@code{gdbarch} lookup

The initialization function has this prototype:

@@smallexample
static struct gdbarch *
@@var{arch}_gdbarch_init (struct gdbarch_info @@var{info},
                         struct gdbarch_list *@@var{arches})
@@end smallexample

The @@var{info} argument contains parameters used to select the correct
architecture, and @@var{arches} is a list of architectures which
have already been created with the same @@code{bfd_arch_@@var{arch}}
value.

The initialization function should first make sure that @@var{info}
is acceptable, and return @@code{NULL} if it is not.  Then, it should
search through @@var{arches} for an exact match to @@var{info}, and
return one if found.  Lastly, if no exact match was found, it should
create a new architecture based on @@var{info} and return it.

@@findex gdbarch_list_lookup_by_info
@@cindex @@code{gdbarch_info}
The lookup is done using @@code{gdbarch_list_lookup_by_info}.  It is
passed the list of existing architectures, @@var{arches}, and the
@@code{struct gdbarch_info}, @@var{info}, and returns the first matching
architecture it finds, or @@code{NULL} if none are found.  If an
architecture is found it can be returned as the result from the
initialization function, otherwise a new @@code{struct gdbach} will need
to be created.

The struct gdbarch_info has the following components:

@@smallexample
struct gdbarch_info
@@{
   const struct bfd_arch_info *bfd_arch_info;
   int                         byte_order;
   bfd                        *abfd;
   struct gdbarch_tdep_info   *tdep_info;
   enum gdb_osabi              osabi;
   const struct target_desc   *target_desc;
@@};
@@end smallexample

@@vindex bfd_arch_info
The @@code{bfd_arch_info} member holds the key details about the
architecture.  The @@code{byte_order} member is a value in an
enumeration indicating the endianism.  The @@code{abfd} member is a
pointer to the full @@sc{bfd}, the @@code{tdep_info} member is
additional custom target specific information, @@code{osabi} identifies
which (if any) of a number of operating specific ABIs are used by this
architecture and the @@code{target_desc} member is a set of name-value
pairs with information about register usage in this target.

When the @@code{struct gdbarch} initialization function is called, not
all the fields are provided---only those which can be deduced from the
@@sc{bfd}.  The @@code{struct gdbarch_info}, @@var{info} is used as a
look-up key with the list of existing architectures, @@var{arches} to
see if a suitable architecture already exists.  The @@var{tdep_info},
@@var{osabi} and @@var{target_desc} fields may be added before this
lookup to refine the search.

Only information in @@var{info} should be used to choose the new
architecture.  Historically, @@var{info} could be sparse, and
defaults would be collected from the first element on @@var{arches}.
However, @@value{GDBN} now fills in @@var{info} more thoroughly,
so new @@code{gdbarch} initialization functions should not take
defaults from @@var{arches}.

@@node Creating a New Architecture
@@subsection Creating a New Architecture
@@cindex @@code{struct gdbarch} creation

@@findex gdbarch_alloc
@@cindex @@code{gdbarch_tdep} when allocating new @@code{gdbarch}
If no architecture is found, then a new architecture must be created,
by calling @@code{gdbarch_alloc} using the supplied @@code{@@w{struct
gdbarch_info}} and any additional custom target specific
information in a @@code{struct gdbarch_tdep}.  The prototype for
@@code{gdbarch_alloc} is:

@@smallexample
struct gdbarch *gdbarch_alloc (const struct gdbarch_info *@@var{info},
                               struct gdbarch_tdep       *@@var{tdep}); 
@@end smallexample

@@cindex @@code{set_gdbarch} functions
@@cindex @@code{gdbarch} accessor functions
The newly created struct gdbarch must then be populated.  Although
there are default values, in most cases they are not what is
required.

For each element, @@var{X}, there is are a pair of corresponding accessor
functions, one to set the value of that element,
@@code{set_gdbarch_@@var{X}}, the second to either get the value of an
element (if it is a variable) or to apply the element (if it is a
function), @@code{gdbarch_@@var{X}}.  Note that both accessor functions
take a pointer to the @@code{@@w{struct gdbarch}} as first
argument.  Populating the new @@code{gdbarch} should use the
@@code{set_gdbarch} functions.

The following sections identify the main elements that should be set
in this way.  This is not the complete list, but represents the
functions and elements that must commonly be specified for a new
architecture.  Many of the functions and variables are described in the
header file @@file{gdbarch.h}.

This is the main work in defining a new architecture.  Implementing the
set of functions to populate the @@code{struct gdbarch}.

@@cindex @@code{gdbarch_tdep} definition
@@code{struct gdbarch_tdep} is not defined within @@value{GDBN}---it is up
to the user to define this struct if it is needed to hold custom target
information that is not covered by the standard @@code{@@w{struct
gdbarch}}. For example with the OpenRISC 1000 architecture it is used to
hold the number of matchpoints available in the target (along with other
information).

If there is no additional target specific information, it can be set to
@@code{NULL}.

@@node Registers and Memory
@@section Registers and Memory

@@value{GDBN}'s model of the target machine is rather simple.
@@value{GDBN} assumes the machine includes a bank of registers and a
block of memory.  Each register may have a different size.

@@value{GDBN} does not have a magical way to match up with the
compiler's idea of which registers are which; however, it is critical
that they do match up accurately.  The only way to make this work is
to get accurate information about the order that the compiler uses,
and to reflect that in the @@code{gdbarch_register_name} and related functions.

@@value{GDBN} can handle big-endian, little-endian, and bi-endian architectures.

@@node Pointers and Addresses
@@section Pointers Are Not Always Addresses
@@cindex pointer representation
@@cindex address representation
@@cindex word-addressed machines
@@cindex separate data and code address spaces
@@cindex spaces, separate data and code address
@@cindex address spaces, separate data and code
@@cindex code pointers, word-addressed
@@cindex converting between pointers and addresses
@@cindex D10V addresses

On almost all 32-bit architectures, the representation of a pointer is
indistinguishable from the representation of some fixed-length number
whose value is the byte address of the object pointed to.  On such
machines, the words ``pointer'' and ``address'' can be used interchangeably.
However, architectures with smaller word sizes are often cramped for
address space, so they may choose a pointer representation that breaks this
identity, and allows a larger code address space.

@@c D10V is gone from sources - more current example?

For example, the Renesas D10V is a 16-bit VLIW processor whose
instructions are 32 bits long@@footnote{Some D10V instructions are
actually pairs of 16-bit sub-instructions.  However, since you can't
jump into the middle of such a pair, code addresses can only refer to
full 32 bit instructions, which is what matters in this explanation.}.
If the D10V used ordinary byte addresses to refer to code locations,
then the processor would only be able to address 64kb of instructions.
However, since instructions must be aligned on four-byte boundaries, the
low two bits of any valid instruction's byte address are always
zero---byte addresses waste two bits.  So instead of byte addresses,
the D10V uses word addresses---byte addresses shifted right two bits---to
refer to code.  Thus, the D10V can use 16-bit words to address 256kb of
code space.

However, this means that code pointers and data pointers have different
forms on the D10V.  The 16-bit word @@code{0xC020} refers to byte address
@@code{0xC020} when used as a data address, but refers to byte address
@@code{0x30080} when used as a code address.

(The D10V also uses separate code and data address spaces, which also
affects the correspondence between pointers and addresses, but we're
going to ignore that here; this example is already too long.)

To cope with architectures like this---the D10V is not the only
one!---@@value{GDBN} tries to distinguish between @@dfn{addresses}, which are
byte numbers, and @@dfn{pointers}, which are the target's representation
of an address of a particular type of data.  In the example above,
@@code{0xC020} is the pointer, which refers to one of the addresses
@@code{0xC020} or @@code{0x30080}, depending on the type imposed upon it.
@@value{GDBN} provides functions for turning a pointer into an address
and vice versa, in the appropriate way for the current architecture.

Unfortunately, since addresses and pointers are identical on almost all
processors, this distinction tends to bit-rot pretty quickly.  Thus,
each time you port @@value{GDBN} to an architecture which does
distinguish between pointers and addresses, you'll probably need to
clean up some architecture-independent code.

Here are functions which convert between pointers and addresses:

@@deftypefun CORE_ADDR extract_typed_address (void *@@var{buf}, struct type *@@var{type})
Treat the bytes at @@var{buf} as a pointer or reference of type
@@var{type}, and return the address it represents, in a manner
appropriate for the current architecture.  This yields an address
@@value{GDBN} can use to read target memory, disassemble, etc.  Note that
@@var{buf} refers to a buffer in @@value{GDBN}'s memory, not the
inferior's.

For example, if the current architecture is the Intel x86, this function
extracts a little-endian integer of the appropriate length from
@@var{buf} and returns it.  However, if the current architecture is the
D10V, this function will return a 16-bit integer extracted from
@@var{buf}, multiplied by four if @@var{type} is a pointer to a function.

If @@var{type} is not a pointer or reference type, then this function
will signal an internal error.
@@end deftypefun

@@deftypefun CORE_ADDR store_typed_address (void *@@var{buf}, struct type *@@var{type}, CORE_ADDR @@var{addr})
Store the address @@var{addr} in @@var{buf}, in the proper format for a
pointer of type @@var{type} in the current architecture.  Note that
@@var{buf} refers to a buffer in @@value{GDBN}'s memory, not the
inferior's.

For example, if the current architecture is the Intel x86, this function
stores @@var{addr} unmodified as a little-endian integer of the
appropriate length in @@var{buf}.  However, if the current architecture
is the D10V, this function divides @@var{addr} by four if @@var{type} is
a pointer to a function, and then stores it in @@var{buf}.

If @@var{type} is not a pointer or reference type, then this function
will signal an internal error.
@@end deftypefun

@@deftypefun CORE_ADDR value_as_address (struct value *@@var{val})
Assuming that @@var{val} is a pointer, return the address it represents,
as appropriate for the current architecture.

This function actually works on integral values, as well as pointers.
For pointers, it performs architecture-specific conversions as
described above for @@code{extract_typed_address}.
@@end deftypefun

@@deftypefun CORE_ADDR value_from_pointer (struct type *@@var{type}, CORE_ADDR @@var{addr})
Create and return a value representing a pointer of type @@var{type} to
the address @@var{addr}, as appropriate for the current architecture.
This function performs architecture-specific conversions as described
above for @@code{store_typed_address}.
@@end deftypefun

Here are two functions which architectures can define to indicate the
relationship between pointers and addresses.  These have default
definitions, appropriate for architectures on which all pointers are
simple unsigned byte addresses.

@@deftypefun CORE_ADDR gdbarch_pointer_to_address (struct gdbarch *@@var{gdbarch}, struct type *@@var{type}, char *@@var{buf})
Assume that @@var{buf} holds a pointer of type @@var{type}, in the
appropriate format for the current architecture.  Return the byte
address the pointer refers to.

This function may safely assume that @@var{type} is either a pointer or a
C@@t{++} reference type.
@@end deftypefun

@@deftypefun void gdbarch_address_to_pointer (struct gdbarch *@@var{gdbarch}, struct type *@@var{type}, char *@@var{buf}, CORE_ADDR @@var{addr})
Store in @@var{buf} a pointer of type @@var{type} representing the address
@@var{addr}, in the appropriate format for the current architecture.

This function may safely assume that @@var{type} is either a pointer or a
C@@t{++} reference type.
@@end deftypefun

@@node Address Classes
@@section Address Classes
@@cindex address classes
@@cindex DW_AT_byte_size
@@cindex DW_AT_address_class

Sometimes information about different kinds of addresses is available
via the debug information.  For example, some programming environments
define addresses of several different sizes.  If the debug information
distinguishes these kinds of address classes through either the size
info (e.g, @@code{DW_AT_byte_size} in @@w{DWARF 2}) or through an explicit
address class attribute (e.g, @@code{DW_AT_address_class} in @@w{DWARF 2}), the
following macros should be defined in order to disambiguate these
types within @@value{GDBN} as well as provide the added information to
a @@value{GDBN} user when printing type expressions.

@@deftypefun int gdbarch_address_class_type_flags (struct gdbarch *@@var{gdbarch}, int @@var{byte_size}, int @@var{dwarf2_addr_class})
Returns the type flags needed to construct a pointer type whose size
is @@var{byte_size} and whose address class is @@var{dwarf2_addr_class}.
This function is normally called from within a symbol reader.  See
@@file{dwarf2read.c}.
@@end deftypefun

@@deftypefun {char *} gdbarch_address_class_type_flags_to_name (struct gdbarch *@@var{gdbarch}, int @@var{type_flags})
Given the type flags representing an address class qualifier, return
its name.
@@end deftypefun
@@deftypefun int gdbarch_address_class_name_to_type_flags (struct gdbarch *@@var{gdbarch}, int @@var{name}, int *@@var{type_flags_ptr})
Given an address qualifier name, set the @@code{int} referenced by @@var{type_flags_ptr} to the type flags
for that address class qualifier.
@@end deftypefun

Since the need for address classes is rather rare, none of
the address class functions are defined by default.  Predicate
functions are provided to detect when they are defined.

Consider a hypothetical architecture in which addresses are normally
32-bits wide, but 16-bit addresses are also supported.  Furthermore,
suppose that the @@w{DWARF 2} information for this architecture simply
uses a @@code{DW_AT_byte_size} value of 2 to indicate the use of one
of these "short" pointers.  The following functions could be defined
to implement the address class functions:

@@smallexample
somearch_address_class_type_flags (int byte_size,
                                   int dwarf2_addr_class)
@@{
  if (byte_size == 2)
    return TYPE_FLAG_ADDRESS_CLASS_1;
  else
    return 0;
@@}

static char *
somearch_address_class_type_flags_to_name (int type_flags)
@@{
  if (type_flags & TYPE_FLAG_ADDRESS_CLASS_1)
    return "short";
  else
    return NULL;
@@}

int
somearch_address_class_name_to_type_flags (char *name,
                                           int *type_flags_ptr)
@@{
  if (strcmp (name, "short") == 0)
    @@{
      *type_flags_ptr = TYPE_FLAG_ADDRESS_CLASS_1;
      return 1;
    @@}
  else
    return 0;
@@}
@@end smallexample

The qualifier @@code{@@@@short} is used in @@value{GDBN}'s type expressions
to indicate the presence of one of these ``short'' pointers.  For
example if the debug information indicates that @@code{short_ptr_var} is
one of these short pointers, @@value{GDBN} might show the following
behavior:

@@smallexample
(gdb) ptype short_ptr_var
type = int * @@@@short
@@end smallexample


@@node Register Representation
@@section Register Representation

@@menu
* Raw and Cooked Registers::
* Register Architecture Functions & Variables::
* Register Information Functions::
* Register and Memory Data::
* Register Caching::
@@end menu

@@node Raw and Cooked Registers
@@subsection Raw and Cooked Registers
@@cindex raw register representation
@@cindex cooked register representation
@@cindex representations, raw and cooked registers

@@value{GDBN} considers registers to be a set with members numbered
linearly from 0 upwards.  The first part of that set corresponds to real
physical registers, the second part to any @@dfn{pseudo-registers}.
Pseudo-registers have no independent physical existence, but are useful
representations of information within the architecture.  For example the
OpenRISC 1000 architecture has up to 32 general purpose registers, which
are typically represented as 32-bit (or 64-bit) integers.  However the
GPRs are also used as operands to the floating point operations, and it
could be convenient to define a set of pseudo-registers, to show the
GPRs represented as floating point values.

For any architecture, the implementer will decide on a mapping from
hardware to @@value{GDBN} register numbers.  The registers corresponding to real
hardware are referred to as @@dfn{raw} registers, the remaining registers are
@@dfn{pseudo-registers}.  The total register set (raw and pseudo) is called
the @@dfn{cooked} register set.


@@node Register Architecture Functions & Variables
@@subsection Functions and Variables Specifying the Register Architecture
@@cindex @@code{gdbarch} register architecture functions

These @@code{struct gdbarch} functions and variables specify the number
and type of registers in the architecture.

@@deftypefn {Architecture Function} CORE_ADDR read_pc (struct regcache *@@var{regcache})
@@end deftypefn
@@deftypefn {Architecture Function} void write_pc (struct regcache *@@var{regcache}, CORE_ADDR @@var{val})

Read or write the program counter.  The default value of both
functions is @@code{NULL} (no function available).  If the program
counter is just an ordinary register, it can be specified in
@@code{struct gdbarch} instead (see @@code{pc_regnum} below) and it will
be read or written using the standard routines to access registers.  This
function need only be specified if the program counter is not an
ordinary register.

Any register information can be obtained using the supplied register
cache, @@var{regcache}.  @@xref{Register Caching, , Register Caching}.

@@end deftypefn

@@deftypefn {Architecture Function} void pseudo_register_read (struct gdbarch *@@var{gdbarch}, struct regcache *@@var{regcache}, int @@var{regnum}, const gdb_byte *@@var{buf})
@@end deftypefn
@@deftypefn {Architecture Function} void pseudo_register_write (struct gdbarch *@@var{gdbarch}, struct regcache *@@var{regcache}, int @@var{regnum}, const gdb_byte *@@var{buf})

These functions should be defined if there are any pseudo-registers.
The default value is @@code{NULL}.  @@var{regnum} is the number of the
register to read or write (which will be a @@dfn{cooked} register
number) and @@var{buf} is the buffer where the value read will be
placed, or from which the value to be written will be taken.  The
value in the buffer may be converted to or from a signed or unsigned
integral value using one of the utility functions (@@pxref{Register and
Memory Data, , Using Different Register and Memory Data
Representations}).

The access should be for the specified architecture,
@@var{gdbarch}.  Any register information can be obtained using the
supplied register cache, @@var{regcache}.  @@xref{Register Caching, ,
Register Caching}.

@@end deftypefn

@@deftypevr {Architecture Variable} int sp_regnum
@@vindex sp_regnum
@@cindex stack pointer
@@cindex @@kbd{$sp}

This specifies the register holding the stack pointer, which may be a
raw or pseudo-register.  It defaults to -1 (not defined), but it is an
error for it not to be defined.

The value of the stack pointer register can be accessed withing
@@value{GDBN} as the variable @@kbd{$sp}.

@@end deftypevr

@@deftypevr {Architecture Variable} int pc_regnum
@@vindex pc_regnum
@@cindex program counter
@@cindex @@kbd{$pc}

This specifies the register holding the program counter, which may be a
raw or pseudo-register.  It defaults to -1 (not defined).  If
@@code{pc_regnum} is not defined, then the functions @@code{read_pc} and
@@code{write_pc} (see above) must be defined.

The value of the program counter (whether defined as a register, or
through @@code{read_pc} and @@code{write_pc}) can be accessed withing
@@value{GDBN} as the variable @@kbd{$pc}.

@@end deftypevr

@@deftypevr {Architecture Variable} int ps_regnum
@@vindex ps_regnum
@@cindex processor status register
@@cindex status register
@@cindex @@kbd{$ps}

This specifies the register holding the processor status (often called
the status register), which may be a raw or pseudo-register.  It
defaults to -1 (not defined).

If defined, the value of this register can be accessed withing
@@value{GDBN} as the variable @@kbd{$ps}.

@@end deftypevr

@@deftypevr {Architecture Variable} int fp0_regnum
@@vindex fp0_regnum
@@cindex first floating point register

This specifies the first floating point register.  It defaults to
0.  @@code{fp0_regnum} is not needed unless the target offers support
for floating point.

@@end deftypevr

@@node Register Information Functions
@@subsection Functions Giving Register Information
@@cindex @@code{gdbarch} register information functions

These functions return information about registers.

@@deftypefn {Architecture Function} {const char *} register_name (struct gdbarch *@@var{gdbarch}, int @@var{regnum})

This function should convert a register number (raw or pseudo) to a
register name (as a C @@code{const char *}).  This is used both to
determine the name of a register for output and to work out the meaning
of any register names used as input.  The function may also return
@@code{NULL}, to indicate that @@var{regnum} is not a valid register.

For example with the OpenRISC 1000, @@value{GDBN} registers 0-31 are the
General Purpose Registers, register 32 is the program counter and
register 33 is the supervision register (i.e.@@: the processor status
register), which map to the strings @@code{"gpr00"} through
@@code{"gpr31"}, @@code{"pc"} and @@code{"sr"} respectively. This means
that the @@value{GDBN} command @@kbd{print $gpr5} should print the value of
the OR1K general purpose register 5@@footnote{
@@cindex frame pointer
@@cindex @@kbd{$fp}
Historically, @@value{GDBN} always had a concept of a frame pointer
register, which could be accessed via the @@value{GDBN} variable,
@@kbd{$fp}.  That concept is now deprecated, recognizing that not all
architectures have a frame pointer.  However if an architecture does
have a frame pointer register, and defines a register or
pseudo-register with the name @@code{"fp"}, then that register will be
used as the value of the @@kbd{$fp} variable.}.

The default value for this function is @@code{NULL}, meaning
undefined. It should always be defined.

The access should be for the specified architecture, @@var{gdbarch}.

@@end deftypefn

@@deftypefn {Architecture Function} {struct type *} register_type (struct gdbarch *@@var{gdbarch}, int @@var{regnum})

Given a register number, this function identifies the type of data it
may be holding, specified as a @@code{struct type}.  @@value{GDBN} allows
creation of arbitrary types, but a number of built in types are
provided (@@code{builtin_type_void}, @@code{builtin_type_int32} etc),
together with functions to derive types from these.

Typically the program counter will have a type of ``pointer to
function'' (it points to code), the frame pointer and stack pointer
will have types of ``pointer to void'' (they point to data on the stack)
and all other integer registers will have a type of 32-bit integer or
64-bit integer.

This information guides the formatting when displaying register
information.  The default value is @@code{NULL} meaning no information is
available to guide formatting when displaying registers.

@@end deftypefn

@@deftypefn {Architecture Function} void print_registers_info (struct gdbarch *@@var{gdbarch}, struct ui_file *@@var{file}, struct frame_info *@@var{frame}, int @@var{regnum}, int @@var{all})

Define this function to print out one or all of the registers for the
@@value{GDBN} @@kbd{info registers} command.  The default value is the
function @@code{default_print_registers_info}, which uses the register
type information (see @@code{register_type} above) to determine how each
register should be printed.  Define a custom version of this function
for fuller control over how the registers are displayed.

The access should be for the specified architecture, @@var{gdbarch},
with output to the file specified by the User Interface
Independent Output file handle, @@var{file} (@@pxref{UI-Independent
Output, , UI-Independent Output---the @@code{ui_out}
Functions}).

The registers should show their values in the frame specified by
@@var{frame}.  If @@var{regnum} is -1 and @@var{all} is zero, then all
the ``significant'' registers should be shown (the implementer should
decide which registers are ``significant''). Otherwise only the value of
the register specified by @@var{regnum} should be output.  If
@@var{regnum} is -1 and @@var{all} is non-zero (true), then the value of
all registers should be shown.

By default @@code{default_print_registers_info} prints one register per
line, and if @@var{all} is zero omits floating-point registers.

@@end deftypefn

@@deftypefn {Architecture Function} void print_float_info (struct gdbarch *@@var{gdbarch}, struct ui_file *@@var{file}, struct frame_info *@@var{frame}, const char *@@var{args})

Define this function to provide output about the floating point unit and
registers for the @@value{GDBN} @@kbd{info float} command respectively.
The default value is @@code{NULL} (not defined), meaning no information
will be provided.

The @@var{gdbarch} and @@var{file} and @@var{frame} arguments have the same
meaning as in the @@code{print_registers_info} function above. The string
@@var{args} contains any supplementary arguments to the @@kbd{info float}
command.

Define this function if the target supports floating point operations.

@@end deftypefn

@@deftypefn {Architecture Function} void print_vector_info (struct gdbarch *@@var{gdbarch}, struct ui_file *@@var{file}, struct frame_info *@@var{frame}, const char *@@var{args})

Define this function to provide output about the vector unit and
registers for the @@value{GDBN} @@kbd{info vector} command respectively.
The default value is @@code{NULL} (not defined), meaning no information
will be provided.

The @@var{gdbarch}, @@var{file} and @@var{frame} arguments have the
same meaning as in the @@code{print_registers_info} function above.  The
string @@var{args} contains any supplementary arguments to the @@kbd{info
vector} command.

Define this function if the target supports vector operations.

@@end deftypefn

@@deftypefn {Architecture Function} int register_reggroup_p (struct gdbarch *@@var{gdbarch}, int @@var{regnum}, struct reggroup *@@var{group})

@@value{GDBN} groups registers into different categories (general,
vector, floating point etc).  This function, given a register,
@@var{regnum}, and group, @@var{group}, returns 1 (true) if the register
is in the group and 0 (false) otherwise.

The information should be for the specified architecture,
@@var{gdbarch}

The default value is the function @@code{default_register_reggroup_p}
which will do a reasonable job based on the type of the register (see
the function @@code{register_type} above), with groups for general
purpose registers, floating point registers, vector registers and raw
(i.e not pseudo) registers.

@@end deftypefn

@@node Register and Memory Data
@@subsection Using Different Register and Memory Data Representations
@@cindex register representation
@@cindex memory representation
@@cindex representations, register and memory
@@cindex register data formats, converting
@@cindex @@code{struct value}, converting register contents to

Some architectures have different representations of data objects,
depending whether the object is held in a register or memory.  For
example:

@@itemize @@bullet

@@item
The Alpha architecture can represent 32 bit integer values in
floating-point registers.

@@item
The x86 architecture supports 80-bit floating-point registers.  The
@@code{long double} data type occupies 96 bits in memory but only 80
bits when stored in a register.

@@end itemize

In general, the register representation of a data type is determined by
the architecture, or @@value{GDBN}'s interface to the architecture, while
the memory representation is determined by the Application Binary
Interface.

For almost all data types on almost all architectures, the two
representations are identical, and no special handling is needed.
However, they do occasionally differ.  An architecture may define the
following @@code{struct gdbarch} functions to request conversions
between the register and memory representations of a data type:

@@deftypefn {Architecture Function} int gdbarch_convert_register_p (struct gdbarch *@@var{gdbarch}, int @@var{reg})

Return non-zero (true) if the representation of a data value stored in
this register may be different to the representation of that same data
value when stored in memory.  The default value is @@code{NULL}
(undefined).

If this function is defined and returns non-zero, the @@code{struct
gdbarch} functions @@code{gdbarch_register_to_value} and
@@code{gdbarch_value_to_register} (see below) should be used to perform
any necessary conversion.

If defined, this function should return zero for the register's native
type, when no conversion is necessary.
@@end deftypefn

@@deftypefn {Architecture Function} void gdbarch_register_to_value (struct gdbarch *@@var{gdbarch}, int @@var{reg}, struct type *@@var{type}, char *@@var{from}, char *@@var{to})

Convert the value of register number @@var{reg} to a data object of
type @@var{type}.  The buffer at @@var{from} holds the register's value
in raw format; the converted value should be placed in the buffer at
@@var{to}.

@@quotation
@@emph{Note:} @@code{gdbarch_register_to_value} and
@@code{gdbarch_value_to_register} take their @@var{reg} and @@var{type}
arguments in different orders.
@@end quotation

@@code{gdbarch_register_to_value} should only be used with registers
for which the @@code{gdbarch_convert_register_p} function returns a
non-zero value.

@@end deftypefn

@@deftypefn {Architecture Function} void gdbarch_value_to_register (struct gdbarch *@@var{gdbarch}, struct type *@@var{type}, int @@var{reg}, char *@@var{from}, char *@@var{to})

Convert a data value of type @@var{type} to register number @@var{reg}'
raw format.

@@quotation
@@emph{Note:} @@code{gdbarch_register_to_value} and
@@code{gdbarch_value_to_register} take their @@var{reg} and @@var{type}
arguments in different orders.
@@end quotation

@@code{gdbarch_value_to_register} should only be used with registers
for which the @@code{gdbarch_convert_register_p} function returns a
non-zero value.

@@end deftypefn

@@node Register Caching
@@subsection Register Caching
@@cindex register caching

Caching of registers is used, so that the target does not need to be
accessed and reanalyzed multiple times for each register in
circumstances where the register value cannot have changed.

@@cindex @@code{struct regcache}
@@value{GDBN} provides @@code{struct regcache}, associated with a
particular @@code{struct gdbarch} to hold the cached values of the raw
registers.  A set of functions is provided to access both the raw
registers (with @@code{raw} in their name) and the full set of cooked
registers (with @@code{cooked} in their name).  Functions are provided
to ensure the register cache is kept synchronized with the values of
the actual registers in the target.

Accessing registers through the @@code{struct regcache} routines will
ensure that the appropriate @@code{struct gdbarch} functions are called
when necessary to access the underlying target architecture.  In general
users should use the @@dfn{cooked} functions, since these will map to the
@@dfn{raw} functions automatically as appropriate.

@@findex regcache_cooked_read
@@findex regcache_cooked_write
@@cindex @@code{gdb_byte}
@@findex regcache_cooked_read_signed
@@findex regcache_cooked_read_unsigned
@@findex regcache_cooked_write_signed
@@findex regcache_cooked_write_unsigned
The two key functions are @@code{regcache_cooked_read} and
@@code{regcache_cooked_write} which read or write a register from or to
a byte buffer (type @@code{gdb_byte *}).  For convenience the wrapper
functions @@code{regcache_cooked_read_signed},
@@code{regcache_cooked_read_unsigned},
@@code{regcache_cooked_write_signed} and
@@code{regcache_cooked_write_unsigned} are provided, which read or
write the value using the buffer and convert to or from an integral
value as appropriate.

@@node Frame Interpretation
@@section Frame Interpretation

@@menu
* All About Stack Frames::
* Frame Handling Terminology::
* Prologue Caches::
* Functions and Variable to Analyze Frames::
* Functions to Access Frame Data::
* Analyzing Stacks---Frame Sniffers::
@@end menu

@@node All About Stack Frames
@@subsection All About Stack Frames

@@value{GDBN} needs to understand the stack on which local (automatic)
variables are stored.  The area of the stack containing all the local
variables for a function invocation is known as the @@dfn{stack frame}
for that function (or colloquially just as the @@dfn{frame}).  In turn the
function that called the function will have its stack frame, and so on
back through the chain of functions that have been called.

Almost all architectures have one register dedicated to point to the
end of the stack (the @@dfn{stack pointer}).  Many have a second register
which points to the start of the currently active stack frame (the
@@dfn{frame pointer}).  The specific arrangements for an architecture are
a key part of the ABI.

A diagram helps to explain this.  Here is a simple program to compute
factorials:

@@smallexample
#include <stdio.h>
int fact (int n)
@@{
  if (0 == n)
    @@{
      return 1;
    @@}
  else
    @@{
      return n * fact (n - 1);
    @@}
@@}

main ()
@@{
  int i;

  for (i = 0; i < 10; i++)
    @@{
      int   f = fact (i);
      printf ("%d! = %d\n", i, f);
    @@}
@@}
@@end smallexample

Consider the state of the stack when the code reaches line 6 after the
main program has called @@code{fact@@w{ }(3)}.  The chain of function
calls will be @@code{main ()}, @@code{fact@@w{ }(3)}, @@code{fact@@w{
}(2)}, @@code{@@w{fact (1)}} and @@code{fact@@w{ }(0)}.

In this illustration the stack is falling (as used for example by the
OpenRISC 1000 ABI).  The stack pointer (SP) is at the end of the stack
(lowest address) and the frame pointer (FP) is at the highest address
in the current stack frame.  The following diagram shows how the stack
looks.

@@center @@image{stack_frame,14cm}

In each stack frame, offset 0 from the stack pointer is the frame
pointer of the previous frame and offset 4 (this is illustrating a
32-bit architecture) from the stack pointer is the return address.
Local variables are indexed from the frame pointer, with negative
indexes.  In the function @@code{fact}, offset -4 from the frame
pointer is the argument @@var{n}.  In the @@code{main} function, offset
-4 from the frame pointer is the local variable @@var{i} and offset -8
from the frame pointer is the local variable @@var{f}@@footnote{This is
a simplified example for illustrative purposes only.  Good optimizing
compilers would not put anything on the stack for such simple
functions.  Indeed they might eliminate the recursion and use of the
stack entirely!}.

It is very easy to get confused when examining stacks.  @@value{GDBN}
has terminology it uses rigorously throughout.  The stack frame of the
function currently executing, or where execution stopped is numbered
zero.  In this example frame #0 is the stack frame of the call to
@@code{fact@@w{ }(0)}.  The stack frame of its calling function
(@@code{fact@@w{ }(1)} in this case) is numbered #1 and so on back
through the chain of calls.

The main @@value{GDBN} data structure describing frames is
 @@code{@@w{struct frame_info}}.  It is not used directly, but only via
its accessor functions.  @@code{frame_info} includes information about
the registers in the frame and a pointer to the code of the function
with which the frame is associated.  The entire stack is represented as
a linked list of @@code{frame_info} structs.

@@node Frame Handling Terminology
@@subsection Frame Handling Terminology

It is easy to get confused when referencing stack frames.  @@value{GDBN}
uses some precise terminology.

@@itemize @@bullet

@@item
@@cindex THIS frame
@@cindex stack frame, definition of THIS frame
@@cindex frame, definition of THIS frame
@@dfn{THIS} frame is the frame currently under consideration.

@@item
@@cindex NEXT frame
@@cindex stack frame, definition of NEXT frame
@@cindex frame, definition of NEXT frame
The @@dfn{NEXT} frame, also sometimes called the inner or newer frame is the
frame of the function called by the function of THIS frame.

@@item
@@cindex PREVIOUS frame
@@cindex stack frame, definition of PREVIOUS frame
@@cindex frame, definition of PREVIOUS frame
The @@dfn{PREVIOUS} frame, also sometimes called the outer or older frame is
the frame of the function which called the function of THIS frame.

@@end itemize

So in the example in the previous section (@@pxref{All About Stack
Frames, , All About Stack Frames}), if THIS frame is #3 (the call to
@@code{fact@@w{ }(3)}), the NEXT frame is frame #2 (the call to
@@code{fact@@w{ }(2)}) and the PREVIOUS frame is frame #4 (the call to
@@code{main@@w{ }()}).

@@cindex innermost frame
@@cindex stack frame, definition of innermost frame
@@cindex frame, definition of innermost frame
The @@dfn{innermost} frame is the frame of the current executing
function, or where the program stopped, in this example, in the middle
of the call to @@code{@@w{fact (0))}}.  It is always numbered frame #0.

@@cindex base of a frame
@@cindex stack frame, definition of base of a frame
@@cindex frame, definition of base of a frame
The @@dfn{base} of a frame is the address immediately before the start
of the NEXT frame.  For a stack which grows down in memory (a
@@dfn{falling} stack) this will be the lowest address and for a stack
which grows up in memory (a @@dfn{rising} stack) this will be the
highest address in the frame.

@@value{GDBN} functions to analyze the stack are typically given a
pointer to the NEXT frame to determine information about THIS
frame.  Information about THIS frame includes data on where the
registers of the PREVIOUS frame are stored in this stack frame.  In
this example the frame pointer of the PREVIOUS frame is stored at
offset 0 from the stack pointer of THIS frame.

@@cindex unwinding
@@cindex stack frame, definition of unwinding
@@cindex frame, definition of unwinding
The process whereby a function is given a pointer to the NEXT
frame to work out information about THIS frame is referred to as
@@dfn{unwinding}.  The @@value{GDBN} functions involved in this typically
include unwind in their name.

@@cindex sniffing
@@cindex stack frame, definition of sniffing
@@cindex frame, definition of sniffing
The process of analyzing a target to determine the information that
should go in struct frame_info is called @@dfn{sniffing}.  The functions
that carry this out are called sniffers and typically include sniffer
in their name.  More than one sniffer may be required to extract all
the information for a particular frame.

@@cindex sentinel frame
@@cindex stack frame, definition of sentinel frame
@@cindex frame, definition of sentinel frame
Because so many functions work using the NEXT frame, there is an issue
about addressing the innermost frame---it has no NEXT frame.  To solve
this @@value{GDBN} creates a dummy frame #-1, known as the
@@dfn{sentinel} frame.

@@node Prologue Caches
@@subsection Prologue Caches

@@cindex function prologue
@@cindex prologue of a function
All the frame sniffing functions typically examine the code at the
start of the corresponding function, to determine the state of
registers.  The ABI will save old values and set new values of key
registers at the start of each function in what is known as the
function @@dfn{prologue}.

@@cindex prologue cache
For any particular stack frame this data does not change, so all the
standard unwinding functions, in addition to receiving a pointer to
the NEXT frame as their first argument, receive a pointer to a
@@dfn{prologue cache} as their second argument.  This can be used to store
values associated with a particular frame, for reuse on subsequent
calls involving the same frame.

It is up to the user to define the structure used (it is a
@@code{void@@w{ }*} pointer) and arrange allocation and deallocation of
storage.  However for general use, @@value{GDBN} provides
@@code{@@w{struct trad_frame_cache}}, with a set of accessor
routines.  This structure holds the stack and code address of
THIS frame, the base address of the frame, a pointer to the
struct @@code{frame_info} for the NEXT frame and details of
where the registers of the PREVIOUS frame may be found in THIS
frame.

Typically the first time any sniffer function is called with NEXT
frame, the prologue sniffer for THIS frame will be @@code{NULL}.  The
sniffer will analyze the frame, allocate a prologue cache structure
and populate it.  Subsequent calls using the same NEXT frame will
pass in this prologue cache, so the data can be returned with no
additional analysis.

@@node Functions and Variable to Analyze Frames
@@subsection Functions and Variable to Analyze Frames

These struct @@code{gdbarch} functions and variable should be defined
to provide analysis of the stack frame and allow it to be adjusted as
required.

@@deftypefn {Architecture Function} CORE_ADDR skip_prologue (struct gdbarch *@@var{gdbarch}, CORE_ADDR @@var{pc})

The prologue of a function is the code at the beginning of the
function which sets up the stack frame, saves the return address
etc.  The code representing the behavior of the function starts after
the prologue.

This function skips past the prologue of a function if the program
counter, @@var{pc}, is within the prologue of a function.  The result is
the program counter immediately after the prologue.  With modern
optimizing compilers, this may be a far from trivial exercise.  However
the required information may be within the binary as DWARF2 debugging
information, making the job much easier.

The default value is @@code{NULL} (not defined).  This function should always
be provided, but can take advantage of DWARF2 debugging information,
if that is available.

@@end deftypefn

@@deftypefn {Architecture Function} int inner_than (CORE_ADDR @@var{lhs}, CORE_ADDR @@var{rhs})
@@findex core_addr_lessthan
@@findex core_addr_greaterthan

Given two frame or stack pointers, return non-zero (true) if the first
represents the @@dfn{inner} stack frame and 0 (false) otherwise.  This
is used to determine whether the target has a stack which grows up in
memory (rising stack) or grows down in memory (falling stack).
@@xref{All About Stack Frames, , All About Stack Frames}, for an
explanation of @@dfn{inner} frames.

The default value of this function is @@code{NULL} and it should always
be defined.  However for almost all architectures one of the built-in
functions can be used: @@code{core_addr_lessthan} (for stacks growing
down in memory) or @@code{core_addr_greaterthan} (for stacks growing up
in memory).

@@end deftypefn

@@anchor{frame_align}
@@deftypefn {Architecture Function} CORE_ADDR frame_align (struct gdbarch *@@var{gdbarch}, CORE_ADDR @@var{address})
@@findex align_down
@@findex align_up

The architecture may have constraints on how its frames are
aligned.  For example the OpenRISC 1000 ABI requires stack frames to be
double-word aligned, but 32-bit versions of the architecture allocate
single-word values to the stack.  Thus extra padding may be needed at
the end of a stack frame.

Given a proposed address for the stack pointer, this function
returns a suitably aligned address (by expanding the stack frame).

The default value is @@code{NULL} (undefined).  This function should be defined
for any architecture where it is possible the stack could become
misaligned.  The utility functions @@code{align_down} (for falling
stacks) and @@code{align_up} (for rising stacks) will facilitate the
implementation of this function.

@@end deftypefn

@@deftypevr {Architecture Variable} int frame_red_zone_size

Some ABIs reserve space beyond the end of the stack for use by leaf
functions without prologue or epilogue or by exception handlers (for
example the OpenRISC 1000).

This is known as a @@dfn{red zone} (AMD terminology).  The @@sc{amd64}
(nee x86-64) ABI documentation refers to the @@dfn{red zone} when
describing this scratch area.

The default value is 0.  Set this field if the architecture has such a
red zone.  The value must be aligned as required by the ABI (see
@@code{frame_align} above for an explanation of stack frame alignment).

@@end deftypevr

@@node Functions to Access Frame Data
@@subsection Functions to Access Frame Data

These functions provide access to key registers and arguments in the
stack frame.

@@deftypefn {Architecture Function} CORE_ADDR unwind_pc (struct gdbarch *@@var{gdbarch}, struct frame_info *@@var{next_frame})

This function is given a pointer to the NEXT stack frame (@@pxref{All
About Stack Frames, , All About Stack Frames}, for how frames are
represented) and returns the value of the program counter in the
PREVIOUS frame (i.e.@@: the frame of the function that called THIS
one).  This is commonly referred to as the @@dfn{return address}.

The implementation, which must be frame agnostic (work with any frame),
is typically no more than:

@@smallexample
ULONGEST pc;
pc = frame_unwind_register_unsigned (next_frame, @@var{ARCH}_PC_REGNUM);
return gdbarch_addr_bits_remove (gdbarch, pc);
@@end smallexample

@@end deftypefn

@@deftypefn {Architecture Function} CORE_ADDR unwind_sp (struct gdbarch *@@var{gdbarch}, struct frame_info *@@var{next_frame})

This function is given a pointer to the NEXT stack frame
(@@pxref{All About Stack Frames, , All About Stack Frames} for how
frames are represented) and returns the value of the stack pointer in
the PREVIOUS frame (i.e.@@: the frame of the function that called
THIS one).

The implementation, which must be frame agnostic (work with any frame),
is typically no more than:

@@smallexample
ULONGEST sp;
sp = frame_unwind_register_unsigned (next_frame, @@var{ARCH}_SP_REGNUM);
return gdbarch_addr_bits_remove (gdbarch, sp);
@@end smallexample

@@end deftypefn

@@deftypefn {Architecture Function} int frame_num_args (struct gdbarch *@@var{gdbarch}, struct frame_info *@@var{this_frame})

This function is given a pointer to THIS stack frame (@@pxref{All
About Stack Frames, , All About Stack Frames} for how frames are
represented), and returns the number of arguments that are being
passed, or -1 if not known.

The default value is @@code{NULL} (undefined), in which case the number of
arguments passed on any stack frame is always unknown.  For many
architectures this will be a suitable default.

@@end deftypefn

@@node Analyzing Stacks---Frame Sniffers
@@subsection Analyzing Stacks---Frame Sniffers

When a program stops, @@value{GDBN} needs to construct the chain of
struct @@code{frame_info} representing the state of the stack using
appropriate @@dfn{sniffers}.

Each architecture requires appropriate sniffers, but they do not form
entries in @@code{@@w{struct gdbarch}}, since more than one sniffer may
be required and a sniffer may be suitable for more than one
@@code{@@w{struct gdbarch}}.  Instead sniffers are associated with
architectures using the following functions.

@@itemize @@bullet

@@item
@@findex frame_unwind_append_sniffer
@@code{frame_unwind_append_sniffer} is used to add a new sniffer to
analyze THIS frame when given a pointer to the NEXT frame.

@@item
@@findex frame_base_append_sniffer
@@code{frame_base_append_sniffer} is used to add a new sniffer
which can determine information about the base of a stack frame.

@@item
@@findex frame_base_set_default
@@code{frame_base_set_default} is used to specify the default base
sniffer.

@@end itemize

These functions all take a reference to @@code{@@w{struct gdbarch}}, so
they are associated with a specific architecture.  They are usually
called in the @@code{gdbarch} initialization function, after the
@@code{gdbarch} struct has been set up.  Unless a default has been set, the
most recently appended sniffer will be tried first.

The main frame unwinding sniffer (as set by
@@code{frame_unwind_append_sniffer)} returns a structure specifying
a set of sniffing functions:

@@cindex @@code{frame_unwind}
@@smallexample
struct frame_unwind
@@{
   enum frame_type            type;
   frame_this_id_ftype       *this_id;
   frame_prev_register_ftype *prev_register;
   const struct frame_data   *unwind_data;
   frame_sniffer_ftype       *sniffer;
   frame_prev_pc_ftype       *prev_pc;
   frame_dealloc_cache_ftype *dealloc_cache;
@@};
@@end smallexample

The @@code{type} field indicates the type of frame this sniffer can
handle: normal, dummy (@@pxref{Functions Creating Dummy Frames, ,
Functions Creating Dummy Frames}), signal handler or sentinel.  Signal
handlers sometimes have their own simplified stack structure for
efficiency, so may need their own handlers.

The @@code{unwind_data} field holds additional information which may be
relevant to particular types of frame.  For example it may hold
additional information for signal handler frames.

The remaining fields define functions that yield different types of
information when given a pointer to the NEXT stack frame.  Not all
functions need be provided.  If an entry is @@code{NULL}, the next sniffer will
be tried instead.

@@itemize @@bullet

@@item
@@code{this_id} determines the stack pointer and function (code
entry point) for THIS stack frame.

@@item
@@code{prev_register} determines where the values of registers for
the PREVIOUS stack frame are stored in THIS stack frame.

@@item
@@code{sniffer} takes a look at THIS frame's registers to
determine if this is the appropriate unwinder.

@@item
@@code{prev_pc} determines the program counter for THIS
frame.  Only needed if the program counter is not an ordinary register
(@@pxref{Register Architecture Functions & Variables,
, Functions and Variables Specifying the Register Architecture}).

@@item
@@code{dealloc_cache} frees any additional memory associated with
the prologue cache for this frame (@@pxref{Prologue Caches, , Prologue
Caches}).

@@end itemize

In general it is only the @@code{this_id} and @@code{prev_register}
fields that need be defined for custom sniffers.

The frame base sniffer is much simpler.  It is a @@code{@@w{struct
frame_base}}, which refers to the corresponding @@code{frame_unwind}
struct and whose fields refer to functions yielding various addresses
within the frame.

@@cindex @@code{frame_base}
@@smallexample
struct frame_base
@@{
   const struct frame_unwind *unwind;
   frame_this_base_ftype     *this_base;
   frame_this_locals_ftype   *this_locals;
   frame_this_args_ftype     *this_args;
@@};
@@end smallexample

All the functions referred to take a pointer to the NEXT frame as
argument. The function referred to by @@code{this_base} returns the
base address of THIS frame, the function referred to by
@@code{this_locals} returns the base address of local variables in THIS
frame and the function referred to by @@code{this_args} returns the
base address of the function arguments in this frame.

As described above, the base address of a frame is the address
immediately before the start of the NEXT frame.  For a falling
stack, this is the lowest address in the frame and for a rising stack
it is the highest address in the frame.  For most architectures the
same address is also the base address for local variables and
arguments, in which case the same function can be used for all three
entries@@footnote{It is worth noting that if it cannot be determined in any
other way (for example by there being a register with the name
@@code{"fp"}), then the result of the @@code{this_base} function will be
used as the value of the frame pointer variable @@kbd{$fp} in
@@value{GDBN}.  This is very often not correct (for example with the
OpenRISC 1000, this value is the stack pointer, @@kbd{$sp}).  In this
case a register (raw or pseudo) with the name @@code{"fp"} should be
defined.  It will be used in preference as the value of @@kbd{$fp}.}.

@@node Inferior Call Setup
@@section Inferior Call Setup
@@cindex calls to the inferior

@@menu
* About Dummy Frames::
* Functions Creating Dummy Frames::
@@end menu

@@node About Dummy Frames
@@subsection About Dummy Frames
@@cindex dummy frames

@@value{GDBN} can call functions in the target code (for example by
using the @@kbd{call} or @@kbd{print} commands).  These functions may be
breakpointed, and it is essential that if a function does hit a
breakpoint, commands like @@kbd{backtrace} work correctly.

This is achieved by making the stack look as though the function had
been called from the point where @@value{GDBN} had previously stopped.
This requires that @@value{GDBN} can set up stack frames appropriate for
such function calls.

@@node Functions Creating Dummy Frames
@@subsection Functions Creating Dummy Frames

The following functions provide the functionality to set up such
@@dfn{dummy} stack frames.

@@deftypefn {Architecture Function} CORE_ADDR push_dummy_call (struct gdbarch *@@var{gdbarch}, struct value *@@var{function}, struct regcache *@@var{regcache}, CORE_ADDR @@var{bp_addr}, int  @@var{nargs}, struct value **@@var{args}, CORE_ADDR @@var{sp}, int  @@var{struct_return}, CORE_ADDR @@var{struct_addr})

This function sets up a dummy stack frame for the function about to be
called.  @@code{push_dummy_call} is given the arguments to be passed
and must copy them into registers or push them on to the stack as
appropriate for the ABI.

@@var{function} is a pointer to the function
that will be called and @@var{regcache} the register cache from which
values should be obtained.  @@var{bp_addr} is the address to which the
function should return (which is breakpointed, so @@value{GDBN} can
regain control, hence the name).  @@var{nargs} is the number of
arguments to pass and @@var{args} an array containing the argument
values.  @@var{struct_return} is non-zero (true) if the function returns
a structure, and if so @@var{struct_addr} is the address in which the
structure should be returned.

 After calling this function, @@value{GDBN} will pass control to the
target at the address of the function, which will find the stack and
registers set up just as expected.

The default value of this function is @@code{NULL} (undefined).  If the
function is not defined, then @@value{GDBN} will not allow the user to
call functions within the target being debugged.

@@end deftypefn

@@deftypefn {Architecture Function} {struct frame_id} unwind_dummy_id (struct gdbarch *@@var{gdbarch}, struct frame_info *@@var{next_frame}) 

This is the inverse of @@code{push_dummy_call} which restores the stack
pointer and program counter after a call to evaluate a function using
a dummy stack frame.  The result is a @@code{@@w{struct frame_id}}, which
contains the value of the stack pointer and program counter to be
used.

The NEXT frame pointer is provided as argument,
@@var{next_frame}.  THIS frame is the frame of the dummy function,
which can be unwound, to yield the required stack pointer and program
counter from the PREVIOUS frame.

The default value is @@code{NULL} (undefined).  If @@code{push_dummy_call} is
defined, then this function should also be defined.

@@end deftypefn

@@deftypefn {Architecture Function} CORE_ADDR push_dummy_code (struct gdbarch *@@var{gdbarch}, CORE_ADDR @@var{sp}, CORE_ADDR @@var{funaddr}, struct value **@@var{args}, int  @@var{nargs}, struct type *@@var{value_type}, CORE_ADDR *@@var{real_pc}, CORE_ADDR *@@var{bp_addr}, struct regcache *@@var{regcache})

If this function is not defined (its default value is @@code{NULL}), a dummy
call will use the entry point of the currently loaded code on the
target as its return address.  A temporary breakpoint will be set
there, so the location must be writable and have room for a
breakpoint.

It is possible that this default is not suitable.  It might not be
writable (in ROM possibly), or the ABI might require code to be
executed on return from a call to unwind the stack before the
breakpoint is encountered.

If either of these is the case, then push_dummy_code should be defined
to push an instruction sequence onto the end of the stack to which the
dummy call should return.

The arguments are essentially the same as those to
@@code{push_dummy_call}.  However the function is provided with the
type of the function result, @@var{value_type}, @@var{bp_addr} is used
to return a value (the address at which the breakpoint instruction
should be inserted) and @@var{real pc} is used to specify the resume
address when starting the call sequence.  The function should return
the updated innermost stack address.

@@quotation
@@emph{Note:} This does require that code in the stack can be executed.
Some Harvard architectures may not allow this.
@@end quotation

@@end deftypefn

@@node Adding support for debugging core files
@@section Adding support for debugging core files
@@cindex core files

The prerequisite for adding core file support in @@value{GDBN} is to have
core file support in BFD.

Once BFD support is available, writing the apropriate
@@code{regset_from_core_section} architecture function should be all
that is needed in order to add support for core files in @@value{GDBN}.

@@node Defining Other Architecture Features 
@@section Defining Other Architecture Features 

This section describes other functions and values in @@code{gdbarch},
together with some useful macros, that you can use to define the
target architecture.

@@table @@code

@@item CORE_ADDR gdbarch_addr_bits_remove (@@var{gdbarch}, @@var{addr})
@@findex gdbarch_addr_bits_remove
If a raw machine instruction address includes any bits that are not
really part of the address, then this function is used to zero those bits in
@@var{addr}.  This is only used for addresses of instructions, and even then not
in all contexts.

For example, the two low-order bits of the PC on the Hewlett-Packard PA
2.0 architecture contain the privilege level of the corresponding
instruction.  Since instructions must always be aligned on four-byte
boundaries, the processor masks out these bits to generate the actual
address of the instruction.  @@code{gdbarch_addr_bits_remove} would then for
example look like that:
@@smallexample
arch_addr_bits_remove (CORE_ADDR addr)
@@{
  return (addr &= ~0x3);
@@}
@@end smallexample

@@item int address_class_name_to_type_flags (@@var{gdbarch}, @@var{name}, @@var{type_flags_ptr})
@@findex address_class_name_to_type_flags
If @@var{name} is a valid address class qualifier name, set the @@code{int}
referenced by @@var{type_flags_ptr} to the mask representing the qualifier
and return 1.  If @@var{name} is not a valid address class qualifier name,
return 0.

The value for @@var{type_flags_ptr} should be one of
@@code{TYPE_FLAG_ADDRESS_CLASS_1}, @@code{TYPE_FLAG_ADDRESS_CLASS_2}, or
possibly some combination of these values or'd together.
@@xref{Target Architecture Definition, , Address Classes}.

@@item int address_class_name_to_type_flags_p (@@var{gdbarch})
@@findex address_class_name_to_type_flags_p
Predicate which indicates whether @@code{address_class_name_to_type_flags}
has been defined.

@@item int gdbarch_address_class_type_flags (@@var{gdbarch}, @@var{byte_size}, @@var{dwarf2_addr_class})
@@findex gdbarch_address_class_type_flags
Given a pointers byte size (as described by the debug information) and
the possible @@code{DW_AT_address_class} value, return the type flags
used by @@value{GDBN} to represent this address class.  The value
returned should be one of @@code{TYPE_FLAG_ADDRESS_CLASS_1},
@@code{TYPE_FLAG_ADDRESS_CLASS_2}, or possibly some combination of these
values or'd together.
@@xref{Target Architecture Definition, , Address Classes}.

@@item int gdbarch_address_class_type_flags_p (@@var{gdbarch})
@@findex gdbarch_address_class_type_flags_p
Predicate which indicates whether @@code{gdbarch_address_class_type_flags_p} has
been defined.

@@item const char *gdbarch_address_class_type_flags_to_name (@@var{gdbarch}, @@var{type_flags})
@@findex gdbarch_address_class_type_flags_to_name
Return the name of the address class qualifier associated with the type
flags given by @@var{type_flags}.

@@item int gdbarch_address_class_type_flags_to_name_p (@@var{gdbarch})
@@findex gdbarch_address_class_type_flags_to_name_p
Predicate which indicates whether @@code{gdbarch_address_class_type_flags_to_name} has been defined.
@@xref{Target Architecture Definition, , Address Classes}.

@@item void gdbarch_address_to_pointer (@@var{gdbarch}, @@var{type}, @@var{buf}, @@var{addr})
@@findex gdbarch_address_to_pointer
Store in @@var{buf} a pointer of type @@var{type} representing the address
@@var{addr}, in the appropriate format for the current architecture.
This function may safely assume that @@var{type} is either a pointer or a
C@@t{++} reference type.
@@xref{Target Architecture Definition, , Pointers Are Not Always Addresses}.

@@item int gdbarch_believe_pcc_promotion (@@var{gdbarch})
@@findex gdbarch_believe_pcc_promotion
Used to notify if the compiler promotes a @@code{short} or @@code{char}
parameter to an @@code{int}, but still reports the parameter as its
original type, rather than the promoted type.

@@item gdbarch_bits_big_endian (@@var{gdbarch})
@@findex gdbarch_bits_big_endian
This is used if the numbering of bits in the targets does @@strong{not} match
the endianism of the target byte order.  A value of 1 means that the bits
are numbered in a big-endian bit order, 0 means little-endian.

@@item set_gdbarch_bits_big_endian (@@var{gdbarch}, @@var{bits_big_endian})
@@findex set_gdbarch_bits_big_endian
Calling set_gdbarch_bits_big_endian with a value of 1 indicates that the
bits in the target are numbered in a big-endian bit order, 0 indicates
little-endian.

@@item BREAKPOINT
@@findex BREAKPOINT
This is the character array initializer for the bit pattern to put into
memory where a breakpoint is set.  Although it's common to use a trap
instruction for a breakpoint, it's not required; for instance, the bit
pattern could be an invalid instruction.  The breakpoint must be no
longer than the shortest instruction of the architecture.

@@code{BREAKPOINT} has been deprecated in favor of
@@code{gdbarch_breakpoint_from_pc}.

@@item BIG_BREAKPOINT
@@itemx LITTLE_BREAKPOINT
@@findex LITTLE_BREAKPOINT
@@findex BIG_BREAKPOINT
Similar to BREAKPOINT, but used for bi-endian targets.

@@code{BIG_BREAKPOINT} and @@code{LITTLE_BREAKPOINT} have been deprecated in
favor of @@code{gdbarch_breakpoint_from_pc}.

@@item const gdb_byte *gdbarch_breakpoint_from_pc (@@var{gdbarch}, @@var{pcptr}, @@var{lenptr})
@@findex gdbarch_breakpoint_from_pc
@@anchor{gdbarch_breakpoint_from_pc} Use the program counter to determine the
contents and size of a breakpoint instruction.  It returns a pointer to
a static string of bytes that encode a breakpoint instruction, stores the
length of the string to @@code{*@@var{lenptr}}, and adjusts the program
counter (if necessary) to point to the actual memory location where the
breakpoint should be inserted.  On input, the program counter
(@@code{*@@var{pcptr}} is the encoded inferior's PC register.  If software
breakpoints are supported, the function sets this argument to the PC's
plain address.  If software breakpoints are not supported, the function
returns NULL instead of the encoded breakpoint instruction.

Although it is common to use a trap instruction for a breakpoint, it's
not required; for instance, the bit pattern could be an invalid
instruction.  The breakpoint must be no longer than the shortest
instruction of the architecture.

Provided breakpoint bytes can be also used by @@code{bp_loc_is_permanent} to
detect permanent breakpoints.  @@code{gdbarch_breakpoint_from_pc} should return
an unchanged memory copy if it was called for a location with permanent
breakpoint as some architectures use breakpoint instructions containing
arbitrary parameter value.

Replaces all the other @@var{BREAKPOINT} macros.

@@item int gdbarch_memory_insert_breakpoint (@@var{gdbarch}, @@var{bp_tgt})
@@itemx gdbarch_memory_remove_breakpoint (@@var{gdbarch}, @@var{bp_tgt})
@@findex gdbarch_memory_remove_breakpoint
@@findex gdbarch_memory_insert_breakpoint
Insert or remove memory based breakpoints.  Reasonable defaults
(@@code{default_memory_insert_breakpoint} and
@@code{default_memory_remove_breakpoint} respectively) have been
provided so that it is not necessary to set these for most
architectures.  Architectures which may want to set
@@code{gdbarch_memory_insert_breakpoint} and @@code{gdbarch_memory_remove_breakpoint} will likely have instructions that are oddly sized or are not stored in a
conventional manner.

It may also be desirable (from an efficiency standpoint) to define
custom breakpoint insertion and removal routines if
@@code{gdbarch_breakpoint_from_pc} needs to read the target's memory for some
reason.

@@item CORE_ADDR gdbarch_adjust_breakpoint_address (@@var{gdbarch}, @@var{bpaddr})
@@findex gdbarch_adjust_breakpoint_address
@@cindex breakpoint address adjusted
Given an address at which a breakpoint is desired, return a breakpoint
address adjusted to account for architectural constraints on
breakpoint placement.  This method is not needed by most targets.

The FR-V target (see @@file{frv-tdep.c}) requires this method.
The FR-V is a VLIW architecture in which a number of RISC-like
instructions are grouped (packed) together into an aggregate
instruction or instruction bundle.  When the processor executes
one of these bundles, the component instructions are executed
in parallel.

In the course of optimization, the compiler may group instructions
from distinct source statements into the same bundle.  The line number
information associated with one of the latter statements will likely
refer to some instruction other than the first one in the bundle.  So,
if the user attempts to place a breakpoint on one of these latter
statements, @@value{GDBN} must be careful to @@emph{not} place the break
instruction on any instruction other than the first one in the bundle.
(Remember though that the instructions within a bundle execute
in parallel, so the @@emph{first} instruction is the instruction
at the lowest address and has nothing to do with execution order.)

The FR-V's @@code{gdbarch_adjust_breakpoint_address} method will adjust a
breakpoint's address by scanning backwards for the beginning of
the bundle, returning the address of the bundle.

Since the adjustment of a breakpoint may significantly alter a user's
expectation, @@value{GDBN} prints a warning when an adjusted breakpoint
is initially set and each time that that breakpoint is hit.

@@item int gdbarch_call_dummy_location (@@var{gdbarch})
@@findex gdbarch_call_dummy_location
See the file @@file{inferior.h}.

This method has been replaced by @@code{gdbarch_push_dummy_code}
(@@pxref{gdbarch_push_dummy_code}).

@@item int gdbarch_cannot_fetch_register (@@var{gdbarch}, @@var{regum})
@@findex gdbarch_cannot_fetch_register
This function should return nonzero if @@var{regno} cannot be fetched
from an inferior process.

@@item int gdbarch_cannot_store_register (@@var{gdbarch}, @@var{regnum})
@@findex gdbarch_cannot_store_register
This function should return nonzero if @@var{regno} should not be
written to the target.  This is often the case for program counters,
status words, and other special registers.  This function returns 0 as
default so that @@value{GDBN} will assume that all registers may be written.

@@item int gdbarch_convert_register_p (@@var{gdbarch}, @@var{regnum}, struct type *@@var{type})
@@findex gdbarch_convert_register_p
Return non-zero if register @@var{regnum} represents data values of type
@@var{type} in a non-standard form.
@@xref{Target Architecture Definition, , Using Different Register and Memory Data Representations}.

@@item int gdbarch_fp0_regnum (@@var{gdbarch})
@@findex gdbarch_fp0_regnum
This function returns the number of the first floating point register,
if the machine has such registers.  Otherwise, it returns -1.

@@item CORE_ADDR gdbarch_decr_pc_after_break (@@var{gdbarch})
@@findex gdbarch_decr_pc_after_break
This function shall return the amount by which to decrement the PC after the
program encounters a breakpoint.  This is often the number of bytes in
@@code{BREAKPOINT}, though not always.  For most targets this value will be 0.

@@item DISABLE_UNSETTABLE_BREAK (@@var{addr})
@@findex DISABLE_UNSETTABLE_BREAK
If defined, this should evaluate to 1 if @@var{addr} is in a shared
library in which breakpoints cannot be set and so should be disabled.

@@item int gdbarch_dwarf2_reg_to_regnum (@@var{gdbarch}, @@var{dwarf2_regnr})
@@findex gdbarch_dwarf2_reg_to_regnum
Convert DWARF2 register number @@var{dwarf2_regnr} into @@value{GDBN} regnum.
If not defined, no conversion will be performed.

@@item int gdbarch_ecoff_reg_to_regnum (@@var{gdbarch}, @@var{ecoff_regnr})
@@findex gdbarch_ecoff_reg_to_regnum
Convert ECOFF register number  @@var{ecoff_regnr} into @@value{GDBN} regnum.  If
not defined, no conversion will be performed.

@@item GCC_COMPILED_FLAG_SYMBOL
@@itemx GCC2_COMPILED_FLAG_SYMBOL
@@findex GCC2_COMPILED_FLAG_SYMBOL
@@findex GCC_COMPILED_FLAG_SYMBOL
If defined, these are the names of the symbols that @@value{GDBN} will
look for to detect that GCC compiled the file.  The default symbols
are @@code{gcc_compiled.} and @@code{gcc2_compiled.},
respectively.  (Currently only defined for the Delta 68.)

@@item gdbarch_get_longjmp_target
@@findex gdbarch_get_longjmp_target
This function determines the target PC address that @@code{longjmp}
will jump to, assuming that we have just stopped at a @@code{longjmp}
breakpoint.  It takes a @@code{CORE_ADDR *} as argument, and stores the
target PC value through this pointer.  It examines the current state
of the machine as needed, typically by using a manually-determined
offset into the @@code{jmp_buf}.  (While we might like to get the offset
from the target's @@file{jmpbuf.h}, that header file cannot be assumed
to be available when building a cross-debugger.)

@@item I386_USE_GENERIC_WATCHPOINTS
An x86-based target can define this to use the generic x86 watchpoint
support; see @@ref{Algorithms, I386_USE_GENERIC_WATCHPOINTS}.

@@item gdbarch_in_function_epilogue_p (@@var{gdbarch}, @@var{addr})
@@findex gdbarch_in_function_epilogue_p
Returns non-zero if the given @@var{addr} is in the epilogue of a function.
The epilogue of a function is defined as the part of a function where
the stack frame of the function already has been destroyed up to the
final `return from function call' instruction.

@@item int gdbarch_in_solib_return_trampoline (@@var{gdbarch}, @@var{pc}, @@var{name})
@@findex gdbarch_in_solib_return_trampoline
Define this function to return nonzero if the program is stopped in the
trampoline that returns from a shared library.

@@item target_so_ops.in_dynsym_resolve_code (@@var{pc})
@@findex in_dynsym_resolve_code
Define this to return nonzero if the program is stopped in the
dynamic linker.

@@item SKIP_SOLIB_RESOLVER (@@var{pc})
@@findex SKIP_SOLIB_RESOLVER
Define this to evaluate to the (nonzero) address at which execution
should continue to get past the dynamic linker's symbol resolution
function.  A zero value indicates that it is not important or necessary
to set a breakpoint to get through the dynamic linker and that single
stepping will suffice.

@@item CORE_ADDR gdbarch_integer_to_address (@@var{gdbarch}, @@var{type}, @@var{buf})
@@findex gdbarch_integer_to_address
@@cindex converting integers to addresses
Define this when the architecture needs to handle non-pointer to address
conversions specially.  Converts that value to an address according to
the current architectures conventions.

@@emph{Pragmatics: When the user copies a well defined expression from
their source code and passes it, as a parameter, to @@value{GDBN}'s
@@code{print} command, they should get the same value as would have been
computed by the target program.  Any deviation from this rule can cause
major confusion and annoyance, and needs to be justified carefully.  In
other words, @@value{GDBN} doesn't really have the freedom to do these
conversions in clever and useful ways.  It has, however, been pointed
out that users aren't complaining about how @@value{GDBN} casts integers
to pointers; they are complaining that they can't take an address from a
disassembly listing and give it to @@code{x/i}.  Adding an architecture
method like @@code{gdbarch_integer_to_address} certainly makes it possible for
@@value{GDBN} to ``get it right'' in all circumstances.}

@@xref{Target Architecture Definition, , Pointers Are Not Always
Addresses}.

@@item CORE_ADDR gdbarch_pointer_to_address (@@var{gdbarch}, @@var{type}, @@var{buf})
@@findex gdbarch_pointer_to_address
Assume that @@var{buf} holds a pointer of type @@var{type}, in the
appropriate format for the current architecture.  Return the byte
address the pointer refers to.
@@xref{Target Architecture Definition, , Pointers Are Not Always Addresses}.

@@item void gdbarch_register_to_value(@@var{gdbarch}, @@var{frame}, @@var{regnum}, @@var{type}, @@var{fur})
@@findex gdbarch_register_to_value
Convert the raw contents of register @@var{regnum} into a value of type
@@var{type}.
@@xref{Target Architecture Definition, , Using Different Register and Memory Data Representations}.

@@item REGISTER_CONVERT_TO_VIRTUAL(@@var{reg}, @@var{type}, @@var{from}, @@var{to})
@@findex REGISTER_CONVERT_TO_VIRTUAL
Convert the value of register @@var{reg} from its raw form to its virtual
form.
@@xref{Target Architecture Definition, , Raw and Virtual Register Representations}.

@@item REGISTER_CONVERT_TO_RAW(@@var{type}, @@var{reg}, @@var{from}, @@var{to})
@@findex REGISTER_CONVERT_TO_RAW
Convert the value of register @@var{reg} from its virtual form to its raw
form.
@@xref{Target Architecture Definition, , Raw and Virtual Register Representations}.

@@item const struct regset *regset_from_core_section (struct gdbarch * @@var{gdbarch}, const char * @@var{sect_name}, size_t @@var{sect_size})
@@findex regset_from_core_section
Return the appropriate register set for a core file section with name
@@var{sect_name} and size @@var{sect_size}.

@@item SOFTWARE_SINGLE_STEP_P()
@@findex SOFTWARE_SINGLE_STEP_P
Define this as 1 if the target does not have a hardware single-step
mechanism.  The macro @@code{SOFTWARE_SINGLE_STEP} must also be defined.

@@item SOFTWARE_SINGLE_STEP(@@var{signal}, @@var{insert_breakpoints_p})
@@findex SOFTWARE_SINGLE_STEP
A function that inserts or removes (depending on
@@var{insert_breakpoints_p}) breakpoints at each possible destinations of
the next instruction.  See @@file{sparc-tdep.c} and @@file{rs6000-tdep.c}
for examples.

@@item set_gdbarch_sofun_address_maybe_missing (@@var{gdbarch}, @@var{set})
@@findex set_gdbarch_sofun_address_maybe_missing
Somebody clever observed that, the more actual addresses you have in the
debug information, the more time the linker has to spend relocating
them.  So whenever there's some other way the debugger could find the
address it needs, you should omit it from the debug info, to make
linking faster.

Calling @@code{set_gdbarch_sofun_address_maybe_missing} with a non-zero
argument @@var{set} indicates that a particular set of hacks of this sort
are in use, affecting @@code{N_SO} and @@code{N_FUN} entries in stabs-format
debugging information.  @@code{N_SO} stabs mark the beginning and ending
addresses of compilation units in the text segment.  @@code{N_FUN} stabs
mark the starts and ends of functions.

In this case, @@value{GDBN} assumes two things:

@@itemize @@bullet
@@item
@@code{N_FUN} stabs have an address of zero.  Instead of using those
addresses, you should find the address where the function starts by
taking the function name from the stab, and then looking that up in the
minsyms (the linker/assembler symbol table).  In other words, the stab
has the name, and the linker/assembler symbol table is the only place
that carries the address.

@@item
@@code{N_SO} stabs have an address of zero, too.  You just look at the
@@code{N_FUN} stabs that appear before and after the @@code{N_SO} stab, and
guess the starting and ending addresses of the compilation unit from them.
@@end itemize

@@item int gdbarch_stabs_argument_has_addr (@@var{gdbarch}, @@var{type})
@@findex gdbarch_stabs_argument_has_addr
@@anchor{gdbarch_stabs_argument_has_addr} Define this function to return
nonzero if a function argument of type @@var{type} is passed by reference
instead of value.

@@item CORE_ADDR gdbarch_push_dummy_call (@@var{gdbarch}, @@var{function}, @@var{regcache}, @@var{bp_addr}, @@var{nargs}, @@var{args}, @@var{sp}, @@var{struct_return}, @@var{struct_addr})
@@findex gdbarch_push_dummy_call
@@anchor{gdbarch_push_dummy_call} Define this to push the dummy frame's call to
the inferior function onto the stack.  In addition to pushing @@var{nargs}, the
code should push @@var{struct_addr} (when @@var{struct_return} is non-zero), and
the return address (@@var{bp_addr}, in inferior's PC register encoding).

@@var{function} is a pointer to a @@code{struct value}; on architectures that use
function descriptors, this contains the function descriptor value.

Returns the updated top-of-stack pointer.

@@item CORE_ADDR gdbarch_push_dummy_code (@@var{gdbarch}, @@var{sp}, @@var{funaddr}, @@var{using_gcc}, @@var{args}, @@var{nargs}, @@var{value_type}, @@var{real_pc}, @@var{bp_addr}, @@var{regcache})
@@findex gdbarch_push_dummy_code
@@anchor{gdbarch_push_dummy_code} Given a stack based call dummy, push the
instruction sequence (including space for a breakpoint) to which the
called function should return.

Set @@var{bp_addr} to the address at which the breakpoint instruction
should be inserted (in inferior's PC register encoding), @@var{real_pc} to the
resume address when starting the call sequence, and return the updated
inner-most stack address.

By default, the stack is grown sufficient to hold a frame-aligned
(@@pxref{frame_align}) breakpoint, @@var{bp_addr} is set to the address
reserved for that breakpoint (in inferior's PC register encoding), and
@@var{real_pc} set to @@var{funaddr}.

This method replaces @@w{@@code{gdbarch_call_dummy_location (@@var{gdbarch})}}.

@@item int gdbarch_sdb_reg_to_regnum (@@var{gdbarch}, @@var{sdb_regnr})
@@findex gdbarch_sdb_reg_to_regnum
Use this function to convert sdb register @@var{sdb_regnr} into @@value{GDBN}
regnum.  If not defined, no conversion will be done.

@@item enum return_value_convention gdbarch_return_value (struct gdbarch *@@var{gdbarch}, struct type *@@var{valtype}, struct regcache *@@var{regcache}, void *@@var{readbuf}, const void *@@var{writebuf})
@@findex gdbarch_return_value
@@anchor{gdbarch_return_value} Given a function with a return-value of
type @@var{rettype}, return which return-value convention that function
would use.

@@value{GDBN} currently recognizes two function return-value conventions:
@@code{RETURN_VALUE_REGISTER_CONVENTION} where the return value is found
in registers; and @@code{RETURN_VALUE_STRUCT_CONVENTION} where the return
value is found in memory and the address of that memory location is
passed in as the function's first parameter.

If the register convention is being used, and @@var{writebuf} is
non-@@code{NULL}, also copy the return-value in @@var{writebuf} into
@@var{regcache}.

If the register convention is being used, and @@var{readbuf} is
non-@@code{NULL}, also copy the return value from @@var{regcache} into
@@var{readbuf} (@@var{regcache} contains a copy of the registers from the
just returned function).

@@emph{Maintainer note: This method replaces separate predicate, extract,
store methods.  By having only one method, the logic needed to determine
the return-value convention need only be implemented in one place.  If
@@value{GDBN} were written in an @@sc{oo} language, this method would
instead return an object that knew how to perform the register
return-value extract and store.}

@@emph{Maintainer note: This method does not take a @@var{gcc_p}
parameter, and such a parameter should not be added.  If an architecture
that requires per-compiler or per-function information be identified,
then the replacement of @@var{rettype} with @@code{struct value}
@@var{function} should be pursued.}

@@emph{Maintainer note: The @@var{regcache} parameter limits this methods
to the inner most frame.  While replacing @@var{regcache} with a
@@code{struct frame_info} @@var{frame} parameter would remove that
limitation there has yet to be a demonstrated need for such a change.}

@@item void gdbarch_skip_permanent_breakpoint (@@var{gdbarch}, @@var{regcache})
@@findex gdbarch_skip_permanent_breakpoint
Advance the inferior's PC past a permanent breakpoint.  @@value{GDBN} normally
steps over a breakpoint by removing it, stepping one instruction, and
re-inserting the breakpoint.  However, permanent breakpoints are
hardwired into the inferior, and can't be removed, so this strategy
doesn't work.  Calling @@code{gdbarch_skip_permanent_breakpoint} adjusts the
processor's state so that execution will resume just after the breakpoint.
This function does the right thing even when the breakpoint is in the delay slot
of a branch or jump.

@@item CORE_ADDR gdbarch_skip_trampoline_code (@@var{gdbarch}, @@var{frame}, @@var{pc})
@@findex gdbarch_skip_trampoline_code
If the target machine has trampoline code that sits between callers and
the functions being called, then define this function to return a new PC
that is at the start of the real function.

@@item int gdbarch_deprecated_fp_regnum (@@var{gdbarch})
@@findex gdbarch_deprecated_fp_regnum
If the frame pointer is in a register, use this function to return the
number of that register.

@@item int gdbarch_stab_reg_to_regnum (@@var{gdbarch}, @@var{stab_regnr})
@@findex gdbarch_stab_reg_to_regnum
Use this function to convert stab register @@var{stab_regnr} into @@value{GDBN}
regnum.  If not defined, no conversion will be done.

@@item TARGET_CHAR_BIT
@@findex TARGET_CHAR_BIT
Number of bits in a char; defaults to 8.

@@item int gdbarch_char_signed (@@var{gdbarch})
@@findex gdbarch_char_signed
Non-zero if @@code{char} is normally signed on this architecture; zero if
it should be unsigned.

The ISO C standard requires the compiler to treat @@code{char} as
equivalent to either @@code{signed char} or @@code{unsigned char}; any
character in the standard execution set is supposed to be positive.
Most compilers treat @@code{char} as signed, but @@code{char} is unsigned
on the IBM S/390, RS6000, and PowerPC targets.

@@item int gdbarch_double_bit (@@var{gdbarch})
@@findex gdbarch_double_bit
Number of bits in a double float; defaults to @@w{@@code{8 * TARGET_CHAR_BIT}}.

@@item int gdbarch_float_bit (@@var{gdbarch})
@@findex gdbarch_float_bit
Number of bits in a float; defaults to @@w{@@code{4 * TARGET_CHAR_BIT}}.

@@item int gdbarch_int_bit (@@var{gdbarch})
@@findex gdbarch_int_bit
Number of bits in an integer; defaults to @@w{@@code{4 * TARGET_CHAR_BIT}}.

@@item int gdbarch_long_bit (@@var{gdbarch})
@@findex gdbarch_long_bit
Number of bits in a long integer; defaults to @@w{@@code{4 * TARGET_CHAR_BIT}}.

@@item int gdbarch_long_double_bit (@@var{gdbarch})
@@findex gdbarch_long_double_bit
Number of bits in a long double float;
defaults to @@w{@@code{2 * gdbarch_double_bit (@@var{gdbarch})}}.

@@item int gdbarch_long_long_bit (@@var{gdbarch})
@@findex gdbarch_long_long_bit
Number of bits in a long long integer; defaults to
@@w{@@code{2 * gdbarch_long_bit (@@var{gdbarch})}}.

@@item int gdbarch_ptr_bit (@@var{gdbarch})
@@findex gdbarch_ptr_bit
Number of bits in a pointer; defaults to
@@w{@@code{gdbarch_int_bit (@@var{gdbarch})}}.

@@item int gdbarch_short_bit (@@var{gdbarch})
@@findex gdbarch_short_bit
Number of bits in a short integer; defaults to @@w{@@code{2 * TARGET_CHAR_BIT}}.

@@item void gdbarch_virtual_frame_pointer (@@var{gdbarch}, @@var{pc}, @@var{frame_regnum}, @@var{frame_offset})
@@findex gdbarch_virtual_frame_pointer
Returns a @@code{(@@var{register}, @@var{offset})} pair representing the virtual
frame pointer in use at the code address @@var{pc}.  If virtual frame
pointers are not used, a default definition simply returns
@@code{gdbarch_deprecated_fp_regnum} (or @@code{gdbarch_sp_regnum}, if
no frame pointer is defined), with an offset of zero.

@@c need to explain virtual frame pointers, they are recorded in agent
@@c expressions for tracepoints

@@item TARGET_HAS_HARDWARE_WATCHPOINTS
If non-zero, the target has support for hardware-assisted
watchpoints.  @@xref{Algorithms, watchpoints}, for more details and
other related macros.

@@item int gdbarch_print_insn (@@var{gdbarch}, @@var{vma}, @@var{info})
@@findex gdbarch_print_insn
This is the function used by @@value{GDBN} to print an assembly
instruction.  It prints the instruction at address @@var{vma} in
debugged memory and returns the length of the instruction, in bytes.
This usually points to a function in the @@code{opcodes} library
(@@pxref{Support Libraries, ,Opcodes}).  @@var{info} is a structure (of
type @@code{disassemble_info}) defined in the header file
@@file{include/dis-asm.h}, and used to pass information to the
instruction decoding routine.

@@item frame_id gdbarch_dummy_id (@@var{gdbarch}, @@var{frame})
@@findex gdbarch_dummy_id
@@anchor{gdbarch_dummy_id} Given @@var{frame} return a @@w{@@code{struct
frame_id}} that uniquely identifies an inferior function call's dummy
frame.  The value returned must match the dummy frame stack value
previously saved by @@code{call_function_by_hand}.

@@item void gdbarch_value_to_register (@@var{gdbarch}, @@var{frame}, @@var{type}, @@var{buf})
@@findex gdbarch_value_to_register
Convert a value of type @@var{type} into the raw contents of a register.
@@xref{Target Architecture Definition, , Using Different Register and Memory Data Representations}.

@@end table

Motorola M68K target conditionals.

@@ftable @@code
@@item BPT_VECTOR
Define this to be the 4-bit location of the breakpoint trap vector.  If
not defined, it will default to @@code{0xf}.

@@item REMOTE_BPT_VECTOR
Defaults to @@code{1}.

@@end ftable

@@node Adding a New Target
@@section Adding a New Target

@@cindex adding a target
The following files add a target to @@value{GDBN}:

@@table @@file
@@cindex target dependent files

@@item gdb/@@var{ttt}-tdep.c
Contains any miscellaneous code required for this target machine.  On
some machines it doesn't exist at all.

@@item gdb/@@var{arch}-tdep.c
@@itemx gdb/@@var{arch}-tdep.h
This is required to describe the basic layout of the target machine's
processor chip (registers, stack, etc.).  It can be shared among many
targets that use the same processor architecture.

@@end table

(Target header files such as
@@file{gdb/config/@@var{arch}/tm-@@var{ttt}.h},
@@file{gdb/config/@@var{arch}/tm-@@var{arch}.h}, and
@@file{config/tm-@@var{os}.h} are no longer used.)

@@findex _initialize_@@var{arch}_tdep
A @@value{GDBN} description for a new architecture, arch is created by
defining a global function @@code{_initialize_@@var{arch}_tdep}, by
convention in the source file @@file{@@var{arch}-tdep.c}.  For
example, in the case of the OpenRISC 1000, this function is called
@@code{_initialize_or1k_tdep} and is found in the file
@@file{or1k-tdep.c}.

The object file resulting from compiling this source file, which will
contain the implementation of the
@@code{_initialize_@@var{arch}_tdep} function is specified in the
@@value{GDBN} @@file{configure.tgt} file, which includes a large case
statement pattern matching against the @@code{--target} option of the
@@kbd{configure} script.

@@quotation
@@emph{Note:} If the architecture requires multiple source files, the
corresponding binaries should be included in
@@file{configure.tgt}. However if there are header files, the
dependencies on these will not be picked up from the entries in
@@file{configure.tgt}. The @@file{Makefile.in} file will need extending to
show these dependencies.
@@end quotation

@@findex gdbarch_register
A new struct gdbarch, defining the new architecture, is created within
the @@code{_initialize_@@var{arch}_tdep} function by calling
@@code{gdbarch_register}:

@@smallexample
void gdbarch_register (enum bfd_architecture    architecture,
                       gdbarch_init_ftype      *init_func,
                       gdbarch_dump_tdep_ftype *tdep_dump_func);
@@end smallexample

This function has been described fully in an earlier
section.  @@xref{How an Architecture is Represented, , How an
Architecture is Represented}.

The new @@code{@@w{struct gdbarch}} should contain implementations of
the necessary functions (described in the previous sections) to
describe the basic layout of the target machine's processor chip
(registers, stack, etc.).  It can be shared among many targets that use
the same processor architecture.

@@node Target Descriptions
@@chapter Target Descriptions
@@cindex target descriptions

The target architecture definition (@@pxref{Target Architecture Definition})
contains @@value{GDBN}'s hard-coded knowledge about an architecture.  For
some platforms, it is handy to have more flexible knowledge about a specific
instance of the architecture---for instance, a processor or development board.
@@dfn{Target descriptions} provide a mechanism for the user to tell @@value{GDBN}
more about what their target supports, or for the target to tell @@value{GDBN}
directly.

For details on writing, automatically supplying, and manually selecting
target descriptions, see @@ref{Target Descriptions, , , gdb,
Debugging with @@value{GDBN}}.  This section will cover some related
topics about the @@value{GDBN} internals.

@@menu
* Target Descriptions Implementation::
* Adding Target Described Register Support::
@@end menu

@@node Target Descriptions Implementation
@@section Target Descriptions Implementation
@@cindex target descriptions, implementation

Before @@value{GDBN} connects to a new target, or runs a new program on
an existing target, it discards any existing target description and
reverts to a default gdbarch.  Then, after connecting, it looks for a
new target description by calling @@code{target_find_description}.

A description may come from a user specified file (XML), the remote
@@samp{qXfer:features:read} packet (also XML), or from any custom
@@code{to_read_description} routine in the target vector.  For instance,
the remote target supports guessing whether a MIPS target is 32-bit or
64-bit based on the size of the @@samp{g} packet.

If any target description is found, @@value{GDBN} creates a new gdbarch
incorporating the description by calling @@code{gdbarch_update_p}.  Any
@@samp{<architecture>} element is handled first, to determine which
architecture's gdbarch initialization routine is called to create the
new architecture.  Then the initialization routine is called, and has
a chance to adjust the constructed architecture based on the contents
of the target description.  For instance, it can recognize any
properties set by a @@code{to_read_description} routine.  Also
see @@ref{Adding Target Described Register Support}.

@@node Adding Target Described Register Support
@@section Adding Target Described Register Support
@@cindex target descriptions, adding register support

Target descriptions can report additional registers specific to an
instance of the target.  But it takes a little work in the architecture
specific routines to support this.

A target description must either have no registers or a complete
set---this avoids complexity in trying to merge standard registers
with the target defined registers.  It is the architecture's
responsibility to validate that a description with registers has
everything it needs.  To keep architecture code simple, the same
mechanism is used to assign fixed internal register numbers to
standard registers.

If @@code{tdesc_has_registers} returns 1, the description contains
registers.  The architecture's @@code{gdbarch_init} routine should:

@@itemize @@bullet

@@item
Call @@code{tdesc_data_alloc} to allocate storage, early, before
searching for a matching gdbarch or allocating a new one.

@@item
Use @@code{tdesc_find_feature} to locate standard features by name.

@@item
Use @@code{tdesc_numbered_register} and @@code{tdesc_numbered_register_choices}
to locate the expected registers in the standard features.

@@item
Return @@code{NULL} if a required feature is missing, or if any standard
feature is missing expected registers.  This will produce a warning that
the description was incomplete.

@@item
Free the allocated data before returning, unless @@code{tdesc_use_registers}
is called.

@@item
Call @@code{set_gdbarch_num_regs} as usual, with a number higher than any
fixed number passed to @@code{tdesc_numbered_register}.

@@item
Call @@code{tdesc_use_registers} after creating a new gdbarch, before
returning it.

@@end itemize

After @@code{tdesc_use_registers} has been called, the architecture's
@@code{register_name}, @@code{register_type}, and @@code{register_reggroup_p}
routines will not be called; that information will be taken from
the target description.  @@code{num_regs} may be increased to account
for any additional registers in the description.

Pseudo-registers require some extra care:

@@itemize @@bullet

@@item
Using @@code{tdesc_numbered_register} allows the architecture to give
constant register numbers to standard architectural registers, e.g.@@:
as an @@code{enum} in @@file{@@var{arch}-tdep.h}.  But because
pseudo-registers are always numbered above @@code{num_regs},
which may be increased by the description, constant numbers
can not be used for pseudos.  They must be numbered relative to
@@code{num_regs} instead.

@@item
The description will not describe pseudo-registers, so the
architecture must call @@code{set_tdesc_pseudo_register_name},
@@code{set_tdesc_pseudo_register_type}, and
@@code{set_tdesc_pseudo_register_reggroup_p} to supply routines
describing pseudo registers.  These routines will be passed
internal register numbers, so the same routines used for the
gdbarch equivalents are usually suitable.

@@end itemize


@@node Target Vector Definition

@@chapter Target Vector Definition
@@cindex target vector

The target vector defines the interface between @@value{GDBN}'s
abstract handling of target systems, and the nitty-gritty code that
actually exercises control over a process or a serial port.
@@value{GDBN} includes some 30-40 different target vectors; however,
each configuration of @@value{GDBN} includes only a few of them.

@@menu
* Managing Execution State::
* Existing Targets::
@@end menu

@@node Managing Execution State
@@section Managing Execution State
@@cindex execution state

A target vector can be completely inactive (not pushed on the target
stack), active but not running (pushed, but not connected to a fully
manifested inferior), or completely active (pushed, with an accessible
inferior).  Most targets are only completely inactive or completely
active, but some support persistent connections to a target even
when the target has exited or not yet started.

For example, connecting to the simulator using @@code{target sim} does
not create a running program.  Neither registers nor memory are
accessible until @@code{run}.  Similarly, after @@code{kill}, the
program can not continue executing.  But in both cases @@value{GDBN}
remains connected to the simulator, and target-specific commands
are directed to the simulator.

A target which only supports complete activation should push itself
onto the stack in its @@code{to_open} routine (by calling
@@code{push_target}), and unpush itself from the stack in its
@@code{to_mourn_inferior} routine (by calling @@code{unpush_target}).

A target which supports both partial and complete activation should
still call @@code{push_target} in @@code{to_open}, but not call
@@code{unpush_target} in @@code{to_mourn_inferior}.  Instead, it should
call either @@code{target_mark_running} or @@code{target_mark_exited}
in its @@code{to_open}, depending on whether the target is fully active
after connection.  It should also call @@code{target_mark_running} any
time the inferior becomes fully active (e.g.@@: in
@@code{to_create_inferior} and @@code{to_attach}), and
@@code{target_mark_exited} when the inferior becomes inactive (in
@@code{to_mourn_inferior}).  The target should also make sure to call
@@code{target_mourn_inferior} from its @@code{to_kill}, to return the
target to inactive state.

@@node Existing Targets
@@section Existing Targets
@@cindex targets

@@subsection File Targets

Both executables and core files have target vectors.

@@subsection Standard Protocol and Remote Stubs

@@value{GDBN}'s file @@file{remote.c} talks a serial protocol to code that
runs in the target system.  @@value{GDBN} provides several sample
@@dfn{stubs} that can be integrated into target programs or operating
systems for this purpose; they are named @@file{@@var{cpu}-stub.c}.  Many
operating systems, embedded targets, emulators, and simulators already
have a @@value{GDBN} stub built into them, and maintenance of the remote
protocol must be careful to preserve compatibility.

The @@value{GDBN} user's manual describes how to put such a stub into
your target code.  What follows is a discussion of integrating the
SPARC stub into a complicated operating system (rather than a simple
program), by Stu Grossman, the author of this stub.

The trap handling code in the stub assumes the following upon entry to
@@code{trap_low}:

@@enumerate
@@item
%l1 and %l2 contain pc and npc respectively at the time of the trap;

@@item
traps are disabled;

@@item
you are in the correct trap window.
@@end enumerate

As long as your trap handler can guarantee those conditions, then there
is no reason why you shouldn't be able to ``share'' traps with the stub.
The stub has no requirement that it be jumped to directly from the
hardware trap vector.  That is why it calls @@code{exceptionHandler()},
which is provided by the external environment.  For instance, this could
set up the hardware traps to actually execute code which calls the stub
first, and then transfers to its own trap handler.

For the most point, there probably won't be much of an issue with
``sharing'' traps, as the traps we use are usually not used by the kernel,
and often indicate unrecoverable error conditions.  Anyway, this is all
controlled by a table, and is trivial to modify.  The most important
trap for us is for @@code{ta 1}.  Without that, we can't single step or
do breakpoints.  Everything else is unnecessary for the proper operation
of the debugger/stub.

From reading the stub, it's probably not obvious how breakpoints work.
They are simply done by deposit/examine operations from @@value{GDBN}.

@@subsection ROM Monitor Interface

@@subsection Custom Protocols

@@subsection Transport Layer

@@subsection Builtin Simulator


@@node Native Debugging

@@chapter Native Debugging
@@cindex native debugging

Several files control @@value{GDBN}'s configuration for native support:

@@table @@file
@@vindex NATDEPFILES
@@item gdb/config/@@var{arch}/@@var{xyz}.mh
Specifies Makefile fragments needed by a @@emph{native} configuration on
machine @@var{xyz}.  In particular, this lists the required
native-dependent object files, by defining @@samp{NATDEPFILES=@@dots{}}.
Also specifies the header file which describes native support on
@@var{xyz}, by defining @@samp{NAT_FILE= nm-@@var{xyz}.h}.  You can also
define @@samp{NAT_CFLAGS}, @@samp{NAT_ADD_FILES}, @@samp{NAT_CLIBS},
@@samp{NAT_CDEPS}, @@samp{NAT_GENERATED_FILES}, etc.; see @@file{Makefile.in}.

@@emph{Maintainer's note: The @@file{.mh} suffix is because this file
originally contained @@file{Makefile} fragments for hosting @@value{GDBN}
on machine @@var{xyz}.  While the file is no longer used for this
purpose, the @@file{.mh} suffix remains.  Perhaps someone will
eventually rename these fragments so that they have a @@file{.mn}
suffix.}

@@item gdb/config/@@var{arch}/nm-@@var{xyz}.h
(@@file{nm.h} is a link to this file, created by @@code{configure}).  Contains C
macro definitions describing the native system environment, such as
child process control and core file support.

@@item gdb/@@var{xyz}-nat.c
Contains any miscellaneous C code required for this native support of
this machine.  On some machines it doesn't exist at all.
@@end table

There are some ``generic'' versions of routines that can be used by
various systems.  These can be customized in various ways by macros
defined in your @@file{nm-@@var{xyz}.h} file.  If these routines work for
the @@var{xyz} host, you can just include the generic file's name (with
@@samp{.o}, not @@samp{.c}) in @@code{NATDEPFILES}.

Otherwise, if your machine needs custom support routines, you will need
to write routines that perform the same functions as the generic file.
Put them into @@file{@@var{xyz}-nat.c}, and put @@file{@@var{xyz}-nat.o}
into @@code{NATDEPFILES}.

@@table @@file
@@item inftarg.c
This contains the @@emph{target_ops vector} that supports Unix child
processes on systems which use ptrace and wait to control the child.

@@item procfs.c
This contains the @@emph{target_ops vector} that supports Unix child
processes on systems which use /proc to control the child.

@@item fork-child.c
This does the low-level grunge that uses Unix system calls to do a ``fork
and exec'' to start up a child process.

@@item infptrace.c
This is the low level interface to inferior processes for systems using
the Unix @@code{ptrace} call in a vanilla way.
@@end table

@@section ptrace

@@section /proc

@@section win32

@@section shared libraries

@@subsection AIX Shared Library Support

Shared library support on AIX is based on reading some data provided
by the loader.  With a live process, this information is accessed
via a @@code{ptrace} call (@@code{PT_LDINFO}), while it is obtained
by reading the @@samp{.ldinfo} section when debugging from a core file.
In both cases, the data has the same format, provided by the
@@file{sys/ldr.h} system header file.

Internally, the relevant portions of the loader information is
transformed into an XML representation, which lists all objects
currently mapped in memory.  The associated DTD can be found in
@@file{gdb/features/library-list-aix.dtd}.  For each library element,
the following parameters are reported:

@@itemize @@minus

@@item
@@code{name}, the path name of an object.  This is usually the name
of an archive, or the name of the main executable.

@@item
If the @@code{name} parameter refers to an archive, @@code{member} provides
the name of the object inside the archive on which the program depends.
Otherwise, this field should be omitted.

@@item
@@code{text_addr}, the address where the @@code{.text} section was mapped
in memory.

@@item
@@code{text_size}, the size of the @@code{.text} section.

@@item
@@code{data_addr}, the address where the @@code{.data} section was mapped
in memory.

@@item
@@code{data_size}, the size of the @@code{.data} section.

@@end itemize

By convention, the library list always has at least one element, and
the first entry always refers to the main executable.

Below is an example of such XML representation for a small program:

@@smallexample
<library-list-aix version="1.0">
  <library name="simple"
           text_addr="0x0000000010000000"
           text_size="128720"
           data_addr="0x0000000020000f00"
           data_size="31148">
  </library>
  <library name="/lib/libc.a"
           member="shr.o"
           text_addr="0x00000000d0100700"
           text_size="4152684"
           data_addr="0x00000000f0633e50"
           data_size="875944">
  </library>
</library-list-aix>
@@end smallexample

In that example, the list shows that the main executable is named
@@file{simple}, and its text section was loaded at 0x10000000.
This program depends on member @@file{shr.o} from the @@file{/lib/libc.a}
archive, whose text and data sections were loaded at (resp.)
0xd0100700 and 0xf0633e50.

@@section Native Conditionals
@@cindex native conditionals

When @@value{GDBN} is configured and compiled, various macros are
defined or left undefined, to control compilation when the host and
target systems are the same.  These macros should be defined (or left
undefined) in @@file{nm-@@var{system}.h}.

@@table @@code

@@item I386_USE_GENERIC_WATCHPOINTS
An x86-based machine can define this to use the generic x86 watchpoint
support; see @@ref{Algorithms, I386_USE_GENERIC_WATCHPOINTS}.

@@item START_INFERIOR_TRAPS_EXPECTED
@@findex START_INFERIOR_TRAPS_EXPECTED
When starting an inferior, @@value{GDBN} normally expects to trap
twice; once when
the shell execs, and once when the program itself execs.  If the actual
number of traps is something other than 2, then define this macro to
expand into the number expected.

@@end table

@@node Support Libraries

@@chapter Support Libraries

@@section BFD
@@cindex BFD library

BFD provides support for @@value{GDBN} in several ways:

@@table @@emph
@@item identifying executable and core files
BFD will identify a variety of file types, including a.out, coff, and
several variants thereof, as well as several kinds of core files.

@@item access to sections of files
BFD parses the file headers to determine the names, virtual addresses,
sizes, and file locations of all the various named sections in files
(such as the text section or the data section).  @@value{GDBN} simply
calls BFD to read or write section @@var{x} at byte offset @@var{y} for
length @@var{z}.

@@item specialized core file support
BFD provides routines to determine the failing command name stored in a
core file, the signal with which the program failed, and whether a core
file matches (i.e.@@: could be a core dump of) a particular executable
file.

@@item locating the symbol information
@@value{GDBN} uses an internal interface of BFD to determine where to find the
symbol information in an executable file or symbol-file.  @@value{GDBN} itself
handles the reading of symbols, since BFD does not ``understand'' debug
symbols, but @@value{GDBN} uses BFD's cached information to find the symbols,
string table, etc.
@@end table

@@section opcodes
@@cindex opcodes library

The opcodes library provides @@value{GDBN}'s disassembler.  (It's a separate
library because it's also used in binutils, for @@file{objdump}).

@@section readline
@@cindex readline library
The @@code{readline} library provides a set of functions for use by applications
that allow users to edit command lines as they are typed in.

@@section libiberty
@@cindex @@code{libiberty} library

The @@code{libiberty} library provides a set of functions and features
that integrate and improve on functionality found in modern operating
systems.  Broadly speaking, such features can be divided into three
groups: supplemental functions (functions that may be missing in some
environments and operating systems), replacement functions (providing
a uniform and easier to use interface for commonly used standard
functions), and extensions (which provide additional functionality
beyond standard functions).

@@value{GDBN} uses various features provided by the @@code{libiberty}
library, for instance the C@@t{++} demangler, the @@acronym{IEEE}
floating format support functions, the input options parser
@@samp{getopt}, the @@samp{obstack} extension, and other functions.

@@subsection @@code{obstacks} in @@value{GDBN}
@@cindex @@code{obstacks}

The obstack mechanism provides a convenient way to allocate and free
chunks of memory.  Each obstack is a pool of memory that is managed
like a stack.  Objects (of any nature, size and alignment) are
allocated and freed in a @@acronym{LIFO} fashion on an obstack (see
@@code{libiberty}'s documentation for a more detailed explanation of
@@code{obstacks}).

The most noticeable use of the @@code{obstacks} in @@value{GDBN} is in
object files.  There is an obstack associated with each internal
representation of an object file.  Lots of things get allocated on
these @@code{obstacks}: dictionary entries, blocks, blockvectors,
symbols, minimal symbols, types, vectors of fundamental types, class
fields of types, object files section lists, object files section
offset lists, line tables, symbol tables, partial symbol tables,
string tables, symbol table private data, macros tables, debug
information sections and entries, import and export lists (som),
unwind information (hppa), dwarf2 location expressions data.  Plus
various strings such as directory names strings, debug format strings,
names of types.

An essential and convenient property of all data on @@code{obstacks} is
that memory for it gets allocated (with @@code{obstack_alloc}) at
various times during a debugging session, but it is released all at
once using the @@code{obstack_free} function.  The @@code{obstack_free}
function takes a pointer to where in the stack it must start the
deletion from (much like the cleanup chains have a pointer to where to
start the cleanups).  Because of the stack like structure of the
@@code{obstacks}, this allows to free only a top portion of the
obstack.  There are a few instances in @@value{GDBN} where such thing
happens.  Calls to @@code{obstack_free} are done after some local data
is allocated to the obstack.  Only the local data is deleted from the
obstack.  Of course this assumes that nothing between the
@@code{obstack_alloc} and the @@code{obstack_free} allocates anything
else on the same obstack.  For this reason it is best and safest to
use temporary @@code{obstacks}.

Releasing the whole obstack is also not safe per se.  It is safe only
under the condition that we know the @@code{obstacks} memory is no
longer needed.  In @@value{GDBN} we get rid of the @@code{obstacks} only
when we get rid of the whole objfile(s), for instance upon reading a
new symbol file.

@@section gnu-regex
@@cindex regular expressions library

Regex conditionals.

@@table @@code
@@item C_ALLOCA

@@item NFAILURES

@@item RE_NREGS

@@item SIGN_EXTEND_CHAR

@@item SWITCH_ENUM_BUG

@@item SYNTAX_TABLE

@@item Sword

@@item sparc
@@end table

@@section Array Containers
@@cindex Array Containers
@@cindex VEC

Often it is necessary to manipulate a dynamic array of a set of
objects.  C forces some bookkeeping on this, which can get cumbersome
and repetitive.  The @@file{vec.h} file contains macros for defining
and using a typesafe vector type.  The functions defined will be
inlined when compiling, and so the abstraction cost should be zero.
Domain checks are added to detect programming errors.

An example use would be an array of symbols or section information.
The array can be grown as symbols are read in (or preallocated), and
the accessor macros provided keep care of all the necessary
bookkeeping.  Because the arrays are type safe, there is no danger of
accidentally mixing up the contents.  Think of these as C++ templates,
but implemented in C.

Because of the different behavior of structure objects, scalar objects
and of pointers, there are three flavors of vector, one for each of
these variants.  Both the structure object and pointer variants pass
pointers to objects around --- in the former case the pointers are
stored into the vector and in the latter case the pointers are
dereferenced and the objects copied into the vector.  The scalar
object variant is suitable for @@code{int}-like objects, and the vector
elements are returned by value.

There are both @@code{index} and @@code{iterate} accessors.  The iterator
returns a boolean iteration condition and updates the iteration
variable passed by reference.  Because the iterator will be inlined,
the address-of can be optimized away.

The vectors are implemented using the trailing array idiom, thus they
are not resizeable without changing the address of the vector object
itself.  This means you cannot have variables or fields of vector type
--- always use a pointer to a vector.  The one exception is the final
field of a structure, which could be a vector type.  You will have to
use the @@code{embedded_size} & @@code{embedded_init} calls to create
such objects, and they will probably not be resizeable (so don't use
the @@dfn{safe} allocation variants).  The trailing array idiom is used
(rather than a pointer to an array of data), because, if we allow
@@code{NULL} to also represent an empty vector, empty vectors occupy
minimal space in the structure containing them.

Each operation that increases the number of active elements is
available in @@dfn{quick} and @@dfn{safe} variants.  The former presumes
that there is sufficient allocated space for the operation to succeed
(it dies if there is not).  The latter will reallocate the vector, if
needed.  Reallocation causes an exponential increase in vector size.
If you know you will be adding N elements, it would be more efficient
to use the reserve operation before adding the elements with the
@@dfn{quick} operation.  This will ensure there are at least as many
elements as you ask for, it will exponentially increase if there are
too few spare slots.  If you want reserve a specific number of slots,
but do not want the exponential increase (for instance, you know this
is the last allocation), use a negative number for reservation.  You
can also create a vector of a specific size from the get go.

You should prefer the push and pop operations, as they append and
remove from the end of the vector.  If you need to remove several items
in one go, use the truncate operation.  The insert and remove
operations allow you to change elements in the middle of the vector.
There are two remove operations, one which preserves the element
ordering @@code{ordered_remove}, and one which does not
@@code{unordered_remove}.  The latter function copies the end element
into the removed slot, rather than invoke a memmove operation.  The
@@code{lower_bound} function will determine where to place an item in
the array using insert that will maintain sorted order.

If you need to directly manipulate a vector, then the @@code{address}
accessor will return the address of the start of the vector.  Also the
@@code{space} predicate will tell you whether there is spare capacity in the
vector.  You will not normally need to use these two functions.

Vector types are defined using a
@@code{DEF_VEC_@@{O,P,I@@}(@@var{typename})} macro.  Variables of vector
type are declared using a @@code{VEC(@@var{typename})} macro.  The
characters @@code{O}, @@code{P} and @@code{I} indicate whether
@@var{typename} is an object (@@code{O}), pointer (@@code{P}) or integral
(@@code{I}) type.  Be careful to pick the correct one, as you'll get an
awkward and inefficient API if you use the wrong one.  There is a
check, which results in a compile-time warning, for the @@code{P} and
@@code{I} versions, but there is no check for the @@code{O} versions, as
that is not possible in plain C.

An example of their use would be,

@@smallexample
DEF_VEC_P(tree);   // non-managed tree vector.

struct my_struct @@{
  VEC(tree) *v;      // A (pointer to) a vector of tree pointers.
@@};

struct my_struct *s;

if (VEC_length(tree, s->v)) @@{ we have some contents @@}
VEC_safe_push(tree, s->v, decl); // append some decl onto the end
for (ix = 0; VEC_iterate(tree, s->v, ix, elt); ix++)
  @@{ do something with elt @@}

@@end smallexample

The @@file{vec.h} file provides details on how to invoke the various
accessors provided.  They are enumerated here:

@@table @@code
@@item VEC_length
Return the number of items in the array,

@@item VEC_empty
Return true if the array has no elements.

@@item VEC_last
@@itemx VEC_index
Return the last or arbitrary item in the array.

@@item VEC_iterate
Access an array element and indicate whether the array has been
traversed.

@@item VEC_alloc
@@itemx VEC_free
Create and destroy an array.

@@item VEC_embedded_size
@@itemx VEC_embedded_init
Helpers for embedding an array as the final element of another struct.

@@item VEC_copy
Duplicate an array.

@@item VEC_space
Return the amount of free space in an array.

@@item VEC_reserve
Ensure a certain amount of free space.

@@item VEC_quick_push
@@itemx VEC_safe_push
Append to an array, either assuming the space is available, or making
sure that it is.

@@item VEC_pop
Remove the last item from an array.

@@item VEC_truncate
Remove several items from the end of an array.

@@item VEC_safe_grow
Add several items to the end of an array.

@@item VEC_replace
Overwrite an item in the array.

@@item VEC_quick_insert
@@itemx VEC_safe_insert
Insert an item into the middle of the array.  Either the space must
already exist, or the space is created.

@@item VEC_ordered_remove
@@itemx VEC_unordered_remove
Remove an item from the array, preserving order or not.

@@item VEC_block_remove
Remove a set of items from the array.

@@item VEC_address
Provide the address of the first element.

@@item VEC_lower_bound
Binary search the array.

@@end table

@@section include

@@node Coding Standards

@@chapter Coding Standards
@@cindex coding standards

@@section @@value{GDBN} C Coding Standards

@@value{GDBN} follows the GNU coding standards, as described in
@@file{etc/standards.texi}.  This file is also available for anonymous
FTP from GNU archive sites.  @@value{GDBN} takes a strict interpretation
of the standard; in general, when the GNU standard recommends a practice
but does not require it, @@value{GDBN} requires it.

@@value{GDBN} follows an additional set of coding standards specific to
@@value{GDBN}, as described in the following sections.

@@subsection ISO C

@@value{GDBN} assumes an ISO/IEC 9899:1990 (a.k.a.@@: ISO C90) compliant
compiler.

@@value{GDBN} does not assume an ISO C or POSIX compliant C library.

@@subsection Formatting

@@cindex source code formatting
The standard GNU recommendations for formatting must be followed
strictly.  Any @@value{GDBN}-specific deviation from GNU
recomendations is described below.

A function declaration should not have its name in column zero.  A
function definition should have its name in column zero.

@@smallexample
/* Declaration */
static void foo (void);
/* Definition */
void
foo (void)
@@{
@@}
@@end smallexample

@@emph{Pragmatics: This simplifies scripting.  Function definitions can
be found using @@samp{^function-name}.}

There must be a space between a function or macro name and the opening
parenthesis of its argument list (except for macro definitions, as
required by C).  There must not be a space after an open paren/bracket
or before a close paren/bracket.

While additional whitespace is generally helpful for reading, do not use
more than one blank line to separate blocks, and avoid adding whitespace
after the end of a program line (as of 1/99, some 600 lines had
whitespace after the semicolon).  Excess whitespace causes difficulties
for @@code{diff} and @@code{patch} utilities.

Pointers are declared using the traditional K&R C style:

@@smallexample
void *foo;
@@end smallexample

@@noindent
and not:

@@smallexample
void * foo;
void* foo;
@@end smallexample

In addition, whitespace around casts and unary operators should follow
the following guidelines:

@@multitable @@columnfractions .2 .2 .8
@@item Use... @@tab ...instead of @@tab

@@item @@code{!x}
@@tab @@code{! x}
@@item @@code{~x}
@@tab @@code{~ x}
@@item @@code{-x}
@@tab @@code{- x}
@@tab (unary minus)
@@item @@code{(foo) x}
@@tab @@code{(foo)x}
@@tab (cast)
@@item @@code{*x}
@@tab @@code{* x}
@@tab (pointer dereference)
@@end multitable

Any two or more lines in code should be wrapped in braces, even if
they are comments, as they look like separate statements:

@@smallexample
if (i)
  @@{
    /* Return success.  */
    return 0;
  @@}
@@end smallexample

@@noindent
and not:

@@smallexample
if (i)
  /* Return success.  */
  return 0;
@@end smallexample

@@subsection Comments

@@cindex comment formatting
The standard GNU requirements on comments must be followed strictly.

Block comments must appear in the following form, with no @@code{/*}- or
@@code{*/}-only lines, and no leading @@code{*}:

@@smallexample
/* Wait for control to return from inferior to debugger.  If inferior
   gets a signal, we may decide to start it up again instead of
   returning.  That is why there is a loop in this function.  When
   this function actually returns it means the inferior should be left
   stopped and @@value{GDBN} should read more commands.  */
@@end smallexample

(Note that this format is encouraged by Emacs; tabbing for a multi-line
comment works correctly, and @@kbd{M-q} fills the block consistently.)

Put a blank line between the block comments preceding function or
variable definitions, and the definition itself.

In general, put function-body comments on lines by themselves, rather
than trying to fit them into the 20 characters left at the end of a
line, since either the comment or the code will inevitably get longer
than will fit, and then somebody will have to move it anyhow.

@@subsection C Usage

@@cindex C data types
Code must not depend on the sizes of C data types, the format of the
host's floating point numbers, the alignment of anything, or the order
of evaluation of expressions.

@@cindex function usage
Use functions freely.  There are only a handful of compute-bound areas
in @@value{GDBN} that might be affected by the overhead of a function
call, mainly in symbol reading.  Most of @@value{GDBN}'s performance is
limited by the target interface (whether serial line or system call).

However, use functions with moderation.  A thousand one-line functions
are just as hard to understand as a single thousand-line function.

@@emph{Macros are bad, M'kay.}
(But if you have to use a macro, make sure that the macro arguments are
protected with parentheses.)

@@cindex types

Declarations like @@samp{struct foo *} should be used in preference to
declarations like @@samp{typedef struct foo @@{ @@dots{} @@} *foo_ptr}.

Zero constant (@@code{0}) is not interchangeable with a null pointer
constant (@@code{NULL}) anywhere.  @@sc{gcc} does not give a warning for
such interchange.  Specifically:

@@multitable @@columnfractions .2 .5
@@item incorrect
@@tab @@code{if (pointervar) @@{@@}}
@@item incorrect
@@tab @@code{if (!pointervar) @@{@@}}
@@item incorrect
@@tab @@code{if (pointervar != 0) @@{@@}}
@@item incorrect
@@tab @@code{if (pointervar == 0) @@{@@}}
@@item correct
@@tab @@code{if (pointervar != NULL) @@{@@}}
@@item correct
@@tab @@code{if (pointervar == NULL) @@{@@}}
@@end multitable

@@subsection Function Prototypes
@@cindex function prototypes

Prototypes must be used when both @@emph{declaring} and @@emph{defining}
a function.  Prototypes for @@value{GDBN} functions must include both the
argument type and name, with the name matching that used in the actual
function definition.

All external functions should have a declaration in a header file that
callers include, that declaration should use the @@code{extern} modifier.
The only exception concerns @@code{_initialize_*} functions, which must
be external so that @@file{init.c} construction works, but shouldn't be
visible to random source files.

Where a source file needs a forward declaration of a static function,
that declaration must appear in a block near the top of the source file.

@@subsection File Names

Any file used when building the core of @@value{GDBN} must be in lower
case.  Any file used when building the core of @@value{GDBN} must be 8.3
unique.  These requirements apply to both source and generated files.

@@emph{Pragmatics: The core of @@value{GDBN} must be buildable on many
platforms including DJGPP and MacOS/HFS.  Every time an unfriendly file
is introduced to the build process both @@file{Makefile.in} and
@@file{configure.in} need to be modified accordingly.  Compare the
convoluted conversion process needed to transform @@file{COPYING} into
@@file{copying.c} with the conversion needed to transform
@@file{version.in} into @@file{version.c}.}

Any file non 8.3 compliant file (that is not used when building the core
of @@value{GDBN}) must be added to @@file{gdb/config/djgpp/fnchange.lst}.

@@emph{Pragmatics: This is clearly a compromise.}

When @@value{GDBN} has a local version of a system header file (ex
@@file{string.h}) the file name based on the POSIX header prefixed with
@@file{gdb_} (@@file{gdb_string.h}).  These headers should be relatively
independent: they should use only macros defined by @@file{configure},
the compiler, or the host; they should include only system headers; they
should refer only to system types.  They may be shared between multiple
programs, e.g.@@: @@value{GDBN} and @@sc{gdbserver}.

For other files @@samp{-} is used as the separator.

@@subsection Include Files

A @@file{.c} file should include @@file{defs.h} first.

A @@file{.c} file should directly include the @@code{.h} file of every
declaration and/or definition it directly refers to.  It cannot rely on
indirect inclusion.

A @@file{.h} file should directly include the @@code{.h} file of every
declaration and/or definition it directly refers to.  It cannot rely on
indirect inclusion.  Exception: The file @@file{defs.h} does not need to
be directly included.

An external declaration should only appear in one include file.

An external declaration should never appear in a @@code{.c} file.
Exception: a declaration for the @@code{_initialize} function that
pacifies @@option{-Wmissing-declaration}.

A @@code{typedef} definition should only appear in one include file.

An opaque @@code{struct} declaration can appear in multiple @@file{.h}
files.  Where possible, a @@file{.h} file should use an opaque
@@code{struct} declaration instead of an include.

All @@file{.h} files should be wrapped in:

@@smallexample
#ifndef INCLUDE_FILE_NAME_H
#define INCLUDE_FILE_NAME_H
header body
#endif
@@end smallexample

@@section @@value{GDBN} Python Coding Standards

@@value{GDBN} follows the published @@code{Python} coding standards in
@@uref{http://www.python.org/dev/peps/pep-0008/, @@code{PEP008}}.

In addition, the guidelines in the
@@uref{http://google-styleguide.googlecode.com/svn/trunk/pyguide.html,
Google Python Style Guide} are also followed where they do not
conflict with @@code{PEP008}.

@@subsection @@value{GDBN}-specific exceptions

There are a few exceptions to the published standards.
They exist mainly for consistency with the @@code{C} standards.

@@c It is expected that there are a few more exceptions,
@@c so we use itemize here.

@@itemize @@bullet

@@item
Use @@code{FIXME} instead of @@code{TODO}.

@@end itemize

@@node Misc Guidelines

@@chapter Misc Guidelines

This chapter covers topics that are lower-level than the major
algorithms of @@value{GDBN}.

@@section Cleanups
@@cindex cleanups

Cleanups are a structured way to deal with things that need to be done
later.

When your code does something (e.g., @@code{xmalloc} some memory, or
@@code{open} a file) that needs to be undone later (e.g., @@code{xfree}
the memory or @@code{close} the file), it can make a cleanup.  The
cleanup will be done at some future point: when the command is finished
and control returns to the top level; when an error occurs and the stack
is unwound; or when your code decides it's time to explicitly perform
cleanups.  Alternatively you can elect to discard the cleanups you
created.

Syntax:

@@table @@code
@@item struct cleanup *@@var{old_chain};
Declare a variable which will hold a cleanup chain handle.

@@findex make_cleanup
@@item @@var{old_chain} = make_cleanup (@@var{function}, @@var{arg});
Make a cleanup which will cause @@var{function} to be called with
@@var{arg} (a @@code{char *}) later.  The result, @@var{old_chain}, is a
handle that can later be passed to @@code{do_cleanups} or
@@code{discard_cleanups}.  Unless you are going to call
@@code{do_cleanups} or @@code{discard_cleanups}, you can ignore the result
from @@code{make_cleanup}.

@@findex do_cleanups
@@item do_cleanups (@@var{old_chain});
Do all cleanups added to the chain since the corresponding
@@code{make_cleanup} call was made.

@@findex discard_cleanups
@@item discard_cleanups (@@var{old_chain});
Same as @@code{do_cleanups} except that it just removes the cleanups from
the chain and does not call the specified functions.
@@end table

Cleanups are implemented as a chain.  The handle returned by
@@code{make_cleanups} includes the cleanup passed to the call and any
later cleanups appended to the chain (but not yet discarded or
performed).  E.g.:

@@smallexample
make_cleanup (a, 0); 
@@{
  struct cleanup *old = make_cleanup (b, 0); 
  make_cleanup (c, 0)
  ...
  do_cleanups (old);
@@}
@@end smallexample

@@noindent
will call @@code{c()} and @@code{b()} but will not call @@code{a()}.  The
cleanup that calls @@code{a()} will remain in the cleanup chain, and will
be done later unless otherwise discarded.@@refill

Your function should explicitly do or discard the cleanups it creates.
Failing to do this leads to non-deterministic behavior since the caller
will arbitrarily do or discard your functions cleanups.  This need leads
to two common cleanup styles.

The first style is try/finally.  Before it exits, your code-block calls
@@code{do_cleanups} with the old cleanup chain and thus ensures that your
code-block's cleanups are always performed.  For instance, the following
code-segment avoids a memory leak problem (even when @@code{error} is
called and a forced stack unwind occurs) by ensuring that the
@@code{xfree} will always be called:

@@smallexample
struct cleanup *old = make_cleanup (null_cleanup, 0);
data = xmalloc (sizeof blah);
make_cleanup (xfree, data);
... blah blah ...
do_cleanups (old);
@@end smallexample

The second style is try/except.  Before it exits, your code-block calls
@@code{discard_cleanups} with the old cleanup chain and thus ensures that
any created cleanups are not performed.  For instance, the following
code segment, ensures that the file will be closed but only if there is
an error:

@@smallexample
FILE *file = fopen ("afile", "r");
struct cleanup *old = make_cleanup (close_file, file);
... blah blah ...
discard_cleanups (old);
return file;
@@end smallexample

Some functions, e.g., @@code{fputs_filtered()} or @@code{error()}, specify
that they ``should not be called when cleanups are not in place''.  This
means that any actions you need to reverse in the case of an error or
interruption must be on the cleanup chain before you call these
functions, since they might never return to your code (they
@@samp{longjmp} instead).

@@section Per-architecture module data
@@cindex per-architecture module data
@@cindex multi-arch data
@@cindex data-pointer, per-architecture/per-module

The multi-arch framework includes a mechanism for adding module
specific per-architecture data-pointers to the @@code{struct gdbarch}
architecture object.

A module registers one or more per-architecture data-pointers using:

@@deftypefn {Architecture Function} {struct gdbarch_data *} gdbarch_data_register_pre_init (gdbarch_data_pre_init_ftype *@@var{pre_init})
@@var{pre_init} is used to, on-demand, allocate an initial value for a
per-architecture data-pointer using the architecture's obstack (passed
in as a parameter).  Since @@var{pre_init} can be called during
architecture creation, it is not parameterized with the architecture.
and must not call modules that use per-architecture data.
@@end deftypefn

@@deftypefn {Architecture Function} {struct gdbarch_data *} gdbarch_data_register_post_init (gdbarch_data_post_init_ftype *@@var{post_init})
@@var{post_init} is used to obtain an initial value for a
per-architecture data-pointer @@emph{after}.  Since @@var{post_init} is
always called after architecture creation, it both receives the fully
initialized architecture and is free to call modules that use
per-architecture data (care needs to be taken to ensure that those
other modules do not try to call back to this module as that will
create in cycles in the initialization call graph).
@@end deftypefn

These functions return a @@code{struct gdbarch_data} that is used to
identify the per-architecture data-pointer added for that module.

The per-architecture data-pointer is accessed using the function:

@@deftypefn {Architecture Function} {void *} gdbarch_data (struct gdbarch *@@var{gdbarch}, struct gdbarch_data *@@var{data_handle})
Given the architecture @@var{arch} and module data handle
@@var{data_handle} (returned by @@code{gdbarch_data_register_pre_init}
or @@code{gdbarch_data_register_post_init}), this function returns the
current value of the per-architecture data-pointer.  If the data
pointer is @@code{NULL}, it is first initialized by calling the
corresponding @@var{pre_init} or @@var{post_init} method.
@@end deftypefn

The examples below assume the following definitions:

@@smallexample
struct nozel @@{ int total; @@};
static struct gdbarch_data *nozel_handle;
@@end smallexample

A module can extend the architecture vector, adding additional
per-architecture data, using the @@var{pre_init} method.  The module's
per-architecture data is then initialized during architecture
creation.

In the below, the module's per-architecture @@emph{nozel} is added.  An
architecture can specify its nozel by calling @@code{set_gdbarch_nozel}
from @@code{gdbarch_init}.

@@smallexample
static void *
nozel_pre_init (struct obstack *obstack)
@@{
  struct nozel *data = OBSTACK_ZALLOC (obstack, struct nozel);
  return data;
@@}
@@end smallexample

@@smallexample
extern void
set_gdbarch_nozel (struct gdbarch *gdbarch, int total)
@@{
  struct nozel *data = gdbarch_data (gdbarch, nozel_handle);
  data->total = nozel;
@@}
@@end smallexample

A module can on-demand create architecture dependent data structures
using @@code{post_init}.

In the below, the nozel's total is computed on-demand by
@@code{nozel_post_init} using information obtained from the
architecture.

@@smallexample
static void *
nozel_post_init (struct gdbarch *gdbarch)
@@{
  struct nozel *data = GDBARCH_OBSTACK_ZALLOC (gdbarch, struct nozel);
  nozel->total = gdbarch@@dots{} (gdbarch);
  return data;
@@}
@@end smallexample

@@smallexample
extern int
nozel_total (struct gdbarch *gdbarch)
@@{
  struct nozel *data = gdbarch_data (gdbarch, nozel_handle);
  return data->total;
@@}
@@end smallexample

@@section Wrapping Output Lines
@@cindex line wrap in output

@@findex wrap_here
Output that goes through @@code{printf_filtered} or @@code{fputs_filtered}
or @@code{fputs_demangled} needs only to have calls to @@code{wrap_here}
added in places that would be good breaking points.  The utility
routines will take care of actually wrapping if the line width is
exceeded.

The argument to @@code{wrap_here} is an indentation string which is
printed @@emph{only} if the line breaks there.  This argument is saved
away and used later.  It must remain valid until the next call to
@@code{wrap_here} or until a newline has been printed through the
@@code{*_filtered} functions.  Don't pass in a local variable and then
return!

It is usually best to call @@code{wrap_here} after printing a comma or
space.  If you call it before printing a space, make sure that your
indentation properly accounts for the leading space that will print if
the line wraps there.

Any function or set of functions that produce filtered output must
finish by printing a newline, to flush the wrap buffer, before switching
to unfiltered (@@code{printf}) output.  Symbol reading routines that
print warnings are a good example.

@@section Memory Management

@@value{GDBN} does not use the functions @@code{malloc}, @@code{realloc},
@@code{calloc}, @@code{free} and @@code{asprintf}.

@@value{GDBN} uses the functions @@code{xmalloc}, @@code{xrealloc} and
@@code{xcalloc} when allocating memory.  Unlike @@code{malloc} et.al.@@:
these functions do not return when the memory pool is empty.  Instead,
they unwind the stack using cleanups.  These functions return
@@code{NULL} when requested to allocate a chunk of memory of size zero.

@@emph{Pragmatics: By using these functions, the need to check every
memory allocation is removed.  These functions provide portable
behavior.}

@@value{GDBN} does not use the function @@code{free}.

@@value{GDBN} uses the function @@code{xfree} to return memory to the
memory pool.  Consistent with ISO-C, this function ignores a request to
free a @@code{NULL} pointer.

@@emph{Pragmatics: On some systems @@code{free} fails when passed a
@@code{NULL} pointer.}

@@value{GDBN} can use the non-portable function @@code{alloca} for the
allocation of small temporary values (such as strings).

@@emph{Pragmatics: This function is very non-portable.  Some systems
restrict the memory being allocated to no more than a few kilobytes.}

@@value{GDBN} uses the string function @@code{xstrdup} and the print
function @@code{xstrprintf}.

@@emph{Pragmatics: @@code{asprintf} and @@code{strdup} can fail.  Print
functions such as @@code{sprintf} are very prone to buffer overflow
errors.}


@@section Compiler Warnings
@@cindex compiler warnings

With few exceptions, developers should avoid the configuration option
@@samp{--disable-werror} when building @@value{GDBN}.  The exceptions
are listed in the file @@file{gdb/MAINTAINERS}.  The default, when
building with @@sc{gcc}, is @@samp{--enable-werror}.

This option causes @@value{GDBN} (when built using GCC) to be compiled
with a carefully selected list of compiler warning flags.  Any warnings
from those flags are treated as errors.

The current list of warning flags includes:

@@table @@samp
@@item -Wall
Recommended @@sc{gcc} warnings.

@@item -Wdeclaration-after-statement

@@sc{gcc} 3.x (and later) and @@sc{c99} allow declarations mixed with
code, but @@sc{gcc} 2.x and @@sc{c89} do not.

@@item -Wpointer-arith

@@item -Wformat-nonliteral
Non-literal format strings, with a few exceptions, are bugs - they
might contain unintended user-supplied format specifiers.
Since @@value{GDBN} uses the @@code{format printf} attribute on all
@@code{printf} like functions this checks not just @@code{printf} calls
but also calls to functions such as @@code{fprintf_unfiltered}.

@@item -Wpointer-sign
This helps make sure @@value{GDBN} code uses @@code{gdb_byte} which is
really @@code{unsigned char} for raw bytes instead of @@code{char},
whose signedness is host-dependent.  @@sc{gcc} enables this with
@@code{-Wall} since version 4.0.  We enable it explicitly too to be
decoupled from future @@sc{gcc} (or other compiler)'s defaults.

@@item -Wno-unused-parameter
Due to the way that @@value{GDBN} is implemented many functions have
unused parameters.  Consequently this warning is avoided.  The macro
@@code{ATTRIBUTE_UNUSED} is not used as it leads to false negatives ---
it is not an error to have @@code{ATTRIBUTE_UNUSED} on a parameter that
is being used.

@@item -Wno-unused
@@itemx -Wno-switch
@@itemx -Wno-char-subscripts
These are warnings which might be useful for @@value{GDBN}, but are
currently too noisy to enable with @@samp{-Werror}.

@@end table

@@section Internal Error Recovery

During its execution, @@value{GDBN} can encounter two types of errors.
User errors and internal errors.  User errors include not only a user
entering an incorrect command but also problems arising from corrupt
object files and system errors when interacting with the target.
Internal errors include situations where @@value{GDBN} has detected, at
run time, a corrupt or erroneous situation.

When reporting an internal error, @@value{GDBN} uses
@@code{internal_error} and @@code{gdb_assert}.

@@value{GDBN} must not call @@code{abort} or @@code{assert}.

@@emph{Pragmatics: There is no @@code{internal_warning} function.  Either
the code detected a user error, recovered from it and issued a
@@code{warning} or the code failed to correctly recover from the user
error and issued an @@code{internal_error}.}

@@section Command Names

GDB U/I commands are written @@samp{foo-bar}, not @@samp{foo_bar}.

@@section Clean Design and Portable Implementation

@@cindex design
In addition to getting the syntax right, there's the little question of
semantics.  Some things are done in certain ways in @@value{GDBN} because long
experience has shown that the more obvious ways caused various kinds of
trouble.

@@cindex assumptions about targets
You can't assume the byte order of anything that comes from a target
(including @@var{value}s, object files, and instructions).  Such things
must be byte-swapped using @@code{SWAP_TARGET_AND_HOST} in
@@value{GDBN}, or one of the swap routines defined in @@file{bfd.h},
such as @@code{bfd_get_32}.

You can't assume that you know what interface is being used to talk to
the target system.  All references to the target must go through the
current @@code{target_ops} vector.

You can't assume that the host and target machines are the same machine
(except in the ``native'' support modules).  In particular, you can't
assume that the target machine's header files will be available on the
host machine.  Target code must bring along its own header files --
written from scratch or explicitly donated by their owner, to avoid
copyright problems.

@@cindex portability
Insertion of new @@code{#ifdef}'s will be frowned upon.  It's much better
to write the code portably than to conditionalize it for various
systems.

@@cindex system dependencies
New @@code{#ifdef}'s which test for specific compilers or manufacturers
or operating systems are unacceptable.  All @@code{#ifdef}'s should test
for features.  The information about which configurations contain which
features should be segregated into the configuration files.  Experience
has proven far too often that a feature unique to one particular system
often creeps into other systems; and that a conditional based on some
predefined macro for your current system will become worthless over
time, as new versions of your system come out that behave differently
with regard to this feature.

Adding code that handles specific architectures, operating systems,
target interfaces, or hosts, is not acceptable in generic code.

@@cindex portable file name handling
@@cindex file names, portability
One particularly notorious area where system dependencies tend to
creep in is handling of file names.  The mainline @@value{GDBN} code
assumes Posix semantics of file names: absolute file names begin with
a forward slash @@file{/}, slashes are used to separate leading
directories, case-sensitive file names.  These assumptions are not
necessarily true on non-Posix systems such as MS-Windows.  To avoid
system-dependent code where you need to take apart or construct a file
name, use the following portable macros:

@@table @@code
@@findex HAVE_DOS_BASED_FILE_SYSTEM
@@item HAVE_DOS_BASED_FILE_SYSTEM
This preprocessing symbol is defined to a non-zero value on hosts
whose filesystems belong to the MS-DOS/MS-Windows family.  Use this
symbol to write conditional code which should only be compiled for
such hosts.

@@findex IS_DIR_SEPARATOR
@@item IS_DIR_SEPARATOR (@@var{c})
Evaluates to a non-zero value if @@var{c} is a directory separator
character.  On Unix and GNU/Linux systems, only a slash @@file{/} is
such a character, but on Windows, both @@file{/} and @@file{\} will
pass.

@@findex IS_ABSOLUTE_PATH
@@item IS_ABSOLUTE_PATH (@@var{file})
Evaluates to a non-zero value if @@var{file} is an absolute file name.
For Unix and GNU/Linux hosts, a name which begins with a slash
@@file{/} is absolute.  On DOS and Windows, @@file{d:/foo} and
@@file{x:\bar} are also absolute file names.

@@findex FILENAME_CMP
@@item FILENAME_CMP (@@var{f1}, @@var{f2})
Calls a function which compares file names @@var{f1} and @@var{f2} as
appropriate for the underlying host filesystem.  For Posix systems,
this simply calls @@code{strcmp}; on case-insensitive filesystems it
will call @@code{strcasecmp} instead.

@@findex DIRNAME_SEPARATOR
@@item DIRNAME_SEPARATOR
Evaluates to a character which separates directories in
@@code{PATH}-style lists, typically held in environment variables.
This character is @@samp{:} on Unix, @@samp{;} on DOS and Windows.

@@findex SLASH_STRING
@@item SLASH_STRING
This evaluates to a constant string you should use to produce an
absolute filename from leading directories and the file's basename.
@@code{SLASH_STRING} is @@code{"/"} on most systems, but might be
@@code{"\\"} for some Windows-based ports.
@@end table

In addition to using these macros, be sure to use portable library
functions whenever possible.  For example, to extract a directory or a
basename part from a file name, use the @@code{dirname} and
@@code{basename} library functions (available in @@code{libiberty} for
platforms which don't provide them), instead of searching for a slash
with @@code{strrchr}.

Another way to generalize @@value{GDBN} along a particular interface is with an
attribute struct.  For example, @@value{GDBN} has been generalized to handle
multiple kinds of remote interfaces---not by @@code{#ifdef}s everywhere, but
by defining the @@code{target_ops} structure and having a current target (as
well as a stack of targets below it, for memory references).  Whenever
something needs to be done that depends on which remote interface we are
using, a flag in the current target_ops structure is tested (e.g.,
@@code{target_has_stack}), or a function is called through a pointer in the
current target_ops structure.  In this way, when a new remote interface
is added, only one module needs to be touched---the one that actually
implements the new remote interface.  Other examples of
attribute-structs are BFD access to multiple kinds of object file
formats, or @@value{GDBN}'s access to multiple source languages.

Please avoid duplicating code.  For example, in @@value{GDBN} 3.x all
the code interfacing between @@code{ptrace} and the rest of
@@value{GDBN} was duplicated in @@file{*-dep.c}, and so changing
something was very painful.  In @@value{GDBN} 4.x, these have all been
consolidated into @@file{infptrace.c}.  @@file{infptrace.c} can deal
with variations between systems the same way any system-independent
file would (hooks, @@code{#if defined}, etc.), and machines which are
radically different don't need to use @@file{infptrace.c} at all.

All debugging code must be controllable using the @@samp{set debug
@@var{module}} command.  Do not use @@code{printf} to print trace
messages.  Use @@code{fprintf_unfiltered(gdb_stdlog, ...}.  Do not use
@@code{#ifdef DEBUG}.

@@node Porting GDB

@@chapter Porting @@value{GDBN}
@@cindex porting to new machines

Most of the work in making @@value{GDBN} compile on a new machine is in
specifying the configuration of the machine.  Porting a new
architecture to @@value{GDBN} can be broken into a number of steps.

@@itemize @@bullet

@@item
Ensure a @@sc{bfd} exists for executables of the target architecture in
the @@file{bfd} directory.  If one does not exist, create one by
modifying an existing similar one.

@@item
Implement a disassembler for the target architecture in the @@file{opcodes}
directory.

@@item
Define the target architecture in the @@file{gdb} directory
(@@pxref{Adding a New Target, , Adding a New Target}).  Add the pattern
for the new target to @@file{configure.tgt} with the names of the files
that contain the code.  By convention the target architecture
definition for an architecture @@var{arch} is placed in
@@file{@@var{arch}-tdep.c}.

Within @@file{@@var{arch}-tdep.c} define the function
@@code{_initialize_@@var{arch}_tdep} which calls
@@code{gdbarch_register} to create the new @@code{@@w{struct
gdbarch}} for the architecture.

@@item
If a new remote target is needed, consider adding a new remote target
by defining a function
@@code{_initialize_remote_@@var{arch}}.  However if at all possible
use the @@value{GDBN} @@emph{Remote Serial Protocol} for this and implement
the server side protocol independently with the target.

@@item
If desired implement a simulator in the @@file{sim} directory.  This
should create the library @@file{libsim.a} implementing the interface
in @@file{remote-sim.h} (found in the @@file{include} directory).

@@item
Build and test.  If desired, lobby the @@sc{gdb} steering group to
have the new port included in the main distribution!

@@item
Add a description of the new architecture to the main @@value{GDBN} user
guide (@@pxref{Configuration Specific Information, , Configuration
Specific Information, gdb, Debugging with @@value{GDBN}}).

@@end itemize

@@node Versions and Branches
@@chapter Versions and Branches

@@section Versions

@@value{GDBN}'s version is determined by the file
@@file{gdb/version.in} and takes one of the following forms:

@@table @@asis
@@item @@var{major}.@@var{minor}
@@itemx @@var{major}.@@var{minor}.@@var{patchlevel}
an official release (e.g., 6.2 or 6.2.1)
@@item @@var{major}.@@var{minor}.@@var{patchlevel}.DATE
a snapshot; the string @@samp{DATE} is replace with the date from
@@file{bfd/version.h}
@@item @@var{major}.@@var{minor}.@@var{patchlevel}.DATE-cvs
a @@sc{cvs} check out; the string @@samp{DATE} is replace with the date from
@@file{bfd/version.h}
@@item @@var{major}.@@var{minor}.@@var{patchlevel}.DATE (@@var{vendor})
a vendor specific release of @@value{GDBN}, that while based on@@*
@@var{major}.@@var{minor}.@@var{patchlevel}.DATE,
may include additional changes
@@end table

@@value{GDBN}'s mainline uses the @@var{major} and @@var{minor} version
numbers from the most recent release branch, with a @@var{patchlevel}
of 50.  At the time each new release branch is created, the mainline's
@@var{major} and @@var{minor} version numbers are updated.

@@value{GDBN}'s release branch is similar.  When the branch is cut, the
@@var{patchlevel} is changed from 50 to 90.  As draft releases are
drawn from the branch, the @@var{patchlevel} is incremented.  Once the
first release (@@var{major}.@@var{minor}) has been made, the
@@var{patchlevel} is set to 0 and updates have an incremented
@@var{patchlevel}.

For snapshots, and @@sc{cvs} check outs, it is also possible to
identify the @@sc{cvs} origin:

@@table @@asis
@@item @@var{major}.@@var{minor}.50.@@var{YYYY}@@var{MM}@@var{DD}
drawn from the @@sc{head} of mainline @@sc{cvs} (e.g., 6.1.50.20020302)
@@item @@var{major}.@@var{minor}.90.@@var{YYYY}@@var{MM}@@var{DD}
@@itemx @@var{major}.@@var{minor}.91.@@var{YYYY}@@var{MM}@@var{DD} @@dots{}
drawn from a release branch prior to the release (e.g.,
6.1.90.20020304)
@@item @@var{major}.@@var{minor}.0.@@var{YYYY}@@var{MM}@@var{DD}
@@itemx @@var{major}.@@var{minor}.1.@@var{YYYY}@@var{MM}@@var{DD} @@dots{}
drawn from a release branch after the release (e.g., 6.2.0.20020308)
@@end table

If the previous @@value{GDBN} version is 6.1 and the current version is
6.2, then, substituting 6 for @@var{major} and 1 or 2 for @@var{minor},
here's an illustration of a typical sequence:

@@smallexample
     <HEAD>
        |
6.1.50.20020302-cvs
        |
        +--------------------------.
        |                    <gdb_6_2-branch>
        |                          |
6.2.50.20020303-cvs        6.1.90 (draft #1)
        |                          |
6.2.50.20020304-cvs        6.1.90.20020304-cvs
        |                          |
6.2.50.20020305-cvs        6.1.91 (draft #2)
        |                          |
6.2.50.20020306-cvs        6.1.91.20020306-cvs
        |                          |
6.2.50.20020307-cvs        6.2 (release)
        |                          |
6.2.50.20020308-cvs        6.2.0.20020308-cvs
        |                          |
6.2.50.20020309-cvs        6.2.1 (update)
        |                          |
6.2.50.20020310-cvs         <branch closed>
        |
6.2.50.20020311-cvs
        |
        +--------------------------.
        |                     <gdb_6_3-branch>
        |                          |
6.3.50.20020312-cvs        6.2.90 (draft #1)
        |                          |
@@end smallexample

@@section Release Branches
@@cindex Release Branches

@@value{GDBN} draws a release series (6.2, 6.2.1, @@dots{}) from a
single release branch, and identifies that branch using the @@sc{cvs}
branch tags:

@@smallexample
gdb_@@var{major}_@@var{minor}-@@var{YYYY}@@var{MM}@@var{DD}-branchpoint
gdb_@@var{major}_@@var{minor}-branch
gdb_@@var{major}_@@var{minor}-@@var{YYYY}@@var{MM}@@var{DD}-release
@@end smallexample

@@emph{Pragmatics: To help identify the date at which a branch or
release is made, both the branchpoint and release tags include the
date that they are cut (@@var{YYYY}@@var{MM}@@var{DD}) in the tag.  The
branch tag, denoting the head of the branch, does not need this.}

@@section Vendor Branches
@@cindex vendor branches

To avoid version conflicts, vendors are expected to modify the file
@@file{gdb/version.in} to include a vendor unique alphabetic identifier
(an official @@value{GDBN} release never uses alphabetic characters in
its version identifier).  E.g., @@samp{6.2widgit2}, or @@samp{6.2 (Widgit
Inc Patch 2)}.

@@section Experimental Branches
@@cindex experimental branches

@@subsection Guidelines

@@value{GDBN} permits the creation of branches, cut from the @@sc{cvs}
repository, for experimental development.  Branches make it possible
for developers to share preliminary work, and maintainers to examine
significant new developments.

The following are a set of guidelines for creating such branches:

@@table @@emph

@@item a branch has an owner
The owner can set further policy for a branch, but may not change the
ground rules.  In particular, they can set a policy for commits (be it
adding more reviewers or deciding who can commit).

@@item all commits are posted
All changes committed to a branch shall also be posted to
@@email{gdb-patches@@@@sourceware.org, the @@value{GDBN} patches
mailing list}.  While commentary on such changes are encouraged, people
should remember that the changes only apply to a branch.

@@item all commits are covered by an assignment
This ensures that all changes belong to the Free Software Foundation,
and avoids the possibility that the branch may become contaminated.

@@item a branch is focused
A focused branch has a single objective or goal, and does not contain
unnecessary or irrelevant changes.  Cleanups, where identified, being
be pushed into the mainline as soon as possible.

@@item a branch tracks mainline
This keeps the level of divergence under control.  It also keeps the
pressure on developers to push cleanups and other stuff into the
mainline.

@@item a branch shall contain the entire @@value{GDBN} module
The @@value{GDBN} module @@code{gdb} should be specified when creating a
branch (branches of individual files should be avoided).  @@xref{Tags}.

@@item a branch shall be branded using @@file{version.in}
The file @@file{gdb/version.in} shall be modified so that it identifies
the branch @@var{owner} and branch @@var{name}, e.g.,
@@samp{6.2.50.20030303_owner_name} or @@samp{6.2 (Owner Name)}.

@@end table

@@subsection Tags
@@anchor{Tags}

To simplify the identification of @@value{GDBN} branches, the following
branch tagging convention is strongly recommended:

@@table @@code

@@item @@var{owner}_@@var{name}-@@var{YYYYMMDD}-branchpoint
@@itemx @@var{owner}_@@var{name}-@@var{YYYYMMDD}-branch
The branch point and corresponding branch tag.  @@var{YYYYMMDD} is the
date that the branch was created.  A branch is created using the
sequence: @@anchor{experimental branch tags}
@@smallexample
cvs rtag @@var{owner}_@@var{name}-@@var{YYYYMMDD}-branchpoint gdb
cvs rtag -b -r @@var{owner}_@@var{name}-@@var{YYYYMMDD}-branchpoint \
   @@var{owner}_@@var{name}-@@var{YYYYMMDD}-branch gdb
@@end smallexample

@@item @@var{owner}_@@var{name}-@@var{yyyymmdd}-mergepoint
The tagged point, on the mainline, that was used when merging the branch
on @@var{yyyymmdd}.  To merge in all changes since the branch was cut,
use a command sequence like:
@@smallexample
cvs rtag @@var{owner}_@@var{name}-@@var{yyyymmdd}-mergepoint gdb
cvs update \
   -j@@var{owner}_@@var{name}-@@var{YYYYMMDD}-branchpoint
   -j@@var{owner}_@@var{name}-@@var{yyyymmdd}-mergepoint
@@end smallexample
@@noindent
Similar sequences can be used to just merge in changes since the last
merge.

@@end table

@@noindent
For further information on @@sc{cvs}, see
@@uref{http://www.gnu.org/software/cvs/, Concurrent Versions System}.
 
@@node Start of New Year Procedure
@@chapter Start of New Year Procedure
@@cindex new year procedure

At the start of each new year, the following actions should be performed:

@@itemize @@bullet
@@item
Rotate the ChangeLog file

The current @@file{ChangeLog} file should be renamed into
@@file{ChangeLog-YYYY} where YYYY is the year that has just passed.
A new @@file{ChangeLog} file should be created, and its contents should
contain a reference to the previous ChangeLog.  The following should
also be preserved at the end of the new ChangeLog, in order to provide
the appropriate settings when editing this file with Emacs:
@@smallexample
Local Variables:
mode: change-log
left-margin: 8
fill-column: 74
version-control: never
coding: utf-8
End:
@@end smallexample

@@item
Add an entry for the newly created ChangeLog file (@@file{ChangeLog-YYYY})
in @@file{gdb/config/djgpp/fnchange.lst}.

@@item
Update the copyright year in the startup message

Update the copyright year in:
@@itemize @@bullet
  @@item
  file @@file{top.c}, function @@code{print_gdb_version}
  @@item
  file @@file{gdbserver/server.c}, function @@code{gdbserver_version}
  @@item
  file @@file{gdbserver/gdbreplay.c}, function @@code{gdbreplay_version}
@@end itemize

@@item
Run the @@file{copyright.py} Python script to add the new year in the copyright
notices of most source files.  This script has been tested with Python
2.6 and 2.7.

@@end itemize

@@node Releasing GDB

@@chapter Releasing @@value{GDBN}
@@cindex making a new release of gdb

@@section Branch Commit Policy

The branch commit policy is pretty slack.  @@value{GDBN} releases 5.0,
5.1 and 5.2 all used the below:

@@itemize @@bullet
@@item
The @@file{gdb/MAINTAINERS} file still holds.
@@item
Don't fix something on the branch unless/until it is also fixed in the
trunk.  If this isn't possible, mentioning it in the @@file{gdb/PROBLEMS}
file is better than committing a hack.
@@item
When considering a patch for the branch, suggested criteria include:
Does it fix a build?  Does it fix the sequence @@kbd{break main; run}
when debugging a static binary?
@@item
The further a change is from the core of @@value{GDBN}, the less likely
the change will worry anyone (e.g., target specific code).
@@item
Only post a proposal to change the core of @@value{GDBN} after you've
sent individual bribes to all the people listed in the
@@file{MAINTAINERS} file @@t{;-)}
@@end itemize

@@emph{Pragmatics: Provided updates are restricted to non-core
functionality there is little chance that a broken change will be fatal.
This means that changes such as adding a new architectures or (within
reason) support for a new host are considered acceptable.}


@@section Obsoleting code

Before anything else, poke the other developers (and around the source
code) to see if there is anything that can be removed from @@value{GDBN}
(an old target, an unused file).

Obsolete code is identified by adding an @@code{OBSOLETE} prefix to every
line.  Doing this means that it is easy to identify something that has
been obsoleted when greping through the sources.

The process is done in stages --- this is mainly to ensure that the
wider @@value{GDBN} community has a reasonable opportunity to respond.
Remember, everything on the Internet takes a week.

@@enumerate
@@item
Post the proposal on @@email{gdb@@@@sourceware.org, the GDB mailing
list} Creating a bug report to track the task's state, is also highly
recommended.
@@item
Wait a week or so.
@@item
Post the proposal on @@email{gdb-announce@@@@sourceware.org, the GDB
Announcement mailing list}.
@@item
Wait a week or so.
@@item
Go through and edit all relevant files and lines so that they are
prefixed with the word @@code{OBSOLETE}.
@@item
Wait until the next GDB version, containing this obsolete code, has been
released.
@@item
Remove the obsolete code.
@@end enumerate

@@noindent
@@emph{Maintainer note: While removing old code is regrettable it is
hopefully better for @@value{GDBN}'s long term development.  Firstly it
helps the developers by removing code that is either no longer relevant
or simply wrong.  Secondly since it removes any history associated with
the file (effectively clearing the slate) the developer has a much freer
hand when it comes to fixing broken files.}



@@section Before the Branch

The most important objective at this stage is to find and fix simple
changes that become a pain to track once the branch is created.  For
instance, configuration problems that stop @@value{GDBN} from even
building.  If you can't get the problem fixed, document it in the
@@file{gdb/PROBLEMS} file.

@@subheading Prompt for @@file{gdb/NEWS}

People always forget.  Send a post reminding them but also if you know
something interesting happened add it yourself.  The @@code{schedule}
script will mention this in its e-mail.

@@subheading Review @@file{gdb/README}

Grab one of the nightly snapshots and then walk through the
@@file{gdb/README} looking for anything that can be improved.  The
@@code{schedule} script will mention this in its e-mail.

@@subheading Refresh any imported files.

A number of files are taken from external repositories.  They include:

@@itemize @@bullet
@@item
@@file{texinfo/texinfo.tex}
@@item
@@file{config.guess} et.@@: al.@@: (see the top-level @@file{MAINTAINERS}
file)
@@item
@@file{etc/standards.texi}, @@file{etc/make-stds.texi}
@@end itemize

@@subheading Check the ARI

@@uref{http://sourceware.org/gdb/ari,,A.R.I.} is an @@code{awk} script
(Awk Regression Index ;-) that checks for a number of errors and coding
conventions.  The checks include things like using @@code{malloc} instead
of @@code{xmalloc} and file naming problems.  There shouldn't be any
regressions.

@@subsection Review the bug data base

Close anything obviously fixed.

@@subsection Check all cross targets build

The targets are listed in @@file{gdb/MAINTAINERS}.


@@section Cut the Branch

@@subheading Create the branch

@@smallexample
$  u=5.1
$  v=5.2
$  V=`echo $v | sed 's/\./_/g'`
$  D=`date -u +%Y-%m-%d`
$  echo $u $V $D
5.1 5_2 2002-03-03
$  echo cvs -f -d :ext:sourceware.org:/cvs/src rtag \
-D $D-gmt gdb_$V-$D-branchpoint insight
cvs -f -d :ext:sourceware.org:/cvs/src rtag
-D 2002-03-03-gmt gdb_5_2-2002-03-03-branchpoint insight
$  ^echo ^^
...
$  echo cvs -f -d :ext:sourceware.org:/cvs/src rtag \
-b -r gdb_$V-$D-branchpoint gdb_$V-branch insight
cvs -f -d :ext:sourceware.org:/cvs/src rtag \
-b -r gdb_5_2-2002-03-03-branchpoint gdb_5_2-branch insight
$  ^echo ^^
...
$
@@end smallexample

@@itemize @@bullet
@@item
By using @@kbd{-D YYYY-MM-DD-gmt}, the branch is forced to an exact
date/time.
@@item
The trunk is first tagged so that the branch point can easily be found.
@@item
Insight, which includes @@value{GDBN}, is tagged at the same time.
@@item
@@file{version.in} gets bumped to avoid version number conflicts.
@@item
The reading of @@file{.cvsrc} is disabled using @@file{-f}.
@@end itemize

@@subheading Update @@file{version.in}

@@smallexample
$  u=5.1
$  v=5.2
$  V=`echo $v | sed 's/\./_/g'`
$  echo $u $v$V
5.1 5_2
$  cd /tmp
$  echo cvs -f -d :ext:sourceware.org:/cvs/src co \
-r gdb_$V-branch src/gdb/version.in
cvs -f -d :ext:sourceware.org:/cvs/src co
 -r gdb_5_2-branch src/gdb/version.in
$  ^echo ^^
U src/gdb/version.in
$  cd src/gdb
$  echo $u.90-DATE-cvs > version.in
$  cat version.in
5.1.90-DATE-cvs
$  cvs -f commit version.in
@@end smallexample

@@itemize @@bullet
@@item
The string @@samp{DATE} is used to substitute the checkout date at
build time; the date comes from @@file{bfd/version.h}.
@@item
@@file{.90} and the previous branch version are used as fairly arbitrary
initial branch version number.
@@end itemize


@@subheading Update the web and news pages

Something?

@@subheading Tweak cron to track the new branch

The file @@file{gdbadmin/cron/crontab} contains gdbadmin's cron table.
This file needs to be updated so that:

@@itemize @@bullet
@@item
A daily timestamp is added to the file @@file{bfd/version.h}.
@@item
The new branch is included in the snapshot process.
@@end itemize

@@noindent
See the file @@file{gdbadmin/cron/README} for how to install the updated
cron table.

The file @@file{gdbadmin/ss/README} should also be reviewed to reflect
any changes.  That file is copied to both the branch/ and current/
snapshot directories.


@@subheading Update the NEWS and README files

The @@file{NEWS} file needs to be updated so that on the branch it refers
to @@emph{changes in the current release} while on the trunk it also
refers to @@emph{changes since the current release}.

The @@file{README} file needs to be updated so that it refers to the
current release.

@@subheading Post the branch info

Send an announcement to the mailing lists:

@@itemize @@bullet
@@item
@@email{gdb-announce@@@@sourceware.org, GDB Announcement mailing list}
@@item
@@email{gdb@@@@sourceware.org, GDB Discussion mailing list} and
@@email{gdb-testers@@@@sourceware.org, GDB Testers mailing list}
@@end itemize

@@emph{Pragmatics: The branch creation is sent to the announce list to
ensure that people people not subscribed to the higher volume discussion
list are alerted.}

The announcement should include:

@@itemize @@bullet
@@item
The branch tag.
@@item
How to check out the branch using CVS.
@@item
The date/number of weeks until the release.
@@item
The branch commit policy still holds.
@@end itemize

@@section Stabilize the branch

Something goes here.

@@section Create a Release

The process of creating and then making available a release is broken
down into a number of stages.  The first part addresses the technical
process of creating a releasable tar ball.  The later stages address the
process of releasing that tar ball.

When making a release candidate just the first section is needed.

@@subsection Create a release candidate

The objective at this stage is to create a set of tar balls that can be
made available as a formal release (or as a less formal release
candidate).

@@subsubheading Freeze the branch

Send out an e-mail notifying everyone that the branch is frozen to
@@email{gdb-patches@@@@sourceware.org}.

@@subsubheading Establish a few defaults.

@@smallexample
$  b=gdb_5_2-branch
$  v=5.2
$  t=/sourceware/snapshot-tmp/gdbadmin-tmp
$  echo $t/$b/$v
/sourceware/snapshot-tmp/gdbadmin-tmp/gdb_5_2-branch/5.2
$  mkdir -p $t/$b/$v
$  cd $t/$b/$v
$  pwd
/sourceware/snapshot-tmp/gdbadmin-tmp/gdb_5_2-branch/5.2
$  which autoconf
/home/gdbadmin/bin/autoconf
$
@@end smallexample

@@noindent
Notes:

@@itemize @@bullet
@@item
Check the @@code{autoconf} version carefully.  You want to be using the
version documented in the toplevel @@file{README-maintainer-mode} file.
It is very unlikely that the version of @@code{autoconf} installed in
system directories (e.g., @@file{/usr/bin/autoconf}) is correct.
@@end itemize

@@subsubheading Check out the relevant modules:

@@smallexample
$  for m in gdb insight
do
( mkdir -p $m && cd $m && cvs -q -f -d /cvs/src co -P -r $b $m )
done
$
@@end smallexample

@@noindent
Note:

@@itemize @@bullet
@@item
The reading of @@file{.cvsrc} is disabled (@@file{-f}) so that there isn't
any confusion between what is written here and what your local
@@code{cvs} really does.
@@end itemize

@@subsubheading Update relevant files.

@@table @@file

@@item gdb/NEWS

Major releases get their comments added as part of the mainline.  Minor
releases should probably mention any significant bugs that were fixed.

Don't forget to include the @@file{ChangeLog} entry.

@@smallexample
$  emacs gdb/src/gdb/NEWS
...
c-x 4 a
...
c-x c-s c-x c-c
$  cp gdb/src/gdb/NEWS insight/src/gdb/NEWS 
$  cp gdb/src/gdb/ChangeLog insight/src/gdb/ChangeLog 
@@end smallexample

@@item gdb/README

You'll need to update:

@@itemize @@bullet
@@item
The version.
@@item
The update date.
@@item
Who did it.
@@end itemize

@@smallexample
$  emacs gdb/src/gdb/README
...
c-x 4 a
...
c-x c-s c-x c-c
$  cp gdb/src/gdb/README insight/src/gdb/README 
$  cp gdb/src/gdb/ChangeLog insight/src/gdb/ChangeLog 
@@end smallexample

@@emph{Maintainer note: Hopefully the @@file{README} file was reviewed
before the initial branch was cut so just a simple substitute is needed
to get it updated.}

@@emph{Maintainer note: Other projects generate @@file{README} and
@@file{INSTALL} from the core documentation.  This might be worth
pursuing.}

@@item gdb/version.in

@@smallexample
$  echo $v > gdb/src/gdb/version.in
$  cat gdb/src/gdb/version.in
5.2
$  emacs gdb/src/gdb/version.in
...
c-x 4 a
... Bump to version ...
c-x c-s c-x c-c
$  cp gdb/src/gdb/version.in insight/src/gdb/version.in 
$  cp gdb/src/gdb/ChangeLog insight/src/gdb/ChangeLog 
@@end smallexample

@@end table

@@subsubheading Do the dirty work

This is identical to the process used to create the daily snapshot.

@@smallexample
$  for m in gdb insight
do
( cd $m/src && gmake -f src-release $m.tar )
done
@@end smallexample

If the top level source directory does not have @@file{src-release}
(@@value{GDBN} version 5.3.1 or earlier), try these commands instead:

@@smallexample
$  for m in gdb insight
do
( cd $m/src && gmake -f Makefile.in $m.tar )
done
@@end smallexample

@@subsubheading Check the source files

You're looking for files that have mysteriously disappeared.
@@kbd{distclean} has the habit of deleting files it shouldn't.

@@smallexample
$  ( cd gdb/src && cvs -f -q -n update )
M djunpack.bat
? gdb-5.1.91.tar
? proto-toplev
@@dots{} lots of generated files @@dots{}
M gdb/ChangeLog
M gdb/NEWS
M gdb/README
@@dots{} lots of generated files @@dots{}
$
@@end smallexample

@@noindent
@@emph{Don't worry about the @@file{gdb.info-??} or
@@file{gdb/p-exp.tab.c}.  They were generated (and yes @@file{gdb.info-1}
was also generated only something strange with CVS means that they
didn't get suppressed).  Fixing it would be nice though.}

@@subsubheading Create compressed versions of the release

@@smallexample
$  cp */src/*.tar .
$  cp */src/*.bz2 .
$  ls -F
gdb/ gdb-5.2.tar insight/ insight-5.2.tar
$  for m in gdb insight
do
bzip2 -v -9 -c $m-$v.tar > $m-$v.tar.bz2
gzip -v -9 -c $m-$v.tar > $m-$v.tar.gz
done
$
@@end smallexample

@@noindent
Note:

@@itemize @@bullet
@@item
A pipe such as @@kbd{bunzip2 < xxx.bz2 | gzip -9 > xxx.gz} is not since,
in that mode, @@code{gzip} does not know the name of the file and, hence,
can not include it in the compressed file.  This is also why the release
process runs @@code{tar} and @@code{bzip2} as separate passes.
@@end itemize

@@subsection Sanity check the tar ball

Pick a popular machine (Solaris/PPC?) and try the build on that.

@@smallexample
$  bunzip2 < gdb-5.2.tar.bz2 | tar xpf -
$  cd gdb-5.2
$  ./configure 
$  make
@@dots{}
$  ./gdb/gdb ./gdb/gdb
GNU gdb 5.2
@@dots{}
(gdb)  b main
Breakpoint 1 at 0x80732bc: file main.c, line 734.
(gdb)  run
Starting program: /tmp/gdb-5.2/gdb/gdb 

Breakpoint 1, main (argc=1, argv=0xbffff8b4) at main.c:734
734       catch_errors (captured_main, &args, "", RETURN_MASK_ALL);
(gdb)  print args
$1 = @@{argc = 136426532, argv = 0x821b7f0@@}
(gdb)
@@end smallexample

@@subsection Make a release candidate available

If this is a release candidate then the only remaining steps are:

@@enumerate
@@item
Commit @@file{version.in} and @@file{ChangeLog}
@@item
Tweak @@file{version.in} (and @@file{ChangeLog} to read
@@var{L}.@@var{M}.@@var{N}-DATE-cvs so that the version substitution
process can restart.
@@item
Make the release candidate available in
@@uref{ftp://sourceware.org/pub/gdb/snapshots/branch}
@@item
Notify the relevant mailing lists ( @@email{gdb@@@@sourceware.org} and
@@email{gdb-testers@@@@sourceware.org} that the candidate is available.
@@end enumerate

@@subsection Make a formal release available

(And you thought all that was required was to post an e-mail.)

@@subsubheading Install on sware

Copy the new files to both the release and the old release directory:

@@smallexample
$  cp *.bz2 *.gz ~ftp/pub/gdb/old-releases/
$  cp *.bz2 *.gz ~ftp/pub/gdb/releases
@@end smallexample

@@noindent
Clean up the releases directory so that only the most recent releases
are available (e.g.@@: keep 5.2 and 5.2.1 but remove 5.1):

@@smallexample
$  cd ~ftp/pub/gdb/releases
$  rm @@dots{}
@@end smallexample

@@noindent
Update the file @@file{README} and @@file{.message} in the releases
directory:

@@smallexample
$  vi README
@@dots{}
$  rm -f .message
$  ln README .message
@@end smallexample

@@subsubheading Update the web pages.

@@table @@file

@@item htdocs/download/ANNOUNCEMENT
This file, which is posted as the official announcement, includes:
@@itemize @@bullet
@@item
General announcement.
@@item
News.  If making an @@var{M}.@@var{N}.1 release, retain the news from
earlier @@var{M}.@@var{N} release.
@@item
Errata.
@@end itemize

@@item htdocs/index.html
@@itemx htdocs/news/index.html
@@itemx htdocs/download/index.html
These files include:
@@itemize @@bullet
@@item
Announcement of the most recent release.
@@item
News entry (remember to update both the top level and the news directory).
@@end itemize
These pages also need to be regenerate using @@code{index.sh}.

@@item download/onlinedocs/
You need to find the magic command that is used to generate the online
docs from the @@file{.tar.bz2}.  The best way is to look in the output
from one of the nightly @@code{cron} jobs and then just edit accordingly.
Something like:

@@smallexample
$  ~/ss/update-web-docs \
 ~ftp/pub/gdb/releases/gdb-5.2.tar.bz2 \
 $PWD/www \
 /www/sourceware/htdocs/gdb/download/onlinedocs \
 gdb
@@end smallexample

@@item download/ari/
Just like the online documentation.  Something like:

@@smallexample
$  /bin/sh ~/ss/update-web-ari \
 ~ftp/pub/gdb/releases/gdb-5.2.tar.bz2 \
 $PWD/www \
 /www/sourceware/htdocs/gdb/download/ari \
 gdb
@@end smallexample

@@end table

@@subsubheading Shadow the pages onto gnu

Something goes here.


@@subsubheading Install the @@value{GDBN} tar ball on GNU

At the time of writing, the GNU machine was @@kbd{gnudist.gnu.org} in
@@file{~ftp/gnu/gdb}.

@@subsubheading Make the @@file{ANNOUNCEMENT}

Post the @@file{ANNOUNCEMENT} file you created above to:

@@itemize @@bullet
@@item
@@email{gdb-announce@@@@sourceware.org, GDB Announcement mailing list}
@@item
@@email{info-gnu@@@@gnu.org, General GNU Announcement list} (but delay it a
day or so to let things get out)
@@item
@@email{bug-gdb@@@@gnu.org, GDB Bug Report mailing list}
@@end itemize

@@subsection Cleanup

The release is out but you're still not finished.

@@subsubheading Commit outstanding changes

In particular you'll need to commit any changes to:

@@itemize @@bullet
@@item
@@file{gdb/ChangeLog}
@@item
@@file{gdb/version.in}
@@item
@@file{gdb/NEWS}
@@item
@@file{gdb/README}
@@end itemize

@@subsubheading Tag the release

Something like:

@@smallexample
$  d=`date -u +%Y-%m-%d`
$  echo $d
2002-01-24
$  ( cd insight/src/gdb && cvs -f -q update )
$  ( cd insight/src && cvs -f -q tag gdb_5_2-$d-release )
@@end smallexample

Insight is used since that contains more of the release than
@@value{GDBN}.

@@subsubheading Mention the release on the trunk

Just put something in the @@file{ChangeLog} so that the trunk also
indicates when the release was made.

@@subsubheading Restart @@file{gdb/version.in}

If @@file{gdb/version.in} does not have the string @@samp{DATE} then
builds will not include the checkout date in their resulting version.
Having committed all the release changes it can be set to
@@file{5.2.0_DATE-cvs} which will restart things.

Don't forget the @@file{ChangeLog}.

@@subsubheading Merge into trunk

The files committed to the branch may also need changes merged into the
trunk.

@@subsubheading Revise the release schedule

Post a revised release schedule to @@email{gdb@@@@sourceware.org, GDB
Discussion List} with an updated announcement.  The schedule can be
generated by running:

@@smallexample
$  ~/ss/schedule `date +%s` schedule
@@end smallexample

@@noindent
The first parameter is approximate date/time in seconds (from the epoch)
of the most recent release.

Also update the schedule @@code{cronjob}.

@@section Post release

Remove any @@code{OBSOLETE} code.

@@node Testsuite

@@chapter Testsuite
@@cindex test suite

The testsuite is an important component of the @@value{GDBN} package.
While it is always worthwhile to encourage user testing, in practice
this is rarely sufficient; users typically use only a small subset of
the available commands, and it has proven all too common for a change
to cause a significant regression that went unnoticed for some time.

The @@value{GDBN} testsuite uses the DejaGNU testing framework.  The
tests themselves are calls to various @@code{Tcl} procs; the framework
runs all the procs and summarizes the passes and fails.

@@section Using the Testsuite

@@cindex running the test suite
To run the testsuite, simply go to the @@value{GDBN} object directory (or to the
testsuite's objdir) and type @@code{make check}.  This just sets up some
environment variables and invokes DejaGNU's @@code{runtest} script.  While
the testsuite is running, you'll get mentions of which test file is in use,
and a mention of any unexpected passes or fails.  When the testsuite is
finished, you'll get a summary that looks like this:

@@smallexample
                === gdb Summary ===

# of expected passes            6016
# of unexpected failures        58
# of unexpected successes       5
# of expected failures          183
# of unresolved testcases       3
# of untested testcases         5
@@end smallexample

To run a specific test script, type:
@@example
make check RUNTESTFLAGS='@@var{tests}'
@@end example
where @@var{tests} is a list of test script file names, separated by
spaces.

If you use GNU make, you can use its @@option{-j} option to run the
testsuite in parallel.  This can greatly reduce the amount of time it
takes for the testsuite to run.  In this case, if you set
@@code{RUNTESTFLAGS} then, by default, the tests will be run serially
even under @@option{-j}.  You can override this and force a parallel run
by setting the @@code{make} variable @@code{FORCE_PARALLEL} to any
non-empty value.  Note that the parallel @@kbd{make check} assumes
that you want to run the entire testsuite, so it is not compatible
with some dejagnu options, like @@option{--directory}.

The ideal test run consists of expected passes only; however, reality
conspires to keep us from this ideal.  Unexpected failures indicate
real problems, whether in @@value{GDBN} or in the testsuite.  Expected
failures are still failures, but ones which have been decided are too
hard to deal with at the time; for instance, a test case might work
everywhere except on AIX, and there is no prospect of the AIX case
being fixed in the near future.  Expected failures should not be added
lightly, since you may be masking serious bugs in @@value{GDBN}.
Unexpected successes are expected fails that are passing for some
reason, while unresolved and untested cases often indicate some minor
catastrophe, such as the compiler being unable to deal with a test
program.

When making any significant change to @@value{GDBN}, you should run the
testsuite before and after the change, to confirm that there are no
regressions.  Note that truly complete testing would require that you
run the testsuite with all supported configurations and a variety of
compilers; however this is more than really necessary.  In many cases
testing with a single configuration is sufficient.  Other useful
options are to test one big-endian (Sparc) and one little-endian (x86)
host, a cross config with a builtin simulator (powerpc-eabi,
mips-elf), or a 64-bit host (Alpha).

If you add new functionality to @@value{GDBN}, please consider adding
tests for it as well; this way future @@value{GDBN} hackers can detect
and fix their changes that break the functionality you added.
Similarly, if you fix a bug that was not previously reported as a test
failure, please add a test case for it.  Some cases are extremely
difficult to test, such as code that handles host OS failures or bugs
in particular versions of compilers, and it's OK not to try to write
tests for all of those.

DejaGNU supports separate build, host, and target machines.  However,
some @@value{GDBN} test scripts do not work if the build machine and
the host machine are not the same.  In such an environment, these scripts
will give a result of ``UNRESOLVED'', like this:

@@smallexample
UNRESOLVED: gdb.base/example.exp: This test script does not work on a remote host.
@@end smallexample

@@section Testsuite Parameters

Several variables exist to modify the behavior of the testsuite.

@@table @@code

@@item TRANSCRIPT

Sometimes it is convenient to get a transcript of the commands which
the testsuite sends to @@value{GDBN}.  For example, if @@value{GDBN}
crashes during testing, a transcript can be used to more easily
reconstruct the failure when running @@value{GDBN} under @@value{GDBN}.

You can instruct the @@value{GDBN} testsuite to write transcripts by
setting the DejaGNU variable @@code{TRANSCRIPT} (to any value)
before invoking @@code{runtest} or @@kbd{make check}.  The transcripts
will be written into DejaGNU's output directory.  One transcript will
be made for each invocation of @@value{GDBN}; they will be named
@@file{transcript.@@var{n}}, where @@var{n} is an integer.  The first
line of the transcript file will show how @@value{GDBN} was invoked;
each subsequent line is a command sent as input to @@value{GDBN}.

@@smallexample
make check RUNTESTFLAGS=TRANSCRIPT=y
@@end smallexample

Note that the transcript is not always complete.  In particular, tests
of completion can yield partial command lines.

@@item GDB

Sometimes one wishes to test a different @@value{GDBN} than the one in the build
directory.  For example, one may wish to run the testsuite on
@@file{/usr/bin/gdb}.

@@smallexample
make check RUNTESTFLAGS=GDB=/usr/bin/gdb
@@end smallexample

@@item GDBSERVER

When testing a different @@value{GDBN}, it is often useful to also test a
different gdbserver.

@@smallexample
make check RUNTESTFLAGS="GDB=/usr/bin/gdb GDBSERVER=/usr/bin/gdbserver"
@@end smallexample

@@item INTERNAL_GDBFLAGS

When running the testsuite normally one doesn't want whatever is in
@@file{~/.gdbinit} to interfere with the tests, therefore the test harness
passes @@option{-nx} to @@value{GDBN}.  One also doesn't want any windowed
version of @@value{GDBN}, e.g., @@samp{gdb -tui}, to run.
This is achieved via @@code{INTERNAL_GDBFLAGS}.  

@@smallexample
set INTERNAL_GDBFLAGS "-nw -nx"
@@end smallexample

This is all well and good, except when testing an installed @@value{GDBN}
that has been configured with @@option{--with-system-gdbinit}.  Here one
does not want @@file{~/.gdbinit} loaded but one may want the system
@@file{.gdbinit} file loaded.  This can be achieved by pointing @@code{$HOME}
at a directory without a @@file{.gdbinit} and by overriding
@@code{INTERNAL_GDBFLAGS} and removing @@option{-nx}.

@@smallexample
cd testsuite
HOME=`pwd` runtest \
  GDB=/usr/bin/gdb \
  GDBSERVER=/usr/bin/gdbserver \
  INTERNAL_GDBFLAGS=-nw
@@end smallexample

@@item GDB_PARALLEL

When testing natively (that is, not with a remote host), the
@@value{GDBN} test suite can be run in a fully parallel mode.  In this
mode, each @@file{.exp} file can be run separately.  The test suite
will ensure that all the temporary files created by the test suite do
not clash, by putting them into separate directories.  This mode is
primarily intended for use by the @@file{Makefile}.

To use this mode, set the @@code{GDB_PARALLEL} on the @@command{runtest}
command line.  Before starting the tests, you must ensure that the
directories @@file{cache}, @@file{outputs}, and @@file{temp} in the test
suite build directory are either empty or have been deleted.
@@file{cache} in particular is used to share data across invocations of
@@command{runtest}, and files there may affect the test results.  Note
that the @@file{Makefile} automatically does these deletions.

@@item GDB_INOTIFY

For debugging parallel mode, it is handy to be able to see when a test
case writes to a file outside of its designated output directory.

If you have the @@samp{inotify-tools} package installed, you can set
the @@code{GDB_INOTIFY} variable on the @@command{runtest} command line.
This will cause the test suite to watch for parallel-unsafe file
creations and report them, both on @@samp{stdout} and in the test suite
@@file{.log} file.

This setting is only meaningful in conjunction with
@@code{GDB_PARALLEL}.

@@end table

There are two ways to run the testsuite and pass additional parameters
to DejaGnu.  The first is with @@kbd{make check} and specifying the
makefile variable @@samp{RUNTESTFLAGS}.

@@smallexample
make check RUNTESTFLAGS=TRANSCRIPT=y
@@end smallexample

The second is to cd to the @@file{testsuite} directory and invoke the DejaGnu
@@command{runtest} command directly.

@@smallexample
cd testsuite
make site.exp
runtest TRANSCRIPT=y
@@end smallexample

@@section Testsuite Configuration
@@cindex Testsuite Configuration

It is possible to adjust the behavior of the testsuite by defining
the global variables listed below, either in a @@file{site.exp} file,
or in a board file.

@@itemize @@bullet

@@item @@code{gdb_test_timeout}

Defining this variable changes the default timeout duration used during
communication with @@value{GDBN}.  More specifically, the global variable
used during testing is @@code{timeout}, but this variable gets reset to
@@code{gdb_test_timeout} at the beginning of each testcase, making sure
that any local change to @@code{timeout} in a testcase does not affect
subsequent testcases.

This global variable comes in handy when the debugger is slower than
normal due to the testing environment, triggering unexpected @@code{TIMEOUT}
test failures.  Examples include when testing on a remote machine, or
against a system where communications are slow.

If not specifically defined, this variable gets automatically defined
to the same value as @@code{timeout} during the testsuite initialization.
The default value of the timeout is defined in the file
@@file{gdb/testsuite/config/unix.exp} that is part of the @@value{GDBN}
test suite@@footnote{If you are using a board file, it could override
the test-suite default; search the board file for "timeout".}.

@@end itemize

@@section Testsuite Organization

@@cindex test suite organization
The testsuite is entirely contained in @@file{gdb/testsuite}.  While the
testsuite includes some makefiles and configury, these are very minimal,
and used for little besides cleaning up, since the tests themselves
handle the compilation of the programs that @@value{GDBN} will run.  The file
@@file{testsuite/lib/gdb.exp} contains common utility procs useful for
all @@value{GDBN} tests, while the directory @@file{testsuite/config} contains
configuration-specific files, typically used for special-purpose
definitions of procs like @@code{gdb_load} and @@code{gdb_start}.

The tests themselves are to be found in @@file{testsuite/gdb.*} and
subdirectories of those.  The names of the test files must always end
with @@file{.exp}.  DejaGNU collects the test files by wildcarding
in the test directories, so both subdirectories and individual files
get chosen and run in alphabetical order.

The following table lists the main types of subdirectories and what they
are for.  Since DejaGNU finds test files no matter where they are
located, and since each test file sets up its own compilation and
execution environment, this organization is simply for convenience and
intelligibility.

@@table @@file
@@item gdb.base
This is the base testsuite.  The tests in it should apply to all
configurations of @@value{GDBN} (but generic native-only tests may live here).
The test programs should be in the subset of C that is valid K&R,
ANSI/ISO, and C@@t{++} (@@code{#ifdef}s are allowed if necessary, for instance
for prototypes).

@@item gdb.@@var{lang}
Language-specific tests for any language @@var{lang} besides C.  Examples are
@@file{gdb.cp} and @@file{gdb.java}.

@@item gdb.@@var{platform}
Non-portable tests.  The tests are specific to a specific configuration
(host or target), such as HP-UX or eCos.  Example is @@file{gdb.hp}, for
HP-UX.

@@item gdb.@@var{compiler}
Tests specific to a particular compiler.  As of this writing (June
1999), there aren't currently any groups of tests in this category that
couldn't just as sensibly be made platform-specific, but one could
imagine a @@file{gdb.gcc}, for tests of @@value{GDBN}'s handling of GCC
extensions.

@@item gdb.@@var{subsystem}
Tests that exercise a specific @@value{GDBN} subsystem in more depth.  For
instance, @@file{gdb.disasm} exercises various disassemblers, while
@@file{gdb.stabs} tests pathways through the stabs symbol reader.
@@end table

@@section Writing Tests
@@cindex writing tests

In many areas, the @@value{GDBN} tests are already quite comprehensive; you
should be able to copy existing tests to handle new cases.

You should try to use @@code{gdb_test} whenever possible, since it
includes cases to handle all the unexpected errors that might happen.
However, it doesn't cost anything to add new test procedures; for
instance, @@file{gdb.base/exprs.exp} defines a @@code{test_expr} that
calls @@code{gdb_test} multiple times.

Only use @@code{send_gdb} and @@code{gdb_expect} when absolutely
necessary.  Even if @@value{GDBN} has several valid responses to
a command, you can use @@code{gdb_test_multiple}.  Like @@code{gdb_test},
@@code{gdb_test_multiple} recognizes internal errors and unexpected
prompts.

Do not write tests which expect a literal tab character from @@value{GDBN}.
On some operating systems (e.g.@@: OpenBSD) the TTY layer expands tabs to
spaces, so by the time @@value{GDBN}'s output reaches expect the tab is gone.

The source language programs do @@emph{not} need to be in a consistent
style.  Since @@value{GDBN} is used to debug programs written in many different
styles, it's worth having a mix of styles in the testsuite; for
instance, some @@value{GDBN} bugs involving the display of source lines would
never manifest themselves if the programs used GNU coding style
uniformly.

Some testcase results need more detailed explanation:

@@table @@code
@@item KFAIL
Known problem of @@value{GDBN} itself.  You must specify the @@value{GDBN} bug
report number like in these sample tests:
@@smallexample
kfail "gdb/13392" "continue to marker 2"
@@end smallexample
or
@@smallexample
setup_kfail gdb/13392 "*-*-*"
kfail "continue to marker 2"
@@end smallexample

@@item XFAIL
Known problem of environment.  This typically includes @@value{NGCC} but it
includes also many other system components which cannot be fixed in the
@@value{GDBN} project.  Sample test with sanity check not knowing the specific
cause of the problem:
@@smallexample
# On x86_64 it is commonly about 4MB.
if @@{$stub_size > 25000000@@} @@{
    xfail "stub size $stub_size is too large"
    return
@@}
@@end smallexample

You should provide bug report number for the failing component of the
environment, if such bug report is available:
@@smallexample
if @@{[test_compiler_info @@{gcc-[0-3]-*@@}]
   || [test_compiler_info @@{gcc-4-[0-5]-*@@}]@@} @@{
   setup_xfail "gcc/46955" *-*-*
@@}
gdb_test "python print ttype.template_argument(2)" "&C::c"
@@end smallexample
@@end table

@@section Board settings
In @@value{GDBN} testsuite, the tests can be configured or customized in the board
file by means of @@dfn{Board Settings}.  Each setting   should be consulted by
test cases that depend on the corresponding feature.

Here are the supported board settings:

@@table @@code

@@item gdb,cannot_call_functions
The board does not support inferior call, that is, invoking inferior functions
in @@value{GDBN}.
@@item gdb,can_reverse
The board supports reverse execution.
@@item gdb,no_hardware_watchpoints
The board does not support hardware watchpoints.
@@item gdb,nofileio
@@value{GDBN} is unable to intercept target file operations in remote and perform
them on the host.
@@item gdb,noinferiorio
The board is unable to provide I/O capability to the inferior.
@@c @@item gdb,noresults
@@c NEED DOCUMENT.
@@item gdb,nosignals
The board does not support signals.
@@item gdb,skip_huge_test
Skip time-consuming tests on the board with slow connection.
@@item gdb,skip_float_tests
Skip tests related to float points on target board.
@@item gdb,use_precord
The board supports process record.
@@item gdb_server_prog
The location of GDBserver.  If GDBserver somewhere other than its default
location is used in test, specify the location of GDBserver in this variable.
The location is a file name of GDBserver that can be either absolute or
relative to testsuite subdirectory in build directory.
@@item in_proc_agent
The location of in-process agent.  If in-process agent other than its default
location is used in test, specify the location of in-process agent in
this variable.  The location is a file name of in-process agent that can be
either  absolute or relative to testsuite subdirectory in build directory.
@@item noargs
@@value{GDBN} does not support argument passing for inferior.
@@item no_long_long
The board does not support type @@code{long long}.
@@c @@item use_cygmon
@@c NEED DOCUMENT.
@@item use_gdb_stub
The tests are running with gdb stub.
@@item gdb,predefined_tsv
The predefined trace state variables the board has.

@@end table

@@node Hints

@@chapter Hints

Check the @@file{README} file, it often has useful information that does not
appear anywhere else in the directory.

@@menu
* Getting Started::		Getting started working on @@value{GDBN}
* Debugging GDB::		Debugging @@value{GDBN} with itself
@@end menu

@@node Getting Started

@@section Getting Started

@@value{GDBN} is a large and complicated program, and if you first starting to
work on it, it can be hard to know where to start.  Fortunately, if you
know how to go about it, there are ways to figure out what is going on.

This manual, the @@value{GDBN} Internals manual, has information which applies
generally to many parts of @@value{GDBN}.

Information about particular functions or data structures are located in
comments with those functions or data structures.  If you run across a
function or a global variable which does not have a comment correctly
explaining what is does, this can be thought of as a bug in @@value{GDBN}; feel
free to submit a bug report, with a suggested comment if you can figure
out what the comment should say.  If you find a comment which is
actually wrong, be especially sure to report that.

Comments explaining the function of macros defined in host, target, or
native dependent files can be in several places.  Sometimes they are
repeated every place the macro is defined.  Sometimes they are where the
macro is used.  Sometimes there is a header file which supplies a
default definition of the macro, and the comment is there.  This manual
also documents all the available macros.
@@c (@@pxref{Host Conditionals}, @@pxref{Target
@@c Conditionals}, @@pxref{Native Conditionals}, and @@pxref{Obsolete
@@c Conditionals})

Start with the header files.  Once you have some idea of how
@@value{GDBN}'s internal symbol tables are stored (see @@file{symtab.h},
@@file{gdbtypes.h}), you will find it much easier to understand the
code which uses and creates those symbol tables.

You may wish to process the information you are getting somehow, to
enhance your understanding of it.  Summarize it, translate it to another
language, add some (perhaps trivial or non-useful) feature to @@value{GDBN}, use
the code to predict what a test case would do and write the test case
and verify your prediction, etc.  If you are reading code and your eyes
are starting to glaze over, this is a sign you need to use a more active
approach.

Once you have a part of @@value{GDBN} to start with, you can find more
specifically the part you are looking for by stepping through each
function with the @@code{next} command.  Do not use @@code{step} or you
will quickly get distracted; when the function you are stepping through
calls another function try only to get a big-picture understanding
(perhaps using the comment at the beginning of the function being
called) of what it does.  This way you can identify which of the
functions being called by the function you are stepping through is the
one which you are interested in.  You may need to examine the data
structures generated at each stage, with reference to the comments in
the header files explaining what the data structures are supposed to
look like.

Of course, this same technique can be used if you are just reading the
code, rather than actually stepping through it.  The same general
principle applies---when the code you are looking at calls something
else, just try to understand generally what the code being called does,
rather than worrying about all its details.

@@cindex command implementation
A good place to start when tracking down some particular area is with
a command which invokes that feature.  Suppose you want to know how
single-stepping works.  As a @@value{GDBN} user, you know that the
@@code{step} command invokes single-stepping.  The command is invoked
via command tables (see @@file{command.h}); by convention the function
which actually performs the command is formed by taking the name of
the command and adding @@samp{_command}, or in the case of an
@@code{info} subcommand, @@samp{_info}.  For example, the @@code{step}
command invokes the @@code{step_command} function and the @@code{info
display} command invokes @@code{display_info}.  When this convention is
not followed, you might have to use @@code{grep} or @@kbd{M-x
tags-search} in emacs, or run @@value{GDBN} on itself and set a
breakpoint in @@code{execute_command}.

@@cindex @@code{bug-gdb} mailing list
If all of the above fail, it may be appropriate to ask for information
on @@code{bug-gdb}.  But @@emph{never} post a generic question like ``I was
wondering if anyone could give me some tips about understanding
@@value{GDBN}''---if we had some magic secret we would put it in this manual.
Suggestions for improving the manual are always welcome, of course.

@@node Debugging GDB

@@section Debugging @@value{GDBN} with itself
@@cindex debugging @@value{GDBN}

If @@value{GDBN} is limping on your machine, this is the preferred way to get it
fully functional.  Be warned that in some ancient Unix systems, like
Ultrix 4.2, a program can't be running in one process while it is being
debugged in another.  Rather than typing the command @@kbd{@@w{./gdb
./gdb}}, which works on Suns and such, you can copy @@file{gdb} to
@@file{gdb2} and then type @@kbd{@@w{./gdb ./gdb2}}.

When you run @@value{GDBN} in the @@value{GDBN} source directory, it will read
@@file{gdb-gdb.gdb} file (plus possibly @@file{gdb-gdb.py} file) that sets up
some simple things to make debugging gdb easier.  The @@code{info} command, when
executed without a subcommand in a @@value{GDBN} being debugged by gdb, will pop
you back up to the top level gdb.  See @@file{gdb-gdb.gdb} for details.

If you use emacs, you will probably want to do a @@code{make TAGS} after
you configure your distribution; this will put the machine dependent
routines for your local machine where they will be accessed first by
@@kbd{M-.}

Also, make sure that you've either compiled @@value{GDBN} with your local cc, or
have run @@code{fixincludes} if you are compiling with gcc.

@@section Submitting Patches

@@cindex submitting patches
Thanks for thinking of offering your changes back to the community of
@@value{GDBN} users.  In general we like to get well designed enhancements.
Thanks also for checking in advance about the best way to transfer the
changes.

The @@value{GDBN} maintainers will only install ``cleanly designed'' patches.
This manual summarizes what we believe to be clean design for @@value{GDBN}.

If the maintainers don't have time to put the patch in when it arrives,
or if there is any question about a patch, it goes into a large queue
with everyone else's patches and bug reports.

@@cindex legal papers for code contributions
The legal issue is that to incorporate substantial changes requires a
copyright assignment from you and/or your employer, granting ownership
of the changes to the Free Software Foundation.  You can get the
standard documents for doing this by sending mail to @@code{gnu@@@@gnu.org}
and asking for it.  We recommend that people write in "All programs
owned by the Free Software Foundation" as "NAME OF PROGRAM", so that
changes in many programs (not just @@value{GDBN}, but GAS, Emacs, GCC,
etc) can be
contributed with only one piece of legalese pushed through the
bureaucracy and filed with the FSF.  We can't start merging changes until
this paperwork is received by the FSF (their rules, which we follow
since we maintain it for them).

Technically, the easiest way to receive changes is to receive each
feature as a small context diff or unidiff, suitable for @@code{patch}.
Each message sent to me should include the changes to C code and
header files for a single feature, plus @@file{ChangeLog} entries for
each directory where files were modified, and diffs for any changes
needed to the manuals (@@file{gdb/doc/gdb.texinfo} or
@@file{gdb/doc/gdbint.texinfo}).  If there are a lot of changes for a
single feature, they can be split down into multiple messages.

In this way, if we read and like the feature, we can add it to the
sources with a single patch command, do some testing, and check it in.
If you leave out the @@file{ChangeLog}, we have to write one.  If you leave
out the doc, we have to puzzle out what needs documenting.  Etc., etc.

The reason to send each change in a separate message is that we will not
install some of the changes.  They'll be returned to you with questions
or comments.  If we're doing our job correctly, the message back to you
will say what you have to fix in order to make the change acceptable.
The reason to have separate messages for separate features is so that
the acceptable changes can be installed while one or more changes are
being reworked.  If multiple features are sent in a single message, we
tend to not put in the effort to sort out the acceptable changes from
the unacceptable, so none of the features get installed until all are
acceptable.

If this sounds painful or authoritarian, well, it is.  But we get a lot
of bug reports and a lot of patches, and many of them don't get
installed because we don't have the time to finish the job that the bug
reporter or the contributor could have done.  Patches that arrive
complete, working, and well designed, tend to get installed on the day
they arrive.  The others go into a queue and get installed as time
permits, which, since the maintainers have many demands to meet, may not
be for quite some time.

Please send patches directly to
@@email{gdb-patches@@@@sourceware.org, the @@value{GDBN} maintainers}.

@@section Build Script

@@cindex build script

The script @@file{gdb_buildall.sh} builds @@value{GDBN} with flag
@@option{--enable-targets=all} set.  This builds @@value{GDBN} with all supported
targets activated.  This helps testing @@value{GDBN} when doing changes that
affect more than one architecture and is much faster than using
@@file{gdb_mbuild.sh}.

After building @@value{GDBN} the script checks which architectures are
supported and then switches the current architecture to each of those to get
information about the architecture.  The test results are stored in log files
in the directory the script was called from.

@@include observer.texi

@@node GNU Free Documentation License
@@appendix GNU Free Documentation License
@@include fdl.texi

@@node Concept Index
@@unnumbered Concept Index

@@printindex cp

@@node Function and Variable Index
@@unnumbered Function and Variable Index

@@printindex fn

@@bye
@


1.355
log
@introduce parallel mode

This introduces parallel mode for the test suite.

It doesn't fully work yet in the sense that if you do a fully parallel
run, you will encounter some file-name clashes, but this has to start
somewhere, and it seemed best to add some infrastructure now, so that
you can follow along and test subsequent patches if you care to.

This patch has two parts.

First, it checks for the GDB_PARALLEL variable.  If this is set (say,
on the runtest command line), then the test suite assumes "parallel
mode".  In this mode, files are put into a subdirectory named after
the test.  That is, for DIR/TEST.exp, the outputs are put into
./outputs/DIR/TEST/.

This first part has various follow-on changes coming in subsequent
patches.  This is why the code in this patch also makes "temp" and
"cache" directories.

Second, this adds an "inotify" mode.  If you have the inotifywait
command (part of inotify-tools), you can set the GDB_INOTIFY variable.
This will tell the test suite to watch for changes outside of the
allowed output directories.

This mode is useful for debugging the test suite, as it issues a
report whenever a possibly parallel-unsafe file open is done.

2013-08-13  Tom Tromey  <tromey@@redhat.com>
	    Yao Qi  <yao@@codesourcery.com>

	* lib/cache.exp (gdb_do_cache): Handle GDB_PARALLEL.
	* lib/gdb.exp: Handle GDB_PARALLEL.
	(default_gdb_version): Kill inotify_pid if it exists.
	(default_gdb_exit): Emit warning if the inotify log is not
	empty.
	(standard_output_file): Respect GDB_PARALLEL.
	(standard_temp_file): Likewise.
	(gdb_init): Start inotifywait if requested.

	* gdbint.texinfo (Testsuite): Use @@table, not @@itemize.
	Document GDB_PARALLEL and GDB_INOTIFY.
@
text
@@


1.354
log
@move version.in from gdb/common back to gdb

This reverts part of the earlier version.in change.  It moves
version.in back to the gdb directory.  This works around the CVS bug
we've found.

gdb
	* Makefile.in (version.c): Use version.in, not
	common/version.in.
	* common/create-version.sh: Likewise.
	* common/version.in: Move...
	* version.in: ...here.
gdb/doc
	* Makefile.in (version.subst): Use version.in, not
	common/version.in.
	* gdbint.texinfo (Versions and Branches, Releasing GDB):
	Likewise.
gdb/gdbserver
	* Makefile.in (version.c): Use version.in, not
	common/version.in.
sim/common
	* Make-common.in (version.c): Use version.in, not
	common/version.in.
	* create-version.sh: Likewise.
sim/ppc:
	* Make-common.in (version.c): Use version.in, not
	common/version.in.
@
text
@d7735 1
a7735 1
@@itemize @@bullet
d7737 1
a7737 1
@@item @@code{TRANSCRIPT}
d7760 1
a7760 1
@@item @@code{GDB}
d7770 1
a7770 1
@@item @@code{GDBSERVER}
d7779 1
a7779 1
@@item @@code{INTERNAL_GDBFLAGS}
d7806 32
a7837 1
@@end itemize
@


1.353
log
@Move comment on the 'stepping over resolver' mechanism to the internals manual.

This whole comment is now a bit out of place.  I looked into moving it
to handle_inferior_event, close to where in_solib_dynsym_resolve_code
is used, but then there are 3 such places.  I then looked at
fragmenting it, pushing bits closer to the definitions of
in_solib_dynsym_resolve_code and gdbarch_skip_solib_resolver, but then
we'd lose the main advantage which is the overview.  In the end, I
realized this can fit nicely as internals manual material.

This could possibly be a subsection of a new "run control", or "source
stepping" or "stepping" or some such a bit more general section, but
we can do that when we have more related content...  Even the "single
stepping" section is presently empty...

gdb/doc/
2013-06-27  Pedro Alves  <palves@@redhat.com>

	* gdbint.texinfo (Algorithms) <Stepping over runtime loader
	dynamic symbol resolution code>: New section, based on infrun.c
	comment.

gdb/
2013-06-27  Pedro Alves  <palves@@redhat.com>

	* infrun.c: Remove comment describing the 'stepping over runtime
	loader dynamic symbol resolution code' mechanism; moved to
	gdbint.texinfo.
@
text
@d6680 1
a6680 1
@@file{gdb/common/version.in} and takes one of the following forms:
d6784 1
a6784 1
@@file{gdb/common/version.in} to include a vendor unique alphabetic identifier
d6833 1
a6833 1
The file @@file{gdb/common/version.in} shall be modified so that it identifies
d7111 1
a7111 1
-r gdb_$V-branch src/gdb/common/version.in
d7113 1
a7113 1
 -r gdb_5_2-branch src/gdb/common/version.in
d7115 1
a7115 1
U src/gdb/common/version.in
d7117 2
a7118 2
$  echo $u.90-DATE-cvs > common/version.in
$  cat common/version.in
d7120 1
a7120 1
$  cvs -f commit common/version.in
d7320 1
a7320 1
@@item gdb/common/version.in
d7323 2
a7324 2
$  echo $v > gdb/src/gdb/common/version.in
$  cat gdb/src/gdb/common/version.in
d7326 1
a7326 1
$  emacs gdb/src/gdb/common/version.in
d7331 1
a7331 1
$  cp gdb/src/gdb/common/version.in insight/src/gdb/common/version.in 
d7576 1
a7576 1
@@file{gdb/common/version.in}
d7603 1
a7603 1
@@subsubheading Restart @@file{gdb/common/version.in}
d7605 1
a7605 1
If @@file{gdb/common/version.in} does not have the string @@samp{DATE} then
@


1.352
log
@	* gdbint.texinfo (Versions and Branches): Use common/version.in.
	Update.
@
text
@d595 45
@


1.351
log
@Upload tsv earlier in remote_start_remote

In extended-remote, when GDB connects the target, but target is not
running, the TSVs are not uploaded.  When GDB attaches to a process,
the TSVs are not uploaded either.  However, GDBserver has some
builtin or predefined TSV to upload, such as $trace_timestamp.  This
bug causes $trace_timestamp is never uploaded.

gdb/

2013-06-25  Yao Qi  <yao@@codesourcery.com>

        * remote.c (remote_start_remote): Move code to upload tsv
        earlier.

gdb/testsuite/

2013-06-25  Yao Qi  <yao@@codesourcery.com>

	* boards/native-extended-gdbserver.exp: Set board_info
	'gdb,predefined_tsv'.
	* boards/native-gdbserver.exp: Likewise.
	* boards/native-stdio-gdbserver.exp: Likewise.
	* gdb.server/ext-attach.exp: Load trace-support.exp.  Check
	uploaded TSVs if target supports tracing.
	* gdb.trace/tsv.exp: Check uploaded TSVs if target supports
	tracing and target has predefined tsv.

gdb/doc/

2013-06-25  Yao Qi  <yao@@codesourcery.com>

	* gdbint.texinfo (Testsuite): Document 'gdb,predefined_tsv'.
@
text
@d6635 1
a6635 1
@@file{gdb/version.in} and takes one of the following forms:
d6641 7
a6647 7
@@item @@var{major}.@@var{minor}.@@var{patchlevel}.@@var{YYYY}@@var{MM}@@var{DD}
a snapshot taken at @@var{YYYY}-@@var{MM}-@@var{DD}-gmt (e.g.,
6.1.50.20020302, 6.1.90.20020304, or 6.1.0.20020308)
@@item @@var{major}.@@var{minor}.@@var{patchlevel}.@@var{YYYY}@@var{MM}@@var{DD}-cvs
a @@sc{cvs} check out drawn on @@var{YYYY}-@@var{MM}-@@var{DD} (e.g.,
6.1.50.20020302-cvs, 6.1.90.20020304-cvs, or 6.1.0.20020308-cvs)
@@item @@var{major}.@@var{minor}.@@var{patchlevel}.@@var{YYYY}@@var{MM}@@var{DD} (@@var{vendor})
d6649 1
a6649 1
@@var{major}.@@var{minor}.@@var{patchlevel}.@@var{YYYY}@@var{MM}@@var{DD},
d6739 1
a6739 1
@@file{gdb/version.in} to include a vendor unique alphabetic identifier
d6788 1
a6788 1
The file @@file{gdb/version.in} shall be modified so that it identifies
d7066 1
a7066 1
-r gdb_$V-branch src/gdb/version.in
d7068 1
a7068 1
 -r gdb_5_2-branch src/gdb/version.in
d7070 1
a7070 1
U src/gdb/version.in
d7072 4
a7075 4
$  echo $u.90-0000-00-00-cvs > version.in
$  cat version.in
5.1.90-0000-00-00-cvs
$  cvs -f commit version.in
d7080 2
a7081 2
@@file{0000-00-00} is used as a date to pump prime the version.in update
mechanism.
d7099 1
a7099 1
A daily timestamp is added to the file @@file{version.in}.
d7275 1
a7275 1
@@item gdb/version.in
d7278 2
a7279 2
$  echo $v > gdb/src/gdb/version.in
$  cat gdb/src/gdb/version.in
d7281 1
a7281 1
$  emacs gdb/src/gdb/version.in
d7286 1
a7286 1
$  cp gdb/src/gdb/version.in insight/src/gdb/version.in 
d7316 1
a7316 2
@@kbd{distclean} has the habit of deleting files it shouldn't.  Watch out
for the @@file{version.in} update @@kbd{cronjob}.
a7326 1
M gdb/version.in
d7397 1
a7397 1
@@var{L}.@@var{M}.@@var{N}-0000-00-00-cvs so that the version update
d7531 1
a7531 1
@@file{gdb/version.in}
d7558 1
a7558 1
@@subsubheading Restart @@file{gdb/version.in}
d7560 4
a7563 5
If @@file{gdb/version.in} does not contain an ISO date such as
@@kbd{2002-01-24} then the daily @@code{cronjob} won't update it.  Having
committed all the release changes it can be set to
@@file{5.2.0_0000-00-00-cvs} which will restart things (yes the @@kbd{_}
is important - it affects the snapshot process).
@


1.350
log
@[doco] Document the XML format used for AIX shared lib support.

gdb/doc/ChangeLog:

        * gdbint.texinfo (Native Debugging): Add "AIX Shared Library
        Support" subsection documenting the XML format used to transfer
        shared library info on AIX.
@
text
@d7986 3
@


1.349
log
@Reimplement shared library support on ppc-aix...

... using the target_so_ops framework.

gdb/ChangeLog:

        * target.h (TARGET_OBJECT_AIX_LIBRARIES): New target_object enum.
        * features/library-list-aix.dtd: New file.
        * solib-aix.h, solib-aix.c: New file.
        * rs6000-aix-tdep.c: #include "solib.h" and "solib-aix.h".
        (rs6000_find_toc_address_hook): Delete.
        (rs6000_push_dummy_call): Rewrite code setting the TOC value.
        (rs6000_aix_init_osabi): Register solib_aix_so_ops.
        * rs6000-nat.c: Remove "xcoffsolib.h" include.  Include
        "xml-utils.h".
        (map_vmap, vmap_exec, vmap_ldinfo, add_vmap, objfile_symbol_add)
        (vmap_symtab, fixup_breakpoints): Delete.
        (rs6000_xfer_shared_libraries): New function.
        (rs6000_xfer_partial): Add TARGET_OBJECT_AIX_LIBRARIES handling.
        (vmap_secs, bss_data_overlap, vmap_add_symbols): Delete.
        (xcoff_relocate_symtab, xcoff_relocate_core): Delete.
        (rs6000_ptrace_ldinfo, rs6000_core_ldinfo)
        (rs6000_xfer_shared_library): New function.
        (find_toc_address): Delete.
        (_initialize_rs6000_nat): Do not set rs6000_find_toc_address_hook.
        * rs6000-tdep.h (rs6000_find_toc_address_hook): Remove.
        * xcoffread.c (record_minimal_symbol): Reloate symbol address
        before creating minimal symbol.  Adjust function description
        accordingly.
        (scan_xcoff_symtab): Replace call to
        prim_record_minimal_symbol_and_info by call to
        record_minimal_symbol.
        (xcoff_symfile_offsets): Reimplement mostly as a wrapper
        around default_symfile_offsets.
        * configure.tgt: Add solib-aix.o to gdb_target_obs for
        powerpc-aix targets.
        * config/rs6000/nm-rs6000.h: Delete.
        * config/powerpc/aix.mh (NAT_FILE): Delete.
        (NATDEPFILES): Remove xcoffsolib.o.
        * Makefile.in (XMLFILES): Add library-list-aix.dtd.
        (ALL_TARGET_OBS): Add solib-aix.o.
        (HFILES_NO_SRCDIR): Remove xcoffsolib.h and
        config/rs6000/nm-rs6000.h.  Add solib-aix.h.
        (ALLDEPFILES): Add solib-aix.c.  Remove xcoffsolib.c.
        * xcoffsolib.h, xcoffsolib.c: Delete.

        * solib.c (reload_shared_libraries): Remove reference to
        SOLIB_CREATE_INFERIOR_HOOK.
        * breakpoint.c (handle_solib_event): Remove reference to SOLIB_ADD.
        (disable_breakpoints_in_shlibs): Remove reference to PC_SOLIB.
        (momentary_bkpt_re_set): Replace SOLIB_ADD by solib_add in
        comment.
        * corelow.c (deprecated_core_resize_section_table): Delete.
        * exec.c: Remove include of xcoffsolib.h".
        (map_vmap, vmap): Delete.
        (exec_close_1): Remove references to vmap.
        (exec_file_attach): Remove vmap handling code, and reference
        to DEPRECATED_IBM6000_TARGET.
        (bfdsec_to_vmap): Delete.
        (exec_files_info): Remove block of code handling VMAP.
        * infcmd.c (post_create_inferior): Remove reference to
        SOLIB_CREATE_INFERIOR_HOOK and SOLIB_ADD.
        * infrun.c (follow_exec): Remove reference to
        SOLIB_CREATE_INFERIOR_HOOK.
        * stack.c (print_frame): Remove reference to PC_SOLIB.
        * solib-dsbt.c (dsbt_current_sos): Adjust comment.
        (dsbt_relocate_main_executable): Likewise.
        * solib-frv.c (frv_current_sos): Likewise.

gdb/doc/ChangeLog:

        * gdbint.texinfo (Algorithms): Remove entries documenting
        DEPRECATED_IBM6000_TARGET, SOLIB_ADD, and
        SOLIB_CREATE_INFERIOR_HOOK.
@
text
@d5394 71
@


1.348
log
@s/signness/signedness in gdbint.texinfo.

"signedness" is more typical.

gdb/doc/
2013-04-19  Pedro Alves  <palves@@redhat.com>

	* gdbint.texinfo (Misc Guidelines) <Compiler Warnings>: Write
	"signedness" instead of "signness".
@
text
@a4668 7
@@item DEPRECATED_IBM6000_TARGET
@@findex DEPRECATED_IBM6000_TARGET
Shows that we are configured for an IBM RS/6000 system.  This
conditional should be eliminated (FIXME) and replaced by
feature-specific macros.  It was introduced in haste and we are
repenting at leisure.

a5407 12
@@item SOLIB_ADD (@@var{filename}, @@var{from_tty}, @@var{targ}, @@var{readsyms})
@@findex SOLIB_ADD
Define this to expand into an expression that will cause the symbols in
@@var{filename} to be added to @@value{GDBN}'s symbol table.  If
@@var{readsyms} is zero symbols are not read but any necessary low level
processing for @@var{filename} is still done.

@@item SOLIB_CREATE_INFERIOR_HOOK
@@findex SOLIB_CREATE_INFERIOR_HOOK
Define this to expand into any shared-library-relocation code that you
want to be run just after the child process has been forked.

@


1.347
log
@Enable -Wpointer-sign by default.

This enables -Wpointer-sign by default.

I've checked that --enable-targets=all builds fine with the following
as --host, on x86_64 Fedora 17 --build:

x86_64 GNU/Linux
i386 GNU/Linux
i386 MinGW-w64
i386 msdos/djgpp

OK?

gdb/
2013-04-19  Pedro Alves  <palves@@redhat.com>

	* configure.ac (build_warnings): Replace -Wno-pointer-sign with
	-Wpointer-sign.
	* configure: Regenerate.

gdb/doc
2013-04-19  Pedro Alves  <palves@@redhat.com>

	* gdbint.texinfo (Misc Guidelines) <Compiler Warnings>: Replace
	-Wno-pointer-sign text with text on -Wpointer-sign.
@
text
@d6345 1
a6345 1
whose signness is host-dependent.  @@sc{gcc} enables this with
@


1.346
log
@Update years in copyright notice for the GDB files.

Two modifications:
  1. The addition of 2013 to the copyright year range for every file;
  2. The use of a single year range, instead of potentially multiple
     year ranges, as approved by the FSF.
@
text
@d6342 6
a6347 7
@@item -Wno-pointer-sign
In version 4.0, GCC began warning about pointer argument passing or
assignment even when the source and destination differed only in
signedness.  However, most @@value{GDBN} code doesn't distinguish
carefully between @@code{char} and @@code{unsigned char}.  In early 2006
the @@value{GDBN} developers decided correcting these warnings wasn't
worth the time it would take.
@


1.345
log
@        * gdbint.texinfo (Function prototypes): Require use of "extern"
        modifier for function prototypes in headers.
@
text
@d12 1
a12 2
Copyright @@copyright{} 1990-1994, 1996, 1998-2006, 2008-2012 Free
Software Foundation, Inc.
@


1.344
log
@gdb/
	Code cleanup.
	* skip.c (skip_function_command, skip_file_command, skip_info): Remove
	unused forward declarations.
	(skip_file_command): Make variables symtab and filename targets const.
	Use proper 0 vs. NULL constant everywhere.
	(skip_function_command): Use proper 0 vs. NULL constant everywhere.
	Include empty line after declarations.  Use GNU spacing in a comment.
	Do not use strlen for end of string check.
	(skip_info): Use proper 0 vs. NULL constant everywhere.  Add column 5
	comments.
	(skip_enable_command, skip_disable_command, skip_delete_command)
	(add_skiplist_entry): Use proper 0 vs. NULL constant everywhere.
	(function_pc_is_marked_for_skip): Make variable filename target const.
	Use proper 0 vs. NULL constant everywhere.  Fix GNU non-compliant
	comment formatting.
	(skip_re_set): Add empty line after function comment.  Use proper 0 vs.
	NULL constant everywhere.  Include empty line after declarations.  Make
	variable symtab target const.  Do not use strlen for end of string
	check.

gdb/doc/
	* gdbint.texinfo (Coding Standards) (C Usage): New rule for 0 vs. NULL.
@
text
@d5938 2
a5939 1
callers include, except for @@code{_initialize_*} functions, which must
@


1.343
log
@gdb/
	* configure.ac (CC_HAS_LONG_LONG): Replace by AC_MSG_ERROR.
	* defs.h (LONGEST, ULONGEST): Remove conditionalization for
	CC_HAS_LONG_LONG.
	* dwarf2-frame.c (DW64_CIE_ID): Likewise.
	* dwarf2read.c (extract_cu_value): Remove the function.
	(create_cus_from_index_list): Make the return type void, inline the
	extract_cu_value caller, include new gdb_static_assert.
	(create_cus_from_index): Make the return type void, update the function
	comment, update the create_cus_from_index_list caller.
	(create_signatured_type_table_from_index): Make the return type void,
	inline the extract_cu_value caller, include new gdb_static_assert.
	(dwarf2_read_index): Update the create_cus_from_index and
	create_signatured_type_table_from_index caller.
	* printcmd.c (ui_printf): Remove conditionalizations for
	CC_HAS_LONG_LONG.
	* config.in: Regenerate.
	* configure: Regenerate.

gdb/doc/
	* gdbint.texinfo (Host Definition): Remove CC_HAS_LONG_LONG.
@
text
@d5910 19
@


1.342
log
@gdb/doc/
	* gdbint.texinfo (Defining Other Architecture Features): Clarify *pcptr
	encoding for gdbarch_breakpoint_from_pc, bp_addr for
	gdbarch_push_dummy_call and bp_addr for gdbarch_push_dummy_code.
@
text
@a2763 5
@@item CC_HAS_LONG_LONG
@@cindex @@code{long long} data type
Define this if the host C compiler supports @@code{long long}.  This is set
by the @@code{configure} script.

@


1.341
log
@	* event-top.c (sigwinch_token, handle_sigwinch): Remove.
	(async_init_signals): Update.
	* utils.c (init_page_info): Don't use SIGWINCH_HANDLER.
	(SIGWINCH_HANDLER_BODY): Remove.
gdb/doc
	* gdbint.texinfo (Host Definition): Remove documentation for
	SIGWINCH_HANDLER and SIGWINCH_HANDLER_BODY.
@
text
@d4535 5
a4539 2
breakpoint should be inserted.  May return @@code{NULL} to indicate that
software breakpoints are not supported.
d4819 1
a4819 1
the return address (@@var{bp_addr}).
d4833 3
a4835 2
should be inserted, @@var{real_pc} to the resume address when starting
the call sequence, and return the updated inner-most stack address.
d4839 2
a4840 1
reserved for that breakpoint, and @@var{real_pc} set to @@var{funaddr}.
@


1.340
log
@gdb/doc/
	* gdbint.texinfo (Debugging GDB): In section
	'Debugging @@value{GDBN} with itself' change .gdbinit for gdb-gdb.gdb.
	Mention also gdb-gdb.py.
@
text
@a2741 8
@@item SIGWINCH_HANDLER
If your host defines @@code{SIGWINCH}, you can define this to be the name
of a function to be called if @@code{SIGWINCH} is received.

@@item SIGWINCH_HANDLER_BODY
Define this to expand into code that will define the function named by
the expansion of @@code{SIGWINCH_HANDLER}.

@


1.339
log
@Separate the indices in gdbint.texinfo into 2 nodes, to avoid file-name clashes.

    * gdbint.texinfo: Remove @@syncodeindex directives that put all the
    indices into a single node "Index".  Instead, join function and
    variable indices into a single index, separate from the concept
    index.  Requested in
    http://sourceware.org/ml/gdb-patches/2012-07/msg00146.html.
    (Top): Update the top-level menu: instead of one "Index" there are
    now separate entries "Concept Index" and "Function and Variable
    Index".
    (Concept Index, Function and Variable Index): New nodes.
    (Index): Node deleted.
@
text
@d8033 5
a8037 5
When you run @@value{GDBN} in the @@value{GDBN} source directory, it will read a
@@file{.gdbinit} file that sets up some simple things to make debugging
gdb easier.  The @@code{info} command, when executed without a subcommand
in a @@value{GDBN} being debugged by gdb, will pop you back up to the top level
gdb.  See @@file{.gdbinit} for details.
@


1.339.2.1
log
@gdb/doc/
	* gdbint.texinfo (Debugging GDB): In section
	'Debugging @@value{GDBN} with itself' change .gdbinit for gdb-gdb.gdb.
	Mention also gdb-gdb.py.
@
text
@d8033 5
a8037 5
When you run @@value{GDBN} in the @@value{GDBN} source directory, it will read
@@file{gdb-gdb.gdb} file (plus possibly @@file{gdb-gdb.py} file) that sets up
some simple things to make debugging gdb easier.  The @@code{info} command, when
executed without a subcommand in a @@value{GDBN} being debugged by gdb, will pop
you back up to the top level gdb.  See @@file{gdb-gdb.gdb} for details.
@


1.338
log
@Fix Texinfo usage issues.  From Patrice Dumas <pertusus@@free.fr>.

	* gdb.texinfo (Summary): Add a link to "Free Documentation".
	(Free Documentation): Add @@node line.
	(Continuing and Stepping) <advance location>: Use @@item instead of
	@@itemx.
	(Reverse Execution) <set exec-direction reverse>: Use @@item instead of
	@@itemx.
	(Embedded Processors): Put the link to "PA" to its correct place,
	according to document structure.
	(Python API): Put the link to "Lazy Strings In Python" to its
	correct place.
	(Index): Use @@@@ in @@tex block to get a literal @@.

	* gdbint.texinfo: Fix the @@subtitle line.

	* stabs.texinfo (Top): Put the link to "Symbol Types Index" to its
	correct place.
@
text
@d31 1
a31 3

@@syncodeindex fn cp
@@syncodeindex vr cp
d94 2
a95 1
* Index::
d8134 2
a8135 2
@@node Index
@@unnumbered Index
d8139 5
@


1.337
log
@gdb/doc
	* gdbint.texinfo (Testsuite): New section `Board settings'.
@
text
@d37 1
a37 1
@@subtitle{A guide to the internals of the GNU debugger}
@


1.336
log
@	* NEWS: Mention symbol-reloading has been deleted.
	* symfile.c (symbol_reloading): Delete.
	(show_symbol_reloading): Delete.
	(_initialize_symfile): Delete set/show symbol-reloading.

	doc/
	* gdb.texinfo (Help): Change apropos example to use "alias" instead
	of "reload".
	(Symbols): Delete docs for set/show symbol-reloading.
	* gdbint.texinfo (Defining Other Architecture Features): Delete
	SYMBOL_RELOADING_DEFAULT.
	* refcard.tex: Delete reference to symbol-reloading.

	testsuite/
	* gdb.base/default.exp: Delete tests for symbol-reloading.
	* gdb.base/help.exp: Ditto.
	* gdb.base/setshow.exp: Ditto.
	* gdb.base/gdb_history: Delete references to symbol-reloading.
@
text
@d7876 51
@


1.335
log
@gdb/doc/
	* gdbint.texinfo (Coding Standards): Require braces for two lines of
	code.
@
text
@a4918 5
@@item SYMBOL_RELOADING_DEFAULT
@@findex SYMBOL_RELOADING_DEFAULT
The default value of the ``symbol-reloading'' variable.  (Never defined in
current sources.)

@


1.334
log
@Document new procedure for updating copyright years

We now use a different script to perform the update.  This patch
updates the procedure in our documentation

gdb/doc/ChangeLog:

        * gdbint.texinfo (Start of New Year Procedure): Update
        to replace use of copyright.sh by use of copyright.py.
@
text
@d5852 20
@


1.333
log
@Copyright year update in most files of the GDB Project.

gdb/ChangeLog:

        Copyright year update in most files of the GDB Project.
@
text
@d6801 3
a6803 29
Run the @@file{copyright.sh} script to add the new year in the copyright
notices of most source files.  This script requires Emacs 22 or later to
be installed.

@@item
The new year also needs to be added manually in all other files that
are not already taken care of by the @@file{copyright.sh} script:
@@itemize @@bullet
  @@item
  @@file{*.s}
  @@item
  @@file{*.f}
  @@item
  @@file{*.f90}
  @@item
  @@file{*.igen}
  @@item
  @@file{*.ac}
  @@item
  @@file{*.texi}
  @@item
  @@file{*.texinfo}
  @@item
  @@file{*.tex}
  @@item
  @@file{*.defs}
  @@item
  @@file{*.1}
@@end itemize
@


1.332
log
@gdb/
	Remove the gdbtui binary.
	* .gitignore (/gdbtui): Remove.
	* Makefile.in (TUI): Remove.
	(SUBDIR_TUI_OBS): Remove tui-main.o.
	(SUBDIR_TUI_SRCS): Remove tui/tui-main.c.
	(all-tui, install-tui, uninstall-tui, $(TUI)$(EXEEXT), clean-tui)
	(tui-main.o): Remove.
	(all_object_files): Remove tui-main.o.
	* NEWS: New note for the gdbtui removal.
	* configure: Rebuilt.
	* configure.ac: No longer add all-tui, clean-tui, install-tui and
	uninstall-tui to CONFIG_ALL, CONFIG_CLEAN, CONFIG_INSTALL and
	CONFIG_UNINSTALL respectively.
	* gdb.c (main): Remove args.interpreter_p initialization.
	* main.c (captured_main): Set INTERPRETER_P directly by INTERP_CONSOLE.
	* main.h (struct captured_main_args): Remove interpreter_p.
	* tui/tui-main.c: Remove.

gdb/doc/
	Remove the gdbtui binary.
	* all-cfg.texi (GDBTUI): Remove.
	* gdb.texinfo (Mode Options): Remove the GDBTUI reference.
	(TUI): Remove GDBTUI pindex.  Remove the GDBTUI reference.
	* gdbint.texinfo (Testsuite): Replace `gdbtui' by `gdb -tui'.
@
text
@d12 2
a13 3
Copyright @@copyright{} 1990, 1991, 1992, 1993, 1994, 1996, 1998, 1999,
2000, 2001, 2002, 2003, 2004, 2005, 2006, 2008, 2009, 2010, 2011
Free Software Foundation, Inc.
@


1.331
log
@gdb/doc/
	* gdbint.texinfo (Testsuite): Describe KFAIL and XFAIL in Writing
	tests.

gdb/testsuite/
	* gdb.cp/ptype-cv-cp.exp (ptype v_volatile_const_my_int): Replace KFAIL
	by XFAIL.
	* gdb.cp/static-method.exp (info addr A::func())
	(list static-method.cc:xxx::(anonymous namespace)::A::func)
	(list 'static-method.cc:xxx::(anonymous namespace)::A::func')
	(list 'static-method.cc':'xxx::(anonymous namespace)::A::func')
	(list static-method.cc:'xxx::(anonymous namespace)::A::func'): Likewise.
	* gdb.cp/temargs.exp (test value of F in k2_m, test type of F in k3_m)
	(test value of F in k3_m): Likewise.
	* gdb.python/py-type.exp (python print ttype.template_argument(2)):
	Likewise.
@
text
@d7693 1
a7693 1
version of @@value{GDBN}, e.g., @@command{gdbtui}, to run.
@


1.330
log
@gdb
	* windows-tdep.c (windows_xfer_shared_library):
	* windows-nat.c (get_module_name, windows_make_so):
	* v850-tdep.c (v850_handle_pushm):
	* utils.c (null_cleanup, gdb_realpath):
	* ui-out.c (get_next_header):
	* tracepoint.c (clear_traceframe_info):
	* symtab.c (lookup_symtab):
	* serial.h (struct serial_ops):
	* mipsread.c (read_alphacoff_dynamic_symtab):
	* infcmd.c (print_return_value):
	* ia64-linux-tdep.c (ia64_linux_sigcontext_register_address):
	* f-exp.y (parse_number):
	* exceptions.c (catch_exceptions):
	* dummy-frame.c (dummy_frame_this_id):
	* defs.h (struct cleanup):
	* breakpoint.c (disable_breakpoints_in_unloaded_shlib):
	* arm-tdep.c (arm_push_dummy_call):
	* amd64-tdep.h (amd64_collect_xsave):
	* amd64-tdep.c (amd64_collect_xsave):
	* alpha-tdep.c (alpha_heuristic_frame_unwind_cache):
	* README (typing): Remove duplicate words.
	* cli/cli-decode.c (lookup_cmd_composition): Add comma.
	* infrun.c (siginfo_value_read): Fix typo.
	* solib-frv.c (frv_fdpic_find_global_pointer): Likewise.
	* top.c (source_line_number): Add comma.
gdb/doc
	* gdbint.texinfo (Register Information Functions): Remove
	duplicate "the".
	* gdb.texinfo (Emacs): Remove duplicate "to".
	(GDB/MI Variable Objects): Remove duplicate "the".
	(General Query Packets): Likewise.
gdb/testsuite
	* gdb.mi/mi-nsmoribund.exp:
	* gdb.hp/gdb.objdbg/objdbg01.exp:
	* gdb.base/structs.exp (test_struct_returns):
	* gdb.base/call-sc.exp (test_scalar_returns):
	* gdb.base/bigcore.exp: Remove duplicate words.
gdb/gdbserver
	* win32-low.c (handle_load_dll): Remove duplicate "the".
@
text
@d7849 39
@


1.330.2.1
log
@Copyright year update in most files of the GDB Project.

gdb/ChangeLog:

        Copyright year update in most files of the GDB Project.
@
text
@d12 3
a14 2
Copyright @@copyright{} 1990-1994, 1996, 1998-2006, 2008-2012 Free
Software Foundation, Inc.
@


1.329
log
@	* gdbint.texinfo (Formatting): Mention some formatting guidelines
	for casts and unary operators.
@
text
@d3610 1
a3610 1
with output to the the file specified by the User Interface
@


1.328
log
@Update the copyright year for most remaining files in GDB
@
text
@d5788 2
a5789 1
strictly.
d5832 21
@


1.327
log
@	* gdbint.texinfo (Misc Guidelines): Renamed from Coding.
	All references updated.  Correct sections marked as subsections.
	(Coding Standards): New chapter.  Move the coding standard related
	subsections here.  Add section on Python coding standards.
@
text
@d13 1
a13 1
2000, 2001, 2002, 2003, 2004, 2005, 2006, 2008, 2009, 2010
@


1.326
log
@2010-06-21  Stan Shebs  <stan@@codesourcery.com>

	* gdb.texinfo: Add explicit @@node and @@appendix for GFDL.
	* annotate.texinfo: Ditto.
	* gdbint.texinfo: Ditto.
	* stabs.texinfo: Ditto.
@
text
@d86 2
a87 1
* Coding::
d1326 3
a1328 3
(@@pxref{Coding, Cleanups}) to close the tuple.  It provides a convenient
and correct implementation of the non-portable@@footnote{The function
cast is not portable ISO C.} code sequence:
d1353 2
a1354 1
opens a list and then establishes cleanup (@@pxref{Coding, Cleanups})
d5761 1
a5761 1
@@node Coding
d5763 227
a5989 1
@@chapter Coding
d6226 1
a6226 22
@@section @@value{GDBN} Coding Standards
@@cindex coding standards

@@value{GDBN} follows the GNU coding standards, as described in
@@file{etc/standards.texi}.  This file is also available for anonymous
FTP from GNU archive sites.  @@value{GDBN} takes a strict interpretation
of the standard; in general, when the GNU standard recommends a practice
but does not require it, @@value{GDBN} requires it.

@@value{GDBN} follows an additional set of coding standards specific to
@@value{GDBN}, as described in the following sections.


@@subsection ISO C

@@value{GDBN} assumes an ISO/IEC 9899:1990 (a.k.a.@@: ISO C90) compliant
compiler.

@@value{GDBN} does not assume an ISO C or POSIX compliant C library.


@@subsection Memory Management
d6264 1
a6264 1
@@subsection Compiler Warnings
d6319 1
a6319 118
@@subsection Formatting

@@cindex source code formatting
The standard GNU recommendations for formatting must be followed
strictly.

A function declaration should not have its name in column zero.  A
function definition should have its name in column zero.

@@smallexample
/* Declaration */
static void foo (void);
/* Definition */
void
foo (void)
@@{
@@}
@@end smallexample

@@emph{Pragmatics: This simplifies scripting.  Function definitions can
be found using @@samp{^function-name}.}

There must be a space between a function or macro name and the opening
parenthesis of its argument list (except for macro definitions, as
required by C).  There must not be a space after an open paren/bracket
or before a close paren/bracket.

While additional whitespace is generally helpful for reading, do not use
more than one blank line to separate blocks, and avoid adding whitespace
after the end of a program line (as of 1/99, some 600 lines had
whitespace after the semicolon).  Excess whitespace causes difficulties
for @@code{diff} and @@code{patch} utilities.

Pointers are declared using the traditional K&R C style:

@@smallexample
void *foo;
@@end smallexample

@@noindent
and not:

@@smallexample
void * foo;
void* foo;
@@end smallexample

@@subsection Comments

@@cindex comment formatting
The standard GNU requirements on comments must be followed strictly.

Block comments must appear in the following form, with no @@code{/*}- or
@@code{*/}-only lines, and no leading @@code{*}:

@@smallexample
/* Wait for control to return from inferior to debugger.  If inferior
   gets a signal, we may decide to start it up again instead of
   returning.  That is why there is a loop in this function.  When
   this function actually returns it means the inferior should be left
   stopped and @@value{GDBN} should read more commands.  */
@@end smallexample

(Note that this format is encouraged by Emacs; tabbing for a multi-line
comment works correctly, and @@kbd{M-q} fills the block consistently.)

Put a blank line between the block comments preceding function or
variable definitions, and the definition itself.

In general, put function-body comments on lines by themselves, rather
than trying to fit them into the 20 characters left at the end of a
line, since either the comment or the code will inevitably get longer
than will fit, and then somebody will have to move it anyhow.

@@subsection C Usage

@@cindex C data types
Code must not depend on the sizes of C data types, the format of the
host's floating point numbers, the alignment of anything, or the order
of evaluation of expressions.

@@cindex function usage
Use functions freely.  There are only a handful of compute-bound areas
in @@value{GDBN} that might be affected by the overhead of a function
call, mainly in symbol reading.  Most of @@value{GDBN}'s performance is
limited by the target interface (whether serial line or system call).

However, use functions with moderation.  A thousand one-line functions
are just as hard to understand as a single thousand-line function.

@@emph{Macros are bad, M'kay.}
(But if you have to use a macro, make sure that the macro arguments are
protected with parentheses.)

@@cindex types

Declarations like @@samp{struct foo *} should be used in preference to
declarations like @@samp{typedef struct foo @@{ @@dots{} @@} *foo_ptr}.


@@subsection Function Prototypes
@@cindex function prototypes

Prototypes must be used when both @@emph{declaring} and @@emph{defining}
a function.  Prototypes for @@value{GDBN} functions must include both the
argument type and name, with the name matching that used in the actual
function definition.

All external functions should have a declaration in a header file that
callers include, except for @@code{_initialize_*} functions, which must
be external so that @@file{init.c} construction works, but shouldn't be
visible to random source files.

Where a source file needs a forward declaration of a static function,
that declaration must appear in a block near the top of the source file.


@@subsection Internal Error Recovery
d6338 1
a6338 1
@@subsection Command Names
d6342 1
a6342 66
@@subsection File Names

Any file used when building the core of @@value{GDBN} must be in lower
case.  Any file used when building the core of @@value{GDBN} must be 8.3
unique.  These requirements apply to both source and generated files.

@@emph{Pragmatics: The core of @@value{GDBN} must be buildable on many
platforms including DJGPP and MacOS/HFS.  Every time an unfriendly file
is introduced to the build process both @@file{Makefile.in} and
@@file{configure.in} need to be modified accordingly.  Compare the
convoluted conversion process needed to transform @@file{COPYING} into
@@file{copying.c} with the conversion needed to transform
@@file{version.in} into @@file{version.c}.}

Any file non 8.3 compliant file (that is not used when building the core
of @@value{GDBN}) must be added to @@file{gdb/config/djgpp/fnchange.lst}.

@@emph{Pragmatics: This is clearly a compromise.}

When @@value{GDBN} has a local version of a system header file (ex
@@file{string.h}) the file name based on the POSIX header prefixed with
@@file{gdb_} (@@file{gdb_string.h}).  These headers should be relatively
independent: they should use only macros defined by @@file{configure},
the compiler, or the host; they should include only system headers; they
should refer only to system types.  They may be shared between multiple
programs, e.g.@@: @@value{GDBN} and @@sc{gdbserver}.

For other files @@samp{-} is used as the separator.


@@subsection Include Files

A @@file{.c} file should include @@file{defs.h} first.

A @@file{.c} file should directly include the @@code{.h} file of every
declaration and/or definition it directly refers to.  It cannot rely on
indirect inclusion.

A @@file{.h} file should directly include the @@code{.h} file of every
declaration and/or definition it directly refers to.  It cannot rely on
indirect inclusion.  Exception: The file @@file{defs.h} does not need to
be directly included.

An external declaration should only appear in one include file.

An external declaration should never appear in a @@code{.c} file.
Exception: a declaration for the @@code{_initialize} function that
pacifies @@option{-Wmissing-declaration}.

A @@code{typedef} definition should only appear in one include file.

An opaque @@code{struct} declaration can appear in multiple @@file{.h}
files.  Where possible, a @@file{.h} file should use an opaque
@@code{struct} declaration instead of an include.

All @@file{.h} files should be wrapped in:

@@smallexample
#ifndef INCLUDE_FILE_NAME_H
#define INCLUDE_FILE_NAME_H
header body
#endif
@@end smallexample


@@subsection Clean Design and Portable Implementation
a6475 1

@


1.325
log
@2010-06-21  Stan Shebs  <stan@@codesourcery.com>

	* gdb.texinfo: Relicense under GFDL version 1.3.
	* annotate.texinfo: Relicense under GFDL version 1.3.
	* gdbint.texinfo: Relicense under GFDL version 1.3.
	* stabs.texinfo: Relicense under GFDL version 1.3.
	* fdl.texi: Update to version 1.3.
@
text
@d8006 3
a8008 1
@@raisesections
a8009 1
@@lowersections
@


1.324
log
@	* gdbint.texinfo (Coding): Add subsection on command names.
@
text
@d19 1
a19 1
under the terms of the GNU Free Documentation License, Version 1.1 or
@


1.323
log
@gdb/
	* cli/cli-cmds.h (error_no_arg): Remove.  Move the comment ...
	* command.h (error_no_arg): ... here.  Remove NORETURN, change
	ATTR_NORETURN to ATTRIBUTE_NORETURN.
	* defs.h (NORETURN, ATTR_NORETURN): Remove.
	(perror_with_name, verror, error, error_stream, vfatal, fatal)
	(internal_verror, internal_error, nomem): Remove NORETURN, change
	ATTR_NORETURN to ATTRIBUTE_NORETURN.
	* exceptions.c (throw_exception, deprecated_throw_reason, throw_verror)
	(throw_vfatal, throw_error): Remove NORETURN.
	(throw_it): Remove NORETURN, change ATTR_NORETURN to ATTRIBUTE_NORETURN.
	* exceptions.h (throw_exception, throw_verror, throw_vfatal)
	(throw_error, deprecated_throw_reason): Remove NORETURN, change
	ATTR_NORETURN to ATTRIBUTE_NORETURN.
	* linespec.c (cplusplus_error): Remove NORETURN, change ATTR_NORETURN
	to ATTRIBUTE_NORETURN for prototype, for the definition only remove
	NORETURN.
	* remote-mips.c (mips_error): Change NORETURN to ATTRIBUTE_NORETURN.
	* remote-sim.c (gdb_os_error): Change ATTR_NORETURN to
	ATTRIBUTE_NORETURN.
	* target.c (tcomplain): Likewise.
	* target.h (noprocess): Remove NORETURN, change ATTR_NORETURN to
	ATTRIBUTE_NORETURN.
	* utils.c (verror, error, vfatal, fatal, error_stream, internal_verror)
	(internal_error, perror_with_name, nomem): Remove NORETURN.
	* xml-support.h (gdb_xml_error): Change ATTR_NORETURN to
	ATTRIBUTE_NORETURN.

gdb/doc/
	* gdbint.texinfo (Host Definition): Remove items NORETURN and
	ATTR_NORETURN.
@
text
@d6248 4
@


1.322
log
@	PR breakpoints/11531.
	* config/i386/nm-i386sol2.h (CANNOT_STEP_HW_WATCHPOINTS): Remove
	macro definition and related comment.
	* infrun.c (CANNOT_STEP_HW_WATCHPOINTS): Remove macro.
	(resume): Remove code and comment related to this macro.

doc ChangeLog entry:
	* gdbint.texinfo (CANNOT_STEP_HW_WATCHPOINTS): Remove explanation
	of macro deleted from GDB code.
@
text
@a2786 13
@@item NORETURN
If defined, this should be one or more tokens, such as @@code{volatile},
that can be used in both the declaration and definition of functions to
indicate that they never return.  The default is already set correctly
if compiling with GCC.  This will almost never need to be defined.

@@item ATTR_NORETURN
If defined, this should be one or more tokens, such as
@@code{__attribute__ ((noreturn))}, that can be used in the declarations
of functions to indicate that they never return.  The default is already
set correctly if compiling with GCC.  This will almost never need to be
defined.

@


1.321
log
@gdb
	* xcoffread.c: Include psymtab.h.
	(xcoff_sym_fns): Update.
	* symtab.h (struct partial_symbol): Remove.
	(PSYMBOL_DOMAIN, PSYMBOL_CLASS): Remove.
	(struct partial_symtab): Remove.
	(PSYMTAB_TO_SYMTAB): Remove.
	(lookup_partial_symbol, lookup_partial_symtab, find_pc_psymtab)
	(find_pc_sect_psymtab): Remove.
	(find_pc_sect_symtab_via_partial): Declare.
	(find_pc_psymtab, find_pc_sect_psymbol, psymtab_to_symtab)
	(find_main_psymtab): Remove.
	(find_main_filename): Declare.
	(fixup_psymbol_section): Remove.
	(fixup_section): Declare.
	* symtab.c: Include psymtab.h.
	(lookup_symtab): Use lookup_symtab method.
	(lookup_partial_symtab): Remove.
	(find_pc_sect_psymtab_closer): Remove.
	(find_pc_sect_psymtab): Remove.
	(find_pc_sect_symtab_via_partial): New function.
	(find_pc_psymtab, find_pc_sect_psymbol, find_pc_psymbol): Remove.
	(fixup_section): No longer static.
	(fixup_psymbol_section): Remove.
	(lookup_symbol_aux): Use lookup_symbol_aux_quick.
	(lookup_global_symbol_from_objfile): Likewise.
	(lookup_symbol_aux_psymtabs): Remove.
	(lookup_symbol_aux_quick): New function.
	(lookup_symbol_global): Use lookup_symbol_aux_quick.
	(lookup_partial_symbol): Remove.
	(basic_lookup_transparent_type_quick): New function.
	(basic_lookup_transparent_type): Use it.
	(find_main_psymtab): Remove.
	(find_main_filename): New function.
	(find_pc_sect_symtab): Use find_pc_sect_symtab method.
	(find_line_symtab): Use expand_symtabs_with_filename method.
	(output_partial_symbol_filename): New function.
	(sources_info): Use map_partial_symbol_filenames.
	(struct search_symbols_data): New type.
	(search_symbols_file_matches): New function.
	(search_symbols_name_matches): Likewise.
	(search_symbols): Use expand_symtabs_matching method.
	(struct add_name_data): Rename from add_macro_name_data.
	(add_macro_name): Update.
	(add_partial_symbol_name): New function.
	(default_make_symbol_completion_list): Use
	map_partial_symbol_names.
	(struct add_partial_symbol_name): New type.
	(maybe_add_partial_symtab_filename): New function.
	(make_source_files_completion_list): Use
	map_partial_symbol_filenames.
	(expand_line_sal): Use expand_symtabs_with_filename method.
	* symmisc.c: Include psymtab.h.
	(print_objfile_statistics): Use print_stats method.
	(dump_objfile): Use dump method.
	(dump_psymtab, maintenance_print_psymbols)
	(maintenance_info_psymtabs, maintenance_check_symtabs)
	(extend_psymbol_list): Remove.
	* symfile.h (struct quick_symbol_functions): New struct.
	(struct sym_fns) <qf>: New field.
	(sort_pst_symbols): Remove.
	(increment_reading_symtab): Declare.
	* symfile.c: Include psymtab.h.
	(compare_psymbols, sort_pst_symbols): Remove.
	(psymtab_to_symtab): Remove.
	(increment_reading_symtab): New function.
	(symbol_file_add_with_addrs_or_offsets): Use expand_all_symtabs
	method.
	(set_initial_language): Use find_main_filename.
	(allocate_psymtab, discard_psymtab, cashier_psymtab): Remove.
	(free_named_symtabs): Remove unused code.
	(start_psymtab_common, add_psymbol_to_bcache)
	(append_psymbol_to_list, add_psymbol_to_list, init_psymbol_list):
	Remove.
	* stack.c: Include psymtab.h, symfile.h.
	(backtrace_command_1): Use find_pc_sect_symtab_via_partial.
	* source.h (psymtab_to_fullname): Don't declare.
	* source.c: Include psymtab.h.
	(select_source_symtab): Use find_last_source_symtab method.
	(forget_cached_source_info): Use forget_cached_source_info
	method.
	(find_and_open_source): No longer static.
	(psymtab_to_fullname): Remove.
	* somread.c: Include psymtab.h.
	(som_sym_fns): Update.
	* psympriv.h: New file.
	* psymtab.h: New file.
	* psymtab.c: New file.
	* objfiles.h: (ALL_OBJFILE_PSYMTABS): Remove.
	(ALL_PSYMTABS, ALL_PSPACE_PSYMTABS): Likewise.
	* objfiles.c: Include psymtab.h.
	(objfile_relocate1): Use relocate method.
	(objfile_has_partial_symbols): Use has_symbols method.
	* mipsread.c: Include psymtab.h.
	(ecoff_sym_fns): Update.
	* mi/mi-cmd-file.c: Include psymtab.h.
	(print_partial_file_name): New function.
	(mi_cmd_file_list_exec_source_files): Use
	map_partial_symbol_filenames.
	* mdebugread.c: Include psympriv.h.
	* machoread.c: Include psympriv.h.
	(macho_sym_fns): Update.
	* m2-exp.y (yylex): Use lookup_symtab.
	* elfread.c: Include psympriv.h.
	(elf_sym_fns): Update.
	* dwarf2read.c: Include psympriv.h.
	* dbxread.c: Include psympriv.h.
	(aout_sym_fns): Update.
	* cp-support.c: Include psymtab.h.
	(read_in_psymtabs): Remove.
	(make_symbol_overload_list_qualified): Use
	expand_symtabs_for_function method.
	* coffread.c: Include psympriv.h.
	(coff_sym_fns): Update.
	* blockframe.c: Include psymtab.h.
	(find_pc_partial_function): Use find_pc_sect_symtab method.
	* ada-lang.h (ada_update_initial_language): Update.
	* ada-lang.c: Include psymtab.h.
	(ada_update_initial_language): Remove 'main_pst' argument.
	(ada_lookup_partial_symbol): Remove.
	(struct ada_psym_data): New type.
	(ada_add_psyms): New function.
	(ada_add_non_local_symbols): Use map_ada_symtabs method.
	(struct add_partial_datum): New type.
	(ada_add_partial_symbol_completions): New function.
	(ada_make_symbol_completion_list): Use map_partial_symbol_names.
	(ada_exception_support_info_sniffer): Update.
	* Makefile.in (SFILES): Add psymtab.c.
	(COMMON_OBS): Add psymtab.o.
	(HFILES_NO_SRCDIR): Add psymtab.h, psympriv.h.
gdb/doc
	* gdbint.texinfo (Symbol Handling): Update.
@
text
@a783 5
@@findex CANNOT_STEP_HW_WATCHPOINTS
@@item CANNOT_STEP_HW_WATCHPOINTS
If this is defined to a non-zero value, @@value{GDBN} will remove all
watchpoints before stepping the inferior.

@


1.320
log
@	* gdbint.texinfo (Getting Started): Fix @@node.
	(Debugging GDB): Likewise.
@
text
@d2297 6
@


1.319
log
@Document new gdb_test_timeout global variable.

        * gdbint.texinfo (Testsuite): New section "Testsuite Configuration",
        documenting the gdb_test_timeout variable.
@
text
@d7823 1
a7823 1
@@node Getting Started,,, Hints
d7906 1
a7906 1
@@node Debugging GDB,,,Hints
@


1.318
log
@	testsuite/
	* lib/gdb.exp (INTERNAL_GDBFLAGS): Don't override value provided by
	user.
	doc/
	* gdbint.texinfo (Testsuite): Document INTERNAL_GDBFLAGS.
@
text
@d7696 32
@


1.317
log
@	* gdbint.texinfo (Testsuite): Add a new section to document the
	various DejaGnu variables that may be overridden.
@
text
@d7650 27
@


1.316
log
@        Update the "Start of New Year Procedure".
        * gdbint.texinfo: Add the list of files that need to be updated
        manually.  Minor reformatting.
@
text
@d7602 8
d7631 38
@


1.315
log
@Update copyright years in all relevant texinfo documents.

        * agentexpr.texi: Add 2010 to the list of copyright years.
        * annotate.texinfo: Likewise.
        * gdb.texinfo: Likewise.
        * gdbint.texinfo: Likewise.
        * observer.texi: Likewise.
        * stabs.texinfo: Likewise.
@
text
@d6755 6
a6760 3
@@item file @@file{top.c}, function @@code{print_gdb_version}
@@item file @@file{gdbserver/server.c}, function @@code{gdbserver_version}
@@item file @@file{gdbserver/gdbreplay.c}, function @@code{gdbreplay_version}
d6764 29
a6792 3
Add the new year in the copyright notices of all source and documentation
files.  This can be done semi-automatically by running the @@code{copyright.sh}
script.  This script requires Emacs 22 or later to be installed.
@


1.314
log
@        * gdbint.texinfo, stabs.texinfo: Move the @@setchapternewpage
        and @@settitle directives up to help makeinfo find them.
@
text
@d13 1
a13 1
2000, 2001, 2002, 2003, 2004, 2005, 2006, 2008, 2009
@


1.313
log
@gdb/doc/
	* gdbint.texinfo (i386_stopped_by_hwbp): Remove.
@
text
@d4 2
a31 2
@@setchapternewpage off
@@settitle @@value{GDBN} Internals
@


1.312
log
@        gdb/
        * frame.c (get_frame_id): Default to outer_frame_id if the this_id
        method does not supply an ID.  Assert that the result is not
        null_frame_id.
        (outer_frame_id): New.
        (frame_id_p): Accept outer_frame_id.
        (frame_id_eq): Allow outer_frame_id to be equal to itself.
        (frame_find_by_id): Revert previous local workarounds.
        (get_prev_frame_1): Adjust end-of-stack check to test outer_frame_id.
        * frame.h (null_frame_id, frame_id_p): Update comments.
        (outer_frame_id): Declare.
        * infrun.c (handle_inferior_event): Do not treat all steps from the
        outermost frame as subroutine calls.

        * libunwind-frame.c (libunwind_frame_this_id): Do not clear THIS_ID.
        * hppa-tdep.c (hppa_stub_frame_this_id): Likewise.
        * ia64-tdep.c (ia64_frame_this_id): Likewise.
        (ia64_libunwind_frame_this_id, ia64_libunwind_sigtramp_frame_this_id):
        Use outer_frame_id instead of null_frame_id.
        * amd64obsd-tdep.c (amd64obsd_trapframe_cache): Use outer_frame_id.
        * i386obsd-tdep.c (i386obsd_trapframe_cache): Likewise.
        * inline-frame.c (inline_frame_this_id): Refuse outer_frame_id.
        * thread.c (restore_selected_frame): Update comment and remove
        frame_id_p check.

        gdb/doc/
        * gdbint.texinfo (Unwinding the Frame ID): Reference outer_frame_id.
@
text
@a988 7
@@findex i386_stopped_by_hwbp
@@item i386_stopped_by_hwbp (void)
This function returns non-zero if the inferior has some watchpoint or
hardware breakpoint that triggered.  It works like
@@code{i386_stopped_data_address}, except that it doesn't record the
address whose watchpoint triggered.

@


1.311
log
@Fix confusing sentence about autoconf in gdbint.texinfo.

gdb/doc/:
	* gdbint.texinfo (Releasing GDB): Fix confusing sentence
	about autoconf.
@
text
@d2045 1
a2045 1
An invalid frame ID (@@code{null_frame_id}) returned from the
d2048 8
@


1.310
log
@Cleanups after the update to Autoconf 2.64, Automake 1.11.

/:
	* README-maintainer-mode: Point directly to upstream locations
	for autoconf, automake, libtool, gettext, instead of copies on
	sources.redhat.com.  Document required versions.
	* configure.ac: Do not substitute datarootdir, htmldir,
	pdfdir, docdir.  Do not process --with-datarootdir,
	--with-htmldir, --with-pdfdir, --with-docdir.
	* configure: Regenerate.

gdb/:
	* CONTRIBUTE: Bump documented Autoconf version.
	* configure.ac: Do not substitute datarootdir, htmldir,
	pdfdir, docdir.  Do not process --with-datarootdir,
	--with-htmldir, --with-pdfdir, --with-docdir.
	* configure: Regenerate.

gdb/doc/:
	* gdbint.texinfo (Releasing GDB): Point to
	README-maintainer-mode file for required autoconf version.
	* configure.ac: Do not substitute datarootdir, htmldir,
	pdfdir, docdir.  Do not process --with-datarootdir,
	--with-htmldir, --with-pdfdir, --with-docdir.
	* configure: Regenerate.

gprof/:
	* Makefile.am (pdf__strip_dir, install-pdf, install-pdf-am)
	(install-pdf-recursive, html__strip_dir, install-html)
	(install-html-am, install-html-recursive): Remove.
	* Makefile.in: Regenerate.

opcodes/:
	* Makefile.am (install-pdf, install-html): Remove.
	* Makefile.in: Regenerate.

gas/:
	* Makefile.am (install-pdf, install-pdf-recursive, install-html)
	(install-html-recursive): Remove.
	* Makefile.in: Regenerate.
	* doc/Makefile.am (pdf__strip_dir, install-pdf, install-pdf-am)
	(html__strip_dir, install-html, install-html-am): Remove.
	* doc/Makefile.in: Regenerate.

ld/:
	* Makefile.am (pdf__strip_dir, install-pdf, install-pdf-am)
	(install-pdf-recursive, html__strip_dir, install-html)
	(install-html-am, install-html-recursive): Remove.
	* Makefile.in: Regenerate.

binutils/:
	* Makefile.am (install-pdf, install-pdf-recursive, install-html)
	(install-html-recursive): Remove.
	* Makefile.in: Regenerate.
	* doc/Makefile.am (pdf__strip_dir, install-pdf, install-pdf-am)
	(html__strip_dir, install-html, install-html-am): Remove.
	* doc/Makefile.in: Regenerate.

bfd/:
	* Makefile.am (datarootdir, docdir, htmldor, pdfdir)
	(install-pdf, install-pdf-recursive, install-html)
	(install-html-recursive): Remove.
	* Makefile.in: Regenerate.

bfd/doc/:
	* Makefile.am (pdf__strip_dir, install-pdf, install-pdf-am)
	(html__strip_dir, install-html, install-html-am): Remove.
	* Makefile.in: Regenerate.
@
text
@d7082 2
a7083 2
It is very unlikely that a system installed version of @@code{autoconf}
(e.g., @@file{/usr/bin/autoconf}) is correct.
@


1.309
log
@	* gdbint.texinfo (Testsuite): Document parallel make check.
@
text
@d7081 3
a7083 4
version taken from the @@file{binutils} snapshot directory, which can be
found at @@uref{ftp://sourceware.org/pub/binutils/}.  It is very
unlikely that a system installed version of @@code{autoconf} (e.g.,
@@file{/usr/bin/autoconf}) is correct.
@


1.308
log
@gdb/doc
	* gdbint.texinfo (Testsuite): Document test transcripts.
gdb/testsuite
	* lib/gdb.exp: Handle TRANSCRIPT.
	(remote_spawn, remote_close, send_gdb): New procs.
@
text
@d7522 10
@


1.307
log
@	* defs.h (strlen_paddr, paddr, paddr_nz): Remove.
	(paddress): Add GDBARCH parameter.
	* utils.c (strlen_paddr, paddr, paddr_nz): Remove.
	(paddress): Add GDBARCH parameter, use it instead of current_gdbarch.
	* ui-out.h (ui_out_field_core_addr): Add GDBARCH parameter.
	* ui-out.c (ui_out_field_core_addr): Add GDBARCH parameter,
	use it instead of current_gdbarch.

	Update calls to ui_out_field_core_addr to pass architecture:
	* ada-lang.c (print_one_exception): Update.
	* breakpoint.c (print_one_breakpoint_location,
	print_one_exception_catchpoint): Update.
	* disasm.c (dump_insns): Update.
	* darwin-nat-info.c (darwin_debug_regions_recurse): Update.
	* mi/mi-main.c (mi_cmd_data_read_memory): Update.
	* mi/mi-symbol-cmds.c: Include "objfiles.h".
	(mi_cmd_symbol_list_lines): Update.
	* stack.c (print_frame_info, print_frame): Update.

	Update callers of paddress to pass architecture:
	* ada-tasks.c (info_task): Update.
	* ada-valprint.c (ada_val_print_1): Update.
	* annotate.c (annotate_source, annotate_frame_begin): Update.
	* breakpoint.c (insert_bp_location, describe_other_breakpoints,
	mention): Update.
	* cli/cli-cmds.c (edit_command, list_command, print_disassembly):
	Update.
	* corefile.c (memory_error): Update.
	* c-valprint.c (print_function_pointer_address, c_val_print): Update.
	* disasm.c (dis_asm_print_address): Update.
	* exec.c (print_section_info): Update.
	* f-valprint.c (f_val_print): Update.
	* infcmd.c: Include "arch-utils.h".
	(jump_command, program_info): Update.
	* linux-fork.c: Include "arch-utils.h".
	(info_forks_command): Update.
	* m2-valprint.c (print_function_pointer_address,
	print_unpacked_pointer, print_variable_at_address,
	m2_val_print): Update.
	* m32r-rom.c (m32r_load_section, m32r_load, m32r_upload_command):
	Update.
	* printcmd.c (print_address, print_address_demangle, address_info):
	Update.
	* p-valprint.c (pascal_val_print): Update.
	* source.c: Include "arch-utils.h".
	(line_info): Update.
	* stack.c (frame_info, print_block_frame_labels): Update.
	* symfile.c (add_symbol_file_command, list_overlays_command): Update.
	* symmisc.c (dump_msymbols, dump_psymtab, dump_symtab_1,
	print_symbol, print_partial_symbols, maintenance_info_psymtabs,
	maintenance_check_symtabs): Update.
	* symtab.c (find_pc_sect_symtab): Update.
	* target.c (deprecated_debug_xfer_memory): Update.
	* tracepoint.c (scope_info): Update.
	* tui/tui-stack.c (tui_make_status_line): Update.
	* valprint.c (val_print_string): Update.

	Update callers of paddr_nz to use paddress instead (keeping
	user-visible output identical):
	* alpha-tdep.c (alpha_heuristic_proc_start): Update.
	* amd64-tdep.c (fixup_riprel, amd64_displaced_step_copy_insn,
	amd64_displaced_step_fixup): Update.
	* arch-utils.c (simple_displaced_step_copy_insn): Update.
	* auxv.c (fprint_target_auxv): Update.
	* breakpoint.c (insert_single_step_breakpoint): Update.
	* buildsym.c (finish_block): Update.
	* cli/cli-dump.c (restore_section_callback): Update.
	* fbsd-nat.c (fbsd_find_memory_regions): Update.
	* frame.c (frame_unwind_register_value): Update.
	* gcore.c (gcore_create_callback): Update.
	* hppa-tdep.c (hppa_frame_cache, hppa_skip_trampoline_code): Update.
	* i386-tdep.c (i386_displaced_step_fixup, i386_record_modrm,
	i386_record_lea_modrm_addr, i386_record_lea_modrm,
	i386_process_record): Update.
	* ia64-tdep.c (ia64_frame_this_id, ia64_sigtramp_frame_this_id,
	ia64_libunwind_frame_this_id, ia64_libunwind_sigtramp_frame_this_id,
	ia64_dummy_id, ia64_access_reg, ia64_access_rse_reg): Update.
	* infrun.c (displaced_step_prepare, displaced_step_fixup,
	handle_inferior_event, insert_step_resume_breakpoint_at_sal,
	insert_longjmp_resume_breakpoint): Update.
	* linux-nat.c (linux_nat_find_memory_regions): Update.
	* linux-record.c (record_linux_system_call): Update.
	* mips-tdep.c (heuristic_proc_start, mips_eabi_push_dummy_call,
	mips_n32n64_push_dummy_call, mips_o32_push_dummy_call,
	mips_o64_push_dummy_call): Update.
	* monitor.c (monitor_error, monitor_remove_breakpoint): Update.
	* record.c (record_arch_list_add_mem, record_wait,
	record_xfer_partial): Update.
	* remote-mips.c (mips_fetch_word, mips_check_lsi_error,
	mips_common_breakpoint): Update.
	* remote-sim.c (gdbsim_xfer_inferior_memory): Update.
	* rs6000-tdep.c (ppc_displaced_step_fixup): Update.
	* solib-som.c (som_current_sos): Update.
	* symfile.c (load_progress, generic_load): Update.
	* symfile-mem.c (add_vsyscall_page): Update.
	* valops.c (value_fetch_lazy): Update.
	* windows-tdep.c (windows_xfer_shared_library): Update.

	Update callers of paddr_nz to use paddress instead (changing
	user-visible output to make it more correct):
	* dwarf2loc.c (locexpr_describe_location): Update.
	* ia64-tdep.c (ia64_memory_insert_breakpoint,
	ia64_memory_remove_breakpoint): Update.
	* jv-valprint.c (java_value_print): Update.
	* m32c-tdep.c (m32c_m16c_address_to_pointer): Update.
	* monitor.c (monitor_read_memory): Update.

	Update callers of paddr to use paddress instead (changing
	user-visible output to make it more correct):
	* arm-tdep.c (arm_push_dummy_call): Update.
	* breakpoint.c (insert_bp_location, create_thread_event_breakpoint,
	create_breakpoint): Update.
	* darwin-nat-info.c (darwin_debug_regions): Update.
	* dcache.c (dcache_info): Update.
	* dsrec.c (load_srec, make_srec): Update.
	* dwarf2-frame.c (dwarf2_restore_rule, execute_cfa_program,
	dwarf2_frame_cache): Update.
	* gcore.c (gcore_copy_callback): Update.
	* gnu-nat.c (gnu_xfer_memory): Update.
	* mips-linux-nat.c (mips_show_dr): Update.
	* monitor.c (monitor_write_memory, monitor_insert_breakpoint,
	monitor_remove_breakpoint): Update.
	* remote.c (compare_sections_command): Update.
	* remote-m32r-sdi.c (m32r_xfer_memory, m32r_insert_breakpoint,
	m32r_remove_breakpoint, m32r_insert_watchpoint,
	m32r_remove_watchpoint): Update.
	* sol-thread.c (info_cb): Update.
	* symfile.c (load_progress): Update.

	Update callers of paddress or paddr_nz to use hex_string instead
	(changes output of internal/error/debug messages only):
	* dwarf2read.c (dump_die_shallow): Update.
	* frame.c (fprint_field, fprint_frame, frame_pc_unwind,
	get_frame_func, create_new_frame): Update.
	* hppa-tdep.c (find_unwind_entry, unwind_command): Update.
	* ia64-tdep.c (get_kernel_table, ia64_find_proc_info_x,
	ia64_get_dyn_info_list): Update.
	* maint.c (maintenance_translate_address): Update.
	* mi/mi-cmd-var.c (mi_cmd_var_create): Update.
	* target.c (target_flash_erase): Update.

	Update callers of paddr/paddr_nz to use phex/phex_nz instead,
	using an appropriate address size.  Remove use of strlen_paddr.
	* exec.c (exec_files_info): Update.
	* i386-nat.c (i386_show_dr): Update.
	* remote.c (remote_flash_erase): Update.
	* m32r-rom.c (m32r_load_section): Update.
	* monitor.c (monitor_vsprintf, monitor_store_register): Update.
	* remote.c (remote_check_symbols, remote_search_memory): Update.
	* remote-mips.c (mips_request, mips_common_breakpoint): Update.
	* scm-valprint.c (scm_ipruk, scm_scmval_print): Update.
	* sh64-tdep.c (sh64_show_media_regs, sh64_show_compact_regs): Update.
	* sh-tdep.c (sh_generic_show_regs, sh3_show_regs, sh2e_show_regs,
	sh2a_show_regs, sh2a_nofpu_show_regs, sh3e_show_regs,
	sh3_dsp_show_regs, sh4_show_regs, sh4_nofpu_show_regs,
	sh_dsp_show_regs): Update.
	* xcoffsolib.c (sharedlibrary_command): Update.


	* maint.c (maint_print_section_info): Add ADDR_SIZE parameter.
	Use hex_string_custom instead of paddr.
	(print_bfd_section_info): Pass address size.
	(print_objfile_section_info): Likewise.

	* annotate.h (annotate_source): Add GDBARCH parameter.
	(annotate_frame_begin): Likewise.
	* annotate.c (annotate_source): Add GDBARCH parameter.
	(annotate_frame_begin): Likewise.
	* source.c (identify_source_line): Update call to annotate_source.
	* stack.c (print_frame_info, print_frame): Update call to
	annotate_frame_begin.

	* breakpoint.c (describe_other_breakpoints): Add GDBARCH parameter.
	(create_breakpoint, create_ada_exception_breakpoint): Update call.

	* stack.c (print_block_frame_labels): Add GDBARCH parameter.
	(print_frame_label_vars): Update call.

	* symmisc.c (print_partial_symbols): Add GDBARCH parameter.
	(dump_psymtab): Update call to print_partial_symbols.
	(struct print_symbol_args): Add GDBARCH member.
	(dump_symtab_1): Set print_symbol_args architecture member.
	(print_symbol): Use it.

	* windows-tdep.h (windows_xfer_shared_library): Add GDBARCH
	parameter.
	* windows-tdep.c (windows_xfer_shared_library): Likewise.
	* i386-cygwin-tdep.c (struct cpms_data): Add GDBARCH member.
	(core_process_module_section): Pass architecture from cpms_data to
	windows_xfer_shared_library.
	(windows_core_xfer_shared_libraries): Initialize cmps_data
	architecture member.
	* windows-nat.c (windows_xfer_shared_libraries): Pass architecture
	to windows_xfer_shared_library.

	* defs.h (print_address): Add GDBARCH parameter.
	* printcmd.c (print_address): Add GDBARCH parameter.
	(print_scalar_formatted, do_examine): Update call.
	* findcmd.c (find_command): Update call.
	* tracepoint.c: Include "arch-utils.h".
	(trace_find_line_command): Update call.
	* tui/tui-disasm.c (tui_disassemble): Update call.

	* value.h (print_address_demangle): Add GDBARCH parameter.
	* printcmd.c (print_address_demangle): Add GDBARCH parameter.
	* c-valprint.c (print_function_pointer_address, c_val_print):
	Update call.
	* f-valprint.c (f_val_print): Update call.
	* gnu-v3-abi.c (gnuv3_print_method_ptr): Update call.
	* jv-valprint.c (java_val_print): Update call.
	* m2-valprint.c (print_function_pointer_address, m2_val_print):
	Update call.
	* p-valprint.c (pascal_val_print): Update call.

	* disasm.c (gdb_disassemble_info): Install architecture into
	di.application_data field.

testsuite/ChangeLog:

	* gdb.threads/tls-shared.exp: Update to locexpr_describe_location
	change to prefix TLS offset in hex with 0x.

doc/ChangeLog:

	* gdbint.texinfo (Item Output Functions): Update signature
	for ui_out_field_core_addr.
@
text
@d7563 21
@


1.306
log
@	* breakpoint.h (struct breakpoint): New member GDBARCH.
	* breakpoint.c: Include "arch-utils.h".
	(set_raw_breakpoint_without_location): Add GDBARCH parameter.
	Use it to set breakpoint architecture.
	(set_raw_breakpoint): Add GDBARCH parameter.
	(create_internal_breakpoint): Likewise.
	(create_catchpoint): Likewise.
	(create_fork_vfork_event_catchpoint): Likewise.
	(create_breakpoint): Likewise.
	(create_breakpoints): Likewise.
	(break_command_really): Likewise.
	(create_ada_exception_breakpoint): Likewise.
	Update local callers to pass architecture:
	(create_internal_breakpoint): Update.
	(create_overlay_event_breakpoint): Update.
	(create_longjmp_master_breakpoint): Update.
	(create_thread_event_breakpoint): Update.
	(create_solib_event_breakpoint): Update.
	(create_catchpoint): Update.
	(create_fork_vfork_event_catchpoint): Update.
	(set_momentary_breakpoint): Update.
	(clone_momentary_breakpoint): Update.
	(create_breakpoint): Update.
	(create_breakpoints): Update.
	(break_command_really): Update.
	(break_command_1): Update.
	(set_breakpoint): Update.
	(watch_command_1): Update.
	(catch_fork_command_1): Update.
	(catch_exec_commnd_1): Update.
	(handle_gnu_v3_exceptions): Update.
	(create_ada_exception_breakpoint): Update.
	(catch_ada_exception_command): Update.
	(catch_assert_command): Update.
	(trace_command): Update.

	* breakpoint.h (struct bp_location): New member GDBARCH.
	* breakpoint.c (get_sal_arch): New function.
	(set_raw_breakpoint): Set location architecture.
	(add_location_to_breakpoint): Likewise.
	(clone_momentary_breakpoint): Likewise.
	(watch_command_1): Likewise.
	(update_watchpoint): Likewise.
	(bp_loc_is_permanent): Use location architecture instead of
	current_gdbarch.
	(adjust_breakpoint_address): Add GDBARCH parameter; use it
	instead of current_gdbarch.
	Update callers of adjust_breakpoint_address to pass
	breakpoint location architecture:
	(set_raw_breakpoint): Update.
	(watch_command_1): Update.

        * tracepoint.c: (collect_symbol): Add GDBARCH parameter, use instead
	of current_gdbarch.
	(add_local_symbols): Add GDBARCH parameter.  Pass to collect_symbol.
	(encode_actions): Pass tracepoint architecture to add_local_symbols
	(encode_actions): Use tracepoint architecture instead of
	current_gdbarch.  Pass it to add_local_symbols and collect_symbol.

	* breakpoint.h (struct breakpoint_ops): Replace last_addr parameter
	of print_one callback with last_loc.
	* breakpoint.c (print_one_breakpoint_location): Replace last_addr
	parameter with last_loc.
	(print_one_breakpoint): Likewise.
	(do_captured_breakpoint_query): Update call.
	(breakpoint_1): Pass last_loc instead of last_addr to
	print_one_breakpoint.  Pass last location architecture instead of
	current_gdbarch to set_next_address.
	Update all implementations of the print_one callback:
	* breakpoint.c (print_one_catch_fork): Update.
	(print_one_catch_vfork): Update.
	(print_one_catch_exec): Update.
	(print_one_exception_catchpoint): Update.
	* ada-lang.c (print_one_exception): Update.
	(print_one_catch_exception): Update.
	(print_one_catch_exception_unhandled): Update.
	(print_one_catch_assert): Update.

	* breakpoint.c (print_one_breakpoint_location): Add PRINT_ADDRESS_BITS
	parameter.  Use it instead of gdbarch_addr_bit (current_gdbarch).
	(print_one_breakpoint): Add PRINT_ADDRESS_BITS parameter and pass it
	to print_one_breakpoint_location.
	(breakpoint_address_bits): New function.
	(do_captured_breakpoint_query): Compute number of address bits to print
	and pass it to print_one_breakpoint.
	(breakpoint_1): Likewise.  Use it instead of current_gdbarch.

	* breakpoint.h (create_thread_event_breakpoint): Add GDBARCH.
	* breakpoint.c (create_thread_event_breakpoint): Likewise.
	Update callers to create_thread_event_breakpoint:
	* aix-thread.c (pd_enable): Update.
	* linux-thread-db.c (enable_thread_event): Update.

	* breakpoint.h (create_solib_event_breakpoint): Add GDBARCH.
	* breakpoint.c (create_solib_event_breakpoint): Likewise.
	Update callers to create_solib_event_breakpoint:
	* solib-frv.c (enable_break, enable_break2): Update.
	* solib-pa64.c (pa64_solib_create_inferior_hook): Update.
	* solib-som.c (som_solib_create_inferior_hook): Update.
	* solib-darwin.c (darwin_solib_create_inferior_hook): Update.
	* solib-svr4.c (enable_break): Update.

	* breakpoint.h (insert_single_step_breakpoint): Add GDBARCH.
	* breakpoint.c (insert_single_step_breakpoint): Likewise.
	Update callers to insert_single_step_breakpoint:
	* alpha-tdep.c (alpha_software_single_step): Update.
	* arm-linux-tdep.c (arm_linux_software_single_step): Update.
	* arm-tdep.c (arm_software_single_step): Update.
	* cris-tdep.c (cris_software_single_step): Update.
	* rs6000-aix-tdep.c (rs6000_software_single_step): Update.
	* rs6000-tdep.c (ppc_deal_with_atomic_sequence): Update.
	* sparc-tdep.c (sparc_software_single_step): Update.
	* spu-tdep.c (spu_software_single_step): Update.
	* mips-tdep.c (deal_with_atomic_sequence): Add GDBARCH parameter.
	Pass it to insert_single_step_breakpoint.
	(mips_software_single_step): Pass architecture to
	deal_with_atomic_sequence and insert_single_step_breakpoint.

	* breakpoint.h (deprecated_insert_raw_breakpoint): Add GDBARCH.
	(deprecated_remove_raw_breakpoint): Likewise.
	* breakpoint.c (deprecated_insert_raw_breakpoint): Add GDBARCH.
	(deprecated_remove_raw_breakpoint): Likewise.
	Update callers to deprecated_insert_raw_breakpoint and
	deprecated_remove_raw_breakpoint:
	* breakpoint.c (single_step_gdbarch): New static variable.
	(insert_single_step_breakpoint): Pass GDBARCH parameter to
	deprecated_insert_raw_breakpoint.  Store it in single_step_gdbarch.
	(remove_single_step_breakpoints): Pass architecture stored in
	single_step_gdbarch to deprecated_remove_raw_breakpoint.
	* rs6000-nat.c (exec_one_dummy_insn): Update.
	* solib-irix.c (enable_break, disable_break): Update.
	* procfs.c (procfs_mourn_inferior): Update.
	(remove_dbx_link_breakpoint): Update.

	* breakpoint.h (set_breakpoint): Add GDBARCH parameter.
	(set_momentary_breakpoint, set_momentary_breakpoint_at_pc): Likewise.
	* breakpoint.c (set_breakpoint): Add GDBARCH parameter.
	(set_momentary_breakpoint, set_momentary_breakpoint_at_pc): Likewise.
	Update callers to set_breakpoint, set_momentary_breakpoint and
	set_momentary_breakpoint_at_pc:
	* breakpoint.c (set_momentary_breakpoint_at_pc): Update.
	(until_break_command): Update.
	* infcall.c (call_function_by_hand): Update.
	* infcmd.c (finish_backward, finish_forward): Update.
	* infrun.c (insert_step_resume_breakpoint_at_sal): Add GDBARCH
	parameter.  Pass it to set_momentary_breakpoint.
	(insert_longjmp_resume_breakpoint): Add GDBARCH parameter.
	Pass it to set_momentary_breakpoint_at_pc.
	(handle_inferior_event): Update.
	(insert_step_resume_breakpoint_at_frame): Update.
	(insert_step_resume_breakpoint_at_caller): Update..
	* mi/mi-cmd-break.c: Include "arch-utils.h".
	(mi_cmd_break_insert): Update.

	* target.h (struct target_ops): Add GDBARCH parameter to
	to_insert_breakpoint, to_remove_breakpoint, to_insert_hw_breakpoint,
	and to_remove_hw_breakpoint members.
	(target_insert_breakpoint, target_remove_breakpoint,
	target_insert_hw_breakpoint, target_remove_hw_breakpoint): Add GDBARCH
	parameter, pass to target routine.
	(memory_remove_breakpoint, memory_insert_breakpoint): Add GDBARCH
	parameter.
	* target.c (debug_to_insert_breakpoint, debug_to_remove_breakpoint,
	debug_to_insert_hw_breakpoint, debug_to_remove_hw_breakpoint): Add
	GDBARCH parameter, pass to target routine.
	(update_current_target): Update function signature.
	* breakpoint.c (insert_bp_location, remove_breakpoint,
	deprecated_insert_raw_breakpoint, deprecated_remove_raw_breakpoint):
	Pass architecture to target_ routines.
	Update all implementations of the target breakpoint routines to take
	GDBARCH parameter and use it instead of GDBARCH as appropriate:
	* corelow.c (ignore): Update.
	* exec.c (ignore): Update.
	* mem-break.c (memory_insert_breakpoint): Update.
	(memory_remove_breakpoint): Update.
	* monitor.c (monitor_insert_breakpoint): Update.
	(monitor_remove_breakpoint): Update.
	* record.c (record_insert_breakpoint): Update.
	(record_beneath_to_insert_breakpoint): Update.
	(record_remove_breakpoint): Update.
	(record_beneath_to_remove_breakpoint): Update.
	* remote.c (remote_insert_breakpoint): Update.
	(remote_remove_breakpoint): Update.
	(remote_insert_hw_breakpoint): Update.
	(remote_remove_hw_breakpoint): Update.
	* remote-m32r-sdi.c (m32r_insert_breakpoint): Update.
	(m32r_remove_breakpoint): Update.
	* remote-mips.c (mips_insert_breakpoint): Update.
	(mips_remove_breakpoint): Update.
	* i386-nat.c (i386_insert_hw_breakpoint): Update.
	(i386_remove_hw_breakpoint): Update.
	* nto-procfs.c (procfs_insert_breakpoint):  Update.
	(procfs_remove_breakpoint): Update.
	(procfs_insert_hw_breakpoint): Update.
	(procfs_remove_hw_breakpoint): Update.

doc/ChangeLog:

	* gdbint.texi (Examples of Use of @@code{ui_out} functions):
	Update example code extrated from breakpoint.c.
@
text
@d1403 2
a1404 2
@@deftypefun void ui_out_field_core_addr (struct ui_out *@@var{uiout}, const char *@@var{fldname}, CORE_ADDR @@var{address})
This function outputs an address.
@


1.305
log
@2009-06-07  Pedro Alves  <pedro@@codesourcery.com>

	* procfs.h: New.
	* proc-utils.h (procfs_first_available): Don't declare here.
	* sol-thread.c: Include procfs.h instead of sys/procfs.h and
	proc-utils.h.
	* procfs.c: Include procfs.h.
	(procfs_target): Make it public.  Don't register
	procfs_can_use_hw_breakpoint here.
	(proc_set_watchpoint): Check for PCWATCH or PIOCSWATCH being
	defined instead of TARGET_HAS_HARDWARE_WATCHPOINTS.
	(procfs_can_use_hw_breakpoint): Remove check of
	TARGET_HAS_HARDWARE_WATCHPOINTS.
	(procfs_use_watchpoints): Register procfs_can_use_hw_breakpoint
	here.
	(_initialize_procfs): Don't add the procfs target here.

	* i386-sol2-nat.c: Include target.h and procfs.h.
	(_initialize_amd64_sol2_nat): Install the procfs target here,
	customized with watchpoints support.
	* irix5-nat.c: Include target.h.
	(_initialize_core_irix5): Rename to ...
	(_initialize_irix5_nat): ... this.  Install the procfs target
	here, customized with watchpoints support.
	* alpha-nat.c: Include procfs.h.
	(_initialize_core_alpha): Rename to...
	(_initialize_alpha_nat): ... this.  Install the procfs target
	here, customized with watchpoints support.
	* sparc-sol2-nat.c: Include target.h and procfs.h.
	(_initialize_sparc_sol2_nat): New.

	* config/i386/nm-i386sol2.h (TARGET_HAS_HARDWARE_WATCHPOINTS): Delete.
	* config/sparc/nm-sol2.h (TARGET_HAS_HARDWARE_WATCHPOINTS): Delete.
	* config/mips/irix5.mh (NAT_FILE): Delete.
	* config/mips/irix6.mh (NAT_FILE): Delete.
	* config/mips/nm-irix5.h: Delete.

2009-06-07  Pedro Alves  <pedro@@codesourcery.com>

	* gdbint.texinfo (TARGET_HAS_HARDWARE_WATCHPOINTS): Delete all
	references.
@
text
@d1592 1
a1592 1
     if (gdbarch_addr_bit (current_gdbarch) <= 32)
@


1.304
log
@	* gdbint.texinfo: Rename formal parameters to gdbarch function
	protoypes from "current_gdbarch" to "gdbarch".
@
text
@a696 5
@@findex TARGET_HAS_HARDWARE_WATCHPOINTS
@@item TARGET_HAS_HARDWARE_WATCHPOINTS
If defined, the target supports hardware watchpoints.
(Currently only used for several native configs.)

@


1.303
log
@        * gdbint.texinfo (Adding support for debugging core files): New node.
        (Native Debugging): Remove the ``Native core file Support'' section.
@
text
@d3316 1
a3316 1
@@deftypefun CORE_ADDR gdbarch_pointer_to_address (struct gdbarch *@@var{current_gdbarch}, struct type *@@var{type}, char *@@var{buf})
d3325 1
a3325 1
@@deftypefun void gdbarch_address_to_pointer (struct gdbarch *@@var{current_gdbarch}, struct type *@@var{type}, char *@@var{buf}, CORE_ADDR @@var{addr})
d3349 1
a3349 1
@@deftypefun int gdbarch_address_class_type_flags (struct gdbarch *@@var{current_gdbarch}, int @@var{byte_size}, int @@var{dwarf2_addr_class})
d3356 1
a3356 1
@@deftypefun {char *} gdbarch_address_class_type_flags_to_name (struct gdbarch *@@var{current_gdbarch}, int @@var{type_flags})
d3360 1
a3360 1
@@deftypefun int gdbarch_address_class_name_to_type_flags (struct gdbarch *@@var{current_gdbarch}, int @@var{name}, int *@@var{type_flags_ptr})
@


1.302
log
@        * gdbint.texinfo (Defining Other Architecture Features): Remove
        enty for PROCESS_LINENUMBER_HOOK.
@
text
@d2834 1
d4424 11
a5422 58
@@section Native core file Support
@@cindex native core files

@@table @@file
@@findex fetch_core_registers
@@item core-aout.c::fetch_core_registers()
Support for reading registers out of a core file.  This routine calls
@@code{register_addr()}, see below.  Now that BFD is used to read core
files, virtually all machines should use @@code{core-aout.c}, and should
just provide @@code{fetch_core_registers} in @@code{@@var{xyz}-nat.c} (or
@@code{REGISTER_U_ADDR} in @@code{nm-@@var{xyz}.h}).

@@item core-aout.c::register_addr()
If your @@code{nm-@@var{xyz}.h} file defines the macro
@@code{REGISTER_U_ADDR(addr, blockend, regno)}, it should be defined to
set @@code{addr} to the offset within the @@samp{user} struct of @@value{GDBN}
register number @@code{regno}.  @@code{blockend} is the offset within the
``upage'' of @@code{u.u_ar0}.  If @@code{REGISTER_U_ADDR} is defined,
@@file{core-aout.c} will define the @@code{register_addr()} function and
use the macro in it.  If you do not define @@code{REGISTER_U_ADDR}, but
you are using the standard @@code{fetch_core_registers()}, you will need
to define your own version of @@code{register_addr()}, put it into your
@@code{@@var{xyz}-nat.c} file, and be sure @@code{@@var{xyz}-nat.o} is in
the @@code{NATDEPFILES} list.  If you have your own
@@code{fetch_core_registers()}, you may not need a separate
@@code{register_addr()}.  Many custom @@code{fetch_core_registers()}
implementations simply locate the registers themselves.@@refill
@@end table

When making @@value{GDBN} run native on a new operating system, to make it
possible to debug core files, you will need to either write specific
code for parsing your OS's core files, or customize
@@file{bfd/trad-core.c}.  First, use whatever @@code{#include} files your
machine uses to define the struct of registers that is accessible
(possibly in the u-area) in a core file (rather than
@@file{machine/reg.h}), and an include file that defines whatever header
exists on a core file (e.g., the u-area or a @@code{struct core}).  Then
modify @@code{trad_unix_core_file_p} to use these values to set up the
section information for the data segment, stack segment, any other
segments in the core file (perhaps shared library contents or control
information), ``registers'' segment, and if there are two discontiguous
sets of registers (e.g., integer and float), the ``reg2'' segment.  This
section information basically delimits areas in the core file in a
standard way, which the section-reading routines in BFD know how to seek
around in.

Then back in @@value{GDBN}, you need a matching routine called
@@code{fetch_core_registers}.  If you can use the generic one, it's in
@@file{core-aout.c}; if not, it's in your @@file{@@var{xyz}-nat.c} file.
It will be passed a char pointer to the entire ``registers'' segment,
its length, and a zero; or a char pointer to the entire ``regs2''
segment, its length, and a 2.  The routine should suck out the supplied
register values and install them into @@value{GDBN}'s ``registers'' array.

If your system uses @@file{/proc} to control processes, and uses ELF
format core files, then you may be able to use the same routines for
reading the registers out of processes and out of core files.

@


1.301
log
@        * gdbint.texinfo (Native Debugging): Remove entry for PROC_NAME_FMT.
        This macro is no longer used.
@
text
@a4822 4
@@item PROCESS_LINENUMBER_HOOK
@@findex PROCESS_LINENUMBER_HOOK
A hook defined for XCOFF reading.

@


1.300
log
@	* gdbint.texinfo: Change server name from sources.redhat.com to
	sourceware.org throughout.
@
text
@a5494 6
@@item PROC_NAME_FMT
@@findex PROC_NAME_FMT
Defines the format for the name of a @@file{/proc} device.  Should be
defined in @@file{nm.h} @@emph{only} in order to override the default
definition in @@file{procfs.c}.

@


1.299
log
@
From Jeremy Bennett  <jeremy.bennett@@embecosm.com>:

	* gdbint.texinfo (everywhere): Use braces {} in @@deftypeXX type
	field throughout to handle types with spaces in them.  Fix typos
	found by aspell.
	(Summary, Requirements, Contributors): New first chapter,
	"Summary" added, old Requirements section moved there, and new
	section, "Contributors" added.
	(Initializing a New Architecture, Register Representation)
	(Frame Interpretation, Inferior Call Setup, Adding a New Target)
	(Porting gdb): These sections extended and updated.
	(Compiler Characteristics): This section (empty) deleted.
	(Defining Other Architecture Features): This section renamed and
	duplicate material removed from (formerly "Target Conditionals").
	Use braces {} in @@deftypeXX type field throughout to handle types
	with spaces in them. Typos found by aspell fixed.

	* stack_frame.svg: New file, source of image for gdbint.texinfo.
	* stack_frame.pdf: Version of image for PDF output.
	* stack_frame.png: Version of image for HTML output and for Emacs.
	* stack_frame.txt: Version of image for Info output.
@
text
@d6712 1
a6712 1
@@email{gdb-patches@@@@sources.redhat.com, the @@value{GDBN} patches
d6879 1
a6879 1
Post the proposal on @@email{gdb@@@@sources.redhat.com, the GDB mailing
d6885 1
a6885 1
Post the proposal on @@email{gdb-announce@@@@sources.redhat.com, the GDB
d6945 1
a6945 1
@@uref{http://sources.redhat.com/gdb/ari,,A.R.I.} is an @@code{awk} script
d6971 1
a6971 1
$  echo cvs -f -d :ext:sources.redhat.com:/cvs/src rtag \
d6973 1
a6973 1
cvs -f -d :ext:sources.redhat.com:/cvs/src rtag
d6977 1
a6977 1
$  echo cvs -f -d :ext:sources.redhat.com:/cvs/src rtag \
d6979 1
a6979 1
cvs -f -d :ext:sources.redhat.com:/cvs/src rtag \
d7009 1
a7009 1
$  echo cvs -f -d :ext:sources.redhat.com:/cvs/src co \
d7011 1
a7011 1
cvs -f -d :ext:sources.redhat.com:/cvs/src co
d7072 1
a7072 1
@@email{gdb-announce@@@@sources.redhat.com, GDB Announcement mailing list}
d7074 2
a7075 2
@@email{gdb@@@@sources.redhat.com, GDB Discussion mailing list} and
@@email{gdb-testers@@@@sources.redhat.com, GDB Testers mailing list}
d7117 1
a7117 1
@@email{gdb-patches@@@@sources.redhat.com}.
d7143 1
a7143 1
found at @@uref{ftp://sources.redhat.com/pub/binutils/}.  It is very
d7348 1
a7348 1
@@uref{ftp://sources.redhat.com/pub/gdb/snapshots/branch}
d7350 2
a7351 2
Notify the relevant mailing lists ( @@email{gdb@@@@sources.redhat.com} and
@@email{gdb-testers@@@@sources.redhat.com} that the candidate is available.
d7458 1
a7458 1
@@email{gdb-announce@@@@sources.redhat.com, GDB Announcement mailing list}
d7522 1
a7522 1
Post a revised release schedule to @@email{gdb@@@@sources.redhat.com, GDB
d7892 1
a7892 1
@@email{gdb-patches@@@@sources.redhat.com, the @@value{GDBN} maintainers}.
@


1.298
log
@gdb/
2009-02-06  Jim Blandy  <jimb@@codesourcery.com>
	    Daniel Jacobowitz  <dan@@codesourcery.com>
	    Vladimir Prus  <vladimir@@codesourcery.com>
	    Pedro Alves  <pedro@@codesourcery.com>

	* defs.h (enum lval_type): New value: lval_computed.
	* value.h (struct lval_funcs): New type.
	(allocate_computed_value, value_computed_funcs)
	(value_computed_closure): New declarations.
	* value.c (struct value): Add a structure to the location union
	for computed lvalues, containing 'funcs' and 'closure' members.
	(allocate_computed_value, value_computed_funcs)
	(value_computed_closure): New functions.
	(value_free): For computed lvalues, call the closure's
	'free_closure' function before freeing the value itself.
	(value_copy): If we're copying an lval_computed value, call the
	closure's 'copy_closure' function.
	(set_value_component_location): If the original value is a
	computed lvalue, then call the closure's 'copy_closure' function.
	(value_of_internalvar): If an internal variable's value is a
	computed lvalue, make retrieving its value produce an equivalent
	computed lvalue.
	* valops.c (value_fetch_lazy): Unlazy computed lvalues by calling
	their read function.
	(value_assign): Assign to computed lvalues by calling their write
	function.

gdb/doc/
2009-02-06  Pedro Alves  <pedro@@codesourcery.com>

	* gdbint.texinfo (Values): New chapter.
@
text
@d71 1
a71 1
* Requirements::
d99 8
d108 1
a108 2

@@chapter Requirements
d143 35
d1133 1
d1340 1
a1340 1
@@deftypefun struct cleanup *make_cleanup_ui_out_tuple_begin_end (struct ui_out *@@var{uiout}, const char *@@var{id})
d1367 1
a1367 1
@@deftypefun struct cleanup *make_cleanup_ui_out_list_begin_end (struct ui_out *@@var{uiout}, const char *@@var{id})
d1432 1
a1432 1
@@deftypefun struct ui_stream *ui_out_stream_new (struct ui_out *@@var{uiout})
d1811 1
a1811 1
@@code{libgdb} is idle (i.e. no other client is using @@code{libgdb})
d1866 1
a1866 1
implement a new event-loop that GDB would use.
d2002 1
a2002 1
To answer this question, GDB has the @@dfn{sentinel} frame, the
d2831 1
a2831 2
* Raw and Virtual Registers::
* Register and Memory Data::
d2834 1
a2834 2
* Compiler Characteristics::
* Target Conditionals::
d2957 1
a2957 1
@@deftypefun const char *gdbarch_osabi_name (enum gdb_osabi @@var{osabi})
d2977 1
a2977 1
@@deftypefun enum gdb_osabi gdbarch_lookup_osabi (bfd *@@var{abfd})
d3001 11
d3013 49
a3061 5
via a @@code{bfd_arch_@@var{arch}} constant.  The @@code{gdbarch} is
registered by a call to @@code{register_gdbarch_init}, usually from
the file's @@code{_initialize_@@var{filename}} routine, which will
be automatically called during @@value{GDBN} startup.  The arguments
are a @@sc{bfd} architecture constant and an initialization function.
d3063 1
a3063 1
The initialization function has this type:
d3082 42
d3131 52
d3355 1
a3355 1
@@deftypefun char *gdbarch_address_class_type_flags_to_name (struct gdbarch *@@var{current_gdbarch}, int @@var{type_flags})
d3409 4
a3412 3
to indicate the presence of one of these "short" pointers.  E.g, if
the debug information indicates that @@code{short_ptr_var} is one of these
short pointers, @@value{GDBN} might show the following behavior:
d3420 13
a3432 2
@@node Raw and Virtual Registers
@@section Raw and Virtual Register Representations
d3434 44
a3477 2
@@cindex virtual register representation
@@cindex representations, raw and virtual registers
d3479 11
a3489 3
@@emph{Maintainer note: This section is pretty much obsolete.  The
functionality described here has largely been replaced by
pseudo-registers and the mechanisms described in @@ref{Register and
d3491 99
a3589 18
Representations}.  See also @@uref{http://www.gnu.org/software/gdb/bugs/,
Bug Tracking Database} and
@@uref{http://sources.redhat.com/gdb/current/ari/, ARI Index} for more
up-to-date information.}

Some architectures use one representation for a value when it lives in a
register, but use a different representation when it lives in memory.
In @@value{GDBN}'s terminology, the @@dfn{raw} representation is the one used in
the target registers, and the @@dfn{virtual} representation is the one
used in memory, and within @@value{GDBN} @@code{struct value} objects.

@@emph{Maintainer note: Notice that the same mechanism is being used to
both convert a register to a @@code{struct value} and alternative
register forms.}

For almost all data types on almost all architectures, the virtual and
raw representations are identical, and no special handling is needed.
However, they do occasionally differ.  For example:
d3591 23
a3613 9
@@itemize @@bullet
@@item
The x86 architecture supports an 80-bit @@code{long double} type.  However, when
we store those values in memory, they occupy twelve bytes: the
floating-point number occupies the first ten, and the final two bytes
are unused.  This keeps the values aligned on four-byte boundaries,
allowing more efficient access.  Thus, the x86 80-bit floating-point
type is the raw representation, and the twelve-byte loosely-packed
arrangement is the virtual representation.
d3615 20
a3634 7
@@item
Some 64-bit MIPS targets present 32-bit registers to @@value{GDBN} as 64-bit
registers, with garbage in their upper bits.  @@value{GDBN} ignores the top 32
bits.  Thus, the 64-bit form, with garbage in the upper 32 bits, is the
raw representation, and the trimmed 32-bit representation is the
virtual representation.
@@end itemize
d3636 2
a3637 12
In general, the raw representation is determined by the architecture, or
@@value{GDBN}'s interface to the architecture, while the virtual representation
can be chosen for @@value{GDBN}'s convenience.  @@value{GDBN}'s register file,
@@code{registers}, holds the register contents in raw format, and the
@@value{GDBN} remote protocol transmits register values in raw format.

Your architecture may define the following macros to request
conversions between the raw and virtual format:

@@deftypefn {Target Macro} int REGISTER_CONVERTIBLE (int @@var{reg})
Return non-zero if register number @@var{reg}'s value needs different raw
and virtual formats.
a3638 2
You should not use @@code{REGISTER_CONVERT_TO_VIRTUAL} for a register
unless this macro returns a non-zero value for that register.
d3641 11
a3651 5
@@deftypefn {Target Macro} void REGISTER_CONVERT_TO_VIRTUAL (int @@var{reg}, struct type *@@var{type}, char *@@var{from}, char *@@var{to})
Convert the value of register number @@var{reg} to @@var{type}, which
should always be @@code{gdbarch_register_type (@@var{reg})}.  The buffer
at @@var{from} holds the register's value in raw format; the macro should
convert the value to virtual format, and place it at @@var{to}.
d3653 1
a3653 3
Note that @@code{REGISTER_CONVERT_TO_VIRTUAL} and
@@code{REGISTER_CONVERT_TO_RAW} take their @@var{reg} and @@var{type}
arguments in different orders.
a3654 3
You should only use @@code{REGISTER_CONVERT_TO_VIRTUAL} with registers
for which the @@code{REGISTER_CONVERTIBLE} macro returns a non-zero
value.
d3657 13
a3669 5
@@deftypefn {Target Macro} void REGISTER_CONVERT_TO_RAW (struct type *@@var{type}, int @@var{reg}, char *@@var{from}, char *@@var{to})
Convert the value of register number @@var{reg} to @@var{type}, which
should always be @@code{gdbarch_register_type (@@var{reg})}.  The buffer
at @@var{from} holds the register's value in raw format; the macro should
convert the value to virtual format, and place it at @@var{to}.
a3670 2
Note that REGISTER_CONVERT_TO_VIRTUAL and REGISTER_CONVERT_TO_RAW take
their @@var{reg} and @@var{type} arguments in different orders.
d3673 17
d3692 1
a3692 1
@@section Using Different Register and Memory Data Representations
d3699 3
a3701 10
@@emph{Maintainer's note: The way GDB manipulates registers is undergoing
significant change.  Many of the macros and functions referred to in this
section are likely to be subject to further revision.  See
@@uref{http://sources.redhat.com/gdb/current/ari/, A.R. Index} and
@@uref{http://www.gnu.org/software/gdb/bugs, Bug Tracking Database} for
further information.  cagney/2002-05-06.}

Some architectures can represent a data object in a register using a
form that is different to the objects more normal memory representation.
For example:
d3711 2
a3712 2
@@code{long double} data type occupies 96 bits in memory but only 80 bits
when stored in a register.
d3723 15
a3737 8
However, they do occasionally differ.  Your architecture may define the
following macros to request conversions between the register and memory
representations of a data type:

@@deftypefun int gdbarch_convert_register_p (struct gdbarch *@@var{gdbarch}, int @@var{reg})
Return non-zero if the representation of a data value stored in this
register may be different to the representation of that same data value
when stored in memory.
d3739 3
a3741 2
When non-zero, the macros @@code{gdbarch_register_to_value} and
@@code{value_to_register} are used to perform any necessary conversion.
d3743 12
a3754 3
This function should return zero for the register's native type, when
no conversion is necessary.
@@end deftypefun
d3756 3
a3758 4
@@deftypefun void gdbarch_register_to_value (struct gdbarch *@@var{gdbarch}, int @@var{reg}, struct type *@@var{type}, char *@@var{from}, char *@@var{to})
Convert the value of register number @@var{reg} to a data object of type
@@var{type}.  The buffer at @@var{from} holds the register's value in raw
format; the converted value should be placed in the buffer at @@var{to}.
d3760 1
a3760 2
Note that @@code{gdbarch_register_to_value} and @@code{gdbarch_value_to_register}
take their @@var{reg} and @@var{type} arguments in different orders.
d3762 1
a3762 3
You should only use @@code{gdbarch_register_to_value} with registers for which
the @@code{gdbarch_convert_register_p} function returns a non-zero value.
@@end deftypefun
a3763 1
@@deftypefun void gdbarch_value_to_register (struct gdbarch *@@var{gdbarch}, struct type *@@var{type}, int @@var{reg}, char *@@var{from}, char *@@var{to})
d3767 11
a3777 2
Note that @@code{gdbarch_register_to_value} and @@code{gdbarch_value_to_register}
take their @@var{reg} and @@var{type} arguments in different orders.
d3779 39
a3817 3
You should only use @@code{gdbarch_value_to_register} with registers for which
the @@code{gdbarch_convert_register_p} function returns a non-zero value.
@@end deftypefun
d3822 495
d4319 55
d4375 10
a4384 2
@@node Compiler Characteristics
@@section Compiler Characteristics
d4386 2
a4387 2
@@node Target Conditionals
@@section Target Conditionals
d4389 40
a4428 2
This section describes the macros and functions that you can use to define the
target machine.
d4511 1
a4511 1
the endianness of the target byte order.  A value of 1 means that the bits
a4653 23
@@item void gdbarch_print_float_info (@@var{gdbarch}, @@var{file}, @@var{frame}, @@var{args})
@@findex gdbarch_print_float_info
If defined, then the @@samp{info float} command will print information about
the processor's floating point unit.

@@item void gdbarch_print_registers_info (@@var{gdbarch}, @@var{frame}, @@var{regnum}, @@var{all})
@@findex gdbarch_print_registers_info
If defined, pretty print the value of the register @@var{regnum} for the
specified @@var{frame}.  If the value of @@var{regnum} is -1, pretty print
either all registers (@@var{all} is non zero) or a select subset of
registers (@@var{all} is zero).

The default method prints one register per line, and if @@var{all} is
zero omits floating-point registers.

@@item int gdbarch_print_vector_info (@@var{gdbarch}, @@var{file}, @@var{frame}, @@var{args})
@@findex gdbarch_print_vector_info
If defined, then the @@samp{info vector} command will call this function
to print information about the processor's vector unit.

By default, the @@samp{info vector} command will print all vector
registers (the register's type having the vector attribute).

a4663 77
@@item CORE_ADDR frame_align (@@var{gdbarch}, @@var{address})
@@anchor{frame_align}
@@findex frame_align
Define this to adjust @@var{address} so that it meets the alignment
requirements for the start of a new stack frame.  A stack frame's
alignment requirements are typically stronger than a target processors
stack alignment requirements.

This function is used to ensure that, when creating a dummy frame, both
the initial stack pointer and (if needed) the address of the return
value are correctly aligned.

This function always adjusts the address in the direction of stack
growth.

By default, no frame based stack alignment is performed.

@@item int gdbarch_frame_red_zone_size (@@var{gdbarch})
@@findex gdbarch_frame_red_zone_size
The number of bytes, beyond the innermost-stack-address, reserved by the
@@sc{abi}.  A function is permitted to use this scratch area (instead of
allocating extra stack space).

When performing an inferior function call, to ensure that it does not
modify this area, @@value{GDBN} adjusts the innermost-stack-address by
@@var{gdbarch_frame_red_zone_size} bytes before pushing parameters onto the
stack.

By default, zero bytes are allocated.  The value must be aligned
(@@pxref{frame_align}).

The @@sc{amd64} (nee x86-64) @@sc{abi} documentation refers to the
@@emph{red zone} when describing this scratch area.
@@cindex red zone

@@code{FRAME_FIND_SAVED_REGS} is deprecated.

@@item int gdbarch_frame_num_args (@@var{gdbarch}, @@var{frame})
@@findex gdbarch_frame_num_args
For the frame described by @@var{frame} return the number of arguments that
are being passed.  If the number of arguments is not known, return
@@code{-1}.

@@item CORE_ADDR gdbarch_unwind_pc (@@var{next_frame})
@@findex gdbarch_unwind_pc
@@anchor{gdbarch_unwind_pc} Return the instruction address, in
@@var{next_frame}'s caller, at which execution will resume after
@@var{next_frame} returns.  This is commonly referred to as the return address.

The implementation, which must be frame agnostic (work with any frame),
is typically no more than:

@@smallexample
ULONGEST pc;
pc = frame_unwind_register_unsigned (next_frame, S390_PC_REGNUM);
return gdbarch_addr_bits_remove (gdbarch, pc);
@@end smallexample

@@noindent

@@item CORE_ADDR gdbarch_unwind_sp (@@var{gdbarch}, @@var{next_frame})
@@findex gdbarch_unwind_sp
@@anchor{gdbarch_unwind_sp} Return the frame's inner most stack address.  This is
commonly referred to as the frame's @@dfn{stack pointer}.

The implementation, which must be frame agnostic (work with any frame),
is typically no more than:

@@smallexample
ULONGEST sp;
sp = frame_unwind_register_unsigned (next_frame, S390_SP_REGNUM);
return gdbarch_addr_bits_remove (gdbarch, sp);
@@end smallexample

@@noindent
@@xref{TARGET_READ_SP}, which this method replaces.

d4680 1
a4680 1
offset into the @@code{jmp_buf}. (While we might like to get the offset
a4694 7
@@item int gdbarch_inner_than (@@var{gdbarch}, @@var{lhs}, @@var{rhs})
@@findex gdbarch_inner_than
Returns non-zero if stack address @@var{lhs} is inner than (nearer to the
stack top) stack address @@var{rhs}.  Let the function return 
@@w{@@code{lhs < rhs}} if the target's stack grows downward in memory, or
@@w{@@code{lhs > rsh}} if the stack grows upward.

a4755 28
@@item register_reggroup_p (@@var{gdbarch}, @@var{regnum}, @@var{reggroup})
@@findex register_reggroup_p
@@cindex register groups
Return non-zero if register @@var{regnum} is a member of the register
group @@var{reggroup}.

By default, registers are grouped as follows:

@@table @@code
@@item float_reggroup
Any register with a valid name and a floating-point type.
@@item vector_reggroup
Any register with a valid name and a vector type.
@@item general_reggroup
Any register with a valid name and a type other than vector or
floating-point.  @@samp{float_reggroup}.
@@item save_reggroup
@@itemx restore_reggroup
@@itemx all_reggroup
Any register with a valid name.
@@end table

@@item struct type *register_type (@@var{gdbarch}, @@var{reg})
@@findex register_type
If defined, return the type of register @@var{reg}.
@@xref{Target Architecture Definition, , Raw and Virtual Register
Representations}.

d4782 1
a4782 1
the next instruction. See @@file{sparc-tdep.c} and @@file{rs6000-tdep.c}
a4816 8
@@item int gdbarch_pc_regnum (@@var{gdbarch})
@@findex gdbarch_pc_regnum
If the program counter is kept in a register, then let this function return
the number (greater than or equal to zero) of that register.

This should only need to be defined if @@code{gdbarch_read_pc} and
@@code{gdbarch_write_pc} are not defined.

a4826 6
@@item gdbarch_ps_regnum (@@var{gdbarch}
@@findex gdbarch_ps_regnum
If defined, this function returns the number of the processor status
register.
(This definition is only used in generic code when parsing "$ps".)

a4854 5
@@item const char *gdbarch_register_name (@@var{gdbarch}, @@var{regnr})
@@findex gdbarch_register_name
Return the name of register @@var{regnr} as a string.  May return @@code{NULL}
to indicate that @@var{regnr} is not a valid register.

a4909 5
@@item CORE_ADDR gdbarch_skip_prologue (@@var{gdbarch}, @@var{ip})
@@findex gdbarch_skip_prologue
A function that returns the address of the ``real'' code beyond the
function entry prologue found at @@var{ip}.

a4915 6
@@item int gdbarch_sp_regnum (@@var{gdbarch})
@@findex gdbarch_sp_regnum
If the stack-pointer is kept in a register, then use this function to return
the number (greater than or equal to zero) of that register, or -1 if
there is no such register.

a4980 24
@@item  CORE_ADDR gdbarch_read_pc (@@var{gdbarch}, @@var{regcache})
@@findex gdbarch_read_pc
@@itemx gdbarch_write_pc (@@var{gdbarch}, @@var{regcache}, @@var{val})
@@findex gdbarch_write_pc
@@anchor{gdbarch_write_pc}
@@itemx TARGET_READ_SP
@@findex TARGET_READ_SP
@@itemx TARGET_READ_FP
@@findex TARGET_READ_FP
@@findex gdbarch_read_pc
@@findex gdbarch_write_pc
@@findex read_sp
@@findex read_fp
@@anchor{TARGET_READ_SP} These change the behavior of @@code{gdbarch_read_pc},
@@code{gdbarch_write_pc}, and @@code{read_sp}.  For most targets, these may be
left undefined.  @@value{GDBN} will call the read and write register
functions with the relevant @@code{_REGNUM} argument.

These macros and functions are useful when a target keeps one of these
registers in a hard to get at place; for example, part in a segment register
and part in an ordinary register.

@@xref{gdbarch_unwind_sp}, which replaces @@code{TARGET_READ_SP}.

d4989 2
a4990 2
@@c need to explain virtual frame pointers, they are recorded in agent expressions
@@c for tracepoints
d5060 45
d5296 2
a5297 2
@@value{GDBN}'s file @@file{remote.c} talks a serial protocol to code
that runs in the target system.  @@value{GDBN} provides several sample
d5299 1
a5299 1
systems for this purpose; they are named @@file{@@var{cpu}-stub.c}. Many
d5301 1
a5301 1
have a GDB stub built into them, and maintenance of the remote
d5504 1
a5504 1
@@var{filename} to be added to @@value{GDBN}'s symbol table. If
d5713 1
a5713 1
remove from the end of the vector. If you need to remove several items
d5951 1
a5951 1
@@deftypefun struct gdbarch_data *gdbarch_data_register_pre_init (gdbarch_data_pre_init_ftype *@@var{pre_init})
d5957 1
a5957 1
@@end deftypefun
d5959 1
a5959 1
@@deftypefun struct gdbarch_data *gdbarch_data_register_post_init (gdbarch_data_post_init_ftype *@@var{post_init})
d5967 1
a5967 1
@@end deftypefun
d5974 1
a5974 1
@@deftypefun void *gdbarch_data (struct gdbarch *@@var{gdbarch}, struct gdbarch_data *@@var{data_handle})
d5981 1
a5981 1
@@end deftypefun
d6017 1
a6017 1
A module can on-demand create architecture dependant data structures
d6323 1
a6323 1
case. Any file used when building the core of @@value{GDBN} must be 8.3
d6526 2
a6527 6
specifying the configuration of the machine.  This is done in a
dizzying variety of header files and configuration scripts, which we
hope to make more sensible soon.  Let's say your new host is called an
@@var{xyz} (e.g.,  @@samp{sun4}), and its full three-part configuration
name is @@code{@@var{arch}-@@var{xvend}-@@var{xos}} (e.g.,
@@samp{sparc-sun-sunos4}).  In particular:
d6530 6
d6537 2
a6538 6
In the top level directory, edit @@file{config.sub} and add @@var{arch},
@@var{xvend}, and @@var{xos} to the lists of supported architectures,
vendors, and operating systems near the bottom of the file.  Also, add
@@var{xyz} as an alias that maps to
@@code{@@var{arch}-@@var{xvend}-@@var{xos}}.  You can test your changes by
running
d6540 7
a6546 3
@@smallexample
./config.sub @@var{xyz}
@@end smallexample
d6548 4
a6551 2
@@noindent
and
d6553 6
a6558 3
@@smallexample
./config.sub @@code{@@var{arch}-@@var{xvend}-@@var{xos}}
@@end smallexample
d6560 4
a6563 3
@@noindent
which should both respond with @@code{@@var{arch}-@@var{xvend}-@@var{xos}}
and no error messages.
d6565 3
a6567 3
@@noindent
You need to port BFD, if that hasn't been done already.  Porting BFD is
beyond the scope of this manual.
d6570 4
a6573 17
To configure @@value{GDBN} itself, edit @@file{gdb/configure.host} to recognize
your system and set @@code{gdb_host} to @@var{xyz}, and (unless your
desired target is already available) also edit @@file{gdb/configure.tgt},
setting @@code{gdb_target} to something appropriate (for instance,
@@var{xyz}).

@@emph{Maintainer's note: Work in progress.  The file
@@file{gdb/configure.host} originally needed to be modified when either a
new native target or a new host machine was being added to @@value{GDBN}.
Recent changes have removed this requirement.  The file now only needs
to be modified when adding a new native configuration.  This will likely
changed again in the future.}

@@item
Finally, you'll need to specify and define @@value{GDBN}'s host-, native-, and
target-dependent @@file{.h} and @@file{.c} files used for your
configuration.
d7143 1
a7143 1
found at @@uref{ftp://sources.redhat.com/pub/binutils/}. It is very
d7369 1
a7369 1
are available (e.g. keep 5.2 and 5.2.1 but remove 5.1):
@


1.297
log
@2009-01-14  Joseph Myers  <joseph@@codesourcery.com>
            Carlos O'Donell  <carlos@@codesourcery.com>

	Fixes for makeinfo --html.

	* annotate.texinfo: Use @@copying and @@insertcopying.  Use
	@@ifnottex in place of @@ifinfo.
	* gdb.texinfo: Use @@copying and @@insertcopying.  Use @@ifnottex in
	place of @@ifinfo.  Use @@ifnotinfo for one index entry.
	* gdbint.texinfo: Use @@copying and @@insertcopying.  Use @@ifnottex
	in place of @@ifinfo.
	* stabs.texinfo: Use @@copying and @@insertcopying.  Use @@ifnottex
	in place of @@ifinfo.  Include contents at start unconditionally.
@
text
@d76 1
d1835 95
@


1.296
log
@gdb/
2009-01-07  Pedro Alves  <pedro@@codesourcery.com>

	Delete ONE_PROCESS_WRITETEXT leftovers.

	* breakpoint.c (insert_bp_location): Delete process_warning
	argument.  Adjust.
	(insert_breakpoint_locations): Adjust.
	(reattach_breakpoints): Adjust.
	* infrun.c (normal_stop): Drop "It might be running in another
	process" notice.

gdb/doc/
2009-01-07  Pedro Alves  <pedro@@codesourcery.com>

	* gdb.texinfo (Error in Breakpoints): Delete mention of "The same
	program may be running in another process" errors.
	* gdbint.texinfo (Native Conditionals): Delete
	ONE_PROCESS_WRITETEXT description.
@
text
@d9 4
a12 5
@@ifinfo
This file documents the internals of the GNU debugger @@value{GDBN}.
Copyright (C) 1990, 1991, 1992, 1993, 1994, 1996, 1998, 1999, 2000, 2001,
   2002, 2003, 2004, 2005, 2006, 2008
   Free Software Foundation, Inc.
d22 7
a28 1
@@end ifinfo
d56 1
a56 9
Copyright @@copyright{} 1990,1991,1992,1993,1994,1996,1998,1999,2000,2001,
   2002, 2003, 2004, 2005, 2006  Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
Texts.  A copy of the license is included in the section entitled ``GNU
Free Documentation License''.
@


1.295
log
@        * gdbint.texinfo (Start of New Year Procedure): Add the "coding"
        emacs local variable to be placed at the end of the ChangeLog.
        Add server.c and gdbreplay.c to the list of files where the
        copyright year needs to be updated.
@
text
@a4527 5
@@item ONE_PROCESS_WRITETEXT
@@findex ONE_PROCESS_WRITETEXT
Define this to be able to, when a breakpoint insertion fails, warn the
user that another process may be running with the same executable.

@


1.294
log
@	* gdbint.texinfo (gdbarch_cannot_fetch_register): Don't mention
	FETCH_INFERIOR_REGISTERS.
	(Native Conditionals): Remove obsolete CHILD_PREPARE_TO_STORE,
	FETCH_INFERIOR_REGISTERS descriptions.  Remove
	gdbarch_get_longjmp_target descrition, since already described in
	Target Conditionals.  Move gdbarch_fp0_regnum description to ...
	(Target Conditionals): ... here.
@
text
@d5845 1
d5856 6
a5861 2
Update the copyright year in file @@file{top.c}, function
@@code{print_gdb_version}.
@


1.293
log
@	* gdbint.texinfo (Target Conditionals): Extend the
	gdbarch_breakpoint_from_pc description.
@
text
@d3512 1
a3512 2
from an inferior process.  This is only relevant if
@@code{FETCH_INFERIOR_REGISTERS} is not defined.
d3527 5
a4523 31
@@item CHILD_PREPARE_TO_STORE
@@findex CHILD_PREPARE_TO_STORE
If the machine stores all registers at once in the child process, then
define this to ensure that all values are correct.  This usually entails
a read from the child.

[Note that this is incorrectly defined in @@file{xm-@@var{system}.h} files
currently.]

@@item FETCH_INFERIOR_REGISTERS
@@findex FETCH_INFERIOR_REGISTERS
Define this if the native-dependent code will provide its own routines
@@code{fetch_inferior_registers} and @@code{store_inferior_registers} in
@@file{@@var{host}-nat.c}.  If this symbol is @@emph{not} defined, and
@@file{infptrace.c} is included in this configuration, the default
routines in @@file{infptrace.c} are used for these functions.

@@item int gdbarch_fp0_regnum (@@var{gdbarch})
@@findex gdbarch_fp0_regnum
This functions normally returns the number of the first floating
point register, if the machine has such registers.  As such, it would
appear only in target-specific code.  However, @@file{/proc} support uses this
to decide whether floats are in use on this target.

@@item int gdbarch_get_longjmp_target (@@var{gdbarch})
@@findex gdbarch_get_longjmp_target
This function determines the target PC address that @@code{longjmp} will jump to,
assuming that we have just stopped at a longjmp breakpoint.  It takes a
@@code{CORE_ADDR *} as argument, and stores the target PC value through this
pointer.  It examines the current state of the machine as needed.

@


1.292
log
@gdb/
	* Makefile.in (INSTALLED_LIBS, CLIBS): Remove reference to
	$(TM_CLIBS).
	(CDEPS): Remove reference to $(TM_CDEPS).

gdb/doc/
	* gdbint.texinfo (Adding a New Target): Don't mention TDEPFILES,
	.mt files, TM_CLIBS or TM_CDEPS.
	(x86 Watchpoints): Don't mention TDEPFILES.
@
text
@d3433 1
a3433 1
a string of bytes that encode a breakpoint instruction, stores the
d3436 2
a3437 1
breakpoint should be inserted.
d3444 6
@


1.291
log
@gdb
	* scm-lang.c (scm_language_defn): Update.
	* p-typeprint.c (pascal_print_typedef): New function.
	* p-lang.h: (pascal_print_typedef): Declare.
	* p-lang.c (pascal_language_defn): Update.
	* objc-lang.c (objc_language_defn): Update.
	* m2-typeprint.c (m2_print_typedef): New function.
	* m2-lang.h (m2_print_typedef): Declare.
	* m2-lang.c (m2_language_defn): Update.
	* language.h (_LANG_c, _LANG_m2, _LANG_fortran, _LANG_pascal):
	Remove.
	(struct language_defn) <la_print_typedef>: New field.
	(default_print_typedef): Declare.
	(LA_PRINT_TYPEDEF): New define.
	* language.c (unknown_language_defn): Update.
	(auto_language_defn): Update.
	(local_language_defn): Update.
	* jv-lang.c (java_language_defn): Update.
	* f-lang.c (f_language_defn): Update.
	* c-typeprint.c (c_print_typedef): New function.
	* c-lang.h (c_print_typedef): Declare.
	* c-lang.c (c_language_defn): Update.
	(cplus_language_defn): Update.
	(asm_language_defn): Update.
	(minimal_language_defn): Update.
	* ada-lang.c (ada_language_defn): Update.
	* typeprint.c (default_print_typedef): New function.
gdb/doc
	* gdbint.texinfo (Language Support): Remove text about omitting
	support for a language.
@
text
@d824 1
a824 2
@@code{NATDEPFILES} (@@pxref{Native Debugging, NATDEPFILES}) or
@@code{TDEPFILES} (@@pxref{Target Architecture Definition, TDEPFILES}).
d4108 1
a4108 9
@@vindex TDEPFILES
@@item gdb/config/@@var{arch}/@@var{ttt}.mt
Contains a Makefile fragment specific to this target.  Specifies what
object files are needed for target @@var{ttt}, by defining
@@samp{TDEPFILES=@@dots{}} and @@samp{TDEPLIBS=@@dots{}}.

You can also define @@samp{TM_CLIBS} and @@samp{TM_CDEPS}, but these are
now deprecated, replaced by autoconf, and may go away in future
versions of @@value{GDBN}.
@


1.290
log
@gdb/
	* Makefile.in (generated_files): Add $(NAT_GENERATED_FILES).
	* config/i386/i386gnu.mh (NAT_GENERATED_FILES): New.

gdb/doc/
	* gdbint.texinfo (Native Debugging): Mention NAT_GENERATED_FILES.
@
text
@a2515 17
@@item Use macros to trim code

@@cindex trimming language-dependent code
The user has the option of building @@value{GDBN} for some or all of the
languages.  If the user decides to build @@value{GDBN} for the language
@@var{lang}, then every file dependent on @@file{language.h} will have the
macro @@code{_LANG_@@var{lang}} defined in it.  Use @@code{#ifdef}s to
leave out large routines that the user won't need if he or she is not
using your language.

Note that you do not need to do this in your YACC parser, since if @@value{GDBN}
is not build for @@var{lang}, then @@file{@@var{lang}-exp.tab.o} (the
compiled form of your parser) is not linked into @@value{GDBN} at all.

See the file @@file{configure.in} for how @@value{GDBN} is configured
for different languages.

@


1.289
log
@ChangeLog:

	* gdbarch.sh (name_of_malloc): Remove.
	* gdbarch.c, gdbarch.h: Re-generate.
	* valops.c (value_allocate_space_in_inferior): Do not call
	gdbarch_name_of_malloc.

doc/ChangeLog:

	* gdbint.texinfo (Target Conditionals): Remove documentation
	for gdbarch_name_of_malloc.
@
text
@d4415 1
a4415 1
@@samp{NAT_CDEPS}, etc.; see @@file{Makefile.in}.
@


1.288
log
@	* gdbint.texinfo (Raw and Virtual Register Representations): Fix
	reference to the "Using Different Register and Memory Data
	Representation" section.
@
text
@a4116 5
@@item const char *gdbarch_name_of_malloc (@@var{gdbarch})
@@findex gdbarch_name_of_malloc
A string containing the name of the function to call in order to
allocate some memory in the inferior. The default value is "malloc".

@


1.287
log
@	* coffread.c (coff_symtab_read): Remove FUNCTION_EPILOGUE_SIZE.

	* gdbint.texinfo: Remove FUNCTION_EPILOGUE_SIZE.
@
text
@d3162 2
a3163 2
pseudo-registers and the mechanisms described in @@ref{Target
Architecture Definition, , Using Different Register and Memory Data
@


1.286
log
@	* gdbint.texinfo: General round of cleanup and minor
	clarifications.
	(Breakpoint Handling): Remove mention of BREAKPOINT macro.
	(Longjmp Support): Update description to reflect how it is done
	for targets without using native header.
	(Symbol Handling): Add a little more general explanation.
	(COFF, ELF): Mention stabs encapsulation.
	(DWARF 3): New section.
	(Adding a New Host): Scrub out some obsolete bits.
	(Generic Host Support Files): Mention ser-pipe.c, ser-mingw.c.
	(Host Conditionals): Remove descriptions of NO_STD_REGS,
	HAVE_MMAP, HAVE_TERMIO, INT_MAX etc, LONGEST, HAVE_LONG_DOUBLE,
	PRINTF_HAS_LONG_DOUBLE, SCANF_HAS_LONG_DOUBLE, L_SET, SEEK_CUR,
	SEEK_SET, STOP_SIGNAL, USG.
	(Raw and Virtual Register Representations): Ditto for
	DEPRECATED_REGISTER_RAW_SIZE, DEPRECATED_REGISTER_VIRTUAL_SIZE,
	DEPRECATED_REGISTER_VIRTUAL_TYPE, REGISTER_CONVERT_TO_TYPE.
	(Target Conditionals): Ditto for DEPRECATED_FP_REGNUM,
	DEPRECATED_FRAMELESS_FUNCTION_INVOCATION, DEPRECATED_FRAME_CHAIN,
	DEPRECATED_FRAME_CHAIN_VALID, DEPRECATED_FRAME_INIT_SAVED_REGS,
	DEPRECATED_FRAME_SAVED_PC, DEPRECATED_FUNCTION_START_OFFSET,
	DEPRECATED_REGISTER_VIRTUAL_SIZE,
	DEPRECATED_REGISTER_VIRTUAL_TYPE,
	DEPRECATED_USE_STRUCT_CONVENTION.
	Describe gdbarch_deprecated_fp_regnum.
	Update description of gdbarch_print_insn.
	(Adding a New Target): Scrub out obsolete bits.
	(Obsolete Conditionals): Remove entire section.
@
text
@a3659 7
@@item FUNCTION_EPILOGUE_SIZE
@@findex FUNCTION_EPILOGUE_SIZE
For some COFF targets, the @@code{x_sym.x_misc.x_fsize} field of the
function end symbol is 0.  For such targets, you must define
@@code{FUNCTION_EPILOGUE_SIZE} to expand into the standard size of a
function's epilogue.

@


1.285
log
@	Scrub remnants of IN_SOLIB_DYNSYM_RESOLVE_CODE.
	* gdbarch.sh: Adjust comment to refer to
	in_solib_dynsym_resolve_code().
	* gdbarch.h, gdbarch.c: Update.
	* solib-osf.c: Ditto.
	* infrun.c: Ditto.
	(handle_inferior_event): Use in_solib_dynsym_resolve_code
	unconditionally.
	* config/mips/nm-irix5.h: Remove undef of
	IN_SOLIB_DYNSYM_RESOLVE_CODE.

	* gdbint.texinfo: Refer to target_so_ops.in_dynsym_resolve_code
	instead of IN_SOLIB_DYNSYM_RESOLVE_CODE.
@
text
@d193 4
a196 3
Defines and include files needed to build on the host are host support.
Examples are tty support, system defined types, host byte order, host
float format.
d205 1
a205 1
host and target are not the same, doing a fork to start the target
d215 2
a216 2
When you want to make @@value{GDBN} work ``native'' on a particular machine, you
have to include all three kinds of information.
a510 4
@@findex BREAKPOINT
The basic definition of the software breakpoint is the macro
@@code{BREAKPOINT}.

d574 7
a580 5
@@code{gdbarch_get_longjmp_target}, which will examine the @@code{jmp_buf}
structure and extract the longjmp target address.  Since @@code{jmp_buf}
is target specific, you will need to define it in the appropriate
@@file{tm-@@var{target}.h} file.  Look in @@file{tm-sun4os4.h} and
@@file{sparc-tdep.c} for examples of how to do this.
d651 2
d660 1
d806 3
d1049 2
a1050 2
@@value{GDBN} has several user interfaces.  Although the command-line interface
is the most common and most familiar, there are others.
d1963 15
a1977 2
Symbols are a key part of @@value{GDBN}'s operation.  Symbols include variables,
functions, and types.
d1988 3
a1990 2
more symbols via the @@samp{add-file} and @@samp{load} commands, or while
reading symbols from shared libraries.
d2229 4
a2232 3
was a step forward, the debugging information was woefully limited.  For
instance, it was not possible to represent code that came from an
included file.
d2272 4
a2275 3
The ELF format came with System V Release 4 (SVR4) Unix.  ELF is similar
to COFF in being organized into a number of sections, but it removes
many of COFF's limitations.
d2316 2
d2348 5
d2368 4
a2371 4
debugging symbols.  Generally @@value{GDBN} will have to call swapping routines
from BFD and a few other BFD internal routines to locate the debugging
information.  As much as possible, @@value{GDBN} should not depend on the BFD
internal data structures.
d2562 4
a2565 3
This file once contained both host and native configuration information
(@@pxref{Native Debugging}) for the machine @@var{xyz}.  The host
configuration information is now handed by Autoconf.
d2567 1
a2567 2
Host configuration information included a definition of
@@code{XM_FILE=xm-@@var{xyz}.h} and possibly definitions for @@code{CC},
d2571 1
a2571 1
New host only configurations do not need this file.
d2573 1
a2573 11
@@item gdb/config/@@var{arch}/xm-@@var{xyz}.h
This file once contained definitions and includes required when hosting
gdb on machine @@var{xyz}.  Those definitions and includes are now
handled by Autoconf.

New host and native configurations do not need this file.

@@emph{Maintainer's note: Some hosts continue to use the @@file{xm-xyz.h}
file to define the macros @@var{HOST_FLOAT_FORMAT},
@@var{HOST_DOUBLE_FORMAT} and @@var{HOST_LONG_DOUBLE_FORMAT}.  That code
also needs to be replaced with either an Autoconf or run-time test.}
d2575 3
a2577 1
@@end table
d2583 1
a2583 9
various systems.  These can be customized in various ways by macros
defined in your @@file{xm-@@var{xyz}.h} file.  If these routines work for
the @@var{xyz} host, you can just include the generic file's name (with
@@samp{.o}, not @@samp{.c}) in @@code{XDEPFILES}.

Otherwise, if your machine needs custom support routines, you will need
to write routines that perform the same functions as the generic file.
Put them into @@code{@@var{xyz}-xdep.c}, and put @@code{@@var{xyz}-xdep.o}
into @@code{XDEPFILES}.
d2589 10
a2598 3
This contains serial line support for Unix systems.  This is always
included, via the makefile variable @@code{SER_HARDWIRE}; override this
variable in the @@file{.mh} file to avoid it.
d2606 2
a2607 1
This contains generic TCP support using sockets.
d2614 7
a2620 3
attributes of the host system.  These macros and their meanings (or if
the meaning is not documented here, then one of the source files where
they are used is indicated) are:
a2626 3
@@item NO_STD_REGS
This macro is deprecated.

a2650 18
@@item FOPEN_RB
Define this if binary files are opened the same way as text files.

@@item HAVE_MMAP
@@findex mmap
In some cases, use the system call @@code{mmap} for reading symbol
tables.  For some machines this allows for sharing and quick updates.

@@item HAVE_TERMIO
Define this if the host system has @@code{termio.h}.

@@item INT_MAX
@@itemx INT_MIN
@@itemx LONG_MAX
@@itemx UINT_MAX
@@itemx ULONG_MAX
Values for host-side constants.

d2654 2
a2655 4
@@item LONGEST
This is the longest integer type available on the host.  If not defined,
it will default to @@code{long long} or @@code{long}, depending on
@@code{CC_HAS_LONG_LONG}.
a2666 14
@@item HAVE_LONG_DOUBLE
Define this if the host C compiler supports @@code{long double}.  This is
set by the @@code{configure} script.

@@item PRINTF_HAS_LONG_DOUBLE
Define this if the host can handle printing of long double float-point
numbers via the printf format conversion specifier @@code{Lg}.  This is
set by the @@code{configure} script.

@@item SCANF_HAS_LONG_DOUBLE
Define this if the host can handle the parsing of long double
float-point numbers via the scanf format conversion specifier
@@code{Lg}.  This is set by the @@code{configure} script.

a2671 5
@@item L_SET
This macro is used as the argument to @@code{lseek} (or, most commonly,
@@code{bfd_seek}).  FIXME, should be replaced by SEEK_SET instead,
which is the POSIX equivalent.

a2684 14
@@item SEEK_CUR
@@itemx SEEK_SET
Define these to appropriate value for the system @@code{lseek}, if not already
defined.

@@item STOP_SIGNAL
This is the signal for stopping @@value{GDBN}.  Defaults to
@@code{SIGTSTP}.  (Only redefined for the Convex.)

@@item USG
Means that System V (prior to SVR4) include files are in use.  (FIXME:
This symbol is abused in @@file{infrun.c}, @@file{regex.c}, and
@@file{utils.c} for other things, at the moment.)

d2953 2
d3094 1
a3094 1
@@deftypefun int gdbarch_address_class_name_to_type_flags (struct gdbarch *@@var{current_gdbarch}, int @@var{name}, int *var{type_flags_ptr})
a3217 19
@@deftypefn {Target Macro} int DEPRECATED_REGISTER_RAW_SIZE (int @@var{reg})
The size of register number @@var{reg}'s raw value.  This is the number
of bytes the register will occupy in @@code{registers}, or in a @@value{GDBN}
remote protocol packet.
@@end deftypefn

@@deftypefn {Target Macro} int DEPRECATED_REGISTER_VIRTUAL_SIZE (int @@var{reg})
The size of register number @@var{reg}'s value, in its virtual format.
This is the size a @@code{struct value}'s buffer will have, holding that
register's value.
@@end deftypefn

@@deftypefn {Target Macro} struct type *DEPRECATED_REGISTER_VIRTUAL_TYPE (int @@var{reg})
This is the type of the virtual representation of register number
@@var{reg}.  Note that there is no need for a macro giving a type for the
register's raw form; once the register's value has been obtained, @@value{GDBN}
always uses the virtual form.
@@end deftypefn

d3220 1
a3220 1
should always be @@code{DEPRECATED_REGISTER_VIRTUAL_TYPE (@@var{reg})}.  The buffer
d3235 1
a3235 1
should always be @@code{DEPRECATED_REGISTER_VIRTUAL_TYPE (@@var{reg})}.  The buffer
a3321 4
@@deftypefn {Target Macro} void REGISTER_CONVERT_TO_TYPE (int @@var{regnum}, struct type *@@var{type}, char *@@var{buf})
See @@file{mips-tdep.c}.  It does not do what you want.
@@end deftypefn

a3582 14
@@item DEPRECATED_FP_REGNUM
@@findex DEPRECATED_FP_REGNUM
If the virtual frame pointer is kept in a register, then define this
macro to be the number (greater than or equal to zero) of that register.

This should only need to be defined if @@code{DEPRECATED_TARGET_READ_FP}
is not defined.

@@item DEPRECATED_FRAMELESS_FUNCTION_INVOCATION(@@var{fi})
@@findex DEPRECATED_FRAMELESS_FUNCTION_INVOCATION
Define this to an expression that returns 1 if the function invocation
represented by @@var{fi} does not have a stack frame associated with it.
Otherwise return 0.

a3617 21
@@item DEPRECATED_FRAME_CHAIN(@@var{frame})
@@findex DEPRECATED_FRAME_CHAIN
Given @@var{frame}, return a pointer to the calling frame.

@@item DEPRECATED_FRAME_CHAIN_VALID(@@var{chain}, @@var{thisframe})
@@findex DEPRECATED_FRAME_CHAIN_VALID
Define this to be an expression that returns zero if the given frame is an
outermost frame, with no caller, and nonzero otherwise.  Most normal
situations can be handled without defining this macro, including @@code{NULL}
chain pointers, dummy frames, and frames whose PC values are inside the
startup file (e.g.@@: @@file{crt0.o}), inside @@code{main}, or inside
@@code{_start}.

@@item DEPRECATED_FRAME_INIT_SAVED_REGS(@@var{frame})
@@findex DEPRECATED_FRAME_INIT_SAVED_REGS
See @@file{frame.h}.  Determines the address of all registers in the
current stack frame storing each in @@code{frame->saved_regs}.  Space for
@@code{frame->saved_regs} shall be allocated by
@@code{DEPRECATED_FRAME_INIT_SAVED_REGS} using
@@code{frame_saved_regs_zalloc}.

a3625 7
@@item DEPRECATED_FRAME_SAVED_PC(@@var{frame})
@@findex DEPRECATED_FRAME_SAVED_PC
@@anchor{DEPRECATED_FRAME_SAVED_PC} Given @@var{frame}, return the pc
saved there.  This is the return address.

This method is deprecated. @@xref{gdbarch_unwind_pc}.

a3641 1
@@xref{DEPRECATED_FRAME_SAVED_PC}, which this method replaces.
a3666 15
@@item DEPRECATED_FUNCTION_START_OFFSET
@@findex DEPRECATED_FUNCTION_START_OFFSET
An integer, giving the offset in bytes from a function's address (as
used in the values of symbols, function pointers, etc.), and the
function's first genuine instruction.

This is zero on almost all machines: the function's address is usually
the address of its first instruction.  However, on the VAX, for
example, each function starts with two bytes containing a bitmask
indicating which registers to save upon entry to the function.  The
VAX @@code{call} instructions check this value, and save the
appropriate registers automatically.  Thus, since the offset from the
function's address to its first instruction is two bytes,
@@code{DEPRECATED_FUNCTION_START_OFFSET} would be 2 on the VAX.

d3678 8
a3685 8
For most machines, this is a target-dependent parameter.  On the
DECstation and the Iris, this is a native-dependent parameter, since
the header file @@file{setjmp.h} is needed to define it.

This macro determines the target PC address that @@code{longjmp} will jump to,
assuming that we have just stopped at a @@code{longjmp} breakpoint.  It takes a
@@code{CORE_ADDR *} as argument, and stores the target PC value through this
pointer.  It examines the current state of the machine as needed.
d3691 1
a3691 1
feature-specific macros.  It was introduced in a haste and we are
a3787 12
@@item DEPRECATED_REGISTER_VIRTUAL_SIZE (@@var{reg})
@@findex DEPRECATED_REGISTER_VIRTUAL_SIZE
Return the virtual size of @@var{reg}; defaults to the size of the
register's virtual type.
Return the virtual size of @@var{reg}.
@@xref{Target Architecture Definition, , Raw and Virtual Register Representations}.

@@item DEPRECATED_REGISTER_VIRTUAL_TYPE (@@var{reg})
@@findex REGISTER_VIRTUAL_TYPE
Return the virtual type of @@var{reg}.
@@xref{Target Architecture Definition, , Raw and Virtual Register Representations}.

d3790 3
a3792 3
If defined, return the type of register @@var{reg}.  This function
supersedes @@code{DEPRECATED_REGISTER_VIRTUAL_TYPE}.  @@xref{Target Architecture
Definition, , Raw and Virtual Register Representations}.
a3880 1
@@findex DEPRECATED_PUSH_ARGUMENTS.
a3890 2
This method replaces @@code{DEPRECATED_PUSH_ARGUMENTS}.

d3905 1
a3905 2
This method replaces @@w{@@code{gdbarch_call_dummy_location (@@var{gdbarch})}} and
@@code{DEPRECATED_REGISTER_SIZE}.
d3984 5
d4075 8
a4082 4
Returns a @@code{(register, offset)} pair representing the virtual frame
pointer in use at the code address @@var{pc}.  If virtual frame pointers
are not used, a default definition simply returns
@@code{DEPRECATED_FP_REGNUM}, with an offset of zero.
d4093 6
a4098 8
debugged memory and returns the length of the instruction, in bytes.  If
a target doesn't define its own printing routine, it defaults to an
accessor function for the global pointer
@@code{deprecated_tm_print_insn}.  This usually points to a function in
the @@code{opcodes} library (@@pxref{Support Libraries, ,Opcodes}).
@@var{info} is a structure (of type @@code{disassemble_info}) defined in
@@file{include/dis-asm.h} used to pass information to the instruction
decoding routine.
a4106 12
@@item DEPRECATED_USE_STRUCT_CONVENTION (@@var{gcc_p}, @@var{type})
@@findex DEPRECATED_USE_STRUCT_CONVENTION
If defined, this must be an expression that is nonzero if a value of the
given @@var{type} being returned from a function must have space
allocated for it on the stack.  @@var{gcc_p} is true if the function
being considered is known to have been compiled by GCC; this is helpful
for systems where GCC is known to use different calling convention than
other compilers.

This method has been deprecated in favour of @@code{gdbarch_return_value}
(@@pxref{gdbarch_return_value}).

d4142 5
a4146 7
@@samp{TDEPFILES=@@dots{}} and @@samp{TDEPLIBS=@@dots{}}.  Also specifies
the header file which describes @@var{ttt}, by defining @@samp{TM_FILE=
tm-@@var{ttt}.h}.

You can also define @@samp{TM_CFLAGS}, @@samp{TM_CLIBS}, @@samp{TM_CDEPS},
but these are now deprecated, replaced by autoconf, and may go away in
future versions of @@value{GDBN}.
d4150 1
a4150 5
some machines it doesn't exist at all.  Sometimes the macros in
@@file{tm-@@var{ttt}.h} become very complicated, so they are implemented
as functions here instead, and the macro is simply defined to call the
function.  This is vastly preferable, since it is easier to understand
and debug.
d4154 3
a4156 19
This often exists to describe the basic layout of the target machine's
processor chip (registers, stack, etc.).  If used, it is included by
@@file{@@var{ttt}-tdep.h}.  It can be shared among many targets that use
the same processor.

@@item gdb/config/@@var{arch}/tm-@@var{ttt}.h
(@@file{tm.h} is a link to this file, created by @@code{configure}).  Contains
macro definitions about the target machine's registers, stack frame
format and instructions.

New targets do not need this file and should not create it.

@@item gdb/config/@@var{arch}/tm-@@var{arch}.h
This often exists to describe the basic layout of the target machine's
processor chip (registers, stack, etc.).  If used, it is included by
@@file{tm-@@var{ttt}.h}.  It can be shared among many targets that use the
same processor.

New targets do not need this file and should not create it.
d4160 4
a4163 6
If you are adding a new operating system for an existing CPU chip, add a
@@file{config/tm-@@var{os}.h} file that describes the operating system
facilities that are unusual (extra symbol table info; the breakpoint
instruction needed; etc.).  Then write a @@file{@@var{arch}/tm-@@var{os}.h}
that just @@code{#include}s @@file{tm-@@var{arch}.h} and
@@file{config/tm-@@var{os}.h}.
d4359 4
a4362 1
systems for this purpose; they are named @@file{*-stub.c}.
a4576 4
For most machines, this is a target-dependent parameter.  On the
DECstation and the Iris, this is a native-dependent parameter, since
@@file{setjmp.h} is needed to define it.

a6989 21
@@section Obsolete Conditionals
@@cindex obsolete code

Fragments of old code in @@value{GDBN} sometimes reference or set the following
configuration macros.  They should not be used by new code, and old uses
should be removed as those parts of the debugger are otherwise touched.

@@table @@code
@@item STACK_END_ADDR
This macro used to define where the end of the stack appeared, for use
in interpreting core file formats that don't record this address in the
core file itself.  This information is now configured in BFD, and @@value{GDBN}
gets the info portably from there.  The values in @@value{GDBN}'s configuration
files should be moved into BFD configuration files (if needed there),
and deleted from all of @@value{GDBN}'s config files.

Any @@file{@@var{foo}-xdep.c} file that references STACK_END_ADDR
is so old that it has never been converted to use BFD.  Now that's old!

@@end table

@


1.284
log
@	* gdbarch.sh: Delete dwarf_reg_to_regnum.
	* gdbarch.c, gdbarch.h: Regenerated.
	* amd64-tdep.c, arm-tdep.c, h8300-tdep.c, hppa-linux-tdep.c,
	hppa-tdep.c, i386-tdep.c, m32c-tdep.c, m68k-tdep.c, mips-tdep.c,
	s390-tdep.c, xtensa-tdep.c: Do not set dwarf_reg_to_regnum.

	* gdbint.texinfo (Target Conditionals): Delete entry for
	gdbarch_dwarf_reg_to_regnum.
@
text
@d3828 2
a3829 2
@@item IN_SOLIB_DYNSYM_RESOLVE_CODE (@@var{pc})
@@findex IN_SOLIB_DYNSYM_RESOLVE_CODE
@


1.283
log
@* target.h (struct target_ops): Add
to_watchpoint_addr_within_range.
(target_watchpoint_addr_within_range): New function.
* target.c (update_current_target): Inherit
to_watchpoint_addr_within_range, defaulting to
default_watchpoint_addr_within_range.
(default_watchpoint_addr_within_range): New function.
(debug_to_watchpoint_addr_within_range): New function.
(setup_target_debug): Set to_watchpoint_addr_within_range.
* ppc-linux-nat.c (ppc_linux_watchpoint_addr_within_range):
New function.
(_initialize_ppc_linux_nat): Set to_watchpoint_addr_within_range.
* breakpoint.c (watchpoints_triggered): Use
target_watchpoint_addr_within_range.

* gdbint.texinfo (Algorithms): Describe
target_watchpoint_addr_within_range.
@
text
@a3625 5
@@item int gdbarch_dwarf_reg_to_regnum (@@var{gdbarch}, @@var{dwarf_regnr})
@@findex gdbarch_dwarf_reg_to_regnum
Convert DWARF register number @@var{dwarf_regnr} into @@value{GDBN} regnum.  If
not defined, no conversion will be performed.

@


1.282
log
@	Convert frame unwinders to use the current frame and
	"struct value".

	* frame.c (frame_debug): Make global.
	(get_frame_id): Pass this frame to unwinder routines.
	(frame_pc_unwind): Remove unused unwind->prev_pc support.
	(do_frame_register_read): Do not discard the return value of
	frame_register_read.
	(frame_register_unwind): Remove debug messages.  Use
	frame_unwind_register_value.
	(frame_unwind_register_value, get_frame_register_value): New
	functions.
	(create_new_frame, get_frame_base_address, get_frame_locals_address)
	(get_frame_args_address, get_frame_type): Pass this frame to
	unwinder routines.
	(frame_cleanup_after_sniffer, frame_prepare_for_sniffer): New
	functions.
	* frame.h: Update comments.
	(frame_debug, frame_unwind_register_value, get_frame_register_value)
	(frame_prepare_for_sniffer): Declare.
	* frame-unwind.h: Update comments and parameter names.
	(default_frame_sniffer): Declare.
	(frame_prev_register_ftype): Return a struct value *.
	(struct frame_unwind): Remove prev_pc member.
	(frame_unwind_sniffer_ftype, frame_unwind_append_sniffer): Delete.
	(frame_unwind_append_unwinder, frame_unwind_got_optimized)
	(frame_unwind_got_register, frame_unwind_got_memory)
	(frame_unwind_got_constant, frame_unwind_got_address): Declare.
	* frame-base.h: Update comments and parameter names.
	* valops.c (value_fetch_lazy): Use get_frame_register_value.  Iterate
	if necessary.  Add debugging output.
	* sentinel-frame.c (sentinel_frame_prev_register)
	(sentinel_frame_this_id): Update for new signature.
	(sentinel_frame_prev_pc): Delete.
	(sentinel_frame_unwinder): Remove prev_pc.
	* ia64-tdep.c (ia64_libunwind_frame_unwind): Do not initialize
	prev_pc.
	* libunwind-frame.c (libunwind_frame_unwind): Likewise.
	* frame-unwind.c (struct frame_unwind_table_entry): Remove sniffer.
	(frame_unwind_append_sniffer): Delete.
	(frame_unwind_append_unwinder): New function.
	(frame_unwind_find_by_frame): Take this frame.  Only use sniffers
	from unwinders.  Use frame_prepare_for_sniffer.
	(default_frame_sniffer, frame_unwind_got_optimized)
	(frame_unwind_got_register, frame_unwind_got_memory)
	(frame_unwind_got_constant, frame_unwind_got_address): New functions.
	* dummy-frame.c (dummy_frame_sniffer): Use gdbarch_dummy_id.
	(dummy_frame_prev_register, dummy_frame_this_id): Update for new
	signature.
	* gdbarch.sh: Replace unwind_dummy_id with dummy_id.
	* gdbarch.c, gdbarch.c: Regenerated.
	* frame-base.c (default_frame_base_address)
	(default_frame_locals_address, default_frame_args_address): Update
	for new signature.
	(frame_base_find_by_frame): Pass this frame to unwinder routines.
	* infcall.c (call_function_by_hand): Update comments.
	* Makefile.in (frame-unwind.o): Update dependencies.

	* gdbint.texinfo (Stack Frames): New chapter.
	(Algorithms): Move Frames text to the new chapter.
	(Target Conditionals): Delete SAVE_DUMMY_FRAME_TOS.  Document
	gdbarch_dummy_id instead of gdbarch_unwind_dummy_id.
@
text
@d12 1
a12 1
   2002, 2003, 2004, 2005, 2006
d714 9
d726 1
a726 1
watchpoint to step over it.    Like @@code{gdbarch_have_nonsteppable_watchpoint},
@


1.281
log
@      * NEWS: Add information on compressed debug sections.
      * doc/gdb.texinfo (Requirements): Add an optional requirement
      on zlib.
      * doc/gdbint.texinfo (Debugging File Formats): Add new
      subsection for Compressed DWARF 2.
@
text
@d79 1
a276 33
@@section Frames

@@cindex frame
@@cindex call stack frame
A frame is a construct that @@value{GDBN} uses to keep track of calling
and called functions.

@@cindex frame, unwind
@@value{GDBN}'s frame model, a fresh design, was implemented with the
need to support @@sc{dwarf}'s Call Frame Information in mind.  In fact,
the term ``unwind'' is taken directly from that specification.
Developers wishing to learn more about unwinders, are encouraged to
read the @@sc{dwarf} specification.

@@findex frame_register_unwind
@@findex get_frame_register
@@value{GDBN}'s model is that you find a frame's registers by
``unwinding'' them from the next younger frame.  That is,
@@samp{get_frame_register} which returns the value of a register in
frame #1 (the next-to-youngest frame), is implemented by calling frame
#0's @@code{frame_register_unwind} (the youngest frame).  But then the
obvious question is: how do you access the registers of the youngest
frame itself?

@@cindex sentinel frame
@@findex get_frame_type
@@vindex SENTINEL_FRAME
To answer this question, GDB has the @@dfn{sentinel} frame, the
``-1st'' frame.  Unwinding registers from the sentinel frame gives you
the current values of the youngest real frame's registers.  If @@var{f}
is a sentinel frame, then @@code{get_frame_type (@@var{f}) ==
SENTINEL_FRAME}.

d1824 121
a4034 8
@@item SAVE_DUMMY_FRAME_TOS (@@var{sp})
@@findex SAVE_DUMMY_FRAME_TOS
@@anchor{SAVE_DUMMY_FRAME_TOS} Used in @@samp{call_function_by_hand} to
notify the target dependent code of the top-of-stack value that will be
passed to the inferior code.  This is the value of the @@code{SP}
after both the dummy frame and space for parameters/results have been
allocated on the stack.  @@xref{gdbarch_unwind_dummy_id}.

d4216 3
a4218 3
@@item frame_id gdbarch_unwind_dummy_id (@@var{gdbarch}, @@var{frame})
@@findex gdbarch_unwind_dummy_id
@@anchor{gdbarch_unwind_dummy_id} Given @@var{frame} return a @@w{@@code{struct
d4221 1
a4221 2
previously saved using @@code{SAVE_DUMMY_FRAME_TOS}.
@@xref{SAVE_DUMMY_FRAME_TOS}.
@


1.280
log
@	Add script to build and test GDB using enable-targets=all.

	* gdb_buildall.sh: New file.

doc/
        * gdbint.texinfo (Build Script): New section. Mention new build script
        gdb_buildall.sh.
@
text
@d2204 23
@


1.279
log
@	* fork-child.c (SHELL_FILE): Remove #ifndef.
	(fork_inferior): Remove SHELL_COMMAND_CONCAT.

	* gdbint.texinfo (Native Conditionals): Remove
	SHELL_COMMAND_CONCAT and SHELL_FILE.
@
text
@d7061 15
@


1.278
log
@	* gdbarch.sh (function_list): Add new property bits_big_endian to
	gdbarch structure.
	* gdbarch.{c,h}: Regenerate.

	* value.c (struct value): Replace BITS_BIG_ENDIAN by
	gdbarch_bits_big_endian (comment).
	(unpack_field_as_long, modify_field): Likewise.
	* value.h: Likewise (comment).
	* valops.c (value_slice): Likewise.
	* valarith.c (value_subscript, value_bit_index): Likewise.
	* gdbtypes.h (field): Likewise (comment).
	* eval.c (evaluate_subexp_standard): Likewise.
	* dwarf2read.c (dwarf2_add_field): Likewise.
	* ada-lang.c (decode_packed_array, ada_value_primitive_packed_val)
	(move_bits, ada_value_assign, value_assign_to_component): Likewise.

	* defs.h (BITS_BIG_ENDIAN): Remove.



	* gdbint.texinfo (Target Conditionals): Replace the description of
	BITS_BIG_ENDIAN with a description of gdbarch_bits_big_endian.
@
text
@a4646 10
@@item SHELL_COMMAND_CONCAT
@@findex SHELL_COMMAND_CONCAT
If defined, is a string to prefix on the shell command used to start the
inferior.

@@item SHELL_FILE
@@findex SHELL_FILE
If defined, this is the name of the shell to use to run the inferior.
Defaults to @@code{"/bin/sh"}.

@


1.277
log
@	gdb/
	* main.c (captured_main): Remove 'count' varible and the
	ALIGN_STACK_ON_ENTRY block that used it.  Error out if --core and
	--pid options were issued simultaneously.  If an explicit pid
	option was passed, don't fallback to core file.  Detect extra
	arguments better in the presence of explicit pid or core
	arguments.

	gdb/doc/
	* gdbint.texinfo (Host Conditionals): Remove mention of
	ALIGN_STACK_ON_ENTRY.
@
text
@d3347 4
a3350 4
@@item BITS_BIG_ENDIAN
@@findex BITS_BIG_ENDIAN
Define this if the numbering of bits in the targets does @@strong{not} match the
endianness of the target byte order.  A value of 1 means that the bits
d3353 6
@


1.276
log
@        * gdbint.texinfo (Start of New Year Procedure): Add item
        describing how to update the source and documentation copyright
        notices.
@
text
@a2492 7
@@item ALIGN_STACK_ON_STARTUP
@@cindex stack alignment
Define this if your system is of a sort that will crash in
@@code{tgetent} if the stack happens not to be longword-aligned when
@@code{main} is called.  This is a rare situation, but is known to occur
on several different types of systems.

@


1.275
log
@	Remove CLEAR_SOLIB use.
	* corelow.c (core_close): Don't check for CLEAR_SOLIB.
	* infcmd.c (attach_command): Likewise.
@
text
@d5976 6
@


1.274
log
@	* amd64-tdep.c (amd64_convert_register_p): Delete.
	(amd64_init_abi): Use i387_convert_register_p.
	* alpha-tdep.c (alpha_convert_register_p): Return zero for
	eight byte types.
	(alpha_register_to_value, alpha_value_to_register): Do not handle
	eight byte types.
	* i386-tdep.c (i386_convert_register_p): Use i387_convert_register_p.
	* i387-tdep.c (i387_convert_register_p): New.
	(i387_register_to_value, i387_value_to_register): Update comments.
	* i387-tdep.h (i387_convert_register_p): Declare.
	* ia64-tdep.c (ia64_convert_register_p): Return zero for
	builtin_type_ia64_ext.
	(ia64_gdbarch_init): Do not initialize builtin_type_ia64_ext here.
	(_initialize_ia64_tdep): Initialize builtin_type_ia64_ext here.
	* m68k-tdep.c (m68k_convert_register_p): Return zero for
	builtin_type_m68881_ext.
	(m68k_register_to_value, m68k_value_to_register): Update comments.

	* gdbint.texinfo (Register and Memory Data, Target Conditionals):
	Document that gdbarch_convert_register_p should return zero for no-op
	conversions.
@
text
@a4677 4
@@item CLEAR_SOLIB
@@findex CLEAR_SOLIB
See @@file{objfiles.c}.

@


1.273
log
@	* gdbarch.texi (Compiler Characteristics): Move documentation
	of set_gdbarch_sofun_address_maybe_missing back to ...
	(Target Conditionals): ... here to fix build break.
@
text
@d3229 3
d3468 2
a3469 2
Return non-zero if register @@var{regnum} can represent data values in a
non-standard form.
@


1.272
log
@
	* gdbarch.sh (sofun_address_maybe_missing): New gdbarch variable.
	* gdbarch.c, gdbarch.h: Regenerate.
	* dbxread.c (find_stab_function_addr): Define unconditionally.
	(read_dbx_symtab): Use gdbarch_sofun_address_maybe_missing
	instead of SOFUN_ADDRESS_MAYBE_MISSING.
	(end_psymtab): Likewise.
	(process_one_symbol): Likewise.
	* mdebugread.c (parse_partial_symbols): Likewise.

	* symtab.h (struct minimal_symbol): Always define "filename" member.
	* elfread.c (elf_symtab_read): Use msym->filename unconditionally.
	* minsyms.c (lookup_minimal_symbol): Likewise.
	* symmisc.c (dump_msymbols): Likewise.

	* config/i386/i386sol2.mt (DEPRECATED_TM_FILE): Remove.
	* config/i386/linux.mt (DEPRECATED_TM_FILE): Remove.
	* config/i386/tm-i386sol2.h: Remove file.
	* config/i386/tm-linux.h: Remove file.
	* i386-linux-tdep.c (i386_linux_init_abi): Add call to
	set_gdbarch_sofun_address_maybe_missing.
	* i386-sol2-tdep.c (i386_sol2_init_abi): Likewise.

	* config/powerpc/linux.mt (DEPRECATED_TM_FILE): Remove.
	* config/powerpc/nbsd.mt (DEPRECATED_TM_FILE): Remove.
	* config/powerpc/obsd.mt (DEPRECATED_TM_FILE): Remove.
	* config/powerpc/ppc-eabi.mt (DEPRECATED_TM_FILE): Remove.
	* config/powerpc/ppc-sim.mt (DEPRECATED_TM_FILE): Remove.
	* config/powerpc/tm-ppc-eabi.h: Remove file.
	* rs6000-tdep.c (rs6000_gdbarch_init): Add call to
	set_gdbarch_sofun_address_maybe_missing.

	* config/sparc/sol2-64.mt (DEPRECATED_TM_FILE): Remove.
	* config/sparc/sol2.mt (DEPRECATED_TM_FILE): Remove.
	* config/sparc/tm-sol2.h: Remove file.
	* sparc64-sol2-tdep.c (sparc64_sol2_init_abi): Add call to
	set_gdbarch_sofun_address_maybe_missing.
	* sparc-sol2-tdep.c (sparc32_sol2_init_abi): Likewise.

doc/ChangeLog:

	* gdbarch.texi (Target Conditionals): Remove documentation of
	SOFUN_ADDRESS_MAYBE_MISSING, replaced by ...
	(Compiler Characteristics): ... documentation of
	set_gdbarch_sofun_address_maybe_missing.
@
text
@a3266 32
@@item set_gdbarch_sofun_address_maybe_missing (@@var{gdbarch}, @@var{set})
@@findex set_gdbarch_sofun_address_maybe_missing
Somebody clever observed that, the more actual addresses you have in the
debug information, the more time the linker has to spend relocating
them.  So whenever there's some other way the debugger could find the
address it needs, you should omit it from the debug info, to make
linking faster.

Calling @@code{set_gdbarch_sofun_address_maybe_missing} with a non-zero
argument @@var{set} indicates that a particular set of hacks of this sort
are in use, affecting @@code{N_SO} and @@code{N_FUN} entries in stabs-format
debugging information.  @@code{N_SO} stabs mark the beginning and ending
addresses of compilation units in the text segment.  @@code{N_FUN} stabs
mark the starts and ends of functions.

In this case, @@value{GDBN} assumes two things:

@@itemize @@bullet
@@item
@@code{N_FUN} stabs have an address of zero.  Instead of using those
addresses, you should find the address where the function starts by
taking the function name from the stab, and then looking that up in the
minsyms (the linker/assembler symbol table).  In other words, the stab
has the name, and the linker/assembler symbol table is the only place
that carries the address.

@@item
@@code{N_SO} stabs have an address of zero, too.  You just look at the
@@code{N_FUN} stabs that appear before and after the @@code{N_SO} stab, and
guess the starting and ending addresses of the compilation unit from them.
@@end itemize

d3828 32
@


1.271
log
@	* frame.c (frame_unwind_unsigned_register): Delete.
	(frame_sp_unwind): Use frame_unwind_register_unsigned instead.
	* frame.h (frame_unwind_unsigned_register): Delete prototype.

	* alpha-linux-tdep.c, alpha-mdebug-tdep.c, alpha-tdep.c,
	avr-tdep.c, cris-tdep.c, frv-tdep.c, m68hc11-tdep.c, mn10300-tdep.c,
	mt-tdep.c: Replace frame_unwind_unsigned_register with
	frame_unwind_register_unsigned.

	* gdbint.texinfo (Target Conditionals): Use
	frame_unwind_register_unsigned in examples instead of
	frame_unwind_unsigned_register.
@
text
@d3267 32
a3859 32
@@item SOFUN_ADDRESS_MAYBE_MISSING
@@findex SOFUN_ADDRESS_MAYBE_MISSING
Somebody clever observed that, the more actual addresses you have in the
debug information, the more time the linker has to spend relocating
them.  So whenever there's some other way the debugger could find the
address it needs, you should omit it from the debug info, to make
linking faster.

@@code{SOFUN_ADDRESS_MAYBE_MISSING} indicates that a particular set of
hacks of this sort are in use, affecting @@code{N_SO} and @@code{N_FUN}
entries in stabs-format debugging information.  @@code{N_SO} stabs mark
the beginning and ending addresses of compilation units in the text
segment.  @@code{N_FUN} stabs mark the starts and ends of functions.

@@code{SOFUN_ADDRESS_MAYBE_MISSING} means two things:

@@itemize @@bullet
@@item
@@code{N_FUN} stabs have an address of zero.  Instead, you should find the
addresses where the function starts by taking the function name from
the stab, and then looking that up in the minsyms (the
linker/assembler symbol table).  In other words, the stab has the
name, and the linker/assembler symbol table is the only place that carries
the address.

@@item
@@code{N_SO} stabs have an address of zero, too.  You just look at the
@@code{N_FUN} stabs that appear before and after the @@code{N_SO} stab,
and guess the starting and ending addresses of the compilation unit from
them.
@@end itemize

@


1.270
log
@	* gdbarch.sh (deprecated_use_struct_convention): Remove.
	(extract_return_value, store_return_value): Remove.
	(return_value): Remove default implementation.
	* gdbarch.c, gdbarch.h: Regenerate.

	* stack.c (return_command): Remove compatibility hack.
	* arch-utils.c (legacy_return_value): Remove.
	* arch-utils.h (legacy_return_value): Likewise.

	* arch-utils.c (always_use_struct_convention): Remove.
	* arch-utils.h (always_use_struct_convention): Likewise.
	* value.c (generic_use_struct_convention): Remove.
	* defs.h (generic_use_struct_convention): Likewise.

doc/ChangeLog:

	* gdbint.texi (Target Conditionals): Remove documentation
	of and references to DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS,
	gdbarch_extract_return_value, and gdbarch_store_return_value.
@
text
@d3614 1
a3614 1
pc = frame_unwind_unsigned_register (next_frame, S390_PC_REGNUM);
d3631 1
a3631 1
sp = frame_unwind_unsigned_register (next_frame, S390_SP_REGNUM);
@


1.269
log
@	* cris-tdep.c (cris_push_dummy_call): Support arguments passed by
	reference.  Fix endianness bugs.
	(cris_reg_struct_has_address): Remove.
	(cris_gdbarch_init): Remove set_gdbarch_deprecated_reg_struct_has_addr
	and set_gdbarch_deprecated_use_struct_convention calls.

	* gdbarch.sh (deprecated_reg_struct_has_addr): Remove.
	* gdbarch.c, gdbarch.h: Regenerate.
	* infcall.c (call_function_by_hand): Remove handling of
	deprecated_reg_struct_has_addr.

doc/ChangeLog:

	* gdbint.texi (Target Conditionals): Remove documentation of
	and references to DEPRECATED_REG_STRUCT_HAS_ADDR.
@
text
@a3517 22
@@item void gdbarch_extract_return_value (@@var{gdbarch}, @@var{type}, @@var{regbuf}, @@var{valbuf})
@@findex gdbarch_extract_return_value
Define this to extract a function's return value of type @@var{type} from
the raw register state @@var{regbuf} and copy that, in virtual format,
into @@var{valbuf}.
 
This method has been deprecated in favour of @@code{gdbarch_return_value}
(@@pxref{gdbarch_return_value}).

@@item DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS(@@var{regbuf})
@@findex DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS
@@anchor{DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS}
When defined, extract from the array @@var{regbuf} (containing the raw
register state) the @@code{CORE_ADDR} at which a function should return
its structure value.

@@xref{gdbarch_return_value}.

@@item DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS_P()
@@findex DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS_P
Predicate for @@code{DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS}.

a3954 3
@@xref{DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS}, for a description of how
return-values that use the struct convention are handled.

a4005 9
@@item void gdbarch_store_return_value (@@var{gdbarch}, @@var{type}, @@var{regcache}, @@var{valbuf})
@@findex gdbarch_store_return_value
A function that writes the function return value, found in
@@var{valbuf}, into the @@var{regcache}.  @@var{type} is the type of the
value that is to be returned.

This method has been deprecated in favour of @@code{gdbarch_return_value}
(@@pxref{gdbarch_return_value}).

@


1.268
log
@	* dbxread.c (process_one_symbol): Remove VARIABLES_INSIDE_BLOCK
	checks.
	* config/arm/embed.mt, config/arm/linux.mt, config/arm/wince.mt: Do
	not set DEPRECATED_TM_FILE.
	* config/arm/tm-arm.h: Delete file.

	* gdbint.texinfo (Target Conditionals): Remove VARIABLES_INSIDE_BLOCK.
@
text
@a3891 1
@@findex DEPRECATED_REG_STRUCT_HAS_ADDR
a3895 3
This method replaces @@code{DEPRECATED_REG_STRUCT_HAS_ADDR}
(@@pxref{DEPRECATED_REG_STRUCT_HAS_ADDR}).

a3942 8
@@item DEPRECATED_REG_STRUCT_HAS_ADDR (@@var{gcc_p}, @@var{type})
@@findex DEPRECATED_REG_STRUCT_HAS_ADDR
@@anchor{DEPRECATED_REG_STRUCT_HAS_ADDR}Define this to return 1 if the
given type will be passed by pointer rather than directly.

This method has been replaced by @@code{gdbarch_stabs_argument_has_addr}
(@@pxref{gdbarch_stabs_argument_has_addr}).

@


1.267
log
@2007-09-16  Daniel Jacobowitz  <dan@@codesourcery.com>
	    Jeff Johnston  <jjohnstn@@redhat.com>

	* breakpoint.c (watchpoints_triggered): New.
	(bpstat_stop_status): Remove STOPPED_BY_WATCHPOINT argument.
	Check watchpoint_triggered instead.  Combine handling for software
	and hardware watchpoints.  Do not use target_stopped_data_address
	here.  Always check a watchpoint if its scope breakpoint triggers.
	Do not stop for thread or overlay events.  Improve check for
	triggered watchpoints without a value change.
	(watch_command_1): Insert the scope breakpoint first.  Link the
	scope breakpoint to the watchpoint.
	* breakpoint.h (enum watchpoint_triggered): New.
	(struct breakpoint): Add watchpoint_triggered.
	(bpstat_stop_status): Update prototype.
	(watchpoints_triggered): Declare.
	* infrun.c (enum infwait_status): Add infwait_step_watch_state.
	(stepped_after_stopped_by_watchpoint): Delete.
	(handle_inferior_event): Make stepped_after_stopped_by_watchpoint
	local.  Handle infwait_step_watch_state.  Update calls to
	bpstat_stop_status.  Use watchpoints_triggered to check
	watchpoints.
	* remote.c (stepped_after_stopped_by_watchpoint): Remove extern.
	(remote_stopped_data_address): Do not check it.

	* gdb.texinfo (Setting Watchpoints): Adjust warning text about
	multi-threaded watchpoints.
	* gdbint.texinfo (Watchpoints): Describe how watchpoints are
	checked.  Describe sticky notification.  Expand description
	of steppable and continuable watchpoints.
	(Watchpoints and Threads): New subsection.

	* gdb.threads/watchthreads.c (thread_function): Sleep between
	iterations.
	* gdb.threads/watchthreads.exp: Allow two watchpoints to trigger
	at once for S/390.  Generate matching fails and passes.
@
text
@a4180 9
@@item VARIABLES_INSIDE_BLOCK (@@var{desc}, @@var{gcc_p})
@@findex VARIABLES_INSIDE_BLOCK
For dbx-style debugging information, if the compiler puts variable
declarations inside LBRAC/RBRAC blocks, this should be defined to be
nonzero.  @@var{desc} is the value of @@code{n_desc} from the
@@code{N_RBRAC} symbol, and @@var{gcc_p} is true if @@value{GDBN} has noticed the
presence of either the @@code{GCC_COMPILED_SYMBOL} or the
@@code{GCC2_COMPILED_SYMBOL}.  By default, this is 0.

@


1.266
log
@2007-07-05  Markus Deuling  <deuling@@de.ibm.com>

	* gdbint.texinfo (PC_LOAD_SEGMENT): Remove description.
@
text
@d663 20
a682 9
For a data-write watchpoint, it does so by evaluating, for each
watchpoint, the expression whose value is being watched, and testing
whether the watched value has changed.  For data-read and data-access
watchpoints, @@value{GDBN} needs the target to supply a primitive that
returns the address of the data that was accessed or read (see the
description of @@code{target_stopped_data_address} below): if this
primitive returns a valid address, @@value{GDBN} infers that a
watchpoint triggered if it watches an expression whose evaluation uses
that address.
d735 10
a744 5
@@var{addr_p} and return non-zero.  Otherwise, return zero.  Note that
this primitive is used by @@value{GDBN} only on targets that support
data-read or data-access type watchpoints, so targets that have
support only for data-write watchpoints need not implement these
primitives.
d749 6
a754 1
watchpoint to step over it.
d759 3
a761 1
watchpoint to step the inferior over it.
d766 3
a768 1
inferior after a watchpoint has been hit.
d791 26
@


1.265
log
@(Target Conditionals): Fix last change.
@
text
@a3830 5
@@item PC_LOAD_SEGMENT
@@findex PC_LOAD_SEGMENT
If defined, print information about the load segment for the program
counter.  (Defined only for the RS/6000.)

@


1.264
log
@2007-07-03  Markus Deuling  <deuling@@de.ibm.com>

	* gdb.texinfo: Replace following macros by their appropriate gdbarch
	routines:
	(TARGET_CHAR_SIGNED, CALL_DUMMY_LOCATION, CANNOT_FETCH_REGISTER)
	(CANNOT_STORE_REGISTER, GET_LONGJMP_TARGET, POINTER_TO_ADDRESS)
	(ADDRESS_TO_POINTER, INNER_THAN, FRAME_NUM_ARGS)
	(HAVE_NONSTEPPABLE_WATCHPOINT, TARGET_SHORT_BIT, TARGET_INT_BIT)
	(TARGET_LONG_BIT, TARGET_LONG_LONG_BIT, TARGET_FLOAT_BIT)
	(TARGET_DOUBLE_BIT, TARGET_LONG_DOUBLE_BIT, TARGET_PTR_BIT
	(TARGET_ADDR_BIT, SP_REGNUM, PC_REGNUM, PS_REGNUM, FP0_REGNUM)
	(STAB_REG_TO_REGNUM, ECOFF_REG_TO_REGNUM, DWARF_REG_TO_REGNUM)
	(SDB_REG_TO_REGNUM, DWARF2_REG_TO_REGNUM, BELIEVE_PCC_PROMOTION)
	(CONVERT_REGISTER_P, REGISTER_TO_VALUE, VALUE_TO_REGISTER)
	(POINTER_TO_ADDRESS, ADDRESS_TO_POINTER, EXTRACT_RETURN_VALUE)
	(STORE_RETURN_VALUE, SKIP_PROLOGUE, MEMORY_INSERT_BREAKPOINT)
	(BREAKPOINT_FROM_PC, MEMORY_REMOVE_BREAKPOINT, DECR_PC_AFTER_BREAK)
	(ADDR_BITS_REMOVE, TARGET_PRINT_INSN, SKIP_TRAMPOLINE_CODE)
	(IN_SOLIB_RETURN_TRAMPOLINE, NAME_OF_MALLOC, ADDRESS_CLASS_TYPE_FLAGS)
	(ADDRESS_CLASS_TYPE_FLAGS_TO_NAME, ADDRESS_CLASS_TYPE_FLAGS_P).
	(ADDRESS_CLASS_NAME_to_TYPE_FLAGS, ADJUST_BREAKPOINT_ADDRESS)
	(PRINT_FLOAT_INFO, PRINT_VECTOR_INFO, INTEGER_TO_ADDRESS)
	(SKIP_PERMANENT_BREAKPOINT, TARGET_VIRTUAL_FRAME_POINTER)
	(SOFTWARE_SINGLE_STEP_P)

	(push_dummy_call, stabs_argument_has_addr, unwind_sp, unwind_pc)
	(print_registers_info, push_dummy_code, unwind_dummy_id): Rework

	(REGISTER_CONVERT_TO_TYPE, END_OF_TEXT_DEFAULT, GDB_MULTI_ARCH)
	(GDB_TARGET_IS_HPPA, DEPRECATED_GET_SAVED_REGISTER)
	(SYMBOLS_CAN_START_WITH_DOLLAR, DEPRECATED_INIT_EXTRA_FRAME_INFO)
	(DEPRECATED_INIT_FRAME_PC, DEPRECATED_SIGTRAMP_START)
	(IN_SOLIB_CALL_TRAMPOLINE, NO_HIF_SUPPORT, REGISTER_CONVERTIBLE)
	(DEPRECATED_REGISTER_RAW_SIZE, PARM_BOUNDARY, DEPRECATED_STACK_ALIGN)
	(PROLOGUE_FIRSTLINE_OVERLAP, DEPRECATED_POP_FRAME, STEP_SKIPS_DELAY)
	(TARGET_COMPLEX_BIT, TARGET_DOUBLE_COMPLEX_BIT)
	(OS9K_VARIABLES_INSIDE_BLOCK, KERNEL_U_ADDR, KERNEL_U_ADDR_HPUX)
	(REGISTER_U_ADDR, U_REGS_OFFSET, DEBUG_PTRACE): Remove description.

	(Converting an existing Target Architecture to Multi-arch): Remove
	 section.

	(gdbarch_unwind_pc, gdbarch_unwind_sp): Renew code example.
	(gdbarch_addr_bits_remove): Add code example.

	* gdb.texinfo: Replace REGISTER_NAME by gdbarch_register_name.
@
text
@a2586 1
* Converting Targets to Multi-arch::
d3429 1
a3429 1
@@item void gdbarch_print_float_info (@@var{gdbarch}, @@var{file}, @@var{frame},var{args})
d3509 1
a3509 1
stack alignment requirements (@@pxref{DEPRECATED_STACK_ALIGN}).
d3515 2
a3516 2
Unlike @@code{DEPRECATED_STACK_ALIGN}, this function always adjusts the
address in the direction of stack growth.
@


1.263
log
@2007-06-28  Michael Snyder  <msnyder@@svkmacdonelllnx>

	* gdbint.texinfo (Table, Tuple and List Functions) Fix typo.
@
text
@d572 1
a572 1
the length reported by @@code{BREAKPOINT_FROM_PC} is cached in
d607 3
a609 3
@@findex GET_LONGJMP_TARGET
To make this work, you need to define a macro called
@@code{GET_LONGJMP_TARGET}, which will examine the @@code{jmp_buf}
d735 3
a737 3
@@findex HAVE_NONSTEPPABLE_WATCHPOINT
@@item HAVE_NONSTEPPABLE_WATCHPOINT
If defined to a non-zero value, @@value{GDBN} should disable a
d1524 1
a1524 1
     if (TARGET_ADDR_BIT <= 32)
d2797 1
a2797 1
and to reflect that in the @@code{REGISTER_NAME} and related macros.
d2911 1
a2911 1
Here are some macros which architectures can define to indicate the
d2916 1
a2916 1
@@deftypefn {Target Macro} CORE_ADDR POINTER_TO_ADDRESS (struct type *@@var{type}, char *@@var{buf})
d2923 1
a2923 1
@@end deftypefn
d2925 1
a2925 1
@@deftypefn {Target Macro} void ADDRESS_TO_POINTER (struct type *@@var{type}, char *@@var{buf}, CORE_ADDR @@var{addr})
d2931 1
a2931 1
@@end deftypefn
d2949 1
a2949 1
@@deftypefn {Target Macro} int ADDRESS_CLASS_TYPE_FLAGS (int @@var{byte_size}, int @@var{dwarf2_addr_class})
d2954 1
a2954 1
@@end deftypefn
d2956 1
a2956 1
@@deftypefn {Target Macro} char *ADDRESS_CLASS_TYPE_FLAGS_TO_NAME (int @@var{type_flags})
d2959 2
a2960 2
@@end deftypefn
@@deftypefn {Target Macro} int ADDRESS_CLASS_NAME_to_TYPE_FLAGS (int @@var{name}, int *var{type_flags_ptr})
d2963 1
a2963 1
@@end deftypefn
d2966 2
a2967 2
the address class macros defined by default.  Predicate
macros are provided to detect when they are defined.
d2974 1
a2974 1
to implement the address class macros:
d3172 1
a3172 1
@@deftypefn {Target Macro} int CONVERT_REGISTER_P (int @@var{reg})
d3177 3
a3179 3
When non-zero, the macros @@code{REGISTER_TO_VALUE} and
@@code{VALUE_TO_REGISTER} are used to perform any necessary conversion.
@@end deftypefn
d3181 1
a3181 1
@@deftypefn {Target Macro} void REGISTER_TO_VALUE (int @@var{reg}, struct type *@@var{type}, char *@@var{from}, char *@@var{to})
d3186 2
a3187 2
Note that @@code{REGISTER_TO_VALUE} and @@code{VALUE_TO_REGISTER} take
their @@var{reg} and @@var{type} arguments in different orders.
d3189 3
a3191 3
You should only use @@code{REGISTER_TO_VALUE} with registers for which
the @@code{CONVERT_REGISTER_P} macro returns a non-zero value.
@@end deftypefn
d3193 1
a3193 1
@@deftypefn {Target Macro} void VALUE_TO_REGISTER (struct type *@@var{type}, int @@var{reg}, char *@@var{from}, char *@@var{to})
d3197 2
a3198 2
Note that @@code{REGISTER_TO_VALUE} and @@code{VALUE_TO_REGISTER} take
their @@var{reg} and @@var{type} arguments in different orders.
d3200 3
a3202 3
You should only use @@code{VALUE_TO_REGISTER} with registers for which
the @@code{CONVERT_REGISTER_P} macro returns a non-zero value.
@@end deftypefn
d3220 2
a3221 2
This section describes the macros that you can use to define the target
machine.
d3225 2
a3226 2
@@item ADDR_BITS_REMOVE (addr)
@@findex ADDR_BITS_REMOVE
d3228 3
a3230 3
really part of the address, then define this macro to expand into an
expression that zeroes those bits in @@var{addr}.  This is only used for
addresses of instructions, and even then not in all contexts.
d3236 8
a3243 2
address of the instruction.  ADDR_BITS_REMOVE should filter out these
bits with an expression such as @@code{((addr) & ~3)}.
d3245 2
a3246 2
@@item ADDRESS_CLASS_NAME_TO_TYPE_FLAGS (@@var{name}, @@var{type_flags_ptr})
@@findex ADDRESS_CLASS_NAME_TO_TYPE_FLAGS
d3257 3
a3259 3
@@item ADDRESS_CLASS_NAME_TO_TYPE_FLAGS_P ()
@@findex ADDRESS_CLASS_NAME_TO_TYPE_FLAGS_P
Predicate which indicates whether @@code{ADDRESS_CLASS_NAME_TO_TYPE_FLAGS}
d3262 2
a3263 2
@@item ADDRESS_CLASS_TYPE_FLAGS (@@var{byte_size}, @@var{dwarf2_addr_class})
@@findex ADDRESS_CLASS_TYPE_FLAGS (@@var{byte_size}, @@var{dwarf2_addr_class})
d3272 3
a3274 3
@@item ADDRESS_CLASS_TYPE_FLAGS_P ()
@@findex ADDRESS_CLASS_TYPE_FLAGS_P
Predicate which indicates whether @@code{ADDRESS_CLASS_TYPE_FLAGS} has
d3277 2
a3278 2
@@item ADDRESS_CLASS_TYPE_FLAGS_TO_NAME (@@var{type_flags})
@@findex ADDRESS_CLASS_TYPE_FLAGS_TO_NAME
d3282 3
a3284 4
@@item ADDRESS_CLASS_TYPE_FLAGS_TO_NAME_P ()
@@findex ADDRESS_CLASS_TYPE_FLAGS_TO_NAME_P
Predicate which indicates whether @@code{ADDRESS_CLASS_TYPE_FLAGS_TO_NAME} has
been defined.
d3287 2
a3288 2
@@item ADDRESS_TO_POINTER (@@var{type}, @@var{buf}, @@var{addr})
@@findex ADDRESS_TO_POINTER
d3291 1
a3291 1
This macro may safely assume that @@var{type} is either a pointer or a
d3295 3
a3297 3
@@item BELIEVE_PCC_PROMOTION
@@findex BELIEVE_PCC_PROMOTION
Define if the compiler promotes a @@code{short} or @@code{char}
d3316 1
a3316 1
@@code{BREAKPOINT_FROM_PC}.
d3325 1
a3325 1
favor of @@code{BREAKPOINT_FROM_PC}.
d3327 3
a3329 3
@@item BREAKPOINT_FROM_PC (@@var{pcptr}, @@var{lenptr})
@@findex BREAKPOINT_FROM_PC
@@anchor{BREAKPOINT_FROM_PC} Use the program counter to determine the
d3343 4
a3346 4
@@item MEMORY_INSERT_BREAKPOINT (@@var{bp_tgt})
@@itemx MEMORY_REMOVE_BREAKPOINT (@@var{bp_tgt})
@@findex MEMORY_REMOVE_BREAKPOINT
@@findex MEMORY_INSERT_BREAKPOINT
d3350 3
a3352 4
provided so that it is not necessary to define these for most
architectures.  Architectures which may want to define
@@code{MEMORY_INSERT_BREAKPOINT} and @@code{MEMORY_REMOVE_BREAKPOINT} will
likely have instructions that are oddly sized or are not stored in a
d3357 1
a3357 1
@@code{BREAKPOINT_FROM_PC} needs to read the target's memory for some
d3360 2
a3361 2
@@item ADJUST_BREAKPOINT_ADDRESS (@@var{address})
@@findex ADJUST_BREAKPOINT_ADDRESS
d3385 1
a3385 1
The FR-V's @@code{ADJUST_BREAKPOINT_ADDRESS} method will adjust a
d3393 2
a3394 2
@@item CALL_DUMMY_LOCATION
@@findex CALL_DUMMY_LOCATION
d3397 2
a3398 2
This method has been replaced by @@code{push_dummy_code}
(@@pxref{push_dummy_code}).
d3400 3
a3402 3
@@item CANNOT_FETCH_REGISTER (@@var{regno})
@@findex CANNOT_FETCH_REGISTER
A C expression that should be nonzero if @@var{regno} cannot be fetched
d3406 3
a3408 3
@@item CANNOT_STORE_REGISTER (@@var{regno})
@@findex CANNOT_STORE_REGISTER
A C expression that should be nonzero if @@var{regno} should not be
d3410 2
a3411 2
status words, and other special registers.  If this is not defined,
@@value{GDBN} will assume that all registers may be written.
d3413 2
a3414 2
@@item int CONVERT_REGISTER_P(@@var{regnum})
@@findex CONVERT_REGISTER_P
d3419 3
a3421 3
@@item DECR_PC_AFTER_BREAK
@@findex DECR_PC_AFTER_BREAK
Define this to be the amount by which to decrement the PC after the
d3430 2
a3431 2
@@item PRINT_FLOAT_INFO()
@@findex PRINT_FLOAT_INFO
d3435 2
a3436 2
@@item print_registers_info (@@var{gdbarch}, @@var{frame}, @@var{regnum}, @@var{all})
@@findex print_registers_info
d3445 2
a3446 2
@@item PRINT_VECTOR_INFO()
@@findex PRINT_VECTOR_INFO
d3453 14
a3466 19
@@item DWARF_REG_TO_REGNUM
@@findex DWARF_REG_TO_REGNUM
Convert DWARF register number into @@value{GDBN} regnum.  If not defined,
no conversion will be performed.

@@item DWARF2_REG_TO_REGNUM
@@findex DWARF2_REG_TO_REGNUM
Convert DWARF2 register number into @@value{GDBN} regnum.  If not
defined, no conversion will be performed.

@@item ECOFF_REG_TO_REGNUM
@@findex ECOFF_REG_TO_REGNUM
Convert ECOFF register number into @@value{GDBN} regnum.  If not defined,
no conversion will be performed.

@@item END_OF_TEXT_DEFAULT
@@findex END_OF_TEXT_DEFAULT
This is an expression that should designate the end of the text section.
@@c (? FIXME ?)
d3468 2
a3469 2
@@item EXTRACT_RETURN_VALUE(@@var{type}, @@var{regbuf}, @@var{valbuf})
@@findex EXTRACT_RETURN_VALUE
d3504 1
a3504 1
@@item frame_align (@@var{address})
d3521 2
a3522 2
@@item int frame_red_zone_size

d3529 1
a3529 1
@@var{frame_red_zone_size} bytes before pushing parameters onto the
d3562 3
a3564 3
@@item FRAME_NUM_ARGS (@@var{fi})
@@findex FRAME_NUM_ARGS
For the frame described by @@var{fi} return the number of arguments that
d3573 1
a3573 1
This method is deprecated. @@xref{unwind_pc}.
d3575 5
a3579 5
@@item CORE_ADDR unwind_pc (struct frame_info *@@var{this_frame})
@@findex unwind_pc
@@anchor{unwind_pc} Return the instruction address, in @@var{this_frame}'s
caller, at which execution will resume after @@var{this_frame} returns.
This is commonly referred to as the return address.
d3586 2
a3587 2
frame_unwind_unsigned_register (this_frame, D10V_PC_REGNUM, &pc);
return d10v_make_iaddr (pc);
d3593 3
a3595 3
@@item CORE_ADDR unwind_sp (struct frame_info *@@var{this_frame})
@@findex unwind_sp
@@anchor{unwind_sp} Return the frame's inner most stack address.  This is
d3603 2
a3604 2
frame_unwind_unsigned_register (this_frame, D10V_SP_REGNUM, &sp);
return d10v_make_daddr (sp);
d3641 2
a3642 19
@@item @@value{GDBN}_MULTI_ARCH
@@findex @@value{GDBN}_MULTI_ARCH
If defined and non-zero, enables support for multiple architectures
within @@value{GDBN}.

This support can be enabled at two levels.  At level one, only
definitions for previously undefined macros are provided; at level two,
a multi-arch definition of all architecture dependent macros will be
defined.

@@item @@value{GDBN}_TARGET_IS_HPPA
@@findex @@value{GDBN}_TARGET_IS_HPPA
This determines whether horrible kludge code in @@file{dbxread.c} and
@@file{partial-stab.h} is used to mangle multiple-symbol-table files from
HPPA's.  This should all be ripped out, and a scheme like @@file{elfread.c}
used instead.

@@item GET_LONGJMP_TARGET
@@findex GET_LONGJMP_TARGET
a3651 5
@@item DEPRECATED_GET_SAVED_REGISTER
@@findex DEPRECATED_GET_SAVED_REGISTER
Define this if you need to supply your own definition for the function
@@code{DEPRECATED_GET_SAVED_REGISTER}.

d3663 2
a3664 23
@@item SYMBOLS_CAN_START_WITH_DOLLAR
@@findex SYMBOLS_CAN_START_WITH_DOLLAR
Some systems have routines whose names start with @@samp{$}.  Giving this
macro a non-zero value tells @@value{GDBN}'s expression parser to check for such
routines when parsing tokens that begin with @@samp{$}.

On HP-UX, certain system routines (millicode) have names beginning with
@@samp{$} or @@samp{$$}.  For example, @@code{$$dyncall} is a millicode
routine that handles inter-space procedure calls on PA-RISC.

@@item DEPRECATED_INIT_EXTRA_FRAME_INFO (@@var{fromleaf}, @@var{frame})
@@findex DEPRECATED_INIT_EXTRA_FRAME_INFO
If additional information about the frame is required this should be
stored in @@code{frame->extra_info}.  Space for @@code{frame->extra_info}
is allocated using @@code{frame_extra_info_zalloc}.

@@item DEPRECATED_INIT_FRAME_PC (@@var{fromleaf}, @@var{prev})
@@findex DEPRECATED_INIT_FRAME_PC
This is a C statement that sets the pc of the frame pointed to by
@@var{prev}.  [By default...]

@@item INNER_THAN (@@var{lhs}, @@var{rhs})
@@findex INNER_THAN
d3666 3
a3668 3
stack top) stack address @@var{rhs}. Define this as @@code{lhs < rhs} if
the target's stack grows downward in memory, or @@code{lhs > rsh} if the
stack grows upward.
d3670 1
a3670 1
@@item gdbarch_in_function_epilogue_p (@@var{gdbarch}, @@var{pc})
d3672 1
a3672 1
Returns non-zero if the given @@var{pc} is in the epilogue of a function.
d3677 3
a3679 17
@@item DEPRECATED_SIGTRAMP_START (@@var{pc})
@@findex DEPRECATED_SIGTRAMP_START
@@itemx DEPRECATED_SIGTRAMP_END (@@var{pc})
@@findex DEPRECATED_SIGTRAMP_END
Define these to be the start and end address of the @@code{sigtramp} for the
given @@var{pc}.  On machines where the address is just a compile time
constant, the macro expansion will typically just ignore the supplied
@@var{pc}.

@@item IN_SOLIB_CALL_TRAMPOLINE (@@var{pc}, @@var{name})
@@findex IN_SOLIB_CALL_TRAMPOLINE
Define this to evaluate to nonzero if the program is stopped in the
trampoline that connects to a shared library.

@@item IN_SOLIB_RETURN_TRAMPOLINE (@@var{pc}, @@var{name})
@@findex IN_SOLIB_RETURN_TRAMPOLINE
Define this to evaluate to nonzero if the program is stopped in the
d3684 1
a3684 1
Define this to evaluate to nonzero if the program is stopped in the
d3695 2
a3696 2
@@item INTEGER_TO_ADDRESS (@@var{type}, @@var{buf})
@@findex INTEGER_TO_ADDRESS
d3712 1
a3712 1
method like @@code{INTEGER_TO_ADDRESS} certainly makes it possible for
d3718 2
a3719 6
@@item NO_HIF_SUPPORT
@@findex NO_HIF_SUPPORT
(Specific to the a29k.)

@@item POINTER_TO_ADDRESS (@@var{type}, @@var{buf})
@@findex POINTER_TO_ADDRESS
d3725 2
a3726 7
@@item REGISTER_CONVERTIBLE (@@var{reg})
@@findex REGISTER_CONVERTIBLE
Return non-zero if @@var{reg} uses different raw and virtual formats.
@@xref{Target Architecture Definition, , Raw and Virtual Register Representations}.

@@item REGISTER_TO_VALUE(@@var{regnum}, @@var{type}, @@var{from}, @@var{to})
@@findex REGISTER_TO_VALUE
a3730 6
@@item DEPRECATED_REGISTER_RAW_SIZE (@@var{reg})
@@findex DEPRECATED_REGISTER_RAW_SIZE
Return the raw size of @@var{reg}; defaults to the size of the register's
virtual type.
@@xref{Target Architecture Definition, , Raw and Virtual Register Representations}.

d3837 7
a3843 12
@@item PC_REGNUM
@@findex PC_REGNUM
If the program counter is kept in a register, then define this macro to
be the number (greater than or equal to zero) of that register.

This should only need to be defined if @@code{TARGET_READ_PC} and
@@code{TARGET_WRITE_PC} are not defined.

@@item PARM_BOUNDARY
@@findex PARM_BOUNDARY
If non-zero, round arguments to a boundary of this many bits before
pushing them on the stack.
d3845 2
a3846 2
@@item stabs_argument_has_addr (@@var{gdbarch}, @@var{type})
@@findex stabs_argument_has_addr
d3848 3
a3850 3
@@anchor{stabs_argument_has_addr} Define this to return nonzero if a
function argument of type @@var{type} is passed by reference instead of
value.
d3859 5
a3863 14
@@item PROLOGUE_FIRSTLINE_OVERLAP
@@findex PROLOGUE_FIRSTLINE_OVERLAP
(Only used in unsupported Convex configuration.)

@@item PS_REGNUM
@@findex PS_REGNUM
If defined, this is the number of the processor status register.  (This
definition is only used in generic code when parsing "$ps".)

@@item DEPRECATED_POP_FRAME
@@findex DEPRECATED_POP_FRAME
@@findex frame_pop
If defined, used by @@code{frame_pop} to remove a stack frame.  This
method has been superseded by generic code.
d3865 2
a3866 2
@@item push_dummy_call (@@var{gdbarch}, @@var{function}, @@var{regcache}, @@var{pc_addr}, @@var{nargs}, @@var{args}, @@var{sp}, @@var{struct_return}, @@var{struct_addr})
@@findex push_dummy_call
d3868 4
a3871 4
@@anchor{push_dummy_call} Define this to push the dummy frame's call to
the inferior function onto the stack.  In addition to pushing
@@var{nargs}, the code should push @@var{struct_addr} (when
@@var{struct_return}), and the return address (@@var{bp_addr}).
d3880 3
a3882 3
@@item CORE_ADDR push_dummy_code (@@var{gdbarch}, @@var{sp}, @@var{funaddr}, @@var{using_gcc}, @@var{args}, @@var{nargs}, @@var{value_type}, @@var{real_pc}, @@var{bp_addr})
@@findex push_dummy_code
@@anchor{push_dummy_code} Given a stack based call dummy, push the
d3894 1
a3894 1
This method replaces @@code{CALL_DUMMY_LOCATION},
d3897 4
a3900 4
@@item REGISTER_NAME(@@var{i})
@@findex REGISTER_NAME
Return the name of register @@var{i} as a string.  May return @@code{NULL}
or @@code{NUL} to indicate that register @@var{i} is not valid.
d3907 2
a3908 2
This method has been replaced by @@code{stabs_argument_has_addr}
(@@pxref{stabs_argument_has_addr}).
d3916 1
a3916 1
allocated on the stack.  @@xref{unwind_dummy_id}.
d3918 4
a3921 4
@@item SDB_REG_TO_REGNUM
@@findex SDB_REG_TO_REGNUM
Define this to convert sdb register numbers into @@value{GDBN} regnums.  If not
defined, no conversion will be done.
d3965 2
a3966 2
@@item SKIP_PERMANENT_BREAKPOINT
@@findex SKIP_PERMANENT_BREAKPOINT
d3971 3
a3973 3
doesn't work.  Calling @@code{SKIP_PERMANENT_BREAKPOINT} adjusts the processor's
state so that execution will resume just after the breakpoint.  This
macro does the right thing even when the breakpoint is in the delay slot
d3976 4
a3979 4
@@item SKIP_PROLOGUE (@@var{pc})
@@findex SKIP_PROLOGUE
A C expression that returns the address of the ``real'' code beyond the
function entry prologue found at @@var{pc}.
d3981 2
a3982 2
@@item SKIP_TRAMPOLINE_CODE (@@var{pc})
@@findex SKIP_TRAMPOLINE_CODE
d3984 1
a3984 1
the functions being called, then define this macro to return a new PC
d3987 3
a3989 3
@@item SP_REGNUM
@@findex SP_REGNUM
If the stack-pointer is kept in a register, then define this macro to be
d3993 8
a4000 27
@@item STAB_REG_TO_REGNUM
@@findex STAB_REG_TO_REGNUM
Define this to convert stab register numbers (as gotten from `r'
declarations) into @@value{GDBN} regnums.  If not defined, no conversion will be
done.

@@item DEPRECATED_STACK_ALIGN (@@var{addr})
@@anchor{DEPRECATED_STACK_ALIGN}
@@findex DEPRECATED_STACK_ALIGN
Define this to increase @@var{addr} so that it meets the alignment
requirements for the processor's stack.

Unlike @@ref{frame_align}, this function always adjusts @@var{addr}
upwards.

By default, no stack alignment is performed.

@@item STEP_SKIPS_DELAY (@@var{addr})
@@findex STEP_SKIPS_DELAY
Define this to return true if the address is of an instruction with a
delay slot.  If a breakpoint has been placed in the instruction's delay
slot, @@value{GDBN} will single-step over that instruction before resuming
normally.  Currently only defined for the Mips.

@@item STORE_RETURN_VALUE (@@var{type}, @@var{regcache}, @@var{valbuf})
@@findex STORE_RETURN_VALUE
A C expression that writes the function return value, found in
d4016 2
a4017 2
@@item TARGET_CHAR_SIGNED
@@findex TARGET_CHAR_SIGNED
d4027 15
a4041 27
@@item TARGET_COMPLEX_BIT
@@findex TARGET_COMPLEX_BIT
Number of bits in a complex number; defaults to @@code{2 * TARGET_FLOAT_BIT}.

At present this macro is not used.

@@item TARGET_DOUBLE_BIT
@@findex TARGET_DOUBLE_BIT
Number of bits in a double float; defaults to @@code{8 * TARGET_CHAR_BIT}.

@@item TARGET_DOUBLE_COMPLEX_BIT
@@findex TARGET_DOUBLE_COMPLEX_BIT
Number of bits in a double complex; defaults to @@code{2 * TARGET_DOUBLE_BIT}.

At present this macro is not used.

@@item TARGET_FLOAT_BIT
@@findex TARGET_FLOAT_BIT
Number of bits in a float; defaults to @@code{4 * TARGET_CHAR_BIT}.

@@item TARGET_INT_BIT
@@findex TARGET_INT_BIT
Number of bits in an integer; defaults to @@code{4 * TARGET_CHAR_BIT}.

@@item TARGET_LONG_BIT
@@findex TARGET_LONG_BIT
Number of bits in a long integer; defaults to @@code{4 * TARGET_CHAR_BIT}.
d4043 2
a4044 2
@@item TARGET_LONG_DOUBLE_BIT
@@findex TARGET_LONG_DOUBLE_BIT
d4046 1
a4046 1
defaults to @@code{2 * TARGET_DOUBLE_BIT}.
d4048 19
a4066 17
@@item TARGET_LONG_LONG_BIT
@@findex TARGET_LONG_LONG_BIT
Number of bits in a long long integer; defaults to @@code{2 * TARGET_LONG_BIT}.

@@item TARGET_PTR_BIT
@@findex TARGET_PTR_BIT
Number of bits in a pointer; defaults to @@code{TARGET_INT_BIT}.

@@item TARGET_SHORT_BIT
@@findex TARGET_SHORT_BIT
Number of bits in a short integer; defaults to @@code{2 * TARGET_CHAR_BIT}.

@@item TARGET_READ_PC
@@findex TARGET_READ_PC
@@itemx TARGET_WRITE_PC (@@var{val}, @@var{pid})
@@findex TARGET_WRITE_PC
@@anchor{TARGET_WRITE_PC}
d4071 2
a4072 2
@@findex read_pc
@@findex write_pc
d4075 2
a4076 2
@@anchor{TARGET_READ_SP} These change the behavior of @@code{read_pc},
@@code{write_pc}, and @@code{read_sp}.  For most targets, these may be
d4080 3
a4082 3
These macros are useful when a target keeps one of these registers in a
hard to get at place; for example, part in a segment register and part
in an ordinary register.
d4084 1
a4084 1
@@xref{unwind_sp}, which replaces @@code{TARGET_READ_SP}.
d4086 2
a4087 2
@@item TARGET_VIRTUAL_FRAME_POINTER(@@var{pc}, @@var{regp}, @@var{offsetp})
@@findex TARGET_VIRTUAL_FRAME_POINTER
d4098 2
a4099 2
@@item TARGET_PRINT_INSN (@@var{addr}, @@var{info})
@@findex TARGET_PRINT_INSN
d4101 1
a4101 1
instruction.  It prints the instruction at address @@var{addr} in
d4111 4
a4114 4
@@item struct frame_id unwind_dummy_id (struct frame_info *@@var{frame})
@@findex unwind_dummy_id
@@anchor{unwind_dummy_id} Given @@var{frame} return a @@code{struct
frame_id} that uniquely identifies an inferior function call's dummy
d4131 3
a4133 4
@@item VALUE_TO_REGISTER(@@var{type}, @@var{regnum}, @@var{from}, @@var{to})
@@findex VALUE_TO_REGISTER
Convert a value of type @@var{type} into the raw contents of register
@@var{regnum}'s.
a4144 3
@@item OS9K_VARIABLES_INSIDE_BLOCK (@@var{desc}, @@var{gcc_p})
@@findex OS9K_VARIABLES_INSIDE_BLOCK
Similarly, for OS/9000.  Defaults to 1.
d4157 2
a4158 2
@@item NAME_OF_MALLOC
@@findex NAME_OF_MALLOC
a4221 162

@@node Converting Targets to Multi-arch
@@section Converting an existing Target Architecture to Multi-arch
@@cindex converting targets to multi-arch

This section describes the current accepted best practice for converting
an existing target architecture to the multi-arch framework.

The process consists of generating, testing, posting and committing a
sequence of patches.  Each patch must contain a single change, for
instance:

@@itemize @@bullet

@@item
Directly convert a group of functions into macros (the conversion does
not change the behavior of any of the functions).

@@item
Replace a non-multi-arch with a multi-arch mechanism (e.g.,
@@code{FRAME_INFO}).

@@item
Enable multi-arch level one.

@@item
Delete one or more files.

@@end itemize

@@noindent
There isn't a size limit on a patch, however, a developer is strongly
encouraged to keep the patch size down.

Since each patch is well defined, and since each change has been tested
and shows no regressions, the patches are considered @@emph{fairly}
obvious.  Such patches, when submitted by developers listed in the
@@file{MAINTAINERS} file, do not need approval.  Occasional steps in the
process may be more complicated and less clear.  The developer is
expected to use their judgment and is encouraged to seek advice as
needed.

@@subsection Preparation

The first step is to establish control.  Build (with @@option{-Werror}
enabled) and test the target so that there is a baseline against which
the debugger can be compared.

At no stage can the test results regress or @@value{GDBN} stop compiling
with @@option{-Werror}.

@@subsection Add the multi-arch initialization code

The objective of this step is to establish the basic multi-arch
framework.  It involves

@@itemize @@bullet

@@item
The addition of a @@code{@@var{arch}_gdbarch_init} function@@footnote{The
above is from the original example and uses K&R C.  @@value{GDBN}
has since converted to ISO C but lets ignore that.} that creates
the architecture:
@@smallexample
static struct gdbarch *
d10v_gdbarch_init (info, arches)
     struct gdbarch_info info;
     struct gdbarch_list *arches;
@@{
  struct gdbarch *gdbarch;
  /* there is only one d10v architecture */
  if (arches != NULL)
    return arches->gdbarch;
  gdbarch = gdbarch_alloc (&info, NULL);
  return gdbarch;
@@}
@@end smallexample
@@noindent
@@emph{}

@@item
A per-architecture dump function to print any architecture specific
information:
@@smallexample
static void
mips_dump_tdep (struct gdbarch *current_gdbarch,
                struct ui_file *file)
@@{
   @@dots{} code to print architecture specific info @@dots{}
@@}
@@end smallexample

@@item
A change to @@code{_initialize_@@var{arch}_tdep} to register this new
architecture:
@@smallexample
void
_initialize_mips_tdep (void)
@@{
  gdbarch_register (bfd_arch_mips, mips_gdbarch_init,
                    mips_dump_tdep);
@@end smallexample

@@item
Add the macro @@code{GDB_MULTI_ARCH}, defined as 0 (zero), to the file@@*
@@file{config/@@var{arch}/tm-@@var{arch}.h}.

@@end itemize

@@subsection Update multi-arch incompatible mechanisms

Some mechanisms do not work with multi-arch.  They include:

@@table @@code
@@item FRAME_FIND_SAVED_REGS
Replaced with @@code{DEPRECATED_FRAME_INIT_SAVED_REGS}
@@end table

@@noindent
At this stage you could also consider converting the macros into
functions.

@@subsection Prepare for multi-arch level to one

Temporally set @@code{GDB_MULTI_ARCH} to @@code{GDB_MULTI_ARCH_PARTIAL}
and then build and start @@value{GDBN} (the change should not be
committed).  @@value{GDBN} may not build, and once built, it may die with
an internal error listing the architecture methods that must be
provided.

Fix any build problems (patch(es)).

Convert all the architecture methods listed, which are only macros, into
functions (patch(es)).

Update @@code{@@var{arch}_gdbarch_init} to set all the missing
architecture methods and wrap the corresponding macros in @@code{#if
!GDB_MULTI_ARCH} (patch(es)).

@@subsection Set multi-arch level one

Change the value of @@code{GDB_MULTI_ARCH} to GDB_MULTI_ARCH_PARTIAL (a
single patch).

Any problems with throwing ``the switch'' should have been fixed
already.

@@subsection Convert remaining macros

Suggest converting macros into functions (and setting the corresponding
architecture method) in small batches.

@@subsection Set multi-arch level to two

This should go smoothly.

@@subsection Delete the TM file

The @@file{tm-@@var{arch}.h} can be deleted.  @@file{@@var{arch}.mt} and
@@file{configure.in} updated.


d4622 3
a4624 3
@@item FP0_REGNUM
@@findex FP0_REGNUM
This macro is normally defined to be the number of the first floating
d4629 2
a4630 2
@@item GET_LONGJMP_TARGET
@@findex GET_LONGJMP_TARGET
d4635 1
a4635 1
This macro determines the target PC address that @@code{longjmp} will jump to,
a4643 14
@@item KERNEL_U_ADDR
@@findex KERNEL_U_ADDR
Define this to the address of the @@code{u} structure (the ``user
struct'', also known as the ``u-page'') in kernel virtual memory.  @@value{GDBN}
needs to know this so that it can subtract this address from absolute
addresses in the upage, that are obtained via ptrace or from core files.
On systems that don't need this value, set it to zero.

@@item KERNEL_U_ADDR_HPUX
@@findex KERNEL_U_ADDR_HPUX
Define this to cause @@value{GDBN} to determine the address of @@code{u} at
runtime, by using HP-style @@code{nlist} on the kernel's image in the
root directory.

a4654 4
@@item REGISTER_U_ADDR
@@findex REGISTER_U_ADDR
Defines the offset of the registers in the ``u area''.

a4684 13
@@item U_REGS_OFFSET
@@findex U_REGS_OFFSET
This is the offset of the registers in the upage.  It need only be
defined if the generic ptrace register access routines in
@@file{infptrace.c} are being used (that is, @@file{infptrace.c} is
configured in, and @@code{FETCH_INFERIOR_REGISTERS} is not defined).  If
the default value from @@file{infptrace.c} is good enough, leave it
undefined.

The default value means that u.u_ar0 @@emph{points to} the location of
the registers.  I'm guessing that @@code{#define U_REGS_OFFSET 0} means
that @@code{u.u_ar0} @@emph{is} the location of the registers.

a4688 3
@@item DEBUG_PTRACE
@@findex DEBUG_PTRACE
Define this to debug @@code{ptrace} calls.
a4690 1

@


1.262
log
@(Register and Memory Data): Break sections
into nodes and add a menu.
@
text
@d1297 1
a1297 1
that will close the list.list.
@


1.261
log
@ChangeLog:

	* config/i386/nm-i386sol2.h (USE_PROC_FS): Do not define.
	* config/mips/nm-irix5.h (USE_PROC_FS): Do not define.
	* config/nm-linux.h (USE_PROC_FS): Do not undefine.

doc/ChangeLog:

	* gdbint.texinfo (Native Conditionals): Remove USE_PROC_FS.
@
text
@d2574 17
d2750 1
d2786 1
d2801 1
d2933 1
d3020 1
d3129 1
d3208 1
a3208 1

d3211 1
d3214 1
d3217 1
d4284 1
d4343 1
@


1.260
log
@	* configure.ac (build_warnings): Add -Wno-char-subscripts.
	* configure: Regenerate.
	* doc/gdbint.texinfo (warning flags): Add -Wno-char-subscripts.
@
text
@a4956 6
@@item USE_PROC_FS
@@findex USE_PROC_FS
This determines whether small routines in @@file{*-tdep.c}, which
translate register values between @@value{GDBN}'s internal
representation and the @@file{/proc} representation, are compiled.

@


1.259
log
@	* gdbint.texinfo (Writing Tests): Mention gdb_test_multiple
	and tab expansion.
@
text
@d5641 1
@


1.258
log
@	* Makefile.in (SFILES): Remove hpacc-abi.c.
	(COMMON_OBS): Remove hpacc-abi.o.
	(ALLDEPFILES): Remove hpread.c and $(HPREAD_SOURCE).
	(hpacc-abi.o, hpread.o): Delete rules.
	* somread.c: Delete extern declarations from hpread.c.
	(som_symfile_read): Do not call do_pxdb or hpread_build_psymtabs.
	(som_symfile_finish): Do not call hpread_symfile_finish.
	(som_symfile_init): Do not call hpread_symfile_init.
	* config/pa/hppa64.mt (TDEPFILES): Remove hpread.o.
	* config/pa/hppahpux.mt (TDEPFILES): Likewise.
	* hpacc-abi.c, hpread.c: Deleted.

	* gdbint.texinfo (SOM): Correct location of the SOM reader.
@
text
@d7147 8
a7154 1
necessary, such as when @@value{GDBN} has several valid responses to a command.
@


1.257
log
@	* MAINTAINERS: Remove d10v entry.
	* Makefile.in (SFILES): Remove dwarfread.c.
	(COMMON_OBS): Remove dwarfread.o.
	(gdb_sim_d10v_h, abug-rom.o, cpu32bug-rom.o, d10v-tdep.o, dwarfread.o)
	(remote-est.o, rom68k-rom.o): Delete.
	* NEWS: Mention removal of d10v, target abug, target cpu32bug,
	target est, target rom68k, and DWARF 1.
	* configure.tgt: Mark d10v as removed.
	* dwarf2read.c: Doc update.
	* elfread.c (struct elfinfo): Remove dboffset, dbsize, lnoffset,
	and lnsize.
	(elf_locate_sections): Do not set them.
	(elf_symfile_read): Do not call dwarf_build_psymtabs.
	* symfile.h (dwarf_build_psymtabs): Delete prototype.
	* config/m68k/monitor.mt (TDEPFILES): Prune.
	* abug-rom.c, cpu32bug-rom.c, d10v-tdep.c, dwarfread.c,
	remote-est.c, rom68k-rom.c, config/d10v/d10v.mt: Delete.

	* gdb.texinfo (M68K): Remove obsolete ROM monitors.
	* gdbint.texinfo (DWARF 1): Delete section and other dwarfread.c
	references.

	* gdb.asm/asm-source.exp: Remove d10v case.
	* lib/gdb.exp (skip_cplus_tests): Likewise.
	* gdb.asm/d10v.inc: Deleted.
@
text
@d2115 1
a2115 1
The SOM reader is in @@file{hpread.c}.
@


1.256
log
@	* Makefile.in (SFILES): Remove nlmread.c.
	(COMMON_OBS): Remove nlmread.o.
	(nlmread.o): Delete rule.
	* README: Delete reference to remote-st.c.
	* acinclude.m4 (CY_AC_TCL_LYNX_POSIX): Delete.
	* defs.h (enum gdb_osabi): Delete GDB_OSABI_NETWARE and
	GDB_OSABI_LYNXOS.
	* i386-tdep.c (i386_nw_init_abi, i386_nlm_osabi_sniffer): Delete.
	(_initialize_i386_tdep): Do not reference them.
	* nlmread.c: Delete file.
	* osabi.c (gdb_osabi_names): Remove NetWare and LynxOS.
	* target.c: Doc update.
	* thread.c: Delete commented include.
	* config/alpha/tm-alpha.h: Doc update.

	* gdb.texinfo (Startup): Delete references to some alternate
	names for .gdbinit.
	(Thread): Remove LynxOS reference.
	(Tandem ST2000): Delete target-specific documentation.
	* gdbint.texinfo (Symbol Handling): Remove mention of NLM.
	(Target Architecture Definition): Remove mention of GDB_OSABI_NETWARE
	and GDB_OSABI_LYNXOS.

	* config/netware.exp: Delete file.
@
text
@d222 1
a222 1
@@file{dwarfread.c} reads DWARF, etc.
a2145 14
@@subsection DWARF 1

@@cindex DWARF 1 debugging info
DWARF 1 is a debugging format that was originally designed to be
used with ELF in SVR4 systems.

@@c GCC_PRODUCER
@@c GPLUS_PRODUCER
@@c LCC_PRODUCER
@@c If defined, these are the producer strings in a DWARF 1 file.  All of
@@c these have reasonable defaults already.

The DWARF 1 reader is in @@file{dwarfread.c}.

@


1.255
log
@gdb/ChangeLog:

	* config/alpha/nm-osf.h (PTRACE_XFER_TYPE): Remove.
	* config/mips/nm-linux.h (PTRACE_ARG3_TYPE, PTRACE_XFER_TYPE): Remove.
	* config/sparc/nm-linux.h (PTRACE_ARG3_TYPE, PTRACE_XFER_TYPE): Remove.
	* config/powerpc/nm-ppc64-linux.h: Remove file.
	* config/powerpc/ppc64-linux.mh (NATDEPFILES): Set to nm-linux.h.
	* inferior.h (PTRACE_ARG3_TYPE): Do not define.
	(call_ptrace): Change type of third argument to PTRACE_TYPE_ARG3.
	* infptrace.c (call_ptrace): Likewise.
	* m68klinux-nat.c (PTRACE_XFER_TYPE): Do not define.
	(fetch_register): Replace PTRACE_ARG3_TYPE by PTRACE_TYPE_ARG3
	and PTRACE_XFER_TYPE by PTRACE_TYPE_RET.
	(store_register): Likewise.

gdb/doc/ChangeLog:

	* gdbint.texi (Native Conditionals): Remove PTRACE_ARG3_TYPE.
@
text
@a2116 6
@@subsection Other File Formats

@@cindex Netware Loadable Module format
Other file formats that have been supported by @@value{GDBN} include Netware
Loadable Modules (@@file{nlmread.c}).

a2673 4
@@findex GDB_OSABI_NETWARE
@@item GDB_OSABI_NETWARE
Novell NetWare.

a2677 4
@@findex GDB_OSABI_LYNXOS
@@item GDB_OSABI_LYNXOS
LynxOS.

@


1.254
log
@	* config/sh/tm-sh.h (DEPRECATED_BIG_REMOTE_BREAKPOINT,
	DEPRECATED_LITTLE_REMOTE_BREAKPOINT): Remove.
	* remote.c: Remove code under #ifdef DEPRECATED_REMOTE_BREAKPOINT,
	DEPRECATED_BIG_REMOTE_BREAKPOINT, DEPRECATED_LITTLE_REMOTE_BREAKPOINT.
	* sh-tdep.c (sh_breakpoint_from_pc): Return remote breakpoint
	sequence if target_shortname is "remote".

doc/ChangeLog:

	* gdbint.texinfo (Target Conditionals): Remove mention of
	DEPRECATED_REMOTE_BREAKPOINT, DEPRECATED_BIG_REMOTE_BREAKPOINT,
	and DEPRECATED_LITTLE_REMOTE_BREAKPOINT.
@
text
@a4950 5
@@item PTRACE_ARG3_TYPE
@@findex PTRACE_ARG3_TYPE
The type of the third argument to the @@code{ptrace} system call, if it
exists and is different from @@code{int}.

@


1.253
log
@	* Makefile.in (arm-tdep.o, eval.o, target-descriptions.o)
	(xml-tdesc.o): Update.
	* xml-support.c: Add a comment.
	(gdb_xml_enums_boolean): New variable.
	(gdb_xml_parse_attr_enum): Use strcasecmp.
	* xml-support.h (gdb_xml_enums_boolean): Declare.
	* xml-tdesc.c (struct tdesc_parsing_data): Record current_feature,
	next_regnum, and current_union.
	(tdesc_start_feature, tdesc_start_reg, tdesc_start_union)
	(tdesc_end_union, tdesc_start_field, tdesc_start_vector)
	(field_attributes, union_children, reg_attributes, union_attributes)
	(vector_attributes, feature_attributes, feature_children): New.
	(target_children): Make static.  Add <feature>.
	(tdesc_elements): Make static.
	* target-descriptions.c (struct tdesc_reg, tdesc_reg_p, type_p)
	(struct tdesc_feature, tdesc_feature_p): New types.
	(struct target_desc): Add features member.
	(struct tdesc_arch_data, tdesc_data): New.
	(target_find_description): Clarify error message.  Warn about
	ignored register descriptions.
	(tdesc_has_registers, tdesc_find_feature, tdesc_feature_name)
	(tdesc_named_type, tdesc_data_init, tdesc_data_alloc)
	(tdesc_data_cleanup, tdesc_numbered_register)
	(tdesc_numbered_register_choices, tdesc_find_register)
	(tdesc_register_name, tdesc_register_type)
	(tdesc_remote_register_number, tdesc_register_reggroup_p)
	(set_tdesc_pseudo_register_name, set_tdesc_pseudo_register_type)
	(set_tdesc_pseudo_register_reggroup_p, tdesc_use_registers)
	(tdesc_free_reg, tdesc_create_reg, tdesc_free_feature)
	(tdesc_create_feature, tdesc_record_type): New.
	(free_target_description): Free features.
	(_initialize_target_descriptions): Initialize tdesc_data.
	* arch-utils.c (default_remote_register_number): New.
	* arch-utils.h (default_remote_register_number): New prototype.
	* target-descriptions.h (set_tdesc_pseudo_register_name)
	(set_tdesc_pseudo_register_type, set_tdesc_pseudo_register_reggroup_p)
	(tdesc_use_registers, tdesc_data_alloc, tdesc_data_cleanup)
	(tdesc_numbered_register, tdesc_numbered_register_choices)
	(tdesc_has_registers, tdesc_find_feature, tdesc_feature_name)
	(tdesc_named_type, tdesc_create_feature, tdesc_record_type)
	(tdesc_create_reg): Declare.
	* gdbarch.sh (remote_register_number): New entry.
	* gdbarch.c, gdbarch.h: Regenerate.
	* remote.c (init_remote_state): Use gdbarch_remote_register_number.
	* features/gdb-target.dtd: Add feature, reg, vector, union, and field.

	* arm-tdep.c (arm_register_aliases): New.
	(arm_register_name_strings): Rename to...
	(arm_register_names): ...this.  Make const.  Delete the old version.
	(current_option, arm_register_byte): Delete.
	(set_disassembly_style): Simplify.  Do not adjust arm_register_names.
	(value_of_arm_user_reg): New.
	(arm_gdbarch_init): Verify any described registers.  Call
	tdesc_use_registers.  Don't use arm_register_byte.  Create aliases
	for standard register names.
	(_initialize_arm_tdep): Do not adjust arm_register_names.
	* user-regs.c (struct user_reg): Add baton member.
	(append_user_reg, user_reg_add_builtin, user_regs_init)
	(user_reg_add, value_of_user_reg): Use a baton for user
	register functions.
	* std-regs.c: Update.
	* user-regs.h (user_reg_read_ftype, user_reg_add_builtin)
	(user_reg_add): Add baton argument.
	* NEWS: Mention target description register support.
	* features/arm-core.xml, features/arm-fpa.xml: New.
	* eval.c (evaluate_subexp_standard): Allow ptype $register
	when the program is not running.

	* gdb.texinfo (-target-disconnect): Use @@smallexample.
	(Requirements): Add anchor for Expat.  Update description.
	(Target Descriptions): Mention Expat.
	(Target Description Format): Document new elements.  Use
	@@smallexample.
	(Predefined Target Types, Standard Target Features): New sections.
	* doc/gdbint.texinfo (Target Descriptions): New section.

	* gdb.xml/single-reg.xml, gdb.xml/tdesc-regs.exp,
	gdb.xml/core-only.xml, gdb.xml/extra-regs.xml: New files.
@
text
@a3323 12
@@item DEPRECATED_REMOTE_BREAKPOINT
@@itemx DEPRECATED_LITTLE_REMOTE_BREAKPOINT
@@itemx DEPRECATED_BIG_REMOTE_BREAKPOINT
@@findex DEPRECATED_BIG_REMOTE_BREAKPOINT
@@findex DEPRECATED_LITTLE_REMOTE_BREAKPOINT
@@findex DEPRECATED_REMOTE_BREAKPOINT
Specify the breakpoint instruction sequence for a remote target.
@@code{DEPRECATED_REMOTE_BREAKPOINT},
@@code{DEPRECATED_BIG_REMOTE_BREAKPOINT} and
@@code{DEPRECATED_LITTLE_REMOTE_BREAKPOINT} have been deprecated in
favor of @@code{BREAKPOINT_FROM_PC} (@@pxref{BREAKPOINT_FROM_PC}).

@


1.252
log
@        * gdbint.texinfo (Operation System ABI Variant Handling): Update
	descriptions for new/deleted elements in gdb_osabi.  Add missing
	description for function generic_elf_osabi_sniff_abi_tag_sections.
@
text
@d83 1
d4516 129
@


1.251
log
@	* agentexpr.texi: Fix typos.
	* annotate.texinfo: Likewise.
	* gdb.texinfo: Likewise.
	* gdbint.texinfo: Likewise.
	* observer.texi: Likewise.
	* stabs.texinfo: Likewise.
@
text
@d2618 1
a2618 1
The following OS ABI variants are defined in @@file{osabi.h}:
d2622 4
d2633 1
a2633 1
UNIX System V Release 4
d2637 1
a2637 1
GNU using the Hurd kernel
d2641 1
a2641 1
Sun Solaris
d2645 1
a2645 1
OSF/1, including Digital UNIX and Compaq Tru64 UNIX
d2649 1
a2649 1
GNU using the Linux kernel
d2653 1
a2653 1
FreeBSD using the a.out executable format
d2657 1
a2657 1
FreeBSD using the ELF executable format
d2661 1
a2661 1
NetBSD using the a.out executable format
d2665 5
a2669 1
NetBSD using the ELF executable format
d2673 1
a2673 1
Windows CE
d2677 1
a2677 1
DJGPP
d2681 1
a2681 1
Novell NetWare
d2683 31
a2713 11
@@findex GDB_OSABI_ARM_EABI_V1
@@item GDB_OSABI_ARM_EABI_V1
ARM Embedded ABI version 1

@@findex GDB_OSABI_ARM_EABI_V2
@@item GDB_OSABI_ARM_EABI_V2
ARM Embedded ABI version 2

@@findex GDB_OSABI_ARM_APCS
@@item GDB_OSABI_ARM_APCS
Generic ARM Procedure Call Standard
d2753 7
@


1.250
log
@	* gdbint.texinfo (Support Libraries): Remove mmalloc
	entry.  Describe readline library.
@
text
@d287 1
a287 1
read the the @@sc{dwarf} specification.
d1057 1
a1057 1
@@code{deprecate_cmd} should be the full name of the command, i.e. the
d2932 1
a2932 1
Given an address qualifier name, set the @@code{int} refererenced by @@var{type_flags_ptr} to the type flags
d3107 1
a3107 1
significant change.  Many of the macros and functions refered to in this
d3558 1
a3558 1
This is commonly refered to as the return address.
d3575 1
a3575 1
commonly refered to as the frame's @@dfn{stack pointer}.
d3819 1
a3819 1
superseeds @@code{DEPRECATED_REGISTER_VIRTUAL_TYPE}.  @@xref{Target Architecture
d3844 1
a3844 1
@@item SOFTWARE_SINGLE_STEP(@@var{signal}, @@var{insert_breapoints_p})
d3847 1
a3847 1
@@var{insert_breapoints_p}) breakpoints at each possible destinations of
d3928 1
a3928 1
method has been superseeded by generic code.
d3979 1
a3979 1
passed to the the inferior code.  This is the value of the @@code{SP}
d4023 1
a4023 1
@@var{function} should be persued.}
d4504 1
a4504 1
active, but some support persistant connections to a target even
d4936 1
a4936 1
@@code{libiberty}'s documenatation for a more detailed explanation of
d4945 1
a4945 1
offets lists, line tables, symbol tables, partial symbol tables,
d4954 1
a4954 1
various times during a debugging sesssion, but it is released all at
d5003 1
a5003 1
and repetative.  The @@file{vec.h} file contains macros for defining
d5499 1
a5499 1
might contain unintented user-supplied format specifiers.
d6035 1
a6035 1
its version identifer).  E.g., @@samp{6.2widgit2}, or @@samp{6.2 (Widgit
d6410 2
a6411 2
@@email{gdb@@@@sources.redhat.com, GDB Discsussion mailing list} and
@@email{gdb-testers@@@@sources.redhat.com, GDB Discsussion mailing list}
d6618 1
a6618 1
didn't get supressed).  Fixing it would be nice though.}
@


1.249
log
@	* configure.ac (build_warnings): Use -Wall and
	-Wdeclaration-after-statement.
	* configure: Regenerated.

	* gdbint.texinfo (Compiler Warnings): Update for -Wall use.
@
text
@d4908 3
a4910 2

@@section mmalloc
@


1.248
log
@        * gdbint.texinfo (Start of New Year Procedure): Add missing item.
@
text
@d5474 4
a5477 3
With few exceptions, developers should include the configuration option
@@samp{--enable-gdb-build-warnings=,-Werror} when building @@value{GDBN}.
The exceptions are listed in the file @@file{gdb/MAINTAINERS}.
d5481 1
a5481 1
from those flags being treated as errors.
d5486 2
a5487 9
@@item -Wimplicit
Since @@value{GDBN} coding standard requires all functions to be declared
using a prototype, the flag has the side effect of ensuring that
prototyped functions are always visible with out resorting to
@@samp{-Wstrict-prototypes}.

@@item -Wreturn-type
Such code often appears to work except on instruction set architectures
that use register windows.
d5489 1
a5489 1
@@item -Wcomment
d5491 2
a5492 1
@@item -Wtrigraphs
d5494 5
a5498 2
@@item -Wformat
@@itemx -Wformat-nonliteral
d5500 1
a5500 1
@@code{printf} like functions these check not just @@code{printf} calls
a5502 27
@@item -Wparentheses
This warning includes uses of the assignment operator within an
@@code{if} statement.

@@item -Wpointer-arith

@@item -Wuninitialized

@@item -Wunused-label
This warning has the additional benefit of detecting the absence of the
@@code{case} reserved word in a switch statement:
@@smallexample
enum @@{ FD_SCHEDULED, NOTHING_SCHEDULED @@} sched;
@@dots{}
switch (sched)
  @@{
  case FD_SCHEDULED:
    @@dots{};
    break;
  NOTHING_SCHEDULED:
    @@dots{};
    break;
  @@}
@@end smallexample

@@item -Wunused-function

d5511 3
a5513 5
@@end table

@@emph{Pragmatics: Due to the way that @@value{GDBN} is implemented most
functions have unused parameters.  Consequently the warning
@@samp{-Wunused-parameter} is precluded from the list.  The macro
d5516 6
a5521 2
is being used.  The options @@samp{-Wall} and @@samp{-Wunused} are also
precluded because they both include @@samp{-Wunused-parameter}.}
d5523 1
a5523 3
@@emph{Pragmatics: @@value{GDBN} has not simply accepted the warnings
enabled by @@samp{-Wall -Werror -W...}.  Instead it is selecting warnings
when and where their benefits can be demonstrated.}
@


1.247
log
@gdb/
	* arch-utils.c (target_byte_order_user): Renamed from
	target_byte_order.
	(target_byte_order_auto, selected_byte_order): Removed.
	(show_endian): Check target_byte_order_user.
	(set_endian): Always update the architecture.  Set
	target_byte_order_user after success.
	(target_architecture_auto): Removed.
	(target_architecture_user): New.
	(selected_architecture_name, show_architecture): Check it.
	(set_architecture): Set target_architecture_user after success.
	(gdbarch_from_bfd): Check the argument.
	(default_byte_order): New.
	(initialize_current_architecture): Set the global default
	architecture and endianness.
	(gdbarch_info_fill): Remove GDBARCH argument.  Do not check the
	previous architecture.  Use exec_bfd, global selected architecture
	and endianness, and global defaults.
	* arch-utils.h (selected_byte_order): Remove prototype.
	(gdbarch_info_fill): Update.
	* exec.c (exec_file_attach): Update the architecture after removing
	the current file.
	* gdbarch.sh: Update comments.
	(find_arch_by_info): Remove OLD_GDBARCH argument.  Update call to
	gdbarch_info_fill.
	(gdbarch_find_by_info): Update call to find_arch_by_info.
	* gdbarch.h, gdbarch.c: Regenerated.
	* remote-sim.c (gdbsim_open): Use TARGET_BYTE_ORDER.
gdb/doc/
	* gdbint.texinfo (Target Architecture Definition): Add new
	Initializing a New Architecture section.
@
text
@d6181 4
@


1.246
log
@gdb/
	* gdbint.texinfo (Target Vector Definition): Move most
	content into Existing Targets.  Add a menu.
	(Existing Targets): New section, moved from Target Vector
	Definition.  Use @@subsection.
	(Managing Execution State): New section.
gdb/doc/
	* remote-sim.c (gdbsim_kill): Call target_mourn_inferior.
	(gdbsim_load): Don't bother to adjust inferior_ptid here.
	(gdbsim_create_inferior): Mark the simulator as running.
	(gdbsim_open): Don't bother fetching registers.  Mark
	the target as not running.
	(gdbsim_xfer): When the program is not running, pass memory
	requests down.
	(gdbsim_mourn_inferior): Mark the target as not running.
	* target.c (target_mark_running, target_mark_exited): New.
	* target.h (target_has_execution): Update the comment.
	(target_mark_running, target_mark_exited): New prototypes.
@
text
@d2725 35
@


1.245
log
@2006-09-21  Nathan Sidwell  <nathan@@codesourcery.com>
gdb/
	* vec.h: New file.
	* vec.c: New file.
	* Makefile.in (SFILES): Add vec.c.
	(vec_h): New.
	(COMMON_OBJS): Add vec.o.
	(vec.o): New target.
gdb/doc/
	* gdbint.texinfo (Array Containers): New section.
@
text
@d4456 46
a4501 1
@@section File Targets
d4505 1
a4505 1
@@section Standard Protocol and Remote Stubs
d4550 1
a4550 1
@@section ROM Monitor Interface
d4552 1
a4552 1
@@section Custom Protocols
d4554 1
a4554 1
@@section Transport Layer
d4556 1
a4556 1
@@section Builtin Simulator
@


1.244
log
@	* gdbint.texinfo (Overall Structure): New section "Source Tree
	Structure".
@
text
@d4916 175
@


1.243
log
@(Algorithms): Correct spelling and punctuation.
(Releasing GDB, Testsuite): Remove details for including DejaGnu.
@
text
@d215 48
@


1.242
log
@2006-04-22  Andrew Cagney  <cagney@@redhat.com>

	* gdb.texinfo (Contributors): Credit frame unwinder contributors.
	* gdbint.texinfo (Algorithms): Fix errors in frame documentation.
@
text
@d282 1
a282 1
accurately in general, but it's tractible to do well enough to be very
d408 1
a408 1
whether the analyzer properly (albiet conservatively) simulates
d921 1
a921 1
in gdb, eg. as corefiles, as forked processes, and as some opaque
d934 1
a934 1
Some targets, eg.@@: simulators, might have their own built-in 
d6029 1
a6029 1
-D $D-gmt gdb_$V-$D-branchpoint insight+dejagnu
d6031 1
a6031 1
-D 2002-03-03-gmt gdb_5_2-2002-03-03-branchpoint insight+dejagnu
d6035 1
a6035 1
-b -r gdb_$V-$D-branchpoint gdb_$V-branch insight+dejagnu
d6037 1
a6037 1
-b -r gdb_5_2-2002-03-03-branchpoint gdb_5_2-branch insight+dejagnu
d6045 1
a6045 1
by using @@kbd{-D YYYY-MM-DD-gmt} the branch is forced to an exact
d6048 1
a6048 1
the trunk is first taged so that the branch point can easily be found
d6050 1
a6050 1
Insight (which includes GDB) and dejagnu are all tagged at the same time
d6052 1
a6052 1
@@file{version.in} gets bumped to avoid version number conflicts
d6054 1
a6054 1
the reading of @@file{.cvsrc} is disabled using @@file{-f}
d6082 1
a6082 1
mechanism
d6085 1
a6085 1
initial branch version number
d6100 1
a6100 1
a daily timestamp is added to the file @@file{version.in}
d6102 1
a6102 1
the new branch is included in the snapshot process
d6143 1
a6143 1
the branch tag
d6145 1
a6145 1
how to check out the branch using CVS
d6147 1
a6147 1
the date/number of weeks until the release
d6149 1
a6149 2
the branch commit policy
still holds.
d6208 1
a6208 1
$  for m in gdb insight dejagnu
d6252 1
a6252 1
the version
d6254 1
a6254 1
the update date
d6256 1
a6256 1
who did it
a6291 18
@@item dejagnu/src/dejagnu/configure.in

Dejagnu is more complicated.  The version number is a parameter to
@@code{AM_INIT_AUTOMAKE}.  Tweak it to read something like gdb-5.1.91.

Don't forget to re-generate @@file{configure}.

Don't forget to include a @@file{ChangeLog} entry.

@@smallexample
$  emacs dejagnu/src/dejagnu/configure.in
...
c-x 4 a
...
c-x c-s c-x c-c
$  ( cd  dejagnu/src/dejagnu && autoconf )
@@end smallexample

a6302 1
$  ( m=dejagnu; cd $m/src && gmake -f src-release $m.tar.bz2 )
a6312 1
$  ( m=dejagnu; cd $m/src && gmake -f Makefile.in $m.tar.bz2 )
d6347 1
a6347 1
dejagnu/ dejagnu-gdb-5.2.tar.bz2 gdb/ gdb-5.2.tar insight/ insight-5.2.tar
d6452 1
a6452 1
General announcement
d6457 1
a6457 1
Errata
d6466 1
a6466 1
announcement of the most recent release
d6468 1
a6468 1
news entry (remember to update both the top level and the news directory).
d6555 1
a6555 2
@@value{GDBN} (@@code{dejagnu} doesn't get tagged but I think we can live
with that).
d6608 3
a6610 4
The @@value{GDBN} testsuite uses the DejaGNU testing framework.
DejaGNU is built using @@code{Tcl} and @@code{expect}.  The tests
themselves are calls to various @@code{Tcl} procs; the framework runs all the
procs and summarizes the passes and fails.
@


1.242.4.1
log
@Changes from nickrob-async-20060828-mergepoint.
@
text
@d282 1
a282 1
accurately in general, but it's tractable to do well enough to be very
d408 1
a408 1
whether the analyzer properly (albeit conservatively) simulates
d921 1
a921 1
in gdb, e.g.@@: as corefiles, as forked processes, and as some opaque
d934 1
a934 1
Some targets, e.g.@@: simulators, might have their own built-in 
d6029 1
a6029 1
-D $D-gmt gdb_$V-$D-branchpoint insight
d6031 1
a6031 1
-D 2002-03-03-gmt gdb_5_2-2002-03-03-branchpoint insight
d6035 1
a6035 1
-b -r gdb_$V-$D-branchpoint gdb_$V-branch insight
d6037 1
a6037 1
-b -r gdb_5_2-2002-03-03-branchpoint gdb_5_2-branch insight
d6045 1
a6045 1
By using @@kbd{-D YYYY-MM-DD-gmt}, the branch is forced to an exact
d6048 1
a6048 1
The trunk is first tagged so that the branch point can easily be found.
d6050 1
a6050 1
Insight, which includes @@value{GDBN}, is tagged at the same time.
d6052 1
a6052 1
@@file{version.in} gets bumped to avoid version number conflicts.
d6054 1
a6054 1
The reading of @@file{.cvsrc} is disabled using @@file{-f}.
d6082 1
a6082 1
mechanism.
d6085 1
a6085 1
initial branch version number.
d6100 1
a6100 1
A daily timestamp is added to the file @@file{version.in}.
d6102 1
a6102 1
The new branch is included in the snapshot process.
d6143 1
a6143 1
The branch tag.
d6145 1
a6145 1
How to check out the branch using CVS.
d6147 1
a6147 1
The date/number of weeks until the release.
d6149 2
a6150 1
The branch commit policy still holds.
d6209 1
a6209 1
$  for m in gdb insight
d6253 1
a6253 1
The version.
d6255 1
a6255 1
The update date.
d6257 1
a6257 1
Who did it.
d6293 18
d6322 1
d6333 1
d6368 1
a6368 1
gdb/ gdb-5.2.tar insight/ insight-5.2.tar
d6473 1
a6473 1
General announcement.
d6478 1
a6478 1
Errata.
d6487 1
a6487 1
Announcement of the most recent release.
d6489 1
a6489 1
News entry (remember to update both the top level and the news directory).
d6576 2
a6577 1
@@value{GDBN}.
d6630 4
a6633 3
The @@value{GDBN} testsuite uses the DejaGNU testing framework.  The
tests themselves are calls to various @@code{Tcl} procs; the framework
runs all the procs and summarizes the passes and fails.
@


1.241
log
@gdb/
	* breakpoint.c (deprecated_read_memory_nobpt): Update to use
	shadow_len.
	(insert_bp_location, reattach_breakpoints, remove_breakpoint)
	(delete_breakpoint): Update calls to changed methods.
	(deprecated_insert_raw_breakpoint, deprecated_remove_raw_breakpoint)
	(single_step_breakpoints, insert_single_step_breakpoint)
	(remove_single_step_breakpoints): New.
	* breakpoint.h (struct bp_target_info): New.
	(struct bp_location): Replace shadow_contents with
	target_info and overlay_target_info.
	(deprecated_insert_raw_breakpoint, deprecated_remove_raw_breakpoint)
	(insert_single_step_breakpoint, remove_single_step_breakpoints): New
	prototypes.
	* gdbarch.sh: Forward declare struct bp_target_info in gdbarch.h.
	(memory_insert_breakpoint, memory_remove_breakpoint): Update second
	argument.
	* mem-break.c (default_memory_insert_breakpoint): Update.  Set
	placed_address, placed_size, and shadow_len.
	(default_memory_remove_breakpoint): Update.  Don't use
	BREAKPOINT_FROM_PC.
	(memory_insert_breakpoint, memory_remove_breakpoint): Update.
	* target.c (update_current_target): Update prototypes for changed
	functions.
	(debug_to_insert_breakpoint, debug_to_remove_breakpoint)
	(debug_to_insert_hw_breakpoint, debug_to_remove_hw_breakpoint):
	Update.
	* target.h: Forward declare struct bp_target_info.
	(struct target_ops): Use a bp_target_info argument for
	to_insert_breakpoint, to_remove_breakpoint,
	to_insert_hw_breakpoint, and to_remove_hw_breakpoint.
	(target_insert_breakpoint, target_remove_breakpoint)
	(target_insert_hw_breakpoint, target_remove_hw_breakpoint)
	(memory_insert_breakpoint, memory_remove_breakpoint)
	(default_memory_insert_breakpoint, default_memory_remove_breakpoint):
	Update.
	* config/i386/nm-i386.h: Forward declare struct bp_target_info.
	(i386_insert_hw_breakpoint, i386_remove_hw_breakpoint): Update.
	(target_insert_hw_breakpoint, target_remove_hw_breakpoint): Likewise.

	* gdbarch.c, gdbarch.h: Regenerated.

	* alpha-tdep.c (alpha_software_single_step): Use
	insert_single_step_breakpoint and remove_single_step_breakpoints.
	Remove unused statics.
	* arm-tdep.c (arm_software_single_step): Likewise.  Add a note.
	* cris-tdep.c (cris_software_single_step): Likewise.
	* mips-tdep.c (mips_software_single_step): Likewise.
	* rs6000-tdep.c (rs6000_software_single_step): Likewise.
	* sparc-tdep.c (sparc_software_single_step): Likewise.
	* wince.c (struct thread_info_struct): Remove step_prev.
	(undoSStep): Use remove_single_step_breakpoints.
	(wince_software_single_step): Use insert_single_step_breakpoint.

	* corelow.c (ignore): Remove unneeded prototype.  Update arguments.
	* exec.c (ignore): Likewise.
	* sol-thread.c (ignore): Likewise.

	* procfs.c (dbx_link_shadow_contents): Delete.
	(dbx_link_bpt): New.
	(procfs_mourn_inferior): Remove it if necessary.
	(remove_dbx_link_breakpoint): Use it.
	(insert_dbx_link_bpt_in_file): Set it.
	(procfs_init_inferior): Don't update dbx_link_bpt_addr.
	* rs6000-nat.c (exec_one_dummy_insn): Use
	deprecated_insert_raw_breakpoint and
	deprecated_remove_raw_breakpoint.
	* solib-irix.c (shadow_contents, breakpoint_addr): Delete.
	(base_breakpoint): New.
	(disable_break): Use it.
	(enable_break): Set it.

	* i386-nat.c (i386_insert_hw_breakpoint, i386_remove_hw_breakpoint):
	Update.
	* ia64-tdep.c (ia64_memory_insert_breakpoint)
	(ia64_memory_remove_breakpoint): Likewise.
	* m32r-tdep.c (m32r_memory_insert_breakpoint)
	(m32r_memory_remove_breakpoint): Likewise.
	* monitor.c (monitor_insert_breakpoint, monitor_remove_breakpoint):
	Likewise.  Remove unnecessary prototypes.  Use placed_address
	and placed_size.  Removed useless read from memory.
	* nto-procfs.c (procfs_insert_breakpoint)
	(procfs_remove_breakpoint, procfs_insert_hw_breakpoint)
	(procfs_remove_hw_breakpoint): Update.
	* ocd.c (ocd_insert_breakpoint, ocd_remove_breakpoint): Likewise.
	* ocd.h (ocd_insert_breakpoint, ocd_remove_breakpoint): Likewise.
	* ppc-linux-tdep.c (ppc_linux_memory_remove_breakpoint): Likewise.
	* ppc-tdep.h (ppc_linux_memory_remove_breakpoint): Likewise.
	* remote-e7000.c (e7000_insert_breakpoint)
	(e7000_remove_breakpoint): Likewise.
	* remote-m32r-sdi.c (m32r_insert_breakpoint)
	(m32r_remove_breakpoint): Likewise.
	* remote-mips.c (mips_insert_breakpoint)
	(mips_remove_breakpoint): Likewise.
	* remote-rdp.c (remote_rdp_insert_breakpoint)
	(remote_rdp_remove_breakpoint): Likewise.
	(rdp_step): Use deprecated_insert_raw_breakpoint and
	deprecated_remove_raw_breakpoint.
	* remote-sds.c (sds_insert_breakpoint, sds_remove_breakpoint):
	Update.
	* remote-sim.c (gdbsim_insert_breakpoint, gdbsim_remove_breakpoint):
	Delete.
	(init_gdbsim_ops): Use memory_insert_breakpoint and
	memory_remove_breakpoint.
	* remote-st.c (st2000_insert_breakpoint)
	(st2000_remove_breakpoint): Update.  Remove unused
	BREAKPOINT_FROM_PC.
	* remote.c (remote_insert_breakpoint, remote_remove_breakpoint):
	Update.  Use placed_address and placed_size.
	(remote_insert_hw_breakpoint, remote_remove_hw_breakpoint): Likewise.
gdb/doc/
	* gdbint.texinfo (x86 Watchpoints, Target Conditionals): Update insert
	and remove breakpoint prototypes.
	(Watchpoints): Move description of target_insert_hw_breakpoint and
	target_remove_hw_breakpoint ...
	(Breakpoints): ... to here.  Document target_insert_breakpoint and
	target_remove_breakpoint.
@
text
@d235 5
a239 10
@@value{GDBN}'s current frame model is the result of an incremental
cleanup of working code, not a fresh design, so it's a little weird.

The natural model would have a frame object, with methods that read
and write that frame's registers.  Reading or writing the youngest
frame's registers would simply read or write the processor's current
registers, since the youngest frame is running directly on the
processor.  Older frames might have some registers saved on the stack
by younger frames, so accessing the older frames' registers would do a
mix of memory accesses and register accesses, as appropriate.
d242 8
a249 7
Instead, @@value{GDBN}'s model is that you find a frame's registers by
``unwinding'' them from the next younger frame.  That is, to access
the registers of frame #1 (the next-to-youngest frame), you actually
apply @@code{frame_register_unwind} to frame #0 (the youngest frame).
But then the obvious question is: how do you access the registers of
the youngest frame itself?  How do you ``unwind'' them when they're
not wound up?
a259 26
@@findex create_new_frame
@@vindex FRAME_FP
@@code{FRAME_FP} in the machine description has no meaning to the
machine-independent part of @@value{GDBN}, except that it is used when
setting up a new frame from scratch, as follows:

@@smallexample
create_new_frame (read_register (DEPRECATED_FP_REGNUM), read_pc ()));
@@end smallexample

@@cindex frame pointer register
Other than that, all the meaning imparted to @@code{DEPRECATED_FP_REGNUM}
is imparted by the machine-dependent code.  So,
@@code{DEPRECATED_FP_REGNUM} can have any value that is convenient for
the code that creates new frames.  (@@code{create_new_frame} calls
@@code{DEPRECATED_INIT_EXTRA_FRAME_INFO} if it is defined; that is where
you should use the @@code{DEPRECATED_FP_REGNUM} value, if your frames are
nonstandard.)

@@cindex frame chain
Given a @@value{GDBN} frame, define @@code{DEPRECATED_FRAME_CHAIN} to
determine the address of the calling function's frame.  This will be
used to create a new @@value{GDBN} frame struct, and then
@@code{DEPRECATED_INIT_EXTRA_FRAME_INFO} and
@@code{DEPRECATED_INIT_FRAME_PC} will be called for the new frame.

@


1.240
log
@src/gdb/ChangeLog:
2006-03-28  Jim Blandy  <jimb@@codesourcery.com>

	* prologue-value.c, prologue-value.h: New files.
	* Makefile.in (prologue_value_h): New variable.
	(HFILES_NO_SRCDIR): List prologue-value.h.
	(SFILES): List prologue-value.c.
	(COMMON_OBS): List prologue-value.o.
	(prologue-value.o): New rule.

src/gdb/doc/ChangeLog:
2006-03-28  Jim Blandy  <jimb@@codesourcery.com>

	* gdbint.texinfo (Prologue Analysis): New section.
@
text
@d530 41
a700 12
@@cindex insert or remove hardware breakpoint
@@findex target_remove_hw_breakpoint
@@findex target_insert_hw_breakpoint
@@item target_remove_hw_breakpoint (@@var{addr}, @@var{shadow})
@@itemx target_insert_hw_breakpoint (@@var{addr}, @@var{shadow})
Insert or remove a hardware-assisted breakpoint at address @@var{addr}.
Returns zero for success, non-zero for failure.  @@var{shadow} is the
real contents of the byte where the breakpoint has been inserted; it
is generally not valid when hardware breakpoints are used, but since
no other code touches these values, the implementations of the above
two macros can use them for their internal purposes.

d890 2
a891 2
@@item i386_insert_hw_breakpoint (@@var{addr}, @@var{shadow}
@@itemx i386_remove_hw_breakpoint (@@var{addr}, @@var{shadow})
d895 2
d3263 2
a3264 2
@@item MEMORY_INSERT_BREAKPOINT (@@var{addr}, @@var{contents_cache})
@@itemx MEMORY_REMOVE_BREAKPOINT (@@var{addr}, @@var{contents_cache})
@


1.239
log
@	* gdbint.texinfo (Watchpoints): Delete
        TARGET_REGION_SIZE_OK_FOR_HW_WATCHPOINT.
@
text
@d290 169
@


1.239.6.1
log
@Merge to branch:
  http://sourceware.org/ml/gdb-patches/2006-04/msg00139.html
@
text
@d494 2
a495 2
@@item target_remove_hw_breakpoint (@@var{addr}, @@var{bpt})
@@itemx target_insert_hw_breakpoint (@@var{addr}, @@var{bpt})
d497 1
a497 2
Returns zero for success, non-zero for failure.  @@var{bpt} is the
breakpoint location.  @@code{@@var{bpt}->shadow_contents} is the
d692 2
a693 2
@@item i386_insert_hw_breakpoint (@@var{addr}, @@var{bpt})
@@itemx i386_remove_hw_breakpoint (@@var{addr}, @@var{bpt})
d3063 2
a3064 2
@@item MEMORY_INSERT_BREAKPOINT (@@var{addr}, @@var{bpt})
@@itemx MEMORY_REMOVE_BREAKPOINT (@@var{addr}, @@var{len}, @@var{bpt})
@


1.238
log
@	* gdbint.texinfo (Symbol Handling): Add a section
	on memory management.
@
text
@a467 7
@@findex TARGET_REGION_SIZE_OK_FOR_HW_WATCHPOINT
@@item TARGET_REGION_SIZE_OK_FOR_HW_WATCHPOINT (@@var{size})
Return non-zero if hardware watchpoints can be used to watch a region
whose size is @@var{size}.  @@value{GDBN} only uses this macro as a
fall-back, in case @@code{TARGET_REGION_OK_FOR_HW_WATCHPOINT} is not
defined.

@


1.237
log
@2006-01-25  Jim Blandy  <jimb@@redhat.com>

	* gdbint.texinfo (Testsuite): Explain how to run selected tests.
@
text
@d12 1
a12 1
   2002, 2003, 2004, 2005
d52 1
a52 1
   2002, 2003, 2004, 2005  Free Software Foundation, Inc.
d1988 16
@


1.236
log
@2006-01-24  Jim Blandy  <jimb@@redhat.com>

	* gdbint.texinfo (Frames): Document the basics of GDB's register
	unwinding model, and explain the existence of the "sentinel" frame.
@
text
@d6477 7
@


1.235
log
@gdb/ChangeLog:
2006-01-18  Jim Blandy  <jimb@@redhat.com>

	* configure.ac: Add -Wno-pointer-sign to list of build warnings.
	* configure: Regenerated.

gdb/doc/ChangeLog:
2006-01-18  Jim Blandy  <jimb@@redhat.com>

	* gdbint.texinfo (Coding): Add entry for -Wno-pointer-sign to list
	of warning flags.
@
text
@d234 30
@


1.234
log
@2006-01-04  Michael Snyder  <msnyder@@redhat.com>

	* gdb.texinfo: Add documentation for linux-fork.
	* gdbint.texinfo: Add internal documentation for checkpoints.
@
text
@d5019 9
@


1.233
log
@	* gdb.texinfo (Target Commands, Bug Reporting, File Options)
	(Symbols): Fix usage of "e.g.".

	* gdbint.texinfo (libgdb, Symbol Handling, Native Debugging)
	(Coding): Fix usage of "e.g.".
@
text
@d715 32
@


1.232
log
@	* stabs.texinfo:
	* refcard.tex:
	* gpl.texi:
	* gdbint.texinfo:
	* gdb.texinfo:
	* gdb-cfg.texi:
	* fdl.texi:
	* annotate.texinfo:
	* all-cfg.texi:
	* Makefile.in: Add (C) after Copyright.  Update the FSF
	address.
@
text
@d1461 1
a1461 1
Since @@code{libgdb} could have multiple clients (e.g. a GUI supporting
d1609 1
a1609 1
table being read, and 0 if a secondary symbol file (e.g. shared library
d1683 1
a1683 1
By its address (e.g. execution stops at some address which is inside a
d1692 1
a1692 1
(e.g. the user asks to print a variable, or set a breakpoint on a
d4325 1
a4325 1
exists on a core file (e.g. the u-area or a @@code{struct core}).  Then
d4330 1
a4330 1
sets of registers (e.g.  integer and float), the ``reg2'' segment.  This
d4731 1
a4731 1
Some functions, e.g. @@code{fputs_filtered()} or @@code{error()}, specify
@


1.231
log
@        * gdbint.texinfo (Start of New Year Procedure): New chapter.
@
text
@d11 1
a11 1
Copyright 1990, 1991, 1992, 1993, 1994, 1996, 1998, 1999, 2000, 2001,
@


1.230
log
@Update copyright years.
@
text
@d89 1
d5602 32
@


1.229
log
@2005-01-04  Andrew Cagney  <cagney@@gnu.org>

	* gdbint.texinfo (Versions and Branches): Make the date (YYYYMMDD)
	part of the version number.
@
text
@d11 2
a12 1
Copyright 1990,1991,1992,1993,1994,1996,1998,1999,2000,2001,2002,2003,2004
d52 1
a52 1
   2002, 2003, 2004  Free Software Foundation, Inc.
@


1.228
log
@* gdbint.texinfo (Algorithms): Remove description of
TARGET_DISABLE_HW_WATCHPOINTS and TARGET_ENABLE_HW_WATCHPOINTS.
@
text
@d5407 8
a5414 6
an official release (e.g., 6.0 or 6.0.1)
@@item @@var{major}.@@var{minor}.@@var{patchlevel}_@@var{YYYY}@@var{MM}@@var{DD}
a snapshot (e.g., 6.0.50_20020630)
@@item @@var{major}.@@var{minor}.@@var{patchlevel}_@@var{YYYY}-@@var{MM}-@@var{DD}-cvs
a @@sc{cvs} check out (e.g., 6.0.90_2004-02-30-cvs)
@@item @@var{major}.@@var{minor}.@@var{patchlevel}_@@var{YYYY}@@var{MM}@@var{DD} (@@var{vendor})
d5416 2
a5417 2
@@var{major}.@@var{minor}.@@var{patchlevel}_@@var{YYYY}@@var{MM}@@var{DD},
may contain additional changes
d5422 2
a5423 2
of 50.  As each new release branch is created, the mainline
@@var{major} and @@var{minor} version numbers are accordingly updated.
d5425 21
a5445 7
@@value{GDBN}'s release branch uses a similar, but slightly more
complicated scheme.  When the branch is first cut, the mainline's
@@var{patchlevel} is changed to .90.  As draft releases are drawn from
the branch, the @@var{patchlevel} is incremented.  Once the first
release (@@var{major}.@@var{minor}) has been made, the version prefix is
updated to @@var{major}.@@var{minor}.0.90.  Follow on releases have an
incremented @@var{patchlevel}.
d5454 1
a5454 1
6.1.50_2002-03-02-cvs
d5456 1
a5456 1
        +---------------------------.
a5457 10
        |                           |
6.2.50_2002-03-03-cvs        6.1.90 (draft #1)
        |                           |
6.2.50_2002-03-04-cvs        6.1.90_2002-03-04-cvs
        |                           |
6.2.50_2002-03-05-cvs        6.1.91 (draft #2)
        |                           |
6.2.50_2002-03-06-cvs        6.1.91_2002-03-06-cvs
        |                           |
6.2.50_2002-03-07-cvs        6.2 (release)
d5459 9
a5467 1
6.2.50_2002-03-08-cvs        6.2.0.90_2002-03-08-cvs
d5469 5
a5473 3
6.2.50_2002-03-09-cvs        6.2.1 (update)
        |                           |
6.2.50_2002-03-10-cvs         <branch closed>
d5475 1
a5475 1
6.2.50_2002-03-11-cvs
d5477 1
a5477 1
        +---------------------------.
d5479 3
a5481 3
        |                           |
6.3.50_2002-03-12-cvs        6.2.90 (draft #1)
        |                           |
d5557 1
a5557 1
@@samp{6.2.50_20030303_owner_name} or @@samp{6.2 (Owner Name)}.
@


1.227
log
@
	* gdbint.texinfo (Algorithms): More accurate description of
	STOPPED_BY_WATCHPOINT.  Point out that target_stopped_data_address
	is not needed unless data-read and data-access watchpoints are
	supported.  Add a description of how GDB checks whether the
	inferior stopped because a watchpoint was hit.
@
text
@a442 14
@@findex TARGET_DISABLE_HW_WATCHPOINTS
@@item TARGET_DISABLE_HW_WATCHPOINTS (@@var{pid})
Disables watchpoints in the process identified by @@var{pid}.  This is
used, e.g., on HPPA-RISC machines running HP-UX, which provide
operations to disable and enable the page-level memory protection that
implements hardware watchpoints on that platform.

@@findex TARGET_ENABLE_HW_WATCHPOINTS
@@item TARGET_ENABLE_HW_WATCHPOINTS (@@var{pid})
Enables watchpoints in the process identified by @@var{pid}.  This is
used, e.g., on HPPA-RISC machines running HP-UX, which provide
operations to disable and enable the page-level memory protection that
implements hardware watchpoints on that platform.

@


1.226
log
@2004-10-12  Andrew Cagney  <cagney@@gnu.org>

	* gdbint.texinfo (Versions and Branches): New chapter.
	(Releasing GDB): Delete "Versions and Branches" section.
	(Top): Add "Versions and Branches".
@
text
@d400 12
d446 3
a448 3
used, e.g., on HP-UX which provides operations to disable and enable
the page-level memory protection that implements hardware watchpoints
on that platform.
d453 3
a455 3
used, e.g., on HP-UX which provides operations to disable and enable
the page-level memory protection that implements hardware watchpoints
on that platform.
d457 1
d496 5
a500 1
@@var{addr_p} and return non-zero.  Otherwise, return zero.
d526 10
@


1.225
log
@
2004-10-08  Jeff Johnston  <jjohnstn@@redhat.com>

        * gdbint.texinfo (target_stopped_data_address): Update to
        new prototype.
        (i386_stopped_data_address): Update prototype and description.
        (i386_stopped_by_watchpoint): New function and description.
@
text
@d87 1
d5383 2
a5384 4
@@node Releasing GDB

@@chapter Releasing @@value{GDBN}
@@cindex making a new release of gdb
d5386 1
a5386 1
@@section Versions and Branches
d5388 2
a5389 19
@@subsection Version Identifiers

@@value{GDBN}'s version is determined by the file @@file{gdb/version.in}.

@@value{GDBN}'s mainline uses ISO dates to differentiate between
versions.  The CVS repository uses @@var{YYYY}-@@var{MM}-@@var{DD}-cvs
while the corresponding snapshot uses @@var{YYYYMMDD}.

@@value{GDBN}'s release branch uses a slightly more complicated scheme.
When the branch is first cut, the mainline version identifier is
prefixed with the @@var{major}.@@var{minor} from of the previous release
series but with .90 appended.  As draft releases are drawn from the
branch, the minor minor number (.90) is incremented.  Once the first
release (@@var{M}.@@var{N}) has been made, the version prefix is updated
to @@var{M}.@@var{N}.0.90 (dot zero, dot ninety).  Follow on releases have
an incremented minor minor version number (.0).

Using 5.1 (previous) and 5.2 (current), the example below illustrates a
typical sequence of version identifiers:
d5392 11
a5402 22
@@item 5.1.1
final release from previous branch
@@item 2002-03-03-cvs
main-line the day the branch is cut
@@item 5.1.90-2002-03-03-cvs
corresponding branch version
@@item 5.1.91
first draft release candidate
@@item 5.1.91-2002-03-17-cvs
updated branch version
@@item 5.1.92
second draft release candidate
@@item 5.1.92-2002-03-31-cvs
updated branch version
@@item 5.1.93
final release candidate (see below)
@@item 5.2
official release
@@item 5.2.0.90-2002-04-07-cvs
updated CVS branch version
@@item 5.2.1
second official release
d5405 67
a5471 1
Notes:
d5473 2
a5474 9
@@itemize @@bullet
@@item
Minor minor minor draft release candidates such as 5.2.0.91 have been
omitted from the example.  Such release candidates are, typically, never
made.
@@item
For 5.1.93 the bziped tar ball @@file{gdb-5.1.93.tar.bz2} is just the
official @@file{gdb-5.2.tar} renamed and compressed.
@@end itemize
d5479 2
a5480 1
its version identifer).
d5482 2
a5483 3
Since @@value{GDBN} does not make minor minor minor releases (e.g.,
5.1.0.1) the conflict between that and a minor minor draft release
identifier (e.g., 5.1.0.90) is avoided.
d5485 1
d5487 4
a5490 1
@@subsection Branches
d5492 1
a5492 6
@@value{GDBN} draws a release series (5.2, 5.2.1, @@dots{}) from a single
release branch (gdb_5_2-branch).  Since minor minor minor releases
(5.1.0.1) are not made, the need to branch the release branch is avoided
(it also turns out that the effort required for such a a branch and
release is significantly greater than the effort needed to create a new
release from the head of the release branch).
d5494 35
a5528 1
Releases 5.0 and 5.1 used branch and release tags of the form:
d5530 4
a5533 5
@@smallexample
gdb_N_M-YYYY-MM-DD-branchpoint
gdb_N_M-YYYY-MM-DD-branch
gdb_M_N-YYYY-MM-DD-release
@@end smallexample
d5535 2
a5536 1
Release 5.2 is trialing the branch and release tags:
d5538 22
a5559 4
@@smallexample
gdb_N_M-YYYY-MM-DD-branchpoint
gdb_N_M-branch
gdb_M_N-YYYY-MM-DD-release
d5561 3
d5565 1
a5565 3
@@emph{Pragmatics: The branchpoint and release tags need to identify when
a branch and release are made.  The branch tag, denoting the head of the
branch, does not have this criteria.}
d5567 8
@


1.224
log
@2004-09-12  Andrew Cagney  <cagney@@gnu.org>

	* target.c (target_info): Delete #ifdef call to FILES_INFO_HOOK.

Index: doc/ChangeLog
2004-09-12  Andrew Cagney  <cagney@@gnu.org>

	* gdbint.texinfo (Native Debugging): Delete description of
	FILES_INFO_HOOK.
@
text
@d479 4
a482 3
@@item target_stopped_data_address ()
If the inferior has some watchpoint that triggered, return the address
associated with that watchpoint.  Otherwise, return zero.
d602 4
a605 4
@@item i386_stopped_data_address (void)
The macros @@code{STOPPED_BY_WATCHPOINT} and
@@code{target_stopped_data_address} are set to call this function.  The
argument passed to @@code{STOPPED_BY_WATCHPOINT} is ignored.  This
d611 10
d668 1
a668 1
@@code{i386_stopped_data_address}, except that it doesn't return the
@


1.223
log
@* gdbint.texinfo (User Interface): Change local_hex_string_custom
to hex_string_custom (not historically correct, but more
understandable, given the current code).
@
text
@a4354 4
@@item FILES_INFO_HOOK
@@findex FILES_INFO_HOOK
(Only defined for Convex.)

@


1.222
log
@Index: ChangeLog
2004-09-03  Andrew Cagney  <cagney@@gnu.org>

	* config/m68k/tm-linux.h (SVR4_SHARED_LIBS): Delete.
	* config/i386/tm-linux64.h (SVR4_SHARED_LIBS): Delete.
	* config/i386/nm-i386sco5.h (SVR4_SHARED_LIBS): Delete.
	* config/tm-linux.h (SVR4_SHARED_LIBS): Delete.
	* config/nm-sysv4.h (SVR4_SHARED_LIBS): Delete.
	* config/nm-linux.h (SVR4_SHARED_LIBS): Delete.
	* config/nm-gnu.h (SVR4_SHARED_LIBS): Delete.
	* sh64-tdep.c [SVR4_SHARED_LIBS]: Delete #ifdef wrapper.
	* sh-tdep.c [SVR4_SHARED_LIBS]: Delete #ifdef wrapper.

Index: doc/ChangeLog
2004-09-03  Andrew Cagney  <cagney@@gnu.org>

	* gdbint.texinfo (Native Debugging): Delete SVR4_SHARED_LIBS.
@
text
@d1375 1
a1375 1
        local_hex_string_custom ((unsigned long) b->address, "08l"));
@


1.221
log
@2004-08-24  Andrew Cagney  <cagney@@gnu.org>

	* gdbint.texinfo (Target Architecture Definition): Add missing
	comma.
@
text
@a4444 4
@@item SVR4_SHARED_LIBS
@@findex SVR4_SHARED_LIBS
Define this to indicate that SVR4-style shared libraries are in use.

@


1.220
log
@2004-08-20  Michael Chastain  <mec.gnu@@mindspring.com>

	* (Using the Testsuite): build != host is supported,
	but some test scripts do not support build != host.
@
text
@d3819 1
a3819 1
@@code{write_pc} and @@code{read_sp}.  For most targets, these may be
@


1.219
log
@* gdbint.texinfo (Host Definition): Delete description of
FCLOSE_PROVIDED and GETENV_PROVIDED.
@
text
@d6282 9
@


1.218
log
@        * doc/gdbint.texinfo (Host Definition): Remove documentation
        for USE_O_NOCTTY, no longer used.
        * config/xm-aix4.h (USE_O_NOCTTY): Remove, no longer used.
        * config/rs6000/xm-rs6000.h (USE_O_NOCTTY): Likewise.
@
text
@a2167 5
@@item FCLOSE_PROVIDED
Define this if the system declares @@code{fclose} in the headers included
in @@code{defs.h}.  This isn't needed unless your compiler is unusually
anal.

a2170 5
@@item GETENV_PROVIDED
Define this if the system declares @@code{getenv} in its headers included
in @@code{defs.h}.  This isn't needed unless your compiler is unusually
anal.

@


1.217
log
@* infptrace.c: Include <sys/file.h> if HAVE_SYS_FILE_H instead of
!NO_SYS_FILE.
[KERNEL_U_ADDR_BSD]: Don't include <a.out.h>.
[KERNEL_U_ADDR_BSD] (kernel_u_addr): Remove variable.
(_initialize_kernel_u_addr): Remove prototype and function.
* infttrace.c: Include <sys/file.h> if HAVE_SYS_FILE_H instead of
!NO_SYS_FILE.
* xcoffread.c: Likewise.
@
text
@a2259 5
@@item USE_O_NOCTTY
Define this if the interior's tty should be opened with the @@code{O_NOCTTY}
flag.  (FIXME: This should be a native-only flag, but @@file{inflow.c} is
always linked in.)

@


1.216
log
@2004-08-05  Andrew Cagney  <cagney@@gnu.org>

	* gdbarch.sh (deprecated_frame_saved_pc): Delete.
	* gdbarch.h, gdbarch.c: Re-generate.
	* regcache.c (deprecated_read_fp, deprecated_write_sp): Delete.
	* inferior.h (deprecated_read_fp, deprecated_write_sp): Delete.
	* frame.h: Delete deprecated_read_fp from comments.
	* arch-utils.c (deprecated_init_frame_pc_default): Delete.
	* arch-utils.h (deprecated_init_frame_pc_default): Delete.

Index: doc/ChangeLog
2004-08-05  Andrew Cagney  <cagney@@gnu.org>

	* gdbint.texinfo (Target Architecture Definition): Delete
	reference to deprecated_read_fp.
@
text
@a2136 3
@@item NO_SYS_FILE
Define this if your system does not have a @@code{<sys/file.h>}.

a4403 6
@@item KERNEL_U_ADDR_BSD
@@findex KERNEL_U_ADDR_BSD
Define this to cause @@value{GDBN} to determine the address of @@code{u} at
runtime, by using Berkeley-style @@code{nlist} on the kernel's image in
the root directory.

a4420 4
@@item PTRACE_FP_BUG
@@findex PTRACE_FP_BUG
See @@file{mach386-xdep.c}.

@


1.215
log
@2004-08-02  Andrew Cagney  <cagney@@gnu.org>

	* gdbarch.sh (deprecated_register_bytes): Delete.
	* gdbarch.h, gdbarch.c: Re-generate.
	* regcache.c (deprecated_register_bytes): New function.
	* regcache.h (deprecated_register_bytes): Declare.
	* xstormy16-tdep.c (xstormy16_gdbarch_init): Update.
	* v850-tdep.c (v850_gdbarch_init): Update.
	* sh64-tdep.c (sh64_gdbarch_init): Update.
	* ns32k-tdep.c (ns32k_gdbarch_init_32082): Update.
	* mn10300-tdep.c (mn10300_gdbarch_init): Update.
	* mcore-tdep.c (mcore_gdbarch_init): Update.
	* cris-tdep.c (cris_gdbarch_init): Update.
	* arm-tdep.c (arm_gdbarch_init): Update.
	* remote.c (init_remote_state): Update.
	* remote-vx.c (vx_prepare_to_store): Update.
	* remote-sds.c (sds_fetch_registers, sds_prepare_to_store): Update.
	* irix5-nat.c (fetch_core_registers): Update.
	* cris-tdep.c (cris_register_bytes_ok): Update.
	* config/nm-gnu.h (CHILD_PREPARE_TO_STORE): Update.
@
text
@d3837 3
a3839 3
@@code{write_pc}, @@code{read_sp} and @@code{deprecated_read_fp}.  For most
targets, these may be left undefined.  @@value{GDBN} will call the read
and write register functions with the relevant @@code{_REGNUM} argument.
@


1.214
log
@* dbxread.c (process_one_symbol) [PCC_SOL_BROKEN]: Remove dead
code.
@
text
@a3628 8
@@item DEPRECATED_REGISTER_BYTES
@@findex DEPRECATED_REGISTER_BYTES
The total amount of space needed to store @@value{GDBN}'s copy of the
machine's register state.

This is no longer needed.  @@value{GDBN} instead computes the size of the
register buffer at run-time.

@


1.213
log
@* gdbint.texinfo (Target Architecture Definition): Remove
SUN_FIXED_LBRAC_BUG.
@
text
@a3549 4
@@item PCC_SOL_BROKEN
@@findex PCC_SOL_BROKEN
(Used only in the Convex target.)

@


1.212
log
@2004-06-26  Andrew Cagney  <cagney@@gnu.org>

	* xcoffsolib.c (xcoff_solib_address): Replace xasprintf with
	xstrprintf.
	* varobj.c (varobj_gen_name, create_child, c_name_of_child)
	(c_value_of_variable): Ditto.
	* utils.c (internal_vproblem): Ditto.
	* solib-aix5.c (build_so_list_from_mapfile): Ditto.
	* remote.c (add_packet_config_cmd): Ditto.
	* remote-rdp.c (rdp_set_command_line): Ditto.
	* regcache.c (regcache_dump): Ditto.
	* frv-tdep.c (new_variant, new_variant): Ditto.
	* fbsd-proc.c (child_pid_to_exec_file): Ditto.
	(fbsd_find_memory_regions): Ditto.
	* breakpoint.c (create_thread_event_breakpoint)
	(create_breakpoints): Ditto.
	* aix-thread.c (aix_thread_pid_to_str): Ditto.
	* ada-lang.c (is_package_name): Ditto.  Also delete xmalloc call.

Index: doc/ChangeLog
2004-06-26  Andrew Cagney  <cagney@@gnu.org>

	* gdbint.texinfo (Coding): Replace xasprintf with xstrprintf.
@
text
@a3769 4
@@item SUN_FIXED_LBRAC_BUG
@@findex SUN_FIXED_LBRAC_BUG
(Used only for Sun-3 and Sun-4 targets.)

@


1.211
log
@2004-06-20  Andrew Cagney  <cagney@@gnu.org>

	* gdbarch.sh (DEPRECATED_USE_STRUCT_CONVENTION): Deprecated.
	* gdbarch.h, gdbarch.c: Re-generate.
	* values.c (using_struct_return): Update call.
	* mcore-tdep.c: Update comment.
	* infcall.c (call_function_by_hand): Update comment.
	* xstormy16-tdep.c (xstormy16_gdbarch_init): Update.
	* arch-utils.h (always_use_struct_convention): Update.
	* v850-tdep.c (v850_gdbarch_init): Update.
	* sh64-tdep.c (sh64_gdbarch_init): Update.
	* sh-tdep.c (sh_gdbarch_init): Update.
	* rs6000-tdep.c (rs6000_gdbarch_init): Update.
	* mips-tdep.c (mips_gdbarch_init): Update.
	* mcore-tdep.c (mcore_gdbarch_init): Update.
	* m32r-tdep.c (m32r_gdbarch_init): Update.
	* ia64-tdep.c (ia64_gdbarch_init): Update.
	* h8300-tdep.c (h8300_gdbarch_init): Update.
	* frv-tdep.c (frv_gdbarch_init): Update.
	* cris-tdep.c (cris_gdbarch_init): Update.
	* arm-tdep.c (arm_gdbarch_init): Update.
	* alpha-tdep.c (alpha_gdbarch_init): Update.

Index: doc/ChangeLog
2004-06-20  Andrew Cagney  <cagney@@gnu.org>

	* gdbint.texinfo (Target Architecture Definition): Deprecate
	USE_STRUCT_CONVENTION.
@
text
@d4945 1
a4945 1
function @@code{xasprintf}.
@


1.210
log
@2004-06-18  Andrew Cagney  <cagney@@gnu.org>

	* gdbarch.sh (DEPRECATED_FUNCTION_START_OFFSET): Deprecated.
	* gdbarch.h, gdbarch.c: Re-generate.
	* ada-lang.c (ada_finish_decode_line_1): Update.
	* infrun.c (handle_inferior_event): Update.
	* infcall.c (find_function_addr): Update.
	* linespec.c (minsym_found): Update.
	* symtab.c (find_function_start_sal, skip_prologue_using_sal):
	Update.
	* blockframe.c (legacy_frameless_look_for_prologue): Update.
	* cli/cli-cmds.c (disassemble_command): Update.
	* vax-tdep.c (vax_gdbarch_init): Update.

Index: doc/ChangeLog
2004-06-18  Andrew Cagney  <cagney@@gnu.org>

	* gdbint.texinfo (Target Architecture Definition): Deprecate
	FUNCTION_START_OFFSET.
@
text
@d3896 2
a3897 2
@@item USE_STRUCT_CONVENTION (@@var{gcc_p}, @@var{type})
@@findex USE_STRUCT_CONVENTION
@


1.209
log
@2004-06-14  Andrew Cagney  <cagney@@gnu.org>

	Based on changes from Karl Berry.
	* gdb.texinfo: Do not use @@sc in a direntry.
	* stabs.texinfo: Change @@dircateogry to "Software development".
	* gdbint.texinfo, gdb.texinfo, annotate.texinfo: Ditto.
@
text
@d3263 2
a3264 2
@@item FUNCTION_START_OFFSET
@@findex FUNCTION_START_OFFSET
d3270 7
a3276 7
the address of its first instruction.  However, on the VAX, for example,
each function starts with two bytes containing a bitmask indicating
which registers to save upon entry to the function.  The VAX @@code{call}
instructions check this value, and save the appropriate registers
automatically.  Thus, since the offset from the function's address to
its first instruction is two bytes, @@code{FUNCTION_START_OFFSET} would
be 2 on the VAX.
@


1.208
log
@Index: ChangeLog
2004-06-13  Andrew Cagney  <cagney@@gnu.org>

	* gdbarch.sh (RETURN_VALUE_ON_STACK): Delete method.
	* gdbarch.h, gdbarch.c: Re-generate.
	* m68hc11-tdep.c (m68hc11_return_value_on_stack): Delete function.
	(m68hc11_use_struct_convention): Delete function.
	(m68hc11_extract_struct_value_address): Delete function.
	(m68hc11_return_value): New function.
	(m68hc11_gdbarch_init): Instead of store_return_value,
	extract_return_value, return_value_on_stack,
	deprecated_extract_struct_value_address and use_struct_convention,
	set return_value.
	* values.c (using_struct_return): Do not call
	RETURN_VALUE_ON_STACK.
	* arch-utils.h (generic_return_value_on_stack_not): Delete
	declaration.
	* arch-utils.c (generic_return_value_on_stack_not): Delete
	function.

Index: doc/ChangeLog
2004-06-13  Andrew Cagney  <cagney@@gnu.org>

	* gdbint.texinfo (Target Architecture Definition): Delete
	description of RETURN_VALUE_ON_STACK.
@
text
@d4 1
a4 1
@@dircategory Programming & development tools.
@


1.207
log
@2004-06-09  Andrew Cagney  <cagney@@gnu.org>

	* gdbint.texinfo (Native Debugging): Restore "@@table @@code"
	deleted by previous patch.
@
text
@a3505 37

@@item RETURN_VALUE_ON_STACK(@@var{type})
@@findex RETURN_VALUE_ON_STACK
@@cindex returning structures by value
@@cindex structures, returning by value

Return non-zero if values of type TYPE are returned on the stack, using
the ``struct convention'' (i.e., the caller provides a pointer to a
buffer in which the callee should store the return value).  This
controls how the @@samp{finish} command finds a function's return value,
and whether an inferior function call reserves space on the stack for
the return value.

The full logic @@value{GDBN} uses here is kind of odd.  

@@itemize @@bullet
@@item
If the type being returned by value is not a structure, union, or array,
and @@code{RETURN_VALUE_ON_STACK} returns zero, then @@value{GDBN}
concludes the value is not returned using the struct convention.

@@item
Otherwise, @@value{GDBN} calls @@code{USE_STRUCT_CONVENTION} (see below).
If that returns non-zero, @@value{GDBN} assumes the struct convention is
in use.
@@end itemize

In other words, to indicate that a given type is returned by value using
the struct convention, that type must be either a struct, union, array,
or something @@code{RETURN_VALUE_ON_STACK} likes, @@emph{and} something
that @@code{USE_STRUCT_CONVENTION} likes.

Note that, in C and C@@t{++}, arrays are never returned by value.  In those
languages, these predicates will always see a pointer type, never an
array type.  All the references above to arrays being returned by value
apply only to other languages.

@


1.206
log
@2004-06-08  Andrew Cagney  <cagney@@gnu.org>

	* infptrace.c [ATTACH_DETACH]: Remove #ifdef wrappers.
	(attach, detach): When neither PT_ATTACH / PT_DETACH nor
	PTRACE_ATTACH / PTRACE_DETACH available call error.
	(PT_ATTACH, PT_DETACH): Move definition to attach / detach.
	* infttrace.c (update_thread_state_after_attach, attach, detach):
	Remove #ifdef wrappers.
	* inftarg.c (child_attach, child_detach): Remove #ifdef wrappers.
	* gnu-nat.c [ATTACH_DETACH]: Remove #ifdef wrappers.
	* config/nm-bsd.h (ATTACH_DETACH): Delete.
	* config/nm-sysv4.h (ATTACH_DETACH): Delete.
	* config/nm-nbsd.h (ATTACH_DETACH): Delete.
	* config/nm-linux.h (ATTACH_DETACH): Delete.
	* config/rs6000/nm-rs6000.h (ATTACH_DETACH): Delete.
	* config/pa/nm-hppah.h (ATTACH_DETACH): Delete.
	* config/i386/nm-i386sco5.h (ATTACH_DETACH): Delete.
	* config/i386/nm-i386sco4.h (ATTACH_DETACH): Delete.
	* config/i386/nm-i386gnu.h (ATTACH_DETACH): Delete.

Index: doc/ChangeLog
2004-06-08  Andrew Cagney  <cagney@@gnu.org>

	* gdbint.texinfo (Native Debugging): Delete documentation on
	ATTACH_DETACH.
@
text
@d4407 2
@


1.205
log
@2004-06-06  Randolph Chung  <tausq@@debian.org>

	* gdb.texinfo (push_dummy_call): Use @@code{struct value}.
@
text
@a4406 6
@@table @@code
@@item ATTACH_DETACH
@@findex ATTACH_DETACH
If defined, then @@value{GDBN} will include support for the @@code{attach} and
@@code{detach} commands.

@


1.204
log
@2004-06-06  Randolph Chung  <tausq@@debian.org>

	* gdb.texinfo (push_dummy_call): Update argument list to match
	the new push_dummy_call method signature.  Describe the function
	argument.
@
text
@d3646 1
a3646 1
@@var{function} is a pointer to a struct value; on architectures that use
@


1.203
log
@2004-05-08  Andrew Cagney  <cagney@@redhat.com>

	* infrun.c (resume): Delete call to DO_DEFERRED_STORES.
	* target.c (target_detach, target_disconnect): Ditto.

2004-05-08  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Delete
	description of DO_DEFERRED_STORES.
@
text
@d3638 1
a3638 1
@@item push_dummy_call (@@var{gdbarch}, @@var{func_addr}, @@var{regcache}, @@var{pc_addr}, @@var{nargs}, @@var{args}, @@var{sp}, @@var{struct_return}, @@var{struct_addr})
d3646 3
@


1.202
log
@2004-05-08  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Delete
	references to DEPRECATED_FIX_CALL_DUMMY.

2004-05-08  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (DEPRECATED_FIX_CALL_DUMMY): Delete.
	* gdbarch.h, gdbarch.c: Re-generate.
	* ns32k-tdep.c (ns32k_gdbarch_init): Do not set
	deprecated_fix_call_dummy.
	* v850-tdep.c (v850_gdbarch_init): Ditto.
	* infcall.c (call_function_by_hand): Do not call
	DEPRECATED_FIX_CALL_DUMMY.
@
text
@a3053 9
@@item DO_DEFERRED_STORES
@@itemx CLEAR_DEFERRED_STORES
@@findex CLEAR_DEFERRED_STORES
@@findex DO_DEFERRED_STORES
Define this to execute any deferred stores of registers into the inferior,
and to cancel any deferred stores.

Currently only implemented correctly for native Sparc configurations?

@


1.201
log
@2004-05-08  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (DEPRECATED_CALL_DUMMY_WORDS)
	(DEPRECATED_SIZEOF_CALL_DUMMY_WORDS): Delete.
	* gdbarch.h, gdbarch.c: Re-generate.
	* arm-linux-tdep.c (arm_linux_call_dummy_words)
	(arm_linux_init_abi): Do not set deprecated_call_dummy_words or
	deprecated_sizeof_call_dummy_words.
	* arm-tdep.c (arm_call_dummy_words, arm_gdbarch_init): Ditto.
	* xstormy16-tdep.c (xstormy16_gdbarch_init): Ditto.
	* v850-tdep.c (v850_gdbarch_init): Ditto.
	* sh64-tdep.c (sh64_gdbarch_init): Ditto.
	* ns32k-tdep.c (ns32k_call_dummy_words, ns32k_gdbarch_init): Ditto.
	* mn10300-tdep.c (mn10300_gdbarch_init): Ditto.
	* mcore-tdep.c (mcore_gdbarch_init): Ditto.
	* arch-utils.h (legacy_call_dummy_words)
	(legacy_sizeof_call_dummy_words): Delete declarations.
	* arch-utils.c (legacy_call_dummy_words)
	(legacy_sizeof_call_dummy_words): Delete variables.

Index: doc/ChangeLog
2004-05-08  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Delete
	description of DEPRECATED_CALL_DUMMY_WORDS,
	DEPRECATED_SIZEOF_CALL_DUMMY_WORDS, and CALL_DUMMY.
@
text
@a3660 1
@@findex DEPRECATED_FIX_CALL_DUMMY
d3674 1
a3674 1
@@code{DEPRECATED_REGISTER_SIZE}, and @@code{DEPRECATED_FIX_CALL_DUMMY}.
@


1.200
log
@2004-05-08  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (DEPRECATED_PUSH_DUMMY_FRAME): Delete.
	* gdbarch.h, gdbarch.c: Re-generate.
	* inferior.h (PUSH_DUMMY_FRAME): Delete macro.
	* infcall.c (call_function_by_hand): Eliminate call to
	DEPRECATED_PUSH_DUMMY_FRAME.
	* ns32k-tdep.c (ns32k_gdbarch_init): Do not set deprecated
	push_dummy_frame.
	(ns32k_push_dummy_frame): Delete function.
@
text
@a3033 29
@@item DEPRECATED_CALL_DUMMY_WORDS
@@findex DEPRECATED_CALL_DUMMY_WORDS
Pointer to an array of @@code{LONGEST} words of data containing
host-byte-ordered @@code{DEPRECATED_REGISTER_SIZE} sized values that
partially specify the sequence of instructions needed for an inferior
function call.

Should be deprecated in favor of a macro that uses target-byte-ordered
data.

This method has been replaced by @@code{push_dummy_code}
(@@pxref{push_dummy_code}).

@@item DEPRECATED_SIZEOF_CALL_DUMMY_WORDS
@@findex DEPRECATED_SIZEOF_CALL_DUMMY_WORDS
The size of @@code{DEPRECATED_CALL_DUMMY_WORDS}.  This must return a
positive value.

This method has been replaced by @@code{push_dummy_code}
(@@pxref{push_dummy_code}).

@@item CALL_DUMMY
@@findex CALL_DUMMY
A static initializer for @@code{DEPRECATED_CALL_DUMMY_WORDS}.
Deprecated.

This method has been replaced by @@code{push_dummy_code}
(@@pxref{push_dummy_code}).

d3674 2
a3675 4
This method replaces @@code{DEPRECATED_CALL_DUMMY_WORDS},
@@code{DEPRECATED_SIZEOF_CALL_DUMMY_WORDS}, @@code{CALL_DUMMY},
@@code{CALL_DUMMY_LOCATION}, @@code{DEPRECATED_REGISTER_SIZE}, and
@@code{DEPRECATED_FIX_CALL_DUMMY}.
@


1.199
log
@2004-05-08  Andrew Cagney  <cagney@@redhat.com>

	* ns32k-tdep.c (ns32k_gdbarch_init): Do not set
	deprecated_call_dummy_breakpoint_offset or
	deprecated_call_dummy_start_offset.
	* dummy-frame.c, arm-tdep.c: Update comments.
	* gdbarch.sh (DEPRECATED_CALL_DUMMY_BREAKPOINT_OFFSET)
	(DEPRECATED_CALL_DUMMY_START_OFFSET): Delete.
	* gdbarch.h, gdbarch.c: Re-generate.

Index: doc/ChangeLog
2004-05-08  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Delete
	reference to DEPRECATED_CALL_DUMMY_BREAKPOINT_OFFSET.
@
text
@a3707 4
@@item DEPRECATED_PUSH_DUMMY_FRAME
@@findex DEPRECATED_PUSH_DUMMY_FRAME
Used in @@samp{call_function_by_hand} to create an artificial stack frame.

@


1.198
log
@2004-05-01  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (DEPRECATED_PC_IN_SIGTRAMP): Delete.
	* gdbarch.h, gdbarch.c: Re-generate.
	* shnbsd-tdep.c (shnbsd_init_abi): Do not set pc_in_sigtramp.
	(shnbsd_pc_in_sigtramp): Delete.
	* i386-interix-tdep.c (i386_interix_init_abi): Do not set
	pc_in_sigtramp.
	* hppa-hpux-tdep.c (hppa_hpux_init_abi): Do not set
	pc_in_sigtramp.
	* frame.h: Update comments.
	* ppc-linux-tdep.c: Update comments.
	* breakpoint.c (bpstat_what): Update comments.

Index: doc/ChangeLog
2004-05-01  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Delete
	description of DEPRECATED_PC_IN_SIGTRAMP.
@
text
@d3705 1
a3705 2
@@code{CALL_DUMMY_LOCATION}, @@code{DEPRECATED_REGISTER_SIZE},
@@code{DEPRECATED_CALL_DUMMY_BREAKPOINT_OFFSET}, and
@


1.197
log
@2004-04-30  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (BELIEVE_PCC_PROMOTION_TYPE): Delete.
	* gdbarch.h, gdbarch.c: Re-generate.
	* stabsread.c (define_symbol): Delete BELIEVE_PCC_PROMOTION_TYPE
	code.
@
text
@a3628 12
@@item DEPRECATED_PC_IN_SIGTRAMP (@@var{pc}, @@var{name})
@@findex DEPRECATED_PC_IN_SIGTRAMP
@@cindex sigtramp
The @@dfn{sigtramp} is a routine that the kernel calls (which then calls
the signal handler).  On most machines it is a library routine that is
linked into the executable.

This function, given a program counter value in @@var{pc} and the
(possibly NULL) name of the function in which that @@var{pc} resides,
returns nonzero if the @@var{pc} and/or @@var{name} show that we are in
sigtramp.

@


1.196
log
@2004-04-04  Andrew Cagney  <cagney@@redhat.com>

	* config/vax/xm-vax.h (FAULT_CODE_ORIGIN, INIT_STACK): Delete.
	* config/alpha/xm-alphaosf.h (NO_SIGINTERRUPT): Delete.
	* config/alpha/xm-alphalinux.h (NO_SIGINTERRUPT): Delete.
@
text
@a2928 6
@@item BELIEVE_PCC_PROMOTION_TYPE
@@findex BELIEVE_PCC_PROMOTION_TYPE
Define this if @@value{GDBN} should believe the type of a @@code{short}
argument when compiled by @@code{pcc}, but look within a full int space to get
its value.  Only defined for Sun-3 at present.

@


1.195
log
@2004-04-02  Andrew Cagney  <cagney@@redhat.com>

	* sh64-tdep.c (sh64_init_extra_frame_info): Replace
	DEPRECATED_CALL_DUMMY_LENGTH with 0, simplify.
	* dummy-frame.h: Delete out-of-date comments.
	* gdbarch.sh (DEPRECATED_CALL_DUMMY_LENGTH): Delete.
	* gdbarch.h, gdbarch.c: Re-generate.
@
text
@a2253 4
@@item NO_SIGINTERRUPT
@@findex siginterrupt
Define this to indicate that @@code{siginterrupt} is not available.

@


1.194
log
@2004-03-23  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (SIGTRAMP_START, SIGTRAMP_END): Deprecate.
	* gdbarch.h, gdbarch.c: Re-generate.
	* i386obsd-tdep.c (i386obsd_init_abi): Update.
	* i386nbsd-tdep.c (i386nbsd_init_abi): Update.
	* i386bsd-tdep.c (i386bsd_init_abi): Update.
	* config/vax/tm-vaxbsd.h (DEPRECATED_SIGTRAMP_END)
	(DEPRECATED_SIGTRAMP_START): Update.
	* config/m68k/tm-nbsd.h (DEPRECATED_SIGTRAMP_END)
	(DEPRECATED_SIGTRAMP_START): Update.
	* blockframe.c (find_pc_sect_partial_function): Update.
	* arch-utils.c (legacy_pc_in_sigtramp): Update.

Index: doc/ChangeLog
2004-03-23  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Deprecate
	references to SIGTRAMP_START and SIGTRAMP_END.
@
text
@d3060 1
a3060 1
positive value.  See also @@code{DEPRECATED_CALL_DUMMY_LENGTH}.
@


1.193
log
@2004-03-23  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (PC_IN_SIGTRAMP): Change to a function with
	predicate, deprecate.
	* gdbarch.h, gdbarch.c: Re-generate.
	* alpha-linux-tdep.c (alpha_linux_init_abi): Update.
	* alpha-osf1-tdep.c (alpha_osf1_init_abi): Update.
	* alpha-tdep.c (alpha_sigtramp_frame_sniffer): Update.
	* alphafbsd-tdep.c (alphafbsd_init_abi): Update.
	* alphanbsd-tdep.c (alphanbsd_init_abi): Update.
	* amd64-linux-tdep.c (amd64_linux_init_abi): Update.
	* amd64-tdep.c (amd64_sigtramp_frame_sniffer): Update.
	* amd64nbsd-tdep.c (amd64nbsd_init_abi): Update.
	* amd64obsd-tdep.c (amd64obsd_init_abi): Update.
	* arm-tdep.c (arm_sigtramp_unwind_sniffer): Update.
	* blockframe.c (find_pc_partial_function): Update.
	* breakpoint.c (bpstat_what): Update.
	* frame.c (frame_type_from_pc, legacy_get_prev_frame): Update.
	* frv-linux-tdep.c (frv_linux_init_abi): Update.
	* frv-tdep.c (frv_sigtramp_frame_sniffer): Update.
	* hppa-hpux-tdep.c (hppa_hpux_init_abi): Update.
	* i386-interix-tdep.c (i386_interix_init_abi): Update.
	* i386-linux-tdep.c (i386_linux_init_abi): Update.
	* i386-nto-tdep.c (i386nto_init_abi): Update.
	* i386-sol2-tdep.c (i386_sol2_init_abi): Update.
	* i386-tdep.c (i386_sigtramp_frame_sniffer)
	(i386_svr4_init_abi, i386_go32_init_abi, i386_gdbarch_init): Update.
	* i386bsd-tdep.c (i386bsd_init_abi): Update.
	* i386nbsd-tdep.c (i386nbsd_init_abi): Update.
	* i386obsd-tdep.c (i386obsd_init_abi): Update.
	* ia64-tdep.c (ia64_sigtramp_frame_sniffer): Update.
	* infrun.c (pc_in_sigtramp): Update.
	* m68k-tdep.c (m68k_sigtramp_frame_sniffer): Update.
	* m68klinux-tdep.c (m68k_linux_init_abi): Update.
	* mips-tdep.c (mips_gdbarch_init): Update.
	* mipsnbsd-tdep.c (mipsnbsd_init_abi): Update.
	* ppc-linux-tdep.c: Update comment.
	* ppcnbsd-tdep.c (ppcnbsd_init_abi): Update.
	* shnbsd-tdep.c (shnbsd_init_abi): Update.
	* sparc-linux-tdep.c (sparc32_linux_init_abi): Update.
	* sparc-sol2-tdep.c (sparc32_sol2_init_abi): Update.
	* sparc64-sol2-tdep.c (sparc64_sol2_init_abi): Update.
	* sparc64fbsd-tdep.c (sparc64fbsd_init_abi): Update.
	* sparc64nbsd-tdep.c (sparc64nbsd_init_abi): Update.
	* sparc64obsd-tdep.c (sparc64obsd_init_abi): Update.
	* sparcnbsd-tdep.c (sparc32nbsd_init_abi): Update.
	* sparcobsd-tdep.c (sparc32obsd_init_abi): Update.

Index: doc/ChangeLog
2004-03-23  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Deprecate
	references to PC_IN_SIGTRAMP.
@
text
@d3414 4
a3417 4
@@item SIGTRAMP_START (@@var{pc})
@@findex SIGTRAMP_START
@@itemx SIGTRAMP_END (@@var{pc})
@@findex SIGTRAMP_END
@


1.192
log
@2004-03-19  Andrew Cagney  <cagney@@redhat.com>

	* config/pa/tm-hppa.h (GDB_TARGET_IS_HPPA): Delete unused macro.

Index: doc/ChangeLog
2004-03-19  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Delete
	reference to GDB_TARGET_IS_HPPA.
@
text
@d3639 2
a3640 2
@@item PC_IN_SIGTRAMP (@@var{pc}, @@var{name})
@@findex PC_IN_SIGTRAMP
@


1.191
log
@2004-03-18  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Coding): Update section on gdbarch_data,
	describe pre_init and post_init.
@
text
@a3727 1
@@code{GDB_TARGET_IS_HPPA},
@


1.190
log
@2004-02-26  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Coding): Document use of gdbarch_obstack_zalloc
	in Per-architecture module data section.
@
text
@d4875 13
a4887 23
The multi-arch framework includes a mechanism for adding module specific
per-architecture data-pointers to the @@code{struct gdbarch} architecture
object.

A module registers one or more per-architecture data-pointers using the
function @@code{register_gdbarch_data}:

@@deftypefun struct gdbarch_data *register_gdbarch_data (gdbarch_data_init_ftype *@@var{init})

The @@var{init} function is used to obtain an initial value for a
per-architecture data-pointer.  The function is called, after the
architecture has been created, when the data-pointer is still
uninitialized (@@code{NULL}) and its value has been requested via a call
to @@code{gdbarch_data}.  A data-pointer can also be initialize
explicitly using @@code{set_gdbarch_data}.

Any memory required by the @@var{init} function should be allocated
using @@code{GDBARCH_OBSTACK_ZALLOC}.  That memory is automatically
released when the corresponding architecture is deleted.

The function @@code{register_gdbarch_data} returns a @@code{struct
gdbarch_data} that is used to identify the data-pointer that was added
to the module.
d4889 8
d4899 15
a4913 1
A typical module has an @@code{init} function of the form:
a4917 7
static void *
nozel_init (struct gdbarch *gdbarch)
@@{
  struct nozel *data = GDBARCH_OBSTACK_ZALLOC (gdbarch, struct nozel);
  @@dots{}
  return data;
@@}
d4920 8
a4927 7
Since uninitialized (@@code{NULL}) data-pointers are initialized
on-demand, an @@code{init} function is free to call other modules that
use data-pointers.  Those modules data-pointers will be initialized as
needed.  Care should be taken to ensure that the @@code{init} call graph
does not contain cycles.

The data-pointer is registered with the call:
d4930 2
a4931 2
void
_initialize_nozel (void)
d4933 3
a4935 2
  nozel_handle = register_gdbarch_data (nozel_init);
@@dots{}
a4937 11
The per-architecture data-pointer is accessed using the function:

@@deftypefun void *gdbarch_data (struct gdbarch *@@var{gdbarch}, struct gdbarch_data *@@var{data_handle})
Given the architecture @@var{arch} and module data handle
@@var{data_handle} (returned by @@code{register_gdbarch_data}, this
function returns the current value of the per-architecture data-pointer.
@@end deftypefun

The non-@@code{NULL} data-pointer returned by @@code{gdbarch_data} should
be saved in a local variable and then used directly:

d4939 2
a4940 2
int
nozel_total (struct gdbarch *gdbarch)
a4941 1
  int total;
d4943 1
a4943 2
  @@dots{}
  return total;
d4947 2
a4948 1
It is also possible to directly initialize the data-pointer using:
d4950 3
a4952 7
@@deftypefun void set_gdbarch_data (struct gdbarch *@@var{gdbarch}, struct gdbarch_data *@@var{handle}, void *@@var{pointer})
Set the still @@code{NULL} data-pointer corresponding to @@var{handle}
to the non-@@code{NULL} @@var{pointer} value.
@@end deftypefun

This function is used by modules that require a mechanism for explicitly
setting the per-architecture data-pointer during architecture creation:
d4955 2
a4956 3
/* Always return a non-NULL nozel.  */
static struct nozel *
gdbarch_nozel (struct gdbarch *gdbarch)
d4958 3
a4960 7
  struct nozel *nozel = gdbarch_data (gdbarch, nozel_handle);
  if (nozel == NULL)
    @@{
      nozel = nozel_init (gdbarch);
      set_gdbarch_data (gdbarch, nozel_handle, nozel);
    @@}
  return nozel;
d4965 2
a4966 3
/* Called during architecture creation.  */
extern void
set_gdbarch_nozel (struct gdbarch *gdbarch, int total)
d4968 2
a4969 3
  struct nozel *data = gdbarch_nozel (gdbarch);
  @@dots{}
  data->total = total;
a4971 14

@@smallexample
void
_initialize_nozel (void)
@@{
  nozel_handle = register_gdbarch_data (nozel_init);
  @@dots{}
@@end smallexample

@@noindent
Note that an @@code{init} function still needs to be registered.  It is
used to initialize the data-pointer when the architecture creation phase
fail to set an initial value.

@


1.190.2.1
log
@2004-06-14  Andrew Cagney  <cagney@@gnu.org>

	Based on changes from Karl Berry.
	* gdb.texinfo: Do not use @@sc in a direntry.
	* stabs.texinfo: Change @@dircateogry to "Software development".
	* gdbint.texinfo, gdb.texinfo, annotate.texinfo: Ditto.
@
text
@d4 1
a4 1
@@dircategory Software development
@


1.190.4.1
log
@Merge with mainline cagney_tramp-20040321-mergepoint.
@
text
@d3728 1
d4875 24
a4898 12
The multi-arch framework includes a mechanism for adding module
specific per-architecture data-pointers to the @@code{struct gdbarch}
architecture object.

A module registers one or more per-architecture data-pointers using:

@@deftypefun struct gdbarch_data *gdbarch_data_register_pre_init (gdbarch_data_pre_init_ftype *@@var{pre_init})
@@var{pre_init} is used to, on-demand, allocate an initial value for a
per-architecture data-pointer using the architecture's obstack (passed
in as a parameter).  Since @@var{pre_init} can be called during
architecture creation, it is not parameterized with the architecture.
and must not call modules that use per-architecture data.
d4901 21
a4921 9
@@deftypefun struct gdbarch_data *gdbarch_data_register_post_init (gdbarch_data_post_init_ftype *@@var{post_init})
@@var{post_init} is used to obtain an initial value for a
per-architecture data-pointer @@emph{after}.  Since @@var{post_init} is
always called after architecture creation, it both receives the fully
initialized architecture and is free to call modules that use
per-architecture data (care needs to be taken to ensure that those
other modules do not try to call back to this module as that will
create in cycles in the initialization call graph).
@@end deftypefun
d4923 7
a4929 2
These functions return a @@code{struct gdbarch_data} that is used to
identify the per-architecture data-pointer added for that module.
d4935 2
a4936 5
@@var{data_handle} (returned by @@code{gdbarch_data_register_pre_init}
or @@code{gdbarch_data_register_post_init}), this function returns the
current value of the per-architecture data-pointer.  If the data
pointer is @@code{NULL}, it is first initialized by calling the
corresponding @@var{pre_init} or @@var{post_init} method.
d4939 2
a4940 1
The examples below assume the following definitions:
d4943 8
a4950 2
struct nozel @@{ int total; @@};
static struct gdbarch_data *nozel_handle;
d4953 9
a4961 8
A module can extend the architecture vector, adding additional
per-architecture data, using the @@var{pre_init} method.  The module's
per-architecture data is then initialized during architecture
creation.

In the below, the module's per-architecture @@emph{nozel} is added.  An
architecture can specify its nozel by calling @@code{set_gdbarch_nozel}
from @@code{gdbarch_init}.
d4964 3
a4966 2
static void *
nozel_pre_init (struct obstack *obstack)
d4968 7
a4974 2
  struct nozel *data = OBSTACK_ZALLOC (obstack, struct nozel);
  return data;
d4979 1
d4983 3
a4985 2
  struct nozel *data = gdbarch_data (gdbarch, nozel_handle);
  data->total = nozel;
a4988 7
A module can on-demand create architecture dependant data structures
using @@code{post_init}.

In the below, the nozel's total is computed on-demand by
@@code{nozel_post_init} using information obtained from the
architecture.

d4990 2
a4991 2
static void *
nozel_post_init (struct gdbarch *gdbarch)
d4993 2
a4994 4
  struct nozel *data = GDBARCH_OBSTACK_ZALLOC (gdbarch, struct nozel);
  nozel->total = gdbarch@@dots{} (gdbarch);
  return data;
@@}
d4997 5
a5001 8
@@smallexample
extern int
nozel_total (struct gdbarch *gdbarch)
@@{
  struct nozel *data = gdbarch_data (gdbarch, nozel_handle);
  return data->total;
@@}
@@end smallexample
@


1.189
log
@2004-02-24  Andrew Cagney  <cagney@@redhat.com>

	* annotate.texinfo: Wrap fdl.texi include in raise/lower sections.
	* gdb.texinfo, gdbint.texinfo, stabs.texinfo: Ditto.
	* fdl.texi: Import Version 1.2, November 2002.
@
text
@d4882 1
a4882 1
@@deftypefun struct gdbarch_data *register_gdbarch_data (gdbarch_data_init_ftype *@@var{init}, gdbarch_data_free_ftype *@@var{free})
d4891 3
a4893 4
The @@var{free} function is called when a data-pointer needs to be
destroyed.  This occurs when either the corresponding @@code{struct
gdbarch} object is being destroyed or when @@code{set_gdbarch_data} is
overriding a non-@@code{NULL} data-pointer value.
d4901 1
a4901 1
A typical module has @@code{init} and @@code{free} functions of the form:
d4904 1
d4909 1
a4909 1
  struct nozel *data = XMALLOC (struct nozel);
a4912 6
@@dots{}
static void
nozel_free (struct gdbarch *gdbarch, void *data)
@@{
  xfree (data);
@@}
d4927 1
a4927 1
  nozel_handle = register_gdbarch_data (nozel_init, nozel_free);
d4955 3
a4957 4
@@deftypefun void set_gdbarch_data (struct gdbarch *@@var{gdbarch}, struct gdbarch_data *handle, void *@@var{pointer})
Update the data-pointer corresponding to @@var{handle} with the value of
@@var{pointer}.  If the previous data-pointer value is non-NULL, then it
is freed using data-pointers @@var{free} function.
d4964 11
a4974 8
/* Called during architecture creation.  */
extern void
set_gdbarch_nozel (struct gdbarch *gdbarch,
                   int total)
@@{
  struct nozel *data = XMALLOC (struct nozel);
  @@dots{}
  set_gdbarch_data (gdbarch, nozel_handle, nozel);
d4979 3
a4981 3
/* Default, called when nozel not set by set_gdbarch_nozel().  */
static void *
nozel_init (struct gdbarch *gdbarch)
d4983 1
a4983 1
  struct nozel *default_nozel = XMALLOC (struc nozel);
d4985 1
a4985 1
  return default_nozel;
d4993 1
a4993 1
  nozel_handle = register_gdbarch_data (nozel_init, NULL);
@


1.188
log
@2004-02-09  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (DEPRECATED_FRAMELESS_FUNCTION_INVOCATION): Predicate
	and function replacing FRAMELESS_FUNCTION_INVOCATION.
	* blockframe.c (legacy_frameless_look_for_prologue): Rename
	frameless_look_for_prologue.
	* frame.h (legacy_frameless_look_for_prologue): Rename
	frameless_look_for_prologue.
	* gdbarch.h, gdbarch.c: Re-generate.
	* sh64-tdep.c (sh64_gdbarch_init): Update.
	* sh-tdep.c (sh_gdbarch_init): Update.
	* s390-tdep.c (s390_gdbarch_init): Update.
	* rs6000-tdep.c (rs6000_gdbarch_init): Update.
	* ppc-linux-tdep.c (ppc_linux_init_abi): Update.
	* m68k-tdep.c (m68k_gdbarch_init): Update.
	(delta68_frame_args_address): Update.
	* m32r-tdep.c (m32r_gdbarch_init): Update.
	* hppa-tdep.c (hppa_gdbarch_init): Update.
	* h8300-tdep.c (h8300_gdbarch_init): Update.
	* frv-tdep.c (frv_gdbarch_init): Update.
	(frv_frameless_function_invocation): Update.
	* cris-tdep.c (cris_gdbarch_init): Update.
	(cris_frameless_function_invocation): Update.
	* avr-tdep.c (avr_gdbarch_init): Update.
	* arm-tdep.c (arm_gdbarch_init): Update.
	* stack.c (frame_info): Update, call predicate.
	* rs6000-tdep.c (rs6000_frame_chain): Update, call predicate..
	* frame.c (legacy_get_prev_frame): Update, call predicate..
	* arch-utils.c (generic_frameless_function_invocation_not): Delete.
	* arch-utils.h (generic_frameless_function_invocation_not): Delete.
	* alpha-tdep.c (alpha_gdbarch_init): Do not set frameless function
	invocation.
	* d10v-tdep.c (d10v_gdbarch_init): Ditto.
	* ns32k-tdep.c (ns32k_gdbarch_init): Ditto.
	* vax-tdep.c (vax_gdbarch_init): Ditto.
@
text
@d6752 1
d6754 1
@


1.188.2.1
log
@Merge mainline to intercu branch.
@
text
@d3414 4
a3417 4
@@item DEPRECATED_SIGTRAMP_START (@@var{pc})
@@findex DEPRECATED_SIGTRAMP_START
@@itemx DEPRECATED_SIGTRAMP_END (@@var{pc})
@@findex DEPRECATED_SIGTRAMP_END
d3639 2
a3640 2
@@item DEPRECATED_PC_IN_SIGTRAMP (@@var{pc}, @@var{name})
@@findex DEPRECATED_PC_IN_SIGTRAMP
d3728 1
d4875 25
a4899 12
The multi-arch framework includes a mechanism for adding module
specific per-architecture data-pointers to the @@code{struct gdbarch}
architecture object.

A module registers one or more per-architecture data-pointers using:

@@deftypefun struct gdbarch_data *gdbarch_data_register_pre_init (gdbarch_data_pre_init_ftype *@@var{pre_init})
@@var{pre_init} is used to, on-demand, allocate an initial value for a
per-architecture data-pointer using the architecture's obstack (passed
in as a parameter).  Since @@var{pre_init} can be called during
architecture creation, it is not parameterized with the architecture.
and must not call modules that use per-architecture data.
d4902 24
a4925 9
@@deftypefun struct gdbarch_data *gdbarch_data_register_post_init (gdbarch_data_post_init_ftype *@@var{post_init})
@@var{post_init} is used to obtain an initial value for a
per-architecture data-pointer @@emph{after}.  Since @@var{post_init} is
always called after architecture creation, it both receives the fully
initialized architecture and is free to call modules that use
per-architecture data (care needs to be taken to ensure that those
other modules do not try to call back to this module as that will
create in cycles in the initialization call graph).
@@end deftypefun
d4927 9
a4935 2
These functions return a @@code{struct gdbarch_data} that is used to
identify the per-architecture data-pointer added for that module.
d4941 2
a4942 5
@@var{data_handle} (returned by @@code{gdbarch_data_register_pre_init}
or @@code{gdbarch_data_register_post_init}), this function returns the
current value of the per-architecture data-pointer.  If the data
pointer is @@code{NULL}, it is first initialized by calling the
corresponding @@var{pre_init} or @@var{post_init} method.
d4945 2
a4946 1
The examples below assume the following definitions:
d4949 8
a4956 2
struct nozel @@{ int total; @@};
static struct gdbarch_data *nozel_handle;
d4959 1
a4959 8
A module can extend the architecture vector, adding additional
per-architecture data, using the @@var{pre_init} method.  The module's
per-architecture data is then initialized during architecture
creation.

In the below, the module's per-architecture @@emph{nozel} is added.  An
architecture can specify its nozel by calling @@code{set_gdbarch_nozel}
from @@code{gdbarch_init}.
d4961 8
a4968 8
@@smallexample
static void *
nozel_pre_init (struct obstack *obstack)
@@{
  struct nozel *data = OBSTACK_ZALLOC (obstack, struct nozel);
  return data;
@@}
@@end smallexample
d4971 1
d4973 2
a4974 1
set_gdbarch_nozel (struct gdbarch *gdbarch, int total)
d4976 3
a4978 2
  struct nozel *data = gdbarch_data (gdbarch, nozel_handle);
  data->total = nozel;
a4981 7
A module can on-demand create architecture dependant data structures
using @@code{post_init}.

In the below, the nozel's total is computed on-demand by
@@code{nozel_post_init} using information obtained from the
architecture.

d4983 1
d4985 1
a4985 1
nozel_post_init (struct gdbarch *gdbarch)
d4987 3
a4989 3
  struct nozel *data = GDBARCH_OBSTACK_ZALLOC (gdbarch, struct nozel);
  nozel->total = gdbarch@@dots{} (gdbarch);
  return data;
d4994 2
a4995 2
extern int
nozel_total (struct gdbarch *gdbarch)
d4997 2
a4998 3
  struct nozel *data = gdbarch_data (gdbarch, nozel_handle);
  return data->total;
@@}
d5001 6
a6751 1
@@raisesections
a6752 1
@@lowersections
@


1.188.2.2
log
@Merge mainline to intercu branch - 2004-09-15
@
text
@d4 1
a4 1
@@dircategory Software development
d1375 1
a1375 1
        hex_string_custom ((unsigned long) b->address, 8));
d2137 3
d2171 5
d2179 5
d2254 4
d2267 5
d2933 6
d3044 29
d3093 9
d3311 2
a3312 2
@@item DEPRECATED_FUNCTION_START_OFFSET
@@findex DEPRECATED_FUNCTION_START_OFFSET
d3318 7
a3324 7
the address of its first instruction.  However, on the VAX, for
example, each function starts with two bytes containing a bitmask
indicating which registers to save upon entry to the function.  The
VAX @@code{call} instructions check this value, and save the
appropriate registers automatically.  Thus, since the offset from the
function's address to its first instruction is two bytes,
@@code{DEPRECATED_FUNCTION_START_OFFSET} would be 2 on the VAX.
d3554 37
d3635 16
d3698 1
a3698 1
@@item push_dummy_call (@@var{gdbarch}, @@var{function}, @@var{regcache}, @@var{pc_addr}, @@var{nargs}, @@var{args}, @@var{sp}, @@var{struct_return}, @@var{struct_addr})
a3705 3
@@var{function} is a pointer to a @@code{struct value}; on architectures that use
function descriptors, this contains the function descriptor value.

d3712 1
d3725 17
a3741 2
This method replaces @@code{CALL_DUMMY_LOCATION},
@@code{DEPRECATED_REGISTER_SIZE}.
d3872 4
d3955 3
a3957 3
@@code{write_pc}, and @@code{read_sp}.  For most targets, these may be
left undefined.  @@value{GDBN} will call the read and write register
functions with the relevant @@code{_REGNUM} argument.
d3998 2
a3999 2
@@item DEPRECATED_USE_STRUCT_CONVENTION (@@var{gcc_p}, @@var{type})
@@findex DEPRECATED_USE_STRUCT_CONVENTION
d4473 4
d4495 4
d4529 6
d4552 4
d4595 4
d5051 1
a5051 1
function @@code{xstrprintf}.
a6431 9
DejaGNU supports separate build, host, and target machines.  However,
some @@value{GDBN} test scripts do not work if the build machine and
the host machine are not the same.  In such an environment, these scripts
will give a result of ``UNRESOLVED'', like this:

@@smallexample
UNRESOLVED: gdb.base/example.exp: This test script does not work on a remote host.
@@end smallexample

@


1.187
log
@2004-02-16  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Coding): Mention -Wunused-function.
@
text
@d3192 2
a3193 2
@@item FRAMELESS_FUNCTION_INVOCATION(@@var{fi})
@@findex FRAMELESS_FUNCTION_INVOCATION
@


1.186
log
@2004-02-14  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (DEPRECATED_EXTRA_STACK_ALIGNMENT_NEEDED): Delete.
	(DEPRECATED_CALL_DUMMY_STACK_ADJUST): Delete.
	(DEPRECATED_CALL_DUMMY_ADDRESS): Delete.
	* gdbarch.h, gdbarch.c: Re-generate.
	* frame.c (deprecated_get_next_frame_hack): Delete function.
	* frame.h (deprecated_get_next_frame_hack): Delete declaration.
	* blockframe.c (deprecated_pc_in_call_dummy_at_entry_point):
	Update.
	* infcall.c (call_function_by_hand): Update.

Index: doc/ChangeLog
2004-02-14  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Delete
	description of DEPRECATED_CALL_DUMMY_STACK_ADJUST.
@
text
@d5151 2
@


1.185
log
@2004-02-12  Elena Zannoni  <ezannoni@@redhat.com>

 	* gdb.texinfo: Properly quote the name "C++".
 	* gdbint.texinfo: Ditto.
 	* stabs.texinfo: Ditto.
@
text
@a3079 6
@@item DEPRECATED_CALL_DUMMY_STACK_ADJUST
@@findex DEPRECATED_CALL_DUMMY_STACK_ADJUST
Stack adjustment needed when performing an inferior function call.  This
function is no longer needed.  @@xref{push_dummy_call}, which can handle
all alignment directly.

@


1.184
log
@2004-02-11  Elena Zannoni  <ezannoni@@redhat.com>

       * gdbint.texinfo (Support Libraries): Add doco about obstacks and
       minimal information about libiberty.
@
text
@d6500 1
a6500 1
ANSI/ISO, and C++ (@@code{#ifdef}s are allowed if necessary, for instance
@


1.183
log
@2004-01-26  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (EXTRACT_STRUCT_VALUE_ADDRESS): Deprecate.  Add
	comments mentioning extract_returned_value_address.
	* infcmd.c (print_return_value): Update.  Add comments on
	extract_returned_value_address.
	* stack.c (return_command): Add comments on
	extract_returned_value_address.
	* values.c: Update comment.
	* m32r-tdep.c: Update comment.
	* sparc-tdep.c: Update comment.
	* ia64-tdep.c (ia64_use_struct_convention): Update comment.
	* xstormy16-tdep.c (xstormy16_gdbarch_init): Update.
	* sh64-tdep.c (sh64_gdbarch_init): Update.
	* sh-tdep.c (sh_gdbarch_init): Update.
	* s390-tdep.c (s390_gdbarch_init): Update.
	* rs6000-tdep.c (rs6000_gdbarch_init): Update.
	* m68klinux-tdep.c (m68k_linux_init_abi): Update.
	* m68k-tdep.c (m68k_gdbarch_init): Update.
	* m68hc11-tdep.c (m68hc11_gdbarch_init): Update.
	* m32r-tdep.c (m32r_gdbarch_init): Update.
	* ia64-tdep.c (ia64_gdbarch_init): Update.
	* h8300-tdep.c (h8300_gdbarch_init): Update.
	* frv-tdep.c (frv_gdbarch_init): Update.
	* arm-tdep.c (arm_gdbarch_init): Update.
	* alpha-tdep.c (alpha_gdbarch_init): Update.

Index: doc/ChangeLog
2004-01-26  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Rename
	EXTRACT_STRUCT_VALUE_ADDRESS to
	DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS.
@
text
@d4681 60
@


1.182
log
@2004-01-19  Michael Chastain  <mec.gnu@@mindspring.com>

	* MAINTAINERS: Delete mmalloc.
	* Makefile.in: Delete MMALLOC, MMALLOC_CFLAGS, -lmmalloc, mmalloc_h.
	* NEWS: Mention removal of --with-malloc.
	* acconfig.h: Delete USE_MMALLOC, MMCHECK_FORCE.
	* config.in: Regenerate.
	* configure: Regenerate.
	* configure.in: Delete MMALLOC_CFLAGS, MMALLOC, --with-mmalloc, USE_MMALLOC, MMCHECK_FORCE.
	* gdbinit.in: Remove mmalloc.
	* utils.c: Delete USE_MMALLOC, NO_MMCHECK, MMCHECK_FORCE, malloc_botch.
	* config/alpha/alpha-linux.mh: Delete MMALLOC, MMALLOC_CFLAGS.
	* config/i386/go32.mh: Likewise.
	* config/i386/interix.mh: Likewise.
	* config/powerpc/xm-linux.h: Delete MMAP_BASE_ADDRESS, MMAP_INCREMENT.

2004-01-19  Michael Chastain  <mec.gnu@@mindspring.com>

	* gdbint.texinfo: Delete USE_MMALLOC, NO_MMCHECK, MMCHECK_FORCE,
	MMAP_BASE_ADDRESS, MMAP_INCREMENT.
@
text
@d3177 3
a3179 3
@@item EXTRACT_STRUCT_VALUE_ADDRESS(@@var{regbuf})
@@findex EXTRACT_STRUCT_VALUE_ADDRESS
@@anchor{EXTRACT_STRUCT_VALUE_ADDRESS}
d3186 3
a3188 3
@@item EXTRACT_STRUCT_VALUE_ADDRESS_P()
@@findex EXTRACT_STRUCT_VALUE_ADDRESS_P
Predicate for @@code{EXTRACT_STRUCT_VALUE_ADDRESS}.
d3797 1
a3797 1
@@xref{EXTRACT_STRUCT_VALUE_ADDRESS}, for a description of how
@


1.181
log
@	* gdbint.texinfo (DECR_PC_AFTER_HW_BREAK): Don't document.
@
text
@a2240 6
@@item MMAP_BASE_ADDRESS
When using HAVE_MMAP, the first mapping should go at this address.

@@item MMAP_INCREMENT
when using HAVE_MMAP, this is the increment between mappings.

a2252 31

@@item USE_MMALLOC
@@findex mmalloc
@@value{GDBN} will use the @@code{mmalloc} library for memory allocation
for symbol reading if this symbol is defined.  Be careful defining it
since there are systems on which @@code{mmalloc} does not work for some
reason.  One example is the DECstation, where its RPC library can't
cope with our redefinition of @@code{malloc} to call @@code{mmalloc}.
When defining @@code{USE_MMALLOC}, you will also have to set
@@code{MMALLOC} in the Makefile, to point to the @@code{mmalloc} library.  This
define is set when you configure with @@samp{--with-mmalloc}.

@@item NO_MMCHECK
@@findex mmcheck
Define this if you are using @@code{mmalloc}, but don't want the overhead
of checking the heap with @@code{mmcheck}.  Note that on some systems,
the C runtime makes calls to @@code{malloc} prior to calling @@code{main}, and if
@@code{free} is ever called with these pointers after calling
@@code{mmcheck} to enable checking, a memory corruption abort is certain
to occur.  These systems can still use @@code{mmalloc}, but must define
@@code{NO_MMCHECK}.

@@item MMCHECK_FORCE
Define this to 1 if the C runtime allocates memory prior to
@@code{mmcheck} being called, but that memory is never freed so we don't
have to worry about it triggering a memory corruption abort.  The
default is 0, which means that @@code{mmcheck} will only install the heap
checking functions if there has not yet been any memory allocation
calls, and if it fails to install the functions, @@value{GDBN} will issue a
warning.  This is currently defined if you configure using
@@samp{--with-mmalloc}.
@


1.180
log
@2004-01-17  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (DEPRECATED_NPC_REGNUM): Delete.
	* gdbarch.h, gdbarch.c: Re-generate.
	* procfs.c (procfs_fetch_registers): Delete reference to
	DEPRECATED_NPC_REGNUM.
	(procfs_store_registers): Ditto.
	* regcache.c (generic_target_write_pc): Simplify.
	* lynx-nat.c: Delete #ifdef SPARC code.  Not used.

Index: doc/ChangeLog
2004-01-17  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Delete
	documentation on DEPRECATED_NPC_REGNUM.
@
text
@a482 7
@@findex DECR_PC_AFTER_HW_BREAK
@@item DECR_PC_AFTER_HW_BREAK
If defined, @@value{GDBN} decrements the program counter by the value
of @@code{DECR_PC_AFTER_HW_BREAK} after a hardware break-point.  This
overrides the value of @@code{DECR_PC_AFTER_BREAK} when a breakpoint
that breaks is a hardware-assisted breakpoint.

a3155 4

@@item DECR_PC_AFTER_HW_BREAK
@@findex DECR_PC_AFTER_HW_BREAK
Similarly, for hardware breakpoints.
@


1.179
log
@2004-01-13  Andrew Cagney  <cagney@@redhat.com>

	* configure.in: Update copyright year.
	(build_warnings): Add -Wunused-label.
	* configure: Re-generate.

2004-01-13  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo: Update copyright year.
	(Coding): Add -Wunused-label to list of -Werror warnings.
@
text
@a3717 7
@@item DEPRECATED_NPC_REGNUM
@@findex DEPRECATED_NPC_REGNUM
The number of the ``next program counter'' register, if defined.

@@code{DEPRECATED_NPC_REGNUM} has been replaced by @@code{TARGET_WRITE_PC}
(@@pxref{TARGET_WRITE_PC}).

@


1.178
log
@2003-11-10  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (return_value): Replace "inval" and "outval" with
	"readbuf" and "writebuf".
	* ppcnbsd-tdep.c (ppcnbsd_return_value): Ditto.
	* d10v-tdep.c (d10v_return_value): Ditto.
	* ppc-tdep.h (ppc_sysv_abi_return_value): Ditto.
	(ppc_sysv_abi_broken_return_value): Ditto.
	(ppc64_sysv_abi_return_value): Ditto.
	* ppc-sysv-tdep.c (do_ppc_sysv_return_value): Ditto.
	(ppc_sysv_abi_return_value): Ditto.
	(ppc_sysv_abi_broken_return_value): Ditto.
	(ppc64_sysv_abi_return_value): Ditto.
	* values.c (register_value_being_returned): Update call.
	* stack.c (return_command): Update call.
	* gdbarch.h, gdbarch.c: Re-generate.

Index: gdb/doc/ChangeLog
2003-11-10  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Replace the
	return_value method's "inval" and "outval" parameters with
	"readbuf" and "writebuf".
@
text
@d11 1
a11 1
Copyright 1990,1991,1992,1993,1994,1996,1998,1999,2000,2001,2002,2003
d51 1
a51 1
   2002, 2003  Free Software Foundation, Inc.
d5135 17
@


1.177
log
@2003-10-20  Andrew Cagney  <cagney@@redhat.com>

	* values.c (register_value_being_returned): Update comments.  Use
	"gdbarch_return_value" when available.
	(using_struct_return): Ditto.
	(set_return_value): Ditto.  Use "gdbarch_return_value" when
	available..  Print a warning, and not an error, when an unhandled
	return type is encountered.
	* infcmd.c: Include "gdb_assert.h".
	(print_return_value): When gdbarch_return_value_p, and using
	struct return, assume that the value is not available.
	* defs.h (return_value_convention): Define.
	* gdbarch.sh (gdbarch_return_value): New predicate method.
	* gdbarch.h, gdbarch.c: Re-generate
	* ppc-sysv-tdep.c (return_value_convention): Delete definition.

Index: doc/ChangeLog
2003-10-20  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Document
	gdbarch_return_value.  Add cross references from
	USE_STRUCT_CONVENTION, EXTRACT_RETURN_VALUE, and
	STORE_RETURN_VALUE, and from/to EXTRACT_STRUCT_VALUE_ADDRESS.
@
text
@d3831 1
a3831 1
@@item enum return_value_convention gdbarch_return_value (struct gdbarch *@@var{gdbarch}, struct type *@@var{valtype}, struct regcache *@@var{regcache}, const void *@@var{inval}, void *@@var{outval})
d3843 2
a3844 2
If the register convention is being used, and @@var{inval} is
non-@@code{NULL}, also copy the return-value in @@var{inval} into
d3847 1
a3847 1
If the register convention is being used, and @@var{outval} is
d3849 1
a3849 1
@@var{outval} (@@var{regcache} contains a copy of the registers from the
@


1.176
log
@* gdbint.texinfo (Target Architecture Definition): Document
regset_from_core_section.
@
text
@d3222 3
d3227 1
d3232 1
a3232 1
If not defined, @@code{EXTRACT_RETURN_VALUE} is used.
d3831 42
d3931 3
d4068 3
@


1.175
log
@ 	* gdb.texinfo (Breakpoint related warnings): New node.
 	* gdbint.texinfo (ADJUST_BREAKPOINT_ADDRESS): Document.
@
text
@d3599 6
@


1.174
log
@2003-10-10  Kei Sakamoto  <sakamoto.kei@@renesas.com>

	* gdb.texinfo: Replace "Hitachi" and "Mitsubishi" with "Renesas".
	* gdbint.texinfo: Ditto.
@
text
@d3055 33
@


1.173
log
@2003-10-03  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Deprecate
	IBM6000_TARGET.  Mention that it implies an RS/6000 system and not
	just target.
@
text
@d2508 1
a2508 1
For example, the Mitsubishi D10V is a 16-bit VLIW processor whose
@


1.172
log
@2003-10-02  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (DEPRECATED_REGISTER_RAW_SIZE): Rename
	REGISTER_RAW_SIZE.
	* gdbarch.h, gdbarch.c: Re-generate.
	* aix-thread.c, alpha-tdep.h, arm-tdep.c, core-sol2.c: Update.
	* cris-tdep.c, dve3900-rom.c, findvar.c, frame.c: Update.
	* hppa-tdep.c, hppab-nat.c, hppah-nat.c, hppam3-nat.c: Update.
	* hpux-thread.c, i386gnu-nat.c, ia64-aix-nat.c: Update.
	* ia64-linux-nat.c, ia64-tdep.c, infcmd.c, infptrace.c: Update.
	* infrun.c, irix5-nat.c, lynx-nat.c, mips-linux-tdep.c: Update.
	* mips-nat.c, mips-tdep.c, mipsv4-nat.c, mn10300-tdep.c: Update.
	* monitor.c, ns32k-tdep.c, ppc-linux-nat.c, regcache.c: Update.
	* remote-e7000.c, remote-mips.c, remote-sim.c: Update.
	* remote-vxmips.c, remote-vxsparc.c, remote.c: Update.
	* rom68k-rom.c, rs6000-nat.c, rs6000-tdep.c, s390-tdep.c: Update.
	* sh64-tdep.c, sparc-nat.c, sparc-tdep.c, stack.c: Update.
	* target.c, tracepoint.c, v850-tdep.c, v850ice.c, valops.c: Update.
	* vax-tdep.c, vax-tdep.h, x86-64-tdep.c, xstormy16-tdep.c: Update.
	* config/m68k/tm-delta68.h, config/m68k/tm-vx68.h: Update.
	* config/sparc/tm-sparc.h, config/sparc/tm-sparclynx.h: Update.

2003-10-02  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Rename
	REGISTER_RAW_SIZE to DEPRECATED_REGISTER_RAW_SIZE.
	* gdb.texinfo (Packets, Stop Reply Packets): Ditto.
	* gdbint.texinfo (Target Architecture Definition): Rename

2003-10-02  Andrew Cagney  <cagney@@redhat.com>

	* mi-main.c: Rename REGISTER_RAW_SIZE to
	DEPRECATED_REGISTER_RAW_SIZE.
@
text
@d3385 3
a3387 3
@@item IBM6000_TARGET
@@findex IBM6000_TARGET
Shows that we are configured for an IBM RS/6000 target.  This
@


1.171
log
@2003-09-30  Andrew Cagney  <cagney@@redhat.com>

	* mi-main.c: Rename REGISTER_VIRTUAL_SIZE to
	DEPRECATED_REGISTER_VIRTUAL_SIZE.

2003-09-30  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (DEPRECATED_REGISTER_VIRTUAL_SIZE): Rename
	REGISTER_VIRTUAL_SIZE.
	* gdbarch.h, gdbarch.c: Regenerate.
	* vax-tdep.h, sparc-tdep.c, regcache.h: Update.
	* regcache.c, mn10300-tdep.c, mips-tdep.c: Update.
	* infcmd.c, frame.c, findvar.c, cris-tdep.c: Update.

2003-09-30  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Rename
	REGISTER_VIRTUAL_SIZE to DEPRECATED_REGISTER_VIRTUAL_SIZE.
	(Target Architecture Definition):
@
text
@d2769 1
a2769 1
@@deftypefn {Target Macro} int REGISTER_RAW_SIZE (int @@var{reg})
d3508 2
a3509 2
@@item REGISTER_RAW_SIZE (@@var{reg})
@@findex REGISTER_RAW_SIZE
@


1.170
log
@2003-09-29  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (DEPRECATED_REGISTER_VIRTUAL_TYPE): Rename
	DEPRECATED_REGISTER_VIRTUAL_TYPE.
	* gdbarch.h, gdbarch.c: Regenerate.
	* arch-utils.c,	hppa-tdep.c, regcache.c, regcache.h: Update.
	* sh64-tdep.c, sparc-tdep.c: Update.

2003-09-30  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Rename
	REGISTER_VIRTUAL_TYPE to DEPRECATED_REGISTER_VIRTUAL_TYPE.
@
text
@d2775 1
a2775 1
@@deftypefn {Target Macro} int REGISTER_VIRTUAL_SIZE (int @@var{reg})
d3536 2
a3537 2
@@item REGISTER_VIRTUAL_SIZE (@@var{reg})
@@findex REGISTER_VIRTUAL_SIZE
@


1.169
log
@2003-09-29  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Delete
	documentation for NEED_TEXT_START_END.
@
text
@d2781 1
a2781 1
@@deftypefn {Target Macro} struct type *REGISTER_VIRTUAL_TYPE (int @@var{reg})
d2790 1
a2790 1
should always be @@code{REGISTER_VIRTUAL_TYPE (@@var{reg})}.  The buffer
d2805 1
a2805 1
should always be @@code{REGISTER_VIRTUAL_TYPE (@@var{reg})}.  The buffer
d3543 1
a3543 1
@@item REGISTER_VIRTUAL_TYPE (@@var{reg})
d3551 1
a3551 1
superseeds @@code{REGISTER_VIRTUAL_TYPE}.  @@xref{Target Architecture
@


1.168
log
@2003-09-29  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Rename
	NPC_REGNUM to DEPRECATED_NPC_REGNUM.  Add cross reference to
	TARGET_WRITE_PC.
@
text
@a3485 5
@@item NEED_TEXT_START_END
@@findex NEED_TEXT_START_END
Define this if @@value{GDBN} should determine the start and end addresses of the
text section.  (Seems dubious.)

@


1.167
log
@2003-09-22  Michael Chastain  <mec@@shout.net>

	* gdbint.texinfo (Testsuite Organization): Change gdb.c++ to gdb.cp.
@
text
@d3680 2
a3681 2
@@item NPC_REGNUM
@@findex NPC_REGNUM
d3684 3
d3924 1
@


1.166
log
@Fix typos.
@
text
@d6393 1
a6393 1
@@file{gdb.c++} and @@file{gdb.java}.
@


1.165
log
@* gdbint.texinfo (Target Architecture Definition): Document
stabs_argument_has_addr.
@
text
@d3696 2
a3697 2
This method replaces @@code{DEPRECTAED_REG_STRUCT_HAS_ADDR}
(@@pxref{DEPRECATED_REG_STRUCT_ADDR}).
@


1.164
log
@Revert previous patch.  Oops, didn't mean to yank the doco
@
text
@d3689 10
d3771 5
a3775 2
Define this to return 1 if the given type will be passed by pointer
rather than directly.
@


1.163
log
@2003-09-19  Andrew Cagney  <cagney@@redhat.com>

	* config/pa/nm-hppah.h (NEED_TEXT_START_END): Delete.
	(DEPRECATED_HPUX_TEXT_END): Define.
	(deprecated_hpux_text_end): Declare.
	(struct target_ops): Declare opaque.
	* hppah-nat.c (text_end): Make static.
	(deprecated_hpux_text_end): New function.
	* exec.c (text_end): Delete global variable.
	(NEED_TEXT_START_END): Do not define.
	(exec_file_attach): Replace code computing "text_end" code with
	call to DEPRECATED_HPUX_TEXT_END.

2003-09-19  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Delete
	documentation for NEED_TEXT_START_END.
@
text
@d3486 5
@


1.162
log
@2003-09-17  Andrew Cagney  <cagney@@redhat.com>

	* sparc-tdep.c (legacy_register_name): Delete function.
	* mips-tdep.c (mips_dump_tdep): Do not print REGISTER_NAME.
	(mips_gdbarch_init): Refer to MIPS_REGISTER_NAME in comments.
	* infcmd.c (gdb_register_name): Delete variable.
	* gdbarch.sh (SDB_REG_TO_REGNUM): Delete reference to
	REGISTER_NAME and "tm.h".
	* gdbarch.h, gdbarch.c: Regenerate.
	* dpx2-nat.c (regmap): Refer to REGISTER_NAME and not
	REGISTER_NAMES in comments.
	* remote-st.c (get_reg_name), i386b-nat.c (tregmap): Ditto.
	* m68klinux-nat.c (regmap): Ditto.

2003-09-18  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Delete
	documentation on REGISTER_NAMES.
@
text
@a3485 5
@@item NEED_TEXT_START_END
@@findex NEED_TEXT_START_END
Define this if @@value{GDBN} should determine the start and end addresses of the
text section.  (Seems dubious.)

@


1.161
log
@* gdbarch.sh (DEPRECATED_REG_STRUCT_HAS_ADDR): Renamed from
REG_STRUCT_HAS_ADDR.
* gdbarch.c, gdbarch.h: Updated.
* infcall.c (call_function_by_hand): Update.
* stabsread.c (define_symbol): Updated.
@
text
@a3758 4
@@item REGISTER_NAMES
@@findex REGISTER_NAMES
Deprecated in favor of @@code{REGISTER_NAME}.

@


1.161.2.1
log
@merge mainline changes into branch
@
text
@d11 1
a11 1
Copyright 1990,1991,1992,1993,1994,1996,1998,1999,2000,2001,2002,2003,2004
d51 1
a51 1
   2002, 2003, 2004  Free Software Foundation, Inc.
d483 7
d2248 6
d2267 31
d2508 1
a2508 1
For example, the Renesas D10V is a 16-bit VLIW processor whose
d2769 1
a2769 1
@@deftypefn {Target Macro} int DEPRECATED_REGISTER_RAW_SIZE (int @@var{reg})
d2775 1
a2775 1
@@deftypefn {Target Macro} int DEPRECATED_REGISTER_VIRTUAL_SIZE (int @@var{reg})
d2781 1
a2781 1
@@deftypefn {Target Macro} struct type *DEPRECATED_REGISTER_VIRTUAL_TYPE (int @@var{reg})
d2790 1
a2790 1
should always be @@code{DEPRECATED_REGISTER_VIRTUAL_TYPE (@@var{reg})}.  The buffer
d2805 1
a2805 1
should always be @@code{DEPRECATED_REGISTER_VIRTUAL_TYPE (@@var{reg})}.  The buffer
a3054 33
@@item ADJUST_BREAKPOINT_ADDRESS (@@var{address})
@@findex ADJUST_BREAKPOINT_ADDRESS
@@cindex breakpoint address adjusted
Given an address at which a breakpoint is desired, return a breakpoint
address adjusted to account for architectural constraints on
breakpoint placement.  This method is not needed by most targets.

The FR-V target (see @@file{frv-tdep.c}) requires this method.
The FR-V is a VLIW architecture in which a number of RISC-like
instructions are grouped (packed) together into an aggregate
instruction or instruction bundle.  When the processor executes
one of these bundles, the component instructions are executed
in parallel.

In the course of optimization, the compiler may group instructions
from distinct source statements into the same bundle.  The line number
information associated with one of the latter statements will likely
refer to some instruction other than the first one in the bundle.  So,
if the user attempts to place a breakpoint on one of these latter
statements, @@value{GDBN} must be careful to @@emph{not} place the break
instruction on any instruction other than the first one in the bundle.
(Remember though that the instructions within a bundle execute
in parallel, so the @@emph{first} instruction is the instruction
at the lowest address and has nothing to do with execution order.)

The FR-V's @@code{ADJUST_BREAKPOINT_ADDRESS} method will adjust a
breakpoint's address by scanning backwards for the beginning of
the bundle, returning the address of the bundle.

Since the adjustment of a breakpoint may significantly alter a user's
expectation, @@value{GDBN} prints a warning when an adjusted breakpoint
is initially set and each time that that breakpoint is hit.

d3091 6
d3131 4
d3189 2
a3190 6
This method has been deprecated in favour of @@code{gdbarch_return_value}
(@@pxref{gdbarch_return_value}).

@@item DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS(@@var{regbuf})
@@findex DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS
@@anchor{DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS}
d3195 1
a3195 1
@@xref{gdbarch_return_value}.
d3197 3
a3199 3
@@item DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS_P()
@@findex DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS_P
Predicate for @@code{DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS}.
d3209 2
a3210 2
@@item DEPRECATED_FRAMELESS_FUNCTION_INVOCATION(@@var{fi})
@@findex DEPRECATED_FRAMELESS_FUNCTION_INVOCATION
d3385 3
a3387 3
@@item DEPRECATED_IBM6000_TARGET
@@findex DEPRECATED_IBM6000_TARGET
Shows that we are configured for an IBM RS/6000 system.  This
d3486 5
d3513 2
a3514 2
@@item DEPRECATED_REGISTER_RAW_SIZE (@@var{reg})
@@findex DEPRECATED_REGISTER_RAW_SIZE
d3541 2
a3542 2
@@item DEPRECATED_REGISTER_VIRTUAL_SIZE (@@var{reg})
@@findex DEPRECATED_REGISTER_VIRTUAL_SIZE
d3548 1
a3548 1
@@item DEPRECATED_REGISTER_VIRTUAL_TYPE (@@var{reg})
d3556 1
a3556 1
superseeds @@code{DEPRECATED_REGISTER_VIRTUAL_TYPE}.  @@xref{Target Architecture
a3570 6
@@item const struct regset *regset_from_core_section (struct gdbarch * @@var{gdbarch}, const char * @@var{sect_name}, size_t @@var{sect_size})
@@findex regset_from_core_section
Return the appropriate register set for a core file section with name
@@var{sect_name} and size @@var{sect_size}.


d3680 4
a3688 10
@@item stabs_argument_has_addr (@@var{gdbarch}, @@var{type})
@@findex stabs_argument_has_addr
@@findex DEPRECATED_REG_STRUCT_HAS_ADDR
@@anchor{stabs_argument_has_addr} Define this to return nonzero if a
function argument of type @@var{type} is passed by reference instead of
value.

This method replaces @@code{DEPRECATED_REG_STRUCT_HAS_ADDR}
(@@pxref{DEPRECATED_REG_STRUCT_HAS_ADDR}).

d3738 1
d3759 4
d3765 2
a3766 5
@@anchor{DEPRECATED_REG_STRUCT_HAS_ADDR}Define this to return 1 if the
given type will be passed by pointer rather than directly.

This method has been replaced by @@code{stabs_argument_has_addr}
(@@pxref{stabs_argument_has_addr}).
a3780 42
@@item enum return_value_convention gdbarch_return_value (struct gdbarch *@@var{gdbarch}, struct type *@@var{valtype}, struct regcache *@@var{regcache}, void *@@var{readbuf}, const void *@@var{writebuf})
@@findex gdbarch_return_value
@@anchor{gdbarch_return_value} Given a function with a return-value of
type @@var{rettype}, return which return-value convention that function
would use.

@@value{GDBN} currently recognizes two function return-value conventions:
@@code{RETURN_VALUE_REGISTER_CONVENTION} where the return value is found
in registers; and @@code{RETURN_VALUE_STRUCT_CONVENTION} where the return
value is found in memory and the address of that memory location is
passed in as the function's first parameter.

If the register convention is being used, and @@var{writebuf} is
non-@@code{NULL}, also copy the return-value in @@var{writebuf} into
@@var{regcache}.

If the register convention is being used, and @@var{readbuf} is
non-@@code{NULL}, also copy the return value from @@var{regcache} into
@@var{readbuf} (@@var{regcache} contains a copy of the registers from the
just returned function).

@@xref{DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS}, for a description of how
return-values that use the struct convention are handled.

@@emph{Maintainer note: This method replaces separate predicate, extract,
store methods.  By having only one method, the logic needed to determine
the return-value convention need only be implemented in one place.  If
@@value{GDBN} were written in an @@sc{oo} language, this method would
instead return an object that knew how to perform the register
return-value extract and store.}

@@emph{Maintainer note: This method does not take a @@var{gcc_p}
parameter, and such a parameter should not be added.  If an architecture
that requires per-compiler or per-function information be identified,
then the replacement of @@var{rettype} with @@code{struct value}
@@var{function} should be persued.}

@@emph{Maintainer note: The @@var{regcache} parameter limits this methods
to the inner most frame.  While replacing @@var{regcache} with a
@@code{struct frame_info} @@var{frame} parameter would remove that
limitation there has yet to be a demonstrated need for such a change.}

a3838 3
This method has been deprecated in favour of @@code{gdbarch_return_value}
(@@pxref{gdbarch_return_value}).

a3911 1
@@anchor{TARGET_WRITE_PC}
a3972 3
This method has been deprecated in favour of @@code{gdbarch_return_value}
(@@pxref{gdbarch_return_value}).

a4636 60
@@cindex @@code{libiberty} library

The @@code{libiberty} library provides a set of functions and features
that integrate and improve on functionality found in modern operating
systems.  Broadly speaking, such features can be divided into three
groups: supplemental functions (functions that may be missing in some
environments and operating systems), replacement functions (providing
a uniform and easier to use interface for commonly used standard
functions), and extensions (which provide additional functionality
beyond standard functions).

@@value{GDBN} uses various features provided by the @@code{libiberty}
library, for instance the C@@t{++} demangler, the @@acronym{IEEE}
floating format support functions, the input options parser
@@samp{getopt}, the @@samp{obstack} extension, and other functions.

@@subsection @@code{obstacks} in @@value{GDBN}
@@cindex @@code{obstacks}

The obstack mechanism provides a convenient way to allocate and free
chunks of memory.  Each obstack is a pool of memory that is managed
like a stack.  Objects (of any nature, size and alignment) are
allocated and freed in a @@acronym{LIFO} fashion on an obstack (see
@@code{libiberty}'s documenatation for a more detailed explanation of
@@code{obstacks}).

The most noticeable use of the @@code{obstacks} in @@value{GDBN} is in
object files.  There is an obstack associated with each internal
representation of an object file.  Lots of things get allocated on
these @@code{obstacks}: dictionary entries, blocks, blockvectors,
symbols, minimal symbols, types, vectors of fundamental types, class
fields of types, object files section lists, object files section
offets lists, line tables, symbol tables, partial symbol tables,
string tables, symbol table private data, macros tables, debug
information sections and entries, import and export lists (som),
unwind information (hppa), dwarf2 location expressions data.  Plus
various strings such as directory names strings, debug format strings,
names of types.

An essential and convenient property of all data on @@code{obstacks} is
that memory for it gets allocated (with @@code{obstack_alloc}) at
various times during a debugging sesssion, but it is released all at
once using the @@code{obstack_free} function.  The @@code{obstack_free}
function takes a pointer to where in the stack it must start the
deletion from (much like the cleanup chains have a pointer to where to
start the cleanups).  Because of the stack like structure of the
@@code{obstacks}, this allows to free only a top portion of the
obstack.  There are a few instances in @@value{GDBN} where such thing
happens.  Calls to @@code{obstack_free} are done after some local data
is allocated to the obstack.  Only the local data is deleted from the
obstack.  Of course this assumes that nothing between the
@@code{obstack_alloc} and the @@code{obstack_free} allocates anything
else on the same obstack.  For this reason it is best and safest to
use temporary @@code{obstacks}.

Releasing the whole obstack is also not safe per se.  It is safe only
under the condition that we know the @@code{obstacks} memory is no
longer needed.  In @@value{GDBN} we get rid of the @@code{obstacks} only
when we get rid of the whole objfile(s), for instance upon reading a
new symbol file.
d4777 25
a4801 12
The multi-arch framework includes a mechanism for adding module
specific per-architecture data-pointers to the @@code{struct gdbarch}
architecture object.

A module registers one or more per-architecture data-pointers using:

@@deftypefun struct gdbarch_data *gdbarch_data_register_pre_init (gdbarch_data_pre_init_ftype *@@var{pre_init})
@@var{pre_init} is used to, on-demand, allocate an initial value for a
per-architecture data-pointer using the architecture's obstack (passed
in as a parameter).  Since @@var{pre_init} can be called during
architecture creation, it is not parameterized with the architecture.
and must not call modules that use per-architecture data.
d4804 26
a4829 9
@@deftypefun struct gdbarch_data *gdbarch_data_register_post_init (gdbarch_data_post_init_ftype *@@var{post_init})
@@var{post_init} is used to obtain an initial value for a
per-architecture data-pointer @@emph{after}.  Since @@var{post_init} is
always called after architecture creation, it both receives the fully
initialized architecture and is free to call modules that use
per-architecture data (care needs to be taken to ensure that those
other modules do not try to call back to this module as that will
create in cycles in the initialization call graph).
@@end deftypefun
d4831 7
a4837 2
These functions return a @@code{struct gdbarch_data} that is used to
identify the per-architecture data-pointer added for that module.
d4843 2
a4844 5
@@var{data_handle} (returned by @@code{gdbarch_data_register_pre_init}
or @@code{gdbarch_data_register_post_init}), this function returns the
current value of the per-architecture data-pointer.  If the data
pointer is @@code{NULL}, it is first initialized by calling the
corresponding @@var{pre_init} or @@var{post_init} method.
d4847 2
a4848 1
The examples below assume the following definitions:
d4851 8
a4858 2
struct nozel @@{ int total; @@};
static struct gdbarch_data *nozel_handle;
d4861 7
a4867 8
A module can extend the architecture vector, adding additional
per-architecture data, using the @@var{pre_init} method.  The module's
per-architecture data is then initialized during architecture
creation.

In the below, the module's per-architecture @@emph{nozel} is added.  An
architecture can specify its nozel by calling @@code{set_gdbarch_nozel}
from @@code{gdbarch_init}.
d4869 2
a4870 8
@@smallexample
static void *
nozel_pre_init (struct obstack *obstack)
@@{
  struct nozel *data = OBSTACK_ZALLOC (obstack, struct nozel);
  return data;
@@}
@@end smallexample
d4873 1
d4875 2
a4876 1
set_gdbarch_nozel (struct gdbarch *gdbarch, int total)
d4878 3
a4880 2
  struct nozel *data = gdbarch_data (gdbarch, nozel_handle);
  data->total = nozel;
a4883 7
A module can on-demand create architecture dependant data structures
using @@code{post_init}.

In the below, the nozel's total is computed on-demand by
@@code{nozel_post_init} using information obtained from the
architecture.

d4885 1
d4887 1
a4887 1
nozel_post_init (struct gdbarch *gdbarch)
d4889 3
a4891 3
  struct nozel *data = GDBARCH_OBSTACK_ZALLOC (gdbarch, struct nozel);
  nozel->total = gdbarch@@dots{} (gdbarch);
  return data;
d4896 2
a4897 2
extern int
nozel_total (struct gdbarch *gdbarch)
d4899 2
a4900 3
  struct nozel *data = gdbarch_data (gdbarch, nozel_handle);
  return data->total;
@@}
d4903 6
a5035 19

@@item -Wunused-label
This warning has the additional benefit of detecting the absence of the
@@code{case} reserved word in a switch statement:
@@smallexample
enum @@{ FD_SCHEDULED, NOTHING_SCHEDULED @@} sched;
@@dots{}
switch (sched)
  @@{
  case FD_SCHEDULED:
    @@dots{};
    break;
  NOTHING_SCHEDULED:
    @@dots{};
    break;
  @@}
@@end smallexample

@@item -Wunused-function
d6379 1
a6379 1
ANSI/ISO, and C@@t{++} (@@code{#ifdef}s are allowed if necessary, for instance
d6384 1
a6384 1
@@file{gdb.cp} and @@file{gdb.java}.
a6634 1
@@raisesections
a6635 1
@@lowersections
@


1.160
log
@2003-09-11  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (DEPRECATED_STACK_ALIGN): Rename STACK_ALIGN.
	* gdbarch.h, gdbarch.c: Re-generate.
	* infcall.c (call_function_by_hand): Update.
	* hppa-tdep.c (hppa_push_arguments): Update.
	* ada-lang.c (place_on_stack): Update.
	* xstormy16-tdep.c (xstormy16_gdbarch_init): Update.
	* sparc-tdep.c (sparc_gdbarch_init): Update.
	* m68hc11-tdep.c (m68hc11_gdbarch_init): Update.
	* hppa-tdep.c (hppa_gdbarch_init): Update.
	* h8300-tdep.c (h8300_gdbarch_init): Delete comment refering to
	stack_align.
@
text
@d3763 2
a3764 2
@@item REG_STRUCT_HAS_ADDR (@@var{gcc_p}, @@var{type})
@@findex REG_STRUCT_HAS_ADDR
@


1.159
log
@Index: ChangeLog
2003-08-18  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (FRAME_RED_ZONE_SIZE): New architecture method.
	* gdbarch.h, gdbarch.c: Re-generate.
	* infcall.c (call_function_by_hand): Adjust the SP by
	frame_red_zone_size before allocating any stack space.
	* rs6000-tdep.c (rs6000_gdbarch_init): Set "frame_red_zone_size".
	* x86-64-tdep.c (x86_64_frame_align): New function.
	(x86_64_init_abi): Set "frame_red_zone_size" and "frame_align".

	* x86-64-tdep.c (x86_64_push_arguments): Revert 2003-08-07 change.
	Remove code adjusting SP so that it skips over the Red Zone.

Index: doc/ChangeLog
2003-08-18  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Document
	"frame_red_zone_size".
@
text
@d3221 1
a3221 1
stack alignment requirements (@@pxref{STACK_ALIGN}).
d3227 2
a3228 2
Unlike @@code{STACK_ALIGN}, this function always adjusts the address in
the direction of stack growth.
d3815 3
a3817 3
@@item STACK_ALIGN (@@var{addr})
@@anchor{STACK_ALIGN}
@@findex STACK_ALIGN
@


1.158
log
@2003-08-04  Andrew Cagney  <cagney@@redhat.com>

	* agentexpr.texi: Delete @@bye.
	* Makefile.in (STABS_DOC_SOURCE_INCLUDES): Add "fdl.texi"
	(stabs.info): Add $(srcdir) to include search path.
	(html): Depend on "annotate_toc.html", and not "annotate.html".
	* stabs.texinfo: Ditto.  Include "fdl.texi".
	* gdbint.texinfo: Update copyright statement's list of invariant
	sections.
@
text
@d3232 18
@


1.157
log
@	* gdbint.texinfo (libgdb components): Correct a GDB to GDBN.
@
text
@d19 3
a21 6
Invariant Sections, with the Front-Cover Texts being ``A GNU Manual,''
and with the Back-Cover Texts as in (a) below.

(a) The FSF's Back-Cover Text is: ``You have freedom to copy and modify
this GNU Manual, like GNU software.  Copies published by the Free
Software Foundation raise funds for GNU development.''
d56 3
a58 6
Invariant Sections, with the Front-Cover Texts being ``A GNU Manual,''
and with the Back-Cover Texts as in (a) below.

(a) The FSF's Back-Cover Text is: ``You have freedom to copy and modify
this GNU Manual, like GNU software.  Copies published by the Free
Software Foundation raise funds for GNU development.''
@


1.156
log
@2003-07-22  Andrew Cagney  <cagney@@redhat.com>

	* configure.in (build_warnings): Add -Wformat-nonliteral.
	* configure: Re-generate.

2003-07-22  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Coding): Add -Wformat-nonliteral to -Werror
	list.
@
text
@d1508 1
a1508 1
@@value{GDB} can better handle the problem of some commands blocking
@


1.155
log
@	* gdbint.texinfo (Coding): Clarify use of gdb_XXX.h headers.
@
text
@d5012 1
d5014 1
a5014 1
@@code{printf} like functions this checks not just @@code{printf} calls
@


1.155.2.1
log
@2003-08-04  Andrew Cagney  <cagney@@redhat.com>

	* agentexpr.texi: Delete @@bye.
	* Makefile.in (STABS_DOC_SOURCE_INCLUDES): Add "fdl.texi"
	(stabs.info): Add $(srcdir) to include search path.
	(html): Depend on "annotate_toc.html", and not "annotate.html".
	* stabs.texinfo: Ditto.  Include "fdl.texi".
	* gdbint.texinfo: Update copyright statement's list of invariant
	sections.
@
text
@d19 6
a24 3
Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
Texts.  A copy of the license is included in the section entitled ``GNU
Free Documentation License''.
d59 6
a64 3
Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
Texts.  A copy of the license is included in the section entitled ``GNU
Free Documentation License''.
@


1.155.2.2
log
@Index: ChangeLog
2003-08-18  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (FRAME_RED_ZONE_SIZE): New architecture method.
	* gdbarch.h, gdbarch.c: Re-generate.
	* infcall.c (call_function_by_hand): Adjust the SP by
	frame_red_zone_size before allocating any stack space.
	* rs6000-tdep.c (rs6000_gdbarch_init): Set "frame_red_zone_size".
	* x86-64-tdep.c (x86_64_frame_align): New function.
	(x86_64_init_abi): Set "frame_red_zone_size" and "frame_align".

	* x86-64-tdep.c (x86_64_push_arguments): Revert 2003-08-07 change.
	Remove code adjusting SP so that it skips over the Red Zone.

Index: doc/ChangeLog
2003-08-18  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Document
	"frame_red_zone_size".
@
text
@a3231 18
@@item int frame_red_zone_size

The number of bytes, beyond the innermost-stack-address, reserved by the
@@sc{abi}.  A function is permitted to use this scratch area (instead of
allocating extra stack space).

When performing an inferior function call, to ensure that it does not
modify this area, @@value{GDBN} adjusts the innermost-stack-address by
@@var{frame_red_zone_size} bytes before pushing parameters onto the
stack.

By default, zero bytes are allocated.  The value must be aligned
(@@pxref{frame_align}).

The @@sc{amd64} (nee x86-64) @@sc{abi} documentation refers to the
@@emph{red zone} when describing this scratch area.
@@cindex red zone

@


1.154
log
@	* gdbint.texinfo (Native Conditionals): Remove PREPARE_TO_PROCEED.
@
text
@d5194 5
a5198 1
@@file{gdb_} (@@file{gdb_string.h}).
@


1.153
log
@Revert previous change.  Wait for approval.
@
text
@a4496 17
@@item PREPARE_TO_PROCEED (@@var{select_it})
@@findex PREPARE_TO_PROCEED
This (ugly) macro allows a native configuration to customize the way the
@@code{proceed} function in @@file{infrun.c} deals with switching between
threads.

In a multi-threaded task we may select another thread and then continue
or step.  But if the old thread was stopped at a breakpoint, it will
immediately cause another breakpoint stop without any execution (i.e. it
will report a breakpoint hit incorrectly).  So @@value{GDBN} must step over it
first.

If defined, @@code{PREPARE_TO_PROCEED} should check the current thread
against the thread that reported the most recent event.  If a step-over
is required, it returns TRUE.  If @@var{select_it} is non-zero, it should
reselect the old thread.

@


1.152
log
@2003-06-16  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (SAVE_DUMMY_FRAME_TOS): Deprecate.
	* gdbarch.h, gdbarch.c: Re-generate.
	* xstormy16-tdep.c (xstormy16_gdbarch_init): Update.
	* s390-tdep.c (s390_gdbarch_init): Update.
	* rs6000-tdep.c (rs6000_gdbarch_init): Update.
	* mn10300-tdep.c (mn10300_gdbarch_init): Update.
	* mips-tdep.c (mips_gdbarch_init): Update.
	* mcore-tdep.c (mcore_gdbarch_init): Update.
	* cris-tdep.c (cris_gdbarch_init): Update.
	* infcall.c (call_function_by_hand): Update.
	* ia64-tdep.c (ia64_push_arguments): Update comment.
	* frame.c (legacy_get_prev_frame): Do not assume
	SAVE_DUMMY_FRAME_TOS_P.
	* dummy-frame.c (find_dummy_frame): Update comment.
@
text
@d3704 1
a3704 3
Returns the stack part of a frame ID that will be used to re-identify
the dummy-frame after the called function returns.  The value must match
the value returned by @@code{unwind_dummy_id} (@@pxref{unwind_dummy_id}).
d3756 7
a3762 8
@@item DEPRECATED_SAVE_DUMMY_FRAME_TOS (@@var{sp})
@@findex DEPRECATED_SAVE_DUMMY_FRAME_TOS
@@anchor{DEPRECATED_SAVE_DUMMY_FRAME_TOS} Used in
@@samp{call_function_by_hand} to notify the target dependent code of the
top-of-stack value that will be passed to the the inferior code.  This
is the value of the @@code{SP} after both the dummy frame and space for
parameters/results have been allocated on the stack.
@@xref{unwind_dummy_id}.
d3948 3
a3950 6
frame.

The returned frame ID's stack address must match the address previously
returned by @@code{push_dummy_call}, and the returned frame ID's code
address must match the address of the breakpoint instruction that the
called function returns to (@@pxref{push_dummy_call}).
@


1.151
log
@2003-06-13  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Deprecate
	REMOTE_BREAKPOINT, LITTLE_REMOTE_BREAKPOINT, and
	BIG_REMOTE_BREAKPOINT.  Cross reference BREAKPOINT_FROM_PC.
@
text
@d3704 3
a3706 1
Returns the updated top-of-stack pointer.
d3758 8
a3765 7
@@item SAVE_DUMMY_FRAME_TOS (@@var{sp})
@@findex SAVE_DUMMY_FRAME_TOS
@@anchor{SAVE_DUMMY_FRAME_TOS} Used in @@samp{call_function_by_hand} to
notify the target dependent code of the top-of-stack value that will be
passed to the the inferior code.  This is the value of the @@code{SP}
after both the dummy frame and space for parameters/results have been
allocated on the stack.  @@xref{unwind_dummy_id}.
d3951 6
a3956 3
frame.  The value returned must match the dummy frame stack value
previously saved using @@code{SAVE_DUMMY_FRAME_TOS}.
@@xref{SAVE_DUMMY_FRAME_TOS}.
@


1.150
log
@2003-06-08  Andrew Cagney  <cagney@@redhat.com>

	* frame.c (get_prev_frame): Remove reference to
	frame_args_address_correct in comments.
	* frame-base.c (default_frame_args_address): Delete code
	conditional on FRAME_ARGS_ADDRESS_CORRECT.
	* vax-tdep.c (vax_frame_args_address_correct): Delete.
	(vax_frame_args_address): Merge in vax_frame_args_address_correct.
	* config/vax/tm-vax.h (FRAME_ARGS_ADDRESS_CORRECT): Delete
	(vax_frame_args_address_correct): Delete declaration.

Index: doc/ChangeLog
2003-06-08  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Delete
	documentation on FRAME_ARGS_ADDRESS_CORRECT.
@
text
@d3015 11
a3025 10
@@item REMOTE_BREAKPOINT
@@itemx LITTLE_REMOTE_BREAKPOINT
@@itemx BIG_REMOTE_BREAKPOINT
@@findex BIG_REMOTE_BREAKPOINT
@@findex LITTLE_REMOTE_BREAKPOINT
@@findex REMOTE_BREAKPOINT
Similar to BREAKPOINT, but used for remote targets.

@@code{BIG_REMOTE_BREAKPOINT} and @@code{LITTLE_REMOTE_BREAKPOINT} have been
deprecated in favor of @@code{BREAKPOINT_FROM_PC}.
d3029 6
a3034 5
Use the program counter to determine the contents and size of a
breakpoint instruction.  It returns a pointer to a string of bytes
that encode a breakpoint instruction, stores the length of the string
to *@@var{lenptr}, and adjusts pc (if necessary) to point to the actual
memory location where the breakpoint should be inserted.
@


1.149
log
@2003-06-08  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (UNWIND_SP): Add.
	* gdbarch.h, gdbarch.c: Re-generate.
	* frame.c (frame_sp_unwind): New function.
	(get_frame_sp): New function.
	* frame.h (get_frame_sp, frame_sp_unwind): Declare.
	* regcache.c (read_sp): Rewrite, try each of TARGET_READ_SP,
	gdbarch_unwind_sp and SP_REGNUM when looking for the SP register
	value.
	* d10v-tdep.c (d10v_unwind_sp): Replace d10v_read_sp.
	(d10v_gdbarch_init): Set unwind_sp instead of read_sp.

2003-06-08  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Document
	"unwind_sp".  Cross reference "unwind_sp" and TARGET_READ_SP.
@
text
@a3235 4
@@item FRAME_ARGS_ADDRESS_CORRECT
@@findex FRAME_ARGS_ADDRESS_CORRECT
See @@file{stack.c}.

@


1.148
log
@2003-06-01  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Add "func_addr"
	parameter to "push_dummy_call".  Rename "dummy_addr" to "bp_addr".
@
text
@d3294 17
d3910 4
a3913 4
These change the behavior of @@code{read_pc}, @@code{write_pc},
@@code{read_sp} and @@code{deprecated_read_fp}.  For most targets, these
may be left undefined.  @@value{GDBN} will call the read and write
register functions with the relevant @@code{_REGNUM} argument.
d3918 2
@


1.147
log
@2003-05-21  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Delete
	references to "extract_address" and "store_address".
@
text
@d3681 1
a3681 1
@@item push_dummy_call (@@var{gdbarch}, @@var{regcache}, @@var{dummy_addr}, @@var{nargs}, @@var{args}, @@var{sp}, @@var{struct_return}, @@var{struct_addr})
d3684 4
a3687 5
@@anchor{push_dummy_call}
Define this to push the dummy frame's call to the inferior function onto
the stack.  In addition to pushing @@var{nargs}, the code should push
@@var{struct_addr} (when @@var{struct_return}), and the return value (in
the call dummy at @@var{dummy_addr}).
@


1.146
log
@2003-05-16  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (DEPRECATED_REGISTER_BYTES): Rename REGISTER_BYTES.
	* gdbarch.h, gdbarch.c: Re-generate.
	* arm-linux-tdep.c (arm_linux_extract_return_value): Delete reference.
	* TODO (REGISTER_BYTES): Delete reference.
	* alpha-tdep.c (alpha_gdbarch_init): Update.
	* xstormy16-tdep.c (xstormy16_gdbarch_init): Update.
	* x86-64-tdep.c (x86_64_init_abi): Update.
	* vax-tdep.c (vax_gdbarch_init): Update.
	* v850-tdep.c (v850_gdbarch_init): Update.
	* sparc-tdep.c (sparc_gdbarch_init): Update.
	* sh-tdep.c (sh_gdbarch_init): Update.
	* s390-tdep.c (s390_gdbarch_init): Update.
	* rs6000-tdep.c (rs6000_gdbarch_init): Update.
	* ns32k-tdep.c (ns32k_gdbarch_init_32082): Update.
	(ns32k_gdbarch_init_32382): Update.
	* mn10300-tdep.c (mn10300_gdbarch_init): Update.
	* mcore-tdep.c (mcore_gdbarch_init): Update.
	* m68k-tdep.c (m68k_gdbarch_init): Update.
	* m68hc11-tdep.c (m68hc11_gdbarch_init): Update.
	* ia64-tdep.c (ia64_gdbarch_init): Update.
	* i386-tdep.c (i386_gdbarch_init): Update.
	* i386-linux-tdep.c (i386_linux_init_abi): Update.
	* hppa-tdep.c (hppa_gdbarch_init): Update.
	* h8300-tdep.c (h8300_gdbarch_init): Update.
	* frv-tdep.c (frv_gdbarch_init): Update.
	* cris-tdep.c (cris_gdbarch_init): Update.
	* avr-tdep.c (avr_gdbarch_init): Update.
	* arm-tdep.c (arm_gdbarch_init): Update.
	* sparc-tdep.c (sparc_pop_frame): Update.
	* rs6000-tdep.c (rs6000_pop_frame): Update.
	* remote.c (init_remote_state): Update.
	(remote_prepare_to_store): Update.
	* remote-vx.c (vx_prepare_to_store): Update.
	* remote-sds.c (sds_fetch_registers): Update.
	(sds_prepare_to_store): Update.
	* remote-array.c: Update.
	* regcache.c (init_legacy_regcache_descr): Update.
	(init_regcache_descr): Update.
	* mips-tdep.c (mips_eabi_extract_return_value): Update.
	(mips_o64_extract_return_value): Update.
	* irix5-nat.c (fetch_core_registers): Update.
	* irix4-nat.c (fetch_core_registers): Update.
	* i386-tdep.h: Update.
	* hppa-tdep.c (pa_do_registers_info): Update.
	(pa_do_strcat_registers_info): Update.
	* cris-tdep.c (cris_register_bytes_ok): Update.
	* config/nm-gnu.h (CHILD_PREPARE_TO_STORE): Update.
	* config/sparc/tm-sparc.h (DEPRECATED_REGISTER_BYTES): Update.
	* config/sparc/nm-sun4sol2.h (CHILD_PREPARE_TO_STORE): Update.
	* config/sparc/nm-sun4os4.h (CHILD_PREPARE_TO_STORE): Update.
	* config/sparc/nm-nbsd.h (CHILD_PREPARE_TO_STORE): Update.
	* config/sparc/tm-sp64.h (DEPRECATED_REGISTER_BYTES): Update.
	* config/s390/tm-s390.h (DEPRECATED_REGISTER_BYTES): Update.
	* config/pa/tm-hppa64.h (DEPRECATED_REGISTER_BYTES): Update.
	* config/mips/tm-mips.h (DEPRECATED_REGISTER_BYTES): Update.
	* config/mips/tm-irix6.h (DEPRECATED_REGISTER_BYTES): Update.
	* config/mips/tm-irix5.h (DEPRECATED_REGISTER_BYTES): Update.
	* config/m68k/tm-sun3.h (DEPRECATED_REGISTER_BYTES): Update.
	(REGISTER_BYTES_OK): Update.
	* config/m68k/nm-sun3.h (CHILD_PREPARE_TO_STORE): Update.
	* config/ia64/tm-ia64.h (DEPRECATED_REGISTER_BYTES): Update.

Index: doc/ChangeLog
2003-05-16  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Replace
	REGISTER_BYTES with DEPRECATED_REGISTER_BYTES.  Fix typo,
	DEPRECATED_REGISTER_SIZE instead of REGISTER_BYTE.

Index: mi/ChangeLog
2003-05-16  Andrew Cagney  <cagney@@redhat.com>

	* mi-main.c (mi_setup_architecture_data):
@
text
@a2603 29

@@value{GDBN} also provides functions that do the same tasks, but assume
that pointers are simply byte addresses; they aren't sensitive to the
current architecture, beyond knowing the appropriate endianness.

@@deftypefun CORE_ADDR extract_address (void *@@var{addr}, int len)
Extract a @@var{len}-byte number from @@var{addr} in the appropriate
endianness for the current architecture, and return it.  Note that
@@var{addr} refers to @@value{GDBN}'s memory, not the inferior's.

This function should only be used in architecture-specific code; it
doesn't have enough information to turn bits into a true address in the
appropriate way for the current architecture.  If you can, use
@@code{extract_typed_address} instead.
@@end deftypefun

@@deftypefun void store_address (void *@@var{addr}, int @@var{len}, LONGEST @@var{val})
Store @@var{val} at @@var{addr} as a @@var{len}-byte integer, in the
appropriate endianness for the current architecture.  Note that
@@var{addr} refers to a buffer in @@value{GDBN}'s memory, not the
inferior's.

This function should only be used in architecture-specific code; it
doesn't have enough information to turn a true address into bits in the
appropriate way for the current architecture.  If you can, use
@@code{store_typed_address} instead.
@@end deftypefun


@


1.145
log
@* gdbint.texinfo (Breakpoint Handling): Correct a double negative.
@
text
@d3091 3
a3093 3
host-byte-ordered @@code{REGISTER_BYTES} sized values that partially
specify the sequence of instructions needed for an inferior function
call.
d3749 7
a3755 4
@@item REGISTER_BYTES
@@findex REGISTER_BYTES
The total amount of space needed to store @@value{GDBN}'s copy of the machine's
register state.
@


1.144
log
@2003-05-03  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (DEPRECATED_REGISTER_SIZE): Rename REGISTER_SIZE.
	(DEPRECATED_SIZEOF_CALL_DUMMY_WORDS): Rename
	SIZEOF_CALL_DUMMY_WORDS.
	(DEPRECATED_CALL_DUMMY_WORDS): Rename CALL_DUMMY_WORDS.
	(DEPRECATED_FIX_CALL_DUMMY): Rename FIX_CALL_DUMMY.
	(DEPRECATED_CALL_DUMMY_BREAKPOINT_OFFSET): Rename
	CALL_DUMMY_BREAKPOINT_OFFSET.
	(DEPRECATED_CALL_DUMMY_START_OFFSET): Rename
	CALL_DUMMY_START_OFFSET.
	(DEPRECATED_CALL_DUMMY_LENGTH): Rename CALL_DUMMY_LENGTH.
	* gdbarch.h, gdbarch.c: Re-generate.
	* alpha-tdep.c, alphafbsd-tdep.c, arm-linux-tdep.c: Update.
	* arm-tdep.c, avr-tdep.c, breakpoint.c, cris-tdep.c: Update.
	* dummy-frame.c, dummy-frame.h, frv-tdep.c, gdbarch.c: Update.
	* gdbarch.h, gdbarch.sh, h8300-tdep.c, hppa-tdep.c: Update.
	* i386-tdep.c, ia64-tdep.c, infcall.c, inferior.h: Update.
	* m68hc11-tdep.c, m68k-tdep.c, mcore-tdep.c: Update.
	* mips-tdep.c, mn10300-tdep.c, ns32k-tdep.c: Update.
	* rs6000-tdep.c, s390-tdep.c, sh-tdep.c, sol-thread.c: Update.
	* sparc-tdep.c, target.c, v850-tdep.c, valops.c: Update.
	* vax-tdep.c, x86-64-tdep.c, xstormy16-tdep.c: Update.
	* config/ia64/tm-ia64.h, config/m68k/tm-vx68.h: Update.
	* config/mips/tm-mips.h, config/pa/nm-hppah.h: Update.
	* config/pa/tm-hppa.h, config/pa/tm-hppa64.h: Update.
	* config/s390/tm-s390.h, config/sparc/tm-sp64.h: Update.
	* config/sparc/tm-sparc.h: Update.

Index: doc/ChangeLog
2003-05-03  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Make
	CALL_DUMMY_WORDS, SIZEOF_CALL_DUMMY_WORDS, CALL_DUMMY_LENGTH,
	FIX_CALL_DUMMY, CALL_DUMMY_BREAKPOINT_OFFSET and
	CALL_DUMMY_BREAKPOINT_OFFSET deprecated.

Index: mi/ChangeLog
2003-05-03  Andrew Cagney  <cagney@@redhat.com>

	* mi-main.c (mi_cmd_data_write_register_values): Replace
	REGISTER_SIZE with DEPRECATED_REGISTER_SIZE.

Index: testsuite/ChangeLog
2003-05-03  Andrew Cagney  <cagney@@redhat.com>

	* gdb.base/watchpoint.exp: Rename CALL_DUMMY_BREAKPOINT_OFFSET to
	DEPRECATED_CALL_DUMMY_BREAKPOINT_OFFSET in comments.
@
text
@d291 1
a291 1
@@value{GDBN} need not do nothing more than set the breakpoint and wait
@


1.144.4.1
log
@Snap const char * mess.
@
text
@d2620 13
@


1.143
log
@2003-05-03  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (PUSH_DUMMY_CODE): New architecture method, add
	comments noteing that it replaces the old FIX_CALL_DUMMY code.
	* gdbarch.h, gdbarch.c: Re-generate.
	* d10v-tdep.c (d10v_push_dummy_code): New function.
	(d10v_gdbarch_init): Set push_dummy_code.
	* infcall.c (legacy_push_dummy_code): New function.
	(generic_push_dummy_code): New function.
	(push_dummy_code): New function.
	(call_function_by_hand): Call push_dummy_code.  Pass bp_addr,
	instead of dummy_addr, to push_dummy_call.  Move call to
	generic_save_call_dummy_addr to outside of CALL_DUMMY_LOCATION
	switch.
	* sparc-tdep.c (sparc_gdbarch_init): Mention push_dummy_code.

2003-05-03  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Document
	push_dummy_code.  Add cross references.
@
text
@d3088 2
a3089 2
@@item CALL_DUMMY_WORDS
@@findex CALL_DUMMY_WORDS
d3101 4
a3104 4
@@item SIZEOF_CALL_DUMMY_WORDS
@@findex SIZEOF_CALL_DUMMY_WORDS
The size of @@code{CALL_DUMMY_WORDS}.  This must return a positive value.
See also @@code{CALL_DUMMY_LENGTH}.
d3111 2
a3112 1
A static initializer for @@code{CALL_DUMMY_WORDS}.  Deprecated.
d3725 1
a3725 1
@@findex FIX_CALL_DUMMY
d3738 6
a3743 5
This method replaces @@code{CALL_DUMMY_WORDS},
@@code{SIZEOF_CALL_DUMMY_WORDS}, @@code{CALL_DUMMY},
@@code{CALL_DUMMY_LOCATION}, @@code{REGISTER_SIZE},
@@code{GDB_TARGET_IS_HPPA}, @@code{CALL_DUMMY_BREAKPOINT_OFFSET}, and
@@code{FIX_CALL_DUMMY}.
@


1.142
log
@2003-04-28  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (DEPRECATED_TARGET_READ_FP): Replace TARGET_READ_FP.
	(DEPRECATED_FP_REGNUM): Replace FP_REGNUM.
	* gdbarch.h, gdbarch.c: Re-generate.
	* infcall.c (call_function_by_hand): Use DEPRECATED_FP_REGNUM,
	DEPRECATED_TARGET_READ_FP, or "sp" to create the dummy frame ID.
	* inferior.h (deprecated_read_fp): Rename read_fp.
	(generic_target_read_fp): Delete declaration.
	* regcache.c (generic_target_read_fp): Delete function.
	(deprecated_read_fp): Replace read_fp, use
	DEPRECATED_TARGET_READ_FP or DEPRECATED_FP_REGNUM.
	* d10v-tdep.c (d10v_read_fp): Delete function.
	(d10v_gdbarch_init): Do not set deprecated_read_fp.

	* sparc-tdep.c (sparc_gdbarch_init): Do not set
	deprecated_target_read_fp to generic_target_read_fp.
	* sh-tdep.c (sh_gdbarch_init): Ditto.
	* rs6000-tdep.c (rs6000_gdbarch_init): Ditto.
	* m68hc11-tdep.c (m68hc11_gdbarch_init): Ditto.
	* frv-tdep.c (frv_gdbarch_init): Ditto.

	* xstormy16-tdep.c (xstormy16_gdbarch_init): Set
	deprecated_fp_regnum.
	* x86-64-tdep.c (x86_64_init_abi): Ditto.
	* vax-tdep.c (vax_gdbarch_init): Ditto.
	* v850-tdep.c (v850_gdbarch_init): Ditto.
	* sparc-tdep.c (sparc_gdbarch_init): Ditto.
	* sh-tdep.c (sh_gdbarch_init): Ditto.
	* s390-tdep.c (s390_gdbarch_init): Ditto.
	* rs6000-tdep.c (rs6000_gdbarch_init): Ditto.
	* mn10300-tdep.c (mn10300_gdbarch_init): Ditto.
	* mcore-tdep.c (mcore_gdbarch_init): Ditto.
	* m68k-tdep.c (m68k_gdbarch_init): Ditto.
	* m68hc11-tdep.c (m68hc11_gdbarch_init): Ditto.
	* ia64-tdep.c (ia64_gdbarch_init): Ditto.
	* i386-tdep.c (i386_gdbarch_init): Ditto.
	* hppa-tdep.c (hppa_gdbarch_init): Ditto.
	* h8300-tdep.c (h8300_gdbarch_init): Ditto.
	* frv-tdep.c (frv_gdbarch_init): Ditto.
	* cris-tdep.c (cris_gdbarch_init): Ditto.
	* avr-tdep.c (avr_gdbarch_init): Ditto.
	* arm-tdep.c (arm_gdbarch_init): Ditto.
	* alpha-tdep.c (alpha_gdbarch_init): Ditto.

	* x86-64-tdep.c (x86_64_init_abi): Set deprecated_target_read_fp.
	* v850-tdep.c (v850_gdbarch_init): Ditto.
	* sparc-tdep.c (sparc_gdbarch_init): Ditto.
	* sh-tdep.c (sh_gdbarch_init): Ditto.
	* s390-tdep.c (s390_gdbarch_init): Ditto.
	* rs6000-tdep.c (rs6000_gdbarch_init): Ditto.
	* mn10300-tdep.c (mn10300_gdbarch_init): Ditto.
	* mips-tdep.c (mips_gdbarch_init): Ditto.
	* m68hc11-tdep.c (m68hc11_gdbarch_init): Ditto.
	* ia64-tdep.c (ia64_gdbarch_init): Ditto.
	* hppa-tdep.c (hppa_gdbarch_init): Ditto.
	* frv-tdep.c (frv_gdbarch_init): Ditto.
	* avr-tdep.c (avr_gdbarch_init): Ditto.
	* arm-tdep.c (arm_gdbarch_init): Ditto.

	* vax-tdep.c (vax_frame_init_saved_regs): Replace FP_REGNUM with
	DEPRECATED_FP_REGNUM.
	(vax_push_dummy_frame, vax_pop_frame): Ditto.
	* std-regs.c (value_of_builtin_frame_fp_reg): Ditto.
	* sparc-tdep.c (sparc_init_extra_frame_info): Ditto.
	(sparc_push_dummy_frame, sparc64_read_fp): Ditto.
	(sparc32_register_virtual_type): Ditto.
	* sh-tdep.c (sh64_frame_chain): Ditto.
	(sh64_get_saved_register, sh64_pop_frame): Ditto.
	(sh_nofp_frame_init_saved_regs): Ditto.
	(sh64_nofp_frame_init_saved_regs): Ditto.
	(sh_fp_frame_init_saved_regs): Ditto.
	* remote-mips.c (mips_wait, mips_fetch_registers): Ditto.
	* remote-e7000.c (fetch_regs_from_dump): Ditto.
	* procfs.c (procfs_fetch_registers): Ditto.
	(procfs_store_registers): Ditto.
	* ns32knbsd-nat.c (fetch_inferior_registers): Ditto.
	(store_inferior_registers, fetch_core_registers): Ditto.
	(fetch_kcore_registers, clear_regs): Ditto.
	* ns32k-tdep.c (ns32k_frame_init_saved_regs): Ditto.
	(ns32k_push_dummy_frame, ns32k_pop_frame): Ditto.
	* nlm/i386.h (DEPRECATED_FP_REGNUM): Ditto.
	* nlm/i386.c (do_status): Ditto.
	* mipsv4-nat.c (supply_gregset): Ditto.
	* mips-tdep.c: Ditto for comments.
	* mips-nat.c (fetch_inferior_registers): Ditto.
	(store_inferior_registers, fetch_core_registers): Ditto.
	* m68k-tdep.c (m68k_push_dummy_frame): Ditto.
	(m68k_pop_frame, m68k_frame_init_saved_regs): Ditto.
	* i386-tdep.c (i386_frame_init_saved_regs): Ditto.
	(i386_do_pop_frame, i386_register_type): Ditto.
	* hppa-tdep.c (hppa_frame_chain): Ditto.
	(hppa_push_dummy_frame, find_dummy_frame_regs): Ditto.
	(hppa_pop_frame, hppa_read_fp): Ditto.
	(skip_prologue_hard_way, hppa_frame_find_saved_regs): Ditto.
	* cris-tdep.c (cris_examine, cris_pop_frame): Ditto.
	* config/vax/nm-vax.h (REGISTER_U_ADDR): Ditto.
	* config/sparc/tm-sparc.h (DEPRECATED_FP_REGNUM): Ditto.
	* config/sparc/tm-sp64.h (DEPRECATED_FP_REGNUM): Ditto.
	* config/s390/tm-s390.h (DEPRECATED_FP_REGNUM): Ditto.
	* config/pa/tm-hppa64.h (DEPRECATED_FP_REGNUM): Ditto.
	* config/ia64/tm-ia64.h (DEPRECATED_FP_REGNUM): Ditto.
	* blockframe.c: Ditto for comments.
	* arch-utils.h: Ditto for comments.
	* arch-utils.c (legacy_virtual_frame_pointer): Ditto.
	* alphanbsd-tdep.c (fetch_core_registers): Ditto.
	* alphabsd-nat.c (fetch_inferior_registers): Ditto.
	* alpha-tdep.h: Ditto for comments.
	* alpha-tdep.c (alpha_cannot_fetch_register): Ditto.
	(alpha_cannot_store_register): Ditto.
	(alpha_push_dummy_frame): Ditto.
	* alpha-nat.c (supply_gregset): Ditto.

	* config/sparc/tm-sp64.h (DEPRECATED_TARGET_READ_FP): Update.
	* config/pa/tm-hppa64.h (DEPRECATED_TARGET_READ_FP): Update.
	* config/sparc/tm-sparc.h: Update comment.

	* hppa-tdep.c (hppa_init_extra_frame_info): Use
	deprecated_read_fp instead of TARGET_READ_FP.
	(hppa_init_extra_frame_info, hppa_frame_chain): Ditto.
	(hppa_push_dummy_frame, hppa_read_fp): Ditto.
	* sparc-tdep.c (sparc_init_extra_frame_info): Use
	deprecated_read_fp instead of read_fp.
	* s390-tdep.c (s390_push_arguments): Ditto.
	* ia64-tdep.c (ia64_gdbarch_init): Ditto.
	* frame.h: Ditto in comments.
	* frame.c (legacy_get_prev_frame): Ditto.
	* dummy-frame.c (dummy_frame_this_id): Ditto.
	* arm-tdep.c (arm_init_extra_frame_info): Ditto.

2003-04-28  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Replace
	read_fp, TARGET_READ_FP and FP_REGNUM, with deprecated_read_fp,
	DEPRECATED_TARGET_READ_FP and DEPRECATED_REGNUM.
@
text
@d3098 3
d3106 3
d3113 3
d3120 3
d3721 21
@


1.141
log
@2003-04-28  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (deprecated_tm_print_insn): Rename tm_print_insn.
	* gdbarch.h, gdbarch.c: Re-generate.
	* xstormy16-tdep.c (_initialize_xstormy16_tdep): Update.
	* vax-tdep.c (_initialize_vax_tdep): Update.
	* v850-tdep.c (_initialize_v850_tdep): Update.
	* sparc-tdep.c (_initialize_sparc_tdep): Update.
	* s390-tdep.c (_initialize_s390_tdep): Update.
	* ns32k-tdep.c (_initialize_ns32k_tdep): Update.
	* mn10300-tdep.c (_initialize_mn10300_tdep): Update.
	* mips-tdep.c (_initialize_mips_tdep): Update.
	* mcore-tdep.c (_initialize_mcore_tdep): Update.
	* m68k-tdep.c (_initialize_m68k_tdep): Update.
	* ia64-tdep.c (_initialize_ia64_tdep): Update.
	* hppa-tdep.c (_initialize_hppa_tdep): Update.
	* h8300-tdep.c (_initialize_h8300_tdep): Update.
	* frv-tdep.c (_initialize_frv_tdep): Update.
	* cris-tdep.c (cris_delayed_get_disassembler): Update.
	(_initialize_cris_tdep): Update.
	* arch-utils.c (legacy_print_insn): Update.
	* alpha-tdep.c (_initialize_alpha_tdep): Update.

2003-04-28  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Rename
	"tm_print_insn" to "deprecated_tm_print_insn".
@
text
@d244 1
a244 1
create_new_frame (read_register (FP_REGNUM), read_pc ()));
d248 7
a254 6
Other than that, all the meaning imparted to @@code{FP_REGNUM} is
imparted by the machine-dependent code.  So, @@code{FP_REGNUM} can have
any value that is convenient for the code that creates new frames.
(@@code{create_new_frame} calls @@code{DEPRECATED_INIT_EXTRA_FRAME_INFO}
if it is defined; that is where you should use the @@code{FP_REGNUM}
value, if your frames are nonstandard.)
d3221 2
a3222 2
@@item FP_REGNUM
@@findex FP_REGNUM
d3226 2
a3227 2
This should only need to be defined if @@code{TARGET_READ_FP} is not
defined.
d3886 3
a3888 3
@@code{read_sp} and @@code{read_fp}.  For most targets, these may be left
undefined.  @@value{GDBN} will call the read and write register functions
with the relevant @@code{_REGNUM} argument.
d3896 4
a3899 4
Returns a @@code{(register, offset)} pair representing the virtual 
frame pointer in use at the code address @@var{pc}.  If virtual 
frame pointers are not used, a default definition simply returns 
@@code{FP_REGNUM}, with an offset of zero.
@


1.140
log
@2003-04-08  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Delete
	references to EXTRA_FRAME_INFO.
@
text
@d3911 6
a3916 5
accessor function for the global pointer @@code{tm_print_insn}. This
usually points to a function in the @@code{opcodes} library (@@pxref{Support
Libraries, ,Opcodes}).  @@var{info} is a structure (of type
@@code{disassemble_info}) defined in @@file{include/dis-asm.h} used to
pass information to the instruction decoding routine.
@


1.140.2.1
log
@Merge from mainline.
@
text
@d244 1
a244 1
create_new_frame (read_register (DEPRECATED_FP_REGNUM), read_pc ()));
d248 6
a253 7
Other than that, all the meaning imparted to @@code{DEPRECATED_FP_REGNUM}
is imparted by the machine-dependent code.  So,
@@code{DEPRECATED_FP_REGNUM} can have any value that is convenient for
the code that creates new frames.  (@@code{create_new_frame} calls
@@code{DEPRECATED_INIT_EXTRA_FRAME_INFO} if it is defined; that is where
you should use the @@code{DEPRECATED_FP_REGNUM} value, if your frames are
nonstandard.)
a3096 3
This method has been replaced by @@code{push_dummy_code}
(@@pxref{push_dummy_code}).

a3101 3
This method has been replaced by @@code{push_dummy_code}
(@@pxref{push_dummy_code}).

a3105 3
This method has been replaced by @@code{push_dummy_code}
(@@pxref{push_dummy_code}).

a3109 3
This method has been replaced by @@code{push_dummy_code}
(@@pxref{push_dummy_code}).

d3220 2
a3221 2
@@item DEPRECATED_FP_REGNUM
@@findex DEPRECATED_FP_REGNUM
d3225 2
a3226 2
This should only need to be defined if @@code{DEPRECATED_TARGET_READ_FP}
is not defined.
a3708 21
@@item CORE_ADDR push_dummy_code (@@var{gdbarch}, @@var{sp}, @@var{funaddr}, @@var{using_gcc}, @@var{args}, @@var{nargs}, @@var{value_type}, @@var{real_pc}, @@var{bp_addr})
@@findex push_dummy_code
@@findex FIX_CALL_DUMMY
@@anchor{push_dummy_code} Given a stack based call dummy, push the
instruction sequence (including space for a breakpoint) to which the
called function should return.

Set @@var{bp_addr} to the address at which the breakpoint instruction
should be inserted, @@var{real_pc} to the resume address when starting
the call sequence, and return the updated inner-most stack address.

By default, the stack is grown sufficient to hold a frame-aligned
(@@pxref{frame_align}) breakpoint, @@var{bp_addr} is set to the address
reserved for that breakpoint, and @@var{real_pc} set to @@var{funaddr}.

This method replaces @@code{CALL_DUMMY_WORDS},
@@code{SIZEOF_CALL_DUMMY_WORDS}, @@code{CALL_DUMMY},
@@code{CALL_DUMMY_LOCATION}, @@code{REGISTER_SIZE},
@@code{GDB_TARGET_IS_HPPA}, @@code{CALL_DUMMY_BREAKPOINT_OFFSET}, and
@@code{FIX_CALL_DUMMY}.

d3885 3
a3887 3
@@code{read_sp} and @@code{deprecated_read_fp}.  For most targets, these
may be left undefined.  @@value{GDBN} will call the read and write
register functions with the relevant @@code{_REGNUM} argument.
d3895 4
a3898 4
Returns a @@code{(register, offset)} pair representing the virtual frame
pointer in use at the code address @@var{pc}.  If virtual frame pointers
are not used, a default definition simply returns
@@code{DEPRECATED_FP_REGNUM}, with an offset of zero.
d3911 5
a3915 6
accessor function for the global pointer
@@code{deprecated_tm_print_insn}.  This usually points to a function in
the @@code{opcodes} library (@@pxref{Support Libraries, ,Opcodes}).
@@var{info} is a structure (of type @@code{disassemble_info}) defined in
@@file{include/dis-asm.h} used to pass information to the instruction
decoding routine.
@


1.140.2.2
log
@2003-05-18  Mark Kettenis  <kettenis@@gnu.org>

	Merge from mainline.
	* i386-tdep.h (I386_SIZEOF_GREGS, I386_SIZEOF_FREGS,
	I386_SIZEOF_XREGS): Remove defenitions.
	(IS_FP_REGNUM, IS_SSE_REGNUM): Remove definitions.
	* i386-tdep.c (i386_gdbarch_init): Don't set register_bytes,
	register_size, call_dummy_words and sizeof_call_dummy.
	* i386-linux-tdep.c (i386_linux_init_abi): Don't set register_bytes.
	* x86-64-tdep.c (x86_64_init_abi): Don't set register_bytes and
	register_size.
	(x86_64_register_bytes): Remove variable.
	(_initialize_x86_64_tdep): Remove function.

	* i386-linux-tdep.c (i386_linux_sigcontext_addr): Call read_memory
	with correct arguments.
	* config/i386/x86-64linux.mt (TDEPFILES): Add i386-linux-tdep.o.
@
text
@d291 1
a291 1
@@value{GDBN} need not do anything more than set the breakpoint and wait
d3088 2
a3089 2
@@item DEPRECATED_CALL_DUMMY_WORDS
@@findex DEPRECATED_CALL_DUMMY_WORDS
d3091 3
a3093 3
host-byte-ordered @@code{DEPRECATED_REGISTER_SIZE} sized values that
partially specify the sequence of instructions needed for an inferior
function call.
d3101 4
a3104 4
@@item DEPRECATED_SIZEOF_CALL_DUMMY_WORDS
@@findex DEPRECATED_SIZEOF_CALL_DUMMY_WORDS
The size of @@code{DEPRECATED_CALL_DUMMY_WORDS}.  This must return a
positive value.  See also @@code{DEPRECATED_CALL_DUMMY_LENGTH}.
d3111 1
a3111 2
A static initializer for @@code{DEPRECATED_CALL_DUMMY_WORDS}.
Deprecated.
d3724 1
a3724 1
@@findex DEPRECATED_FIX_CALL_DUMMY
d3737 5
a3741 6
This method replaces @@code{DEPRECATED_CALL_DUMMY_WORDS},
@@code{DEPRECATED_SIZEOF_CALL_DUMMY_WORDS}, @@code{CALL_DUMMY},
@@code{CALL_DUMMY_LOCATION}, @@code{DEPRECATED_REGISTER_SIZE},
@@code{GDB_TARGET_IS_HPPA},
@@code{DEPRECATED_CALL_DUMMY_BREAKPOINT_OFFSET}, and
@@code{DEPRECATED_FIX_CALL_DUMMY}.
d3747 4
a3750 7
@@item DEPRECATED_REGISTER_BYTES
@@findex DEPRECATED_REGISTER_BYTES
The total amount of space needed to store @@value{GDBN}'s copy of the
machine's register state.

This is no longer needed.  @@value{GDBN} instead computes the size of the
register buffer at run-time.
@


1.139
log
@2003-04-08  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Delete
	PRINT_TYPELESS_INTEGER.
@
text
@d3276 1
a3276 1
@@code{FRAME_FIND_SAVED_REGS} and @@code{EXTRA_FRAME_INFO} are deprecated.
a4140 2
@@item EXTRA_FRAME_INFO
Delete.
@


1.138
log
@2003-03-31  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (CALL_DUMMY_P): Delete.
	* gdbarch.h, gdbarch.c: Re-generate.
	* inferior.h (CALL_DUMMY_P): Delete macro.
	* xstormy16-tdep.c (xstormy16_gdbarch_init): Update.
	* vax-tdep.c (vax_gdbarch_init): Update.
	* v850-tdep.c (v850_gdbarch_init): Update.
	* sparc-tdep.c (sparc_gdbarch_init): Update.
	* sh-tdep.c (sh_gdbarch_init): Update.
	* s390-tdep.c (s390_gdbarch_init): Update.
	* rs6000-tdep.c (rs6000_gdbarch_init): Update.
	* ns32k-tdep.c (ns32k_gdbarch_init): Update.
	* mn10300-tdep.c (mn10300_gdbarch_init): Update.
	* mips-tdep.c (mips_gdbarch_init): Update.
	* mcore-tdep.c (mcore_gdbarch_init): Update.
	* m68k-tdep.c (m68k_gdbarch_init): Update.
	* m68hc11-tdep.c (m68hc11_gdbarch_init): Update.
	* ia64-tdep.c (ia64_gdbarch_init): Update.
	* i386-tdep.c (i386_gdbarch_init): Update.
	* h8300-tdep.c (h8300_gdbarch_init): Update.
	* frv-tdep.c (frv_gdbarch_init): Update.
	* d10v-tdep.c (d10v_gdbarch_init): Update.
	* cris-tdep.c (cris_gdbarch_init): Update.
	* breakpoint.c (deprecated_frame_in_dummy): Update.
	* avr-tdep.c (avr_gdbarch_init): Update.
	* alpha-tdep.c (alpha_gdbarch_init): Update.
	* arm-tdep.c (arm_gdbarch_init): Update.
	* dummy-frame.c (dummy_frame_this_id): Update comments.
	* rs6000-tdep.c (rs6000_extract_struct_value_address): Ditto.
	* frame.c (legacy_get_prev_frame): Ditto.
	* valops.c (call_function_by_hand): Delete function.
	(hand_function_call): Rename to call_function_by_hand

2003-03-31  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Delete
	references to CALL_DUMMY_P.
@
text
@a3676 5
@@item PRINT_TYPELESS_INTEGER
@@findex PRINT_TYPELESS_INTEGER
This is an obscure substitute for @@code{print_longest} that seems to
have been defined for the Convex target.

@


1.138.2.1
log
@Merge with mainline.
@
text
@d3276 1
a3276 1
@@code{FRAME_FIND_SAVED_REGS} is deprecated.
d3677 5
d4146 2
@


1.137
log
@2003-03-30  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (DEPRECATED_DUMMY_WRITE_SP): Replace TARGET_WRITE_SP.
	* gdbarch.h, gdbarch.c: Regenerate.
	* v850-tdep.c (v850_gdbarch_init): Set deprecated_dummy_write_sp.
	* xstormy16-tdep.c (xstormy16_gdbarch_init): Ditto.
	* mcore-tdep.c (mcore_gdbarch_init): Ditto.
	* m68k-tdep.c (m68k_gdbarch_init): Ditto.
	* i386-tdep.c (i386_gdbarch_init): Ditto.
	* h8300-tdep.c (h8300_gdbarch_init): Ditto.
	* cris-tdep.c (cris_gdbarch_init): Ditto.
	* vax-tdep.c (vax_gdbarch_init): Ditto.
	* s390-tdep.c (s390_gdbarch_init): Ditto.
	* ns32k-tdep.c (ns32k_gdbarch_init): Ditto.
	* mn10300-tdep.c (mn10300_gdbarch_init): Ditto.
	* alpha-tdep.c (alpha_gdbarch_init): Ditto.
	* sparc-tdep.c (sparc_push_dummy_frame, sparc_pop_frame): Update.
	* config/sparc/tm-sp64.h (DEPRECATED_DUMMY_WRITE_SP): Update.
	* config/pa/tm-hppa.h (DEPRECATED_DUMMY_WRITE_SP): Define.
	* sparc-tdep.c (sparc_gdbarch_init): Update.
	* sh-tdep.c (sh_gdbarch_init): Update.
	* rs6000-tdep.c (rs6000_gdbarch_init): Update.
	* mips-tdep.c (mips_gdbarch_init): Update.
	* m68hc11-tdep.c (m68hc11_gdbarch_init): Update.
	* ia64-tdep.c (ia64_gdbarch_init): Update.
	* frv-tdep.c (frv_gdbarch_init): Update.
	* avr-tdep.c (avr_gdbarch_init): Update.
	* valops.c (hand_function_call): Replace TARGET_WRITE_SP with
	DEPRECATED_DUMMY_WRITE_SP.  Call when the method is available,
	instead of when push_dummy_call is not available.

2003-03-30  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Remove
	reference to TARGET_WRITE_SP.
@
text
@a3086 5
@@item CALL_DUMMY_P
@@findex CALL_DUMMY_P
A C expression that is non-zero when the target supports inferior function
calls.

d3099 2
a3100 2
The size of @@code{CALL_DUMMY_WORDS}.  When @@code{CALL_DUMMY_P} this must
return a positive value.  See also @@code{CALL_DUMMY_LENGTH}.
@


1.136
log
@2003-03-27  Andrew Cagney  <cagney@@redhat.com>

	* regcache.c (write_sp): Delete function and references.
	* inferior.h (write_sp): Delete declaration.
	* valops.c (hand_function_call): Replace write_sp with
	TARGET_WRITE_SP.
	* sparc-tdep.c (sparc_push_dummy_frame): Ditto.
	(sparc_pop_frame): Ditto.

Index: doc/ChangeLog
2003-03-27  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Remove
	references to write_sp.
@
text
@d3780 2
a3781 4
the number (greater than or equal to zero) of that register.

This should only need to be defined if @@code{TARGET_WRITE_SP} and
@@code{TARGET_WRITE_SP} are not defined.
a3887 2
@@itemx TARGET_WRITE_SP
@@findex TARGET_WRITE_SP
@


1.135
log
@2003-03-26  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (DEPRECATED_PUSH_ARGUMENTS): Rename PUSH_ARGUMENTS.
	(push_dummy_call): New pure multi-arch replacement with gdbarch,
	regcache and dummy_addr parameters.
	* gdbarch.h, gdbarch.c: Re-generate.
	* valops.c (hand_function_call): Use gdbarch_push_dummy_call when
	available; assume it will handle stack alignment and return
	address issues.  Fall back to DEPRECATED_PUSH_ARGUMENTS and
	legacy_push_arguments.
	(legacy_push_arguments): Rename default_push_arguments.
	* value.h (legacy_push_arguments): Rename default_push_arguments.
	* i386-tdep.c (i386_push_arguments): Call legacy_push_arguments.
	* config/sparc/tm-sparc.h (DEPRECATED_PUSH_ARGUMENTS): Update.
	* config/sparc/tm-sp64.h (DEPRECATED_PUSH_ARGUMENTS): Update.
	* config/pa/tm-hppa.h (DEPRECATED_PUSH_ARGUMENTS): Update.
	* config/i386/tm-symmetry.h: Update.
	* xstormy16-tdep.c (xstormy16_gdbarch_init): Update.
	* x86-64-tdep.c (x86_64_init_abi): Update.
	* v850-tdep.c (v850_gdbarch_init): Update.
	* sparc-tdep.c (sparc_gdbarch_init): Update.
	* sh-tdep.c (sh_gdbarch_init): Update.
	* s390-tdep.c (s390_gdbarch_init): Update.
	* rs6000-tdep.c (rs6000_gdbarch_init): Update.
	* mn10300-tdep.c (mn10300_gdbarch_init): Update.
	* mips-tdep.c (mips_gdbarch_init): Update.
	* mcore-tdep.c (mcore_gdbarch_init): Update.
	* m68hc11-tdep.c (m68hc11_gdbarch_init): Update.
	* ia64-tdep.c (ia64_gdbarch_init): Update.
	* i386-tdep.c (i386_gdbarch_init): Update.
	* hppa-tdep.c (hppa_gdbarch_init): Update.
	* h8300-tdep.c (h8300_gdbarch_init): Update.
	* frv-tdep.c (frv_gdbarch_init): Update.
	* d10v-tdep.c (d10v_gdbarch_init): Update.
	* cris-tdep.c (cris_gdbarch_init): Update.
	* avr-tdep.c (avr_gdbarch_init): Update.
	* arm-tdep.c (arm_gdbarch_init): Update.
	* arm-linux-tdep.c (arm_linux_init_abi): Update.
	* alpha-tdep.c (alpha_gdbarch_init): Update.

2003-03-26  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Replace
	PUSH_ARGUMENTS with push_dummy_call, add gdbarch, regcache and
	dummy_addr parameters.
@
text
@a3896 1
@@findex write_sp
d3899 3
a3901 3
@@code{read_sp}, @@code{write_sp} and @@code{read_fp}.  For most targets,
these may be left undefined.  @@value{GDBN} will call the read and write
register functions with the relevant @@code{_REGNUM} argument.
@


1.134
log
@2003-03-25  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (CALL_DUMMY_STACK_ADJUST_P): Delete.
	(DEPRECATED_CALL_DUMMY_STACK_ADJUST): Replace
	CALL_DUMMY_STACK_ADJUST with a predicate variable.
	* gdbarch.h, gdbarch.c: Regenerate.
	* xstormy16-tdep.c (xstormy16_gdbarch_init): Do not set
	call_dummy_stack_adjust_p.
	* vax-tdep.c (vax_gdbarch_init): Ditto.
	* v850-tdep.c (v850_gdbarch_init): Ditto.
	* sh-tdep.c (sh_gdbarch_init): Ditto.
	* s390-tdep.c (s390_gdbarch_init): Ditto.
	* rs6000-tdep.c (rs6000_gdbarch_init): Ditto.
	* ns32k-tdep.c (ns32k_gdbarch_init): Ditto.
	* mn10300-tdep.c (mn10300_gdbarch_init): Ditto.
	* mips-tdep.c (mips_gdbarch_init): Ditto.
	* mcore-tdep.c (mcore_gdbarch_init): Ditto.
	* m68k-tdep.c (m68k_gdbarch_init): Ditto.
	* m68hc11-tdep.c (m68hc11_gdbarch_init): Ditto.
	* ia64-tdep.c (ia64_gdbarch_init): Ditto.
	* i386-tdep.c (i386_gdbarch_init): Ditto.
	* h8300-tdep.c (h8300_gdbarch_init): Ditto.
	* frv-tdep.c (frv_gdbarch_init): Ditto.
	* d10v-tdep.c (d10v_gdbarch_init): Ditto.
	* cris-tdep.c (cris_gdbarch_init): Ditto.
	* avr-tdep.c (avr_gdbarch_init): Ditto.
	* arm-tdep.c (arm_gdbarch_init): Ditto.
	* alpha-tdep.c (alpha_gdbarch_init): Ditto.
	* config/sparc/tm-sp64.h (CALL_DUMMY_STACK_ADJUST): Update.
	* config/sparc/tm-sparc.h (CALL_DUMMY_STACK_ADJUST): Update.
	* config/sparc/tm-sp64.h (CALL_DUMMY_STACK_ADJUST): Update.
	* sparc-tdep.c (sparc_gdbarch_init): Update.  Do not set
	call_dummy_stack_adjust_p.
	* inferior.h (CALL_DUMMY_STACK_ADJUST_P): Delete macro.
	(CALL_DUMMY_STACK_ADJUST): Delete macro.
	* sparc-tdep.c (sparc32_push_arguments): Update.
	* valops.c (hand_function_call): Update.

2003-03-25  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Delete
	reference to CALL_DUMMY_STACK_ADJUST_P.  Rename
	CALL_DUMMY_STACK_ADJUST to DEPRECATED_CALL_DUMMY_STACK_ADJUST.
	Add reference to PUSH_ARGUMENTS.
@
text
@d3118 1
a3118 1
function is no longer needed.  @@xref{PUSH_ARGUMENTS}, which can handle
d3706 8
a3713 5
@@item PUSH_ARGUMENTS (@@var{nargs}, @@var{args}, @@var{sp}, @@var{struct_return}, @@var{struct_addr})
@@findex PUSH_ARGUMENTS
@@anchor{PUSH_ARGUMENTS}
Define this to push arguments onto the stack for inferior function
call.  Returns the updated stack pointer value.
d3715 6
a3720 2
@@item PUSH_DUMMY_FRAME
@@findex PUSH_DUMMY_FRAME
@


1.134.2.1
log
@Merge with mainline.
@
text
@d3118 1
a3118 1
function is no longer needed.  @@xref{push_dummy_call}, which can handle
d3706 5
a3710 8
@@item push_dummy_call (@@var{gdbarch}, @@var{regcache}, @@var{dummy_addr}, @@var{nargs}, @@var{args}, @@var{sp}, @@var{struct_return}, @@var{struct_addr})
@@findex push_dummy_call
@@findex DEPRECATED_PUSH_ARGUMENTS.
@@anchor{push_dummy_call}
Define this to push the dummy frame's call to the inferior function onto
the stack.  In addition to pushing @@var{nargs}, the code should push
@@var{struct_addr} (when @@var{struct_return}), and the return value (in
the call dummy at @@var{dummy_addr}).
d3712 2
a3713 6
Returns the updated top-of-stack pointer.

This method replaces @@code{DEPRECATED_PUSH_ARGUMENTS}.

@@item DEPRECATED_PUSH_DUMMY_FRAME
@@findex DEPRECATED_PUSH_DUMMY_FRAME
d3773 4
a3776 2
the number (greater than or equal to zero) of that register, or -1 if
there is no such register.
d3883 2
d3890 1
d3893 3
a3895 3
@@code{read_sp} and @@code{read_fp}.  For most targets, these may be left
undefined.  @@value{GDBN} will call the read and write register functions
with the relevant @@code{_REGNUM} argument.
@


1.133
log
@Index: ChangeLog
2003-03-23  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (DEPRECATED_FRAME_CHAIN): Replace FRAME_CHAIN.
	(DEPRECATED_FRAME_CHAIN_VALID): Replace FRAME_CHAIN_VALID.
	* gdbarch.h, gdbarch.c: Regenerate.
	* valops.c (hand_function_call): Update.
	* objfiles.h (DEPRECATED_FRAME_CHAIN_VALID): Update.
	* frame.c (legacy_saved_regs_this_id): Update.
	(legacy_get_prev_frame, get_prev_frame, legacy_frame_p): Update.
	* dummy-frame.h: Update.
	* config/sparc/tm-sparc.h (DEPRECATED_FRAME_CHAIN): Update.
	* config/pa/tm-hppa.h (DEPRECATED_FRAME_CHAIN_VALID): Update.
	* config/m68k/tm-vx68.h (DEPRECATED_FRAME_CHAIN): Update.
	* config/m68k/tm-os68k.h (DEPRECATED_FRAME_CHAIN): Update.
	* config/m68k/tm-sun3.h: Update.
	* blockframe.c (inside_main_func, frame_chain_valid): Update.
	* xstormy16-tdep.c (xstormy16_gdbarch_init): Update.
	* x86-64-tdep.c (x86_64_init_abi): Update.
	* vax-tdep.c (vax_gdbarch_init): Update.
	* v850-tdep.c (v850_gdbarch_init): Update.
	* sparc-tdep.c (sparc_frame_chain, sparc_gdbarch_init): Update.
	* sh-tdep.c (sh_gdbarch_init): Update.
	* s390-tdep.c (s390_gdbarch_init): Update.
	* rs6000-tdep.c (rs6000_frame_saved_pc): Update.
	(rs6000_gdbarch_init, rs6000_frame_saved_pc): Update.
	(frame_get_saved_regs): Update.
	* ppc-linux-tdep.c (ppc_linux_init_abi): Update.
	* ns32k-tdep.c (ns32k_gdbarch_init): Update.
	* mn10300-tdep.c (mn10300_gdbarch_init): Update.
	* mips-tdep.c (mips_gdbarch_init): Update.
	* mcore-tdep.c (mcore_gdbarch_init): Update.
	* m68k-tdep.c (m68k_gdbarch_init): Update.
	* m68hc11-tdep.c (m68hc11_gdbarch_init): Update.
	* ia64-tdep.c (ia64_gdbarch_init): Update.
	* i386-tdep.c (i386_frame_num_args, i386_gdbarch_init): Update.
	* i386-interix-tdep.c (i386_interix_init_abi): Update.
	(i386_interix_back_one_frame): Update.
	* hppa-tdep.c (hppa_gdbarch_init): Update.
	(hppa_init_extra_frame_info): Update.
	* h8300-tdep.c (h8300_gdbarch_init): Update.
	* frv-tdep.c (frv_gdbarch_init): Update.
	* cris-tdep.c (cris_gdbarch_init): Update.
	* avr-tdep.c (avr_gdbarch_init): Update.
	* arm-tdep.c (arm_gdbarch_init): Update.
	* alpha-tdep.c (alpha_gdbarch_init): Update.

Index: doc/ChangeLog
2003-03-23  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Algorithms, Target Architecture Definition):
	Deprecate FRAME_CHAIN and FRAME_CHAIN_VALID.
@
text
@d3115 5
a3119 11
@@item CALL_DUMMY_STACK_ADJUST
@@findex CALL_DUMMY_STACK_ADJUST
Stack adjustment needed when performing an inferior function call.

Should be deprecated in favor of something like @@code{STACK_ALIGN}.

@@item CALL_DUMMY_STACK_ADJUST_P
@@findex CALL_DUMMY_STACK_ADJUST_P
Predicate for use of @@code{CALL_DUMMY_STACK_ADJUST}.

Should be deprecated in favor of something like @@code{STACK_ALIGN}.
d3708 1
@


1.132
log
@        * gdbint.texinfo (Algorithms): Add new section describing the
        Observer paradigm.
        (Top): Add menu entry to new observer appendix.
        * observer.texi: New file.
        * Makefile.in (GDBINT_DOC_SOURCE_INCLUDES): Add dependency on
        new observer.texi file.
@
text
@d256 3
a258 3
Given a @@value{GDBN} frame, define @@code{FRAME_CHAIN} to determine the
address of the calling function's frame.  This will be used to create a
new @@value{GDBN} frame struct, and then
d3266 2
a3267 2
@@item FRAME_CHAIN(@@var{frame})
@@findex FRAME_CHAIN
d3270 2
a3271 2
@@item FRAME_CHAIN_VALID(@@var{chain}, @@var{thisframe})
@@findex FRAME_CHAIN_VALID
@


1.131
log
@2003-03-12  Andrew Cagney  <cagney@@redhat.com>

	* frame.c (get_saved_register): Delete function.
	* xstormy16-tdep.c: Update comment.
	* regcache.h: Update comments.
	* sparc-tdep.c (sparc_init_extra_frame_info): Instead of
	get_saved_register and extract_address, use
	frame_read_unsigned_register.
	(sparc_frame_saved_pc): Ditto.
	(sparc_get_saved_register): Instead of get_saved_register, use
	frame_register.
	(sparc_pop_frame): Ditto.
	* frame.h (get_saved_register): Delete declaration.
	* findvar.c: Update comments.
	(value_of_register): Call frame_register instead of
	get_saved_register.
	(value_from_register): Ditto.
	* config/sparc/tm-sparc.h: Update comment.
	* breakpoint.c: Update comment.

Index: doc/ChangeLog
2003-03-12  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Delete
	references to get_saved_register.
@
text
@d97 1
d700 23
d6622 1
@


1.130
log
@2003-03-13  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (DEPRECATED_POP_FRAME): Replace POP_FRAME.
	* gdbarch.h, gdbarch.c: Regenerate.
	* valops.c (hand_function_call): Update comment.
	* stack.c (return_command): Update comment.
	* config/sparc/tm-sparc.h (DEPRECATED_POP_FRAME): Update.
	* config/pa/tm-hppa.h (DEPRECATED_POP_FRAME): Update.
	* xstormy16-tdep.c (xstormy16_gdbarch_init): Update.
	* x86-64-tdep.c (x86_64_init_abi): Update.
	* vax-tdep.c (vax_gdbarch_init): Update.
	* v850-tdep.c (v850_gdbarch_init): Update.
	* sparc-tdep.c (sparc_gdbarch_init): Update.
	* sh-tdep.c (sh_gdbarch_init): Update.
	* s390-tdep.c (s390_gdbarch_init): Update.
	* rs6000-tdep.c (rs6000_gdbarch_init): Update.
	* ns32k-tdep.c (ns32k_gdbarch_init): Update.
	* mn10300-tdep.c (mn10300_gdbarch_init): Update.
	* mips-tdep.c (mips_gdbarch_init): Update.
	* mcore-tdep.c (mcore_gdbarch_init): Update.
	* m68k-tdep.c (m68k_gdbarch_init): Update.
	* m68hc11-tdep.c (m68hc11_gdbarch_init): Update.
	* ia64-tdep.c (ia64_gdbarch_init): Update.
	* i386-tdep.c (i386_gdbarch_init): Update.
	* hppa-tdep.c (hppa_gdbarch_init): Update.
	* h8300-tdep.c (h8300_gdbarch_init): Update.
	* frv-tdep.c (frv_gdbarch_init): Update.
	* cris-tdep.c (cris_gdbarch_init): Update.
	* avr-tdep.c (avr_gdbarch_init): Update.
	* arm-tdep.c (arm_gdbarch_init): Update.
	* alpha-tdep.c (alpha_gdbarch_init): Update.

2003-03-13  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Replace
	POP_FRAME with DEPRECATED_POP_FRAME.  Update description.
@
text
@d3355 2
a3356 3
@@item GET_SAVED_REGISTER
@@findex GET_SAVED_REGISTER
@@findex get_saved_register
d3358 1
a3358 1
@@code{get_saved_register}.
@


1.129
log
@2003-03-12  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (DEPRECATED_FRAME_SAVED_PC): Replace FRAME_SAVED_PC.
	* gdbarch.h, gdbarch.c: Re-generate.
	* xstormy16-tdep.c (xstormy16_gdbarch_init): Update.
	* x86-64-tdep.h: Update.
	* x86-64-tdep.c (x86_64_init_abi): Update.
	* v850-tdep.c (v850_gdbarch_init): Update.
	* sparc-tdep.c (sparc_gdbarch_init): Update.
	* sh-tdep.c (sh_gdbarch_init): Update.
	* s390-tdep.c (s390_gdbarch_init): Update.
	* rs6000-tdep.c (rs6000_gdbarch_init): Update.
	* ppc-linux-tdep.c (ppc_linux_init_abi): Update.
	* ns32k-tdep.c (ns32k_gdbarch_init): Update.
	* mn10300-tdep.c (mn10300_gdbarch_init): Update.
	* mips-tdep.c (mips_gdbarch_init): Update.
	* mcore-tdep.c (mcore_gdbarch_init): Update.
	* m68k-tdep.c (m68k_gdbarch_init): Update.
	* m68hc11-tdep.c (m68hc11_gdbarch_init): Update.
	* ia64-tdep.c (ia64_gdbarch_init): Update.
	* i386-tdep.c (i386_gdbarch_init): Update.
	* i386-interix-tdep.c (i386_interix_init_abi): Update.
	* hppa-tdep.c (hppa_gdbarch_init): Update.
	* h8300-tdep.c (h8300_gdbarch_init): Update.
	* frv-tdep.c (frv_gdbarch_init): Update.
	* cris-tdep.c (cris_gdbarch_init): Update.
	* avr-tdep.c (avr_gdbarch_init): Update.
	* arm-tdep.c (arm_gdbarch_init): Update.
	* alpha-tdep.c (alpha_gdbarch_init): Update.
	* sh-tdep.c (sh_init_extra_frame_info): Update.
	(sh64_init_extra_frame_info): Update.
	* ns32knbsd-nat.c (frame_num_args): Update.
	* m68hc11-tdep.c (m68hc11_init_extra_frame_info): Update.
	* xstormy16-tdep.c (xstormy16_pop_frame): Update.
	(xstormy16_frame_chain_valid): Update.
	* vax-tdep.c (vax_saved_pc_after_call): Update.
	* v850-tdep.c (v850_frame_chain): Update.
	(v850_pop_frame): Update.
	(v850_init_extra_frame_info): Update.
	* sparc-tdep.c (setup_arbitrary_frame): Update.
	* ns32k-tdep.c (umax_frame_num_args): Update.
	* s390-tdep.c (s390_pop_frame_regular): Update.
	* mn10300-tdep.c (mn10300_frame_chain): Update.
	(mn10300_pop_frame_regular): Update.
	(mn10300_init_extra_frame_info): Update.
	* mips-tdep.c (mips_init_frame_pc_first): Update.
	(mips_frame_chain): Update.
	(mips_pop_frame): Update.
	* mcore-tdep.c (mcore_frame_chain): Update.
	(mcore_pop_frame): Update.
	(mcore_init_extra_frame_info): Update.
	* arch-utils.c (init_frame_pc_default): Update.
	* m68k-tdep.c (isi_frame_num_args): Update.
	(delta68_frame_num_args): Update.
	(news_frame_num_args): Update.
	* ia64-tdep.c (ia64_pop_frame_regular): Update.
	* alpha-tdep.c (alpha_init_frame_pc_first): Update.
	(alpha_frame_chain): Update.
	(alpha_pop_frame): Update.
	* hppa-tdep.c (hppa_saved_pc_after_call): Update.
	(hppa_init_extra_frame_info): Update.
	(hppa_frame_chain): Update.
	(hppa_frame_chain_valid): Update.
	* cris-tdep.c (cris_init_extra_frame_info): Update.
	* avr-tdep.c (avr_init_extra_frame_info): Update.
	* arm-tdep.c (arm_frame_chain_valid): Update.
	(arm_init_extra_frame_info): Update.
	(arm_pop_frame): Update.
	* frame.c (frame_pc_unwind): Update.
	* config/sparc/tm-sparc.h (DEPRECATED_FRAME_SAVED_PC): Update.
	(DEPRECATED_INIT_FRAME_PC_FIRST): Update.
	* config/rs6000/tm-rs6000.h (DEPRECATED_INIT_FRAME_PC_FIRST): Update.
	* config/pa/tm-hppa.h (DEPRECATED_FRAME_SAVED_PC): Update.
	* config/m68k/tm-delta68.h (DEPRECATED_FRAME_SAVED_PC): Update.
	* config/m68k/tm-linux.h (DEPRECATED_FRAME_SAVED_PC): Update.

2003-03-12  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Rename
	FRAME_SAVED_PC to DEPRECATED_FRAME_SAVED_PC.
@
text
@d3683 5
a3687 6
@@item POP_FRAME
@@findex POP_FRAME
@@findex call_function_by_hand
@@findex return_command
Used in @@samp{call_function_by_hand} to remove an artificial stack
frame and in @@samp{return_command} to remove a real stack frame.
@


1.128
log
@2003-03-10  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (gdbarch_unwind_pc): New method.
	* gdbarch.h, gdbarch.c: Regenerate.
	* frame.c (frame_pc_unwind): Rewrite.  Prefer gdbarch_unwind_pc,
	but use read_pc and FRAME_SAVED_PC as fall backs.
	(frame_saved_regs_pc_unwind): Delete function.
	(trad_frame_unwinder): Update.
	* frame-unwind.h (frame_unwind_pc_ftype): Delete declaration.
	(struct frame_unwind): Update.
	* dummy-frame.c (dummy_frame_pc_unwind): Delete function.
	(dummy_frame_unwind): Update.
	* sentinel-frame.c (sentinel_frame_pc_unwind): Delete function.
	(sentinel_frame_unwinder): Update.
	* d10v-tdep.c (d10v_frame_pc_unwind): Delete function.
	(d10v_frame_unwind): Update.
	(d10v_unwind_pc): New function.
	(d10v_gdbarch_init): Set unwind_pc.

Index: doc/ChangeLog
2003-03-10  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Cross reference
	FRAME_SAVED_PC to unwind_pc.  Document unwind_pc.
@
text
@d3271 4
a3274 4
@@item FRAME_SAVED_PC(@@var{frame})
@@findex FRAME_SAVED_PC
@@anchor{FRAME_SAVED_PC} Given @@var{frame}, return the pc saved there.
This is the return address.
d3294 1
a3294 1
@@xref{FRAME_SAVED_PC}, which this method replaces.
@


1.127
log
@2003-03-05  Andrew Cagney  <cagney@@redhat.com>

	* d10v-tdep.c (d10v_unwind_dummy_id): New function.
	(d10v_gdbarch_init): Set unwind_dummy_id and save_dummy_frame_tos.
	* frame.c (get_prev_frame): Restructure the frame ID unwind code
	to use unwind_dummy_id when a dummy frame.
	* gdbarch.sh (unwind_dummy_id): New multi-arch method with
	predicate.
	* gdbarch.h, gdbarch.c: Regneerate.

Index: doc/ChangeLog
2003-03-05  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Document
	unwind_dummy_id.  Cross reference unwind_dummy_id and
	SAVE_DUMMY_FRAME_TOS.
@
text
@d3273 22
a3294 2
Given @@var{frame}, return the pc saved there.  This is the return
address.
@


1.127.2.1
log
@2003-03-16  Mark Kettenis  <kettenis@@gnu.org>

	Merge with mainline.  Tag is kettenis-i386newframe-20030316-mergepoint.
@
text
@d3271 4
a3274 24
@@item DEPRECATED_FRAME_SAVED_PC(@@var{frame})
@@findex DEPRECATED_FRAME_SAVED_PC
@@anchor{DEPRECATED_FRAME_SAVED_PC} Given @@var{frame}, return the pc
saved there.  This is the return address.

This method is deprecated. @@xref{unwind_pc}.

@@item CORE_ADDR unwind_pc (struct frame_info *@@var{this_frame})
@@findex unwind_pc
@@anchor{unwind_pc} Return the instruction address, in @@var{this_frame}'s
caller, at which execution will resume after @@var{this_frame} returns.
This is commonly refered to as the return address.

The implementation, which must be frame agnostic (work with any frame),
is typically no more than:

@@smallexample
ULONGEST pc;
frame_unwind_unsigned_register (this_frame, D10V_PC_REGNUM, &pc);
return d10v_make_iaddr (pc);
@@end smallexample

@@noindent
@@xref{DEPRECATED_FRAME_SAVED_PC}, which this method replaces.
d3335 3
a3337 2
@@item DEPRECATED_GET_SAVED_REGISTER
@@findex DEPRECATED_GET_SAVED_REGISTER
d3339 1
a3339 1
@@code{DEPRECATED_GET_SAVED_REGISTER}.
d3663 6
a3668 5
@@item DEPRECATED_POP_FRAME
@@findex DEPRECATED_POP_FRAME
@@findex frame_pop
If defined, used by @@code{frame_pop} to remove a stack frame.  This
method has been superseeded by generic code.
@


1.126
log
@2003-03-03  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Document
	register_type.
@
text
@d3700 5
a3704 4
Used in @@samp{call_function_by_hand} to notify the target dependent code
of the top-of-stack value that will be passed to the the inferior code.
This is the value of the @@code{SP} after both the dummy frame and space
for parameters/results have been allocated on the stack.
d3887 8
@


1.125
log
@2003-03-01  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (DEPRECATED_FRAME_INIT_SAVED_REGS): Rename
	FRAME_INIT_SAVED_REGS.
	* gdbarch.h, gdbarch.c: Regenerate.
	* stack.c (frame_info): Update.
	* sh-tdep.c (sh_find_callers_reg, sh64_get_saved_pr): Update.
	(sh_init_extra_frame_info, sh64_init_extra_frame_info): Update.
	(sh64_get_saved_register, sh_pop_frame, sh64_pop_frame): Update.
	* ns32k-tdep.c (ns32k_pop_frame): Update.
	* mips-tdep.c (mips_pop_frame): Update.
	* m68hc11-tdep.c (m68hc11_pop_frame): Update.
	* ia64-tdep.c (ia64_frame_chain): Update.
	(ia64_frame_saved_pc, ia64_get_saved_register): Update.
	(ia64_frameless_function_invocation): Update.
	(ia64_init_extra_frame_info): Update.
	(ia64_pop_frame_regular): Update.
	* frame.h (struct frame_info): Update comment.
	(DEPRECATED_FRAME_INIT_SAVED_REGS): Rename macro.
	* frame.c (frame_saved_regs_register_unwind): Update.
	(frame_saved_regs_register_unwind): Update.
	(deprecated_generic_get_saved_register): Update.
	* cris-tdep.c: Update comment.
	* config/sparc/tm-sparc.h (DEPRECATED_FRAME_INIT_SAVED_REGS):
	Rename macro.
	* xstormy16-tdep.c (xstormy16_gdbarch_init): Update.
	* x86-64-tdep.c (x86_64_init_abi): Update.
	* vax-tdep.c (vax_gdbarch_init): Update.
	* v850-tdep.c (v850_gdbarch_init): Update.
	* sparc-tdep.c (sparc_gdbarch_init): Update.
	* sh-tdep.c (sh_gdbarch_init): Update.
	* s390-tdep.c (s390_gdbarch_init): Update.
	* rs6000-tdep.c (rs6000_gdbarch_init): Update.
	* ppc-linux-tdep.c (ppc_linux_init_abi): Update.
	* ns32k-tdep.c (ns32k_gdbarch_init): Update.
	* mn10300-tdep.c (mn10300_gdbarch_init): Update.
	* mips-tdep.c (mips_gdbarch_init): Update.
	* mcore-tdep.c (mcore_gdbarch_init): Update.
	* m68k-tdep.c (m68k_gdbarch_init): Update.
	* m68hc11-tdep.c (m68hc11_gdbarch_init): Update.
	* ia64-tdep.c (ia64_gdbarch_init): Update.
	* i386-tdep.c (i386_gdbarch_init): Update.
	* frv-tdep.c (frv_gdbarch_init): Update.
	* avr-tdep.c (avr_gdbarch_init): Update.
	* arm-tdep.c (arm_gdbarch_init): Update.
	* alpha-tdep.c (alpha_gdbarch_init): Update.

2003-03-01  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Rename
	FRAME_INIT_SAVED_REGS to DEPRECATED_FRAME_INIT_SAVED_REGS.
@
text
@d3509 6
@


1.125.2.1
log
@2003-03-04  Andrew Cagney  <cagney@@redhat.com>

	* d10v-tdep.c (struct d10v_unwind_cache): Add field "r11_addr",
	change type of "next_addr" to LONGEST.  Delete member "frameless".
	(prologue_find_regs): Parse "st rn, @@r11", save r11's offset.
	(d10v_frame_unwind_cache): Compute both the frame base and the
	previous stack pointer.  Store the previous SP's value in the
	saved_regs array.
	(d10v_frame_id_unwind): Remove commented out code.  Check for
	circular stack.
	(saved_regs_unwinder): When SP_REGNUM, extract the value from the
	saved_regs array.
	(d10v_unwind_dummy_id): New function.
	(d10v_gdbarch_init): Initialize d10v_unwind_dummy_id and
	save_dummy_frame_tos.
	(struct frame_extra_info): Delete.
	(saved_regs_unwind): New function.
	(d10v_frame_pop): Update to match current code.
	(d10v_frame_register_unwind): Don't unwind LR_REGNUM.  Unwind the
	PC_REGNUM by returning the saved LR_REGNUM.
	* frame.c (get_prev_frame): Store this frame's ID in the next
	frame's unwound ID cache.
	(deprecated_update_frame_pc_hack): Update the cached value in NEXT
	as well.

	2003-02-27  Andrew Cagney  <cagney@@redhat.com>
	* frame.c (get_prev_frame): Rewrite the frame ID unwind code to
	use unwind_dummy_id when available.
	* gdbarch.sh (get_dummy_frame_id): New multi-arch method with
	predicate.
	* gdbarch.h, gdbarch.c: Regneerate.
@
text
@d3694 4
a3697 5
@@anchor{SAVE_DUMMY_FRAME_TOS} Used in @@samp{call_function_by_hand} to
notify the target dependent code of the top-of-stack value that will be
passed to the the inferior code.  This is the value of the @@code{SP}
after both the dummy frame and space for parameters/results have been
allocated on the stack.  @@xref{unwind_dummy_id}.
a3879 8

@@item struct frame_id unwind_dummy_id (struct frame_info *@@var{frame})
@@findex unwind_dummy_id
@@anchor{unwind_dummy_id} Given @@var{frame} return a @@code{struct
frame_id} that uniquely identifies an inferior function call's dummy
frame.  The value returned must match the dummy frame stack value
previously saved using @@code{SAVE_DUMMY_FRAME_TOS}.
@@xref{SAVE_DUMMY_FRAME_TOS}.
@


1.124
log
@2003-03-01  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (DEPRECATED_INIT_EXTRA_FRAME_INFO): Rename
	INIT_EXTRA_FRAME_INFO.
	* gdbarch.h, gdbarch.c: Regenerate.
	* arm-tdep.c: Update comments.
	* sh-tdep.c, mcore-tdep.c, m68hc11-tdep.c: Ditto.
	* i386-interix-tdep.c, hppa-tdep.c, h8300-tdep.c: Ditto.
	* frame.h, avr-tdep.c: Ditto.
	* frame.c (get_prev_frame): DEPRECATED_INIT_EXTRA_FRAME_INFO.
	(create_new_frame, legacy_get_prev_frame): Ditto.
	* config/sparc/tm-sparc.h (DEPRECATED_INIT_EXTRA_FRAME_INFO): Rename.
	* config/pa/tm-hppa.h (DEPRECATED_INIT_EXTRA_FRAME_INFO): Rename.
	* xstormy16-tdep.c (xstormy16_gdbarch_init): Initialize
	deprecated_init_extra_frame_info instead of init_extra_frame_info.
	* x86-64-tdep.c (x86_64_init_abi): Ditto.
	* v850-tdep.c (v850_gdbarch_init): Ditto.
	* sparc-tdep.c (sparc_gdbarch_init): Ditto.
	* sh-tdep.c (sh_gdbarch_init): Ditto.
	* s390-tdep.c (s390_gdbarch_init): Ditto.
	* ppc-linux-tdep.c (ppc_linux_init_abi): Ditto.
	* mn10300-tdep.c (mn10300_gdbarch_init): Ditto.
	* mips-tdep.c (mips_gdbarch_init): Ditto.
	* mcore-tdep.c (mcore_gdbarch_init): Ditto.
	* m68hc11-tdep.c (m68hc11_gdbarch_init): Ditto.
	* ia64-tdep.c (ia64_gdbarch_init): Ditto.
	* i386-interix-tdep.c (i386_interix_init_abi): Ditto.
	* hppa-tdep.c (hppa_gdbarch_init): Ditto.
	* h8300-tdep.c (h8300_gdbarch_init): Ditto.
	* frv-tdep.c (frv_gdbarch_init): Ditto.
	* cris-tdep.c (cris_gdbarch_init): Ditto.
	* avr-tdep.c (avr_gdbarch_init): Ditto.
	* arm-tdep.c (arm_gdbarch_init): Ditto.
	* alpha-tdep.c (alpha_gdbarch_init): Ditto.
	* rs6000-tdep.c (rs6000_gdbarch_init): Ditto.

Index: doc/ChangeLog
2003-02-26  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo: Rename INIT_EXTRA_FRAME_INFO to
	DEPRECATED_INIT_EXTRA_FRAME_INFO.
@
text
@d3255 2
a3256 2
@@item FRAME_INIT_SAVED_REGS(@@var{frame})
@@findex FRAME_INIT_SAVED_REGS
d3260 2
a3261 1
@@code{FRAME_INIT_SAVED_REGS} using @@code{frame_saved_regs_zalloc}.
d4100 1
a4100 1
Replaced with @@code{FRAME_INIT_SAVED_REGS}
@


1.123
log
@2003-02-04  Andrew Cagney  <ac131313@@redhat.com>

	* values.c: Delete code conditional on IS_TRAPPED_INTERNALVAR.
	* TODO: Delete reference to IS_TRAPPED_INTERNALVAR.
	* utils.c (init_page_info): Delete reference to MPW in comments.
	* main.c (captured_main): Delete #ifdef MPW.

Index: doc/ChangeLog
2003-02-04  Andrew Cagney  <ac131313@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Delete
	descrption of IS_TRAPPED_INTERNALVAR.
@
text
@d250 3
a252 3
(@@code{create_new_frame} calls @@code{INIT_EXTRA_FRAME_INFO} if it is
defined; that is where you should use the @@code{FP_REGNUM} value, if
your frames are nonstandard.)
d257 2
a258 1
new @@value{GDBN} frame struct, and then @@code{INIT_EXTRA_FRAME_INFO} and
d3361 2
a3362 2
@@item INIT_EXTRA_FRAME_INFO (@@var{fromleaf}, @@var{frame})
@@findex INIT_EXTRA_FRAME_INFO
@


1.122
log
@2003-02-01  Andrew Cagney  <ac131313@@redhat.com>

	* main.c (captured_main): Delete #ifdef ADDITIONAL_OPTIONS,
	ADDITIONAL_OPTION_CASES, and ADDITIONAL_OPTION_HANDLER code.
	(print_gdb_help): Delete #ifdef ADDITIONAL_OPTION_HELP code.
	* stabsread.c (DBX_PARM_SYMBOL_CLASS): Delete macro.
	(define_symbol): Update.
	* symfile.c (generic_load): Remove references to nindy.
	* symtab.c: Remove references to nindy.

Index: doc/ChangeLog
2003-02-01  Andrew Cagney  <ac131313@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Delete
	description of ADDITIONAL_OPTIONS, ADDITIONAL_OPTION_CASES,
	ADDITIONAL_OPTION_HANDLER, and ADDITIONAL_OPTION_HELP, and
	BEFORE_MAIN_LOOP_HOOK, and DBX_PARM_SYMBOL_CLASS along with
	references to nindy and i960.
	* gdb.texinfo (i960): Delete all references to i960 and nindy.
@
text
@a3439 7
@@item IS_TRAPPED_INTERNALVAR (@@var{name})
@@findex IS_TRAPPED_INTERNALVAR
This is an ugly hook to allow the specification of special actions that
should occur as a side-effect of setting the value of a variable
internal to @@value{GDBN}.  Currently only used by the h8500.  Note that this
could be either a host or target conditional.

@


1.121
log
@2003-02-01  Andrew Cagney  <ac131313@@redhat.com>

	* infcmd.c (print_float_info): Delete code conditional on
	FLOAT_INFO.
	* config/nm-lynx.h: Delete #undef FLOAT_INFO.  Update copyright.
	* config/m68k/nm-apollo68b.h: Ditto.
	* config/i386/tm-ptx.h (FLOAT_INFO): Delete.  Update copyright.
	* config/ns32k/nm-nbsd.h (FLOAT_INFO): Ditto.
	* config/i386/tm-symmetry.h (FLOAT_INFO): Ditto.

Index: doc/ChangeLog
2003-02-01  Andrew Cagney  <ac131313@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Delete
	FLOAT_INFO.
@
text
@d2298 2
a2299 3
This symbol is abused in @@file{infrun.c}, @@file{regex.c},
@@file{remote-nindy.c}, and @@file{utils.c} for other things, at the
moment.)
a2914 12
@@item ADDITIONAL_OPTIONS
@@itemx ADDITIONAL_OPTION_CASES
@@itemx ADDITIONAL_OPTION_HANDLER
@@itemx ADDITIONAL_OPTION_HELP
@@findex ADDITIONAL_OPTION_HELP
@@findex ADDITIONAL_OPTION_HANDLER
@@findex ADDITIONAL_OPTION_CASES
@@findex ADDITIONAL_OPTIONS
These are a set of macros that allow the addition of additional command
line options to @@value{GDBN}.  They are currently used only for the unsupported
i960 Nindy target, and should not be used in any other configuration.

a2979 10
@@item BEFORE_MAIN_LOOP_HOOK
@@findex BEFORE_MAIN_LOOP_HOOK
Define this to expand into any code that you want to execute before the
main loop starts.  Although this is not, strictly speaking, a target
conditional, that is how it is currently being used.  Note that if a
configuration were to define it one way for a host and a different way
for the target, @@value{GDBN} will probably not compile, let alone run
correctly.  This macro is currently used only for the unsupported i960 Nindy
target, and should not be used in any other configuration.

a3128 6

@@item DBX_PARM_SYMBOL_CLASS
@@findex DBX_PARM_SYMBOL_CLASS
Hook for the @@code{SYMBOL_CLASS} of a parameter when decoding DBX symbol
information.  In the i960, parameters can be stored as locals or as
args, depending on the type of the debug record.
@


1.120
log
@2003-01-29  Andrew Cagney  <ac131313@@redhat.com>

	* gdb.texinfo (Maintenance Commands): Document `maint print
	reggroups' and `maint print register-groups'.
	* gdbint.texinfo (Target Architecture Definition): Document
	register_reggroup_p.
@
text
@a3234 4
@@item FLOAT_INFO
@@findex FLOAT_INFO
Deprecated in favor of @@code{PRINT_FLOAT_INFO}.

@


1.119
log
@2003-01-15  Andrew Cagney  <ac131313@@redhat.com>

	* sparc-tdep.c: Delete reference to PRINT_REGISTER_HOOK.

Index: doc/ChangeLog
2003-01-15  Andrew Cagney  <ac131313@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Delete
	definition of PRINT_REGISTER_HOOK.
@
text
@d3513 22
@


1.118
log
@Revert previous change.
@
text
@a3654 5
@@item PRINT_REGISTER_HOOK (@@var{regno})
@@findex PRINT_REGISTER_HOOK
If defined, this must be a function that prints the contents of the
given register to standard output.

@


1.117
log
@2003-01-13  Andrew Cagney  <ac131313@@redhat.com>

	* README (Graphical interface to GDB): Update URL.  Point at
	gdb/links/.
@
text
@a81 1
* Errors and Warnings::
a696 26

@@node Errors and Warnings
@@chapter Errors and Warnings
@@cindex errors
@@cindex warnings


On encountering a problem, in addition to notifying the user,
@@value{GDBN} can either abandon the operation or take evasive action
and then continue.  



An operation is aborted by calling an error function:

@@emph{prototype of simple error goes here}




@@section Internal or External
@@cindex internal error
@@cindex external error

@@section Complaints

@


1.116
log
@2003-01-09  Michael Chastain  <mec@@shout.net>

	* gdbint.texinfo (Configuring @@value{GDBN} for Release): Delete.
	(Create a Release): Add new instructions for new @@file{src-release}.
	Document existing instructions for @@file{Makefile.in} as
	being for @@value{GDBN} 5.3.1 or earlier.
@
text
@d82 1
d698 26
@


1.115
log
@2003-01-09  Andrew Cagney  <ac131313@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Mention
	frame_saved_regs_zalloc and frame_extra_info_zalloc as the way to
	allocate memory.
@
text
@a5398 56
@@section Configuring @@value{GDBN} for Release

@@cindex preparing a release
@@cindex making a distribution tarball
From the top level directory (containing @@file{gdb}, @@file{bfd},
@@file{libiberty}, and so on):

@@smallexample
make -f Makefile.in gdb.tar.gz
@@end smallexample

@@noindent
This will properly configure, clean, rebuild any files that are
distributed pre-built (e.g. @@file{c-exp.tab.c} or @@file{refcard.ps}),
and will then make a tarfile.  (If the top level directory has already
been configured, you can just do @@code{make gdb.tar.gz} instead.)

This procedure requires:

@@itemize @@bullet

@@item 
symbolic links;

@@item
@@code{makeinfo} (texinfo2 level);

@@item
@@TeX{};

@@item
@@code{dvips};

@@item
@@code{yacc} or @@code{bison}.
@@end itemize

@@noindent
@@dots{} and the usual slew of utilities (@@code{sed}, @@code{tar}, etc.).

@@subheading TEMPORARY RELEASE PROCEDURE FOR DOCUMENTATION

@@file{gdb.texinfo} is currently marked up using the texinfo-2 macros,
which are not yet a default for anything (but we have to start using
them sometime).

For making paper, the only thing this implies is the right generation of
@@file{texinfo.tex} needs to be included in the distribution.

For making info files, however, rather than duplicating the texinfo2
distribution, generate @@file{gdb-all.texinfo} locally, and include the
files @@file{gdb.info*} in the distribution.  Note the plural;
@@code{makeinfo} will split the document into one overall file and five
or so included files.


d5930 11
@


1.114
log
@	* gdb.texinfo (Backtraces): Document "set backtrace-below-main".
	* gdbint.texinfo (FRAME_CHAIN_VALID): Update documentation.
@
text
@d3292 1
a3292 2
@@code{FRAME_INIT_SAVED_REGS} using either
@@code{frame_saved_regs_zalloc} or @@code{frame_obstack_alloc}.
d3397 1
a3397 1
is allocated using @@code{frame_obstack_alloc}.
@


1.113
log
@gdb/
	* buildsym.h (processing_hp_compilation): Remove obsolete variable.
	* gdbarch.sh Remove include of "value.h" in gdbarch.h.
	(COERCE_FLOAT_TO_DOUBLE): Remove.
	* gdbarch.c: Regenerate.
	* gdbarch.h: Regenerate.
	* Makefile.in: Remove value_h from gdbarch_h.
	* valops.c (coerce_float_to_double): New variable.
	(default_coerce_float_to_double): Remove.
	(standard_coerce_float_to_double): Remove.
	(value_arg_coerce): Use coerce_float_to_double.
	(_initialize_valops): Add "set coerce-float-to-double".
	* value.h (default_coerce_float_to_double): Remove prototype.
	(standard_coerce_float_to_double): Remove prototype.

	* hpread.c (hpread_process_one_debug_symbol): Mark C++ functions as
	prototyped.
	* mdebugread.c (parse_symbol): Likewise.
	* stabsread.c (define_symbol): Mark all functions as prototyped.

	* hppa-tdep.c (hppa_coerce_float_to_double): Remove.
	* alpha-tdep.c (alpha_gdbarch_init): Remove call to
	set_gdbarch_coerce_float_to_double.
	* arm-tdep.c (arm_gdbarch_init): Likewise.
	* frv-tdep.c (frv_gdbarch_init): Likewise.
	* h8300-tdep.c (h8300_gdbarch_init): Likewise (commented out).
	* i386-sol2-tdep.c (i386_sol2_init_abi): Likewise.
	* mips-tdep.c (mips_gdbarch_init): Likewise.
	(mips_coerce_float_to_double): Remove.
	* rs6000-tdep.c (rs6000_gdbarch_init): Likewise.
	(rs6000_coerce_float_to_double): Remove.
	* s390-tdep.c (s390_gdbarch_init): Likewise.
	* sh-tdep.c (sh_gdbarch_init): Likewise.
	(sh_coerce_float_to_double): Remove.
	* sparc-tdep.c (sparc_gdbarch_init): Likewise.
	(sparc_coerce_float_to_double): Remove.
	* v850-tdep.c (v850_gdbarch_init): Likewise.
	* xstormy16-tdep.c (xstormy16_gdbarch_init): Likewise.
	* config/m32r/tm-m32r.h (COERCE_FLOAT_TO_DOUBLE): Remove.
	* config/pa/tm-hppa.h: (COERCE_FLOAT_TO_DOUBLE): Remove.
	(hppa_coerce_float_to_double): Remove prototype.
	* config/sparc/tm-sparc.h (COERCE_FLOAT_TO_DOUBLE): Remove.
doc/
	* gdb.texinfo (Controlling GDB): Add ABI section.  Document
	"set coerce-float-to-double".
	* gdbint.texinfo (COERCE_FLOAT_TO_DOUBLE): Remove documentation.
testsuite/
	* gdb.base/callfuncs.exp: Don't XFAIL unprototyped functions for
	stabs.
	* gdb.base/completion.exp: Allow marker1(void) as well as marker1().
	* gdb.base/whatis.exp: Always allow (void) after function names.
@
text
@d3280 6
a3285 20
Define this to be an expression that returns zero if the given frame is
an outermost frame, with no caller, and nonzero otherwise.  Several
common definitions are available:

@@itemize @@bullet
@@item
@@code{file_frame_chain_valid} is nonzero if the chain pointer is nonzero
and given frame's PC is not inside the startup file (such as
@@file{crt0.o}).

@@item
@@code{func_frame_chain_valid} is nonzero if the chain
pointer is nonzero and the given frame's PC is not in @@code{main} or a
known entry point function (such as @@code{_start}).

@@item
@@code{generic_file_frame_chain_valid} and
@@code{generic_func_frame_chain_valid} are equivalent implementations for
targets using generic dummy frames.
@@end itemize
@


1.112
log
@2003-01-02  Andrew Cagney  <ac131313@@redhat.com>

	* stabs.texinfo: Remove obsolete text.
	* gdbint.texinfo: Ditto.
	* gdb.texinfo: Ditto.
@
text
@d11 1
a11 1
Copyright 1990,1991,1992,1993,1994,1996,1998,1999,2000,2001,2002
d53 2
a54 2
Copyright @@copyright{} 1990,1991,1992,1993,1994,1996,1998,1999,2000,2001, 2002
   Free Software Foundation, Inc.
a3145 44

@@item COERCE_FLOAT_TO_DOUBLE (@@var{formal}, @@var{actual})
@@findex COERCE_FLOAT_TO_DOUBLE
@@cindex promotion to @@code{double}
@@cindex @@code{float} arguments
@@cindex prototyped functions, passing arguments to
@@cindex passing arguments to prototyped functions
Return non-zero if GDB should promote @@code{float} values to
@@code{double} when calling a non-prototyped function.  The argument
@@var{actual} is the type of the value we want to pass to the function.
The argument @@var{formal} is the type of this argument, as it appears in
the function's definition.  Note that @@var{formal} may be zero if we
have no debugging information for the function, or if we're passing more
arguments than are officially declared (for example, varargs).  This
macro is never invoked if the function definitely has a prototype.

How you should pass arguments to a function depends on whether it was
defined in K&R style or prototype style.  If you define a function using
the K&R syntax that takes a @@code{float} argument, then callers must
pass that argument as a @@code{double}.  If you define the function using
the prototype syntax, then you must pass the argument as a @@code{float},
with no promotion.

Unfortunately, on certain older platforms, the debug info doesn't
indicate reliably how each function was defined.  A function type's
@@code{TYPE_FLAG_PROTOTYPED} flag may be unset, even if the function was
defined in prototype style.  When calling a function whose
@@code{TYPE_FLAG_PROTOTYPED} flag is unset, GDB consults the
@@code{COERCE_FLOAT_TO_DOUBLE} macro to decide what to do.

@@findex standard_coerce_float_to_double
For modern targets, it is proper to assume that, if the prototype flag
is unset, that can be trusted: @@code{float} arguments should be promoted
to @@code{double}.  You should use the function
@@code{standard_coerce_float_to_double} to get this behavior.

@@findex default_coerce_float_to_double
For some older targets, if the prototype flag is unset, that doesn't
tell us anything.  So we guess that, if we don't have a type for the
formal parameter (@@i{i.e.}, the first argument to
@@code{COERCE_FLOAT_TO_DOUBLE} is null), then we should promote it;
otherwise, we should leave it alone.  The function
@@code{default_coerce_float_to_double} provides this behavior; it is the
default value, for compatibility with older configurations.
@


1.111
log
@* gdbint.texinfo (Target Architecture Definition): Update
description of gdbarch_register_osabi.
@
text
@a1843 1
@@c OBSOLETE CHILL_PRODUCER
a3782 4

@@c OBSOLETE @@item SHIFT_INST_REGS
@@c OBSOLETE @@findex SHIFT_INST_REGS
@@c OBSOLETE (Only used for m88k targets.)
@


1.110
log
@2002-12-10  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (DEPRECATED_INIT_FRAME_PC): Rename INIT_FRAME_PC.
	Change to a function with predicate.
	* gdbarch.h, gdbarch.c: Re-generate.
	* frame.c (get_prev_frame): Update.  Test
	DEPRECATED_INIT_FRAME_PC_P.
	* config/sparc/tm-sparc.h (DEPRECATED_INIT_FRAME_PC): Update.
	* config/rs6000/tm-rs6000.h (DEPRECATED_INIT_FRAME_PC): Update.
	* config/mn10200/tm-mn10200.h (DEPRECATED_INIT_FRAME_PC): Update.
	* alpha-tdep.c (alpha_gdbarch_init): Update.
	* mn10300-tdep.c (mn10300_gdbarch_init): Update.
	* mips-tdep.c (mips_gdbarch_init): Update.
	* i386-interix-tdep.c (i386_interix_init_abi): Update.
	* arm-tdep.c: Update comments.
	* h8300-tdep.c (h8300_gdbarch_init): Explicitly set init_frame_pc.
	* config/m32r/tm-m32r.h (DEPRECATED_INIT_FRAME_PC): Ditto.
	* frv-tdep.c (frv_gdbarch_init): Ditto.
	* x86-64-tdep.c (x86_64_init_abi): Ditto.
	* ia64-tdep.c (ia64_gdbarch_init): Ditto.
	* s390-tdep.c (s390_gdbarch_init): Ditto.
	* v850-tdep.c (v850_gdbarch_init): Ditto.
	* vax-tdep.c (vax_gdbarch_init): Ditto.
	* sh-tdep.c (sh_gdbarch_init): Ditto.
	* ns32k-tdep.c (ns32k_gdbarch_init): Ditto.
	* m68hc11-tdep.c (m68hc11_gdbarch_init): Ditto.
	* mcore-tdep.c (mcore_gdbarch_init): Ditto.
	* xstormy16-tdep.c (xstormy16_gdbarch_init): Ditto.
	* i386-tdep.c (i386_gdbarch_init): Ditto.
	* d10v-tdep.c (d10v_gdbarch_init): Ditto.
	* cris-tdep.c (cris_gdbarch_init): Ditto.
	* avr-tdep.c (avr_gdbarch_init): Ditto.
	* arm-tdep.c (arm_gdbarch_init): Ditto.
	* config/z8k/tm-z8k.h (INIT_FRAME_PC_FIRST): Delete macro.
	(DEPRECATED_INIT_FRAME_PC): Rename INIT_FRAME_PC.
@
text
@d2427 1
a2427 1
@@deftypefun void gdbarch_register_osabi (enum bfd_architecture @@var{arch}, enum gdb_osabi @@var{osabi}, void (*@@var{init_osabi})(struct gdbarch_info @@var{info}, struct gdbarch *@@var{gdbarch}))
d2429 4
a2432 1
architecture/OS ABI pair specified by @@var{arch} and @@var{osabi}.
@


1.109
log
@2002-12-01  Andrew Cagney  <ac131313@@redhat.com>

	* gdbarch.sh (DEPRECATED_PC_IN_CALL_DUMMY): Rename
	PC_IN_CALL_DUMMY.  Change to predicate.  Always allow call.
	* gdbarch.h, gdbarch.c: Re-generate.
	* config/sparc/tm-sparc.h, config/sparc/tm-sp64.h: Update.
	* config/mn10200/tm-mn10200.h, config/h8500/tm-h8500.h: Update.
	* config/pa/tm-hppa.h, frame.h: Update.
	* x86-64-tdep.c, vax-tdep.c, sparc-tdep.c: Update.
	* s390-tdep.c, ns32k-tdep.c, mn10300-tdep.c: Update.
	* m68k-tdep.c, i386-tdep.c, frv-tdep.c: Update.
	* cris-tdep.c, alpha-tdep.c: Update.
	* frame.c (set_unwind_by_pc, create_new_frame): Use either
	DEPRECATED_PC_IN_CALL_DUMMY or pc_in_dummy_frame.
	(get_prev_frame): Ditto.

Index: doc/ChangeLog
2002-12-01  Andrew Cagney  <ac131313@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Delete
	PC_IN_CALL_DUMMY.
@
text
@d256 3
a258 3
address of the calling function's frame.  This will be used to create
a new @@value{GDBN} frame struct, and then @@code{INIT_EXTRA_FRAME_INFO}
and @@code{INIT_FRAME_PC} will be called for the new frame.
d3456 2
a3457 2
@@item INIT_FRAME_PC (@@var{fromleaf}, @@var{prev})
@@findex INIT_FRAME_PC
@


1.108
log
@2002-11-28  Andrew Cagney  <ac131313@@redhat.com>

	* gdbarch.sh (DEPRECATED_USE_GENERIC_DUMMY_FRAMES): Rename
	USE_GENERIC_DUMMY_FRAMES.
	* gdbarch.h, gdbarch.c: Regenerate.
	* valops.c, frame.c: Update.
	* config/z8k/tm-z8k.h, config/mn10200/tm-mn10200.h: Update.
	* config/m32r/tm-m32r.h, config/h8500/tm-h8500.h: Update.
	* config/pa/tm-hppa.h, blockframe.c: Update.
	* vax-tdep.c, sparc-tdep.c, ns32k-tdep.c: Ditto.
	* m68k-tdep.c, alpha-tdep.c: Ditto.

	* arm-tdep.c: Eliminate USE_GENERIC_DUMMY_FRAMES as always 1.
	* mips-tdep.c: Ditto.

Index: doc/ChangeLog
2002-11-28  Andrew Cagney  <ac131313@@redhat.com>

	* gdbint.texinfo (Host Definition): Delete documentation on
	USE_GENERIC_DUMMY_FRAMES.
@
text
@a3677 4
@@item PC_IN_CALL_DUMMY
@@findex PC_IN_CALL_DUMMY
See @@file{inferior.h}.

@


1.107
log
@2002-10-26  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Delete
	definition of DO_REGISTERS_INFO.

2002-10-26  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (DEPRECATED_DO_REGISTERS_INFO): Rename
	DO_REGISTERS_INFO.
	gdbarch.h, gdbarch.c: Re-generate.
	* infcmd.c (default_print_registers_info): Update reference.
	* mips-tdep.c (mips_gdbarch_init): Set deprecated_do_registers_info.
	(mips_dump_tdep): Do not print DO_REGISTERS_INFO.
	* sh-tdep.c (sh_gdbarch_init): Ditto.
	* mn10300-tdep.c (mn10300_gdbarch_init): Ditto.
	* h8300-tdep.c (h8300_gdbarch_init): Ditto.
@
text
@a2247 5
@@item USE_GENERIC_DUMMY_FRAMES
@@cindex generic dummy frames
Define this to 1 if the target is using the generic inferior function
call code.  See @@code{blockframe.c} for more information.

@


1.106
log
@	* gdbint.texinfo (Address Classes): Fix problems with insertion
	of ``{'' and ``}'' in example.
@
text
@a3220 6
@@item DO_REGISTERS_INFO
@@findex DO_REGISTERS_INFO
If defined, use this to print the value of a register or all registers.

This method is deprecated.

@


1.105
log
@Address Class documentation.
@
text
@d2678 1
a2678 1
{
d2683 1
a2683 1
}
d2687 1
a2687 1
{
d2692 1
a2692 1
}
d2697 1
a2697 1
{
d2699 1
a2699 1
    {
d2702 1
a2702 1
    }
d2705 1
a2705 1
}
@


1.104
log
@        * gdbint.texinfo (CPLUS_MARKER): Remove item.
@
text
@d2633 85
d2944 43
@


1.103
log
@
2002-10-03  Jeff Johnston  <jjohnstn@@redhat.com>

        * gdbint.texinfo (Item Output Functions): Add new ui_out_field_fmt_int
        interface definition.
@
text
@a3071 7
@@item CPLUS_MARKER
@@findex CPLUS_MARKERz
Define this to expand into the character that G@@t{++} uses to distinguish
compiler-generated identifiers from programmer-specified identifiers.
By default, this expands into @@code{'$'}.  Most System V targets should
define this to @@code{'.'}.

@


1.103.2.1
log
@Merge drow-cplus-merge-20021025 to drow-cplus-branch.
@
text
@a2632 85
@@section Address Classes
@@cindex address classes
@@cindex DW_AT_byte_size
@@cindex DW_AT_address_class

Sometimes information about different kinds of addresses is available
via the debug information.  For example, some programming environments
define addresses of several different sizes.  If the debug information
distinguishes these kinds of address classes through either the size
info (e.g, @@code{DW_AT_byte_size} in @@w{DWARF 2}) or through an explicit
address class attribute (e.g, @@code{DW_AT_address_class} in @@w{DWARF 2}), the
following macros should be defined in order to disambiguate these
types within @@value{GDBN} as well as provide the added information to
a @@value{GDBN} user when printing type expressions.

@@deftypefn {Target Macro} int ADDRESS_CLASS_TYPE_FLAGS (int @@var{byte_size}, int @@var{dwarf2_addr_class})
Returns the type flags needed to construct a pointer type whose size
is @@var{byte_size} and whose address class is @@var{dwarf2_addr_class}.
This function is normally called from within a symbol reader.  See
@@file{dwarf2read.c}.
@@end deftypefn

@@deftypefn {Target Macro} char *ADDRESS_CLASS_TYPE_FLAGS_TO_NAME (int @@var{type_flags})
Given the type flags representing an address class qualifier, return
its name.
@@end deftypefn
@@deftypefn {Target Macro} int ADDRESS_CLASS_NAME_to_TYPE_FLAGS (int @@var{name}, int *var{type_flags_ptr})
Given an address qualifier name, set the @@code{int} refererenced by @@var{type_flags_ptr} to the type flags
for that address class qualifier.
@@end deftypefn

Since the need for address classes is rather rare, none of
the address class macros defined by default.  Predicate
macros are provided to detect when they are defined.

Consider a hypothetical architecture in which addresses are normally
32-bits wide, but 16-bit addresses are also supported.  Furthermore,
suppose that the @@w{DWARF 2} information for this architecture simply
uses a @@code{DW_AT_byte_size} value of 2 to indicate the use of one
of these "short" pointers.  The following functions could be defined
to implement the address class macros:

@@smallexample
somearch_address_class_type_flags (int byte_size,
                                   int dwarf2_addr_class)
@@{
  if (byte_size == 2)
    return TYPE_FLAG_ADDRESS_CLASS_1;
  else
    return 0;
@@}

static char *
somearch_address_class_type_flags_to_name (int type_flags)
@@{
  if (type_flags & TYPE_FLAG_ADDRESS_CLASS_1)
    return "short";
  else
    return NULL;
@@}

int
somearch_address_class_name_to_type_flags (char *name,
                                           int *type_flags_ptr)
@@{
  if (strcmp (name, "short") == 0)
    @@{
      *type_flags_ptr = TYPE_FLAG_ADDRESS_CLASS_1;
      return 1;
    @@}
  else
    return 0;
@@}
@@end smallexample

The qualifier @@code{@@@@short} is used in @@value{GDBN}'s type expressions
to indicate the presence of one of these "short" pointers.  E.g, if
the debug information indicates that @@code{short_ptr_var} is one of these
short pointers, @@value{GDBN} might show the following behavior:

@@smallexample
(gdb) ptype short_ptr_var
type = int * @@@@short
@@end smallexample

a2859 43
@@item ADDRESS_CLASS_NAME_TO_TYPE_FLAGS (@@var{name}, @@var{type_flags_ptr})
@@findex ADDRESS_CLASS_NAME_TO_TYPE_FLAGS
If @@var{name} is a valid address class qualifier name, set the @@code{int}
referenced by @@var{type_flags_ptr} to the mask representing the qualifier
and return 1.  If @@var{name} is not a valid address class qualifier name,
return 0.

The value for @@var{type_flags_ptr} should be one of
@@code{TYPE_FLAG_ADDRESS_CLASS_1}, @@code{TYPE_FLAG_ADDRESS_CLASS_2}, or
possibly some combination of these values or'd together.
@@xref{Target Architecture Definition, , Address Classes}.

@@item ADDRESS_CLASS_NAME_TO_TYPE_FLAGS_P ()
@@findex ADDRESS_CLASS_NAME_TO_TYPE_FLAGS_P
Predicate which indicates whether @@code{ADDRESS_CLASS_NAME_TO_TYPE_FLAGS}
has been defined.

@@item ADDRESS_CLASS_TYPE_FLAGS (@@var{byte_size}, @@var{dwarf2_addr_class})
@@findex ADDRESS_CLASS_TYPE_FLAGS (@@var{byte_size}, @@var{dwarf2_addr_class})
Given a pointers byte size (as described by the debug information) and
the possible @@code{DW_AT_address_class} value, return the type flags
used by @@value{GDBN} to represent this address class.  The value
returned should be one of @@code{TYPE_FLAG_ADDRESS_CLASS_1},
@@code{TYPE_FLAG_ADDRESS_CLASS_2}, or possibly some combination of these
values or'd together.
@@xref{Target Architecture Definition, , Address Classes}.

@@item ADDRESS_CLASS_TYPE_FLAGS_P ()
@@findex ADDRESS_CLASS_TYPE_FLAGS_P
Predicate which indicates whether @@code{ADDRESS_CLASS_TYPE_FLAGS} has
been defined.

@@item ADDRESS_CLASS_TYPE_FLAGS_TO_NAME (@@var{type_flags})
@@findex ADDRESS_CLASS_TYPE_FLAGS_TO_NAME
Return the name of the address class qualifier associated with the type
flags given by @@var{type_flags}.

@@item ADDRESS_CLASS_TYPE_FLAGS_TO_NAME_P ()
@@findex ADDRESS_CLASS_TYPE_FLAGS_TO_NAME_P
Predicate which indicates whether @@code{ADDRESS_CLASS_TYPE_FLAGS_TO_NAME} has
been defined.
@@xref{Target Architecture Definition, , Address Classes}.

d3071 7
@


1.103.2.2
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@d11 1
a11 1
Copyright 1990,1991,1992,1993,1994,1996,1998,1999,2000,2001,2002,2003
d19 6
a24 3
Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
Texts.  A copy of the license is included in the section entitled ``GNU
Free Documentation License''.
d53 2
a54 2
Copyright @@copyright{} 1990,1991,1992,1993,1994,1996,1998,1999,2000,2001,
   2002, 2003  Free Software Foundation, Inc.
d59 6
a64 3
Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
Texts.  A copy of the license is included in the section entitled ``GNU
Free Documentation License''.
a96 1
* GDB Observers::  @@value{GDBN} Currently available observers
d243 1
a243 1
create_new_frame (read_register (DEPRECATED_FP_REGNUM), read_pc ()));
d247 6
a252 7
Other than that, all the meaning imparted to @@code{DEPRECATED_FP_REGNUM}
is imparted by the machine-dependent code.  So,
@@code{DEPRECATED_FP_REGNUM} can have any value that is convenient for
the code that creates new frames.  (@@code{create_new_frame} calls
@@code{DEPRECATED_INIT_EXTRA_FRAME_INFO} if it is defined; that is where
you should use the @@code{DEPRECATED_FP_REGNUM} value, if your frames are
nonstandard.)
d255 4
a258 5
Given a @@value{GDBN} frame, define @@code{DEPRECATED_FRAME_CHAIN} to
determine the address of the calling function's frame.  This will be
used to create a new @@value{GDBN} frame struct, and then
@@code{DEPRECATED_INIT_EXTRA_FRAME_INFO} and
@@code{DEPRECATED_INIT_FRAME_PC} will be called for the new frame.
d288 1
a288 1
@@value{GDBN} need not do anything more than set the breakpoint and wait
a697 23
@@section Observing changes in @@value{GDBN} internals
@@cindex observer pattern interface
@@cindex notifications about changes in internals

In order to function properly, several modules need to be notified when
some changes occur in the @@value{GDBN} internals.  Traditionally, these
modules have relied on several paradigms, the most common ones being
hooks and gdb-events.  Unfortunately, none of these paradigms was
versatile enough to become the standard notification mechanism in
@@value{GDBN}.  The fact that they only supported one ``client'' was also
a strong limitation.

A new paradigm, based on the Observer pattern of the @@cite{Design
Patterns} book, has therefore been implemented.  The goal was to provide
a new interface overcoming the issues with the notification mechanisms
previously available.  This new interface needed to be strongly typed,
easy to extend, and versatile enough to be used as the standard
interface when adding new notifications.

See @@ref{GDB Observers} for a brief description of the observers
currently implemented in GDB. The rationale for the current
implementation is also briefly discussed.

d1482 1
a1482 1
@@value{GDBN} can better handle the problem of some commands blocking
d1844 1
d2248 5
d2304 3
a2306 2
This symbol is abused in @@file{infrun.c}, @@file{regex.c}, and
@@file{utils.c} for other things, at the moment.)
d2432 1
a2432 1
@@deftypefun void gdbarch_register_osabi (enum bfd_architecture @@var{arch}, unsigned long @@var{machine}, enum gdb_osabi @@var{osabi}, void (*@@var{init_osabi})(struct gdbarch_info @@var{info}, struct gdbarch *@@var{gdbarch}))
d2434 1
a2434 4
architecture, machine type and OS ABI specified by @@var{arch},
@@var{machine} and @@var{osabi}.  In most cases, a value of zero for the
machine type, which implies the architecture's default machine type,
will suffice.
d2492 1
a2492 1
For example, the Renesas D10V is a 16-bit VLIW processor whose
d2582 29
d2782 1
a2782 1
@@deftypefn {Target Macro} int DEPRECATED_REGISTER_RAW_SIZE (int @@var{reg})
d2788 1
a2788 1
@@deftypefn {Target Macro} int DEPRECATED_REGISTER_VIRTUAL_SIZE (int @@var{reg})
d2794 1
a2794 1
@@deftypefn {Target Macro} struct type *DEPRECATED_REGISTER_VIRTUAL_TYPE (int @@var{reg})
d2803 1
a2803 1
should always be @@code{DEPRECATED_REGISTER_VIRTUAL_TYPE (@@var{reg})}.  The buffer
d2818 1
a2818 1
should always be @@code{DEPRECATED_REGISTER_VIRTUAL_TYPE (@@var{reg})}.  The buffer
d2919 12
d2996 10
d3044 10
a3053 11
@@item DEPRECATED_REMOTE_BREAKPOINT
@@itemx DEPRECATED_LITTLE_REMOTE_BREAKPOINT
@@itemx DEPRECATED_BIG_REMOTE_BREAKPOINT
@@findex DEPRECATED_BIG_REMOTE_BREAKPOINT
@@findex DEPRECATED_LITTLE_REMOTE_BREAKPOINT
@@findex DEPRECATED_REMOTE_BREAKPOINT
Specify the breakpoint instruction sequence for a remote target.
@@code{DEPRECATED_REMOTE_BREAKPOINT},
@@code{DEPRECATED_BIG_REMOTE_BREAKPOINT} and
@@code{DEPRECATED_LITTLE_REMOTE_BREAKPOINT} have been deprecated in
favor of @@code{BREAKPOINT_FROM_PC} (@@pxref{BREAKPOINT_FROM_PC}).
d3057 5
a3061 6
@@anchor{BREAKPOINT_FROM_PC} Use the program counter to determine the
contents and size of a breakpoint instruction.  It returns a pointer to
a string of bytes that encode a breakpoint instruction, stores the
length of the string to @@code{*@@var{lenptr}}, and adjusts the program
counter (if necessary) to point to the actual memory location where the
breakpoint should be inserted.
d3088 4
a3091 32
@@item ADJUST_BREAKPOINT_ADDRESS (@@var{address})
@@findex ADJUST_BREAKPOINT_ADDRESS
@@cindex breakpoint address adjusted
Given an address at which a breakpoint is desired, return a breakpoint
address adjusted to account for architectural constraints on
breakpoint placement.  This method is not needed by most targets.

The FR-V target (see @@file{frv-tdep.c}) requires this method.
The FR-V is a VLIW architecture in which a number of RISC-like
instructions are grouped (packed) together into an aggregate
instruction or instruction bundle.  When the processor executes
one of these bundles, the component instructions are executed
in parallel.

In the course of optimization, the compiler may group instructions
from distinct source statements into the same bundle.  The line number
information associated with one of the latter statements will likely
refer to some instruction other than the first one in the bundle.  So,
if the user attempts to place a breakpoint on one of these latter
statements, @@value{GDBN} must be careful to @@emph{not} place the break
instruction on any instruction other than the first one in the bundle.
(Remember though that the instructions within a bundle execute
in parallel, so the @@emph{first} instruction is the instruction
at the lowest address and has nothing to do with execution order.)

The FR-V's @@code{ADJUST_BREAKPOINT_ADDRESS} method will adjust a
breakpoint's address by scanning backwards for the beginning of
the bundle, returning the address of the bundle.

Since the adjustment of a breakpoint may significantly alter a user's
expectation, @@value{GDBN} prints a warning when an adjusted breakpoint
is initially set and each time that that breakpoint is hit.
d3093 2
a3094 2
@@item DEPRECATED_CALL_DUMMY_WORDS
@@findex DEPRECATED_CALL_DUMMY_WORDS
d3096 3
a3098 3
host-byte-ordered @@code{DEPRECATED_REGISTER_SIZE} sized values that
partially specify the sequence of instructions needed for an inferior
function call.
d3103 4
a3106 10
This method has been replaced by @@code{push_dummy_code}
(@@pxref{push_dummy_code}).

@@item DEPRECATED_SIZEOF_CALL_DUMMY_WORDS
@@findex DEPRECATED_SIZEOF_CALL_DUMMY_WORDS
The size of @@code{DEPRECATED_CALL_DUMMY_WORDS}.  This must return a
positive value.  See also @@code{DEPRECATED_CALL_DUMMY_LENGTH}.

This method has been replaced by @@code{push_dummy_code}
(@@pxref{push_dummy_code}).
d3110 1
a3110 5
A static initializer for @@code{DEPRECATED_CALL_DUMMY_WORDS}.
Deprecated.

This method has been replaced by @@code{push_dummy_code}
(@@pxref{push_dummy_code}).
d3116 3
a3118 2
This method has been replaced by @@code{push_dummy_code}
(@@pxref{push_dummy_code}).
d3120 7
a3126 5
@@item DEPRECATED_CALL_DUMMY_STACK_ADJUST
@@findex DEPRECATED_CALL_DUMMY_STACK_ADJUST
Stack adjustment needed when performing an inferior function call.  This
function is no longer needed.  @@xref{push_dummy_call}, which can handle
all alignment directly.
d3150 44
d3200 6
d3221 6
a3275 3
This method has been deprecated in favour of @@code{gdbarch_return_value}
(@@pxref{gdbarch_return_value}).

a3277 1
@@anchor{EXTRACT_STRUCT_VALUE_ADDRESS}
d3282 1
a3282 1
@@xref{gdbarch_return_value}.
d3288 6
a3293 2
@@item DEPRECATED_FP_REGNUM
@@findex DEPRECATED_FP_REGNUM
d3297 2
a3298 2
This should only need to be defined if @@code{DEPRECATED_TARGET_READ_FP}
is not defined.
d3312 1
a3312 1
stack alignment requirements (@@pxref{DEPRECATED_STACK_ALIGN}).
d3318 2
a3319 2
Unlike @@code{DEPRECATED_STACK_ALIGN}, this function always adjusts the
address in the direction of stack growth.
d3323 3
a3325 1
@@item int frame_red_zone_size
d3327 3
a3329 15
The number of bytes, beyond the innermost-stack-address, reserved by the
@@sc{abi}.  A function is permitted to use this scratch area (instead of
allocating extra stack space).

When performing an inferior function call, to ensure that it does not
modify this area, @@value{GDBN} adjusts the innermost-stack-address by
@@var{frame_red_zone_size} bytes before pushing parameters onto the
stack.

By default, zero bytes are allocated.  The value must be aligned
(@@pxref{frame_align}).

The @@sc{amd64} (nee x86-64) @@sc{abi} documentation refers to the
@@emph{red zone} when describing this scratch area.
@@cindex red zone
d3331 16
a3346 3
@@item DEPRECATED_FRAME_CHAIN(@@var{frame})
@@findex DEPRECATED_FRAME_CHAIN
Given @@var{frame}, return a pointer to the calling frame.
d3348 5
a3352 8
@@item DEPRECATED_FRAME_CHAIN_VALID(@@var{chain}, @@var{thisframe})
@@findex DEPRECATED_FRAME_CHAIN_VALID
Define this to be an expression that returns zero if the given frame is an
outermost frame, with no caller, and nonzero otherwise.  Most normal
situations can be handled without defining this macro, including @@code{NULL}
chain pointers, dummy frames, and frames whose PC values are inside the
startup file (e.g.@@: @@file{crt0.o}), inside @@code{main}, or inside
@@code{_start}.
d3354 2
a3355 2
@@item DEPRECATED_FRAME_INIT_SAVED_REGS(@@var{frame})
@@findex DEPRECATED_FRAME_INIT_SAVED_REGS
d3359 2
a3360 2
@@code{DEPRECATED_FRAME_INIT_SAVED_REGS} using
@@code{frame_saved_regs_zalloc}.
d3362 1
a3362 1
@@code{FRAME_FIND_SAVED_REGS} is deprecated.
d3370 4
a3373 41
@@item DEPRECATED_FRAME_SAVED_PC(@@var{frame})
@@findex DEPRECATED_FRAME_SAVED_PC
@@anchor{DEPRECATED_FRAME_SAVED_PC} Given @@var{frame}, return the pc
saved there.  This is the return address.

This method is deprecated. @@xref{unwind_pc}.

@@item CORE_ADDR unwind_pc (struct frame_info *@@var{this_frame})
@@findex unwind_pc
@@anchor{unwind_pc} Return the instruction address, in @@var{this_frame}'s
caller, at which execution will resume after @@var{this_frame} returns.
This is commonly refered to as the return address.

The implementation, which must be frame agnostic (work with any frame),
is typically no more than:

@@smallexample
ULONGEST pc;
frame_unwind_unsigned_register (this_frame, D10V_PC_REGNUM, &pc);
return d10v_make_iaddr (pc);
@@end smallexample

@@noindent
@@xref{DEPRECATED_FRAME_SAVED_PC}, which this method replaces.

@@item CORE_ADDR unwind_sp (struct frame_info *@@var{this_frame})
@@findex unwind_sp
@@anchor{unwind_sp} Return the frame's inner most stack address.  This is
commonly refered to as the frame's @@dfn{stack pointer}.

The implementation, which must be frame agnostic (work with any frame),
is typically no more than:

@@smallexample
ULONGEST sp;
frame_unwind_unsigned_register (this_frame, D10V_SP_REGNUM, &sp);
return d10v_make_daddr (sp);
@@end smallexample

@@noindent
@@xref{TARGET_READ_SP}, which this method replaces.
d3434 3
a3436 2
@@item DEPRECATED_GET_SAVED_REGISTER
@@findex DEPRECATED_GET_SAVED_REGISTER
d3438 1
a3438 1
@@code{DEPRECATED_GET_SAVED_REGISTER}.
d3440 3
a3442 3
@@item DEPRECATED_IBM6000_TARGET
@@findex DEPRECATED_IBM6000_TARGET
Shows that we are configured for an IBM RS/6000 system.  This
d3461 2
a3462 2
@@item DEPRECATED_INIT_EXTRA_FRAME_INFO (@@var{fromleaf}, @@var{frame})
@@findex DEPRECATED_INIT_EXTRA_FRAME_INFO
d3465 1
a3465 1
is allocated using @@code{frame_extra_info_zalloc}.
d3467 2
a3468 2
@@item DEPRECATED_INIT_FRAME_PC (@@var{fromleaf}, @@var{prev})
@@findex DEPRECATED_INIT_FRAME_PC
d3541 12
d3575 2
a3576 2
@@item DEPRECATED_REGISTER_RAW_SIZE (@@var{reg})
@@findex DEPRECATED_REGISTER_RAW_SIZE
d3581 2
a3582 24
@@item register_reggroup_p (@@var{gdbarch}, @@var{regnum}, @@var{reggroup})
@@findex register_reggroup_p
@@cindex register groups
Return non-zero if register @@var{regnum} is a member of the register
group @@var{reggroup}.

By default, registers are grouped as follows:

@@table @@code
@@item float_reggroup
Any register with a valid name and a floating-point type.
@@item vector_reggroup
Any register with a valid name and a vector type.
@@item general_reggroup
Any register with a valid name and a type other than vector or
floating-point.  @@samp{float_reggroup}.
@@item save_reggroup
@@itemx restore_reggroup
@@itemx all_reggroup
Any register with a valid name.
@@end table

@@item DEPRECATED_REGISTER_VIRTUAL_SIZE (@@var{reg})
@@findex DEPRECATED_REGISTER_VIRTUAL_SIZE
d3588 1
a3588 1
@@item DEPRECATED_REGISTER_VIRTUAL_TYPE (@@var{reg})
a3592 6
@@item struct type *register_type (@@var{gdbarch}, @@var{reg})
@@findex register_type
If defined, return the type of register @@var{reg}.  This function
superseeds @@code{DEPRECATED_REGISTER_VIRTUAL_TYPE}.  @@xref{Target Architecture
Definition, , Raw and Virtual Register Representations}.

a3604 6
@@item const struct regset *regset_from_core_section (struct gdbarch * @@var{gdbarch}, const char * @@var{sect_name}, size_t @@var{sect_size})
@@findex regset_from_core_section
Return the appropriate register set for a core file section with name
@@var{sect_name} and size @@var{sect_size}.


d3689 4
d3718 2
a3719 2
@@item DEPRECATED_NPC_REGNUM
@@findex DEPRECATED_NPC_REGNUM
a3721 3
@@code{DEPRECATED_NPC_REGNUM} has been replaced by @@code{TARGET_WRITE_PC}
(@@pxref{TARGET_WRITE_PC}).

d3727 9
a3735 9
@@item stabs_argument_has_addr (@@var{gdbarch}, @@var{type})
@@findex stabs_argument_has_addr
@@findex DEPRECATED_REG_STRUCT_HAS_ADDR
@@anchor{stabs_argument_has_addr} Define this to return nonzero if a
function argument of type @@var{type} is passed by reference instead of
value.

This method replaces @@code{DEPRECATED_REG_STRUCT_HAS_ADDR}
(@@pxref{DEPRECATED_REG_STRUCT_HAS_ADDR}).
d3750 11
a3760 39
@@item DEPRECATED_POP_FRAME
@@findex DEPRECATED_POP_FRAME
@@findex frame_pop
If defined, used by @@code{frame_pop} to remove a stack frame.  This
method has been superseeded by generic code.

@@item push_dummy_call (@@var{gdbarch}, @@var{func_addr}, @@var{regcache}, @@var{pc_addr}, @@var{nargs}, @@var{args}, @@var{sp}, @@var{struct_return}, @@var{struct_addr})
@@findex push_dummy_call
@@findex DEPRECATED_PUSH_ARGUMENTS.
@@anchor{push_dummy_call} Define this to push the dummy frame's call to
the inferior function onto the stack.  In addition to pushing
@@var{nargs}, the code should push @@var{struct_addr} (when
@@var{struct_return}), and the return address (@@var{bp_addr}).

Returns the updated top-of-stack pointer.

This method replaces @@code{DEPRECATED_PUSH_ARGUMENTS}.

@@item CORE_ADDR push_dummy_code (@@var{gdbarch}, @@var{sp}, @@var{funaddr}, @@var{using_gcc}, @@var{args}, @@var{nargs}, @@var{value_type}, @@var{real_pc}, @@var{bp_addr})
@@findex push_dummy_code
@@findex DEPRECATED_FIX_CALL_DUMMY
@@anchor{push_dummy_code} Given a stack based call dummy, push the
instruction sequence (including space for a breakpoint) to which the
called function should return.

Set @@var{bp_addr} to the address at which the breakpoint instruction
should be inserted, @@var{real_pc} to the resume address when starting
the call sequence, and return the updated inner-most stack address.

By default, the stack is grown sufficient to hold a frame-aligned
(@@pxref{frame_align}) breakpoint, @@var{bp_addr} is set to the address
reserved for that breakpoint, and @@var{real_pc} set to @@var{funaddr}.

This method replaces @@code{DEPRECATED_CALL_DUMMY_WORDS},
@@code{DEPRECATED_SIZEOF_CALL_DUMMY_WORDS}, @@code{CALL_DUMMY},
@@code{CALL_DUMMY_LOCATION}, @@code{DEPRECATED_REGISTER_SIZE},
@@code{GDB_TARGET_IS_HPPA},
@@code{DEPRECATED_CALL_DUMMY_BREAKPOINT_OFFSET}, and
@@code{DEPRECATED_FIX_CALL_DUMMY}.
d3762 2
a3763 2
@@item DEPRECATED_PUSH_DUMMY_FRAME
@@findex DEPRECATED_PUSH_DUMMY_FRAME
d3766 4
a3769 7
@@item DEPRECATED_REGISTER_BYTES
@@findex DEPRECATED_REGISTER_BYTES
The total amount of space needed to store @@value{GDBN}'s copy of the
machine's register state.

This is no longer needed.  @@value{GDBN} instead computes the size of the
register buffer at run-time.
d3776 8
a3783 7
@@item DEPRECATED_REG_STRUCT_HAS_ADDR (@@var{gcc_p}, @@var{type})
@@findex DEPRECATED_REG_STRUCT_HAS_ADDR
@@anchor{DEPRECATED_REG_STRUCT_HAS_ADDR}Define this to return 1 if the
given type will be passed by pointer rather than directly.

This method has been replaced by @@code{stabs_argument_has_addr}
(@@pxref{stabs_argument_has_addr}).
d3787 4
a3790 5
@@anchor{SAVE_DUMMY_FRAME_TOS} Used in @@samp{call_function_by_hand} to
notify the target dependent code of the top-of-stack value that will be
passed to the the inferior code.  This is the value of the @@code{SP}
after both the dummy frame and space for parameters/results have been
allocated on the stack.  @@xref{unwind_dummy_id}.
d3797 3
a3799 41
@@item enum return_value_convention gdbarch_return_value (struct gdbarch *@@var{gdbarch}, struct type *@@var{valtype}, struct regcache *@@var{regcache}, void *@@var{readbuf}, const void *@@var{writebuf})
@@findex gdbarch_return_value
@@anchor{gdbarch_return_value} Given a function with a return-value of
type @@var{rettype}, return which return-value convention that function
would use.

@@value{GDBN} currently recognizes two function return-value conventions:
@@code{RETURN_VALUE_REGISTER_CONVENTION} where the return value is found
in registers; and @@code{RETURN_VALUE_STRUCT_CONVENTION} where the return
value is found in memory and the address of that memory location is
passed in as the function's first parameter.

If the register convention is being used, and @@var{writebuf} is
non-@@code{NULL}, also copy the return-value in @@var{writebuf} into
@@var{regcache}.

If the register convention is being used, and @@var{readbuf} is
non-@@code{NULL}, also copy the return value from @@var{regcache} into
@@var{readbuf} (@@var{regcache} contains a copy of the registers from the
just returned function).

@@xref{EXTRACT_STRUCT_VALUE_ADDRESS}, for a description of how
return-values that use the struct convention are handled.

@@emph{Maintainer note: This method replaces separate predicate, extract,
store methods.  By having only one method, the logic needed to determine
the return-value convention need only be implemented in one place.  If
@@value{GDBN} were written in an @@sc{oo} language, this method would
instead return an object that knew how to perform the register
return-value extract and store.}

@@emph{Maintainer note: This method does not take a @@var{gcc_p}
parameter, and such a parameter should not be added.  If an architecture
that requires per-compiler or per-function information be identified,
then the replacement of @@var{rettype} with @@code{struct value}
@@var{function} should be persued.}

@@emph{Maintainer note: The @@var{regcache} parameter limits this methods
to the inner most frame.  While replacing @@var{regcache} with a
@@code{struct frame_info} @@var{frame} parameter would remove that
limitation there has yet to be a demonstrated need for such a change.}
d3826 4
a3829 2
the number (greater than or equal to zero) of that register, or -1 if
there is no such register.
d3837 3
a3839 3
@@item DEPRECATED_STACK_ALIGN (@@var{addr})
@@anchor{DEPRECATED_STACK_ALIGN}
@@findex DEPRECATED_STACK_ALIGN
a3860 3
This method has been deprecated in favour of @@code{gdbarch_return_value}
(@@pxref{gdbarch_return_value}).

a3933 1
@@anchor{TARGET_WRITE_PC}
d3936 2
d3943 1
d3945 4
a3948 4
@@anchor{TARGET_READ_SP} These change the behavior of @@code{read_pc},
@@code{write_pc}, @@code{read_sp} and @@code{deprecated_read_fp}.  For most
targets, these may be left undefined.  @@value{GDBN} will call the read
and write register functions with the relevant @@code{_REGNUM} argument.
a3953 2
@@xref{unwind_sp}, which replaces @@code{TARGET_READ_SP}.

d3956 4
a3959 4
Returns a @@code{(register, offset)} pair representing the virtual frame
pointer in use at the code address @@var{pc}.  If virtual frame pointers
are not used, a default definition simply returns
@@code{DEPRECATED_FP_REGNUM}, with an offset of zero.
d3972 5
a3976 14
accessor function for the global pointer
@@code{deprecated_tm_print_insn}.  This usually points to a function in
the @@code{opcodes} library (@@pxref{Support Libraries, ,Opcodes}).
@@var{info} is a structure (of type @@code{disassemble_info}) defined in
@@file{include/dis-asm.h} used to pass information to the instruction
decoding routine.

@@item struct frame_id unwind_dummy_id (struct frame_info *@@var{frame})
@@findex unwind_dummy_id
@@anchor{unwind_dummy_id} Given @@var{frame} return a @@code{struct
frame_id} that uniquely identifies an inferior function call's dummy
frame.  The value returned must match the dummy frame stack value
previously saved using @@code{SAVE_DUMMY_FRAME_TOS}.
@@xref{SAVE_DUMMY_FRAME_TOS}.
a3986 3
This method has been deprecated in favour of @@code{gdbarch_return_value}
(@@pxref{gdbarch_return_value}).

d4194 2
d4197 1
a4197 1
Replaced with @@code{DEPRECATED_FRAME_INIT_SAVED_REGS}
d4525 17
a5056 1
@@itemx -Wformat-nonliteral
d5058 1
a5058 1
@@code{printf} like functions these check not just @@code{printf} calls
d5239 1
a5239 5
@@file{gdb_} (@@file{gdb_string.h}).  These headers should be relatively
independent: they should use only macros defined by @@file{configure},
the compiler, or the host; they should include only system headers; they
should refer only to system types.  They may be shared between multiple
programs, e.g.@@: @@value{GDBN} and @@sc{gdbserver}.
d5475 56
a6065 11
( cd $m/src && gmake -f src-release $m.tar )
done
$  ( m=dejagnu; cd $m/src && gmake -f src-release $m.tar.bz2 )
@@end smallexample

If the top level source directory does not have @@file{src-release}
(@@value{GDBN} version 5.3.1 or earlier), try these commands instead:

@@smallexample
$  for m in gdb insight
do
d6457 1
a6457 1
@@file{gdb.cp} and @@file{gdb.java}.
a6706 1
@@include observer.texi
@


1.103.2.3
log
@Merge drow-cplus-merge-20040208 to drow-cplus-branch.
@
text
@d11 1
a11 1
Copyright 1990,1991,1992,1993,1994,1996,1998,1999,2000,2001,2002,2003,2004
d51 1
a51 1
   2002, 2003, 2004  Free Software Foundation, Inc.
d483 7
d2248 6
d2267 31
d3164 4
d3225 3
a3227 3
@@item DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS(@@var{regbuf})
@@findex DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS
@@anchor{DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS}
d3234 3
a3236 3
@@item DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS_P()
@@findex DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS_P
Predicate for @@code{DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS}.
d3718 7
d3852 1
a3852 1
@@xref{DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS}, for a description of how
a5134 17

@@item -Wunused-label
This warning has the additional benefit of detecting the absence of the
@@code{case} reserved word in a switch statement:
@@smallexample
enum @@{ FD_SCHEDULED, NOTHING_SCHEDULED @@} sched;
@@dots{}
switch (sched)
  @@{
  case FD_SCHEDULED:
    @@dots{};
    break;
  NOTHING_SCHEDULED:
    @@dots{};
    break;
  @@}
@@end smallexample
@


1.102
log
@2002-09-19  Andrew Cagney  <ac131313@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Revise
	description of STACK_ALIGN.  Add description of FRAME_ALIGN.
@
text
@d1014 7
@


1.102.2.1
log
@Merge with mainline; merge tag carlton_dictionary-20021011-merge.
@
text
@a1013 7
@@deftypefun void ui_out_field_fmt_int (struct ui_out *@@var{uiout}, int @@var{width}, enum ui_align @@var{alignment}, const char *@@var{fldname}, int @@var{value})
This function outputs a value of an @@code{int} variable.  It differs from
@@code{ui_out_field_int} in that the caller specifies the desired @@var{width} and @@var{alignment} of the output.
@@var{fldname} specifies
the name of the field.
@@end deftypefun

d3064 7
@


1.102.2.2
log
@2002-10-25  David Carlton  <carlton@@math.stanford.edu>

	* symtab.c (lookup_symbol_aux_block): New function.
	(lookup_symbol_aux_local): Call lookup_symbol_aux_block.
	(lookup_symbol_aux): Ditto.

	* Merge from mainline; tag is carlton_dictionary-20021025-merge.

2002-10-25  David Carlton  <carlton@@math.stanford.edu>

	* cp-support.c: Add comment to demangled name pitfalls.
	* symtab.c (lookup_transparent_type): Add FIXME comment at
	beginning.

2002-10-23  David Carlton  <carlton@@math.stanford.edu>

	* symtab.c: Delete cplusplus_hint.
	Delete prototype for find_template_name_end.
	* dwarf2read.c (scan_partial_symbols): Add in a gdb_assert from a
	later version of my namespace_minimal patch.

2002-10-25  David Carlton  <carlton@@math.stanford.edu>

	* gdb.c++/namespace.exp: Change all of the setup_xfail tests that
	I added into setup_kfails.
@
text
@a2632 85
@@section Address Classes
@@cindex address classes
@@cindex DW_AT_byte_size
@@cindex DW_AT_address_class

Sometimes information about different kinds of addresses is available
via the debug information.  For example, some programming environments
define addresses of several different sizes.  If the debug information
distinguishes these kinds of address classes through either the size
info (e.g, @@code{DW_AT_byte_size} in @@w{DWARF 2}) or through an explicit
address class attribute (e.g, @@code{DW_AT_address_class} in @@w{DWARF 2}), the
following macros should be defined in order to disambiguate these
types within @@value{GDBN} as well as provide the added information to
a @@value{GDBN} user when printing type expressions.

@@deftypefn {Target Macro} int ADDRESS_CLASS_TYPE_FLAGS (int @@var{byte_size}, int @@var{dwarf2_addr_class})
Returns the type flags needed to construct a pointer type whose size
is @@var{byte_size} and whose address class is @@var{dwarf2_addr_class}.
This function is normally called from within a symbol reader.  See
@@file{dwarf2read.c}.
@@end deftypefn

@@deftypefn {Target Macro} char *ADDRESS_CLASS_TYPE_FLAGS_TO_NAME (int @@var{type_flags})
Given the type flags representing an address class qualifier, return
its name.
@@end deftypefn
@@deftypefn {Target Macro} int ADDRESS_CLASS_NAME_to_TYPE_FLAGS (int @@var{name}, int *var{type_flags_ptr})
Given an address qualifier name, set the @@code{int} refererenced by @@var{type_flags_ptr} to the type flags
for that address class qualifier.
@@end deftypefn

Since the need for address classes is rather rare, none of
the address class macros defined by default.  Predicate
macros are provided to detect when they are defined.

Consider a hypothetical architecture in which addresses are normally
32-bits wide, but 16-bit addresses are also supported.  Furthermore,
suppose that the @@w{DWARF 2} information for this architecture simply
uses a @@code{DW_AT_byte_size} value of 2 to indicate the use of one
of these "short" pointers.  The following functions could be defined
to implement the address class macros:

@@smallexample
somearch_address_class_type_flags (int byte_size,
                                   int dwarf2_addr_class)
@@{
  if (byte_size == 2)
    return TYPE_FLAG_ADDRESS_CLASS_1;
  else
    return 0;
@@}

static char *
somearch_address_class_type_flags_to_name (int type_flags)
@@{
  if (type_flags & TYPE_FLAG_ADDRESS_CLASS_1)
    return "short";
  else
    return NULL;
@@}

int
somearch_address_class_name_to_type_flags (char *name,
                                           int *type_flags_ptr)
@@{
  if (strcmp (name, "short") == 0)
    @@{
      *type_flags_ptr = TYPE_FLAG_ADDRESS_CLASS_1;
      return 1;
    @@}
  else
    return 0;
@@}
@@end smallexample

The qualifier @@code{@@@@short} is used in @@value{GDBN}'s type expressions
to indicate the presence of one of these "short" pointers.  E.g, if
the debug information indicates that @@code{short_ptr_var} is one of these
short pointers, @@value{GDBN} might show the following behavior:

@@smallexample
(gdb) ptype short_ptr_var
type = int * @@@@short
@@end smallexample

a2858 43

@@item ADDRESS_CLASS_NAME_TO_TYPE_FLAGS (@@var{name}, @@var{type_flags_ptr})
@@findex ADDRESS_CLASS_NAME_TO_TYPE_FLAGS
If @@var{name} is a valid address class qualifier name, set the @@code{int}
referenced by @@var{type_flags_ptr} to the mask representing the qualifier
and return 1.  If @@var{name} is not a valid address class qualifier name,
return 0.

The value for @@var{type_flags_ptr} should be one of
@@code{TYPE_FLAG_ADDRESS_CLASS_1}, @@code{TYPE_FLAG_ADDRESS_CLASS_2}, or
possibly some combination of these values or'd together.
@@xref{Target Architecture Definition, , Address Classes}.

@@item ADDRESS_CLASS_NAME_TO_TYPE_FLAGS_P ()
@@findex ADDRESS_CLASS_NAME_TO_TYPE_FLAGS_P
Predicate which indicates whether @@code{ADDRESS_CLASS_NAME_TO_TYPE_FLAGS}
has been defined.

@@item ADDRESS_CLASS_TYPE_FLAGS (@@var{byte_size}, @@var{dwarf2_addr_class})
@@findex ADDRESS_CLASS_TYPE_FLAGS (@@var{byte_size}, @@var{dwarf2_addr_class})
Given a pointers byte size (as described by the debug information) and
the possible @@code{DW_AT_address_class} value, return the type flags
used by @@value{GDBN} to represent this address class.  The value
returned should be one of @@code{TYPE_FLAG_ADDRESS_CLASS_1},
@@code{TYPE_FLAG_ADDRESS_CLASS_2}, or possibly some combination of these
values or'd together.
@@xref{Target Architecture Definition, , Address Classes}.

@@item ADDRESS_CLASS_TYPE_FLAGS_P ()
@@findex ADDRESS_CLASS_TYPE_FLAGS_P
Predicate which indicates whether @@code{ADDRESS_CLASS_TYPE_FLAGS} has
been defined.

@@item ADDRESS_CLASS_TYPE_FLAGS_TO_NAME (@@var{type_flags})
@@findex ADDRESS_CLASS_TYPE_FLAGS_TO_NAME
Return the name of the address class qualifier associated with the type
flags given by @@var{type_flags}.

@@item ADDRESS_CLASS_TYPE_FLAGS_TO_NAME_P ()
@@findex ADDRESS_CLASS_TYPE_FLAGS_TO_NAME_P
Predicate which indicates whether @@code{ADDRESS_CLASS_TYPE_FLAGS_TO_NAME} has
been defined.
@@xref{Target Architecture Definition, , Address Classes}.
@


1.102.2.3
log
@2002-11-15  David Carlton  <carlton@@math.stanford.edu>

	* Merge from mainline; tag is carlton_dictionary-20021115-merge.
@
text
@d3221 6
@


1.102.2.4
log
@2002-12-23  David Carlton  <carlton@@math.stanford.edu>

	* Merge from mainline; tag is carlton_dictionary-20021223-merge.
@
text
@d256 3
a258 3
address of the calling function's frame.  This will be used to create a
new @@value{GDBN} frame struct, and then @@code{INIT_EXTRA_FRAME_INFO} and
@@code{DEPRECATED_INIT_FRAME_PC} will be called for the new frame.
d2248 5
d3461 2
a3462 2
@@item DEPRECATED_INIT_FRAME_PC (@@var{fromleaf}, @@var{prev})
@@findex DEPRECATED_INIT_FRAME_PC
d3682 4
@


1.102.2.5
log
@2003-02-07  David Carlton  <carlton@@math.stanford.edu>

	* Merge with mainline; tag is carlton_dictionary-20030207-merge.
@
text
@d11 1
a11 1
Copyright 1990,1991,1992,1993,1994,1996,1998,1999,2000,2001,2002,2003
d53 2
a54 2
Copyright @@copyright{} 1990,1991,1992,1993,1994,1996,1998,1999,2000,2001,
   2002, 2003  Free Software Foundation, Inc.
d1844 1
d2299 3
a2301 2
This symbol is abused in @@file{infrun.c}, @@file{regex.c}, and
@@file{utils.c} for other things, at the moment.)
d2427 1
a2427 1
@@deftypefun void gdbarch_register_osabi (enum bfd_architecture @@var{arch}, unsigned long @@var{machine}, enum gdb_osabi @@var{osabi}, void (*@@var{init_osabi})(struct gdbarch_info @@var{info}, struct gdbarch *@@var{gdbarch}))
d2429 1
a2429 4
architecture, machine type and OS ABI specified by @@var{arch},
@@var{machine} and @@var{osabi}.  In most cases, a value of zero for the
machine type, which implies the architecture's default machine type,
will suffice.
d2914 12
d2991 10
d3145 44
d3195 6
d3277 4
d3322 20
a3341 6
Define this to be an expression that returns zero if the given frame is an
outermost frame, with no caller, and nonzero otherwise.  Most normal
situations can be handled without defining this macro, including @@code{NULL}
chain pointers, dummy frames, and frames whose PC values are inside the
startup file (e.g.@@: @@file{crt0.o}), inside @@code{main}, or inside
@@code{_start}.
d3348 2
a3349 1
@@code{FRAME_INIT_SAVED_REGS} using @@code{frame_saved_regs_zalloc}.
d3454 1
a3454 1
is allocated using @@code{frame_extra_info_zalloc}.
d3530 7
a3569 22
@@item register_reggroup_p (@@var{gdbarch}, @@var{regnum}, @@var{reggroup})
@@findex register_reggroup_p
@@cindex register groups
Return non-zero if register @@var{regnum} is a member of the register
group @@var{reggroup}.

By default, registers are grouped as follows:

@@table @@code
@@item float_reggroup
Any register with a valid name and a floating-point type.
@@item vector_reggroup
Any register with a valid name and a vector type.
@@item general_reggroup
Any register with a valid name and a type other than vector or
floating-point.  @@samp{float_reggroup}.
@@item save_reggroup
@@itemx restore_reggroup
@@itemx all_reggroup
Any register with a valid name.
@@end table

d3712 5
d3782 4
d5460 56
a6046 11

@@smallexample
$  for m in gdb insight
do
( cd $m/src && gmake -f src-release $m.tar )
done
$  ( m=dejagnu; cd $m/src && gmake -f src-release $m.tar.bz2 )
@@end smallexample

If the top level source directory does not have @@file{src-release}
(@@value{GDBN} version 5.3.1 or earlier), try these commands instead:
@


1.102.2.6
log
@2003-03-05  David Carlton  <carlton@@math.stanford.edu>

	* Merge with mainline.  Tag is carlton_dictionary-20030305-merge.
@
text
@d250 3
a252 3
(@@code{create_new_frame} calls @@code{DEPRECATED_INIT_EXTRA_FRAME_INFO}
if it is defined; that is where you should use the @@code{FP_REGNUM}
value, if your frames are nonstandard.)
d257 1
a257 2
new @@value{GDBN} frame struct, and then
@@code{DEPRECATED_INIT_EXTRA_FRAME_INFO} and
d3254 2
a3255 2
@@item DEPRECATED_FRAME_INIT_SAVED_REGS(@@var{frame})
@@findex DEPRECATED_FRAME_INIT_SAVED_REGS
d3259 1
a3259 2
@@code{DEPRECATED_FRAME_INIT_SAVED_REGS} using
@@code{frame_saved_regs_zalloc}.
d3360 2
a3361 2
@@item DEPRECATED_INIT_EXTRA_FRAME_INFO (@@var{fromleaf}, @@var{frame})
@@findex DEPRECATED_INIT_EXTRA_FRAME_INFO
a3506 6
@@item struct type *register_type (@@var{gdbarch}, @@var{reg})
@@findex register_type
If defined, return the type of register @@var{reg}.  This function
superseeds @@code{REGISTER_VIRTUAL_TYPE}.  @@xref{Target Architecture
Definition, , Raw and Virtual Register Representations}.

d4098 1
a4098 1
Replaced with @@code{DEPRECATED_FRAME_INIT_SAVED_REGS}
@


1.102.2.7
log
@2003-04-16  David Carlton  <carlton@@bactrian.org>

	* Merge with mainline; tag is carlton_dictionary-20030416-merge.
@
text
@a96 1
* GDB Observers::  @@value{GDBN} Currently available observers
d255 3
a257 3
Given a @@value{GDBN} frame, define @@code{DEPRECATED_FRAME_CHAIN} to
determine the address of the calling function's frame.  This will be
used to create a new @@value{GDBN} frame struct, and then
a698 23
@@section Observing changes in @@value{GDBN} internals
@@cindex observer pattern interface
@@cindex notifications about changes in internals

In order to function properly, several modules need to be notified when
some changes occur in the @@value{GDBN} internals.  Traditionally, these
modules have relied on several paradigms, the most common ones being
hooks and gdb-events.  Unfortunately, none of these paradigms was
versatile enough to become the standard notification mechanism in
@@value{GDBN}.  The fact that they only supported one ``client'' was also
a strong limitation.

A new paradigm, based on the Observer pattern of the @@cite{Design
Patterns} book, has therefore been implemented.  The goal was to provide
a new interface overcoming the issues with the notification mechanisms
previously available.  This new interface needed to be strongly typed,
easy to extend, and versatile enough to be used as the standard
interface when adding new notifications.

See @@ref{GDB Observers} for a brief description of the observers
currently implemented in GDB. The rationale for the current
implementation is also briefly discussed.

d3063 5
d3080 2
a3081 2
The size of @@code{CALL_DUMMY_WORDS}.  This must return a positive value.
See also @@code{CALL_DUMMY_LENGTH}.
d3091 11
a3101 5
@@item DEPRECATED_CALL_DUMMY_STACK_ADJUST
@@findex DEPRECATED_CALL_DUMMY_STACK_ADJUST
Stack adjustment needed when performing an inferior function call.  This
function is no longer needed.  @@xref{push_dummy_call}, which can handle
all alignment directly.
d3242 2
a3243 2
@@item DEPRECATED_FRAME_CHAIN(@@var{frame})
@@findex DEPRECATED_FRAME_CHAIN
d3246 2
a3247 2
@@item DEPRECATED_FRAME_CHAIN_VALID(@@var{chain}, @@var{thisframe})
@@findex DEPRECATED_FRAME_CHAIN_VALID
d3263 1
a3263 1
@@code{FRAME_FIND_SAVED_REGS} is deprecated.
d3271 4
a3274 24
@@item DEPRECATED_FRAME_SAVED_PC(@@var{frame})
@@findex DEPRECATED_FRAME_SAVED_PC
@@anchor{DEPRECATED_FRAME_SAVED_PC} Given @@var{frame}, return the pc
saved there.  This is the return address.

This method is deprecated. @@xref{unwind_pc}.

@@item CORE_ADDR unwind_pc (struct frame_info *@@var{this_frame})
@@findex unwind_pc
@@anchor{unwind_pc} Return the instruction address, in @@var{this_frame}'s
caller, at which execution will resume after @@var{this_frame} returns.
This is commonly refered to as the return address.

The implementation, which must be frame agnostic (work with any frame),
is typically no more than:

@@smallexample
ULONGEST pc;
frame_unwind_unsigned_register (this_frame, D10V_PC_REGNUM, &pc);
return d10v_make_iaddr (pc);
@@end smallexample

@@noindent
@@xref{DEPRECATED_FRAME_SAVED_PC}, which this method replaces.
d3335 3
a3337 2
@@item DEPRECATED_GET_SAVED_REGISTER
@@findex DEPRECATED_GET_SAVED_REGISTER
d3339 1
a3339 1
@@code{DEPRECATED_GET_SAVED_REGISTER}.
d3645 5
d3663 11
a3673 16
@@item DEPRECATED_POP_FRAME
@@findex DEPRECATED_POP_FRAME
@@findex frame_pop
If defined, used by @@code{frame_pop} to remove a stack frame.  This
method has been superseeded by generic code.

@@item push_dummy_call (@@var{gdbarch}, @@var{regcache}, @@var{dummy_addr}, @@var{nargs}, @@var{args}, @@var{sp}, @@var{struct_return}, @@var{struct_addr})
@@findex push_dummy_call
@@findex DEPRECATED_PUSH_ARGUMENTS.
@@anchor{push_dummy_call}
Define this to push the dummy frame's call to the inferior function onto
the stack.  In addition to pushing @@var{nargs}, the code should push
@@var{struct_addr} (when @@var{struct_return}), and the return value (in
the call dummy at @@var{dummy_addr}).

Returns the updated top-of-stack pointer.
d3675 2
a3676 4
This method replaces @@code{DEPRECATED_PUSH_ARGUMENTS}.

@@item DEPRECATED_PUSH_DUMMY_FRAME
@@findex DEPRECATED_PUSH_DUMMY_FRAME
d3700 4
a3703 5
@@anchor{SAVE_DUMMY_FRAME_TOS} Used in @@samp{call_function_by_hand} to
notify the target dependent code of the top-of-stack value that will be
passed to the the inferior code.  This is the value of the @@code{SP}
after both the dummy frame and space for parameters/results have been
allocated on the stack.  @@xref{unwind_dummy_id}.
d3735 4
a3738 2
the number (greater than or equal to zero) of that register, or -1 if
there is no such register.
d3845 2
d3852 1
d3855 3
a3857 3
@@code{read_sp} and @@code{read_fp}.  For most targets, these may be left
undefined.  @@value{GDBN} will call the read and write register functions
with the relevant @@code{_REGNUM} argument.
a3886 8
@@item struct frame_id unwind_dummy_id (struct frame_info *@@var{frame})
@@findex unwind_dummy_id
@@anchor{unwind_dummy_id} Given @@var{frame} return a @@code{struct
frame_id} that uniquely identifies an inferior function call's dummy
frame.  The value returned must match the dummy frame stack value
previously saved using @@code{SAVE_DUMMY_FRAME_TOS}.
@@xref{SAVE_DUMMY_FRAME_TOS}.

d4103 2
a6570 1
@@include observer.texi
@


1.102.2.8
log
@2003-04-30  David Carlton  <carlton@@bactrian.org>

	* cp-namespace.c (get_namespace_objfile): Copy the namespace
	objfile's name.

	* block.h (ALL_BLOCK_SYMBOLS): Move here from dictionary.h.
	* dictionary.c: Sync up with mainline version I just posted.
	Specifically, update some commments, and:
	(dict_create_hashed): Fiddle with nsyms updating.
	(dict_create_linear): Ditto.
	(dict_lookup): Delete.
	(iterator_next_hashed): Delete FIXME comment.
	(iter_name_first_hashed): Replace 'sym' by 'sym != NULL'.
	(iter_name_next_hashed): Replate 'next' by 'next != NULL'.
	* dictionary.h: Sync up with mainline version I just posted: add
	inclusion guards, delete declaration of dict_lookup, delete
	ALL_BLOCK_SYMBOLs.

	* Merge with mainline; tag is carlton_dictionary-20030430-merge.
@
text
@d244 1
a244 1
create_new_frame (read_register (DEPRECATED_FP_REGNUM), read_pc ()));
d248 6
a253 7
Other than that, all the meaning imparted to @@code{DEPRECATED_FP_REGNUM}
is imparted by the machine-dependent code.  So,
@@code{DEPRECATED_FP_REGNUM} can have any value that is convenient for
the code that creates new frames.  (@@code{create_new_frame} calls
@@code{DEPRECATED_INIT_EXTRA_FRAME_INFO} if it is defined; that is where
you should use the @@code{DEPRECATED_FP_REGNUM} value, if your frames are
nonstandard.)
d3220 2
a3221 2
@@item DEPRECATED_FP_REGNUM
@@findex DEPRECATED_FP_REGNUM
d3225 2
a3226 2
This should only need to be defined if @@code{DEPRECATED_TARGET_READ_FP}
is not defined.
d3885 3
a3887 3
@@code{read_sp} and @@code{deprecated_read_fp}.  For most targets, these
may be left undefined.  @@value{GDBN} will call the read and write
register functions with the relevant @@code{_REGNUM} argument.
d3895 4
a3898 4
Returns a @@code{(register, offset)} pair representing the virtual frame
pointer in use at the code address @@var{pc}.  If virtual frame pointers
are not used, a default definition simply returns
@@code{DEPRECATED_FP_REGNUM}, with an offset of zero.
d3911 5
a3915 6
accessor function for the global pointer
@@code{deprecated_tm_print_insn}.  This usually points to a function in
the @@code{opcodes} library (@@pxref{Support Libraries, ,Opcodes}).
@@var{info} is a structure (of type @@code{disassemble_info}) defined in
@@file{include/dis-asm.h} used to pass information to the instruction
decoding routine.
@


1.102.2.9
log
@2003-05-23  David Carlton  <carlton@@bactrian.org>

	* Merge with mainline; tag is carlton_dictionary-20030523-merge.
@
text
@d291 1
a291 1
@@value{GDBN} need not do anything more than set the breakpoint and wait
d2604 29
d3088 2
a3089 2
@@item DEPRECATED_CALL_DUMMY_WORDS
@@findex DEPRECATED_CALL_DUMMY_WORDS
d3091 3
a3093 3
host-byte-ordered @@code{DEPRECATED_REGISTER_SIZE} sized values that
partially specify the sequence of instructions needed for an inferior
function call.
d3098 4
a3101 10
This method has been replaced by @@code{push_dummy_code}
(@@pxref{push_dummy_code}).

@@item DEPRECATED_SIZEOF_CALL_DUMMY_WORDS
@@findex DEPRECATED_SIZEOF_CALL_DUMMY_WORDS
The size of @@code{DEPRECATED_CALL_DUMMY_WORDS}.  This must return a
positive value.  See also @@code{DEPRECATED_CALL_DUMMY_LENGTH}.

This method has been replaced by @@code{push_dummy_code}
(@@pxref{push_dummy_code}).
d3105 1
a3105 5
A static initializer for @@code{DEPRECATED_CALL_DUMMY_WORDS}.
Deprecated.

This method has been replaced by @@code{push_dummy_code}
(@@pxref{push_dummy_code}).
a3110 3
This method has been replaced by @@code{push_dummy_code}
(@@pxref{push_dummy_code}).

a3709 22
@@item CORE_ADDR push_dummy_code (@@var{gdbarch}, @@var{sp}, @@var{funaddr}, @@var{using_gcc}, @@var{args}, @@var{nargs}, @@var{value_type}, @@var{real_pc}, @@var{bp_addr})
@@findex push_dummy_code
@@findex DEPRECATED_FIX_CALL_DUMMY
@@anchor{push_dummy_code} Given a stack based call dummy, push the
instruction sequence (including space for a breakpoint) to which the
called function should return.

Set @@var{bp_addr} to the address at which the breakpoint instruction
should be inserted, @@var{real_pc} to the resume address when starting
the call sequence, and return the updated inner-most stack address.

By default, the stack is grown sufficient to hold a frame-aligned
(@@pxref{frame_align}) breakpoint, @@var{bp_addr} is set to the address
reserved for that breakpoint, and @@var{real_pc} set to @@var{funaddr}.

This method replaces @@code{DEPRECATED_CALL_DUMMY_WORDS},
@@code{DEPRECATED_SIZEOF_CALL_DUMMY_WORDS}, @@code{CALL_DUMMY},
@@code{CALL_DUMMY_LOCATION}, @@code{DEPRECATED_REGISTER_SIZE},
@@code{GDB_TARGET_IS_HPPA},
@@code{DEPRECATED_CALL_DUMMY_BREAKPOINT_OFFSET}, and
@@code{DEPRECATED_FIX_CALL_DUMMY}.

d3714 4
a3717 7
@@item DEPRECATED_REGISTER_BYTES
@@findex DEPRECATED_REGISTER_BYTES
The total amount of space needed to store @@value{GDBN}'s copy of the
machine's register state.

This is no longer needed.  @@value{GDBN} instead computes the size of the
register buffer at run-time.
@


1.102.2.10
log
@2003-06-27  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton_dictionary-20030627-merge.
@
text
@d3015 10
a3024 11
@@item DEPRECATED_REMOTE_BREAKPOINT
@@itemx DEPRECATED_LITTLE_REMOTE_BREAKPOINT
@@itemx DEPRECATED_BIG_REMOTE_BREAKPOINT
@@findex DEPRECATED_BIG_REMOTE_BREAKPOINT
@@findex DEPRECATED_LITTLE_REMOTE_BREAKPOINT
@@findex DEPRECATED_REMOTE_BREAKPOINT
Specify the breakpoint instruction sequence for a remote target.
@@code{DEPRECATED_REMOTE_BREAKPOINT},
@@code{DEPRECATED_BIG_REMOTE_BREAKPOINT} and
@@code{DEPRECATED_LITTLE_REMOTE_BREAKPOINT} have been deprecated in
favor of @@code{BREAKPOINT_FROM_PC} (@@pxref{BREAKPOINT_FROM_PC}).
d3028 5
a3032 6
@@anchor{BREAKPOINT_FROM_PC} Use the program counter to determine the
contents and size of a breakpoint instruction.  It returns a pointer to
a string of bytes that encode a breakpoint instruction, stores the
length of the string to @@code{*@@var{lenptr}}, and adjusts the program
counter (if necessary) to point to the actual memory location where the
breakpoint should be inserted.
d3236 4
a3293 17
@@item CORE_ADDR unwind_sp (struct frame_info *@@var{this_frame})
@@findex unwind_sp
@@anchor{unwind_sp} Return the frame's inner most stack address.  This is
commonly refered to as the frame's @@dfn{stack pointer}.

The implementation, which must be frame agnostic (work with any frame),
is typically no more than:

@@smallexample
ULONGEST sp;
frame_unwind_unsigned_register (this_frame, D10V_SP_REGNUM, &sp);
return d10v_make_daddr (sp);
@@end smallexample

@@noindent
@@xref{TARGET_READ_SP}, which this method replaces.

d3681 1
a3681 1
@@item push_dummy_call (@@var{gdbarch}, @@var{func_addr}, @@var{regcache}, @@var{pc_addr}, @@var{nargs}, @@var{args}, @@var{sp}, @@var{struct_return}, @@var{struct_addr})
d3684 5
a3688 4
@@anchor{push_dummy_call} Define this to push the dummy frame's call to
the inferior function onto the stack.  In addition to pushing
@@var{nargs}, the code should push @@var{struct_addr} (when
@@var{struct_return}), and the return address (@@var{bp_addr}).
d3894 4
a3897 4
@@anchor{TARGET_READ_SP} These change the behavior of @@code{read_pc},
@@code{write_pc}, @@code{read_sp} and @@code{deprecated_read_fp}.  For most
targets, these may be left undefined.  @@value{GDBN} will call the read
and write register functions with the relevant @@code{_REGNUM} argument.
a3902 2
@@xref{unwind_sp}, which replaces @@code{TARGET_READ_SP}.

d4481 17
d5195 1
a5195 5
@@file{gdb_} (@@file{gdb_string.h}).  These headers should be relatively
independent: they should use only macros defined by @@file{configure},
the compiler, or the host; they should include only system headers; they
should refer only to system types.  They may be shared between multiple
programs, e.g.@@: @@value{GDBN} and @@sc{gdbserver}.
@


1.102.2.11
log
@2003-08-05  David Carlton  <carlton@@kealia.com>

	* configure.in (build_warnings): Delete -Wformat-nonliteral.
	* configure (build_warnings): Ditto.

	* Merge with mainline; tag is carlton_dictionary-20030805-merge.
@
text
@d19 6
a24 3
Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
Texts.  A copy of the license is included in the section entitled ``GNU
Free Documentation License''.
d59 6
a64 3
Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
Texts.  A copy of the license is included in the section entitled ``GNU
Free Documentation License''.
d1508 1
a1508 1
@@value{GDBN} can better handle the problem of some commands blocking
a5011 1
@@itemx -Wformat-nonliteral
d5013 1
a5013 1
@@code{printf} like functions these check not just @@code{printf} calls
@


1.102.2.12
log
@2003-09-17  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton_dictionary-20030917-merge.
@
text
@d3221 1
a3221 1
stack alignment requirements (@@pxref{DEPRECATED_STACK_ALIGN}).
d3227 2
a3228 2
Unlike @@code{DEPRECATED_STACK_ALIGN}, this function always adjusts the
address in the direction of stack growth.
a3231 18
@@item int frame_red_zone_size

The number of bytes, beyond the innermost-stack-address, reserved by the
@@sc{abi}.  A function is permitted to use this scratch area (instead of
allocating extra stack space).

When performing an inferior function call, to ensure that it does not
modify this area, @@value{GDBN} adjusts the innermost-stack-address by
@@var{frame_red_zone_size} bytes before pushing parameters onto the
stack.

By default, zero bytes are allocated.  The value must be aligned
(@@pxref{frame_align}).

The @@sc{amd64} (nee x86-64) @@sc{abi} documentation refers to the
@@emph{red zone} when describing this scratch area.
@@cindex red zone

d3745 2
a3746 2
@@item DEPRECATED_REG_STRUCT_HAS_ADDR (@@var{gcc_p}, @@var{type})
@@findex DEPRECATED_REG_STRUCT_HAS_ADDR
d3797 3
a3799 3
@@item DEPRECATED_STACK_ALIGN (@@var{addr})
@@anchor{DEPRECATED_STACK_ALIGN}
@@findex DEPRECATED_STACK_ALIGN
@


1.102.2.13
log
@2003-11-11  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton-dictionary-20031111-merge.
@
text
@d2508 1
a2508 1
For example, the Renesas D10V is a 16-bit VLIW processor whose
d2769 1
a2769 1
@@deftypefn {Target Macro} int DEPRECATED_REGISTER_RAW_SIZE (int @@var{reg})
d2775 1
a2775 1
@@deftypefn {Target Macro} int DEPRECATED_REGISTER_VIRTUAL_SIZE (int @@var{reg})
d2781 1
a2781 1
@@deftypefn {Target Macro} struct type *DEPRECATED_REGISTER_VIRTUAL_TYPE (int @@var{reg})
d2790 1
a2790 1
should always be @@code{DEPRECATED_REGISTER_VIRTUAL_TYPE (@@var{reg})}.  The buffer
d2805 1
a2805 1
should always be @@code{DEPRECATED_REGISTER_VIRTUAL_TYPE (@@var{reg})}.  The buffer
a3054 33
@@item ADJUST_BREAKPOINT_ADDRESS (@@var{address})
@@findex ADJUST_BREAKPOINT_ADDRESS
@@cindex breakpoint address adjusted
Given an address at which a breakpoint is desired, return a breakpoint
address adjusted to account for architectural constraints on
breakpoint placement.  This method is not needed by most targets.

The FR-V target (see @@file{frv-tdep.c}) requires this method.
The FR-V is a VLIW architecture in which a number of RISC-like
instructions are grouped (packed) together into an aggregate
instruction or instruction bundle.  When the processor executes
one of these bundles, the component instructions are executed
in parallel.

In the course of optimization, the compiler may group instructions
from distinct source statements into the same bundle.  The line number
information associated with one of the latter statements will likely
refer to some instruction other than the first one in the bundle.  So,
if the user attempts to place a breakpoint on one of these latter
statements, @@value{GDBN} must be careful to @@emph{not} place the break
instruction on any instruction other than the first one in the bundle.
(Remember though that the instructions within a bundle execute
in parallel, so the @@emph{first} instruction is the instruction
at the lowest address and has nothing to do with execution order.)

The FR-V's @@code{ADJUST_BREAKPOINT_ADDRESS} method will adjust a
breakpoint's address by scanning backwards for the beginning of
the bundle, returning the address of the bundle.

Since the adjustment of a breakpoint may significantly alter a user's
expectation, @@value{GDBN} prints a warning when an adjusted breakpoint
is initially set and each time that that breakpoint is hit.

a3188 3
This method has been deprecated in favour of @@code{gdbarch_return_value}
(@@pxref{gdbarch_return_value}).

a3190 1
@@anchor{EXTRACT_STRUCT_VALUE_ADDRESS}
d3195 1
a3195 1
@@xref{gdbarch_return_value}.
d3385 3
a3387 3
@@item DEPRECATED_IBM6000_TARGET
@@findex DEPRECATED_IBM6000_TARGET
Shows that we are configured for an IBM RS/6000 system.  This
d3486 5
d3513 2
a3514 2
@@item DEPRECATED_REGISTER_RAW_SIZE (@@var{reg})
@@findex DEPRECATED_REGISTER_RAW_SIZE
d3541 2
a3542 2
@@item DEPRECATED_REGISTER_VIRTUAL_SIZE (@@var{reg})
@@findex DEPRECATED_REGISTER_VIRTUAL_SIZE
d3548 1
a3548 1
@@item DEPRECATED_REGISTER_VIRTUAL_TYPE (@@var{reg})
d3556 1
a3556 1
superseeds @@code{DEPRECATED_REGISTER_VIRTUAL_TYPE}.  @@xref{Target Architecture
a3570 6
@@item const struct regset *regset_from_core_section (struct gdbarch * @@var{gdbarch}, const char * @@var{sect_name}, size_t @@var{sect_size})
@@findex regset_from_core_section
Return the appropriate register set for a core file section with name
@@var{sect_name} and size @@var{sect_size}.


d3680 2
a3681 2
@@item DEPRECATED_NPC_REGNUM
@@findex DEPRECATED_NPC_REGNUM
a3683 3
@@code{DEPRECATED_NPC_REGNUM} has been replaced by @@code{TARGET_WRITE_PC}
(@@pxref{TARGET_WRITE_PC}).

a3688 10
@@item stabs_argument_has_addr (@@var{gdbarch}, @@var{type})
@@findex stabs_argument_has_addr
@@findex DEPRECATED_REG_STRUCT_HAS_ADDR
@@anchor{stabs_argument_has_addr} Define this to return nonzero if a
function argument of type @@var{type} is passed by reference instead of
value.

This method replaces @@code{DEPRECATED_REG_STRUCT_HAS_ADDR}
(@@pxref{DEPRECATED_REG_STRUCT_HAS_ADDR}).

d3759 4
d3765 2
a3766 5
@@anchor{DEPRECATED_REG_STRUCT_HAS_ADDR}Define this to return 1 if the
given type will be passed by pointer rather than directly.

This method has been replaced by @@code{stabs_argument_has_addr}
(@@pxref{stabs_argument_has_addr}).
a3780 42
@@item enum return_value_convention gdbarch_return_value (struct gdbarch *@@var{gdbarch}, struct type *@@var{valtype}, struct regcache *@@var{regcache}, void *@@var{readbuf}, const void *@@var{writebuf})
@@findex gdbarch_return_value
@@anchor{gdbarch_return_value} Given a function with a return-value of
type @@var{rettype}, return which return-value convention that function
would use.

@@value{GDBN} currently recognizes two function return-value conventions:
@@code{RETURN_VALUE_REGISTER_CONVENTION} where the return value is found
in registers; and @@code{RETURN_VALUE_STRUCT_CONVENTION} where the return
value is found in memory and the address of that memory location is
passed in as the function's first parameter.

If the register convention is being used, and @@var{writebuf} is
non-@@code{NULL}, also copy the return-value in @@var{writebuf} into
@@var{regcache}.

If the register convention is being used, and @@var{readbuf} is
non-@@code{NULL}, also copy the return value from @@var{regcache} into
@@var{readbuf} (@@var{regcache} contains a copy of the registers from the
just returned function).

@@xref{EXTRACT_STRUCT_VALUE_ADDRESS}, for a description of how
return-values that use the struct convention are handled.

@@emph{Maintainer note: This method replaces separate predicate, extract,
store methods.  By having only one method, the logic needed to determine
the return-value convention need only be implemented in one place.  If
@@value{GDBN} were written in an @@sc{oo} language, this method would
instead return an object that knew how to perform the register
return-value extract and store.}

@@emph{Maintainer note: This method does not take a @@var{gcc_p}
parameter, and such a parameter should not be added.  If an architecture
that requires per-compiler or per-function information be identified,
then the replacement of @@var{rettype} with @@code{struct value}
@@var{function} should be persued.}

@@emph{Maintainer note: The @@var{regcache} parameter limits this methods
to the inner most frame.  While replacing @@var{regcache} with a
@@code{struct frame_info} @@var{frame} parameter would remove that
limitation there has yet to be a demonstrated need for such a change.}

a3838 3
This method has been deprecated in favour of @@code{gdbarch_return_value}
(@@pxref{gdbarch_return_value}).

a3911 1
@@anchor{TARGET_WRITE_PC}
a3972 3
This method has been deprecated in favour of @@code{gdbarch_return_value}
(@@pxref{gdbarch_return_value}).

d6384 1
a6384 1
@@file{gdb.cp} and @@file{gdb.java}.
@


1.102.2.14
log
@2004-01-26  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton_dictionary-20040126-merge.
@
text
@d11 1
a11 1
Copyright 1990,1991,1992,1993,1994,1996,1998,1999,2000,2001,2002,2003,2004
d51 1
a51 1
   2002, 2003, 2004  Free Software Foundation, Inc.
d483 7
d2248 6
d2267 31
d3164 4
d3718 7
a5134 17

@@item -Wunused-label
This warning has the additional benefit of detecting the absence of the
@@code{case} reserved word in a switch statement:
@@smallexample
enum @@{ FD_SCHEDULED, NOTHING_SCHEDULED @@} sched;
@@dots{}
switch (sched)
  @@{
  case FD_SCHEDULED:
    @@dots{};
    break;
  NOTHING_SCHEDULED:
    @@dots{};
    break;
  @@}
@@end smallexample
@


1.101
log
@        * gdbint.texinfo (Target Conditionals): Document the new
        NAME_OF_MALLOC macro.
@
text
@d3178 17
d3710 1
d3712 7
a3718 2
Define this to adjust the address to the alignment required for the
processor's stack.
@


1.100
log
@Index: ChangeLog
===================================================================
RCS file: /cvs/src/src/gdb/ChangeLog,v
retrieving revision 1.3144
diff -u -r1.3144 ChangeLog
--- ChangeLog	23 Aug 2002 23:05:38 -0000	1.3144
+++ ChangeLog	23 Aug 2002 23:14:45 -0000
@@@@ -1,3 +1,53 @@@@
2002-08-23  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (STORE_RETURN_VALUE): Add regcache parameter.
	(DEPRECATED_STORE_RETURN_VALUE): New method.
	(EXTRACT_RETURN_VALUE): Make buffer parameter a void pointer.
	* gdbarch.h, gdbarch.c: Re-generate.

	* values.c (set_return_value): Pass current_regcache to
	STORE_RETURN_VALUE.
	* arch-utils.h (legacy_store_return_value): Declare.
	* arch-utils.c (legacy_store_return_value): New function.
	(legacy_extract_return_value): Update parameters.

	* config/pa/tm-hppa.h (DEPRECATED_STORE_RETURN_VALUE): Rename
	STORE_RETURN_VALUE.
	* config/pa/tm-hppa64.h (DEPRECATED_STORE_RETURN_VALUE): Ditto.
	* config/sparc/tm-sparc.h (DEPRECATED_STORE_RETURN_VALUE): Ditto.
	* config/z8k/tm-z8k.h (DEPRECATED_STORE_RETURN_VALUE): Ditto.
	* config/sparc/tm-sparclet.h (DEPRECATED_STORE_RETURN_VALUE): Ditto.
	* config/mn10200/tm-mn10200.h (DEPRECATED_STORE_RETURN_VALUE): Ditto.
	* config/m68k/tm-linux.h (DEPRECATED_STORE_RETURN_VALUE): Ditto.
	* config/m68k/tm-delta68.h (DEPRECATED_STORE_RETURN_VALUE): Ditto.
	* config/m32r/tm-m32r.h (DEPRECATED_STORE_RETURN_VALUE): Ditto.
	* config/h8500/tm-h8500.h (DEPRECATED_STORE_RETURN_VALUE): Ditto.
	* config/h8300/tm-h8300.h (DEPRECATED_STORE_RETURN_VALUE): Ditto.

	* m68hc11-tdep.c (m68hc11_gdbarch_init): Update.
	* i386-tdep.c (i386_extract_return_value): Update.
	* arch-utils.c (legacy_extract_return_value): Update.
	* frv-tdep.c (frv_gdbarch_init): Update.
	* cris-tdep.c (cris_gdbarch_init): Update.
	* d10v-tdep.c (d10v_gdbarch_init): Update.
	* rs6000-tdep.c (rs6000_gdbarch_init): Update.
	* m68k-tdep.c (m68k_gdbarch_init): Update.
	* mcore-tdep.c (mcore_gdbarch_init): Update.
	* mn10300-tdep.c (mn10300_gdbarch_init): Update.
	* s390-tdep.c (s390_gdbarch_init): Update.
	* sparc-tdep.c (sparc_gdbarch_init): Update.
	* sh-tdep.c (sh_gdbarch_init): Update.
	* x86-64-tdep.c (x86_64_gdbarch_init): Update.
	* v850-tdep.c (v850_gdbarch_init): Update.
	* avr-tdep.c (avr_gdbarch_init): Update.
	* ia64-tdep.c (ia64_gdbarch_init): Update.
	* ns32k-tdep.c (ns32k_gdbarch_init): Update.
	* vax-tdep.c (vax_gdbarch_init): Update.
	* alpha-tdep.c (alpha_gdbarch_init): Update.
	* arm-tdep.c (arm_gdbarch_init): Update.
	* mips-tdep.c (mips_gdbarch_init): Update.
	* i386-tdep.c (i386_gdbarch_init): Update.

Index: doc/ChangeLog
2002-08-21  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Update
	STORE_RETURN_VALUE, mention regcache.
@
text
@d3865 6
@


1.99
log
@2002-08-21  Andrew Cagney  <ac131313@@redhat.com>
* infcmd.c (default_print_registers_info): Replace
do_registers_info.
(registers_info): Use gdbarch_print_registers_info instead of
DO_REGISTERS_INFO.
* inferior.h (default_print_registers_info): Replace
do_registers_info.
* gdbarch.sh (PRINT_REGISTERS_INFO): New method.
(DO_REGISTERS_INFO): Change to a predicate function.
* gdbarch.h, gdbarch.c: Regenerate.

2002-08-21  Andrew Cagney  <ac131313@@redhat.com>
* gdbint.texinfo (Target Architecture Definition): Document
print_registers_info.  Note that DO_REGISTERS_INFO is deprecated.
@
text
@d3704 1
a3704 1
@@item STORE_RETURN_VALUE (@@var{type}, @@var{valbuf})
d3706 3
a3708 2
A C expression that stores a function return value of type @@var{type},
where @@var{valbuf} is the address of the value to be stored.
@


1.98
log
@2002-08-15  Andrew Cagney  <ac131313@@redhat.com>

* infcmd.c (vector_info): New function.
(_initialize_infcmd): Add command "info vector".
(print_vector_info): New function.

* gdbarch.sh (PRINT_VECTOR_INFO): New method
* gdbarch.h, gdbarch.c: Regenerate.

Index: doc/ChangeLog
2002-08-15  Andrew Cagney  <ac131313@@redhat.com>

* gdbint.texinfo (Target Architecture Definition): Document
PRINT_VECTOR_INFO.
* gdb.texinfo (Vector Unit): Document "info vectors" command.
@
text
@d3097 2
d3100 1
a3100 1
#findex PRINT_FLOAT_INFO
d3103 10
@


1.97
log
@2002-08-01  Andrew Cagney  <cagney@@redhat.com>

* NEWS: Menion that CHILL has been made obsolete.

* gdbtypes.c (chill_varying_type): Make chill references obsolete.
* gdbserver/Makefile.in: Ditto.
* stabsread.c (read_range_type): Ditto.
* gdbtypes.h: Ditto.
* language.c (binop_type_check): Ditto.
(binop_result_type): Ditto.
(integral_type): Ditto.
(character_type): Ditto.
(string_type): Ditto.
(boolean_type): Ditto.
(structured_type): Ditto.
(lang_bool_type): Ditto.
(binop_type_check): Ditto.
* language.h (_LANG_chill): Ditto.
* dwarfread.c (set_cu_language): Ditto.
* dwarfread.c (CHILL_PRODUCER): Ditto.
* dwarfread.c (handle_producer): Ditto.
* expression.h (enum exp_opcode): Ditto.
* eval.c: Ditto for comments.
* typeprint.c (typedef_print) [_LANG_chill]: Ditto.
* expprint.c (print_subexp): Ditto.
(print_subexp): Ditto.
* valops.c (value_cast): Ditto.
(search_struct_field): Ditto.
* value.h (COERCE_VARYING_ARRAY): Ditto.
* symfile.c (init_filename_language_table): Ditto.
(add_psymbol_with_dem_name_to_list): Ditto.
* valarith.c (value_binop): Ditto.
(value_neg): Ditto.
* valops.c (value_slice): Ditto.
* symtab.h (union language_specific): Ditto.
(SYMBOL_INIT_LANGUAGE_SPECIFIC): Ditto.
(SYMBOL_DEMANGLED_NAME): Ditto.
(SYMBOL_CHILL_DEMANGLED_NAME): Ditto.
* defs.h (enum language): Ditto.
* symtab.c (got_symtab): Ditto.
* utils.c (fprintf_symbol_filtered): Ditto.

* ch-typeprint.c: Make file obsolete.
* ch-valprint.c: Make file obsolete.
* ch-lang.h: Make file obsolete.
* ch-exp.c: Make file obsolete.
* ch-lang.c: Make file obsolete.

* Makefile.in (FLAGS_TO_PASS): Do not pass CHILL or CHILLFLAGS or
CHILL_LIB.
(TARGET_FLAGS_TO_PASS): Ditto.
(CHILLFLAGS): Obsolete.
(CHILL): Obsolete.
(CHILL_FOR_TARGET): Obsolete.
(CHILL_LIB): Obsolete.
(SFILES): Remove ch-exp.c, ch-lang.c, ch-typeprint.c and
ch-valprint.c.
(HFILES_NO_SRCDIR): Remove ch-lang.h.
(COMMON_OBS): Remove ch-valprint.o, ch-typeprint.o, ch-exp.o and
ch-lang.o.
(ch-exp.o, ch-lang.o, ch-typeprint.o, ch-valprint.o): Delete
targets.

2002-08-01  Andrew Cagney  <cagney@@redhat.com>

* stabs.texinfo, gdb.texinfo, gdbint.texinfo: Obsolete references
to CHILL.

2002-08-01  Andrew Cagney  <cagney@@redhat.com>

* Makefile.in (TARGET_FLAGS_TO_PASS): Remove CHILLFLAGS, CHILL,
CHILL_FOR_TARGET and CHILL_LIB.
* configure.in (configdirs): Remove gdb.chill.
* configure: Regenerate.
* lib/gdb.exp: Obsolete references to chill.
* gdb.fortran/types.exp: Ditto.
* gdb.fortran/exprs.exp: Ditto.
@
text
@d3102 8
@


1.96
log
@2002-08-01  Andrew Cagney  <ac131313@@redhat.com>
* gdbint.texinfo (Coding): Revise section "Include Files".
@
text
@d1837 1
a1837 1
@@c CHILL_PRODUCER
@


1.95
log
@Obsolete m88k.
@
text
@d5068 1
a5068 1
All @@file{.c} files should include @@file{defs.h} first.
d5070 3
a5072 3
All @@file{.c} files should explicitly include the headers for any
declarations they refer to.  They should not rely on files being
included indirectly.
d5074 4
a5077 3
With the exception of the global definitions supplied by @@file{defs.h},
a header file should explicitly include the header declaring any
@@code{typedefs} et.al.@@: it refers to.
d5079 1
a5079 1
@@code{extern} declarations should never appear in @@code{.c} files.
d5081 11
a5091 1
All include files should be wrapped in:
@


1.94
log
@        * gdb.texinfo (Create a release candiate): Add the location
        where the proper version of autoconf can be retrieved.
@
text
@d3632 3
a3634 3
@@item SHIFT_INST_REGS
@@findex SHIFT_INST_REGS
(Only used for m88k targets.)
@


1.93
log
@* gdbint.texinfo (User Interface): ISO C rather than ISO-C.
(Coding): Clarify ISO C version that GDB assumes.
@
text
@d5757 2
a5758 1
version taken from the @@file{binutils} snapshot directory.  It is very
@


1.92
log
@	* gdbint.texinfo (User Interface): Mention add_setshow_cmd and
@
text
@d957 1
a957 1
cast is not portable ISO-C.} code sequence:
d4804 1
a4804 1
@@subsection ISO-C
d4806 2
a4807 1
@@value{GDBN} assumes an ISO-C compliant compiler.
d4809 1
a4809 1
@@value{GDBN} does not assume an ISO-C or POSIX compliant C library.
@


1.91
log
@* gdbint.texinfo (Coding): Add section ``Per-architecture module
data''.
@
text
@d53 1
a53 1
Copyright @@copyright{} 1990,1991,1992,1993,1994,1996,1998,1999,2000,2001
d724 8
@


1.90
log
@* osabi.h (gdb_osabi): Add GDB_OSABI_GO32 and GDB_OSABI_NETWARE.
* osabi.c (gdb_osabi_names): Add "DJGPP" and "NetWare".
@
text
@d4619 137
@


1.89
log
@* gdbint.texinfo (Releasing GDB): Fix typos in @@itemize @@bullet
lists.
@
text
@d2389 8
@


1.88
log
@* gdbint.texinfo (Releasing GDB): Revise the section ``Cut the
Branch''.
@
text
@d5536 1
a5536 1
@@endi itemize
d5554 1
@


1.87
log
@* gdbint.texinfo (Target Architecture Definition): Add section
``Converting an existing Target Architecture to Multi-arch''.
@
text
@d5420 1
a5420 1
@@section Cut the branch
d5422 1
a5422 3
@@subheading The dirty work

I think something like the below was used:
d5425 18
a5442 7
$  d=`date -u +%Y-%m-%d`
$  echo $d
2002-01-24
$  cvs -f -d /cvs/src rtag -D $d-gmt \
gdb_5_1-$d-branchpoint insight+dejagnu
$  cvs -f -d /cvs/src rtag -b -r gdb_V_V-$d-branchpoint \
gdb_5_1-$d-branch insight+dejagnu
d5448 35
a5482 1
the @@kbd{-D YYYY-MM-DD-gmt} forces the branch to an exact date/time.
d5484 2
a5485 1
the trunk is first tagged so that the branch point can easily be found
d5487 2
a5488 1
Insight (which includes GDB) and dejagnu are tagged at the same time
a5490 1
@@subheading Post the branch info
d5494 2
d5497 57
@


1.86
log
@* gdbint.texinfo (Releasing GDB): Rename ``Obsoleting any code''
to ``Obsoleting code''.  Revise.
@
text
@d3888 162
@


1.85
log
@* Makefile.in (SFILES): Add osabi.c.
(COMMON_OBS): Add osabi.o.
(osabi.o): New dependency list.
* osabi.c: New file.
* osabi.h: New file.
* doc/gdbint.texinfo: Document new generic OS ABI framework.

* Makefile.in (alpha_tdep_h): Define and use instead of
alpha-tdep.h.
* alpha-tdep.c (alpha_abi_names, process_note_abi_tag_sections,
get_elfosabi, alpha_abi_handler_list, alpha_gdbarch_register_os_abi):
Remove.
(alpha_gdbarch_init, alpha_dump_tdep): Use generic OS ABI framework.
* alpha-tdep.h: Include osabi.h.
(alpha_abi): Remove.
(gdbarch_tdep): Use generic OS ABI framework.
* alpha-linux-tdep.c (_initialize_alpha_linux_tdep): Use
gdbarch_register_osabi.
* alpha-osf1-tdep.c (_initialize_alpha_osf1_tdep): Likewise.
* alphafbsd-tdep.c (_initialize_alphafbsd_tdep): Likewise.
* alphanbsd-tdep.c (_initialize_alphanbsd_tdep): Likewise.

* Makefile.in (sh_tdep_h): Add osabi.h.
* sh-tdep.h (sh_osabi): Remove.
(gdbarch_tdep): Use generic OS ABI framework.
* sh-tdep.c (sh_osabi_names, process_note_abi_tag_sections,
sh_osabi_handler_list, sh_gdbarch_register_os_abi): Remove.
(sh_gdbarch_init, sh_dump_tdep): Use generic OS ABI framework.
* shnbsd-tdep.c (_initialize_shnbsd_tdep): Use gdbarch_register_osabi.

* Makefile.in (arm_tdep_h): Define and use instead of arm-tdep.h.
* arm-linux-tdep.c (_initialize_arm_linux_tdep): Use
gdbarch_register_osabi.
* arm-tdep.c (arm_abi_names, process_note_abi_tag_sections,
arm_abi_handler_list, arm_gdbarch_register_os_abi): Remove.
(get_elfosabi): Rename to...
(arm_elf_osabi_sniffer): ...this.  Adjust to use generic OS
ABI framework support routines.
(arm_gdbarch_init): Use generic OS ABI framework.
(arm_dump_tdep): Likewise.
(_initialize_arm_tdep): Likewise.
* arm-tdep.h: Include osabi.h.
(arm_abi): Remove.
(gdbarch_tdep): Remove arm_abi and abi_name members.  Add
osabi member.
(arm_gdbarch_register_os_abi): Remove prototype.
* armnbsd-tdep.c (arm_netbsd_aout_osabi_sniffer): New function.
(_initialize_arm_netbsd_tdep): Use gdbarch_register_osabi.

* Makefile.in (mips-tdep.o): Add osabi.h to dependency list.
* mips-tdep.c: Include osabi.h.
(gdbarch_tdep, mips_gdbarch_init, mips_dump_tdep): Use generic
OS ABI framework.
@
text
@d5161 1
a5161 1
@@section Obsolete any code
d5168 2
a5169 2
line.  Doing this means that it is easy to identify obsolete code when
grepping through the sources.
d5171 3
a5173 3
The process has a number of steps and is intentionally slow --- this is
to mainly ensure that people have had a reasonable chance to respond.
Remember, everything on the internet takes a week.
d5175 1
a5175 1
@@itemize @@bullet
d5177 3
a5179 1
announce the change on @@email{gdb@@@@sources.redhat.com, GDB mailing list}
d5181 1
a5181 1
wait a week or so
d5183 2
a5184 2
announce the change on @@email{gdb-announce@@@@sources.redhat.com, GDB
Announcement mailing list}
d5186 1
a5186 1
wait a week or so
d5188 16
a5203 4
go through and edit all relevant files and lines (e.g., in
@@file{configure.tgt}) so that they are prefixed with the word
@@code{OBSOLETE}.
@@end itemize
a5204 5
@@emph{Maintainer note: Removing old code, while regrettable, is a good
thing.  Firstly it helps the developers by removing code that is either
no longer relevant or simply wrong.  Secondly since it removes any
history associated with the file (effectively clearing the slate) the
developer has a much freer hand when it comes to fixing broken files.}
@


1.85.2.1
log
@Merge with mainline, kseitz_interps-20020619-merge.
@
text
@a2388 8
@@findex GDB_OSABI_GO32
@@item GDB_OSABI_GO32
DJGPP

@@findex GDB_OSABI_NETWARE
@@item GDB_OSABI_NETWARE
Novell NetWare

a3887 162
@@section Converting an existing Target Architecture to Multi-arch
@@cindex converting targets to multi-arch

This section describes the current accepted best practice for converting
an existing target architecture to the multi-arch framework.

The process consists of generating, testing, posting and committing a
sequence of patches.  Each patch must contain a single change, for
instance:

@@itemize @@bullet

@@item
Directly convert a group of functions into macros (the conversion does
not change the behavior of any of the functions).

@@item
Replace a non-multi-arch with a multi-arch mechanism (e.g.,
@@code{FRAME_INFO}).

@@item
Enable multi-arch level one.

@@item
Delete one or more files.

@@end itemize

@@noindent
There isn't a size limit on a patch, however, a developer is strongly
encouraged to keep the patch size down.

Since each patch is well defined, and since each change has been tested
and shows no regressions, the patches are considered @@emph{fairly}
obvious.  Such patches, when submitted by developers listed in the
@@file{MAINTAINERS} file, do not need approval.  Occasional steps in the
process may be more complicated and less clear.  The developer is
expected to use their judgment and is encouraged to seek advice as
needed.

@@subsection Preparation

The first step is to establish control.  Build (with @@option{-Werror}
enabled) and test the target so that there is a baseline against which
the debugger can be compared.

At no stage can the test results regress or @@value{GDBN} stop compiling
with @@option{-Werror}.

@@subsection Add the multi-arch initialization code

The objective of this step is to establish the basic multi-arch
framework.  It involves

@@itemize @@bullet

@@item
The addition of a @@code{@@var{arch}_gdbarch_init} function@@footnote{The
above is from the original example and uses K&R C.  @@value{GDBN}
has since converted to ISO C but lets ignore that.} that creates
the architecture:
@@smallexample
static struct gdbarch *
d10v_gdbarch_init (info, arches)
     struct gdbarch_info info;
     struct gdbarch_list *arches;
@@{
  struct gdbarch *gdbarch;
  /* there is only one d10v architecture */
  if (arches != NULL)
    return arches->gdbarch;
  gdbarch = gdbarch_alloc (&info, NULL);
  return gdbarch;
@@}
@@end smallexample
@@noindent
@@emph{}

@@item
A per-architecture dump function to print any architecture specific
information:
@@smallexample
static void
mips_dump_tdep (struct gdbarch *current_gdbarch,
                struct ui_file *file)
@@{
   @@dots{} code to print architecture specific info @@dots{}
@@}
@@end smallexample

@@item
A change to @@code{_initialize_@@var{arch}_tdep} to register this new
architecture:
@@smallexample
void
_initialize_mips_tdep (void)
@@{
  gdbarch_register (bfd_arch_mips, mips_gdbarch_init,
                    mips_dump_tdep);
@@end smallexample

@@item
Add the macro @@code{GDB_MULTI_ARCH}, defined as 0 (zero), to the file@@*
@@file{config/@@var{arch}/tm-@@var{arch}.h}.

@@end itemize

@@subsection Update multi-arch incompatible mechanisms

Some mechanisms do not work with multi-arch.  They include:

@@table @@code
@@item EXTRA_FRAME_INFO
Delete.
@@item FRAME_FIND_SAVED_REGS
Replaced with @@code{FRAME_INIT_SAVED_REGS}
@@end table

@@noindent
At this stage you could also consider converting the macros into
functions.

@@subsection Prepare for multi-arch level to one

Temporally set @@code{GDB_MULTI_ARCH} to @@code{GDB_MULTI_ARCH_PARTIAL}
and then build and start @@value{GDBN} (the change should not be
committed).  @@value{GDBN} may not build, and once built, it may die with
an internal error listing the architecture methods that must be
provided.

Fix any build problems (patch(es)).

Convert all the architecture methods listed, which are only macros, into
functions (patch(es)).

Update @@code{@@var{arch}_gdbarch_init} to set all the missing
architecture methods and wrap the corresponding macros in @@code{#if
!GDB_MULTI_ARCH} (patch(es)).

@@subsection Set multi-arch level one

Change the value of @@code{GDB_MULTI_ARCH} to GDB_MULTI_ARCH_PARTIAL (a
single patch).

Any problems with throwing ``the switch'' should have been fixed
already.

@@subsection Convert remaining macros

Suggest converting macros into functions (and setting the corresponding
architecture method) in small batches.

@@subsection Set multi-arch level to two

This should go smoothly.

@@subsection Delete the TM file

The @@file{tm-@@var{arch}.h} can be deleted.  @@file{@@var{arch}.mt} and
@@file{configure.in} updated.


a4448 137
@@section Per-architecture module data
@@cindex per-architecture module data
@@cindex multi-arch data
@@cindex data-pointer, per-architecture/per-module

The multi-arch framework includes a mechanism for adding module specific
per-architecture data-pointers to the @@code{struct gdbarch} architecture
object.

A module registers one or more per-architecture data-pointers using the
function @@code{register_gdbarch_data}:

@@deftypefun struct gdbarch_data *register_gdbarch_data (gdbarch_data_init_ftype *@@var{init}, gdbarch_data_free_ftype *@@var{free})

The @@var{init} function is used to obtain an initial value for a
per-architecture data-pointer.  The function is called, after the
architecture has been created, when the data-pointer is still
uninitialized (@@code{NULL}) and its value has been requested via a call
to @@code{gdbarch_data}.  A data-pointer can also be initialize
explicitly using @@code{set_gdbarch_data}.

The @@var{free} function is called when a data-pointer needs to be
destroyed.  This occurs when either the corresponding @@code{struct
gdbarch} object is being destroyed or when @@code{set_gdbarch_data} is
overriding a non-@@code{NULL} data-pointer value.

The function @@code{register_gdbarch_data} returns a @@code{struct
gdbarch_data} that is used to identify the data-pointer that was added
to the module.

@@end deftypefun

A typical module has @@code{init} and @@code{free} functions of the form:

@@smallexample
static struct gdbarch_data *nozel_handle;
static void *
nozel_init (struct gdbarch *gdbarch)
@@{
  struct nozel *data = XMALLOC (struct nozel);
  @@dots{}
  return data;
@@}
@@dots{}
static void
nozel_free (struct gdbarch *gdbarch, void *data)
@@{
  xfree (data);
@@}
@@end smallexample

Since uninitialized (@@code{NULL}) data-pointers are initialized
on-demand, an @@code{init} function is free to call other modules that
use data-pointers.  Those modules data-pointers will be initialized as
needed.  Care should be taken to ensure that the @@code{init} call graph
does not contain cycles.

The data-pointer is registered with the call:

@@smallexample
void
_initialize_nozel (void)
@@{
  nozel_handle = register_gdbarch_data (nozel_init, nozel_free);
@@dots{}
@@end smallexample

The per-architecture data-pointer is accessed using the function:

@@deftypefun void *gdbarch_data (struct gdbarch *@@var{gdbarch}, struct gdbarch_data *@@var{data_handle})
Given the architecture @@var{arch} and module data handle
@@var{data_handle} (returned by @@code{register_gdbarch_data}, this
function returns the current value of the per-architecture data-pointer.
@@end deftypefun

The non-@@code{NULL} data-pointer returned by @@code{gdbarch_data} should
be saved in a local variable and then used directly:

@@smallexample
int
nozel_total (struct gdbarch *gdbarch)
@@{
  int total;
  struct nozel *data = gdbarch_data (gdbarch, nozel_handle);
  @@dots{}
  return total;
@@}
@@end smallexample

It is also possible to directly initialize the data-pointer using:

@@deftypefun void set_gdbarch_data (struct gdbarch *@@var{gdbarch}, struct gdbarch_data *handle, void *@@var{pointer})
Update the data-pointer corresponding to @@var{handle} with the value of
@@var{pointer}.  If the previous data-pointer value is non-NULL, then it
is freed using data-pointers @@var{free} function.
@@end deftypefun

This function is used by modules that require a mechanism for explicitly
setting the per-architecture data-pointer during architecture creation:

@@smallexample
/* Called during architecture creation.  */
extern void
set_gdbarch_nozel (struct gdbarch *gdbarch,
                   int total)
@@{
  struct nozel *data = XMALLOC (struct nozel);
  @@dots{}
  set_gdbarch_data (gdbarch, nozel_handle, nozel);
@@}
@@end smallexample

@@smallexample
/* Default, called when nozel not set by set_gdbarch_nozel().  */
static void *
nozel_init (struct gdbarch *gdbarch)
@@{
  struct nozel *default_nozel = XMALLOC (struc nozel);
  @@dots{}
  return default_nozel;
@@}
@@end smallexample

@@smallexample
void
_initialize_nozel (void)
@@{
  nozel_handle = register_gdbarch_data (nozel_init, NULL);
  @@dots{}
@@end smallexample

@@noindent
Note that an @@code{init} function still needs to be registered.  It is
used to initialize the data-pointer when the architecture creation phase
fail to set an initial value.


d5161 1
a5161 1
@@section Obsoleting code
d5168 2
a5169 2
line.  Doing this means that it is easy to identify something that has
been obsoleted when greping through the sources.
d5171 3
a5173 3
The process is done in stages --- this is mainly to ensure that the
wider @@value{GDBN} community has a reasonable opportunity to respond.
Remember, everything on the Internet takes a week.
d5175 1
a5175 1
@@enumerate
d5177 1
a5177 3
Post the proposal on @@email{gdb@@@@sources.redhat.com, the GDB mailing
list} Creating a bug report to track the task's state, is also highly
recommended.
d5179 1
a5179 1
Wait a week or so.
d5181 2
a5182 2
Post the proposal on @@email{gdb-announce@@@@sources.redhat.com, the GDB
Announcement mailing list}.
d5184 1
a5184 1
Wait a week or so.
d5186 4
a5189 16
Go through and edit all relevant files and lines so that they are
prefixed with the word @@code{OBSOLETE}.
@@item
Wait until the next GDB version, containing this obsolete code, has been
released.
@@item
Remove the obsolete code.
@@end enumerate

@@noindent
@@emph{Maintainer note: While removing old code is regrettable it is
hopefully better for @@value{GDBN}'s long term development.  Firstly it
helps the developers by removing code that is either no longer relevant
or simply wrong.  Secondly since it removes any history associated with
the file (effectively clearing the slate) the developer has a much freer
hand when it comes to fixing broken files.}
d5191 5
d5249 1
a5249 1
@@section Cut the Branch
d5251 3
a5253 1
@@subheading Create the branch
d5256 7
a5262 18
$  u=5.1
$  v=5.2
$  V=`echo $v | sed 's/\./_/g'`
$  D=`date -u +%Y-%m-%d`
$  echo $u $V $D
5.1 5_2 2002-03-03
$  echo cvs -f -d :ext:sources.redhat.com:/cvs/src rtag \
-D $D-gmt gdb_$V-$D-branchpoint insight+dejagnu
cvs -f -d :ext:sources.redhat.com:/cvs/src rtag
-D 2002-03-03-gmt gdb_5_2-2002-03-03-branchpoint insight+dejagnu
$  ^echo ^^
...
$  echo cvs -f -d :ext:sources.redhat.com:/cvs/src rtag \
-b -r gdb_$V-$D-branchpoint gdb_$V-branch insight+dejagnu
cvs -f -d :ext:sources.redhat.com:/cvs/src rtag \
-b -r gdb_5_2-2002-03-03-branchpoint gdb_5_2-branch insight+dejagnu
$  ^echo ^^
...
d5268 1
a5268 4
by using @@kbd{-D YYYY-MM-DD-gmt} the branch is forced to an exact
date/time.
@@item
the trunk is first taged so that the branch point can easily be found
d5270 1
a5270 1
Insight (which includes GDB) and dejagnu are all tagged at the same time
d5272 1
a5272 34
@@file{version.in} gets bumped to avoid version number conflicts
@@item
the reading of @@file{.cvsrc} is disabled using @@file{-f}
@@end itemize

@@subheading Update @@file{version.in}

@@smallexample
$  u=5.1
$  v=5.2
$  V=`echo $v | sed 's/\./_/g'`
$  echo $u $v$V
5.1 5_2
$  cd /tmp
$  echo cvs -f -d :ext:sources.redhat.com:/cvs/src co \
-r gdb_$V-branch src/gdb/version.in
cvs -f -d :ext:sources.redhat.com:/cvs/src co
 -r gdb_5_2-branch src/gdb/version.in
$  ^echo ^^
U src/gdb/version.in
$  cd src/gdb
$  echo $u.90-0000-00-00-cvs > version.in
$  cat version.in
5.1.90-0000-00-00-cvs
$  cvs -f commit version.in
@@end smallexample

@@itemize @@bullet
@@item
@@file{0000-00-00} is used as a date to pump prime the version.in update
mechanism
@@item
@@file{.90} and the previous branch version are used as fairly arbitrary
initial branch version number
d5275 1
a5278 2
Something?

a5279 58

The file @@file{gdbadmin/cron/crontab} contains gdbadmin's cron table.
This file needs to be updated so that:

@@itemize @@bullet
@@item
a daily timestamp is added to the file @@file{version.in}
@@item
the new branch is included in the snapshot process
@@end itemize

@@noindent
See the file @@file{gdbadmin/cron/README} for how to install the updated
cron table.

The file @@file{gdbadmin/ss/README} should also be reviewed to reflect
any changes.  That file is copied to both the branch/ and current/
snapshot directories.


@@subheading Update the NEWS and README files

The @@file{NEWS} file needs to be updated so that on the branch it refers
to @@emph{changes in the current release} while on the trunk it also
refers to @@emph{changes since the current release}.

The @@file{README} file needs to be updated so that it refers to the
current release.

@@subheading Post the branch info

Send an announcement to the mailing lists:

@@itemize @@bullet
@@item
@@email{gdb-announce@@@@sources.redhat.com, GDB Announcement mailing list}
@@item
@@email{gdb@@@@sources.redhat.com, GDB Discsussion mailing list} and
@@email{gdb-testers@@@@sources.redhat.com, GDB Discsussion mailing list}
@@end itemize

@@emph{Pragmatics: The branch creation is sent to the announce list to
ensure that people people not subscribed to the higher volume discussion
list are alerted.}

The announcement should include:

@@itemize @@bullet
@@item
the branch tag
@@item
how to check out the branch using CVS
@@item
the date/number of weeks until the release
@@item
the branch commit policy
still holds.
@@end itemize
@


1.85.2.2
log
@Merge w/trunk (kseitz_interps-20020722-merge).
@
text
@d53 1
a53 1
Copyright @@copyright{} 1990,1991,1992,1993,1994,1996,1998,1999,2000,2001, 2002
a724 8
@@findex add_setshow_cmd
@@findex add_setshow_cmd_full
To add paired @@samp{set} and @@samp{show} commands, use
@@code{add_setshow_cmd} or @@code{add_setshow_cmd_full}.  The former is
a slightly simpler interface which is useful when you don't need to
further modify the new command structures, while the latter returns
the new command structures for manipulation.

d949 1
a949 1
cast is not portable ISO C.} code sequence:
d4796 1
a4796 1
@@subsection ISO C
d4798 1
a4798 2
@@value{GDBN} assumes an ISO/IEC 9899:1990 (a.k.a.@@: ISO C90) compliant
compiler.
d4800 1
a4800 1
@@value{GDBN} does not assume an ISO C or POSIX compliant C library.
d5748 1
a5748 2
version taken from the @@file{binutils} snapshot directory, which can be
found at @@uref{ftp://sources.redhat.com/pub/binutils/}. It is very
@


1.85.2.3
log
@Merge with kseitz_interps-20020809-merge of CVS head.
@
text
@d1837 1
a1837 1
@@c OBSOLETE CHILL_PRODUCER
d3632 3
a3634 3
@@c OBSOLETE @@item SHIFT_INST_REGS
@@c OBSOLETE @@findex SHIFT_INST_REGS
@@c OBSOLETE (Only used for m88k targets.)
d5068 1
a5068 1
A @@file{.c} file should include @@file{defs.h} first.
d5070 3
a5072 3
A @@file{.c} file should directly include the @@code{.h} file of every
declaration and/or definition it directly refers to.  It cannot rely on
indirect inclusion.
d5074 3
a5076 4
A @@file{.h} file should directly include the @@code{.h} file of every
declaration and/or definition it directly refers to.  It cannot rely on
indirect inclusion.  Exception: The file @@file{defs.h} does not need to
be directly included.
d5078 1
a5078 1
An external declaration should only appear in one include file.
d5080 1
a5080 11
An external declaration should never appear in a @@code{.c} file.
Exception: a declaration for the @@code{_initialize} function that
pacifies @@option{-Wmissing-declaration}.

A @@code{typedef} definition should only appear in one include file.

An opaque @@code{struct} declaration can appear in multiple @@file{.h}
files.  Where possible, a @@file{.h} file should use an opaque
@@code{struct} declaration instead of an include.

All @@file{.h} files should be wrapped in:
@


1.85.2.4
log
@Merge with kseitz_interps-20020829-merge tag from trunk.
@
text
@a3096 2
This method is deprecated.

d3098 1
a3098 1
@@findex PRINT_FLOAT_INFO
a3101 18
@@item print_registers_info (@@var{gdbarch}, @@var{frame}, @@var{regnum}, @@var{all})
@@findex print_registers_info
If defined, pretty print the value of the register @@var{regnum} for the
specified @@var{frame}.  If the value of @@var{regnum} is -1, pretty print
either all registers (@@var{all} is non zero) or a select subset of
registers (@@var{all} is zero).

The default method prints one register per line, and if @@var{all} is
zero omits floating-point registers.

@@item PRINT_VECTOR_INFO()
@@findex PRINT_VECTOR_INFO
If defined, then the @@samp{info vector} command will call this function
to print information about the processor's vector unit.

By default, the @@samp{info vector} command will print all vector
registers (the register's type having the vector attribute).

d3684 1
a3684 1
@@item STORE_RETURN_VALUE (@@var{type}, @@var{regcache}, @@var{valbuf})
d3686 2
a3687 3
A C expression that writes the function return value, found in
@@var{valbuf}, into the @@var{regcache}.  @@var{type} is the type of the
value that is to be returned.
@


1.85.2.5
log
@Merge with kseitz_interps-20020930-merge.
@
text
@a3177 17
@@item frame_align (@@var{address})
@@anchor{frame_align}
@@findex frame_align
Define this to adjust @@var{address} so that it meets the alignment
requirements for the start of a new stack frame.  A stack frame's
alignment requirements are typically stronger than a target processors
stack alignment requirements (@@pxref{STACK_ALIGN}).

This function is used to ensure that, when creating a dummy frame, both
the initial stack pointer and (if needed) the address of the return
value are correctly aligned.

Unlike @@code{STACK_ALIGN}, this function always adjusts the address in
the direction of stack growth.

By default, no frame based stack alignment is performed.

a3692 1
@@anchor{STACK_ALIGN}
d3694 2
a3695 7
Define this to increase @@var{addr} so that it meets the alignment
requirements for the processor's stack.

Unlike @@ref{frame_align}, this function always adjusts @@var{addr}
upwards.

By default, no stack alignment is performed.
a3864 6

@@item NAME_OF_MALLOC
@@findex NAME_OF_MALLOC
A string containing the name of the function to call in order to
allocate some memory in the inferior. The default value is "malloc".

@


1.85.2.6
log
@merge from mainline
@
text
@a1013 7
@@deftypefun void ui_out_field_fmt_int (struct ui_out *@@var{uiout}, int @@var{width}, enum ui_align @@var{alignment}, const char *@@var{fldname}, int @@var{value})
This function outputs a value of an @@code{int} variable.  It differs from
@@code{ui_out_field_int} in that the caller specifies the desired @@var{width} and @@var{alignment} of the output.
@@var{fldname} specifies
the name of the field.
@@end deftypefun

a2625 85
@@section Address Classes
@@cindex address classes
@@cindex DW_AT_byte_size
@@cindex DW_AT_address_class

Sometimes information about different kinds of addresses is available
via the debug information.  For example, some programming environments
define addresses of several different sizes.  If the debug information
distinguishes these kinds of address classes through either the size
info (e.g, @@code{DW_AT_byte_size} in @@w{DWARF 2}) or through an explicit
address class attribute (e.g, @@code{DW_AT_address_class} in @@w{DWARF 2}), the
following macros should be defined in order to disambiguate these
types within @@value{GDBN} as well as provide the added information to
a @@value{GDBN} user when printing type expressions.

@@deftypefn {Target Macro} int ADDRESS_CLASS_TYPE_FLAGS (int @@var{byte_size}, int @@var{dwarf2_addr_class})
Returns the type flags needed to construct a pointer type whose size
is @@var{byte_size} and whose address class is @@var{dwarf2_addr_class}.
This function is normally called from within a symbol reader.  See
@@file{dwarf2read.c}.
@@end deftypefn

@@deftypefn {Target Macro} char *ADDRESS_CLASS_TYPE_FLAGS_TO_NAME (int @@var{type_flags})
Given the type flags representing an address class qualifier, return
its name.
@@end deftypefn
@@deftypefn {Target Macro} int ADDRESS_CLASS_NAME_to_TYPE_FLAGS (int @@var{name}, int *var{type_flags_ptr})
Given an address qualifier name, set the @@code{int} refererenced by @@var{type_flags_ptr} to the type flags
for that address class qualifier.
@@end deftypefn

Since the need for address classes is rather rare, none of
the address class macros defined by default.  Predicate
macros are provided to detect when they are defined.

Consider a hypothetical architecture in which addresses are normally
32-bits wide, but 16-bit addresses are also supported.  Furthermore,
suppose that the @@w{DWARF 2} information for this architecture simply
uses a @@code{DW_AT_byte_size} value of 2 to indicate the use of one
of these "short" pointers.  The following functions could be defined
to implement the address class macros:

@@smallexample
somearch_address_class_type_flags (int byte_size,
                                   int dwarf2_addr_class)
@@{
  if (byte_size == 2)
    return TYPE_FLAG_ADDRESS_CLASS_1;
  else
    return 0;
@@}

static char *
somearch_address_class_type_flags_to_name (int type_flags)
@@{
  if (type_flags & TYPE_FLAG_ADDRESS_CLASS_1)
    return "short";
  else
    return NULL;
@@}

int
somearch_address_class_name_to_type_flags (char *name,
                                           int *type_flags_ptr)
@@{
  if (strcmp (name, "short") == 0)
    @@{
      *type_flags_ptr = TYPE_FLAG_ADDRESS_CLASS_1;
      return 1;
    @@}
  else
    return 0;
@@}
@@end smallexample

The qualifier @@code{@@@@short} is used in @@value{GDBN}'s type expressions
to indicate the presence of one of these "short" pointers.  E.g, if
the debug information indicates that @@code{short_ptr_var} is one of these
short pointers, @@value{GDBN} might show the following behavior:

@@smallexample
(gdb) ptype short_ptr_var
type = int * @@@@short
@@end smallexample

a2852 43
@@item ADDRESS_CLASS_NAME_TO_TYPE_FLAGS (@@var{name}, @@var{type_flags_ptr})
@@findex ADDRESS_CLASS_NAME_TO_TYPE_FLAGS
If @@var{name} is a valid address class qualifier name, set the @@code{int}
referenced by @@var{type_flags_ptr} to the mask representing the qualifier
and return 1.  If @@var{name} is not a valid address class qualifier name,
return 0.

The value for @@var{type_flags_ptr} should be one of
@@code{TYPE_FLAG_ADDRESS_CLASS_1}, @@code{TYPE_FLAG_ADDRESS_CLASS_2}, or
possibly some combination of these values or'd together.
@@xref{Target Architecture Definition, , Address Classes}.

@@item ADDRESS_CLASS_NAME_TO_TYPE_FLAGS_P ()
@@findex ADDRESS_CLASS_NAME_TO_TYPE_FLAGS_P
Predicate which indicates whether @@code{ADDRESS_CLASS_NAME_TO_TYPE_FLAGS}
has been defined.

@@item ADDRESS_CLASS_TYPE_FLAGS (@@var{byte_size}, @@var{dwarf2_addr_class})
@@findex ADDRESS_CLASS_TYPE_FLAGS (@@var{byte_size}, @@var{dwarf2_addr_class})
Given a pointers byte size (as described by the debug information) and
the possible @@code{DW_AT_address_class} value, return the type flags
used by @@value{GDBN} to represent this address class.  The value
returned should be one of @@code{TYPE_FLAG_ADDRESS_CLASS_1},
@@code{TYPE_FLAG_ADDRESS_CLASS_2}, or possibly some combination of these
values or'd together.
@@xref{Target Architecture Definition, , Address Classes}.

@@item ADDRESS_CLASS_TYPE_FLAGS_P ()
@@findex ADDRESS_CLASS_TYPE_FLAGS_P
Predicate which indicates whether @@code{ADDRESS_CLASS_TYPE_FLAGS} has
been defined.

@@item ADDRESS_CLASS_TYPE_FLAGS_TO_NAME (@@var{type_flags})
@@findex ADDRESS_CLASS_TYPE_FLAGS_TO_NAME
Return the name of the address class qualifier associated with the type
flags given by @@var{type_flags}.

@@item ADDRESS_CLASS_TYPE_FLAGS_TO_NAME_P ()
@@findex ADDRESS_CLASS_TYPE_FLAGS_TO_NAME_P
Predicate which indicates whether @@code{ADDRESS_CLASS_TYPE_FLAGS_TO_NAME} has
been defined.
@@xref{Target Architecture Definition, , Address Classes}.

d3065 7
d3092 6
@


1.84
log
@* config/m88k/tm-m88k.h: Update copyright.
(m88k_target_write_pc): Declare
(TARGET_WRITE_PC): Redefine using m88k_target_write_pc.
(M88K_NNPC_REGNUM): Rename NNPC_REGNUM.
(SHIFT_INST_REGS): Update definition.
* m88k-tdep.c (m88k_target_write_pc): New function.  Implement
using old definition of TARGET_WRITE_PC.
* regcache.c (generic_target_write_pc): Delete code handling
NNPC_REGNUM.
* gdbarch.sh (NNPC_REGNUM): Delete.
* gdbarch.h, gdbarch.c: Regenerate.

* gdbint.texinfo (Target Architecture Definition): Delete
documentation on NNPC_REGNUM.
@
text
@d2315 121
@


1.84.2.1
log
@merge from trunk
@
text
@a2314 129
@@section Operating System ABI Variant Handling
@@cindex OS ABI variants

@@value{GDBN} provides a mechanism for handling variations in OS
ABIs.  An OS ABI variant may have influence over any number of
variables in the target architecture definition.  There are two major
components in the OS ABI mechanism: sniffers and handlers.

A @@dfn{sniffer} examines a file matching a BFD architecture/flavour pair
(the architecture may be wildcarded) in an attempt to determine the
OS ABI of that file.  Sniffers with a wildcarded architecture are considered
to be @@dfn{generic}, while sniffers for a specific architecture are
considered to be @@dfn{specific}.  A match from a specific sniffer
overrides a match from a generic sniffer.  Multiple sniffers for an
architecture/flavour may exist, in order to differentiate between two
different operating systems which use the same basic file format.  The
OS ABI framework provides a generic sniffer for ELF-format files which
examines the @@code{EI_OSABI} field of the ELF header, as well as note
sections known to be used by several operating systems.

@@cindex fine-tuning @@code{gdbarch} structure
A @@dfn{handler} is used to fine-tune the @@code{gdbarch} structure for the
selected OS ABI.  There may be only one handler for a given OS ABI
for each BFD architecture.

The following OS ABI variants are defined in @@file{osabi.h}:

@@table @@code

@@findex GDB_OSABI_UNKNOWN
@@item GDB_OSABI_UNKNOWN
The ABI of the inferior is unknown.  The default @@code{gdbarch}
settings for the architecture will be used.

@@findex GDB_OSABI_SVR4
@@item GDB_OSABI_SVR4
UNIX System V Release 4

@@findex GDB_OSABI_HURD
@@item GDB_OSABI_HURD
GNU using the Hurd kernel

@@findex GDB_OSABI_SOLARIS
@@item GDB_OSABI_SOLARIS
Sun Solaris

@@findex GDB_OSABI_OSF1
@@item GDB_OSABI_OSF1
OSF/1, including Digital UNIX and Compaq Tru64 UNIX

@@findex GDB_OSABI_LINUX
@@item GDB_OSABI_LINUX
GNU using the Linux kernel

@@findex GDB_OSABI_FREEBSD_AOUT
@@item GDB_OSABI_FREEBSD_AOUT
FreeBSD using the a.out executable format

@@findex GDB_OSABI_FREEBSD_ELF
@@item GDB_OSABI_FREEBSD_ELF
FreeBSD using the ELF executable format

@@findex GDB_OSABI_NETBSD_AOUT
@@item GDB_OSABI_NETBSD_AOUT
NetBSD using the a.out executable format

@@findex GDB_OSABI_NETBSD_ELF
@@item GDB_OSABI_NETBSD_ELF
NetBSD using the ELF executable format

@@findex GDB_OSABI_WINCE
@@item GDB_OSABI_WINCE
Windows CE

@@findex GDB_OSABI_GO32
@@item GDB_OSABI_GO32
DJGPP

@@findex GDB_OSABI_NETWARE
@@item GDB_OSABI_NETWARE
Novell NetWare

@@findex GDB_OSABI_ARM_EABI_V1
@@item GDB_OSABI_ARM_EABI_V1
ARM Embedded ABI version 1

@@findex GDB_OSABI_ARM_EABI_V2
@@item GDB_OSABI_ARM_EABI_V2
ARM Embedded ABI version 2

@@findex GDB_OSABI_ARM_APCS
@@item GDB_OSABI_ARM_APCS
Generic ARM Procedure Call Standard

@@end table

Here are the functions that make up the OS ABI framework:

@@deftypefun const char *gdbarch_osabi_name (enum gdb_osabi @@var{osabi})
Return the name of the OS ABI corresponding to @@var{osabi}.
@@end deftypefun

@@deftypefun void gdbarch_register_osabi (enum bfd_architecture @@var{arch}, enum gdb_osabi @@var{osabi}, void (*@@var{init_osabi})(struct gdbarch_info @@var{info}, struct gdbarch *@@var{gdbarch}))
Register the OS ABI handler specified by @@var{init_osabi} for the
architecture/OS ABI pair specified by @@var{arch} and @@var{osabi}.
@@end deftypefun

@@deftypefun void gdbarch_register_osabi_sniffer (enum bfd_architecture @@var{arch}, enum bfd_flavour @@var{flavour}, enum gdb_osabi (*@@var{sniffer})(bfd *@@var{abfd}))
Register the OS ABI file sniffer specified by @@var{sniffer} for the
BFD architecture/flavour pair specified by @@var{arch} and @@var{flavour}.
If @@var{arch} is @@code{bfd_arch_unknown}, the sniffer is considered to
be generic, and is allowed to examine @@var{flavour}-flavoured files for
any architecture.
@@end deftypefun

@@deftypefun enum gdb_osabi gdbarch_lookup_osabi (bfd *@@var{abfd})
Examine the file described by @@var{abfd} to determine its OS ABI.
The value @@code{GDB_OSABI_UNKNOWN} is returned if the OS ABI cannot
be determined.
@@end deftypefun

@@deftypefun void gdbarch_init_osabi (struct gdbarch info @@var{info}, struct gdbarch *@@var{gdbarch}, enum gdb_osabi @@var{osabi})
Invoke the OS ABI handler corresponding to @@var{osabi} to fine-tune the
@@code{gdbarch} structure specified by @@var{gdbarch}.  If a handler
corresponding to @@var{osabi} has not been registered for @@var{gdbarch}'s
architecture, a warning will be issued and the debugging session will continue
with the defaults already established for @@var{gdbarch}.
@@end deftypefun

a3766 162
@@section Converting an existing Target Architecture to Multi-arch
@@cindex converting targets to multi-arch

This section describes the current accepted best practice for converting
an existing target architecture to the multi-arch framework.

The process consists of generating, testing, posting and committing a
sequence of patches.  Each patch must contain a single change, for
instance:

@@itemize @@bullet

@@item
Directly convert a group of functions into macros (the conversion does
not change the behavior of any of the functions).

@@item
Replace a non-multi-arch with a multi-arch mechanism (e.g.,
@@code{FRAME_INFO}).

@@item
Enable multi-arch level one.

@@item
Delete one or more files.

@@end itemize

@@noindent
There isn't a size limit on a patch, however, a developer is strongly
encouraged to keep the patch size down.

Since each patch is well defined, and since each change has been tested
and shows no regressions, the patches are considered @@emph{fairly}
obvious.  Such patches, when submitted by developers listed in the
@@file{MAINTAINERS} file, do not need approval.  Occasional steps in the
process may be more complicated and less clear.  The developer is
expected to use their judgment and is encouraged to seek advice as
needed.

@@subsection Preparation

The first step is to establish control.  Build (with @@option{-Werror}
enabled) and test the target so that there is a baseline against which
the debugger can be compared.

At no stage can the test results regress or @@value{GDBN} stop compiling
with @@option{-Werror}.

@@subsection Add the multi-arch initialization code

The objective of this step is to establish the basic multi-arch
framework.  It involves

@@itemize @@bullet

@@item
The addition of a @@code{@@var{arch}_gdbarch_init} function@@footnote{The
above is from the original example and uses K&R C.  @@value{GDBN}
has since converted to ISO C but lets ignore that.} that creates
the architecture:
@@smallexample
static struct gdbarch *
d10v_gdbarch_init (info, arches)
     struct gdbarch_info info;
     struct gdbarch_list *arches;
@@{
  struct gdbarch *gdbarch;
  /* there is only one d10v architecture */
  if (arches != NULL)
    return arches->gdbarch;
  gdbarch = gdbarch_alloc (&info, NULL);
  return gdbarch;
@@}
@@end smallexample
@@noindent
@@emph{}

@@item
A per-architecture dump function to print any architecture specific
information:
@@smallexample
static void
mips_dump_tdep (struct gdbarch *current_gdbarch,
                struct ui_file *file)
@@{
   @@dots{} code to print architecture specific info @@dots{}
@@}
@@end smallexample

@@item
A change to @@code{_initialize_@@var{arch}_tdep} to register this new
architecture:
@@smallexample
void
_initialize_mips_tdep (void)
@@{
  gdbarch_register (bfd_arch_mips, mips_gdbarch_init,
                    mips_dump_tdep);
@@end smallexample

@@item
Add the macro @@code{GDB_MULTI_ARCH}, defined as 0 (zero), to the file@@*
@@file{config/@@var{arch}/tm-@@var{arch}.h}.

@@end itemize

@@subsection Update multi-arch incompatible mechanisms

Some mechanisms do not work with multi-arch.  They include:

@@table @@code
@@item EXTRA_FRAME_INFO
Delete.
@@item FRAME_FIND_SAVED_REGS
Replaced with @@code{FRAME_INIT_SAVED_REGS}
@@end table

@@noindent
At this stage you could also consider converting the macros into
functions.

@@subsection Prepare for multi-arch level to one

Temporally set @@code{GDB_MULTI_ARCH} to @@code{GDB_MULTI_ARCH_PARTIAL}
and then build and start @@value{GDBN} (the change should not be
committed).  @@value{GDBN} may not build, and once built, it may die with
an internal error listing the architecture methods that must be
provided.

Fix any build problems (patch(es)).

Convert all the architecture methods listed, which are only macros, into
functions (patch(es)).

Update @@code{@@var{arch}_gdbarch_init} to set all the missing
architecture methods and wrap the corresponding macros in @@code{#if
!GDB_MULTI_ARCH} (patch(es)).

@@subsection Set multi-arch level one

Change the value of @@code{GDB_MULTI_ARCH} to GDB_MULTI_ARCH_PARTIAL (a
single patch).

Any problems with throwing ``the switch'' should have been fixed
already.

@@subsection Convert remaining macros

Suggest converting macros into functions (and setting the corresponding
architecture method) in small batches.

@@subsection Set multi-arch level to two

This should go smoothly.

@@subsection Delete the TM file

The @@file{tm-@@var{arch}.h} can be deleted.  @@file{@@var{arch}.mt} and
@@file{configure.in} updated.


a4327 137
@@section Per-architecture module data
@@cindex per-architecture module data
@@cindex multi-arch data
@@cindex data-pointer, per-architecture/per-module

The multi-arch framework includes a mechanism for adding module specific
per-architecture data-pointers to the @@code{struct gdbarch} architecture
object.

A module registers one or more per-architecture data-pointers using the
function @@code{register_gdbarch_data}:

@@deftypefun struct gdbarch_data *register_gdbarch_data (gdbarch_data_init_ftype *@@var{init}, gdbarch_data_free_ftype *@@var{free})

The @@var{init} function is used to obtain an initial value for a
per-architecture data-pointer.  The function is called, after the
architecture has been created, when the data-pointer is still
uninitialized (@@code{NULL}) and its value has been requested via a call
to @@code{gdbarch_data}.  A data-pointer can also be initialize
explicitly using @@code{set_gdbarch_data}.

The @@var{free} function is called when a data-pointer needs to be
destroyed.  This occurs when either the corresponding @@code{struct
gdbarch} object is being destroyed or when @@code{set_gdbarch_data} is
overriding a non-@@code{NULL} data-pointer value.

The function @@code{register_gdbarch_data} returns a @@code{struct
gdbarch_data} that is used to identify the data-pointer that was added
to the module.

@@end deftypefun

A typical module has @@code{init} and @@code{free} functions of the form:

@@smallexample
static struct gdbarch_data *nozel_handle;
static void *
nozel_init (struct gdbarch *gdbarch)
@@{
  struct nozel *data = XMALLOC (struct nozel);
  @@dots{}
  return data;
@@}
@@dots{}
static void
nozel_free (struct gdbarch *gdbarch, void *data)
@@{
  xfree (data);
@@}
@@end smallexample

Since uninitialized (@@code{NULL}) data-pointers are initialized
on-demand, an @@code{init} function is free to call other modules that
use data-pointers.  Those modules data-pointers will be initialized as
needed.  Care should be taken to ensure that the @@code{init} call graph
does not contain cycles.

The data-pointer is registered with the call:

@@smallexample
void
_initialize_nozel (void)
@@{
  nozel_handle = register_gdbarch_data (nozel_init, nozel_free);
@@dots{}
@@end smallexample

The per-architecture data-pointer is accessed using the function:

@@deftypefun void *gdbarch_data (struct gdbarch *@@var{gdbarch}, struct gdbarch_data *@@var{data_handle})
Given the architecture @@var{arch} and module data handle
@@var{data_handle} (returned by @@code{register_gdbarch_data}, this
function returns the current value of the per-architecture data-pointer.
@@end deftypefun

The non-@@code{NULL} data-pointer returned by @@code{gdbarch_data} should
be saved in a local variable and then used directly:

@@smallexample
int
nozel_total (struct gdbarch *gdbarch)
@@{
  int total;
  struct nozel *data = gdbarch_data (gdbarch, nozel_handle);
  @@dots{}
  return total;
@@}
@@end smallexample

It is also possible to directly initialize the data-pointer using:

@@deftypefun void set_gdbarch_data (struct gdbarch *@@var{gdbarch}, struct gdbarch_data *handle, void *@@var{pointer})
Update the data-pointer corresponding to @@var{handle} with the value of
@@var{pointer}.  If the previous data-pointer value is non-NULL, then it
is freed using data-pointers @@var{free} function.
@@end deftypefun

This function is used by modules that require a mechanism for explicitly
setting the per-architecture data-pointer during architecture creation:

@@smallexample
/* Called during architecture creation.  */
extern void
set_gdbarch_nozel (struct gdbarch *gdbarch,
                   int total)
@@{
  struct nozel *data = XMALLOC (struct nozel);
  @@dots{}
  set_gdbarch_data (gdbarch, nozel_handle, nozel);
@@}
@@end smallexample

@@smallexample
/* Default, called when nozel not set by set_gdbarch_nozel().  */
static void *
nozel_init (struct gdbarch *gdbarch)
@@{
  struct nozel *default_nozel = XMALLOC (struc nozel);
  @@dots{}
  return default_nozel;
@@}
@@end smallexample

@@smallexample
void
_initialize_nozel (void)
@@{
  nozel_handle = register_gdbarch_data (nozel_init, NULL);
  @@dots{}
@@end smallexample

@@noindent
Note that an @@code{init} function still needs to be registered.  It is
used to initialize the data-pointer when the architecture creation phase
fail to set an initial value.


d5040 1
a5040 1
@@section Obsoleting code
d5047 2
a5048 2
line.  Doing this means that it is easy to identify something that has
been obsoleted when greping through the sources.
d5050 3
a5052 3
The process is done in stages --- this is mainly to ensure that the
wider @@value{GDBN} community has a reasonable opportunity to respond.
Remember, everything on the Internet takes a week.
d5054 1
a5054 1
@@enumerate
d5056 1
a5056 3
Post the proposal on @@email{gdb@@@@sources.redhat.com, the GDB mailing
list} Creating a bug report to track the task's state, is also highly
recommended.
d5058 1
a5058 1
Wait a week or so.
d5060 2
a5061 2
Post the proposal on @@email{gdb-announce@@@@sources.redhat.com, the GDB
Announcement mailing list}.
d5063 1
a5063 1
Wait a week or so.
d5065 4
a5068 16
Go through and edit all relevant files and lines so that they are
prefixed with the word @@code{OBSOLETE}.
@@item
Wait until the next GDB version, containing this obsolete code, has been
released.
@@item
Remove the obsolete code.
@@end enumerate

@@noindent
@@emph{Maintainer note: While removing old code is regrettable it is
hopefully better for @@value{GDBN}'s long term development.  Firstly it
helps the developers by removing code that is either no longer relevant
or simply wrong.  Secondly since it removes any history associated with
the file (effectively clearing the slate) the developer has a much freer
hand when it comes to fixing broken files.}
d5070 5
d5128 1
a5128 1
@@section Cut the Branch
d5130 3
a5132 1
@@subheading Create the branch
d5135 7
a5141 18
$  u=5.1
$  v=5.2
$  V=`echo $v | sed 's/\./_/g'`
$  D=`date -u +%Y-%m-%d`
$  echo $u $V $D
5.1 5_2 2002-03-03
$  echo cvs -f -d :ext:sources.redhat.com:/cvs/src rtag \
-D $D-gmt gdb_$V-$D-branchpoint insight+dejagnu
cvs -f -d :ext:sources.redhat.com:/cvs/src rtag
-D 2002-03-03-gmt gdb_5_2-2002-03-03-branchpoint insight+dejagnu
$  ^echo ^^
...
$  echo cvs -f -d :ext:sources.redhat.com:/cvs/src rtag \
-b -r gdb_$V-$D-branchpoint gdb_$V-branch insight+dejagnu
cvs -f -d :ext:sources.redhat.com:/cvs/src rtag \
-b -r gdb_5_2-2002-03-03-branchpoint gdb_5_2-branch insight+dejagnu
$  ^echo ^^
...
d5147 1
a5147 6
by using @@kbd{-D YYYY-MM-DD-gmt} the branch is forced to an exact
date/time.
@@item
the trunk is first taged so that the branch point can easily be found
@@item
Insight (which includes GDB) and dejagnu are all tagged at the same time
d5149 1
a5149 1
@@file{version.in} gets bumped to avoid version number conflicts
d5151 1
a5151 32
the reading of @@file{.cvsrc} is disabled using @@file{-f}
@@end itemize

@@subheading Update @@file{version.in}

@@smallexample
$  u=5.1
$  v=5.2
$  V=`echo $v | sed 's/\./_/g'`
$  echo $u $v$V
5.1 5_2
$  cd /tmp
$  echo cvs -f -d :ext:sources.redhat.com:/cvs/src co \
-r gdb_$V-branch src/gdb/version.in
cvs -f -d :ext:sources.redhat.com:/cvs/src co
 -r gdb_5_2-branch src/gdb/version.in
$  ^echo ^^
U src/gdb/version.in
$  cd src/gdb
$  echo $u.90-0000-00-00-cvs > version.in
$  cat version.in
5.1.90-0000-00-00-cvs
$  cvs -f commit version.in
@@end smallexample

@@itemize @@bullet
@@item
@@file{0000-00-00} is used as a date to pump prime the version.in update
mechanism
@@item
@@file{.90} and the previous branch version are used as fairly arbitrary
initial branch version number
d5154 1
a5157 2
Something?

a5158 58

The file @@file{gdbadmin/cron/crontab} contains gdbadmin's cron table.
This file needs to be updated so that:

@@itemize @@bullet
@@item
a daily timestamp is added to the file @@file{version.in}
@@item
the new branch is included in the snapshot process
@@end itemize

@@noindent
See the file @@file{gdbadmin/cron/README} for how to install the updated
cron table.

The file @@file{gdbadmin/ss/README} should also be reviewed to reflect
any changes.  That file is copied to both the branch/ and current/
snapshot directories.


@@subheading Update the NEWS and README files

The @@file{NEWS} file needs to be updated so that on the branch it refers
to @@emph{changes in the current release} while on the trunk it also
refers to @@emph{changes since the current release}.

The @@file{README} file needs to be updated so that it refers to the
current release.

@@subheading Post the branch info

Send an announcement to the mailing lists:

@@itemize @@bullet
@@item
@@email{gdb-announce@@@@sources.redhat.com, GDB Announcement mailing list}
@@item
@@email{gdb@@@@sources.redhat.com, GDB Discsussion mailing list} and
@@email{gdb-testers@@@@sources.redhat.com, GDB Discsussion mailing list}
@@end itemize

@@emph{Pragmatics: The branch creation is sent to the announce list to
ensure that people people not subscribed to the higher volume discussion
list are alerted.}

The announcement should include:

@@itemize @@bullet
@@item
the branch tag
@@item
how to check out the branch using CVS
@@item
the date/number of weeks until the release
@@item
the branch commit policy
still holds.
@@end itemize
@


1.83
log
@* arch-utils.h (legacy_register_to_value): Declare.
(legacy_value_to_register): Declare.
(legacy_convert_register_p): Declare.
* arch-utils.c (legacy_register_to_value): New function.
(legacy_value_to_register): New function.
(legacy_convert_register_p): New function.

* gdbarch.sh (REGISTER_TO_VALUE): Define.
(VALUE_TO_REGISTER): Define.
(CONVERT_REGISTER_P): Define.
* gdbarch.h, gdbarch.c: Regenerate.

* valops.c (value_assign): Use CONVERT_REGISTER_P and
VALUE_TO_REGISTER.
* findvar.c (value_from_register): Use REGISTER_TO_VALUE and
CONVERT_REGISTER_P.

* gdbint.texinfo (Target Architecture Definition): Document
REGISTER_TO_VALUE and VALUE_TO_REGISTER and CONVERT_REGISTER_P.
(Target Architecture Definition): Revise section `Using Different
Register and Memory Data Representations'.  Add section `Raw and
Virtual Register Representations'.
@
text
@a3419 5
@@item NNPC_REGNUM
@@findex NNPC_REGNUM
The number of the ``next next program counter'' register, if defined.
Currently, this is only defined for the Motorola 88K.

@


1.82
log
@* arch-utils.h (generic_register_size): Declare.
(generic_register_raw_size, generic_register_virtual_size): Delete
declarations.
* arch-utils.c (generic_register_raw_size): Delete.
(generic_register_size): New function.
(generic_register_virtual_size): Delete.

* gdbarch.sh (REGISTER_RAW_SIZE, REGISTER_VIRTUAL_SIZE): Make
default generic_register_size.
* gdbarch.h, gdbarch.c: Re-generate.

* d10v-tdep.c (d10v_gdbarch_init): Use generic_register_size for
register_virtual_size.
* x86-64-tdep.c (x86_64_gdbarch_init): Ditto.
* rs6000-tdep.c (rs6000_gdbarch_init): Ditto.

* gdbint.texinfo (Target Architecture Definition): Mention
defaults for REGISTER_VIRTUAL_SIZE and REGISTER_RAW_SIZE.
(Target Architecture Definition): Mention same.  Add references to
web pages.
@
text
@d2490 13
a2502 16
@@section Using Different Register and Memory Data Representations
@@cindex raw representation
@@cindex virtual representation
@@cindex representations, raw and virtual
@@cindex register data formats, converting
@@cindex @@code{struct value}, converting register contents to

@@emph{Maintainer's note: The way GDB manipulates registers is undergoing
significant change.  Many of the macros and functions refered to in the
section below are likely to be made obsolete.  For instance, instead of
having different raw and virtual register sizes, an architecture can
define pseudo-registers that map onto the raw registers.

See the @@uref{http://www.gnu.org/software/gdb/bugs/, Bug Tracking
Database} and @@uref{http://sources.redhat.com/gdb/current/ari, ARI
Index} for more up-to-date information.}
d2510 4
d2598 79
d2922 6
d3265 6
d3277 1
a3277 1
@@xref{Target Architecture Definition, , Using Different Register and Memory Data Representations}.
d3283 2
a3284 1
@@xref{Target Architecture Definition, , Using Different Register and Memory Data Representations}.
d3289 1
a3289 1
@@xref{Target Architecture Definition, , Using Different Register and Memory Data Representations}.
d3295 1
a3295 1
@@xref{Target Architecture Definition, , Using Different Register and Memory Data Representations}.
d3301 1
a3301 1
@@xref{Target Architecture Definition, , Using Different Register and Memory Data Representations}.
d3682 6
@


1.81
log
@* gdbint.texinfo (Releasing GDB): Revise `Create a Release'.
@
text
@d2499 7
a2505 2
sections below are likely to be made obsolete.  See the file @@file{TODO}
for more up-to-date information.}
d3183 2
a3184 1
Return the raw size of @@var{reg}.
d3189 2
a3190 1
Return the virtual size of @@var{reg}.
@


1.80
log
@* arch-utils.h: Update copyright.

* gdbarch.sh (PC_IN_SIGTRAMP): Add.
* gdbarch.h, gdbarch.c: Re-generate.

* inferior.h (IN_SIGTRAMP): Delete definition.
* arch-utils.c (legacy_pc_in_sigtramp): New function.
* arch-utils.h (legacy_pc_in_sigtramp): Declare.

* mips-tdep.c (mips_init_extra_frame_info): Use PC_IN_SIGTRAMP.
(mips_dump_tdep): Do not print value of IN_SIGTRAMP.
* hppa-tdep.c (pc_in_interrupt_handler):  Use PC_IN_SIGTRAMP.
(find_proc_framesize): Ditto.
* alpha-tdep.c (alpha_osf_skip_sigtramp_frame): Ditto.
(alpha_init_extra_frame_info): Ditto.
* infrun.c (handle_inferior_event): Ditto.
(handle_inferior_event): Ditto.
(check_sigtramp2): Ditto.
* blockframe.c (create_new_frame): Ditto.
(get_prev_frame): Ditto.
* ppc-linux-tdep.c: Update comments.
* i386-linux-tdep.c: Update comments.
* breakpoint.c (bpstat_what): Update comment.

* gdbint.texinfo (Target Architecture Definition): Replace
IN_SIGTRAMP with PC_IN_SIGTRAMP.
@
text
@d5065 4
a5068 2
This procedure can be followed when creating beta and final final
releases.  With a beta many of the steps can be skipped.
d5070 14
a5083 1
@@subheading Establish a few defaults.
d5086 2
a5087 2
$  b=gdb_5_1-2001-07-29-branch
$  v=5.1.1
d5090 1
d5094 1
a5094 1
/sourceware/snapshot-tmp/gdbadmin-tmp/gdb_5_1-2001-07-29-branch/5.1.1
d5100 2
a5101 4
NB: Check the autoconf version carefully.  You want to be using the
version taken from the binutils snapshot directory.  It is most likely
that your system's installed version (@@file{/usr/bin}?) is probably
correct.
d5103 9
a5111 1
@@subheading Check out the relevant modules:
d5121 2
a5122 3
NB: The reading of @@file{.cvsrc} is disabled (@@file{-f}) so that there
isn't any confusion between what is written here and what your local CVS
really does.
d5124 10
a5133 1
@@subheading Update relevant files.
d5135 1
a5135 1
@@subsubheading @@file{gdb/NEWS}
d5140 1
a5140 1
Don't forget to update the ChangeLog.
d5152 1
a5152 1
@@subsubheading @@file{gdb/README}
d5154 10
a5163 1
You'll need to update: the version, the update date, and who did it.
d5175 3
a5177 3
@@emph{Maintainer note: Hopefully the README file was reviewed before the
initial branch was cut so just a simple substitute is needed to get it
updated.}
d5183 1
a5183 1
@@subsubheading @@file{gdb/version.in}
d5187 2
d5192 1
a5192 1
...
d5198 1
a5198 1
@@subsubheading @@file{dejagnu/src/dejagnu/configure.in}
d5201 1
a5201 2
@@var{AM_INIT_AUTOMAKE}.  Tweak it to read something like
@@var{gdb-5.1.1}.
d5203 1
a5203 1
Re-generate configure.
d5205 1
a5205 1
Add a ChangeLog.
d5207 8
a5214 1
@@subheading Do the dirty work
d5216 5
a5220 1
This is identical to the process used when creating the daily snapshot.
d5223 1
a5223 1
$  for m in gdb insight dejagnu
d5225 1
a5225 1
( cd $m/src && gmake -f Makefile.in $m.tar.bz2 )
d5227 1
d5230 1
a5230 1
@@subheading Check the source files
d5232 1
a5232 1
You're looking for files that have mysteriously disappeared as the
d5239 1
d5241 1
a5241 1
? gdb-5.1.1.tar.bz2
d5246 1
a5246 8
? gdb/p-exp.tab.c
? gdb/doc/gdb.info-11
? gdb/doc/gdb.info-12
? gdb/doc/gdb.info-13
? gdb/doc/gdb.info-14
? gdb/doc/gdb.info-15
? gdb/doc/gdbint.info-4
? gdb/doc/gdbint.info-5
d5250 1
d5256 1
a5256 1
@@subheading Re-pack the release with @@code{gzip}
d5259 10
a5268 3
$  cp */*/*.bz2 .
$  bunzip2 -k -v *.bz2
$  gzip -9 -v *.tar
d5271 2
a5272 4
NB: A pipe such as @@kbd{bunzip2 < xxx.bz2 | gzip -9 > xxx.gz} shouldn't
be used since, in that mode, gzip doesn't know the file name information
and consequently can't include it.  This is also why the release process
runs @@code{tar} and @@code{bzip2} as separate passes.
d5274 7
a5280 2
@@emph{Maintainer note: The release process could be changed to create
@@file{.tar} rather than @@file{.tar.bz2} files.}
d5282 1
a5282 1
@@section Check the release
d5284 1
a5284 2
Grab the @@file{gdb.tar.bz2}, copy it to your local machine and then try
a simple build using it.
d5286 13
a5298 2
If this is a pre-release just copy the @@file{.bz2} files to the snapshot
directory and skip the remaining steps.
d5300 6
a5305 2
If it is a final release, also make it available under a bogus name so
that others can download and check it.
d5307 1
a5307 4
@@emph{Maintainer note: This adds an extra day to the release process but
is very much worth it.  Other developers are given the opportunity to
check that things like your @@file{NEWS} entries are correct or that
other changes actually work.}
d5309 1
a5309 1
@@section Release the tar ball
d5311 14
a5324 1
This is where, unfortunately, the notes just get vague.
d5326 7
a5332 1
@@subheading Install on sware
d5335 1
d5339 21
a5359 1
@@subheading Create and update the web pages.
d5361 1
a5361 1
Try the following:
d5363 2
d5367 1
a5367 1
create the directory @@file{htdocs/@@var{version}} (e.g., @@file{htdocs/5.1.1}
d5369 2
a5370 16
copy @@file{index.html} and @@file{ANNOUNCE} from the previous release
into the @@file{htdocs/@@var{version}} directory and edit for content.
Things like the MD5 sums, @@kbd{ls -l} output, the version number and so
on will need updating.  Add NEWS entries to the @@file{ANNOUNCE}.  This
ensures that the previous announcement is kept somewhere handy.
@@item
copy the @@file{NEWS} from the distro into the
@@file{htdocs/@@var{version}} directory, trim down to just the most recent
news items
@@item
Add a short (identical) announcement to both @@file{htdocs/index.html}
and @@file{htdocs/news/index.html}
@@item
edit the script @@file{htdocs/index.sh} to link in the new release
number.  Run it across all @@file{index.html} files vis @@kbd{./index.sh
index.html */index.html}.
d5372 1
a5372 2
grep the @@file{htdocs} tree for references to the previous release
version (@@file{htdocs/download/index.html})
d5375 11
a5385 4
@@emph{Maintainer note: This step is too fragile --- it is too easy to
mis one of the entries and forget to update it.}

@@subheading Generate online docs
d5387 1
d5390 1
a5390 1
from one of the nightly cronjobs and then just edit accordingly.
d5395 1
a5395 1
 ~ftp/pub/gdb/releases/gdb-5.1.1.tar.bz2 \
d5397 1
a5397 1
 /www/sourceware/htdocs/gdb/5.1.1/onlinedocs \
d5401 10
a5410 1
@@subheading Something about @@file{ANNOUNCEMENT}
d5412 15
a5426 1
Send the @@file{ANNOUNCEMENT} file you created above to:
d5432 4
a5435 1
The gnu announce list (but delay it a day or so to let things get out).
d5438 1
a5438 5
@@subheading Install it on GNU

At the time of writing, the GNU machine was @@kbd{gnudist.gnu.org} in
@@file{~ftp/gnu/gdb} (I think, I'm still waiting for it to copy into my
home directory).
d5440 1
a5440 1
@@section Cleanup
d5442 1
a5442 1
@@subheading Commit outstanding changes
d5444 1
a5444 1
In particular you'll need to commit the changes to:
d5457 1
a5457 1
@@subheading Tag the release
d5466 1
a5466 1
$  ( cd insight/src && cvs -f -q tag gdb_5_1_1-$d-release )
d5469 8
a5476 2
Insight is used since that contains more of the release than GDB (yes
dejagnu doesn't get tagged but I think we can live with that.).
d5478 1
a5478 1
@@subheading Restart @@file{gdb/version.in}
d5483 1
a5483 1
@@file{5.1.0_0000-00-00-cvs} which will restart things (yes the @@kbd{_}
d5488 1
a5488 1
@@subheading Merge into trunk
d5492 16
@


1.79
log
@2002-04-24  David S. Miller  <davem@@redhat.com>

	* i960-tdep.c (register_in_window_p): New function.
	(i960_find_saved_register): Use it instead of
	REGISTER_IN_WINDOW_P.
	* config/i960/tm-i960.h (REGISTER_IN_WINDOW): Delete.

2002-04-24  David S. Miller  <davem@@redhat.com>

	* gdbint.texinfo (REGISTER_IN_WINDOW): Delete definition.
@
text
@a3092 5
@@item IN_SIGTRAMP (@@var{pc}, @@var{name})
@@findex IN_SIGTRAMP
Define this to return non-zero if the given @@var{pc} and/or @@var{name}
indicates that the current function is a @@code{sigtramp}.

d3290 12
@


1.78
log
@2002-04-21  David S. Miller  <davem@@redhat.com>

	* gdbint.texinfo (SKIP_PROLOGUE_FRAMELESS_P): Delete definition.
@
text
@a3046 5
@@item REGISTER_IN_WINDOW_P (@@var{regnum})
@@findex REGISTER_IN_WINDOW_P
Define this to be an expression that is 1 if the given register is in
the window.

@


1.77
log
@* frame.c (find_saved_register): Delete #ifdef
HAVE_REGISTER_WINDOWS code.
* config/sparc/tm-sparc.h: Update comments.
* config/i960/tm-i960.h (HAVE_REGISTER_WINDOWS): Delete macro.
* gdbint.texinfo (Target Architecture Definition): Delete
definition of HAVE_REGISTER_WINDOWS.
@
text
@a3417 6
@@item SKIP_PROLOGUE_FRAMELESS_P
@@findex SKIP_PROLOGUE_FRAMELESS_P
A C expression that should behave similarly, but that can stop as soon
as the function is known to have a frame.  If not defined,
@@code{SKIP_PROLOGUE} will be used instead.

@


1.76
log
@(Releasing GDB, Coding): Fix typos.
@
text
@a3046 4
@@item HAVE_REGISTER_WINDOWS
@@findex HAVE_REGISTER_WINDOWS
Define this if the target has register windows.

@


1.75
log
@* config/pa/tm-hppa.h (FRAME_CHAIN_COMBINE): Delete macro.
* blockframe.c (FRAME_CHAIN_COMBINE): Delete macro.
(get_prev_frame): Do not call FRAME_CHAIN_COMBINE.
* gdbint.texinfo (Target Architecture Definition): Remove
FRAME_CHAIN_COMBINE.
@
text
@d4625 1
a4625 1
@@item IS_DIR_SEPARATOR (@@var{c}
d4927 1
a4927 1
file is better than committing a hack
d4950 2
a4951 2
code) to see there is anything that can be removed from @@value{GDBN} (an
old target, an unused file).
@


1.74
log
@2002-04-12  Michael Chastain  <mec@@shout.net>

	* gdbint.texinfo (Obsolete Conditionals): Remove reference to
	REG_STACK_SEGMENT.
@
text
@a2937 6
@@item FRAME_CHAIN_COMBINE(@@var{chain}, @@var{frame})
@@findex FRAME_CHAIN_COMBINE
Define this to take the frame chain pointer and the frame's nominal
address and produce the nominal address of the caller's frame.
Presently only defined for HP PA.

@


1.73
log
@2002-04-09  Michael Chastain  <mec@@shout.net>

	* gdbint.texinfo (Obsolete Conditionals): Remove references to
	PYRAMID_* macros.
@
text
@a5730 3
@@item REG_STACK_SEGMENT
exec.c

@


1.72
log
@* h8500-tdep.c (h8500_write_fp): Delete function.
* dwarf2cfi.c (cfi_write_fp): Document as not used.
* mips-tdep.c (mips_gdbarch_init): Do not set write_fp.
* ia64-tdep.c (ia64_gdbarch_init): Do not set write_fp.
* m68hc11-tdep.c (m68hc11_gdbarch_init): Do not set write_fp.
* rs6000-tdep.c (rs6000_gdbarch_init): Do not set write_fp.
* s390-tdep.c (s390_gdbarch_init): Do not set write_fp.
(s390_write_fp):
* sh-tdep.c (sh_gdbarch_init): Do not set write_fp.
* x86-64-tdep.c (i386_gdbarch_init): Do not set write_fp.
* d10v-tdep.c (d10v_gdbarch_init): Do not set write_fp.
(d10v_write_fp): Delete function.
* inferior.h (write_fp, generic_target_write_fp): Delete
declarations.
* regcache.c (generic_target_write_fp): Delete function.
(write_fp): Delete function.
* gdbarch.sh (TARGET_WRITE_FP): Delete.
* gdbarch.h, gdbarch.c: Regenerate.
* config/v850/tm-v850.h (TARGET_WRITE_FP): Delete macro.
* config/sparc/tm-sp64.h (TARGET_WRITE_FP): Delete macro.
(sparc64_write_fp): Delete declaration.
* config/h8500/tm-h8500.h (TARGET_WRITE_FP): Delete macro.
(h8500_write_fp): Delete declaration.
@
text
@a5730 7
@@item PYRAMID_CONTROL_FRAME_DEBUGGING
pyr-xdep.c
@@item PYRAMID_CORE
pyr-xdep.c
@@item PYRAMID_PTRACE
pyr-xdep.c

@


1.71
log
@* gdbint.texinfo (Releasing GDB): Revise the section `Before the
Branch'.
@
text
@d2921 2
a2922 2
This should only need to be defined if @@code{TARGET_READ_FP} and
@@code{TARGET_WRITE_FP} are not defined.
a3549 2
@@itemx TARGET_WRITE_FP
@@findex TARGET_WRITE_FP
a3554 1
@@findex write_fp
d3556 3
a3558 3
@@code{read_sp}, @@code{write_sp}, @@code{read_fp} and @@code{write_fp}.
For most targets, these may be left undefined.  @@value{GDBN} will call the read
and write register functions with the relevant @@code{_REGNUM} argument.
@


1.70
log
@s/@@example/@@smallexample/
@
text
@d4992 2
a4993 1
@@section Before the branch
d5001 1
a5001 1
@@subheading Organize and announce the schedule.
d5003 3
a5005 4
The following is a possible schedule.  It is based on the rule-of-thumb
that everything on the Internet takes a week.  You may want to even
increase those times further since an analysis of the actual data
strongly suggests that the below is far to aggressive.
d5007 1
a5007 16
@@itemize @@bullet
@@item
announce it
@@item
wait a week
@@item
announce branch date
@@item
wait a week
@@item
Cut the branch
@@item
wait a week
@@item
start enjoying all the fun
@@end itemize
d5009 3
a5011 4
As an aside, the branch tag name is probably regrettable vis:
@@smallexample
gdb_N_M-YYYY-MM-DD-@@{branch,branchpoint@@}
@@end smallexample
d5021 4
a5024 1
@@file{config.guess} et.@@: al.@@: 
d5027 1
a5027 1
and should be refreshed.
d5029 5
a5033 1
@@subheading Prompt for @@file{gdb/NEWS}
d5035 1
a5035 2
People always forget.  Send a post reminding them but also if you know
something interesting happened add it your self.
d5037 1
a5037 1
@@subheading Review @@file{gdb/README}
d5039 1
a5039 2
Grab one of the nightly snapshots and then walk through the
@@file{gdb/README} looking for anything that can be improved.
d5041 1
a5041 1
@@subheading Check the ARI
a5042 4
ARI is an @@code{awk} script (Awk Regression Indicator?) that checks for a
number of errors and coding conventions.  The checks include things like
using @@code{malloc} instead of @@code{xmalloc} and file naming problems.
There shouldn't be any regressions.
@


1.69
log
@* gdbint.texinfo (Releasing GDB): Add section ``Versions and
Branches''.
@
text
@d242 3
a244 3
@@example
      create_new_frame (read_register (FP_REGNUM), read_pc ()));
@@end example
d456 1
a456 1
@@example
d464 1
a464 1
@@end example
d866 1
a866 1
@@example
d877 1
a877 1
@@end example
d1142 1
a1142 1
@@example
d1165 1
a1165 1
@@end example
d1169 1
a1169 1
@@example
d1206 1
a1206 1
@@end example
d1212 1
a1212 1
@@example
d1227 1
a1227 1
@@end example
d1231 1
a1231 1
@@example
d1247 1
a1247 1
@@end example
d1254 1
a1254 1
@@example
d1257 1
a1257 1
@@end example
d1261 1
a1261 1
@@example
d1268 1
a1268 1
@@end example
d1274 1
a1274 1
@@example
d1280 1
a1280 1
@@end example
d1284 1
a1284 1
@@example
d1297 1
a1297 1
@@end example
d1303 1
a1303 1
@@example
d1307 1
a1307 1
@@end example
d1311 1
a1311 1
@@example
d1319 1
a1319 1
@@end example
d1324 1
a1324 1
@@example
d1328 1
a1328 1
@@end example
d1332 1
a1332 1
@@example
d1340 1
a1340 1
@@end example
d1344 1
a1344 1
@@example
d1348 1
a1348 1
@@end example
d1352 1
a1352 1
@@example
d1355 1
a1355 1
@@end example
d1907 1
a1907 1
@@example
d1924 1
a1924 1
@@end example
d4188 1
a4188 1
@@example
d4196 1
a4196 1
@@end example
d4215 1
a4215 1
@@example
d4221 1
a4221 1
@@end example
d4229 1
a4229 1
@@example
d4235 1
a4235 1
@@end example
d4392 1
a4392 1
@@example
d4400 1
a4400 1
@@end example
d4418 1
a4418 1
@@example
d4420 1
a4420 1
@@end example
d4425 1
a4425 1
@@example
d4428 1
a4428 1
@@end example
d4438 1
a4438 1
@@example
d4444 1
a4444 1
@@end example
d4561 1
a4561 1
@@example
d4566 1
a4566 1
@@end example
d4726 1
a4726 1
@@example
d4728 1
a4728 1
@@end example
d4733 1
a4733 1
@@example
d4735 1
a4735 1
@@end example
d4772 1
a4772 1
@@example
d4774 1
a4774 1
@@end example
d4906 1
a4906 1
@@example
d4910 1
a4910 1
@@end example
d4914 1
a4914 1
@@example
d4918 1
a4918 1
@@end example
d5025 1
a5025 1
@@example
d5027 1
a5027 1
@@end example
d5065 1
a5065 1
@@example
d5074 1
a5074 1
@@end example
d5102 1
a5102 1
@@example
d5114 1
a5114 1
@@end example
d5123 1
a5123 1
@@example
d5129 1
a5129 1
@@end example
d5144 1
a5144 1
@@example
d5152 1
a5152 1
@@end example
d5158 1
a5158 1
@@example
d5166 1
a5166 1
@@end example
d5178 1
a5178 1
@@example
d5187 1
a5187 1
@@end example
d5203 1
a5203 1
@@example
d5208 1
a5208 1
@@end example
d5216 1
a5216 1
@@example
d5234 1
a5234 1
@@end example
d5243 1
a5243 1
@@example
d5247 1
a5247 1
@@end example
d5279 1
a5279 1
@@example
d5281 1
a5281 1
@@end example
d5322 1
a5322 1
@@example
d5328 1
a5328 1
@@end example
d5368 1
a5368 1
@@example
d5374 1
a5374 1
@@end example
d5424 1
a5424 1
@@example
d5433 1
a5433 1
@@end example
@


1.68
log
@* gdbint.texinfo (Releasing GDB): Add the section``Branch Commit
Policy''.
@
text
@d4820 1
d4825 99
@


1.67
log
@	2002-03-04  Fred Fish  <fnf@@redhat.com>
	* gdbint.texinfo: Fix a bunch of typos (alsways, mirrorred,
	expresson, suports, dependant, trhe, perhaphs, situtations,
	explictily, taged, oportunity, unfortunatly).
@
text
@d4825 31
@


1.66
log
@* gdbint.texinfo: Include fdl.texi.
(Top): Add GNU Free Documentation License.
* Makefile.in (SFILES_INCLUDED): Add gpl.texi.
(gdbint.dvi, gdbint.pdf, gdbint.info): Add dependency on fdl.texi.
(gdbint_toc.html): Add dependency on gdb-cfg.texi and fdl.texi.
(gdbint.info): Add srcdir to include path.
* gdb.texinfo: Include gpl.texi.
(Top): Add Copying.
* gpl.texi: New file.
@
text
@d294 1
a294 1
notably the 32-bit x86 platforms, @@value{GDBN} cannot alsways know
d631 2
a632 2
the function looks for a vacant debug register, sets its mirrorred
value to @@var{addr}, sets the mirrorred value of DR7 Debug Control
d641 2
a642 2
in the mirrorred value of the debug register and its read/write and
length bits in the mirrorred value of DR7, then passes these new
d2733 1
a2733 1
A C expresson that is non-zero when the target suports inferior function
d3021 1
a3021 1
If defined and non-zero, enables suport for multiple architectures
d3026 1
a3026 1
a multi-arch definition of all architecture dependant macros will be
d3040 1
a3040 1
trhe header file @@file{setjmp.h} is needed to define it.
d3773 1
a3773 1
purpose, the @@file{.mh} suffix remains.  Perhaphs someone will
d4506 2
a4507 2
Internal errors include situtations where @@value{GDBN} has detected, at
run time, a corrupt or erroneous situtation.
d4554 1
a4554 1
a header file should explictily include the header declaring any
d4949 1
a4949 1
the trunk is first taged so that the branch point can easily be found
d5138 1
a5138 1
is very much worth it.  Other developers are given the oportunity to
d5144 1
a5144 1
This is where, unfortunatly, the notes just get vague.
@


1.66.2.1
log
@(Releasing GDB, Coding): Fix typos.
@
text
@d4634 1
a4634 1
@@item IS_DIR_SEPARATOR (@@var{c})
d4828 2
a4829 2
code) to see if there is anything that can be removed from @@value{GDBN}
(an old target, an unused file).
@


1.65
log
@s/cygnus.com/.../
@
text
@d96 2
d5629 2
@


1.64
log
@* gdbarch.sh (PRINT_FLOAT_INFO): Add rule.
* gdbarch.c gdbarch.h: Regenerate.
* arch-utils.c (default_print_float_info): New function.
* arch-utils.h (default_print_float_info): Prototype it.
* infcmd.c (float_info): Call PRINT_FLOAT_INFO.
* doc/gdbint.texinfo (FLOAT_INFO): Mark as deprecated.
(PRINT_FLOAT_INFO): Document it.

* arm-tdep.c (arm_print_float_info): Renamed from arm_float_info.
* config/arm/tm-arm.h (FLOAT_INFO): Delete.
(PRINT_FLOAT_INFO): Define.
@
text
@d5595 1
a5595 1
@@email{gdb-patches@@@@sourceware.cygnus.com, the @@value{GDBN} maintainers}.
@


1.63
log
@Revise and update ``Releasing GDB''.
@
text
@d2867 5
d2912 1
a2912 2
If defined, then the @@samp{info float} command will print information about
the processor's floating point unit.
@


1.62
log
@* arch-utils.c (TARGET_BYTE_ORDER_DEFAULT): Delete macro.
(target_byte_order): Initialize to BFD_ENDIAN_BIG.
(initialize_current_architecture): Update target_byte_order using
information from BFD.
* config/powerpc/tm-ppcle-eabi.h (TARGET_BYTE_ORDER_DEFAULT):
* config/mcore/tm-mcore.h (TARGET_BYTE_ORDER_DEFAULT):
* config/arm/tm-arm.h (TARGET_BYTE_ORDER_DEFAULT): Delete.

Update doco.
@
text
@d4819 1
a4819 1
@@section Before the branch
d4821 11
a4831 12
The most important objective at this stage is to find and fix simple
changes that become a pain to track once the branch is created.  For
instance, configuration problems that stop @@value{GDBN} from even
building.  If you can't get the problem fixed, document it in the
@@file{PROBLEMS} file.

@@subheading Obsolete any code

Mark as @@kbd{OBSOLETE} any uninteresting targets or code files.  This
has a number of steps and is slow --- mainly to ensure that people have
had a reasonable chance to respond.  Remember, everything on the
internet takes a week.
d4837 1
a4837 1
wait a week
d4844 3
a4846 1
post / commit the change
d4849 5
a4853 1
@@subheading Refresh any imported files.
d4855 1
a4855 1
A number of files are taken from external repositories.  They include:
d4857 5
a4861 8
@@itemize @@bullet
@@item
@@file{texinfo/texinfo.tex}
@@item
@@file{config.guess} et.@@: al.@@: 
@@end itemize

and should be refreshed.
d4888 3
a4890 1
@@file{gdb_N_M-YYYY-MM-DD-@@{branch,branchpoint@@}}.
d4892 1
d4894 68
a4961 1
@@section Building a Release
d4966 8
a4973 3
$  b=gdb_5_1_0_1-2002-01-03-branch
$  v=5.1.0.1
$  cd /sourceware/snapshot-tmp/gdbadmin-tmp/$b
d4976 1
d4979 4
a4982 3
NB: Check the autoconf version carefully.  You want to be using
@@file{gdbadmin}'s version (which is really the version taken from the
binutils snapshot).  SWARE may have a different version installed.
d4987 2
a4988 1
$  for m in gdb insight dejagnu; do
d4991 1
d4995 9
a5003 2
isn't any confusion between what is written here and what CVS really
does.
d5005 1
a5005 1
@@subheading Update the file @@file{gdb/version.in} where applicable.
d5008 7
a5014 1
$ for m in gdb insight; do echo $v > $m/src/gdb/version.in ; done
d5017 1
d5019 1
a5019 1
@@subheading Mutter something about creating a @@file{ChangeLog} entry. (both trunk and branch).
d5022 2
a5023 1
$  emacs gdb/src/gdb/version.in
d5025 1
a5025 1
Bump version to 5.1.0.1.
d5027 2
d5031 7
a5037 1
ditto for @@file{insight/src/gdb/version.in}
d5039 1
a5039 5
@@subheading Mutter something about updating @@file{README}

For dejagnu, edit @@file{dejagnu/src/dejagnu/configure.in} and set it to
gdb-$v and then regenerate configure.  Mention this in the dejagnu
@@file{ChangeLog}.
d5042 2
a5043 1
$  emacs dejagnu/src/dejagnu/configure.in
d5046 1
a5046 2
Bump version to 5.1.0.1.
* configure: Re-generate.
d5048 2
a5049 1
$  ( cd dejagnu/src/dejagnu && autoconf )
d5052 13
a5064 1
@@subheading Build the snapshot:
d5067 2
a5068 1
$  for m in gdb insight dejagnu; do
d5073 32
a5104 1
@@subheading Do another @@kbd{CVS update} to see what the damage is.
d5107 3
a5109 1
$ ( cd gdb/src && cvs -q update )
d5112 67
a5178 3
You're looking for files that have mysteriously disappeared as the
@@kbd{distclean} has the habit of deleting files it shouldn't.  Watch out
for the @@file{version.in} update cronjob.
d5180 4
a5183 1
@@subheading Copy all the @@file{.bz2} files to the ftp directory:
d5186 5
a5190 1
cp */src/*.bz2 ~ftp/.....
d5193 10
a5202 1
@@subheading Something about @@kbd{gzip}'ing them.
d5204 1
a5204 1
@@subheading Something about web pages?
d5206 3
a5208 1
@@subheading Something about documentation?
d5210 1
a5210 1
@@subheading Cleanup the release tree
d5212 3
a5214 1
In particular you'll need to:
d5218 3
a5220 1
Commit the changes to @@file{ChangeLog} and @@file{version.in}
d5222 3
a5224 1
Tag the repository.
d5227 26
d5254 2
a5255 1
@@section After the release
d5257 1
a5257 1
Remove any @@kbd{OBSOLETE} code.
d5259 1
@


1.61
log
@Eliminate texinfo 3.12 hacks.
@
text
@a3473 6
@@item TARGET_BYTE_ORDER_DEFAULT
@@findex TARGET_BYTE_ORDER_DEFAULT
The ordering of bytes in the target.  This must be either
@@code{BFD_ENDIAN_BIG} or @@code{BFD_ENDIAN_LITTLE}.  This macro replaces
@@code{TARGET_BYTE_ORDER} which is deprecated.

@


1.60
log
@Assume TARGET_BYTE_ORDER_SELECTABLE{,_P} is always true.
@
text
@a66 2
@@c TeX can handle the contents at the start but makeinfo 3.12 can not
@@iftex
a67 1
@@end iftex
a5370 8

@@c TeX can handle the contents at the start but makeinfo 3.12 can not
@@ifinfo
@@contents
@@end ifinfo
@@ifhtml
@@contents
@@end ifhtml
@


1.59
log
@Remove assumption that there is a host.
@
text
@a3482 6
@@item TARGET_BYTE_ORDER_SELECTABLE_P
@@findex TARGET_BYTE_ORDER_SELECTABLE_P
Non-zero if the target has both @@code{BIG_ENDIAN} and
@@code{BFD_ENDIAN_LITTLE} variants.  This macro replaces
@@code{TARGET_BYTE_ORDER_SELECTABLE} which is deprecated.

@


1.58
log
@Eliminate IEEE_FLOAT.
@
text
@a2022 5
@@emph{Maintainer's note: In theory, new targets no longer need to use
the host framework described below.  Instead it should be possible to
handle everything using autoconf.  Patches eliminating this framework
welcome.}

d2024 2
a2025 1
definition machinery anymore.
d2031 4
a2034 4
Most of @@value{GDBN}'s host configuration support happens via
Autoconf.  New host-specific definitions should be rarely needed.
@@value{GDBN} still uses the host-specific definitions and files listed
below, but these mostly exist for historical reasons, and should
a2036 2
Several files control @@value{GDBN}'s configuration for host systems:

d2039 6
a2044 3
Specifies Makefile fragments needed when hosting on machine @@var{xyz}.
Optionally specifies the header file which describes host @@var{xyz}, by
defining @@code{XM_FILE= xm-@@var{xyz}.h}.  You can also define @@code{CC},
d2048 2
d2051 10
a2060 3
(@@file{xm.h} is a link to this file, created by @@code{configure}).  Contains C
macro definitions describing the host system environment, such as byte
order, host C compiler and library.
d3771 1
a3771 1
Specifies Makefile fragments needed when hosting @@emph{or native} on
d3779 7
d4760 7
@


1.57
log
@Eliminate MALLOC_INCOMPATIBLE.
@
text
@a3073 4
@@item IEEE_FLOAT
@@findex IEEE_FLOAT
Define this if the target system uses IEEE-format floating point numbers.

@


1.56
log
@Remove XDEPFILES from GDB.
@
text
@a2208 4
@@item MALLOC_INCOMPATIBLE
Define this if the system's prototype for @@code{malloc} differs from the
@@sc{ansi} definition.

@


1.55
log
@Doh.  s/kdb/kbd/
@
text
@a2043 1
@@vindex XDEPFILES
d2046 4
a2049 6
In particular, this lists the required machine-dependent object files,
by defining @@samp{XDEPFILES=@@dots{}}.  Also specifies the header file
which describes host @@var{xyz}, by defining @@code{XM_FILE=
xm-@@var{xyz}.h}.  You can also define @@code{CC}, @@code{SYSV_DEFINE},
@@code{XM_CFLAGS}, @@code{XM_ADD_FILES}, @@code{XM_CLIBS}, @@code{XM_CDEPS},
etc.; see @@file{Makefile.in}.
a2055 5
@@item gdb/@@var{xyz}-xdep.c
Contains any miscellaneous C code required for this machine as a host.
On most machines it doesn't exist at all.  If it does exist, put
@@file{@@var{xyz}-xdep.o} into the @@code{XDEPFILES} line in
@@file{gdb/config/@@var{arch}/@@var{xyz}.mh}.
@


1.54
log
@* gdbint.texinfo (Releasing GDB): New chapter.
@
text
@d4970 1
a4970 1
@@subheading Do another @@kpd{CVS update} to see what the damage is.
@


1.53
log
@Review cleanups() section.  Add examples.
@
text
@d96 1
d4824 184
@


1.52
log
@s/BIG_ENDIAN/BFD_ENDIAN_BIG/
@
text
@d4157 1
a4157 5
later.  When your code does something (like @@code{malloc} some memory,
or open a file) that needs to be undone later (e.g., free the memory or
close the file), it can make a cleanup.  The cleanup will be done at
some future point: when the command is finished, when an error occurs,
or when your code decides it's time to do cleanups.
d4159 8
a4166 2
You can also discard cleanups, that is, throw them away without doing
what they say.  This is only done if you ask that it be done.
d4178 4
a4181 4
handle that can be passed to @@code{do_cleanups} or
@@code{discard_cleanups} later.  Unless you are going to call
@@code{do_cleanups} or @@code{discard_cleanups} yourself, you can ignore
the result from @@code{make_cleanup}.
d4185 13
a4197 2
Perform all cleanups done since @@code{make_cleanup} returned
@@var{old_chain}.  E.g.:
d4201 30
a4230 1
old = make_cleanup (b, 0); 
d4234 5
a4238 4
@@noindent
will call @@code{b()} but will not call @@code{a()}.  The cleanup that
calls @@code{a()} will remain in the cleanup chain, and will be done
later unless otherwise discarded.@@refill
d4240 7
a4246 5
@@findex discard_cleanups
@@item discard_cleanups (@@var{old_chain});
Same as @@code{do_cleanups} except that it just removes the cleanups from
the chain and does not call the specified functions.
@@end table
@


1.51
log
@s/value_ptr/struct value */
@
text
@d3489 1
a3489 1
@@code{BIG_ENDIAN} or @@code{BFD_ENDIAN_LITTLE}.  This macro replaces
@


1.50
log
@Fix the application of GFDL in the Copyright notice.
@
text
@d11 1
a11 1
Copyright 1990,1991,1992,1993,1994,1996,1998,1999,2000,2001
d2428 1
a2428 1
@@deftypefun CORE_ADDR value_as_address (value_ptr @@var{val})
@


1.49
log
@* gdbint.texinfo (TARGET_CHAR_SIGNED): Document.
@
text
@d18 3
a20 4
any later version published by the Free Software Foundation; with the
Invariant Sections being ``Algorithms'' and ``Porting GDB'', with the
Front-Cover texts being ``A GNU Manual,'' and with the Back-Cover
Texts as in (a) below.
d58 3
a60 4
any later version published by the Free Software Foundation; with the
Invariant Sections being ``Algorithms'' and ``Porting GDB'', with the
Front-Cover texts being ``A GNU Manual,'' and with the Back-Cover
Texts as in (a) below.
@


1.48
log
@LITTLE_ENDIAN -> BFD_ENDIAN_LITTLE
@
text
@d3504 11
@


1.47
log
@Delete HOST_BYTE_ORDER.
@
text
@d3491 1
a3491 1
@@code{BIG_ENDIAN} or @@code{LITTLE_ENDIAN}.  This macro replaces
d3497 1
a3497 1
@@code{LITTLE_ENDIAN} variants.  This macro replaces
@


1.46
log
@Fix obvious typo (Bourn -> Bourne)
@
text
@a2168 5
@@item HOST_BYTE_ORDER
@@cindex byte order
The ordering of bytes in the host.  This must be defined to be either
@@code{BIG_ENDIAN} or @@code{LITTLE_ENDIAN}.

@


1.45
log
@* gdbint.texinfo (TARGET_RANGE_PROFITABLE_FOR_HW_WATCHPOINT):
Delete documentation; this macro has been removed from the
sources.
@
text
@d2326 1
a2326 1
using the Bourn shell script @@file{gdbarch.sh}.
@


1.44
log
@* gdbint.texinfo (COERCE_FLOAT_TO_DOUBLE): Clarify.
@
text
@a448 9
@@findex TARGET_RANGE_PROFITABLE_FOR_HW_WATCHPOINT
@@item TARGET_RANGE_PROFITABLE_FOR_HW_WATCHPOINT (@@var{pid},@@var{start},@@var{len})
Some addresses may not be profitable to use hardware to watch, or may
be difficult to understand when the addressed object is out of scope,
and hence should not be watched with hardware watchpoints.  On some
targets, this may have severe performance penalties, such that we
might as well use regular watchpoints, and save (possibly precious)
hardware watchpoints for other locations.

@


1.43
log
@	* gdb.texinfo (gdbarch_in_function_epilogue_p): Add documentation.
@
text
@d2818 11
a2828 5
If we are calling a function by hand, and the function was declared
(according to the debug info) without a prototype, should we
automatically promote @@code{float}s to @@code{double}s?  This macro
must evaluate to non-zero if we should, or zero if we should leave the
value alone.
d2830 13
a2842 7
The argument @@var{actual} is the type of the value we want to pass to
the function.  The argument @@var{formal} is the type of this argument,
as it appears in the function's definition.  Note that @@var{formal} may
be zero if we have no debugging information for the function, or if
we're passing more arguments than are officially declared (for example,
varargs).  This macro is never invoked if the function definitely has a
prototype.
a2843 1
@@findex set_gdbarch_coerce_float_to_double
d2845 13
a2857 8
The default behavior is to promote only when we have no type information
for the formal parameter.  This is different from the obvious behavior,
which would be to promote whenever we have no prototype, just as the
compiler does.  It's annoying, but some older targets rely on this.  If
you want @@value{GDBN} to follow the typical compiler behavior---to always
promote when there is no prototype in scope---your gdbarch @@code{init}
function can call @@code{set_gdbarch_coerce_float_to_double} and select
the @@code{standard_coerce_float_to_double} function.
@


1.42
log
@Approved by kev@@cygnus.com
ChangeLog entry:

	2001-11-01  Fred Fish  <fnf@@redhat.com>

	* coff-solib.c (coff_solib_add): Add new readsyms arg.
	* irix5-nat.c (solib_add): Ditto.
	* osfsolib.c (solib_add): Ditto.
	* pa64solib.c (pa64_solib_add): Ditto.
	* pa64solib.c (add_to_solist): Ditto.
	* pa64solib.c (read_dld_descriptor): Ditto.
	* solib.c (solib_add): Ditto.
	* somsolib.c (som_solib_add): Ditto.
	* win32-nat.c (child_solib_add): Ditto.
	* xcoffsolib.c (solib_add): Ditto.

	* coff-solib.h (coff_solib_add): Add new readsyms arg to prototype.
	* pa64solib.c (add_to_solist): Ditto.
	* pa64solib.c (read_dld_descriptor): Ditto.
	* pa64solib.h (pa64_solib_add): Ditto.
	* solib.h (solib_add): Ditto.
	* somsolib.h (som_solib_add): Ditto.
	* config/i386/tm-cygwin.h (child_solib_add): Ditto.

	* coff-solib.c (coff_solib_add):  If readsyms is zero don't read
	symbols but do any other needed work for shared libs.
	* irix5-nat.c: Ditto.
	* osfsolib.c (solib_add): Ditto.
	* solib.c (solib_add): Ditto.
	* win32-nat.c (child_solib_add): Ditto.
	* xcoffsolib.c (solib_add): Ditto.

	* irix5-nat.c (sharedlibrary_command): Pass 1 as readsyms to
	solib_add to force reading of shared library symbols.
	* osfsolib.c (sharedlibrary_command;): Ditto.
	* pa64solib.c (pa64_solib_sharedlibrary_command): Ditto.
	* solib.c (sharedlibrary_command): Ditto.
	* somsolib.c (som_solib_sharedlibrary_command): Ditto.
	* xcoffsolib.c (sharedlibrary_command): Ditto.

	* coff-solib.c (coff_solib_create_inferior_hook): Call solib_add
	unconditionally with auto_solib_add.
	* irix5-nat.c (solib_create_inferior_hook): Ditto.
	* osfsolib.c (solib_create_inferior_hook): Ditto.
	* solib.c (solib_create_inferior_hook): Ditto.
	* solib-osf.c (osf_solib_create_inferior_hook): Ditto.
	* solib-svr4.c (enable_break): Ditto.
	* solib-sunos.c (sunos_solib_create_inferior_hook): Ditto.

	* corelow.c (solib_add_stub): Add auto_solib_add to args passed
	via SOLIB_ADD.
	* sol-thread.c (sol_thread_attach): Ditto.
	* config/rs6000/nm-rs6000.h (SOLIB_ADD): Ditto.

	* infcmd.c (attach_command): Remove auto_solib_add decl.
	Call SOLIB_ADD directly with auto_solib_add.
	* infrun.c (handle_inferior_event): Ditto.

	* coff-solib.h (SOLIB_ADD): Add readsyms arg.
	* pa64solib.h (SOLIB_ADD): Ditto.
	* solib.h (SOLIB_ADD): Ditto.
	* somsolib.h (SOLIB_ADD): Ditto.
	* config/i386/tm-cygwin.h (SOLIB_ADD): Ditto.

	* fork-child.c (clone_and_follow_inferior): Remove unused
	auto_solib_add decl.

	* pa64solib.c (pa64_solib_add): Call add_to_solist with readsyms.
	(read_dld_descriptor): Ditto.
	(pa64_solib_add): Call read_dld_descriptor with	readsyms.
	(pa64_solib_in_dynamic_linker): Ditto.

	* corelow.c (symfile.h): Need this for auto_solib_add declaration.
	* sol-thread.c (symfile.h): Ditto.

Approved by eliz@@is.elta.co.il
doc/ChangeLog entry:

	2001-11-01  Fred Fish  <fnf@@redhat.com>

	* gdbint.texinfo (SOLIB_ADD): Document additional new
	"readsyms" arg.
@
text
@d3107 7
@


1.41
log
@* value.h (value_as_address): Rename value_as_pointer.
* eval.c, findvar.c, gnu-v2-abi.c, gnu-v3-abi.c, jv-lang.c,
jv-valprint.c, printcmd.c, stack.c, top.c, valarith.c, valops.c,
values.c: Update.
@
text
@d4003 1
a4003 1
@@item SOLIB_ADD (@@var{filename}, @@var{from_tty}, @@var{targ})
d4006 3
a4008 1
@@var{filename} to be added to @@value{GDBN}'s symbol table.
@


1.40
log
@Add INTEGER_TO_ADDRESS to hadle nasty harvard architectures that do
funnies to integer to address conversions.
@
text
@d2444 1
a2444 1
@@deftypefun CORE_ADDR value_as_pointer (value_ptr @@var{val})
@


1.39
log
@* gdbint.texinfo (Host Definition): Remove description of
MEM_FNS_DECLARED.
@
text
@d45 1
a45 1
\xdef\manvers{\$Revision: 1.142 $}  % For use in headers, footers too
d2492 1
a2492 1
simple byte addresses.
d3143 23
@


1.38
log
@* gdbint.texinfo (Host Definition): Remove description of R_OK.
@
text
@a2119 5
@@item MEM_FNS_DECLARED
Your host config file defines this if it includes declarations of
@@code{memcpy} and @@code{memset}.  Define this to avoid conflicts between
the native include files and the declarations in @@file{defs.h}.

@


1.37
log
@* gdbint.texinfo (Host Definition): Remove description of
HAVE_SIGSETMASK.
@
text
@a2299 3
@@item R_OK
Define if this is not in a system header file (typically, @@file{unistd.h}).

@


1.36
log
@2001-09-04  Elena Zannoni  <ezannoni@@redhat.com>

        * gdbint.texinfo (Target Architecture Definition): Add
        explanation of TARGET_PRINT_INSN macro.
@
text
@a2179 5
@@item HAVE_SIGSETMASK
@@findex sigsetmask
Define this if the host system has job control, but does not define
@@code{sigsetmask}.  Currently, this is only true of the RS/6000.

@


1.35
log
@* gdbint.texinfo: Add a cautionary note about macro use.
@
text
@d3569 12
@


1.34
log
@        * gdbint.texinfo: Remove extraneous START-INFO-DIR-ENTRY
        and END-INFO-DIR-ENTRY.
@
text
@d4398 2
@


1.33
log
@* gdbint.texinfo (libgdb): Rewrite.
@
text
@a5 1
START-INFO-DIR-ENTRY
a6 1
END-INFO-DIR-ENTRY
@


1.33.2.1
log
@        * gdbint.texinfo: Remove extraneous START-INFO-DIR-ENTRY
        and END-INFO-DIR-ENTRY.
@
text
@d6 1
d8 1
@


1.33.2.2
log
@* gdbint.texinfo: Add a cautionary note about macro use.
@
text
@a4397 2
(But if you have to use a macro, make sure that the macro arguments are
protected with parentheses.)
@


1.33.2.2.4.1
log
@Fix copyright notice problems in 5.1.
@
text
@d18 4
a21 3
any later version published by the Free Software Foundation; with no
Invariant Sections, with the Front-Cover Texts being ``A GNU Manual,''
and with the Back-Cover Texts as in (a) below.
d59 4
a62 3
any later version published by the Free Software Foundation; with no
Invariant Sections, with the Front-Cover Texts being ``A GNU Manual,''
and with the Back-Cover Texts as in (a) below.
@


1.33.2.3
log
@Fix the use of GFDL in the Copyright notice.
@
text
@d18 4
a21 3
any later version published by the Free Software Foundation; with no
Invariant Sections, with the Front-Cover Texts being ``A GNU Manual,''
and with the Back-Cover Texts as in (a) below.
d59 4
a62 3
any later version published by the Free Software Foundation; with no
Invariant Sections, with the Front-Cover Texts being ``A GNU Manual,''
and with the Back-Cover Texts as in (a) below.
@


1.32
log
@* gdbint.texinfo (Host Definition): Remove description of
NEED_POSIX_SETPGID.
@
text
@d90 1
d1375 1
a1375 1
@@section libgdb
d1377 8
d1386 102
a1487 2
@@code{libgdb} was an abortive project of years ago.  The theory was to
provide an API to @@value{GDBN}'s functionality.
@


1.31
log
@Three misspellings.
@
text
@a2144 5
@@item NEED_POSIX_SETPGID
@@findex setpgid
Define this to use the POSIX version of @@code{setpgid} to determine
whether job control is available.

@


1.30
log
@* gdbint.texinfo (User Interface): Update ui-out documentation to
refelect recent UI/MI updates.
@
text
@d129 1
a129 1
picky), since source code lives for a long time usuazlly, the
d312 1
a312 1
must be writeable, so this technique won't work on programs in ROM.  It
d4924 1
a4924 1
bureacracy and filed with the FSF.  We can't start merging changes until
@


1.29
log
@* gdbint.texinfo (Target Architecture Definition): GDBARCH is a C
structure and not macros.
(Host Definition): Document that much of this chapter is obsolete.
(Target Architecture Definition): Update list of files that make
up a target architecture.
(Coding): Update.
@
text
@d746 1
a746 1
The first time a comamnd is used the user will be warned and offered a
d811 2
a812 2
annotation, whose purpose is to help a GUI (such as GDBTK or Emacs) to
identify interesting parts in the output
d816 2
a817 2
Annotations are provided by separate annotation routines.  Note that
use of annotations for an interface between a GUI and @@value{GDBN} is
d820 15
a834 15
Output can be in the form of a single item, which we call a
@@dfn{field}; a @@dfn{list} of fields; or a @@dfn{table}, which is a list
of fields with a header.  In a BNF-like form:

@@example
<field> ::= any single item of data kept by gdb ;;

<list> ::= @@{ <field> @@} ;;

<table> ::= <header> @@{ <list> @@} ;;

<header> ::= @@{ <column> @@} ;;

<column> ::= <width> <alignment> <title> ;;
@@end example
d839 10
a848 10
All @@code{ui_out} routines currently are of type @@code{void}, except
for @@code{ui_out_stream_new} which returns a pointer to the newly
created object.

The first parameter is always the @@code{ui_out} vector object, a
pointer to a @@code{struct ui_out}.

The @@var{format} parameter is like in @@code{printf} family of
functions.  When it is present, there is usually also a variable list
of arguments used to satisfy the @@code{%} specifiers in the supplied
d851 2
a852 2
When a character string argument is not used in a @@code{ui_out}
function call, a @@code{NULL} pointer has to be supplied instead.
d855 1
a855 1
@@subsection Table and List Functions
d859 12
a870 17
This section introduces @@code{ui_out} routines for building lists and
tables.  The routines to output the actual data items (fields) are
presented in the next section.

To recap: A @@dfn{list} is a sequence of @@dfn{fields} with information
about an object; a @@dfn{table} is a list of lists, each on a separate
line, prefixed by a @@dfn{header} line with the column @@dfn{titles}.

Use the table functions if your output is composed of a list of fields
for several objects and the console output should have a header.  Use
this even when you are listing just one object but you still want the
header.

Use the list functions for the output of each object of a table or if
your output consists of a single list of fields.

You can nest a list into a table, but not the other way around.
d873 2
a874 3
Lists can also be nested: some of your fields may be lists or
@@dfn{tuples}--@@code{@@{@@var{name},@@var{value}@@}} pairs.  The maximum
nesting level is currently 4.
d881 1
a881 1
    ...
d883 1
a883 1
      ui_out_list_begin
d885 3
a887 3
        ...
      ui_out_list_end
      ...
d891 1
a891 1
Here's the description of table- and list-related @@code{ui_out}
d894 9
a902 8
@@deftypefun void ui_out_table_begin (struct ui_out *@@var{uiout}, int @@var{nbrofcols}, char *@@var{tblid})
The function @@code{ui_out_table_begin} marks the beginning of the
output of a table.  It should always be called before any other
@@code{ui_out} function for a given table.  @@var{nbrofcols} is the
number of columns in the table, and @@var{tblid} is an optional string
identifying the table.  The string pointed to by @@var{tblid} is copied
by the implementation of @@code{ui_out_table_begin}, so the application
can free the string if it was @@code{malloc}ed.
d908 5
a912 5
@@deftypefun void ui_out_table_header (struct ui_out *@@var{uiout}, int @@var{width}, enum ui_align @@var{alignment}, char *@@var{colhdr})
@@code{ui_out_table_header} provides the header information for a
single table column.  You call this function several times, one each
for every column of the table, after @@code{ui_out_table_begin}, but
before @@code{ui_out_table_body}.
d919 2
a920 2
column header strings in @@code{malloc}ed storage can be freed after
the call.
d924 1
a924 3
This function marks the end of header information and the beginning of
table body output.  It doesn't by itself produce any data output; that
is done by the list and field output functions described below.
d928 3
a930 3
This function signals the end of a table's output.  It should be
called after the table body has been produced by the list and field
output functions.
d933 2
a934 2
call to @@code{ui_out_table_begin}, otherwise the @@code{ui_out}
functions will signal an internal error.
d937 1
a937 1
The output of the lists that represent the table rows must follow the
d939 2
a940 2
@@code{ui_out_table_end}.  You produce the lists by calling
@@code{ui_out_list_begin} and @@code{ui_out_list_end}, with suitable
d943 32
a974 5
@@deftypefun void ui_out_list_begin (struct ui_out *@@var{uiout}, char *@@var{lstid})
This function marks the beginning or a list output.  @@var{lstid}
points to an optional string that identifies the list; it is copied by
the implementation, and so strings in @@code{malloc}ed storage can be
freed after the call.
d978 10
a987 4
This function signals an end of a list output.  There should be
exactly one call to @@code{ui_out_list_end} for each call to
@@code{ui_out_list_begin}, otherwise an internal @@value{GDBN} error
will be signaled.
d1012 1
a1012 1
@@deftypefun void ui_out_field_int (struct ui_out *@@var{uiout}, char *@@var{fldname}, int @@var{value})
d1018 1
a1018 1
@@deftypefun void ui_out_field_core_addr (struct ui_out *@@var{uiout}, char *@@var{fldname}, CORE_ADDR @@var{address})
d1022 1
a1022 1
@@deftypefun void ui_out_field_string (struct ui_out *@@var{uiout}, char *@@var{fldname}, const char *@@var{string})
d1054 1
a1054 1
@@deftypefun void ui_out_field_stream (struct ui_out *@@var{uiout}, char *@@var{fieldname}, struct ui_stream *@@var{streambuf})
d1089 1
a1089 1
@@deftypefun void ui_out_field_skip (struct ui_out *@@var{uiout}, char *@@var{fldname})
d1095 1
a1095 1
@@deftypefun void ui_out_text (struct ui_out *@@var{uiout}, char *@@var{string})
d1114 1
a1114 1
@@deftypefun void ui_out_message (struct ui_out *@@var{uiout}, int @@var{verbosity}, char *@@var{format}, ...)
d1182 27
a1208 5
 if (!found_a_breakpoint++)
   @@{
     annotate_breakpoints_headers ();
     if (addressprint)
       ui_out_table_begin (ui, 6);
d1210 8
a1217 21
       ui_out_table_begin (ui, 5);

     annotate_field (0);
     ui_out_table_header (ui, 4, left, "Num");
     annotate_field (1);
     ui_out_table_header (ui, 15, left, "Type");
     annotate_field (2);
     ui_out_table_header (ui, 5, left, "Disp");
     annotate_field (3);
     ui_out_table_header (ui, 4, left, "Enb");
     if (addressprint)
       @@{
         annotate_field (4);
         ui_out_table_header (ui, 11, left, "Address");
       @@}
     annotate_field (5);
     ui_out_table_header (ui, 40, left, "What");

     ui_out_table_body (ui);
     annotate_breakpoints_table ();
   @@}
d1238 1
d1245 1
a1245 1
   ui_out_list_begin (uiout, "bkpt");
d1258 1
@


1.28
log
@* gdbint.texinfo (Target Architecture Definition): Update
EXTRACT_STRUCT_VALUE_ADDRESS and EXTRACT_STRUCT_VALUE_ADDRESS_P.
The latter has been changed to a true predicate.
@
text
@d1889 5
d2207 3
a2209 2
At present, the target architecture definition consists of a number of C
macros.
d2393 5
d3467 1
a3467 1
The following files define a target to @@value{GDBN}:
a3481 5
@@item gdb/config/@@var{arch}/tm-@@var{ttt}.h
(@@file{tm.h} is a link to this file, created by @@code{configure}).  Contains
macro definitions about the target machine's registers, stack frame
format and instructions.

d3490 14
d3510 2
a3511 3
@@item gdb/@@var{arch}-tdep.c
Similarly, there are often common subroutines that are shared by all
target machines that use this particular architecture.
d4061 3
a4063 3
FTP from GNU archive sites.  @@value{GDBN} takes a strict interpretation of the
standard; in general, when the GNU standard recommends a practice but
does not require it, @@value{GDBN} requires it.
d4068 47
d4116 51
a4166 6
You can configure with @@samp{--enable-build-warnings} or
@@samp{--enable-gdb-build-warnings} to get GCC to check on a number of
these rules.  @@value{GDBN} sources ought not to engender any complaints,
unless they are caused by bogus host systems.  (The exact set of enabled
warnings is currently @@samp{-Wimplicit -Wreturn-type -Wcomment
-Wtrigraphs -Wformat -Wparentheses -Wpointer-arith -Wuninitialized}.
d4174 20
a4193 8
Note that while in a definition, the function's name must be in column
zero; in a function declaration, the name must be on the same line as
the return type.

In addition, there must be a space between a function or macro name and
the opening parenthesis of its argument list (except for macro
definitions, as required by C).  There must not be a space after an open
paren/bracket or before a close paren/bracket.
d4197 17
a4213 3
after the end of a program line (as of 1/99, some 600 lines had whitespace
after the semicolon).  Excess whitespace causes difficulties for
@@code{diff} and @@code{patch} utilities.
d4220 2
a4221 2
Block comments must appear in the following form, with no @@samp{/*}- or
@@samp{*/}-only lines, and no leading @@samp{*}:
d4258 8
d4267 1
d4269 4
a4272 5
@@cindex function prototypes
Prototypes must be used to @@emph{declare} functions, and may be used
to @@emph{define} them.  Prototypes for @@value{GDBN} functions must
include both the argument type and name, with the name matching that
used in the actual function definition.
d4279 72
a4350 2
All static functions must be declared in a block near the top of the
source file.
d4395 1
a4395 42
target interfaces, or hosts, is not acceptable in generic code.  If a
hook is needed at that point, invent a generic hook and define it for
your configuration, with something like:

@@example
#ifdef	WRANGLE_SIGNALS
   WRANGLE_SIGNALS (signo);
#endif
@@end example

In your host, target, or native configuration file, as appropriate,
define @@code{WRANGLE_SIGNALS} to do the machine-dependent thing.  Take a
bit of care in defining the hook, so that it can be used by other ports
in the future, if they need a hook in the same place.

If the hook is not defined, the code should do whatever ``most'' machines
want.  Using @@code{#ifdef}, as above, is the preferred way to do this,
but sometimes that gets convoluted, in which case use

@@example
#ifndef SPECIAL_FOO_HANDLING
#define SPECIAL_FOO_HANDLING(pc, sp) (0)
#endif
@@end example

@@noindent
where the macro is used or in an appropriate header file.

Whether to include a @@dfn{small} hook, a hook around the exact pieces of
code which are system-dependent, or whether to replace a whole function
with a hook, depends on the case.  A good example of this dilemma can be
found in @@code{get_saved_register}.  All machines that @@value{GDBN} 2.8 ran on
just needed the @@code{FRAME_FIND_SAVED_REGS} hook to find the saved
registers.  Then the SPARC and Pyramid came along, and
@@code{HAVE_REGISTER_WINDOWS} and @@code{REGISTER_IN_WINDOW_P} were
introduced.  Then the 29k and 88k required the @@code{GET_SAVED_REGISTER}
hook.  The first three are examples of small hooks; the latter replaces
a whole function.  In this specific case, it is useful to have both
kinds; it would be a bad idea to replace all the uses of the small hooks
with @@code{GET_SAVED_REGISTER}, since that would result in much
duplicated code.  Other times, duplicating a few lines of code here or
there is much cleaner than introducing a large number of small hooks.
d4481 5
a4485 1
Don't put debugging @@code{printf}s in the code.
@


1.27
log
@Remove stray @@item's.
@
text
@d2766 3
a2768 4
When @@code{EXTRACT_STRUCT_VALUE_ADDRESS_P} is non-zero, this is used to extract
from an array @@var{regbuf} (containing the raw register state) the
address in which a function should return its structure value, as a
@@code{CORE_ADDR} (or an expression that can be used as one).
d2770 3
a2772 1
@@item EXTRACT_STRUCT_VALUE_ADDRESS_P
@


1.26
log
@	* gdbint.texinfo (Clean Design and Portable Implementation):
	Renamed from "Clean Design".
	(Clean Design and Portable Implementation): Document portable
	methods of handling file names, and the associated macros.
@
text
@d2670 1
a2670 1
@@itemx CLEAR_DEFERRED_STORES@@item
d2794 1
a2794 1
@@item FRAME_ARGS_ADDRESS_CORRECT@@item
@


1.25
log
@Fix a typo.
@
text
@d4136 1
a4136 1
@@subsection Clean Design
d4221 61
@


1.24
log
@	* gdbint.texinfo (User Interface): A new section about ui_out
	functions, based on text written by Fernando Nasser.
@
text
@d1659 1
a1659 1
Loadable Modules (@@file{nlmread.c}.
@


1.23
log
@	* gdbint.texinfo: Change Permissions to GFDL.  Update Copyright.

	* gdbgui.texinfo: Change Permissions to GFDL.  Update Copyright.
	Replace "GDB" with "@@value{GDBN}".  Fix markup.

	* annotate.texi: Change Permissions to GFDL.  Update Copyright.

	* gdb.texinfo: Change Permissions to GFDL.  Update Copyright.

	* gdbmi.texinfo: Update copyright.  Change Permissions to GFDL.
@
text
@d720 1
d750 582
@


1.22
log
@	* gdbint.texinfo (Algorithms): New section "Watchpoints" and new
	subsection "x86 Watchpoints".
	(Target Architecture Definition): Document
	I386_USE_GENERIC_WATCHPOINTS and TARGET_HAS_HARDWARE_WATCHPOINTS.
	(Native Debugging): Document I386_USE_GENERIC_WATCHPOINTS.
@
text
@d4 2
a5 2
@@ifinfo
@@format
d9 1
a9 2
@@end format
@@end ifinfo
d13 2
a14 3

Copyright 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,
2001 Free Software Foundation, Inc.
d18 10
a27 14
Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

@@ignore
Permission is granted to process this file through Tex and print the
results, provided the printed document carries copying permission notice
identical to this one except for the removal of this paragraph (this
paragraph not being relevant to the printed manual).

@@end ignore
Permission is granted to copy or distribute modified versions of this
manual under the terms of the GPL (for which purpose this text may be
regarded as a program in the language TeX).
d56 2
a57 5
Copyright @@copyright{} 1990-1999 Free Software Foundation, Inc.

Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.
d59 10
@


1.21
log
@Change SOFTWARE_SINGLE_STEP_P into SOFTWARE_SINGLE_STEP_P().
@
text
@d1 1
a1 1
\input texinfo
d295 5
a299 1
start trying to set software breakpoints.
d358 351
d733 1
a733 1
the ends of most source files. 
d1461 4
a1464 4
@@item INT_MIN
@@item LONG_MAX
@@item UINT_MAX
@@item ULONG_MAX
d1581 1
a1581 1
@@item SEEK_SET
d2349 4
d2829 5
d3162 4
@


1.20
log
@Update/correct copyright notices.
@
text
@d2154 1
a2154 1
@@item SOFTWARE_SINGLE_STEP_P
@


1.19
log
@	* gdbint.texinfo: Fix up @@itemize lists so that @@item is alone on
	its line.  Fix markup of commands.  Add an index and index entries.
@
text
@d15 2
a16 1
Copyright 1990-1999 Free Software Foundation, Inc.
@


1.18
log
@	* gdbint.texinfo (POP_FRAME): Document use by return_command.
@
text
@d38 3
d99 1
d105 1
d108 30
a137 28
requirements and other expectations for @@value{GDBN}.  Although some of these may
seem obvious, there have been proposals for @@value{GDBN} that have run counter to
these requirements.

First of all, @@value{GDBN} is a debugger.  It's not designed to be a front panel
for embedded systems.  It's not a text editor.  It's not a shell.  It's
not a programming environment.

@@value{GDBN} is an interactive tool.  Although a batch mode is available, @@value{GDBN}'s
primary role is to interact with a human programmer.

@@value{GDBN} should be responsive to the user.  A programmer hot on the trail of
a nasty bug, and operating under a looming deadline, is going to be very
impatient of everything, including the response time to debugger
commands.

@@value{GDBN} should be relatively permissive, such as for expressions.  While the
compiler should be picky (or have the option to be made picky), since
source code lives for a long time usually, the programmer doing
debugging shouldn't be spending time figuring out to mollify the
debugger.

@@value{GDBN} will be called upon to deal with really large programs.  Executable
sizes of 50 to 100 megabytes occur regularly, and we've heard reports of
programs approaching 1 gigabyte in size.

@@value{GDBN} should be able to run everywhere.  No other debugger is available
for even half as many configurations as @@value{GDBN} supports.
d144 3
a146 2
@@value{GDBN} consists of three major subsystems: user interface, symbol handling
(the ``symbol side''), and target system handling (the ``target side'').
d167 4
a170 3
The symbolic side of @@value{GDBN} can be thought of as ``everything you can do in
@@value{GDBN} without having a live program running''.  For instance, you can look
at the types of variables, and evaluate many kinds of expressions.
d174 4
a177 4
The target side of @@value{GDBN} is the ``bits and bytes manipulator''.  Although
it may make reference to symbolic info here and there, most of the
target side will run with only a stripped executable available -- or
even no executable at all, in remote debugging cases.
d187 2
d222 1
d224 5
a228 4
@@value{GDBN} uses a number of debugging-specific algorithms.  They are often not
very complicated, but get lost in the thicket of special cases and
real-world issues.  This chapter describes the basic algorithms and
mentions some of the specific target definitions that they use.
d232 4
a235 2
A frame is a construct that @@value{GDBN} uses to keep track of calling and called
functions.
d237 2
d240 2
a241 2
machine-independent part of @@value{GDBN}, except that it is used when setting up
a new frame from scratch, as follows:
d247 1
d255 5
a259 4
Given a @@value{GDBN} frame, define @@code{FRAME_CHAIN} to determine the address of
the calling function's frame.  This will be used to create a new @@value{GDBN}
frame struct, and then @@code{INIT_EXTRA_FRAME_INFO} and
@@code{INIT_FRAME_PC} will be called for the new frame.
d263 1
d271 2
d276 1
d278 13
a290 9
exception and reports it to @@value{GDBN}.  Another possibility is when an
emulator is in use; many emulators include circuitry that watches the
address lines coming out from the processor, and force it to stop if the
address matches a breakpoint's address.  A third possibility is that the
target already has the ability to do breakpoints somehow; for instance,
a ROM monitor may do its own software breakpoints.  So although these
are not literally ``hardware breakpoints'', from @@value{GDBN}'s point of view
they work the same; @@value{GDBN} need not do nothing more than set the breakpoint
and wait for something to happen.
d293 2
a294 2
limited in number; when the user asks for more, @@value{GDBN} will start trying to
set software breakpoints.
d296 7
a302 5
Software breakpoints require @@value{GDBN} to do somewhat more work.  The basic
theory is that @@value{GDBN} will replace a program instruction with a trap,
illegal divide, or some other instruction that will cause an exception,
and then when it's encountered, @@value{GDBN} will take the exception and stop the
program. When the user says to continue, @@value{GDBN} will restore the original
d308 1
a308 1
although the situation would be highly unusual.
d321 1
d338 1
d342 2
a343 1
which are visible in the @@code{maint info breakpoint} command.
d345 1
d350 1
a350 1
@@file{tm-@@var{xyz}.h} file.  Look in @@file{tm-sun4os4.h} and
d362 1
d368 2
a369 2
For instance, the @@code{set} command just starts a lookup on the
@@code{setlist} command list, while @@code{set thread} recurses
d372 2
d379 2
d399 1
d412 20
a431 12
@@value{GDBN} reads symbols from ``symbol files''.  The usual symbol file is the
file containing the program which @@value{GDBN} is debugging.  @@value{GDBN} can be directed
to use a different file for symbols (with the @@code{symbol-file}
command), and it can also read more symbols via the ``add-file'' and
``load'' commands, or while reading symbols from shared libraries.

Symbol files are initially opened by code in @@file{symfile.c} using the
BFD library.  BFD identifies the type of the file by examining its
header.  @@code{find_sym_fns} then uses this identification to locate a
set of symbol-reading functions.

Symbol reading modules identify themselves to @@value{GDBN} by calling
d436 1
a436 1
times to process symbol-files whose identification matches the specified
d444 1
d448 2
a449 2
read a new symbol file. Note that the symbol file which we are reading
might be a new "main" symbol file, or might be a secondary symbol file
d465 6
a470 6
This function need only handle the symbol-reading module's internal
state; the symbol table data structures visible to the rest of @@value{GDBN} will
be discarded by @@code{symbol_file_add}.  It has no arguments and no
result.  It may be called after @@code{@@var{xyz}_symfile_init}, if a new
symbol table is being read, or may be called alone if all symbols are
simply being discarded.
d477 1
a477 1
@@code{sf} points to the struct sym_fns originally passed to
d493 1
a493 1
Called from @@code{psymtab_to_symtab} (or the PSYMTAB_TO_SYMTAB macro) if
d496 2
a497 2
symtab.  Upon return, pst->readin should have been set to 1, and
pst->symtab should contain a pointer to the new corresponding symtab, or
d503 1
a503 1
@@value{GDBN} has three types of symbol tables.
d506 5
d512 3
a514 4
@@item full symbol tables (symtabs).  These contain the main information
about symbols and addresses.

@@item partial symbol tables (psymtabs).  These contain enough
d518 4
a521 1
@@item minimal symbol tables (msymtabs).  These contain information
a522 1

d525 1
d530 1
a530 1
extracted -- enough to identify which parts of the symbol table will
d541 1
a541 1
types, and enum values declared at file scope.
d546 2
d552 8
d561 3
a563 8
@@item by its address
(e.g. execution stops at some address which is inside a function in this
file).  The address will be noticed to be in the range of this psymtab,
and the full symtab will be read in.  @@code{find_pc_function},
@@code{find_pc_line}, and other @@code{find_pc_@@dots{}} functions handle
this.

@@item by its name
d569 1
a569 1
qualifier.  Or, a local symbol can be referenced when we are "in" a
a571 1

d582 5
a586 4
It is a bug for @@value{GDBN} to behave one way when only a psymtab has been read,
and another way if the corresponding symtab has been read in.  Such bugs
are typically caused by a psymtab that does not contain all the visible
symbols, or which has the wrong instruction address ranges.
d588 1
a588 1
The psymtab for a particular section of a symbol-file (objfile) could be
d598 1
a598 1
Fundamental Types (e.g., FT_VOID, FT_BOOLEAN).
d600 1
d604 2
a605 1
that gdb knows about for all the languages that @@value{GDBN} knows about.
d607 1
a607 1
Type Codes (e.g., TYPE_CODE_PTR, TYPE_CODE_ARRAY).
d609 8
a616 6
Each time @@value{GDBN} builds an internal type, it marks it with one of these
types.  The type may be a fundamental type, such as TYPE_CODE_INT, or a
derived type, such as TYPE_CODE_PTR which is a pointer to another type.
Typically, several FT_* types map to one TYPE_CODE_* type, and are
distinguished by other members of the type struct, such as whether the
type is signed or unsigned, and how many bits it uses.
d618 1
a618 1
Builtin Types (e.g., builtin_type_void, builtin_type_char).
d621 10
a630 8
fundamental types and are created as global types for @@value{GDBN} to use for
various ugly historical reasons.  We eventually want to eliminate these.
Note for example that builtin_type_int initialized in gdbtypes.c is
basically the same as a TYPE_CODE_INT type that is initialized in
c-lang.c for an FT_INTEGER fundamental type.  The difference is that the
builtin_type is not associated with any particular objfile, and only one
instance exists, while c-lang.c builds as many TYPE_CODE_INT types as
needed, with each one associated with some particular objfile.
d633 1
d637 5
a641 3
The @@file{a.out} format is the original file format for Unix.  It
consists of three sections: text, data, and bss, which are for program
code, initialized data, and uninitialized data, respectively.
d643 1
a643 1
The @@file{a.out} format is so simple that it doesn't have any reserved
d645 2
a646 2
@@file{adb}, which is a machine-language debugger.)  The only debugging
format for @@file{a.out} is stabs, which is encoded as a set of normal
d649 1
a649 1
The basic @@file{a.out} reader is in @@file{dbxread.c}.
d653 1
d667 1
d675 1
d678 3
a680 3
symbols are dbx-style stabs whose strings are located in the
@@samp{.debug} section (rather than the string table).  For more
information, see @@xref{Top,,,stabs,The Stabs Debugging Format}.
d691 2
a692 1
Windows 95 and NT use the PE (Portable Executable) format for their
d700 1
d709 1
d717 1
d728 1
d739 1
d745 1
d752 1
d767 1
d774 1
d779 2
a780 1
If you are using an existing object file format (a.out, COFF, ELF, etc),
d797 1
a797 1
@@file{bfd/libxyz.h}, which is included by @@value{GDBN}.
d804 9
a812 7
@@value{GDBN}'s language support is mainly driven by the symbol reader, although
it is possible for the user to set the source language manually.

@@value{GDBN} chooses the source language by looking at the extension of the file
recorded in the debug info; @@code{.c} means C, @@code{.f} means Fortran,
etc.  It may also use a special-purpose language identifier if the debug
format supports it, such as DWARF.
d816 3
a818 2
To add other languages to @@value{GDBN}'s expression parser, follow the following
steps:
d823 1
d825 1
a825 1
building parsed expressions into a @@samp{union exp_element} list are in
d828 1
d831 1
a831 1
@@emph{must} be included at the top of the YACC parser, to prevent the
d835 16
a850 16
#define yyparse 	@@var{lang}_parse
#define yylex 	@@var{lang}_lex
#define yyerror 	@@var{lang}_error
#define yylval 	@@var{lang}_lval
#define yychar 	@@var{lang}_char
#define yydebug 	@@var{lang}_debug
#define yypact  	@@var{lang}_pact 
#define yyr1		@@var{lang}_r1   
#define yyr2		@@var{lang}_r2   
#define yydef		@@var{lang}_def  
#define yychk		@@var{lang}_chk  
#define yypgo		@@var{lang}_pgo  
#define yyact  	@@var{lang}_act  
#define yyexca  	@@var{lang}_exca
#define yyerrflag  	@@var{lang}_errflag
#define yynerrs  	@@var{lang}_nerrs
d865 4
d871 2
a872 1
code for these operations in @@code{eval.c:evaluate_subexp()}.  Add cases
d874 1
a874 1
@@code{prefixify_subexp()} and @@code{length_of_subexp()}.  These compute
d887 1
d893 1
d898 1
d907 3
a909 1
Add helper code to @@code{expprint.c:print_subexp()} to handle any new
d915 1
d917 1
a917 1
@@code{parse.c:parse_exp_1()}.
d921 1
d933 2
a934 2
See the file @@file{configure.in} for how @@value{GDBN} is configured for different
languages.
a941 1

d949 1
a949 1
With the advent of autoconf, it's rarely necessary to have host
d954 7
a960 4
Most of @@value{GDBN}'s host configuration support happens via autoconf.  It
should be rare to need new host-specific definitions.  @@value{GDBN} still uses
the host-specific definitions and files listed below, but these mostly
exist for historical reasons, and should eventually disappear.
d965 1
a965 1

d976 1
a976 1
(@@file{xm.h} is a link to this file, created by configure).  Contains C
a984 1

d989 1
d1002 2
a1003 1

d1011 1
a1011 1
using the GO32 execution environment.
d1013 1
a1015 1

d1020 5
a1024 7
When @@value{GDBN} is configured and compiled, various macros are defined or left
undefined, to control compilation based on the attributes of the host
system.  These macros and their meanings (or if the meaning is not
documented here, then one of the source files where they are used is
indicated) are:

@@table @@code
d1026 1
d1028 2
a1029 1
The default name of @@value{GDBN}'s initialization file (normally @@file{.gdbinit}).
d1051 1
d1058 1
d1061 2
a1062 2
characters when printing and it will allow \r\n line endings of files
which are "sourced" by gdb.  It must be possible to open files in binary
d1066 1
d1070 1
d1083 1
a1083 1
in @@code{defs.h}. This isn't needed unless your compiler is unusually
d1087 1
d1092 1
d1094 1
a1094 1
@@code{sigsetmask()}.  Currently, this is only true of the RS/6000.
d1100 1
d1120 3
a1122 2
Define this if the host C compiler supports ``long long''.  This is set
by the configure script.
d1126 2
a1127 1
the printf format directive ``ll''. This is set by the configure script.
d1130 2
a1131 2
Define this if the host C compiler supports ``long double''.  This is
set by the configure script.
d1135 2
a1136 2
numbers via the printf format directive ``Lg''. This is set by the
configure script.
d1140 2
a1141 2
float-point numbers via the scanf format directive directive
``Lg''. This is set by the configure script.
d1149 3
a1151 3
This macro is used as the argument to lseek (or, most commonly,
bfd_seek).  FIXME, should be replaced by SEEK_SET instead, which is the
POSIX equivalent.
d1155 1
a1155 1
@@sc{ANSI} definition.
d1164 1
d1182 1
d1187 9
a1195 8
@@value{GDBN} will use the @@code{mmalloc} library for memory allocation for symbol
reading if this symbol is defined.  Be careful defining it since there
are systems on which @@code{mmalloc} does not work for some reason.  One
example is the DECstation, where its RPC library can't cope with our
redefinition of @@code{malloc} to call @@code{mmalloc}.  When defining
@@code{USE_MMALLOC}, you will also have to set @@code{MMALLOC} in the
Makefile, to point to the mmalloc library.  This define is set when you
configure with --with-mmalloc.
d1198 1
d1201 1
a1201 1
the C runtime makes calls to malloc prior to calling @@code{main}, and if
d1204 2
a1205 2
to occur.  These systems can still use mmalloc, but must define
NO_MMCHECK.
d1213 1
a1213 1
calls, and if it fails to install the functions, gdb will issue a
d1215 1
a1215 1
--with-mmalloc.
d1218 2
a1219 1
Define this to indicate that siginterrupt() is not available.
d1222 1
a1222 1
Define if this is not in a system .h file.
d1226 1
a1226 1
Define these to appropriate value for the system lseek(), if not already
d1230 2
a1231 2
This is the signal for stopping @@value{GDBN}.  Defaults to SIGTSTP.  (Only
redefined for the Convex.)
d1234 1
a1234 1
Define this if the interior's tty should be opened with the O_NOCTTY
d1245 1
a1245 1
Define this to help placate lint in some situations.
d1250 1
a1250 2

@@end table
d1257 4
a1260 2
@@value{GDBN}'s target architecture defines what sort of machine-language programs
@@value{GDBN} can work with, and how it works with them.
d1267 9
a1275 9
@@value{GDBN}'s model of the target machine is rather simple.  @@value{GDBN} assumes the
machine includes a bank of registers and a block of memory.  Each
register may have a different size.

@@value{GDBN} does not have a magical way to match up with the compiler's idea of
which registers are which; however, it is critical that they do match up
accurately.  The only way to make this work is to get accurate
information about the order that the compiler uses, and to reflect that
in the @@code{REGISTER_NAME} and related macros.
d1293 1
a1293 1
machines, the words `pointer' and `address' can be used interchangeably.
d1306 3
a1308 3
low two bits of any valid instruction's byte address are always zero ---
byte addresses waste two bits.  So instead of byte addresses, the D10V
uses word addresses --- byte addresses shifted right two bits --- to
d1321 2
a1322 2
To cope with architectures like this --- the D10V is not the only one!
--- @@value{GDBN} tries to distinguish between @@dfn{addresses}, which are
d1428 1
a1428 1
C++ reference type.
d1436 1
a1436 1
C++ reference type.
a1457 1

d1459 1
a1459 1
The x86 architecture supports an 80-bit long double type.  However, when
a1472 1

d1478 2
a1479 2
@@code{registers}, holds the register contents in raw format, and the @@value{GDBN}
remote protocol transmits register values in raw format.
d1481 2
a1482 2
Your architecture may define the following macros to request raw /
virtual conversions:
d1551 7
a1557 3
@@item ADDITIONAL_OPTION_CASES
@@item ADDITIONAL_OPTION_HANDLER
@@item ADDITIONAL_OPTION_HELP
d1563 1
d1566 1
a1566 1
expression that zeros those bits in @@var{addr}.  This is only used for
d1577 1
d1581 1
a1581 1
C++ reference type.
d1585 1
d1590 3
a1592 3
for the target, @@value{GDBN} will probably not compile, let alone run correctly.
This is currently used only for the unsupported i960 Nindy target, and
should not be used in any other configuration.
d1595 4
a1598 3
Define if the compiler promotes a short or char parameter to an int, but
still reports the parameter as its original type, rather than the
promoted type.
d1601 4
a1604 3
Define this if @@value{GDBN} should believe the type of a short argument when
compiled by pcc, but look within a full int space to get its value.
Only defined for Sun-3 at present.
d1607 2
a1608 1
Define this if the numbering of bits in the targets does *not* match the
d1610 1
a1610 1
are numbered in a big-endian order, 0 means little-endian.
d1613 1
d1620 2
a1621 2
@@var{BREAKPOINT} has been deprecated in favour of
@@var{BREAKPOINT_FROM_PC}.
d1624 3
a1626 1
@@item LITTLE_BREAKPOINT
d1629 2
a1630 2
@@var{BIG_BREAKPOINT} and @@var{LITTLE_BREAKPOINT} have been deprecated in
favour of @@var{BREAKPOINT_FROM_PC}.
d1633 5
a1637 2
@@item LITTLE_REMOTE_BREAKPOINT
@@item BIG_REMOTE_BREAKPOINT
d1640 2
a1641 4
@@var{BIG_REMOTE_BREAKPOINT} and @@var{LITTLE_REMOTE_BREAKPOINT} have been
deprecated in favour of @@var{BREAKPOINT_FROM_PC}.

@@item BREAKPOINT_FROM_PC (pcptr, lenptr)
d1643 2
d1646 4
a1649 4
breakpoint instruction.  It returns a pointer to a string of bytes that
encode a breakpoint instruction, stores the length of the string to
*lenptr, and adjusts pc (if necessary) to point to the actual memory
location where the breakpoint should be inserted.
d1658 4
a1661 3
@@item MEMORY_INSERT_BREAKPOINT (addr, contents_cache)
@@item MEMORY_REMOVE_BREAKPOINT (addr, contents_cache)

d1667 1
a1667 1
@@var{MEMORY_INSERT_BREAKPOINT} and @@var{MEMORY_REMOVE_BREAKPOINT} will
d1673 1
a1673 1
@@var{BREAKPOINT_FROM_PC} needs to read the target's memory for some
d1677 1
d1682 3
a1684 2
Pointer to an array of @@var{LONGEST} words of data containing
host-byte-ordered @@var{REGISTER_BYTES} sized values that partially
d1688 1
a1688 1
Should be deprecated in favour of a macro that uses target-byte-ordered
d1692 3
a1694 2
The size of @@var{CALL_DUMMY_WORDS}.  When @@var{CALL_DUMMY_P} this must
return a positive value.  See also @@var{CALL_DUMMY_LENGTH}.
d1697 2
a1698 1
A static initializer for @@var{CALL_DUMMY_WORDS}.  Deprecated.
d1701 2
a1702 1
inferior.h
d1705 1
d1708 1
a1708 1
Should be deprecated in favor of something like @@var{STACK_ALIGN}.
d1711 2
a1712 1
Predicate for use of @@var{CALL_DUMMY_STACK_ADJUST}.
d1714 1
a1714 1
Should be deprecated in favor of something like @@var{STACK_ALIGN}.
d1716 2
a1717 1
@@item CANNOT_FETCH_REGISTER (regno)
d1722 2
a1723 1
@@item CANNOT_STORE_REGISTER (regno)
d1726 2
a1727 2
status words, and other special registers.  If this is not defined, @@value{GDBN}
will assume that all registers may be written.
d1730 3
a1732 1
@@item CLEAR_DEFERRED_STORES
d1739 2
d1743 3
a1745 2
automatically promote floats to doubles?  This macro must evaluate to
non-zero if we should, or zero if we should leave the value alone.
d1755 2
d1761 2
a1762 2
you want @@value{GDBN} to follow the typical compiler behavior --- to always
promote when there is no prototype in scope --- your gdbarch init
d1767 2
a1768 1
Define this to expand into the character that G++ uses to distinguish
d1774 1
d1780 1
d1783 1
a1783 1
BREAKPOINT, though not always.  For most targets this value will be 0.
d1786 1
d1789 2
a1790 1
@@item DISABLE_UNSETTABLE_BREAK addr
d1795 1
d1799 1
d1804 1
d1809 1
d1814 3
a1816 2
This is an expression that should designate the end of the text section
(? FIXME ?)
d1818 2
a1819 1
@@item EXTRACT_RETURN_VALUE(type,regbuf,valbuf)
d1824 3
a1826 2
@@item EXTRACT_STRUCT_VALUE_ADDRESS(regbuf)
When @@var{EXTRACT_STRUCT_VALUE_ADDRESS_P} this is used to to extract
d1829 1
a1829 1
CORE_ADDR (or an expression that can be used as one).
d1832 2
a1833 1
Predicate for @@var{EXTRACT_STRUCT_VALUE_ADDRESS}.
d1836 2
a1837 1
If defined, then the `info float' command will print information about
d1841 1
d1848 2
a1849 1
@@item FRAMELESS_FUNCTION_INVOCATION(fi)
d1854 3
a1856 2
@@item FRAME_ARGS_ADDRESS_CORRECT
stack.c
d1858 2
a1859 1
@@item FRAME_CHAIN(frame)
d1862 2
a1863 1
@@item FRAME_CHAIN_COMBINE(chain,frame)
d1868 2
a1869 2
@@item FRAME_CHAIN_VALID(chain,thisframe)

d1872 1
a1872 1
common definitions are available. 
d1874 2
d1878 8
a1885 3
@@file{crt0.o}).  @@code{func_frame_chain_valid} is nonzero if the chain
pointer is nonzero and the given frame's PC is not in @@code{main()} or a
known entry point function (such as @@code{_start()}).
d1889 1
d1891 2
a1892 1
@@item FRAME_INIT_SAVED_REGS(frame)
d1899 1
a1899 1
@@var{FRAME_FIND_SAVED_REGS} and @@var{EXTRA_FRAME_INFO} are deprecated.
d1901 2
a1902 1
@@item FRAME_NUM_ARGS (fi)
d1907 3
a1909 2
@@item FRAME_SAVED_PC(frame)
Given @@var{frame}, return the pc saved there.  That is, the return
d1913 1
d1920 1
d1935 7
a1941 5
@@item GCC2_COMPILED_FLAG_SYMBOL
If defined, these are the names of the symbols that @@value{GDBN} will look for to
detect that GCC compiled the file.  The default symbols are
@@code{gcc_compiled.} and @@code{gcc2_compiled.}, respectively. (Currently
only defined for the Delta 68.)
d1944 1
d1948 1
a1948 1
The support can be enabled at two levels.  At level one, only
d1954 5
a1958 4
This determines whether horrible kludge code in dbxread.c and
partial-stab.h is used to mangle multiple-symbol-table files from
HPPA's.  This should all be ripped out, and a scheme like elfread.c
used.
d1961 1
d1964 1
a1964 1
<setjmp.h> is needed to define it.
d1966 3
a1968 3
This macro determines the target PC address that longjmp() will jump to,
assuming that we have just stopped at a longjmp breakpoint.  It takes a
CORE_ADDR * as argument, and stores the target PC value through this
d1972 2
d1978 1
d1980 3
a1982 1
@@item REGISTER_IN_WINDOW_P (regnum)
d1987 1
d1990 1
a1990 1
feature-specific macros.  It was introduced in haste and we are
d1994 1
d2004 1
d2007 2
a2008 1
@@item INIT_EXTRA_FRAME_INFO (fromleaf, frame)
d2013 2
a2014 1
@@item INIT_FRAME_PC (fromleaf, prev)
d2018 2
a2019 1
@@item INNER_THAN (lhs,rhs)
d2025 10
a2034 7
@@item IN_SIGTRAMP (pc, name)
Define this to return true if the given @@var{pc} and/or @@var{name}
indicates that the current function is a sigtramp.

@@item SIGTRAMP_START (pc)
@@item SIGTRAMP_END (pc)
Define these to be the start and end address of the sigtramp for the
d2039 2
a2040 1
@@item IN_SOLIB_CALL_TRAMPOLINE pc name
d2044 2
a2045 1
@@item IN_SOLIB_RETURN_TRAMPOLINE pc name
d2049 2
a2050 1
@@item IN_SOLIB_DYNSYM_RESOLVE_CODE pc
d2054 2
a2055 1
@@item SKIP_SOLIB_RESOLVER pc
d2062 2
a2063 1
@@item IS_TRAPPED_INTERNALVAR (name)
d2070 1
d2075 1
d2079 1
d2086 1
d2091 1
d2096 1
d2101 1
d2106 1
d2112 1
d2130 1
a2131 1

a2140 1

d2148 1
a2148 1
Note that, in C and C++, arrays are never returned by value.  In those
d2154 1
d2156 1
a2156 1
mechanism. The macro @@code{SOFTWARE_SINGLE_STEP} must also be defined.
d2158 3
a2160 2
@@item SOFTWARE_SINGLE_STEP(signal,insert_breapoints_p)
A function that inserts or removes (dependant on
d2162 1
a2162 1
the next instruction. See @@code{sparc-tdep.c} and @@code{rs6000-tdep.c}
d2166 1
a2166 1

d2180 1
a2181 1

d2185 3
a2187 3
the stab, and then looking that up in the minsyms (the linker/
assembler symbol table).  In other words, the stab has the name, and
the linker / assembler symbol table is the only place that carries
a2194 1

d2198 1
d2202 2
a2203 1
inferior.h
d2206 1
d2211 1
d2219 1
d2223 1
d2228 1
d2232 2
a2233 1
@@item PRINT_REGISTER_HOOK (regno)
d2238 1
d2243 1
d2247 1
d2251 1
d2256 3
d2262 2
a2263 1
@@item PUSH_ARGUMENTS (nargs, args, sp, struct_return, struct_addr)
d2265 1
a2265 1
call. Return the updated stack pointer value.
d2268 1
d2272 1
d2276 4
a2279 3
@@item REGISTER_NAME(i)
Return the name of register @@var{i} as a string.  May return @@var{NULL}
or @@var{NUL} to indicate that register @@var{i} is not valid.
d2282 2
a2283 1
Deprecated in favor of @@var{REGISTER_NAME}.
d2285 2
a2286 1
@@item REG_STRUCT_HAS_ADDR (gcc_p, type)
d2290 2
a2291 1
@@item SAVE_DUMMY_FRAME_TOS (sp)
d2294 1
a2294 1
This is the value of the @@var{SP} after both the dummy frame and space
d2298 1
d2303 1
d2307 1
d2312 1
a2312 1
doesn't work.  Calling SKIP_PERMANENT_BREAKPOINT adjusts the processor's
d2317 2
a2318 1
@@item SKIP_PROLOGUE (pc)
d2323 1
d2328 2
a2329 1
@@item SKIP_TRAMPOLINE_CODE (pc)
d2335 1
d2343 1
d2348 2
a2349 1
@@item STACK_ALIGN (addr)
d2353 2
a2354 1
@@item STEP_SKIPS_DELAY (addr)
d2360 2
a2361 1
@@item STORE_RETURN_VALUE (type, valbuf)
d2366 1
d2370 2
a2371 1
The default value of the `symbol-reloading' variable.  (Never defined in
d2375 1
d2378 1
a2378 1
@@var{TARGET_BYTE_ORDER} which is deprecated.
d2381 1
d2384 1
a2384 1
@@var{TARGET_BYTE_ORDER_SELECTABLE} which is deprecated.
d2387 1
d2391 1
d2397 1
d2401 1
d2407 1
d2411 1
d2415 1
d2419 1
d2424 1
d2428 1
d2432 1
d2436 17
a2452 5
@@item TARGET_WRITE_PC (val, pid)
@@item TARGET_READ_SP
@@item TARGET_WRITE_SP
@@item TARGET_READ_FP
@@item TARGET_WRITE_FP
d2462 2
a2463 1
@@item TARGET_VIRTUAL_FRAME_POINTER(pc,regp,offsetp)
d2465 1
a2465 1
frame pointer in use at the code address @@code{"pc"}.  If virtual 
d2469 2
a2470 1
@@item USE_STRUCT_CONVENTION (gcc_p, type)
d2478 2
a2479 1
@@item VARIABLES_INSIDE_BLOCK (desc, gcc_p)
d2487 2
a2488 1
@@item OS9K_VARIABLES_INSIDE_BLOCK (desc, gcc_p)
a2489 1

d2494 1
a2494 2
@@table @@code

d2501 1
a2501 2

@@end table
d2505 1
d2509 1
a2509 1

d2522 1
a2522 1
(@@file{tm.h} is a link to this file, created by configure).  Contains
d2536 1
a2536 1
processor chip (registers, stack, etc).  If used, it is included by
a2542 1

d2548 1
a2548 1
instruction needed; etc).  Then write a @@file{@@var{arch}/tm-@@var{os}.h}
d2556 1
d2558 5
a2562 5
The target vector defines the interface between @@value{GDBN}'s abstract handling
of target systems, and the nitty-gritty code that actually exercises
control over a process or a serial port.  @@value{GDBN} includes some 30-40
different target vectors; however, each configuration of @@value{GDBN} includes
only a few of them.
d2570 9
a2578 9
@@value{GDBN}'s file @@file{remote.c} talks a serial protocol to code that runs in
the target system.  @@value{GDBN} provides several sample ``stubs'' that can be
integrated into target programs or operating systems for this purpose;
they are named @@file{*-stub.c}.

The @@value{GDBN} user's manual describes how to put such a stub into your target
code.  What follows is a discussion of integrating the SPARC stub into a
complicated operating system (rather than a simple program), by Stu
Grossman, the author of this stub.
d2581 1
a2581 1
trap_low:
d2584 2
d2587 2
a2588 5
@@item %l1 and %l2 contain pc and npc respectively at the time of the trap

@@item traps are disabled

@@item you are in the correct trap window
d2590 2
d2595 1
a2595 1
is no reason why you shouldn't be able to `share' traps with the stub.
d2599 1
a2599 1
setup the hardware traps to actually execute code which calls the stub
d2603 1
a2603 1
`sharing' traps, as the traps we use are usually not used by the kernel,
d2625 1
d2630 1
a2630 1

d2641 1
a2641 1
(@@file{nm.h} is a link to this file, created by configure).  Contains C
a2647 1

d2658 1
a2658 1
Put them into @@code{@@var{xyz}-nat.c}, and put @@code{@@var{xyz}-nat.o}
a2661 1

d2671 2
a2672 2
This does the low-level grunge that uses Unix system calls to do a "fork
and exec" to start up a child process.
a2676 1

d2680 1
d2683 1
a2683 1

a2705 1

d2715 2
a2716 2
exists on a core file (e.g. the u-area or a @@samp{struct core}).  Then
modify @@code{trad_unix_core_file_p()} to use these values to set up the
d2726 1
a2726 1
@@code{fetch_core_registers()}.  If you can use the generic one, it's in
d2746 1
d2748 4
a2751 4
When @@value{GDBN} is configured and compiled, various macros are defined or left
undefined, to control compilation when the host and target systems are
the same.  These macros should be defined (or left undefined) in
@@file{nm-@@var{system}.h}.
a2753 1

d2755 1
d2760 1
d2769 1
d2772 1
a2772 1
@@file{@@var{HOST}-nat.c}.  If this symbol is @@emph{not} defined, and
d2777 1
d2781 1
d2784 1
a2784 1
appear only in target-specific code.  However, /proc support uses this
d2788 1
d2791 1
a2791 1
<setjmp.h> is needed to define it.
d2793 1
a2793 1
This macro determines the target PC address that longjmp() will jump to,
d2795 1
a2795 1
CORE_ADDR * as argument, and stores the target PC value through this
d2799 1
d2807 1
d2813 1
d2819 1
d2823 2
a2824 1
@@item PREPARE_TO_PROCEED @@var{select_it}
d2841 1
d2847 2
a2848 1
mach386-xdep.c
d2851 1
d2856 1
d2860 1
d2865 1
d2869 2
a2870 1
@@item SOLIB_ADD (filename, from_tty, targ)
d2875 1
d2880 3
a2882 1
When starting an inferior, @@value{GDBN} normally expects to trap twice; once when
d2888 1
d2892 1
d2894 2
a2895 2
translate register values between @@value{GDBN}'s internal representation and the
/proc representation, are compiled.
d2898 1
d2908 1
a2908 1
that u.u_ar0 @@emph{is} the location of the registers.
d2911 2
a2912 1
objfiles.c
d2915 2
a2916 2
Define this to debug ptrace calls.

d2925 1
a2929 1

d2937 3
a2939 2
(such as the text section or the data section).  @@value{GDBN} simply calls BFD to
read or write section X at byte offset Y for length Z.
d2944 1
a2944 1
file matches (i.e. could be a core dump of) a particular executable
a2952 1

d2956 1
d2968 1
a2972 1

a2987 1

d3000 1
d3004 1
a3004 1
or open a file) that needs to be undone later (e.g. free the memory or
a3014 1

d3018 1
d3027 1
d3031 1
d3037 1
d3043 1
a3046 1

d3057 1
d3059 1
d3073 1
a3073 1
It is usually best to call @@code{wrap_here()} after printing a comma or
d3080 1
a3080 1
to unfiltered (``@@code{printf}'') output.  Symbol reading routines that
d3084 1
d3092 2
a3093 2
@@value{GDBN} follows an additional set of coding standards specific to @@value{GDBN},
as described in the following sections.
d3095 1
d3105 1
d3121 2
a3122 2
after the semicolon).  Excess whitespace causes difficulties for diff and
patch.
d3126 1
d3129 2
a3130 2
Block comments must appear in the following form, with no `/*'- or
'*/'-only lines, and no leading `*':
d3132 1
a3132 1
@@example @@code
d3141 1
a3141 1
comment works correctly, and M-Q fills the block consistently.)
d3153 1
d3158 1
d3160 3
a3162 3
in @@value{GDBN} that might be affected by the overhead of a function call, mainly
in symbol reading.  Most of @@value{GDBN}'s performance is limited by the target
interface (whether serial line or system call).
d3169 5
a3173 4
Prototypes must be used to @@emph{declare} functions, and may be used to
@@emph{define} them.  Prototypes for @@value{GDBN} functions must include both the
argument type and name, with the name matching that used in the actual
function definition.
d3185 1
d3191 1
d3194 3
a3196 2
must be byte-swapped using @@code{SWAP_TARGET_AND_HOST} in @@value{GDBN}, or one of
the swap routines defined in @@file{bfd.h}, such as @@code{bfd_get_32}.
d3209 1
d3214 1
d3241 1
a3241 1
If the hook is not defined, the code should do whatever "most" machines
d3251 1
d3256 1
a3256 1
with a hook depends on the case.  A good example of this dilemma can be
d3271 2
a3272 2
multiple kinds of remote interfaces -- not by #ifdef's everywhere, but
by defining the "target_ops" structure and having a current target (as
d3275 2
a3276 2
using, a flag in the current target_ops structure is tested (e.g.
`target_has_stack'), or a function is called through a pointer in the
d3278 1
a3278 1
is added, only one module needs to be touched -- the one that actually
d3283 8
a3290 8
Please avoid duplicating code.  For example, in @@value{GDBN} 3.x all the code
interfacing between @@code{ptrace} and the rest of @@value{GDBN} was duplicated in
@@file{*-dep.c}, and so changing something was very painful.  In @@value{GDBN} 4.x,
these have all been consolidated into @@file{infptrace.c}.
@@file{infptrace.c} can deal with variations between systems the same way
any system-independent file would (hooks, #if defined, etc.), and
machines which are radically different don't need to use infptrace.c at
all.
d3292 1
a3292 1
Don't put debugging printfs in the code.
d3297 1
d3299 7
a3305 7
Most of the work in making @@value{GDBN} compile on a new machine is in specifying
the configuration of the machine.  This is done in a dizzying variety of
header files and configuration scripts, which we hope to make more
sensible soon.  Let's say your new host is called an @@var{xyz} (e.g.
@@samp{sun4}), and its full three-part configuration name is
@@code{@@var{arch}-@@var{xvend}-@@var{xos}} (e.g.  @@samp{sparc-sun-sunos4}).
In particular:
d3307 2
d3319 1
d3322 1
d3326 1
d3331 1
d3335 1
d3342 1
d3346 1
d3350 2
d3354 1
d3359 1
d3366 1
d3368 15
a3382 5
@@item symbolic links
@@item @@code{makeinfo} (texinfo2 level)
@@item @@TeX{}
@@item @@code{dvips}
@@item @@code{yacc} or @@code{bison}
d3384 1
d3406 1
d3408 10
a3417 10
The testsuite is an important component of the @@value{GDBN} package.  While it is
always worthwhile to encourage user testing, in practice this is rarely
sufficient; users typically use only a small subset of the available
commands, and it has proven all too common for a change to cause a
significant regression that went unnoticed for some time.

The @@value{GDBN} testsuite uses the DejaGNU testing framework.  DejaGNU is built
using tcl and expect.  The tests themselves are calls to various tcl
procs; the framework runs all the procs and summarizes the passes and
fails.
d3421 1
d3428 1
d3439 1
d3442 29
a3470 27
real problems, whether in @@value{GDBN} or in the testsuite.  Expected failures
are still failures, but ones which have been decided are too hard to
deal with at the time; for instance, a test case might work everywhere
except on AIX, and there is no prospect of the AIX case being fixed in
the near future.  Expected failures should not be added lightly, since
you may be masking serious bugs in @@value{GDBN}.  Unexpected successes are expected
fails that are passing for some reason, while unresolved and untested
cases often indicate some minor catastrophe, such as the compiler being
unable to deal with a test program.

When making any significant change to @@value{GDBN}, you should run the testsuite
before and after the change, to confirm that there are no regressions.
Note that truly complete testing would require that you run the
testsuite with all supported configurations and a variety of compilers;
however this is more than really necessary.  In many cases testing with
a single configuration is sufficient.  Other useful options are to test
one big-endian (Sparc) and one little-endian (x86) host, a cross config
with a builtin simulator (powerpc-eabi, mips-elf), or a 64-bit host
(Alpha).

If you add new functionality to @@value{GDBN}, please consider adding tests for it
as well; this way future @@value{GDBN} hackers can detect and fix their changes
that break the functionality you added.  Similarly, if you fix a bug
that was not previously reported as a test failure, please add a test
case for it.  Some cases are extremely difficult to test, such as code
that handles host OS failures or bugs in particular versions of
compilers, and it's OK not to try to write tests for all of those.
d3474 1
d3496 1
a3496 2
@@table @@code

a3497 1

d3501 1
a3501 1
ANSI/ISO, and C++ (ifdefs are allowed if necessary, for instance
d3505 1
a3505 2

Language-specific tests for all languages besides C.  Examples are
a3508 1

a3513 1

d3517 2
a3518 1
imagine a gdb.gcc, for tests of @@value{GDBN}'s handling of GCC extensions.
a3520 1

a3523 1

d3527 1
d3589 4
a3592 4
Start with the header files.  Once you have some idea of how @@value{GDBN}'s internal
symbol tables are stored (see @@file{symtab.h}, @@file{gdbtypes.h}), you
will find it much easier to understand the code which uses and creates
those symbol tables.
d3621 14
a3634 12
A good place to start when tracking down some particular area is with a
command which invokes that feature.  Suppose you want to know how
single-stepping works.  As a @@value{GDBN} user, you know that the @@code{step}
command invokes single-stepping.  The command is invoked via command
tables (see @@file{command.h}); by convention the function which actually
performs the command is formed by taking the name of the command and
adding @@samp{_command}, or in the case of an @@code{info} subcommand,
@@samp{_info}.  For example, the @@code{step} command invokes the
@@code{step_command} function and the @@code{info display} command invokes
@@code{display_info}.  When this convention is not followed, you might
have to use @@code{grep} or @@kbd{M-x tags-search} in emacs, or run @@value{GDBN} on
itself and set a breakpoint in @@code{execute_command}.
d3636 1
d3646 1
d3651 1
a3651 1
debugged in another.  Rather than typing the command @@code{@@w{./gdb
d3653 1
a3653 1
@@file{gdb2} and then type @@code{@@w{./gdb ./gdb2}}.
d3671 1
d3684 1
d3691 2
a3692 1
changes in many programs (not just @@value{GDBN}, but GAS, Emacs, GCC, etc) can be
d3699 7
a3705 7
feature as a small context diff or unidiff, suitable for "patch".  Each
message sent to me should include the changes to C code and header files
for a single feature, plus ChangeLog entries for each directory where
files were modified, and diffs for any changes needed to the manuals
(gdb/doc/gdb.texinfo or gdb/doc/gdbint.texinfo).  If there are a lot of
changes for a single feature, they can be split down into multiple
messages.
d3709 2
a3710 2
If you leave out the ChangeLog, we have to write one.  If you leave
out the doc, we have to puzzle out what needs documenting.  Etc.
d3732 2
a3733 2
Please send patches directly to the @@value{GDBN} maintainers at
@@code{gdb-patches@@@@sourceware.cygnus.com}.
d3736 1
a3742 1

d3765 5
@


1.17
log
@* gdbint.texinfo (ECOFF_REG_TO_REGNUM, DWARF_REG_TO_REGNUM,
DWARF2_REG_TO_REGNUM): Document.
@
text
@d2031 1
a2031 1
frame.
@


1.16
log
@Add --enable-gdb-build-warnings=... to configure{,.in}.
@
text
@d1643 12
@


1.15
log
@* gdbint.texinfo (Overall Structure): Spelling fix.
@
text
@d2776 6
a2781 5
You can configure with @@samp{--enable-build-warnings} to get GCC to
check on a number of these rules.  @@value{GDBN} sources ought not to engender any
complaints, unless they are caused by bogus host systems.  (The exact
set of enabled warnings is currently @@samp{-Wall -Wpointer-arith
-Wstrict-prototypes -Wmissing-prototypes -Wmissing-declarations}.
@


1.14
log
@	* gdbint.texinfo (Target Architecture Definition): Document that
	REGISTER_CONVERT_TO_VIRTUAL should only be called on a register
	for which REGISTER_CONVERTIBLE returns a zero value.
@
text
@d140 1
a140 1
Ther user interface consists of several actual interfaces, plus
@


1.13
log
@Import texinfo.tex from texinfo-4.0.
Add support for ``make pdf'' to the gdb/doc directory using pdftex.
@
text
@d1371 3
d1401 7
a1407 2
Note that REGISTER_CONVERT_TO_VIRTUAL and REGISTER_CONVERT_TO_RAW take
their @@var{reg} and @@var{type} arguments in different orders.
@


1.12
log
@* gdbint.texinfo (RETURN_VALUE_ON_STACK): Document.
@
text
@d66 5
d3391 7
a3398 1
@@contents
@


1.11
log
@Do not use @@value{GDBN in @@nodes.
@
text
@d1878 37
@


1.10
log
@	* gdb.texinfo (Porting GDB): Don't use @@value in the node name, it
	prevents the build (and is generally a Bad Idea).
@
text
@d3147 1
a3147 1
* Debugging @@value{GDBN}::		Debugging @@value{GDBN} with itself
d3230 1
a3230 1
@@node Debugging @@value{GDBN},,,Hints
@


1.9
log
@* gdbint.texinfo (Pointers Are Not Always Addresses): New manual
section.
(Target Conditionals): Document ADDRESS_TO_POINTER,
POINTER_TO_ADDRESS.
@
text
@d2912 1
a2912 1
@@node Porting @@value{GDBN}
@


1.8
log
@GDB->@@value{GDBN}
@
text
@d1156 161
d1442 7
d1845 6
@


1.7
log
@Use the three-argument form of @@xref to get the references right.
@
text
@d3 1
a3 1

d13 1
a13 1
This file documents the internals of the GNU debugger GDB.
d36 1
a36 1
@@settitle GDB Internals
d39 1
a39 1
@@title{GDB Internals}
d71 3
a73 3
This document documents the internals of the GNU debugger, GDB.  It
includes description of GDB's key algorithms and operations, as well
as the mechanisms that adapt GDB to specific hosts and targets.
d98 2
a99 2
requirements and other expectations for GDB.  Although some of these may
seem obvious, there have been proposals for GDB that have run counter to
d102 1
a102 1
First of all, GDB is a debugger.  It's not designed to be a front panel
d106 1
a106 1
GDB is an interactive tool.  Although a batch mode is available, GDB's
d109 1
a109 1
GDB should be responsive to the user.  A programmer hot on the trail of
d114 1
a114 1
GDB should be relatively permissive, such as for expressions.  While the
d120 1
a120 1
GDB will be called upon to deal with really large programs.  Executable
d124 2
a125 2
GDB should be able to run everywhere.  No other debugger is available
for even half as many configurations as GDB supports.
d132 1
a132 1
GDB consists of three major subsystems: user interface, symbol handling
d154 2
a155 2
The symbolic side of GDB can be thought of as ``everything you can do in
GDB without having a live program running''.  For instance, you can look
d160 1
a160 1
The target side of GDB is the ``bits and bytes manipulator''.  Although
d167 1
a167 1
such as disassembly, GDB will use symbolic info to present addresses
d173 1
a173 1
@@dfn{Host} refers to attributes of the system where GDB runs.
d199 1
a199 1
When you want to make GDB work ``native'' on a particular machine, you
d207 1
a207 1
GDB uses a number of debugging-specific algorithms.  They are often not
d214 1
a214 1
A frame is a construct that GDB uses to keep track of calling and called
d218 1
a218 1
machine-independent part of GDB, except that it is used when setting up
d232 2
a233 2
Given a GDB frame, define @@code{FRAME_CHAIN} to determine the address of
the calling function's frame.  This will be used to create a new GDB
d250 1
a250 1
exception and reports it to GDB.  Another possibility is when an
d256 2
a257 2
are not literally ``hardware breakpoints'', from GDB's point of view
they work the same; GDB need not do nothing more than set the breakpoint
d261 1
a261 1
limited in number; when the user asks for more, GDB will start trying to
d264 2
a265 2
Software breakpoints require GDB to do somewhat more work.  The basic
theory is that GDB will replace a program instruction with a trap,
d267 2
a268 2
and then when it's encountered, GDB will take the exception and stop the
program. When the user says to continue, GDB will restore the original
d303 1
a303 1
GDB has support for figuring out that the target is doing a
d319 1
a319 1
GDB has several user interfaces.  Although the command-line interface
d324 1
a324 1
The command interpreter in GDB is fairly simple.  It is designed to
d357 1
a357 1
provide an API to GDB's functionality.
d363 1
a363 1
Symbols are a key part of GDB's operation.  Symbols include variables,
d368 2
a369 2
GDB reads symbols from ``symbol files''.  The usual symbol file is the
file containing the program which GDB is debugging.  GDB can be directed
d379 1
a379 1
Symbol reading modules identify themselves to GDB by calling
d413 1
a413 1
state; the symbol table data structures visible to the rest of GDB will
d435 1
a435 1
from any point in the GDB symbol-handling code.
d450 1
a450 1
GDB has three types of symbol tables.
d472 1
a472 1
information.  The speed of this pass causes GDB to start up very
d518 1
a518 1
It is a bug for GDB to behave one way when only a psymtab has been read,
d535 1
a535 1
These are the fundamental types that GDB uses internally.  Fundamental
d538 1
a538 1
that gdb knows about for all the languages that GDB knows about.
d542 1
a542 1
Each time GDB builds an internal type, it marks it with one of these
d552 1
a552 1
fundamental types and are created as global types for GDB to use for
d617 1
a617 1
While BFD includes special PE support, GDB needs only the basic
d637 1
a637 1
Other file formats that have been supported by GDB include Netware
d690 1
a690 1
@@section Adding a New Symbol Reader to GDB
d699 1
a699 1
debugging symbols.  Generally GDB will have to call swapping routines
d701 1
a701 1
information.  As much as possible, GDB should not depend on the BFD
d709 1
a709 1
@@file{bfd/libxyz.h}, which is included by GDB.
d716 1
a716 1
GDB's language support is mainly driven by the symbol reader, although
d719 1
a719 1
GDB chooses the source language by looking at the extension of the file
d724 1
a724 1
@@section Adding a Source Language to GDB
d726 1
a726 1
To add other languages to GDB's expression parser, follow the following
d763 1
a763 1
@@samp{add_language(@@var{lang}_language_defn)} to tell the rest of GDB
d796 1
a796 1
dependent upon which languages that GDB is built for.
d817 2
a818 2
The user has the option of building GDB for some or all of the
languages.  If the user decides to build GDB for the language
d824 1
a824 1
Note that you do not need to do this in your YACC parser, since if GDB
d826 1
a826 1
compiled form of your parser) is not linked into GDB at all.
d828 1
a828 1
See the file @@file{configure.in} for how GDB is configured for different
d850 2
a851 2
Most of GDB's host configuration support happens via autoconf.  It
should be rare to need new host-specific definitions.  GDB still uses
d855 1
a855 1
Several files control GDB's configuration for host systems:
d912 1
a912 1
When GDB is configured and compiled, various macros are defined or left
d920 2
a921 2
@@item GDBINIT_FILENAME
The default name of GDB's initialization file (normally @@file{.gdbinit}).
d1068 1
a1068 1
GDB will use the @@code{mmalloc} library for memory allocation for symbol
d1108 1
a1108 1
This is the signal for stopping GDB.  Defaults to SIGTSTP.  (Only
d1136 2
a1137 2
GDB's target architecture defines what sort of machine-language programs
GDB can work with, and how it works with them.
d1144 1
a1144 1
GDB's model of the target machine is rather simple.  GDB assumes the
d1148 1
a1148 1
GDB does not have a magical way to match up with the compiler's idea of
d1154 1
a1154 1
GDB can handle big-endian, little-endian, and bi-endian architectures.
d1165 1
a1165 1
In GDB's terminology, the @@dfn{raw} representation is the one used in
d1167 1
a1167 1
used in memory, and within GDB @@code{struct value} objects.
d1185 2
a1186 2
Some 64-bit MIPS targets present 32-bit registers to GDB as 64-bit
registers, with garbage in their upper bits.  GDB ignores the top 32
d1194 3
a1196 3
GDB's interface to the architecture, while the virtual representation
can be chosen for GDB's convenience.  GDB's register file,
@@code{registers}, holds the register contents in raw format, and the GDB
d1209 1
a1209 1
of bytes the register will occupy in @@code{registers}, or in a GDB
d1222 1
a1222 1
register's raw form; once the register's value has been obtained, GDB
d1265 1
a1265 1
line options to GDB.  They are currently used only for the unsupported
d1286 1
a1286 1
for the target, GDB will probably not compile, let alone run correctly.
d1296 1
a1296 1
Define this if GDB should believe the type of a short argument when
d1403 1
a1403 1
status words, and other special registers.  If this is not defined, GDB
d1431 1
a1431 1
you want GDB to follow the typical compiler behavior --- to always
d1562 1
a1562 1
If defined, these are the names of the symbols that GDB will look for to
d1567 1
a1567 1
@@item GDB_MULTI_ARCH
d1569 1
a1569 1
within GDB.
d1576 1
a1576 1
@@item GDB_TARGET_IS_HPPA
d1610 1
a1610 1
macro a non-zero value tells GDB's expression parser to check for such
d1668 1
a1668 1
internal to GDB.  Currently only used by the h8500.  Note that this
d1672 1
a1672 1
Define this if GDB should determine the start and end addresses of the
d1805 1
a1805 1
The total amount of space needed to store GDB's copy of the machine's
d1826 1
a1826 1
Define this to convert sdb register numbers into GDB regnums.  If not
d1833 1
a1833 1
Advance the inferior's PC past a permanent breakpoint.  GDB normally
d1865 1
a1865 1
declarations) into GDB regnums.  If not defined, no conversion will be
d1875 1
a1875 1
slot, GDB will single-step over that instruction before resuming
d1945 1
a1945 1
For most targets, these may be left undefined.  GDB will call the read
d1970 1
a1970 1
@@code{N_RBRAC} symbol, and @@var{gcc_p} is true if GDB has noticed the
d1994 1
a1994 1
The following files define a target to GDB:
d2007 1
a2007 1
future versions of GDB.
d2046 1
a2046 1
The target vector defines the interface between GDB's abstract handling
d2048 2
a2049 2
control over a process or a serial port.  GDB includes some 30-40
different target vectors; however, each configuration of GDB includes
d2058 2
a2059 2
GDB's file @@file{remote.c} talks a serial protocol to code that runs in
the target system.  GDB provides several sample ``stubs'' that can be
d2063 1
a2063 1
The GDB user's manual describes how to put such a stub into your target
d2098 1
a2098 1
They are simply done by deposit/examine operations from GDB.
d2113 1
a2113 1
Several files control GDB's configuration for native support:
d2182 1
a2182 1
set @@code{addr} to the offset within the @@samp{user} struct of GDB
d2197 1
a2197 1
When making GDB run native on a new operating system, to make it
d2214 1
a2214 1
Then back in GDB, you need a matching routine called
d2220 1
a2220 1
register values and install them into GDB's ``registers'' array.
d2236 1
a2236 1
When GDB is configured and compiled, various macros are defined or left
d2244 1
a2244 1
If defined, then GDB will include support for the @@code{attach} and
d2283 1
a2283 1
struct'', also known as the ``u-page'') in kernel virtual memory.  GDB
d2289 1
a2289 1
Define this to cause GDB to determine the address of @@code{u} at
d2294 1
a2294 1
Define this to cause GDB to determine the address of @@code{u} at
d2310 1
a2310 1
will report a breakpoint hit incorrectly).  So GDB must step over it
d2343 1
a2343 1
@@var{filename} to be added to GDB's symbol table.
d2350 1
a2350 1
When starting an inferior, GDB normally expects to trap twice; once when
d2360 1
a2360 1
translate register values between GDB's internal representation and the
d2390 1
a2390 1
BFD provides support for GDB in several ways:
d2401 1
a2401 1
(such as the text section or the data section).  GDB simply calls BFD to
d2411 2
a2412 2
GDB uses an internal interface of BFD to determine where to find the
symbol information in an executable file or symbol-file.  GDB itself
d2414 1
a2414 1
symbols, but GDB uses BFD's cached information to find the symbols,
d2421 1
a2421 1
The opcodes library provides GDB's disassembler.  (It's a separate
d2461 1
a2461 1
algorithms of GDB.
d2541 1
a2541 1
@@section GDB Coding Standards
d2543 1
a2543 1
GDB follows the GNU coding standards, as described in
d2545 1
a2545 1
FTP from GNU archive sites.  GDB takes a strict interpretation of the
d2547 1
a2547 1
does not require it, GDB requires it.
d2549 1
a2549 1
GDB follows an additional set of coding standards specific to GDB,
d2553 1
a2553 1
check on a number of these rules.  GDB sources ought not to engender any
d2590 1
a2590 1
   stopped and GDB should read more commands.  */
d2611 2
a2612 2
in GDB that might be affected by the overhead of a function call, mainly
in symbol reading.  Most of GDB's performance is limited by the target
d2621 1
a2621 1
@@emph{define} them.  Prototypes for GDB functions must include both the
d2636 1
a2636 1
semantics.  Some things are done in certain ways in GDB because long
d2642 1
a2642 1
must be byte-swapped using @@code{SWAP_TARGET_AND_HOST} in GDB, or one of
d2701 1
a2701 1
found in @@code{get_saved_register}.  All machines that GDB 2.8 ran on
d2713 2
a2714 2
Another way to generalize GDB along a particular interface is with an
attribute struct.  For example, GDB has been generalized to handle
d2725 1
a2725 1
formats, or GDB's access to multiple source languages.
d2727 3
a2729 3
Please avoid duplicating code.  For example, in GDB 3.x all the code
interfacing between @@code{ptrace} and the rest of GDB was duplicated in
@@file{*-dep.c}, and so changing something was very painful.  In GDB 4.x,
d2738 1
a2738 1
@@node Porting GDB
d2740 1
a2740 1
@@chapter Porting GDB
d2742 1
a2742 1
Most of the work in making GDB compile on a new machine is in specifying
d2772 1
a2772 1
To configure GDB itself, edit @@file{gdb/configure.host} to recognize
d2778 1
a2778 1
Finally, you'll need to specify and define GDB's host-, native-, and
d2782 1
a2782 1
@@section Configuring GDB for Release
d2825 1
a2825 1
The testsuite is an important component of the GDB package.  While it is
d2831 1
a2831 1
The GDB testsuite uses the DejaGNU testing framework.  DejaGNU is built
d2838 1
a2838 1
To run the testsuite, simply go to the GDB object directory (or to the
d2856 1
a2856 1
real problems, whether in GDB or in the testsuite.  Expected failures
d2861 1
a2861 1
you may be masking serious bugs in GDB.  Unexpected successes are expected
d2866 1
a2866 1
When making any significant change to GDB, you should run the testsuite
d2876 2
a2877 2
If you add new functionality to GDB, please consider adding tests for it
as well; this way future GDB hackers can detect and fix their changes
d2889 1
a2889 1
handle the compilation of the programs that GDB will run.  The file
d2891 1
a2891 1
all GDB tests, while the directory @@file{testsuite/config} contains
d2912 1
a2912 1
configurations of GDB (but generic native-only tests may live here).
d2933 1
a2933 1
imagine a gdb.gcc, for tests of GDB's handling of GCC extensions.
d2937 1
a2937 1
Tests that exercise a specific GDB subsystem in more depth.  For
d2945 1
a2945 1
In many areas, the GDB tests are already quite comprehensive; you
d2955 1
a2955 1
necessary, such as when GDB has several valid responses to a command.
d2958 1
a2958 1
style.  Since GDB is used to debug programs written in many different
d2960 1
a2960 1
instance, some GDB bugs involving the display of source lines would
d2972 2
a2973 2
* Getting Started::		Getting started working on GDB
* Debugging GDB::		Debugging GDB with itself
d2980 1
a2980 1
GDB is a large and complicated program, and if you first starting to
d2984 2
a2985 2
This manual, the GDB Internals manual, has information which applies
generally to many parts of GDB.
d2990 1
a2990 1
explaining what is does, this can be thought of as a bug in GDB; feel
d3005 1
a3005 1
Start with the header files.  Once you have some idea of how GDB's internal
d3012 1
a3012 1
language, add some (perhaps trivial or non-useful) feature to GDB, use
d3018 1
a3018 1
Once you have a part of GDB to start with, you can find more
d3039 1
a3039 1
single-stepping works.  As a GDB user, you know that the @@code{step}
d3047 1
a3047 1
have to use @@code{grep} or @@kbd{M-x tags-search} in emacs, or run GDB on
d3053 1
a3053 1
GDB''---if we had some magic secret we would put it in this manual.
d3056 1
a3056 1
@@node Debugging GDB,,,Hints
d3058 1
a3058 1
@@section Debugging GDB with itself
d3060 1
a3060 1
If GDB is limping on your machine, this is the preferred way to get it
d3067 1
a3067 1
When you run GDB in the GDB source directory, it will read a
d3070 1
a3070 1
in a GDB being debugged by gdb, will pop you back up to the top level
d3078 1
a3078 1
Also, make sure that you've either compiled GDB with your local cc, or
d3084 1
a3084 1
GDB users.  In general we like to get well designed enhancements.
d3088 2
a3089 2
The GDB maintainers will only install ``cleanly designed'' patches.
This manual summarizes what we believe to be clean design for GDB.
d3101 1
a3101 1
changes in many programs (not just GDB, but GAS, Emacs, GCC, etc) can be
d3141 1
a3141 1
Please send patches directly to the GDB maintainers at
d3146 1
a3146 1
Fragments of old code in GDB sometimes reference or set the following
d3155 2
a3156 2
core file itself.  This information is now configured in BFD, and GDB
gets the info portably from there.  The values in GDB's configuration
d3158 1
a3158 1
and deleted from all of GDB's config files.
@


1.6
log
@* gdbint.texinfo (Target Architecture Definition): Fix screwed-up
references to ``Using Different Register and Memory Data
Representations''.
@
text
@d1680 1
a1680 1
@@xref{Using Different Register and Memory Data Representations}.
d1684 1
a1684 1
@@xref{Using Different Register and Memory Data Representations}.
d1688 1
a1688 1
@@xref{Using Different Register and Memory Data Representations}.
d1692 1
a1692 1
@@xref{Using Different Register and Memory Data Representations}.
d1696 2
a1697 1
form.  @@xref{Using Different Register and Memory Data Representations}.
d1701 2
a1702 1
form.  @@xref{Using Different Register and Memory Data Representations}.
@


1.5
log
@* gdbint.texinfo (Using Different Register and Memory Data
Representations): New section.
(REGISTER_CONVERTIBLE, REGISTER_RAW_SIZE, REGISTER_VIRTUAL_SIZE,
REGISTER_VIRTUAL_TYPE, REGISTER_CONVERT_TO_VIRTUAL,
REGISTER_CONVERT_TO_RAW): Document.
@
text
@d1680 1
a1680 1
@@xref{Using Different Target and Host Data Representations}.
d1684 1
a1684 1
@@xref{Using Different Target and Host Data Representations}.
d1688 1
a1688 1
@@xref{Using Different Target and Host Data Representations}.
d1692 1
a1692 1
@@xref{Using Different Target and Host Data Representations}.
d1696 1
a1696 1
form.  @@xref{Using Different Target and Host Data Representations}.
d1700 1
a1700 1
form.  @@xref{Using Different Target and Host Data Representations}.
@


1.5.2.1
log
@From JimB, fix @@xrefs.
@
text
@d1680 1
a1680 1
@@xref{Target Architecture Definition, , Using Different Register and Memory Data Representations}.
d1684 1
a1684 1
@@xref{Target Architecture Definition, , Using Different Register and Memory Data Representations}.
d1688 1
a1688 1
@@xref{Target Architecture Definition, , Using Different Register and Memory Data Representations}.
d1692 1
a1692 1
@@xref{Target Architecture Definition, , Using Different Register and Memory Data Representations}.
d1696 1
a1696 2
form.
@@xref{Target Architecture Definition, , Using Different Register and Memory Data Representations}.
d1700 1
a1700 2
form.
@@xref{Target Architecture Definition, , Using Different Register and Memory Data Representations}.
@


1.5.2.2
log
@Upgrade texinfo.tex to the file distributed with texinfo-4.0. Add
support for the target ``pdf'' to the gdb/doc directory.
@
text
@a65 5
@@c TeX can handle the contents at the start but makeinfo 3.12 can not
@@iftex
@@contents
@@end iftex

d3175 1
a3175 2
@@c TeX can handle the contents at the start but makeinfo 3.12 can not
@@ifinfo
a3176 5
@@end ifinfo
@@ifhtml
@@contents
@@end ifhtml

@


1.4
log
@2000-03-23  Fernando Nasser  <fnasser@@totem.to.cygnus.com>

	From David Whedon <dwhedon@@gordian.com>
        * gdbint.texinfo : Added paragraphs about command deprecation.
@
text
@d1156 91
d1677 24
@


1.3
log
@* gdbint.texinfo (FUNCTION_START_OFFSET): Document.
@
text
@d335 14
a348 2
place to add commands is in the @@code{_initialize_@@var{xyz}} routines at the
ends of most source files.
@


1.2
log
@* gdbint.texinfo: Document COERCE_FLOAT_TO_DOUBLE --- the new form.
@
text
@d1443 14
@


1.1
log
@Initial revision
@
text
@d49 1
a49 1
\xdef\manvers{\$Revision: 1.107 $}  % For use in headers, footers too
d89 1
d265 4
a268 4
theory is that GDB will replace a program instruction a trap, illegal
divide, or some other instruction that will cause an exception, and then
when it's encountered, GDB will take the exception and stop the program.
When the user says to continue, GDB will restore the original
d364 1
a364 1
header.  @@code{symfile_init} then uses this identification to locate a
d916 3
a1023 4
@@item MAINTENANCE_CMDS
If the value of this is 1, then a number of optional maintenance
commands are compiled in.

d1051 4
d1166 11
a1176 7
If a raw machine address includes any bits that are not really part of
the address, then define this macro to expand into an expression that
zeros those bits in @@var{addr}.  For example, the two low-order bits of
a Motorola 88K address may be used by some kernels for their own
purposes, since addresses must always be 4-byte aligned, and so are of
no use for addressing.  Those bits should be filtered out with an
expression such as @@code{((addr) & ~3)}.
d1209 3
d1216 3
d1224 3
d1240 35
a1274 1
Replaces all the other BREAKPOINTs.
d1277 2
a1278 1
valops.c
d1281 1
d1283 8
a1290 1
valops.c
d1310 23
d1369 7
a1375 4
Define this to extract from an array @@var{regbuf} containing the (raw)
register state, the address in which a function should return its
structure value, as a CORE_ADDR (or an expression that can be used as
one).
d1382 5
a1386 1
The number of the frame pointer register.
d1388 4
a1391 4
@@item FRAMELESS_FUNCTION_INVOCATION(fi, frameless)
Define this to set the variable @@var{frameless} to 1 if the function
invocation represented by @@var{fi} does not have a stack frame
associated with it.  Otherwise set it to 0.
d1407 11
a1417 7
an outermost frame, with no caller, and nonzero otherwise.  Three common
definitions are available. @@code{default_frame_chain_valid} (the
default) is nonzero if the chain pointer is nonzero and given frame's PC
is not inside the startup file (such as @@file{crt0.o}).
@@code{alternate_frame_chain_valid} is nonzero if the chain pointer is
nonzero and the given frame's PC is not in @@code{main()} or a known
entry point function (such as @@code{_start()}).
d1428 4
a1431 3
@@item FRAME_NUM_ARGS (val, fi)
For the frame described by @@var{fi}, set @@var{val} to the number of arguments
that are being passed.
d1450 9
a1464 5
@@item GDB_TARGET_IS_MACH386
@@item GDB_TARGET_IS_SUN3
@@item GDB_TARGET_IS_SUN386
Kludges that should go away.

d1477 1
a1477 1
@@code{get_saved_register}.  Currently this is only done for the a29k.
d1491 9
d1537 11
d1571 33
d1616 4
a1619 2
be the number of that register.  This need be defined only if
@@code{TARGET_WRITE_PC} is not defined.
d1628 4
d1655 2
a1656 1
Define this to push arguments onto the stack for inferior function call.
d1669 3
d1676 6
d1689 10
d1700 2
a1701 2
A C statement that advances the @@var{pc} across any function entry
prologue instructions so as to reach ``real'' code.
d1704 2
a1705 2
A C statement that should behave similarly, but that can stop as soon as
the function is known to have a frame.  If not defined,
d1714 5
a1718 2
Define this to be the number of the register that serves as the stack
pointer.
d1762 2
d1770 2
d1858 7
a1864 4
@@samp{TDEPFILES=@@dots{}}.  Also specifies the header file which
describes @@var{ttt}, by defining @@samp{TM_FILE= tm-@@var{ttt}.h}.  You
can also define @@samp{TM_CFLAGS}, @@samp{TM_CLIBS}, @@samp{TM_CDEPS}, but
these are now deprecated and may go away in future versions of GDB.
d2159 16
d2477 1
a2477 1
Prototypes must be used to @@emph{declare} functions but never to
d2482 4
a2485 24
For the sake of compatibility with pre-ANSI compilers, define prototypes
with the @@code{PARAMS} macro:

@@example @@code
extern int memory_remove_breakpoint PARAMS ((CORE_ADDR addr,
                                             char *contents_cache));
@@end example

Note the double parentheses around the parameter types.  This allows an
arbitrary number of parameters to be described, without freaking out the
C preprocessor.  When the function has no parameters, it should be
described like:

@@example @@code
extern void noprocess PARAMS ((void));
@@end example

The @@code{PARAMS} macro expands to its argument in ANSI C, or to a
simple @@code{()} in traditional C.

All external functions should have a @@code{PARAMS} declaration in a
header file that callers include, except for @@code{_initialize_*}
functions, which must be external so that @@file{init.c} construction
works, but shouldn't be visible to random source files.
d2593 1
d2678 143
d2862 1
a2862 1
Start with the header files.  Once you some idea of how GDB's internal
d2945 2
a2946 3
The GDB maintainers will only install ``cleanly designed'' patches.  You
may not always agree on what is clean design.
@@c @@pxref{Coding Style}, @@pxref{Clean Design}.
d2955 8
a2962 8
standard document for doing this by sending mail to
@@code{gnu@@@@prep.ai.mit.edu} and asking for it.  I recommend that people
write in "All programs owned by the Free Software Foundation" as "NAME
OF PROGRAM", so that changes in many programs (not just GDB, but GAS,
Emacs, GCC, etc) can be contributed with only one piece of legalese
pushed through the bureacracy and filed with the FSF.  I can't start
merging changes until this paperwork is received by the FSF (their
rules, which I follow since I maintain it for them).
d2965 7
a2971 7
feature as a small context diff or unidiff, suitable for "patch".
Each message sent to me should include the changes to C code and
header files for a single feature, plus ChangeLog entries for each
directory where files were modified, and diffs for any changes needed
to the manuals (gdb/doc/gdb.texi or gdb/doc/gdbint.texi).  If there
are a lot of changes for a single feature, they can be split down
into multiple messages.
d2973 1
a2973 1
In this way, if I read and like the feature, I can add it to the
d2975 2
a2976 2
If you leave out the ChangeLog, I have to write one.  If you leave
out the doc, I have to puzzle out what needs documenting.  Etc.
d2978 3
a2980 3
The reason to send each change in a separate message is that I will
not install some of the changes.  They'll be returned to you with
questions or comments.  If I'm doing my job, my message back to you
d2982 10
a2991 10
The reason to have separate messages for separate features is so
that other changes (which I @@emph{am} willing to accept) can be installed
while one or more changes are being reworked.  If multiple features
are sent in a single message, I tend to not put in the effort to sort
out the acceptable changes from the unacceptable, so none of the
features get installed until all are acceptable.

If this sounds painful or authoritarian, well, it is.  But I get a lot
of bug reports and a lot of patches, and most of them don't get
installed because I don't have the time to finish the job that the bug
d2994 3
a2996 7
they arrive.  The others go into a queue and get installed if and when
I scan back over the queue -- which can literally take months
sometimes.  It's in both our interests to make patch installation easy
-- you get your changes installed, and I make some forward progress on
GDB in a normal 12-hour day (instead of them having to wait until I
have a 14-hour or 16-hour day to spend cleaning up patches before I
can install them).
d2999 1
a2999 1
@@code{gdb-patches@@@@cygnus.com}.
@


1.1.1.1
log
@Initial creation of sourceware repository
@
text
@@


1.1.1.2
log
@import gdb-19990422 snapshot
@
text
@d49 1
a49 1
\xdef\manvers{\$Revision: 1.116 $}  % For use in headers, footers too
d1020 4
a1050 4
@@item USE_GENERIC_DUMMY_FRAMES
Define this to 1 if the target is using the generic inferior function
call code.  See @@code{blockframe.c} for more information.

a1200 3
@@var{BREAKPOINT} has been deprecated in favour of
@@var{BREAKPOINT_FROM_PC}.

a1204 3
@@var{BIG_BREAKPOINT} and @@var{LITTLE_BREAKPOINT} have been deprecated in
favour of @@var{BREAKPOINT_FROM_PC}.

a1209 3
@@var{BIG_REMOTE_BREAKPOINT} and @@var{LITTLE_REMOTE_BREAKPOINT} have been
deprecated in favour of @@var{BREAKPOINT_FROM_PC}.

d1223 1
a1223 18
Replaces all the other @@var{BREAKPOINT} macros.

@@item CALL_DUMMY_P
A C expresson that is non-zero when the target suports inferior function
calls.

@@item CALL_DUMMY_WORDS
Pointer to an array of @@var{LONGEST} words of data containing
host-byte-ordered @@var{REGISTER_BYTES} sized values that partially
specify the sequence of instructions needed for an inferior function
call.

Should be deprecated in favour of a macro that uses target-byte-ordered
data.

@@item SIZEOF_CALL_DUMMY_WORDS
The size of @@var{CALL_DUMMY_WORDS}.  When @@var{CALL_DUMMY_P} this must
return a positive value.  See also @@var{CALL_DUMMY_LENGTH}.
d1226 1
a1226 2
A static initializer for @@var{CALL_DUMMY_WORDS}.  Deprecated.

a1228 1

d1230 1
a1230 8
Stack adjustment needed when performing an inferior function call.

Should be deprecated in favor of something like @@var{STACK_ALIGN}.

@@item CALL_DUMMY_STACK_ADJUST_P
Predicate for use of @@var{CALL_DUMMY_STACK_ADJUST}.

Should be deprecated in favor of something like @@var{STACK_ALIGN}.
d1378 1
a1378 1
@@code{get_saved_register}.
a1508 3

@@item REGISTER_NAMES
Deprecated in favor of @@var{REGISTER_NAME}.
@


1.1.1.3
log
@import gdb-19990504 snapshot
@
text
@d49 1
a49 1
\xdef\manvers{\$Revision: 1.117 $}  % For use in headers, footers too
d1560 2
a1561 2
A C expression that returns the address of the ``real'' code beyond the
function entry prologue found at @@var{pc}.
d1564 2
a1565 2
A C expression that should behave similarly, but that can stop as soon
as the function is known to have a frame.  If not defined,
@


1.1.1.4
log
@import gdb-1999-05-25 snapshot
@
text
@d49 1
a49 1
\xdef\manvers{\$Revision: 1.120 $}  % For use in headers, footers too
d1333 4
a1336 4
@@item FRAMELESS_FUNCTION_INVOCATION(fi)
Define this to an expression that returns 1 if the function invocation
represented by @@var{fi} does not have a stack frame associated with it.
Otherwise return 0.
d1369 3
a1371 4
@@item FRAME_NUM_ARGS (fi)
For the frame described by @@var{fi} return the number of arguments that
are being passed.  If the number of arguments is not known, return
@@code{-1}.
d1532 1
a1532 2
Define this to push arguments onto the stack for inferior function
call. Return the updated stack pointer value.
@


1.1.1.5
log
@import gdb-1999-06-01 snapshot
@
text
@d49 1
a49 1
\xdef\manvers{\$Revision: 1.122 $}  % For use in headers, footers too
d1321 4
a1324 7
When @@var{EXTRACT_STRUCT_VALUE_ADDRESS_P} this is used to to extract
from an array @@var{regbuf} (containing the raw register state) the
address in which a function should return its structure value, as a
CORE_ADDR (or an expression that can be used as one).

@@item EXTRACT_STRUCT_VALUE_ADDRESS_P
Predicate for @@var{EXTRACT_STRUCT_VALUE_ADDRESS}.
a1620 2
At present this macro is not used.

a1625 2

At present this macro is not used.
@


1.1.1.6
log
@import gdb-1999-06-07 snapshot
@
text
@d49 1
a49 1
\xdef\manvers{\$Revision: 1.123 $}  % For use in headers, footers too
a914 3
@@item NO_STD_REGS
This macro is deprecated.

d1334 1
a1334 5
If the virtual frame pointer is kept in a register, then define this
macro to be the number (greater than or equal to zero) of that register.

This should only need to be defined if @@code{TARGET_READ_FP} and
@@code{TARGET_WRITE_FP} are not defined.
d1503 2
a1504 4
be the number (greater than or equal to zero) of that register.

This should only need to be defined if @@code{TARGET_READ_PC} and
@@code{TARGET_WRITE_PC} are not defined.
d1579 2
a1580 5
If the stack-pointer is kept in a register, then define this macro to be
the number (greater than or equal to zero) of that register.

This should only need to be defined if @@code{TARGET_WRITE_SP} and
@@code{TARGET_WRITE_SP} are not defined.
@


1.1.1.7
log
@import gdb-1999-06-14 snapshot
@
text
@d49 1
a49 1
\xdef\manvers{\$Revision: 1.124 $}  % For use in headers, footers too
a1399 9

@@item GDB_MULTI_ARCH
If defined and non-zero, enables suport for multiple architectures
within GDB.

The support can be enabled at two levels.  At level one, only
definitions for previously undefined macros are provided; at level two,
a multi-arch definition of all architecture dependant macros will be
defined.
@


1.1.1.8
log
@import gdb-1999-06-21 snapshot
@
text
@d49 1
a49 1
\xdef\manvers{\$Revision: 1.125 $}  % For use in headers, footers too
a2476 1
Don't put debugging printfs in the code.
d2685 3
a2687 2
The GDB maintainers will only install ``cleanly designed'' patches.
This manual summarizes what we believe to be clean design for GDB.
d2696 8
a2703 8
standard documents for doing this by sending mail to @@code{gnu@@@@gnu.org}
and asking for it.  We recommend that people write in "All programs
owned by the Free Software Foundation" as "NAME OF PROGRAM", so that
changes in many programs (not just GDB, but GAS, Emacs, GCC, etc) can be
contributed with only one piece of legalese pushed through the
bureacracy and filed with the FSF.  We can't start merging changes until
this paperwork is received by the FSF (their rules, which we follow
since we maintain it for them).
d2706 7
a2712 7
feature as a small context diff or unidiff, suitable for "patch".  Each
message sent to me should include the changes to C code and header files
for a single feature, plus ChangeLog entries for each directory where
files were modified, and diffs for any changes needed to the manuals
(gdb/doc/gdb.texinfo or gdb/doc/gdbint.texinfo).  If there are a lot of
changes for a single feature, they can be split down into multiple
messages.
d2714 1
a2714 1
In this way, if we read and like the feature, we can add it to the
d2716 2
a2717 2
If you leave out the ChangeLog, we have to write one.  If you leave
out the doc, we have to puzzle out what needs documenting.  Etc.
d2719 3
a2721 3
The reason to send each change in a separate message is that we will not
install some of the changes.  They'll be returned to you with questions
or comments.  If we're doing our job correctly, the message back to you
d2723 10
a2732 10
The reason to have separate messages for separate features is so that
the acceptable changes can be installed while one or more changes are
being reworked.  If multiple features are sent in a single message, we
tend to not put in the effort to sort out the acceptable changes from
the unacceptable, so none of the features get installed until all are
acceptable.

If this sounds painful or authoritarian, well, it is.  But we get a lot
of bug reports and a lot of patches, and many of them don't get
installed because we don't have the time to finish the job that the bug
d2735 7
a2741 3
they arrive.  The others go into a queue and get installed as time
permits, which, since the maintainers have many demands to meet, may not
be for quite some time.
d2744 1
a2744 1
@@code{gdb-patches@@@@sourceware.cygnus.com}.
@


1.1.1.9
log
@import gdb-1999-06-28 snapshot
@
text
@d49 1
a49 1
\xdef\manvers{\$Revision: 1.126 $}  % For use in headers, footers too
a88 1
* Testsuite::
a2560 143

@@node Testsuite

@@chapter Testsuite

The testsuite is an important component of the GDB package.  While it is
always worthwhile to encourage user testing, in practice this is rarely
sufficient; users typically use only a small subset of the available
commands, and it has proven all too common for a change to cause a
significant regression that went unnoticed for some time.

The GDB testsuite uses the DejaGNU testing framework.  DejaGNU is built
using tcl and expect.  The tests themselves are calls to various tcl
procs; the framework runs all the procs and summarizes the passes and
fails.

@@section Using the Testsuite

To run the testsuite, simply go to the GDB object directory (or to the
testsuite's objdir) and type @@code{make check}.  This just sets up some
environment variables and invokes DejaGNU's @@code{runtest} script.  While
the testsuite is running, you'll get mentions of which test file is in use,
and a mention of any unexpected passes or fails.  When the testsuite is
finished, you'll get a summary that looks like this:
@@example
                === gdb Summary ===

# of expected passes            6016
# of unexpected failures        58
# of unexpected successes       5
# of expected failures          183
# of unresolved testcases       3
# of untested testcases         5
@@end example
The ideal test run consists of expected passes only; however, reality
conspires to keep us from this ideal.  Unexpected failures indicate
real problems, whether in GDB or in the testsuite.  Expected failures
are still failures, but ones which have been decided are too hard to
deal with at the time; for instance, a test case might work everywhere
except on AIX, and there is no prospect of the AIX case being fixed in
the near future.  Expected failures should not be added lightly, since
you may be masking serious bugs in GDB.  Unexpected successes are expected
fails that are passing for some reason, while unresolved and untested
cases often indicate some minor catastrophe, such as the compiler being
unable to deal with a test program.

When making any significant change to GDB, you should run the testsuite
before and after the change, to confirm that there are no regressions.
Note that truly complete testing would require that you run the
testsuite with all supported configurations and a variety of compilers;
however this is more than really necessary.  In many cases testing with
a single configuration is sufficient.  Other useful options are to test
one big-endian (Sparc) and one little-endian (x86) host, a cross config
with a builtin simulator (powerpc-eabi, mips-elf), or a 64-bit host
(Alpha).

If you add new functionality to GDB, please consider adding tests for it
as well; this way future GDB hackers can detect and fix their changes
that break the functionality you added.  Similarly, if you fix a bug
that was not previously reported as a test failure, please add a test
case for it.  Some cases are extremely difficult to test, such as code
that handles host OS failures or bugs in particular versions of
compilers, and it's OK not to try to write tests for all of those.

@@section Testsuite Organization

The testsuite is entirely contained in @@file{gdb/testsuite}.  While the
testsuite includes some makefiles and configury, these are very minimal,
and used for little besides cleaning up, since the tests themselves
handle the compilation of the programs that GDB will run.  The file
@@file{testsuite/lib/gdb.exp} contains common utility procs useful for
all GDB tests, while the directory @@file{testsuite/config} contains
configuration-specific files, typically used for special-purpose
definitions of procs like @@code{gdb_load} and @@code{gdb_start}.

The tests themselves are to be found in @@file{testsuite/gdb.*} and
subdirectories of those.  The names of the test files must always end
with @@file{.exp}.  DejaGNU collects the test files by wildcarding
in the test directories, so both subdirectories and individual files
get chosen and run in alphabetical order.

The following table lists the main types of subdirectories and what they
are for.  Since DejaGNU finds test files no matter where they are
located, and since each test file sets up its own compilation and
execution environment, this organization is simply for convenience and
intelligibility.

@@table @@code

@@item gdb.base

This is the base testsuite.  The tests in it should apply to all
configurations of GDB (but generic native-only tests may live here).
The test programs should be in the subset of C that is valid K&R,
ANSI/ISO, and C++ (ifdefs are allowed if necessary, for instance
for prototypes).

@@item gdb.@@var{lang}

Language-specific tests for all languages besides C.  Examples are
@@file{gdb.c++} and @@file{gdb.java}.

@@item gdb.@@var{platform}

Non-portable tests.  The tests are specific to a specific configuration
(host or target), such as HP-UX or eCos.  Example is @@file{gdb.hp}, for
HP-UX.

@@item gdb.@@var{compiler}

Tests specific to a particular compiler.  As of this writing (June
1999), there aren't currently any groups of tests in this category that
couldn't just as sensibly be made platform-specific, but one could
imagine a gdb.gcc, for tests of GDB's handling of GCC extensions.

@@item gdb.@@var{subsystem}

Tests that exercise a specific GDB subsystem in more depth.  For
instance, @@file{gdb.disasm} exercises various disassemblers, while
@@file{gdb.stabs} tests pathways through the stabs symbol reader.

@@end table

@@section Writing Tests

In many areas, the GDB tests are already quite comprehensive; you
should be able to copy existing tests to handle new cases.

You should try to use @@code{gdb_test} whenever possible, since it
includes cases to handle all the unexpected errors that might happen.
However, it doesn't cost anything to add new test procedures; for
instance, @@file{gdb.base/exprs.exp} defines a @@code{test_expr} that
calls @@code{gdb_test} multiple times.

Only use @@code{send_gdb} and @@code{gdb_expect} when absolutely
necessary, such as when GDB has several valid responses to a command.

The source language programs do @@emph{not} need to be in a consistent
style.  Since GDB is used to debug programs written in many different
styles, it's worth having a mix of styles in the testsuite; for
instance, some GDB bugs involving the display of source lines would
never manifest themselves if the programs used GNU coding style
uniformly.
@


1.1.1.10
log
@import gdb-1999-07-05 snapshot
@
text
@d49 1
a49 1
\xdef\manvers{\$Revision: 1.127 $}  % For use in headers, footers too
a1574 6

@@item SAVE_DUMMY_FRAME_TOS (sp)
Used in @@samp{call_function_by_hand} to notify the target dependent code
of the top-of-stack value that will be passed to the the inferior code.
This is the value of the @@var{SP} after both the dummy frame and space
for parameters/results have been allocated on the stack.
@


1.1.1.11
log
@import gdb-1999-07-19 snapshot
@
text
@d49 1
a49 1
\xdef\manvers{\$Revision: 1.128 $}  % For use in headers, footers too
d1166 7
a1172 11
If a raw machine instruction address includes any bits that are not
really part of the address, then define this macro to expand into an
expression that zeros those bits in @@var{addr}.  This is only used for
addresses of instructions, and even then not in all contexts.

For example, the two low-order bits of the PC on the Hewlett-Packard PA
2.0 architecture contain the privilege level of the corresponding
instruction.  Since instructions must always be aligned on four-byte
boundaries, the processor masks out these bits to generate the actual
address of the instruction.  ADDR_BITS_REMOVE should filter out these
bits with an expression such as @@code{((addr) & ~3)}.
a2044 16

@@item PREPARE_TO_PROCEED @@var{select_it}
This (ugly) macro allows a native configuration to customize the way the
@@code{proceed} function in @@file{infrun.c} deals with switching between
threads.

In a multi-threaded task we may select another thread and then continue
or step.  But if the old thread was stopped at a breakpoint, it will
immediately cause another breakpoint stop without any execution (i.e. it
will report a breakpoint hit incorrectly).  So GDB must step over it
first.

If defined, @@code{PREPARE_TO_PROCEED} should check the current thread
against the thread that reported the most recent event.  If a step-over
is required, it returns TRUE.  If @@var{select_it} is non-zero, it should
reselect the old thread.
@


1.1.1.12
log
@import gdb-1999-08-09 snapshot
@
text
@d49 1
a49 1
\xdef\manvers{\$Revision: 1.129 $}  % For use in headers, footers too
d364 1
a364 1
header.  @@code{find_sym_fns} then uses this identification to locate a
@


1.1.1.13
log
@import gdb-1999-08-16 snapshot
@
text
@d49 1
a49 1
\xdef\manvers{\$Revision: 1.130 $}  % For use in headers, footers too
d265 4
a268 4
theory is that GDB will replace a program instruction with a trap,
illegal divide, or some other instruction that will cause an exception,
and then when it's encountered, GDB will take the exception and stop the
program. When the user says to continue, GDB will restore the original
@


1.1.1.14
log
@import gdb-1999-08-23 snapshot
@
text
@d49 1
a49 1
\xdef\manvers{\$Revision: 1.131 $}  % For use in headers, footers too
d2368 1
a2368 1
Prototypes must be used to @@emph{declare} functions, and may be used to
d2373 24
a2396 4
All external functions should have a declaration in a header file that
callers include, except for @@code{_initialize_*} functions, which must
be external so that @@file{init.c} construction works, but shouldn't be
visible to random source files.
@


1.1.1.15
log
@import gdb-1999-08-30 snapshot
@
text
@d49 1
a49 1
\xdef\manvers{\$Revision: 1.133 $}  % For use in headers, footers too
d1421 5
d1752 4
a1755 7
@@samp{TDEPFILES=@@dots{}} and @@samp{TDEPLIBS=@@dots{}}.  Also specifies
the header file which describes @@var{ttt}, by defining @@samp{TM_FILE=
tm-@@var{ttt}.h}.

You can also define @@samp{TM_CFLAGS}, @@samp{TM_CLIBS}, @@samp{TM_CDEPS},
but these are now deprecated, replaced by autoconf, and may go away in
future versions of GDB.
@


1.1.1.16
log
@import gdb-1999-09-08 snapshot
@
text
@d49 1
a49 1
\xdef\manvers{\$Revision: 1.134 $}  % For use in headers, footers too
a1482 11

@@item IN_SOLIB_DYNSYM_RESOLVE_CODE pc
Define this to evaluate to nonzero if the program is stopped in the
dynamic linker.

@@item SKIP_SOLIB_RESOLVER pc
Define this to evaluate to the (nonzero) address at which execution
should continue to get past the dynamic linker's symbol resolution
function.  A zero value indicates that it is not important or necessary
to set a breakpoint to get through the dynamic linker and that single
stepping will suffice.
@


1.1.1.17
log
@import gdb-1999-09-21
@
text
@d49 1
a49 1
\xdef\manvers{\$Revision: 1.136 $}  % For use in headers, footers too
a1598 10
@@item SKIP_PERMANENT_BREAKPOINT
Advance the inferior's PC past a permanent breakpoint.  GDB normally
steps over a breakpoint by removing it, stepping one instruction, and
re-inserting the breakpoint.  However, permanent breakpoints are
hardwired into the inferior, and can't be removed, so this strategy
doesn't work.  Calling SKIP_PERMANENT_BREAKPOINT adjusts the processor's
state so that execution will resume just after the breakpoint.  This
macro does the right thing even when the breakpoint is in the delay slot
of a branch or jump.

d2762 1
a2762 1
Start with the header files.  Once you have some idea of how GDB's internal
@


1.1.1.18
log
@import gdb-1999-10-11 snapshot
@
text
@d49 1
a49 1
\xdef\manvers{\$Revision: 1.138 $}  % For use in headers, footers too
a1446 9
@@item SYMBOLS_CAN_START_WITH_DOLLAR
Some systems have routines whose names start with @@samp{$}.  Giving this
macro a non-zero value tells GDB's expression parser to check for such
routines when parsing tokens that begin with @@samp{$}.

On HP-UX, certain system routines (millicode) have names beginning with
@@samp{$} or @@samp{$$}.  For example, @@code{$$dyncall} is a millicode
routine that handles inter-space procedure calls on PA-RISC.

a1540 4

@@item PARM_BOUNDARY
If non-zero, round arguments to a boundary of this many bits before
pushing them on the stack.
@


1.1.1.19
log
@import gdb-1999-10-18 snapshot
@
text
@d49 1
a49 1
\xdef\manvers{\$Revision: 1.139 $}  % For use in headers, footers too
a1240 17

@@item MEMORY_INSERT_BREAKPOINT (addr, contents_cache)
@@item MEMORY_REMOVE_BREAKPOINT (addr, contents_cache)

Insert or remove memory based breakpoints.  Reasonable defaults
(@@code{default_memory_insert_breakpoint} and
@@code{default_memory_remove_breakpoint} respectively) have been
provided so that it is not necessary to define these for most
architectures.  Architectures which may want to define
@@var{MEMORY_INSERT_BREAKPOINT} and @@var{MEMORY_REMOVE_BREAKPOINT} will
likely have instructions that are oddly sized or are not stored in a
conventional manner.

It may also be desirable (from an efficiency standpoint) to define
custom breakpoint insertion and removal routines if
@@var{BREAKPOINT_FROM_PC} needs to read the target's memory for some
reason.
@


1.1.1.20
log
@import gdb-1999-12-13 snapshot
@
text
@d49 1
a49 1
\xdef\manvers{\$Revision: 1.140 $}  % For use in headers, footers too
d1384 7
a1390 11
an outermost frame, with no caller, and nonzero otherwise.  Several
common definitions are available. 

@@code{file_frame_chain_valid} is nonzero if the chain pointer is nonzero
and given frame's PC is not inside the startup file (such as
@@file{crt0.o}).  @@code{func_frame_chain_valid} is nonzero if the chain
pointer is nonzero and the given frame's PC is not in @@code{main()} or a
known entry point function (such as @@code{_start()}).
@@code{generic_file_frame_chain_valid} and
@@code{generic_func_frame_chain_valid} are equivalent implementations for
targets using generic dummy frames.
@


1.1.1.21
log
@import gdb-2000-01-31 snapshot
@
text
@d49 1
a49 1
\xdef\manvers{\$Revision: 1.142 $}  % For use in headers, footers too
a1546 33

@@item SOFUN_ADDRESS_MAYBE_MISSING

Somebody clever observed that, the more actual addresses you have in the
debug information, the more time the linker has to spend relocating
them.  So whenever there's some other way the debugger could find the
address it needs, you should omit it from the debug info, to make
linking faster.

@@code{SOFUN_ADDRESS_MAYBE_MISSING} indicates that a particular set of
hacks of this sort are in use, affecting @@code{N_SO} and @@code{N_FUN}
entries in stabs-format debugging information.  @@code{N_SO} stabs mark
the beginning and ending addresses of compilation units in the text
segment.  @@code{N_FUN} stabs mark the starts and ends of functions.

@@code{SOFUN_ADDRESS_MAYBE_MISSING} means two things:
@@itemize @@bullet

@@item
@@code{N_FUN} stabs have an address of zero.  Instead, you should find the
addresses where the function starts by taking the function name from
the stab, and then looking that up in the minsyms (the linker/
assembler symbol table).  In other words, the stab has the name, and
the linker / assembler symbol table is the only place that carries
the address.

@@item
@@code{N_SO} stabs have an address of zero, too.  You just look at the
@@code{N_FUN} stabs that appear before and after the @@code{N_SO} stab,
and guess the starting and ending addresses of the compilation unit from
them.

@@end itemize
@


