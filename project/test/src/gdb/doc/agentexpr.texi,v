head	1.19;
access;
symbols
	gdb_7_6_1-2013-08-30-release:1.19
	gdb_7_6-2013-04-26-release:1.19
	gdb_7_6-branch:1.19.0.2
	gdb_7_6-2013-03-12-branchpoint:1.19
	gdb_7_5_1-2012-11-29-release:1.18
	gdb_7_5-2012-08-17-release:1.18
	gdb_7_5-branch:1.18.0.2
	gdb_7_5-2012-07-18-branchpoint:1.18
	gdb_7_4_1-2012-04-26-release:1.16.2.1
	gdb_7_4-2012-01-24-release:1.16.2.1
	gdb_7_4-branch:1.16.0.2
	gdb_7_4-2011-12-13-branchpoint:1.16
	gdb_7_3_1-2011-09-04-release:1.15
	gdb_7_3-2011-07-26-release:1.15
	gdb_7_3-branch:1.15.0.2
	gdb_7_3-2011-04-01-branchpoint:1.15
	gdb_7_2-2010-09-02-release:1.11
	gdb_7_2-branch:1.11.0.4
	gdb_7_2-2010-07-07-branchpoint:1.11
	gdb_7_1-2010-03-18-release:1.11
	gdb_7_1-branch:1.11.0.2
	gdb_7_1-2010-02-18-branchpoint:1.11
	gdb_7_0_1-2009-12-22-release:1.8
	gdb_7_0-2009-10-06-release:1.8
	gdb_7_0-branch:1.8.0.4
	gdb_7_0-2009-09-16-branchpoint:1.8
	arc-sim-20090309:1.7
	msnyder-checkpoint-072509-branch:1.8.0.2
	msnyder-checkpoint-072509-branchpoint:1.8
	arc-insight_6_8-branch:1.7.0.20
	arc-insight_6_8-branchpoint:1.7
	insight_6_8-branch:1.7.0.18
	insight_6_8-branchpoint:1.7
	reverse-20081226-branch:1.7.0.16
	reverse-20081226-branchpoint:1.7
	multiprocess-20081120-branch:1.7.0.14
	multiprocess-20081120-branchpoint:1.7
	reverse-20080930-branch:1.7.0.12
	reverse-20080930-branchpoint:1.7
	reverse-20080717-branch:1.7.0.10
	reverse-20080717-branchpoint:1.7
	msnyder-reverse-20080609-branch:1.7.0.8
	msnyder-reverse-20080609-branchpoint:1.7
	drow-reverse-20070409-branch:1.7.0.6
	drow-reverse-20070409-branchpoint:1.7
	gdb_6_8-2008-03-27-release:1.7
	gdb_6_8-branch:1.7.0.4
	gdb_6_8-2008-02-26-branchpoint:1.7
	gdb_6_7_1-2007-10-29-release:1.7
	gdb_6_7-2007-10-10-release:1.7
	gdb_6_7-branch:1.7.0.2
	gdb_6_7-2007-09-07-branchpoint:1.7
	insight_6_6-20070208-release:1.6
	gdb_6_6-2006-12-18-release:1.6
	gdb_6_6-branch:1.6.0.6
	gdb_6_6-2006-11-15-branchpoint:1.6
	insight_6_5-20061003-release:1.6
	gdb-csl-symbian-6_4_50_20060226-12:1.5
	gdb-csl-sourcerygxx-3_4_4-25:1.5
	nickrob-async-20060828-mergepoint:1.6
	gdb-csl-symbian-6_4_50_20060226-11:1.5
	gdb-csl-sourcerygxx-4_1-17:1.5
	gdb-csl-20060226-branch-local-2:1.5
	gdb-csl-sourcerygxx-4_1-14:1.5
	gdb-csl-sourcerygxx-4_1-13:1.5
	gdb-csl-sourcerygxx-4_1-12:1.5
	gdb-csl-sourcerygxx-3_4_4-21:1.5
	gdb_6_5-20060621-release:1.6
	gdb-csl-sourcerygxx-4_1-9:1.5
	gdb-csl-sourcerygxx-4_1-8:1.5
	gdb-csl-sourcerygxx-4_1-7:1.5
	gdb-csl-arm-2006q1-6:1.5
	gdb-csl-sourcerygxx-4_1-6:1.5
	gdb-csl-symbian-6_4_50_20060226-10:1.5
	gdb-csl-symbian-6_4_50_20060226-9:1.5
	gdb-csl-symbian-6_4_50_20060226-8:1.5
	gdb-csl-coldfire-4_1-11:1.5
	gdb-csl-sourcerygxx-3_4_4-19:1.5
	gdb-csl-coldfire-4_1-10:1.5
	gdb_6_5-branch:1.6.0.4
	gdb_6_5-2006-05-14-branchpoint:1.6
	gdb-csl-sourcerygxx-4_1-5:1.5
	nickrob-async-20060513-branch:1.6.0.2
	nickrob-async-20060513-branchpoint:1.6
	gdb-csl-sourcerygxx-4_1-4:1.5
	msnyder-reverse-20060502-branch:1.5.0.48
	msnyder-reverse-20060502-branchpoint:1.5
	gdb-csl-morpho-4_1-4:1.5
	gdb-csl-sourcerygxx-3_4_4-17:1.5
	readline_5_1-import-branch:1.5.0.46
	readline_5_1-import-branchpoint:1.5
	gdb-csl-20060226-branch-merge-to-csl-symbian-1:1.5
	gdb-csl-symbian-20060226-branch:1.5.0.44
	gdb-csl-symbian-20060226-branchpoint:1.5
	gdb-csl-20060226-branch-merge-to-csl-local-1:1.5
	msnyder-reverse-20060331-branch:1.5.0.42
	msnyder-reverse-20060331-branchpoint:1.5
	gdb-csl-available-20060303-branch:1.5.0.40
	gdb-csl-available-20060303-branchpoint:1.5
	gdb-csl-20060226-branch:1.5.0.38
	gdb-csl-20060226-branchpoint:1.5
	gdb_6_4-20051202-release:1.5
	msnyder-fork-checkpoint-branch:1.5.0.36
	msnyder-fork-checkpoint-branchpoint:1.5
	gdb-csl-gxxpro-6_3-branch:1.5.0.34
	gdb-csl-gxxpro-6_3-branchpoint:1.5
	gdb_6_4-branch:1.5.0.32
	gdb_6_4-2005-11-01-branchpoint:1.5
	gdb-csl-arm-20051020-branch:1.5.0.30
	gdb-csl-arm-20051020-branchpoint:1.5
	msnyder-tracepoint-checkpoint-branch:1.5.0.28
	msnyder-tracepoint-checkpoint-branchpoint:1.5
	gdb-csl-arm-20050325-2005-q1b:1.5
	gdb-csl-arm-20050325-2005-q1a:1.5
	csl-arm-20050325-branch:1.5.0.26
	csl-arm-20050325-branchpoint:1.5
	gdb-post-i18n-errorwarning-20050211:1.5
	gdb-pre-i18n-errorwarning-20050211:1.5
	gdb_6_3-20041109-release:1.5
	gdb_6_3-branch:1.5.0.22
	gdb_6_3-20041019-branchpoint:1.5
	drow_intercu-merge-20040921:1.5
	drow_intercu-merge-20040915:1.5
	jimb-gdb_6_2-e500-branch:1.5.0.24
	jimb-gdb_6_2-e500-branchpoint:1.5
	gdb_6_2-20040730-release:1.5
	gdb_6_2-branch:1.5.0.20
	gdb_6_2-2004-07-10-gmt-branchpoint:1.5
	gdb_6_1_1-20040616-release:1.5
	gdb_6_1-2004-04-05-release:1.5
	drow_intercu-merge-20040402:1.5
	drow_intercu-merge-20040327:1.5
	ezannoni_pie-20040323-branch:1.5.0.18
	ezannoni_pie-20040323-branchpoint:1.5
	cagney_tramp-20040321-mergepoint:1.5
	cagney_tramp-20040309-branch:1.5.0.16
	cagney_tramp-20040309-branchpoint:1.5
	gdb_6_1-branch:1.5.0.14
	gdb_6_1-2004-03-01-gmt-branchpoint:1.5
	drow_intercu-20040221-branch:1.5.0.12
	drow_intercu-20040221-branchpoint:1.5
	cagney_bfdfile-20040213-branch:1.5.0.10
	cagney_bfdfile-20040213-branchpoint:1.5
	drow-cplus-merge-20040208:1.5
	carlton_dictionary-20040126-merge:1.5
	cagney_bigcore-20040122-branch:1.5.0.8
	cagney_bigcore-20040122-branchpoint:1.5
	drow-cplus-merge-20040113:1.5
	drow-cplus-merge-20031224:1.5
	drow-cplus-merge-20031220:1.5
	carlton_dictionary-20031215-merge:1.5
	drow-cplus-merge-20031214:1.5
	carlton-dictionary-20031111-merge:1.5
	gdb_6_0-2003-10-04-release:1.4.2.1
	kettenis_sparc-20030918-branch:1.5.0.6
	kettenis_sparc-20030918-branchpoint:1.5
	carlton_dictionary-20030917-merge:1.5
	ezannoni_pie-20030916-branchpoint:1.5
	ezannoni_pie-20030916-branch:1.5.0.4
	cagney_x86i386-20030821-branch:1.5.0.2
	cagney_x86i386-20030821-branchpoint:1.5
	carlton_dictionary-20030805-merge:1.5
	carlton_dictionary-20030627-merge:1.4
	gdb_6_0-branch:1.4.0.2
	gdb_6_0-2003-06-23-branchpoint:1.4
	jimb-ppc64-linux-20030613-branch:1.3.0.32
	jimb-ppc64-linux-20030613-branchpoint:1.3
	cagney_convert-20030606-branch:1.3.0.30
	cagney_convert-20030606-branchpoint:1.3
	cagney_writestrings-20030508-branch:1.3.0.28
	cagney_writestrings-20030508-branchpoint:1.3
	jimb-ppc64-linux-20030528-branch:1.3.0.26
	jimb-ppc64-linux-20030528-branchpoint:1.3
	carlton_dictionary-20030523-merge:1.3
	cagney_fileio-20030521-branch:1.3.0.24
	cagney_fileio-20030521-branchpoint:1.3
	kettenis_i386newframe-20030517-mergepoint:1.3
	jimb-ppc64-linux-20030509-branch:1.3.0.22
	jimb-ppc64-linux-20030509-branchpoint:1.3
	kettenis_i386newframe-20030504-mergepoint:1.3
	carlton_dictionary-20030430-merge:1.3
	kettenis_i386newframe-20030419-branch:1.3.0.20
	kettenis_i386newframe-20030419-branchpoint:1.3
	carlton_dictionary-20030416-merge:1.3
	cagney_frameaddr-20030409-mergepoint:1.3
	kettenis_i386newframe-20030406-branch:1.3.0.18
	kettenis_i386newframe-20030406-branchpoint:1.3
	cagney_frameaddr-20030403-branchpoint:1.3
	cagney_frameaddr-20030403-branch:1.3.0.16
	cagney_framebase-20030330-mergepoint:1.3
	cagney_framebase-20030326-branch:1.3.0.14
	cagney_framebase-20030326-branchpoint:1.3
	cagney_lazyid-20030317-branch:1.3.0.12
	cagney_lazyid-20030317-branchpoint:1.3
	kettenis-i386newframe-20030316-mergepoint:1.3
	offbyone-20030313-branch:1.3.0.10
	offbyone-20030313-branchpoint:1.3
	kettenis-i386newframe-20030308-branch:1.3.0.8
	kettenis-i386newframe-20030308-branchpoint:1.3
	carlton_dictionary-20030305-merge:1.3
	cagney_offbyone-20030303-branch:1.3.0.6
	cagney_offbyone-20030303-branchpoint:1.3
	carlton_dictionary-20030207-merge:1.3
	interps-20030203-mergepoint:1.3
	interps-20030202-branch:1.3.0.4
	interps-20030202-branchpoint:1.3
	cagney-unwind-20030108-branch:1.3.0.2
	cagney-unwind-20030108-branchpoint:1.3
	carlton_dictionary-20021223-merge:1.3
	gdb_5_3-2002-12-12-release:1.2
	carlton_dictionary-20021115-merge:1.2
	kseitz_interps-20021105-merge:1.2
	kseitz_interps-20021103-merge:1.2
	drow-cplus-merge-20021020:1.2
	drow-cplus-merge-20021025:1.2
	carlton_dictionary-20021025-merge:1.2
	carlton_dictionary-20021011-merge:1.2
	drow-cplus-branch:1.2.0.30
	drow-cplus-branchpoint:1.2
	kseitz_interps-20020930-merge:1.2
	carlton_dictionary-20020927-merge:1.2
	carlton_dictionary-branch:1.2.0.28
	carlton_dictionary-20020920-branchpoint:1.2
	gdb_5_3-branch:1.2.0.26
	gdb_5_3-2002-09-04-branchpoint:1.2
	kseitz_interps-20020829-merge:1.2
	cagney_sysregs-20020825-branch:1.2.0.24
	cagney_sysregs-20020825-branchpoint:1.2
	readline_4_3-import-branch:1.2.0.22
	readline_4_3-import-branchpoint:1.2
	gdb_5_2_1-2002-07-23-release:1.2
	kseitz_interps-20020528-branch:1.2.0.20
	kseitz_interps-20020528-branchpoint:1.2
	cagney_regbuf-20020515-branch:1.2.0.18
	cagney_regbuf-20020515-branchpoint:1.2
	jimb-macro-020506-branch:1.2.0.16
	jimb-macro-020506-branchpoint:1.2
	gdb_5_2-2002-04-29-release:1.2
	gdb_5_2-branch:1.2.0.14
	gdb_5_2-2002-03-03-branchpoint:1.2
	gdb_5_1_1-2002-01-24-release:1.2
	gdb_5_1_0_1-2002-01-03-release:1.2
	cygnus_cvs_20020108_pre:1.2
	gdb_5_1_0_1-2002-01-03-branch:1.2.0.12
	gdb_5_1_0_1-2002-01-03-branchpoint:1.2
	gdb_5_1-2001-11-21-release:1.2
	gdb_s390-2001-09-26-branch:1.2.0.10
	gdb_s390-2001-09-26-branchpoint:1.2
	gdb_5_1-2001-07-29-branch:1.2.0.8
	gdb_5_1-2001-07-29-branchpoint:1.2
	dberlin-typesystem-branch:1.2.0.6
	dberlin-typesystem-branchpoint:1.2
	gdb-post-ptid_t-2001-05-03:1.2
	gdb-pre-ptid_t-2001-05-03:1.2
	insight-precleanup-2001-01-01:1.2
	gdb-post-protoization-2000-07-29:1.2
	gdb-pre-protoization-2000-07-29:1.2
	gdb-premipsmulti-2000-06-06-branch:1.2.0.4
	gdb-premipsmulti-2000-06-06-branchpoint:1.2
	gdb-post-params-removal-2000-06-04:1.2
	gdb-pre-params-removal-2000-06-04:1.2
	gdb-post-params-removal-2000-05-28:1.2
	gdb-pre-params-removal-2000-05-28:1.2
	gdb_5_0-2000-05-19-release:1.2
	gdb_4_18_2-2000-05-18-release:1.2
	gdb_4_95_1-2000-05-11-snapshot:1.2
	gdb_4_95_0-2000-04-27-snapshot:1.2
	gdb_5_0-2000-04-10-branch:1.2.0.2
	gdb_5_0-2000-04-10-branchpoint:1.2
	repo-unification-2000-02-06:1.1.1.1
	insight-2000-02-04:1.1.1.1
	gdb-2000-02-04:1.1.1.1
	gdb-2000-02-02:1.1.1.1
	gdb-2000-02-01:1.1.1.1
	gdb-2000-01-31:1.1.1.1
	gdb-2000-01-26:1.1.1.1
	gdb-2000-01-24:1.1.1.1
	gdb-2000-01-17:1.1.1.1
	gdb-2000-01-10:1.1.1.1
	gdb-2000-01-05:1.1.1.1
	gdb-1999-12-21:1.1.1.1
	gdb-1999-12-13:1.1.1.1
	gdb-1999-12-07:1.1.1.1
	gdb-1999-12-06:1.1.1.1
	gdb-1999-11-16:1.1.1.1
	gdb-1999-11-08:1.1.1.1
	gdb-1999-11-01:1.1.1.1
	gdb-1999-10-25:1.1.1.1
	gdb-1999-10-18:1.1.1.1
	gdb-1999-10-11:1.1.1.1
	gdb-1999-10-04:1.1.1.1
	gdb-1999-09-28:1.1.1.1
	gdb-1999-09-21:1.1.1.1
	gdb-1999-09-13:1.1.1.1
	gdb-1999-09-08:1.1.1.1
	gdb-1999-08-30:1.1.1.1
	gdb-1999-08-23:1.1.1.1
	gdb-1999-08-16:1.1.1.1
	gdb-1999-08-09:1.1.1.1
	gdb-1999-08-02:1.1.1.1
	gdb-1999-07-26:1.1.1.1
	gdb-1999-07-19:1.1.1.1
	gdb-1999-07-12:1.1.1.1
	gdb-post-reformat-19990707:1.1.1.1
	gdb-1999-07-07-post-reformat-snapshot:1.1.1.1
	gdb-pre-reformat-19990707:1.1.1.1
	gdb-1999-07-07:1.1.1.1
	gdb-1999-07-05:1.1.1.1
	gdb-1999-06-28:1.1.1.1
	gdb-1999-06-21:1.1.1.1
	gdb-1999-06-14:1.1.1.1
	gdb-1999-06-07:1.1.1.1
	gdb-1999-06-01:1.1.1.1
	gdb-4_18-branch:1.1.1.1.0.2
	gdb-4_18-release:1.1.1.1
	gdb-1999-05-25:1.1.1.1
	gdb-1999-05-19:1.1.1.1
	gdb-1999-05-10:1.1.1.1
	gdb-19990504:1.1.1.1
	gdb-19990422:1.1.1.1
	SNAPSHOT:1.1.1
	gdb-4_18:1.1.1.1
	GDB_4_18:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.19
date	2013.01.01.06.32.56;	author brobecke;	state Exp;
branches;
next	1.18;

1.18
date	2012.07.02.15.29.37;	author shebs;	state Exp;
branches;
next	1.17;

1.17
date	2012.01.04.08.17.20;	author brobecke;	state Exp;
branches;
next	1.16;

1.16
date	2011.11.02.23.44.20;	author shebs;	state Exp;
branches
	1.16.2.1;
next	1.15;

1.15
date	2011.02.24.07.38.00;	author brobecke;	state Exp;
branches;
next	1.14;

1.14
date	2011.02.21.08.40.27;	author teawater;	state Exp;
branches;
next	1.13;

1.13
date	2011.02.18.20.55.44;	author tromey;	state Exp;
branches;
next	1.12;

1.12
date	2011.01.05.05.09.52;	author brobecke;	state Exp;
branches;
next	1.11;

1.11
date	2010.01.01.07.54.37;	author brobecke;	state Exp;
branches;
next	1.10;

1.10
date	2009.12.28.23.39.09;	author shebs;	state Exp;
branches;
next	1.9;

1.9
date	2009.11.11.15.08.50;	author palves;	state Exp;
branches;
next	1.8;

1.8
date	2009.07.14.21.40.32;	author shebs;	state Exp;
branches;
next	1.7;

1.7
date	2007.01.20.16.51.56;	author eliz;	state Exp;
branches;
next	1.6;

1.6
date	2006.05.10.18.49.08;	author drow;	state Exp;
branches;
next	1.5;

1.5
date	2003.08.04.20.43.57;	author cagney;	state Exp;
branches;
next	1.4;

1.4
date	2003.06.22.04.27.24;	author drow;	state Exp;
branches
	1.4.2.1;
next	1.3;

1.3
date	2002.12.20.09.35.03;	author kazu;	state Exp;
branches;
next	1.2;

1.2
date	2000.02.16.04.11.25;	author kevinb;	state Exp;
branches
	1.2.28.1
	1.2.30.1;
next	1.1;

1.1
date	99.04.16.01.34.07;	author shebs;	state Exp;
branches
	1.1.1.1;
next	;

1.16.2.1
date	2012.01.06.04.43.34;	author brobecke;	state Exp;
branches;
next	;

1.4.2.1
date	2003.08.04.20.43.35;	author cagney;	state Exp;
branches;
next	;

1.2.28.1
date	2002.12.23.19.39.07;	author carlton;	state Exp;
branches;
next	1.2.28.2;

1.2.28.2
date	2003.06.27.21.50.17;	author carlton;	state Exp;
branches;
next	1.2.28.3;

1.2.28.3
date	2003.08.05.17.13.19;	author carlton;	state Exp;
branches;
next	;

1.2.30.1
date	2003.12.14.20.27.43;	author drow;	state Exp;
branches;
next	;

1.1.1.1
date	99.04.16.01.34.07;	author shebs;	state Exp;
branches;
next	;


desc
@@


1.19
log
@Update years in copyright notice for the GDB files.

Two modifications:
  1. The addition of 2013 to the copyright year range for every file;
  2. The use of a single year range, instead of potentially multiple
     year ranges, as approved by the FSF.
@
text
@@@c \input texinfo
@@c %**start of header
@@c @@setfilename agentexpr.info
@@c @@settitle GDB Agent Expressions
@@c @@setchapternewpage off
@@c %**end of header

@@c This file is part of the GDB manual.
@@c
@@c Copyright (C) 2003-2013 Free Software Foundation, Inc.
@@c
@@c See the file gdb.texinfo for copying conditions.

@@node Agent Expressions
@@appendix The GDB Agent Expression Mechanism

In some applications, it is not feasible for the debugger to interrupt
the program's execution long enough for the developer to learn anything
helpful about its behavior.  If the program's correctness depends on its
real-time behavior, delays introduced by a debugger might cause the
program to fail, even when the code itself is correct.  It is useful to
be able to observe the program's behavior without interrupting it.

Using GDB's @@code{trace} and @@code{collect} commands, the user can
specify locations in the program, and arbitrary expressions to evaluate
when those locations are reached.  Later, using the @@code{tfind}
command, she can examine the values those expressions had when the
program hit the trace points.  The expressions may also denote objects
in memory --- structures or arrays, for example --- whose values GDB
should record; while visiting a particular tracepoint, the user may
inspect those objects as if they were in memory at that moment.
However, because GDB records these values without interacting with the
user, it can do so quickly and unobtrusively, hopefully not disturbing
the program's behavior.

When GDB is debugging a remote target, the GDB @@dfn{agent} code running
on the target computes the values of the expressions itself.  To avoid
having a full symbolic expression evaluator on the agent, GDB translates
expressions in the source language into a simpler bytecode language, and
then sends the bytecode to the agent; the agent then executes the
bytecode, and records the values for GDB to retrieve later.

The bytecode language is simple; there are forty-odd opcodes, the bulk
of which are the usual vocabulary of C operands (addition, subtraction,
shifts, and so on) and various sizes of literals and memory reference
operations.  The bytecode interpreter operates strictly on machine-level
values --- various sizes of integers and floating point numbers --- and
requires no information about types or symbols; thus, the interpreter's
internal data structures are simple, and each bytecode requires only a
few native machine instructions to implement it.  The interpreter is
small, and strict limits on the memory and time required to evaluate an
expression are easy to determine, making it suitable for use by the
debugging agent in real-time applications.

@@menu
* General Bytecode Design::     Overview of the interpreter.
* Bytecode Descriptions::       What each one does.
* Using Agent Expressions::     How agent expressions fit into the big picture.
* Varying Target Capabilities:: How to discover what the target can do.
* Rationale::                   Why we did it this way.
@@end menu


@@c @@node Rationale
@@c @@section Rationale


@@node General Bytecode Design
@@section General Bytecode Design

The agent represents bytecode expressions as an array of bytes.  Each
instruction is one byte long (thus the term @@dfn{bytecode}).  Some
instructions are followed by operand bytes; for example, the @@code{goto}
instruction is followed by a destination for the jump.

The bytecode interpreter is a stack-based machine; most instructions pop
their operands off the stack, perform some operation, and push the
result back on the stack for the next instruction to consume.  Each
element of the stack may contain either a integer or a floating point
value; these values are as many bits wide as the largest integer that
can be directly manipulated in the source language.  Stack elements
carry no record of their type; bytecode could push a value as an
integer, then pop it as a floating point value.  However, GDB will not
generate code which does this.  In C, one might define the type of a
stack element as follows:
@@example
union agent_val @@{
  LONGEST l;
  DOUBLEST d;
@@};
@@end example
@@noindent
where @@code{LONGEST} and @@code{DOUBLEST} are @@code{typedef} names for
the largest integer and floating point types on the machine.

By the time the bytecode interpreter reaches the end of the expression,
the value of the expression should be the only value left on the stack.
For tracing applications, @@code{trace} bytecodes in the expression will
have recorded the necessary data, and the value on the stack may be
discarded.  For other applications, like conditional breakpoints, the
value may be useful.

Separate from the stack, the interpreter has two registers:
@@table @@code
@@item pc
The address of the next bytecode to execute.

@@item start
The address of the start of the bytecode expression, necessary for
interpreting the @@code{goto} and @@code{if_goto} instructions.

@@end table
@@noindent
Neither of these registers is directly visible to the bytecode language
itself, but they are useful for defining the meanings of the bytecode
operations.

There are no instructions to perform side effects on the running
program, or call the program's functions; we assume that these
expressions are only used for unobtrusive debugging, not for patching
the running code.  

Most bytecode instructions do not distinguish between the various sizes
of values, and operate on full-width values; the upper bits of the
values are simply ignored, since they do not usually make a difference
to the value computed.  The exceptions to this rule are:
@@table @@asis

@@item memory reference instructions (@@code{ref}@@var{n})
There are distinct instructions to fetch different word sizes from
memory.  Once on the stack, however, the values are treated as full-size
integers.  They may need to be sign-extended; the @@code{ext} instruction
exists for this purpose.

@@item the sign-extension instruction (@@code{ext} @@var{n})
These clearly need to know which portion of their operand is to be
extended to occupy the full length of the word.

@@end table

If the interpreter is unable to evaluate an expression completely for
some reason (a memory location is inaccessible, or a divisor is zero,
for example), we say that interpretation ``terminates with an error''.
This means that the problem is reported back to the interpreter's caller
in some helpful way.  In general, code using agent expressions should
assume that they may attempt to divide by zero, fetch arbitrary memory
locations, and misbehave in other ways.

Even complicated C expressions compile to a few bytecode instructions;
for example, the expression @@code{x + y * z} would typically produce
code like the following, assuming that @@code{x} and @@code{y} live in
registers, and @@code{z} is a global variable holding a 32-bit
@@code{int}:
@@example
reg 1
reg 2
const32 @@i{address of z}
ref32
ext 32
mul
add
end
@@end example

In detail, these mean:
@@table @@code

@@item reg 1
Push the value of register 1 (presumably holding @@code{x}) onto the
stack.

@@item reg 2
Push the value of register 2 (holding @@code{y}).

@@item const32 @@i{address of z}
Push the address of @@code{z} onto the stack.

@@item ref32
Fetch a 32-bit word from the address at the top of the stack; replace
the address on the stack with the value.  Thus, we replace the address
of @@code{z} with @@code{z}'s value.

@@item ext 32
Sign-extend the value on the top of the stack from 32 bits to full
length.  This is necessary because @@code{z} is a signed integer.

@@item mul
Pop the top two numbers on the stack, multiply them, and push their
product.  Now the top of the stack contains the value of the expression
@@code{y * z}.

@@item add
Pop the top two numbers, add them, and push the sum.  Now the top of the
stack contains the value of @@code{x + y * z}.

@@item end
Stop executing; the value left on the stack top is the value to be
recorded.

@@end table


@@node Bytecode Descriptions
@@section Bytecode Descriptions

Each bytecode description has the following form:

@@table @@asis

@@item @@code{add} (0x02): @@var{a} @@var{b} @@result{} @@var{a+b}

Pop the top two stack items, @@var{a} and @@var{b}, as integers; push
their sum, as an integer.

@@end table

In this example, @@code{add} is the name of the bytecode, and
@@code{(0x02)} is the one-byte value used to encode the bytecode, in
hexadecimal.  The phrase ``@@var{a} @@var{b} @@result{} @@var{a+b}'' shows
the stack before and after the bytecode executes.  Beforehand, the stack
must contain at least two values, @@var{a} and @@var{b}; since the top of
the stack is to the right, @@var{b} is on the top of the stack, and
@@var{a} is underneath it.  After execution, the bytecode will have
popped @@var{a} and @@var{b} from the stack, and replaced them with a
single value, @@var{a+b}.  There may be other values on the stack below
those shown, but the bytecode affects only those shown.

Here is another example:

@@table @@asis

@@item @@code{const8} (0x22) @@var{n}: @@result{} @@var{n}
Push the 8-bit integer constant @@var{n} on the stack, without sign
extension.

@@end table

In this example, the bytecode @@code{const8} takes an operand @@var{n}
directly from the bytecode stream; the operand follows the @@code{const8}
bytecode itself.  We write any such operands immediately after the name
of the bytecode, before the colon, and describe the exact encoding of
the operand in the bytecode stream in the body of the bytecode
description.

For the @@code{const8} bytecode, there are no stack items given before
the @@result{}; this simply means that the bytecode consumes no values
from the stack.  If a bytecode consumes no values, or produces no
values, the list on either side of the @@result{} may be empty.

If a value is written as @@var{a}, @@var{b}, or @@var{n}, then the bytecode
treats it as an integer.  If a value is written is @@var{addr}, then the
bytecode treats it as an address.

We do not fully describe the floating point operations here; although
this design can be extended in a clean way to handle floating point
values, they are not of immediate interest to the customer, so we avoid
describing them, to save time.


@@table @@asis

@@item @@code{float} (0x01): @@result{}

Prefix for floating-point bytecodes.  Not implemented yet.

@@item @@code{add} (0x02): @@var{a} @@var{b} @@result{} @@var{a+b}
Pop two integers from the stack, and push their sum, as an integer.

@@item @@code{sub} (0x03): @@var{a} @@var{b} @@result{} @@var{a-b}
Pop two integers from the stack, subtract the top value from the
next-to-top value, and push the difference.

@@item @@code{mul} (0x04): @@var{a} @@var{b} @@result{} @@var{a*b}
Pop two integers from the stack, multiply them, and push the product on
the stack.  Note that, when one multiplies two @@var{n}-bit numbers
yielding another @@var{n}-bit number, it is irrelevant whether the
numbers are signed or not; the results are the same.

@@item @@code{div_signed} (0x05): @@var{a} @@var{b} @@result{} @@var{a/b}
Pop two signed integers from the stack; divide the next-to-top value by
the top value, and push the quotient.  If the divisor is zero, terminate
with an error.

@@item @@code{div_unsigned} (0x06): @@var{a} @@var{b} @@result{} @@var{a/b}
Pop two unsigned integers from the stack; divide the next-to-top value
by the top value, and push the quotient.  If the divisor is zero,
terminate with an error.

@@item @@code{rem_signed} (0x07): @@var{a} @@var{b} @@result{} @@var{a modulo b}
Pop two signed integers from the stack; divide the next-to-top value by
the top value, and push the remainder.  If the divisor is zero,
terminate with an error.

@@item @@code{rem_unsigned} (0x08): @@var{a} @@var{b} @@result{} @@var{a modulo b}
Pop two unsigned integers from the stack; divide the next-to-top value
by the top value, and push the remainder.  If the divisor is zero,
terminate with an error.

@@item @@code{lsh} (0x09): @@var{a} @@var{b} @@result{} @@var{a<<b}
Pop two integers from the stack; let @@var{a} be the next-to-top value,
and @@var{b} be the top value.  Shift @@var{a} left by @@var{b} bits, and
push the result.

@@item @@code{rsh_signed} (0x0a): @@var{a} @@var{b} @@result{} @@code{(signed)}@@var{a>>b}
Pop two integers from the stack; let @@var{a} be the next-to-top value,
and @@var{b} be the top value.  Shift @@var{a} right by @@var{b} bits,
inserting copies of the top bit at the high end, and push the result.

@@item @@code{rsh_unsigned} (0x0b): @@var{a} @@var{b} @@result{} @@var{a>>b}
Pop two integers from the stack; let @@var{a} be the next-to-top value,
and @@var{b} be the top value.  Shift @@var{a} right by @@var{b} bits,
inserting zero bits at the high end, and push the result.

@@item @@code{log_not} (0x0e): @@var{a} @@result{} @@var{!a}
Pop an integer from the stack; if it is zero, push the value one;
otherwise, push the value zero.

@@item @@code{bit_and} (0x0f): @@var{a} @@var{b} @@result{} @@var{a&b}
Pop two integers from the stack, and push their bitwise @@code{and}.

@@item @@code{bit_or} (0x10): @@var{a} @@var{b} @@result{} @@var{a|b}
Pop two integers from the stack, and push their bitwise @@code{or}.

@@item @@code{bit_xor} (0x11): @@var{a} @@var{b} @@result{} @@var{a^b}
Pop two integers from the stack, and push their bitwise
exclusive-@@code{or}.

@@item @@code{bit_not} (0x12): @@var{a} @@result{} @@var{~a}
Pop an integer from the stack, and push its bitwise complement.

@@item @@code{equal} (0x13): @@var{a} @@var{b} @@result{} @@var{a=b}
Pop two integers from the stack; if they are equal, push the value one;
otherwise, push the value zero.

@@item @@code{less_signed} (0x14): @@var{a} @@var{b} @@result{} @@var{a<b}
Pop two signed integers from the stack; if the next-to-top value is less
than the top value, push the value one; otherwise, push the value zero.

@@item @@code{less_unsigned} (0x15): @@var{a} @@var{b} @@result{} @@var{a<b}
Pop two unsigned integers from the stack; if the next-to-top value is less
than the top value, push the value one; otherwise, push the value zero.

@@item @@code{ext} (0x16) @@var{n}: @@var{a} @@result{} @@var{a}, sign-extended from @@var{n} bits
Pop an unsigned value from the stack; treating it as an @@var{n}-bit
twos-complement value, extend it to full length.  This means that all
bits to the left of bit @@var{n-1} (where the least significant bit is bit
0) are set to the value of bit @@var{n-1}.  Note that @@var{n} may be
larger than or equal to the width of the stack elements of the bytecode
engine; in this case, the bytecode should have no effect.

The number of source bits to preserve, @@var{n}, is encoded as a single
byte unsigned integer following the @@code{ext} bytecode.

@@item @@code{zero_ext} (0x2a) @@var{n}: @@var{a} @@result{} @@var{a}, zero-extended from @@var{n} bits
Pop an unsigned value from the stack; zero all but the bottom @@var{n}
bits.  This means that all bits to the left of bit @@var{n-1} (where the
least significant bit is bit 0) are set to the value of bit @@var{n-1}.

The number of source bits to preserve, @@var{n}, is encoded as a single
byte unsigned integer following the @@code{zero_ext} bytecode.

@@item @@code{ref8} (0x17): @@var{addr} @@result{} @@var{a}
@@itemx @@code{ref16} (0x18): @@var{addr} @@result{} @@var{a}
@@itemx @@code{ref32} (0x19): @@var{addr} @@result{} @@var{a}
@@itemx @@code{ref64} (0x1a): @@var{addr} @@result{} @@var{a}
Pop an address @@var{addr} from the stack.  For bytecode
@@code{ref}@@var{n}, fetch an @@var{n}-bit value from @@var{addr}, using the
natural target endianness.  Push the fetched value as an unsigned
integer.

Note that @@var{addr} may not be aligned in any particular way; the
@@code{ref@@var{n}} bytecodes should operate correctly for any address.

If attempting to access memory at @@var{addr} would cause a processor
exception of some sort, terminate with an error.

@@item @@code{ref_float} (0x1b): @@var{addr} @@result{} @@var{d}
@@itemx @@code{ref_double} (0x1c): @@var{addr} @@result{} @@var{d}
@@itemx @@code{ref_long_double} (0x1d): @@var{addr} @@result{} @@var{d}
@@itemx @@code{l_to_d} (0x1e): @@var{a} @@result{} @@var{d}
@@itemx @@code{d_to_l} (0x1f): @@var{d} @@result{} @@var{a}
Not implemented yet.

@@item @@code{dup} (0x28): @@var{a} => @@var{a} @@var{a}
Push another copy of the stack's top element.

@@item @@code{swap} (0x2b): @@var{a} @@var{b} => @@var{b} @@var{a}
Exchange the top two items on the stack.

@@item @@code{pop} (0x29): @@var{a} =>
Discard the top value on the stack.

@@item @@code{pick} (0x32) @@var{n}: @@var{a} @@dots{} @@var{b} => @@var{a} @@dots{} @@var{b} @@var{a}
Duplicate an item from the stack and push it on the top of the stack.
@@var{n}, a single byte, indicates the stack item to copy.  If @@var{n}
is zero, this is the same as @@code{dup}; if @@var{n} is one, it copies
the item under the top item, etc.  If @@var{n} exceeds the number of
items on the stack, terminate with an error.

@@item @@code{rot} (0x33): @@var{a} @@var{b} @@var{c} => @@var{c} @@var{b} @@var{a}
Rotate the top three items on the stack.

@@item @@code{if_goto} (0x20) @@var{offset}: @@var{a} @@result{}
Pop an integer off the stack; if it is non-zero, branch to the given
offset in the bytecode string.  Otherwise, continue to the next
instruction in the bytecode stream.  In other words, if @@var{a} is
non-zero, set the @@code{pc} register to @@code{start} + @@var{offset}.
Thus, an offset of zero denotes the beginning of the expression.

The @@var{offset} is stored as a sixteen-bit unsigned value, stored
immediately following the @@code{if_goto} bytecode.  It is always stored
most significant byte first, regardless of the target's normal
endianness.  The offset is not guaranteed to fall at any particular
alignment within the bytecode stream; thus, on machines where fetching a
16-bit on an unaligned address raises an exception, you should fetch the
offset one byte at a time.

@@item @@code{goto} (0x21) @@var{offset}: @@result{}
Branch unconditionally to @@var{offset}; in other words, set the
@@code{pc} register to @@code{start} + @@var{offset}.

The offset is stored in the same way as for the @@code{if_goto} bytecode.

@@item @@code{const8} (0x22) @@var{n}: @@result{} @@var{n}
@@itemx @@code{const16} (0x23) @@var{n}: @@result{} @@var{n}
@@itemx @@code{const32} (0x24) @@var{n}: @@result{} @@var{n}
@@itemx @@code{const64} (0x25) @@var{n}: @@result{} @@var{n}
Push the integer constant @@var{n} on the stack, without sign extension.
To produce a small negative value, push a small twos-complement value,
and then sign-extend it using the @@code{ext} bytecode.

The constant @@var{n} is stored in the appropriate number of bytes
following the @@code{const}@@var{b} bytecode.  The constant @@var{n} is
always stored most significant byte first, regardless of the target's
normal endianness.  The constant is not guaranteed to fall at any
particular alignment within the bytecode stream; thus, on machines where
fetching a 16-bit on an unaligned address raises an exception, you
should fetch @@var{n} one byte at a time.

@@item @@code{reg} (0x26) @@var{n}: @@result{} @@var{a}
Push the value of register number @@var{n}, without sign extension.  The
registers are numbered following GDB's conventions.

The register number @@var{n} is encoded as a 16-bit unsigned integer
immediately following the @@code{reg} bytecode.  It is always stored most
significant byte first, regardless of the target's normal endianness.
The register number is not guaranteed to fall at any particular
alignment within the bytecode stream; thus, on machines where fetching a
16-bit on an unaligned address raises an exception, you should fetch the
register number one byte at a time.

@@item @@code{getv} (0x2c) @@var{n}: @@result{} @@var{v}
Push the value of trace state variable number @@var{n}, without sign
extension.

The variable number @@var{n} is encoded as a 16-bit unsigned integer
immediately following the @@code{getv} bytecode.  It is always stored most
significant byte first, regardless of the target's normal endianness.
The variable number is not guaranteed to fall at any particular
alignment within the bytecode stream; thus, on machines where fetching a
16-bit on an unaligned address raises an exception, you should fetch the
register number one byte at a time.

@@item @@code{setv} (0x2d) @@var{n}: @@result{} @@var{v}
Set trace state variable number @@var{n} to the value found on the top
of the stack.  The stack is unchanged, so that the value is readily
available if the assignment is part of a larger expression.  The
handling of @@var{n} is as described for @@code{getv}.

@@item @@code{trace} (0x0c): @@var{addr} @@var{size} @@result{}
Record the contents of the @@var{size} bytes at @@var{addr} in a trace
buffer, for later retrieval by GDB.

@@item @@code{trace_quick} (0x0d) @@var{size}: @@var{addr} @@result{} @@var{addr}
Record the contents of the @@var{size} bytes at @@var{addr} in a trace
buffer, for later retrieval by GDB.  @@var{size} is a single byte
unsigned integer following the @@code{trace} opcode.

This bytecode is equivalent to the sequence @@code{dup const8 @@var{size}
trace}, but we provide it anyway to save space in bytecode strings.

@@item @@code{trace16} (0x30) @@var{size}: @@var{addr} @@result{} @@var{addr}
Identical to trace_quick, except that @@var{size} is a 16-bit big-endian
unsigned integer, not a single byte.  This should probably have been
named @@code{trace_quick16}, for consistency.

@@item @@code{tracev} (0x2e) @@var{n}: @@result{} @@var{a}
Record the value of trace state variable number @@var{n} in the trace
buffer.  The handling of @@var{n} is as described for @@code{getv}.

@@item @@code{tracenz} (0x2f)  @@var{addr} @@var{size} @@result{}
Record the bytes at @@var{addr} in a trace buffer, for later retrieval
by GDB.  Stop at either the first zero byte, or when @@var{size} bytes
have been recorded, whichever occurs first.

@@item @@code{printf} (0x34)  @@var{numargs} @@var{string} @@result{}
Do a formatted print, in the style of the C function @@code{printf}).
The value of @@var{numargs} is the number of arguments to expect on the
stack, while @@var{string} is the format string, prefixed with a
two-byte length.  The last byte of the string must be zero, and is
included in the length.  The format string includes escaped sequences
just as it appears in C source, so for instance the format string
@@code{"\t%d\n"} is six characters long, and the output will consist of
a tab character, a decimal number, and a newline.  At the top of the
stack, above the values to be printed, this bytecode will pop a
``function'' and ``channel''.  If the function is nonzero, then the
target may treat it as a function and call it, passing the channel as
a first argument, as with the C function @@code{fprintf}.  If the
function is zero, then the target may simply call a standard formatted
print function of its choice.  In all, this bytecode pops 2 +
@@var{numargs} stack elements, and pushes nothing.

@@item @@code{end} (0x27): @@result{}
Stop executing bytecode; the result should be the top element of the
stack.  If the purpose of the expression was to compute an lvalue or a
range of memory, then the next-to-top of the stack is the lvalue's
address, and the top of the stack is the lvalue's size, in bytes.

@@end table


@@node Using Agent Expressions
@@section Using Agent Expressions

Agent expressions can be used in several different ways by @@value{GDBN},
and the debugger can generate different bytecode sequences as appropriate.

One possibility is to do expression evaluation on the target rather
than the host, such as for the conditional of a conditional
tracepoint.  In such a case, @@value{GDBN} compiles the source
expression into a bytecode sequence that simply gets values from
registers or memory, does arithmetic, and returns a result.

Another way to use agent expressions is for tracepoint data
collection.  @@value{GDBN} generates a different bytecode sequence for
collection; in addition to bytecodes that do the calculation,
@@value{GDBN} adds @@code{trace} bytecodes to save the pieces of
memory that were used.

@@itemize @@bullet

@@item
The user selects trace points in the program's code at which GDB should
collect data.

@@item
The user specifies expressions to evaluate at each trace point.  These
expressions may denote objects in memory, in which case those objects'
contents are recorded as the program runs, or computed values, in which
case the values themselves are recorded.

@@item
GDB transmits the tracepoints and their associated expressions to the
GDB agent, running on the debugging target.

@@item
The agent arranges to be notified when a trace point is hit.

@@item
When execution on the target reaches a trace point, the agent evaluates
the expressions associated with that trace point, and records the
resulting values and memory ranges.

@@item
Later, when the user selects a given trace event and inspects the
objects and expression values recorded, GDB talks to the agent to
retrieve recorded data as necessary to meet the user's requests.  If the
user asks to see an object whose contents have not been recorded, GDB
reports an error.

@@end itemize


@@node Varying Target Capabilities
@@section Varying Target Capabilities

Some targets don't support floating-point, and some would rather not
have to deal with @@code{long long} operations.  Also, different targets
will have different stack sizes, and different bytecode buffer lengths.

Thus, GDB needs a way to ask the target about itself.  We haven't worked
out the details yet, but in general, GDB should be able to send the
target a packet asking it to describe itself.  The reply should be a
packet whose length is explicit, so we can add new information to the
packet in future revisions of the agent, without confusing old versions
of GDB, and it should contain a version number.  It should contain at
least the following information:

@@itemize @@bullet

@@item
whether floating point is supported

@@item
whether @@code{long long} is supported

@@item
maximum acceptable size of bytecode stack

@@item
maximum acceptable length of bytecode expressions

@@item
which registers are actually available for collection

@@item
whether the target supports disabled tracepoints

@@end itemize

@@node Rationale
@@section Rationale

Some of the design decisions apparent above are arguable.

@@table @@b

@@item What about stack overflow/underflow?
GDB should be able to query the target to discover its stack size.
Given that information, GDB can determine at translation time whether a
given expression will overflow the stack.  But this spec isn't about
what kinds of error-checking GDB ought to do.

@@item Why are you doing everything in LONGEST?

Speed isn't important, but agent code size is; using LONGEST brings in a
bunch of support code to do things like division, etc.  So this is a
serious concern.

First, note that you don't need different bytecodes for different
operand sizes.  You can generate code without @@emph{knowing} how big the
stack elements actually are on the target.  If the target only supports
32-bit ints, and you don't send any 64-bit bytecodes, everything just
works.  The observation here is that the MIPS and the Alpha have only
fixed-size registers, and you can still get C's semantics even though
most instructions only operate on full-sized words.  You just need to
make sure everything is properly sign-extended at the right times.  So
there is no need for 32- and 64-bit variants of the bytecodes.  Just
implement everything using the largest size you support.

GDB should certainly check to see what sizes the target supports, so the
user can get an error earlier, rather than later.  But this information
is not necessary for correctness.


@@item Why don't you have @@code{>} or @@code{<=} operators?
I want to keep the interpreter small, and we don't need them.  We can
combine the @@code{less_} opcodes with @@code{log_not}, and swap the order
of the operands, yielding all four asymmetrical comparison operators.
For example, @@code{(x <= y)} is @@code{! (x > y)}, which is @@code{! (y <
x)}.

@@item Why do you have @@code{log_not}?
@@itemx Why do you have @@code{ext}?
@@itemx Why do you have @@code{zero_ext}?
These are all easily synthesized from other instructions, but I expect
them to be used frequently, and they're simple, so I include them to
keep bytecode strings short.

@@code{log_not} is equivalent to @@code{const8 0 equal}; it's used in half
the relational operators.

@@code{ext @@var{n}} is equivalent to @@code{const8 @@var{s-n} lsh const8
@@var{s-n} rsh_signed}, where @@var{s} is the size of the stack elements;
it follows @@code{ref@@var{m}} and @@var{reg} bytecodes when the value
should be signed.  See the next bulleted item.

@@code{zero_ext @@var{n}} is equivalent to @@code{const@@var{m} @@var{mask}
log_and}; it's used whenever we push the value of a register, because we
can't assume the upper bits of the register aren't garbage.

@@item Why not have sign-extending variants of the @@code{ref} operators?
Because that would double the number of @@code{ref} operators, and we
need the @@code{ext} bytecode anyway for accessing bitfields.

@@item Why not have constant-address variants of the @@code{ref} operators?
Because that would double the number of @@code{ref} operators again, and
@@code{const32 @@var{address} ref32} is only one byte longer.

@@item Why do the @@code{ref@@var{n}} operators have to support unaligned fetches?
GDB will generate bytecode that fetches multi-byte values at unaligned
addresses whenever the executable's debugging information tells it to.
Furthermore, GDB does not know the value the pointer will have when GDB
generates the bytecode, so it cannot determine whether a particular
fetch will be aligned or not.

In particular, structure bitfields may be several bytes long, but follow
no alignment rules; members of packed structures are not necessarily
aligned either.

In general, there are many cases where unaligned references occur in
correct C code, either at the programmer's explicit request, or at the
compiler's discretion.  Thus, it is simpler to make the GDB agent
bytecodes work correctly in all circumstances than to make GDB guess in
each case whether the compiler did the usual thing.

@@item Why are there no side-effecting operators?
Because our current client doesn't want them?  That's a cheap answer.  I
think the real answer is that I'm afraid of implementing function
calls.  We should re-visit this issue after the present contract is
delivered.

@@item Why aren't the @@code{goto} ops PC-relative?
The interpreter has the base address around anyway for PC bounds
checking, and it seemed simpler.

@@item Why is there only one offset size for the @@code{goto} ops?
Offsets are currently sixteen bits.  I'm not happy with this situation
either:

Suppose we have multiple branch ops with different offset sizes.  As I
generate code left-to-right, all my jumps are forward jumps (there are
no loops in expressions), so I never know the target when I emit the
jump opcode.  Thus, I have to either always assume the largest offset
size, or do jump relaxation on the code after I generate it, which seems
like a big waste of time.

I can imagine a reasonable expression being longer than 256 bytes.  I
can't imagine one being longer than 64k.  Thus, we need 16-bit offsets.
This kind of reasoning is so bogus, but relaxation is pathetic.

The other approach would be to generate code right-to-left.  Then I'd
always know my offset size.  That might be fun.

@@item Where is the function call bytecode?

When we add side-effects, we should add this.

@@item Why does the @@code{reg} bytecode take a 16-bit register number?

Intel's IA-64 architecture has 128 general-purpose registers,
and 128 floating-point registers, and I'm sure it has some random
control registers.

@@item Why do we need @@code{trace} and @@code{trace_quick}?
Because GDB needs to record all the memory contents and registers an
expression touches.  If the user wants to evaluate an expression
@@code{x->y->z}, the agent must record the values of @@code{x} and
@@code{x->y} as well as the value of @@code{x->y->z}.

@@item Don't the @@code{trace} bytecodes make the interpreter less general?
They do mean that the interpreter contains special-purpose code, but
that doesn't mean the interpreter can only be used for that purpose.  If
an expression doesn't use the @@code{trace} bytecodes, they don't get in
its way.

@@item Why doesn't @@code{trace_quick} consume its arguments the way everything else does?
In general, you do want your operators to consume their arguments; it's
consistent, and generally reduces the amount of stack rearrangement
necessary.  However, @@code{trace_quick} is a kludge to save space; it
only exists so we needn't write @@code{dup const8 @@var{SIZE} trace}
before every memory reference.  Therefore, it's okay for it not to
consume its arguments; it's meant for a specific context in which we
know exactly what it should do with the stack.  If we're going to have a
kludge, it should be an effective kludge.

@@item Why does @@code{trace16} exist?
That opcode was added by the customer that contracted Cygnus for the
data tracing work.  I personally think it is unnecessary; objects that
large will be quite rare, so it is okay to use @@code{dup const16
@@var{size} trace} in those cases.

Whatever we decide to do with @@code{trace16}, we should at least leave
opcode 0x30 reserved, to remain compatible with the customer who added
it.

@@end table
@


1.18
log
@	Add target-side support for dynamic printf.
	* NEWS: Mention the additional style.
	* breakpoint.h (struct bp_target_info): New fields tcommands, persist.
	(struct bp_location): New field cmd_bytecode.
	* breakpoint.c: Include format.h.
	(disconnected_dprintf): New global.
	(parse_cmd_to_aexpr): New function.
	(build_target_command_list): New function.
	(insert_bp_location): Call it.
	(remove_breakpoints_pid): Skip dprintf breakpoints.
	(print_one_breakpoint_location): Ditto.
	(dprintf_style_agent): New global.
	(dprintf_style_enums): Add dprintf_style_agent.
	(update_dprintf_command_list): Add agent case.
	(agent_printf_command): New function.
	(_initialize_breakpoint): Add new commands.
	* common/ax.def (printf): New bytecode.
	* ax.h (ax_string): Declare.
	* ax-gdb.h (gen_printf): Declare.
	* ax-gdb.c: Include cli-utils.h, format.h.
	(gen_printf): New function.
	(maint_agent_print_command): New function.
	(_initialize_ax_gdb): Add maint agent-printf command.
	* ax-general.c (ax_string): New function.
	(ax_print): Add printf disassembly.
	* Makefile.in (SFILES): Add format.c
	(COMMON_OBS): Add format.o.
	* common/format.h: New file.
	* common/format.c: New file.
	* printcmd.c: Include format.h.
	(ui_printf): Call parse_format_string.
	* remote.c (remote_state): New field breakpoint_commands.
	(PACKET_BreakpointCommands): New enum.
	(remote_breakpoint_commands_feature): New function.
	(remote_protocol_features): Add new BreakpointCommands entry.
	(remote_can_run_breakpoint_commands): New function.
	(remote_add_target_side_commands): New function.
	(remote_insert_breakpoint): Call it.
	(remote_insert_hw_breakpoint): Ditto.
	(_initialize_remote): Add new packet configuration for
	target-side breakpoint commands.
	* target.h (struct target_ops): New field
	to_can_run_breakpoint_commands.
	(target_can_run_breakpoint_commands): New macro.
	* target.c (update_current_target): Handle
	to_can_run_breakpoint_commands.

	[gdbserver]
	* Makefile.in (WARN_CFLAGS_NO_FORMAT): Define.
	(ax.o): Add it to build rule.
	(ax-ipa.o): Ditto.
	(OBS): Add format.o.
	(IPA_OBS): Add format.o.
	* server.c (handle_query): Claim support for breakpoint commands.
	(process_point_options): Add command case.
	(process_serial_event): Leave running if there are printfs in
	effect.
	* mem-break.h (any_persistent_commands): Declare.
	(add_breakpoint_commands): Declare.
	(gdb_no_commands_at_breakpoint): Declare.
	(run_breakpoint_commands): Declare.
	* mem-break.c (struct point_command_list): New struct.
	(struct breakpoint): New field command_list.
	(any_persistent_commands): New function.
	(add_commands_to_breakpoint): New function.
	(add_breakpoint_commands): New function.
	(gdb_no_commands_at_breakpoint): New function.
	(run_breakpoint_commands): New function.
	* linux-low.c (linux_wait_1): Test for and run breakpoint commands
	locally.
	* ax.c: Include format.h.
	(ax_printf): New function.
	(gdb_eval_agent_expr): Add printf opcode.

	[doc]
	* gdb.texinfo (Dynamic Printf): Mention agent style and
	disconnected dprintf.
	(Maintenance Commands): Describe maint agent-printf.
	(General Query Packets): Mention BreakpointCommands feature.
	(Packets): Document commands extension to Z0 packet.
	* agentexpr.texi (Bytecode Descriptions): Document printf
	bytecode.

	[testsuite]
	* gdb.base/dprintf.exp: Add agent style tests.
@
text
@d10 1
a10 1
@@c Copyright (C) 2003-2006, 2009-2012 Free Software Foundation, Inc.
@


1.17
log
@Copyright year update in most files of the GDB Project.

gdb/ChangeLog:

        Copyright year update in most files of the GDB Project.
@
text
@d496 17
@


1.16
log
@2011-11-02  Stan Shebs  <stan@@codesourcery.com>

	String collection for tracepoints.
	* NEWS: Mention string collection.
	* common/ax.def (tracenz): New bytecode.
	* ax-gdb.h (trace_string_kludge): Declare.
	* ax-gdb.c: Include valprint.h and c-lang.h.
	(trace_string_kludge): New global.
	(gen_traced_pop): Add string case.
	(agent_command): Add string case.
	* tracepoint.h (decode_agent_options): Declare.
	* tracepoint.c: Include cli-utils.h.
	(decode_agent_options): New function.
	(validate_actionline): Call it.
	(encode_actions_1): Ditto.
	* target.h (struct target_ops): New method to_supports_string_tracing.
	(target_supports_string_tracing): New macro.
	* target.c (update_current_target): Add to_supports_string_tracing.
	* remote.c (struct remote_state): New field string_tracing.
	(remote_string_tracing_feature): New function.
	(remote_protocol_features): New feature tracenz.
	(remote_supports_string_tracing): New function.
	(init_remote_ops): Set to_supports_string_tracing.

	* tracepoint.c (agent_mem_read_string): New function.
	(eval_agent_expr): Call it for tracenz.
	* server.c (handle_query): Report support for tracenz.

	* gdb.texinfo (Tracepoint Action Lists): Document collect/s.
	(General Query Packets): Describe tracenz feature.
	* agentexpr.texi (Bytecode Descriptions): Describe tracenz.

	* gdb.trace/collection.c: Add code using strings.
	* gdb.trace/collection.exp: Add tests of string collection.
@
text
@d10 1
a10 2
@@c Copyright (C) 2003, 2004, 2005, 2006, 2009, 2010, 2011
@@c Free Software Foundation, Inc.
@


1.16.2.1
log
@Copyright year update in most files of the GDB Project.

gdb/ChangeLog:

        Copyright year update in most files of the GDB Project.
@
text
@d10 2
a11 1
@@c Copyright (C) 2003-2006, 2009-2012 Free Software Foundation, Inc.
@


1.15
log
@Revert the following patch (code patch was not approved):

        2011-02-21  Hui Zhu  <teawater@@gmail.com>
        * agentexpr.texi (bytecode descriptions): add printf.
        * gdb.texinfo (tracepoint action lists): add printf.
@
text
@d492 5
@


1.14
log
@2011-02-21  Hui Zhu  <teawater@@gmail.com>

	* agentexpr.texi (Bytecode Descriptions): Add printf.
	* gdb.texinfo (Tracepoint Action Lists): Add printf.
@
text
@a491 7
@@item @@code{printf} (0x31) @@var{n} @@var{template}: @@result{}
Print the values in the stack under the control of the string template.
The end of @@var{template} is 0x00.
If @@var{n} is 0, just output the string template.
If @@var{n} is 1, pop a value from the stack and print it under the control
of the string template.

@


1.13
log
@gdb
	* ax-general.c (aop_map): Add pick and rot.
	* dwarf2loc.c (compile_dwarf_to_ax) <DW_OP_over>: Reimplement.
	<DW_OP_rot>: Implement.
	* ax.h (enum agent_op) <aop_pick, aop_rot>: New constants.
	(ax_pick): Declare.
	* ax-general.c (ax_pick): New function.
doc
	* agentexpr.texi (Bytecode Descriptions): Document pick and rot.
gdbserver
	* tracepoint.c (enum gdb_agent_op) <gdb_agent_op_pick,
	gdb_agent_op_rot>: New constants.
	(gdb_agent_op_names): Add pick and roll.
	(eval_agent_expr) <gdb_agent_op_pick, gdb_agent_op_rot>: New
	cases.
@
text
@d492 7
@


1.12
log
@Update the copyright year for most remaining files in GDB
@
text
@d394 10
@


1.11
log
@Update copyright years in all relevant texinfo documents.

        * agentexpr.texi: Add 2010 to the list of copyright years.
        * annotate.texinfo: Likewise.
        * gdb.texinfo: Likewise.
        * gdbint.texinfo: Likewise.
        * observer.texi: Likewise.
        * stabs.texinfo: Likewise.
@
text
@d10 2
a11 2
@@c Copyright (C) 2003, 2004, 2005, 2006, 2009, 2010
@@c               Free Software Foundation, Inc.
@


1.10
log
@2009-12-28  Stan Shebs  <stan@@codesourcery.com>

	Add trace state variables.
	* ax.h (enum agent_op): Add getv, setv, and tracev.
	(ax_tsv): Declare.
	* ax-gdb.c: Include tracepoint.h.
	(gen_expr): Handle BINOP_ASSIGN, BINOP_ASSIGN_MODIFY, and
	OP_INTERNALVAR.
	(gen_expr_binop_rest): New function, split from gen_expr.
	* ax-general.c (ax_tsv): New function.
	(aop_map): Add new bytecodes.
	* tracepoint.h (struct trace_state_variable): New struct.
	(tsv_s): New typedef.
	(find_trace_state_variable): Declare.
	* tracepoint.c (tvariables): New global.
	(next_tsv_number): New global.
	(create_trace_state_variable): New function.
	(find_trace_state_variable): New function.
	(delete_trace_state_variable): New function.
	(trace_variable_command): New function.
	(delete_trace_variable_command): New function.
	(tvariables_info): New function.
	(trace_start_command): Download tsvs with initial values.
	(_initialize_tracepoint): Add new commands.
	* NEWS: Mention the addition of trace state variables.

==> doc/ChangeLog <==
2009-12-28  Stan Shebs  <stan@@codesourcery.com>

	* gdb.texinfo (Trace State Variables): New section.
	(Tracepoint Packets): Describe trace state variable packets.
	* agentexpr.texi (Bytecode Descriptions): Describe trace state
	variable bytecodes.

==> testsuite/ChangeLog <==
2009-12-28  Stan Shebs  <stan@@codesourcery.com>

	* gdb.trace/tsv.exp: New file.
	* gdb.base/completion.exp: Update ambiguous info output.
@
text
@d10 1
a10 1
@@c Copyright (C) 2003, 2004, 2005, 2006, 2009
@


1.9
log
@	* agentexpr.texi (Tracing On Symmetrix): Delete section.
	(Using Agent Expressions): Delete cross reference.
@
text
@d443 18
d478 4
@


1.8
log
@	gdb/
	Conditional tracepoints.
	* ax-gdb.h (gen_eval_for_expr): Declare.
	* ax-gdb.c (gen_expr): Generate bytecodes for BINOP_EQUAL
	and other comparisons.
	(gen_eval_for_expr): New function.
	(agent_eval_command): New maintenance command.
	(_initialize_ax_gdb): Define the command.
	* remote.c (struct remote_state): New field cond_tracepoints.
	(PACKET_ConditionalTracepoints): New packet config type.
	(remote_cond_tracepoint_feature): New function.
	(remote_protocol_features): Add ConditionalTracepoints.
	(remote_supports_cond_tracepoints): New function.
	(_initialize_remote): Add ConditionalTracepoints.
	* tracepoint.c (download_tracepoint): Add conditional.
	* NEWS: Mention conditional tracepoints.

	gdb/doc/
	* gdb.texinfo (Tracepoint Conditions): New section.
	(General Query Packets): Describe ConditionalTracepoints.
	(Tracepoint Packets): Describe condition field.
	(Maintenance Commands): Describe maint agent-eval.
	* agentexpr.texi (Using Agent Expressions): Mention eval usage.

	gdb/testsuite/
	* gdb.trace/tracecmd.exp: Add basic test of tracepoint conditions.
@
text
@a60 2
* Tracing on Symmetrix::        Special info for implementation on EMC's
                                boxes.
d504 1
a504 3
The agent arranges to be notified when a trace point is hit.  Note that,
on some systems, the target operating system is completely responsible
for collecting the data; see @@ref{Tracing on Symmetrix}.
a557 136


@@node Tracing on Symmetrix
@@section Tracing on Symmetrix

This section documents the API used by the GDB agent to collect data on
Symmetrix systems.

Cygnus originally implemented these tracing features to help EMC
Corporation debug their Symmetrix high-availability disk drives.  The
Symmetrix application code already includes substantial tracing
facilities; the GDB agent for the Symmetrix system uses those facilities
for its own data collection, via the API described here.

@@deftypefn Function DTC_RESPONSE adbg_find_memory_in_frame (FRAME_DEF *@@var{frame}, char *@@var{address}, char **@@var{buffer}, unsigned int *@@var{size})
Search the trace frame @@var{frame} for memory saved from @@var{address}.
If the memory is available, provide the address of the buffer holding
it; otherwise, provide the address of the next saved area.

@@itemize @@bullet

@@item
If the memory at @@var{address} was saved in @@var{frame}, set
@@code{*@@var{buffer}} to point to the buffer in which that memory was
saved, set @@code{*@@var{size}} to the number of bytes from @@var{address}
that are saved at @@code{*@@var{buffer}}, and return
@@code{OK_TARGET_RESPONSE}.  (Clearly, in this case, the function will
always set @@code{*@@var{size}} to a value greater than zero.)

@@item
If @@var{frame} does not record any memory at @@var{address}, set
@@code{*@@var{size}} to the distance from @@var{address} to the start of
the saved region with the lowest address higher than @@var{address}.  If
there is no memory saved from any higher address, set @@code{*@@var{size}}
to zero.  Return @@code{NOT_FOUND_TARGET_RESPONSE}.
@@end itemize

These two possibilities allow the caller to either retrieve the data, or
walk the address space to the next saved area.
@@end deftypefn

This function allows the GDB agent to map the regions of memory saved in
a particular frame, and retrieve their contents efficiently.

This function also provides a clean interface between the GDB agent and
the Symmetrix tracing structures, making it easier to adapt the GDB
agent to future versions of the Symmetrix system, and vice versa.  This
function searches all data saved in @@var{frame}, whether the data is
there at the request of a bytecode expression, or because it falls in
one of the format's memory ranges, or because it was saved from the top
of the stack.  EMC can arbitrarily change and enhance the tracing
mechanism, but as long as this function works properly, all collected
memory is visible to GDB.

The function itself is straightforward to implement.  A single pass over
the trace frame's stack area, memory ranges, and expression blocks can
yield the address of the buffer (if the requested address was saved),
and also note the address of the next higher range of memory, to be
returned when the search fails.

As an example, suppose the trace frame @@code{f} has saved sixteen bytes
from address @@code{0x8000} in a buffer at @@code{0x1000}, and thirty-two
bytes from address @@code{0xc000} in a buffer at @@code{0x1010}.  Here are
some sample calls, and the effect each would have:

@@table @@code

@@item adbg_find_memory_in_frame (f, (char*) 0x8000, &buffer, &size)
This would set @@code{buffer} to @@code{0x1000}, set @@code{size} to
sixteen, and return @@code{OK_TARGET_RESPONSE}, since @@code{f} saves
sixteen bytes from @@code{0x8000} at @@code{0x1000}.

@@item adbg_find_memory_in_frame (f, (char *) 0x8004, &buffer, &size)
This would set @@code{buffer} to @@code{0x1004}, set @@code{size} to
twelve, and return @@code{OK_TARGET_RESPONSE}, since @@file{f} saves the
twelve bytes from @@code{0x8004} starting four bytes into the buffer at
@@code{0x1000}.  This shows that request addresses may fall in the middle
of saved areas; the function should return the address and size of the
remainder of the buffer.

@@item adbg_find_memory_in_frame (f, (char *) 0x8100, &buffer, &size)
This would set @@code{size} to @@code{0x3f00} and return
@@code{NOT_FOUND_TARGET_RESPONSE}, since there is no memory saved in
@@code{f} from the address @@code{0x8100}, and the next memory available
is at @@code{0x8100 + 0x3f00}, or @@code{0xc000}.  This shows that request
addresses may fall outside of all saved memory ranges; the function
should indicate the next saved area, if any.

@@item adbg_find_memory_in_frame (f, (char *) 0x7000, &buffer, &size)
This would set @@code{size} to @@code{0x1000} and return
@@code{NOT_FOUND_TARGET_RESPONSE}, since the next saved memory is at
@@code{0x7000 + 0x1000}, or @@code{0x8000}.

@@item adbg_find_memory_in_frame (f, (char *) 0xf000, &buffer, &size)
This would set @@code{size} to zero, and return
@@code{NOT_FOUND_TARGET_RESPONSE}.  This shows how the function tells the
caller that no further memory ranges have been saved.

@@end table

As another example, here is a function which will print out the
addresses of all memory saved in the trace frame @@code{frame} on the
Symmetrix INLINES console:
@@example
void
print_frame_addresses (FRAME_DEF *frame)
@@{
  char *addr;
  char *buffer;
  unsigned long size;

  addr = 0;
  for (;;)
    @@{
      /* Either find out how much memory we have here, or discover
         where the next saved region is.  */
      if (adbg_find_memory_in_frame (frame, addr, &buffer, &size)
          == OK_TARGET_RESPONSE)
        printp ("saved %x to %x\n", addr, addr + size);
      if (size == 0)
        break;
      addr += size;
    @@}
@@}
@@end example

Note that there is not necessarily any connection between the order in
which the data is saved in the trace frame, and the order in which
@@code{adbg_find_memory_in_frame} will return those memory ranges.  The
code above will always print the saved memory regions in order of
increasing address, while the underlying frame structure might store the
data in a random order.

[[This section should cover the rest of the Symmetrix functions the stub
relies upon, too.]]

@


1.7
log
@	* agentexpr.texi: Fix typos.
	* annotate.texinfo: Likewise.
	* gdb.texinfo: Likewise.
	* gdbint.texinfo: Likewise.
	* observer.texi: Likewise.
	* stabs.texinfo: Likewise.
@
text
@d10 1
a10 1
@@c Copyright (C) 2003, 2004, 2005, 2006
a14 2
@@c Revision: $Id: agentexpr.texi,v 1.2 1998/12/09 21:23:46 jimb Exp $

d474 14
a487 2
Here is a sketch of a full non-stop debugging cycle, showing how agent
expressions fit into the process.
@


1.6
log
@	* agentexpr.texi: Add a copyright and license notice.
	* observer.texi: Likewise, with GPL clause for function prototypes.
	Remove trailing whitespace.
@
text
@d20 1
a20 1
In some applications, it is not feasable for the debugger to interrupt
d224 1
a224 1
hexidecimal.  The phrase ``@@var{a} @@var{b} @@result{} @@var{a+b}'' shows
@


1.5
log
@2003-08-04  Andrew Cagney  <cagney@@redhat.com>

	* agentexpr.texi: Delete @@bye.
	* Makefile.in (STABS_DOC_SOURCE_INCLUDES): Add "fdl.texi"
	(stabs.info): Add $(srcdir) to include search path.
	(html): Depend on "annotate_toc.html", and not "annotate.html".
	* stabs.texinfo: Ditto.  Include "fdl.texi".
	* gdbint.texinfo: Update copyright statement's list of invariant
	sections.
@
text
@d8 7
@


1.4
log
@	* Makefile.in (SFILES_INCLUDED): Add agentexpr.texi.
	* agentexpr.texi: Retitle section, and change it to an appendix.
	Comment out texinfo initialization.  Factor a @@var{} into two
	pieces to prevent makeinfo warnings.
	* gdb.texinfo: Add Agent Expressions appendix.
@
text
@a837 2

@@bye
@


1.4.2.1
log
@2003-08-04  Andrew Cagney  <cagney@@redhat.com>

	* agentexpr.texi: Delete @@bye.
	* Makefile.in (STABS_DOC_SOURCE_INCLUDES): Add "fdl.texi"
	(stabs.info): Add $(srcdir) to include search path.
	(html): Depend on "annotate_toc.html", and not "annotate.html".
	* stabs.texinfo: Ditto.  Include "fdl.texi".
	* gdbint.texinfo: Update copyright statement's list of invariant
	sections.
@
text
@d838 2
@


1.3
log
@	* agentexpr.texi: Fix typos.
	* annotate.texi: Likewise.
	* fdl.texi: Likewise.
@
text
@d1 1
a1 1
\input texinfo
d3 3
a5 3
@@setfilename agentexpr.info
@@settitle GDB Agent Expressions
@@setchapternewpage off
d8 1
a8 1
Revision: $Id: agentexpr.texi,v 1.2 1998/12/09 21:23:46 jimb Exp $
d10 2
a11 2
@@node The GDB Agent Expression Mechanism
@@chapter The GDB Agent Expression Mechanism
d302 1
a302 1
@@item @@code{rsh_signed} (0x0a): @@var{a} @@var{b} @@result{} @@var{@@code{(signed)}a>>b}
@


1.2
log
@Fix wording regarding Intel's IA-64 architecture.
@
text
@d400 1
a400 1
most signficant byte first, regardless of the target's normal
d434 1
a434 1
signficant byte first, regardless of the target's normal endianness.
@


1.2.30.1
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@d1 1
a1 1
@@c \input texinfo
d3 3
a5 3
@@c @@setfilename agentexpr.info
@@c @@settitle GDB Agent Expressions
@@c @@setchapternewpage off
d8 1
a8 1
@@c Revision: $Id: agentexpr.texi,v 1.2 1998/12/09 21:23:46 jimb Exp $
d10 2
a11 2
@@node Agent Expressions
@@appendix The GDB Agent Expression Mechanism
d302 1
a302 1
@@item @@code{rsh_signed} (0x0a): @@var{a} @@var{b} @@result{} @@code{(signed)}@@var{a>>b}
d400 1
a400 1
most significant byte first, regardless of the target's normal
d434 1
a434 1
significant byte first, regardless of the target's normal endianness.
d838 2
@


1.2.28.1
log
@2002-12-23  David Carlton  <carlton@@math.stanford.edu>

	* Merge from mainline; tag is carlton_dictionary-20021223-merge.
@
text
@d400 1
a400 1
most significant byte first, regardless of the target's normal
d434 1
a434 1
significant byte first, regardless of the target's normal endianness.
@


1.2.28.2
log
@2003-06-27  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton_dictionary-20030627-merge.
@
text
@d1 1
a1 1
@@c \input texinfo
d3 3
a5 3
@@c @@setfilename agentexpr.info
@@c @@settitle GDB Agent Expressions
@@c @@setchapternewpage off
d8 1
a8 1
@@c Revision: $Id$
d10 2
a11 2
@@node Agent Expressions
@@appendix The GDB Agent Expression Mechanism
d302 1
a302 1
@@item @@code{rsh_signed} (0x0a): @@var{a} @@var{b} @@result{} @@code{(signed)}@@var{a>>b}
@


1.2.28.3
log
@2003-08-05  David Carlton  <carlton@@kealia.com>

	* configure.in (build_warnings): Delete -Wformat-nonliteral.
	* configure (build_warnings): Ditto.

	* Merge with mainline; tag is carlton_dictionary-20030805-merge.
@
text
@d838 2
@


1.1
log
@Initial revision
@
text
@d801 1
a801 1
Intel's IA64-architecture, Merced, has 128 general-purpose registers,
@


1.1.1.1
log
@Initial creation of sourceware repository
@
text
@@

