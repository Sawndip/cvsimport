head	1.49;
access;
symbols
	gdb_7_6_1-2013-08-30-release:1.48
	gdb_7_6-2013-04-26-release:1.48
	gdb_7_6-branch:1.48.0.2
	gdb_7_6-2013-03-12-branchpoint:1.48
	gdb_7_5_1-2012-11-29-release:1.46
	gdb_7_5-2012-08-17-release:1.46
	gdb_7_5-branch:1.46.0.2
	gdb_7_5-2012-07-18-branchpoint:1.46
	gdb_7_4_1-2012-04-26-release:1.44.2.1
	gdb_7_4-2012-01-24-release:1.44.2.1
	gdb_7_4-branch:1.44.0.2
	gdb_7_4-2011-12-13-branchpoint:1.44
	gdb_7_3_1-2011-09-04-release:1.43
	gdb_7_3-2011-07-26-release:1.43
	gdb_7_3-branch:1.43.0.2
	gdb_7_3-2011-04-01-branchpoint:1.43
	gdb_7_2-2010-09-02-release:1.42
	gdb_7_2-branch:1.42.0.4
	gdb_7_2-2010-07-07-branchpoint:1.42
	gdb_7_1-2010-03-18-release:1.42
	gdb_7_1-branch:1.42.0.2
	gdb_7_1-2010-02-18-branchpoint:1.42
	gdb_7_0_1-2009-12-22-release:1.41
	gdb_7_0-2009-10-06-release:1.41
	gdb_7_0-branch:1.41.0.4
	gdb_7_0-2009-09-16-branchpoint:1.41
	arc-sim-20090309:1.38
	msnyder-checkpoint-072509-branch:1.41.0.2
	msnyder-checkpoint-072509-branchpoint:1.41
	arc-insight_6_8-branch:1.38.0.16
	arc-insight_6_8-branchpoint:1.38
	insight_6_8-branch:1.38.0.14
	insight_6_8-branchpoint:1.38
	reverse-20081226-branch:1.38.0.12
	reverse-20081226-branchpoint:1.38
	multiprocess-20081120-branch:1.38.0.10
	multiprocess-20081120-branchpoint:1.38
	reverse-20080930-branch:1.38.0.8
	reverse-20080930-branchpoint:1.38
	reverse-20080717-branch:1.38.0.6
	reverse-20080717-branchpoint:1.38
	msnyder-reverse-20080609-branch:1.38.0.4
	msnyder-reverse-20080609-branchpoint:1.38
	drow-reverse-20070409-branch:1.34.0.2
	drow-reverse-20070409-branchpoint:1.34
	gdb_6_8-2008-03-27-release:1.38
	gdb_6_8-branch:1.38.0.2
	gdb_6_8-2008-02-26-branchpoint:1.38
	gdb_6_7_1-2007-10-29-release:1.37
	gdb_6_7-2007-10-10-release:1.37
	gdb_6_7-branch:1.37.0.2
	gdb_6_7-2007-09-07-branchpoint:1.37
	insight_6_6-20070208-release:1.33
	gdb_6_6-2006-12-18-release:1.33
	gdb_6_6-branch:1.33.0.2
	gdb_6_6-2006-11-15-branchpoint:1.33
	insight_6_5-20061003-release:1.32
	gdb-csl-symbian-6_4_50_20060226-12:1.32
	gdb-csl-sourcerygxx-3_4_4-25:1.31
	nickrob-async-20060828-mergepoint:1.33
	gdb-csl-symbian-6_4_50_20060226-11:1.32
	gdb-csl-sourcerygxx-4_1-17:1.32
	gdb-csl-20060226-branch-local-2:1.32
	gdb-csl-sourcerygxx-4_1-14:1.32
	gdb-csl-sourcerygxx-4_1-13:1.32
	gdb-csl-sourcerygxx-4_1-12:1.32
	gdb-csl-sourcerygxx-3_4_4-21:1.32
	gdb_6_5-20060621-release:1.32
	gdb-csl-sourcerygxx-4_1-9:1.32
	gdb-csl-sourcerygxx-4_1-8:1.32
	gdb-csl-sourcerygxx-4_1-7:1.32
	gdb-csl-arm-2006q1-6:1.32
	gdb-csl-sourcerygxx-4_1-6:1.32
	gdb-csl-symbian-6_4_50_20060226-10:1.32
	gdb-csl-symbian-6_4_50_20060226-9:1.32
	gdb-csl-symbian-6_4_50_20060226-8:1.32
	gdb-csl-coldfire-4_1-11:1.32
	gdb-csl-sourcerygxx-3_4_4-19:1.32
	gdb-csl-coldfire-4_1-10:1.32
	gdb_6_5-branch:1.32.0.16
	gdb_6_5-2006-05-14-branchpoint:1.32
	gdb-csl-sourcerygxx-4_1-5:1.32
	nickrob-async-20060513-branch:1.32.0.14
	nickrob-async-20060513-branchpoint:1.32
	gdb-csl-sourcerygxx-4_1-4:1.32
	msnyder-reverse-20060502-branch:1.32.0.12
	msnyder-reverse-20060502-branchpoint:1.32
	gdb-csl-morpho-4_1-4:1.32
	gdb-csl-sourcerygxx-3_4_4-17:1.32
	readline_5_1-import-branch:1.32.0.10
	readline_5_1-import-branchpoint:1.32
	gdb-csl-20060226-branch-merge-to-csl-symbian-1:1.32
	gdb-csl-symbian-20060226-branch:1.32.0.8
	gdb-csl-symbian-20060226-branchpoint:1.32
	gdb-csl-20060226-branch-merge-to-csl-local-1:1.32
	msnyder-reverse-20060331-branch:1.32.0.6
	msnyder-reverse-20060331-branchpoint:1.32
	gdb-csl-available-20060303-branch:1.32.0.4
	gdb-csl-available-20060303-branchpoint:1.32
	gdb-csl-20060226-branch:1.32.0.2
	gdb-csl-20060226-branchpoint:1.32
	gdb_6_4-20051202-release:1.31
	msnyder-fork-checkpoint-branch:1.31.0.10
	msnyder-fork-checkpoint-branchpoint:1.31
	gdb-csl-gxxpro-6_3-branch:1.31.0.8
	gdb-csl-gxxpro-6_3-branchpoint:1.31
	gdb_6_4-branch:1.31.0.6
	gdb_6_4-2005-11-01-branchpoint:1.31
	gdb-csl-arm-20051020-branch:1.31.0.4
	gdb-csl-arm-20051020-branchpoint:1.31
	msnyder-tracepoint-checkpoint-branch:1.31.0.2
	msnyder-tracepoint-checkpoint-branchpoint:1.31
	gdb-csl-arm-20050325-2005-q1b:1.30
	gdb-csl-arm-20050325-2005-q1a:1.30
	csl-arm-20050325-branch:1.30.0.2
	csl-arm-20050325-branchpoint:1.30
	gdb-post-i18n-errorwarning-20050211:1.29
	gdb-pre-i18n-errorwarning-20050211:1.29
	gdb_6_3-20041109-release:1.28
	gdb_6_3-branch:1.28.0.2
	gdb_6_3-20041019-branchpoint:1.28
	drow_intercu-merge-20040921:1.27
	drow_intercu-merge-20040915:1.27
	jimb-gdb_6_2-e500-branch:1.26.0.16
	jimb-gdb_6_2-e500-branchpoint:1.26
	gdb_6_2-20040730-release:1.26
	gdb_6_2-branch:1.26.0.12
	gdb_6_2-2004-07-10-gmt-branchpoint:1.26
	gdb_6_1_1-20040616-release:1.26
	gdb_6_1-2004-04-05-release:1.26
	drow_intercu-merge-20040402:1.26
	drow_intercu-merge-20040327:1.26
	ezannoni_pie-20040323-branch:1.26.0.10
	ezannoni_pie-20040323-branchpoint:1.26
	cagney_tramp-20040321-mergepoint:1.26
	cagney_tramp-20040309-branch:1.26.0.8
	cagney_tramp-20040309-branchpoint:1.26
	gdb_6_1-branch:1.26.0.6
	gdb_6_1-2004-03-01-gmt-branchpoint:1.26
	drow_intercu-20040221-branch:1.26.0.4
	drow_intercu-20040221-branchpoint:1.26
	cagney_bfdfile-20040213-branch:1.26.0.2
	cagney_bfdfile-20040213-branchpoint:1.26
	drow-cplus-merge-20040208:1.25
	carlton_dictionary-20040126-merge:1.24
	cagney_bigcore-20040122-branch:1.24.0.2
	cagney_bigcore-20040122-branchpoint:1.24
	drow-cplus-merge-20040113:1.24
	drow-cplus-merge-20031224:1.22
	drow-cplus-merge-20031220:1.22
	carlton_dictionary-20031215-merge:1.22
	drow-cplus-merge-20031214:1.22
	carlton-dictionary-20031111-merge:1.22
	gdb_6_0-2003-10-04-release:1.18.2.1
	kettenis_sparc-20030918-branch:1.21.0.2
	kettenis_sparc-20030918-branchpoint:1.21
	carlton_dictionary-20030917-merge:1.21
	ezannoni_pie-20030916-branchpoint:1.19
	ezannoni_pie-20030916-branch:1.19.0.4
	cagney_x86i386-20030821-branch:1.19.0.2
	cagney_x86i386-20030821-branchpoint:1.19
	carlton_dictionary-20030805-merge:1.19
	carlton_dictionary-20030627-merge:1.18
	gdb_6_0-branch:1.18.0.2
	gdb_6_0-2003-06-23-branchpoint:1.18
	jimb-ppc64-linux-20030613-branch:1.17.0.28
	jimb-ppc64-linux-20030613-branchpoint:1.17
	cagney_convert-20030606-branch:1.17.0.26
	cagney_convert-20030606-branchpoint:1.17
	cagney_writestrings-20030508-branch:1.17.0.24
	cagney_writestrings-20030508-branchpoint:1.17
	jimb-ppc64-linux-20030528-branch:1.17.0.22
	jimb-ppc64-linux-20030528-branchpoint:1.17
	carlton_dictionary-20030523-merge:1.17
	cagney_fileio-20030521-branch:1.17.0.20
	cagney_fileio-20030521-branchpoint:1.17
	kettenis_i386newframe-20030517-mergepoint:1.17
	jimb-ppc64-linux-20030509-branch:1.17.0.18
	jimb-ppc64-linux-20030509-branchpoint:1.17
	kettenis_i386newframe-20030504-mergepoint:1.17
	carlton_dictionary-20030430-merge:1.17
	kettenis_i386newframe-20030419-branch:1.17.0.16
	kettenis_i386newframe-20030419-branchpoint:1.17
	carlton_dictionary-20030416-merge:1.17
	cagney_frameaddr-20030409-mergepoint:1.17
	kettenis_i386newframe-20030406-branch:1.17.0.14
	kettenis_i386newframe-20030406-branchpoint:1.17
	cagney_frameaddr-20030403-branchpoint:1.17
	cagney_frameaddr-20030403-branch:1.17.0.12
	cagney_framebase-20030330-mergepoint:1.17
	cagney_framebase-20030326-branch:1.17.0.10
	cagney_framebase-20030326-branchpoint:1.17
	cagney_lazyid-20030317-branch:1.17.0.8
	cagney_lazyid-20030317-branchpoint:1.17
	kettenis-i386newframe-20030316-mergepoint:1.17
	offbyone-20030313-branch:1.17.0.6
	offbyone-20030313-branchpoint:1.17
	kettenis-i386newframe-20030308-branch:1.17.0.4
	kettenis-i386newframe-20030308-branchpoint:1.17
	carlton_dictionary-20030305-merge:1.17
	cagney_offbyone-20030303-branch:1.17.0.2
	cagney_offbyone-20030303-branchpoint:1.17
	carlton_dictionary-20030207-merge:1.17
	interps-20030203-mergepoint:1.16
	interps-20030202-branch:1.16.0.4
	interps-20030202-branchpoint:1.16
	cagney-unwind-20030108-branch:1.16.0.2
	cagney-unwind-20030108-branchpoint:1.16
	carlton_dictionary-20021223-merge:1.16
	gdb_5_3-2002-12-12-release:1.13.12.1
	carlton_dictionary-20021115-merge:1.15
	kseitz_interps-20021105-merge:1.13
	kseitz_interps-20021103-merge:1.13
	drow-cplus-merge-20021020:1.13
	drow-cplus-merge-20021025:1.13
	carlton_dictionary-20021025-merge:1.13
	carlton_dictionary-20021011-merge:1.13
	drow-cplus-branch:1.13.0.16
	drow-cplus-branchpoint:1.13
	kseitz_interps-20020930-merge:1.13
	carlton_dictionary-20020927-merge:1.13
	carlton_dictionary-branch:1.13.0.14
	carlton_dictionary-20020920-branchpoint:1.13
	gdb_5_3-branch:1.13.0.12
	gdb_5_3-2002-09-04-branchpoint:1.13
	kseitz_interps-20020829-merge:1.13
	cagney_sysregs-20020825-branch:1.13.0.10
	cagney_sysregs-20020825-branchpoint:1.13
	readline_4_3-import-branch:1.13.0.8
	readline_4_3-import-branchpoint:1.13
	gdb_5_2_1-2002-07-23-release:1.11.2.1
	kseitz_interps-20020528-branch:1.13.0.6
	kseitz_interps-20020528-branchpoint:1.13
	cagney_regbuf-20020515-branch:1.13.0.4
	cagney_regbuf-20020515-branchpoint:1.13
	jimb-macro-020506-branch:1.13.0.2
	jimb-macro-020506-branchpoint:1.13
	gdb_5_2-2002-04-29-release:1.11.2.1
	gdb_5_2-branch:1.11.0.2
	gdb_5_2-2002-03-03-branchpoint:1.11
	gdb_5_1_1-2002-01-24-release:1.9
	gdb_5_1_0_1-2002-01-03-release:1.9
	cygnus_cvs_20020108_pre:1.11
	gdb_5_1_0_1-2002-01-03-branchpoint:1.9
	gdb_5_1_0_1-2002-01-03-branch:1.9.0.8
	gdb_5_1-2001-11-21-release:1.9
	gdb_s390-2001-09-26-branch:1.9.0.6
	gdb_s390-2001-09-26-branchpoint:1.9
	gdb_5_1-2001-07-29-branch:1.9.0.4
	gdb_5_1-2001-07-29-branchpoint:1.9
	dberlin-typesystem-branch:1.9.0.2
	dberlin-typesystem-branchpoint:1.9
	gdb-post-ptid_t-2001-05-03:1.9
	gdb-pre-ptid_t-2001-05-03:1.8
	insight-precleanup-2001-01-01:1.4
	gdb-post-protoization-2000-07-29:1.3
	gdb-pre-protoization-2000-07-29:1.2
	gdb-premipsmulti-2000-06-06-branch:1.2.0.2
	gdb-premipsmulti-2000-06-06-branchpoint:1.2
	gdb-post-params-removal-2000-06-04:1.2
	gdb-pre-params-removal-2000-06-04:1.2
	gdb-post-params-removal-2000-05-28:1.2
	gdb-pre-params-removal-2000-05-28:1.1.1.3
	gdb_5_0-2000-05-19-release:1.1.1.3
	gdb_4_18_2-2000-05-18-release:1.1.1.3
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.3
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.3
	gdb_5_0-2000-04-10-branch:1.1.1.3.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1.1.3
	repo-unification-2000-02-06:1.1.1.3
	insight-2000-02-04:1.1.1.3
	gdb-2000-02-04:1.1.1.3
	gdb-2000-02-02:1.1.1.3
	gdb-2000-02-01:1.1.1.3
	gdb-2000-01-31:1.1.1.3
	gdb-2000-01-26:1.1.1.3
	gdb-2000-01-24:1.1.1.3
	gdb-2000-01-17:1.1.1.3
	gdb-2000-01-10:1.1.1.3
	gdb-2000-01-05:1.1.1.3
	gdb-1999-12-21:1.1.1.3
	gdb-1999-12-13:1.1.1.3
	gdb-1999-12-07:1.1.1.3
	gdb-1999-12-06:1.1.1.3
	gdb-1999-11-16:1.1.1.3
	gdb-1999-11-08:1.1.1.3
	gdb-1999-11-01:1.1.1.3
	gdb-1999-10-25:1.1.1.3
	gdb-1999-10-18:1.1.1.3
	gdb-1999-10-11:1.1.1.3
	gdb-1999-10-04:1.1.1.3
	gdb-1999-09-28:1.1.1.2
	gdb-1999-09-21:1.1.1.2
	gdb-1999-09-13:1.1.1.2
	gdb-1999-09-08:1.1.1.2
	gdb-1999-08-30:1.1.1.2
	gdb-1999-08-23:1.1.1.2
	gdb-1999-08-16:1.1.1.2
	gdb-1999-08-09:1.1.1.2
	gdb-1999-08-02:1.1.1.2
	gdb-1999-07-26:1.1.1.2
	gdb-1999-07-19:1.1.1.2
	gdb-1999-07-12:1.1.1.2
	gdb-post-reformat-19990707:1.1.1.2
	gdb-1999-07-07-post-reformat-snapshot:1.1.1.2
	gdb-pre-reformat-19990707:1.1.1.1
	gdb-1999-07-07:1.1.1.1
	gdb-1999-07-05:1.1.1.1
	gdb-1999-06-28:1.1.1.1
	gdb-1999-06-21:1.1.1.1
	gdb-1999-06-14:1.1.1.1
	gdb-1999-06-07:1.1.1.1
	gdb-1999-06-01:1.1.1.1
	gdb-4_18-branch:1.1.1.1.0.2
	gdb-4_18-release:1.1.1.1
	gdb-1999-05-25:1.1.1.1
	gdb-1999-05-19:1.1.1.1
	gdb-1999-05-10:1.1.1.1
	gdb-19990504:1.1.1.1
	gdb-19990422:1.1.1.1
	SNAPSHOT:1.1.1
	gdb-4_18:1.1.1.1
	GDB_4_18:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.49
date	2013.09.30.11.50.12;	author luisgpm;	state Exp;
branches;
next	1.48;

1.48
date	2013.01.01.06.32.51;	author brobecke;	state Exp;
branches;
next	1.47;

1.47
date	2012.11.23.20.30.22;	author davem;	state Exp;
branches;
next	1.46;

1.46
date	2012.03.22.20.36.34;	author rth;	state Exp;
branches;
next	1.45;

1.45
date	2012.01.04.08.17.11;	author brobecke;	state Exp;
branches;
next	1.44;

1.44
date	2011.05.21.19.19.45;	author kettenis;	state Exp;
branches
	1.44.2.1;
next	1.43;

1.43
date	2011.01.01.15.33.15;	author brobecke;	state Exp;
branches;
next	1.42;

1.42
date	2010.01.01.07.31.42;	author brobecke;	state Exp;
branches;
next	1.41;

1.41
date	2009.06.17.18.45.09;	author uweigand;	state Exp;
branches;
next	1.40;

1.40
date	2009.02.23.00.03.50;	author palves;	state Exp;
branches;
next	1.39;

1.39
date	2009.01.03.05.57.53;	author brobecke;	state Exp;
branches;
next	1.38;

1.38
date	2008.01.01.22.53.13;	author drow;	state Exp;
branches;
next	1.37;

1.37
date	2007.08.23.18.08.38;	author brobecke;	state Exp;
branches;
next	1.36;

1.36
date	2007.05.07.00.19.36;	author uweigand;	state Exp;
branches;
next	1.35;

1.35
date	2007.05.06.14.34.38;	author uweigand;	state Exp;
branches;
next	1.34;

1.34
date	2007.01.09.17.58.58;	author drow;	state Exp;
branches;
next	1.33;

1.33
date	2006.08.18.08.49.04;	author kettenis;	state Exp;
branches;
next	1.32;

1.32
date	2005.12.17.22.34.02;	author eliz;	state Exp;
branches
	1.32.14.1;
next	1.31;

1.31
date	2005.05.16.16.36.23;	author kettenis;	state Exp;
branches;
next	1.30;

1.30
date	2005.02.11.18.13.53;	author cagney;	state Exp;
branches;
next	1.29;

1.29
date	2004.11.29.08.41.56;	author kettenis;	state Exp;
branches;
next	1.28;

1.28
date	2004.10.12.22.18.54;	author kettenis;	state Exp;
branches;
next	1.27;

1.27
date	2004.08.14.23.44.47;	author kettenis;	state Exp;
branches;
next	1.26;

1.26
date	2004.02.08.21.25.41;	author kettenis;	state Exp;
branches
	1.26.4.1;
next	1.25;

1.25
date	2004.02.04.21.49.55;	author kettenis;	state Exp;
branches;
next	1.24;

1.24
date	2004.01.12.18.33.47;	author cagney;	state Exp;
branches;
next	1.23;

1.23
date	2004.01.03.10.08.44;	author kettenis;	state Exp;
branches;
next	1.22;

1.22
date	2003.10.02.20.28.30;	author cagney;	state Exp;
branches;
next	1.21;

1.21
date	2003.09.17.15.42.21;	author cagney;	state Exp;
branches
	1.21.2.1;
next	1.20;

1.20
date	2003.09.17.14.24.30;	author cagney;	state Exp;
branches;
next	1.19;

1.19
date	2003.07.07.15.56.03;	author drow;	state Exp;
branches;
next	1.18;

1.18
date	2003.06.14.16.22.23;	author drow;	state Exp;
branches
	1.18.2.1;
next	1.17;

1.17
date	2003.02.07.04.49.34;	author cagney;	state Exp;
branches;
next	1.16;

1.16
date	2002.12.04.03.20.30;	author cagney;	state Exp;
branches;
next	1.15;

1.15
date	2002.11.14.20.37.29;	author cagney;	state Exp;
branches;
next	1.14;

1.14
date	2002.11.07.02.40.28;	author cagney;	state Exp;
branches;
next	1.13;

1.13
date	2002.04.21.05.34.06;	author davem;	state Exp;
branches
	1.13.12.1
	1.13.14.1
	1.13.16.1;
next	1.12;

1.12
date	2002.03.21.02.03.13;	author obrien;	state Exp;
branches;
next	1.11;

1.11
date	2001.11.26.16.42.11;	author jakub;	state Exp;
branches
	1.11.2.1;
next	1.10;

1.10
date	2001.10.14.17.15.14;	author kettenis;	state Exp;
branches;
next	1.9;

1.9
date	2001.05.04.04.15.27;	author kevinb;	state Exp;
branches;
next	1.8;

1.8
date	2001.03.06.08.21.17;	author kevinb;	state Exp;
branches;
next	1.7;

1.7
date	2001.03.02.17.01.48;	author kevinb;	state Exp;
branches;
next	1.6;

1.6
date	2001.03.01.01.39.21;	author cagney;	state Exp;
branches;
next	1.5;

1.5
date	2001.02.25.04.45.11;	author kevinb;	state Exp;
branches;
next	1.4;

1.4
date	2000.10.23.03.21.06;	author kevinb;	state Exp;
branches;
next	1.3;

1.3
date	2000.07.30.01.48.27;	author kevinb;	state Exp;
branches;
next	1.2;

1.2
date	2000.05.28.01.12.29;	author kevinb;	state Exp;
branches;
next	1.1;

1.1
date	99.04.16.01.34.05;	author shebs;	state Exp;
branches
	1.1.1.1;
next	;

1.44.2.1
date	2012.01.06.04.43.30;	author brobecke;	state Exp;
branches;
next	;

1.32.14.1
date	2006.08.28.07.48.47;	author nickrob;	state Exp;
branches;
next	;

1.26.4.1
date	2004.09.16.17.01.21;	author drow;	state Exp;
branches;
next	;

1.21.2.1
date	2003.10.25.18.42.27;	author kettenis;	state Exp;
branches;
next	1.21.2.2;

1.21.2.2
date	2003.11.02.17.05.07;	author kettenis;	state Exp;
branches;
next	;

1.18.2.1
date	2003.07.07.15.57.29;	author drow;	state Exp;
branches;
next	;

1.13.12.1
date	2002.12.03.22.35.49;	author cagney;	state Exp;
branches;
next	;

1.13.14.1
date	2002.11.15.19.18.55;	author carlton;	state Exp;
branches;
next	1.13.14.2;

1.13.14.2
date	2002.12.23.19.38.43;	author carlton;	state Exp;
branches;
next	1.13.14.3;

1.13.14.3
date	2003.02.07.19.17.52;	author carlton;	state Exp;
branches;
next	1.13.14.4;

1.13.14.4
date	2003.06.27.21.50.10;	author carlton;	state Exp;
branches;
next	1.13.14.5;

1.13.14.5
date	2003.08.05.17.13.14;	author carlton;	state Exp;
branches;
next	1.13.14.6;

1.13.14.6
date	2003.09.17.21.28.32;	author carlton;	state Exp;
branches;
next	1.13.14.7;

1.13.14.7
date	2003.11.11.23.50.56;	author carlton;	state Exp;
branches;
next	1.13.14.8;

1.13.14.8
date	2004.01.26.19.11.31;	author carlton;	state Exp;
branches;
next	;

1.13.16.1
date	2003.12.14.20.27.30;	author drow;	state Exp;
branches;
next	1.13.16.2;

1.13.16.2
date	2004.01.13.16.11.59;	author drow;	state Exp;
branches;
next	1.13.16.3;

1.13.16.3
date	2004.02.09.19.43.48;	author drow;	state Exp;
branches;
next	;

1.11.2.1
date	2002.03.21.02.05.01;	author obrien;	state Exp;
branches;
next	;

1.1.1.1
date	99.04.16.01.34.05;	author shebs;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.07.07.20.10.07;	author jsm;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	99.10.05.23.08.51;	author jsm;	state Exp;
branches;
next	;


desc
@@


1.49
log
@	* aarch64-linux-nat.c: Replace PIDGET with ptid_get_pid.
	Replace TIDGET with ptid_get_lwp.
	Replace GET_LWP with ptid_get_lwp.
	* aix-thread.c (BUILD_THREAD, BUILD_LWP): Remove.
	Replace BUILD_THREAD with ptid_build.
	Replace BUILD_LWP with ptid_build.
	Replace PIDGET with ptid_get_pid.
	Replace TIDGET with ptid_get_lwp.
	* alphabsd-nat.c: Replace PIDGET with ptid_get_pid.
	* amd64-linux-nat.c: Replace PIDGET with ptid_get_pid.
	Replace TIDGET with ptid_get_lwp.
	* amd64bsd-nat.c: Replace PIDGET with ptid_get_pid.
	* arm-linux-nat.c: Replace PIDGET with ptid_get_pid.
	Replace TIDGET with ptid_get_lwp.
	Replace GET_LWP with ptid_get_lwp.
	* armnbsd-nat.c: Replace PIDGET with ptid_get_pid.
	* auxv.c: Likewise.
	* breakpoint.c: Likewise.
	* common/ptid.c (ptid_is_pid): Condense check for
	null_ptid and minus_one_ptid.
	(ptid_lwp_p): New function.
	(ptid_tid_p): New function.
	* common/ptid.h: Update comments for accessors.
	(ptid_lwp_p): New prototype.
	(ptid_tid_p): New prototype.
	* defs.h (PIDGET, TIDGET, MERGEPID): Do not define.
	* gcore.c: Replace PIDGET with ptid_get_pid.
	* gdbthread.h: Likewise.
	* gnu-nat.c: Likewise.
	* hppa-linux-nat.c: Replace PIDGET with ptid_get_pid.
	Replace TIDGET with ptid_get_lwp.
	* hppabsd-nat.c: Replace PIDGET with ptid_get_pid.
	* hppanbsd-nat.c: Likewise.
	* i386-linux-nat.c: Replace PIDGET with ptid_get_pid.
	Replace TIDGET with ptid_get_lwp.
	* i386bsd-nat.c: Replace PIDGET with ptid_get_pid.
	* ia64-linux-nat.c: Replace PIDGET with ptid_get_pid.
	* infcmd.c: Likewise.
	* inferior.h: Likewise.
	* inflow.c: Likewise.
	* infrun.c: Likewise.
	* linux-fork.c: Likewise.
	* linux-nat.c: Replace PIDGET with ptid_get_pid.
	Replace GET_PID with ptid_get_pid.
	Replace is_lwp with ptid_lwp_p.
	Replace GET_LWP with ptid_get_lwp.
	Replace BUILD_LWP with ptid_build.
@
text
@/* Native-dependent code for SPARC.

   Copyright (C) 2003-2013 Free Software Foundation, Inc.

   This file is part of GDB.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

#include "defs.h"
#include "inferior.h"
#include "regcache.h"
#include "target.h"

#include "gdb_assert.h"
#include <signal.h>
#include "gdb_string.h"
#include <sys/ptrace.h>
#include "gdb_wait.h"
#ifdef HAVE_MACHINE_REG_H
#include <machine/reg.h>
#endif

#include "sparc-tdep.h"
#include "sparc-nat.h"
#include "inf-ptrace.h"

/* With some trickery we can use the code in this file for most (if
   not all) ptrace(2) based SPARC systems, which includes SunOS 4,
   GNU/Linux and the various SPARC BSD's.

   First, we need a data structure for use with ptrace(2).  SunOS has
   `struct regs' and `struct fp_status' in <machine/reg.h>.  BSD's
   have `struct reg' and `struct fpreg' in <machine/reg.h>.  GNU/Linux
   has the same structures as SunOS 4, but they're in <asm/reg.h>,
   which is a kernel header.  As a general rule we avoid including
   GNU/Linux kernel headers.  Fortunately GNU/Linux has a `gregset_t'
   and a `fpregset_t' that are equivalent to `struct regs' and `struct
   fp_status' in <sys/ucontext.h>, which is automatically included by
   <signal.h>.  Settling on using the `gregset_t' and `fpregset_t'
   typedefs, providing them for the other systems, therefore solves
   the puzzle.  */

#ifdef HAVE_MACHINE_REG_H
#ifdef HAVE_STRUCT_REG
typedef struct reg gregset_t;
typedef struct fpreg fpregset_t;
#else 
typedef struct regs gregset_t;
typedef struct fp_status fpregset_t;
#endif
#endif

/* Second, we need to remap the BSD ptrace(2) requests to their SunOS
   equivalents.  GNU/Linux already follows SunOS here.  */

#ifndef PTRACE_GETREGS
#define PTRACE_GETREGS PT_GETREGS
#endif

#ifndef PTRACE_SETREGS
#define PTRACE_SETREGS PT_SETREGS
#endif

#ifndef PTRACE_GETFPREGS
#define PTRACE_GETFPREGS PT_GETFPREGS
#endif

#ifndef PTRACE_SETFPREGS
#define PTRACE_SETFPREGS PT_SETFPREGS
#endif

/* Register set description.  */
const struct sparc_gregset *sparc_gregset;
const struct sparc_fpregset *sparc_fpregset;
void (*sparc_supply_gregset) (const struct sparc_gregset *,
			      struct regcache *, int , const void *);
void (*sparc_collect_gregset) (const struct sparc_gregset *,
			       const struct regcache *, int, void *);
void (*sparc_supply_fpregset) (const struct sparc_fpregset *,
			       struct regcache *, int , const void *);
void (*sparc_collect_fpregset) (const struct sparc_fpregset *,
				const struct regcache *, int , void *);
int (*sparc_gregset_supplies_p) (struct gdbarch *, int);
int (*sparc_fpregset_supplies_p) (struct gdbarch *, int);

/* Determine whether `gregset_t' contains register REGNUM.  */

int
sparc32_gregset_supplies_p (struct gdbarch *gdbarch, int regnum)
{
  /* Integer registers.  */
  if ((regnum >= SPARC_G1_REGNUM && regnum <= SPARC_G7_REGNUM)
      || (regnum >= SPARC_O0_REGNUM && regnum <= SPARC_O7_REGNUM)
      || (regnum >= SPARC_L0_REGNUM && regnum <= SPARC_L7_REGNUM)
      || (regnum >= SPARC_I0_REGNUM && regnum <= SPARC_I7_REGNUM))
    return 1;

  /* Control registers.  */
  if (regnum == SPARC32_PC_REGNUM
      || regnum == SPARC32_NPC_REGNUM
      || regnum == SPARC32_PSR_REGNUM
      || regnum == SPARC32_Y_REGNUM)
    return 1;

  return 0;
}

/* Determine whether `fpregset_t' contains register REGNUM.  */

int
sparc32_fpregset_supplies_p (struct gdbarch *gdbarch, int regnum)
{
  /* Floating-point registers.  */
  if (regnum >= SPARC_F0_REGNUM && regnum <= SPARC_F31_REGNUM)
    return 1;

  /* Control registers.  */
  if (regnum == SPARC32_FSR_REGNUM)
    return 1;

  return 0;
}

/* Fetch register REGNUM from the inferior.  If REGNUM is -1, do this
   for all registers (including the floating-point registers).  */

void
sparc_fetch_inferior_registers (struct target_ops *ops,
				struct regcache *regcache, int regnum)
{
  struct gdbarch *gdbarch = get_regcache_arch (regcache);
  int pid;

  /* NOTE: cagney/2002-12-03: This code assumes that the currently
     selected light weight processes' registers can be written
     directly into the selected thread's register cache.  This works
     fine when given an 1:1 LWP:thread model (such as found on
     GNU/Linux) but will, likely, have problems when used on an N:1
     (userland threads) or N:M (userland multiple LWP) model.  In the
     case of the latter two, the LWP's registers do not necessarily
     belong to the selected thread (the LWP could be in the middle of
     executing the thread switch code).

     These functions should instead be paramaterized with an explicit
     object (struct regcache, struct thread_info?) into which the LWPs
     registers can be written.  */
  pid = ptid_get_lwp (inferior_ptid);
  if (pid == 0)
    pid = ptid_get_pid (inferior_ptid);

  if (regnum == SPARC_G0_REGNUM)
    {
      gdb_byte zero[8] = { 0 };

      regcache_raw_supply (regcache, SPARC_G0_REGNUM, &zero);
      return;
    }

  if (regnum == -1 || sparc_gregset_supplies_p (gdbarch, regnum))
    {
      gregset_t regs;

      if (ptrace (PTRACE_GETREGS, pid, (PTRACE_TYPE_ARG3) &regs, 0) == -1)
	perror_with_name (_("Couldn't get registers"));

      sparc_supply_gregset (sparc_gregset, regcache, -1, &regs);
      if (regnum != -1)
	return;
    }

  if (regnum == -1 || sparc_fpregset_supplies_p (gdbarch, regnum))
    {
      fpregset_t fpregs;

      if (ptrace (PTRACE_GETFPREGS, pid, (PTRACE_TYPE_ARG3) &fpregs, 0) == -1)
	perror_with_name (_("Couldn't get floating point status"));

      sparc_supply_fpregset (sparc_fpregset, regcache, -1, &fpregs);
    }
}

void
sparc_store_inferior_registers (struct target_ops *ops,
				struct regcache *regcache, int regnum)
{
  struct gdbarch *gdbarch = get_regcache_arch (regcache);
  int pid;

  /* NOTE: cagney/2002-12-02: See comment in fetch_inferior_registers
     about threaded assumptions.  */
  pid = ptid_get_lwp (inferior_ptid);
  if (pid == 0)
    pid = ptid_get_pid (inferior_ptid);

  if (regnum == -1 || sparc_gregset_supplies_p (gdbarch, regnum))
    {
      gregset_t regs;

      if (ptrace (PTRACE_GETREGS, pid, (PTRACE_TYPE_ARG3) &regs, 0) == -1)
	perror_with_name (_("Couldn't get registers"));

      sparc_collect_gregset (sparc_gregset, regcache, regnum, &regs);

      if (ptrace (PTRACE_SETREGS, pid, (PTRACE_TYPE_ARG3) &regs, 0) == -1)
	perror_with_name (_("Couldn't write registers"));

      /* Deal with the stack regs.  */
      if (regnum == -1 || regnum == SPARC_SP_REGNUM
	  || (regnum >= SPARC_L0_REGNUM && regnum <= SPARC_I7_REGNUM))
	{
	  ULONGEST sp;

	  regcache_cooked_read_unsigned (regcache, SPARC_SP_REGNUM, &sp);
	  sparc_collect_rwindow (regcache, sp, regnum);
	}

      if (regnum != -1)
	return;
    }

  if (regnum == -1 || sparc_fpregset_supplies_p (gdbarch, regnum))
    {
      fpregset_t fpregs, saved_fpregs;

      if (ptrace (PTRACE_GETFPREGS, pid, (PTRACE_TYPE_ARG3) &fpregs, 0) == -1)
	perror_with_name (_("Couldn't get floating-point registers"));

      memcpy (&saved_fpregs, &fpregs, sizeof (fpregs));
      sparc_collect_fpregset (sparc_fpregset, regcache, regnum, &fpregs);

      /* Writing the floating-point registers will fail on NetBSD with
	 EINVAL if the inferior process doesn't have an FPU state
	 (i.e. if it didn't use the FPU yet).  Therefore we don't try
	 to write the registers if nothing changed.  */
      if (memcmp (&saved_fpregs, &fpregs, sizeof (fpregs)) != 0)
	{
	  if (ptrace (PTRACE_SETFPREGS, pid,
		      (PTRACE_TYPE_ARG3) &fpregs, 0) == -1)
	    perror_with_name (_("Couldn't write floating-point registers"));
	}

      if (regnum != -1)
	return;
    }
}


/* Fetch StackGhost Per-Process XOR cookie.  */

static LONGEST
sparc_xfer_wcookie (struct target_ops *ops, enum target_object object,
		    const char *annex, gdb_byte *readbuf,
		    const gdb_byte *writebuf, ULONGEST offset, LONGEST len)
{
  unsigned long wcookie = 0;
  char *buf = (char *)&wcookie;

  gdb_assert (object == TARGET_OBJECT_WCOOKIE);
  gdb_assert (readbuf && writebuf == NULL);

  if (offset == sizeof (unsigned long))
    return 0;			/* Signal EOF.  */
  if (offset > sizeof (unsigned long))
    return -1;

#ifdef PT_WCOOKIE
  /* If PT_WCOOKIE is defined (by <sys/ptrace.h>), assume we're
     running on an OpenBSD release that uses StackGhost (3.1 or
     later).  Since release 3.6, OpenBSD uses a fully randomized
     cookie.  */
  {
    int pid;

    pid = ptid_get_lwp (inferior_ptid);
    if (pid == 0)
      pid = ptid_get_pid (inferior_ptid);

    /* Sanity check.  The proper type for a cookie is register_t, but
       we can't assume that this type exists on all systems supported
       by the code in this file.  */
    gdb_assert (sizeof (wcookie) == sizeof (register_t));

    /* Fetch the cookie.  */
    if (ptrace (PT_WCOOKIE, pid, (PTRACE_TYPE_ARG3) &wcookie, 0) == -1)
      {
	if (errno != EINVAL)
	  perror_with_name (_("Couldn't get StackGhost cookie"));

	/* Although PT_WCOOKIE is defined on OpenBSD 3.1 and later,
	   the request wasn't implemented until after OpenBSD 3.4.  If
	   the kernel doesn't support the PT_WCOOKIE request, assume
	   we're running on a kernel that uses non-randomized cookies.  */
	wcookie = 0x3;
      }
  }
#endif /* PT_WCOOKIE */

  if (len > sizeof (unsigned long) - offset)
    len = sizeof (unsigned long) - offset;

  memcpy (readbuf, buf + offset, len);
  return len;
}

LONGEST (*inf_ptrace_xfer_partial) (struct target_ops *, enum target_object,
				    const char *, gdb_byte *, const gdb_byte *,
				    ULONGEST, LONGEST);

static LONGEST
sparc_xfer_partial (struct target_ops *ops, enum target_object object,
		    const char *annex, gdb_byte *readbuf,
		    const gdb_byte *writebuf, ULONGEST offset, LONGEST len)
{
  if (object == TARGET_OBJECT_WCOOKIE)
    return sparc_xfer_wcookie (ops, object, annex, readbuf, writebuf, 
			       offset, len);

  return inf_ptrace_xfer_partial (ops, object, annex, readbuf, writebuf,
				  offset, len);
}

/* Create a prototype generic SPARC target.  The client can override
   it with local methods.  */

struct target_ops *
sparc_target (void)
{
  struct target_ops *t;

  t = inf_ptrace_target ();
  t->to_fetch_registers = sparc_fetch_inferior_registers;
  t->to_store_registers = sparc_store_inferior_registers;
  inf_ptrace_xfer_partial = t->to_xfer_partial;
  t->to_xfer_partial = sparc_xfer_partial;
  return t;
}


/* Provide a prototype to silence -Wmissing-prototypes.  */
void _initialize_sparc_nat (void);

void
_initialize_sparc_nat (void)
{
  /* Deafult to using SunOS 4 register sets.  */
  if (sparc_gregset == NULL)
    sparc_gregset = &sparc32_sunos4_gregset;
  if (sparc_fpregset == NULL)
    sparc_fpregset = &sparc32_sunos4_fpregset;
  if (sparc_supply_gregset == NULL)
    sparc_supply_gregset = sparc32_supply_gregset;
  if (sparc_collect_gregset == NULL)
    sparc_collect_gregset = sparc32_collect_gregset;
  if (sparc_supply_fpregset == NULL)
    sparc_supply_fpregset = sparc32_supply_fpregset;
  if (sparc_collect_fpregset == NULL)
    sparc_collect_fpregset = sparc32_collect_fpregset;
  if (sparc_gregset_supplies_p == NULL)
    sparc_gregset_supplies_p = sparc32_gregset_supplies_p;
  if (sparc_fpregset_supplies_p == NULL)
    sparc_fpregset_supplies_p = sparc32_fpregset_supplies_p;
}
@


1.48
log
@Update years in copyright notice for the GDB files.

Two modifications:
  1. The addition of 2013 to the copyright year range for every file;
  2. The use of a single year range, instead of potentially multiple
     year ranges, as approved by the FSF.
@
text
@d158 1
a158 1
  pid = TIDGET (inferior_ptid);
d160 1
a160 1
    pid = PIDGET (inferior_ptid);
d202 1
a202 1
  pid = TIDGET (inferior_ptid);
d204 1
a204 1
    pid = PIDGET (inferior_ptid);
d285 1
a285 1
    pid = TIDGET (inferior_ptid);
d287 1
a287 1
      pid = PIDGET (inferior_ptid);
@


1.47
log
@Fix Sparc %fsr regset offset for BSD and Linux.

gdb/

	* sparc-tdep.h (struct sparc_fpregset): New data structure.
	(sparc32_sunos4_fpregset, sparc32_bsd_fpregset,
	sparc32_sol2_fpregset): Declare new globals.
	(sparc32_supply_fpregset, sparc32_collect_fpregset): Add new
	'fpregset' argument.
	* sparc64-tdep.h (sparc64_supply_fpregset,
	sparc64_collect_fpregset): Likewise.
	(sparc64_sol2_fpregset, sparc64_bsd_fpregset): Declare new
	globals.
	* sparc-nat.h (struct sparc_fpregset): Add forward declaration.
	(sparc_fpregset): Declare new global.
	(sparc_supply_fpregset, sparc_collect_fpregset): Add new
	'fpregset' argument.
	* sparc-linux-nat.c (supply_fpregset): Pass sparc_fpregset down
	into handler.
	(fill_fpregset): Likewise.
	(_initialize_sparc_linux_nat): Set sparc_fpregset to
	sparc32_bsd_fpregset.
	* sparc-linux-tdep.c (sparc32_linux_supply_core_fpregset): Pass
	sparc32_bsd_fpregset down into handler.
	(sparc32_linux_collect_core_fpregset): Likewise.
	* sparc-nat.c (sparc_fpregset): Define.
	(sparc_supply_fpregset): Add 'fpregset' argument.
	(sparc_collect_fpregset): Likewise.
	(sparc_fetch_inferior_registers): Pass sparc_fpregset down
	into fpregset handler.
	(sparc_store_inferior_registers): Likewise.
	(_initialize_sparc_nat): Set sparc_fpregset to
	sparc32_sunos4_fpregset if NULL.
	* sparc-sol2-nat.c (supply_gregset): Pass sparc_sol2_fpregset
	down into handler.
	(fill_fpregset): Likewise.
	* sparc-sol2-tdep.c (sparc32_sol2_fpregset): Define.
	* sparc-tdep.c (sparc32_supply_fpregset): Add fpregset arg and
	use it to compute offsets.
	(sparc32_collect_fpregset): Likewise.
	(sparc32_sunos4_fpregset, sparc32_bsd_fpregset): Define.
	* sparc64-linux-nat.c (supply_fpregset): Pass sparc64_bsd_fpregset
	down into handler.
	(fill_fpregset): Likewise.
	* sparc64-linux-tdep.c (sparc64_linux_supply_core_fpregset):
	Likewise.
	(sparc64_linux_collect_core_fpregset): Likewise.
	* sparc64-sol2-tdep.c (sparc64_sol2_fpregset): Define.
	* sparc64-tdep.c (sparc64_supply_fpregset): Add fpregset arg and
	use it to compute offsets.
	(sparc64_collect_fpregset): Likewise.
	(sparc64_bsd_fpregset): Define.
	* sparc64fbsd-tdep.c (sparc64fbsd_supply_fpregset): Padd
	sparc64_bsd_fpregset down into handler.
	(sparc64fbsd_collect_fpregset): Likewise.
	* sparc64nbsd-nat.c (sparc64nbsd_supply_fpregset): Add fpregset arg
	and pass sparc{32,64}_bsd_fpregset down into handler.
	(sparc64nbsd_collect_fpregset): Likewise.
	* sparc64nbsd-tdep.c (sparc64nbsd_supply_fpregset): Pass
	sparc64_bsd_fpregset down into handler.
	* sparc64obsd-tdep.c (sparc64obsd_supply_gregset): Likewise.
	* sparcnbsd-nat.c (_initialize_sparcnbsd_nat): Set sparc_fpregset
	to sparc32_bsd_fpregset.
	* sparcnbsd-tdep.c (sparc32nbsd_supply_gregset): Pass
	sparc32_bsd_fpregset down into sparc32_supply_fpregset.
	(sparc32nbsd_supply_fpregset): Likewise.
@
text
@d3 1
a3 1
   Copyright (C) 2003-2005, 2007-2012 Free Software Foundation, Inc.
@


1.46
log
@        * sparc-linux-nat.c (_initialize_sparc_linux_nat): Fix prototype.
        * sparc-nat.c (sparc_xfer_wcookie): Make static.
@
text
@d85 1
d90 4
a93 2
void (*sparc_supply_fpregset) (struct regcache *, int , const void *);
void (*sparc_collect_fpregset) (const struct regcache *, int , void *);
d189 1
a189 1
      sparc_supply_fpregset (regcache, -1, &fpregs);
d240 1
a240 1
      sparc_collect_fpregset (regcache, regnum, &fpregs);
d359 2
@


1.45
log
@Copyright year update in most files of the GDB Project.

gdb/ChangeLog:

        Copyright year update in most files of the GDB Project.
@
text
@d258 1
a258 1
LONGEST
@


1.44
log
@* sparc-nat.c (sparc_fetch_inferior_registers): Explicitly supply
zero as the value for %g0 in the register cache.
* sparc-tdep.c (sparc32_supply_gregset): Likewise.
* sparc64-tdep.c (sparc64_supply_gregset): Likewise.
@
text
@d3 1
a3 2
   Copyright (C) 2003, 2004, 2005, 2007, 2008, 2009, 2010, 2011
   Free Software Foundation, Inc.
@


1.44.2.1
log
@Copyright year update in most files of the GDB Project.

gdb/ChangeLog:

        Copyright year update in most files of the GDB Project.
@
text
@d3 2
a4 1
   Copyright (C) 2003-2005, 2007-2012 Free Software Foundation, Inc.
@


1.43
log
@run copyright.sh for 2011.
@
text
@d162 3
a164 1
      regcache_raw_supply (regcache, SPARC_G0_REGNUM, NULL);
@


1.42
log
@Update copyright year in most headers.

Automatic update by copyright.sh.
@
text
@d3 1
a3 1
   Copyright (C) 2003, 2004, 2005, 2007, 2008, 2009, 2010
@


1.41
log
@	* sparc64-nat.c (sparc64_gregset_supplies_p): Add GDBARCH parameter.
	Use it instead of current_gdbarch.  Pass architecture to
	sparc32_gregset_supplies_p.
	(sparc64_fpregset_supplies_p): Add GDBARCH parameter.  Use it instead
	of current_gdbarch.  Pass architecture to sparc32_fpregset_supplies_p.
	* sparc64nbsd-nat.c (sparc64nbsd_gregset_supplies_p,
	sparc64nbsd_fpregset_supplies_p): Likewise.
	* sparc-nat.c (sparc_gregset_supplies_p, sparc_fpregset_supplies_p):
	Add GDBARCH parameter.
	(sparc32_gregset_supplies_p, sparc32_fpregset_supplies_p): Likewise.
	(sparc_fetch_inferior_registers): Pass regcache architecture to
	sparc_gregset_supplies_p and sparc_fpregset_supplies_p.
	(sparc_store_inferior_registers): Likewise.
	* sparc-nat.h (sparc_gregset_supplies_p, sparc_fpregset_supplies_p:
	Add GDBARCH parameter.
	(sparc32_gregset_supplies_p, sparc32_fpregset_supplies_p): Likewise.
@
text
@d3 1
a3 1
   Copyright (C) 2003, 2004, 2005, 2007, 2008, 2009
@


1.40
log
@	* corelow.c (get_core_registers): Adjust.
	(core_file_thread_alive): Rename to...
	(core_thread_alive): ... this.
	(core_pid_to_str): Try gdbarch_core_pid_to_str first.
	(init_core_ops): Adjust.
	(coreops_suppress_target): Delete.
	(_initialize_corelow): Unconditionally add core_ops.
	* procfs.c: Include "inf-child.h".
	(procfs_ops): Delete.
	(init_procfs_ops): Delete.  Reimplement as...
	(procfs_target): ... this, inheriting from inf-child.
	(procfs_attach, procfs_detach, procfs_fetch_registers): Adjust.
	(procfs_prepare_to_store): Delete.
	(procfs_store_registers, procfs_resume): Adjust.
	(procfs_open): Delete.
	(procfs_suppress_run): Delete.
	(procfs_can_run): Delete.
	(procfs_mourn_inferior): Adjust.
	(procfs_init_inferior): Add target_ops parameter.  Adjust.
	(procfs_create_inferior): Don't pass procfs_init_inferior to
	fork_inferior.  Instead call it after fork_inferior returns.
	(procfs_find_new_threads): Adjust.
	(_initialize_procfs): Adjust to use procfs_target instead of
	init_procfs_ops.
	* sol-thread.c (orig_core_ops, sol_core_ops): Delete.
	(lwp_to_thread): Use target_thread_alive.
	(sol_thread_open): Delete.
	(sol_thread_attach): Delete.
	(sol_thread_detach, sol_thread_resume, sol_thread_wait)
	(sol_thread_fetch_registers, sol_thread_store_registers): Adjust
	to use find_target_beneath.
	(sol_thread_prepare_to_store, sol_thread_xfer_memory): Delete.
	(sol_thread_xfer_partial): Adjust to use find_target_beneath.
	(sol_thread_files_info, sol_thread_kill_inferior): Delete.
	(check_for_thread_db): New.
	(sol_thread_notice_signals, sol_thread_create_inferior): Delete.
	(sol_thread_new_objfile): Call check_for_thread_db.
	(sol_thread_mourn_inferior): Adjust to use find_target_beneath.
	(sol_thread_can_run): Delete.
	(sol_thread_alive): Adjust to use find_target_beneath.
	(sol_thread_stop): Delete.
	(rw_common): Use target_write_memory or target_read_memory.
	(ps_lgetregs, ps_lgetfpregs): Use target_fetch_registers.
	(ps_lsetregs, ps_lsetfpregs): Use target_store_registers.
	(solaris_pid_to_str): Remove check for libthread_db initialization
	failing.
	(sol_find_new_threads): Remove check for libthread_db
	initialization failing, or for an invalid inferior_ptid.  Adjust
	to use find_target_beneath.
	(sol_core_open, sol_core_close, sol_core_detach,
	sol_core_files_info, sol_find_memory_regions,
	sol_make_note_section, ignore): Delete.
	(init_sol_thread_ops): Make it a thread_stratum target.  Remove
	unneeded callback settings.
	(init_sol_core_ops): Delete.
	(_initialize_sol_thread): No longer call init_sol_core_ops, set
	procfs_suppress_run, or hack with core_ops.

	* target.h (struct target_ops): Add a target_ops * parameter to
	to_resume, to_fetch_registers, to_store_registers, to_thread_alive
	and to_find_new_threads.
	(target_fetch_registers, target_store_registers)
	(target_thread_alive, target_find_new_threads): Redeclare as
	function.

	* target.c (update_current_target): Do not inherit or de_fault
	to_resume, to_fetch_registers, to_store_registers,
	to_thread_alive, to_find_new_threads.
	(target_resume): Adjust.
	(target_thread_alive, target_find_new_threads): New.
	(debug_to_resume, debug_to_fetch_registers): Delete.
	(target_fetch_registers): New.
	(debug_to_store_registers): Delete.
	(target_store_registers): New.
	(debug_to_thread_alive, debug_to_find_new_threads): Delete.
	(setup_target_debug): Adjust.

	* gdbcore.h (core_ops): Delete declaration.

	* inf-ptrace.c, linux-nat.c, remote.c, amd64-linux-nat.c,
	inf-child.c, linux-thread-db.c, bsd-uthread.c, inf-ttrace.c,
	i386-sol2-tdep.c, darwin-nat.c, gnu-nat.c, go32-nat.c,
	hpux-thread.c, i386-linux-nat.c, i386fbsd-nat.c, monitor.c,
	nto-procfs.c, remote-m32r-sdi.c, remote-mips.c, windows-nat.c,
	alphabsd-nat.c, amd64bsd-nat.c, arm-linux-nat.c, armnbsd-nat.c,
	bsd-kvm.c, hppa-hpux-nat.c, hppa-linux-nat.c, hppabsd-nat.c,
	hppanbsd-nat.c, i386-darwin-nat.c, i386bsd-nat.c,
	ia64-linux-nat.c, m32r-linux-nat.c, m68kbsd-nat.c,
	m68klinux-nat.c, m88kbsd-nat.c, mips-linux-nat.c,
	mips64obsd-nat.c, mipsnbsd-nat.c, ppc-linux-nat.c, ppcnbsd-nat.c,
	ppcobsd-nat.c, remote-sim.c, rs6000-nat.c, s390-nat.c,
	shnbsd-nat.c, sparc-nat.c, sparc-nat.h, spu-linux-nat.c,
	vaxbsd-nat.c, xtensa-linux-nat.c: Adjust to target_ops changes.

	* gdbarch.sh (core_pid_to_str): New gdbarch callback.
	* gdbarch.h, gdbarch.c: Regenerate.

	* sol2-tdep.c: Include "inferior.h".
	(sol2_core_pid_to_str): New.
	* sol2-tdep.h (sol2_core_pid_to_str): Declare.

	* amd64-sol2-tdep.c (amd64_sol2_init_abi): Set it.
	* sparc-sol2-tdep.c (sparc32_sol2_init_abi): Set it.
	* sparc64-sol2-tdep.c (sparc64_sol2_init_abi): Set it.
	* i386-sol2-tdep.c (i386_sol2_init_abi): Set it.
@
text
@d92 2
a93 2
int (*sparc_gregset_supplies_p) (int);
int (*sparc_fpregset_supplies_p) (int);
d98 1
a98 1
sparc32_gregset_supplies_p (int regnum)
d120 1
a120 1
sparc32_fpregset_supplies_p (int regnum)
d140 1
d166 1
a166 1
  if (regnum == -1 || sparc_gregset_supplies_p (regnum))
d178 1
a178 1
  if (regnum == -1 || sparc_fpregset_supplies_p (regnum))
d193 1
d202 1
a202 1
  if (regnum == -1 || sparc_gregset_supplies_p (regnum))
d228 1
a228 1
  if (regnum == -1 || sparc_fpregset_supplies_p (regnum))
@


1.39
log
@        Updated copyright notices for most files.
@
text
@d137 2
a138 1
sparc_fetch_inferior_registers (struct regcache *regcache, int regnum)
d189 2
a190 1
sparc_store_inferior_registers (struct regcache *regcache, int regnum)
@


1.38
log
@	Updated copyright notices for most files.
@
text
@d3 2
a4 1
   Copyright (C) 2003, 2004, 2005, 2007, 2008 Free Software Foundation, Inc.
@


1.37
log
@        Switch the license of all .c files to GPLv3.
        Switch the license of all .h files to GPLv3.
        Switch the license of all .cc files to GPLv3.
@
text
@d3 1
a3 1
   Copyright (C) 2003, 2004, 2005, 2007 Free Software Foundation, Inc.
@


1.36
log
@	* sparc-nat.h (sparc_fetch_inferior_registers): Add prototype.
	(sparc_store_inferior_registers): Likewise.
	* sparc-nat.c (fetch_inferior_registers): Rename to ...
	(sparc_fetch_inferior_registers): ... this.
	(store_inferior_registers): Rename to ...
	(sparc_store_inferior_registers): ... this.
	(sparc_target): Update callback names.
	* sparc-linux.nat.c (_initialize_sparc_linux_nat): Likewise.
	* sparc64-linux.nat.c (_initialize_sparc64_linux_nat): Likewise.
@
text
@d9 1
a9 1
   the Free Software Foundation; either version 2 of the License, or
d18 1
a18 3
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street, Fifth Floor,
   Boston, MA 02110-1301, USA.  */
@


1.35
log
@	* target.h (struct regcache): Add forward declaration.
	(struct target_ops): Add REGCACHE parameter to to_fetch_registers
	and to_store_registers target operations.
	(target_fetch_registers, target_store_registers): Update.

	* regcache.c (regcache_raw_read): Replace register_cached by
	regcache_valid_p.  Pass regcache to target_fetch_registers.
	(regcache_raw_write): Pass regcache to target_store_registers.

	* arm-linux-nat.c (store_fpregister, store_fpregs, store_register,
	store_regs, store_wmmx_regs): Replace register_cached by
	regcache_valid_p.

	* bsd-kvm.c (bsd_kvm_open, bsd_kvm_proc_cmd): Pass current_regcache
	to target_fetch_registers calls.
	* corelow.c (core_open): Likewise.
	* linux-nat.c (linux_nat_corefile_thread_callback): Likewise.
	* proc-service.c (ps_lgetregs, ps_lsetregs, ps_lgetfpregs,
	ps_lsetfpregs): Likewise.
	* sol-thread.c (ps_lgetregs, ps_lsetregs, ps_lgetfpregs,
	ps_lsetfpregs): Likewise.
	* win32-nat.c (win32_resume): Likewise.
	* ia64-tdep.c (ia64_store_return_value): Pass current_regcache
	to target_store_registers call.
	* rs6000-tdep.c (rs6000_push_dummy_call): Likewise.

	* inferior.h (store_inferior_registers): Update prototype.
	(fetch_inferior_registers): Likewise.
	* gnu-nat.c (gnu_store_registers, gnu_fetch_registers): Likewise.
	* mips-linux-nat.c (super_fetch_registers, super_store_registers):
	Update function pointer signatures.

	* aix-thread.c (aix_thread_fetch_registers): Add REGCACHE parameter,
	use it instead of current_regcache, update calls.
	(aix_thread_store_registers): Likewise.
	* alphabsd-nat.c (alphabsd_fetch_inferior_registers): Likewise.
	(alphabsd_store_inferior_registers): Likewise.
	* amd64bsd-nat.c (amd64bsd_fetch_inferior_registers): Likewise.
	(amd64bsd_store_inferior_registers): Likewise.
	* amd64-linux-nat.c (amd64_linux_fetch_inferior_registers): Likewise.
	(amd64_linux_store_inferior_registers): Likewise.
	* arm-linux-nat.c (fetch_fpregister, fetch_fpregs, store_fpregister,
	store_fpregs, fetch_register, fetch_regs, store_register, store_regs,
	fetch_wmmx_regs, store_wmmx_regs): Likewise.
	(arm_linux_fetch_inferior_registers): Likewise.
	(arm_linux_store_inferior_registers): Likewise.
	* armnbsd-nat.c (fetch_register, fetch_regs, fetch_fp_register,
	fetch_fp_regs, armnbsd_fetch_registers): Likewise.
	(store_register, store_regs, store_fp_register, store_fp_regs,
	armnbsd_store_registers): Likewise.
	* bsd-kvm.c (bsd_kvm_fetch_pcb, bsd_kvm_fetch_registers): Likewise.
	* bsd-uthread.c (bsd_uthread_fetch_registers): Likewise.
	(bsd_uthread_store_registers): Likewise.
	* corelow.c (get_core_registers): Likewise.
	* go32-nat.c (fetch_register, go32_fetch_registers, store_register,
	go32_store_registers): Likewise.
	* hppabsd-nat.c (hppabsd_fetch_registers): Likewise.
	(hppabsd_store_registers): Likewise.
	* hppa-hpux-nat.c (hppa_hpux_fetch_register): Likewise.
	(hppa_hpux_fetch_inferior_registers): Likewise.
	(hppa_hpux_store_register): Likewise.
	(hppa_hpux_store_inferior_registers): Likewise.
	* hppa-linux-nat.c (fetch_register, store_register): Likewise.
	(hppa_linux_fetch_inferior_registers): Likewise.
	(hppa_linux_store_inferior_registers): Likewise.
	* hpux-thread.c (hpux_thread_fetch_registers): Likewise.
	(hpux_thread_store_registers): Likewise.
	* i386bsd-nat.c (i386bsd_fetch_inferior_registers): Likewise.
	(i386bsd_store_inferior_registers): Likewise.
	* i386gnu-nat.c (fetch_fpregs, gnu_fetch_registers, store_fpregs,
	gnu_store_registers): Likewise.
	* i386-linux-nat.c (fetch_register, store_register, fetch_regs,
	store_regs, fetch_fpregs, store_fpregs, fetch_fpxregs, store_fpxregs):
	Likewise.
	(i386_linux_fetch_inferior_registers): Likewise.
	(i386_linux_store_inferior_registers): Likewise.
	* ia64-linux-nat.c (ia64_linux_fetch_register): Likewise.
	(ia64_linux_fetch_registers): Likewise.
	(ia64_linux_store_register): Likewise.
	(ia64_linux_store_registers): Likewise.
	* inf-child.c (inf_child_fetch_inferior_registers): Likewise.
	(inf_child_store_inferior_registers): Likewise.
	* inf-ptrace.c (inf_ptrace_fetch_register): Likewise.
	(inf_ptrace_fetch_registers): Likewise.
	(inf_ptrace_store_register): Likewise.
	(inf_ptrace_store_registers): Likewise.
	* infptrace.c (fetch_register, store_register): Likewise.
	(fetch_inferior_registers, store_inferior_registers): Likewise.
	* m32r-linux-nat.c (fetch_regs, store_regs): Likewise.
	(m32r_linux_fetch_inferior_registers): Likewise.
	(m32r_linux_store_inferior_registers): Likewise.
	* m68kbsd-nat.c (m68kbsd_fetch_inferior_registers): Likewise.
	(m68kbsd_store_inferior_registers): Likewise.
	* m68klinux-nat.c (fetch_register, old_fetch_inferior_registers,
	store_register, old_store_inferior_registers, fetch_regs, store_regs,
	fetch_fpregs, store_fpregs): Likewise.
	(m68k_linux_fetch_inferior_registers): Likewise.
	(m68k_linux_store_inferior_registers): Likewise.
	* m88kbsd-nat.c (m88kbsd_fetch_inferior_registers): Likewise.
	(m88kbsd_store_inferior_registers): Likewise.
	* mips64obsd-nat.c (mips64obsd_fetch_inferior_registers): Likewise.
	(mips64obsd_store_inferior_registers): Likewise.
	* mips-linux-nat.c (mips64_linux_regsets_fetch_registers): Likewise.
	(mips64_linux_regsets_store_registers): Likewise.
	(mips64_linux_fetch_registers): Likewise.
	(mips64_linux_store_registers): Likewise.
	* mipsnbsd-nat.c (mipsnbsd_fetch_inferior_registers): Likewise.
	(mipsnbsd_store_inferior_registers): Likewise.
	* monitor.c (monitor_fetch_register, monitor_store_register): Likewise.
	(monitor_fetch_registers, monitor_store_registers): Likewise.
	* nto-procfs.c (procfs_fetch_registers): Likewise.
	(procfs_store_registers): Likewise.
	* ppc-linux-nat.c (fetch_altivec_register, fetch_spe_register,
	fetch_register, supply_vrregset, fetch_altivec_registers,
	fetch_ppc_registers, ppc_linux_fetch_inferior_registers): Likewise.
	(store_altivec_register, store_spe_register, store_register,
	fill_vrregset, store_altivec_registers, store_ppc_registers,
	ppc_linux_store_inferior_registers): Likewise.
	* ppcnbsd-nat.c (ppcnbsd_fetch_inferior_registers): Likewise.
	(ppcnbsd_store_inferior_registers): Likewise.
	* ppcobsd-nat.c (ppcobsd_fetch_registers): Likewise.
	(ppcobsd_store_registers): Likewise.
	* procfs.c (procfs_fetch_registers, procfs_store_registers): Likewise.
	* remote.c (fetch_register_using_p, process_g_packet,
	fetch_registers_using_g, remote_fetch_registers): Likewise.
	(store_register_using_P, store_registers_using_G,
	remote_store_registers): Likewise.
	* remote-m32r-sdi.c (m32r_fetch_registers, m32r_fetch_register,
	m32r_store_register, m32r_store_register): Likewise.
	* remote-mips.c (mips_fetch_registers, mips_store_registers): Likewise.
	* remote-sim.c (gdbsim_fetch_register): Likewise.
	(gdbsim_store_register): Likewise.
	* rs6000-nat.c (fetch_register, store_register): Likewise.
	(rs6000_fetch_inferior_registers): Likewise.
	(rs6000_store_inferior_registers): Likewise.
	* s390-nat.c (fetch_regs, store_regs): Likewise.
	(fetch_fpregs, store_fpregs): Likewise.
	(s390_linux_fetch_inferior_registers): Likewise.
	(s390_linux_store_inferior_registers): Likewise.
	* shnbsd-nat.c (shnbsd_fetch_inferior_registers): Likewise.
	(shnbsd_store_inferior_registers): Likewise.
	* sol-thread.c (sol_thread_fetch_registers): Likewise.
	(sol_thread_store_registers): Likewise.
	* sparc-nat.c (fetch_inferior_registers): Likewise.
	(store_inferior_registers): Likewise.
	* spu-linux-nat.c (spu_fetch_inferior_registers): Likewise.
	(spu_store_inferior_registers): Likewise.
	* target.c (debug_print_register): Likewise.
	(debug_to_fetch_registers, debug_to_store_registers): Likewise.
	* vaxbsd-nat.c (vaxbsd_fetch_inferior_registers): Likewise.
	(vaxbsd_store_inferior_registers): Likewise.
	* win32-nat.c (do_win32_fetch_inferior_registers): Likewise.
	(win32_fetch_inferior_registers): Likewise.
	(win32_store_inferior_registers): Likewise.
@
text
@d138 1
a138 1
fetch_inferior_registers (struct regcache *regcache, int regnum)
d189 1
a189 1
store_inferior_registers (struct regcache *regcache, int regnum)
d335 2
a336 2
  t->to_fetch_registers = fetch_inferior_registers;
  t->to_store_registers = store_inferior_registers;
@


1.34
log
@Copyright updates for 2007.
@
text
@d138 1
a138 1
fetch_inferior_registers (int regnum)
a139 1
  struct regcache *regcache = current_regcache;
d189 1
a189 1
store_inferior_registers (int regnum)
a190 1
  struct regcache *regcache = current_regcache;
@


1.33
log
@* sparc-nat.c (sparc_xfer_wcookie): Signal EOF.  Tweak comment.
@
text
@d3 1
a3 1
   Copyright (C) 2003, 2004, 2005 Free Software Foundation, Inc.
@


1.32
log
@
	* breakpoint.c:
	* arm-tdep.c:
	* ia64-tdep.c:
	* i386-tdep.c:
	* hpread.c:
	* hppa-tdep.c:
	* hppa-hpux-tdep.c:
	* gnu-nat.c:
	* gdbtypes.c:
	* gdbarch.h:
	* gdbarch.c:
	* eval.c:
	* dwarf2read.c:
	* dbxread.c:
	* copying:
	* symfile.c:
	* stabsread.c:
	* sh64-tdep.c:
	* sh-tdep.c:
	* s390-tdep.c:
	* rs6000-tdep.c:
	* remote.c:
	* remote-mips.c:
	* mips-tdep.c:
	* mdebugread.c:
	* linux-nat.c:
	* infrun.c:
	* xcoffread.c:
	* win32-nat.c:
	* valops.c:
	* utils.c:
	* tracepoint.c:
	* target.c:
	* symtab.c:
	* c-exp.y:
	* ada-valprint.c:
	* ada-typeprint.c:
	* ada-lex.l:
	* ada-lang.h:
	* ada-lang.c:
	* ada-exp.y:
	* alphafbsd-tdep.c:
	* alphabsd-tdep.h:
	* alphabsd-tdep.c:
	* alphabsd-nat.c:
	* alpha-tdep.h:
	* alpha-tdep.c:
	* alpha-osf1-tdep.c:
	* alpha-nat.c:
	* alpha-mdebug-tdep.c:
	* alpha-linux-tdep.c:
	* alpha-linux-nat.c:
	* aix-thread.c:
	* abug-rom.c:
	* arch-utils.c:
	* annotate.h:
	* annotate.c:
	* amd64obsd-tdep.c:
	* amd64obsd-nat.c:
	* amd64nbsd-tdep.c:
	* amd64nbsd-nat.c:
	* amd64fbsd-tdep.c:
	* amd64fbsd-nat.c:
	* amd64bsd-nat.c:
	* amd64-tdep.h:
	* amd64-tdep.c:
	* amd64-sol2-tdep.c:
	* amd64-nat.h:
	* amd64-nat.c:
	* amd64-linux-tdep.c:
	* amd64-linux-nat.c:
	* alphanbsd-tdep.c:
	* block.h:
	* block.c:
	* bfd-target.h:
	* bfd-target.c:
	* bcache.h:
	* bcache.c:
	* ax.h:
	* ax-general.c:
	* ax-gdb.h:
	* ax-gdb.c:
	* avr-tdep.c:
	* auxv.h:
	* auxv.c:
	* armnbsd-tdep.c:
	* armnbsd-nat.c:
	* arm-tdep.h:
	* arm-linux-nat.c:
	* arch-utils.h:
	* charset.c:
	* call-cmds.h:
	* c-valprint.c:
	* c-typeprint.c:
	* c-lang.h:
	* c-lang.c:
	* buildsym.h:
	* buildsym.c:
	* bsd-uthread.h:
	* bsd-uthread.c:
	* bsd-kvm.h:
	* bsd-kvm.c:
	* breakpoint.h:
	* core-regset.c:
	* core-aout.c:
	* completer.h:
	* completer.c:
	* complaints.h:
	* complaints.c:
	* command.h:
	* coffread.c:
	* coff-solib.h:
	* coff-solib.c:
	* coff-pe-read.h:
	* coff-pe-read.c:
	* cli-out.h:
	* cli-out.c:
	* charset.h:
	* dink32-rom.c:
	* dictionary.h:
	* dictionary.c:
	* demangle.c:
	* defs.h:
	* dcache.h:
	* dcache.c:
	* d10v-tdep.c:
	* cpu32bug-rom.c:
	* cp-valprint.c:
	* cp-support.h:
	* cp-support.c:
	* cp-namespace.c:
	* cp-abi.h:
	* cp-abi.c:
	* corelow.c:
	* corefile.c:
	* environ.c:
	* elfread.c:
	* dwarfread.c:
	* dwarf2loc.c:
	* dwarf2expr.h:
	* dwarf2expr.c:
	* dwarf2-frame.h:
	* dwarf2-frame.c:
	* dve3900-rom.c:
	* dummy-frame.h:
	* dummy-frame.c:
	* dsrec.c:
	* doublest.h:
	* doublest.c:
	* disasm.h:
	* disasm.c:
	* fork-child.c:
	* findvar.c:
	* fbsd-nat.h:
	* fbsd-nat.c:
	* f-valprint.c:
	* f-typeprint.c:
	* f-lang.h:
	* f-lang.c:
	* expression.h:
	* expprint.c:
	* exec.h:
	* exec.c:
	* exceptions.h:
	* exceptions.c:
	* event-top.h:
	* event-top.c:
	* event-loop.h:
	* event-loop.c:
	* gdb.c:
	* gdb-stabs.h:
	* gdb-events.h:
	* gdb-events.c:
	* gcore.c:
	* frv-tdep.h:
	* frv-tdep.c:
	* frv-linux-tdep.c:
	* frame.h:
	* frame.c:
	* frame-unwind.h:
	* frame-unwind.c:
	* frame-base.h:
	* frame-base.c:
	* gdb_vfork.h:
	* gdb_thread_db.h:
	* gdb_string.h:
	* gdb_stat.h:
	* gdb_regex.h:
	* gdb_ptrace.h:
	* gdb_proc_service.h:
	* gdb_obstack.h:
	* gdb_locale.h:
	* gdb_dirent.h:
	* gdb_curses.h:
	* gdb_assert.h:
	* gdbarch.sh:
	* gdb.h:
	* hpux-thread.c:
	* hppabsd-nat.c:
	* hppa-tdep.h:
	* hpacc-abi.c:
	* h8300-tdep.c:
	* gregset.h:
	* go32-nat.c:
	* gnu-v3-abi.c:
	* gnu-v2-abi.h:
	* gnu-v2-abi.c:
	* gnu-nat.h:
	* glibc-tdep.c:
	* gdbtypes.h:
	* gdbcore.h:
	* gdbcmd.h:
	* i386nbsd-tdep.c:
	* i386nbsd-nat.c:
	* i386gnu-tdep.c:
	* i386gnu-nat.c:
	* i386fbsd-tdep.c:
	* i386fbsd-nat.c:
	* i386bsd-tdep.c:
	* i386bsd-nat.h:
	* i386bsd-nat.c:
	* i386-tdep.h:
	* i386-sol2-nat.c:
	* i386-nto-tdep.c:
	* i386-nat.c:
	* i386-linux-tdep.h:
	* i386-linux-tdep.c:
	* i386-linux-nat.c:
	* i386-cygwin-tdep.c:
	* inf-ttrace.c:
	* inf-ptrace.h:
	* inf-ptrace.c:
	* inf-loop.h:
	* inf-loop.c:
	* inf-child.h:
	* inf-child.c:
	* ia64-tdep.h:
	* ia64-linux-nat.c:
	* i387-tdep.h:
	* i387-tdep.c:
	* i386v4-nat.c:
	* i386v-nat.c:
	* i386obsd-tdep.c:
	* i386obsd-nat.c:
	* kod.c:
	* jv-valprint.c:
	* jv-typeprint.c:
	* jv-lang.h:
	* jv-lang.c:
	* irix5-nat.c:
	* iq2000-tdep.c:
	* interps.h:
	* interps.c:
	* inftarg.c:
	* inflow.h:
	* inflow.c:
	* inferior.h:
	* infcmd.c:
	* infcall.h:
	* infcall.c:
	* inf-ttrace.h:
	* m32r-tdep.h:
	* m32r-tdep.c:
	* m32r-rom.c:
	* m32r-linux-tdep.c:
	* m32r-linux-nat.c:
	* m2-valprint.c:
	* m2-typeprint.c:
	* m2-lang.h:
	* m2-lang.c:
	* lynx-nat.c:
	* linux-thread-db.c:
	* linux-nat.h:
	* linespec.c:
	* libunwind-frame.h:
	* libunwind-frame.c:
	* language.h:
	* language.c:
	* macroexp.c:
	* macrocmd.c:
	* m88kbsd-nat.c:
	* m88k-tdep.h:
	* m88k-tdep.c:
	* m68klinux-tdep.c:
	* m68klinux-nat.c:
	* m68kbsd-tdep.c:
	* m68kbsd-nat.c:
	* m68k-tdep.h:
	* m68k-tdep.c:
	* mips-linux-nat.c:
	* mips-irix-tdep.c:
	* minsyms.c:
	* memattr.h:
	* memattr.c:
	* mem-break.c:
	* mdebugread.h:
	* main.h:
	* main.c:
	* macrotab.h:
	* macrotab.c:
	* macroscope.h:
	* macroscope.c:
	* macroexp.h:
	* nbsd-tdep.c:
	* mt-tdep.c:
	* monitor.h:
	* monitor.c:
	* mn10300-tdep.h:
	* mn10300-tdep.c:
	* mn10300-linux-tdep.c:
	* mipsv4-nat.c:
	* mipsread.c:
	* mipsnbsd-tdep.h:
	* mipsnbsd-tdep.c:
	* mipsnbsd-nat.c:
	* mips64obsd-tdep.c:
	* mips64obsd-nat.c:
	* mips-tdep.h:
	* mips-mdebug-tdep.c:
	* mips-linux-tdep.c:
	* osabi.h:
	* osabi.c:
	* ocd.h:
	* ocd.c:
	* observer.c:
	* objfiles.h:
	* objfiles.c:
	* objc-lang.h:
	* objc-lang.c:
	* objc-exp.y:
	* nto-tdep.h:
	* nto-tdep.c:
	* nto-procfs.c:
	* nlmread.c:
	* nbsd-tdep.h:
	* ppcobsd-tdep.c:
	* ppcobsd-nat.c:
	* ppcnbsd-tdep.h:
	* ppcnbsd-tdep.c:
	* ppcnbsd-nat.c:
	* ppcbug-rom.c:
	* ppc-tdep.h:
	* ppc-sysv-tdep.c:
	* ppc-linux-tdep.c:
	* ppc-linux-nat.c:
	* ppc-bdm.c:
	* parser-defs.h:
	* parse.c:
	* p-valprint.c:
	* p-typeprint.c:
	* p-lang.h:
	* p-lang.c:
	* remote-fileio.h:
	* remote-fileio.c:
	* remote-est.c:
	* remote-e7000.c:
	* regset.h:
	* regset.c:
	* reggroups.h:
	* reggroups.c:
	* regcache.h:
	* regcache.c:
	* proc-why.c:
	* proc-service.c:
	* proc-events.c:
	* printcmd.c:
	* ppcobsd-tdep.h:
	* sentinel-frame.h:
	* sentinel-frame.c:
	* scm-valprint.c:
	* scm-tags.h:
	* scm-lang.h:
	* scm-lang.c:
	* scm-exp.c:
	* s390-tdep.h:
	* rom68k-rom.c:
	* remote.h:
	* remote-utils.c:
	* remote-st.c:
	* remote-sim.c:
	* remote-sds.c:
	* remote-rdp.c:
	* remote-rdi.c:
	* remote-hms.c:
	* sim-regno.h:
	* shnbsd-tdep.h:
	* shnbsd-tdep.c:
	* shnbsd-nat.c:
	* sh-tdep.h:
	* serial.h:
	* serial.c:
	* ser-unix.h:
	* ser-unix.c:
	* ser-tcp.c:
	* ser-pipe.c:
	* ser-go32.c:
	* ser-e7kpc.c:
	* ser-base.h:
	* ser-base.c:
	* solib.c:
	* solib-svr4.h:
	* solib-svr4.c:
	* solib-sunos.c:
	* solib-som.h:
	* solib-som.c:
	* solib-pa64.h:
	* solib-pa64.c:
	* solib-osf.c:
	* solib-null.c:
	* solib-legacy.c:
	* solib-irix.c:
	* solib-frv.c:
	* solib-aix5.c:
	* sol-thread.c:
	* sparc64-linux-tdep.c:
	* sparc64-linux-nat.c:
	* sparc-tdep.h:
	* sparc-tdep.c:
	* sparc-sol2-tdep.c:
	* sparc-sol2-nat.c:
	* sparc-nat.h:
	* sparc-nat.c:
	* sparc-linux-tdep.c:
	* sparc-linux-nat.c:
	* source.h:
	* source.c:
	* somread.c:
	* solist.h:
	* solib.h:
	* std-regs.c:
	* stack.h:
	* stack.c:
	* stabsread.h:
	* sparcobsd-tdep.c:
	* sparcnbsd-tdep.c:
	* sparcnbsd-nat.c:
	* sparc64obsd-tdep.c:
	* sparc64nbsd-tdep.c:
	* sparc64nbsd-nat.c:
	* sparc64fbsd-tdep.c:
	* sparc64fbsd-nat.c:
	* sparc64-tdep.h:
	* sparc64-tdep.c:
	* sparc64-sol2-tdep.c:
	* sparc64-nat.c:
	* ui-file.c:
	* typeprint.h:
	* typeprint.c:
	* tramp-frame.h:
	* tramp-frame.c:
	* trad-frame.h:
	* trad-frame.c:
	* tracepoint.h:
	* top.c:
	* tobs.inc:
	* thread.c:
	* terminal.h:
	* target.h:
	* symfile.h:
	* stop-gdb.c:
	* vaxbsd-nat.c:
	* vax-tdep.h:
	* vax-tdep.c:
	* vax-nat.c:
	* varobj.h:
	* varobj.c:
	* value.h:
	* value.c:
	* valprint.h:
	* valprint.c:
	* v850-tdep.c:
	* uw-thread.c:
	* user-regs.c:
	* ui-out.h:
	* ui-out.c:
	* ui-file.h:
	* xcoffsolib.h:
	* xcoffsolib.c:
	* wrapper.c:
	* wince.c:
	* wince-stub.h:
	* wince-stub.c:
	* vaxobsd-tdep.c:
	* vaxnbsd-tdep.c:
	* gdb_gcore.sh:
	* copying.c:
	* configure.ac:
	* aclocal.m4:
	* acinclude.m4:
	* reply_mig_hack.awk:
	* observer.sh:
	* gdb_mbuild.sh:
	* arm-linux-tdep.c:
	* blockframe.c:
	* dbug-rom.c:
	* environ.h:
	* dwarf2loc.h:
	* gdb-events.sh:
	* glibc-tdep.h:
	* gdb_wait.h:
	* gdbthread.h:
	* i386-sol2-tdep.c:
	* hppabsd-tdep.c:
	* hppa-linux-nat.c:
	* hppa-hpux-nat.c:
	* ia64-linux-tdep.c:
	* infptrace.c:
	* linespec.h:
	* maint.c:
	* mips-mdebug-tdep.h:
	* remote-m32r-sdi.c:
	* s390-nat.c:
	* rs6000-nat.c:
	* remote-utils.h:
	* sh3-rom.c:
	* sh-linux-tdep.c:
	* top.h:
	* symtab.h:
	* symmisc.c:
	* symfile-mem.c:
	* srec.h:
	* user-regs.h:
	* version.h:
	* valarith.c:
	* xstormy16-tdep.c:
	* wrapper.h:
	* Makefile.in:
	* f-exp.y:
	* cris-tdep.c:
	* cp-name-parser.y:
	* procfs.c:
	* proc-utils.h:
	* proc-flags.c:
	* proc-api.c:
	* p-exp.y:
	* m68hc11-tdep.c:
	* m2-exp.y:
	* kod.h:
	* kod-cisco.c:
	* jv-exp.y:
	* hppa-linux-tdep.c: Add (c) after Copyright.  Update the FSF
	address.
@
text
@d267 3
a269 1
  if (offset >= sizeof (unsigned long))
d275 2
a276 2
     later).  As of release 3.4, OpenBSD doesn't use a randomized
     cookie yet, but a future release probably will.  */
@


1.32.14.1
log
@Changes from nickrob-async-20060828-mergepoint.
@
text
@d267 1
a267 3
  if (offset == sizeof (unsigned long))
    return 0;			/* Signal EOF.  */
  if (offset > sizeof (unsigned long))
d273 2
a274 2
     later).  Since release 3.6, OpenBSD uses a fully randomized
     cookie.  */
@


1.31
log
@* corelow.c (core_xfer_partial): Change type of readbuf and
writebuf to `gdb_byte *'.
* sparc-nat.c (sparc_xfer_wcookie, sparc_xfer_partial): Change
type of readbuf and writebuf to `gdb_byte *'.
* bsd-uthread.c (bsd_uthread_xfer_partial): Change type of readbuf
and writebuf to `gdb_byte *'.
* inf-ptrace.c (inf_ptrace_xfer_partial): Change type of readbuf
and writebuf to `gdb_byte *'.
* bsd-kvm.c (bsd_kvm_xfer_memory): Replace.
(bsd_kvm_xfer_partial): New function.
(bsd_kvm_add_target): Set to_xfer_partial instead of
to_xfer_memory.
* bfd-target.c (target_bfd_xfer_partial): Change type of readbuf
and writebuf to `gdb_byte *'.
* target.c (deprecated_debug_xfer_memory): Remove prototype.
(deprecated_debug_xfer_memory): Change type of second argument to
`gdb_byte *'.
* remote.c (remote_xfer_memory): Remove prototype.
(remote_xfer_memory): Change type of second argument to `gdb_byte
*'.
(remote_xfer_partial): Change type of readbuf and writebuf to
`gdb_byte *'.
@
text
@d3 1
a3 1
   Copyright 2003, 2004, 2005 Free Software Foundation, Inc.
d19 2
a20 2
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */
@


1.30
log
@2005-02-11  Andrew Cagney  <cagney@@gnu.org>

	Mark up error_no_arg, query, perror_with_name, complaint, and
	internal_error.
	* breakpoint.c, cp-abi.c, cp-namespace.c, cp-support.c: Update.
	* cris-tdep.c, dbxread.c, dictionary.c, dsrec.c: Update.
	* dummy-frame.c, dve3900-rom.c, dwarf2-frame.c, dwarf2expr.c: Update.
	* dwarf2read.c, dwarfread.c, elfread.c, event-loop.c: Update.
	* exceptions.c, exec.c, f-lang.c, findvar.c, fork-child.c: Update.
	* frame-unwind.c, frame.c, frv-linux-tdep.c, frv-tdep.c: Update.
	* gdb_assert.h, gdbarch.c, gdbtypes.c, gnu-nat.c: Update.
	* go32-nat.c, hppa-tdep.c, hppabsd-nat.c, hpread.c: Update.
	* i386-linux-nat.c, i386-nat.c, i386-tdep.c, i386bsd-nat.c: Update.
	* i386fbsd-nat.c, inf-ptrace.c, inf-ttrace.c, infcall.c: Update.
	* infcmd.c, inflow.c, infptrace.c, infrun.c, inftarg.c: Update.
	* interps.c, language.c, linespec.c, linux-nat.c: Update.
	* m32r-linux-nat.c, m68k-tdep.c, m68kbsd-nat.c: Update.
	* m68klinux-nat.c, m88kbsd-nat.c, macroexp.c, macroscope.c: Update.
	* macrotab.c, maint.c, mdebugread.c, memattr.c: Update.
	* mips-linux-tdep.c, mips-tdep.c, mips64obsd-nat.c: Update.
	* mipsnbsd-nat.c, mn10300-tdep.c, monitor.c, nto-procfs.c: Update.
	* objc-lang.c, objfiles.c, objfiles.h, ocd.c, osabi.c: Update.
	* parse.c, ppc-bdm.c, ppc-linux-nat.c, ppc-sysv-tdep.c: Update.
	* ppcnbsd-nat.c, ppcobsd-nat.c, printcmd.c, procfs.c: Update.
	* regcache.c, reggroups.c, remote-e7000.c, remote-mips.c: Update.
	* remote-rdp.c, remote-sds.c, remote-sim.c, remote-st.c: Update.
	* remote-utils.c, remote.c, rs6000-nat.c, rs6000-tdep.c: Update.
	* s390-nat.c, s390-tdep.c, sentinel-frame.c, serial.c: Update.
	* sh-tdep.c, sh3-rom.c, sh64-tdep.c, shnbsd-nat.c: Update.
	* solib-aix5.c, solib-svr4.c, solib.c, source.c: Update.
	* sparc-nat.c, stabsread.c, stack.c, symfile.c, symtab.c: Update.
	* symtab.h, target.c, tracepoint.c, ui-file.c, ui-out.c: Update.
	* utils.c, valops.c, valprint.c, vax-nat.c, vaxbsd-nat.c: Update.
	* win32-nat.c, xcoffread.c, xstormy16-tdep.c: Update.
	* cli/cli-cmds.c, cli/cli-logging.c, cli/cli-script.c: Update.
	* cli/cli-setshow.c, mi/mi-cmd-break.c, mi/mi-cmds.c: Update.
	* mi/mi-console.c, mi/mi-getopt.c, mi/mi-out.c: Update.
	* tui/tui-file.c, tui/tui-interp.c: Update.
@
text
@d3 1
a3 1
   Copyright 2003, 2004 Free Software Foundation, Inc.
d258 2
a259 2
		    const char *annex, void *readbuf, const void *writebuf,
		    ULONGEST offset, LONGEST len)
d310 1
a310 1
				    const char *, void *, const void *,
d315 2
a316 2
		    const char *annex, void *readbuf, const void *writebuf,
		    ULONGEST offset, LONGEST len)
@


1.29
log
@* sparc-nat.c (inf_ptrace_xfer_partial): New variable.
(sparc_xfer_partial): New function.
(sparc_target): Save value of to_xfer_partial from ptrace vector.
Set to_xfer_partial.
@
text
@d171 1
a171 1
	perror_with_name ("Couldn't get registers");
d183 1
a183 1
	perror_with_name ("Couldn't get floating point status");
d206 1
a206 1
	perror_with_name ("Couldn't get registers");
d211 1
a211 1
	perror_with_name ("Couldn't write registers");
d232 1
a232 1
	perror_with_name ("Couldn't get floating-point registers");
d245 1
a245 1
	    perror_with_name ("Couldn't write floating-point registers");
d291 1
a291 1
	  perror_with_name ("Couldn't get StackGhost cookie");
@


1.28
log
@* sparc-nat.c: Include "inf-ptrace.h".
(sparc_target): New function.
* sparc-nat.h: Update copyright year.
(sparc_target): New prototype.
* sparcnbsd-nat.c: Don't include "gdbcore.h", include "target.h".
(_initialize_sparcnbsd_nat): Construct and add target vector.
* sparc64nbsd-nat.c: Include "target.h".
(_initialize_sparc64nbsd_nat): Construct and add target vector.
* Makefile.in (sparc-nat.o, sparcnbsd-nat.o, sparc64nbsd-nat.o):
Update dependencies.
* config/sparc/nbsd64.mh (NATDEPFILES): Remove infptrace.o and
inftarg.o, add inf-ptrace.o.
* config/sparc/nbsdaout.mh (NATDEPFILES): Remove infptrace.o and
inftarg.o, add inf-ptrace.o and bsd-kvm.o.
(NAT_FILE): Set to nm-bsd.h.
(LOADLIBES): New variable.
* config/sparc/nbsdelf.mh (NATDEPFILES): Remove infptrace.o and
infarg.o, add inf-ptrace.o.
* config/sparc/nm-nbsdaout.h: Remove file.
* config/sparc/fbsd.mh (NATDEPFILES): Add inf-ptrace.o.
* config/sparc/linux.mh (NATDEPFILES): Add inf-ptrace.o.
* config/sparc/linux64.mh (NATDEPFILES): Add inf-ptrace.o.
@
text
@d308 17
d337 2
@


1.27
log
@* sparc-nat.c (fetch_inferior_registers)
(store_inferior_registers, sparc_xfer_wcookie):
Replace PTRACE_ARG3_TYPE with PTRACE_TYPE_ARG3.
@
text
@d38 1
d308 14
@


1.26
log
@* sparc-nat.c (sparc_xfer_wcookie): Try to fetch the cookie using
the PT_WCOOKIE request.
@
text
@d169 1
a169 1
      if (ptrace (PTRACE_GETREGS, pid, (PTRACE_ARG3_TYPE) &regs, 0) == -1)
d181 1
a181 1
      if (ptrace (PTRACE_GETFPREGS, pid, (PTRACE_ARG3_TYPE) &fpregs, 0) == -1)
d204 1
a204 1
      if (ptrace (PTRACE_GETREGS, pid, (PTRACE_ARG3_TYPE) &regs, 0) == -1)
d209 1
a209 1
      if (ptrace (PTRACE_SETREGS, pid, (PTRACE_ARG3_TYPE) &regs, 0) == -1)
d230 1
a230 1
      if (ptrace (PTRACE_GETFPREGS, pid, (PTRACE_ARG3_TYPE) &fpregs, 0) == -1)
d243 1
a243 1
		      (PTRACE_ARG3_TYPE) &fpregs, 0) == -1)
d287 1
a287 1
    if (ptrace (PT_WCOOKIE, pid, (PTRACE_ARG3_TYPE) &wcookie, 0) == -1)
@


1.26.4.1
log
@Merge mainline to intercu branch - 2004-09-15
@
text
@d169 1
a169 1
      if (ptrace (PTRACE_GETREGS, pid, (PTRACE_TYPE_ARG3) &regs, 0) == -1)
d181 1
a181 1
      if (ptrace (PTRACE_GETFPREGS, pid, (PTRACE_TYPE_ARG3) &fpregs, 0) == -1)
d204 1
a204 1
      if (ptrace (PTRACE_GETREGS, pid, (PTRACE_TYPE_ARG3) &regs, 0) == -1)
d209 1
a209 1
      if (ptrace (PTRACE_SETREGS, pid, (PTRACE_TYPE_ARG3) &regs, 0) == -1)
d230 1
a230 1
      if (ptrace (PTRACE_GETFPREGS, pid, (PTRACE_TYPE_ARG3) &fpregs, 0) == -1)
d243 1
a243 1
		      (PTRACE_TYPE_ARG3) &fpregs, 0) == -1)
d287 1
a287 1
    if (ptrace (PT_WCOOKIE, pid, (PTRACE_TYPE_ARG3) &wcookie, 0) == -1)
@


1.25
log
@* target.h (target_object): Add TARGET_OBJECT_WCOOKIE.
* inftarg.c: Update copyright year.
(child_xfer_partial): Add support for TARGET_OBJECT_WCOOKIE.
* sparc-nat.c: Include "target.h" and "gdb_assert.h".
(sparc_xfer_wcookie): New function.
* sparc-tdep.c (sparc_fetch_wcookie): New function.
* Makefile.in (sparc-nat.o): Update dependencies.
* config/sparc/nm-nbsd.h: Include "target.h".
(NATIVE_XFER_WCOOKIE): New define.
(sparc_xfer_wcookie): New prototype.
@
text
@d273 26
a298 2
     cookie yet.  */
  wcookie = 0x3;
@


1.24
log
@2004-01-12  Andrew Cagney  <cagney@@redhat.com>

	* stack.c (frame_info): Delete DEPRECATED_PRINT_EXTRA_FRAME_INFO
	call.  Never defined.
	* sparc-tdep.h (struct frame_info): Add opaque declaration.
	* sparc64-tdep.h (struct gdbarch): Add opaque declaration.
	(struct sparc_gregset, struct regcache): Ditto.
	* sparc-nat.c: Update copyright.  Specify "GNU/Linux".
@
text
@d25 1
d27 1
d251 1
d253 15
d269 16
@


1.23
log
@* Makefile.in (ALLDEPFILES): Remove sparc-linux-nat.c and
sparcl-tdep.c.  Add sparc-linux-tdep.c, sparc-sol2-nat.c,
sparc-sol2-tdep.c, sparc-sol2-nat.c, sparc-sol2-tdep.c,
sparc64-linux-nat.c, sparc64-linux-tdep.c, sparc64-nat.c,
sparc64-sol2-tdep.c, sparc64-tdep.c, sparc64fbsd-nat.c,
sparc64fbsd-tdep.c, sparcnbsd-nat.c, sparcnbsd-tdep.c.
(sparc_nat_h): New variable.
(sparcbsd_nat_h, sparcnbsd_tdep_h): Remove variables.
(tm-sun4os4.h): Remove dependency.
(sparcbsd-nat.o, sparc-linux-nat.o): Remove dependencies.
(sparc64fbsd-nat.o, sparc64fbsd-tdep.o, sparc64nbsd-nat.o,
sparc64-tdep.o, sparc-nat.o, sparcnbsd-nat.o, sparcnbsd-tdep.o,
sparc-tdep.o): Update dependencies.
(sparc-linux-tdep.o, sparc-sol2-nat.o, sparc-sol2-tdep.o,
sparc64-linux-nat.o, sparc64-linux-tdep.o, sparc64-nat.o,
sparc64-sol2-tdep.o, sparc64-tdep.o, sparc64nbsd-tdep.o): New
dependencies.
* configure.host: Remove existing sparc-*-lynxos*,
sparc-*-solaris*, sparc-*-sunos4*, sparc-*-sunos5*, sparc-*-*,
ultrasparc-*-freebsd, sparcv9-*-freebsd, sparc64-*-linux*,
sparcv9-*-* and sparc64-*-* triplets.  Add new sparc64-*-linux*,
sparc-*-solaris2*, sparcv9-*-solaris2* and sparc64-*-solaris2*
triplets.
* configure.tgt: Remove exitsing sparc-*-aout*, sparc-*-coff*,
sparc-*-elf*, sparc*-lynxos*, sparc-*-solars2*, sparc-*-sunos4*,
sparc-*-sunos5*, sparc-*-vxworks*, sparc64-*linux*, sparc64-*-*,
sparcv9-*-* and commented out sparc64-*-solars2* triplets.  Add
new sparc-*-solaris2.[0-6], sparc-*-solaris2.[0-6].*,
sparc64-*-linux, sparc-*-solaris2*, sparcv9-*-solaris*,
sparc64-*-solaris2* and sparc64-*-* triplets.
* sparc64-tdep.c: Update copyright year.  Include "inferior.h",
"symtab.h" and "objfiles.h".
(BIAS): Remove define.
(X_OP, X_RD, X_A, X_COND, X_OP2, X_IMM22, X_OP3, X_I, X_DISP22)
(X_DISP19): Remove macros.
(sparc_fetch_instruction): Remove function.
(struct gdbarch_tdep): Remove definition.
(SPARC64_NUM_REGS, SPARC64_NUM_PSEUDO_REGS): Use ARRAY_SIZE.
(sparc_breakpoint_from_pc): Remove function.
(struct sparc64_frame_cache): Remove definition.
(sparc64_alloc_frame_cache, sparc64_analyze_prologue,
sparc64_unwind_pc): Remove functions.
(sparc64_skip_prologue): Use `struct sparc_frame_cache' instead of
`struct sparc64_frame_cache.  Call sparc_analyze_prologue instead
of sparc64_analyze_prologue.  Mark constant as ULL instead of UL.
(sparc64_frame_cache): Change return type to `struct
sparc_frame_cache *'.  Simply call sparc_frame_cache.
(sparc64_frame_this_id, sparc64_frame_prev_register,
sparc64_frame_base_address): Use `struct sparc_frame_cache'
instead of `struct sparc64_frame_cache.
(sparc_unwind_dummy_id, sparc_extract_struct_value_address,
sparc_analyze_control_transfer, sparc_software_single_step,
sparc64_gdbarch_init, sparc_supply_rwindow, sparc_fill_rwindow,
_initialize_sparc64_tdep): Remove functions.
(TSTATE_CWP, TSTATE_ICC, TSTATE_XCC): New macros.
(PSR_S, PSR_ICC, PSR_VERS, PSR_IMPL, PSR_V8PLUS, PSR_XCC): New
macros.
(sparc64_supply_gregset, sparc64_collect_gregset,
sparc64_supply_fpregset, sparc64_collect_fpregset): New functions.
(sparc64_init_abi): New function.
* sparc64-tdep.h: Update copyright year.  Fix typo in multiple
inclusion guard.  Include "sparc-tdep.h".
(BIAS): Define.
(r_tstate_offset, r_fprs_offset): New defines.
(enum sparc_regnum): Remove defenition.
(enum sparc64_regnum): Reformat.
(sparc_supply_rwindow, sparc_fill_rwindow): Remove prototypes.
(sparc64_init_abi, sparc64_supply_gregset,
sparc64_collect_gregset, sparc64_supply_fpregset,
sparc64_collect_fpregset): New prototypes.
(sparc64_sol2_gregset, sparc64nbsd_gregset, sparc64fbsd_gregset):
Add extern declarations.
(sparc64_sol2_init_abi): New prototype.
(sparc64fbsd_supply_reg, sparc64fbsd_fill_reg)
(sparc64fbsd_supply_fpreg, sparc64fbsd_fill_fpreg): Remove
prototypes.
* sparc64fbsd-nat.c: Include "sparc-nat.h", don't include
"sparnbsd-nat.h".
(sparc64fbsd_reg_supplies_p, sparc64fbsd_fpreg_supplies_p): Remove
functions.
(_initialize_sparc64fbsd_nat): Remove initialization of
sparcbsd_supply_reg, sparcbsd_fill_reg, sparcbsd_supply_fpreg,
sparcbsd_fill_fpreg, sparcbsd_reg_supplies_p,
sparcbsd_fpreg_supplies_p.  Initialize sparc_gregset.
* sparc64fbsd-tdep.c: Update copyright year.  Include "frame.h",
"frame-unwind.h", "trad-frame.h" and "gdb_assert.h".
(sparc64fbsd_r_global_offset, sparc64fbsd_r_out_offset)
(sparc64fbsd_r_fprs_offset, sparc64fbsd_r_tnpc_offset)
(sparc64fbsd_r_tpc_offset, sparc64fbsd_r_tstate_offset)
(sparc64fbsd_r_y_offset): Remove variables.
(sparc64fbsd_sizeof_struct_reg, sparc64fbsd_sizeof_struct_fpreg):
Make static and const.
(sparc64fbsd_supply_reg, sparc64fbsd_fill_reg)
(sparc64fbsd_supply_fpreg, sparc64fbsd_fill_fpreg): Remove
functions.
(sparc64fbsd_gregset): New variable.
(fetch_core_registers): Replace calls to sparc64fbsd_supply_reg
and sparc64fbsd_supply_fpreg with calls to sparc64_supply_gregset
and sparc64_supply_fpregset.
(sparc64fbsd_pc_in_sigtramp, sparc64fbsd_sigtramp_frame_cache)
(sparc64fbsd_sigtramp_frame_this_id)
(sparc64fbsd_sigtramp_frame_prev_register): New functions.
(sparc64fbsd_sigtramp_frame_unwind): New variable.
(sparc64fbsd_sigtramp_frame_sniffer): New function.
(sparc64fbsd_init_abi): Set pc_in_sigtramp, append
sparc64fbsd_sigtramp_frame_sniffer.  Call sparc64_init_abi.
* sparcnbsd-tdep.c: Update copyright year.  Include
"floatformat.h", "frame.h", "frame-unwind.h", "symtab.h",
"trad-frame.h" and "gdb_assert.h", don't include "target.h",
"value.h" and "sparcnbsd-tdep.h".
(REG32_OFFSET_PSR, REG32_OFFSET_PC, REG32_OFFSET_NPC)
(REG32_OFFSET_Y, REG32_OFFSET_GLOBAL, REG32_OFFSET_OUT)
(REG64_OFFSET_TSTATE, REG64_OFFSET_PC, REG64_OFFSET_NPC)
(REG64_OFFSET_Y, REG64_OFFSET_GLOBAL, REG64_OFFSET_OUT): Remove
defines.
(sparcnbsd_gregset): New variable.
(sparcnbsd_supply_reg32, sparcnbsd_supply_reg64)
(sparcnbsd_fill_reg32, sparcnbsd_fill_reg64)
(sparcnbsd_supply_fpreg32, sparcnbsd_supply_fpreg64)
(sparcnbsd_fill_reg32, sparcnbsd_fill_reg64): Remove functions.
(sparc32nbsd_sigtramp_start, sparc32nbsd_sigtramp_end): New
variables.
(sparc32nbsd_pc_in_sigtramp, sparc32nbsd_sigcontext_frame_cache)
(sparc32nbsd_sigcontext_frame_this_id)
(sparc32nbsd_sigcontext_frame_prev_register): New functions.
(sparc32nbsd_sigcontext_frame_unwind): New variable.
(sparc32nbsd_sigtramp_frame_sniffer): New function.
(sparcnbsd_get_longjmp_target_32,
sparcnbsd_get_longjmp_target_64): Remove functions.
(sparcnbsd_aout_in_solib_call_trampoline): Rewrite.
(sparcnbsd_init_abi_common, sparcnbsd_init_aout,
sparcnbsd_init_elf): Remove.
(sparcnbsd_init_abi, sparcnbsd_aout_init_abi)
(sparcnbsd_elf_init_abi): New functions.
(_initialize_sparcnbsd_tdep): New prototype.
(_initialize_sparnbsd_tdep): Update.
* config/sparc/fbsd.mh (NATDEPFILES): Remove sparcbsd-nat.o and
corelow.o.  Add sparc64-nat.o and sparc-nat.o.
* config/sparc/fbsd.mt (TDEPFILES): Add sparc-tdep.o and corelow.o.
* config/sparc/linux.mh: Update comment.
(XM_FILE, HOST_IPC): Remove variables.
(NATDEPFILES): Add sparc-sol2-nat.o and core-regset.o.  Remove
sparc-linux-nat.o.
* config/sparc/linux.mt: Update comment.
(TDEPFILES): Add sparc-sol2-tdep.o and sparc-linux-tdep.o.
* config/sparc/nbsd.mt: Reformat.
* config/sparc/nbsd64.mh: Update comment.
(NATDEPFILES): Add sparc-nat.o.
* config/sparc/nbsd64.mt: Update comment.
(TDEPFILES): Add sparc64-tdep.o and sparc64nbsd-tdep.o.
(TM_FILE): Set to tm-nbsd.h.
* config/sparc/nbsdelf.mh: Update comment.
(NATDEPFILES): Add sparc-nat.o.
(XM_FILE): Delete.
* config/sparc/nbsdaout.mh: Update comment.
(NATDEPFILES): Add sparc-nat.o
(XM_FILE): Delete.
* config/sparc/nm-linux.h: Update copyright year.  Don't include
"config/nm-svr4.h" and "solib.h".  Add protection against multiple
inclusion.
(KERNEL_U_SIZE): Remove define.
(kernel_u_size): Remove prototype.
(PTRACE_ARG3_TYPE, PTRACE_XFER_TYPE): Define.
* config/sparc/nm-nbsd.h: Update copyright.  Don't include
"regcache.h".
(CHILD_PREPARE_TO_STORE): Remove define.
* config/sparc/nm-nbsdaout.h: Tweak some comments.
* sparc-nat.c, sparc-tdep.c, sparc-tdep.h, sparc64nbsd-nat.c,
sparcnbsd-nat.c: Rewrite files.
* config/sparc/tm-linux.h, config/sparc/tm-nbsd.h: Rewrite files.
* sparc-linux-nat.c, sparcbsd-nat.c, sparcbsd-nat.h,
sparcnbsd-tdep.h: Remove files.
* config/sparc/nm-sparclynx.h, config/sparc/nm-sun4os4.h,
config/sparc/nm-sun4sol2.h, config/sparc/sp64.mt,
config/sparc/sp64linux.mt, config/sparc/sp64sol2.mt,
config/sparc/sparc-em.mt, config/sparc/sparclynx.mh,
config/sparc/sparclynx.mt, config/sparc/sun4os4.mh,
config/sparc/sun4os4.mt, config/sparc/sun4sol2.mh,
config/sparc/sun4sol2.mt, config/sparc/tm-sp64.h,
config/sparc/tm-sp64linux.h, config/sparc/tm-sparc.h,
config/sparc/tm-sparclynx.h, config/sparc/tm-spc-em.h,
config/sparc/tm-sun4os4.h, config/sparc/tm-sun4sol2.h,
config/sparc/tm-vxsparc.h, config/sparc/vxsparc.mt,
config/sparc/xm-linux.h, config/sparc/xm-sun4sol2.h: Remove files.
* sparc-linux-tdep.c, sparc-nat.h, sparc-sol2-nat.c,
sparc-sol2-tdep.c, sparc64-linux-nat.c, sparc64-linux-t dep.c,
sparc64-nat.c, sparc64-sol2-tdep.c, sparc64nbsd-tdep.c: New files.
* config/sparc/linux64.mh, config/sparc/linux64.mt,
config/sparc/nm-sol2.h, config/sparc/sol2-64.mt,
config/sparc/sol2.mh, config/sparc/sol2.mt, config/sparc/sparc.mt,
config/sparc/sparc64.mt, config/sparc/tm-sol2.h: New files.
@
text
@d3 1
a3 1
   Copyright 2003 Free Software Foundation, Inc.
d39 1
a39 1
   Linux and the various SPARC BSD's.
@


1.22
log
@2003-10-02  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (DEPRECATED_REGISTER_RAW_SIZE): Rename
	REGISTER_RAW_SIZE.
	* gdbarch.h, gdbarch.c: Re-generate.
	* aix-thread.c, alpha-tdep.h, arm-tdep.c, core-sol2.c: Update.
	* cris-tdep.c, dve3900-rom.c, findvar.c, frame.c: Update.
	* hppa-tdep.c, hppab-nat.c, hppah-nat.c, hppam3-nat.c: Update.
	* hpux-thread.c, i386gnu-nat.c, ia64-aix-nat.c: Update.
	* ia64-linux-nat.c, ia64-tdep.c, infcmd.c, infptrace.c: Update.
	* infrun.c, irix5-nat.c, lynx-nat.c, mips-linux-tdep.c: Update.
	* mips-nat.c, mips-tdep.c, mipsv4-nat.c, mn10300-tdep.c: Update.
	* monitor.c, ns32k-tdep.c, ppc-linux-nat.c, regcache.c: Update.
	* remote-e7000.c, remote-mips.c, remote-sim.c: Update.
	* remote-vxmips.c, remote-vxsparc.c, remote.c: Update.
	* rom68k-rom.c, rs6000-nat.c, rs6000-tdep.c, s390-tdep.c: Update.
	* sh64-tdep.c, sparc-nat.c, sparc-tdep.c, stack.c: Update.
	* target.c, tracepoint.c, v850-tdep.c, v850ice.c, valops.c: Update.
	* vax-tdep.c, vax-tdep.h, x86-64-tdep.c, xstormy16-tdep.c: Update.
	* config/m68k/tm-delta68.h, config/m68k/tm-vx68.h: Update.
	* config/sparc/tm-sparc.h, config/sparc/tm-sparclynx.h: Update.

2003-10-02  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Rename
	REGISTER_RAW_SIZE to DEPRECATED_REGISTER_RAW_SIZE.
	* gdb.texinfo (Packets, Stop Reply Packets): Ditto.
	* gdbint.texinfo (Target Architecture Definition): Rename

2003-10-02  Andrew Cagney  <cagney@@redhat.com>

	* mi-main.c: Rename REGISTER_RAW_SIZE to
	DEPRECATED_REGISTER_RAW_SIZE.
@
text
@d1 1
a1 1
/* Functions specific to running gdb native on a SPARC running SunOS4.
d3 1
a3 2
   Copyright 1989, 1992, 1993, 1994, 1996, 1997, 1998, 1999, 2000,
   2001, 2002, 2003 Free Software Foundation, Inc.
a23 2
#include "target.h"
#include "gdbcore.h"
a25 5
#include "sparc-tdep.h"

#ifdef HAVE_SYS_PARAM_H
#include <sys/param.h>
#endif
d27 1
d30 1
a30 3
#ifdef __linux__
#include <asm/reg.h>
#else
a32 1
#include <sys/user.h>
d34 99
a132 13
/* We don't store all registers immediately when requested, since they
   get sent over in large chunks anyway.  Instead, we accumulate most
   of the changes and send them over once.  "deferred_stores" keeps
   track of which sets of registers we have locally-changed copies of,
   so we only need send the groups that have changed.  */

#define	INT_REGS	1
#define	STACK_REGS	2
#define	FP_REGS		4

/* Fetch one or more registers from the inferior.  REGNO == -1 to get
   them all.  We actually fetch more than requested, when convenient,
   marking them as valid so we won't fetch them again.  */
d135 1
a135 1
fetch_inferior_registers (int regno)
d137 2
a138 4
  struct regs inferior_registers;
  struct fp_status inferior_fp_registers;
  int i;
  int fetch_pid;
d153 3
d157 1
a157 19
  fetch_pid = TIDGET (inferior_ptid);
  if (fetch_pid == 0)
    fetch_pid = PIDGET (inferior_ptid);

  /* We should never be called with deferred stores, because a prerequisite
     for writing regs is to have fetched them all (PREPARE_TO_STORE), sigh.  */
  if (deferred_stores)
    internal_error (__FILE__, __LINE__, "failed internal consistency check");

  DO_DEFERRED_STORES;

  /* Global and Out regs are fetched directly, as well as the control
     registers.  If we're getting one of the in or local regs,
     and the stack pointer has not yet been fetched,
     we have to do that first, since they're found in memory relative
     to the stack pointer.  */
  if (regno < O7_REGNUM		/* including -1 */
      || regno >= Y_REGNUM
      || (!deprecated_register_valid[SP_REGNUM] && regno < I7_REGNUM))
d159 2
a160 26
      if (0 != ptrace (PTRACE_GETREGS, fetch_pid,
		       (PTRACE_ARG3_TYPE) & inferior_registers, 0))
	perror ("ptrace_getregs");

      deprecated_registers[DEPRECATED_REGISTER_BYTE (0)] = 0;
      memcpy (&deprecated_registers[DEPRECATED_REGISTER_BYTE (1)],
	      &inferior_registers.r_g1, 15 * DEPRECATED_REGISTER_RAW_SIZE (G0_REGNUM));
      *(int *) &deprecated_registers[DEPRECATED_REGISTER_BYTE (PS_REGNUM)]
	= inferior_registers.r_ps;
      *(int *) &deprecated_registers[DEPRECATED_REGISTER_BYTE (PC_REGNUM)]
	= inferior_registers.r_pc;
      *(int *) &deprecated_registers[DEPRECATED_REGISTER_BYTE (DEPRECATED_NPC_REGNUM)]
	= inferior_registers.r_npc;
      *(int *) &deprecated_registers[DEPRECATED_REGISTER_BYTE (Y_REGNUM)] = inferior_registers.r_y;

      for (i = G0_REGNUM; i <= O7_REGNUM; i++)
	deprecated_register_valid[i] = 1;
      deprecated_register_valid[Y_REGNUM] = 1;
      deprecated_register_valid[PS_REGNUM] = 1;
      deprecated_register_valid[PC_REGNUM] = 1;
      deprecated_register_valid[DEPRECATED_NPC_REGNUM] = 1;
      /* If we don't set these valid, read_register_bytes() rereads
         all the regs every time it is called!  FIXME.  */
      deprecated_register_valid[WIM_REGNUM] = 1;	/* Not true yet, FIXME */
      deprecated_register_valid[TBR_REGNUM] = 1;	/* Not true yet, FIXME */
      deprecated_register_valid[CPS_REGNUM] = 1;	/* Not true yet, FIXME */
d163 1
a163 4
  /* Floating point registers */
  if (regno == -1 ||
      regno == FPS_REGNUM ||
      (regno >= FP0_REGNUM && regno <= FP0_REGNUM + 31))
d165 8
a172 11
      if (0 != ptrace (PTRACE_GETFPREGS, fetch_pid,
		       (PTRACE_ARG3_TYPE) & inferior_fp_registers,
		       0))
	perror ("ptrace_getfpregs");
      memcpy (&deprecated_registers[DEPRECATED_REGISTER_BYTE (FP0_REGNUM)],
	      &inferior_fp_registers, sizeof inferior_fp_registers.fpu_fr);
      memcpy (&deprecated_registers[DEPRECATED_REGISTER_BYTE (FPS_REGNUM)],
	      &inferior_fp_registers.Fpu_fsr, sizeof (FPU_FSR_TYPE));
      for (i = FP0_REGNUM; i <= FP0_REGNUM + 31; i++)
	deprecated_register_valid[i] = 1;
      deprecated_register_valid[FPS_REGNUM] = 1;
d175 1
a175 3
  /* These regs are saved on the stack by the kernel.  Only read them
     all (16 ptrace calls!) if we really need them.  */
  if (regno == -1)
d177 6
a182 15
      CORE_ADDR sp = *(unsigned int *) & deprecated_registers[DEPRECATED_REGISTER_BYTE (SP_REGNUM)];
      target_read_memory (sp, &deprecated_registers[DEPRECATED_REGISTER_BYTE (L0_REGNUM)],
			  16 * DEPRECATED_REGISTER_RAW_SIZE (L0_REGNUM));
      for (i = L0_REGNUM; i <= I7_REGNUM; i++)
	deprecated_register_valid[i] = 1;
    }
  else if (regno >= L0_REGNUM && regno <= I7_REGNUM)
    {
      CORE_ADDR sp = *(unsigned int *) & deprecated_registers[DEPRECATED_REGISTER_BYTE (SP_REGNUM)];
      i = DEPRECATED_REGISTER_BYTE (regno);
      if (deprecated_register_valid[regno])
	printf_unfiltered ("register %d valid and read\n", regno);
      target_read_memory (sp + i - DEPRECATED_REGISTER_BYTE (L0_REGNUM),
			  &deprecated_registers[i], DEPRECATED_REGISTER_RAW_SIZE (regno));
      deprecated_register_valid[regno] = 1;
a185 4
/* Store our register values back into the inferior.
   If REGNO is -1, do this for all registers.
   Otherwise, REGNO specifies which register (so we can save time).  */

d187 1
a187 1
store_inferior_registers (int regno)
d189 2
a190 4
  struct regs inferior_registers;
  struct fp_status inferior_fp_registers;
  int wanna_store = INT_REGS + STACK_REGS + FP_REGS;
  int store_pid;
d194 3
a196 24
  store_pid = TIDGET (inferior_ptid);
  if (store_pid == 0)
    store_pid = PIDGET (inferior_ptid);

  /* First decide which pieces of machine-state we need to modify.  
     Default for regno == -1 case is all pieces.  */
  if (regno >= 0)
    {
      if (FP0_REGNUM <= regno && regno < FP0_REGNUM + 32)
	{
	  wanna_store = FP_REGS;
	}
      else
	{
	  if (regno == SP_REGNUM)
	    wanna_store = INT_REGS + STACK_REGS;
	  else if (regno < L0_REGNUM || regno > I7_REGNUM)
	    wanna_store = INT_REGS;
	  else if (regno == FPS_REGNUM)
	    wanna_store = FP_REGS;
	  else
	    wanna_store = STACK_REGS;
	}
    }
d198 1
a198 7
  /* See if we're forcing the stores to happen now, or deferring. */
  if (regno == -2)
    {
      wanna_store = deferred_stores;
      deferred_stores = 0;
    }
  else
d200 1
a200 11
      if (wanna_store == STACK_REGS)
	{
	  /* Fall through and just store one stack reg.  If we deferred
	     it, we'd have to store them all, or remember more info.  */
	}
      else
	{
	  deferred_stores |= wanna_store;
	  return;
	}
    }
d202 2
a203 3
  if (wanna_store & STACK_REGS)
    {
      CORE_ADDR sp = *(unsigned int *) & deprecated_registers[DEPRECATED_REGISTER_BYTE (SP_REGNUM)];
d205 1
a205 16
      if (regno < 0 || regno == SP_REGNUM)
	{
	  if (!deprecated_register_valid[L0_REGNUM + 5])
	    internal_error (__FILE__, __LINE__, "failed internal consistency check");
	  target_write_memory (sp,
			       &deprecated_registers[DEPRECATED_REGISTER_BYTE (L0_REGNUM)],
			       16 * DEPRECATED_REGISTER_RAW_SIZE (L0_REGNUM));
	}
      else
	{
	  if (!deprecated_register_valid[regno])
	    internal_error (__FILE__, __LINE__, "failed internal consistency check");
	  target_write_memory (sp + DEPRECATED_REGISTER_BYTE (regno) - DEPRECATED_REGISTER_BYTE (L0_REGNUM),
			       &deprecated_registers[DEPRECATED_REGISTER_BYTE (regno)],
			       DEPRECATED_REGISTER_RAW_SIZE (regno));
	}
d207 2
a208 1
    }
d210 5
a214 4
  if (wanna_store & INT_REGS)
    {
      if (!deprecated_register_valid[G1_REGNUM])
	internal_error (__FILE__, __LINE__, "failed internal consistency check");
d216 3
a218 17
      memcpy (&inferior_registers.r_g1,
	      &deprecated_registers[DEPRECATED_REGISTER_BYTE (G1_REGNUM)],
	      15 * DEPRECATED_REGISTER_RAW_SIZE (G1_REGNUM));

      inferior_registers.r_ps =
	*(int *) &deprecated_registers[DEPRECATED_REGISTER_BYTE (PS_REGNUM)];
      inferior_registers.r_pc =
	*(int *) &deprecated_registers[DEPRECATED_REGISTER_BYTE (PC_REGNUM)];
      inferior_registers.r_npc =
	*(int *) &deprecated_registers[DEPRECATED_REGISTER_BYTE (DEPRECATED_NPC_REGNUM)];
      inferior_registers.r_y =
	*(int *) &deprecated_registers[DEPRECATED_REGISTER_BYTE (Y_REGNUM)];

      if (0 != ptrace (PTRACE_SETREGS, store_pid,
		       (PTRACE_ARG3_TYPE) & inferior_registers, 0))
	perror ("ptrace_setregs");
    }
d220 2
a221 14
  if (wanna_store & FP_REGS)
    {
      if (!deprecated_register_valid[FP0_REGNUM + 9])
	internal_error (__FILE__, __LINE__, "failed internal consistency check");
      memcpy (&inferior_fp_registers,
	      &deprecated_registers[DEPRECATED_REGISTER_BYTE (FP0_REGNUM)],
	      sizeof inferior_fp_registers.fpu_fr);
      memcpy (&inferior_fp_registers.Fpu_fsr,
	      &deprecated_registers[DEPRECATED_REGISTER_BYTE (FPS_REGNUM)],
	      sizeof (FPU_FSR_TYPE));
      if (0 !=
	  ptrace (PTRACE_SETFPREGS, store_pid,
		  (PTRACE_ARG3_TYPE) & inferior_fp_registers, 0))
	perror ("ptrace_setfpregs");
a222 7
}

/* Provide registers to GDB from a core file.

   CORE_REG_SECT points to an array of bytes, which are the contents
   of a `note' from a core file which BFD thinks might contain
   register contents.  CORE_REG_SIZE is its size.
d224 1
a224 12
   WHICH says which register set corelow suspects this is:
     0 --- the general-purpose register set
     2 --- the floating-point register set

   IGNORE is unused.  */

static void
fetch_core_registers (char *core_reg_sect, unsigned core_reg_size,
		      int which, CORE_ADDR ignore)
{

  if (which == 0)
d226 1
d228 2
a229 1
      /* Integer registers */
d231 2
a232 35
#define gregs ((struct regs *)core_reg_sect)
      /* G0 *always* holds 0.  */
      *(int *) &deprecated_registers[DEPRECATED_REGISTER_BYTE (0)] = 0;

      /* The globals and output registers.  */
      memcpy (&deprecated_registers[DEPRECATED_REGISTER_BYTE (G1_REGNUM)], &gregs->r_g1,
	      15 * DEPRECATED_REGISTER_RAW_SIZE (G1_REGNUM));
      *(int *) &deprecated_registers[DEPRECATED_REGISTER_BYTE (PS_REGNUM)] = gregs->r_ps;
      *(int *) &deprecated_registers[DEPRECATED_REGISTER_BYTE (PC_REGNUM)] = gregs->r_pc;
      *(int *) &deprecated_registers[DEPRECATED_REGISTER_BYTE (DEPRECATED_NPC_REGNUM)] = gregs->r_npc;
      *(int *) &deprecated_registers[DEPRECATED_REGISTER_BYTE (Y_REGNUM)] = gregs->r_y;

      /* My best guess at where to get the locals and input
         registers is exactly where they usually are, right above
         the stack pointer.  If the core dump was caused by a bus error
         from blowing away the stack pointer (as is possible) then this
         won't work, but it's worth the try. */
      {
	int sp;

	sp = *(int *) &deprecated_registers[DEPRECATED_REGISTER_BYTE (SP_REGNUM)];
	if (0 != target_read_memory (sp,
				     &deprecated_registers[DEPRECATED_REGISTER_BYTE (L0_REGNUM)],
				     16 * DEPRECATED_REGISTER_RAW_SIZE (L0_REGNUM)))
	  {
	    /* fprintf_unfiltered so user can still use gdb */
	    fprintf_unfiltered (gdb_stderr,
		"Couldn't read input and local registers from core file\n");
	  }
      }
    }
  else if (which == 2)
    {

      /* Floating point registers */
d234 5
a238 2
#define fpuregs  ((struct fpu *) core_reg_sect)
      if (core_reg_size >= sizeof (struct fpu))
d240 3
a242 4
	  memcpy (&deprecated_registers[DEPRECATED_REGISTER_BYTE (FP0_REGNUM)],
		  fpuregs->fpu_regs, sizeof (fpuregs->fpu_regs));
	  memcpy (&deprecated_registers[DEPRECATED_REGISTER_BYTE (FPS_REGNUM)],
		  &fpuregs->fpu_fsr, sizeof (FPU_FSR_TYPE));
d244 3
a246 2
      else
	fprintf_unfiltered (gdb_stderr, "Couldn't read float regs from core file\n");
a248 6

int
kernel_u_size (void)
{
  return (sizeof (struct user));
}
d251 2
a252 11
/* Register that we are able to handle sparc core file formats.
   FIXME: is this really bfd_target_unknown_flavour? */

static struct core_fns sparc_core_fns =
{
  bfd_target_unknown_flavour,		/* core_flavour */
  default_check_format,			/* check_format */
  default_core_sniffer,			/* core_sniffer */
  fetch_core_registers,			/* core_read_registers */
  NULL					/* next */
};
d255 1
a255 1
_initialize_core_sparc (void)
d257 15
a271 1
  add_core_fns (&sparc_core_fns);
@


1.21
log
@2003-09-17  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (DEPRECATED_NPC_REGNUM): Deprecate NPC_REGNUM.
	* gdbarch.h, gdbarch.c: Regenerate.
	* core-sol2.c, hppa-tdep.c, lynx-nat.c, procfs.c: Update.
	* regcache.c, remote-vxsparc.c, sparc-linux-nat.c: Update.
	* sparc-nat.c, sparc-tdep.c, sparc64-tdep.c: Update.
	* sparcnbsd-tdep.c: Update.
@
text
@d106 1
a106 1
	      &inferior_registers.r_g1, 15 * REGISTER_RAW_SIZE (G0_REGNUM));
d152 1
a152 1
			  16 * REGISTER_RAW_SIZE (L0_REGNUM));
d163 1
a163 1
			  &deprecated_registers[i], REGISTER_RAW_SIZE (regno));
d237 1
a237 1
			       16 * REGISTER_RAW_SIZE (L0_REGNUM));
d245 1
a245 1
			       REGISTER_RAW_SIZE (regno));
d257 1
a257 1
	      15 * REGISTER_RAW_SIZE (G1_REGNUM));
d318 1
a318 1
	      15 * REGISTER_RAW_SIZE (G1_REGNUM));
d335 1
a335 1
				     16 * REGISTER_RAW_SIZE (L0_REGNUM)))
@


1.21.2.1
log
@* sparc-tdep.h (struct sparc_gregset): New.
(sparc_sol2_supply_gregset, sparc_sol2_collect_gregset,
sparc_sol2_supply_fpregset, sparc_sol2_collect_fpregset): Remove
prototypes.
(sparc_supply_gregset, sparc_collect_gregset,
sparc_supply_fpregset, sparc_collect_fpregset): New prototypes.
(sparc32_sunos4_gregset, sparc32_sol2_gregset): New extern
declarations.
(sparc32_sol2_init_abi): Rename from sparc_sol2_init_abi.
* sparc-tdep.c (sparc_supply_gregset, sparc_collect_gregset,
sparc_supply_fpregset, sparc_collect_fpregset): New function.
(sparc32_sunos4_gregset): New variable.
* sparc-sol2-tdep.c (sparc_sol2_R_PSR, sparc_sol2_R_PC,
sparc_sol2_R_nPC, sparc_sol2_R_Y, sparc_sol2_R_WIM,
sparc_sol2_R_TBR): Remove variables.
(sparc_sol2_supply_gregset, sparc_sol2_collect_gregset,
sparc_sol2_supply_fpregset, sparc_sol2_collect_fpregset): Remove
functions.
(sparc32_sol2_gregset): New variable.
(sparc32_sol2_sigtramp_frame_cache): Rename from
sparc_sol2_sigtramp_frame_cache.
(sparc32_sol2_sigtramp_frame_this_id): Rename from
sparc_sol2_sigtramp_frame_this_id.
(sparc32_sol2_sigtramp_frame_prev_register): Rename from
sparc_sol2_sigtramp_frame_prev_register.
(sparc32_sol2_sigtramp_frame_unwind): Rename from
sparc_sol2_sigtramp_frame_unwind.
(sparc32_sol2_sigtramp_frame_sniffer): Rename from
sparc_sol2_sigtramp_frame_sniffer.
(sparc32_sol2_init_abi): Rename from sparc_sol2_init_abi.
(_initialize_sparc_sol2_tdep): Update.
* sparc-linux-tdep.c: New file.
* sparc-nat.o: Replace with new file.
* sparc-linux-nat.c: Remove file.
* config/sparc/linux.mh (XM_FILE, HOST_IPC): Remove.
(NATDEPFILES): Add sparc-sol2-nat.o and core-regset.o.  Remove
sparc-linux-nat.o.
* config/sparc/linux.mt (TDEPFILES): Add sparc-sol2-tdep.o and
sparc-linux-tdep.o.
* config/sparc/nm-linux.h: Don't include "config/nm-svr4.h" and
"solib.h".  Add protection against multiple inclusion.
(KERNEL_U_SIZE): Don't define.
(kernel_u_size): Remove prototype.
* config/sparc/tm-linux.h: Replace with new file.
* configure.tgt: Add sparc-*-linux*.
* configure.host: Add sparc-*-linux*.
* Makefile.in (ALLDEPFILES): Add sparc-linux-tdep.c and
sparc-nat.c.
(sparc-nat.o, sparc-linux-tdep.o): New dependencies.
@
text
@d1 1
a1 1
/* Native-dependent code for SPARC.
d3 2
a4 1
   Copyright 2003 Free Software Foundation, Inc.
d25 2
d29 1
a29 11
/* We need a data structure for use with ptrace(2).  SunOS 4 has
   `struct regs' and `struct fp_status' in <machine/reg.h>.  BSD's
   have `struct reg' and `struct fpreg' in <machine/reg.h>.  GNU/Linux
   has the same structures as SunOS 4, but they're in <asm/reg.h>,
   which is a kernel header.  As a general rule we avoid including
   GNU/Linux kernel headers.  Fortunately GNU/Linux has a `gregset_t'
   and a `fpregset_t' that are equivalent to `struct regs' and `struct
   fp_status' in <sys/ucontext.h>, which is automatically included by
   <signal.h>.  Settling on using the `gregset_t' and `fpregset_t'
   typedefs, providing them for the other systems, therefore solves
   the puzzle.  */
d31 3
d37 3
a39 1
#ifdef HAVE_MACHINE_REG_H
a40 6
#ifdef HAVE_STRUCT_REG
typedef struct reg gregset_t;
typedef struct fpreg fpregset_t;
#else 
typedef struct regs gregset_t;
typedef struct fp_status fpregset_t;
d42 1
a42 3
#endif

#include "sparc-tdep.h"
d44 13
a56 2
/* Register set description.  */
const struct sparc_gregset *sparc_gregset;
d58 2
a59 4
/* Determine whether `gregset_t' contains register REGNUM.  */

int
sparc_gregset_supplies_p (int regnum)
d61 66
a126 13
  /* Integer registers.  */
  if ((regnum >= SPARC_G1_REGNUM && regnum <= SPARC_G7_REGNUM)
      || (regnum >= SPARC_O0_REGNUM && regnum <= SPARC_O7_REGNUM)
      || (regnum >= SPARC_L0_REGNUM && regnum <= SPARC_L7_REGNUM)
      || (regnum >= SPARC_I0_REGNUM && regnum <= SPARC_I7_REGNUM))
    return 1;

  /* Control registers.  */
  if (regnum == SPARC32_PC_REGNUM
      || regnum == SPARC32_NPC_REGNUM
      || regnum == SPARC32_PSR_REGNUM
      || regnum == SPARC32_Y_REGNUM)
    return 1;
d128 17
a144 2
  return 0;
}
d146 20
a165 14
/* Determine whether `fpregset_t' contains register REGNUM.  */

static int
sparc_fpregset_supplies_p (int regnum)
{
  /* Floating-point registers.  */
  if (regnum >= SPARC_F0_REGNUM && regnum <= SPARC_F31_REGNUM)
    return 1;

  /* Control registers.  */
  if (regnum == SPARC32_FSR_REGNUM)
    return 1;

  return 0;
d168 3
a170 2
/* Fetch register REGNUM from the inferior.  If REGNUM is -1, do this
   for all registers (including the floating-point registers).  */
d173 1
a173 1
fetch_inferior_registers (int regnum)
d175 31
a205 1
  struct regcache *regcache = current_regcache;
d207 2
a208 1
  if (regnum == SPARC_G0_REGNUM)
d210 15
a224 2
      regcache_raw_supply (regcache, SPARC_G0_REGNUM, NULL);
      return;
d227 1
a227 1
  if (regnum == -1 || sparc_gregset_supplies_p (regnum))
d229 1
a229 1
      gregset_t regs;
d231 16
a246 3
      if (ptrace (PTRACE_GETREGS, PIDGET (inferior_ptid),
		  (PTRACE_ARG3_TYPE) &regs, 0) == -1)
	perror_with_name ("Couldn't get registers");
a247 3
      sparc_supply_gregset (sparc_gregset, regcache, -1, &regs);
      if (regnum != -1)
	return;
d250 1
a250 1
  if (regnum == -1 || sparc_fpregset_supplies_p (regnum))
d252 2
a253 1
      fpregset_t fpregs;
d255 17
a271 3
      if (ptrace (PTRACE_GETFPREGS, PIDGET (inferior_ptid),
		  (PTRACE_ARG3_TYPE) &fpregs, 0) == -1)
	perror_with_name ("Couldn't get floating point status");
d273 14
a286 1
      sparc_supply_fpregset (regcache, -1, &fpregs);
d290 1
a290 4
void
store_inferior_registers (int regnum)
{
  struct regcache *regcache = current_regcache;
d292 3
a294 3
  if (regnum == -1 || sparc_gregset_supplies_p (regnum))
    {
      gregset_t regs;
d296 3
a298 3
      if (ptrace (PTRACE_GETREGS, PIDGET (inferior_ptid),
		  (PTRACE_ARG3_TYPE) &regs, 0) == -1)
	perror_with_name ("Couldn't get registers");
d300 1
a300 1
      sparc_collect_gregset (sparc_gregset, regcache, regnum, &regs);
d302 4
a305 3
      if (ptrace (PTRACE_SETREGS, PIDGET (inferior_ptid),
		  (PTRACE_ARG3_TYPE) &regs, 0) == -1)
	perror_with_name ("Couldn't write registers");
d307 2
a308 5
      /* Deal with the stack regs.  */
      if (regnum == -1 || regnum == SPARC_SP_REGNUM
	  || (regnum >= SPARC_L0_REGNUM && regnum <= SPARC_I7_REGNUM))
	{
	  ULONGEST sp;
d310 1
a310 3
	  regcache_cooked_read_unsigned (regcache, SPARC_SP_REGNUM, &sp);
	  sparc_collect_rwindow (regcache, sp, regnum);
	}
d312 30
a341 2
      if (regnum != -1)
	return;
d343 1
a343 2

  if (regnum == -1 || sparc_fpregset_supplies_p (regnum))
a344 1
      fpregset_t fpregs;
d346 1
a346 3
      if (ptrace (PTRACE_GETFPREGS, PIDGET (inferior_ptid),
		  (PTRACE_ARG3_TYPE) &fpregs, 0) == -1)
	perror_with_name ("Couldn't get floating-point registers");
d348 12
a359 1
      sparc_collect_fpregset (regcache, regnum, &fpregs);
d361 4
a364 7
      if (ptrace (PTRACE_SETFPREGS, PIDGET (inferior_ptid),
		  (PTRACE_ARG3_TYPE) &fpregs, 0) == -1)
	perror_with_name ("Couldn't write floating-point registers");

      if (regnum != -1)
	return;
    }
d368 11
a378 2
/* Provide a prototype to silence -Wmissing-prototypes.  */
void _initialize_sparc_nat (void);
d381 1
a381 1
_initialize_sparc_nat (void)
d383 1
a383 3
  /* Deafult to using SunOS 4 register sets.  */
  if (sparc_gregset == NULL)
    sparc_gregset = &sparc32_sunos4_gregset;
@


1.21.2.2
log
@* sparc-tdep.h (struct sparc_gregset): Add r_y_size member.
(sparc32_supply_gregset): Renamed from sparc_supply_gregset.
(sparc32_collect_gregset): Renamed from sparc_collect_gregset.
(sparc32_supply_fpregset): Renamed from sparc_supply_fpregset.
(sparc32_collect_fpregset): Renamed from sparc_collect_fpregset.
* sparc-tdep.c (sparc32_supply_gregset): Renamed from
sparc_supply_gregset.
(sparc32_collect_gregset): Renamed from sparc_collect_gregset.
(sparc32_supply_fpregset): Renamed from sparc_supply_fpregset.
(sparc32_collect_fpregset): Renamed from sparc_collect_fpregset.
* sparc-linux-tdep.c: Include "solib-svr4.h".
(sparc32_linux_svr4_fetch_link_map_offsets): New function.
(sparc32_linux_init_abi): Set solib_svr4_fetch_link_map_offsets.
* sparc-nat.h: New file.
* sparc-nat.c: Add some more comments.  Include "sparc-nat.h".
(PTRACE_GETREGS): Define to PT_GETREGS if not already defined.
(PTRACE_SETREGS, PTRACE_GETFPREGS, PTRACE_SETFPREGS): Likewise.
(sparc_supply_gregset, sparc_collect_gregset,
sparc_supply_fpregset, sparc_collect_fpregset,
sparc_gregset_supplies_p, sparc_fpregset_supplies_p): New function
variables.
(sparc32_gregset_supplies_p): Rename from
sparc_gregset_supplies_p.
(sparc32_fpregset_supplies_p): Rename from
sparc_fpregset_supplies_p.
(fetch_inferior_registers): Deal with GNU/Linux LWPs.
(store_inferior_registers): Likewise.  Work around peculiarity in
NetBSD when writing the floating-point registers.
(_initialize_sparc_nat): Initialize sparc_supply_gregset,
sparc_collect_gregset, sparc_supply_fpregset,
sparc_collect_fpregset, sparc_gregset_supplies_p and
sparc_fpregset_supplies_p if necessary.
* sparc-sol2-nat.c (supply_gregset): Call sparc32_supply_gregset
instead of sparc_supply_gregset.
(supply_fpregset, fill_gregset, fill_fpregset): Likewise.
@
text
@d26 1
a26 16
#include <signal.h>
#include "gdb_string.h"
#include <sys/ptrace.h>
#include "gdb_wait.h"
#ifdef HAVE_MACHINE_REG_H
#include <machine/reg.h>
#endif

#include "sparc-tdep.h"
#include "sparc-nat.h"

/* With some trickery we can use the code in this file for most (if
   not all) ptrace(2) based SPARC systems, which includes SunOS 4,
   Linux and the various SPARC BSD's.

   First, we need a data structure for use with ptrace(2).  SunOS has
d38 3
d42 1
d52 1
a52 18
/* Second, we need to remap the BSD ptrace(2) requests to their SunOS
   equivalents.  GNU/Linux already follows SunOS here.  */

#ifndef PTRACE_GETREGS
#define PTRACE_GETREGS PT_GETREGS
#endif

#ifndef PTRACE_SETREGS
#define PTRACE_SETREGS PT_SETREGS
#endif

#ifndef PTRACE_GETFPREGS
#define PTRACE_GETFPREGS PT_GETFPREGS
#endif

#ifndef PTRACE_SETFPREGS
#define PTRACE_SETFPREGS PT_SETFPREGS
#endif
a55 8
void (*sparc_supply_gregset) (const struct sparc_gregset *,
			      struct regcache *, int , const void *);
void (*sparc_collect_gregset) (const struct sparc_gregset *,
			       const struct regcache *, int, void *);
void (*sparc_supply_fpregset) (struct regcache *, int , const void *);
void (*sparc_collect_fpregset) (const struct regcache *, int , void *);
int (*sparc_gregset_supplies_p) (int);
int (*sparc_fpregset_supplies_p) (int);
d60 1
a60 1
sparc32_gregset_supplies_p (int regnum)
d81 2
a82 2
int
sparc32_fpregset_supplies_p (int regnum)
a101 18
  int pid;

  /* NOTE: cagney/2002-12-03: This code assumes that the currently
     selected light weight processes' registers can be written
     directly into the selected thread's register cache.  This works
     fine when given an 1:1 LWP:thread model (such as found on
     GNU/Linux) but will, likely, have problems when used on an N:1
     (userland threads) or N:M (userland multiple LWP) model.  In the
     case of the latter two, the LWP's registers do not necessarily
     belong to the selected thread (the LWP could be in the middle of
     executing the thread switch code).

     These functions should instead be paramaterized with an explicit
     object (struct regcache, struct thread_info?) into which the LWPs
     registers can be written.  */
  pid = TIDGET (inferior_ptid);
  if (pid == 0)
    pid = PIDGET (inferior_ptid);
d113 2
a114 1
      if (ptrace (PTRACE_GETREGS, pid, (PTRACE_ARG3_TYPE) &regs, 0) == -1)
d126 2
a127 1
      if (ptrace (PTRACE_GETFPREGS, pid, (PTRACE_ARG3_TYPE) &fpregs, 0) == -1)
a137 7
  int pid;

  /* NOTE: cagney/2002-12-02: See comment in fetch_inferior_registers
     about threaded assumptions.  */
  pid = TIDGET (inferior_ptid);
  if (pid == 0)
    pid = PIDGET (inferior_ptid);
d143 2
a144 1
      if (ptrace (PTRACE_GETREGS, pid, (PTRACE_ARG3_TYPE) &regs, 0) == -1)
d149 2
a150 1
      if (ptrace (PTRACE_SETREGS, pid, (PTRACE_ARG3_TYPE) &regs, 0) == -1)
d169 1
a169 1
      fpregset_t fpregs, saved_fpregs;
d171 2
a172 1
      if (ptrace (PTRACE_GETFPREGS, pid, (PTRACE_ARG3_TYPE) &fpregs, 0) == -1)
a174 1
      memcpy (&saved_fpregs, &fpregs, sizeof (fpregs));
d177 3
a179 10
      /* Writing the floating-point registers will fail on NetBSD with
	 EINVAL if the inferior process doesn't have an FPU state
	 (i.e. if it didn't use the FPU yet).  Therefore we don't try
	 to write the registers if nothing changed.  */
      if (memcmp (&saved_fpregs, &fpregs, sizeof (fpregs)) != 0)
	{
	  if (ptrace (PTRACE_SETFPREGS, pid,
		      (PTRACE_ARG3_TYPE) &fpregs, 0) == -1)
	    perror_with_name ("Couldn't write floating-point registers");
	}
a195 12
  if (sparc_supply_gregset == NULL)
    sparc_supply_gregset = sparc32_supply_gregset;
  if (sparc_collect_gregset == NULL)
    sparc_collect_gregset = sparc32_collect_gregset;
  if (sparc_supply_fpregset == NULL)
    sparc_supply_fpregset = sparc32_supply_fpregset;
  if (sparc_collect_fpregset == NULL)
    sparc_collect_fpregset = sparc32_collect_fpregset;
  if (sparc_gregset_supplies_p == NULL)
    sparc_gregset_supplies_p = sparc32_gregset_supplies_p;
  if (sparc_fpregset_supplies_p == NULL)
    sparc_fpregset_supplies_p = sparc32_fpregset_supplies_p;
@


1.20
log
@2003-09-17  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (DEPRECATED_REGISTER_BYTE): Rename REGISTER_BYTE.
	* gdbarch.h, gdbarch.c: Regenerate.
	* arm-linux-tdep.c, core-sol2.c, cris-tdep.c: Update.
	* d10v-tdep.c, frame.c: Update.
	* hppa-tdep.c, hppab-nat.c, hppah-nat.c, hppam3-nat.c: Update.
	* hpux-thread.c, i386gnu-nat.c, ia64-aix-nat.c: Update.
	* ia64-linux-nat.c, irix5-nat.c, lynx-nat.c, m68knbsd-nat.c: Update.
	* mcore-tdep.c, mips-linux-tdep.c, mips-tdep.c: Update.
	* mipsv4-nat.c, mn10300-tdep.c, ns32k-tdep.c: Update.
	* ns32knbsd-nat.c, ppc-bdm.c, regcache.c, remote-sds.c: Update.
	* remote-vx68.c, remote-vxmips.c, remote-vxsparc.c: Update.
	* remote.c, rs6000-tdep.c, s390-tdep.c, sh64-tdep.c: Update.
	* sparc-nat.c, sparc-tdep.c, sun3-nat.c, v850-tdep.c: Update.
	* v850ice.c, vax-tdep.c, xstormy16-tdep.c: Update.
	* config/m68k/tm-cisco.h, config/m68k/tm-delta68.h: Update.
	* config/pa/nm-hppah.h: Update.

2003-09-17  Andrew Cagney  <cagney@@redhat.com>

	* mi/mi-main.c: Rename REGISTER_BYTE to DEPRECATED_REGISTER_BYTE.
@
text
@d111 1
a111 1
      *(int *) &deprecated_registers[DEPRECATED_REGISTER_BYTE (NPC_REGNUM)]
d120 1
a120 1
      deprecated_register_valid[NPC_REGNUM] = 1;
d264 1
a264 1
	*(int *) &deprecated_registers[DEPRECATED_REGISTER_BYTE (NPC_REGNUM)];
d321 1
a321 1
      *(int *) &deprecated_registers[DEPRECATED_REGISTER_BYTE (NPC_REGNUM)] = gregs->r_npc;
@


1.19
log
@	* Makefile.in (sparc_tdep_h): New.
	(sparc-linux-nat.o, sparc-nat.o, sparc-tdep.o, sparc64nbsd-nat.o)
	(sparcnbsd-nat.o, sparcnbsd-tdep.o): Depend on $(sparc_tdep_h).
	* sparc-linux-nat.c: Include "sparc-tdep.h".
	* sparc-nat.c: Likewise.
	* sparc-tdep.c: Likewise.
	* sparc64nbsd-nat.c: Likewise.
	* sparcnbsd-nat.c: Likewise.
	* sparcnbsd-tdep.c: Likewise.
	* sparc-tdep.h: New file.
	* config/sparc/tm-sparc.h: Remove prototypes for sparc_y_regnum
	and sparc_npc_regnum.
@
text
@d104 2
a105 2
      deprecated_registers[REGISTER_BYTE (0)] = 0;
      memcpy (&deprecated_registers[REGISTER_BYTE (1)],
d107 1
a107 1
      *(int *) &deprecated_registers[REGISTER_BYTE (PS_REGNUM)]
d109 1
a109 1
      *(int *) &deprecated_registers[REGISTER_BYTE (PC_REGNUM)]
d111 1
a111 1
      *(int *) &deprecated_registers[REGISTER_BYTE (NPC_REGNUM)]
d113 1
a113 1
      *(int *) &deprecated_registers[REGISTER_BYTE (Y_REGNUM)] = inferior_registers.r_y;
d137 1
a137 1
      memcpy (&deprecated_registers[REGISTER_BYTE (FP0_REGNUM)],
d139 1
a139 1
      memcpy (&deprecated_registers[REGISTER_BYTE (FPS_REGNUM)],
d150 2
a151 2
      CORE_ADDR sp = *(unsigned int *) & deprecated_registers[REGISTER_BYTE (SP_REGNUM)];
      target_read_memory (sp, &deprecated_registers[REGISTER_BYTE (L0_REGNUM)],
d158 2
a159 2
      CORE_ADDR sp = *(unsigned int *) & deprecated_registers[REGISTER_BYTE (SP_REGNUM)];
      i = REGISTER_BYTE (regno);
d162 1
a162 1
      target_read_memory (sp + i - REGISTER_BYTE (L0_REGNUM),
d229 1
a229 1
      CORE_ADDR sp = *(unsigned int *) & deprecated_registers[REGISTER_BYTE (SP_REGNUM)];
d236 1
a236 1
			       &deprecated_registers[REGISTER_BYTE (L0_REGNUM)],
d243 2
a244 2
	  target_write_memory (sp + REGISTER_BYTE (regno) - REGISTER_BYTE (L0_REGNUM),
			       &deprecated_registers[REGISTER_BYTE (regno)],
d256 1
a256 1
	      &deprecated_registers[REGISTER_BYTE (G1_REGNUM)],
d260 1
a260 1
	*(int *) &deprecated_registers[REGISTER_BYTE (PS_REGNUM)];
d262 1
a262 1
	*(int *) &deprecated_registers[REGISTER_BYTE (PC_REGNUM)];
d264 1
a264 1
	*(int *) &deprecated_registers[REGISTER_BYTE (NPC_REGNUM)];
d266 1
a266 1
	*(int *) &deprecated_registers[REGISTER_BYTE (Y_REGNUM)];
d278 1
a278 1
	      &deprecated_registers[REGISTER_BYTE (FP0_REGNUM)],
d281 1
a281 1
	      &deprecated_registers[REGISTER_BYTE (FPS_REGNUM)],
d314 1
a314 1
      *(int *) &deprecated_registers[REGISTER_BYTE (0)] = 0;
d317 1
a317 1
      memcpy (&deprecated_registers[REGISTER_BYTE (G1_REGNUM)], &gregs->r_g1,
d319 4
a322 4
      *(int *) &deprecated_registers[REGISTER_BYTE (PS_REGNUM)] = gregs->r_ps;
      *(int *) &deprecated_registers[REGISTER_BYTE (PC_REGNUM)] = gregs->r_pc;
      *(int *) &deprecated_registers[REGISTER_BYTE (NPC_REGNUM)] = gregs->r_npc;
      *(int *) &deprecated_registers[REGISTER_BYTE (Y_REGNUM)] = gregs->r_y;
d332 1
a332 1
	sp = *(int *) &deprecated_registers[REGISTER_BYTE (SP_REGNUM)];
d334 1
a334 1
				     &deprecated_registers[REGISTER_BYTE (L0_REGNUM)],
d351 1
a351 1
	  memcpy (&deprecated_registers[REGISTER_BYTE (FP0_REGNUM)],
d353 1
a353 1
	  memcpy (&deprecated_registers[REGISTER_BYTE (FPS_REGNUM)],
@


1.18
log
@	* sparc-nat.c (fetch_inferior_registers): Correct
	a reference to "registers".
@
text
@d29 2
@


1.18.2.1
log
@2003-07-07  Daniel Jacobowitz  <drow@@mvista.com>

	* Makefile.in (sparc_tdep_h): New.
	(sparc-linux-nat.o, sparc-nat.o, sparc-tdep.o, sparc64nbsd-nat.o)
	(sparcnbsd-nat.o, sparcnbsd-tdep.o): Depend on $(sparc_tdep_h).
	* sparc-linux-nat.c: Include "sparc-tdep.h".
	* sparc-nat.c: Likewise.
	* sparc-tdep.c: Likewise.
	* sparc64nbsd-nat.c: Likewise.
	* sparcnbsd-nat.c: Likewise.
	* sparcnbsd-tdep.c: Likewise.
	* sparc-tdep.h: New file.
	* config/sparc/tm-sparc.h: Remove prototypes for sparc_y_regnum
	and sparc_npc_regnum.
@
text
@a28 2
#include "sparc-tdep.h"

@


1.17
log
@2003-02-06  Andrew Cagney  <ac131313@@redhat.com>

	* Makefile.in (symm-nat.o): Update dependencies.
	(sparc-nat.o, procfs.o, proc-api.o, ppc-linux-nat.o): Ditto.
	(lynx-nat.o, ia64-linux-nat.): Ditto.
	* symm-nat.c, sparc-nat.c, procfs.c, proc-api.c: Include
	"gdb_wait.h" instead of <wait.h> or <sys/wait.h>.
	* ppc-linux-nat.c, lynx-nat.c, ia64-linux-nat.c: Ditto.
@
text
@d111 1
a111 1
      *(int *) &registers[REGISTER_BYTE (Y_REGNUM)] = inferior_registers.r_y;
@


1.16
log
@2002-12-03  Andrew Cagney  <ac131313@@redhat.com>

	* sparc-nat.c (fetch_inferior_registers)
	(store_inferior_registers): Add comment on problem of LWP vs
	threads.

	From 2002-11-21 Daniel Jacobowitz <drow@@mvista.com>
	* lin-lwp.c (lin_lwp_fetch_registers): Remove.
	(lin_lwp_store_registers): Remove.
	(init_lin_lwp_ops): Use fetch_inferior_registers
	and store_inferior_registers directly.
	* sparc-nat.c (fetch_inferior_registers): Honor LWP ID.
	(store_inferior_registers): Likewise.
	Fix PR gdb/725.
@
text
@d2 3
a4 3
   Copyright 1989, 1992, 1993, 1994, 1996, 1997, 1998, 1999, 2000, 2001,
   2002
   Free Software Foundation, Inc.
d34 1
a34 1
#include <sys/wait.h>
@


1.15
log
@2002-11-14  Andrew Cagney  <ac131313@@redhat.com>

	* regcache.h (deprecated_registers): Rename registers.
	* a68v-nat.c, alpha-nat.c, arch-utils.c, core-sol2.c: Update.
	* hp300ux-nat.c, hppab-nat.c, hppah-nat.c: Update.
	* hppam3-nat.c, hpux-thread.c, i386gnu-nat.c: Update.
	* ia64-aix-nat.c, ia64-linux-nat.c, ia64-tdep.c: Update.
	* irix4-nat.c, irix5-nat.c, lynx-nat.c, m68k-tdep.c: Update.
	* m68knbsd-nat.c, mips-linux-tdep.c, mipsm3-nat.c: Update.
	* mipsv4-nat.c, ns32knbsd-nat.c, ppc-bdm.c: Update.
	* ppc-sysv-tdep.c, ptx4-nat.c, regcache.c, remote-es.c: Update.
	* remote-sds.c, remote-vx68.c, remote-vxmips.c: Update.
	* remote-vxsparc.c, rs6000-tdep.c, sol-thread.c: Update.
	* sparc-nat.c, sparc-tdep.c, sun3-nat.c, symm-nat.c: Update.
	* v850ice.c: Update.
@
text
@d2 2
a3 1
   Copyright 1989, 1992, 1993, 1994, 1996, 1997, 1998, 1999, 2000, 2001
d62 19
d98 1
a98 1
      if (0 != ptrace (PTRACE_GETREGS, PIDGET (inferior_ptid),
d131 1
a131 1
      if (0 != ptrace (PTRACE_GETFPREGS, PIDGET (inferior_ptid),
d176 7
d266 1
a266 1
      if (0 != ptrace (PTRACE_SETREGS, PIDGET (inferior_ptid),
d282 1
a282 1
	  ptrace (PTRACE_SETFPREGS, PIDGET (inferior_ptid),
@


1.14
log
@2002-11-06  Andrew Cagney  <ac131313@@redhat.com>

	* regcache.h (deprecated_register_valid): Rename register_valid.
	* regcache.c: Update.
	* ia64-aix-nat.c: Update.
	* i386gnu-nat.c: Update.
	* alpha-nat.c: Update.
	* sparc-nat.c: Update.
	* lynx-nat.c: Update.
	* remote-mips.c: Update.
@
text
@d82 9
a90 6
      registers[REGISTER_BYTE (0)] = 0;
      memcpy (&registers[REGISTER_BYTE (1)], &inferior_registers.r_g1,
	      15 * REGISTER_RAW_SIZE (G0_REGNUM));
      *(int *) &registers[REGISTER_BYTE (PS_REGNUM)] = inferior_registers.r_ps;
      *(int *) &registers[REGISTER_BYTE (PC_REGNUM)] = inferior_registers.r_pc;
      *(int *) &registers[REGISTER_BYTE (NPC_REGNUM)] = inferior_registers.r_npc;
d115 4
a118 5
      memcpy (&registers[REGISTER_BYTE (FP0_REGNUM)], &inferior_fp_registers,
	      sizeof inferior_fp_registers.fpu_fr);
      memcpy (&registers[REGISTER_BYTE (FPS_REGNUM)],
	      &inferior_fp_registers.Fpu_fsr,
	      sizeof (FPU_FSR_TYPE));
d128 2
a129 2
      CORE_ADDR sp = *(unsigned int *) & registers[REGISTER_BYTE (SP_REGNUM)];
      target_read_memory (sp, &registers[REGISTER_BYTE (L0_REGNUM)],
d136 1
a136 1
      CORE_ADDR sp = *(unsigned int *) & registers[REGISTER_BYTE (SP_REGNUM)];
d141 1
a141 1
			  &registers[i], REGISTER_RAW_SIZE (regno));
d200 1
a200 1
      CORE_ADDR sp = *(unsigned int *) & registers[REGISTER_BYTE (SP_REGNUM)];
d207 1
a207 1
			       &registers[REGISTER_BYTE (L0_REGNUM)],
d215 1
a215 1
			       &registers[REGISTER_BYTE (regno)],
d226 2
a227 1
      memcpy (&inferior_registers.r_g1, &registers[REGISTER_BYTE (G1_REGNUM)],
d231 1
a231 1
	*(int *) &registers[REGISTER_BYTE (PS_REGNUM)];
d233 1
a233 1
	*(int *) &registers[REGISTER_BYTE (PC_REGNUM)];
d235 1
a235 1
	*(int *) &registers[REGISTER_BYTE (NPC_REGNUM)];
d237 1
a237 1
	*(int *) &registers[REGISTER_BYTE (Y_REGNUM)];
d248 2
a249 1
      memcpy (&inferior_fp_registers, &registers[REGISTER_BYTE (FP0_REGNUM)],
d252 2
a253 1
	      &registers[REGISTER_BYTE (FPS_REGNUM)], sizeof (FPU_FSR_TYPE));
d285 1
a285 1
      *(int *) &registers[REGISTER_BYTE (0)] = 0;
d288 1
a288 1
      memcpy (&registers[REGISTER_BYTE (G1_REGNUM)], &gregs->r_g1,
d290 4
a293 4
      *(int *) &registers[REGISTER_BYTE (PS_REGNUM)] = gregs->r_ps;
      *(int *) &registers[REGISTER_BYTE (PC_REGNUM)] = gregs->r_pc;
      *(int *) &registers[REGISTER_BYTE (NPC_REGNUM)] = gregs->r_npc;
      *(int *) &registers[REGISTER_BYTE (Y_REGNUM)] = gregs->r_y;
d303 3
a305 2
	sp = *(int *) &registers[REGISTER_BYTE (SP_REGNUM)];
	if (0 != target_read_memory (sp, &registers[REGISTER_BYTE (L0_REGNUM)],
d322 4
a325 4
	  memcpy (&registers[REGISTER_BYTE (FP0_REGNUM)], fpuregs->fpu_regs,
		  sizeof (fpuregs->fpu_regs));
	  memcpy (&registers[REGISTER_BYTE (FPS_REGNUM)], &fpuregs->fpu_fsr,
		  sizeof (FPU_FSR_TYPE));
@


1.13
log
@2002-04-20  David S. Miller  <davem@@redhat.com>

	* sparc-nat.c (store-inferior_registers): Fix ambiguous else.
@
text
@d76 1
a76 1
      || (!register_valid[SP_REGNUM] && regno < I7_REGNUM))
d91 5
a95 5
	register_valid[i] = 1;
      register_valid[Y_REGNUM] = 1;
      register_valid[PS_REGNUM] = 1;
      register_valid[PC_REGNUM] = 1;
      register_valid[NPC_REGNUM] = 1;
d98 3
a100 3
      register_valid[WIM_REGNUM] = 1;	/* Not true yet, FIXME */
      register_valid[TBR_REGNUM] = 1;	/* Not true yet, FIXME */
      register_valid[CPS_REGNUM] = 1;	/* Not true yet, FIXME */
d118 2
a119 2
	register_valid[i] = 1;
      register_valid[FPS_REGNUM] = 1;
d130 1
a130 1
	register_valid[i] = 1;
d136 1
a136 1
      if (register_valid[regno])
d140 1
a140 1
      register_valid[regno] = 1;
d202 1
a202 1
	  if (!register_valid[L0_REGNUM + 5])
d210 1
a210 1
	  if (!register_valid[regno])
d221 1
a221 1
      if (!register_valid[G1_REGNUM])
d243 1
a243 1
      if (!register_valid[FP0_REGNUM + 9])
@


1.13.16.1
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@d2 2
a3 3

   Copyright 1989, 1992, 1993, 1994, 1996, 1997, 1998, 1999, 2000,
   2001, 2002, 2003 Free Software Foundation, Inc.
a27 2
#include "sparc-tdep.h"

d33 1
a33 1
#include "gdb_wait.h"
a60 19
  int fetch_pid;

  /* NOTE: cagney/2002-12-03: This code assumes that the currently
     selected light weight processes' registers can be written
     directly into the selected thread's register cache.  This works
     fine when given an 1:1 LWP:thread model (such as found on
     GNU/Linux) but will, likely, have problems when used on an N:1
     (userland threads) or N:M (userland multiple LWP) model.  In the
     case of the latter two, the LWP's registers do not necessarily
     belong to the selected thread (the LWP could be in the middle of
     executing the thread switch code).

     These functions should instead be paramaterized with an explicit
     object (struct regcache, struct thread_info?) into which the LWPs
     registers can be written.  */

  fetch_pid = TIDGET (inferior_ptid);
  if (fetch_pid == 0)
    fetch_pid = PIDGET (inferior_ptid);
d76 1
a76 1
      || (!deprecated_register_valid[SP_REGNUM] && regno < I7_REGNUM))
d78 1
a78 1
      if (0 != ptrace (PTRACE_GETREGS, fetch_pid,
d82 7
a88 10
      deprecated_registers[DEPRECATED_REGISTER_BYTE (0)] = 0;
      memcpy (&deprecated_registers[DEPRECATED_REGISTER_BYTE (1)],
	      &inferior_registers.r_g1, 15 * DEPRECATED_REGISTER_RAW_SIZE (G0_REGNUM));
      *(int *) &deprecated_registers[DEPRECATED_REGISTER_BYTE (PS_REGNUM)]
	= inferior_registers.r_ps;
      *(int *) &deprecated_registers[DEPRECATED_REGISTER_BYTE (PC_REGNUM)]
	= inferior_registers.r_pc;
      *(int *) &deprecated_registers[DEPRECATED_REGISTER_BYTE (DEPRECATED_NPC_REGNUM)]
	= inferior_registers.r_npc;
      *(int *) &deprecated_registers[DEPRECATED_REGISTER_BYTE (Y_REGNUM)] = inferior_registers.r_y;
d91 5
a95 5
	deprecated_register_valid[i] = 1;
      deprecated_register_valid[Y_REGNUM] = 1;
      deprecated_register_valid[PS_REGNUM] = 1;
      deprecated_register_valid[PC_REGNUM] = 1;
      deprecated_register_valid[DEPRECATED_NPC_REGNUM] = 1;
d98 3
a100 3
      deprecated_register_valid[WIM_REGNUM] = 1;	/* Not true yet, FIXME */
      deprecated_register_valid[TBR_REGNUM] = 1;	/* Not true yet, FIXME */
      deprecated_register_valid[CPS_REGNUM] = 1;	/* Not true yet, FIXME */
d108 1
a108 1
      if (0 != ptrace (PTRACE_GETFPREGS, fetch_pid,
d112 5
a116 4
      memcpy (&deprecated_registers[DEPRECATED_REGISTER_BYTE (FP0_REGNUM)],
	      &inferior_fp_registers, sizeof inferior_fp_registers.fpu_fr);
      memcpy (&deprecated_registers[DEPRECATED_REGISTER_BYTE (FPS_REGNUM)],
	      &inferior_fp_registers.Fpu_fsr, sizeof (FPU_FSR_TYPE));
d118 2
a119 2
	deprecated_register_valid[i] = 1;
      deprecated_register_valid[FPS_REGNUM] = 1;
d126 3
a128 3
      CORE_ADDR sp = *(unsigned int *) & deprecated_registers[DEPRECATED_REGISTER_BYTE (SP_REGNUM)];
      target_read_memory (sp, &deprecated_registers[DEPRECATED_REGISTER_BYTE (L0_REGNUM)],
			  16 * DEPRECATED_REGISTER_RAW_SIZE (L0_REGNUM));
d130 1
a130 1
	deprecated_register_valid[i] = 1;
d134 3
a136 3
      CORE_ADDR sp = *(unsigned int *) & deprecated_registers[DEPRECATED_REGISTER_BYTE (SP_REGNUM)];
      i = DEPRECATED_REGISTER_BYTE (regno);
      if (deprecated_register_valid[regno])
d138 3
a140 3
      target_read_memory (sp + i - DEPRECATED_REGISTER_BYTE (L0_REGNUM),
			  &deprecated_registers[i], DEPRECATED_REGISTER_RAW_SIZE (regno));
      deprecated_register_valid[regno] = 1;
a153 7
  int store_pid;

  /* NOTE: cagney/2002-12-02: See comment in fetch_inferior_registers
     about threaded assumptions.  */
  store_pid = TIDGET (inferior_ptid);
  if (store_pid == 0)
    store_pid = PIDGET (inferior_ptid);
d198 1
a198 1
      CORE_ADDR sp = *(unsigned int *) & deprecated_registers[DEPRECATED_REGISTER_BYTE (SP_REGNUM)];
d202 1
a202 1
	  if (!deprecated_register_valid[L0_REGNUM + 5])
d205 2
a206 2
			       &deprecated_registers[DEPRECATED_REGISTER_BYTE (L0_REGNUM)],
			       16 * DEPRECATED_REGISTER_RAW_SIZE (L0_REGNUM));
d210 1
a210 1
	  if (!deprecated_register_valid[regno])
d212 3
a214 3
	  target_write_memory (sp + DEPRECATED_REGISTER_BYTE (regno) - DEPRECATED_REGISTER_BYTE (L0_REGNUM),
			       &deprecated_registers[DEPRECATED_REGISTER_BYTE (regno)],
			       DEPRECATED_REGISTER_RAW_SIZE (regno));
d221 1
a221 1
      if (!deprecated_register_valid[G1_REGNUM])
d224 2
a225 3
      memcpy (&inferior_registers.r_g1,
	      &deprecated_registers[DEPRECATED_REGISTER_BYTE (G1_REGNUM)],
	      15 * DEPRECATED_REGISTER_RAW_SIZE (G1_REGNUM));
d228 1
a228 1
	*(int *) &deprecated_registers[DEPRECATED_REGISTER_BYTE (PS_REGNUM)];
d230 1
a230 1
	*(int *) &deprecated_registers[DEPRECATED_REGISTER_BYTE (PC_REGNUM)];
d232 1
a232 1
	*(int *) &deprecated_registers[DEPRECATED_REGISTER_BYTE (DEPRECATED_NPC_REGNUM)];
d234 1
a234 1
	*(int *) &deprecated_registers[DEPRECATED_REGISTER_BYTE (Y_REGNUM)];
d236 1
a236 1
      if (0 != ptrace (PTRACE_SETREGS, store_pid,
d243 1
a243 1
      if (!deprecated_register_valid[FP0_REGNUM + 9])
d245 1
a245 2
      memcpy (&inferior_fp_registers,
	      &deprecated_registers[DEPRECATED_REGISTER_BYTE (FP0_REGNUM)],
d248 1
a248 2
	      &deprecated_registers[DEPRECATED_REGISTER_BYTE (FPS_REGNUM)],
	      sizeof (FPU_FSR_TYPE));
d250 1
a250 1
	  ptrace (PTRACE_SETFPREGS, store_pid,
d280 1
a280 1
      *(int *) &deprecated_registers[DEPRECATED_REGISTER_BYTE (0)] = 0;
d283 6
a288 6
      memcpy (&deprecated_registers[DEPRECATED_REGISTER_BYTE (G1_REGNUM)], &gregs->r_g1,
	      15 * DEPRECATED_REGISTER_RAW_SIZE (G1_REGNUM));
      *(int *) &deprecated_registers[DEPRECATED_REGISTER_BYTE (PS_REGNUM)] = gregs->r_ps;
      *(int *) &deprecated_registers[DEPRECATED_REGISTER_BYTE (PC_REGNUM)] = gregs->r_pc;
      *(int *) &deprecated_registers[DEPRECATED_REGISTER_BYTE (DEPRECATED_NPC_REGNUM)] = gregs->r_npc;
      *(int *) &deprecated_registers[DEPRECATED_REGISTER_BYTE (Y_REGNUM)] = gregs->r_y;
d298 3
a300 4
	sp = *(int *) &deprecated_registers[DEPRECATED_REGISTER_BYTE (SP_REGNUM)];
	if (0 != target_read_memory (sp,
				     &deprecated_registers[DEPRECATED_REGISTER_BYTE (L0_REGNUM)],
				     16 * DEPRECATED_REGISTER_RAW_SIZE (L0_REGNUM)))
d316 4
a319 4
	  memcpy (&deprecated_registers[DEPRECATED_REGISTER_BYTE (FP0_REGNUM)],
		  fpuregs->fpu_regs, sizeof (fpuregs->fpu_regs));
	  memcpy (&deprecated_registers[DEPRECATED_REGISTER_BYTE (FPS_REGNUM)],
		  &fpuregs->fpu_fsr, sizeof (FPU_FSR_TYPE));
@


1.13.16.2
log
@Merge mainline to branch.  GDB is broken until I update cp-names.y.
@
text
@d1 1
a1 1
/* Native-dependent code for SPARC.
d3 2
a4 1
   Copyright 2003, 2004 Free Software Foundation, Inc.
d25 2
d29 5
a34 1
#include "gdb_string.h"
d37 3
a39 1
#ifdef HAVE_MACHINE_REG_H
d42 1
d44 13
a56 99
#include "sparc-tdep.h"
#include "sparc-nat.h"

/* With some trickery we can use the code in this file for most (if
   not all) ptrace(2) based SPARC systems, which includes SunOS 4,
   GNU/Linux and the various SPARC BSD's.

   First, we need a data structure for use with ptrace(2).  SunOS has
   `struct regs' and `struct fp_status' in <machine/reg.h>.  BSD's
   have `struct reg' and `struct fpreg' in <machine/reg.h>.  GNU/Linux
   has the same structures as SunOS 4, but they're in <asm/reg.h>,
   which is a kernel header.  As a general rule we avoid including
   GNU/Linux kernel headers.  Fortunately GNU/Linux has a `gregset_t'
   and a `fpregset_t' that are equivalent to `struct regs' and `struct
   fp_status' in <sys/ucontext.h>, which is automatically included by
   <signal.h>.  Settling on using the `gregset_t' and `fpregset_t'
   typedefs, providing them for the other systems, therefore solves
   the puzzle.  */

#ifdef HAVE_MACHINE_REG_H
#ifdef HAVE_STRUCT_REG
typedef struct reg gregset_t;
typedef struct fpreg fpregset_t;
#else 
typedef struct regs gregset_t;
typedef struct fp_status fpregset_t;
#endif
#endif

/* Second, we need to remap the BSD ptrace(2) requests to their SunOS
   equivalents.  GNU/Linux already follows SunOS here.  */

#ifndef PTRACE_GETREGS
#define PTRACE_GETREGS PT_GETREGS
#endif

#ifndef PTRACE_SETREGS
#define PTRACE_SETREGS PT_SETREGS
#endif

#ifndef PTRACE_GETFPREGS
#define PTRACE_GETFPREGS PT_GETFPREGS
#endif

#ifndef PTRACE_SETFPREGS
#define PTRACE_SETFPREGS PT_SETFPREGS
#endif

/* Register set description.  */
const struct sparc_gregset *sparc_gregset;
void (*sparc_supply_gregset) (const struct sparc_gregset *,
			      struct regcache *, int , const void *);
void (*sparc_collect_gregset) (const struct sparc_gregset *,
			       const struct regcache *, int, void *);
void (*sparc_supply_fpregset) (struct regcache *, int , const void *);
void (*sparc_collect_fpregset) (const struct regcache *, int , void *);
int (*sparc_gregset_supplies_p) (int);
int (*sparc_fpregset_supplies_p) (int);

/* Determine whether `gregset_t' contains register REGNUM.  */

int
sparc32_gregset_supplies_p (int regnum)
{
  /* Integer registers.  */
  if ((regnum >= SPARC_G1_REGNUM && regnum <= SPARC_G7_REGNUM)
      || (regnum >= SPARC_O0_REGNUM && regnum <= SPARC_O7_REGNUM)
      || (regnum >= SPARC_L0_REGNUM && regnum <= SPARC_L7_REGNUM)
      || (regnum >= SPARC_I0_REGNUM && regnum <= SPARC_I7_REGNUM))
    return 1;

  /* Control registers.  */
  if (regnum == SPARC32_PC_REGNUM
      || regnum == SPARC32_NPC_REGNUM
      || regnum == SPARC32_PSR_REGNUM
      || regnum == SPARC32_Y_REGNUM)
    return 1;

  return 0;
}

/* Determine whether `fpregset_t' contains register REGNUM.  */

int
sparc32_fpregset_supplies_p (int regnum)
{
  /* Floating-point registers.  */
  if (regnum >= SPARC_F0_REGNUM && regnum <= SPARC_F31_REGNUM)
    return 1;

  /* Control registers.  */
  if (regnum == SPARC32_FSR_REGNUM)
    return 1;

  return 0;
}

/* Fetch register REGNUM from the inferior.  If REGNUM is -1, do this
   for all registers (including the floating-point registers).  */
d59 1
a59 1
fetch_inferior_registers (int regnum)
d61 4
a64 2
  struct regcache *regcache = current_regcache;
  int pid;
a78 3
  pid = TIDGET (inferior_ptid);
  if (pid == 0)
    pid = PIDGET (inferior_ptid);
d80 19
a98 1
  if (regnum == SPARC_G0_REGNUM)
d100 26
a125 2
      regcache_raw_supply (regcache, SPARC_G0_REGNUM, NULL);
      return;
d128 4
a131 1
  if (regnum == -1 || sparc_gregset_supplies_p (regnum))
d133 12
a144 1
      gregset_t regs;
d146 9
a154 6
      if (ptrace (PTRACE_GETREGS, pid, (PTRACE_ARG3_TYPE) &regs, 0) == -1)
	perror_with_name ("Couldn't get registers");

      sparc_supply_gregset (sparc_gregset, regcache, -1, &regs);
      if (regnum != -1)
	return;
d156 1
a156 2

  if (regnum == -1 || sparc_fpregset_supplies_p (regnum))
d158 7
a164 6
      fpregset_t fpregs;

      if (ptrace (PTRACE_GETFPREGS, pid, (PTRACE_ARG3_TYPE) &fpregs, 0) == -1)
	perror_with_name ("Couldn't get floating point status");

      sparc_supply_fpregset (regcache, -1, &fpregs);
d168 4
d173 1
a173 1
store_inferior_registers (int regnum)
d175 4
a178 2
  struct regcache *regcache = current_regcache;
  int pid;
d182 24
a205 3
  pid = TIDGET (inferior_ptid);
  if (pid == 0)
    pid = PIDGET (inferior_ptid);
d207 7
a213 1
  if (regnum == -1 || sparc_gregset_supplies_p (regnum))
d215 11
a225 1
      gregset_t regs;
d227 3
a229 2
      if (ptrace (PTRACE_GETREGS, pid, (PTRACE_ARG3_TYPE) &regs, 0) == -1)
	perror_with_name ("Couldn't get registers");
d231 16
a246 1
      sparc_collect_gregset (sparc_gregset, regcache, regnum, &regs);
d248 1
a248 2
      if (ptrace (PTRACE_SETREGS, pid, (PTRACE_ARG3_TYPE) &regs, 0) == -1)
	perror_with_name ("Couldn't write registers");
d250 4
a253 5
      /* Deal with the stack regs.  */
      if (regnum == -1 || regnum == SPARC_SP_REGNUM
	  || (regnum >= SPARC_L0_REGNUM && regnum <= SPARC_I7_REGNUM))
	{
	  ULONGEST sp;
d255 17
a271 3
	  regcache_cooked_read_unsigned (regcache, SPARC_SP_REGNUM, &sp);
	  sparc_collect_rwindow (regcache, sp, regnum);
	}
d273 14
a286 2
      if (regnum != -1)
	return;
d288 7
d296 12
a307 1
  if (regnum == -1 || sparc_fpregset_supplies_p (regnum))
a308 1
      fpregset_t fpregs, saved_fpregs;
d310 1
a310 2
      if (ptrace (PTRACE_GETFPREGS, pid, (PTRACE_ARG3_TYPE) &fpregs, 0) == -1)
	perror_with_name ("Couldn't get floating-point registers");
d312 35
a346 2
      memcpy (&saved_fpregs, &fpregs, sizeof (fpregs));
      sparc_collect_fpregset (regcache, regnum, &fpregs);
d348 2
a349 5
      /* Writing the floating-point registers will fail on NetBSD with
	 EINVAL if the inferior process doesn't have an FPU state
	 (i.e. if it didn't use the FPU yet).  Therefore we don't try
	 to write the registers if nothing changed.  */
      if (memcmp (&saved_fpregs, &fpregs, sizeof (fpregs)) != 0)
d351 4
a354 3
	  if (ptrace (PTRACE_SETFPREGS, pid,
		      (PTRACE_ARG3_TYPE) &fpregs, 0) == -1)
	    perror_with_name ("Couldn't write floating-point registers");
d356 4
d361 4
a364 3
      if (regnum != -1)
	return;
    }
d368 11
a378 2
/* Provide a prototype to silence -Wmissing-prototypes.  */
void _initialize_sparc_nat (void);
d381 1
a381 1
_initialize_sparc_nat (void)
d383 1
a383 15
  /* Deafult to using SunOS 4 register sets.  */
  if (sparc_gregset == NULL)
    sparc_gregset = &sparc32_sunos4_gregset;
  if (sparc_supply_gregset == NULL)
    sparc_supply_gregset = sparc32_supply_gregset;
  if (sparc_collect_gregset == NULL)
    sparc_collect_gregset = sparc32_collect_gregset;
  if (sparc_supply_fpregset == NULL)
    sparc_supply_fpregset = sparc32_supply_fpregset;
  if (sparc_collect_fpregset == NULL)
    sparc_collect_fpregset = sparc32_collect_fpregset;
  if (sparc_gregset_supplies_p == NULL)
    sparc_gregset_supplies_p = sparc32_gregset_supplies_p;
  if (sparc_fpregset_supplies_p == NULL)
    sparc_fpregset_supplies_p = sparc32_fpregset_supplies_p;
@


1.13.16.3
log
@Merge drow-cplus-merge-20040208 to drow-cplus-branch.
@
text
@a24 1
#include "target.h"
a25 1
#include "gdb_assert.h"
a248 1

a249 15
/* Fetch StackGhost Per-Process XOR cookie.  */

LONGEST
sparc_xfer_wcookie (struct target_ops *ops, enum target_object object,
		    const char *annex, void *readbuf, const void *writebuf,
		    ULONGEST offset, LONGEST len)
{
  unsigned long wcookie = 0;
  char *buf = (char *)&wcookie;

  gdb_assert (object == TARGET_OBJECT_WCOOKIE);
  gdb_assert (readbuf && writebuf == NULL);

  if (offset >= sizeof (unsigned long))
    return -1;
a250 16
#ifdef PT_WCOOKIE
  /* If PT_WCOOKIE is defined (by <sys/ptrace.h>), assume we're
     running on an OpenBSD release that uses StackGhost (3.1 or
     later).  As of release 3.4, OpenBSD doesn't use a randomized
     cookie yet.  */
  wcookie = 0x3;
#endif /* PT_WCOOKIE */

  if (len > sizeof (unsigned long) - offset)
    len = sizeof (unsigned long) - offset;

  memcpy (readbuf, buf + offset, len);
  return len;
}


@


1.13.12.1
log
@2002-12-03  Andrew Cagney  <ac131313@@redhat.com>

	* sparc-nat.c (fetch_inferior_registers)
	(store_inferior_registers): Add comment on problem of LWP vs
	threads.

	From 2002-11-21 Daniel Jacobowitz <drow@@mvista.com>
	* lin-lwp.c (lin_lwp_fetch_registers): Remove.
	(lin_lwp_store_registers): Remove.
	(init_lin_lwp_ops): Use fetch_inferior_registers
	and store_inferior_registers directly.
	* sparc-nat.c (fetch_inferior_registers): Honor LWP ID.
	(store_inferior_registers): Likewise.
	Fix PR gdb/725.
@
text
@d2 1
a2 2
   Copyright 1989, 1992, 1993, 1994, 1996, 1997, 1998, 1999, 2000, 2001,
   2002
a60 19
  int fetch_pid;

  /* NOTE: cagney/2002-12-03: This code assumes that the currently
     selected light weight processes' registers can be written
     directly into the selected thread's register cache.  This works
     fine when given an 1:1 LWP:thread model (such as found on
     GNU/Linux) but will, likely, have problems when used on an N:1
     (userland threads) or N:M (userland multiple LWP) model.  In the
     case of the latter two, the LWP's registers do not necessarily
     belong to the selected thread (the LWP could be in the middle of
     executing the thread switch code).

     These functions should instead be paramaterized with an explicit
     object (struct regcache, struct thread_info?) into which the LWPs
     registers can be written.  */

  fetch_pid = TIDGET (inferior_ptid);
  if (fetch_pid == 0)
    fetch_pid = PIDGET (inferior_ptid);
d78 1
a78 1
      if (0 != ptrace (PTRACE_GETREGS, fetch_pid,
d108 1
a108 1
      if (0 != ptrace (PTRACE_GETFPREGS, fetch_pid,
a153 7
  int store_pid;

  /* NOTE: cagney/2002-12-02: See comment in fetch_inferior_registers
     about threaded assumptions.  */
  store_pid = TIDGET (inferior_ptid);
  if (store_pid == 0)
    store_pid = PIDGET (inferior_ptid);
d236 1
a236 1
      if (0 != ptrace (PTRACE_SETREGS, store_pid,
d250 1
a250 1
	  ptrace (PTRACE_SETFPREGS, store_pid,
@


1.13.14.1
log
@2002-11-15  David Carlton  <carlton@@math.stanford.edu>

	* Merge from mainline; tag is carlton_dictionary-20021115-merge.
@
text
@d76 1
a76 1
      || (!deprecated_register_valid[SP_REGNUM] && regno < I7_REGNUM))
d82 6
a87 9
      deprecated_registers[REGISTER_BYTE (0)] = 0;
      memcpy (&deprecated_registers[REGISTER_BYTE (1)],
	      &inferior_registers.r_g1, 15 * REGISTER_RAW_SIZE (G0_REGNUM));
      *(int *) &deprecated_registers[REGISTER_BYTE (PS_REGNUM)]
	= inferior_registers.r_ps;
      *(int *) &deprecated_registers[REGISTER_BYTE (PC_REGNUM)]
	= inferior_registers.r_pc;
      *(int *) &deprecated_registers[REGISTER_BYTE (NPC_REGNUM)]
	= inferior_registers.r_npc;
d91 5
a95 5
	deprecated_register_valid[i] = 1;
      deprecated_register_valid[Y_REGNUM] = 1;
      deprecated_register_valid[PS_REGNUM] = 1;
      deprecated_register_valid[PC_REGNUM] = 1;
      deprecated_register_valid[NPC_REGNUM] = 1;
d98 3
a100 3
      deprecated_register_valid[WIM_REGNUM] = 1;	/* Not true yet, FIXME */
      deprecated_register_valid[TBR_REGNUM] = 1;	/* Not true yet, FIXME */
      deprecated_register_valid[CPS_REGNUM] = 1;	/* Not true yet, FIXME */
d112 5
a116 4
      memcpy (&deprecated_registers[REGISTER_BYTE (FP0_REGNUM)],
	      &inferior_fp_registers, sizeof inferior_fp_registers.fpu_fr);
      memcpy (&deprecated_registers[REGISTER_BYTE (FPS_REGNUM)],
	      &inferior_fp_registers.Fpu_fsr, sizeof (FPU_FSR_TYPE));
d118 2
a119 2
	deprecated_register_valid[i] = 1;
      deprecated_register_valid[FPS_REGNUM] = 1;
d126 2
a127 2
      CORE_ADDR sp = *(unsigned int *) & deprecated_registers[REGISTER_BYTE (SP_REGNUM)];
      target_read_memory (sp, &deprecated_registers[REGISTER_BYTE (L0_REGNUM)],
d130 1
a130 1
	deprecated_register_valid[i] = 1;
d134 1
a134 1
      CORE_ADDR sp = *(unsigned int *) & deprecated_registers[REGISTER_BYTE (SP_REGNUM)];
d136 1
a136 1
      if (deprecated_register_valid[regno])
d139 2
a140 2
			  &deprecated_registers[i], REGISTER_RAW_SIZE (regno));
      deprecated_register_valid[regno] = 1;
d198 1
a198 1
      CORE_ADDR sp = *(unsigned int *) & deprecated_registers[REGISTER_BYTE (SP_REGNUM)];
d202 1
a202 1
	  if (!deprecated_register_valid[L0_REGNUM + 5])
d205 1
a205 1
			       &deprecated_registers[REGISTER_BYTE (L0_REGNUM)],
d210 1
a210 1
	  if (!deprecated_register_valid[regno])
d213 1
a213 1
			       &deprecated_registers[REGISTER_BYTE (regno)],
d221 1
a221 1
      if (!deprecated_register_valid[G1_REGNUM])
d224 1
a224 2
      memcpy (&inferior_registers.r_g1,
	      &deprecated_registers[REGISTER_BYTE (G1_REGNUM)],
d228 1
a228 1
	*(int *) &deprecated_registers[REGISTER_BYTE (PS_REGNUM)];
d230 1
a230 1
	*(int *) &deprecated_registers[REGISTER_BYTE (PC_REGNUM)];
d232 1
a232 1
	*(int *) &deprecated_registers[REGISTER_BYTE (NPC_REGNUM)];
d234 1
a234 1
	*(int *) &deprecated_registers[REGISTER_BYTE (Y_REGNUM)];
d243 1
a243 1
      if (!deprecated_register_valid[FP0_REGNUM + 9])
d245 1
a245 2
      memcpy (&inferior_fp_registers,
	      &deprecated_registers[REGISTER_BYTE (FP0_REGNUM)],
d248 1
a248 2
	      &deprecated_registers[REGISTER_BYTE (FPS_REGNUM)],
	      sizeof (FPU_FSR_TYPE));
d280 1
a280 1
      *(int *) &deprecated_registers[REGISTER_BYTE (0)] = 0;
d283 1
a283 1
      memcpy (&deprecated_registers[REGISTER_BYTE (G1_REGNUM)], &gregs->r_g1,
d285 4
a288 4
      *(int *) &deprecated_registers[REGISTER_BYTE (PS_REGNUM)] = gregs->r_ps;
      *(int *) &deprecated_registers[REGISTER_BYTE (PC_REGNUM)] = gregs->r_pc;
      *(int *) &deprecated_registers[REGISTER_BYTE (NPC_REGNUM)] = gregs->r_npc;
      *(int *) &deprecated_registers[REGISTER_BYTE (Y_REGNUM)] = gregs->r_y;
d298 2
a299 3
	sp = *(int *) &deprecated_registers[REGISTER_BYTE (SP_REGNUM)];
	if (0 != target_read_memory (sp,
				     &deprecated_registers[REGISTER_BYTE (L0_REGNUM)],
d316 4
a319 4
	  memcpy (&deprecated_registers[REGISTER_BYTE (FP0_REGNUM)],
		  fpuregs->fpu_regs, sizeof (fpuregs->fpu_regs));
	  memcpy (&deprecated_registers[REGISTER_BYTE (FPS_REGNUM)],
		  &fpuregs->fpu_fsr, sizeof (FPU_FSR_TYPE));
@


1.13.14.2
log
@2002-12-23  David Carlton  <carlton@@math.stanford.edu>

	* Merge from mainline; tag is carlton_dictionary-20021223-merge.
@
text
@d2 1
a2 2
   Copyright 1989, 1992, 1993, 1994, 1996, 1997, 1998, 1999, 2000, 2001,
   2002
a60 19
  int fetch_pid;

  /* NOTE: cagney/2002-12-03: This code assumes that the currently
     selected light weight processes' registers can be written
     directly into the selected thread's register cache.  This works
     fine when given an 1:1 LWP:thread model (such as found on
     GNU/Linux) but will, likely, have problems when used on an N:1
     (userland threads) or N:M (userland multiple LWP) model.  In the
     case of the latter two, the LWP's registers do not necessarily
     belong to the selected thread (the LWP could be in the middle of
     executing the thread switch code).

     These functions should instead be paramaterized with an explicit
     object (struct regcache, struct thread_info?) into which the LWPs
     registers can be written.  */

  fetch_pid = TIDGET (inferior_ptid);
  if (fetch_pid == 0)
    fetch_pid = PIDGET (inferior_ptid);
d78 1
a78 1
      if (0 != ptrace (PTRACE_GETREGS, fetch_pid,
d111 1
a111 1
      if (0 != ptrace (PTRACE_GETFPREGS, fetch_pid,
a155 7
  int store_pid;

  /* NOTE: cagney/2002-12-02: See comment in fetch_inferior_registers
     about threaded assumptions.  */
  store_pid = TIDGET (inferior_ptid);
  if (store_pid == 0)
    store_pid = PIDGET (inferior_ptid);
d239 1
a239 1
      if (0 != ptrace (PTRACE_SETREGS, store_pid,
d255 1
a255 1
	  ptrace (PTRACE_SETFPREGS, store_pid,
@


1.13.14.3
log
@2003-02-07  David Carlton  <carlton@@math.stanford.edu>

	* Merge with mainline; tag is carlton_dictionary-20030207-merge.
@
text
@d2 3
a4 3

   Copyright 1989, 1992, 1993, 1994, 1996, 1997, 1998, 1999, 2000,
   2001, 2002, 2003 Free Software Foundation, Inc.
d34 1
a34 1
#include "gdb_wait.h"
@


1.13.14.4
log
@2003-06-27  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton_dictionary-20030627-merge.
@
text
@d111 1
a111 1
      *(int *) &deprecated_registers[REGISTER_BYTE (Y_REGNUM)] = inferior_registers.r_y;
@


1.13.14.5
log
@2003-08-05  David Carlton  <carlton@@kealia.com>

	* configure.in (build_warnings): Delete -Wformat-nonliteral.
	* configure (build_warnings): Ditto.

	* Merge with mainline; tag is carlton_dictionary-20030805-merge.
@
text
@a28 2
#include "sparc-tdep.h"

@


1.13.14.6
log
@2003-09-17  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton_dictionary-20030917-merge.
@
text
@d104 2
a105 2
      deprecated_registers[DEPRECATED_REGISTER_BYTE (0)] = 0;
      memcpy (&deprecated_registers[DEPRECATED_REGISTER_BYTE (1)],
d107 1
a107 1
      *(int *) &deprecated_registers[DEPRECATED_REGISTER_BYTE (PS_REGNUM)]
d109 1
a109 1
      *(int *) &deprecated_registers[DEPRECATED_REGISTER_BYTE (PC_REGNUM)]
d111 1
a111 1
      *(int *) &deprecated_registers[DEPRECATED_REGISTER_BYTE (DEPRECATED_NPC_REGNUM)]
d113 1
a113 1
      *(int *) &deprecated_registers[DEPRECATED_REGISTER_BYTE (Y_REGNUM)] = inferior_registers.r_y;
d120 1
a120 1
      deprecated_register_valid[DEPRECATED_NPC_REGNUM] = 1;
d137 1
a137 1
      memcpy (&deprecated_registers[DEPRECATED_REGISTER_BYTE (FP0_REGNUM)],
d139 1
a139 1
      memcpy (&deprecated_registers[DEPRECATED_REGISTER_BYTE (FPS_REGNUM)],
d150 2
a151 2
      CORE_ADDR sp = *(unsigned int *) & deprecated_registers[DEPRECATED_REGISTER_BYTE (SP_REGNUM)];
      target_read_memory (sp, &deprecated_registers[DEPRECATED_REGISTER_BYTE (L0_REGNUM)],
d158 2
a159 2
      CORE_ADDR sp = *(unsigned int *) & deprecated_registers[DEPRECATED_REGISTER_BYTE (SP_REGNUM)];
      i = DEPRECATED_REGISTER_BYTE (regno);
d162 1
a162 1
      target_read_memory (sp + i - DEPRECATED_REGISTER_BYTE (L0_REGNUM),
d229 1
a229 1
      CORE_ADDR sp = *(unsigned int *) & deprecated_registers[DEPRECATED_REGISTER_BYTE (SP_REGNUM)];
d236 1
a236 1
			       &deprecated_registers[DEPRECATED_REGISTER_BYTE (L0_REGNUM)],
d243 2
a244 2
	  target_write_memory (sp + DEPRECATED_REGISTER_BYTE (regno) - DEPRECATED_REGISTER_BYTE (L0_REGNUM),
			       &deprecated_registers[DEPRECATED_REGISTER_BYTE (regno)],
d256 1
a256 1
	      &deprecated_registers[DEPRECATED_REGISTER_BYTE (G1_REGNUM)],
d260 1
a260 1
	*(int *) &deprecated_registers[DEPRECATED_REGISTER_BYTE (PS_REGNUM)];
d262 1
a262 1
	*(int *) &deprecated_registers[DEPRECATED_REGISTER_BYTE (PC_REGNUM)];
d264 1
a264 1
	*(int *) &deprecated_registers[DEPRECATED_REGISTER_BYTE (DEPRECATED_NPC_REGNUM)];
d266 1
a266 1
	*(int *) &deprecated_registers[DEPRECATED_REGISTER_BYTE (Y_REGNUM)];
d278 1
a278 1
	      &deprecated_registers[DEPRECATED_REGISTER_BYTE (FP0_REGNUM)],
d281 1
a281 1
	      &deprecated_registers[DEPRECATED_REGISTER_BYTE (FPS_REGNUM)],
d314 1
a314 1
      *(int *) &deprecated_registers[DEPRECATED_REGISTER_BYTE (0)] = 0;
d317 1
a317 1
      memcpy (&deprecated_registers[DEPRECATED_REGISTER_BYTE (G1_REGNUM)], &gregs->r_g1,
d319 4
a322 4
      *(int *) &deprecated_registers[DEPRECATED_REGISTER_BYTE (PS_REGNUM)] = gregs->r_ps;
      *(int *) &deprecated_registers[DEPRECATED_REGISTER_BYTE (PC_REGNUM)] = gregs->r_pc;
      *(int *) &deprecated_registers[DEPRECATED_REGISTER_BYTE (DEPRECATED_NPC_REGNUM)] = gregs->r_npc;
      *(int *) &deprecated_registers[DEPRECATED_REGISTER_BYTE (Y_REGNUM)] = gregs->r_y;
d332 1
a332 1
	sp = *(int *) &deprecated_registers[DEPRECATED_REGISTER_BYTE (SP_REGNUM)];
d334 1
a334 1
				     &deprecated_registers[DEPRECATED_REGISTER_BYTE (L0_REGNUM)],
d351 1
a351 1
	  memcpy (&deprecated_registers[DEPRECATED_REGISTER_BYTE (FP0_REGNUM)],
d353 1
a353 1
	  memcpy (&deprecated_registers[DEPRECATED_REGISTER_BYTE (FPS_REGNUM)],
@


1.13.14.7
log
@2003-11-11  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton-dictionary-20031111-merge.
@
text
@d106 1
a106 1
	      &inferior_registers.r_g1, 15 * DEPRECATED_REGISTER_RAW_SIZE (G0_REGNUM));
d152 1
a152 1
			  16 * DEPRECATED_REGISTER_RAW_SIZE (L0_REGNUM));
d163 1
a163 1
			  &deprecated_registers[i], DEPRECATED_REGISTER_RAW_SIZE (regno));
d237 1
a237 1
			       16 * DEPRECATED_REGISTER_RAW_SIZE (L0_REGNUM));
d245 1
a245 1
			       DEPRECATED_REGISTER_RAW_SIZE (regno));
d257 1
a257 1
	      15 * DEPRECATED_REGISTER_RAW_SIZE (G1_REGNUM));
d318 1
a318 1
	      15 * DEPRECATED_REGISTER_RAW_SIZE (G1_REGNUM));
d335 1
a335 1
				     16 * DEPRECATED_REGISTER_RAW_SIZE (L0_REGNUM)))
@


1.13.14.8
log
@2004-01-26  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton_dictionary-20040126-merge.
@
text
@d1 1
a1 1
/* Native-dependent code for SPARC.
d3 2
a4 1
   Copyright 2003, 2004 Free Software Foundation, Inc.
d25 2
d29 5
a34 1
#include "gdb_string.h"
d37 3
a39 1
#ifdef HAVE_MACHINE_REG_H
d42 1
d44 13
a56 99
#include "sparc-tdep.h"
#include "sparc-nat.h"

/* With some trickery we can use the code in this file for most (if
   not all) ptrace(2) based SPARC systems, which includes SunOS 4,
   GNU/Linux and the various SPARC BSD's.

   First, we need a data structure for use with ptrace(2).  SunOS has
   `struct regs' and `struct fp_status' in <machine/reg.h>.  BSD's
   have `struct reg' and `struct fpreg' in <machine/reg.h>.  GNU/Linux
   has the same structures as SunOS 4, but they're in <asm/reg.h>,
   which is a kernel header.  As a general rule we avoid including
   GNU/Linux kernel headers.  Fortunately GNU/Linux has a `gregset_t'
   and a `fpregset_t' that are equivalent to `struct regs' and `struct
   fp_status' in <sys/ucontext.h>, which is automatically included by
   <signal.h>.  Settling on using the `gregset_t' and `fpregset_t'
   typedefs, providing them for the other systems, therefore solves
   the puzzle.  */

#ifdef HAVE_MACHINE_REG_H
#ifdef HAVE_STRUCT_REG
typedef struct reg gregset_t;
typedef struct fpreg fpregset_t;
#else 
typedef struct regs gregset_t;
typedef struct fp_status fpregset_t;
#endif
#endif

/* Second, we need to remap the BSD ptrace(2) requests to their SunOS
   equivalents.  GNU/Linux already follows SunOS here.  */

#ifndef PTRACE_GETREGS
#define PTRACE_GETREGS PT_GETREGS
#endif

#ifndef PTRACE_SETREGS
#define PTRACE_SETREGS PT_SETREGS
#endif

#ifndef PTRACE_GETFPREGS
#define PTRACE_GETFPREGS PT_GETFPREGS
#endif

#ifndef PTRACE_SETFPREGS
#define PTRACE_SETFPREGS PT_SETFPREGS
#endif

/* Register set description.  */
const struct sparc_gregset *sparc_gregset;
void (*sparc_supply_gregset) (const struct sparc_gregset *,
			      struct regcache *, int , const void *);
void (*sparc_collect_gregset) (const struct sparc_gregset *,
			       const struct regcache *, int, void *);
void (*sparc_supply_fpregset) (struct regcache *, int , const void *);
void (*sparc_collect_fpregset) (const struct regcache *, int , void *);
int (*sparc_gregset_supplies_p) (int);
int (*sparc_fpregset_supplies_p) (int);

/* Determine whether `gregset_t' contains register REGNUM.  */

int
sparc32_gregset_supplies_p (int regnum)
{
  /* Integer registers.  */
  if ((regnum >= SPARC_G1_REGNUM && regnum <= SPARC_G7_REGNUM)
      || (regnum >= SPARC_O0_REGNUM && regnum <= SPARC_O7_REGNUM)
      || (regnum >= SPARC_L0_REGNUM && regnum <= SPARC_L7_REGNUM)
      || (regnum >= SPARC_I0_REGNUM && regnum <= SPARC_I7_REGNUM))
    return 1;

  /* Control registers.  */
  if (regnum == SPARC32_PC_REGNUM
      || regnum == SPARC32_NPC_REGNUM
      || regnum == SPARC32_PSR_REGNUM
      || regnum == SPARC32_Y_REGNUM)
    return 1;

  return 0;
}

/* Determine whether `fpregset_t' contains register REGNUM.  */

int
sparc32_fpregset_supplies_p (int regnum)
{
  /* Floating-point registers.  */
  if (regnum >= SPARC_F0_REGNUM && regnum <= SPARC_F31_REGNUM)
    return 1;

  /* Control registers.  */
  if (regnum == SPARC32_FSR_REGNUM)
    return 1;

  return 0;
}

/* Fetch register REGNUM from the inferior.  If REGNUM is -1, do this
   for all registers (including the floating-point registers).  */
d59 1
a59 1
fetch_inferior_registers (int regnum)
d61 4
a64 2
  struct regcache *regcache = current_regcache;
  int pid;
a78 3
  pid = TIDGET (inferior_ptid);
  if (pid == 0)
    pid = PIDGET (inferior_ptid);
d80 19
a98 1
  if (regnum == SPARC_G0_REGNUM)
d100 26
a125 2
      regcache_raw_supply (regcache, SPARC_G0_REGNUM, NULL);
      return;
d128 4
a131 1
  if (regnum == -1 || sparc_gregset_supplies_p (regnum))
d133 12
a144 1
      gregset_t regs;
d146 9
a154 6
      if (ptrace (PTRACE_GETREGS, pid, (PTRACE_ARG3_TYPE) &regs, 0) == -1)
	perror_with_name ("Couldn't get registers");

      sparc_supply_gregset (sparc_gregset, regcache, -1, &regs);
      if (regnum != -1)
	return;
d156 1
a156 2

  if (regnum == -1 || sparc_fpregset_supplies_p (regnum))
d158 7
a164 6
      fpregset_t fpregs;

      if (ptrace (PTRACE_GETFPREGS, pid, (PTRACE_ARG3_TYPE) &fpregs, 0) == -1)
	perror_with_name ("Couldn't get floating point status");

      sparc_supply_fpregset (regcache, -1, &fpregs);
d168 4
d173 1
a173 1
store_inferior_registers (int regnum)
d175 4
a178 2
  struct regcache *regcache = current_regcache;
  int pid;
d182 24
a205 3
  pid = TIDGET (inferior_ptid);
  if (pid == 0)
    pid = PIDGET (inferior_ptid);
d207 7
a213 1
  if (regnum == -1 || sparc_gregset_supplies_p (regnum))
d215 11
a225 1
      gregset_t regs;
d227 3
a229 2
      if (ptrace (PTRACE_GETREGS, pid, (PTRACE_ARG3_TYPE) &regs, 0) == -1)
	perror_with_name ("Couldn't get registers");
d231 16
a246 1
      sparc_collect_gregset (sparc_gregset, regcache, regnum, &regs);
d248 1
a248 2
      if (ptrace (PTRACE_SETREGS, pid, (PTRACE_ARG3_TYPE) &regs, 0) == -1)
	perror_with_name ("Couldn't write registers");
d250 4
a253 5
      /* Deal with the stack regs.  */
      if (regnum == -1 || regnum == SPARC_SP_REGNUM
	  || (regnum >= SPARC_L0_REGNUM && regnum <= SPARC_I7_REGNUM))
	{
	  ULONGEST sp;
d255 17
a271 3
	  regcache_cooked_read_unsigned (regcache, SPARC_SP_REGNUM, &sp);
	  sparc_collect_rwindow (regcache, sp, regnum);
	}
d273 14
a286 2
      if (regnum != -1)
	return;
d288 7
d296 12
a307 1
  if (regnum == -1 || sparc_fpregset_supplies_p (regnum))
a308 1
      fpregset_t fpregs, saved_fpregs;
d310 1
a310 2
      if (ptrace (PTRACE_GETFPREGS, pid, (PTRACE_ARG3_TYPE) &fpregs, 0) == -1)
	perror_with_name ("Couldn't get floating-point registers");
d312 35
a346 2
      memcpy (&saved_fpregs, &fpregs, sizeof (fpregs));
      sparc_collect_fpregset (regcache, regnum, &fpregs);
d348 2
a349 5
      /* Writing the floating-point registers will fail on NetBSD with
	 EINVAL if the inferior process doesn't have an FPU state
	 (i.e. if it didn't use the FPU yet).  Therefore we don't try
	 to write the registers if nothing changed.  */
      if (memcmp (&saved_fpregs, &fpregs, sizeof (fpregs)) != 0)
d351 4
a354 3
	  if (ptrace (PTRACE_SETFPREGS, pid,
		      (PTRACE_ARG3_TYPE) &fpregs, 0) == -1)
	    perror_with_name ("Couldn't write floating-point registers");
d356 4
d361 4
a364 3
      if (regnum != -1)
	return;
    }
d368 11
a378 2
/* Provide a prototype to silence -Wmissing-prototypes.  */
void _initialize_sparc_nat (void);
d381 1
a381 1
_initialize_sparc_nat (void)
d383 1
a383 15
  /* Deafult to using SunOS 4 register sets.  */
  if (sparc_gregset == NULL)
    sparc_gregset = &sparc32_sunos4_gregset;
  if (sparc_supply_gregset == NULL)
    sparc_supply_gregset = sparc32_supply_gregset;
  if (sparc_collect_gregset == NULL)
    sparc_collect_gregset = sparc32_collect_gregset;
  if (sparc_supply_fpregset == NULL)
    sparc_supply_fpregset = sparc32_supply_fpregset;
  if (sparc_collect_fpregset == NULL)
    sparc_collect_fpregset = sparc32_collect_fpregset;
  if (sparc_gregset_supplies_p == NULL)
    sparc_gregset_supplies_p = sparc32_gregset_supplies_p;
  if (sparc_fpregset_supplies_p == NULL)
    sparc_fpregset_supplies_p = sparc32_fpregset_supplies_p;
@


1.12
log
@2002-03-20  David O'Brien  <obrien@@FreeBSD.org>
	* sparc-nat.c:  Include sys/param.h where possible.

Approved by:  Michael Snyder <msnyder@@redhat.com>
              Message-ID: <3C98FF43.46ABDC1C@@redhat.com>
@
text
@d158 3
a160 11
    if (FP0_REGNUM <= regno && regno < FP0_REGNUM + 32)
      {
	wanna_store = FP_REGS;
      }
    else
      {
	if (regno == SP_REGNUM)
	  wanna_store = INT_REGS + STACK_REGS;
	else if (regno < L0_REGNUM || regno > I7_REGNUM)
	  wanna_store = INT_REGS;
	else if (regno == FPS_REGNUM)
d162 13
a174 3
	else
	  wanna_store = STACK_REGS;
      }
@


1.11
log
@	* sparc-nat.c (fetch_inferior_registers): Don't rely
	on CORE_ADDR being 32-bit.
	(store_inferior_registers): Likewise.
@
text
@d28 3
@


1.11.2.1
log
@Merge from mainline:
2002-03-20  David O'Brien  <obrien@@FreeBSD.org>
	* sparc-nat.c:  Include sys/param.h where possible.
@
text
@a27 3
#ifdef HAVE_SYS_PARAM_H
#include <sys/param.h>
#endif
@


1.10
log
@* sparc-nat.c (fetch_core_registers): Remove redundant prototype.
@
text
@d123 2
a124 2
      target_read_memory (*(CORE_ADDR *) & registers[REGISTER_BYTE (SP_REGNUM)],
			  &registers[REGISTER_BYTE (L0_REGNUM)],
d131 1
a131 1
      CORE_ADDR sp = *(CORE_ADDR *) & registers[REGISTER_BYTE (SP_REGNUM)];
d193 1
a193 1
      CORE_ADDR sp = *(CORE_ADDR *) & registers[REGISTER_BYTE (SP_REGNUM)];
@


1.9
log
@Phase 1 of the ptid_t changes.
@
text
@a47 2
static void fetch_core_registers (char *, unsigned int, int, CORE_ADDR);

@


1.8
log
@Update/correct copyright notices.
@
text
@d77 1
a77 1
      if (0 != ptrace (PTRACE_GETREGS, inferior_pid,
d107 1
a107 1
      if (0 != ptrace (PTRACE_GETFPREGS, inferior_pid,
d233 1
a233 1
      if (0 != ptrace (PTRACE_SETREGS, inferior_pid,
d247 1
a247 1
	  ptrace (PTRACE_SETFPREGS, inferior_pid,
@


1.7
log
@Fix typo in which sparc-nat.c was changed to include itself.
@
text
@d2 2
a3 2
   Copyright 1989, 1992, 1993, 1994, 1996, 2001 Free Software
   Foundation, Inc.
@


1.6
log
@Create new file regcache.h.  Update all uses.
@
text
@a25 1
#include "sparc-nat.c"
@


1.5
log
@Replace calls to abort() with calls to internal_error().
@
text
@d2 2
a3 1
   Copyright 1989, 1992, 1993, 1994, 1996 Free Software Foundation, Inc.
d26 2
@


1.4
log
@Protoization.
@
text
@d62 1
a62 1
    abort ();
d198 1
a198 1
	    abort ();
d206 1
a206 1
	    abort ();
d217 1
a217 1
	abort ();
d239 1
a239 1
	abort ();
@


1.3
log
@Protoization.
@
text
@d251 11
d264 2
a265 5
fetch_core_registers (core_reg_sect, core_reg_size, which, ignore)
     char *core_reg_sect;
     unsigned core_reg_size;
     int which;
     CORE_ADDR ignore;		/* reg addr, unused in this version */
@


1.2
log
@PARAMS removal.
@
text
@d53 1
a53 2
fetch_inferior_registers (regno)
     int regno;
d146 1
a146 2
store_inferior_registers (regno)
     int regno;
d314 1
a314 1
kernel_u_size ()
d333 1
a333 1
_initialize_core_sparc ()
@


1.1
log
@Initial revision
@
text
@d4 1
a4 1
This file is part of GDB.
d6 14
a19 13
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
d46 1
a46 2
static void
fetch_core_registers PARAMS ((char *, unsigned int, int, CORE_ADDR));
d62 2
a63 1
  if (deferred_stores) abort();
d72 1
a72 1
  if (regno < O7_REGNUM  /* including -1 */
d77 3
a79 3
		       (PTRACE_ARG3_TYPE) &inferior_registers, 0))
	perror("ptrace_getregs");
      
d83 4
a86 4
      *(int *)&registers[REGISTER_BYTE (PS_REGNUM)] = inferior_registers.r_ps; 
      *(int *)&registers[REGISTER_BYTE (PC_REGNUM)] = inferior_registers.r_pc;
      *(int *)&registers[REGISTER_BYTE (NPC_REGNUM)] = inferior_registers.r_npc;
      *(int *)&registers[REGISTER_BYTE (Y_REGNUM)] = inferior_registers.r_y;
d95 1
a95 1
	 all the regs every time it is called!  FIXME.  */
d107 1
a107 1
		       (PTRACE_ARG3_TYPE) &inferior_fp_registers,
d109 1
a109 1
	    perror("ptrace_getfpregs");
d113 3
a115 3
	     &inferior_fp_registers.Fpu_fsr,
	     sizeof (FPU_FSR_TYPE));
      for (i = FP0_REGNUM; i <= FP0_REGNUM+31; i++)
d124 3
a126 3
      target_read_memory (*(CORE_ADDR*)&registers[REGISTER_BYTE (SP_REGNUM)],
		          &registers[REGISTER_BYTE (L0_REGNUM)],
			  16*REGISTER_RAW_SIZE (L0_REGNUM));
d132 1
a132 1
      CORE_ADDR sp = *(CORE_ADDR*)&registers[REGISTER_BYTE (SP_REGNUM)];
d135 1
a135 1
	printf_unfiltered("register %d valid and read\n", regno);
d161 1
a161 1
    else 
d195 1
a195 1
      CORE_ADDR sp = *(CORE_ADDR *)&registers[REGISTER_BYTE (SP_REGNUM)];
d199 3
a201 2
	  if (!register_valid[L0_REGNUM+5]) abort();
	  target_write_memory (sp, 
d203 1
a203 1
			       16*REGISTER_RAW_SIZE (L0_REGNUM));
d207 2
a208 1
	  if (!register_valid[regno]) abort();
d213 1
a213 1
	
d218 2
a219 1
      if (!register_valid[G1_REGNUM]) abort();
d225 1
a225 1
	*(int *)&registers[REGISTER_BYTE (PS_REGNUM)];
d227 1
a227 1
	*(int *)&registers[REGISTER_BYTE (PC_REGNUM)];
d229 1
a229 1
	*(int *)&registers[REGISTER_BYTE (NPC_REGNUM)];
d231 1
a231 1
	*(int *)&registers[REGISTER_BYTE (Y_REGNUM)];
d234 2
a235 2
		       (PTRACE_ARG3_TYPE) &inferior_registers, 0))
	perror("ptrace_setregs");
d240 2
a241 1
      if (!register_valid[FP0_REGNUM+9]) abort();
d244 1
a244 1
      memcpy (&inferior_fp_registers.Fpu_fsr, 
d247 3
a249 3
	 ptrace (PTRACE_SETFPREGS, inferior_pid,
		 (PTRACE_ARG3_TYPE) &inferior_fp_registers, 0))
	 perror("ptrace_setfpregs");
d256 4
a259 4
  char *core_reg_sect;
  unsigned core_reg_size;
  int which;
  CORE_ADDR ignore;	/* reg addr, unused in this version */
d262 2
a263 1
  if (which == 0) {
d265 1
a265 1
    /* Integer registers */
d268 2
a269 2
    /* G0 *always* holds 0.  */
    *(int *)&registers[REGISTER_BYTE (0)] = 0;
d271 25
a295 24
    /* The globals and output registers.  */
    memcpy (&registers[REGISTER_BYTE (G1_REGNUM)], &gregs->r_g1, 
	    15 * REGISTER_RAW_SIZE (G1_REGNUM));
    *(int *)&registers[REGISTER_BYTE (PS_REGNUM)] = gregs->r_ps;
    *(int *)&registers[REGISTER_BYTE (PC_REGNUM)] = gregs->r_pc;
    *(int *)&registers[REGISTER_BYTE (NPC_REGNUM)] = gregs->r_npc;
    *(int *)&registers[REGISTER_BYTE (Y_REGNUM)] = gregs->r_y;

    /* My best guess at where to get the locals and input
       registers is exactly where they usually are, right above
       the stack pointer.  If the core dump was caused by a bus error
       from blowing away the stack pointer (as is possible) then this
       won't work, but it's worth the try. */
    {
      int sp;

      sp = *(int *)&registers[REGISTER_BYTE (SP_REGNUM)];
      if (0 != target_read_memory (sp, &registers[REGISTER_BYTE (L0_REGNUM)], 
			  16 * REGISTER_RAW_SIZE (L0_REGNUM)))
	{
	  /* fprintf_unfiltered so user can still use gdb */
	  fprintf_unfiltered (gdb_stderr,
		   "Couldn't read input and local registers from core file\n");
	}
d297 2
a298 1
  } else if (which == 2) {
d300 1
a300 1
    /* Floating point registers */
d303 10
a312 10
    if (core_reg_size >= sizeof (struct fpu))
      {
	memcpy (&registers[REGISTER_BYTE (FP0_REGNUM)], fpuregs->fpu_regs,
		sizeof (fpuregs->fpu_regs));
	memcpy (&registers[REGISTER_BYTE (FPS_REGNUM)], &fpuregs->fpu_fsr,
		sizeof (FPU_FSR_TYPE));
      }
    else
      fprintf_unfiltered (gdb_stderr, "Couldn't read float regs from core file\n");
  }
d320 1
a321 1

d327 5
a331 3
  bfd_target_unknown_flavour,
  fetch_core_registers,
  NULL
@


1.1.1.1
log
@Initial creation of sourceware repository
@
text
@@


1.1.1.2
log
@import gdb-1999-07-07 post reformat
@
text
@d4 1
a4 1
   This file is part of GDB.
d6 13
a18 14
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */
d62 1
a62 2
  if (deferred_stores)
    abort ();
d71 1
a71 1
  if (regno < O7_REGNUM		/* including -1 */
d76 3
a78 3
		       (PTRACE_ARG3_TYPE) & inferior_registers, 0))
	perror ("ptrace_getregs");

d82 4
a85 4
      *(int *) &registers[REGISTER_BYTE (PS_REGNUM)] = inferior_registers.r_ps;
      *(int *) &registers[REGISTER_BYTE (PC_REGNUM)] = inferior_registers.r_pc;
      *(int *) &registers[REGISTER_BYTE (NPC_REGNUM)] = inferior_registers.r_npc;
      *(int *) &registers[REGISTER_BYTE (Y_REGNUM)] = inferior_registers.r_y;
d94 1
a94 1
         all the regs every time it is called!  FIXME.  */
d106 1
a106 1
		       (PTRACE_ARG3_TYPE) & inferior_fp_registers,
d108 1
a108 1
	perror ("ptrace_getfpregs");
d112 3
a114 3
	      &inferior_fp_registers.Fpu_fsr,
	      sizeof (FPU_FSR_TYPE));
      for (i = FP0_REGNUM; i <= FP0_REGNUM + 31; i++)
d123 3
a125 3
      target_read_memory (*(CORE_ADDR *) & registers[REGISTER_BYTE (SP_REGNUM)],
			  &registers[REGISTER_BYTE (L0_REGNUM)],
			  16 * REGISTER_RAW_SIZE (L0_REGNUM));
d131 1
a131 1
      CORE_ADDR sp = *(CORE_ADDR *) & registers[REGISTER_BYTE (SP_REGNUM)];
d134 1
a134 1
	printf_unfiltered ("register %d valid and read\n", regno);
d160 1
a160 1
    else
d194 1
a194 1
      CORE_ADDR sp = *(CORE_ADDR *) & registers[REGISTER_BYTE (SP_REGNUM)];
d198 2
a199 3
	  if (!register_valid[L0_REGNUM + 5])
	    abort ();
	  target_write_memory (sp,
d201 1
a201 1
			       16 * REGISTER_RAW_SIZE (L0_REGNUM));
d205 1
a205 2
	  if (!register_valid[regno])
	    abort ();
d210 1
a210 1

d215 1
a215 2
      if (!register_valid[G1_REGNUM])
	abort ();
d221 1
a221 1
	*(int *) &registers[REGISTER_BYTE (PS_REGNUM)];
d223 1
a223 1
	*(int *) &registers[REGISTER_BYTE (PC_REGNUM)];
d225 1
a225 1
	*(int *) &registers[REGISTER_BYTE (NPC_REGNUM)];
d227 1
a227 1
	*(int *) &registers[REGISTER_BYTE (Y_REGNUM)];
d230 2
a231 2
		       (PTRACE_ARG3_TYPE) & inferior_registers, 0))
	perror ("ptrace_setregs");
d236 1
a236 2
      if (!register_valid[FP0_REGNUM + 9])
	abort ();
d239 1
a239 1
      memcpy (&inferior_fp_registers.Fpu_fsr,
d242 3
a244 3
	  ptrace (PTRACE_SETFPREGS, inferior_pid,
		  (PTRACE_ARG3_TYPE) & inferior_fp_registers, 0))
	perror ("ptrace_setfpregs");
d251 4
a254 4
     char *core_reg_sect;
     unsigned core_reg_size;
     int which;
     CORE_ADDR ignore;		/* reg addr, unused in this version */
d257 1
a257 2
  if (which == 0)
    {
d259 1
a259 1
      /* Integer registers */
d262 2
a263 2
      /* G0 *always* holds 0.  */
      *(int *) &registers[REGISTER_BYTE (0)] = 0;
d265 24
a288 25
      /* The globals and output registers.  */
      memcpy (&registers[REGISTER_BYTE (G1_REGNUM)], &gregs->r_g1,
	      15 * REGISTER_RAW_SIZE (G1_REGNUM));
      *(int *) &registers[REGISTER_BYTE (PS_REGNUM)] = gregs->r_ps;
      *(int *) &registers[REGISTER_BYTE (PC_REGNUM)] = gregs->r_pc;
      *(int *) &registers[REGISTER_BYTE (NPC_REGNUM)] = gregs->r_npc;
      *(int *) &registers[REGISTER_BYTE (Y_REGNUM)] = gregs->r_y;

      /* My best guess at where to get the locals and input
         registers is exactly where they usually are, right above
         the stack pointer.  If the core dump was caused by a bus error
         from blowing away the stack pointer (as is possible) then this
         won't work, but it's worth the try. */
      {
	int sp;

	sp = *(int *) &registers[REGISTER_BYTE (SP_REGNUM)];
	if (0 != target_read_memory (sp, &registers[REGISTER_BYTE (L0_REGNUM)],
				     16 * REGISTER_RAW_SIZE (L0_REGNUM)))
	  {
	    /* fprintf_unfiltered so user can still use gdb */
	    fprintf_unfiltered (gdb_stderr,
		"Couldn't read input and local registers from core file\n");
	  }
      }
d290 1
a290 2
  else if (which == 2)
    {
d292 1
a292 1
      /* Floating point registers */
d295 10
a304 10
      if (core_reg_size >= sizeof (struct fpu))
	{
	  memcpy (&registers[REGISTER_BYTE (FP0_REGNUM)], fpuregs->fpu_regs,
		  sizeof (fpuregs->fpu_regs));
	  memcpy (&registers[REGISTER_BYTE (FPS_REGNUM)], &fpuregs->fpu_fsr,
		  sizeof (FPU_FSR_TYPE));
	}
      else
	fprintf_unfiltered (gdb_stderr, "Couldn't read float regs from core file\n");
    }
d312 1
a313 1

@


1.1.1.3
log
@import gdb-1999-10-04 snapshot
@
text
@d328 3
a330 5
  bfd_target_unknown_flavour,		/* core_flavour */
  default_check_format,			/* check_format */
  default_core_sniffer,			/* core_sniffer */
  fetch_core_registers,			/* core_read_registers */
  NULL					/* next */
@


