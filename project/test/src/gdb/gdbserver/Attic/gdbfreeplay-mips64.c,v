head	1.1;
access;
symbols
	reverse-20080717-branch:1.1.0.4
	msnyder-reverse-20080609-branch:1.1.0.2;
locks; strict;
comment	@ * @;


1.1
date	2008.06.24.00.50.23;	author msnyder;	state dead;
branches
	1.1.2.1
	1.1.4.1;
next	;

1.1.2.1
date	2008.06.24.00.50.23;	author msnyder;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2008.06.24.03.05.27;	author msnyder;	state Exp;
branches;
next	;

1.1.4.1
date	2008.09.07.04.09.34;	author msnyder;	state Exp;
branches;
next	;


desc
@@


1.1
log
@file gdbfreeplay-mips64.c was initially added on branch msnyder-reverse-20080609-branch.
@
text
@@


1.1.4.1
log
@2008-06-25  Michael Snyder  <msnyder@@specifix.com>

	* gdbfreeplay-back.c (frame_find_request): Rewrite loop to
	avoid fencepost error on last frame.

2008-06-23  Michael Snyder  <msnyder@@specifix.com>

	* gdbfreeplay.h: Replace all address values with unsigned long long.
	* gdbfreeplay-i386.c: Ditto.
	* gdbfreeplay-mips64.c: Ditto.
	* gdbfreeplay-back.c: Ditto.
	* remote-break.c: Ditto.
	* remote-break.h: Ditto.

	* configure.srv: Add configuration for mips64-linux.
	* gdbfreeplay-mips64.c: New file, back-end for mips64.
	* Makefile.in: Add rules for mips and intel back-ends.

2008-06-21  Michael Snyder  <msnyder@@specifix.com>

	* gdbfreeplay-back.c (scan_gdbreplay_file): Add support for 'W'
	reply (exiting), but not for 'X' (terminated).
	(freeplay_find_event): Make sure we always advance by at least
	one frame, unles it's the first or last frame.
	(handle_special_case): Add support for 'S' and 'C' requests.

	* gdbfreeplay-back.c (handle_special_case): No need to re-compose
	a T packet (with doctored PC) on any stop signal except SIGTRAP.

	Fix stepping/breakpoint off-by-one issues.
	* gdbfreeplay-back.c (freeplay_find_event): Fix off-by-one error
	on last_cached_frame.
	(freeplay_show_next_commands): Ditto.
	(handle_special_case): Ditto, plus don't pass breakpoint_p == TRUE
	to target_compose_T_packet if we're stopped at the end of the
	event cache.

	* gdbfreeplay-back.c (handle_special_case): Silence gcc warning.
	* gdbfreeplay-i386.c (target_compose_g_packet): Ditto.

	Add monitor gdbreplay-next command.
	* gdbfreeplay-back.c (freeplay_show_next_commands): New function.
	Echo the next set of gdb commands, in the manner of gdbreplay.
	(handle_special_case): Handle monitor gdbreplay-next command.
	(fallbacks): Catch any unhandled qRcmd requests.

	Add support for 'R' packet (restart).
	* gdbfreeplay-back.c (handle_special_case).  Add support for 'R'.
	Remove support for "monitor gdbfreeplay-echo".

	Add support for 'O' packet output.
	* remote-breakpoint.h (PLAY_O_PACKETS): New enum const.
	* gdbfreeplay-back.c (StopFrame): Discard gpos, replace with Opos.
	(scan_gdbreplay_file): Record Opos for frame if 'O' packet found.
	(frame_replay_O_packets): New function.
	(freeplay_find_event): Call frame_replay_O_packets.
	(handle_special_case): Pass PLAY_O_PACKETS to freeplay_find_event.
	Add temporary support for "monitor gdbfreeplay-echo" command
	(just for testing).

	* gdbfreeplay-back.c: Clean up round, comments, remove #if 0 etc.
	* gdbfreeplay-i386.c: Ditto.

	* gdbfreeplay-i386.c (target_pc_from_g): Accept a char * instead
	of a FILE *.
	* gdbfreeplay.h (target_pc_from_g): Change prototype.
	* gdbfreeplay-back.c (scan_gdbreplay_file): Change call.

	* gdbfreeplay-i386.c (target_compose_T_packet): Add default return.
	(target_compose_g_packet): New function.
	* gdbfreeplay.h (target_compose_g_packet): Export.
	* gdbfreeplay-back.c (handle_special_case): Give correct args
	for target_compose_T_packet.
	(fallbacks): Add handling for 'G', 'M', 'X', and 'g'.

	* gdbfreeplay-front.c: New file.  Extended gdbreplay.
	* gdbfreeplay-back.c: New file.
	* gdbfreeplay-i386.c: New file.
	* gdbfreeplay.h: New file.
	* remote-breakpoint.c: New file.
	* remote-breakpoint.h: New file.
	* Makefile.in: Add rules for gdb-freeplay.
	* configure.srv: Ditto.
	* configure.ac: Ditto.
	* configure: Regenerate.
@
text
@a0 115
/*
 * gdbfreeplay-mips64.c
 *
 * Target-dependent component of gdbfreeplay for mips64.
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "gdbfreeplay.h"

/*
 * target_pc_from_T
 *
 * Extract the PC value from the gdb protocol 'T' packet.
 * Returns PC as host unsigned long long.
 */

unsigned long long
target_pc_from_T (char *tpacket)
{
  /* Unimplimented -- make caller fall back to using g packet.  */
  return (unsigned long long) -1;
}

/*
 * target_pc_from_G
 *
 * Extract the PC value from the gdb protocol 'G' packet.
 * Returns PC as host unsigned long long.
 */

unsigned long long
target_pc_from_G (char *gpacket)
{
  char localbuf [24];

  if (gpacket[0] == '$' && gpacket[1] == 'G')
    {
      strncpy (localbuf, gpacket + 592, 16);
      localbuf[16] = '\0';
      return strtoul (localbuf, NULL, 16);
    }

  /* Fail -- just assume no legitimate PC will ever be -1...  */
  return (unsigned long long) -1;
}

/*
 * target_pc_from_g
 *
 * Extract the PC value from the gdb protocol 'g' packet reply.
 * 
 * Unlike the two above, this function accepts a FILE pointer
 * rather than a char pointer, and must read data from the file.
 *
 * Returns PC as host unsigned long long.
 */

unsigned long long
target_pc_from_g (char *gpacket)
{
  char localbuf [24];

  if (gpacket[0] == 'r' && gpacket[1] == ' ')
    {
      gpacket += 2;
      if (gpacket[0] == '+')
	gpacket++;
      if (gpacket[0] == '$')
	gpacket++;
    }

  strncpy (localbuf, gpacket + 592, 16);
  localbuf[16] = '\0';
  return strtoull (localbuf, NULL, 16);
}



/*
 * target_compose_T_packet
 *
 * On targets where DECR_PC_AFTER_BREAK is zero, this is a no-op.
 * We just send back the T packet that was sent to us.
 *
 */

char *
target_compose_T_packet (char *origTpacket, 
			 unsigned long long instruction_pc,
			 int breakpoint_p)
{
  return origTpacket;
}



/*
 * target_compose_g_packet
 *
 * Take the registers from the 'T' packet, and compose them into a 
 * 'g' packet response.  Registers for which we have no values will
 * be filled in with 'xxxx', in the manner of tracepoints.
 *
 * Returns: string, g packet reply.
 */

char *
target_compose_g_packet (char *tpac)
{
  /* stub */
  return NULL;
}
@


1.1.2.1
log
@2008-06-23  Michael Snyder  <msnyder@@specifix.com>

	* configure.srv: Add configuration for mips64-linux.
	* gdbfreeplay-mips64.c: New file, back-end for mips64.
@
text
@a0 115
/*
 * gdbfreeplay-mips64.c
 *
 * Target-dependent component of gdbfreeplay for mips64.
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "gdbfreeplay.h"

/*
 * target_pc_from_T
 *
 * Extract the PC value from the gdb protocol 'T' packet.
 * Returns PC as host unsigned long.
 */

unsigned long
target_pc_from_T (char *tpacket)
{
  /* Unimplimented -- make caller fall back to using g packet.  */
  return -1;
}

/*
 * target_pc_from_G
 *
 * Extract the PC value from the gdb protocol 'G' packet.
 * Returns PC as host unsigned long.
 */

unsigned long
target_pc_from_G (char *gpacket)
{
  char localbuf [24];

  if (gpacket[0] == '$' && gpacket[1] == 'G')
    {
      strncpy (localbuf, gpacket + 592, 8);
      localbuf[16] = '\0';
      return strtoul (localbuf, NULL, 16);
    }

  /* Fail -- just assume no legitimate PC will ever be -1...  */
  return (unsigned long) -1;
}

/*
 * target_pc_from_g
 *
 * Extract the PC value from the gdb protocol 'g' packet reply.
 * 
 * Unlike the two above, this function accepts a FILE pointer
 * rather than a char pointer, and must read data from the file.
 *
 * Returns PC as host unsigned long.
 */

unsigned long
target_pc_from_g (char *gpacket)
{
  char localbuf [24];

  if (gpacket[0] == 'r' && gpacket[1] == ' ')
    {
      gpacket += 2;
      if (gpacket[0] == '+')
	gpacket++;
      if (gpacket[0] == '$')
	gpacket++;
    }

  strncpy (localbuf, gpacket + 592, 8);
  localbuf[16] = '\0';
  return strtoul (localbuf, NULL, 16);
}



/*
 * target_compose_T_packet
 *
 * On targets where DECR_PC_AFTER_BREAK is zero, this is a no-op.
 * We just send back the T packet that was sent to us.
 *
 */

char *
target_compose_T_packet (char *origTpacket, 
			 unsigned long instruction_pc,
			 int breakpoint_p)
{
  return origTpacket;
}



/*
 * target_compose_g_packet
 *
 * Take the registers from the 'T' packet, and compose them into a 
 * 'g' packet response.  Registers for which we have no values will
 * be filled in with 'xxxx', in the manner of tracepoints.
 *
 * Returns: string, g packet reply.
 */

char *
target_compose_g_packet (char *tpac)
{
  /* stub */
  return NULL;
}
@


1.1.2.2
log
@2008-06-23  Michael Snyder  <msnyder@@specifix.com>

	* gdbfreeplay.h: Replace all address values with unsigned long long.
	* gdbfreeplay-i386.c: Ditto.
	* gdbfreeplay-mips64.c: Ditto.
	* gdbfreeplay-back.c: Ditto.
	* remote-break.c: Ditto.
	* remote-break.h: Ditto.
@
text
@d17 1
a17 1
 * Returns PC as host unsigned long long.
d20 1
a20 1
unsigned long long
d24 1
a24 1
  return (unsigned long long) -1;
d31 1
a31 1
 * Returns PC as host unsigned long long.
d34 1
a34 1
unsigned long long
d41 1
a41 1
      strncpy (localbuf, gpacket + 592, 16);
d47 1
a47 1
  return (unsigned long long) -1;
d58 1
a58 1
 * Returns PC as host unsigned long long.
d61 1
a61 1
unsigned long long
d75 1
a75 1
  strncpy (localbuf, gpacket + 592, 16);
d77 1
a77 1
  return strtoull (localbuf, NULL, 16);
d92 1
a92 1
			 unsigned long long instruction_pc,
@


