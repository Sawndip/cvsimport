head	1.38;
access;
symbols
	drow-reverse-20070409-branch:1.36.0.2
	drow-reverse-20070409-branchpoint:1.36
	gdb_6_7_1-2007-10-29-release:1.37
	gdb_6_7-2007-10-10-release:1.37
	gdb_6_7-branch:1.37.0.2
	gdb_6_7-2007-09-07-branchpoint:1.37
	insight_6_6-20070208-release:1.34
	gdb_6_6-2006-12-18-release:1.34
	gdb_6_6-branch:1.34.0.30
	gdb_6_6-2006-11-15-branchpoint:1.34
	insight_6_5-20061003-release:1.34
	gdb-csl-symbian-6_4_50_20060226-12:1.34
	gdb-csl-sourcerygxx-3_4_4-25:1.34
	nickrob-async-20060828-mergepoint:1.34
	gdb-csl-symbian-6_4_50_20060226-11:1.34
	gdb-csl-sourcerygxx-4_1-17:1.34
	gdb-csl-20060226-branch-local-2:1.34
	gdb-csl-sourcerygxx-4_1-14:1.34
	gdb-csl-sourcerygxx-4_1-13:1.34
	gdb-csl-sourcerygxx-4_1-12:1.34
	gdb-csl-sourcerygxx-3_4_4-21:1.34
	gdb_6_5-20060621-release:1.34
	gdb-csl-sourcerygxx-4_1-9:1.34
	gdb-csl-sourcerygxx-4_1-8:1.34
	gdb-csl-sourcerygxx-4_1-7:1.34
	gdb-csl-arm-2006q1-6:1.34
	gdb-csl-sourcerygxx-4_1-6:1.34
	gdb-csl-symbian-6_4_50_20060226-10:1.34
	gdb-csl-symbian-6_4_50_20060226-9:1.34
	gdb-csl-symbian-6_4_50_20060226-8:1.34
	gdb-csl-coldfire-4_1-11:1.34
	gdb-csl-sourcerygxx-3_4_4-19:1.34
	gdb-csl-coldfire-4_1-10:1.34
	gdb_6_5-branch:1.34.0.28
	gdb_6_5-2006-05-14-branchpoint:1.34
	gdb-csl-sourcerygxx-4_1-5:1.34
	nickrob-async-20060513-branch:1.34.0.26
	nickrob-async-20060513-branchpoint:1.34
	gdb-csl-sourcerygxx-4_1-4:1.34
	msnyder-reverse-20060502-branch:1.34.0.24
	msnyder-reverse-20060502-branchpoint:1.34
	gdb-csl-morpho-4_1-4:1.34
	gdb-csl-sourcerygxx-3_4_4-17:1.34
	readline_5_1-import-branch:1.34.0.22
	readline_5_1-import-branchpoint:1.34
	gdb-csl-20060226-branch-merge-to-csl-symbian-1:1.34
	gdb-csl-symbian-20060226-branch:1.34.0.20
	gdb-csl-symbian-20060226-branchpoint:1.34
	gdb-csl-20060226-branch-merge-to-csl-local-1:1.34
	msnyder-reverse-20060331-branch:1.34.0.18
	msnyder-reverse-20060331-branchpoint:1.34
	gdb-csl-available-20060303-branch:1.34.0.16
	gdb-csl-available-20060303-branchpoint:1.34
	gdb-csl-20060226-branch:1.34.0.14
	gdb-csl-20060226-branchpoint:1.34
	gdb_6_4-20051202-release:1.34
	msnyder-fork-checkpoint-branch:1.34.0.12
	msnyder-fork-checkpoint-branchpoint:1.34
	gdb-csl-gxxpro-6_3-branch:1.34.0.10
	gdb-csl-gxxpro-6_3-branchpoint:1.34
	gdb_6_4-branch:1.34.0.8
	gdb_6_4-2005-11-01-branchpoint:1.34
	gdb-csl-arm-20051020-branch:1.34.0.6
	gdb-csl-arm-20051020-branchpoint:1.34
	msnyder-tracepoint-checkpoint-branch:1.34.0.4
	msnyder-tracepoint-checkpoint-branchpoint:1.34
	gdb-csl-arm-20050325-2005-q1b:1.34
	gdb-csl-arm-20050325-2005-q1a:1.34
	csl-arm-20050325-branch:1.34.0.2
	csl-arm-20050325-branchpoint:1.34
	gdb-post-i18n-errorwarning-20050211:1.34
	gdb-pre-i18n-errorwarning-20050211:1.34
	gdb_6_3-20041109-release:1.29
	gdb_6_3-branch:1.29.0.12
	gdb_6_3-20041019-branchpoint:1.29
	drow_intercu-merge-20040921:1.29
	drow_intercu-merge-20040915:1.29
	jimb-gdb_6_2-e500-branch:1.29.0.14
	jimb-gdb_6_2-e500-branchpoint:1.29
	gdb_6_2-20040730-release:1.29
	gdb_6_2-branch:1.29.0.10
	gdb_6_2-2004-07-10-gmt-branchpoint:1.29
	gdb_6_1_1-20040616-release:1.29
	gdb_6_1-2004-04-05-release:1.29
	drow_intercu-merge-20040402:1.29
	drow_intercu-merge-20040327:1.29
	ezannoni_pie-20040323-branch:1.29.0.8
	ezannoni_pie-20040323-branchpoint:1.29
	cagney_tramp-20040321-mergepoint:1.29
	cagney_tramp-20040309-branch:1.29.0.6
	cagney_tramp-20040309-branchpoint:1.29
	gdb_6_1-branch:1.29.0.4
	gdb_6_1-2004-03-01-gmt-branchpoint:1.29
	drow_intercu-20040221-branch:1.29.0.2
	drow_intercu-20040221-branchpoint:1.29
	cagney_bfdfile-20040213-branch:1.28.0.8
	cagney_bfdfile-20040213-branchpoint:1.28
	drow-cplus-merge-20040208:1.28
	carlton_dictionary-20040126-merge:1.28
	cagney_bigcore-20040122-branch:1.28.0.6
	cagney_bigcore-20040122-branchpoint:1.28
	drow-cplus-merge-20040113:1.28
	drow-cplus-merge-20031224:1.28
	drow-cplus-merge-20031220:1.28
	carlton_dictionary-20031215-merge:1.28
	drow-cplus-merge-20031214:1.28
	carlton-dictionary-20031111-merge:1.28
	gdb_6_0-2003-10-04-release:1.27
	kettenis_sparc-20030918-branch:1.28.0.4
	kettenis_sparc-20030918-branchpoint:1.28
	carlton_dictionary-20030917-merge:1.28
	ezannoni_pie-20030916-branchpoint:1.28
	ezannoni_pie-20030916-branch:1.28.0.2
	cagney_x86i386-20030821-branch:1.27.0.8
	cagney_x86i386-20030821-branchpoint:1.27
	carlton_dictionary-20030805-merge:1.27
	carlton_dictionary-20030627-merge:1.27
	gdb_6_0-branch:1.27.0.6
	gdb_6_0-2003-06-23-branchpoint:1.27
	jimb-ppc64-linux-20030613-branch:1.27.0.4
	jimb-ppc64-linux-20030613-branchpoint:1.27
	cagney_convert-20030606-branch:1.27.0.2
	cagney_convert-20030606-branchpoint:1.27
	cagney_writestrings-20030508-branch:1.26.0.44
	cagney_writestrings-20030508-branchpoint:1.26
	jimb-ppc64-linux-20030528-branch:1.26.0.42
	jimb-ppc64-linux-20030528-branchpoint:1.26
	carlton_dictionary-20030523-merge:1.26
	cagney_fileio-20030521-branch:1.26.0.40
	cagney_fileio-20030521-branchpoint:1.26
	kettenis_i386newframe-20030517-mergepoint:1.26
	jimb-ppc64-linux-20030509-branch:1.26.0.38
	jimb-ppc64-linux-20030509-branchpoint:1.26
	kettenis_i386newframe-20030504-mergepoint:1.26
	carlton_dictionary-20030430-merge:1.26
	kettenis_i386newframe-20030419-branch:1.26.0.36
	kettenis_i386newframe-20030419-branchpoint:1.26
	carlton_dictionary-20030416-merge:1.26
	cagney_frameaddr-20030409-mergepoint:1.26
	kettenis_i386newframe-20030406-branch:1.26.0.34
	kettenis_i386newframe-20030406-branchpoint:1.26
	cagney_frameaddr-20030403-branchpoint:1.26
	cagney_frameaddr-20030403-branch:1.26.0.32
	cagney_framebase-20030330-mergepoint:1.26
	cagney_framebase-20030326-branch:1.26.0.30
	cagney_framebase-20030326-branchpoint:1.26
	cagney_lazyid-20030317-branch:1.26.0.28
	cagney_lazyid-20030317-branchpoint:1.26
	kettenis-i386newframe-20030316-mergepoint:1.26
	offbyone-20030313-branch:1.26.0.26
	offbyone-20030313-branchpoint:1.26
	kettenis-i386newframe-20030308-branch:1.26.0.24
	kettenis-i386newframe-20030308-branchpoint:1.26
	carlton_dictionary-20030305-merge:1.26
	cagney_offbyone-20030303-branch:1.26.0.22
	cagney_offbyone-20030303-branchpoint:1.26
	carlton_dictionary-20030207-merge:1.26
	interps-20030203-mergepoint:1.26
	interps-20030202-branch:1.26.0.20
	interps-20030202-branchpoint:1.26
	cagney-unwind-20030108-branch:1.26.0.18
	cagney-unwind-20030108-branchpoint:1.26
	carlton_dictionary-20021223-merge:1.26
	gdb_5_3-2002-12-12-release:1.26
	carlton_dictionary-20021115-merge:1.26
	kseitz_interps-20021105-merge:1.26
	kseitz_interps-20021103-merge:1.26
	drow-cplus-merge-20021020:1.26
	drow-cplus-merge-20021025:1.26
	carlton_dictionary-20021025-merge:1.26
	carlton_dictionary-20021011-merge:1.26
	drow-cplus-branch:1.26.0.16
	drow-cplus-branchpoint:1.26
	kseitz_interps-20020930-merge:1.26
	carlton_dictionary-20020927-merge:1.26
	carlton_dictionary-branch:1.26.0.14
	carlton_dictionary-20020920-branchpoint:1.26
	gdb_5_3-branch:1.26.0.12
	gdb_5_3-2002-09-04-branchpoint:1.26
	kseitz_interps-20020829-merge:1.26
	cagney_sysregs-20020825-branch:1.26.0.10
	cagney_sysregs-20020825-branchpoint:1.26
	readline_4_3-import-branch:1.26.0.8
	readline_4_3-import-branchpoint:1.26
	gdb_5_2_1-2002-07-23-release:1.17
	kseitz_interps-20020528-branch:1.26.0.6
	kseitz_interps-20020528-branchpoint:1.26
	cagney_regbuf-20020515-branch:1.26.0.4
	cagney_regbuf-20020515-branchpoint:1.26
	jimb-macro-020506-branch:1.26.0.2
	jimb-macro-020506-branchpoint:1.26
	gdb_5_2-2002-04-29-release:1.17
	gdb_5_2-branch:1.17.0.2
	gdb_5_2-2002-03-03-branchpoint:1.17
	gdb_5_1_1-2002-01-24-release:1.6
	gdb_5_1_0_1-2002-01-03-release:1.6
	cygnus_cvs_20020108_pre:1.7
	gdb_5_1_0_1-2002-01-03-branchpoint:1.6
	gdb_5_1_0_1-2002-01-03-branch:1.6.0.8
	gdb_5_1-2001-11-21-release:1.6
	gdb_s390-2001-09-26-branch:1.6.0.6
	gdb_s390-2001-09-26-branchpoint:1.6
	gdb_5_1-2001-07-29-branch:1.6.0.4
	gdb_5_1-2001-07-29-branchpoint:1.6
	dberlin-typesystem-branch:1.6.0.2
	dberlin-typesystem-branchpoint:1.6
	gdb-post-ptid_t-2001-05-03:1.6
	gdb-pre-ptid_t-2001-05-03:1.6
	insight-precleanup-2001-01-01:1.4
	gdb-post-protoization-2000-07-29:1.4
	gdb-pre-protoization-2000-07-29:1.4
	gdb-premipsmulti-2000-06-06-branch:1.4.0.2
	gdb-premipsmulti-2000-06-06-branchpoint:1.4
	gdb-post-params-removal-2000-06-04:1.4
	gdb-pre-params-removal-2000-06-04:1.4
	gdb-post-params-removal-2000-05-28:1.4
	gdb-pre-params-removal-2000-05-28:1.3
	gdb_5_0-2000-05-19-release:1.2
	gdb_4_18_2-2000-05-18-release:1.2
	gdb_4_95_1-2000-05-11-snapshot:1.2
	gdb_4_95_0-2000-04-27-snapshot:1.2
	gdb_5_0-2000-04-10-branch:1.2.0.2
	gdb_5_0-2000-04-10-branchpoint:1.2
	repo-unification-2000-02-06:1.1.1.7
	insight-2000-02-04:1.1.1.7
	gdb-2000-02-04:1.1.1.7
	gdb-2000-02-02:1.1.1.7
	gdb-2000-02-01:1.1.1.7
	gdb-2000-01-31:1.1.1.7
	gdb-2000-01-26:1.1.1.7
	gdb-2000-01-24:1.1.1.7
	gdb-2000-01-17:1.1.1.7
	gdb-2000-01-10:1.1.1.7
	gdb-2000-01-05:1.1.1.7
	gdb-1999-12-21:1.1.1.7
	gdb-1999-12-13:1.1.1.7
	gdb-1999-12-07:1.1.1.7
	gdb-1999-12-06:1.1.1.7
	gdb-1999-11-16:1.1.1.7
	gdb-1999-11-08:1.1.1.7
	gdb-1999-11-01:1.1.1.7
	gdb-1999-10-25:1.1.1.7
	gdb-1999-10-18:1.1.1.7
	gdb-1999-10-11:1.1.1.7
	gdb-1999-10-04:1.1.1.7
	gdb-1999-09-28:1.1.1.7
	gdb-1999-09-21:1.1.1.7
	gdb-1999-09-13:1.1.1.7
	gdb-1999-09-08:1.1.1.7
	gdb-1999-08-30:1.1.1.6
	gdb-1999-08-23:1.1.1.5
	gdb-1999-08-16:1.1.1.5
	gdb-1999-08-09:1.1.1.5
	gdb-1999-08-02:1.1.1.5
	gdb-1999-07-26:1.1.1.5
	gdb-1999-07-19:1.1.1.5
	gdb-1999-07-12:1.1.1.5
	gdb-post-reformat-19990707:1.1.1.5
	gdb-1999-07-07-post-reformat-snapshot:1.1.1.5
	gdb-pre-reformat-19990707:1.1.1.4
	gdb-1999-07-07:1.1.1.4
	gdb-1999-07-05:1.1.1.4
	gdb-1999-06-28:1.1.1.4
	gdb-1999-06-21:1.1.1.4
	gdb-1999-06-14:1.1.1.4
	gdb-1999-06-07:1.1.1.4
	gdb-1999-06-01:1.1.1.4
	gdb-4_18-branch:1.1.1.1.0.2
	gdb-4_18-release:1.1.1.1
	gdb-1999-05-25:1.1.1.4
	gdb-1999-05-19:1.1.1.3
	gdb-1999-05-10:1.1.1.3
	gdb-19990504:1.1.1.3
	gdb-19990422:1.1.1.2
	SNAPSHOT:1.1.1
	gdb-4_18:1.1.1.1
	GDB_4_18:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.38
date	2007.10.12.16.13.20;	author uweigand;	state dead;
branches;
next	1.37;

1.37
date	2007.08.23.18.08.47;	author brobecke;	state Exp;
branches;
next	1.36;

1.36
date	2007.03.30.12.57.44;	author drow;	state Exp;
branches;
next	1.35;

1.35
date	2007.01.09.17.59.03;	author drow;	state Exp;
branches;
next	1.34;

1.34
date	2004.10.31.17.57.43;	author cagney;	state Exp;
branches;
next	1.33;

1.33
date	2004.10.31.04.33.14;	author cagney;	state Exp;
branches;
next	1.32;

1.32
date	2004.10.31.03.42.52;	author cagney;	state Exp;
branches;
next	1.31;

1.31
date	2004.10.31.02.59.21;	author cagney;	state Exp;
branches;
next	1.30;

1.30
date	2004.10.30.21.16.10;	author cagney;	state Exp;
branches;
next	1.29;

1.29
date	2004.02.16.23.59.43;	author cagney;	state Exp;
branches;
next	1.28;

1.28
date	2003.09.03.15.02.49;	author cagney;	state Exp;
branches
	1.28.2.1;
next	1.27;

1.27
date	2003.05.29.23.02.53;	author rth;	state Exp;
branches;
next	1.26;

1.26
date	2002.04.26.07.05.35;	author thorpej;	state Exp;
branches
	1.26.14.1
	1.26.16.1
	1.26.36.1;
next	1.25;

1.25
date	2002.04.25.06.22.22;	author thorpej;	state Exp;
branches;
next	1.24;

1.24
date	2002.04.25.05.06.08;	author thorpej;	state Exp;
branches;
next	1.23;

1.23
date	2002.04.25.02.28.57;	author thorpej;	state Exp;
branches;
next	1.22;

1.22
date	2002.04.21.20.27.29;	author thorpej;	state Exp;
branches;
next	1.21;

1.21
date	2002.04.21.17.54.50;	author thorpej;	state Exp;
branches;
next	1.20;

1.20
date	2002.04.21.17.30.09;	author thorpej;	state Exp;
branches;
next	1.19;

1.19
date	2002.04.21.16.52.39;	author thorpej;	state Exp;
branches;
next	1.18;

1.18
date	2002.04.19.05.11.53;	author thorpej;	state Exp;
branches;
next	1.17;

1.17
date	2002.02.24.22.56.04;	author cagney;	state Exp;
branches;
next	1.16;

1.16
date	2002.01.29.04.42.34;	author cagney;	state Exp;
branches;
next	1.15;

1.15
date	2002.01.20.18.05.51;	author cagney;	state Exp;
branches;
next	1.14;

1.14
date	2002.01.20.01.33.15;	author thorpej;	state Exp;
branches;
next	1.13;

1.13
date	2002.01.20.00.23.10;	author thorpej;	state Exp;
branches;
next	1.12;

1.12
date	2002.01.19.20.22.28;	author thorpej;	state Exp;
branches;
next	1.11;

1.11
date	2002.01.19.06.44.56;	author thorpej;	state Exp;
branches;
next	1.10;

1.10
date	2002.01.19.05.26.47;	author thorpej;	state Exp;
branches;
next	1.9;

1.9
date	2002.01.19.00.09.16;	author thorpej;	state Exp;
branches;
next	1.8;

1.8
date	2002.01.18.18.00.44;	author thorpej;	state Exp;
branches;
next	1.7;

1.7
date	2001.12.15.16.53.23;	author cagney;	state Exp;
branches;
next	1.6;

1.6
date	2001.03.14.23.23.08;	author cagney;	state Exp;
branches;
next	1.5;

1.5
date	2001.03.06.08.21.21;	author kevinb;	state Exp;
branches;
next	1.4;

1.4
date	2000.05.28.01.12.34;	author kevinb;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.14.19.12.38;	author jimb;	state Exp;
branches;
next	1.2;

1.2
date	2000.02.22.19.17.37;	author jimb;	state Exp;
branches;
next	1.1;

1.1
date	99.04.16.01.34.14;	author shebs;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.16.01.34.14;	author shebs;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.04.26.18.26.08;	author shebs;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	99.05.05.14.43.15;	author shebs;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	99.05.25.18.04.07;	author jsm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	99.07.07.20.11.58;	author jsm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	99.08.31.01.06.45;	author jsm;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	99.09.08.23.59.48;	author shebs;	state Exp;
branches;
next	;

1.26.14.1
date	2003.06.27.21.50.14;	author carlton;	state Exp;
branches;
next	1.26.14.2;

1.26.14.2
date	2003.09.17.21.28.37;	author carlton;	state Exp;
branches;
next	;

1.26.16.1
date	2003.12.14.20.27.35;	author drow;	state Exp;
branches;
next	;

1.26.36.1
date	2003.05.30.02.31.44;	author rth;	state Exp;
branches;
next	;

1.28.2.1
date	2004.03.23.20.30.07;	author ezannoni;	state Exp;
branches;
next	;


desc
@@


1.38
log
@	* alpha-mdebug-tdep.c: Include "gdb_string.h".
	(find_proc_desc): Add fix-up code for setjmp procedure descriptor.
	* mdebugread.c (parse_procedure): Remove setjmp fix-up code.
	* Makefile.in (alpha-mdebug-tdep.o): Update dependencies.

	* config/alpha/alpha.mt (DEPRECATED_TM_FILE): Remove.
	* config/alpha/alpha-linux.mt (DEPRECATED_TM_FILE): Remove.
	* config/alpha/alpha-osf1.mt (DEPRECATED_TM_FILE): Remove.
	* config/alpha/fbsd.mt (DEPRECATED_TM_FILE): Remove.
	* config/alpha/tm-alpha.h: Remove file.
@
text
@/* Definitions to make GDB run on an Alpha box under OSF1.  This is
   also used by the Alpha GNU/Linux target.

   Copyright 1993, 1994, 1995, 1996, 1998, 1999, 2000, 2002, 2004, 2007
   Free Software Foundation, Inc.

   This file is part of GDB.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

#ifndef TM_ALPHA_H
#define TM_ALPHA_H

#define RA_REGNUM 26		/* XXXJRT needed by mdebugread.c */

#endif /* TM_ALPHA_H */
@


1.37
log
@        Switch the license of all .c files to GPLv3.
        Switch the license of all .h files to GPLv3.
        Switch the license of all .cc files to GPLv3.
@
text
@@


1.36
log
@	* Makefile.in (SFILES): Remove nlmread.c.
	(COMMON_OBS): Remove nlmread.o.
	(nlmread.o): Delete rule.
	* README: Delete reference to remote-st.c.
	* acinclude.m4 (CY_AC_TCL_LYNX_POSIX): Delete.
	* defs.h (enum gdb_osabi): Delete GDB_OSABI_NETWARE and
	GDB_OSABI_LYNXOS.
	* i386-tdep.c (i386_nw_init_abi, i386_nlm_osabi_sniffer): Delete.
	(_initialize_i386_tdep): Do not reference them.
	* nlmread.c: Delete file.
	* osabi.c (gdb_osabi_names): Remove NetWare and LynxOS.
	* target.c: Doc update.
	* thread.c: Delete commented include.
	* config/alpha/tm-alpha.h: Doc update.

	* gdb.texinfo (Startup): Delete references to some alternate
	names for .gdbinit.
	(Thread): Remove LynxOS reference.
	(Tandem ST2000): Delete target-specific documentation.
	* gdbint.texinfo (Symbol Handling): Remove mention of NLM.
	(Target Architecture Definition): Remove mention of GDB_OSABI_NETWARE
	and GDB_OSABI_LYNXOS.

	* config/netware.exp: Delete file.
@
text
@d11 1
a11 1
   the Free Software Foundation; either version 2 of the License, or
d20 1
a20 3
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */
@


1.35
log
@Copyright updates for 2007.
@
text
@d2 1
a2 1
   also used by the Alpha/Netware and Alpha GNU/Linux targets.
@


1.34
log
@2004-10-31  Andrew Cagney  <cagney@@gnu.org>

	* mdebugread.h (MDEBUG_EFI_SYMBOL_NAME): Define.
	* mdebugread.c (MDEBUG_EFI_SYMBOL_NAME): Delete.
	* config/alpha/tm-alpha.h (MDEBUG_EFI_SYMBOL_NAME): Delete.
	* config/mips/tm-mips.h (MDEBUG_EFI_SYMBOL_NAME): Delete.
@
text
@d4 2
a5 2
   Copyright 1993, 1994, 1995, 1996, 1998, 1999, 2000, 2002, 2004 Free
   Software Foundation, Inc.
@


1.33
log
@2004-10-30  Andrew Cagney  <cagney@@gnu.org>

	* mdebugread.h: Include "coff/sym.h" and "coff/symconst.h".
	(struct mdebug_extra_func_info): Define.
	* config/alpha/tm-alpha.h: Delete same.
	* config/mips/tm-mips.h: Delete same.
	* mdebugread.c: Delete same.
	* Makefile.in: Update dependencies.
	* mips-mdebug-tdep.c: Include "mdebugread.h".
@
text
@a26 5
/* Special symbol found in blocks associated with routines.  We can hang
   alpha_extra_func_info_t's off of this.  */

#define MDEBUG_EFI_SYMBOL_NAME "__GDB_EFI_INFO__"

@


1.32
log
@2004-10-30  Andrew Cagney  <cagney@@gnu.org>

	* objfiles.c: Include "mdebugread.h".
	* mdebugread.c: Include "mdebugread.h".
	(ecoff_relocate_cfi): Delete.
	* config/alpha/tm-alpha.h (ecoff_relcate_cfi): Delete.
	* config/mips/tm-mips.h (ecoff_relcate_cfi): Delete.
	* mdebugread.h (ecoff_relocate_efi): New file.
	* Makefile.in: Update dependencies.
@
text
@a26 7
#include "bfd.h"
#include "coff/sym.h"		/* Needed for PDR below.  */
#include "coff/symconst.h"

struct frame_info;
struct symbol;

a33 10
/* Specific information about a procedure.
   This overlays the ALPHA's PDR records, 
   alpharead.c (ab)uses this to save memory */

struct mdebug_extra_func_info
{
  long numargs;		/* number of args to procedure (was iopt) */
  PDR pdr;			/* Procedure descriptor record */
};

@


1.31
log
@2004-10-30  Andrew Cagney  <cagney@@gnu.org>

	* config/alpha/tm-alpha.h (MDEBUG_EFI_SYMBOL_NAME): Rename
	MIPS_EFI_SYMBOL_NAME.
	(mips_extra_func_info_t, mips_extra_func_info): Delete.
	(struct mdebug_extra_func_info): Replace struct
	alpha_extra_func_info and alpha_extra_func_info_t.
	* config/mips/tm-mips.h (MDEBUG_EFI_SYMBOL_NAME): Rename
	MIPS_EFI_SYMBOL_NAME.
	(struct mdebug_extra_func_info): Replace struct
	alpha_extra_func_info and alpha_extra_func_info_t.
	* objfiles.c, mips-tdep.c, mips-mdebug-tdep.c: Update.
	* mdebugread.c, alpha-mdebug-tdep.c:
@
text
@a37 1
extern void ecoff_relocate_efi (struct symbol *, CORE_ADDR);
@


1.30
log
@2004-10-30  Andrew Cagney  <cagney@@gnu.org>

	* alpha-tdep.c (alpha_setup_arbitrary_frame): Delete.
	* config/alpha/tm-alpha.h (SETUP_ARBITRARY_FRAME): Delete.
	(alpha_setup_arbitrary_frame): Delete.
	* mips-tdep.c (setup_arbitrary_frame): Delete.
	* config/mips/tm-mips.h (SETUP_ARBITRARY_FRAME): Delete.
	(setup_arbitrary_frame): Delete.
	* stack.c (parse_frame_specification_1): When specified, call
	create_new_frame with two parameters.  Delete #ifdef
	SETUP_ARBITRARY_FRAME.
@
text
@d37 1
a37 1
#define MIPS_EFI_SYMBOL_NAME "__GDB_EFI_INFO__"
d46 5
a50 13
typedef struct alpha_extra_func_info
  {
    long numargs;		/* number of args to procedure (was iopt) */
    PDR pdr;			/* Procedure descriptor record */
  }
 *alpha_extra_func_info_t;

/* Define the extra_func_info that mipsread.c needs.
   FIXME: We should define our own PDR interface, perhaps in a separate
   header file. This would get rid of the <bfd.h> inclusion in all sources
   and would abstract the mips/alpha interface from ecoff.  */
#define mips_extra_func_info alpha_extra_func_info
#define mips_extra_func_info_t alpha_extra_func_info_t
@


1.29
log
@2004-02-09  Andrew Cagney  <cagney@@redhat.com>

	* config/alpha/tm-nbsd.h: Update copyright, delete #undef
	START_INFERIOR_TRAPS_EXPECTED.
	* config/alpha/tm-fbsd.h: Update copyright, delete #undef
	START_INFERIOR_TRAPS_EXPECTED.
	* config/alpha/tm-alphalinux.h (START_INFERIOR_TRAPS_EXPECTED):
	Delete macro.
	* config/alpha/tm-alpha.h (START_INFERIOR_TRAPS_EXPECTED): Delete
	macro, moved to "nm-osf.h".  Update copyright.
	* config/alpha/nm-osf.h (START_INFERIOR_TRAPS_EXPECTED): Define,
	update copyright.
@
text
@a59 14
/* It takes two values to specify a frame on the ALPHA.  Sigh.

   In fact, at the moment, the *PC* is the primary value that sets up
   a frame.  The PC is looked up to see what function it's in; symbol
   information from that function tells us which register is the frame
   pointer base, and what offset from there is the "virtual frame pointer".
   (This is usually an offset from SP.)  FIXME -- this should be cleaned
   up so that the primary value is the SP, and the PC is used to disambiguate
   multiple functions with the same SP that are at different stack levels. */

#define SETUP_ARBITRARY_FRAME(argc, argv) \
  alpha_setup_arbitrary_frame (argc, argv)
extern struct frame_info *alpha_setup_arbitrary_frame (int, CORE_ADDR *);

@


1.28
log
@2003-09-03  Andrew Cagney  <cagney@@redhat.com>

	* defs.h: Do not include "arch-utils.h".
	(GDB_MULTI_ARCH): If not defined, set to GDB_MULTI_ARCH_PARTIAL or
	GDB_MULTI_ARCH_PURE.
	* configure.in (GDB_MULTI_ARCH): Do not define.
	* configure, config.in: Regenerate.
	* configure.tgt: Do not set variable "gdb_multi_arch".
	* config/s390/s390x.mt (GDB_MULTI_ARCH): Delete.
	* config/s390/s390.mt (GDB_MULTI_ARCH): Delete.
	* config/i386/x86-64linux.mt (GDB_MULTI_ARCH): Delete.
	* config/v850/v850.mt (TM_FILE): Delete disabled definition.
	* config/m68hc11/m68hc11.mt (TM_FILE): Delete definition.
	* config/vax/tm-vax.h (GDB_MULTI_ARCH): Delete definition.
	* config/sparc/tm-sparc.h (GDB_MULTI_ARCH): Delete definition.
	* config/sparc/tm-sun4sol2.h (GDB_MULTI_ARCH): Delete definition.
	* config/sparc/tm-nbsd.h (GDB_MULTI_ARCH): Delete definition.
	* config/sparc/tm-linux.h (GDB_MULTI_ARCH): Delete definition.
	* config/sparc/tm-sp64.h (GDB_MULTI_ARCH): Delete definition.
	* config/pa/tm-hppa64.h (GDB_MULTI_ARCH): Delete definition.
	* config/ns32k/tm-ns32k.h (GDB_MULTI_ARCH): Delete definition.
	* config/m68k/tm-m68k.h (GDB_MULTI_ARCH): Delete definition.
	* config/i386/tm-i386.h (GDB_MULTI_ARCH): Delete definition.
	* config/h8300/tm-h8300.h (GDB_MULTI_ARCH): Delete definition.
	* config/frv/tm-frv.h (GDB_MULTI_ARCH): Delete definition.
	* config/alpha/tm-alpha.h (GDB_MULTI_ARCH): Delete definition.
@
text
@d4 1
a4 1
   Copyright 1993, 1994, 1995, 1996, 1998, 1999, 2000, 2002 Free
a32 5

/* Number of traps that happen between exec'ing the shell
   to run an inferior, and when we finally get to
   the inferior code.  This is 2 on most implementations.  */
#define START_INFERIOR_TRAPS_EXPECTED 3
@


1.28.2.1
log
@merge mainline changes into branch
@
text
@d4 1
a4 1
   Copyright 1993, 1994, 1995, 1996, 1998, 1999, 2000, 2002, 2004 Free
d33 5
@


1.27
log
@	* alpha-linux-tdep.c (alpha_linux_sigtramp_offset_1): New.
	(alpha_linux_sigtramp_offset): Use it.  Make static.
	(alpha_linux_sigcontext_addr): Handle __NR_rt_sigreturn;
	update for new frame model.
	* alpha-mdebug-tdep.c: New file.
	* alpha-osf1-tdep.c (alpha_call_dummy_address): Move from alpha-tdep.c.
	(alpha_osf1_init_abi): Install it.
	* alpha-tdep.c (PROC_*): Move to alpha-mdebug-tdep.c.
	(linked_proc_desc_table): Remove.
	(alpha_frame_past_sigtramp_frame): Remove.
	(alpha_dynamic_sigtramp_offset): Remove.
	(ALPHA_PROC_SIGTRAMP_MAGIC): Remove.
	(alpha_proc_desc_is_dyn_sigtramp): Remove.
	(alpha_set_proc_desc_is_dyn_sigtramp): Remove.
	(push_sigtramp_desc): Remove.
	(alpha_cannot_fetch_register): Use ALPHA_FP_REGNUM.
	(alpha_cannot_store_register): Likewise.
	(alpha_sigcontext_addr): Remove.
	(alpha_find_saved_regs): Remove.
	(alpha_frame_init_saved_regs): Remove.
	(alpha_init_frame_pc_first): Remove.
	(read_next_frame_reg): Remove.
	(alpha_frame_saved_pc): Remove.
	(alpha_saved_pc_after_call): Remove.
	(temp_proc_desc, temp_saved_regs): Remove.
	(alpha_about_to_return): Remove.
	(cached_proc_desc): Remove.
	(alpha_frame_chain): Remove.
	(alpha_print_extra_frame_info): Remove.
	(alpha_init_extra_frame_info): Remove.
	(alpha_frame_locals_address): Remove.
	(alpha_frame_args_address): Remove.
	(alpha_push_arguments): Use ALPHA_REGISTER_BYTES not sizeof CORE_ADDR.
	(alpha_push_dummy_frame): Remove.
	(alpha_pop_frame): Remove.
	(alpha_after_prologue): Rename from after_prologue; remove mdebug bits.
	(alpha_read_insn): New.
	(alpha_skip_prologue): Merge alpha_skip_prologue_internal; adjust
	for different insn encodings.
	(alpha_in_lenient_prologue): Remove.
	(struct alpha_sigtramp_unwind_cache): New.
	(alpha_sigtramp_frame_unwind_cache): New.
	(alpha_sigtramp_register_address): New.
	(alpha_sigtramp_frame_this_id): New.
	(alpha_sigtramp_frame_prev_register): New.
	(alpha_sigtramp_frame_unwind): New.
	(alpha_sigtramp_frame_p): New.
	(struct alpha_heuristic_unwind_cache): New.
	(alpha_heuristic_proc_start): Rename from heuristic_proc_start;
	don't count nop insns that occur between functions.
	(alpha_heuristic_frame_unwind_cache): New; incorporate much of
	heuristic_proc_desc, but without the mdebug wrapping.
	(alpha_heuristic_frame_this_id): New.
	(alpha_heuristic_frame_prev_register): New.
	(alpha_heuristic_frame_unwind): New.
	(alpha_heuristic_frame_p): New.
	(alpha_heuristic_frame_base_address): New.
	(alpha_heuristic_frame_base): New.
	(alpha_unwind_dummy_id): New.
	(alpha_unwind_pc): New.
	(alpha_gdbarch_init): Don't set skip_sigtramp_frame.  Kill use of
	frame related deprecated initializations; install replacements.
	(alpha_dump_tdep): Remove.
	* alpha-tdep.h (struct gdbarch_tdep): Remove skip_sigtramp_frame.
	(alpha_read_insn, alpha_after_prologue,
	alpha_heuristic_frame_unwind_cache, alpha_heuristic_frame_this_id,
	alpha_heuristic_frame_prev_register,
	alpha_heuristic_frame_base_address, alpha_mdebug_init_abi): Declare.
	* config/alpha/alpha-linux.mt (TDEPFILES): Add alpha-mdebug-tdep.o.
	* config/alpha/tm-alpha.h (PRINT_EXTRA_FRAME_INFO): Remove.
	* config/alpha/tm-alphalinux.h (SIGTRAMP_START, SIGTRAMP_END): Remove.
@
text
@a26 2
#define GDB_MULTI_ARCH GDB_MULTI_ARCH_PARTIAL

@


1.26
log
@* alpha-tdep.h (gdbarch_tdep): Add sigcontext_addr member.
* alpha-tdep.c (alpha_sigcontext_addr): New function.
(alpha_find_saved_regs): Use alpha_sigcontext_addr.
(alpha_gdbarch_init): Initialize tdep->sigcontext_addr.
* alpha-linux-tdep.c: Include frame.h.
(alpha_linux_sigcontext_addr): New function.
(alpha_linux_init_abi): Set tdep->sigcontext_addr to
alpha_linux_sigcontext_addr.
* alpha-osf1-tdep.c: Include gdbcore.h.
(alpha_osf1_sigcontext_addr): New function.
(alpha_osf1_init_abi): Set tdep->sigcontext_addr to
alpha_osf1_sigcontext_addr.
* config/alpha/tm-alpha.h (SIGCONTEXT_ADDR): Remove.
* config/alpha/tm-alphalinux.h (SIGCONTEXT_ADDR): Remove.
@
text
@a66 5

#define PRINT_EXTRA_FRAME_INFO(fi) alpha_print_extra_frame_info ((fi))
extern void alpha_print_extra_frame_info (struct frame_info *);


@


1.26.16.1
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@d27 2
d66 5
@


1.26.14.1
log
@2003-06-27  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton_dictionary-20030627-merge.
@
text
@d67 5
@


1.26.14.2
log
@2003-09-17  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton_dictionary-20030917-merge.
@
text
@d27 2
@


1.26.36.1
log
@	* alpha-linux-tdep.c (alpha_linux_sigtramp_offset_1): New.
	(alpha_linux_sigtramp_offset): Use it.  Make static.
	(alpha_linux_sigcontext_addr): Handle __NR_rt_sigreturn;
	update for new frame model.
	* alpha-mdebug-tdep.c: New file.
	* alpha-osf1-tdep.c (alpha_call_dummy_address): Move from alpha-tdep.c.
	(alpha_osf1_init_abi): Install it.
	* alpha-tdep.c (PROC_*): Move to alpha-mdebug-tdep.c.
	(linked_proc_desc_table): Remove.
	(alpha_frame_past_sigtramp_frame): Remove.
	(alpha_dynamic_sigtramp_offset): Remove.
	(ALPHA_PROC_SIGTRAMP_MAGIC): Remove.
	(alpha_proc_desc_is_dyn_sigtramp): Remove.
	(alpha_set_proc_desc_is_dyn_sigtramp): Remove.
	(push_sigtramp_desc): Remove.
	(alpha_cannot_fetch_register): Use ALPHA_FP_REGNUM.
	(alpha_cannot_store_register): Likewise.
	(alpha_sigcontext_addr): Remove.
	(alpha_find_saved_regs): Remove.
	(alpha_frame_init_saved_regs): Remove.
	(alpha_init_frame_pc_first): Remove.
	(read_next_frame_reg): Remove.
	(alpha_frame_saved_pc): Remove.
	(alpha_saved_pc_after_call): Remove.
	(temp_proc_desc, temp_saved_regs): Remove.
	(alpha_about_to_return): Remove.
	(cached_proc_desc): Remove.
	(alpha_frame_chain): Remove.
	(alpha_print_extra_frame_info): Remove.
	(alpha_init_extra_frame_info): Remove.
	(alpha_frame_locals_address): Remove.
	(alpha_frame_args_address): Remove.
	(alpha_push_arguments): Use ALPHA_REGISTER_BYTES not sizeof CORE_ADDR.
	(alpha_push_dummy_frame): Remove.
	(alpha_pop_frame): Remove.
	(alpha_after_prologue): Rename from after_prologue; remove mdebug bits.
	(alpha_read_insn): New.
	(alpha_skip_prologue): Merge alpha_skip_prologue_internal; adjust
	for different insn encodings.
	(alpha_in_lenient_prologue): Remove.
	(struct alpha_sigtramp_unwind_cache): New.
	(alpha_sigtramp_frame_unwind_cache): New.
	(alpha_sigtramp_register_address): New.
	(alpha_sigtramp_frame_this_id): New.
	(alpha_sigtramp_frame_prev_register): New.
	(alpha_sigtramp_frame_unwind): New.
	(alpha_sigtramp_frame_p): New.
	(struct alpha_heuristic_unwind_cache): New.
	(alpha_heuristic_proc_start): Rename from heuristic_proc_start;
	don't count nop insns that occur between functions.
	(alpha_heuristic_frame_unwind_cache): New; incorporate much of
	heuristic_proc_desc, but without the mdebug wrapping.
	(alpha_heuristic_frame_this_id): New.
	(alpha_heuristic_frame_prev_register): New.
	(alpha_heuristic_frame_unwind): New.
	(alpha_heuristic_frame_p): New.
	(alpha_heuristic_frame_base_address): New.
	(alpha_heuristic_frame_base): New.
	(alpha_unwind_dummy_id): New.
	(alpha_unwind_pc): New.
	(alpha_gdbarch_init): Don't set skip_sigtramp_frame.  Kill use of
	frame related deprecated initializations; install replacements.
	(alpha_dump_tdep): Remove.
	* alpha-tdep.h (struct gdbarch_tdep): Remove skip_sigtramp_frame.
	(alpha_read_insn, alpha_after_prologue,
	alpha_heuristic_frame_unwind_cache, alpha_heuristic_frame_this_id,
	alpha_heuristic_frame_prev_register,
	alpha_heuristic_frame_base_address, alpha_mdebug_init_abi): Declare.
	* config/alpha/alpha-linux.mt (TDEPFILES): Add alpha-mdebug-tdep.o.
	* config/alpha/tm-alpha.h (PRINT_EXTRA_FRAME_INFO): Remove.
	* config/alpha/tm-alphalinux.h (SIGTRAMP_START, SIGTRAMP_END): Remove.
@
text
@d68 4
@


1.25
log
@* alpha-tdep.c (alpha_breakpoint_from_pc): New function.
(alpha_gdbarch_init): Set gdbarch_breakpoint_from_pc to
alpha_breakpoint_from_pc.  Set gdbarch_function_start_offset
to 0.
* config/alpha/tm-alpha.h: Remove forward decls of struct type
and struct value.
(FUNCTION_START_OFFSET): Remove.
(BREAKPOINT): Ditto.
@
text
@a85 6
/* Translate a signal handler frame into the address of the sigcontext
   structure.  */

#define SIGCONTEXT_ADDR(frame) \
  (read_memory_integer ((frame)->next ? frame->next->frame : frame->frame, 8))

@


1.24
log
@* alpha-linux-tdep.c (alpha_linux_pc_in_sigtramp): New function.
(alpha_linux_init_abi): Set gdbarch_pc_in_sigtramp to
alpha_linux_pc_in_sigtramp.
* alpha-osf1-tdep.c (alpha_osf1_pc_in_sigtramp): New function.
(alpha_osf1_init_abi): Set gdbarch_pc_in_sigtramp to
alpha_osf1_pc_in_sigtramp.
* alpha-tdep.c (alpha_osf_in_sigtramp): Remove.
* alphafbsd-tdep.c (alphafbsd_pc_in_sigtramp): New function.
(alphafbsd_init_abi): Set gdbarch_pc_in_sigtramp to
alphafbsd_pc_in_sigtramp.
* alphanbsd-tdep.c (alphanbsd_pc_in_sigtramp): New function.
(alphanbsd_init_abi): Set gdbarch_pc_in_sigtramp to
alphanbsd_pc_in_sigtramp.
* config/alpha/tm-alpha.h (IN_SIGTRAMP): Remove.
* config/alpha/tm-alphalinux.h (IN_SIGTRAMP): Remove.
@
text
@a33 2
struct type;
struct value;
a39 7

/* Offset from address of function to start of its code.
   Zero on most machines.  */

#define FUNCTION_START_OFFSET 0

#define BREAKPOINT {0x80, 0, 0, 0}	/* call_pal bpt */
@


1.23
log
@* Makefile.in (ALLDEPFILES): Add alpha-osf1-tdep.c.
(alpha-osf1-tdep.o): New dependency list.
* alpha-tdep.h (gdbarch_tdep): Add dynamic_sigtramp_offset
and skip_sigtramp_frame members.
* alpha-linux-tdep.c: Include gdbcore.h.
(alpha_linux_sigtramp_offset): Change return type to LONGEST.
(alpha_linux_init_abi): Initialize tdep->dynamic_sigtramp_offset.
* alpha-osf1-tdep.c: New file.
* alpha-tdep.c (alpha_osf_skip_sigtramp_frame): Moved to
alpha-osf1-dep.c.
(alpha_frame_past_sigtramp_frame): New function.
(alpha_dynamic_sigtramp_offset): Ditto.
(alpha_proc_desc_is_dyn_sigtramp): Ditto.
(alpha_set_proc_desc_is_dyn_sigtramp): Ditto.
(ALPHA_PROC_SIGTRAMP_MAGIC): Define.
(push_sigtramp_desc): Use alpha_set_proc_desc_is_dyn_sigtramp.
(after_prologue): Use alpha_proc_desc_is_dyn_sigtramp.
(find_proc_desc): Use alpha_dynamic_sigtramp_offset.
(alpha_frame_chain): Use alpha_frame_past_sigtramp_frame.
(alpha_init_extra_frame_info): Use alpha_proc_desc_is_dyn_sigtramp.
(alpha_pop_frame): Use alpha_proc_desc_is_dyn_sigtramp.
(alpha_gdbarch_init): Initialize tdep->dynamic_sigtramp_offset
and tdep->skip_sigtramp_frame.  Set gdbarch_skip_trampoline_code
to find_solib_trampoline_target.
* config/alpha/alpha-osf1.mt (TDEPFILES): Add alpha-osf1-tdep.o.
* config/alpha/tm-alpha.h: Remove inclusion of regcache.h.
(SKIP_TRAMPOLINE_CODE): Remove.
(PROC_DESC_IS_DYN_SIGTRAMP): Ditto.
(SET_PROC_DESC_IS_DYN_SIGTRAMP): Ditto.
(DYNAMIC_SIGTRAMP_OFFSET): Ditto.
(FRAME_PAST_SIGTRAMP_FRAME): Ditto.
* config/alpha/tm-alphalinux.h (PROC_DESC_IS_DYN_SIGTRAMP): Remove.
(PROC_SIGTRAMP_MAGIC): Ditto.
(PROC_DESC_IS_DYN_SIGTRAMP): Ditto.
(SET_PROC_DESC_IS_DYN_SIGTRAMP): Ditto.
(SET_PROC_DESC_IS_DYN_SIGTRAMP): Ditto.
(DYNAMIC_SIGTRAMP_OFFSET): Ditto.
(FRAME_PAST_SIGTRAMP_FRAME): Ditto.
@
text
@a47 5
/* Are we currently handling a signal ?  */

#define IN_SIGTRAMP(pc, name) alpha_osf_in_sigtramp ((pc), (name))
extern int alpha_osf_in_sigtramp (CORE_ADDR, char *);

@


1.22
log
@* config/alpha/tm-alpha.h: Move alpha_software_single_step
prototype from here...
* alpha-tdep.h: ...to here.
@
text
@a28 1
#include "regcache.h"
d38 3
a40 4
/* Number of traps that happen between exec'ing the shell 
 * to run an inferior, and when we finally get to 
 * the inferior code.  This is 2 on most implementations.
 */
a99 22
/* If PC is in a shared library trampoline code, return the PC
   where the function itself actually starts.  If not, return 0.  */
#define SKIP_TRAMPOLINE_CODE(pc)  find_solib_trampoline_target (pc)

/* Return TRUE if procedure descriptor PROC is a procedure descriptor
   that refers to a dynamically generated sigtramp function.

   OSF/1 doesn't use dynamic sigtramp functions, so this is always
   FALSE.  */

#define PROC_DESC_IS_DYN_SIGTRAMP(proc)	(0)
#define SET_PROC_DESC_IS_DYN_SIGTRAMP(proc)

/* If PC is inside a dynamically generated sigtramp function, return
   how many bytes the program counter is beyond the start of that
   function.  Otherwise, return a negative value.

   OSF/1 doesn't use dynamic sigtramp functions, so this always
   returns -1.  */

#define DYNAMIC_SIGTRAMP_OFFSET(pc)	(-1)

a104 8

/* If FRAME refers to a sigtramp frame, return the address of the next
   frame.  */

#define FRAME_PAST_SIGTRAMP_FRAME(frame, pc) \
  (alpha_osf_skip_sigtramp_frame (frame, pc))
extern CORE_ADDR alpha_osf_skip_sigtramp_frame (struct frame_info *,
						CORE_ADDR);
@


1.21
log
@* alpha-tdep.c (alpha_gdbarch_init): Set coerce_float_to_double
to standard_coerce_float_to_double.
* config/alpha/tm-alpha.h (COERCE_FLOAT_TO_DOUBLE): Remove.
@
text
@a137 3
/* Single step based on where the current instruction will take us.  */
extern void alpha_software_single_step (enum target_signal, int);

@


1.20
log
@* alpha-tdep.h (gdbarch_tdep): Add vm_min_address member.
* alpha-tdep.c (heuristic_proc_start): Use vm_min_address
from gdbarch_tdep rather than a constant.
(alpha_gdbarch_init): Initialize tdep->vm_min_address to
the default text address for all Alpha Unix ABIs.
(alpha_dump_tdep): Report the value of tdep->vm_min_address.
* config/alpha/tm-alpha.h (VM_MIN_ADDRESS): Delete.
@
text
@a105 13
/* If the current gcc for for this target does not produce correct debugging
   information for float parameters, both prototyped and unprototyped, then
   define this macro.  This forces gdb to  always assume that floats are
   passed as doubles and then converted in the callee.

   For the alpha, it appears that the debug info marks the parameters as
   floats regardless of whether the function is prototyped, but the actual
   values are always passed in as doubles.  Thus by setting this to 1, both
   types of calls will work. */

#define COERCE_FLOAT_TO_DOUBLE(formal, actual) \
  standard_coerce_float_to_double ((formal), (actual))

@


1.19
log
@* alpha-tdep.h: New file.  Includes several Alpha target constants
taken from...
* config/alpha/tm-alpha.h: ...here.  Remove macros that we now
let gdbarch deal with.
(GDB_MULTI_ARCH): Define as GDB_MULTI_ARCH_PARTIAL.
* Makefile.in (alpha-nat.o): Add alpha-tdep.h and $(BFD_SRC)/elf-bfd
to dependency list.
* alpha-nat.c: Include alpha-tdep.h.  Update for adjusted
Alpha target register names.
* alphabsd-nat.c: Likewise.
* alpha-tdep.c: Include alpha-tdep.h.  Update for adjusted
Alpha target register names.  Make serveral routines static.
(alpha_get_saved_register): New function.
(alpha_abi_names): New.
(process_note_abi_tag_sections): New function.
(get_elfosabi): New function.
(alpha_gdbarch_init): New function.
(alpha_dump_tdep): New function.
(_initialize_alpha_tdep): Register alpha_gdbarch_init.
@
text
@a101 5
/* This is used by heuristic_proc_start.  It should be shot it the head.  */
#ifndef VM_MIN_ADDRESS
#define VM_MIN_ADDRESS (CORE_ADDR)0x120000000
#endif

@


1.18
log
@* alpha-tdep.c (setup_arbitrary_frame): Rename...
(alpha_setup_arbitrary_frame): ...to this.
* config/alpha/tm-alpha.h (SETUP_ARBITRARY_FRAME): Update
for alpha_setup_arbitrary_frame.
@
text
@d27 2
a38 6
/* Redefine some target bit sizes from the default.  */

#define TARGET_LONG_BIT 64
#define TARGET_LONG_LONG_BIT 64
#define TARGET_PTR_BIT 64

a49 14
/* Advance PC across any function entry prologue instructions
   to reach some "real" code.  */

#define SKIP_PROLOGUE(pc) alpha_skip_prologue((pc))
extern CORE_ADDR alpha_skip_prologue (CORE_ADDR addr);

/* Immediately after a function call, return the saved pc.
   Can't always go through the frames for this because on some machines
   the new frame is not set up until the new function executes
   some instructions.  */

#define SAVED_PC_AFTER_CALL(frame) alpha_saved_pc_after_call(frame)
extern CORE_ADDR alpha_saved_pc_after_call (struct frame_info *);

a54 4
/* Stack grows downward.  */

#define INNER_THAN(lhs,rhs) core_addr_lessthan ((lhs), (rhs))

a56 289
/* Amount PC must be decremented by after a breakpoint.
   This is often the number of bytes in BREAKPOINT
   but not always.  */

#ifndef DECR_PC_AFTER_BREAK
#define DECR_PC_AFTER_BREAK 4
#endif

/* Say how long (ordinary) registers are.  This is a piece of bogosity
   used in push_word and a few other places; REGISTER_RAW_SIZE is the
   real way to know how big a register is.  */

#define REGISTER_SIZE 8

/* Number of machine registers */

#define NUM_REGS 66


/* Return the name of register REGNO.  */

#define REGISTER_NAME(regno) alpha_register_name ((regno))
extern char *alpha_register_name (int);


/* Register numbers of various important registers.
   Note that most of these values are "real" register numbers,
   and correspond to the general registers of the machine,
   and FP_REGNUM is a "phony" register number which is too large
   to be an actual register number as far as the user is concerned
   but serves to get the desired value when passed to read_register.  */

#define V0_REGNUM 0		/* Function integer return value */
#define T7_REGNUM 8		/* Return address register for OSF/1 __add* */
#define GCC_FP_REGNUM 15	/* Used by gcc as frame register */
#define A0_REGNUM 16		/* Loc of first arg during a subr call */
#define T9_REGNUM 23		/* Return address register for OSF/1 __div* */
#define T12_REGNUM 27		/* Contains start addr of current proc */
#define SP_REGNUM 30		/* Contains address of top of stack */
#define RA_REGNUM 26		/* Contains return address value */
#define ZERO_REGNUM 31		/* Read-only register, always 0 */
#define FP0_REGNUM 32		/* Floating point register 0 */
#define FPA0_REGNUM 48		/* First float arg during a subr call */
#define FPCR_REGNUM 63		/* Floating point control register */
#define PC_REGNUM 64		/* Contains program counter */
#define FP_REGNUM 65		/* Virtual frame pointer */

#define CANNOT_FETCH_REGISTER(regno) \
  alpha_cannot_fetch_register ((regno))
extern int alpha_cannot_fetch_register (int);

#define CANNOT_STORE_REGISTER(regno) \
  alpha_cannot_store_register ((regno))
extern int alpha_cannot_store_register (int);

/* Total amount of space needed to store our copies of the machine's
   register state, the array `registers'.  */
#define REGISTER_BYTES (NUM_REGS * 8)

/* Index within `registers' of the first byte of the space for
   register N.  */

#define REGISTER_BYTE(N) alpha_register_byte ((N))
extern int alpha_register_byte (int);

/* Number of bytes of storage in the actual machine representation
   for register N.  On Alphas, all regs are 8 bytes.  */

#define REGISTER_RAW_SIZE(N) alpha_register_raw_size ((N))
extern int alpha_register_raw_size (int);

/* Number of bytes of storage in the program's representation
   for register N.  On Alphas, all regs are 8 bytes.  */

#define REGISTER_VIRTUAL_SIZE(N) alpha_register_virtual_size ((N))
extern int alpha_register_virtual_size (int);

/* Largest value REGISTER_RAW_SIZE can have.  */

#define MAX_REGISTER_RAW_SIZE 8

/* Largest value REGISTER_VIRTUAL_SIZE can have.  */

#define MAX_REGISTER_VIRTUAL_SIZE 8

/* Nonzero if register N requires conversion
   from raw format to virtual format.
   The alpha needs a conversion between register and memory format if
   the register is a floating point register and
   memory format is float, as the register format must be double
   or
   memory format is an integer with 4 bytes or less, as the representation
   of integers in floating point registers is different. */

#define REGISTER_CONVERTIBLE(N) alpha_register_convertible ((N))
extern int alpha_register_convertible (int);

/* Convert data from raw format for register REGNUM in buffer FROM
   to virtual format with type TYPE in buffer TO.  */

#define REGISTER_CONVERT_TO_VIRTUAL(REGNUM, TYPE, FROM, TO) \
  alpha_register_convert_to_virtual (REGNUM, TYPE, FROM, TO)
extern void
alpha_register_convert_to_virtual (int, struct type *, char *, char *);

/* Convert data from virtual format with type TYPE in buffer FROM
   to raw format for register REGNUM in buffer TO.  */

#define REGISTER_CONVERT_TO_RAW(TYPE, REGNUM, FROM, TO)	\
  alpha_register_convert_to_raw (TYPE, REGNUM, FROM, TO)
extern void
alpha_register_convert_to_raw (struct type *, int, char *, char *);

/* Return the GDB type object for the "standard" data type
   of data in register N.  */

#define REGISTER_VIRTUAL_TYPE(N) alpha_register_virtual_type ((N))
extern struct type * alpha_register_virtual_type (int);

/* Store the address of the place in which to copy the structure the
   subroutine will return.  Handled by alpha_push_arguments.  */

#define STORE_STRUCT_RETURN(addr, sp) \
  alpha_store_struct_return ((addr), (sp))
extern void alpha_store_struct_return (CORE_ADDR, CORE_ADDR);
/**/

/* Extract from an array REGBUF containing the (raw) register state
   a function return value of type TYPE, and copy that, in virtual format,
   into VALBUF.  */

#define EXTRACT_RETURN_VALUE(TYPE,REGBUF,VALBUF) \
  alpha_extract_return_value(TYPE, REGBUF, VALBUF)
extern void alpha_extract_return_value (struct type *, char *, char *);

/* Write into appropriate registers a function return value
   of type TYPE, given in virtual format.  */

#define STORE_RETURN_VALUE(TYPE,VALBUF) \
  alpha_store_return_value(TYPE, VALBUF)
extern void alpha_store_return_value (struct type *, char *);

/* Extract from an array REGBUF containing the (raw) register state
   the address in which a function should return its structure value,
   as a CORE_ADDR (or an expression that can be used as one).  */
/* The address is passed in a0 upon entry to the function, but when
   the function exits, the compiler has copied the value to v0.  This
   convention is specified by the System V ABI, so I think we can rely
   on it.  */

#define EXTRACT_STRUCT_VALUE_ADDRESS(REGBUF) \
  alpha_extract_struct_value_address (REGBUF)
extern CORE_ADDR alpha_extract_struct_value_address (char *);

/* Structures are returned by ref in extra arg0 */
#define USE_STRUCT_CONVENTION(gcc_p, type) \
  alpha_use_struct_convention ((gcc_p), (type))
extern int alpha_use_struct_convention (int, struct type *);


/* Describe the pointer in each stack frame to the previous stack frame
   (its caller).  */

/* FRAME_CHAIN takes a frame's nominal address
   and produces the frame's chain-pointer. */

#define FRAME_CHAIN(thisframe) alpha_frame_chain (thisframe)
extern CORE_ADDR alpha_frame_chain (struct frame_info *);

/* Define other aspects of the stack frame.  */


/* An expression that tells us whether the function invocation represented
   by FI does not have a frame on the stack associated with it. */
/* We handle this differently for alpha, and maybe we should not */

#define FRAMELESS_FUNCTION_INVOCATION(FI) \
  generic_frameless_function_invocation_not ((FI))

/* Saved Pc.  */

#define FRAME_SAVED_PC(FRAME) alpha_frame_saved_pc(FRAME)
extern CORE_ADDR alpha_frame_saved_pc (struct frame_info *);

/* The alpha has two different virtual pointers for arguments and locals.

   The virtual argument pointer is pointing to the bottom of the argument
   transfer area, which is located immediately below the virtual frame
   pointer. Its size is fixed for the native compiler, it is either zero
   (for the no arguments case) or large enough to hold all argument registers.
   gcc uses a variable sized argument transfer area. As it has
   to stay compatible with the native debugging tools it has to use the same
   virtual argument pointer and adjust the argument offsets accordingly.

   The virtual local pointer is localoff bytes below the virtual frame
   pointer, the value of localoff is obtained from the PDR.  */

#define ALPHA_NUM_ARG_REGS	6

#define FRAME_ARGS_ADDRESS(fi) alpha_frame_args_address ((fi))
extern CORE_ADDR alpha_frame_args_address (struct frame_info *);

#define FRAME_LOCALS_ADDRESS(fi) alpha_frame_locals_address ((fi))
extern CORE_ADDR alpha_frame_locals_address (struct frame_info *);

/* Return number of args passed to a frame.
   Can return -1, meaning no way to tell.  */

#define FRAME_NUM_ARGS(fi) frame_num_args_unknown ((fi))

/* Return number of bytes at start of arglist that are not really args.  */

#define FRAME_ARGS_SKIP 0

/* Put here the code to store, into a struct frame_saved_regs,
   the addresses of the saved registers of frame described by FRAME_INFO.
   This includes special registers such as pc and fp saved in special
   ways in the stack frame.  sp is even more special:
   the address we return for it IS the sp for the next frame.  */

#define FRAME_INIT_SAVED_REGS(frame_info) \
  alpha_frame_init_saved_regs (frame_info)
extern void alpha_frame_init_saved_regs (struct frame_info *);


/* Things needed for making the inferior call functions.  */

#define PUSH_ARGUMENTS(nargs, args, sp, struct_return, struct_addr) \
  (alpha_push_arguments((nargs), (args), (sp), (struct_return), (struct_addr)))
extern CORE_ADDR
alpha_push_arguments (int, struct value **, CORE_ADDR, int, CORE_ADDR);

/* Push an empty stack frame, to record the current PC, etc.  */

#define PUSH_DUMMY_FRAME alpha_push_dummy_frame()
extern void alpha_push_dummy_frame (void);

/* Discard from the stack the innermost frame, restoring all registers.  */

#define POP_FRAME alpha_pop_frame()
extern void alpha_pop_frame (void);

/* Alpha OSF/1 inhibits execution of code on the stack.
   But there is no need for a dummy on the alpha. PUSH_ARGUMENTS
   takes care of all argument handling and bp_call_dummy takes care
   of stopping the dummy.  */

#define CALL_DUMMY_LOCATION AT_ENTRY_POINT

/* On the Alpha the call dummy code is never copied to user space,
   stopping the user call is achieved via a bp_call_dummy breakpoint.
   But we need a fake CALL_DUMMY definition to enable the proper
   call_function_by_hand and to avoid zero length array warnings
   in valops.c  */

#define CALL_DUMMY_P (1)

#define CALL_DUMMY_WORDS alpha_call_dummy_words
extern LONGEST alpha_call_dummy_words[];

#define SIZEOF_CALL_DUMMY_WORDS 0

#define CALL_DUMMY_START_OFFSET (0)

#define CALL_DUMMY_BREAKPOINT_OFFSET (0)

#define CALL_DUMMY_ADDRESS() alpha_call_dummy_address()
extern CORE_ADDR alpha_call_dummy_address (void);

/* Insert the specified number of args and function address
   into a call sequence of the above form stored at DUMMYNAME.
   We only have to set RA_REGNUM to the dummy breakpoint address
   and T12_REGNUM (the `procedure value register') to the function address.  */

#define FIX_CALL_DUMMY(dummyname, pc, fun, nargs, args, type, gcc_p) \
  alpha_fix_call_dummy ((dummyname), (pc), (fun), (nargs), (args), \
			(type), (gcc_p))
extern void alpha_fix_call_dummy (char *, CORE_ADDR, CORE_ADDR, int,
                                  struct value **, struct type *, int);

/* There's a mess in stack frame creation.  See comments in blockframe.c
   near reference to INIT_FRAME_PC_FIRST.  */

#define INIT_FRAME_PC(fromleaf, prev) init_frame_pc_noop ((fromleaf), (prev))

#define INIT_FRAME_PC_FIRST(fromleaf, prev) \
  alpha_init_frame_pc_first ((fromleaf), (prev))
extern void alpha_init_frame_pc_first (int, struct frame_info *);

d63 2
a82 4

#define INIT_EXTRA_FRAME_INFO(fromleaf, fci) \
  alpha_init_extra_frame_info(fromleaf, fci)
extern void alpha_init_extra_frame_info (int, struct frame_info *);
@


1.17
log
@s/Linux/.../
Fix PR gdb/378.
@
text
@d411 3
a413 2
#define SETUP_ARBITRARY_FRAME(argc, argv) setup_arbitrary_frame (argc, argv)
extern struct frame_info *setup_arbitrary_frame (int, CORE_ADDR *);
@


1.16
log
@Eliminate TARGET_BYTE_ORDER.
@
text
@d2 4
a5 3
   also used by the Alpha/Netware and Alpha/Linux targets.
   Copyright 1993, 1994, 1995, 1996, 1998, 1999, 2000, 2002
   Free Software Foundation, Inc.
@


1.15
log
@Eliminate IEEE_FLOAT.
@
text
@a35 4
#if !defined (TARGET_BYTE_ORDER)
#define TARGET_BYTE_ORDER BFD_ENDIAN_LITTLE
#endif

@


1.14
log
@* alpha-tdep.c (alpha_register_byte): New function.
(alpha_register_raw_size): Ditto.
(alpha_register_virtual_size): Ditto.
(alpha_skip_prologue_internal): Renamed from
alpha_skip_prologue.
(alpha_skip_prologue): New version that calls
alpha_skip_prologue_internal.
(alpha_in_lenient_prologue): Use alpha_skip_prologue_internal.
* config/alpha/tm-alpha.h (SKIP_PROLOGUE): Remove
second argument from alpha_skip_prologue.
(REGISTER_BYTE): Use alpha_register_byte.
(REGISTER_RAW_SIZE): Use alpha_register_raw_size.
(REGISTER_VIRTUAL_SIZE): Use alpha_register_virtual_size.
(FRAMELESS_FUNCTION_INVOCATION): Use
generic_frameless_function_invocation_not.
(FRAME_NUM_ARGS): Use frame_num_args_unknown.
(COERCE_FLOAT_TO_DOUBLE): Use standard_coerce_float_to_double.
@
text
@a45 3
/* Floating point is IEEE compliant */
#define IEEE_FLOAT (1)

@


1.13
log
@* alpha-tdep.c (alpha_call_dummy_words): New.
* config/alpha/tm-alpha.h (CALL_DUMMY): Remove.
(CALL_DUMMY_P): Define.
(CALL_DUMMY_WORDS): Define.
(SIZEOF_CALL_DUMMY_WORDS): Define.
@
text
@d63 2
a64 2
#define SKIP_PROLOGUE(pc)	(alpha_skip_prologue(pc, 0))
extern CORE_ADDR alpha_skip_prologue (CORE_ADDR addr, int lenient);
d71 1
a71 1
#define SAVED_PC_AFTER_CALL(frame)	alpha_saved_pc_after_call(frame)
d147 2
a148 1
#define REGISTER_BYTE(N) ((N) * 8)
d153 2
a154 1
#define REGISTER_RAW_SIZE(N) 8
d159 2
a160 1
#define REGISTER_VIRTUAL_SIZE(N) 8
d261 2
a262 1
#define FRAMELESS_FUNCTION_INVOCATION(FI)  (0)
d266 1
a266 1
#define FRAME_SAVED_PC(FRAME)	(alpha_frame_saved_pc(FRAME))
d293 1
a293 1
#define FRAME_NUM_ARGS(fi)	(-1)
d319 1
a319 1
#define PUSH_DUMMY_FRAME 	alpha_push_dummy_frame()
d324 1
a324 1
#define POP_FRAME		alpha_pop_frame()
d439 2
a440 1
#define COERCE_FLOAT_TO_DOUBLE(formal, actual) (1)
@


1.12
log
@* alpha-tdep.c (alpha_register_virtual_type): New function.
(alpha_init_frame_pc_first): Ditto.
(alpha_fix_call_dummy): Ditto.
(alpha_store_struct_return): Ditto.
(alpha_extract_struct_value_address): Ditto.
* config/alpha/tm-alpha.h (REGISTER_VIRTUAL_TYPE): Use
alpha_register_virtual_type.
(STORE_STRUCT_RETURN): Use alpha_store_struct_return.
(EXTRACT_STRUCT_VALUE_ADDRESS): Use
alpha_extract_struct_value_address.
(FIX_CALL_DUMMY): Use alpha_fix_call_dummy.
(INIT_FRAME_PC): Use init_frame_pc_noop.
(INIT_FRAME_PC_FIRST): Use alpha_init_frame_pc_first.
@
text
@d336 6
a341 1
#define CALL_DUMMY { 0 }	/* Content doesn't matter. */
d347 1
a348 1
#define CALL_DUMMY_ADDRESS() alpha_call_dummy_address()
@


1.11
log
@* alpha-tdep.c (frame_extra_info): New.
(alpha_find_saved_regs): Make static.  Use
frame->extra_info.
(alpha_frame_init_saved_regs): New function.
(alpha_frame_saved_pc): Use frame->extra_info.
(temp_saved_regs): Don't declare as struct frame_saved_regs.
(heuristic_proc_desc): Adjust for temp_saved_regs changes.
(init_extra_frame_info): Rename to...
(alpha_init_extra_frame_info): ...this.  Use frame->extra_info.
(alpha_print_extra_frame_info): New function.
(alpha_frame_locals_address): Ditto.
(alpha_frame_args_address): Ditto.
(alpha_pop_frame): Use frame->extra_info.
* config/alpha/tm-alpha.h (FRAME_ARGS_ADDRESS): Use
alpha_frame_args_address.
(FRAME_LOCALS_ADDRESS): Use alpha_frame_locals_address.
(alpha_find_saved_regs): Remove prototype.
(FRAME_INIT_SAVED_REGS): Use alpha_frame_init_saved_regs.
(EXTRA_FRAME_INFO): Remove.
(INIT_EXTRA_FRAME_INFO): Use alpha_init_extra_frame_info.
(PRINT_EXTRA_FRAME_INFO): Use alpha_print_extra_frame_info.
@
text
@d198 2
a199 3
#define REGISTER_VIRTUAL_TYPE(N) \
	(((N) >= FP0_REGNUM && (N) < FP0_REGNUM+31)  \
	 ? builtin_type_double : builtin_type_long) \
d204 3
a206 1
#define STORE_STRUCT_RETURN(addr, sp)
d233 2
a234 2
  (extract_address (REGBUF + REGISTER_BYTE (V0_REGNUM), \
		    REGISTER_RAW_SIZE (V0_REGNUM)))
d350 5
a354 8
#define FIX_CALL_DUMMY(dummyname, pc, fun, nargs, args, type, gcc_p)    \
{									\
  CORE_ADDR bp_address = CALL_DUMMY_ADDRESS ();			\
  if (bp_address == 0)							\
    error ("no place to put call");					\
  write_register (RA_REGNUM, bp_address);				\
  write_register (T12_REGNUM, fun);					\
}
d359 1
a359 1
#define	INIT_FRAME_PC(fromleaf, prev)	/* nada */
d362 2
a363 2
  (prev)->pc = ((fromleaf) ? SAVED_PC_AFTER_CALL ((prev)->next) : \
	      (prev)->next ? FRAME_SAVED_PC ((prev)->next) : read_pc ());
@


1.10
log
@* alpha-tdep.c (alpha_osf_in_sigtramp): New function.
(alpha_cannot_fetch_register): Ditto.
(alpha_cannot_store_register): Ditto.
(alpha_register_convertible): Ditto.
(alpha_use_struct_convention): Ditto.
* config/alpha/tm-alpha.h: Update copyright years.
(IN_SIGTRAMP): Use alpha_osf_in_sigtramp.
(INNER_THAN): Use core_addr_lessthan.
(CANNOT_FETCH_REGISTER): Use alpha_cannot_fetch_register.
(CANNOT_STORE_REGISTER): Use alpha_cannot_store_register.
(REGISTER_CONVERTIBLE): Use alpha_register_convertible.
(USE_STRUCT_CONVENTION): Use alpha_use_struct_convention.
(FRAME_CHAIN): Remove unnecessary cast.
@
text
@d279 2
a280 1
#define FRAME_ARGS_ADDRESS(fi)	((fi)->frame - (ALPHA_NUM_ARG_REGS * 8))
d282 2
a283 1
#define FRAME_LOCALS_ADDRESS(fi) ((fi)->frame - (fi)->localoff)
a299 2
extern void alpha_find_saved_regs (struct frame_info *);

d301 2
a302 5
  do { \
    if ((frame_info)->saved_regs == NULL) \
      alpha_find_saved_regs (frame_info); \
    (frame_info)->saved_regs[SP_REGNUM] = (frame_info)->frame; \
  } while (0)
d391 8
a398 15
#define EXTRA_FRAME_INFO \
  int localoff; \
  int pc_reg; \
  alpha_extra_func_info_t proc_desc;

#define INIT_EXTRA_FRAME_INFO(fromleaf, fci) init_extra_frame_info(fci)
extern void init_extra_frame_info (struct frame_info *);

#define	PRINT_EXTRA_FRAME_INFO(fi) \
  { \
    if (fi && fi->proc_desc && fi->proc_desc->pdr.framereg < NUM_REGS) \
      printf_filtered (" frame pointer is at %s+%ld\n", \
                       REGISTER_NAME (fi->proc_desc->pdr.framereg), \
                                 fi->proc_desc->pdr.frameoffset); \
  }
@


1.9
log
@* alpha-tdep.c (alpha_register_name): New function.
* config/alpha/tm-alpha.h (REGISTER_NAMES): Remove.
(REGISTER_NAME): Define.
@
text
@d3 1
a3 1
   Copyright 1993, 1994, 1995, 1996, 1998, 1999, 2000
d76 2
a77 1
#define IN_SIGTRAMP(pc, name)	((name) && STREQ ("__sigtramp", (name)))
d81 1
a81 1
#define INNER_THAN(lhs,rhs) ((lhs) < (rhs))
d133 3
a135 1
  ((regno) == FP_REGNUM || (regno) == ZERO_REGNUM)
d137 2
a138 1
  ((regno) == FP_REGNUM || (regno) == ZERO_REGNUM)
d176 2
a177 1
#define REGISTER_CONVERTIBLE(N) ((N) >= FP0_REGNUM && (N) < FP0_REGNUM + 31)
d236 3
a238 1
#define USE_STRUCT_CONVENTION(gcc_p, type)	1
d247 1
a247 1
#define FRAME_CHAIN(thisframe) (CORE_ADDR) alpha_frame_chain (thisframe)
@


1.8
log
@* alpha-tdep.c: Update copyright years.
(alpha_next_pc): New function.
(alpha_software_single_step): Ditto.
* config/alpha/tm-alpha.h: Add prototype for
alpha_software_single_step.
@
text
@a101 2
/* Initializer for an array of names of registers.
   There should be NUM_REGS strings in this initializer.  */
d103 5
a107 11
#define REGISTER_NAMES 	\
    {	"v0",	"t0",	"t1",	"t2",	"t3",	"t4",	"t5",	"t6", \
	"t7",	"s0",	"s1",	"s2",	"s3",	"s4",	"s5",	"fp", \
	"a0",	"a1",	"a2",	"a3",	"a4",	"a5",	"t8",	"t9", \
	"t10",	"t11",	"ra",	"t12",	"at",	"gp",	"sp",	"zero", \
	"f0",   "f1",   "f2",   "f3",   "f4",   "f5",   "f6",   "f7", \
	"f8",   "f9",   "f10",  "f11",  "f12",  "f13",  "f14",  "f15", \
	"f16",  "f17",  "f18",  "f19",  "f20",  "f21",  "f22",  "f23",\
	"f24",  "f25",  "f26",  "f27",  "f28",  "f29",  "f30",  "fpcr",\
	"pc",	"vfp",						\
    }
@


1.7
log
@LITTLE_ENDIAN -> BFD_ENDIAN_LITTLE
@
text
@d477 3
@


1.6
log
@Include regcache.h
@
text
@d37 1
a37 1
#define TARGET_BYTE_ORDER LITTLE_ENDIAN
@


1.5
log
@Update/correct copyright notices.
@
text
@d26 1
@


1.4
log
@PARAMS removal.
@
text
@d3 2
a4 1
   Copyright 1993, 1994, 1995, 1996 Free Software Foundation, Inc.
@


1.3
log
@Bring IEEE_FLOAT under gdbarch's control.
* gdbarch.sh (IEEE_FLOAT): New entry.
* gdbarch.c, gdbarch.h: Regenerated.
* valprint.c (IEEE_FLOAT): Provide a default #definition for this.
(print_floating): Use IEEE_FLOAT as if it were an expression; use
the code specific to IEEE-format numbers whenever the value of
IEEE_FLOAT is non-zero.
* config/a29k/tm-a29k.h, config/alpha/tm-alpha.h,
config/arc/tm-arc.h, config/arm/tm-arm.h, config/fr30/tm-fr30.h,
config/h8300/tm-h8300.h, config/i386/tm-i386.h,
config/i960/tm-i960.h, config/m88k/tm-m88k.h,
config/mips/tm-mips.h, config/pa/tm-hppa.h,
config/sparc/tm-sparc.h, config/delta/tm-delta.h,
config/frv/tm-frv.h (IEEE_FLOAT): For all ports that #define
IEEE_FLOAT, make sure they give it the value (1).
@
text
@d62 1
a62 1
extern CORE_ADDR alpha_skip_prologue PARAMS ((CORE_ADDR addr, int lenient));
d70 1
a70 2
extern CORE_ADDR
  alpha_saved_pc_after_call PARAMS ((struct frame_info *));
d186 1
a186 1
alpha_register_convert_to_virtual PARAMS ((int, struct type *, char *, char *));
d194 1
a194 1
alpha_register_convert_to_raw PARAMS ((struct type *, int, char *, char *));
d215 1
a215 2
extern void
alpha_extract_return_value PARAMS ((struct type *, char *, char *));
d222 1
a222 2
extern void
alpha_store_return_value PARAMS ((struct type *, char *));
d247 1
a247 1
extern CORE_ADDR alpha_frame_chain PARAMS ((struct frame_info *));
d261 1
a261 2
extern CORE_ADDR
  alpha_frame_saved_pc PARAMS ((struct frame_info *));
d297 1
a297 1
extern void alpha_find_saved_regs PARAMS ((struct frame_info *));
d312 1
a312 1
  alpha_push_arguments PARAMS ((int, struct value **, CORE_ADDR, int, CORE_ADDR));
d317 1
a317 2
extern void
alpha_push_dummy_frame PARAMS ((void));
d322 1
a322 2
extern void
alpha_pop_frame PARAMS ((void));
d343 1
a343 1
extern CORE_ADDR alpha_call_dummy_address PARAMS ((void));
d373 1
a373 1
extern void ecoff_relocate_efi PARAMS ((struct symbol *, CORE_ADDR));
d399 1
a399 2
extern void
init_extra_frame_info PARAMS ((struct frame_info *));
d420 1
a420 1
extern struct frame_info *setup_arbitrary_frame PARAMS ((int, CORE_ADDR *));
d472 2
a473 1
extern CORE_ADDR alpha_osf_skip_sigtramp_frame PARAMS ((struct frame_info *, CORE_ADDR));
@


1.2
log
@Bring COERCE_FLOAT_TO_DOUBLE under gdbarch's control.
* valops.c (COERCE_FLOAT_TO_DOUBLE): Rework definition to be
more function-like.
(default_coerce_float_to_double, standard_coerce_float_to_double):
New functions.
(value_arg_coerce): Adjust for new definition.
* value.h (default_coerce_float_to_double,
standard_coerce_float_to_double): New declarations for the above.
* gdbarch.sh (coerce_float_to_double): New entry, replacing macro.
* gdbarch.c, gdbarch.h: Regenerated.
* tm-alpha.h, tm-fr30.h, tm-m32r.h, tm-mips.h, tm-hppa.h,
tm-rs6000.h, tm-sh.h, tm-sparc.h (COERCE_FLOAT_TO_DOUBLE): Change
definitions.
* mips-tdep.c (mips_coerce_float_to_double): Supply our own custom
function here.
(mips_gdbarch_init): Install that as our coerce_float_to_double
function.
@
text
@d45 1
a45 1
#define IEEE_FLOAT
@


1.1
log
@Initial revision
@
text
@d5 1
a5 1
This file is part of GDB.
d7 14
a20 13
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
a28 1
#ifdef __STDC__
a32 1
#endif
d61 1
a61 1
#define SKIP_PROLOGUE(pc)	pc = alpha_skip_prologue(pc, 0)
d71 1
a71 1
alpha_saved_pc_after_call PARAMS ((struct frame_info *));
d81 1
a81 1
#define BREAKPOINT {0x80, 0, 0, 0} /* call_pal bpt */
d112 1
a112 1
	"f24",  "f25",  "f26",  "f27",  "f28",  "f29",  "f30",  "f31",\
d132 3
a134 2
#define FP0_REGNUM 32           /* Floating point register 0 */
#define FPA0_REGNUM 48          /* First float arg during a subr call */
d174 1
a174 1
      memory format is float, as the register format must be double
d176 2
a177 2
      memory format is an integer with 4 bytes or less, as the representation
      of integers in floating point registers is different. */
d179 1
a179 1
#define REGISTER_CONVERTIBLE(N) ((N) >= FP0_REGNUM && (N) < FP0_REGNUM + 32)
d201 1
a201 1
	(((N) >= FP0_REGNUM && (N) < FP0_REGNUM+32)  \
d207 2
a208 1
#define STORE_STRUCT_RETURN(addr, sp)	/**/
d241 1
a242 1

d255 2
a256 3
/* A macro that tells us whether the function invocation represented
   by FI does not have a frame on the stack associated with it.  If it
   does not, FRAMELESS is set to 1, else 0.  */
d259 1
a259 1
#define FRAMELESS_FUNCTION_INVOCATION(FI, FRAMELESS)  {(FRAMELESS) = 0;}
d265 1
a265 1
alpha_frame_saved_pc PARAMS ((struct frame_info *));
d289 1
a289 1
#define FRAME_NUM_ARGS(num, fi)	((num) = -1)
d309 1
a310 1

d314 1
a314 1
    sp = alpha_push_arguments((nargs), (args), (sp), (struct_return), (struct_addr))
d316 1
a316 1
alpha_push_arguments PARAMS ((int, struct value **, CORE_ADDR, int, CORE_ADDR));
d369 1
a369 1
#define	INIT_FRAME_PC(fromleaf, prev) /* nada */
d385 6
a390 4
typedef struct alpha_extra_func_info {
	long	numargs;	/* number of args to procedure (was iopt) */
	PDR	pdr;		/* Procedure descriptor record */
} *alpha_extra_func_info_t;
d411 1
a411 1
      printf_filtered (" frame pointer is at %s+%d\n", \
d448 1
a448 1
#define COERCE_FLOAT_TO_DOUBLE 1
@


1.1.1.1
log
@Initial creation of sourceware repository
@
text
@@


1.1.1.2
log
@import gdb-19990422 snapshot
@
text
@d113 1
a113 1
	"f24",  "f25",  "f26",  "f27",  "f28",  "f29",  "f30",  "fpcr",\
a134 1
#define FPCR_REGNUM 63		/* Floating point control register */
d179 1
a179 1
#define REGISTER_CONVERTIBLE(N) ((N) >= FP0_REGNUM && (N) < FP0_REGNUM + 31)
d201 1
a201 1
	(((N) >= FP0_REGNUM && (N) < FP0_REGNUM+31)  \
@


1.1.1.3
log
@import gdb-19990504 snapshot
@
text
@d62 1
a62 1
#define SKIP_PROLOGUE(pc)	(alpha_skip_prologue(pc, 0))
@


1.1.1.4
log
@import gdb-1999-05-25 snapshot
@
text
@d255 3
a257 2
/* An expression that tells us whether the function invocation represented
   by FI does not have a frame on the stack associated with it. */
d260 1
a260 1
#define FRAMELESS_FUNCTION_INVOCATION(FI)  (0)
d290 1
a290 1
#define FRAME_NUM_ARGS(fi)	(-1)
d315 1
a315 1
  (alpha_push_arguments((nargs), (args), (sp), (struct_return), (struct_addr)))
@


1.1.1.5
log
@import gdb-1999-07-07 post reformat
@
text
@d5 1
a5 1
   This file is part of GDB.
d7 13
a19 14
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */
d72 1
a72 1
  alpha_saved_pc_after_call PARAMS ((struct frame_info *));
d82 1
a82 1
#define BREAKPOINT {0x80, 0, 0, 0}	/* call_pal bpt */
d133 2
a134 2
#define FP0_REGNUM 32		/* Floating point register 0 */
#define FPA0_REGNUM 48		/* First float arg during a subr call */
d175 1
a175 1
   memory format is float, as the register format must be double
d177 2
a178 2
   memory format is an integer with 4 bytes or less, as the representation
   of integers in floating point registers is different. */
d208 1
a208 2
#define STORE_STRUCT_RETURN(addr, sp)
/**/
d241 1
a242 1

d265 1
a265 1
  alpha_frame_saved_pc PARAMS ((struct frame_info *));
d309 1
a310 1

d316 1
a316 1
  alpha_push_arguments PARAMS ((int, struct value **, CORE_ADDR, int, CORE_ADDR));
d369 1
a369 1
#define	INIT_FRAME_PC(fromleaf, prev)	/* nada */
d385 4
a388 6
typedef struct alpha_extra_func_info
  {
    long numargs;		/* number of args to procedure (was iopt) */
    PDR pdr;			/* Procedure descriptor record */
  }
 *alpha_extra_func_info_t;
@


1.1.1.6
log
@import gdb-1999-08-30 snapshot
@
text
@d29 1
d34 1
@


1.1.1.7
log
@import gdb-1999-09-08 snapshot
@
text
@d411 1
a411 1
      printf_filtered (" frame pointer is at %s+%ld\n", \
@


