head	1.12;
access;
symbols
	gdb_5_2_1-2002-07-23-release:1.7
	cagney_regbuf-20020515-branch:1.9.0.4
	cagney_regbuf-20020515-branchpoint:1.9
	jimb-macro-020506-branch:1.9.0.2
	jimb-macro-020506-branchpoint:1.9
	gdb_5_2-2002-04-29-release:1.7
	gdb_5_2-branch:1.7.0.2
	gdb_5_2-2002-03-03-branchpoint:1.7
	gdb_5_1_1-2002-01-24-release:1.5
	gdb_5_1_0_1-2002-01-03-release:1.5
	cygnus_cvs_20020108_pre:1.6
	gdb_5_1_0_1-2002-01-03-branch:1.5.0.8
	gdb_5_1_0_1-2002-01-03-branchpoint:1.5
	gdb_5_1-2001-11-21-release:1.5
	gdb_s390-2001-09-26-branch:1.5.0.6
	gdb_s390-2001-09-26-branchpoint:1.5
	gdb_5_1-2001-07-29-branch:1.5.0.4
	gdb_5_1-2001-07-29-branchpoint:1.5
	dberlin-typesystem-branch:1.5.0.2
	dberlin-typesystem-branchpoint:1.5
	gdb-post-ptid_t-2001-05-03:1.5
	gdb-pre-ptid_t-2001-05-03:1.5
	insight-precleanup-2001-01-01:1.3
	gdb-post-protoization-2000-07-29:1.3
	gdb-pre-protoization-2000-07-29:1.3
	gdb-premipsmulti-2000-06-06-branch:1.3.0.2
	gdb-premipsmulti-2000-06-06-branchpoint:1.3
	gdb-post-params-removal-2000-06-04:1.3
	gdb-pre-params-removal-2000-06-04:1.3
	gdb-post-params-removal-2000-05-28:1.3
	gdb-pre-params-removal-2000-05-28:1.2
	gdb_5_0-2000-05-19-release:1.1.1.7
	gdb_4_18_2-2000-05-18-release:1.1.1.7
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.7
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.7
	gdb_5_0-2000-04-10-branch:1.1.1.7.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1.1.7
	repo-unification-2000-02-06:1.1.1.7
	insight-2000-02-04:1.1.1.7
	gdb-2000-02-04:1.1.1.7
	gdb-2000-02-02:1.1.1.7
	gdb-2000-02-01:1.1.1.7
	gdb-2000-01-31:1.1.1.7
	gdb-2000-01-26:1.1.1.7
	gdb-2000-01-24:1.1.1.7
	gdb-2000-01-17:1.1.1.7
	gdb-2000-01-10:1.1.1.7
	gdb-2000-01-05:1.1.1.7
	gdb-1999-12-21:1.1.1.7
	gdb-1999-12-13:1.1.1.7
	gdb-1999-12-07:1.1.1.6
	gdb-1999-12-06:1.1.1.6
	gdb-1999-11-16:1.1.1.6
	gdb-1999-11-08:1.1.1.6
	gdb-1999-11-01:1.1.1.6
	gdb-1999-10-25:1.1.1.6
	gdb-1999-10-18:1.1.1.6
	gdb-1999-10-11:1.1.1.6
	gdb-1999-10-04:1.1.1.6
	gdb-1999-09-28:1.1.1.6
	gdb-1999-09-21:1.1.1.6
	gdb-1999-09-13:1.1.1.6
	gdb-1999-09-08:1.1.1.6
	gdb-1999-08-30:1.1.1.6
	gdb-1999-08-23:1.1.1.5
	gdb-1999-08-16:1.1.1.5
	gdb-1999-08-09:1.1.1.5
	gdb-1999-08-02:1.1.1.5
	gdb-1999-07-26:1.1.1.5
	gdb-1999-07-19:1.1.1.5
	gdb-1999-07-12:1.1.1.5
	gdb-post-reformat-19990707:1.1.1.5
	gdb-1999-07-07-post-reformat-snapshot:1.1.1.5
	gdb-pre-reformat-19990707:1.1.1.4
	gdb-1999-07-07:1.1.1.4
	gdb-1999-07-05:1.1.1.4
	gdb-1999-06-28:1.1.1.4
	gdb-1999-06-21:1.1.1.4
	gdb-1999-06-14:1.1.1.4
	gdb-1999-06-07:1.1.1.4
	gdb-1999-06-01:1.1.1.4
	gdb-4_18-branch:1.1.1.1.0.2
	gdb-4_18-release:1.1.1.1
	gdb-1999-05-25:1.1.1.4
	gdb-1999-05-19:1.1.1.3
	gdb-1999-05-10:1.1.1.3
	gdb-19990504:1.1.1.3
	gdb-19990422:1.1.1.2
	SNAPSHOT:1.1.1
	gdb-4_18:1.1.1.1
	GDB_4_18:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.12
date	2002.05.16.12.11.38;	author corinna;	state dead;
branches;
next	1.11;

1.11
date	2002.05.16.11.43.08;	author corinna;	state Exp;
branches;
next	1.10;

1.10
date	2002.05.16.08.23.21;	author corinna;	state Exp;
branches;
next	1.9;

1.9
date	2002.05.01.21.26.52;	author cagney;	state Exp;
branches
	1.9.4.1;
next	1.8;

1.8
date	2002.04.06.00.02.51;	author cagney;	state Exp;
branches;
next	1.7;

1.7
date	2002.01.29.04.42.44;	author cagney;	state Exp;
branches;
next	1.6;

1.6
date	2001.12.15.16.53.24;	author cagney;	state Exp;
branches;
next	1.5;

1.5
date	2001.03.14.23.23.15;	author cagney;	state Exp;
branches;
next	1.4;

1.4
date	2001.03.06.08.21.38;	author kevinb;	state Exp;
branches;
next	1.3;

1.3
date	2000.05.28.01.12.41;	author kevinb;	state Exp;
branches;
next	1.2;

1.2
date	2000.05.17.06.51.28;	author cagney;	state Exp;
branches;
next	1.1;

1.1
date	99.04.16.01.34.26;	author shebs;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.16.01.34.26;	author shebs;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.04.26.18.26.45;	author shebs;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	99.05.05.14.43.54;	author shebs;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	99.05.25.18.05.46;	author jsm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	99.07.07.20.17.29;	author jsm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	99.08.31.01.08.07;	author jsm;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	99.12.14.01.05.42;	author jsm;	state Exp;
branches;
next	;

1.9.4.1
date	2002.06.15.16.43.11;	author cagney;	state dead;
branches;
next	;


desc
@@


1.12
log
@	* configure.tgt: Mark v850 as multi-arched.
	* config/v850/tm-v850.h: Remove file.
	* config/v850/v850.mt: Eliminate TM_FILE.
@
text
@/* Parameters for execution on an NEC V850 processor.

   Copyright 1996, 1997, 1998, 1999, 2000, 2002 Free Software
   Foundation, Inc.

   This file is part of GDB.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

#define GDB_MULTI_ARCH 2
@


1.11
log
@	* v850-tdep.c: Full multi-arch.
	* config/v850/tm-v850.h: Eliminate or move to v850-tdep.c everything.
	Define GDB_MULTI_ARCH to 2.
@
text
@@


1.10
log
@	* v850-tdep.c: Fix comment for v850_scan_prologue.  Remove extra
	frame info.  Use frame_info's saved_regs instead of matching member
	in extra_frame_info throughout.
	(v850_frame_init_saved_regs): New function.
	(v850_init_extra_frame_info): Move most functionality into
	v850_frame_init_saved_regs().
	* config/v850/tm-v850.h (EXTRA_FRAME_INFO): Remove definition.
	(v850_frame_find_saved_regs): Remove declaration.
	(FRAME_FIND_SAVED_REGS): Remove definition.
	(v850_frame_init_saved_regs): Add declaration.
	(FRAME_INIT_SAVED_REGS): Add definition.
@
text
@d23 1
a23 151
#include "regcache.h"
#include "symtab.h"		/* For namespace_enum.  */
#include "symfile.h"		/* For entry_point_address().  */

#define NUM_REGS 66

#define REGISTER_NAMES \
{ "r0", "r1", "r2", "r3", "r4", "r5", "r6", "r7", \
  "r8", "r9", "r10", "r11", "r12", "r13", "r14", "r15", \
  "r16", "r17", "r18", "r19", "r20", "r21", "r22", "r23", \
  "r24", "r25", "r26", "r27", "r28", "r29", "r30", "r31", \
    \
  "eipc", "eipsw", "fepc", "fepsw", "ecr", "psw", "sr6", "sr7", \
  "sr8", "sr9", "sr10", "sr11", "sr12", "sr13", "sr14", "sr15", \
  "sr16", "sr17", "sr18", "sr19", "sr20", "sr21", "sr22", "sr23", \
  "sr24", "sr25", "sr26", "sr27", "sr28", "sr29", "sr30", "sr31", \
    \
  "pc", "fp" }

/* Initializer for an array of names of registers.
   Entries beyond the first NUM_REGS are ignored.  */

extern char **v850_register_names;
#define REGISTER_NAME(i) v850_register_names[i]


#define REGISTER_BYTES (NUM_REGS * 4)

#define REGISTER_SIZE 4
#define MAX_REGISTER_RAW_SIZE 4

#define R0_REGNUM 0
#define R1_REGNUM 1
#define SAVE1_START_REGNUM 2
#define SAVE1_END_REGNUM 2
#define SP_REGNUM 3
#define ARG0_REGNUM 6
#define ARGLAST_REGNUM 9
#define V0_REGNUM 10
#define V1_REGNUM 11
#define R12_REGNUM 12
#define SAVE2_START_REGNUM 20
#define SAVE2_END_REGNUM 29
#define EP_REGNUM 30
#define SAVE3_START_REGNUM 31
#define SAVE3_END_REGNUM 31
#define RP_REGNUM 31
#define SR0_REGNUM 32
#define PS_REGNUM (SR0_REGNUM+5)
#define CTBP_REGNUM (SR0_REGNUM+20)
#define PC_REGNUM 64
#define FP_REGNUM 65
#define FP_RAW_REGNUM 29

#define TARGET_READ_FP() read_register (FP_RAW_REGNUM)

#define REGISTER_VIRTUAL_TYPE(REG) builtin_type_int

#define REGISTER_BYTE(REG) ((REG) * 4)
#define REGISTER_VIRTUAL_SIZE(REG) 4
#define REGISTER_RAW_SIZE(REG) 4

#define MAX_REGISTER_VIRTUAL_SIZE 4

#define BREAKPOINT {0x85, 0x05} /* little-ended */

#define FUNCTION_START_OFFSET 0

#define DECR_PC_AFTER_BREAK 0

#define INNER_THAN(lhs,rhs) ((lhs) < (rhs))

#define SAVED_PC_AFTER_CALL(fi) read_register (RP_REGNUM)

struct frame_info;
struct frame_saved_regs;
struct type;
struct value;

extern void v850_init_extra_frame_info (struct frame_info *fi);
#define INIT_EXTRA_FRAME_INFO(fromleaf, fi) v850_init_extra_frame_info (fi)
#define INIT_FRAME_PC		/* Not necessary */

extern void v850_frame_init_saved_regs (struct frame_info *fi);
#define FRAME_INIT_SAVED_REGS(FI) v850_frame_init_saved_regs (FI)

extern CORE_ADDR v850_frame_chain (struct frame_info *fi);
#define FRAME_CHAIN(fi) v850_frame_chain (fi)
#define FRAME_CHAIN_VALID(FP, FI)	generic_file_frame_chain_valid (FP, FI)

extern CORE_ADDR v850_find_callers_reg (struct frame_info *fi, int regnum);
extern CORE_ADDR v850_frame_saved_pc (struct frame_info *);
#define FRAME_SAVED_PC(FI) (v850_frame_saved_pc (FI))

#define EXTRACT_RETURN_VALUE(TYPE, REGBUF, VALBUF) \
  memcpy (VALBUF, REGBUF + REGISTER_BYTE (V0_REGNUM), TYPE_LENGTH (TYPE))

#define EXTRACT_STRUCT_VALUE_ADDRESS(REGBUF) \
  extract_address (REGBUF + REGISTER_BYTE (V0_REGNUM), \
		   REGISTER_RAW_SIZE (V0_REGNUM))

#define STORE_RETURN_VALUE(TYPE, VALBUF) \
  write_register_bytes(REGISTER_BYTE (V0_REGNUM), VALBUF, TYPE_LENGTH (TYPE));

extern CORE_ADDR v850_skip_prologue (CORE_ADDR pc);
#define SKIP_PROLOGUE(pc) (v850_skip_prologue (pc))

#define FRAME_ARGS_SKIP 0

#define FRAME_ARGS_ADDRESS(fi) ((fi)->frame)
#define FRAME_LOCALS_ADDRESS(fi) ((fi)->frame)
#define FRAME_NUM_ARGS(fi) (-1)

extern void v850_pop_frame (struct frame_info *frame);
#define POP_FRAME v850_pop_frame (get_current_frame ())

#define USE_GENERIC_DUMMY_FRAMES 1
#define CALL_DUMMY                   {0}
#define CALL_DUMMY_START_OFFSET      (0)
#define CALL_DUMMY_BREAKPOINT_OFFSET (0)
#define CALL_DUMMY_LOCATION          AT_ENTRY_POINT
#define FIX_CALL_DUMMY(DUMMY, START, FUNADDR, NARGS, ARGS, TYPE, GCCP)
#define CALL_DUMMY_ADDRESS()         entry_point_address ()
extern CORE_ADDR v850_push_return_address (CORE_ADDR, CORE_ADDR);
#define PUSH_RETURN_ADDRESS(PC, SP)  v850_push_return_address (PC, SP)


#define PUSH_DUMMY_FRAME	generic_push_dummy_frame ()

extern CORE_ADDR
v850_push_arguments (int nargs, struct value **args, CORE_ADDR sp,
		     unsigned char struct_return, CORE_ADDR struct_addr);
#define PUSH_ARGUMENTS(NARGS, ARGS, SP, STRUCT_RETURN, STRUCT_ADDR) \
  (v850_push_arguments (NARGS, ARGS, SP, STRUCT_RETURN, STRUCT_ADDR))

#define STORE_STRUCT_RETURN(STRUCT_ADDR, SP)


#define PC_IN_CALL_DUMMY(PC, SP, FP) generic_pc_in_call_dummy (PC, SP, FP)

extern use_struct_convention_fn v850_use_struct_convention;
#define USE_STRUCT_CONVENTION(GCC_P, TYPE) v850_use_struct_convention (GCC_P, TYPE);

/* override the default get_saved_register function with
   one that takes account of generic CALL_DUMMY frames */
#define GET_SAVED_REGISTER(raw_buffer, optimized, addrp, frame, regnum, lval) \
      generic_get_saved_register (raw_buffer, optimized, addrp, frame, regnum, lval)

/* Define this for Wingdb */

#define TARGET_V850
@


1.9
log
@* config/mn10200/tm-mn10200.h: Include "symfile.h" and "symtab.h".
* config/mcore/tm-mcore.h: Ditto.  Update copyright.
* config/v850/tm-v850.h: Ditto.  Update copyright.
@
text
@a101 2
#define EXTRA_FRAME_INFO struct frame_saved_regs fsr;

d106 2
a107 3
extern void v850_frame_find_saved_regs (struct frame_info *fi,
					struct frame_saved_regs *regaddr);
#define FRAME_FIND_SAVED_REGS(fi, regaddr) regaddr = fi->fsr
@


1.9.4.1
log
@merge from trunk
@
text
@@


1.8
log
@* h8500-tdep.c (h8500_write_fp): Delete function.
* dwarf2cfi.c (cfi_write_fp): Document as not used.
* mips-tdep.c (mips_gdbarch_init): Do not set write_fp.
* ia64-tdep.c (ia64_gdbarch_init): Do not set write_fp.
* m68hc11-tdep.c (m68hc11_gdbarch_init): Do not set write_fp.
* rs6000-tdep.c (rs6000_gdbarch_init): Do not set write_fp.
* s390-tdep.c (s390_gdbarch_init): Do not set write_fp.
(s390_write_fp):
* sh-tdep.c (sh_gdbarch_init): Do not set write_fp.
* x86-64-tdep.c (i386_gdbarch_init): Do not set write_fp.
* d10v-tdep.c (d10v_gdbarch_init): Do not set write_fp.
(d10v_write_fp): Delete function.
* inferior.h (write_fp, generic_target_write_fp): Delete
declarations.
* regcache.c (generic_target_write_fp): Delete function.
(write_fp): Delete function.
* gdbarch.sh (TARGET_WRITE_FP): Delete.
* gdbarch.h, gdbarch.c: Regenerate.
* config/v850/tm-v850.h (TARGET_WRITE_FP): Delete macro.
* config/sparc/tm-sp64.h (TARGET_WRITE_FP): Delete macro.
(sparc64_write_fp): Delete declaration.
* config/h8500/tm-h8500.h (TARGET_WRITE_FP): Delete macro.
(h8500_write_fp): Delete declaration.
@
text
@d2 3
a4 2
   Copyright 1996, 1997, 1998, 1999, 2000
   Free Software Foundation, Inc.
d24 2
@


1.7
log
@Eliminate TARGET_BYTE_ORDER.
@
text
@a74 1
#define TARGET_WRITE_FP(VAL) write_register (FP_REGNUM, (VAL))
@


1.6
log
@LITTLE_ENDIAN -> BFD_ENDIAN_LITTLE
@
text
@a23 2
#define TARGET_BYTE_ORDER BFD_ENDIAN_LITTLE

@


1.5
log
@Include regcache.h
@
text
@d24 1
a24 1
#define TARGET_BYTE_ORDER LITTLE_ENDIAN
@


1.4
log
@Update/correct copyright notices.
@
text
@d22 2
@


1.3
log
@PARAMS removal.
@
text
@d2 2
a3 2
   Copyright 1996
   Free Software Foundation, Inc. 
@


1.2
log
@Change v850 break-point instruction to loop.  Get around lack of 16
bit breakpoint.
@
text
@d102 1
a102 1
extern void v850_init_extra_frame_info PARAMS ((struct frame_info * fi));
d106 2
a107 1
extern void v850_frame_find_saved_regs PARAMS ((struct frame_info * fi, struct frame_saved_regs * regaddr));
d110 1
a110 1
extern CORE_ADDR v850_frame_chain PARAMS ((struct frame_info * fi));
d114 2
a115 2
extern CORE_ADDR v850_find_callers_reg PARAMS ((struct frame_info * fi, int regnum));
extern CORE_ADDR v850_frame_saved_pc PARAMS ((struct frame_info *));
d128 1
a128 1
extern CORE_ADDR v850_skip_prologue PARAMS ((CORE_ADDR pc));
d137 1
a137 1
extern void v850_pop_frame PARAMS ((struct frame_info * frame));
d147 1
a147 1
extern CORE_ADDR v850_push_return_address PARAMS ((CORE_ADDR, CORE_ADDR));
d154 2
a155 3
  v850_push_arguments PARAMS ((int nargs, struct value ** args, CORE_ADDR sp,
			       unsigned char struct_return,
			       CORE_ADDR struct_addr));
@


1.1
log
@Initial revision
@
text
@d5 1
a5 1
This file is part of GDB.
d7 14
a20 13
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
d85 1
a85 1
#define BREAKPOINT {0x40, 0xF8} /* little-ended */
a94 1
#ifdef __STDC__
a98 1
#endif
d102 1
a102 1
extern void v850_init_extra_frame_info PARAMS ((struct frame_info *fi));
d106 1
a106 1
extern void v850_frame_find_saved_regs PARAMS ((struct frame_info *fi, struct frame_saved_regs *regaddr));
d109 1
a109 1
extern CORE_ADDR v850_frame_chain PARAMS ((struct frame_info *fi));
d111 1
a111 1
#define FRAME_CHAIN_VALID(FP, FI)	generic_frame_chain_valid (FP, FI)
d113 2
a114 2
extern CORE_ADDR v850_find_callers_reg PARAMS ((struct frame_info *fi, int regnum));
extern CORE_ADDR v850_frame_saved_pc   PARAMS ((struct frame_info *));
d128 1
a128 1
#define SKIP_PROLOGUE(pc) pc = v850_skip_prologue (pc)
d134 1
a134 1
#define FRAME_NUM_ARGS(val, fi) ((val) = -1)
d136 1
a136 1
extern void v850_pop_frame PARAMS ((struct frame_info *frame));
d139 1
a139 1
#define USE_GENERIC_DUMMY_FRAMES
d153 3
a155 3
v850_push_arguments PARAMS ((int nargs, struct value **args, CORE_ADDR sp,
			     unsigned char struct_return,
			     CORE_ADDR struct_addr));
d157 1
a157 1
  (SP) = v850_push_arguments (NARGS, ARGS, SP, STRUCT_RETURN, STRUCT_ADDR)
d162 1
a162 1
#define PC_IN_CALL_DUMMY(PC, SP, FP) generic_pc_in_call_dummy (PC, SP)
d169 2
a170 1
#define GET_SAVED_REGISTER
@


1.1.1.1
log
@Initial creation of sourceware repository
@
text
@@


1.1.1.2
log
@import gdb-19990422 snapshot
@
text
@d140 1
a140 1
#define USE_GENERIC_DUMMY_FRAMES 1
d163 1
a163 1
#define PC_IN_CALL_DUMMY(PC, SP, FP) generic_pc_in_call_dummy (PC, SP, FP)
d170 1
a170 2
#define GET_SAVED_REGISTER(raw_buffer, optimized, addrp, frame, regnum, lval) \
      generic_get_saved_register (raw_buffer, optimized, addrp, frame, regnum, lval)
@


1.1.1.3
log
@import gdb-19990504 snapshot
@
text
@d129 1
a129 1
#define SKIP_PROLOGUE(pc) (v850_skip_prologue (pc))
@


1.1.1.4
log
@import gdb-1999-05-25 snapshot
@
text
@d135 1
a135 1
#define FRAME_NUM_ARGS(fi) (-1)
d158 1
a158 1
  (v850_push_arguments (NARGS, ARGS, SP, STRUCT_RETURN, STRUCT_ADDR))
@


1.1.1.5
log
@import gdb-1999-07-07 post reformat
@
text
@d5 1
a5 1
   This file is part of GDB.
d7 13
a19 14
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */
d84 1
a84 1
#define BREAKPOINT {0x40, 0xF8}	/* little-ended */
d103 1
a103 1
extern void v850_init_extra_frame_info PARAMS ((struct frame_info * fi));
d107 1
a107 1
extern void v850_frame_find_saved_regs PARAMS ((struct frame_info * fi, struct frame_saved_regs * regaddr));
d110 1
a110 1
extern CORE_ADDR v850_frame_chain PARAMS ((struct frame_info * fi));
d114 2
a115 2
extern CORE_ADDR v850_find_callers_reg PARAMS ((struct frame_info * fi, int regnum));
extern CORE_ADDR v850_frame_saved_pc PARAMS ((struct frame_info *));
d137 1
a137 1
extern void v850_pop_frame PARAMS ((struct frame_info * frame));
d154 3
a156 3
  v850_push_arguments PARAMS ((int nargs, struct value ** args, CORE_ADDR sp,
			       unsigned char struct_return,
			       CORE_ADDR struct_addr));
@


1.1.1.6
log
@import gdb-1999-08-30 snapshot
@
text
@d95 1
d100 1
@


1.1.1.7
log
@import gdb-1999-12-13 snapshot
@
text
@d111 1
a111 1
#define FRAME_CHAIN_VALID(FP, FI)	generic_file_frame_chain_valid (FP, FI)
@


