head	1.14;
access;
symbols
	gdb_5_3-2002-12-12-release:1.13
	carlton_dictionary-20021115-merge:1.13
	kseitz_interps-20021105-merge:1.13
	kseitz_interps-20021103-merge:1.13
	drow-cplus-merge-20021020:1.13
	drow-cplus-merge-20021025:1.13
	carlton_dictionary-20021025-merge:1.13
	carlton_dictionary-20021011-merge:1.13
	drow-cplus-branch:1.13.0.10
	drow-cplus-branchpoint:1.13
	kseitz_interps-20020930-merge:1.13
	carlton_dictionary-20020927-merge:1.13
	carlton_dictionary-branch:1.13.0.8
	carlton_dictionary-20020920-branchpoint:1.13
	gdb_5_3-branch:1.13.0.6
	gdb_5_3-2002-09-04-branchpoint:1.13
	kseitz_interps-20020829-merge:1.13
	cagney_sysregs-20020825-branch:1.13.0.4
	cagney_sysregs-20020825-branchpoint:1.13
	readline_4_3-import-branch:1.13.0.2
	readline_4_3-import-branchpoint:1.13
	gdb_5_2_1-2002-07-23-release:1.10
	kseitz_interps-20020528-branch:1.11.0.6
	kseitz_interps-20020528-branchpoint:1.11
	cagney_regbuf-20020515-branch:1.11.0.4
	cagney_regbuf-20020515-branchpoint:1.11
	jimb-macro-020506-branch:1.11.0.2
	jimb-macro-020506-branchpoint:1.11
	gdb_5_2-2002-04-29-release:1.10
	gdb_5_2-branch:1.10.0.2
	gdb_5_2-2002-03-03-branchpoint:1.10
	gdb_5_1_1-2002-01-24-release:1.7
	gdb_5_1_0_1-2002-01-03-release:1.7
	cygnus_cvs_20020108_pre:1.7
	gdb_5_1_0_1-2002-01-03-branchpoint:1.7
	gdb_5_1_0_1-2002-01-03-branch:1.7.0.8
	gdb_5_1-2001-11-21-release:1.7
	gdb_s390-2001-09-26-branch:1.7.0.6
	gdb_s390-2001-09-26-branchpoint:1.7
	gdb_5_1-2001-07-29-branch:1.7.0.4
	gdb_5_1-2001-07-29-branchpoint:1.7
	dberlin-typesystem-branch:1.7.0.2
	dberlin-typesystem-branchpoint:1.7
	gdb-post-ptid_t-2001-05-03:1.7
	gdb-pre-ptid_t-2001-05-03:1.7
	insight-precleanup-2001-01-01:1.3
	gdb-post-protoization-2000-07-29:1.3
	gdb-pre-protoization-2000-07-29:1.3
	gdb-premipsmulti-2000-06-06-branch:1.3.0.2
	gdb-premipsmulti-2000-06-06-branchpoint:1.3
	gdb-post-params-removal-2000-06-04:1.3
	gdb-pre-params-removal-2000-06-04:1.3
	gdb-post-params-removal-2000-05-28:1.3
	gdb-pre-params-removal-2000-05-28:1.2
	gdb_5_0-2000-05-19-release:1.1.1.5
	gdb_4_18_2-2000-05-18-release:1.1.1.5
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.5
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.5
	gdb_5_0-2000-04-10-branch:1.1.1.5.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1.1.5
	repo-unification-2000-02-06:1.1.1.5
	insight-2000-02-04:1.1.1.5
	gdb-2000-02-04:1.1.1.5
	gdb-2000-02-02:1.1.1.5
	gdb-2000-02-01:1.1.1.5
	gdb-2000-01-31:1.1.1.5
	gdb-2000-01-26:1.1.1.5
	gdb-2000-01-24:1.1.1.5
	gdb-2000-01-17:1.1.1.5
	gdb-2000-01-10:1.1.1.5
	gdb-2000-01-05:1.1.1.5
	gdb-1999-12-21:1.1.1.5
	gdb-1999-12-13:1.1.1.5
	gdb-1999-12-07:1.1.1.5
	gdb-1999-12-06:1.1.1.5
	gdb-1999-11-16:1.1.1.5
	gdb-1999-11-08:1.1.1.5
	gdb-1999-11-01:1.1.1.5
	gdb-1999-10-25:1.1.1.5
	gdb-1999-10-18:1.1.1.5
	gdb-1999-10-11:1.1.1.5
	gdb-1999-10-04:1.1.1.5
	gdb-1999-09-28:1.1.1.5
	gdb-1999-09-21:1.1.1.5
	gdb-1999-09-13:1.1.1.5
	gdb-1999-09-08:1.1.1.5
	gdb-1999-08-30:1.1.1.4
	gdb-1999-08-23:1.1.1.4
	gdb-1999-08-16:1.1.1.4
	gdb-1999-08-09:1.1.1.4
	gdb-1999-08-02:1.1.1.4
	gdb-1999-07-26:1.1.1.4
	gdb-1999-07-19:1.1.1.4
	gdb-1999-07-12:1.1.1.4
	gdb-post-reformat-19990707:1.1.1.4
	gdb-1999-07-07-post-reformat-snapshot:1.1.1.4
	gdb-pre-reformat-19990707:1.1.1.3
	gdb-1999-07-07:1.1.1.3
	gdb-1999-07-05:1.1.1.3
	gdb-1999-06-28:1.1.1.3
	gdb-1999-06-21:1.1.1.3
	gdb-1999-06-14:1.1.1.3
	gdb-1999-06-07:1.1.1.3
	gdb-1999-06-01:1.1.1.3
	gdb-4_18-branch:1.1.1.1.0.2
	gdb-4_18-release:1.1.1.1
	gdb-1999-05-25:1.1.1.3
	gdb-1999-05-19:1.1.1.2
	gdb-1999-05-10:1.1.1.2
	gdb-19990504:1.1.1.2
	gdb-19990422:1.1.1.1
	SNAPSHOT:1.1.1
	gdb-4_18:1.1.1.1
	GDB_4_18:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.14
date	2002.12.16.20.39.11;	author cagney;	state dead;
branches;
next	1.13;

1.13
date	2002.08.06.14.12.47;	author cagney;	state Exp;
branches
	1.13.8.1
	1.13.10.1;
next	1.12;

1.12
date	2002.06.14.22.55.41;	author cagney;	state Exp;
branches;
next	1.11;

1.11
date	2002.04.22.00.27.38;	author davem;	state Exp;
branches
	1.11.4.1
	1.11.6.1;
next	1.10;

1.10
date	2002.01.21.03.34.30;	author cagney;	state Exp;
branches;
next	1.9;

1.9
date	2002.01.20.19.26.48;	author cagney;	state Exp;
branches;
next	1.8;

1.8
date	2002.01.20.18.05.52;	author cagney;	state Exp;
branches;
next	1.7;

1.7
date	2001.03.21.18.31.48;	author cagney;	state Exp;
branches;
next	1.6;

1.6
date	2001.03.20.18.16.14;	author cagney;	state Exp;
branches;
next	1.5;

1.5
date	2001.03.14.23.23.08;	author cagney;	state Exp;
branches;
next	1.4;

1.4
date	2001.03.06.08.21.21;	author kevinb;	state Exp;
branches;
next	1.3;

1.3
date	2000.05.28.01.12.34;	author kevinb;	state Exp;
branches;
next	1.2;

1.2
date	2000.04.14.19.12.43;	author jimb;	state Exp;
branches;
next	1.1;

1.1
date	99.04.16.01.34.15;	author shebs;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.16.01.34.15;	author shebs;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.05.05.14.43.16;	author shebs;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	99.05.25.18.04.10;	author jsm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	99.07.07.20.12.04;	author jsm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	99.09.08.23.59.48;	author shebs;	state Exp;
branches;
next	;

1.11.4.1
date	2002.06.15.16.42.56;	author cagney;	state Exp;
branches;
next	;

1.11.6.1
date	2002.06.20.01.33.53;	author kseitz;	state Exp;
branches;
next	1.11.6.2;

1.11.6.2
date	2002.08.09.18.34.28;	author kseitz;	state Exp;
branches;
next	;

1.13.8.1
date	2002.12.23.19.38.53;	author carlton;	state dead;
branches;
next	;

1.13.10.1
date	2003.12.14.20.27.35;	author drow;	state dead;
branches;
next	;


desc
@@


1.14
log
@2002-12-16  Andrew Cagney  <ac131313@@redhat.com>

	* config/arc/arc.mt, config/arc/tm-arc.h: Delete.
	* config/d30v/d30v.mt, config/d30v/tm-d30v.h: Delete.
	* config/fr30/fr30.mt, config/fr30/tm-fr30.h: Delete.
	* config/i386/i386aix.mh, config/i386/i386aix.mt: Delete.
	* config/i386/i386m3.mh, config/i386/i386m3.mt: Delete.
	* config/i386/i386mach.mh, config/i386/i386os9k.mt: Delete.
	* config/i386/nm-i386aix.h, config/i386/nm-i386mach.h: Delete.
	* config/i386/nm-m3.h, config/i386/tm-i386aix.h: Delete.
	* config/i386/tm-i386m3.h, config/i386/tm-i386mk.h: Delete.
	* config/i386/xm-i386aix.h, config/i386/xm-i386m3.h: Delete.
	* config/i386/xm-i386mach.h, config/i386/xm-i386mk.h: Delete.
	* config/i960/mon960.mt, config/i960/nindy960.mt: Delete.
	* config/i960/tm-i960.h, config/i960/tm-mon960.h: Delete.
	* config/i960/tm-nindy960.h, config/i960/tm-vx960.h: Delete.
	* config/i960/vxworks960.mt, config/m68k/apollo68b.mh: Delete.
	* config/m68k/apollo68b.mt, config/m68k/apollo68v.mh: Delete.
	* config/m68k/hp300bsd.mh, config/m68k/hp300bsd.mt: Delete.
	* config/m68k/hp300hpux.mh, config/m68k/hp300hpux.mt: Delete.
	* config/m88k/delta88.mh, config/m88k/delta88.mt: Delete.
	* config/m88k/delta88v4.mh, config/m88k/delta88v4.mt: Delete.
	* config/m88k/m88k.mh, config/m88k/m88k.mt: Delete.
	* config/m88k/nm-delta88v4.h, config/m88k/nm-m88k.h: Delete.
	* config/m88k/tm-delta88.h, config/m88k/tm-delta88v4.h: Delete.
	* config/m88k/tm-m88k.h, config/m88k/xm-delta88.h: Delete.
	* config/m88k/xm-dgux.h: Delete.
	* fr30-tdep.c, i386aix-nat.c, i386m3-nat.c: Delete.
	* i386mach-nat.c, i960-tdep.c, m88k-nat.c: Delete.
	* os9kread.c, remote-bug.c, remote-nindy.c: Delete.
	* remote-nrom.c, remote-os9k.c, remote-vx960.c: Delete.
	* d30v-tdep.c, arc-tdep.c, cxux-nat.c, dst.h, dstread.c: Delete.
	* ch-exp.c, ch-lang.c, ch-lang.h, ch-typeprint.c: Delete.
	* ch-valprint.c: Delete.
@
text
@// OBSOLETE /* Parameters for target machine ARC, for GDB, the GNU debugger.
// OBSOLETE    Copyright 1995, 1996, 1998, 1999, 2000 Free Software Foundation, Inc.
// OBSOLETE    Contributed by Cygnus Support.
// OBSOLETE 
// OBSOLETE    This file is part of GDB.
// OBSOLETE 
// OBSOLETE    This program is free software; you can redistribute it and/or modify
// OBSOLETE    it under the terms of the GNU General Public License as published by
// OBSOLETE    the Free Software Foundation; either version 2 of the License, or
// OBSOLETE    (at your option) any later version.
// OBSOLETE 
// OBSOLETE    This program is distributed in the hope that it will be useful,
// OBSOLETE    but WITHOUT ANY WARRANTY; without even the implied warranty of
// OBSOLETE    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// OBSOLETE    GNU General Public License for more details.
// OBSOLETE 
// OBSOLETE    You should have received a copy of the GNU General Public License
// OBSOLETE    along with this program; if not, write to the Free Software
// OBSOLETE    Foundation, Inc., 59 Temple Place - Suite 330,
// OBSOLETE    Boston, MA 02111-1307, USA.  */
// OBSOLETE 
// OBSOLETE #include "regcache.h"
// OBSOLETE 
// OBSOLETE /* Used by arc-tdep.c to set the default cpu type.  */
// OBSOLETE #define DEFAULT_ARC_CPU_TYPE "base"
// OBSOLETE 
// OBSOLETE /* Offset from address of function to start of its code.
// OBSOLETE    Zero on most machines.  */
// OBSOLETE #define FUNCTION_START_OFFSET 0
// OBSOLETE 
// OBSOLETE /* Advance PC across any function entry prologue instructions
// OBSOLETE    to reach some "real" code.  */
// OBSOLETE 
// OBSOLETE #define SKIP_PROLOGUE(pc) (arc_skip_prologue (pc, 0))
// OBSOLETE extern CORE_ADDR arc_skip_prologue (CORE_ADDR, int);
// OBSOLETE 
// OBSOLETE #define PROLOGUE_FRAMELESS_P(pc) arc_prologue_frameless_p(pc)
// OBSOLETE extern int arc_prologue_frameless_p (CORE_ADDR);
// OBSOLETE 
// OBSOLETE /* Sequence of bytes for breakpoint instruction.
// OBSOLETE    ??? The current value is "sr -1,[-1]" and is for the simulator only.
// OBSOLETE    The simulator watches for this and does the right thing.
// OBSOLETE    The hardware version will have to associate with each breakpoint
// OBSOLETE    the sequence "flag 1; nop; nop; nop".  IE: The breakpoint insn will not
// OBSOLETE    be a fixed set of bits but instead will be a branch to a semi-random
// OBSOLETE    address.  Presumably this will be cleaned up for "second silicon".  */
// OBSOLETE #define BIG_BREAKPOINT { 0x12, 0x1f, 0xff, 0xff }
// OBSOLETE #define LITTLE_BREAKPOINT { 0xff, 0xff, 0x1f, 0x12 }
// OBSOLETE 
// OBSOLETE /* Given the exposed pipeline, there isn't any one correct value.
// OBSOLETE    However, this value must be 4.  GDB can't handle any other value (other than
// OBSOLETE    zero).  See for example infrun.c:
// OBSOLETE    "prev_pc != stop_pc - DECR_PC_AFTER_BREAK"  */
// OBSOLETE /* FIXME */
// OBSOLETE #define DECR_PC_AFTER_BREAK 8
// OBSOLETE 
// OBSOLETE /* We don't have a reliable single step facility.
// OBSOLETE    ??? We do have a cycle single step facility, but that won't work.  */
// OBSOLETE #define SOFTWARE_SINGLE_STEP_P() 1
// OBSOLETE extern void arc_software_single_step (enum target_signal, int);
// OBSOLETE #define SOFTWARE_SINGLE_STEP(sig,bp_p) arc_software_single_step (sig, bp_p)
// OBSOLETE 
// OBSOLETE /* FIXME: Need to set STEP_SKIPS_DELAY.  */
// OBSOLETE 
// OBSOLETE /* Given a pc value as defined by the hardware, return the real address.
// OBSOLETE    Remember that on the ARC blink contains that status register which
// OBSOLETE    includes PC + flags (so we have to mask out the flags).  */
// OBSOLETE #define ARC_PC_TO_REAL_ADDRESS(pc) (((pc) & 0xffffff) << 2)
// OBSOLETE 
// OBSOLETE /* Immediately after a function call, return the saved pc.
// OBSOLETE    Can't always go through the frames for this because on some machines
// OBSOLETE    the new frame is not set up until the new function
// OBSOLETE    executes some instructions.  */
// OBSOLETE 
// OBSOLETE #define SAVED_PC_AFTER_CALL(frame) \
// OBSOLETE   (ARC_PC_TO_REAL_ADDRESS (read_register (BLINK_REGNUM)))
// OBSOLETE 
// OBSOLETE /* Stack grows upward */
// OBSOLETE 
// OBSOLETE #define INNER_THAN(lhs,rhs) ((lhs) < (rhs))
// OBSOLETE 
// OBSOLETE /* Say how long (ordinary) registers are.  This is a piece of bogosity
// OBSOLETE    used in push_word and a few other places; REGISTER_RAW_SIZE is the
// OBSOLETE    real way to know how big a register is.  */
// OBSOLETE #define REGISTER_SIZE 4
// OBSOLETE 
// OBSOLETE /* Number of machine registers */
// OBSOLETE #define NUM_REGS 92
// OBSOLETE 
// OBSOLETE /* Initializer for an array of names of registers.
// OBSOLETE    There should be NUM_REGS strings in this initializer.  */
// OBSOLETE 
// OBSOLETE #define REGISTER_NAMES \
// OBSOLETE { \
// OBSOLETE     /*  0 */ "r0",  "r1",  "r2",  "r3",  "r4",  "r5",  "r6",  "r7", \
// OBSOLETE     /*  8 */ "r8",  "r9",  "r10", "r11", "r12", "r13", "r14", "r15", \
// OBSOLETE     /* 16 */ "r16", "r17", "r18", "r19", "r20", "r21", "r22", "r23", \
// OBSOLETE     /* 24 */ "r24", "r25", "r26", "fp", "sp", "ilink1", "ilink2", "blink", \
// OBSOLETE     /* 32 */ "r32", "r33", "r34", "r35", "r36", "r37", "r38", "r39", \
// OBSOLETE     /* 40 */ "r40", "r41", "r42", "r43", "r44", "r45", "r46", "r47", \
// OBSOLETE     /* 48 */ "r48", "r49", "r50", "r51", "r52", "r53", "r54", "r55", \
// OBSOLETE     /* 56 */ "r56", "mlo", "mmid", "mhi", "lp_count", \
// OBSOLETE     /* 61 */ "status", "sema", "lp_start", "lp_end", "identity", "debug", \
// OBSOLETE     /* 67 */ "aux10", "aux11", "aux12", "aux13", "aux14", \
// OBSOLETE     /* 72 */ "aux15", "aux16", "aux17", "aux18", "aux19", \
// OBSOLETE     /* 77 */ "aux1a", "aux1b", "aux1c", "aux1d", "aux1e", \
// OBSOLETE     /* 82 */ "aux1f", "aux20", "aux21", "aux22", \
// OBSOLETE     /* 86 */ "aux30", "aux31", "aux32", "aux33", "aux40", \
// OBSOLETE     /* 91 */ "pc" \
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* Register numbers of various important registers (used to index
// OBSOLETE    into arrays of register names and register values).  */
// OBSOLETE 
// OBSOLETE #define R0_REGNUM   0		/* First local register           */
// OBSOLETE #define R59_REGNUM 59		/* Last local register            */
// OBSOLETE #define FP_REGNUM  27		/* Contains address of executing stack frame */
// OBSOLETE #define SP_REGNUM  28		/* stack pointer */
// OBSOLETE #define BLINK_REGNUM 31		/* link register */
// OBSOLETE #define	STA_REGNUM 61		/* processor status word */
// OBSOLETE #define PC_REGNUM  91		/* instruction pointer */
// OBSOLETE #define AUX_BEG_REGNUM  61	/* aux reg begins */
// OBSOLETE #define AUX_END_REGNUM  90	/* aux reg ends, pc not real aux reg */
// OBSOLETE 
// OBSOLETE /* Fake registers used to mark immediate data.  */
// OBSOLETE #define SHIMM_FLAG_REGNUM 61
// OBSOLETE #define LIMM_REGNUM 62
// OBSOLETE #define SHIMM_REGNUM 63
// OBSOLETE 
// OBSOLETE #define AUX_REG_MAP \
// OBSOLETE { \
// OBSOLETE    {  0,  1,  2,  3,  4,  5, \
// OBSOLETE      16, -1, -1, -1, -1, \
// OBSOLETE      -1, -1, -1, -1, -1, \
// OBSOLETE      -1, -1, -1, -1, 30, \
// OBSOLETE      -1, 32, 33, -1, \
// OBSOLETE       48, 49, 50, 51, 64, \
// OBSOLETE       0 \
// OBSOLETE     }, \
// OBSOLETE    {  0,  1,  2,  3,  4,  5, \
// OBSOLETE      16, -1, -1, -1, -1, \
// OBSOLETE      -1, -1, -1, -1, -1, \
// OBSOLETE      -1, -1, -1, -1, 30, \
// OBSOLETE      31, 32, 33, -1, \
// OBSOLETE      -1, -1, -1, -1, -1, \
// OBSOLETE       0 \
// OBSOLETE     }, \
// OBSOLETE    {  0,  1,  2,  3,  4,  5, \
// OBSOLETE       16, 17, 18, 19, 20, \
// OBSOLETE       21, 22, 23, 24, 25, \
// OBSOLETE       26, 27, 28, 29, 30, \
// OBSOLETE       31, 32, 33, 34, \
// OBSOLETE      -1, -1, -1, -1, -1, \
// OBSOLETE       0 \
// OBSOLETE     } \
// OBSOLETE }
// OBSOLETE 
// OBSOLETE #define PFP_REGNUM R0_REGNUM	/* Previous frame pointer */
// OBSOLETE 
// OBSOLETE /* Total amount of space needed to store our copies of the machine's
// OBSOLETE    register state, the array `registers'.  */
// OBSOLETE #define REGISTER_BYTES (NUM_REGS * 4)
// OBSOLETE 
// OBSOLETE /* Index within `registers' of the first byte of the space for register N.  */
// OBSOLETE #define REGISTER_BYTE(N) (4*(N))
// OBSOLETE 
// OBSOLETE /* Number of bytes of storage in the actual machine representation
// OBSOLETE    for register N. */
// OBSOLETE #define REGISTER_RAW_SIZE(N) 4
// OBSOLETE 
// OBSOLETE /* Number of bytes of storage in the program's representation for register N. */
// OBSOLETE #define REGISTER_VIRTUAL_SIZE(N) 4
// OBSOLETE 
// OBSOLETE /* Largest value REGISTER_RAW_SIZE can have.  */
// OBSOLETE #define MAX_REGISTER_RAW_SIZE 4
// OBSOLETE 
// OBSOLETE /* Largest value REGISTER_VIRTUAL_SIZE can have.  */
// OBSOLETE #define MAX_REGISTER_VIRTUAL_SIZE 4
// OBSOLETE 
// OBSOLETE /* Return the GDB type object for the "standard" data type
// OBSOLETE    of data in register N.  */
// OBSOLETE #define REGISTER_VIRTUAL_TYPE(N) (builtin_type_int)
// OBSOLETE 
// OBSOLETE 
// OBSOLETE /* Macros for understanding function return values... */
// OBSOLETE 
// OBSOLETE /* Does the specified function use the "struct returning" convention
// OBSOLETE    or the "value returning" convention?  The "value returning" convention
// OBSOLETE    almost invariably returns the entire value in registers.  The
// OBSOLETE    "struct returning" convention often returns the entire value in
// OBSOLETE    memory, and passes a pointer (out of or into the function) saying
// OBSOLETE    where the value (is or should go).
// OBSOLETE 
// OBSOLETE    Since this sometimes depends on whether it was compiled with GCC,
// OBSOLETE    this is also an argument.  This is used in call_function to build a
// OBSOLETE    stack, and in value_being_returned to print return values.
// OBSOLETE 
// OBSOLETE    On arc, a structure is always retunred with pointer in r0. */
// OBSOLETE 
// OBSOLETE #define USE_STRUCT_CONVENTION(gcc_p, type) 1
// OBSOLETE 
// OBSOLETE /* Extract from an array REGBUF containing the (raw) register state
// OBSOLETE    a function return value of type TYPE, and copy that, in virtual format,
// OBSOLETE    into VALBUF.  This is only called if USE_STRUCT_CONVENTION for this
// OBSOLETE    type is 0.
// OBSOLETE  */
// OBSOLETE #define DEPRECATED_EXTRACT_RETURN_VALUE(TYPE,REGBUF,VALBUF) \
// OBSOLETE 	memcpy(VALBUF, REGBUF+REGISTER_BYTE(R0_REGNUM), TYPE_LENGTH (TYPE))
// OBSOLETE 
// OBSOLETE /* If USE_STRUCT_CONVENTION produces a 1, 
// OBSOLETE    extract from an array REGBUF containing the (raw) register state
// OBSOLETE    the address in which a function should return its structure value,
// OBSOLETE    as a CORE_ADDR (or an expression that can be used as one). */
// OBSOLETE #define DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS(REGBUF) \
// OBSOLETE    (error("Don't know where large structure is returned on arc"), 0)
// OBSOLETE 
// OBSOLETE /* Write into appropriate registers a function return value
// OBSOLETE    of type TYPE, given in virtual format, for "value returning" functions.
// OBSOLETE    For 'return' command:  not (yet) implemented for arc.  */
// OBSOLETE #define STORE_RETURN_VALUE(TYPE,VALBUF) \
// OBSOLETE     error ("Returning values from functions is not implemented in arc gdb")
// OBSOLETE 
// OBSOLETE /* Store the address of the place in which to copy the structure the
// OBSOLETE    subroutine will return.  This is called from call_function. */
// OBSOLETE #define STORE_STRUCT_RETURN(ADDR, SP) \
// OBSOLETE     error ("Returning values from functions is not implemented in arc gdb")
// OBSOLETE 
// OBSOLETE 
// OBSOLETE /* Describe the pointer in each stack frame to the previous stack frame
// OBSOLETE    (its caller).  */
// OBSOLETE 
// OBSOLETE /* We cache information about saved registers in the frame structure,
// OBSOLETE    to save us from having to re-scan function prologues every time
// OBSOLETE    a register in a non-current frame is accessed.  */
// OBSOLETE 
// OBSOLETE #define EXTRA_FRAME_INFO \
// OBSOLETE 	struct frame_saved_regs *fsr; \
// OBSOLETE 	CORE_ADDR arg_pointer;
// OBSOLETE 
// OBSOLETE /* Zero the frame_saved_regs pointer when the frame is initialized,
// OBSOLETE    so that FRAME_FIND_SAVED_REGS () will know to allocate and
// OBSOLETE    initialize a frame_saved_regs struct the first time it is called.
// OBSOLETE    Set the arg_pointer to -1, which is not valid; 0 and other values
// OBSOLETE    indicate real, cached values.  */
// OBSOLETE 
// OBSOLETE #define INIT_EXTRA_FRAME_INFO(fromleaf, fi) \
// OBSOLETE 	((fi)->fsr = 0, (fi)->arg_pointer = -1)
// OBSOLETE 
// OBSOLETE /* FRAME_CHAIN takes a frame's nominal address
// OBSOLETE    and produces the frame's chain-pointer.
// OBSOLETE    However, if FRAME_CHAIN_VALID returns zero,
// OBSOLETE    it means the given frame is the outermost one and has no caller.  */
// OBSOLETE /* On the arc, we get the chain pointer by reading the PFP saved
// OBSOLETE    on the stack. */
// OBSOLETE /* The PFP and RPC is in fp and fp+4.  */
// OBSOLETE 
// OBSOLETE #define FRAME_CHAIN(thisframe) \
// OBSOLETE   (read_memory_integer (FRAME_FP (thisframe), 4))
// OBSOLETE 
// OBSOLETE /* FRAME_CHAIN_VALID returns zero if the given frame is the outermost one
// OBSOLETE    and has no caller.  */
// OBSOLETE #define FRAME_CHAIN_VALID(chain, thisframe) nonnull_frame_chain_valid (chain, thisframe)
// OBSOLETE 
// OBSOLETE /* An expression that tells us whether the function invocation represented
// OBSOLETE    by FI does not have a frame on the stack associated with it. */
// OBSOLETE 
// OBSOLETE #define FRAMELESS_FUNCTION_INVOCATION(FI) \
// OBSOLETE      (((FI)->signal_handler_caller) ? 0 : frameless_look_for_prologue (FI))
// OBSOLETE 
// OBSOLETE /* Where is the PC for a specific frame.
// OBSOLETE    A leaf function may never save blink, so we have to check for that here.  */
// OBSOLETE 
// OBSOLETE #define FRAME_SAVED_PC(frame) (arc_frame_saved_pc (frame))
// OBSOLETE struct frame_info;		/* in case frame.h not included yet */
// OBSOLETE CORE_ADDR arc_frame_saved_pc (struct frame_info *);
// OBSOLETE 
// OBSOLETE /* If the argument is on the stack, it will be here.
// OBSOLETE    We cache this value in the frame info if we've already looked it up.  */
// OBSOLETE /* ??? Is the arg_pointer check necessary?  */
// OBSOLETE 
// OBSOLETE #define FRAME_ARGS_ADDRESS(fi) \
// OBSOLETE   (((fi)->arg_pointer != -1) ? (fi)->arg_pointer : (fi)->frame)
// OBSOLETE 
// OBSOLETE /* This is the same except it should return 0 when
// OBSOLETE    it does not really know where the args are, rather than guessing.
// OBSOLETE    This value is not cached since it is only used infrequently.  */
// OBSOLETE 
// OBSOLETE #define FRAME_LOCALS_ADDRESS(fi)	((fi)->frame)
// OBSOLETE 
// OBSOLETE /* Set NUMARGS to the number of args passed to a frame.
// OBSOLETE    Can return -1, meaning no way to tell.  */
// OBSOLETE 
// OBSOLETE #define FRAME_NUM_ARGS(fi)	(-1)
// OBSOLETE 
// OBSOLETE /* Return number of bytes at start of arglist that are not really args.  */
// OBSOLETE 
// OBSOLETE #define FRAME_ARGS_SKIP 0
// OBSOLETE 
// OBSOLETE /* Produce the positions of the saved registers in a stack frame.  */
// OBSOLETE 
// OBSOLETE #define FRAME_FIND_SAVED_REGS(frame_info_addr, sr) \
// OBSOLETE 	frame_find_saved_regs (frame_info_addr, &sr)
// OBSOLETE extern void frame_find_saved_regs ();	/* See arc-tdep.c */
// OBSOLETE 
// OBSOLETE 
// OBSOLETE /* Things needed for making calls to functions in the inferior process */
// OBSOLETE void arc_push_dummy_frame (void);
// OBSOLETE #define PUSH_DUMMY_FRAME \
// OBSOLETE 	arc_push_dummy_frame ()
// OBSOLETE 
// OBSOLETE /* Discard from the stack the innermost frame, restoring all registers.  */
// OBSOLETE void arc_pop_frame (void);
// OBSOLETE #define POP_FRAME \
// OBSOLETE 	arc_pop_frame ()
// OBSOLETE 
// OBSOLETE /* This sequence of words is the instructions  bl xxxx, flag 1 */
// OBSOLETE #define CALL_DUMMY { 0x28000000, 0x1fbe8001 }
// OBSOLETE #define CALL_DUMMY_LENGTH 8
// OBSOLETE 
// OBSOLETE /* Start execution at beginning of dummy */
// OBSOLETE #define CALL_DUMMY_START_OFFSET 0
// OBSOLETE 
// OBSOLETE /* Insert the specified number of args and function address
// OBSOLETE    into a call sequence of the above form stored at 'dummyname'. */
// OBSOLETE #define FIX_CALL_DUMMY(dummyname, pc, fun, nargs, args, type, gcc_p) \
// OBSOLETE { \
// OBSOLETE         int from, to, delta, loc; \
// OBSOLETE         loc = (int)(read_register (SP_REGNUM) - CALL_DUMMY_LENGTH); \
// OBSOLETE         from = loc + 4; \
// OBSOLETE         to = (int)(fun); \
// OBSOLETE         delta = (to - from) >> 2; \
// OBSOLETE         *((char *)(dummyname) + 1) = (delta & 0x1); \
// OBSOLETE         *((char *)(dummyname) + 2) = ((delta >> 1) & 0xff); \
// OBSOLETE         *((char *)(dummyname) + 3) = ((delta >> 9) & 0xff); \
// OBSOLETE         *((char *)(dummyname) + 4) = ((delta >> 17) & 0x7); \
// OBSOLETE }
@


1.13
log
@2002-08-06  Andrew Cagney  <cagney@@redhat.com>
* configure.tgt: Make arc-*-* obsolete.
* NEWS: Mention that arc-*-* has been identifed as obsolete.
* MAINTAINERS: Make arc-elf obsolete.
* arc-tdep.c: Make file obsolete.
* config/arc/arc.mt: Ditto.
* config/arc/tm-arc.h: Ditto.
@
text
@@


1.13.10.1
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@@


1.13.8.1
log
@2002-12-23  David Carlton  <carlton@@math.stanford.edu>

	* Merge from mainline; tag is carlton_dictionary-20021223-merge.
@
text
@@


1.12
log
@+	* gdbarch.sh (DEPRECATED_EXTRACT_RETURN_VALUE): Rename
+	EXTRACT_RETURN_VALUE.
+	(DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS): Rename
+	EXTRACT_STRUCT_VALUE_ADDRESS.
+	* gdbarch.h, gdbarch.c: Regenerate.
+
+	* values.c (value_being_returned): Handle
+	DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS.
+	(EXTRACT_RETURN_VALUE): Define as DEPRECATED_EXTRACT_RETURN_VALUE.
+
+	* arm-linux-tdep.c (arm_linux_init_abi): Update.
+	* arm-tdep.c (arm_gdbarch_init): Update.
+	* avr-tdep.c (avr_gdbarch_init): Update.
+	* cris-tdep.c (cris_gdbarch_init): Update.
+	* d10v-tdep.c (d10v_gdbarch_init): Update.
+	* ia64-tdep.c (ia64_gdbarch_init): Update.
+	* m68hc11-tdep.c (m68hc11_gdbarch_init): Update.
+	* rs6000-tdep.c (rs6000_gdbarch_init): Update.
+	* s390-tdep.c (s390_gdbarch_init): Update.
+	* sh-tdep.c (sh_gdbarch_init): Update.
+	* s390-tdep.c (s390_gdbarch_init): Update.
+	* sparc-tdep.c (sparc_gdbarch_init): Update.
+	* ns32k-tdep.c (ns32k_gdbarch_init): Update.
+	* v850-tdep.c (v850_gdbarch_init): Update.
+	* vax-tdep.c (vax_gdbarch_init): Update.
+	* x86-64-tdep.c (x86_64_gdbarch_init): Update.
+	* xstormy16-tdep.c (xstormy16_gdbarch_init): Update.
+
+	* config/arc/tm-arc.h: Update.
+	* config/d30v/tm-d30v.h: Update.
+	* config/fr30/tm-fr30.h: Update.
+	* config/h8300/tm-h8300.h: Update.
* config/h8500/tm-h8500.h: Update.
* config/i386/tm-i386.h: Update.
* config/i386/tm-ptx.h: Update.
* config/i386/tm-symmetry.h: Update.
* config/i960/tm-i960.h: Update.
* config/m32r/tm-m32r.h: Update.
* config/m68k/tm-delta68.h: Update.
* config/m68k/tm-linux.h: Update.
* config/m68k/tm-m68k.h: Update.
* config/m88k/tm-m88k.h: Update.
* config/mcore/tm-mcore.h: Update.
* config/mips/tm-mips.h: Update.
* config/mn10200/tm-mn10200.h: Update.
* config/pa/tm-hppa.h: Update.
* config/pa/tm-hppa64.h: Update.
* config/sparc/tm-sp64.h: Update.
* config/sparc/tm-sparc.h: Update.
* config/sparc/tm-sparclet.h: Update.
* config/z8k/tm-z8k.h: Update.
@
text
@d1 336
a336 336
/* Parameters for target machine ARC, for GDB, the GNU debugger.
   Copyright 1995, 1996, 1998, 1999, 2000 Free Software Foundation, Inc.
   Contributed by Cygnus Support.

   This file is part of GDB.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

#include "regcache.h"

/* Used by arc-tdep.c to set the default cpu type.  */
#define DEFAULT_ARC_CPU_TYPE "base"

/* Offset from address of function to start of its code.
   Zero on most machines.  */
#define FUNCTION_START_OFFSET 0

/* Advance PC across any function entry prologue instructions
   to reach some "real" code.  */

#define SKIP_PROLOGUE(pc) (arc_skip_prologue (pc, 0))
extern CORE_ADDR arc_skip_prologue (CORE_ADDR, int);

#define PROLOGUE_FRAMELESS_P(pc) arc_prologue_frameless_p(pc)
extern int arc_prologue_frameless_p (CORE_ADDR);

/* Sequence of bytes for breakpoint instruction.
   ??? The current value is "sr -1,[-1]" and is for the simulator only.
   The simulator watches for this and does the right thing.
   The hardware version will have to associate with each breakpoint
   the sequence "flag 1; nop; nop; nop".  IE: The breakpoint insn will not
   be a fixed set of bits but instead will be a branch to a semi-random
   address.  Presumably this will be cleaned up for "second silicon".  */
#define BIG_BREAKPOINT { 0x12, 0x1f, 0xff, 0xff }
#define LITTLE_BREAKPOINT { 0xff, 0xff, 0x1f, 0x12 }

/* Given the exposed pipeline, there isn't any one correct value.
   However, this value must be 4.  GDB can't handle any other value (other than
   zero).  See for example infrun.c:
   "prev_pc != stop_pc - DECR_PC_AFTER_BREAK"  */
/* FIXME */
#define DECR_PC_AFTER_BREAK 8

/* We don't have a reliable single step facility.
   ??? We do have a cycle single step facility, but that won't work.  */
#define SOFTWARE_SINGLE_STEP_P() 1
extern void arc_software_single_step (enum target_signal, int);
#define SOFTWARE_SINGLE_STEP(sig,bp_p) arc_software_single_step (sig, bp_p)

/* FIXME: Need to set STEP_SKIPS_DELAY.  */

/* Given a pc value as defined by the hardware, return the real address.
   Remember that on the ARC blink contains that status register which
   includes PC + flags (so we have to mask out the flags).  */
#define ARC_PC_TO_REAL_ADDRESS(pc) (((pc) & 0xffffff) << 2)

/* Immediately after a function call, return the saved pc.
   Can't always go through the frames for this because on some machines
   the new frame is not set up until the new function
   executes some instructions.  */

#define SAVED_PC_AFTER_CALL(frame) \
  (ARC_PC_TO_REAL_ADDRESS (read_register (BLINK_REGNUM)))

/* Stack grows upward */

#define INNER_THAN(lhs,rhs) ((lhs) < (rhs))

/* Say how long (ordinary) registers are.  This is a piece of bogosity
   used in push_word and a few other places; REGISTER_RAW_SIZE is the
   real way to know how big a register is.  */
#define REGISTER_SIZE 4

/* Number of machine registers */
#define NUM_REGS 92

/* Initializer for an array of names of registers.
   There should be NUM_REGS strings in this initializer.  */

#define REGISTER_NAMES \
{ \
    /*  0 */ "r0",  "r1",  "r2",  "r3",  "r4",  "r5",  "r6",  "r7", \
    /*  8 */ "r8",  "r9",  "r10", "r11", "r12", "r13", "r14", "r15", \
    /* 16 */ "r16", "r17", "r18", "r19", "r20", "r21", "r22", "r23", \
    /* 24 */ "r24", "r25", "r26", "fp", "sp", "ilink1", "ilink2", "blink", \
    /* 32 */ "r32", "r33", "r34", "r35", "r36", "r37", "r38", "r39", \
    /* 40 */ "r40", "r41", "r42", "r43", "r44", "r45", "r46", "r47", \
    /* 48 */ "r48", "r49", "r50", "r51", "r52", "r53", "r54", "r55", \
    /* 56 */ "r56", "mlo", "mmid", "mhi", "lp_count", \
    /* 61 */ "status", "sema", "lp_start", "lp_end", "identity", "debug", \
    /* 67 */ "aux10", "aux11", "aux12", "aux13", "aux14", \
    /* 72 */ "aux15", "aux16", "aux17", "aux18", "aux19", \
    /* 77 */ "aux1a", "aux1b", "aux1c", "aux1d", "aux1e", \
    /* 82 */ "aux1f", "aux20", "aux21", "aux22", \
    /* 86 */ "aux30", "aux31", "aux32", "aux33", "aux40", \
    /* 91 */ "pc" \
}

/* Register numbers of various important registers (used to index
   into arrays of register names and register values).  */

#define R0_REGNUM   0		/* First local register           */
#define R59_REGNUM 59		/* Last local register            */
#define FP_REGNUM  27		/* Contains address of executing stack frame */
#define SP_REGNUM  28		/* stack pointer */
#define BLINK_REGNUM 31		/* link register */
#define	STA_REGNUM 61		/* processor status word */
#define PC_REGNUM  91		/* instruction pointer */
#define AUX_BEG_REGNUM  61	/* aux reg begins */
#define AUX_END_REGNUM  90	/* aux reg ends, pc not real aux reg */

/* Fake registers used to mark immediate data.  */
#define SHIMM_FLAG_REGNUM 61
#define LIMM_REGNUM 62
#define SHIMM_REGNUM 63

#define AUX_REG_MAP \
{ \
   {  0,  1,  2,  3,  4,  5, \
     16, -1, -1, -1, -1, \
     -1, -1, -1, -1, -1, \
     -1, -1, -1, -1, 30, \
     -1, 32, 33, -1, \
      48, 49, 50, 51, 64, \
      0 \
    }, \
   {  0,  1,  2,  3,  4,  5, \
     16, -1, -1, -1, -1, \
     -1, -1, -1, -1, -1, \
     -1, -1, -1, -1, 30, \
     31, 32, 33, -1, \
     -1, -1, -1, -1, -1, \
      0 \
    }, \
   {  0,  1,  2,  3,  4,  5, \
      16, 17, 18, 19, 20, \
      21, 22, 23, 24, 25, \
      26, 27, 28, 29, 30, \
      31, 32, 33, 34, \
     -1, -1, -1, -1, -1, \
      0 \
    } \
}

#define PFP_REGNUM R0_REGNUM	/* Previous frame pointer */

/* Total amount of space needed to store our copies of the machine's
   register state, the array `registers'.  */
#define REGISTER_BYTES (NUM_REGS * 4)

/* Index within `registers' of the first byte of the space for register N.  */
#define REGISTER_BYTE(N) (4*(N))

/* Number of bytes of storage in the actual machine representation
   for register N. */
#define REGISTER_RAW_SIZE(N) 4

/* Number of bytes of storage in the program's representation for register N. */
#define REGISTER_VIRTUAL_SIZE(N) 4

/* Largest value REGISTER_RAW_SIZE can have.  */
#define MAX_REGISTER_RAW_SIZE 4

/* Largest value REGISTER_VIRTUAL_SIZE can have.  */
#define MAX_REGISTER_VIRTUAL_SIZE 4

/* Return the GDB type object for the "standard" data type
   of data in register N.  */
#define REGISTER_VIRTUAL_TYPE(N) (builtin_type_int)


/* Macros for understanding function return values... */

/* Does the specified function use the "struct returning" convention
   or the "value returning" convention?  The "value returning" convention
   almost invariably returns the entire value in registers.  The
   "struct returning" convention often returns the entire value in
   memory, and passes a pointer (out of or into the function) saying
   where the value (is or should go).

   Since this sometimes depends on whether it was compiled with GCC,
   this is also an argument.  This is used in call_function to build a
   stack, and in value_being_returned to print return values.

   On arc, a structure is always retunred with pointer in r0. */

#define USE_STRUCT_CONVENTION(gcc_p, type) 1

/* Extract from an array REGBUF containing the (raw) register state
   a function return value of type TYPE, and copy that, in virtual format,
   into VALBUF.  This is only called if USE_STRUCT_CONVENTION for this
   type is 0.
 */
#define DEPRECATED_EXTRACT_RETURN_VALUE(TYPE,REGBUF,VALBUF) \
	memcpy(VALBUF, REGBUF+REGISTER_BYTE(R0_REGNUM), TYPE_LENGTH (TYPE))

/* If USE_STRUCT_CONVENTION produces a 1, 
   extract from an array REGBUF containing the (raw) register state
   the address in which a function should return its structure value,
   as a CORE_ADDR (or an expression that can be used as one). */
#define DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS(REGBUF) \
   (error("Don't know where large structure is returned on arc"), 0)

/* Write into appropriate registers a function return value
   of type TYPE, given in virtual format, for "value returning" functions.
   For 'return' command:  not (yet) implemented for arc.  */
#define STORE_RETURN_VALUE(TYPE,VALBUF) \
    error ("Returning values from functions is not implemented in arc gdb")

/* Store the address of the place in which to copy the structure the
   subroutine will return.  This is called from call_function. */
#define STORE_STRUCT_RETURN(ADDR, SP) \
    error ("Returning values from functions is not implemented in arc gdb")


/* Describe the pointer in each stack frame to the previous stack frame
   (its caller).  */

/* We cache information about saved registers in the frame structure,
   to save us from having to re-scan function prologues every time
   a register in a non-current frame is accessed.  */

#define EXTRA_FRAME_INFO \
	struct frame_saved_regs *fsr; \
	CORE_ADDR arg_pointer;

/* Zero the frame_saved_regs pointer when the frame is initialized,
   so that FRAME_FIND_SAVED_REGS () will know to allocate and
   initialize a frame_saved_regs struct the first time it is called.
   Set the arg_pointer to -1, which is not valid; 0 and other values
   indicate real, cached values.  */

#define INIT_EXTRA_FRAME_INFO(fromleaf, fi) \
	((fi)->fsr = 0, (fi)->arg_pointer = -1)

/* FRAME_CHAIN takes a frame's nominal address
   and produces the frame's chain-pointer.
   However, if FRAME_CHAIN_VALID returns zero,
   it means the given frame is the outermost one and has no caller.  */
/* On the arc, we get the chain pointer by reading the PFP saved
   on the stack. */
/* The PFP and RPC is in fp and fp+4.  */

#define FRAME_CHAIN(thisframe) \
  (read_memory_integer (FRAME_FP (thisframe), 4))

/* FRAME_CHAIN_VALID returns zero if the given frame is the outermost one
   and has no caller.  */
#define FRAME_CHAIN_VALID(chain, thisframe) nonnull_frame_chain_valid (chain, thisframe)

/* An expression that tells us whether the function invocation represented
   by FI does not have a frame on the stack associated with it. */

#define FRAMELESS_FUNCTION_INVOCATION(FI) \
     (((FI)->signal_handler_caller) ? 0 : frameless_look_for_prologue (FI))

/* Where is the PC for a specific frame.
   A leaf function may never save blink, so we have to check for that here.  */

#define FRAME_SAVED_PC(frame) (arc_frame_saved_pc (frame))
struct frame_info;		/* in case frame.h not included yet */
CORE_ADDR arc_frame_saved_pc (struct frame_info *);

/* If the argument is on the stack, it will be here.
   We cache this value in the frame info if we've already looked it up.  */
/* ??? Is the arg_pointer check necessary?  */

#define FRAME_ARGS_ADDRESS(fi) \
  (((fi)->arg_pointer != -1) ? (fi)->arg_pointer : (fi)->frame)

/* This is the same except it should return 0 when
   it does not really know where the args are, rather than guessing.
   This value is not cached since it is only used infrequently.  */

#define FRAME_LOCALS_ADDRESS(fi)	((fi)->frame)

/* Set NUMARGS to the number of args passed to a frame.
   Can return -1, meaning no way to tell.  */

#define FRAME_NUM_ARGS(fi)	(-1)

/* Return number of bytes at start of arglist that are not really args.  */

#define FRAME_ARGS_SKIP 0

/* Produce the positions of the saved registers in a stack frame.  */

#define FRAME_FIND_SAVED_REGS(frame_info_addr, sr) \
	frame_find_saved_regs (frame_info_addr, &sr)
extern void frame_find_saved_regs ();	/* See arc-tdep.c */


/* Things needed for making calls to functions in the inferior process */
void arc_push_dummy_frame (void);
#define PUSH_DUMMY_FRAME \
	arc_push_dummy_frame ()

/* Discard from the stack the innermost frame, restoring all registers.  */
void arc_pop_frame (void);
#define POP_FRAME \
	arc_pop_frame ()

/* This sequence of words is the instructions  bl xxxx, flag 1 */
#define CALL_DUMMY { 0x28000000, 0x1fbe8001 }
#define CALL_DUMMY_LENGTH 8

/* Start execution at beginning of dummy */
#define CALL_DUMMY_START_OFFSET 0

/* Insert the specified number of args and function address
   into a call sequence of the above form stored at 'dummyname'. */
#define FIX_CALL_DUMMY(dummyname, pc, fun, nargs, args, type, gcc_p) \
{ \
        int from, to, delta, loc; \
        loc = (int)(read_register (SP_REGNUM) - CALL_DUMMY_LENGTH); \
        from = loc + 4; \
        to = (int)(fun); \
        delta = (to - from) >> 2; \
        *((char *)(dummyname) + 1) = (delta & 0x1); \
        *((char *)(dummyname) + 2) = ((delta >> 1) & 0xff); \
        *((char *)(dummyname) + 3) = ((delta >> 9) & 0xff); \
        *((char *)(dummyname) + 4) = ((delta >> 17) & 0x7); \
}
@


1.11
log
@2002-04-21  David S. Miller  <davem@@redhat.com>

	* arch-utils.c (generic_prologue_frameless_p): Kill
	SKIP_PROLOGUE_FRAMELESS_P code.
	* config/arc/tm-arc.h (SKIP_PROLOGUE_FRAMELESS_P): Delete
	references.
	(PROLOGUE_FRAMELESS_P, arc_prologue_frameless_p): New.
	* arc-tdep.c (arc_prologue_frameless_p): Implement.
	* config/arc/tm-sparc.h (SKIP_PROLOGUE_FRAMELESS_P): Delete
	references.
	(PROLOGUE_FRAMELESS_P, sparc_prologue_frameless_p): New.
	* sparc-tdep.c (sparc_prologue_frameless_p): Implement.
	(sparc_gdbarch_init): Pass it to
	set_gdbarch_prologue_frameless_p.
@
text
@d207 1
a207 1
#define EXTRACT_RETURN_VALUE(TYPE,REGBUF,VALBUF) \
d214 1
a214 1
#define EXTRACT_STRUCT_VALUE_ADDRESS(REGBUF) \
@


1.11.6.1
log
@Merge with mainline, kseitz_interps-20020619-merge.
@
text
@d207 1
a207 1
#define DEPRECATED_EXTRACT_RETURN_VALUE(TYPE,REGBUF,VALBUF) \
d214 1
a214 1
#define DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS(REGBUF) \
@


1.11.6.2
log
@Merge with kseitz_interps-20020809-merge of CVS head.
@
text
@d1 336
a336 336
// OBSOLETE /* Parameters for target machine ARC, for GDB, the GNU debugger.
// OBSOLETE    Copyright 1995, 1996, 1998, 1999, 2000 Free Software Foundation, Inc.
// OBSOLETE    Contributed by Cygnus Support.
// OBSOLETE 
// OBSOLETE    This file is part of GDB.
// OBSOLETE 
// OBSOLETE    This program is free software; you can redistribute it and/or modify
// OBSOLETE    it under the terms of the GNU General Public License as published by
// OBSOLETE    the Free Software Foundation; either version 2 of the License, or
// OBSOLETE    (at your option) any later version.
// OBSOLETE 
// OBSOLETE    This program is distributed in the hope that it will be useful,
// OBSOLETE    but WITHOUT ANY WARRANTY; without even the implied warranty of
// OBSOLETE    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// OBSOLETE    GNU General Public License for more details.
// OBSOLETE 
// OBSOLETE    You should have received a copy of the GNU General Public License
// OBSOLETE    along with this program; if not, write to the Free Software
// OBSOLETE    Foundation, Inc., 59 Temple Place - Suite 330,
// OBSOLETE    Boston, MA 02111-1307, USA.  */
// OBSOLETE 
// OBSOLETE #include "regcache.h"
// OBSOLETE 
// OBSOLETE /* Used by arc-tdep.c to set the default cpu type.  */
// OBSOLETE #define DEFAULT_ARC_CPU_TYPE "base"
// OBSOLETE 
// OBSOLETE /* Offset from address of function to start of its code.
// OBSOLETE    Zero on most machines.  */
// OBSOLETE #define FUNCTION_START_OFFSET 0
// OBSOLETE 
// OBSOLETE /* Advance PC across any function entry prologue instructions
// OBSOLETE    to reach some "real" code.  */
// OBSOLETE 
// OBSOLETE #define SKIP_PROLOGUE(pc) (arc_skip_prologue (pc, 0))
// OBSOLETE extern CORE_ADDR arc_skip_prologue (CORE_ADDR, int);
// OBSOLETE 
// OBSOLETE #define PROLOGUE_FRAMELESS_P(pc) arc_prologue_frameless_p(pc)
// OBSOLETE extern int arc_prologue_frameless_p (CORE_ADDR);
// OBSOLETE 
// OBSOLETE /* Sequence of bytes for breakpoint instruction.
// OBSOLETE    ??? The current value is "sr -1,[-1]" and is for the simulator only.
// OBSOLETE    The simulator watches for this and does the right thing.
// OBSOLETE    The hardware version will have to associate with each breakpoint
// OBSOLETE    the sequence "flag 1; nop; nop; nop".  IE: The breakpoint insn will not
// OBSOLETE    be a fixed set of bits but instead will be a branch to a semi-random
// OBSOLETE    address.  Presumably this will be cleaned up for "second silicon".  */
// OBSOLETE #define BIG_BREAKPOINT { 0x12, 0x1f, 0xff, 0xff }
// OBSOLETE #define LITTLE_BREAKPOINT { 0xff, 0xff, 0x1f, 0x12 }
// OBSOLETE 
// OBSOLETE /* Given the exposed pipeline, there isn't any one correct value.
// OBSOLETE    However, this value must be 4.  GDB can't handle any other value (other than
// OBSOLETE    zero).  See for example infrun.c:
// OBSOLETE    "prev_pc != stop_pc - DECR_PC_AFTER_BREAK"  */
// OBSOLETE /* FIXME */
// OBSOLETE #define DECR_PC_AFTER_BREAK 8
// OBSOLETE 
// OBSOLETE /* We don't have a reliable single step facility.
// OBSOLETE    ??? We do have a cycle single step facility, but that won't work.  */
// OBSOLETE #define SOFTWARE_SINGLE_STEP_P() 1
// OBSOLETE extern void arc_software_single_step (enum target_signal, int);
// OBSOLETE #define SOFTWARE_SINGLE_STEP(sig,bp_p) arc_software_single_step (sig, bp_p)
// OBSOLETE 
// OBSOLETE /* FIXME: Need to set STEP_SKIPS_DELAY.  */
// OBSOLETE 
// OBSOLETE /* Given a pc value as defined by the hardware, return the real address.
// OBSOLETE    Remember that on the ARC blink contains that status register which
// OBSOLETE    includes PC + flags (so we have to mask out the flags).  */
// OBSOLETE #define ARC_PC_TO_REAL_ADDRESS(pc) (((pc) & 0xffffff) << 2)
// OBSOLETE 
// OBSOLETE /* Immediately after a function call, return the saved pc.
// OBSOLETE    Can't always go through the frames for this because on some machines
// OBSOLETE    the new frame is not set up until the new function
// OBSOLETE    executes some instructions.  */
// OBSOLETE 
// OBSOLETE #define SAVED_PC_AFTER_CALL(frame) \
// OBSOLETE   (ARC_PC_TO_REAL_ADDRESS (read_register (BLINK_REGNUM)))
// OBSOLETE 
// OBSOLETE /* Stack grows upward */
// OBSOLETE 
// OBSOLETE #define INNER_THAN(lhs,rhs) ((lhs) < (rhs))
// OBSOLETE 
// OBSOLETE /* Say how long (ordinary) registers are.  This is a piece of bogosity
// OBSOLETE    used in push_word and a few other places; REGISTER_RAW_SIZE is the
// OBSOLETE    real way to know how big a register is.  */
// OBSOLETE #define REGISTER_SIZE 4
// OBSOLETE 
// OBSOLETE /* Number of machine registers */
// OBSOLETE #define NUM_REGS 92
// OBSOLETE 
// OBSOLETE /* Initializer for an array of names of registers.
// OBSOLETE    There should be NUM_REGS strings in this initializer.  */
// OBSOLETE 
// OBSOLETE #define REGISTER_NAMES \
// OBSOLETE { \
// OBSOLETE     /*  0 */ "r0",  "r1",  "r2",  "r3",  "r4",  "r5",  "r6",  "r7", \
// OBSOLETE     /*  8 */ "r8",  "r9",  "r10", "r11", "r12", "r13", "r14", "r15", \
// OBSOLETE     /* 16 */ "r16", "r17", "r18", "r19", "r20", "r21", "r22", "r23", \
// OBSOLETE     /* 24 */ "r24", "r25", "r26", "fp", "sp", "ilink1", "ilink2", "blink", \
// OBSOLETE     /* 32 */ "r32", "r33", "r34", "r35", "r36", "r37", "r38", "r39", \
// OBSOLETE     /* 40 */ "r40", "r41", "r42", "r43", "r44", "r45", "r46", "r47", \
// OBSOLETE     /* 48 */ "r48", "r49", "r50", "r51", "r52", "r53", "r54", "r55", \
// OBSOLETE     /* 56 */ "r56", "mlo", "mmid", "mhi", "lp_count", \
// OBSOLETE     /* 61 */ "status", "sema", "lp_start", "lp_end", "identity", "debug", \
// OBSOLETE     /* 67 */ "aux10", "aux11", "aux12", "aux13", "aux14", \
// OBSOLETE     /* 72 */ "aux15", "aux16", "aux17", "aux18", "aux19", \
// OBSOLETE     /* 77 */ "aux1a", "aux1b", "aux1c", "aux1d", "aux1e", \
// OBSOLETE     /* 82 */ "aux1f", "aux20", "aux21", "aux22", \
// OBSOLETE     /* 86 */ "aux30", "aux31", "aux32", "aux33", "aux40", \
// OBSOLETE     /* 91 */ "pc" \
// OBSOLETE }
// OBSOLETE 
// OBSOLETE /* Register numbers of various important registers (used to index
// OBSOLETE    into arrays of register names and register values).  */
// OBSOLETE 
// OBSOLETE #define R0_REGNUM   0		/* First local register           */
// OBSOLETE #define R59_REGNUM 59		/* Last local register            */
// OBSOLETE #define FP_REGNUM  27		/* Contains address of executing stack frame */
// OBSOLETE #define SP_REGNUM  28		/* stack pointer */
// OBSOLETE #define BLINK_REGNUM 31		/* link register */
// OBSOLETE #define	STA_REGNUM 61		/* processor status word */
// OBSOLETE #define PC_REGNUM  91		/* instruction pointer */
// OBSOLETE #define AUX_BEG_REGNUM  61	/* aux reg begins */
// OBSOLETE #define AUX_END_REGNUM  90	/* aux reg ends, pc not real aux reg */
// OBSOLETE 
// OBSOLETE /* Fake registers used to mark immediate data.  */
// OBSOLETE #define SHIMM_FLAG_REGNUM 61
// OBSOLETE #define LIMM_REGNUM 62
// OBSOLETE #define SHIMM_REGNUM 63
// OBSOLETE 
// OBSOLETE #define AUX_REG_MAP \
// OBSOLETE { \
// OBSOLETE    {  0,  1,  2,  3,  4,  5, \
// OBSOLETE      16, -1, -1, -1, -1, \
// OBSOLETE      -1, -1, -1, -1, -1, \
// OBSOLETE      -1, -1, -1, -1, 30, \
// OBSOLETE      -1, 32, 33, -1, \
// OBSOLETE       48, 49, 50, 51, 64, \
// OBSOLETE       0 \
// OBSOLETE     }, \
// OBSOLETE    {  0,  1,  2,  3,  4,  5, \
// OBSOLETE      16, -1, -1, -1, -1, \
// OBSOLETE      -1, -1, -1, -1, -1, \
// OBSOLETE      -1, -1, -1, -1, 30, \
// OBSOLETE      31, 32, 33, -1, \
// OBSOLETE      -1, -1, -1, -1, -1, \
// OBSOLETE       0 \
// OBSOLETE     }, \
// OBSOLETE    {  0,  1,  2,  3,  4,  5, \
// OBSOLETE       16, 17, 18, 19, 20, \
// OBSOLETE       21, 22, 23, 24, 25, \
// OBSOLETE       26, 27, 28, 29, 30, \
// OBSOLETE       31, 32, 33, 34, \
// OBSOLETE      -1, -1, -1, -1, -1, \
// OBSOLETE       0 \
// OBSOLETE     } \
// OBSOLETE }
// OBSOLETE 
// OBSOLETE #define PFP_REGNUM R0_REGNUM	/* Previous frame pointer */
// OBSOLETE 
// OBSOLETE /* Total amount of space needed to store our copies of the machine's
// OBSOLETE    register state, the array `registers'.  */
// OBSOLETE #define REGISTER_BYTES (NUM_REGS * 4)
// OBSOLETE 
// OBSOLETE /* Index within `registers' of the first byte of the space for register N.  */
// OBSOLETE #define REGISTER_BYTE(N) (4*(N))
// OBSOLETE 
// OBSOLETE /* Number of bytes of storage in the actual machine representation
// OBSOLETE    for register N. */
// OBSOLETE #define REGISTER_RAW_SIZE(N) 4
// OBSOLETE 
// OBSOLETE /* Number of bytes of storage in the program's representation for register N. */
// OBSOLETE #define REGISTER_VIRTUAL_SIZE(N) 4
// OBSOLETE 
// OBSOLETE /* Largest value REGISTER_RAW_SIZE can have.  */
// OBSOLETE #define MAX_REGISTER_RAW_SIZE 4
// OBSOLETE 
// OBSOLETE /* Largest value REGISTER_VIRTUAL_SIZE can have.  */
// OBSOLETE #define MAX_REGISTER_VIRTUAL_SIZE 4
// OBSOLETE 
// OBSOLETE /* Return the GDB type object for the "standard" data type
// OBSOLETE    of data in register N.  */
// OBSOLETE #define REGISTER_VIRTUAL_TYPE(N) (builtin_type_int)
// OBSOLETE 
// OBSOLETE 
// OBSOLETE /* Macros for understanding function return values... */
// OBSOLETE 
// OBSOLETE /* Does the specified function use the "struct returning" convention
// OBSOLETE    or the "value returning" convention?  The "value returning" convention
// OBSOLETE    almost invariably returns the entire value in registers.  The
// OBSOLETE    "struct returning" convention often returns the entire value in
// OBSOLETE    memory, and passes a pointer (out of or into the function) saying
// OBSOLETE    where the value (is or should go).
// OBSOLETE 
// OBSOLETE    Since this sometimes depends on whether it was compiled with GCC,
// OBSOLETE    this is also an argument.  This is used in call_function to build a
// OBSOLETE    stack, and in value_being_returned to print return values.
// OBSOLETE 
// OBSOLETE    On arc, a structure is always retunred with pointer in r0. */
// OBSOLETE 
// OBSOLETE #define USE_STRUCT_CONVENTION(gcc_p, type) 1
// OBSOLETE 
// OBSOLETE /* Extract from an array REGBUF containing the (raw) register state
// OBSOLETE    a function return value of type TYPE, and copy that, in virtual format,
// OBSOLETE    into VALBUF.  This is only called if USE_STRUCT_CONVENTION for this
// OBSOLETE    type is 0.
// OBSOLETE  */
// OBSOLETE #define DEPRECATED_EXTRACT_RETURN_VALUE(TYPE,REGBUF,VALBUF) \
// OBSOLETE 	memcpy(VALBUF, REGBUF+REGISTER_BYTE(R0_REGNUM), TYPE_LENGTH (TYPE))
// OBSOLETE 
// OBSOLETE /* If USE_STRUCT_CONVENTION produces a 1, 
// OBSOLETE    extract from an array REGBUF containing the (raw) register state
// OBSOLETE    the address in which a function should return its structure value,
// OBSOLETE    as a CORE_ADDR (or an expression that can be used as one). */
// OBSOLETE #define DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS(REGBUF) \
// OBSOLETE    (error("Don't know where large structure is returned on arc"), 0)
// OBSOLETE 
// OBSOLETE /* Write into appropriate registers a function return value
// OBSOLETE    of type TYPE, given in virtual format, for "value returning" functions.
// OBSOLETE    For 'return' command:  not (yet) implemented for arc.  */
// OBSOLETE #define STORE_RETURN_VALUE(TYPE,VALBUF) \
// OBSOLETE     error ("Returning values from functions is not implemented in arc gdb")
// OBSOLETE 
// OBSOLETE /* Store the address of the place in which to copy the structure the
// OBSOLETE    subroutine will return.  This is called from call_function. */
// OBSOLETE #define STORE_STRUCT_RETURN(ADDR, SP) \
// OBSOLETE     error ("Returning values from functions is not implemented in arc gdb")
// OBSOLETE 
// OBSOLETE 
// OBSOLETE /* Describe the pointer in each stack frame to the previous stack frame
// OBSOLETE    (its caller).  */
// OBSOLETE 
// OBSOLETE /* We cache information about saved registers in the frame structure,
// OBSOLETE    to save us from having to re-scan function prologues every time
// OBSOLETE    a register in a non-current frame is accessed.  */
// OBSOLETE 
// OBSOLETE #define EXTRA_FRAME_INFO \
// OBSOLETE 	struct frame_saved_regs *fsr; \
// OBSOLETE 	CORE_ADDR arg_pointer;
// OBSOLETE 
// OBSOLETE /* Zero the frame_saved_regs pointer when the frame is initialized,
// OBSOLETE    so that FRAME_FIND_SAVED_REGS () will know to allocate and
// OBSOLETE    initialize a frame_saved_regs struct the first time it is called.
// OBSOLETE    Set the arg_pointer to -1, which is not valid; 0 and other values
// OBSOLETE    indicate real, cached values.  */
// OBSOLETE 
// OBSOLETE #define INIT_EXTRA_FRAME_INFO(fromleaf, fi) \
// OBSOLETE 	((fi)->fsr = 0, (fi)->arg_pointer = -1)
// OBSOLETE 
// OBSOLETE /* FRAME_CHAIN takes a frame's nominal address
// OBSOLETE    and produces the frame's chain-pointer.
// OBSOLETE    However, if FRAME_CHAIN_VALID returns zero,
// OBSOLETE    it means the given frame is the outermost one and has no caller.  */
// OBSOLETE /* On the arc, we get the chain pointer by reading the PFP saved
// OBSOLETE    on the stack. */
// OBSOLETE /* The PFP and RPC is in fp and fp+4.  */
// OBSOLETE 
// OBSOLETE #define FRAME_CHAIN(thisframe) \
// OBSOLETE   (read_memory_integer (FRAME_FP (thisframe), 4))
// OBSOLETE 
// OBSOLETE /* FRAME_CHAIN_VALID returns zero if the given frame is the outermost one
// OBSOLETE    and has no caller.  */
// OBSOLETE #define FRAME_CHAIN_VALID(chain, thisframe) nonnull_frame_chain_valid (chain, thisframe)
// OBSOLETE 
// OBSOLETE /* An expression that tells us whether the function invocation represented
// OBSOLETE    by FI does not have a frame on the stack associated with it. */
// OBSOLETE 
// OBSOLETE #define FRAMELESS_FUNCTION_INVOCATION(FI) \
// OBSOLETE      (((FI)->signal_handler_caller) ? 0 : frameless_look_for_prologue (FI))
// OBSOLETE 
// OBSOLETE /* Where is the PC for a specific frame.
// OBSOLETE    A leaf function may never save blink, so we have to check for that here.  */
// OBSOLETE 
// OBSOLETE #define FRAME_SAVED_PC(frame) (arc_frame_saved_pc (frame))
// OBSOLETE struct frame_info;		/* in case frame.h not included yet */
// OBSOLETE CORE_ADDR arc_frame_saved_pc (struct frame_info *);
// OBSOLETE 
// OBSOLETE /* If the argument is on the stack, it will be here.
// OBSOLETE    We cache this value in the frame info if we've already looked it up.  */
// OBSOLETE /* ??? Is the arg_pointer check necessary?  */
// OBSOLETE 
// OBSOLETE #define FRAME_ARGS_ADDRESS(fi) \
// OBSOLETE   (((fi)->arg_pointer != -1) ? (fi)->arg_pointer : (fi)->frame)
// OBSOLETE 
// OBSOLETE /* This is the same except it should return 0 when
// OBSOLETE    it does not really know where the args are, rather than guessing.
// OBSOLETE    This value is not cached since it is only used infrequently.  */
// OBSOLETE 
// OBSOLETE #define FRAME_LOCALS_ADDRESS(fi)	((fi)->frame)
// OBSOLETE 
// OBSOLETE /* Set NUMARGS to the number of args passed to a frame.
// OBSOLETE    Can return -1, meaning no way to tell.  */
// OBSOLETE 
// OBSOLETE #define FRAME_NUM_ARGS(fi)	(-1)
// OBSOLETE 
// OBSOLETE /* Return number of bytes at start of arglist that are not really args.  */
// OBSOLETE 
// OBSOLETE #define FRAME_ARGS_SKIP 0
// OBSOLETE 
// OBSOLETE /* Produce the positions of the saved registers in a stack frame.  */
// OBSOLETE 
// OBSOLETE #define FRAME_FIND_SAVED_REGS(frame_info_addr, sr) \
// OBSOLETE 	frame_find_saved_regs (frame_info_addr, &sr)
// OBSOLETE extern void frame_find_saved_regs ();	/* See arc-tdep.c */
// OBSOLETE 
// OBSOLETE 
// OBSOLETE /* Things needed for making calls to functions in the inferior process */
// OBSOLETE void arc_push_dummy_frame (void);
// OBSOLETE #define PUSH_DUMMY_FRAME \
// OBSOLETE 	arc_push_dummy_frame ()
// OBSOLETE 
// OBSOLETE /* Discard from the stack the innermost frame, restoring all registers.  */
// OBSOLETE void arc_pop_frame (void);
// OBSOLETE #define POP_FRAME \
// OBSOLETE 	arc_pop_frame ()
// OBSOLETE 
// OBSOLETE /* This sequence of words is the instructions  bl xxxx, flag 1 */
// OBSOLETE #define CALL_DUMMY { 0x28000000, 0x1fbe8001 }
// OBSOLETE #define CALL_DUMMY_LENGTH 8
// OBSOLETE 
// OBSOLETE /* Start execution at beginning of dummy */
// OBSOLETE #define CALL_DUMMY_START_OFFSET 0
// OBSOLETE 
// OBSOLETE /* Insert the specified number of args and function address
// OBSOLETE    into a call sequence of the above form stored at 'dummyname'. */
// OBSOLETE #define FIX_CALL_DUMMY(dummyname, pc, fun, nargs, args, type, gcc_p) \
// OBSOLETE { \
// OBSOLETE         int from, to, delta, loc; \
// OBSOLETE         loc = (int)(read_register (SP_REGNUM) - CALL_DUMMY_LENGTH); \
// OBSOLETE         from = loc + 4; \
// OBSOLETE         to = (int)(fun); \
// OBSOLETE         delta = (to - from) >> 2; \
// OBSOLETE         *((char *)(dummyname) + 1) = (delta & 0x1); \
// OBSOLETE         *((char *)(dummyname) + 2) = ((delta >> 1) & 0xff); \
// OBSOLETE         *((char *)(dummyname) + 3) = ((delta >> 9) & 0xff); \
// OBSOLETE         *((char *)(dummyname) + 4) = ((delta >> 17) & 0x7); \
// OBSOLETE }
@


1.11.4.1
log
@merge from trunk
@
text
@d207 1
a207 1
#define DEPRECATED_EXTRACT_RETURN_VALUE(TYPE,REGBUF,VALBUF) \
d214 1
a214 1
#define DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS(REGBUF) \
@


1.10
log
@Zap an IEEE_FLOAT.
@
text
@d32 1
a32 4
   to reach some "real" code.  SKIP_PROLOGUE_FRAMELESS_P advances
   the PC past some of the prologue, but stops as soon as it
   knows that the function has a frame.  Its result is equal
   to its input PC if the function is frameless, unequal otherwise.  */
a34 1
#define SKIP_PROLOGUE_FRAMELESS_P(pc) (arc_skip_prologue (pc, 1))
d36 3
@


1.9
log
@Assume TARGET_BYTE_ORDER_SELECTABLE{,_P} is always true.
@
text
@a26 3
/* We have IEEE floating point, if we have any float at all.  */
#define IEEE_FLOAT (1)

@


1.8
log
@Eliminate IEEE_FLOAT.
@
text
@d27 2
a28 2
/* Byte order is selectable.  */
#define	TARGET_BYTE_ORDER_SELECTABLE
@


1.7
log
@* target.h (enum target_signal): Move definition from here.
* defs.h (enum target_signal): To here.

* config/arc/tm-arc.h (arc_software_single_step): Change type of
first parameter to enum target_signal.
* config/rs6000/tm-rs6000.h (rs6000_software_single_step): Ditto.
* config/sparc/tm-sparc.h (sparc_software_single_step): Ditto.
* rs6000-tdep.c (rs6000_software_single_step): Update.
@
text
@a29 3
/* We have IEEE floating point, if we have any float at all.  */
#define IEEE_FLOAT (1)

@


1.6
log
@Change SOFTWARE_SINGLE_STEP_P into SOFTWARE_SINGLE_STEP_P().
@
text
@d67 1
a67 1
extern void arc_software_single_step (unsigned int, int);
@


1.5
log
@Include regcache.h
@
text
@d66 1
a66 1
#define SOFTWARE_SINGLE_STEP_P 1
@


1.4
log
@Update/correct copyright notices.
@
text
@d22 2
@


1.3
log
@PARAMS removal.
@
text
@d2 1
a2 1
   Copyright (C) 1995 Free Software Foundation, Inc.
@


1.2
log
@Bring IEEE_FLOAT under gdbarch's control.
* gdbarch.sh (IEEE_FLOAT): New entry.
* gdbarch.c, gdbarch.h: Regenerated.
* valprint.c (IEEE_FLOAT): Provide a default #definition for this.
(print_floating): Use IEEE_FLOAT as if it were an expression; use
the code specific to IEEE-format numbers whenever the value of
IEEE_FLOAT is non-zero.
* config/a29k/tm-a29k.h, config/alpha/tm-alpha.h,
config/arc/tm-arc.h, config/arm/tm-arm.h, config/fr30/tm-fr30.h,
config/h8300/tm-h8300.h, config/i386/tm-i386.h,
config/i960/tm-i960.h, config/m88k/tm-m88k.h,
config/mips/tm-mips.h, config/pa/tm-hppa.h,
config/sparc/tm-sparc.h, config/delta/tm-delta.h,
config/frv/tm-frv.h (IEEE_FLOAT): For all ports that #define
IEEE_FLOAT, make sure they give it the value (1).
@
text
@d43 1
a43 1
extern CORE_ADDR arc_skip_prologue PARAMS ((CORE_ADDR, int));
d65 1
a65 1
extern void arc_software_single_step PARAMS ((unsigned int, int));
d280 1
a280 1
CORE_ADDR arc_frame_saved_pc PARAMS ((struct frame_info *));
@


1.1
log
@Initial revision
@
text
@d5 1
a5 1
This file is part of GDB.
d7 14
a20 13
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
d29 1
a29 1
#define IEEE_FLOAT
d41 3
a43 5
#define SKIP_PROLOGUE(pc) \
  { pc = skip_prologue (pc, 0); }
#define SKIP_PROLOGUE_FRAMELESS_P(pc) \
  { pc = skip_prologue (pc, 1); }
extern CORE_ADDR skip_prologue PARAMS ((CORE_ADDR, int));
d120 9
a128 9
#define R0_REGNUM   0	   /* First local register		*/
#define R59_REGNUM 59	   /* Last local register		*/
#define FP_REGNUM  27	   /* Contains address of executing stack frame */
#define SP_REGNUM  28      /* stack pointer */
#define BLINK_REGNUM 31    /* link register */
#define	STA_REGNUM 61	   /* processor status word */
#define PC_REGNUM  91	   /* instruction pointer */
#define AUX_BEG_REGNUM  61 /* aux reg begins */
#define AUX_END_REGNUM  90 /* aux reg ends, pc not real aux reg */
d162 2
a163 2
   
#define PFP_REGNUM R0_REGNUM	/* Previous frame pointer	*/
d188 1
a189 1

d211 1
a211 1
*/
d232 1
a233 1

d269 5
a273 11
/* A macro that tells us whether the function invocation represented
   by FI does not have a frame on the stack associated with it.  If it
   does not, FRAMELESS is set to 1, else 0.  */

#define FRAMELESS_FUNCTION_INVOCATION(FI, FRAMELESS) \
  do { \
    if ((FI)->signal_handler_caller) \
      (FRAMELESS) = 0; \
    else \
      (FRAMELESS) = frameless_look_for_prologue (FI); \
  } while (0)
d279 1
a279 1
struct frame_info; /* in case frame.h not included yet */
d298 1
a298 1
#define FRAME_NUM_ARGS(numargs, fi)	(numargs = -1)
d308 2
a309 1
extern void frame_find_saved_regs();		/* See arc-tdep.c */
a310 1

d312 1
d314 1
a314 1
	push_dummy_frame ()
d317 1
d319 1
a319 1
	pop_frame ()
d322 1
a322 1
#define CALL_DUMMY { 0x28000000, 0x1fbe8001 }   
d326 1
a326 1
#define CALL_DUMMY_START_OFFSET 0 
d329 1
a329 1
   into a call sequence of the above form stored at 'dummyname'.*/  
a341 1

@


1.1.1.1
log
@Initial creation of sourceware repository
@
text
@@


1.1.1.2
log
@import gdb-19990504 snapshot
@
text
@d40 5
a44 3
#define SKIP_PROLOGUE(pc) (arc_skip_prologue (pc, 0))
#define SKIP_PROLOGUE_FRAMELESS_P(pc) (arc_skip_prologue (pc, 1))
extern CORE_ADDR arc_skip_prologue PARAMS ((CORE_ADDR, int));
@


1.1.1.3
log
@import gdb-1999-05-25 snapshot
@
text
@d268 11
a278 5
/* An expression that tells us whether the function invocation represented
   by FI does not have a frame on the stack associated with it. */

#define FRAMELESS_FUNCTION_INVOCATION(FI) \
     (((FI)->signal_handler_caller) ? 0 : frameless_look_for_prologue (FI))
d303 1
a303 1
#define FRAME_NUM_ARGS(fi)	(-1)
@


1.1.1.4
log
@import gdb-1999-07-07 post reformat
@
text
@d5 1
a5 1
   This file is part of GDB.
d7 13
a19 14
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */
d119 9
a127 9
#define R0_REGNUM   0		/* First local register           */
#define R59_REGNUM 59		/* Last local register            */
#define FP_REGNUM  27		/* Contains address of executing stack frame */
#define SP_REGNUM  28		/* stack pointer */
#define BLINK_REGNUM 31		/* link register */
#define	STA_REGNUM 61		/* processor status word */
#define PC_REGNUM  91		/* instruction pointer */
#define AUX_BEG_REGNUM  61	/* aux reg begins */
#define AUX_END_REGNUM  90	/* aux reg ends, pc not real aux reg */
d161 2
a162 2

#define PFP_REGNUM R0_REGNUM	/* Previous frame pointer */
d187 1
a188 1

d210 1
a210 1
 */
d231 1
a232 1

d278 1
a278 1
struct frame_info;		/* in case frame.h not included yet */
d307 2
a308 1
extern void frame_find_saved_regs ();	/* See arc-tdep.c */
a309 1

d319 1
a319 1
#define CALL_DUMMY { 0x28000000, 0x1fbe8001 }
d323 1
a323 1
#define CALL_DUMMY_START_OFFSET 0
d326 1
a326 1
   into a call sequence of the above form stored at 'dummyname'. */
d339 1
@


1.1.1.5
log
@import gdb-1999-09-08 snapshot
@
text
@a311 1
void arc_push_dummy_frame (void);
d313 1
a313 1
	arc_push_dummy_frame ()
a315 1
void arc_pop_frame (void);
d317 1
a317 1
	arc_pop_frame ()
@


