head	1.19;
access;
symbols
	gdb_6_0-2003-10-04-release:1.18
	kettenis_sparc-20030918-branch:1.18.0.36
	kettenis_sparc-20030918-branchpoint:1.18
	carlton_dictionary-20030917-merge:1.18
	ezannoni_pie-20030916-branchpoint:1.18
	ezannoni_pie-20030916-branch:1.18.0.34
	cagney_x86i386-20030821-branch:1.18.0.32
	cagney_x86i386-20030821-branchpoint:1.18
	carlton_dictionary-20030805-merge:1.18
	carlton_dictionary-20030627-merge:1.18
	gdb_6_0-branch:1.18.0.30
	gdb_6_0-2003-06-23-branchpoint:1.18
	jimb-ppc64-linux-20030613-branch:1.18.0.28
	jimb-ppc64-linux-20030613-branchpoint:1.18
	cagney_convert-20030606-branch:1.18.0.26
	cagney_convert-20030606-branchpoint:1.18
	cagney_writestrings-20030508-branch:1.18.0.24
	cagney_writestrings-20030508-branchpoint:1.18
	jimb-ppc64-linux-20030528-branch:1.18.0.22
	jimb-ppc64-linux-20030528-branchpoint:1.18
	carlton_dictionary-20030523-merge:1.18
	cagney_fileio-20030521-branch:1.18.0.20
	cagney_fileio-20030521-branchpoint:1.18
	kettenis_i386newframe-20030517-mergepoint:1.18
	jimb-ppc64-linux-20030509-branch:1.18.0.18
	jimb-ppc64-linux-20030509-branchpoint:1.18
	kettenis_i386newframe-20030504-mergepoint:1.18
	carlton_dictionary-20030430-merge:1.18
	kettenis_i386newframe-20030419-branch:1.18.0.16
	kettenis_i386newframe-20030419-branchpoint:1.18
	carlton_dictionary-20030416-merge:1.18
	cagney_frameaddr-20030409-mergepoint:1.18
	kettenis_i386newframe-20030406-branch:1.18.0.14
	kettenis_i386newframe-20030406-branchpoint:1.18
	cagney_frameaddr-20030403-branchpoint:1.18
	cagney_frameaddr-20030403-branch:1.18.0.12
	cagney_framebase-20030330-mergepoint:1.18
	cagney_framebase-20030326-branch:1.18.0.10
	cagney_framebase-20030326-branchpoint:1.18
	cagney_lazyid-20030317-branch:1.18.0.8
	cagney_lazyid-20030317-branchpoint:1.18
	kettenis-i386newframe-20030316-mergepoint:1.18
	offbyone-20030313-branch:1.18.0.6
	offbyone-20030313-branchpoint:1.18
	kettenis-i386newframe-20030308-branch:1.18.0.4
	kettenis-i386newframe-20030308-branchpoint:1.18
	carlton_dictionary-20030305-merge:1.18
	cagney_offbyone-20030303-branch:1.18.0.2
	cagney_offbyone-20030303-branchpoint:1.18
	carlton_dictionary-20030207-merge:1.18
	interps-20030203-mergepoint:1.17
	interps-20030202-branch:1.17.0.4
	interps-20030202-branchpoint:1.17
	cagney-unwind-20030108-branch:1.17.0.2
	cagney-unwind-20030108-branchpoint:1.17
	carlton_dictionary-20021223-merge:1.17
	gdb_5_3-2002-12-12-release:1.10
	carlton_dictionary-20021115-merge:1.11
	kseitz_interps-20021105-merge:1.11
	kseitz_interps-20021103-merge:1.11
	drow-cplus-merge-20021020:1.10
	drow-cplus-merge-20021025:1.10
	carlton_dictionary-20021025-merge:1.10
	carlton_dictionary-20021011-merge:1.10
	drow-cplus-branch:1.10.0.10
	drow-cplus-branchpoint:1.10
	kseitz_interps-20020930-merge:1.10
	carlton_dictionary-20020927-merge:1.10
	carlton_dictionary-branch:1.10.0.8
	carlton_dictionary-20020920-branchpoint:1.10
	gdb_5_3-branch:1.10.0.6
	gdb_5_3-2002-09-04-branchpoint:1.10
	kseitz_interps-20020829-merge:1.10
	cagney_sysregs-20020825-branch:1.10.0.4
	cagney_sysregs-20020825-branchpoint:1.10
	readline_4_3-import-branch:1.10.0.2
	readline_4_3-import-branchpoint:1.10
	gdb_5_2_1-2002-07-23-release:1.8
	kseitz_interps-20020528-branch:1.8.0.8
	kseitz_interps-20020528-branchpoint:1.8
	cagney_regbuf-20020515-branch:1.8.0.6
	cagney_regbuf-20020515-branchpoint:1.8
	jimb-macro-020506-branch:1.8.0.4
	jimb-macro-020506-branchpoint:1.8
	gdb_5_2-2002-04-29-release:1.8
	gdb_5_2-branch:1.8.0.2
	gdb_5_2-2002-03-03-branchpoint:1.8
	gdb_5_1_1-2002-01-24-release:1.5
	gdb_5_1_0_1-2002-01-03-release:1.5
	cygnus_cvs_20020108_pre:1.6
	gdb_5_1_0_1-2002-01-03-branch:1.5.0.8
	gdb_5_1_0_1-2002-01-03-branchpoint:1.5
	gdb_5_1-2001-11-21-release:1.5
	gdb_s390-2001-09-26-branch:1.5.0.6
	gdb_s390-2001-09-26-branchpoint:1.5
	gdb_5_1-2001-07-29-branch:1.5.0.4
	gdb_5_1-2001-07-29-branchpoint:1.5
	dberlin-typesystem-branch:1.5.0.2
	dberlin-typesystem-branchpoint:1.5
	gdb-post-ptid_t-2001-05-03:1.5
	gdb-pre-ptid_t-2001-05-03:1.5
	insight-precleanup-2001-01-01:1.3
	gdb-post-protoization-2000-07-29:1.3
	gdb-pre-protoization-2000-07-29:1.3
	gdb-premipsmulti-2000-06-06-branch:1.3.0.2
	gdb-premipsmulti-2000-06-06-branchpoint:1.3
	gdb-post-params-removal-2000-06-04:1.3
	gdb-pre-params-removal-2000-06-04:1.3
	gdb-post-params-removal-2000-05-28:1.3
	gdb-pre-params-removal-2000-05-28:1.2
	gdb_5_0-2000-05-19-release:1.1.1.6
	gdb_4_18_2-2000-05-18-release:1.1.1.6
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.6
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.6
	gdb_5_0-2000-04-10-branch:1.1.1.6.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1.1.6
	repo-unification-2000-02-06:1.1.1.6
	insight-2000-02-04:1.1.1.6
	gdb-2000-02-04:1.1.1.6
	gdb-2000-02-02:1.1.1.6
	gdb-2000-02-01:1.1.1.6
	gdb-2000-01-31:1.1.1.6
	gdb-2000-01-26:1.1.1.6
	gdb-2000-01-24:1.1.1.6
	gdb-2000-01-17:1.1.1.6
	gdb-2000-01-10:1.1.1.6
	gdb-2000-01-05:1.1.1.6
	gdb-1999-12-21:1.1.1.6
	gdb-1999-12-13:1.1.1.6
	gdb-1999-12-07:1.1.1.6
	gdb-1999-12-06:1.1.1.6
	gdb-1999-11-16:1.1.1.6
	gdb-1999-11-08:1.1.1.6
	gdb-1999-11-01:1.1.1.6
	gdb-1999-10-25:1.1.1.6
	gdb-1999-10-18:1.1.1.6
	gdb-1999-10-11:1.1.1.6
	gdb-1999-10-04:1.1.1.6
	gdb-1999-09-28:1.1.1.6
	gdb-1999-09-21:1.1.1.6
	gdb-1999-09-13:1.1.1.6
	gdb-1999-09-08:1.1.1.6
	gdb-1999-08-30:1.1.1.5
	gdb-1999-08-23:1.1.1.4
	gdb-1999-08-16:1.1.1.4
	gdb-1999-08-09:1.1.1.4
	gdb-1999-08-02:1.1.1.4
	gdb-1999-07-26:1.1.1.4
	gdb-1999-07-19:1.1.1.4
	gdb-1999-07-12:1.1.1.4
	gdb-post-reformat-19990707:1.1.1.4
	gdb-1999-07-07-post-reformat-snapshot:1.1.1.4
	gdb-pre-reformat-19990707:1.1.1.3
	gdb-1999-07-07:1.1.1.3
	gdb-1999-07-05:1.1.1.3
	gdb-1999-06-28:1.1.1.3
	gdb-1999-06-21:1.1.1.3
	gdb-1999-06-14:1.1.1.3
	gdb-1999-06-07:1.1.1.3
	gdb-1999-06-01:1.1.1.3
	gdb-4_18-branch:1.1.1.1.0.2
	gdb-4_18-release:1.1.1.1
	gdb-1999-05-25:1.1.1.3
	gdb-1999-05-19:1.1.1.2
	gdb-1999-05-10:1.1.1.2
	gdb-19990504:1.1.1.2
	gdb-19990422:1.1.1.1
	SNAPSHOT:1.1.1
	gdb-4_18:1.1.1.1
	GDB_4_18:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.19
date	2003.10.06.20.23.41;	author cagney;	state dead;
branches;
next	1.18;

1.18
date	2003.02.04.23.22.24;	author cagney;	state Exp;
branches
	1.18.34.1;
next	1.17;

1.17
date	2002.12.11.02.26.38;	author cagney;	state Exp;
branches;
next	1.16;

1.16
date	2002.12.09.02.04.17;	author cagney;	state Exp;
branches;
next	1.15;

1.15
date	2002.12.01.19.07.16;	author cagney;	state Exp;
branches;
next	1.14;

1.14
date	2002.11.28.21.38.44;	author cagney;	state Exp;
branches;
next	1.13;

1.13
date	2002.11.27.20.44.10;	author cagney;	state Exp;
branches;
next	1.12;

1.12
date	2002.11.27.01.08.50;	author cagney;	state Exp;
branches;
next	1.11;

1.11
date	2002.10.31.19.14.07;	author cagney;	state Exp;
branches;
next	1.10;

1.10
date	2002.08.24.00.21.36;	author cagney;	state Exp;
branches
	1.10.8.1
	1.10.10.1;
next	1.9;

1.9
date	2002.06.14.22.55.51;	author cagney;	state Exp;
branches;
next	1.8;

1.8
date	2002.01.29.04.42.45;	author cagney;	state Exp;
branches
	1.8.6.1
	1.8.8.1;
next	1.7;

1.7
date	2002.01.20.18.05.54;	author cagney;	state Exp;
branches;
next	1.6;

1.6
date	2002.01.05.04.30.40;	author cagney;	state Exp;
branches;
next	1.5;

1.5
date	2001.03.06.08.21.40;	author kevinb;	state Exp;
branches;
next	1.4;

1.4
date	2001.02.25.04.45.12;	author kevinb;	state Exp;
branches;
next	1.3;

1.3
date	2000.05.28.01.12.42;	author kevinb;	state Exp;
branches;
next	1.2;

1.2
date	2000.04.14.19.14.19;	author jimb;	state Exp;
branches;
next	1.1;

1.1
date	99.04.16.01.34.26;	author shebs;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.16.01.34.26;	author shebs;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.05.05.14.43.56;	author shebs;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	99.05.25.18.05.51;	author jsm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	99.07.07.20.17.37;	author jsm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	99.08.31.01.08.08;	author jsm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	99.09.09.00.00.07;	author shebs;	state Exp;
branches;
next	;

1.8.6.1
date	2002.06.15.16.43.12;	author cagney;	state Exp;
branches;
next	;

1.8.8.1
date	2002.06.20.01.35.57;	author kseitz;	state Exp;
branches;
next	1.8.8.2;

1.8.8.2
date	2002.08.30.22.52.49;	author kseitz;	state Exp;
branches;
next	1.8.8.3;

1.8.8.3
date	2002.11.03.22.20.21;	author ezannoni;	state Exp;
branches;
next	;

1.10.8.1
date	2002.11.15.19.19.09;	author carlton;	state Exp;
branches;
next	1.10.8.2;

1.10.8.2
date	2002.12.23.19.39.06;	author carlton;	state Exp;
branches;
next	1.10.8.3;

1.10.8.3
date	2003.02.07.19.17.55;	author carlton;	state Exp;
branches;
next	1.10.8.4;

1.10.8.4
date	2003.11.11.23.51.07;	author carlton;	state dead;
branches;
next	;

1.10.10.1
date	2003.12.14.20.27.42;	author drow;	state dead;
branches;
next	;

1.18.34.1
date	2004.03.23.20.30.20;	author ezannoni;	state dead;
branches;
next	;


desc
@@


1.19
log
@2003-10-06  Andrew Cagney  <cagney@@redhat.com>

	* config/nm-m3.h, config/h8500/h8500.mt: Delete obsolete files.
	* config/h8500/tm-h8500.h, config/i386/nm-ptx4.h: Ditto.
	* config/i386/nm-symmetry.h, config/i386/ptx.mh: Ditto.
	* config/i386/ptx.mt, config/i386/ptx4.mh: Ditto.
	* config/i386/ptx4.mt, config/i386/symmetry.mh: Ditto.
	* config/i386/symmetry.mt, config/i386/tm-ptx.h: Ditto.
	* config/i386/tm-ptx4.h, config/i386/tm-symmetry.h: Ditto.
	* config/i386/xm-ptx.h, config/i386/xm-ptx4.h: Ditto.
	* config/i386/xm-symmetry.h, config/mips/mipsm3.mh: Ditto.
	* config/mips/mipsm3.mt, config/mips/tm-mipsm3.h: Ditto.
	* config/mips/xm-mipsm3.h, config/mn10200/mn10200.mt: Ditto.
	* config/mn10200/tm-mn10200.h, config/pa/hppabsd.mh: Ditto.
	* config/pa/hppabsd.mt, config/pa/hppaosf.mh: Ditto.
	* config/pa/hppaosf.mt, config/pa/hppapro.mt: Ditto.
	* config/pa/nm-hppab.h, config/pa/nm-hppao.h: Ditto.
	* config/pa/tm-hppab.h, config/pa/tm-hppao.h: Ditto.
	* config/pa/tm-pro.h, config/pa/xm-hppab.h: Ditto.
	* config/pa/xm-pa.h, config/sparc/sparclet.mt: Ditto.
	* config/sparc/sparclite.mt, config/sparc/tm-sparclet.h: Ditto.
	* config/sparc/tm-sparclite.h, config/z8k/tm-z8k.h: Ditto.
	* config/z8k/z8k.mt: Ditto.
@
text
@// OBSOLETE /* Parameters for execution on a z8000 series machine.
// OBSOLETE 
// OBSOLETE    Copyright 1992, 1993, 1994, 1998, 1999, 2000, 2001, 2002 Free
// OBSOLETE    Software Foundation, Inc.
// OBSOLETE 
// OBSOLETE    This file is part of GDB.
// OBSOLETE 
// OBSOLETE    This program is free software; you can redistribute it and/or modify
// OBSOLETE    it under the terms of the GNU General Public License as published by
// OBSOLETE    the Free Software Foundation; either version 2 of the License, or
// OBSOLETE    (at your option) any later version.
// OBSOLETE 
// OBSOLETE    This program is distributed in the hope that it will be useful,
// OBSOLETE    but WITHOUT ANY WARRANTY; without even the implied warranty of
// OBSOLETE    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// OBSOLETE    GNU General Public License for more details.
// OBSOLETE 
// OBSOLETE    You should have received a copy of the GNU General Public License
// OBSOLETE    along with this program; if not, write to the Free Software
// OBSOLETE    Foundation, Inc., 59 Temple Place - Suite 330,
// OBSOLETE    Boston, MA 02111-1307, USA.  */
// OBSOLETE 
// OBSOLETE /* NOTE: cagney/2002-11-24: This is a guess.  */
// OBSOLETE #define DEPRECATED_USE_GENERIC_DUMMY_FRAMES 0
// OBSOLETE #define CALL_DUMMY_LOCATION ON_STACK
// OBSOLETE #define DEPRECATED_PC_IN_CALL_DUMMY(pc, sp, frame_address) deprecated_pc_in_call_dummy_on_stack (pc, sp, frame_address)
// OBSOLETE 
// OBSOLETE #undef TARGET_INT_BIT
// OBSOLETE #undef TARGET_LONG_BIT
// OBSOLETE #undef TARGET_SHORT_BIT
// OBSOLETE #undef TARGET_PTR_BIT
// OBSOLETE 
// OBSOLETE #define TARGET_SHORT_BIT 16
// OBSOLETE #define TARGET_INT_BIT 16
// OBSOLETE #define TARGET_LONG_BIT 32
// OBSOLETE #define TARGET_PTR_BIT (BIG ? 32: 16)
// OBSOLETE 
// OBSOLETE /* Offset from address of function to start of its code.
// OBSOLETE    Zero on most machines.  */
// OBSOLETE 
// OBSOLETE #define FUNCTION_START_OFFSET 0
// OBSOLETE 
// OBSOLETE /* Advance PC across any function entry prologue instructions
// OBSOLETE    to reach some "real" code.  */
// OBSOLETE 
// OBSOLETE #define SKIP_PROLOGUE(ip)   (z8k_skip_prologue (ip))
// OBSOLETE extern CORE_ADDR z8k_skip_prologue (CORE_ADDR ip);
// OBSOLETE 
// OBSOLETE 
// OBSOLETE /* Immediately after a function call, return the saved pc.
// OBSOLETE    Can't always go through the frames for this because on some machines
// OBSOLETE    the new frame is not set up until the new function executes
// OBSOLETE    some instructions.  */
// OBSOLETE 
// OBSOLETE 
// OBSOLETE extern int z8k_saved_pc_after_call (struct frame_info *frame);
// OBSOLETE #define SAVED_PC_AFTER_CALL(frame) z8k_saved_pc_after_call(frame)
// OBSOLETE 
// OBSOLETE /* Stack grows downward.  */
// OBSOLETE 
// OBSOLETE #define INNER_THAN(lhs,rhs) ((lhs) < (rhs))
// OBSOLETE 
// OBSOLETE /* Sequence of bytes for breakpoint instruction. */
// OBSOLETE 
// OBSOLETE #define BREAKPOINT {0x36,0x00}
// OBSOLETE 
// OBSOLETE /* If your kernel resets the pc after the trap happens you may need to
// OBSOLETE    define this before including this file.  */
// OBSOLETE 
// OBSOLETE #define DECR_PC_AFTER_BREAK 0
// OBSOLETE 
// OBSOLETE /* Say how long registers are.  */
// OBSOLETE 
// OBSOLETE #define REGISTER_TYPE unsigned int
// OBSOLETE 
// OBSOLETE #define NUM_REGS 	23	/* 16 registers + 1 ccr + 1 pc + 3 debug
// OBSOLETE 				   regs + fake fp + fake sp */
// OBSOLETE #define REGISTER_BYTES  (NUM_REGS *4)
// OBSOLETE 
// OBSOLETE /* Index within `registers' of the first byte of the space for
// OBSOLETE    register N.  */
// OBSOLETE 
// OBSOLETE #define REGISTER_BYTE(N)  ((N)*4)
// OBSOLETE 
// OBSOLETE /* Number of bytes of storage in the actual machine representation
// OBSOLETE    for register N.  On the z8k, all but the pc are 2 bytes, but we
// OBSOLETE    keep them all as 4 bytes and trim them on I/O */
// OBSOLETE 
// OBSOLETE 
// OBSOLETE #define REGISTER_RAW_SIZE(N) (((N) < 16)? 2:4)
// OBSOLETE 
// OBSOLETE /* Number of bytes of storage in the program's representation
// OBSOLETE    for register N.  */
// OBSOLETE 
// OBSOLETE #define REGISTER_VIRTUAL_SIZE(N) REGISTER_RAW_SIZE(N)
// OBSOLETE 
// OBSOLETE /* Largest value REGISTER_RAW_SIZE can have.  */
// OBSOLETE 
// OBSOLETE #define MAX_REGISTER_RAW_SIZE 4
// OBSOLETE 
// OBSOLETE /* Largest value REGISTER_VIRTUAL_SIZE can have.  */
// OBSOLETE 
// OBSOLETE #define MAX_REGISTER_VIRTUAL_SIZE 4
// OBSOLETE 
// OBSOLETE /* Return the GDB type object for the "standard" data type
// OBSOLETE    of data in register N.  */
// OBSOLETE 
// OBSOLETE #define REGISTER_VIRTUAL_TYPE(N) \
// OBSOLETE  (REGISTER_VIRTUAL_SIZE(N) == 2? builtin_type_unsigned_int : builtin_type_long)
// OBSOLETE 
// OBSOLETE #define DEPRECATED_INIT_FRAME_PC(x,y) (init_frame_pc_noop (x, y))
// OBSOLETE #define INIT_FRAME_PC_FIRST(x,y) (init_frame_pc_noop (x, y))
// OBSOLETE 
// OBSOLETE #define REGISTER_NAMES  \
// OBSOLETE  {"r0", "r1", "r2", "r3", "r4", "r5", "r6", "r7", \
// OBSOLETE   "r8", "r9", "r10", "r11", "r12", "r13", "r14", "r15", \
// OBSOLETE   "ccr", "pc", "cycles","insts","time","fp","sp"}
// OBSOLETE 
// OBSOLETE /* Register numbers of various important registers.
// OBSOLETE    Note that some of these values are "real" register numbers,
// OBSOLETE    and correspond to the general registers of the machine,
// OBSOLETE    and some are "phony" register numbers which are too large
// OBSOLETE    to be actual register numbers as far as the user is concerned
// OBSOLETE    but do serve to get the desired values when passed to read_register.  */
// OBSOLETE 
// OBSOLETE #define CCR_REGNUM 	16	/* Contains processor status */
// OBSOLETE #define PC_REGNUM 	17	/* Contains program counter */
// OBSOLETE #define CYCLES_REGNUM 	18
// OBSOLETE #define INSTS_REGNUM 	19
// OBSOLETE #define TIME_REGNUM 	20
// OBSOLETE #define FP_REGNUM 	21	/* Contains fp, whatever memory model */
// OBSOLETE #define SP_REGNUM 	22	/* Conatins sp, whatever memory model */
// OBSOLETE 
// OBSOLETE 
// OBSOLETE 
// OBSOLETE #define PTR_SIZE (BIG ? 4: 2)
// OBSOLETE #define PTR_MASK (BIG ? 0xff00ffff : 0x0000ffff)
// OBSOLETE 
// OBSOLETE /* Store the address of the place in which to copy the structure the
// OBSOLETE    subroutine will return.  This is called from call_function. */
// OBSOLETE 
// OBSOLETE #define STORE_STRUCT_RETURN(ADDR, SP) internal_error (__FILE__, __LINE__, "failed internal consistency check");
// OBSOLETE 
// OBSOLETE /* Extract from an array REGBUF containing the (raw) register state
// OBSOLETE    a function return value of type TYPE, and copy that, in virtual format,
// OBSOLETE    into VALBUF.  This is assuming that floating point values are returned
// OBSOLETE    as doubles in d0/d1.  */
// OBSOLETE 
// OBSOLETE 
// OBSOLETE #define DEPRECATED_EXTRACT_RETURN_VALUE(TYPE,REGBUF,VALBUF) \
// OBSOLETE   memcpy(VALBUF, REGBUF + REGISTER_BYTE(2), TYPE_LENGTH(TYPE));
// OBSOLETE 
// OBSOLETE /* Write into appropriate registers a function return value
// OBSOLETE    of type TYPE, given in virtual format. */
// OBSOLETE 
// OBSOLETE #define DEPRECATED_STORE_RETURN_VALUE(TYPE,VALBUF) internal_error (__FILE__, __LINE__, "failed internal consistency check");
// OBSOLETE 
// OBSOLETE /* Extract from an array REGBUF containing the (raw) register state
// OBSOLETE    the address in which a function should return its structure value,
// OBSOLETE    as a CORE_ADDR (or an expression that can be used as one).  */
// OBSOLETE 
// OBSOLETE #define DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS(REGBUF) (*(CORE_ADDR *)(REGBUF))
// OBSOLETE 
// OBSOLETE /* Describe the pointer in each stack frame to the previous stack frame
// OBSOLETE    (its caller).  */
// OBSOLETE 
// OBSOLETE /* FRAME_CHAIN takes a frame's nominal address and produces the frame's
// OBSOLETE    chain-pointer.
// OBSOLETE    In the case of the Z8000, the frame's nominal address
// OBSOLETE    is the address of a ptr sized byte word containing the calling
// OBSOLETE    frame's address.  */
// OBSOLETE 
// OBSOLETE extern CORE_ADDR z8k_frame_chain (struct frame_info *thisframe);
// OBSOLETE #define FRAME_CHAIN(thisframe) z8k_frame_chain(thisframe);
// OBSOLETE 
// OBSOLETE 
// OBSOLETE 
// OBSOLETE /* Define other aspects of the stack frame.  */
// OBSOLETE 
// OBSOLETE /* A macro that tells us whether the function invocation represented
// OBSOLETE    by FI does not have a frame on the stack associated with it.  If it
// OBSOLETE    does not, FRAMELESS is set to 1, else 0.  */
// OBSOLETE #define FRAMELESS_FUNCTION_INVOCATION(FI) \
// OBSOLETE   (frameless_look_for_prologue (FI))
// OBSOLETE 
// OBSOLETE extern CORE_ADDR z8k_frame_saved_pc (struct frame_info *frame);
// OBSOLETE #define FRAME_SAVED_PC(FRAME) z8k_frame_saved_pc(FRAME)
// OBSOLETE 
// OBSOLETE #define FRAME_ARGS_ADDRESS(fi) ((fi)->frame)
// OBSOLETE 
// OBSOLETE #define FRAME_LOCALS_ADDRESS(fi) ((fi)->frame)
// OBSOLETE 
// OBSOLETE /* Set VAL to the number of args passed to frame described by FI.
// OBSOLETE    Can set VAL to -1, meaning no way to tell.  */
// OBSOLETE 
// OBSOLETE /* We can't tell how many args there are
// OBSOLETE    now that the C compiler delays popping them.  */
// OBSOLETE #if !defined (FRAME_NUM_ARGS)
// OBSOLETE #define FRAME_NUM_ARGS(fi) (-1)
// OBSOLETE #endif
// OBSOLETE 
// OBSOLETE /* Return number of bytes at start of arglist that are not really args.  */
// OBSOLETE 
// OBSOLETE #define FRAME_ARGS_SKIP 8
// OBSOLETE 
// OBSOLETE struct frame_info;
// OBSOLETE extern void z8k_frame_init_saved_regs (struct frame_info *);
// OBSOLETE #define FRAME_INIT_SAVED_REGS(fi) z8k_frame_init_saved_regs (fi)
// OBSOLETE 
// OBSOLETE 
// OBSOLETE /* Things needed for making the inferior call functions.
// OBSOLETE    It seems like every m68k based machine has almost identical definitions
// OBSOLETE    in the individual machine's configuration files.  Most other cpu types
// OBSOLETE    (mips, i386, etc) have routines in their *-tdep.c files to handle this
// OBSOLETE    for most configurations.  The m68k family should be able to do this as
// OBSOLETE    well.  These macros can still be overridden when necessary.  */
// OBSOLETE 
// OBSOLETE /* The CALL_DUMMY macro is the sequence of instructions, as disassembled
// OBSOLETE    by gdb itself:
// OBSOLETE 
// OBSOLETE    fmovemx fp0-fp7,sp@@-                 0xf227 0xe0ff
// OBSOLETE    moveml d0-a5,sp@@-                    0x48e7 0xfffc
// OBSOLETE    clrw sp@@-                            0x4267
// OBSOLETE    movew ccr,sp@@-                               0x42e7
// OBSOLETE 
// OBSOLETE    /..* The arguments are pushed at this point by GDB;
// OBSOLETE    no code is needed in the dummy for this.
// OBSOLETE    The CALL_DUMMY_START_OFFSET gives the position of 
// OBSOLETE    the following jsr instruction.  *../
// OBSOLETE 
// OBSOLETE    jsr @@#0x32323232                     0x4eb9 0x3232 0x3232
// OBSOLETE    addal #0x69696969,sp                 0xdffc 0x6969 0x6969
// OBSOLETE    trap #<your BPT_VECTOR number here>  0x4e4?
// OBSOLETE    nop                                  0x4e71
// OBSOLETE 
// OBSOLETE    Note this is CALL_DUMMY_LENGTH bytes (28 for the above example).
// OBSOLETE    We actually start executing at the jsr, since the pushing of the
// OBSOLETE    registers is done by PUSH_DUMMY_FRAME.  If this were real code,
// OBSOLETE    the arguments for the function called by the jsr would be pushed
// OBSOLETE    between the moveml and the jsr, and we could allow it to execute through.
// OBSOLETE    But the arguments have to be pushed by GDB after the PUSH_DUMMY_FRAME is
// OBSOLETE    done, and we cannot allow the moveml to push the registers again lest
// OBSOLETE    they be taken for the arguments.  */
// OBSOLETE 
// OBSOLETE 
// OBSOLETE #define CALL_DUMMY { 0 }
// OBSOLETE #define CALL_DUMMY_LENGTH 24	/* Size of CALL_DUMMY */
// OBSOLETE #define CALL_DUMMY_START_OFFSET 8	/* Offset to jsr instruction */
// OBSOLETE 
// OBSOLETE 
// OBSOLETE /* Insert the specified number of args and function address
// OBSOLETE    into a call sequence of the above form stored at DUMMYNAME.
// OBSOLETE    We use the BFD routines to store a big-endian value of known size.  */
// OBSOLETE 
// OBSOLETE #define FIX_CALL_DUMMY(dummyname, pc, fun, nargs, args, type, gcc_p)     \
// OBSOLETE { bfd_putb32 (fun,     (char *) dummyname + CALL_DUMMY_START_OFFSET + 2);  \
// OBSOLETE   bfd_putb32 (nargs*4, (char *) dummyname + CALL_DUMMY_START_OFFSET + 8); }
// OBSOLETE 
// OBSOLETE /* Push an empty stack frame, to record the current PC, etc.  */
// OBSOLETE 
// OBSOLETE #define PUSH_DUMMY_FRAME	{ z8k_push_dummy_frame (); }
// OBSOLETE 
// OBSOLETE extern void z8k_push_dummy_frame (void);
// OBSOLETE 
// OBSOLETE extern void z8k_pop_frame (void);
// OBSOLETE 
// OBSOLETE /* Discard from the stack the innermost frame, restoring all registers.  */
// OBSOLETE 
// OBSOLETE #define POP_FRAME		{ z8k_pop_frame (); }
// OBSOLETE 
// OBSOLETE /* Offset from SP to first arg on stack at first instruction of a function */
// OBSOLETE 
// OBSOLETE #define SP_ARG0 (1 * 4)
// OBSOLETE 
// OBSOLETE extern CORE_ADDR z8k_addr_bits_remove (CORE_ADDR);
// OBSOLETE #define ADDR_BITS_REMOVE(addr) z8k_addr_bits_remove (addr)
// OBSOLETE int sim_z8001_mode;
// OBSOLETE #define BIG (sim_z8001_mode)
// OBSOLETE 
// OBSOLETE #define read_memory_short(x)  (read_memory_integer(x,2) & 0xffff)
// OBSOLETE 
// OBSOLETE #define NO_STD_REGS
// OBSOLETE 
// OBSOLETE extern void z8k_do_registers_info (int regnum, int all);
// OBSOLETE #define DEPRECATED_DO_REGISTERS_INFO(REGNUM,ALL) \
// OBSOLETE 	z8k_do_registers_info (REGNUM, ALL)
// OBSOLETE 
// OBSOLETE extern void z8k_set_pointer_size (int newsize);
// OBSOLETE #define INIT_EXTRA_SYMTAB_INFO \
// OBSOLETE   z8k_set_pointer_size(objfile->obfd->arch_info->bits_per_address);
// OBSOLETE 
// OBSOLETE #define REGISTER_SIZE 4
@


1.18
log
@2003-02-04  Andrew Cagney  <ac131313@@redhat.com>

	* NEWS: Mention that the z8k-zilog-none is obsolete.
	* MAINTAINERS: Mark z8k as obsolete.
	* configure.tgt: Obsolete the z8k-*-coff* target.
	* config/z8k/z8k.mt: Obsolete file.
	* config/z8k/tm-z8k.h: Obsolete file.
	* z8k-tdep.c: Obsolete file.
@
text
@@


1.18.34.1
log
@merge mainline changes into branch
@
text
@@


1.17
log
@2002-12-10  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (DEPRECATED_INIT_FRAME_PC): Rename INIT_FRAME_PC.
	Change to a function with predicate.
	* gdbarch.h, gdbarch.c: Re-generate.
	* frame.c (get_prev_frame): Update.  Test
	DEPRECATED_INIT_FRAME_PC_P.
	* config/sparc/tm-sparc.h (DEPRECATED_INIT_FRAME_PC): Update.
	* config/rs6000/tm-rs6000.h (DEPRECATED_INIT_FRAME_PC): Update.
	* config/mn10200/tm-mn10200.h (DEPRECATED_INIT_FRAME_PC): Update.
	* alpha-tdep.c (alpha_gdbarch_init): Update.
	* mn10300-tdep.c (mn10300_gdbarch_init): Update.
	* mips-tdep.c (mips_gdbarch_init): Update.
	* i386-interix-tdep.c (i386_interix_init_abi): Update.
	* arm-tdep.c: Update comments.
	* h8300-tdep.c (h8300_gdbarch_init): Explicitly set init_frame_pc.
	* config/m32r/tm-m32r.h (DEPRECATED_INIT_FRAME_PC): Ditto.
	* frv-tdep.c (frv_gdbarch_init): Ditto.
	* x86-64-tdep.c (x86_64_init_abi): Ditto.
	* ia64-tdep.c (ia64_gdbarch_init): Ditto.
	* s390-tdep.c (s390_gdbarch_init): Ditto.
	* v850-tdep.c (v850_gdbarch_init): Ditto.
	* vax-tdep.c (vax_gdbarch_init): Ditto.
	* sh-tdep.c (sh_gdbarch_init): Ditto.
	* ns32k-tdep.c (ns32k_gdbarch_init): Ditto.
	* m68hc11-tdep.c (m68hc11_gdbarch_init): Ditto.
	* mcore-tdep.c (mcore_gdbarch_init): Ditto.
	* xstormy16-tdep.c (xstormy16_gdbarch_init): Ditto.
	* i386-tdep.c (i386_gdbarch_init): Ditto.
	* d10v-tdep.c (d10v_gdbarch_init): Ditto.
	* cris-tdep.c (cris_gdbarch_init): Ditto.
	* avr-tdep.c (avr_gdbarch_init): Ditto.
	* arm-tdep.c (arm_gdbarch_init): Ditto.
	* config/z8k/tm-z8k.h (INIT_FRAME_PC_FIRST): Delete macro.
	(DEPRECATED_INIT_FRAME_PC): Rename INIT_FRAME_PC.
@
text
@d1 292
a292 292
/* Parameters for execution on a z8000 series machine.

   Copyright 1992, 1993, 1994, 1998, 1999, 2000, 2001, 2002 Free
   Software Foundation, Inc.

   This file is part of GDB.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* NOTE: cagney/2002-11-24: This is a guess.  */
#define DEPRECATED_USE_GENERIC_DUMMY_FRAMES 0
#define CALL_DUMMY_LOCATION ON_STACK
#define DEPRECATED_PC_IN_CALL_DUMMY(pc, sp, frame_address) deprecated_pc_in_call_dummy_on_stack (pc, sp, frame_address)

#undef TARGET_INT_BIT
#undef TARGET_LONG_BIT
#undef TARGET_SHORT_BIT
#undef TARGET_PTR_BIT

#define TARGET_SHORT_BIT 16
#define TARGET_INT_BIT 16
#define TARGET_LONG_BIT 32
#define TARGET_PTR_BIT (BIG ? 32: 16)

/* Offset from address of function to start of its code.
   Zero on most machines.  */

#define FUNCTION_START_OFFSET 0

/* Advance PC across any function entry prologue instructions
   to reach some "real" code.  */

#define SKIP_PROLOGUE(ip)   (z8k_skip_prologue (ip))
extern CORE_ADDR z8k_skip_prologue (CORE_ADDR ip);


/* Immediately after a function call, return the saved pc.
   Can't always go through the frames for this because on some machines
   the new frame is not set up until the new function executes
   some instructions.  */


extern int z8k_saved_pc_after_call (struct frame_info *frame);
#define SAVED_PC_AFTER_CALL(frame) z8k_saved_pc_after_call(frame)

/* Stack grows downward.  */

#define INNER_THAN(lhs,rhs) ((lhs) < (rhs))

/* Sequence of bytes for breakpoint instruction. */

#define BREAKPOINT {0x36,0x00}

/* If your kernel resets the pc after the trap happens you may need to
   define this before including this file.  */

#define DECR_PC_AFTER_BREAK 0

/* Say how long registers are.  */

#define REGISTER_TYPE unsigned int

#define NUM_REGS 	23	/* 16 registers + 1 ccr + 1 pc + 3 debug
				   regs + fake fp + fake sp */
#define REGISTER_BYTES  (NUM_REGS *4)

/* Index within `registers' of the first byte of the space for
   register N.  */

#define REGISTER_BYTE(N)  ((N)*4)

/* Number of bytes of storage in the actual machine representation
   for register N.  On the z8k, all but the pc are 2 bytes, but we
   keep them all as 4 bytes and trim them on I/O */


#define REGISTER_RAW_SIZE(N) (((N) < 16)? 2:4)

/* Number of bytes of storage in the program's representation
   for register N.  */

#define REGISTER_VIRTUAL_SIZE(N) REGISTER_RAW_SIZE(N)

/* Largest value REGISTER_RAW_SIZE can have.  */

#define MAX_REGISTER_RAW_SIZE 4

/* Largest value REGISTER_VIRTUAL_SIZE can have.  */

#define MAX_REGISTER_VIRTUAL_SIZE 4

/* Return the GDB type object for the "standard" data type
   of data in register N.  */

#define REGISTER_VIRTUAL_TYPE(N) \
 (REGISTER_VIRTUAL_SIZE(N) == 2? builtin_type_unsigned_int : builtin_type_long)

#define DEPRECATED_INIT_FRAME_PC(x,y) (init_frame_pc_noop (x, y))
#define INIT_FRAME_PC_FIRST(x,y) (init_frame_pc_noop (x, y))

#define REGISTER_NAMES  \
 {"r0", "r1", "r2", "r3", "r4", "r5", "r6", "r7", \
  "r8", "r9", "r10", "r11", "r12", "r13", "r14", "r15", \
  "ccr", "pc", "cycles","insts","time","fp","sp"}

/* Register numbers of various important registers.
   Note that some of these values are "real" register numbers,
   and correspond to the general registers of the machine,
   and some are "phony" register numbers which are too large
   to be actual register numbers as far as the user is concerned
   but do serve to get the desired values when passed to read_register.  */

#define CCR_REGNUM 	16	/* Contains processor status */
#define PC_REGNUM 	17	/* Contains program counter */
#define CYCLES_REGNUM 	18
#define INSTS_REGNUM 	19
#define TIME_REGNUM 	20
#define FP_REGNUM 	21	/* Contains fp, whatever memory model */
#define SP_REGNUM 	22	/* Conatins sp, whatever memory model */



#define PTR_SIZE (BIG ? 4: 2)
#define PTR_MASK (BIG ? 0xff00ffff : 0x0000ffff)

/* Store the address of the place in which to copy the structure the
   subroutine will return.  This is called from call_function. */

#define STORE_STRUCT_RETURN(ADDR, SP) internal_error (__FILE__, __LINE__, "failed internal consistency check");

/* Extract from an array REGBUF containing the (raw) register state
   a function return value of type TYPE, and copy that, in virtual format,
   into VALBUF.  This is assuming that floating point values are returned
   as doubles in d0/d1.  */


#define DEPRECATED_EXTRACT_RETURN_VALUE(TYPE,REGBUF,VALBUF) \
  memcpy(VALBUF, REGBUF + REGISTER_BYTE(2), TYPE_LENGTH(TYPE));

/* Write into appropriate registers a function return value
   of type TYPE, given in virtual format. */

#define DEPRECATED_STORE_RETURN_VALUE(TYPE,VALBUF) internal_error (__FILE__, __LINE__, "failed internal consistency check");

/* Extract from an array REGBUF containing the (raw) register state
   the address in which a function should return its structure value,
   as a CORE_ADDR (or an expression that can be used as one).  */

#define DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS(REGBUF) (*(CORE_ADDR *)(REGBUF))

/* Describe the pointer in each stack frame to the previous stack frame
   (its caller).  */

/* FRAME_CHAIN takes a frame's nominal address and produces the frame's
   chain-pointer.
   In the case of the Z8000, the frame's nominal address
   is the address of a ptr sized byte word containing the calling
   frame's address.  */

extern CORE_ADDR z8k_frame_chain (struct frame_info *thisframe);
#define FRAME_CHAIN(thisframe) z8k_frame_chain(thisframe);



/* Define other aspects of the stack frame.  */

/* A macro that tells us whether the function invocation represented
   by FI does not have a frame on the stack associated with it.  If it
   does not, FRAMELESS is set to 1, else 0.  */
#define FRAMELESS_FUNCTION_INVOCATION(FI) \
  (frameless_look_for_prologue (FI))

extern CORE_ADDR z8k_frame_saved_pc (struct frame_info *frame);
#define FRAME_SAVED_PC(FRAME) z8k_frame_saved_pc(FRAME)

#define FRAME_ARGS_ADDRESS(fi) ((fi)->frame)

#define FRAME_LOCALS_ADDRESS(fi) ((fi)->frame)

/* Set VAL to the number of args passed to frame described by FI.
   Can set VAL to -1, meaning no way to tell.  */

/* We can't tell how many args there are
   now that the C compiler delays popping them.  */
#if !defined (FRAME_NUM_ARGS)
#define FRAME_NUM_ARGS(fi) (-1)
#endif

/* Return number of bytes at start of arglist that are not really args.  */

#define FRAME_ARGS_SKIP 8

struct frame_info;
extern void z8k_frame_init_saved_regs (struct frame_info *);
#define FRAME_INIT_SAVED_REGS(fi) z8k_frame_init_saved_regs (fi)


/* Things needed for making the inferior call functions.
   It seems like every m68k based machine has almost identical definitions
   in the individual machine's configuration files.  Most other cpu types
   (mips, i386, etc) have routines in their *-tdep.c files to handle this
   for most configurations.  The m68k family should be able to do this as
   well.  These macros can still be overridden when necessary.  */

/* The CALL_DUMMY macro is the sequence of instructions, as disassembled
   by gdb itself:

   fmovemx fp0-fp7,sp@@-                 0xf227 0xe0ff
   moveml d0-a5,sp@@-                    0x48e7 0xfffc
   clrw sp@@-                            0x4267
   movew ccr,sp@@-                               0x42e7

   /..* The arguments are pushed at this point by GDB;
   no code is needed in the dummy for this.
   The CALL_DUMMY_START_OFFSET gives the position of 
   the following jsr instruction.  *../

   jsr @@#0x32323232                     0x4eb9 0x3232 0x3232
   addal #0x69696969,sp                 0xdffc 0x6969 0x6969
   trap #<your BPT_VECTOR number here>  0x4e4?
   nop                                  0x4e71

   Note this is CALL_DUMMY_LENGTH bytes (28 for the above example).
   We actually start executing at the jsr, since the pushing of the
   registers is done by PUSH_DUMMY_FRAME.  If this were real code,
   the arguments for the function called by the jsr would be pushed
   between the moveml and the jsr, and we could allow it to execute through.
   But the arguments have to be pushed by GDB after the PUSH_DUMMY_FRAME is
   done, and we cannot allow the moveml to push the registers again lest
   they be taken for the arguments.  */


#define CALL_DUMMY { 0 }
#define CALL_DUMMY_LENGTH 24	/* Size of CALL_DUMMY */
#define CALL_DUMMY_START_OFFSET 8	/* Offset to jsr instruction */


/* Insert the specified number of args and function address
   into a call sequence of the above form stored at DUMMYNAME.
   We use the BFD routines to store a big-endian value of known size.  */

#define FIX_CALL_DUMMY(dummyname, pc, fun, nargs, args, type, gcc_p)     \
{ bfd_putb32 (fun,     (char *) dummyname + CALL_DUMMY_START_OFFSET + 2);  \
  bfd_putb32 (nargs*4, (char *) dummyname + CALL_DUMMY_START_OFFSET + 8); }

/* Push an empty stack frame, to record the current PC, etc.  */

#define PUSH_DUMMY_FRAME	{ z8k_push_dummy_frame (); }

extern void z8k_push_dummy_frame (void);

extern void z8k_pop_frame (void);

/* Discard from the stack the innermost frame, restoring all registers.  */

#define POP_FRAME		{ z8k_pop_frame (); }

/* Offset from SP to first arg on stack at first instruction of a function */

#define SP_ARG0 (1 * 4)

extern CORE_ADDR z8k_addr_bits_remove (CORE_ADDR);
#define ADDR_BITS_REMOVE(addr) z8k_addr_bits_remove (addr)
int sim_z8001_mode;
#define BIG (sim_z8001_mode)

#define read_memory_short(x)  (read_memory_integer(x,2) & 0xffff)

#define NO_STD_REGS

extern void z8k_do_registers_info (int regnum, int all);
#define DEPRECATED_DO_REGISTERS_INFO(REGNUM,ALL) \
	z8k_do_registers_info (REGNUM, ALL)

extern void z8k_set_pointer_size (int newsize);
#define INIT_EXTRA_SYMTAB_INFO \
  z8k_set_pointer_size(objfile->obfd->arch_info->bits_per_address);

#define REGISTER_SIZE 4
@


1.16
log
@2002-12-08  Andrew Cagney  <ac131313@@redhat.com>

	* gdbarch.sh (INIT_FRAME_PC_FIRST, INIT_FRAME_PC_DEFAULT): Convert
	to pure functions.
	* gdbarch.h, gdbarch.c: Re-generate.
	* frame.c (get_prev_frame): Explictly assign prev's pc with value
	returned by INIT_FRAME_PC_FIRST and INIT_EXTRA_FRAME_INFO.

	* arch-utils.h (init_frame_pc_default, init_frame_pc_noop): Change
	declaration to a function returning a CORE_ADDR.
	* x86-64-tdep.h (x86_64_init_frame_pc): Ditto.
	* arch-utils.c (init_frame_pc_noop): Return the PC value.
	(init_frame_pc_default): Ditto.
	* x86-64-linux-tdep.c (x86_64_init_frame_pc): Ditto.
	* s390-tdep.c (s390_init_frame_pc_first): Ditto.
	* mips-tdep.c (mips_init_frame_pc_first): Ditto.
	* dwarf2cfi.h (cfi_init_frame_pc): Ditto.
	* dwarf2cfi.c (cfi_init_frame_pc): Ditto.
	* alpha-tdep.c (alpha_init_frame_pc_first): Ditto.

	* i386-interix-tdep.c (i386_interix_init_abi): Set init_frame_pc
	to init_frame_pc_noop.
	(i386_interix_init_frame_pc): Delete function.
	* z8k-tdep.c (init_frame_pc): Delete function.
	* config/z8k/tm-z8k.h (INIT_FRAME_PC): Define as init_frame_pc_noop.
	(INIT_FRAME_PC_FIRST): Ditto.
	* config/mn10200/tm-mn10200.h (INIT_FRAME_PC): Ditto.
	(INIT_FRAME_PC_FIRST): Ditto.
	* config/sparc/tm-sparc.h (INIT_FRAME_PC): Ditto.
	* config/rs6000/tm-rs6000.h (INIT_FRAME_PC): Redefine as
	init_frame_pc_noop.
	(INIT_FRAME_PC_FIRST): Convert to an expression.
	* config/sparc/tm-sparc.h (INIT_FRAME_PC_FIRST): Ditto.
@
text
@d111 1
a111 1
#define INIT_FRAME_PC(x,y) (init_frame_pc_noop (x, y))
@


1.15
log
@2002-12-01  Andrew Cagney  <ac131313@@redhat.com>

	* gdbarch.sh (DEPRECATED_PC_IN_CALL_DUMMY): Rename
	PC_IN_CALL_DUMMY.  Change to predicate.  Always allow call.
	* gdbarch.h, gdbarch.c: Re-generate.
	* config/sparc/tm-sparc.h, config/sparc/tm-sp64.h: Update.
	* config/mn10200/tm-mn10200.h, config/h8500/tm-h8500.h: Update.
	* config/pa/tm-hppa.h, frame.h: Update.
	* x86-64-tdep.c, vax-tdep.c, sparc-tdep.c: Update.
	* s390-tdep.c, ns32k-tdep.c, mn10300-tdep.c: Update.
	* m68k-tdep.c, i386-tdep.c, frv-tdep.c: Update.
	* cris-tdep.c, alpha-tdep.c: Update.
	* frame.c (set_unwind_by_pc, create_new_frame): Use either
	DEPRECATED_PC_IN_CALL_DUMMY or pc_in_dummy_frame.
	(get_prev_frame): Ditto.

Index: doc/ChangeLog
2002-12-01  Andrew Cagney  <ac131313@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Delete
	PC_IN_CALL_DUMMY.
@
text
@d111 2
a112 3
/*#define INIT_FRAME_PC(x,y) init_frame_pc(x,y) */
/* Initializer for an array of names of registers.
   Entries beyond the first NUM_REGS are ignored.  */
@


1.14
log
@2002-11-28  Andrew Cagney  <ac131313@@redhat.com>

	* gdbarch.sh (DEPRECATED_USE_GENERIC_DUMMY_FRAMES): Rename
	USE_GENERIC_DUMMY_FRAMES.
	* gdbarch.h, gdbarch.c: Regenerate.
	* valops.c, frame.c: Update.
	* config/z8k/tm-z8k.h, config/mn10200/tm-mn10200.h: Update.
	* config/m32r/tm-m32r.h, config/h8500/tm-h8500.h: Update.
	* config/pa/tm-hppa.h, blockframe.c: Update.
	* vax-tdep.c, sparc-tdep.c, ns32k-tdep.c: Ditto.
	* m68k-tdep.c, alpha-tdep.c: Ditto.

	* arm-tdep.c: Eliminate USE_GENERIC_DUMMY_FRAMES as always 1.
	* mips-tdep.c: Ditto.

Index: doc/ChangeLog
2002-11-28  Andrew Cagney  <ac131313@@redhat.com>

	* gdbint.texinfo (Host Definition): Delete documentation on
	USE_GENERIC_DUMMY_FRAMES.
@
text
@d26 1
a26 1
#define PC_IN_CALL_DUMMY(pc, sp, frame_address) deprecated_pc_in_call_dummy_on_stack (pc, sp, frame_address)
@


1.13
log
@2002-11-27  Andrew Cagney  <cagney@@redhat.com>

	* config/z8k/tm-z8k.h (PC_IN_CALL_DUMMY): Update definition to use
	deprecated pc_in_call_dummy function.
	* config/sparc/tm-sparc.h (PC_IN_CALL_DUMMY): Ditto.
	* config/sparc/tm-sp64.h (PC_IN_CALL_DUMMY): Ditto.
	* config/pa/tm-hppa.h (PC_IN_CALL_DUMMY): Ditto.
	* config/mn10200/tm-mn10200.h (PC_IN_CALL_DUMMY): Ditto.
	* config/h8500/tm-h8500.h (PC_IN_CALL_DUMMY): Ditto.
@
text
@d24 1
a24 1
#define USE_GENERIC_DUMMY_FRAMES 0
@


1.12
log
@2002-11-26  Andrew Cagney  <ac131313@@redhat.com>

	* config/h8500/tm-h8500.h (CALL_DUMMY_LOCATION): Define as ON_STACK.
	(USE_GENERIC_DUMMY_FRAMES): Define as zero.
	(PC_IN_CALL_DUMMY): Define as pc_in_call_dummy_on_stack.
	* config/mn10200/tm-mn10200.h (PC_IN_CALL_DUMMY): Define as
	pc_in_call_dummy_at_entry_point.
	* config/pa/tm-hppa.h (CALL_DUMMY_LOCATION): Define as ON_STACK.
	(USE_GENERIC_DUMMY_FRAMES): Define as zero.
	(PC_IN_CALL_DUMMY): Define as pc_in_call_dummy_on_stack.
	* config/pa/tm-hppa64.h (CALL_DUMMY_LOCATION): Delete undefine.
	* config/sparc/tm-sparc.h (PC_IN_CALL_DUMMY): Define as
	pc_in_call_dummy_on_stack.
	* config/sparc/tm-sp64.h (PC_IN_CALL_DUMMY): Redefine as
	pc_in_call_dummy_at_entry_point and pc_in_call_dummy_on_stack.
	* config/z8k/tm-z8k.h (CALL_DUMMY_LOCATION): Define as ON_STACK.
	(USE_GENERIC_DUMMY_FRAMES): Define as zero.
	(PC_IN_CALL_DUMMY): Defile as pc_in_call_dummy_on_stack.
@
text
@d26 1
a26 1
#define PC_IN_CALL_DUMMY(pc, sp, frame_address) pc_in_call_dummy_on_stack (pc, sp, frame_address)
@


1.11
log
@2002-10-31  Andrew Cagney  <cagney@@redhat.com>

	* z8k-tdep.c (z8k_print_register_hook): Make static.
	(z8k_print_registers_info): New static function, clone of
	infcmd.c's default_print_registers_info.
	(z8k_do_registers_info): New function.  Wrap
	z8k_print_registers_info.
	* config/z8k/tm-z8k.h: Update copyright.
	(PRINT_REGISTER_HOOK): Delete macro.
	(z8k_print_register_hook): Delete declaration.
	(DEPRECATED_DO_REGISTERS_INFO): Define.
	(z8k_do_registers_info): Declare.
@
text
@d23 5
@


1.10
log
@Index: ChangeLog
===================================================================
RCS file: /cvs/src/src/gdb/ChangeLog,v
retrieving revision 1.3144
diff -u -r1.3144 ChangeLog
--- ChangeLog	23 Aug 2002 23:05:38 -0000	1.3144
+++ ChangeLog	23 Aug 2002 23:14:45 -0000
@@@@ -1,3 +1,53 @@@@
2002-08-23  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (STORE_RETURN_VALUE): Add regcache parameter.
	(DEPRECATED_STORE_RETURN_VALUE): New method.
	(EXTRACT_RETURN_VALUE): Make buffer parameter a void pointer.
	* gdbarch.h, gdbarch.c: Re-generate.

	* values.c (set_return_value): Pass current_regcache to
	STORE_RETURN_VALUE.
	* arch-utils.h (legacy_store_return_value): Declare.
	* arch-utils.c (legacy_store_return_value): New function.
	(legacy_extract_return_value): Update parameters.

	* config/pa/tm-hppa.h (DEPRECATED_STORE_RETURN_VALUE): Rename
	STORE_RETURN_VALUE.
	* config/pa/tm-hppa64.h (DEPRECATED_STORE_RETURN_VALUE): Ditto.
	* config/sparc/tm-sparc.h (DEPRECATED_STORE_RETURN_VALUE): Ditto.
	* config/z8k/tm-z8k.h (DEPRECATED_STORE_RETURN_VALUE): Ditto.
	* config/sparc/tm-sparclet.h (DEPRECATED_STORE_RETURN_VALUE): Ditto.
	* config/mn10200/tm-mn10200.h (DEPRECATED_STORE_RETURN_VALUE): Ditto.
	* config/m68k/tm-linux.h (DEPRECATED_STORE_RETURN_VALUE): Ditto.
	* config/m68k/tm-delta68.h (DEPRECATED_STORE_RETURN_VALUE): Ditto.
	* config/m32r/tm-m32r.h (DEPRECATED_STORE_RETURN_VALUE): Ditto.
	* config/h8500/tm-h8500.h (DEPRECATED_STORE_RETURN_VALUE): Ditto.
	* config/h8300/tm-h8300.h (DEPRECATED_STORE_RETURN_VALUE): Ditto.

	* m68hc11-tdep.c (m68hc11_gdbarch_init): Update.
	* i386-tdep.c (i386_extract_return_value): Update.
	* arch-utils.c (legacy_extract_return_value): Update.
	* frv-tdep.c (frv_gdbarch_init): Update.
	* cris-tdep.c (cris_gdbarch_init): Update.
	* d10v-tdep.c (d10v_gdbarch_init): Update.
	* rs6000-tdep.c (rs6000_gdbarch_init): Update.
	* m68k-tdep.c (m68k_gdbarch_init): Update.
	* mcore-tdep.c (mcore_gdbarch_init): Update.
	* mn10300-tdep.c (mn10300_gdbarch_init): Update.
	* s390-tdep.c (s390_gdbarch_init): Update.
	* sparc-tdep.c (sparc_gdbarch_init): Update.
	* sh-tdep.c (sh_gdbarch_init): Update.
	* x86-64-tdep.c (x86_64_gdbarch_init): Update.
	* v850-tdep.c (v850_gdbarch_init): Update.
	* avr-tdep.c (avr_gdbarch_init): Update.
	* ia64-tdep.c (ia64_gdbarch_init): Update.
	* ns32k-tdep.c (ns32k_gdbarch_init): Update.
	* vax-tdep.c (vax_gdbarch_init): Update.
	* alpha-tdep.c (alpha_gdbarch_init): Update.
	* arm-tdep.c (arm_gdbarch_init): Update.
	* mips-tdep.c (mips_gdbarch_init): Update.
	* i386-tdep.c (i386_gdbarch_init): Update.

Index: doc/ChangeLog
2002-08-21  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Update
	STORE_RETURN_VALUE, mention regcache.
@
text
@d2 3
a4 2
   Copyright 1992, 1993, 1994, 1998, 1999, 2000, 2001
   Free Software Foundation, Inc.
d280 3
a282 3
extern void z8k_print_register_hook (int regno);
#define	PRINT_REGISTER_HOOK(regno) z8k_print_register_hook(regno)

@


1.10.10.1
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@@


1.10.8.1
log
@2002-11-15  David Carlton  <carlton@@math.stanford.edu>

	* Merge from mainline; tag is carlton_dictionary-20021115-merge.
@
text
@d2 2
a3 3

   Copyright 1992, 1993, 1994, 1998, 1999, 2000, 2001, 2002 Free
   Software Foundation, Inc.
d279 3
a281 3
extern void z8k_do_registers_info (int regnum, int all);
#define DEPRECATED_DO_REGISTERS_INFO(REGNUM,ALL) \
	z8k_do_registers_info (REGNUM, ALL)
@


1.10.8.2
log
@2002-12-23  David Carlton  <carlton@@math.stanford.edu>

	* Merge from mainline; tag is carlton_dictionary-20021223-merge.
@
text
@a22 5
/* NOTE: cagney/2002-11-24: This is a guess.  */
#define DEPRECATED_USE_GENERIC_DUMMY_FRAMES 0
#define CALL_DUMMY_LOCATION ON_STACK
#define DEPRECATED_PC_IN_CALL_DUMMY(pc, sp, frame_address) deprecated_pc_in_call_dummy_on_stack (pc, sp, frame_address)

d106 3
a108 2
#define DEPRECATED_INIT_FRAME_PC(x,y) (init_frame_pc_noop (x, y))
#define INIT_FRAME_PC_FIRST(x,y) (init_frame_pc_noop (x, y))
@


1.10.8.3
log
@2003-02-07  David Carlton  <carlton@@math.stanford.edu>

	* Merge with mainline; tag is carlton_dictionary-20030207-merge.
@
text
@d1 292
a292 292
// OBSOLETE /* Parameters for execution on a z8000 series machine.
// OBSOLETE 
// OBSOLETE    Copyright 1992, 1993, 1994, 1998, 1999, 2000, 2001, 2002 Free
// OBSOLETE    Software Foundation, Inc.
// OBSOLETE 
// OBSOLETE    This file is part of GDB.
// OBSOLETE 
// OBSOLETE    This program is free software; you can redistribute it and/or modify
// OBSOLETE    it under the terms of the GNU General Public License as published by
// OBSOLETE    the Free Software Foundation; either version 2 of the License, or
// OBSOLETE    (at your option) any later version.
// OBSOLETE 
// OBSOLETE    This program is distributed in the hope that it will be useful,
// OBSOLETE    but WITHOUT ANY WARRANTY; without even the implied warranty of
// OBSOLETE    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// OBSOLETE    GNU General Public License for more details.
// OBSOLETE 
// OBSOLETE    You should have received a copy of the GNU General Public License
// OBSOLETE    along with this program; if not, write to the Free Software
// OBSOLETE    Foundation, Inc., 59 Temple Place - Suite 330,
// OBSOLETE    Boston, MA 02111-1307, USA.  */
// OBSOLETE 
// OBSOLETE /* NOTE: cagney/2002-11-24: This is a guess.  */
// OBSOLETE #define DEPRECATED_USE_GENERIC_DUMMY_FRAMES 0
// OBSOLETE #define CALL_DUMMY_LOCATION ON_STACK
// OBSOLETE #define DEPRECATED_PC_IN_CALL_DUMMY(pc, sp, frame_address) deprecated_pc_in_call_dummy_on_stack (pc, sp, frame_address)
// OBSOLETE 
// OBSOLETE #undef TARGET_INT_BIT
// OBSOLETE #undef TARGET_LONG_BIT
// OBSOLETE #undef TARGET_SHORT_BIT
// OBSOLETE #undef TARGET_PTR_BIT
// OBSOLETE 
// OBSOLETE #define TARGET_SHORT_BIT 16
// OBSOLETE #define TARGET_INT_BIT 16
// OBSOLETE #define TARGET_LONG_BIT 32
// OBSOLETE #define TARGET_PTR_BIT (BIG ? 32: 16)
// OBSOLETE 
// OBSOLETE /* Offset from address of function to start of its code.
// OBSOLETE    Zero on most machines.  */
// OBSOLETE 
// OBSOLETE #define FUNCTION_START_OFFSET 0
// OBSOLETE 
// OBSOLETE /* Advance PC across any function entry prologue instructions
// OBSOLETE    to reach some "real" code.  */
// OBSOLETE 
// OBSOLETE #define SKIP_PROLOGUE(ip)   (z8k_skip_prologue (ip))
// OBSOLETE extern CORE_ADDR z8k_skip_prologue (CORE_ADDR ip);
// OBSOLETE 
// OBSOLETE 
// OBSOLETE /* Immediately after a function call, return the saved pc.
// OBSOLETE    Can't always go through the frames for this because on some machines
// OBSOLETE    the new frame is not set up until the new function executes
// OBSOLETE    some instructions.  */
// OBSOLETE 
// OBSOLETE 
// OBSOLETE extern int z8k_saved_pc_after_call (struct frame_info *frame);
// OBSOLETE #define SAVED_PC_AFTER_CALL(frame) z8k_saved_pc_after_call(frame)
// OBSOLETE 
// OBSOLETE /* Stack grows downward.  */
// OBSOLETE 
// OBSOLETE #define INNER_THAN(lhs,rhs) ((lhs) < (rhs))
// OBSOLETE 
// OBSOLETE /* Sequence of bytes for breakpoint instruction. */
// OBSOLETE 
// OBSOLETE #define BREAKPOINT {0x36,0x00}
// OBSOLETE 
// OBSOLETE /* If your kernel resets the pc after the trap happens you may need to
// OBSOLETE    define this before including this file.  */
// OBSOLETE 
// OBSOLETE #define DECR_PC_AFTER_BREAK 0
// OBSOLETE 
// OBSOLETE /* Say how long registers are.  */
// OBSOLETE 
// OBSOLETE #define REGISTER_TYPE unsigned int
// OBSOLETE 
// OBSOLETE #define NUM_REGS 	23	/* 16 registers + 1 ccr + 1 pc + 3 debug
// OBSOLETE 				   regs + fake fp + fake sp */
// OBSOLETE #define REGISTER_BYTES  (NUM_REGS *4)
// OBSOLETE 
// OBSOLETE /* Index within `registers' of the first byte of the space for
// OBSOLETE    register N.  */
// OBSOLETE 
// OBSOLETE #define REGISTER_BYTE(N)  ((N)*4)
// OBSOLETE 
// OBSOLETE /* Number of bytes of storage in the actual machine representation
// OBSOLETE    for register N.  On the z8k, all but the pc are 2 bytes, but we
// OBSOLETE    keep them all as 4 bytes and trim them on I/O */
// OBSOLETE 
// OBSOLETE 
// OBSOLETE #define REGISTER_RAW_SIZE(N) (((N) < 16)? 2:4)
// OBSOLETE 
// OBSOLETE /* Number of bytes of storage in the program's representation
// OBSOLETE    for register N.  */
// OBSOLETE 
// OBSOLETE #define REGISTER_VIRTUAL_SIZE(N) REGISTER_RAW_SIZE(N)
// OBSOLETE 
// OBSOLETE /* Largest value REGISTER_RAW_SIZE can have.  */
// OBSOLETE 
// OBSOLETE #define MAX_REGISTER_RAW_SIZE 4
// OBSOLETE 
// OBSOLETE /* Largest value REGISTER_VIRTUAL_SIZE can have.  */
// OBSOLETE 
// OBSOLETE #define MAX_REGISTER_VIRTUAL_SIZE 4
// OBSOLETE 
// OBSOLETE /* Return the GDB type object for the "standard" data type
// OBSOLETE    of data in register N.  */
// OBSOLETE 
// OBSOLETE #define REGISTER_VIRTUAL_TYPE(N) \
// OBSOLETE  (REGISTER_VIRTUAL_SIZE(N) == 2? builtin_type_unsigned_int : builtin_type_long)
// OBSOLETE 
// OBSOLETE #define DEPRECATED_INIT_FRAME_PC(x,y) (init_frame_pc_noop (x, y))
// OBSOLETE #define INIT_FRAME_PC_FIRST(x,y) (init_frame_pc_noop (x, y))
// OBSOLETE 
// OBSOLETE #define REGISTER_NAMES  \
// OBSOLETE  {"r0", "r1", "r2", "r3", "r4", "r5", "r6", "r7", \
// OBSOLETE   "r8", "r9", "r10", "r11", "r12", "r13", "r14", "r15", \
// OBSOLETE   "ccr", "pc", "cycles","insts","time","fp","sp"}
// OBSOLETE 
// OBSOLETE /* Register numbers of various important registers.
// OBSOLETE    Note that some of these values are "real" register numbers,
// OBSOLETE    and correspond to the general registers of the machine,
// OBSOLETE    and some are "phony" register numbers which are too large
// OBSOLETE    to be actual register numbers as far as the user is concerned
// OBSOLETE    but do serve to get the desired values when passed to read_register.  */
// OBSOLETE 
// OBSOLETE #define CCR_REGNUM 	16	/* Contains processor status */
// OBSOLETE #define PC_REGNUM 	17	/* Contains program counter */
// OBSOLETE #define CYCLES_REGNUM 	18
// OBSOLETE #define INSTS_REGNUM 	19
// OBSOLETE #define TIME_REGNUM 	20
// OBSOLETE #define FP_REGNUM 	21	/* Contains fp, whatever memory model */
// OBSOLETE #define SP_REGNUM 	22	/* Conatins sp, whatever memory model */
// OBSOLETE 
// OBSOLETE 
// OBSOLETE 
// OBSOLETE #define PTR_SIZE (BIG ? 4: 2)
// OBSOLETE #define PTR_MASK (BIG ? 0xff00ffff : 0x0000ffff)
// OBSOLETE 
// OBSOLETE /* Store the address of the place in which to copy the structure the
// OBSOLETE    subroutine will return.  This is called from call_function. */
// OBSOLETE 
// OBSOLETE #define STORE_STRUCT_RETURN(ADDR, SP) internal_error (__FILE__, __LINE__, "failed internal consistency check");
// OBSOLETE 
// OBSOLETE /* Extract from an array REGBUF containing the (raw) register state
// OBSOLETE    a function return value of type TYPE, and copy that, in virtual format,
// OBSOLETE    into VALBUF.  This is assuming that floating point values are returned
// OBSOLETE    as doubles in d0/d1.  */
// OBSOLETE 
// OBSOLETE 
// OBSOLETE #define DEPRECATED_EXTRACT_RETURN_VALUE(TYPE,REGBUF,VALBUF) \
// OBSOLETE   memcpy(VALBUF, REGBUF + REGISTER_BYTE(2), TYPE_LENGTH(TYPE));
// OBSOLETE 
// OBSOLETE /* Write into appropriate registers a function return value
// OBSOLETE    of type TYPE, given in virtual format. */
// OBSOLETE 
// OBSOLETE #define DEPRECATED_STORE_RETURN_VALUE(TYPE,VALBUF) internal_error (__FILE__, __LINE__, "failed internal consistency check");
// OBSOLETE 
// OBSOLETE /* Extract from an array REGBUF containing the (raw) register state
// OBSOLETE    the address in which a function should return its structure value,
// OBSOLETE    as a CORE_ADDR (or an expression that can be used as one).  */
// OBSOLETE 
// OBSOLETE #define DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS(REGBUF) (*(CORE_ADDR *)(REGBUF))
// OBSOLETE 
// OBSOLETE /* Describe the pointer in each stack frame to the previous stack frame
// OBSOLETE    (its caller).  */
// OBSOLETE 
// OBSOLETE /* FRAME_CHAIN takes a frame's nominal address and produces the frame's
// OBSOLETE    chain-pointer.
// OBSOLETE    In the case of the Z8000, the frame's nominal address
// OBSOLETE    is the address of a ptr sized byte word containing the calling
// OBSOLETE    frame's address.  */
// OBSOLETE 
// OBSOLETE extern CORE_ADDR z8k_frame_chain (struct frame_info *thisframe);
// OBSOLETE #define FRAME_CHAIN(thisframe) z8k_frame_chain(thisframe);
// OBSOLETE 
// OBSOLETE 
// OBSOLETE 
// OBSOLETE /* Define other aspects of the stack frame.  */
// OBSOLETE 
// OBSOLETE /* A macro that tells us whether the function invocation represented
// OBSOLETE    by FI does not have a frame on the stack associated with it.  If it
// OBSOLETE    does not, FRAMELESS is set to 1, else 0.  */
// OBSOLETE #define FRAMELESS_FUNCTION_INVOCATION(FI) \
// OBSOLETE   (frameless_look_for_prologue (FI))
// OBSOLETE 
// OBSOLETE extern CORE_ADDR z8k_frame_saved_pc (struct frame_info *frame);
// OBSOLETE #define FRAME_SAVED_PC(FRAME) z8k_frame_saved_pc(FRAME)
// OBSOLETE 
// OBSOLETE #define FRAME_ARGS_ADDRESS(fi) ((fi)->frame)
// OBSOLETE 
// OBSOLETE #define FRAME_LOCALS_ADDRESS(fi) ((fi)->frame)
// OBSOLETE 
// OBSOLETE /* Set VAL to the number of args passed to frame described by FI.
// OBSOLETE    Can set VAL to -1, meaning no way to tell.  */
// OBSOLETE 
// OBSOLETE /* We can't tell how many args there are
// OBSOLETE    now that the C compiler delays popping them.  */
// OBSOLETE #if !defined (FRAME_NUM_ARGS)
// OBSOLETE #define FRAME_NUM_ARGS(fi) (-1)
// OBSOLETE #endif
// OBSOLETE 
// OBSOLETE /* Return number of bytes at start of arglist that are not really args.  */
// OBSOLETE 
// OBSOLETE #define FRAME_ARGS_SKIP 8
// OBSOLETE 
// OBSOLETE struct frame_info;
// OBSOLETE extern void z8k_frame_init_saved_regs (struct frame_info *);
// OBSOLETE #define FRAME_INIT_SAVED_REGS(fi) z8k_frame_init_saved_regs (fi)
// OBSOLETE 
// OBSOLETE 
// OBSOLETE /* Things needed for making the inferior call functions.
// OBSOLETE    It seems like every m68k based machine has almost identical definitions
// OBSOLETE    in the individual machine's configuration files.  Most other cpu types
// OBSOLETE    (mips, i386, etc) have routines in their *-tdep.c files to handle this
// OBSOLETE    for most configurations.  The m68k family should be able to do this as
// OBSOLETE    well.  These macros can still be overridden when necessary.  */
// OBSOLETE 
// OBSOLETE /* The CALL_DUMMY macro is the sequence of instructions, as disassembled
// OBSOLETE    by gdb itself:
// OBSOLETE 
// OBSOLETE    fmovemx fp0-fp7,sp@@-                 0xf227 0xe0ff
// OBSOLETE    moveml d0-a5,sp@@-                    0x48e7 0xfffc
// OBSOLETE    clrw sp@@-                            0x4267
// OBSOLETE    movew ccr,sp@@-                               0x42e7
// OBSOLETE 
// OBSOLETE    /..* The arguments are pushed at this point by GDB;
// OBSOLETE    no code is needed in the dummy for this.
// OBSOLETE    The CALL_DUMMY_START_OFFSET gives the position of 
// OBSOLETE    the following jsr instruction.  *../
// OBSOLETE 
// OBSOLETE    jsr @@#0x32323232                     0x4eb9 0x3232 0x3232
// OBSOLETE    addal #0x69696969,sp                 0xdffc 0x6969 0x6969
// OBSOLETE    trap #<your BPT_VECTOR number here>  0x4e4?
// OBSOLETE    nop                                  0x4e71
// OBSOLETE 
// OBSOLETE    Note this is CALL_DUMMY_LENGTH bytes (28 for the above example).
// OBSOLETE    We actually start executing at the jsr, since the pushing of the
// OBSOLETE    registers is done by PUSH_DUMMY_FRAME.  If this were real code,
// OBSOLETE    the arguments for the function called by the jsr would be pushed
// OBSOLETE    between the moveml and the jsr, and we could allow it to execute through.
// OBSOLETE    But the arguments have to be pushed by GDB after the PUSH_DUMMY_FRAME is
// OBSOLETE    done, and we cannot allow the moveml to push the registers again lest
// OBSOLETE    they be taken for the arguments.  */
// OBSOLETE 
// OBSOLETE 
// OBSOLETE #define CALL_DUMMY { 0 }
// OBSOLETE #define CALL_DUMMY_LENGTH 24	/* Size of CALL_DUMMY */
// OBSOLETE #define CALL_DUMMY_START_OFFSET 8	/* Offset to jsr instruction */
// OBSOLETE 
// OBSOLETE 
// OBSOLETE /* Insert the specified number of args and function address
// OBSOLETE    into a call sequence of the above form stored at DUMMYNAME.
// OBSOLETE    We use the BFD routines to store a big-endian value of known size.  */
// OBSOLETE 
// OBSOLETE #define FIX_CALL_DUMMY(dummyname, pc, fun, nargs, args, type, gcc_p)     \
// OBSOLETE { bfd_putb32 (fun,     (char *) dummyname + CALL_DUMMY_START_OFFSET + 2);  \
// OBSOLETE   bfd_putb32 (nargs*4, (char *) dummyname + CALL_DUMMY_START_OFFSET + 8); }
// OBSOLETE 
// OBSOLETE /* Push an empty stack frame, to record the current PC, etc.  */
// OBSOLETE 
// OBSOLETE #define PUSH_DUMMY_FRAME	{ z8k_push_dummy_frame (); }
// OBSOLETE 
// OBSOLETE extern void z8k_push_dummy_frame (void);
// OBSOLETE 
// OBSOLETE extern void z8k_pop_frame (void);
// OBSOLETE 
// OBSOLETE /* Discard from the stack the innermost frame, restoring all registers.  */
// OBSOLETE 
// OBSOLETE #define POP_FRAME		{ z8k_pop_frame (); }
// OBSOLETE 
// OBSOLETE /* Offset from SP to first arg on stack at first instruction of a function */
// OBSOLETE 
// OBSOLETE #define SP_ARG0 (1 * 4)
// OBSOLETE 
// OBSOLETE extern CORE_ADDR z8k_addr_bits_remove (CORE_ADDR);
// OBSOLETE #define ADDR_BITS_REMOVE(addr) z8k_addr_bits_remove (addr)
// OBSOLETE int sim_z8001_mode;
// OBSOLETE #define BIG (sim_z8001_mode)
// OBSOLETE 
// OBSOLETE #define read_memory_short(x)  (read_memory_integer(x,2) & 0xffff)
// OBSOLETE 
// OBSOLETE #define NO_STD_REGS
// OBSOLETE 
// OBSOLETE extern void z8k_do_registers_info (int regnum, int all);
// OBSOLETE #define DEPRECATED_DO_REGISTERS_INFO(REGNUM,ALL) \
// OBSOLETE 	z8k_do_registers_info (REGNUM, ALL)
// OBSOLETE 
// OBSOLETE extern void z8k_set_pointer_size (int newsize);
// OBSOLETE #define INIT_EXTRA_SYMTAB_INFO \
// OBSOLETE   z8k_set_pointer_size(objfile->obfd->arch_info->bits_per_address);
// OBSOLETE 
// OBSOLETE #define REGISTER_SIZE 4
@


1.10.8.4
log
@2003-11-11  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton-dictionary-20031111-merge.
@
text
@@


1.9
log
@+	* gdbarch.sh (DEPRECATED_EXTRACT_RETURN_VALUE): Rename
+	EXTRACT_RETURN_VALUE.
+	(DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS): Rename
+	EXTRACT_STRUCT_VALUE_ADDRESS.
+	* gdbarch.h, gdbarch.c: Regenerate.
+
+	* values.c (value_being_returned): Handle
+	DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS.
+	(EXTRACT_RETURN_VALUE): Define as DEPRECATED_EXTRACT_RETURN_VALUE.
+
+	* arm-linux-tdep.c (arm_linux_init_abi): Update.
+	* arm-tdep.c (arm_gdbarch_init): Update.
+	* avr-tdep.c (avr_gdbarch_init): Update.
+	* cris-tdep.c (cris_gdbarch_init): Update.
+	* d10v-tdep.c (d10v_gdbarch_init): Update.
+	* ia64-tdep.c (ia64_gdbarch_init): Update.
+	* m68hc11-tdep.c (m68hc11_gdbarch_init): Update.
+	* rs6000-tdep.c (rs6000_gdbarch_init): Update.
+	* s390-tdep.c (s390_gdbarch_init): Update.
+	* sh-tdep.c (sh_gdbarch_init): Update.
+	* s390-tdep.c (s390_gdbarch_init): Update.
+	* sparc-tdep.c (sparc_gdbarch_init): Update.
+	* ns32k-tdep.c (ns32k_gdbarch_init): Update.
+	* v850-tdep.c (v850_gdbarch_init): Update.
+	* vax-tdep.c (vax_gdbarch_init): Update.
+	* x86-64-tdep.c (x86_64_gdbarch_init): Update.
+	* xstormy16-tdep.c (xstormy16_gdbarch_init): Update.
+
+	* config/arc/tm-arc.h: Update.
+	* config/d30v/tm-d30v.h: Update.
+	* config/fr30/tm-fr30.h: Update.
+	* config/h8300/tm-h8300.h: Update.
* config/h8500/tm-h8500.h: Update.
* config/i386/tm-i386.h: Update.
* config/i386/tm-ptx.h: Update.
* config/i386/tm-symmetry.h: Update.
* config/i960/tm-i960.h: Update.
* config/m32r/tm-m32r.h: Update.
* config/m68k/tm-delta68.h: Update.
* config/m68k/tm-linux.h: Update.
* config/m68k/tm-m68k.h: Update.
* config/m88k/tm-m88k.h: Update.
* config/mcore/tm-mcore.h: Update.
* config/mips/tm-mips.h: Update.
* config/mn10200/tm-mn10200.h: Update.
* config/pa/tm-hppa.h: Update.
* config/pa/tm-hppa64.h: Update.
* config/sparc/tm-sp64.h: Update.
* config/sparc/tm-sparc.h: Update.
* config/sparc/tm-sparclet.h: Update.
* config/z8k/tm-z8k.h: Update.
@
text
@d151 1
a151 1
#define STORE_RETURN_VALUE(TYPE,VALBUF) internal_error (__FILE__, __LINE__, "failed internal consistency check");
@


1.8
log
@Eliminate TARGET_BYTE_ORDER.
@
text
@d145 1
a145 1
#define EXTRACT_RETURN_VALUE(TYPE,REGBUF,VALBUF) \
d157 1
a157 1
#define EXTRACT_STRUCT_VALUE_ADDRESS(REGBUF) (*(CORE_ADDR *)(REGBUF))
@


1.8.8.1
log
@Merge with mainline, kseitz_interps-20020619-merge.
@
text
@d145 1
a145 1
#define DEPRECATED_EXTRACT_RETURN_VALUE(TYPE,REGBUF,VALBUF) \
d157 1
a157 1
#define DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS(REGBUF) (*(CORE_ADDR *)(REGBUF))
@


1.8.8.2
log
@Merge with kseitz_interps-20020829-merge tag from trunk.
@
text
@d151 1
a151 1
#define DEPRECATED_STORE_RETURN_VALUE(TYPE,VALBUF) internal_error (__FILE__, __LINE__, "failed internal consistency check");
@


1.8.8.3
log
@merge from mainline
@
text
@d2 2
a3 3

   Copyright 1992, 1993, 1994, 1998, 1999, 2000, 2001, 2002 Free
   Software Foundation, Inc.
d279 3
a281 3
extern void z8k_do_registers_info (int regnum, int all);
#define DEPRECATED_DO_REGISTERS_INFO(REGNUM,ALL) \
	z8k_do_registers_info (REGNUM, ALL)
@


1.8.6.1
log
@merge from trunk
@
text
@d145 1
a145 1
#define DEPRECATED_EXTRACT_RETURN_VALUE(TYPE,REGBUF,VALBUF) \
d157 1
a157 1
#define DEPRECATED_EXTRACT_STRUCT_VALUE_ADDRESS(REGBUF) (*(CORE_ADDR *)(REGBUF))
@


1.7
log
@Eliminate IEEE_FLOAT.
@
text
@a31 3
/* Define the bit, byte, and word ordering of the machine.  */
#define TARGET_BYTE_ORDER BFD_ENDIAN_BIG

@


1.6
log
@s/BIG_ENDIAN/BFD_ENDIAN_BIG/
@
text
@a21 2
#define IEEE_FLOAT (1)

@


1.5
log
@Update/correct copyright notices.
@
text
@d35 1
a35 1
#define TARGET_BYTE_ORDER BIG_ENDIAN
@


1.4
log
@Replace calls to abort() with calls to internal_error().
@
text
@d2 2
a3 1
   Copyright 1992, 1993 Free Software Foundation, Inc.
@


1.3
log
@PARAMS removal.
@
text
@d141 1
a141 1
#define STORE_STRUCT_RETURN(ADDR, SP) abort();
d155 1
a155 1
#define STORE_RETURN_VALUE(TYPE,VALBUF) abort();
@


1.2
log
@Bring IEEE_FLOAT under gdbarch's control.
* gdbarch.sh (IEEE_FLOAT): New entry.
* gdbarch.c, gdbarch.h: Regenerated.
* valprint.c (IEEE_FLOAT): Provide a default #definition for this.
(print_floating): Use IEEE_FLOAT as if it were an expression; use
the code specific to IEEE-format numbers whenever the value of
IEEE_FLOAT is non-zero.
* config/a29k/tm-a29k.h, config/alpha/tm-alpha.h,
config/arc/tm-arc.h, config/arm/tm-arm.h, config/fr30/tm-fr30.h,
config/h8300/tm-h8300.h, config/i386/tm-i386.h,
config/i960/tm-i960.h, config/m88k/tm-m88k.h,
config/mips/tm-mips.h, config/pa/tm-hppa.h,
config/sparc/tm-sparc.h, config/delta/tm-delta.h,
config/frv/tm-frv.h (IEEE_FLOAT): For all ports that #define
IEEE_FLOAT, make sure they give it the value (1).
@
text
@d45 1
a45 1
extern CORE_ADDR z8k_skip_prologue PARAMS ((CORE_ADDR ip));
d206 1
a206 1
extern void z8k_frame_init_saved_regs PARAMS ((struct frame_info *));
d262 1
a262 1
extern void z8k_push_dummy_frame PARAMS ((void));
d264 1
a264 1
extern void z8k_pop_frame PARAMS ((void));
d274 1
a274 1
extern CORE_ADDR z8k_addr_bits_remove PARAMS ((CORE_ADDR));
@


1.1
log
@Initial revision
@
text
@d4 1
a4 1
This file is part of GDB.
d6 14
a19 13
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
d21 1
a21 1
#define IEEE_FLOAT 1
d44 2
a45 2
#define SKIP_PROLOGUE(ip)   {(ip) = z8k_skip_prologue(ip);}
extern CORE_ADDR mz8k_skip_prologue PARAMS ((CORE_ADDR ip));
d53 3
a55 1
#define SAVED_PC_AFTER_CALL(frame) saved_pc_after_call(frame)
d74 2
a75 2
#define NUM_REGS 	23   /* 16 registers + 1 ccr + 1 pc + 3 debug
				regs + fake fp + fake sp*/
d93 1
a93 1
#define REGISTER_VIRTUAL_SIZE(N) REGISTER_RAW_SIZE(N) 
d109 1
a109 1
/*#define INIT_FRAME_PC(x,y) init_frame_pc(x,y)*/
d172 2
a173 1
#define FRAME_CHAIN(thisframe) frame_chain(thisframe);
d182 2
a183 2
#define FRAMELESS_FUNCTION_INVOCATION(FI, FRAMELESS) \
  (FRAMELESS) = frameless_look_for_prologue(FI)
d185 2
a186 1
#define FRAME_SAVED_PC(FRAME) frame_saved_pc(FRAME)
d198 1
a198 1
#define FRAME_NUM_ARGS(val,fi) (val = -1)
a204 1
#ifdef __STDC__
a205 1
#endif
d208 1
a209 1

d220 14
a233 14
	fmovemx fp0-fp7,sp@@-			0xf227 0xe0ff
	moveml d0-a5,sp@@-			0x48e7 0xfffc
	clrw sp@@-				0x4267
	movew ccr,sp@@-				0x42e7

	/..* The arguments are pushed at this point by GDB;
	no code is needed in the dummy for this.
	The CALL_DUMMY_START_OFFSET gives the position of 
	the following jsr instruction.  *../

	jsr @@#0x32323232			0x4eb9 0x3232 0x3232
	addal #0x69696969,sp			0xdffc 0x6969 0x6969
	trap #<your BPT_VECTOR number here>	0x4e4?
	nop					0x4e71
d246 2
a247 2
#define CALL_DUMMY_LENGTH 24		/* Size of CALL_DUMMY */
#define CALL_DUMMY_START_OFFSET 8	/* Offset to jsr instruction*/
d283 2
a284 1
#define	PRINT_REGISTER_HOOK(regno) print_register_hook(regno)
d287 1
a291 1

@


1.1.1.1
log
@Initial creation of sourceware repository
@
text
@@


1.1.1.2
log
@import gdb-19990504 snapshot
@
text
@d43 1
a43 1
#define SKIP_PROLOGUE(ip)   (z8k_skip_prologue (ip))
@


1.1.1.3
log
@import gdb-1999-05-25 snapshot
@
text
@d178 2
a179 2
#define FRAMELESS_FUNCTION_INVOCATION(FI) \
  (frameless_look_for_prologue (FI))
d193 1
a193 1
#define FRAME_NUM_ARGS(fi) (-1)
@


1.1.1.4
log
@import gdb-1999-07-07 post reformat
@
text
@d4 1
a4 1
   This file is part of GDB.
d6 13
a18 14
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */
d71 2
a72 2
#define NUM_REGS 	23	/* 16 registers + 1 ccr + 1 pc + 3 debug
				   regs + fake fp + fake sp */
d90 1
a90 1
#define REGISTER_VIRTUAL_SIZE(N) REGISTER_RAW_SIZE(N)
d106 1
a106 1
/*#define INIT_FRAME_PC(x,y) init_frame_pc(x,y) */
d205 1
a206 1

d217 14
a230 14
   fmovemx fp0-fp7,sp@@-                 0xf227 0xe0ff
   moveml d0-a5,sp@@-                    0x48e7 0xfffc
   clrw sp@@-                            0x4267
   movew ccr,sp@@-                               0x42e7

   /..* The arguments are pushed at this point by GDB;
   no code is needed in the dummy for this.
   The CALL_DUMMY_START_OFFSET gives the position of 
   the following jsr instruction.  *../

   jsr @@#0x32323232                     0x4eb9 0x3232 0x3232
   addal #0x69696969,sp                 0xdffc 0x6969 0x6969
   trap #<your BPT_VECTOR number here>  0x4e4?
   nop                                  0x4e71
d243 2
a244 2
#define CALL_DUMMY_LENGTH 24	/* Size of CALL_DUMMY */
#define CALL_DUMMY_START_OFFSET 8	/* Offset to jsr instruction */
d287 1
@


1.1.1.5
log
@import gdb-1999-08-30 snapshot
@
text
@d201 1
d203 1
@


1.1.1.6
log
@import gdb-1999-09-08 snapshot
@
text
@d45 1
a45 1
extern CORE_ADDR z8k_skip_prologue PARAMS ((CORE_ADDR ip));
d53 1
a53 3

extern int z8k_saved_pc_after_call (struct frame_info *frame);
#define SAVED_PC_AFTER_CALL(frame) z8k_saved_pc_after_call(frame)
d170 1
a170 2
extern CORE_ADDR z8k_frame_chain (struct frame_info *thisframe);
#define FRAME_CHAIN(thisframe) z8k_frame_chain(thisframe);
d182 1
a182 2
extern CORE_ADDR z8k_frame_saved_pc (struct frame_info *frame);
#define FRAME_SAVED_PC(FRAME) z8k_frame_saved_pc(FRAME)
d279 1
a279 2
extern void z8k_print_register_hook (int regno);
#define	PRINT_REGISTER_HOOK(regno) z8k_print_register_hook(regno)
a281 1
extern void z8k_set_pointer_size (int newsize);
@


