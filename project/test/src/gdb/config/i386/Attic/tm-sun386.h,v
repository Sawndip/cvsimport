head	1.6;
access;
symbols
	gdb_5_1_1-2002-01-24-release:1.5
	gdb_5_1_0_1-2002-01-03-release:1.5
	gdb_5_1_0_1-2002-01-03-branchpoint:1.5
	gdb_5_1_0_1-2002-01-03-branch:1.5.0.8
	gdb_5_1-2001-11-21-release:1.5
	gdb_s390-2001-09-26-branch:1.5.0.6
	gdb_s390-2001-09-26-branchpoint:1.5
	gdb_5_1-2001-07-29-branch:1.5.0.4
	gdb_5_1-2001-07-29-branchpoint:1.5
	dberlin-typesystem-branch:1.5.0.2
	dberlin-typesystem-branchpoint:1.5
	gdb-post-ptid_t-2001-05-03:1.5
	gdb-pre-ptid_t-2001-05-03:1.5
	insight-precleanup-2001-01-01:1.2
	gdb-post-protoization-2000-07-29:1.2
	gdb-pre-protoization-2000-07-29:1.2
	gdb-premipsmulti-2000-06-06-branch:1.2.0.2
	gdb-premipsmulti-2000-06-06-branchpoint:1.2
	gdb-post-params-removal-2000-06-04:1.2
	gdb-pre-params-removal-2000-06-04:1.2
	gdb-post-params-removal-2000-05-28:1.2
	gdb-pre-params-removal-2000-05-28:1.1.1.4
	gdb_5_0-2000-05-19-release:1.1.1.4
	gdb_4_18_2-2000-05-18-release:1.1.1.4
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.4
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.4
	gdb_5_0-2000-04-10-branch:1.1.1.4.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1.1.4
	repo-unification-2000-02-06:1.1.1.4
	insight-2000-02-04:1.1.1.4
	gdb-2000-02-04:1.1.1.4
	gdb-2000-02-02:1.1.1.4
	gdb-2000-02-01:1.1.1.4
	gdb-2000-01-31:1.1.1.4
	gdb-2000-01-26:1.1.1.4
	gdb-2000-01-24:1.1.1.4
	gdb-2000-01-17:1.1.1.4
	gdb-2000-01-10:1.1.1.4
	gdb-2000-01-05:1.1.1.4
	gdb-1999-12-21:1.1.1.4
	gdb-1999-12-13:1.1.1.4
	gdb-1999-12-07:1.1.1.4
	gdb-1999-12-06:1.1.1.4
	gdb-1999-11-16:1.1.1.4
	gdb-1999-11-08:1.1.1.4
	gdb-1999-11-01:1.1.1.4
	gdb-1999-10-25:1.1.1.4
	gdb-1999-10-18:1.1.1.4
	gdb-1999-10-11:1.1.1.4
	gdb-1999-10-04:1.1.1.4
	gdb-1999-09-28:1.1.1.4
	gdb-1999-09-21:1.1.1.4
	gdb-1999-09-13:1.1.1.4
	gdb-1999-09-08:1.1.1.4
	gdb-1999-08-30:1.1.1.4
	gdb-1999-08-23:1.1.1.3
	gdb-1999-08-16:1.1.1.3
	gdb-1999-08-09:1.1.1.3
	gdb-1999-08-02:1.1.1.3
	gdb-1999-07-26:1.1.1.3
	gdb-1999-07-19:1.1.1.3
	gdb-1999-07-12:1.1.1.3
	gdb-post-reformat-19990707:1.1.1.3
	gdb-1999-07-07-post-reformat-snapshot:1.1.1.3
	gdb-pre-reformat-19990707:1.1.1.2
	gdb-1999-07-07:1.1.1.2
	gdb-1999-07-05:1.1.1.2
	gdb-1999-06-28:1.1.1.2
	gdb-1999-06-21:1.1.1.2
	gdb-1999-06-14:1.1.1.2
	gdb-1999-06-07:1.1.1.2
	gdb-1999-06-01:1.1.1.2
	gdb-4_18-branch:1.1.1.1.0.2
	gdb-4_18-release:1.1.1.1
	gdb-1999-05-25:1.1.1.2
	gdb-1999-05-19:1.1.1.1
	gdb-1999-05-10:1.1.1.1
	gdb-19990504:1.1.1.1
	gdb-19990422:1.1.1.1
	SNAPSHOT:1.1.1
	gdb-4_18:1.1.1.1
	GDB_4_18:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.6
date	2001.12.01.22.19.30;	author cagney;	state dead;
branches;
next	1.5;

1.5
date	2001.04.11.22.39.07;	author cagney;	state Exp;
branches;
next	1.4;

1.4
date	2001.03.14.23.23.11;	author cagney;	state Exp;
branches;
next	1.3;

1.3
date	2001.03.06.08.21.29;	author kevinb;	state Exp;
branches;
next	1.2;

1.2
date	2000.05.28.01.12.35;	author kevinb;	state Exp;
branches;
next	1.1;

1.1
date	99.04.16.01.34.19;	author shebs;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.16.01.34.19;	author shebs;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.05.25.18.04.40;	author jsm;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	99.07.07.20.13.25;	author jsm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	99.08.31.01.07.11;	author jsm;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Zap Sun's i386i.
@
text
@/* OBSOLETE /* Parameters for a Sun 386i target machine, for GDB, the GNU debugger. */
/* OBSOLETE    Copyright 1986, 1987, 1991, 1992, 1993, 1994, 1995, 1999, 2000 */
/* OBSOLETE    Free Software Foundation, Inc. */
/* OBSOLETE  */
/* OBSOLETE    This file is part of GDB. */
/* OBSOLETE  */
/* OBSOLETE    This program is free software; you can redistribute it and/or modify */
/* OBSOLETE    it under the terms of the GNU General Public License as published by */
/* OBSOLETE    the Free Software Foundation; either version 2 of the License, or */
/* OBSOLETE    (at your option) any later version. */
/* OBSOLETE  */
/* OBSOLETE    This program is distributed in the hope that it will be useful, */
/* OBSOLETE    but WITHOUT ANY WARRANTY; without even the implied warranty of */
/* OBSOLETE    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the */
/* OBSOLETE    GNU General Public License for more details. */
/* OBSOLETE  */
/* OBSOLETE    You should have received a copy of the GNU General Public License */
/* OBSOLETE    along with this program; if not, write to the Free Software */
/* OBSOLETE    Foundation, Inc., 59 Temple Place - Suite 330, */
/* OBSOLETE    Boston, MA 02111-1307, USA.  */ */
/* OBSOLETE  */
/* OBSOLETE #if !defined (TM_SUN386_H) */
/* OBSOLETE #define TM_SUN386_H 1 */
/* OBSOLETE  */
/* OBSOLETE #include "regcache.h" */
/* OBSOLETE #include "i386/tm-i386.h" */
/* OBSOLETE  */
/* OBSOLETE #ifndef sun386 */
/* OBSOLETE #define sun386 */
/* OBSOLETE #endif */
/* OBSOLETE #define SUNOS4 */
/* OBSOLETE #define USE_MACHINE_REG_H */
/* OBSOLETE  */
/* OBSOLETE /* Perhaps some day this will work even without the following #define */ */
/* OBSOLETE #define COFF_ENCAPSULATE */
/* OBSOLETE  */
/* OBSOLETE #ifdef COFF_ENCAPSULATE */
/* OBSOLETE /* Avoid conflicts between our include files and <sys/exec.h> */
/* OBSOLETE    (maybe not needed anymore).  */ */
/* OBSOLETE #define _EXEC_ */
/* OBSOLETE #endif */
/* OBSOLETE  */
/* OBSOLETE /* sun386 ptrace seems unable to change the frame pointer */ */
/* OBSOLETE #define PTRACE_FP_BUG */
/* OBSOLETE  */
/* OBSOLETE /* Address of end of stack space.  */ */
/* OBSOLETE  */
/* OBSOLETE #define STACK_END_ADDR 0xfc000000 */
/* OBSOLETE  */
/* OBSOLETE /* Number of machine registers */ */
/* OBSOLETE  */
/* OBSOLETE #undef  NUM_REGS */
/* OBSOLETE #define NUM_REGS 35 */
/* OBSOLETE  */
/* OBSOLETE /* Initializer for an array of names of registers.  There should be NUM_REGS */
/* OBSOLETE    strings in this initializer.  The order of the first 8 registers must match */
/* OBSOLETE    the compiler's numbering scheme (which is the same as the 386 scheme) also, */
/* OBSOLETE    this table must match regmap in i386-pinsn.c. */ */
/* OBSOLETE  */
/* OBSOLETE #undef  REGISTER_NAMES */
/* OBSOLETE #define REGISTER_NAMES { "gs", "fs", "es", "ds",		\ */
/* OBSOLETE 			 "edi", "esi", "ebp", "esp",		\ */
/* OBSOLETE 			 "ebx", "edx", "ecx", "eax",		\ */
/* OBSOLETE 			 "retaddr", "trapnum", "errcode", "ip",	\ */
/* OBSOLETE 			 "cs", "ps", "sp", "ss",		\ */
/* OBSOLETE 			 "fst0", "fst1", "fst2", "fst3",	\ */
/* OBSOLETE 			 "fst4", "fst5", "fst6", "fst7",	\ */
/* OBSOLETE 			 "fctrl", "fstat", "ftag", "fip",	\ */
/* OBSOLETE 			 "fcs", "fopoff", "fopsel"		\ */
/* OBSOLETE 			 } */
/* OBSOLETE  */
/* OBSOLETE /* Register numbers of various important registers. */
/* OBSOLETE    Note that some of these values are "real" register numbers, */
/* OBSOLETE    and correspond to the general registers of the machine, */
/* OBSOLETE    and some are "phony" register numbers which are too large */
/* OBSOLETE    to be actual register numbers as far as the user is concerned */
/* OBSOLETE    but do serve to get the desired values when passed to read_register.  */ */
/* OBSOLETE  */
/* OBSOLETE #undef  FP_REGNUM */
/* OBSOLETE #define FP_REGNUM   6		/* (ebp) Contains address of executing stack frame */ */
/* OBSOLETE #undef  SP_REGNUM */
/* OBSOLETE #define SP_REGNUM  18		/* (usp) Contains address of top of stack */ */
/* OBSOLETE #undef  PS_REGNUM */
/* OBSOLETE #define PS_REGNUM  17		/* (ps)  Contains processor status */ */
/* OBSOLETE #undef  PC_REGNUM */
/* OBSOLETE #define PC_REGNUM  15		/* (eip) Contains program counter */ */
/* OBSOLETE #undef  FP0_REGNUM */
/* OBSOLETE #define FP0_REGNUM 20		/* Floating point register 0 */ */
/* OBSOLETE #undef  FPC_REGNUM */
/* OBSOLETE #define FPC_REGNUM 28		/* 80387 control register */ */
/* OBSOLETE  */
/* OBSOLETE /* Total amount of space needed to store our copies of the machine's */
/* OBSOLETE    register state, the array `registers'.  */ */
/* OBSOLETE  */
/* OBSOLETE #undef  REGISTER_BYTES */
/* OBSOLETE #define REGISTER_BYTES (20*4+8*10+7*4) */
/* OBSOLETE  */
/* OBSOLETE /* Index within `registers' of the first byte of the space for */
/* OBSOLETE    register N.  */ */
/* OBSOLETE  */
/* OBSOLETE #undef  REGISTER_BYTE */
/* OBSOLETE #define REGISTER_BYTE(N) \ */
/* OBSOLETE  ((N) >= FPC_REGNUM ? (((N) - FPC_REGNUM) * 4) + 160	\ */
/* OBSOLETE   : (N) >= FP0_REGNUM ? (((N) - FP0_REGNUM) * 10) + 80	\ */
/* OBSOLETE   : (N) * 4) */
/* OBSOLETE  */
/* OBSOLETE /* Number of bytes of storage in the actual machine representation */
/* OBSOLETE    for register N.  */ */
/* OBSOLETE  */
/* OBSOLETE #undef  REGISTER_RAW_SIZE */
/* OBSOLETE #define REGISTER_RAW_SIZE(N) (((unsigned)((N) - FP0_REGNUM)) < 8 ? 10 : 4) */
/* OBSOLETE  */
/* OBSOLETE /* Number of bytes of storage in the program's representation */
/* OBSOLETE    for register N. */ */
/* OBSOLETE  */
/* OBSOLETE #undef  REGISTER_VIRTUAL_SIZE */
/* OBSOLETE #define REGISTER_VIRTUAL_SIZE(N) (((unsigned)((N) - FP0_REGNUM)) < 8 ? 8 : 4) */
/* OBSOLETE  */
/* OBSOLETE /* Nonzero if register N requires conversion */
/* OBSOLETE    from raw format to virtual format.  */ */
/* OBSOLETE  */
/* OBSOLETE #undef  REGISTER_CONVERTIBLE */
/* OBSOLETE #define REGISTER_CONVERTIBLE(N) (((unsigned)((N) - FP0_REGNUM)) < 8) */
/* OBSOLETE  */
/* OBSOLETE /* Convert data from raw format for register REGNUM in buffer FROM */
/* OBSOLETE    to virtual format with type TYPE in buffer TO.  */ */
/* OBSOLETE  */
/* OBSOLETE #undef  REGISTER_CONVERT_TO_VIRTUAL */
/* OBSOLETE #define REGISTER_CONVERT_TO_VIRTUAL(REGNUM,TYPE,FROM,TO) \ */
/* OBSOLETE { \ */
/* OBSOLETE   double val; \ */
/* OBSOLETE   i387_to_double ((FROM), (char *)&val); \ */
/* OBSOLETE   store_floating ((TO), TYPE_LENGTH (TYPE), val); \ */
/* OBSOLETE } */
/* OBSOLETE extern void i387_to_double (char *, char *); */
/* OBSOLETE  */
/* OBSOLETE /* Convert data from virtual format with type TYPE in buffer FROM */
/* OBSOLETE    to raw format for register REGNUM in buffer TO.  */ */
/* OBSOLETE  */
/* OBSOLETE #undef  REGISTER_CONVERT_TO_RAW */
/* OBSOLETE #define REGISTER_CONVERT_TO_RAW(TYPE,REGNUM,FROM,TO) \ */
/* OBSOLETE { \ */
/* OBSOLETE   double val = extract_floating ((FROM), TYPE_LENGTH (TYPE)); \ */
/* OBSOLETE   double_to_i387((char *)&val, (TO)); \ */
/* OBSOLETE } */
/* OBSOLETE extern void double_to_i387 (char *, char *); */
/* OBSOLETE  */
/* OBSOLETE /* Return the GDB type object for the "standard" data type */
/* OBSOLETE    of data in register N.  */ */
/* OBSOLETE  */
/* OBSOLETE #undef  REGISTER_VIRTUAL_TYPE */
/* OBSOLETE #define REGISTER_VIRTUAL_TYPE(N) \ */
/* OBSOLETE  (((unsigned)((N) - FP0_REGNUM)) < 8 ? builtin_type_double : builtin_type_int) */
/* OBSOLETE  */
/* OBSOLETE /* Extract from an array REGBUF containing the (raw) register state */
/* OBSOLETE    a function return value of type TYPE, and copy that, in virtual format, */
/* OBSOLETE    into VALBUF.  */ */
/* OBSOLETE  */
/* OBSOLETE #undef  EXTRACT_RETURN_VALUE */
/* OBSOLETE #define EXTRACT_RETURN_VALUE(TYPE,REGBUF,VALBUF) \ */
/* OBSOLETE   memcpy (VALBUF, REGBUF + REGISTER_BYTE (TYPE_CODE (TYPE) == TYPE_CODE_FLT ? FP0_REGNUM : 11), TYPE_LENGTH (TYPE)) */
/* OBSOLETE  */
/* OBSOLETE /* Write into appropriate registers a function return value */
/* OBSOLETE    of type TYPE, given in virtual format.  */ */
/* OBSOLETE  */
/* OBSOLETE #undef  STORE_RETURN_VALUE */
/* OBSOLETE #define STORE_RETURN_VALUE(TYPE,VALBUF) \ */
/* OBSOLETE   write_register_bytes (REGISTER_BYTE (TYPE_CODE (TYPE) == TYPE_CODE_FLT ? FP0_REGNUM : 11), VALBUF, TYPE_LENGTH (TYPE)) */
/* OBSOLETE  */
/* OBSOLETE /* Describe the pointer in each stack frame to the previous stack frame */
/* OBSOLETE    (its caller).  */ */
/* OBSOLETE  */
/* OBSOLETE /* FRAME_CHAIN takes a frame's nominal address */
/* OBSOLETE    and produces the frame's chain-pointer. */ */
/* OBSOLETE  */
/* OBSOLETE #undef  FRAME_CHAIN */
/* OBSOLETE #define FRAME_CHAIN(thisframe) \ */
/* OBSOLETE   (!inside_entry_file ((thisframe)->pc) ? \ */
/* OBSOLETE    read_memory_integer ((thisframe)->frame, 4) :\ */
/* OBSOLETE    0) */
/* OBSOLETE  */
/* OBSOLETE /* Define other aspects of the stack frame.  */ */
/* OBSOLETE  */
/* OBSOLETE /* A macro that tells us whether the function invocation represented */
/* OBSOLETE    by FI does not have a frame on the stack associated with it.  If it */
/* OBSOLETE    does not, FRAMELESS is set to 1, else 0.  */ */
/* OBSOLETE  */
/* OBSOLETE #undef  FRAMELESS_FUNCTION_INVOCATION */
/* OBSOLETE #define FRAMELESS_FUNCTION_INVOCATION(FI) \ */
/* OBSOLETE      (frameless_look_for_prologue (FI)) */
/* OBSOLETE  */
/* OBSOLETE #undef  FRAME_SAVED_PC */
/* OBSOLETE #define FRAME_SAVED_PC(FRAME) (read_memory_integer ((FRAME)->frame + 4, 4)) */
/* OBSOLETE  */
/* OBSOLETE /* Insert the specified number of args and function address */
/* OBSOLETE    into a call sequence of the above form stored at DUMMYNAME.  */ */
/* OBSOLETE  */
/* OBSOLETE #undef  FIX_CALL_DUMMY */
/* OBSOLETE #define FIX_CALL_DUMMY(dummyname, pc, fun, nargs, args, type, gcc_p)   \ */
/* OBSOLETE { \ */
/* OBSOLETE 	*(int *)((char *)(dummyname) + 1) = (int)(fun) - (pc) - 5; \ */
/* OBSOLETE } */
/* OBSOLETE  */
/* OBSOLETE #endif /* !defined (TM_SUN386_H) */ */
@


1.5
log
@Obsolete sun386i.
@
text
@@


1.4
log
@Include regcache.h
@
text
@d1 204
a204 204
/* Parameters for a Sun 386i target machine, for GDB, the GNU debugger.
   Copyright 1986, 1987, 1991, 1992, 1993, 1994, 1995, 1999, 2000
   Free Software Foundation, Inc.

   This file is part of GDB.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

#if !defined (TM_SUN386_H)
#define TM_SUN386_H 1

#include "regcache.h"
#include "i386/tm-i386.h"

#ifndef sun386
#define sun386
#endif
#define SUNOS4
#define USE_MACHINE_REG_H

/* Perhaps some day this will work even without the following #define */
#define COFF_ENCAPSULATE

#ifdef COFF_ENCAPSULATE
/* Avoid conflicts between our include files and <sys/exec.h>
   (maybe not needed anymore).  */
#define _EXEC_
#endif

/* sun386 ptrace seems unable to change the frame pointer */
#define PTRACE_FP_BUG

/* Address of end of stack space.  */

#define STACK_END_ADDR 0xfc000000

/* Number of machine registers */

#undef  NUM_REGS
#define NUM_REGS 35

/* Initializer for an array of names of registers.  There should be NUM_REGS
   strings in this initializer.  The order of the first 8 registers must match
   the compiler's numbering scheme (which is the same as the 386 scheme) also,
   this table must match regmap in i386-pinsn.c. */

#undef  REGISTER_NAMES
#define REGISTER_NAMES { "gs", "fs", "es", "ds",		\
			 "edi", "esi", "ebp", "esp",		\
			 "ebx", "edx", "ecx", "eax",		\
			 "retaddr", "trapnum", "errcode", "ip",	\
			 "cs", "ps", "sp", "ss",		\
			 "fst0", "fst1", "fst2", "fst3",	\
			 "fst4", "fst5", "fst6", "fst7",	\
			 "fctrl", "fstat", "ftag", "fip",	\
			 "fcs", "fopoff", "fopsel"		\
			 }

/* Register numbers of various important registers.
   Note that some of these values are "real" register numbers,
   and correspond to the general registers of the machine,
   and some are "phony" register numbers which are too large
   to be actual register numbers as far as the user is concerned
   but do serve to get the desired values when passed to read_register.  */

#undef  FP_REGNUM
#define FP_REGNUM   6		/* (ebp) Contains address of executing stack frame */
#undef  SP_REGNUM
#define SP_REGNUM  18		/* (usp) Contains address of top of stack */
#undef  PS_REGNUM
#define PS_REGNUM  17		/* (ps)  Contains processor status */
#undef  PC_REGNUM
#define PC_REGNUM  15		/* (eip) Contains program counter */
#undef  FP0_REGNUM
#define FP0_REGNUM 20		/* Floating point register 0 */
#undef  FPC_REGNUM
#define FPC_REGNUM 28		/* 80387 control register */

/* Total amount of space needed to store our copies of the machine's
   register state, the array `registers'.  */

#undef  REGISTER_BYTES
#define REGISTER_BYTES (20*4+8*10+7*4)

/* Index within `registers' of the first byte of the space for
   register N.  */

#undef  REGISTER_BYTE
#define REGISTER_BYTE(N) \
 ((N) >= FPC_REGNUM ? (((N) - FPC_REGNUM) * 4) + 160	\
  : (N) >= FP0_REGNUM ? (((N) - FP0_REGNUM) * 10) + 80	\
  : (N) * 4)

/* Number of bytes of storage in the actual machine representation
   for register N.  */

#undef  REGISTER_RAW_SIZE
#define REGISTER_RAW_SIZE(N) (((unsigned)((N) - FP0_REGNUM)) < 8 ? 10 : 4)

/* Number of bytes of storage in the program's representation
   for register N. */

#undef  REGISTER_VIRTUAL_SIZE
#define REGISTER_VIRTUAL_SIZE(N) (((unsigned)((N) - FP0_REGNUM)) < 8 ? 8 : 4)

/* Nonzero if register N requires conversion
   from raw format to virtual format.  */

#undef  REGISTER_CONVERTIBLE
#define REGISTER_CONVERTIBLE(N) (((unsigned)((N) - FP0_REGNUM)) < 8)

/* Convert data from raw format for register REGNUM in buffer FROM
   to virtual format with type TYPE in buffer TO.  */

#undef  REGISTER_CONVERT_TO_VIRTUAL
#define REGISTER_CONVERT_TO_VIRTUAL(REGNUM,TYPE,FROM,TO) \
{ \
  double val; \
  i387_to_double ((FROM), (char *)&val); \
  store_floating ((TO), TYPE_LENGTH (TYPE), val); \
}
extern void i387_to_double (char *, char *);

/* Convert data from virtual format with type TYPE in buffer FROM
   to raw format for register REGNUM in buffer TO.  */

#undef  REGISTER_CONVERT_TO_RAW
#define REGISTER_CONVERT_TO_RAW(TYPE,REGNUM,FROM,TO) \
{ \
  double val = extract_floating ((FROM), TYPE_LENGTH (TYPE)); \
  double_to_i387((char *)&val, (TO)); \
}
extern void double_to_i387 (char *, char *);

/* Return the GDB type object for the "standard" data type
   of data in register N.  */

#undef  REGISTER_VIRTUAL_TYPE
#define REGISTER_VIRTUAL_TYPE(N) \
 (((unsigned)((N) - FP0_REGNUM)) < 8 ? builtin_type_double : builtin_type_int)

/* Extract from an array REGBUF containing the (raw) register state
   a function return value of type TYPE, and copy that, in virtual format,
   into VALBUF.  */

#undef  EXTRACT_RETURN_VALUE
#define EXTRACT_RETURN_VALUE(TYPE,REGBUF,VALBUF) \
  memcpy (VALBUF, REGBUF + REGISTER_BYTE (TYPE_CODE (TYPE) == TYPE_CODE_FLT ? FP0_REGNUM : 11), TYPE_LENGTH (TYPE))

/* Write into appropriate registers a function return value
   of type TYPE, given in virtual format.  */

#undef  STORE_RETURN_VALUE
#define STORE_RETURN_VALUE(TYPE,VALBUF) \
  write_register_bytes (REGISTER_BYTE (TYPE_CODE (TYPE) == TYPE_CODE_FLT ? FP0_REGNUM : 11), VALBUF, TYPE_LENGTH (TYPE))

/* Describe the pointer in each stack frame to the previous stack frame
   (its caller).  */

/* FRAME_CHAIN takes a frame's nominal address
   and produces the frame's chain-pointer. */

#undef  FRAME_CHAIN
#define FRAME_CHAIN(thisframe) \
  (!inside_entry_file ((thisframe)->pc) ? \
   read_memory_integer ((thisframe)->frame, 4) :\
   0)

/* Define other aspects of the stack frame.  */

/* A macro that tells us whether the function invocation represented
   by FI does not have a frame on the stack associated with it.  If it
   does not, FRAMELESS is set to 1, else 0.  */

#undef  FRAMELESS_FUNCTION_INVOCATION
#define FRAMELESS_FUNCTION_INVOCATION(FI) \
     (frameless_look_for_prologue (FI))

#undef  FRAME_SAVED_PC
#define FRAME_SAVED_PC(FRAME) (read_memory_integer ((FRAME)->frame + 4, 4))

/* Insert the specified number of args and function address
   into a call sequence of the above form stored at DUMMYNAME.  */

#undef  FIX_CALL_DUMMY
#define FIX_CALL_DUMMY(dummyname, pc, fun, nargs, args, type, gcc_p)   \
{ \
	*(int *)((char *)(dummyname) + 1) = (int)(fun) - (pc) - 5; \
}

#endif /* !defined (TM_SUN386_H) */
@


1.3
log
@Update/correct copyright notices.
@
text
@d25 1
@


1.2
log
@PARAMS removal.
@
text
@d2 2
a3 1
   Copyright 1986, 1987, 1991, 1992, 1993 Free Software Foundation, Inc.
@


1.1
log
@Initial revision
@
text
@d4 1
a4 1
This file is part of GDB.
d6 14
a19 13
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
a28 1
#define GDB_TARGET_IS_SUN386 1
d78 1
a78 1
#define FP_REGNUM   6	/* (ebp) Contains address of executing stack frame */
d80 1
a80 1
#define SP_REGNUM  18	/* (usp) Contains address of top of stack */
d82 1
a82 1
#define PS_REGNUM  17	/* (ps)  Contains processor status */
d84 1
a84 1
#define PC_REGNUM  15	/* (eip) Contains program counter */
d86 1
a86 1
#define FP0_REGNUM 20	/* Floating point register 0 */
d88 1
a88 1
#define FPC_REGNUM 28	/* 80387 control register */
d133 1
a133 2
extern void
i387_to_double PARAMS ((char *, char *));
d144 1
a144 2
extern void
double_to_i387 PARAMS ((char *, char *));
d187 2
a188 2
#define FRAMELESS_FUNCTION_INVOCATION(FI, FRAMELESS) \
{ (FRAMELESS) = frameless_look_for_prologue (FI); }
a202 1

@


1.1.1.1
log
@Initial creation of sourceware repository
@
text
@@


1.1.1.2
log
@import gdb-1999-05-25 snapshot
@
text
@d189 2
a190 2
#define FRAMELESS_FUNCTION_INVOCATION(FI) \
     (frameless_look_for_prologue (FI))
@


1.1.1.3
log
@import gdb-1999-07-07 post reformat
@
text
@d4 1
a4 1
   This file is part of GDB.
d6 13
a18 14
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */
d78 1
a78 1
#define FP_REGNUM   6		/* (ebp) Contains address of executing stack frame */
d80 1
a80 1
#define SP_REGNUM  18		/* (usp) Contains address of top of stack */
d82 1
a82 1
#define PS_REGNUM  17		/* (ps)  Contains processor status */
d84 1
a84 1
#define PC_REGNUM  15		/* (eip) Contains program counter */
d86 1
a86 1
#define FP0_REGNUM 20		/* Floating point register 0 */
d88 1
a88 1
#define FPC_REGNUM 28		/* 80387 control register */
d205 1
@


1.1.1.4
log
@import gdb-1999-08-30 snapshot
@
text
@d29 1
@


