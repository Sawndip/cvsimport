head	1.6;
access;
symbols
	gdb_5_1_1-2002-01-24-release:1.5
	gdb_5_1_0_1-2002-01-03-release:1.5
	gdb_5_1_0_1-2002-01-03-branchpoint:1.5
	gdb_5_1_0_1-2002-01-03-branch:1.5.0.8
	gdb_5_1-2001-11-21-release:1.5
	gdb_s390-2001-09-26-branch:1.5.0.6
	gdb_s390-2001-09-26-branchpoint:1.5
	gdb_5_1-2001-07-29-branch:1.5.0.4
	gdb_5_1-2001-07-29-branchpoint:1.5
	dberlin-typesystem-branch:1.5.0.2
	dberlin-typesystem-branchpoint:1.5
	gdb-post-ptid_t-2001-05-03:1.5
	gdb-pre-ptid_t-2001-05-03:1.5
	insight-precleanup-2001-01-01:1.2
	gdb-post-protoization-2000-07-29:1.2
	gdb-pre-protoization-2000-07-29:1.2
	gdb-premipsmulti-2000-06-06-branch:1.2.0.2
	gdb-premipsmulti-2000-06-06-branchpoint:1.2
	gdb-post-params-removal-2000-06-04:1.2
	gdb-pre-params-removal-2000-06-04:1.2
	gdb-post-params-removal-2000-05-28:1.2
	gdb-pre-params-removal-2000-05-28:1.1.1.5
	gdb_5_0-2000-05-19-release:1.1.1.5
	gdb_4_18_2-2000-05-18-release:1.1.1.5
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.5
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.5
	gdb_5_0-2000-04-10-branch:1.1.1.5.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1.1.5
	repo-unification-2000-02-06:1.1.1.5
	insight-2000-02-04:1.1.1.5
	gdb-2000-02-04:1.1.1.5
	gdb-2000-02-02:1.1.1.5
	gdb-2000-02-01:1.1.1.5
	gdb-2000-01-31:1.1.1.5
	gdb-2000-01-26:1.1.1.5
	gdb-2000-01-24:1.1.1.5
	gdb-2000-01-17:1.1.1.5
	gdb-2000-01-10:1.1.1.5
	gdb-2000-01-05:1.1.1.5
	gdb-1999-12-21:1.1.1.5
	gdb-1999-12-13:1.1.1.5
	gdb-1999-12-07:1.1.1.5
	gdb-1999-12-06:1.1.1.5
	gdb-1999-11-16:1.1.1.5
	gdb-1999-11-08:1.1.1.5
	gdb-1999-11-01:1.1.1.5
	gdb-1999-10-25:1.1.1.5
	gdb-1999-10-18:1.1.1.5
	gdb-1999-10-11:1.1.1.5
	gdb-1999-10-04:1.1.1.5
	gdb-1999-09-28:1.1.1.5
	gdb-1999-09-21:1.1.1.5
	gdb-1999-09-13:1.1.1.5
	gdb-1999-09-08:1.1.1.5
	gdb-1999-08-30:1.1.1.5
	gdb-1999-08-23:1.1.1.5
	gdb-1999-08-16:1.1.1.5
	gdb-1999-08-09:1.1.1.5
	gdb-1999-08-02:1.1.1.5
	gdb-1999-07-26:1.1.1.5
	gdb-1999-07-19:1.1.1.5
	gdb-1999-07-12:1.1.1.5
	gdb-post-reformat-19990707:1.1.1.5
	gdb-1999-07-07-post-reformat-snapshot:1.1.1.5
	gdb-pre-reformat-19990707:1.1.1.4
	gdb-1999-07-07:1.1.1.4
	gdb-1999-07-05:1.1.1.4
	gdb-1999-06-28:1.1.1.4
	gdb-1999-06-21:1.1.1.4
	gdb-1999-06-14:1.1.1.4
	gdb-1999-06-07:1.1.1.4
	gdb-1999-06-01:1.1.1.3
	gdb-4_18-branch:1.1.1.1.0.2
	gdb-4_18-release:1.1.1.1
	gdb-1999-05-25:1.1.1.3
	gdb-1999-05-19:1.1.1.2
	gdb-1999-05-10:1.1.1.2
	gdb-19990504:1.1.1.2
	gdb-19990422:1.1.1.1
	SNAPSHOT:1.1.1
	gdb-4_18:1.1.1.1
	GDB_4_18:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.6
date	2001.12.01.22.02.03;	author cagney;	state dead;
branches;
next	1.5;

1.5
date	2001.04.02.20.57.26;	author cagney;	state Exp;
branches;
next	1.4;

1.4
date	2001.03.14.23.23.13;	author cagney;	state Exp;
branches;
next	1.3;

1.3
date	2001.03.06.08.21.33;	author kevinb;	state Exp;
branches;
next	1.2;

1.2
date	2000.05.28.01.12.37;	author kevinb;	state Exp;
branches;
next	1.1;

1.1
date	99.04.16.01.34.24;	author shebs;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.16.01.34.24;	author shebs;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.05.05.14.43.41;	author shebs;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	99.05.25.18.05.17;	author jsm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	99.06.07.19.18.28;	author jsm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	99.07.07.20.16.05;	author jsm;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Zap all but ns32k-netbsd NS32k targets and hosts.
@
text
@/* OBSOLETE /* Definitions to target GDB to a merlin under utek 2.1 */
/* OBSOLETE    Copyright 1986, 1987, 1989, 1991, 1993, 1994, 1998, 1999, 2000 */
/* OBSOLETE    Free Software Foundation, Inc. */
/* OBSOLETE  */
/* OBSOLETE    This file is part of GDB. */
/* OBSOLETE  */
/* OBSOLETE    This program is free software; you can redistribute it and/or modify */
/* OBSOLETE    it under the terms of the GNU General Public License as published by */
/* OBSOLETE    the Free Software Foundation; either version 2 of the License, or */
/* OBSOLETE    (at your option) any later version. */
/* OBSOLETE  */
/* OBSOLETE    This program is distributed in the hope that it will be useful, */
/* OBSOLETE    but WITHOUT ANY WARRANTY; without even the implied warranty of */
/* OBSOLETE    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the */
/* OBSOLETE    GNU General Public License for more details. */
/* OBSOLETE  */
/* OBSOLETE    You should have received a copy of the GNU General Public License */
/* OBSOLETE    along with this program; if not, write to the Free Software */
/* OBSOLETE    Foundation, Inc., 59 Temple Place - Suite 330, */
/* OBSOLETE    Boston, MA 02111-1307, USA.  */ */
/* OBSOLETE  */
/* OBSOLETE #include "regcache.h" */
/* OBSOLETE  */
/* OBSOLETE #define TARGET_BYTE_ORDER LITTLE_ENDIAN */
/* OBSOLETE  */
/* OBSOLETE /* Offset from address of function to start of its code. */
/* OBSOLETE    Zero on most machines.  */ */
/* OBSOLETE  */
/* OBSOLETE #define FUNCTION_START_OFFSET 0 */
/* OBSOLETE  */
/* OBSOLETE /* Advance PC across any function entry prologue instructions */
/* OBSOLETE    to reach some "real" code.  */ */
/* OBSOLETE  */
/* OBSOLETE extern CORE_ADDR merlin_skip_prologue (CORE_ADDR); */
/* OBSOLETE #define SKIP_PROLOGUE(pc) (merlin_skip_prologue (pc)) */
/* OBSOLETE  */
/* OBSOLETE /* Immediately after a function call, return the saved pc. */
/* OBSOLETE    Can't always go through the frames for this because on some machines */
/* OBSOLETE    the new frame is not set up until the new function executes */
/* OBSOLETE    some instructions.  */ */
/* OBSOLETE  */
/* OBSOLETE #define SAVED_PC_AFTER_CALL(frame) \ */
/* OBSOLETE 	read_memory_integer (read_register (SP_REGNUM), 4) */
/* OBSOLETE  */
/* OBSOLETE /* Address of end of stack space.  */ */
/* OBSOLETE  */
/* OBSOLETE #define STACK_END_ADDR (0x800000) */
/* OBSOLETE  */
/* OBSOLETE /* Stack grows downward.  */ */
/* OBSOLETE  */
/* OBSOLETE #define INNER_THAN(lhs,rhs) ((lhs) < (rhs)) */
/* OBSOLETE  */
/* OBSOLETE /* Sequence of bytes for breakpoint instruction.  */ */
/* OBSOLETE  */
/* OBSOLETE #define BREAKPOINT {0xf2} */
/* OBSOLETE  */
/* OBSOLETE /* Amount PC must be decremented by after a breakpoint. */
/* OBSOLETE    This is often the number of bytes in BREAKPOINT */
/* OBSOLETE    but not always.  */ */
/* OBSOLETE  */
/* OBSOLETE #define DECR_PC_AFTER_BREAK 0 */
/* OBSOLETE  */
/* OBSOLETE /* Define this to say that the "svc" insn is followed by */
/* OBSOLETE    codes in memory saying which kind of system call it is.  */ */
/* OBSOLETE  */
/* OBSOLETE #define NS32K_SVC_IMMED_OPERANDS */
/* OBSOLETE  */
/* OBSOLETE /* Say how long (ordinary) registers are.  This is a piece of bogosity */
/* OBSOLETE    used in push_word and a few other places; REGISTER_RAW_SIZE is the */
/* OBSOLETE    real way to know how big a register is.  */ */
/* OBSOLETE  */
/* OBSOLETE #define REGISTER_SIZE 4 */
/* OBSOLETE  */
/* OBSOLETE /* Number of machine registers */ */
/* OBSOLETE  */
/* OBSOLETE #define NUM_REGS		25 */
/* OBSOLETE  */
/* OBSOLETE #define NUM_GENERAL_REGS	8 */
/* OBSOLETE  */
/* OBSOLETE /* Initializer for an array of names of registers. */
/* OBSOLETE    There should be NUM_REGS strings in this initializer.  */ */
/* OBSOLETE  */
/* OBSOLETE #define REGISTER_NAMES {"r0", "r1", "r2", "r3", "r4", "r5", "r6", "r7",	\ */
/* OBSOLETE 			"pc", "sp", "fp", "ps",				\ */
/* OBSOLETE  			"fsr",						\ */
/* OBSOLETE  			"f0", "f1", "f2", "f3", "f4", "f5", "f6", "f7",	\ */
/* OBSOLETE 			"l0", "l1", "l2", "l3", "l4",			\ */
/* OBSOLETE  			} */
/* OBSOLETE  */
/* OBSOLETE /* Register numbers of various important registers. */
/* OBSOLETE    Note that some of these values are "real" register numbers, */
/* OBSOLETE    and correspond to the general registers of the machine, */
/* OBSOLETE    and some are "phony" register numbers which are too large */
/* OBSOLETE    to be actual register numbers as far as the user is concerned */
/* OBSOLETE    but do serve to get the desired values when passed to read_register.  */ */
/* OBSOLETE  */
/* OBSOLETE #define AP_REGNUM FP_REGNUM */
/* OBSOLETE #define FP_REGNUM 10		/* Contains address of executing stack frame */ */
/* OBSOLETE #define SP_REGNUM 9		/* Contains address of top of stack */ */
/* OBSOLETE #define PC_REGNUM 8		/* Contains program counter */ */
/* OBSOLETE #define PS_REGNUM 11		/* Contains processor status */ */
/* OBSOLETE #define FPS_REGNUM 12		/* Floating point status register */ */
/* OBSOLETE #define FP0_REGNUM 13		/* Floating point register 0 */ */
/* OBSOLETE #define LP0_REGNUM 21		/* Double register 0 (same as FP0) */ */
/* OBSOLETE  */
/* OBSOLETE /* Total amount of space needed to store our copies of the machine's */
/* OBSOLETE    register state, the array `registers'.  */ */
/* OBSOLETE #define REGISTER_BYTES ((NUM_REGS - 4) * sizeof (int) + 4 * sizeof (double)) */
/* OBSOLETE  */
/* OBSOLETE /* Index within `registers' of the first byte of the space for */
/* OBSOLETE    register N.  */ */
/* OBSOLETE  */
/* OBSOLETE #define REGISTER_BYTE(N) ((N) >= LP0_REGNUM ? \ */
/* OBSOLETE 	LP0_REGNUM * 4 + ((N) - LP0_REGNUM) * 8 : (N) * 4) */
/* OBSOLETE  */
/* OBSOLETE /* Number of bytes of storage in the actual machine representation */
/* OBSOLETE    for register N.  On the 32000, all regs are 4 bytes */
/* OBSOLETE    except for the doubled floating registers. */ */
/* OBSOLETE  */
/* OBSOLETE #define REGISTER_RAW_SIZE(N) ((N) >= LP0_REGNUM ? 8 : 4) */
/* OBSOLETE  */
/* OBSOLETE /* Number of bytes of storage in the program's representation */
/* OBSOLETE    for register N.  On the 32000, all regs are 4 bytes */
/* OBSOLETE    except for the doubled floating registers. */ */
/* OBSOLETE  */
/* OBSOLETE #define REGISTER_VIRTUAL_SIZE(N) ((N) >= LP0_REGNUM ? 8 : 4) */
/* OBSOLETE  */
/* OBSOLETE /* Largest value REGISTER_RAW_SIZE can have.  */ */
/* OBSOLETE  */
/* OBSOLETE #define MAX_REGISTER_RAW_SIZE 8 */
/* OBSOLETE  */
/* OBSOLETE /* Largest value REGISTER_VIRTUAL_SIZE can have.  */ */
/* OBSOLETE  */
/* OBSOLETE #define MAX_REGISTER_VIRTUAL_SIZE 8 */
/* OBSOLETE  */
/* OBSOLETE /* Return the GDB type object for the "standard" data type */
/* OBSOLETE    of data in register N.  */ */
/* OBSOLETE  */
/* OBSOLETE #define REGISTER_VIRTUAL_TYPE(N) \ */
/* OBSOLETE   ((N) >= FP0_REGNUM ?		\ */
/* OBSOLETE     ((N) >= LP0_REGNUM ?	\ */
/* OBSOLETE      builtin_type_double	\ */
/* OBSOLETE      : builtin_type_float)	\ */
/* OBSOLETE    : builtin_type_int) */
/* OBSOLETE  */
/* OBSOLETE /* Store the address of the place in which to copy the structure the */
/* OBSOLETE    subroutine will return.  This is called from call_function. */
/* OBSOLETE  */
/* OBSOLETE    On this machine this is a no-op, as gcc doesn't run on it yet. */
/* OBSOLETE    This calling convention is not used. */ */
/* OBSOLETE  */
/* OBSOLETE #define STORE_STRUCT_RETURN(ADDR, SP) */
/* OBSOLETE  */
/* OBSOLETE /* Extract from an array REGBUF containing the (raw) register state */
/* OBSOLETE    a function return value of type TYPE, and copy that, in virtual format, */
/* OBSOLETE    into VALBUF.  */ */
/* OBSOLETE  */
/* OBSOLETE #define EXTRACT_RETURN_VALUE(TYPE,REGBUF,VALBUF) \ */
/* OBSOLETE   memcpy (VALBUF, REGBUF, TYPE_LENGTH (TYPE)) */
/* OBSOLETE  */
/* OBSOLETE /* Write into appropriate registers a function return value */
/* OBSOLETE    of type TYPE, given in virtual format.  */ */
/* OBSOLETE  */
/* OBSOLETE #define STORE_RETURN_VALUE(TYPE,VALBUF) \ */
/* OBSOLETE   write_register_bytes (0, VALBUF, TYPE_LENGTH (TYPE)) */
/* OBSOLETE  */
/* OBSOLETE /* Extract from an array REGBUF containing the (raw) register state */
/* OBSOLETE    the address in which a function should return its structure value, */
/* OBSOLETE    as a CORE_ADDR (or an expression that can be used as one).  */ */
/* OBSOLETE  */
/* OBSOLETE #define EXTRACT_STRUCT_VALUE_ADDRESS(REGBUF) (*(int *)(REGBUF)) */
/* OBSOLETE  */
/* OBSOLETE /* Describe the pointer in each stack frame to the previous stack frame */
/* OBSOLETE    (its caller).  */ */
/* OBSOLETE  */
/* OBSOLETE /* FRAME_CHAIN takes a frame's nominal address */
/* OBSOLETE    and produces the frame's chain-pointer. */ */
/* OBSOLETE  */
/* OBSOLETE /* In the case of the Merlin, the frame's nominal address is the FP value, */
/* OBSOLETE    and at that address is saved previous FP value as a 4-byte word.  */ */
/* OBSOLETE  */
/* OBSOLETE #define FRAME_CHAIN(thisframe)  \ */
/* OBSOLETE   (!inside_entry_file ((thisframe)->pc) ? \ */
/* OBSOLETE    read_memory_integer ((thisframe)->frame, 4) :\ */
/* OBSOLETE    0) */
/* OBSOLETE  */
/* OBSOLETE /* Define other aspects of the stack frame.  */ */
/* OBSOLETE  */
/* OBSOLETE #define FRAME_SAVED_PC(FRAME) (read_memory_integer ((FRAME)->frame + 4, 4)) */
/* OBSOLETE  */
/* OBSOLETE /* compute base of arguments */ */
/* OBSOLETE #define FRAME_ARGS_ADDRESS(fi) ((fi)->frame) */
/* OBSOLETE  */
/* OBSOLETE #define FRAME_LOCALS_ADDRESS(fi) ((fi)->frame) */
/* OBSOLETE  */
/* OBSOLETE /* Return number of args passed to a frame. */
/* OBSOLETE    Can return -1, meaning no way to tell.  */ */
/* OBSOLETE  */
/* OBSOLETE extern int merlin_frame_num_args (struct frame_info *fi); */
/* OBSOLETE #define FRAME_NUM_ARGS(fi) (merlin_frame_num_args ((fi))) */
/* OBSOLETE  */
/* OBSOLETE /* Return number of bytes at start of arglist that are not really args.  */ */
/* OBSOLETE  */
/* OBSOLETE #define FRAME_ARGS_SKIP 8 */
/* OBSOLETE  */
/* OBSOLETE /* Put here the code to store, into a struct frame_saved_regs, */
/* OBSOLETE    the addresses of the saved registers of frame described by FRAME_INFO. */
/* OBSOLETE    This includes special registers such as pc and fp saved in special */
/* OBSOLETE    ways in the stack frame.  sp is even more special: */
/* OBSOLETE    the address we return for it IS the sp for the next frame.  */ */
/* OBSOLETE  */
/* OBSOLETE #define FRAME_FIND_SAVED_REGS(frame_info, frame_saved_regs) \ */
/* OBSOLETE { int regmask,regnum;						\ */
/* OBSOLETE   int localcount;						\ */
/* OBSOLETE   CORE_ADDR enter_addr;						\ */
/* OBSOLETE   CORE_ADDR next_addr;						\ */
/* OBSOLETE 								\ */
/* OBSOLETE   enter_addr = get_pc_function_start ((frame_info)->pc);	\ */
/* OBSOLETE   regmask = read_memory_integer (enter_addr+1, 1);		\ */
/* OBSOLETE   localcount = ns32k_localcount (enter_addr);			\ */
/* OBSOLETE   next_addr = (frame_info)->frame + localcount;			\ */
/* OBSOLETE   for (regnum = 0; regnum < 8; regnum++, regmask >>= 1)		\ */
/* OBSOLETE     (frame_saved_regs).regs[regnum]				\ */
/* OBSOLETE       = (regmask & 1) ? (next_addr -= 4) : 0;			\ */
/* OBSOLETE   (frame_saved_regs).regs[SP_REGNUM] = (frame_info)->frame + 4;	\ */
/* OBSOLETE   (frame_saved_regs).regs[PC_REGNUM] = (frame_info)->frame + 4;	\ */
/* OBSOLETE   (frame_saved_regs).regs[FP_REGNUM]				\ */
/* OBSOLETE      = read_memory_integer ((frame_info)->frame, 4); } */
/* OBSOLETE  */
/* OBSOLETE  */
/* OBSOLETE /* Things needed for making the inferior call functions.  */ */
/* OBSOLETE  */
/* OBSOLETE /* Push an empty stack frame, to record the current PC, etc.  */ */
/* OBSOLETE  */
/* OBSOLETE #define PUSH_DUMMY_FRAME \ */
/* OBSOLETE { register CORE_ADDR sp = read_register (SP_REGNUM);	\ */
/* OBSOLETE   register int regnum;					\ */
/* OBSOLETE   sp = push_word (sp, read_register (PC_REGNUM));	\ */
/* OBSOLETE   sp = push_word (sp, read_register (FP_REGNUM));	\ */
/* OBSOLETE   write_register (FP_REGNUM, sp);			\ */
/* OBSOLETE   for (regnum = 0; regnum < 8; regnum++)  		\ */
/* OBSOLETE     sp = push_word (sp, read_register (regnum));	\ */
/* OBSOLETE   write_register (SP_REGNUM, sp);  			\ */
/* OBSOLETE } */
/* OBSOLETE  */
/* OBSOLETE /* Discard from the stack the innermost frame, restoring all registers.  */ */
/* OBSOLETE  */
/* OBSOLETE #define POP_FRAME  \ */
/* OBSOLETE { register struct frame_info *frame = get_current_frame ();	 \ */
/* OBSOLETE   register CORE_ADDR fp;					 \ */
/* OBSOLETE   register int regnum;						 \ */
/* OBSOLETE   struct frame_saved_regs fsr;					 \ */
/* OBSOLETE   struct frame_info *fi;						 \ */
/* OBSOLETE   fp = frame->frame;						 \ */
/* OBSOLETE   get_frame_saved_regs (frame, &fsr);				 \ */
/* OBSOLETE   for (regnum = 0; regnum < 8; regnum++)			 \ */
/* OBSOLETE     if (fsr.regs[regnum])					 \ */
/* OBSOLETE       write_register (regnum, read_memory_integer (fsr.regs[regnum], 4)); \ */
/* OBSOLETE   write_register (FP_REGNUM, read_memory_integer (fp, 4));	 \ */
/* OBSOLETE   write_register (PC_REGNUM, read_memory_integer (fp + 4, 4));   \ */
/* OBSOLETE   write_register (SP_REGNUM, fp + 8);				 \ */
/* OBSOLETE   flush_cached_frames ();					 \ */
/* OBSOLETE } */
/* OBSOLETE  */
/* OBSOLETE /* This sequence of words is the instructions */
/* OBSOLETE    enter        0xff,0          82 ff 00 */
/* OBSOLETE    jsr  @@0x00010203     7f ae c0 01 02 03 */
/* OBSOLETE    adjspd       0x69696969      7f a5 01 02 03 04 */
/* OBSOLETE    bpt                  f2 */
/* OBSOLETE    Note this is 16 bytes.  */ */
/* OBSOLETE  */
/* OBSOLETE #define CALL_DUMMY { 0x7f00ff82, 0x0201c0ae, 0x01a57f03, 0xf2040302 } */
/* OBSOLETE  */
/* OBSOLETE #define CALL_DUMMY_START_OFFSET	3 */
/* OBSOLETE #define CALL_DUMMY_LENGTH	16 */
/* OBSOLETE #define CALL_DUMMY_ADDR		5 */
/* OBSOLETE #define CALL_DUMMY_NARGS	11 */
/* OBSOLETE  */
/* OBSOLETE /* Insert the specified number of args and function address */
/* OBSOLETE    into a call sequence of the above form stored at DUMMYNAME.  */ */
/* OBSOLETE  */
/* OBSOLETE #define FIX_CALL_DUMMY(dummyname, pc, fun, nargs, args, type, gcc_p)   		\ */
/* OBSOLETE { int flipped = fun | 0xc0000000;				\ */
/* OBSOLETE   flip_bytes (&flipped, 4);					\ */
/* OBSOLETE   *((int *) (((char *) dummyname)+CALL_DUMMY_ADDR)) = flipped;	\ */
/* OBSOLETE   flipped = - nargs * 4;					\ */
/* OBSOLETE   flip_bytes (&flipped, 4);					\ */
/* OBSOLETE   *((int *) (((char *) dummyname)+CALL_DUMMY_NARGS)) = flipped;	\ */
/* OBSOLETE } */
@


1.5
log
@Obsolete ns32k-*-mach3*, ns32k-umax-*, ns32k-utek-sysv* and
ns32k-utek-*.
@
text
@@


1.4
log
@Include regcache.h
@
text
@d1 289
a289 289
/* Definitions to target GDB to a merlin under utek 2.1
   Copyright 1986, 1987, 1989, 1991, 1993, 1994, 1998, 1999, 2000
   Free Software Foundation, Inc.

   This file is part of GDB.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

#include "regcache.h"

#define TARGET_BYTE_ORDER LITTLE_ENDIAN

/* Offset from address of function to start of its code.
   Zero on most machines.  */

#define FUNCTION_START_OFFSET 0

/* Advance PC across any function entry prologue instructions
   to reach some "real" code.  */

extern CORE_ADDR merlin_skip_prologue (CORE_ADDR);
#define SKIP_PROLOGUE(pc) (merlin_skip_prologue (pc))

/* Immediately after a function call, return the saved pc.
   Can't always go through the frames for this because on some machines
   the new frame is not set up until the new function executes
   some instructions.  */

#define SAVED_PC_AFTER_CALL(frame) \
	read_memory_integer (read_register (SP_REGNUM), 4)

/* Address of end of stack space.  */

#define STACK_END_ADDR (0x800000)

/* Stack grows downward.  */

#define INNER_THAN(lhs,rhs) ((lhs) < (rhs))

/* Sequence of bytes for breakpoint instruction.  */

#define BREAKPOINT {0xf2}

/* Amount PC must be decremented by after a breakpoint.
   This is often the number of bytes in BREAKPOINT
   but not always.  */

#define DECR_PC_AFTER_BREAK 0

/* Define this to say that the "svc" insn is followed by
   codes in memory saying which kind of system call it is.  */

#define NS32K_SVC_IMMED_OPERANDS

/* Say how long (ordinary) registers are.  This is a piece of bogosity
   used in push_word and a few other places; REGISTER_RAW_SIZE is the
   real way to know how big a register is.  */

#define REGISTER_SIZE 4

/* Number of machine registers */

#define NUM_REGS		25

#define NUM_GENERAL_REGS	8

/* Initializer for an array of names of registers.
   There should be NUM_REGS strings in this initializer.  */

#define REGISTER_NAMES {"r0", "r1", "r2", "r3", "r4", "r5", "r6", "r7",	\
			"pc", "sp", "fp", "ps",				\
 			"fsr",						\
 			"f0", "f1", "f2", "f3", "f4", "f5", "f6", "f7",	\
			"l0", "l1", "l2", "l3", "l4",			\
 			}

/* Register numbers of various important registers.
   Note that some of these values are "real" register numbers,
   and correspond to the general registers of the machine,
   and some are "phony" register numbers which are too large
   to be actual register numbers as far as the user is concerned
   but do serve to get the desired values when passed to read_register.  */

#define AP_REGNUM FP_REGNUM
#define FP_REGNUM 10		/* Contains address of executing stack frame */
#define SP_REGNUM 9		/* Contains address of top of stack */
#define PC_REGNUM 8		/* Contains program counter */
#define PS_REGNUM 11		/* Contains processor status */
#define FPS_REGNUM 12		/* Floating point status register */
#define FP0_REGNUM 13		/* Floating point register 0 */
#define LP0_REGNUM 21		/* Double register 0 (same as FP0) */

/* Total amount of space needed to store our copies of the machine's
   register state, the array `registers'.  */
#define REGISTER_BYTES ((NUM_REGS - 4) * sizeof (int) + 4 * sizeof (double))

/* Index within `registers' of the first byte of the space for
   register N.  */

#define REGISTER_BYTE(N) ((N) >= LP0_REGNUM ? \
	LP0_REGNUM * 4 + ((N) - LP0_REGNUM) * 8 : (N) * 4)

/* Number of bytes of storage in the actual machine representation
   for register N.  On the 32000, all regs are 4 bytes
   except for the doubled floating registers. */

#define REGISTER_RAW_SIZE(N) ((N) >= LP0_REGNUM ? 8 : 4)

/* Number of bytes of storage in the program's representation
   for register N.  On the 32000, all regs are 4 bytes
   except for the doubled floating registers. */

#define REGISTER_VIRTUAL_SIZE(N) ((N) >= LP0_REGNUM ? 8 : 4)

/* Largest value REGISTER_RAW_SIZE can have.  */

#define MAX_REGISTER_RAW_SIZE 8

/* Largest value REGISTER_VIRTUAL_SIZE can have.  */

#define MAX_REGISTER_VIRTUAL_SIZE 8

/* Return the GDB type object for the "standard" data type
   of data in register N.  */

#define REGISTER_VIRTUAL_TYPE(N) \
  ((N) >= FP0_REGNUM ?		\
    ((N) >= LP0_REGNUM ?	\
     builtin_type_double	\
     : builtin_type_float)	\
   : builtin_type_int)

/* Store the address of the place in which to copy the structure the
   subroutine will return.  This is called from call_function.

   On this machine this is a no-op, as gcc doesn't run on it yet.
   This calling convention is not used. */

#define STORE_STRUCT_RETURN(ADDR, SP)

/* Extract from an array REGBUF containing the (raw) register state
   a function return value of type TYPE, and copy that, in virtual format,
   into VALBUF.  */

#define EXTRACT_RETURN_VALUE(TYPE,REGBUF,VALBUF) \
  memcpy (VALBUF, REGBUF, TYPE_LENGTH (TYPE))

/* Write into appropriate registers a function return value
   of type TYPE, given in virtual format.  */

#define STORE_RETURN_VALUE(TYPE,VALBUF) \
  write_register_bytes (0, VALBUF, TYPE_LENGTH (TYPE))

/* Extract from an array REGBUF containing the (raw) register state
   the address in which a function should return its structure value,
   as a CORE_ADDR (or an expression that can be used as one).  */

#define EXTRACT_STRUCT_VALUE_ADDRESS(REGBUF) (*(int *)(REGBUF))

/* Describe the pointer in each stack frame to the previous stack frame
   (its caller).  */

/* FRAME_CHAIN takes a frame's nominal address
   and produces the frame's chain-pointer. */

/* In the case of the Merlin, the frame's nominal address is the FP value,
   and at that address is saved previous FP value as a 4-byte word.  */

#define FRAME_CHAIN(thisframe)  \
  (!inside_entry_file ((thisframe)->pc) ? \
   read_memory_integer ((thisframe)->frame, 4) :\
   0)

/* Define other aspects of the stack frame.  */

#define FRAME_SAVED_PC(FRAME) (read_memory_integer ((FRAME)->frame + 4, 4))

/* compute base of arguments */
#define FRAME_ARGS_ADDRESS(fi) ((fi)->frame)

#define FRAME_LOCALS_ADDRESS(fi) ((fi)->frame)

/* Return number of args passed to a frame.
   Can return -1, meaning no way to tell.  */

extern int merlin_frame_num_args (struct frame_info *fi);
#define FRAME_NUM_ARGS(fi) (merlin_frame_num_args ((fi)))

/* Return number of bytes at start of arglist that are not really args.  */

#define FRAME_ARGS_SKIP 8

/* Put here the code to store, into a struct frame_saved_regs,
   the addresses of the saved registers of frame described by FRAME_INFO.
   This includes special registers such as pc and fp saved in special
   ways in the stack frame.  sp is even more special:
   the address we return for it IS the sp for the next frame.  */

#define FRAME_FIND_SAVED_REGS(frame_info, frame_saved_regs) \
{ int regmask,regnum;						\
  int localcount;						\
  CORE_ADDR enter_addr;						\
  CORE_ADDR next_addr;						\
								\
  enter_addr = get_pc_function_start ((frame_info)->pc);	\
  regmask = read_memory_integer (enter_addr+1, 1);		\
  localcount = ns32k_localcount (enter_addr);			\
  next_addr = (frame_info)->frame + localcount;			\
  for (regnum = 0; regnum < 8; regnum++, regmask >>= 1)		\
    (frame_saved_regs).regs[regnum]				\
      = (regmask & 1) ? (next_addr -= 4) : 0;			\
  (frame_saved_regs).regs[SP_REGNUM] = (frame_info)->frame + 4;	\
  (frame_saved_regs).regs[PC_REGNUM] = (frame_info)->frame + 4;	\
  (frame_saved_regs).regs[FP_REGNUM]				\
     = read_memory_integer ((frame_info)->frame, 4); }


/* Things needed for making the inferior call functions.  */

/* Push an empty stack frame, to record the current PC, etc.  */

#define PUSH_DUMMY_FRAME \
{ register CORE_ADDR sp = read_register (SP_REGNUM);	\
  register int regnum;					\
  sp = push_word (sp, read_register (PC_REGNUM));	\
  sp = push_word (sp, read_register (FP_REGNUM));	\
  write_register (FP_REGNUM, sp);			\
  for (regnum = 0; regnum < 8; regnum++)  		\
    sp = push_word (sp, read_register (regnum));	\
  write_register (SP_REGNUM, sp);  			\
}

/* Discard from the stack the innermost frame, restoring all registers.  */

#define POP_FRAME  \
{ register struct frame_info *frame = get_current_frame ();	 \
  register CORE_ADDR fp;					 \
  register int regnum;						 \
  struct frame_saved_regs fsr;					 \
  struct frame_info *fi;						 \
  fp = frame->frame;						 \
  get_frame_saved_regs (frame, &fsr);				 \
  for (regnum = 0; regnum < 8; regnum++)			 \
    if (fsr.regs[regnum])					 \
      write_register (regnum, read_memory_integer (fsr.regs[regnum], 4)); \
  write_register (FP_REGNUM, read_memory_integer (fp, 4));	 \
  write_register (PC_REGNUM, read_memory_integer (fp + 4, 4));   \
  write_register (SP_REGNUM, fp + 8);				 \
  flush_cached_frames ();					 \
}

/* This sequence of words is the instructions
   enter        0xff,0          82 ff 00
   jsr  @@0x00010203     7f ae c0 01 02 03
   adjspd       0x69696969      7f a5 01 02 03 04
   bpt                  f2
   Note this is 16 bytes.  */

#define CALL_DUMMY { 0x7f00ff82, 0x0201c0ae, 0x01a57f03, 0xf2040302 }

#define CALL_DUMMY_START_OFFSET	3
#define CALL_DUMMY_LENGTH	16
#define CALL_DUMMY_ADDR		5
#define CALL_DUMMY_NARGS	11

/* Insert the specified number of args and function address
   into a call sequence of the above form stored at DUMMYNAME.  */

#define FIX_CALL_DUMMY(dummyname, pc, fun, nargs, args, type, gcc_p)   		\
{ int flipped = fun | 0xc0000000;				\
  flip_bytes (&flipped, 4);					\
  *((int *) (((char *) dummyname)+CALL_DUMMY_ADDR)) = flipped;	\
  flipped = - nargs * 4;					\
  flip_bytes (&flipped, 4);					\
  *((int *) (((char *) dummyname)+CALL_DUMMY_NARGS)) = flipped;	\
}
@


1.3
log
@Update/correct copyright notices.
@
text
@d22 2
@


1.2
log
@PARAMS removal.
@
text
@d2 2
a3 1
   Copyright 1986, 1987, 1989, 1991, 1993 Free Software Foundation, Inc.
@


1.1
log
@Initial revision
@
text
@d4 1
a4 1
This file is part of GDB.
d6 14
a19 13
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
d31 2
a32 8
#define SKIP_PROLOGUE(pc)   				\
{ register int op = read_memory_integer (pc, 1);	\
  if (op == 0x82)					\
    { op = read_memory_integer (pc+2,1);		\
      if ((op & 0x80) == 0) pc += 3;			\
      else if ((op & 0xc0) == 0x80) pc += 4;		\
      else pc += 6;					\
    }}
d141 1
a141 1
   : builtin_type_int)	
d196 2
a197 24
#define FRAME_NUM_ARGS(numargs, fi)			\
{ CORE_ADDR pc;						\
  int insn;						\
  int addr_mode;					\
  int width;						\
							\
  pc = FRAME_SAVED_PC (fi);				\
  insn = read_memory_integer (pc,2);			\
  addr_mode = (insn >> 11) & 0x1f;			\
  insn = insn & 0x7ff;					\
  if ((insn & 0x7fc) == 0x57c				\
      && addr_mode == 0x14) /* immediate */		\
    { if (insn == 0x57c) /* adjspb */			\
	width = 1;					\
      else if (insn == 0x57d) /* adjspw */		\
	width = 2;					\
      else if (insn == 0x57f) /* adjspd */		\
	width = 4;					\
      numargs = read_memory_integer (pc+2,width);	\
      if (width > 1)					\
	flip_bytes (&numargs, width);			\
      numargs = - sign_extend (numargs, width*8) / 4; }	\
  else numargs = -1;					\
}
d226 1
a227 1

d263 4
a266 4
     enter	0xff,0		82 ff 00
     jsr	@@0x00010203	7f ae c0 01 02 03
     adjspd	0x69696969	7f a5 01 02 03 04
     bpt			f2
@


1.1.1.1
log
@Initial creation of sourceware repository
@
text
@@


1.1.1.2
log
@import gdb-19990504 snapshot
@
text
@d30 8
a37 2
extern CORE_ADDR merlin_skip_prologue PARAMS ((CORE_ADDR));
#define SKIP_PROLOGUE(pc) (merlin_skip_prologue (pc))
@


1.1.1.3
log
@import gdb-1999-05-25 snapshot
@
text
@d195 24
a218 2
extern int merlin_frame_num_args PARAMS ((struct frame_info *fi));
#define FRAME_NUM_ARGS (merlin_frame_num_args ((fi)))
@


1.1.1.4
log
@import gdb-1999-06-07 snapshot
@
text
@d196 1
a196 1
#define FRAME_NUM_ARGS(fi) (merlin_frame_num_args ((fi)))
@


1.1.1.5
log
@import gdb-1999-07-07 post reformat
@
text
@d4 1
a4 1
   This file is part of GDB.
d6 13
a18 14
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */
d140 1
a140 1
   : builtin_type_int)
d195 1
a195 1
extern int merlin_frame_num_args PARAMS ((struct frame_info * fi));
d225 1
a226 1

d262 4
a265 4
   enter        0xff,0          82 ff 00
   jsr  @@0x00010203     7f ae c0 01 02 03
   adjspd       0x69696969      7f a5 01 02 03 04
   bpt                  f2
@

