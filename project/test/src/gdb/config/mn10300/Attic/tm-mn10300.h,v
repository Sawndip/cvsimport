head	1.14;
access;
symbols
	gdb_5_1_1-2002-01-24-release:1.10
	gdb_5_1_0_1-2002-01-03-release:1.10
	gdb_5_1_0_1-2002-01-03-branchpoint:1.10
	gdb_5_1_0_1-2002-01-03-branch:1.10.0.8
	gdb_5_1-2001-11-21-release:1.10
	gdb_s390-2001-09-26-branch:1.10.0.6
	gdb_s390-2001-09-26-branchpoint:1.10
	gdb_5_1-2001-07-29-branch:1.10.0.4
	gdb_5_1-2001-07-29-branchpoint:1.10
	dberlin-typesystem-branch:1.10.0.2
	dberlin-typesystem-branchpoint:1.10
	gdb-post-ptid_t-2001-05-03:1.6
	gdb-pre-ptid_t-2001-05-03:1.6
	insight-precleanup-2001-01-01:1.4
	gdb-post-protoization-2000-07-29:1.2
	gdb-pre-protoization-2000-07-29:1.2
	gdb-premipsmulti-2000-06-06-branch:1.2.0.2
	gdb-premipsmulti-2000-06-06-branchpoint:1.2
	gdb-post-params-removal-2000-06-04:1.2
	gdb-pre-params-removal-2000-06-04:1.2
	gdb-post-params-removal-2000-05-28:1.2
	gdb-pre-params-removal-2000-05-28:1.1.1.11
	gdb_5_0-2000-05-19-release:1.1.1.11
	gdb_4_18_2-2000-05-18-release:1.1.1.11
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.11
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.11
	gdb_5_0-2000-04-10-branch:1.1.1.11.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1.1.11
	repo-unification-2000-02-06:1.1.1.11
	insight-2000-02-04:1.1.1.11
	gdb-2000-02-04:1.1.1.11
	gdb-2000-02-02:1.1.1.11
	gdb-2000-02-01:1.1.1.11
	gdb-2000-01-31:1.1.1.10
	gdb-2000-01-26:1.1.1.10
	gdb-2000-01-24:1.1.1.10
	gdb-2000-01-17:1.1.1.10
	gdb-2000-01-10:1.1.1.10
	gdb-2000-01-05:1.1.1.10
	gdb-1999-12-21:1.1.1.10
	gdb-1999-12-13:1.1.1.10
	gdb-1999-12-07:1.1.1.9
	gdb-1999-12-06:1.1.1.9
	gdb-1999-11-16:1.1.1.9
	gdb-1999-11-08:1.1.1.9
	gdb-1999-11-01:1.1.1.9
	gdb-1999-10-25:1.1.1.9
	gdb-1999-10-18:1.1.1.9
	gdb-1999-10-11:1.1.1.9
	gdb-1999-10-04:1.1.1.9
	gdb-1999-09-28:1.1.1.9
	gdb-1999-09-21:1.1.1.9
	gdb-1999-09-13:1.1.1.9
	gdb-1999-09-08:1.1.1.9
	gdb-1999-08-30:1.1.1.8
	gdb-1999-08-23:1.1.1.7
	gdb-1999-08-16:1.1.1.7
	gdb-1999-08-09:1.1.1.7
	gdb-1999-08-02:1.1.1.7
	gdb-1999-07-26:1.1.1.7
	gdb-1999-07-19:1.1.1.7
	gdb-1999-07-12:1.1.1.7
	gdb-post-reformat-19990707:1.1.1.7
	gdb-1999-07-07-post-reformat-snapshot:1.1.1.7
	gdb-pre-reformat-19990707:1.1.1.6
	gdb-1999-07-07:1.1.1.6
	gdb-1999-07-05:1.1.1.6
	gdb-1999-06-28:1.1.1.5
	gdb-1999-06-21:1.1.1.5
	gdb-1999-06-14:1.1.1.5
	gdb-1999-06-07:1.1.1.4
	gdb-1999-06-01:1.1.1.4
	gdb-4_18-branch:1.1.1.1.0.2
	gdb-4_18-release:1.1.1.1
	gdb-1999-05-25:1.1.1.4
	gdb-1999-05-19:1.1.1.3
	gdb-1999-05-10:1.1.1.3
	gdb-19990504:1.1.1.3
	gdb-19990422:1.1.1.2
	SNAPSHOT:1.1.1
	gdb-4_18:1.1.1.1
	GDB_4_18:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.14
date	2001.08.12.03.39.11;	author cagney;	state dead;
branches;
next	1.13;

1.13
date	2001.08.12.02.10.18;	author cagney;	state Exp;
branches;
next	1.12;

1.12
date	2001.08.12.01.11.12;	author cagney;	state Exp;
branches;
next	1.11;

1.11
date	2001.08.11.00.59.29;	author cagney;	state Exp;
branches;
next	1.10;

1.10
date	2001.05.09.02.44.01;	author jimb;	state Exp;
branches;
next	1.9;

1.9
date	2001.05.09.02.22.35;	author jimb;	state Exp;
branches;
next	1.8;

1.8
date	2001.05.09.02.16.38;	author jimb;	state Exp;
branches;
next	1.7;

1.7
date	2001.05.09.02.04.26;	author jimb;	state Exp;
branches;
next	1.6;

1.6
date	2001.03.06.08.21.32;	author kevinb;	state Exp;
branches;
next	1.5;

1.5
date	2001.03.02.22.41.05;	author hiller;	state Exp;
branches;
next	1.4;

1.4
date	2000.08.12.03.28.42;	author cagney;	state Exp;
branches;
next	1.3;

1.3
date	2000.08.11.07.54.49;	author cagney;	state Exp;
branches;
next	1.2;

1.2
date	2000.05.28.01.12.37;	author kevinb;	state Exp;
branches;
next	1.1;

1.1
date	99.04.16.01.34.23;	author shebs;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.16.01.34.23;	author shebs;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.04.26.18.26.30;	author shebs;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	99.05.05.14.43.40;	author shebs;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	99.05.25.18.05.14;	author jsm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	99.06.14.18.08.29;	author jsm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	99.07.05.17.55.11;	author jsm;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	99.07.07.20.15.55;	author jsm;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	99.08.31.01.07.47;	author jsm;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	99.09.09.00.00.00;	author shebs;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	99.12.14.01.05.42;	author jsm;	state Exp;
branches;
next	1.1.1.11;

1.1.1.11
date	2000.02.02.00.21.14;	author jsm;	state Exp;
branches;
next	;


desc
@@


1.14
log
@* config/mn10300/mn10300.mt (TM_FILE): Delete.
* configure.tgt: Add mn10300 to list of mulit-arch targets.
* config/mn10300/tm-mn10300.h: Delete file. Move contents ...
* mn10300-tdep.c: To here.
@
text
@/* Parameters for execution on a Matsushita mn10300 processor.
   Copyright 1996, 1997, 1998, 1999, 2000, 2001
   Free Software Foundation, Inc.

   Contributed by Geoffrey Noer <noer@@cygnus.com>

   This file is part of GDB.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

#define GDB_MULTI_ARCH 1

/* The mn10300 is little endian.  */
#define TARGET_BYTE_ORDER_DEFAULT LITTLE_ENDIAN

/* All registers are 32bits (phew!).  */
#if !GDB_MULTI_ARCH
#define REGISTER_SIZE 4
#define MAX_REGISTER_RAW_SIZE 4
#define NUM_REGS 32
#endif

#if !GDB_MULTI_ARCH
#define REGISTER_VIRTUAL_TYPE(REG) builtin_type_int
#endif

#if !GDB_MULTI_ARCH
#define REGISTER_BYTE(REG) ((REG) * 4)
#define REGISTER_VIRTUAL_SIZE(REG) 4
#define REGISTER_RAW_SIZE(REG) 4
#endif

#define D0_REGNUM 0
#define D2_REGNUM 2
#define D3_REGNUM 3
#define A0_REGNUM 4
#define A2_REGNUM 6
#define A3_REGNUM 7
#define MDR_REGNUM 10
#define PSW_REGNUM 11
#define LIR_REGNUM 12
#define LAR_REGNUM 13
#define MDRQ_REGNUM 14
#define E0_REGNUM 15
#define MCRH_REGNUM 26
#define MCRL_REGNUM 27
#define MCVF_REGNUM 28

enum movm_register_bits {
  movm_exother_bit = 0x01,
  movm_exreg1_bit  = 0x02,
  movm_exreg0_bit  = 0x04,
  movm_other_bit   = 0x08,
  movm_a3_bit      = 0x10,
  movm_a2_bit      = 0x20,
  movm_d3_bit      = 0x40,
  movm_d2_bit      = 0x80
};
@


1.13
log
@* config/mn10300/tm-mn10300.h (PC_REGNUM, SP_REGNUM): Delete.
* mn10300-tdep.c (mn10300_gdbarch_init): Initialize pc_regnum and
sp_regnum.
@
text
@@


1.12
log
@* config/mn10300/tm-mn10300.h (INIT_FRAME_PC): Delete.
* mn10300-tdep.c (mn10300_gdbarch_init): Initialize init_frame_pc.
@
text
@a51 2
#define SP_REGNUM 8
#define PC_REGNUM 9
@


1.11
log
@* target.h (TARGET_VIRTUAL_FRAME_POINTER): Delete, multi-arched.
* gdbarch.sh (TARGET_VIRTUAL_FRAME_POINTER): Add.
* gdbarch.h, gdbarch.c: Regenerate.

* arch-utils.h (legacy_virtual_frame_pointer): Declare.
* arch-utils.c: Include "gdb_assert.h".
(legacy_virtual_frame_pointer): Define.
* Makefile.in (arch-utils.o): Depends on gdb_assert.h.

* tracepoint.c (encode_actions): Make frame_reg an int.  Make
frame_offset a LONGEST.
* ax-gdb.c (gen_frame_args_address): Ditto.
(gen_frame_locals_address): Ditto.
* mn10300-tdep.c (mn10300_gdbarch_init): Initialize
virtual_frame_pointer.
(mn10300_virtual_frame_pointer): Make static.  Update parameter
list to match function signature.
* config/mn10300/tm-mn10300.h (TARGET_VIRTUAL_FRAME_POINTER): Delete.
@
text
@a73 2

#define INIT_FRAME_PC		/* Not necessary */
@


1.10
log
@Correct and expand handling of `movm' instruction, and register
saves in general.
* config/mn10300/tm-mn10300.h (D0_REGNUM, A0_REGNUM, MDRQ_REGNUM,
MCRH_REGNUM, MCRL_REGNUM, MCVF_REGNUM): New definitions.
(enum movm_register_bits): New enum.
* mn10300-tdep.c (set_movm_offsets): Use symbolic names for the
bits, not hex literals.  Handle the `other', `exreg0', and
`exother' bits.  Correct handling of `exreg1': it saves r4, r5,
r6, and r7, not r2, r3, r4, and r5.
(saved_regs_size): New function.
(mn10300_frame_chain, mn10300_frame_saved_pc): Use it, instead
of computing the same thing inline, incorrectly.
@
text
@a75 5

/* Cons up virtual frame pointer for trace */
extern void mn10300_virtual_frame_pointer (CORE_ADDR, long *, long *);
#define TARGET_VIRTUAL_FRAME_POINTER(PC, REGP, OFFP) \
	mn10300_virtual_frame_pointer ((PC), (REGP), (OFFP))
@


1.9
log
@* mn10300-tdep.c (mn10300_pop_frame): Split the mn10300-specific
stuff out into mn10300_pop_frame_regular, and use
generic_pop_current_frame.  This lets us share code, and also
makes this function's prototype match that expected by gdbarch.
Make this function static.
(mn10300_pop_frame_regular): New function.
(mn10300_gdbarch_init): Register mn10300_pop_frame as the
gdbarch's pop_frame method.
* config/mn10300/tm-mn10300.h (POP_FRAME): Delete definition.
(mn10300_pop_frame): Delete declaration.
@
text
@d46 1
d49 1
d58 1
d60 14
@


1.8
log
@* config/mn10300/tm-mn10300.h (mn10300_find_callers_reg): Delete
unused declaration.
@
text
@a59 3
extern void mn10300_pop_frame (struct frame_info *);
#define POP_FRAME mn10300_pop_frame (get_current_frame ())

@


1.7
log
@Use gdbarch for most target parameters for the MN10300, rather
than the tm-*.h file.
* config/mn10300/tm-mn10300.h (MAX_REGISTER_VIRTUAL_SIZE,
REGISTER_BYTES, FP_REGNUM, BREAKPOINT_FROM_PC,
FUNCTION_START_OFFSET, DECR_PC_AFTER_BREAK, INNER_THAN,
SAVED_PC_AFTER_CALL, INIT_EXTRA_FRAME_INFO, FRAME_INIT_SAVED_REGS,
FRAME_CHAIN, FRAME_CHAIN_VALID, FRAME_SAVED_PC,
EXTRACT_RETURN_VALUE, EXTRACT_STRUCT_VALUE_ADDRESS,
STORE_RETURN_VALUE, STORE_STRUCT_RETURN, SKIP_PROLOGUE,
FRAME_ARGS_SKIP, FRAME_ARGS_ADDRESS, FRAME_LOCALS_ADDRESS,
FRAME_NUM_ARGS, POP_FRAME, USE_GENERIC_DUMMY_FRAMES, CALL_DUMMY,
CALL_DUMMY_START_OFFSET, CALL_DUMMY_BREAKPOINT_OFFSET,
CALL_DUMMY_LOCATION, FIX_CALL_DUMMY, CALL_DUMMY_ADDRESS,
TARGET_READ_FP, PUSH_RETURN_ADDRESS, PUSH_DUMMY_FRAME,
SAVE_DUMMY_FRAME_TOS, PUSH_ARGUMENTS, PC_IN_CALL_DUMMY,
REG_STRUCT_HAS_ADDR, USE_STRUCT_CONVENTION, GET_SAVED_REGISTER):
Delete definitions.  We register gdbarch methods for these now.
(struct frame_info, struct type, struct value): Delete forward
declarations of these types; they're no longer necessary, since we
don't have function declarations here any more.
* mn10300-tdep.c: #include "arch-utils.h", to get declarations for
some default gdbarch methods.
(mn10300_store_struct_return): Return void, as expected by
gdbarch.
(mn10300_init_extra_frame_info): Take initial `fromleaf' argument,
as expected by gdbarch.
(mn10300_frame_init_saved_regs): Provide dummy definition for
this, as required by gdbarch.
(mn10300_gdbarch_init): Add mn10300_call_dummy_words, as expected
by gdbarch.  Register gdbarch methods or values for all the stuff
removed from tm-10300.h, listed above.
@
text
@a59 2
extern CORE_ADDR mn10300_find_callers_reg (struct frame_info *, int);

@


1.6
log
@Update/correct copyright notices.
@
text
@a45 4
#define MAX_REGISTER_VIRTUAL_SIZE 4

#define REGISTER_BYTES (NUM_REGS * REGISTER_SIZE)

a57 24
/* Pseudo register that contains true address of executing stack frame */
#define FP_REGNUM 31

/* BREAKPOINT_FROM_PC uses the program counter value to determine the
   breakpoint that should be used */
extern breakpoint_from_pc_fn mn10300_breakpoint_from_pc;
#define BREAKPOINT_FROM_PC(pcptr, lenptr) mn10300_breakpoint_from_pc (pcptr, lenptr)

#define FUNCTION_START_OFFSET 0

#define DECR_PC_AFTER_BREAK 0

#define INNER_THAN(lhs,rhs) ((lhs) < (rhs))

extern CORE_ADDR mn10300_saved_pc_after_call (struct frame_info *frame);
#define SAVED_PC_AFTER_CALL(frame) \
  mn10300_saved_pc_after_call (frame)

struct frame_info;
struct type;
struct value;

extern void mn10300_init_extra_frame_info (struct frame_info *);
#define INIT_EXTRA_FRAME_INFO(fromleaf, fi) mn10300_init_extra_frame_info (fi)
a59 6
#define FRAME_INIT_SAVED_REGS(fi)	/* handled by init_extra_frame_info */

extern CORE_ADDR mn10300_frame_chain (struct frame_info *);
#define FRAME_CHAIN(fi) mn10300_frame_chain (fi)
#define FRAME_CHAIN_VALID(FP, FI)	generic_file_frame_chain_valid (FP, FI)

a60 33
extern CORE_ADDR mn10300_frame_saved_pc (struct frame_info *);
#define FRAME_SAVED_PC(FI) (mn10300_frame_saved_pc (FI))

/* Extract from an array REGBUF containing the (raw) register state
   a function return value of type TYPE, and copy that, in virtual format,
   into VALBUF. */

extern void mn10300_extract_return_value (struct type *type, char *regbuf,
					  char *valbuf);
#define EXTRACT_RETURN_VALUE(TYPE, REGBUF, VALBUF) \
  mn10300_extract_return_value (TYPE, REGBUF, VALBUF)

CORE_ADDR mn10300_extract_struct_value_address (char *regbuf);
#define EXTRACT_STRUCT_VALUE_ADDRESS(REGBUF) \
  mn10300_extract_struct_value_address (REGBUF)

void mn10300_store_return_value (struct type *type, char *valbuf);
#define STORE_RETURN_VALUE(TYPE, VALBUF) \
  mn10300_store_return_value (TYPE, VALBUF)


extern CORE_ADDR mn10300_store_struct_return (CORE_ADDR addr, CORE_ADDR sp);
#define STORE_STRUCT_RETURN(STRUCT_ADDR, SP) \
  (mn10300_store_struct_return (STRUCT_ADDR, SP))

extern CORE_ADDR mn10300_skip_prologue (CORE_ADDR);
#define SKIP_PROLOGUE(pc) (mn10300_skip_prologue (pc))

#define FRAME_ARGS_SKIP 0

#define FRAME_ARGS_ADDRESS(fi) ((fi)->frame)
#define FRAME_LOCALS_ADDRESS(fi) ((fi)->frame)
#define FRAME_NUM_ARGS(fi) (-1)
a63 35

#define USE_GENERIC_DUMMY_FRAMES 1
#define CALL_DUMMY                   {0}
#define CALL_DUMMY_START_OFFSET      (0)
#define CALL_DUMMY_BREAKPOINT_OFFSET (0)
#define CALL_DUMMY_LOCATION          AT_ENTRY_POINT
#define FIX_CALL_DUMMY(DUMMY, START, FUNADDR, NARGS, ARGS, TYPE, GCCP)
#define CALL_DUMMY_ADDRESS()         entry_point_address ()

#define TARGET_READ_FP() read_sp ()

extern CORE_ADDR mn10300_push_return_address (CORE_ADDR, CORE_ADDR);
#define PUSH_RETURN_ADDRESS(PC, SP)  mn10300_push_return_address (PC, SP)

#define PUSH_DUMMY_FRAME	generic_push_dummy_frame ()
#define SAVE_DUMMY_FRAME_TOS(SP) generic_save_dummy_frame_tos (SP)

extern CORE_ADDR
mn10300_push_arguments (int, struct value **, CORE_ADDR,
			int, CORE_ADDR);
#define PUSH_ARGUMENTS(NARGS, ARGS, SP, STRUCT_RETURN, STRUCT_ADDR) \
  (mn10300_push_arguments (NARGS, ARGS, SP, STRUCT_RETURN, STRUCT_ADDR))

#define PC_IN_CALL_DUMMY(PC, SP, FP) generic_pc_in_call_dummy (PC, SP, FP)

#define REG_STRUCT_HAS_ADDR(gcc_p,TYPE) \
	(TYPE_LENGTH (TYPE) > 8)

extern use_struct_convention_fn mn10300_use_struct_convention;
#define USE_STRUCT_CONVENTION(GCC_P, TYPE) mn10300_use_struct_convention (GCC_P, TYPE)

/* override the default get_saved_register function with
   one that takes account of generic CALL_DUMMY frames */
#define GET_SAVED_REGISTER(raw_buffer, optimized, addrp, frame, regnum, lval) \
    generic_get_saved_register (raw_buffer, optimized, addrp, frame, regnum, lval)
@


1.5
log
@2001-03-02  Matt Hiller  <hiller@@redhat.com>

	* config/mn10300/tm-mn10300.h (E0_REGNUM): Correct to 15.
@
text
@d2 2
a3 1
   Copyright 1996, 1997, 2000 Free Software Foundation, Inc. 
@


1.4
log
@Add formatted register info.
Convert more of mn10300 to multi-arch.
Fix mips vs mn10300
@
text
@d59 1
a59 1
#define E0_REGNUM 14
@


1.3
log
@Enable multi-arch for the mn10300.
@
text
@d29 1
d33 1
d35 1
d37 1
d39 1
d43 1
@


1.2
log
@PARAMS removal.
@
text
@d2 1
a2 1
   Copyright 1996, 1997 Free Software Foundation, Inc. 
d23 2
a42 3
extern char *mn10300_register_name (int regnr);
#define REGISTER_NAME(i) (mn10300_register_name (i))

d143 1
a143 1
			unsigned char, CORE_ADDR);
@


1.1
log
@Initial revision
@
text
@d6 1
a6 1
This file is part of GDB.
d8 14
a21 13
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
d41 2
a42 2
extern char **mn10300_register_names;
#define REGISTER_NAME(i) mn10300_register_names[i]
d54 1
d70 1
d72 1
a72 1
  read_memory_integer (read_register (SP_REGNUM), 4)
a73 1
#ifdef __STDC__
a76 1
#endif
d78 1
a78 1
extern void mn10300_init_extra_frame_info PARAMS ((struct frame_info *));
d82 1
a82 1
#define FRAME_INIT_SAVED_REGS(fi) /* handled by init_extra_frame_info */
d84 1
a84 1
extern CORE_ADDR mn10300_frame_chain PARAMS ((struct frame_info *));
d86 1
a86 1
#define FRAME_CHAIN_VALID(FP, FI)	generic_frame_chain_valid (FP, FI)
d88 2
a89 2
extern CORE_ADDR mn10300_find_callers_reg PARAMS ((struct frame_info *, int));
extern CORE_ADDR mn10300_frame_saved_pc   PARAMS ((struct frame_info *));
d96 2
d99 1
a99 5
  if (TYPE_CODE (TYPE) == TYPE_CODE_PTR) \
    memcpy (VALBUF, REGBUF + REGISTER_BYTE (4), TYPE_LENGTH (TYPE)); \
  else \
    memcpy (VALBUF, REGBUF + REGISTER_BYTE (0), TYPE_LENGTH (TYPE));

d101 1
d103 1
a103 2
  extract_address (REGBUF + REGISTER_BYTE (4), \
		   REGISTER_RAW_SIZE (4))
d105 1
d107 2
a108 4
  if (TYPE_CODE (TYPE) == TYPE_CODE_PTR) \
    write_register_bytes(REGISTER_BYTE (4), VALBUF, TYPE_LENGTH (TYPE)); \
  else \
    write_register_bytes(REGISTER_BYTE (0), VALBUF, TYPE_LENGTH (TYPE));
d110 1
d112 1
a112 1
  (SP) = mn10300_store_struct_return (STRUCT_ADDR, SP)
d114 2
a115 2
extern CORE_ADDR mn10300_skip_prologue PARAMS ((CORE_ADDR));
#define SKIP_PROLOGUE(pc) pc = mn10300_skip_prologue (pc)
d121 1
a121 1
#define FRAME_NUM_ARGS(val, fi) ((val) = -1)
d123 1
a123 1
extern void mn10300_pop_frame PARAMS ((struct frame_info *));
d126 1
a126 1
#define USE_GENERIC_DUMMY_FRAMES
d134 3
a136 1
extern CORE_ADDR mn10300_push_return_address PARAMS ((CORE_ADDR, CORE_ADDR));
d140 1
d143 2
a144 2
mn10300_push_arguments PARAMS ((int, struct value **, CORE_ADDR,
				unsigned char, CORE_ADDR ));
d146 1
a146 1
  (SP) = mn10300_push_arguments (NARGS, ARGS, SP, STRUCT_RETURN, STRUCT_ADDR)
d148 1
a148 1
#define PC_IN_CALL_DUMMY(PC, SP, FP) generic_pc_in_call_dummy (PC, SP)
d158 2
a159 1
#define GET_SAVED_REGISTER
d162 1
a162 1
extern void mn10300_virtual_frame_pointer PARAMS ((CORE_ADDR, long *, long *));
a164 4

/* Define this for Wingdb */

#define TARGET_MN10300
@


1.1.1.1
log
@Initial creation of sourceware repository
@
text
@@


1.1.1.2
log
@import gdb-19990422 snapshot
@
text
@d127 1
a127 1
#define USE_GENERIC_DUMMY_FRAMES 1
d146 1
a146 1
#define PC_IN_CALL_DUMMY(PC, SP, FP) generic_pc_in_call_dummy (PC, SP, FP)
d156 1
a156 2
#define GET_SAVED_REGISTER(raw_buffer, optimized, addrp, frame, regnum, lval) \
    generic_get_saved_register (raw_buffer, optimized, addrp, frame, regnum, lval)
@


1.1.1.3
log
@import gdb-19990504 snapshot
@
text
@d116 1
a116 1
#define SKIP_PROLOGUE(pc) (mn10300_skip_prologue (pc))
@


1.1.1.4
log
@import gdb-1999-05-25 snapshot
@
text
@d122 1
a122 1
#define FRAME_NUM_ARGS(fi) (-1)
d144 1
a144 1
  (mn10300_push_arguments (NARGS, ARGS, SP, STRUCT_RETURN, STRUCT_ADDR))
@


1.1.1.5
log
@import gdb-1999-06-14 snapshot
@
text
@d40 2
a41 2
extern char *mn10300_register_name PARAMS ((int regnr));
#define REGISTER_NAME(i) (mn10300_register_name (i))
a67 1
extern CORE_ADDR mn10300_saved_pc_after_call PARAMS ((struct frame_info *frame));
d69 1
a69 1
  mn10300_saved_pc_after_call (frame)
a94 1
extern void mn10300_extract_return_value PARAMS ((struct type *type, char *regbuf, char *valbuf));
d96 5
a100 1
  mn10300_extract_return_value (TYPE, REGBUF, VALBUF)
a101 1
CORE_ADDR mn10300_extract_struct_value_address PARAMS ((char *regbuf));
d103 2
a104 1
  mn10300_extract_struct_value_address (REGBUF)
a105 1
void mn10300_store_return_value PARAMS ((struct type *type, char *valbuf));
d107 4
a110 1
  mn10300_store_return_value (TYPE, VALBUF)
d113 1
a113 1
  (mn10300_store_struct_return (STRUCT_ADDR, SP))
d163 4
@


1.1.1.6
log
@import gdb-1999-07-05 snapshot
@
text
@a130 2
#define TARGET_READ_FP() read_sp ()

a134 1
#define SAVE_DUMMY_FRAME_TOS(SP) generic_save_dummy_frame_tos (SP)
@


1.1.1.7
log
@import gdb-1999-07-07 post reformat
@
text
@d6 1
a6 1
   This file is part of GDB.
d8 13
a20 14
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */
d68 1
a68 1
extern CORE_ADDR mn10300_saved_pc_after_call PARAMS ((struct frame_info * frame));
d82 1
a82 1
#define FRAME_INIT_SAVED_REGS(fi)	/* handled by init_extra_frame_info */
d89 1
a89 1
extern CORE_ADDR mn10300_frame_saved_pc PARAMS ((struct frame_info *));
d96 1
a96 1
extern void mn10300_extract_return_value PARAMS ((struct type * type, char *regbuf, char *valbuf));
d104 1
a104 1
void mn10300_store_return_value PARAMS ((struct type * type, char *valbuf));
d140 2
a141 2
  mn10300_push_arguments PARAMS ((int, struct value **, CORE_ADDR,
				  unsigned char, CORE_ADDR));
@


1.1.1.8
log
@import gdb-1999-08-30 snapshot
@
text
@d73 1
d77 1
@


1.1.1.9
log
@import gdb-1999-09-08 snapshot
@
text
@a106 2

extern CORE_ADDR mn10300_store_struct_return (CORE_ADDR addr, CORE_ADDR sp);
@


1.1.1.10
log
@import gdb-1999-12-13 snapshot
@
text
@d85 1
a85 1
#define FRAME_CHAIN_VALID(FP, FI)	generic_file_frame_chain_valid (FP, FI)
@


1.1.1.11
log
@import gdb-2000-02-01 snapshot
@
text
@a53 1
#define E0_REGNUM 14
@


