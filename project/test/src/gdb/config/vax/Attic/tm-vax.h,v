head	1.19;
access;
symbols
	cagney_bfdfile-20040213-branch:1.18.0.8
	cagney_bfdfile-20040213-branchpoint:1.18
	drow-cplus-merge-20040208:1.18
	carlton_dictionary-20040126-merge:1.18
	cagney_bigcore-20040122-branch:1.18.0.6
	cagney_bigcore-20040122-branchpoint:1.18
	drow-cplus-merge-20040113:1.18
	drow-cplus-merge-20031224:1.18
	drow-cplus-merge-20031220:1.18
	carlton_dictionary-20031215-merge:1.18
	drow-cplus-merge-20031214:1.18
	carlton-dictionary-20031111-merge:1.18
	gdb_6_0-2003-10-04-release:1.17
	kettenis_sparc-20030918-branch:1.18.0.4
	kettenis_sparc-20030918-branchpoint:1.18
	carlton_dictionary-20030917-merge:1.18
	ezannoni_pie-20030916-branchpoint:1.18
	ezannoni_pie-20030916-branch:1.18.0.2
	cagney_x86i386-20030821-branch:1.17.0.6
	cagney_x86i386-20030821-branchpoint:1.17
	carlton_dictionary-20030805-merge:1.17
	carlton_dictionary-20030627-merge:1.17
	gdb_6_0-branch:1.17.0.4
	gdb_6_0-2003-06-23-branchpoint:1.17
	jimb-ppc64-linux-20030613-branch:1.17.0.2
	jimb-ppc64-linux-20030613-branchpoint:1.17
	cagney_convert-20030606-branch:1.16.0.40
	cagney_convert-20030606-branchpoint:1.16
	cagney_writestrings-20030508-branch:1.16.0.38
	cagney_writestrings-20030508-branchpoint:1.16
	jimb-ppc64-linux-20030528-branch:1.16.0.36
	jimb-ppc64-linux-20030528-branchpoint:1.16
	carlton_dictionary-20030523-merge:1.16
	cagney_fileio-20030521-branch:1.16.0.34
	cagney_fileio-20030521-branchpoint:1.16
	kettenis_i386newframe-20030517-mergepoint:1.16
	jimb-ppc64-linux-20030509-branch:1.16.0.32
	jimb-ppc64-linux-20030509-branchpoint:1.16
	kettenis_i386newframe-20030504-mergepoint:1.16
	carlton_dictionary-20030430-merge:1.16
	kettenis_i386newframe-20030419-branch:1.16.0.30
	kettenis_i386newframe-20030419-branchpoint:1.16
	carlton_dictionary-20030416-merge:1.16
	cagney_frameaddr-20030409-mergepoint:1.16
	kettenis_i386newframe-20030406-branch:1.16.0.28
	kettenis_i386newframe-20030406-branchpoint:1.16
	cagney_frameaddr-20030403-branchpoint:1.16
	cagney_frameaddr-20030403-branch:1.16.0.26
	cagney_framebase-20030330-mergepoint:1.16
	cagney_framebase-20030326-branch:1.16.0.24
	cagney_framebase-20030326-branchpoint:1.16
	cagney_lazyid-20030317-branch:1.16.0.22
	cagney_lazyid-20030317-branchpoint:1.16
	kettenis-i386newframe-20030316-mergepoint:1.16
	offbyone-20030313-branch:1.16.0.20
	offbyone-20030313-branchpoint:1.16
	kettenis-i386newframe-20030308-branch:1.16.0.18
	kettenis-i386newframe-20030308-branchpoint:1.16
	carlton_dictionary-20030305-merge:1.16
	cagney_offbyone-20030303-branch:1.16.0.16
	cagney_offbyone-20030303-branchpoint:1.16
	carlton_dictionary-20030207-merge:1.16
	interps-20030203-mergepoint:1.16
	interps-20030202-branch:1.16.0.14
	interps-20030202-branchpoint:1.16
	cagney-unwind-20030108-branch:1.16.0.12
	cagney-unwind-20030108-branchpoint:1.16
	carlton_dictionary-20021223-merge:1.16
	gdb_5_3-2002-12-12-release:1.16
	carlton_dictionary-20021115-merge:1.16
	kseitz_interps-20021105-merge:1.16
	kseitz_interps-20021103-merge:1.16
	drow-cplus-merge-20021020:1.16
	drow-cplus-merge-20021025:1.16
	carlton_dictionary-20021025-merge:1.16
	carlton_dictionary-20021011-merge:1.16
	drow-cplus-branch:1.16.0.10
	drow-cplus-branchpoint:1.16
	kseitz_interps-20020930-merge:1.16
	carlton_dictionary-20020927-merge:1.16
	carlton_dictionary-branch:1.16.0.8
	carlton_dictionary-20020920-branchpoint:1.16
	gdb_5_3-branch:1.16.0.6
	gdb_5_3-2002-09-04-branchpoint:1.16
	kseitz_interps-20020829-merge:1.16
	cagney_sysregs-20020825-branch:1.16.0.4
	cagney_sysregs-20020825-branchpoint:1.16
	readline_4_3-import-branch:1.16.0.2
	readline_4_3-import-branchpoint:1.16
	gdb_5_2_1-2002-07-23-release:1.7
	kseitz_interps-20020528-branch:1.14.0.6
	kseitz_interps-20020528-branchpoint:1.14
	cagney_regbuf-20020515-branch:1.14.0.4
	cagney_regbuf-20020515-branchpoint:1.14
	jimb-macro-020506-branch:1.14.0.2
	jimb-macro-020506-branchpoint:1.14
	gdb_5_2-2002-04-29-release:1.7
	gdb_5_2-branch:1.7.0.2
	gdb_5_2-2002-03-03-branchpoint:1.7
	gdb_5_1_1-2002-01-24-release:1.4
	gdb_5_1_0_1-2002-01-03-release:1.4
	cygnus_cvs_20020108_pre:1.5
	gdb_5_1_0_1-2002-01-03-branch:1.4.0.8
	gdb_5_1_0_1-2002-01-03-branchpoint:1.4
	gdb_5_1-2001-11-21-release:1.4
	gdb_s390-2001-09-26-branch:1.4.0.6
	gdb_s390-2001-09-26-branchpoint:1.4
	gdb_5_1-2001-07-29-branch:1.4.0.4
	gdb_5_1-2001-07-29-branchpoint:1.4
	dberlin-typesystem-branch:1.4.0.2
	dberlin-typesystem-branchpoint:1.4
	gdb-post-ptid_t-2001-05-03:1.4
	gdb-pre-ptid_t-2001-05-03:1.4
	insight-precleanup-2001-01-01:1.2
	gdb-post-protoization-2000-07-29:1.2
	gdb-pre-protoization-2000-07-29:1.2
	gdb-premipsmulti-2000-06-06-branch:1.2.0.2
	gdb-premipsmulti-2000-06-06-branchpoint:1.2
	gdb-post-params-removal-2000-06-04:1.2
	gdb-pre-params-removal-2000-06-04:1.2
	gdb-post-params-removal-2000-05-28:1.2
	gdb-pre-params-removal-2000-05-28:1.1.1.4
	gdb_5_0-2000-05-19-release:1.1.1.4
	gdb_4_18_2-2000-05-18-release:1.1.1.4
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.4
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.4
	gdb_5_0-2000-04-10-branch:1.1.1.4.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1.1.4
	repo-unification-2000-02-06:1.1.1.4
	insight-2000-02-04:1.1.1.4
	gdb-2000-02-04:1.1.1.4
	gdb-2000-02-02:1.1.1.4
	gdb-2000-02-01:1.1.1.4
	gdb-2000-01-31:1.1.1.4
	gdb-2000-01-26:1.1.1.4
	gdb-2000-01-24:1.1.1.4
	gdb-2000-01-17:1.1.1.4
	gdb-2000-01-10:1.1.1.4
	gdb-2000-01-05:1.1.1.4
	gdb-1999-12-21:1.1.1.4
	gdb-1999-12-13:1.1.1.4
	gdb-1999-12-07:1.1.1.4
	gdb-1999-12-06:1.1.1.4
	gdb-1999-11-16:1.1.1.4
	gdb-1999-11-08:1.1.1.4
	gdb-1999-11-01:1.1.1.4
	gdb-1999-10-25:1.1.1.4
	gdb-1999-10-18:1.1.1.4
	gdb-1999-10-11:1.1.1.4
	gdb-1999-10-04:1.1.1.4
	gdb-1999-09-28:1.1.1.4
	gdb-1999-09-21:1.1.1.4
	gdb-1999-09-13:1.1.1.4
	gdb-1999-09-08:1.1.1.4
	gdb-1999-08-30:1.1.1.4
	gdb-1999-08-23:1.1.1.4
	gdb-1999-08-16:1.1.1.4
	gdb-1999-08-09:1.1.1.4
	gdb-1999-08-02:1.1.1.4
	gdb-1999-07-26:1.1.1.4
	gdb-1999-07-19:1.1.1.4
	gdb-1999-07-12:1.1.1.4
	gdb-post-reformat-19990707:1.1.1.4
	gdb-1999-07-07-post-reformat-snapshot:1.1.1.4
	gdb-pre-reformat-19990707:1.1.1.3
	gdb-1999-07-07:1.1.1.3
	gdb-1999-07-05:1.1.1.3
	gdb-1999-06-28:1.1.1.3
	gdb-1999-06-21:1.1.1.3
	gdb-1999-06-14:1.1.1.3
	gdb-1999-06-07:1.1.1.3
	gdb-1999-06-01:1.1.1.3
	gdb-4_18-branch:1.1.1.1.0.2
	gdb-4_18-release:1.1.1.1
	gdb-1999-05-25:1.1.1.3
	gdb-1999-05-19:1.1.1.2
	gdb-1999-05-10:1.1.1.2
	gdb-19990504:1.1.1.2
	gdb-19990422:1.1.1.1
	SNAPSHOT:1.1.1
	gdb-4_18:1.1.1.1
	GDB_4_18:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.19
date	2004.02.15.22.14.45;	author cagney;	state dead;
branches;
next	1.18;

1.18
date	2003.09.03.15.02.51;	author cagney;	state Exp;
branches
	1.18.2.1;
next	1.17;

1.17
date	2003.06.09.02.10.35;	author cagney;	state Exp;
branches;
next	1.16;

1.16
date	2002.06.26.17.39.30;	author thorpej;	state Exp;
branches
	1.16.8.1
	1.16.10.1;
next	1.15;

1.15
date	2002.06.26.17.20.36;	author thorpej;	state Exp;
branches;
next	1.14;

1.14
date	2002.04.23.00.53.31;	author thorpej;	state Exp;
branches
	1.14.6.1;
next	1.13;

1.13
date	2002.04.22.23.13.50;	author thorpej;	state Exp;
branches;
next	1.12;

1.12
date	2002.04.22.21.32.05;	author thorpej;	state Exp;
branches;
next	1.11;

1.11
date	2002.04.22.20.59.28;	author thorpej;	state Exp;
branches;
next	1.10;

1.10
date	2002.04.22.20.38.41;	author thorpej;	state Exp;
branches;
next	1.9;

1.9
date	2002.04.22.19.44.05;	author thorpej;	state Exp;
branches;
next	1.8;

1.8
date	2002.04.22.06.56.04;	author thorpej;	state Exp;
branches;
next	1.7;

1.7
date	2002.01.29.04.42.45;	author cagney;	state Exp;
branches;
next	1.6;

1.6
date	2002.01.29.03.08.28;	author cagney;	state Exp;
branches;
next	1.5;

1.5
date	2001.12.15.16.53.24;	author cagney;	state Exp;
branches;
next	1.4;

1.4
date	2001.03.14.23.23.16;	author cagney;	state Exp;
branches;
next	1.3;

1.3
date	2001.03.06.08.21.39;	author kevinb;	state Exp;
branches;
next	1.2;

1.2
date	2000.05.28.01.12.41;	author kevinb;	state Exp;
branches;
next	1.1;

1.1
date	99.04.16.01.34.26;	author shebs;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.16.01.34.26;	author shebs;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.05.05.14.43.55;	author shebs;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	99.05.25.18.05.47;	author jsm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	99.07.07.20.17.31;	author jsm;	state Exp;
branches;
next	;

1.14.6.1
date	2002.07.22.21.47.09;	author kseitz;	state Exp;
branches;
next	;

1.16.8.1
date	2003.06.27.21.50.17;	author carlton;	state Exp;
branches;
next	1.16.8.2;

1.16.8.2
date	2003.09.17.21.28.45;	author carlton;	state Exp;
branches;
next	;

1.16.10.1
date	2003.12.14.20.27.42;	author drow;	state Exp;
branches;
next	;

1.18.2.1
date	2004.03.23.20.30.20;	author ezannoni;	state dead;
branches;
next	;


desc
@@


1.19
log
@2004-02-15  Andrew Cagney  <cagney@@redhat.com>

	* config/vax/tm-vaxbsd.h: Do not include "tm-vax.h".
	* config/vax/tm-vax.h: Delete file.
@
text
@/* Target definitions for VAX systems for GDB.
   Copyright 1986, 1987, 1989, 1991, 1993, 1994, 1996, 1998, 1999, 2000, 2002
   Free Software Foundation, Inc.

   This file is part of GDB.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

#ifndef TM_VAX_H
#define TM_VAX_H

#endif /* TM_VAX_H */
@


1.18
log
@2003-09-03  Andrew Cagney  <cagney@@redhat.com>

	* defs.h: Do not include "arch-utils.h".
	(GDB_MULTI_ARCH): If not defined, set to GDB_MULTI_ARCH_PARTIAL or
	GDB_MULTI_ARCH_PURE.
	* configure.in (GDB_MULTI_ARCH): Do not define.
	* configure, config.in: Regenerate.
	* configure.tgt: Do not set variable "gdb_multi_arch".
	* config/s390/s390x.mt (GDB_MULTI_ARCH): Delete.
	* config/s390/s390.mt (GDB_MULTI_ARCH): Delete.
	* config/i386/x86-64linux.mt (GDB_MULTI_ARCH): Delete.
	* config/v850/v850.mt (TM_FILE): Delete disabled definition.
	* config/m68hc11/m68hc11.mt (TM_FILE): Delete definition.
	* config/vax/tm-vax.h (GDB_MULTI_ARCH): Delete definition.
	* config/sparc/tm-sparc.h (GDB_MULTI_ARCH): Delete definition.
	* config/sparc/tm-sun4sol2.h (GDB_MULTI_ARCH): Delete definition.
	* config/sparc/tm-nbsd.h (GDB_MULTI_ARCH): Delete definition.
	* config/sparc/tm-linux.h (GDB_MULTI_ARCH): Delete definition.
	* config/sparc/tm-sp64.h (GDB_MULTI_ARCH): Delete definition.
	* config/pa/tm-hppa64.h (GDB_MULTI_ARCH): Delete definition.
	* config/ns32k/tm-ns32k.h (GDB_MULTI_ARCH): Delete definition.
	* config/m68k/tm-m68k.h (GDB_MULTI_ARCH): Delete definition.
	* config/i386/tm-i386.h (GDB_MULTI_ARCH): Delete definition.
	* config/h8300/tm-h8300.h (GDB_MULTI_ARCH): Delete definition.
	* config/frv/tm-frv.h (GDB_MULTI_ARCH): Delete definition.
	* config/alpha/tm-alpha.h (GDB_MULTI_ARCH): Delete definition.
@
text
@@


1.18.2.1
log
@merge mainline changes into branch
@
text
@@


1.17
log
@2003-06-08  Andrew Cagney  <cagney@@redhat.com>

	* frame.c (get_prev_frame): Remove reference to
	frame_args_address_correct in comments.
	* frame-base.c (default_frame_args_address): Delete code
	conditional on FRAME_ARGS_ADDRESS_CORRECT.
	* vax-tdep.c (vax_frame_args_address_correct): Delete.
	(vax_frame_args_address): Merge in vax_frame_args_address_correct.
	* config/vax/tm-vax.h (FRAME_ARGS_ADDRESS_CORRECT): Delete
	(vax_frame_args_address_correct): Delete declaration.

Index: doc/ChangeLog
2003-06-08  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Delete
	documentation on FRAME_ARGS_ADDRESS_CORRECT.
@
text
@a24 2
#define GDB_MULTI_ARCH GDB_MULTI_ARCH_PARTIAL

@


1.16
log
@* config/vax/tm-vax.h: Protect from multiple inclusion.
(TARGET_UPAGES, TARGET_NBPG, STACK_END_ADDR)
(SIGTRAMP_START, SIGTRAMP_END, SIGCONTEXT_PC_OFFSET): Move to...
* config/vax/tm-vaxbsd.h: ...here.  New file.
* config/vax/vax.mt (TM_FILE): Set to tm-vaxbsd.h.
@
text
@a26 4
/* XXXJRT not yet under gdbarch control */
#define FRAME_ARGS_ADDRESS_CORRECT(fi) vax_frame_args_address_correct ((fi))
extern CORE_ADDR vax_frame_args_address_correct (struct frame_info *);

@


1.16.10.1
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@d25 6
@


1.16.8.1
log
@2003-06-27  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton_dictionary-20030627-merge.
@
text
@d27 4
@


1.16.8.2
log
@2003-09-17  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton_dictionary-20030917-merge.
@
text
@d25 2
@


1.15
log
@* config/vax/tm-vax.h (BREAKPOINT): Remove.
(BELIEVE_PCC_PROMOTION): Remove.
(AP_REGNUM): Move to...
* config/vax/nm-vax.h: ...here.
* vax-tdep.c: Use VAX_AP_REGNUM instead of AP_REGNUM.
(vax_breakpoint_from_pc): New function.
(vax_gdbarch_init): Initialize gdbarch_breakpoint_from_pc
and gdbarch_believe_pcc_promotion.
@
text
@d1 1
a1 1
/* Definitions to make GDB run on a vax under 4.2bsd.
d22 3
a26 14
#define TARGET_UPAGES 14
#define TARGET_NBPG 512
#define STACK_END_ADDR (0x80000000 - (TARGET_UPAGES * TARGET_NBPG))

/* On the VAX, sigtramp is in the u area.  Can't check the exact
   addresses because for cross-debugging we don't have VAX include
   files around.  This should be close enough.  */
#define SIGTRAMP_START(pc)	STACK_END_ADDR
#define SIGTRAMP_END(pc)	0x80000000

/* Offset to saved PC in sigcontext, from <sys/signal.h>.  */
/* XXXJRT should go away */
#define SIGCONTEXT_PC_OFFSET 12

d30 2
@


1.14
log
@* Makefile.in (vax-tdep.o): Add $(arch_utils_h), $(inferior_h),
and vax-tdep.h.
* vax-tdep.h: New file.
* vax-tdep.c: Include inferior.h, arch-utils.h, and vax-tdep.h.
Make several routines static.
(vax_get_saved_register): New function.
(vax_gdbarch_init): New function.
(_initialize_vax_tdep): Register vax_gdbarch_init.
* config/vax/tm-vax.h: Set GDB_MULTI_ARCH to GDB_MULTI_ARCH_PARTIAL.
Remove macros now under the control of gdbarch.
@
text
@a33 5
/* Sequence of bytes for breakpoint instruction.  */
#define BREAKPOINT {3}

#define AP_REGNUM 12	/* XXXJRT */

a40 3

/* If vax pcc says CHAR or SHORT, it provides the correct address.  */
#define BELIEVE_PCC_PROMOTION 1
@


1.14.6.1
log
@Merge w/trunk (kseitz_interps-20020722-merge).
@
text
@d1 1
a1 1
/* Target definitions for VAX systems for GDB.
d22 1
a22 2
#ifndef TM_VAX_H
#define TM_VAX_H
d24 18
a41 1
#define GDB_MULTI_ARCH GDB_MULTI_ARCH_PARTIAL
d47 2
a48 1
#endif /* TM_VAX_H */
@


1.13
log
@* vax-tdep.c: Include regcache.h.
(vax_call_dummy_words): New.
(sizeof_vax_call_dummy_words): New.
(vax_fix_call_dummy): New function.
(vax_saved_pc_after_call): Ditto.
* config/vax/tm-vax.h: Don't include regcache.h.
(SAVED_PC_AFTER_CALL): Use vax_saved_pc_after_call.
(CALL_DUMMY): Remove.
(CALL_DUMMY_WORDS): Define.
(SIZEOF_CALL_DUMMY_WORDS): Define.
(FIX_CALL_DUMMY): Use vax_fix_call_dummy.
@
text
@d22 1
a22 10
/* Offset from address of function to start of its code.
   Zero on most machines.  */

#define FUNCTION_START_OFFSET 2

extern CORE_ADDR vax_skip_prologue (CORE_ADDR);
#define SKIP_PROLOGUE(pc) (vax_skip_prologue (pc))

#define SAVED_PC_AFTER_CALL(frame) vax_saved_pc_after_call ((frame))
extern CORE_ADDR vax_saved_pc_after_call (struct frame_info *);
a33 4
/* Stack grows downward.  */

#define INNER_THAN(lhs,rhs) core_addr_lessthan ((lhs), (rhs))

a34 1

d37 1
a37 86
/* Amount PC must be decremented by after a breakpoint.
   This is often the number of bytes in BREAKPOINT
   but not always.  */

#define DECR_PC_AFTER_BREAK 0

/* Say how long (ordinary) registers are.  This is a piece of bogosity
   used in push_word and a few other places; REGISTER_RAW_SIZE is the
   real way to know how big a register is.  */

#define REGISTER_SIZE 4

/* Number of machine registers */

#define NUM_REGS 17

/* Return the name of the register specified by N.  */
#define REGISTER_NAME(N) vax_register_name ((N))
extern char *vax_register_name (int);

/* Register numbers of various important registers.
   Note that some of these values are "real" register numbers,
   and correspond to the general registers of the machine,
   and some are "phony" register numbers which are too large
   to be actual register numbers as far as the user is concerned
   but do serve to get the desired values when passed to read_register.  */

#define AP_REGNUM 12
#define FP_REGNUM 13		/* Contains address of executing stack frame */
#define SP_REGNUM 14		/* Contains address of top of stack */
#define PC_REGNUM 15		/* Contains program counter */
#define PS_REGNUM 16		/* Contains processor status */

/* Total amount of space needed to store our copies of the machine's
   register state, the array `registers'.  */
#define REGISTER_BYTES (17*4)

/* Index within `registers' of the first byte of the space for
   register N.  */
#define REGISTER_BYTE(N) vax_register_byte ((N))
extern int vax_register_byte (int);

/* Number of bytes of storage in the actual machine representation
   for register N.  On the vax, all regs are 4 bytes.  */
#define REGISTER_RAW_SIZE(N) vax_register_raw_size ((N))
extern int vax_register_raw_size (int);

/* Number of bytes of storage in the program's representation
   for register N.  On the vax, all regs are 4 bytes.  */
#define REGISTER_VIRTUAL_SIZE(N) vax_register_virtual_size ((N))
extern int vax_register_virtual_size (int);

/* Largest value REGISTER_RAW_SIZE can have.  */

#define MAX_REGISTER_RAW_SIZE 4

/* Largest value REGISTER_VIRTUAL_SIZE can have.  */

#define MAX_REGISTER_VIRTUAL_SIZE 4

/* Return the GDB type object for the "standard" data type
   of data in register N.  */
#define REGISTER_VIRTUAL_TYPE(N) vax_register_virtual_type ((N))
extern struct type *vax_register_virtual_type (int);

#define STORE_STRUCT_RETURN(ADDR, SP) vax_store_struct_return ((ADDR), (SP))
extern void vax_store_struct_return (CORE_ADDR, CORE_ADDR);

#define EXTRACT_RETURN_VALUE(TYPE,REGBUF,VALBUF) \
  vax_extract_return_value ((TYPE), (REGBUF), (VALBUF))
extern void vax_extract_return_value (struct type *, char *, char *);

#define STORE_RETURN_VALUE(TYPE,VALBUF) \
  vax_store_return_value ((TYPE), (VALBUF))
extern void vax_store_return_value (struct type *, char *);

#define EXTRACT_STRUCT_VALUE_ADDRESS(REGBUF) \
  vax_extract_struct_value_address ((REGBUF))
extern CORE_ADDR vax_extract_struct_value_address (char *);


#define FRAME_CHAIN(FI) vax_frame_chain ((FI))
extern CORE_ADDR vax_frame_chain (struct frame_info *);

#define FRAMELESS_FUNCTION_INVOCATION(FI) \
  generic_frameless_function_invocation_not ((FI))
a42 3
#define FRAME_SAVED_PC(FRAME) vax_frame_saved_pc ((FRAME))
extern CORE_ADDR vax_frame_saved_pc (struct frame_info *);

d44 2
a45 41
#define FRAME_ARGS_ADDRESS_CORRECT(fi) vax_frame_args_address ((fi))
extern CORE_ADDR vax_frame_args_address (struct frame_info *);

#define FRAME_ARGS_ADDRESS(fi) vax_frame_args_address ((fi))
extern CORE_ADDR vax_frame_args_address (struct frame_info *);

#define FRAME_LOCALS_ADDRESS(fi) vax_frame_locals_address ((fi))
extern CORE_ADDR vax_frame_locals_address (struct frame_info *);

extern int vax_frame_num_args (struct frame_info *fi);
#define FRAME_NUM_ARGS(fi) (vax_frame_num_args ((fi)))

/* Return number of bytes at start of arglist that are not really args.  */

#define FRAME_ARGS_SKIP 4

#define FRAME_INIT_SAVED_REGS(fi) vax_frame_init_saved_regs ((fi))
extern void vax_frame_init_saved_regs (struct frame_info *);

#define PUSH_DUMMY_FRAME vax_push_dummy_frame()
extern void vax_push_dummy_frame (void);

#define POP_FRAME vax_pop_frame()
extern void vax_pop_frame (void);

#define CALL_DUMMY_WORDS vax_call_dummy_words
extern LONGEST vax_call_dummy_words[];

#define SIZEOF_CALL_DUMMY_WORDS sizeof_vax_call_dummy_words
extern int sizeof_vax_call_dummy_words;

struct value;
#define FIX_CALL_DUMMY(dummyname, pc, fun, nargs, args, type, gcc_p) \
  vax_fix_call_dummy ((dummyname), (pc), (fun), (nargs), (args), (type), \
		      (gcc_p))
extern void vax_fix_call_dummy (char *, CORE_ADDR, CORE_ADDR, int,
                                struct value **, struct type *, int);

#define CALL_DUMMY_START_OFFSET 0 /* Start execution at beginning of dummy */

#define CALL_DUMMY_BREAKPOINT_OFFSET 7
a47 1

@


1.12
log
@* vax-tdep.c (vax_frame_chain): New function.
(vax_push_dummy_frame): Ditto.
(vax_pop_frame): Ditto.
* config/vax/tm-vax.h (FRAME_CHAIN): vax_frame_chain.
(FRAMELESS_FUNCTION_INVOCATION): Use
generic_frameless_function_invocation_not.
(PUSH_DUMMY_FRAME): Use vax_push_dummy_frame.
(POP_FRAME): Use vax_pop_frame.
@
text
@a21 2
#include "regcache.h"

a26 3
/* Advance PC across any function entry prologue instructions
   to reach some "real" code.  */

d30 2
a31 6
/* Immediately after a function call, return the saved pc.
   Can't always go through the frames for this because on some machines
   the new frame is not set up until the new function executes
   some instructions.  */

#define SAVED_PC_AFTER_CALL(frame) FRAME_SAVED_PC(frame)
d171 2
a172 4
/* This sequence of words is the instructions
   calls #69, @@#32323232
   bpt
   Note this is 8 bytes.  */
d174 2
a175 1
#define CALL_DUMMY {0x329f69fb, 0x03323232}
d177 8
a184 1
#define CALL_DUMMY_START_OFFSET 0	/* Start execution at beginning of dummy */
a186 7

/* Insert the specified number of args and function address
   into a call sequence of the above form stored at DUMMYNAME.  */

#define FIX_CALL_DUMMY(dummyname, pc, fun, nargs, args, type, gcc_p)   \
{ *((char *) dummyname + 1) = nargs;		\
  *(int *)((char *) dummyname + 3) = fun; }
@


1.11
log
@* vax-tdep.c (vax_store_struct_return): New function.
(vax_extract_return_value): Ditto.
(vax_store_return_value): Ditto.
(vax_extract_struct_value_address): Ditto.
* config/vax/tm-vax.h (STORE_STRUCT_RETURN): Use
vax_store_struct_return.
(EXTRACT_RETURN_VALUE): Use vax_extract_return_value.
(STORE_RETURN_VALUE): Use vax_store_return_value.
(EXTRACT_STRUCT_VALUE_ADDRESS): Use vax_extract_struct_value_address.
@
text
@d141 2
a142 2
/* Describe the pointer in each stack frame to the previous stack frame
   (its caller).  */
d144 2
a145 20
/* FRAME_CHAIN takes a frame's nominal address
   and produces the frame's chain-pointer. */

/* In the case of the Vax, the frame's nominal address is the FP value,
   and 12 bytes later comes the saved previous FP value as a 4-byte word.  */

#define FRAME_CHAIN(thisframe)  \
  (!inside_entry_file ((thisframe)->pc) ? \
   read_memory_integer ((thisframe)->frame + 12, 4) :\
   0)

/* Define other aspects of the stack frame.  */

/* A macro that tells us whether the function invocation represented
   by FI does not have a frame on the stack associated with it.  If it
   does not, FRAMELESS is set to 1, else 0.  */
/* On the vax, all functions have frames.  */
#define FRAMELESS_FUNCTION_INVOCATION(FI)  (0)

/* Saved Pc.  Get it from sigcontext if within sigtramp.  */
a163 3
/* Return number of args passed to a frame.
   Can return -1, meaning no way to tell.  */

d174 2
a175 3
/* Things needed for making the inferior call functions.  */

/* Push an empty stack frame, to record the current PC, etc.  */
d177 2
a178 39
#define PUSH_DUMMY_FRAME \
{ register CORE_ADDR sp = read_register (SP_REGNUM);\
  register int regnum;				    \
  sp = push_word (sp, 0); /* arglist */		    \
  for (regnum = 11; regnum >= 0; regnum--)	    \
    sp = push_word (sp, read_register (regnum));    \
  sp = push_word (sp, read_register (PC_REGNUM));   \
  sp = push_word (sp, read_register (FP_REGNUM));   \
  sp = push_word (sp, read_register (AP_REGNUM));   \
  sp = push_word (sp, (read_register (PS_REGNUM) & 0xffef)   \
		      + 0x2fff0000);		    \
  sp = push_word (sp, 0); 			    \
  write_register (SP_REGNUM, sp);		    \
  write_register (FP_REGNUM, sp);		    \
  write_register (AP_REGNUM, sp + 17 * sizeof (int)); }

/* Discard from the stack the innermost frame, restoring all registers.  */

#define POP_FRAME  \
{ register CORE_ADDR fp = read_register (FP_REGNUM);		 \
  register int regnum;						 \
  register int regmask = read_memory_integer (fp + 4, 4);	 \
  write_register (PS_REGNUM, 					 \
		  (regmask & 0xffff)				 \
		  | (read_register (PS_REGNUM) & 0xffff0000));	 \
  write_register (PC_REGNUM, read_memory_integer (fp + 16, 4));  \
  write_register (FP_REGNUM, read_memory_integer (fp + 12, 4));  \
  write_register (AP_REGNUM, read_memory_integer (fp + 8, 4));   \
  fp += 16;							 \
  for (regnum = 0; regnum < 12; regnum++)			 \
    if (regmask & (0x10000 << regnum))				 \
      write_register (regnum, read_memory_integer (fp += 4, 4)); \
  fp = fp + 4 + ((regmask >> 30) & 3);				 \
  if (regmask & 0x20000000)					 \
    { regnum = read_memory_integer (fp, 4);			 \
      fp += (regnum + 1) * 4; }					 \
  write_register (SP_REGNUM, fp);				 \
  flush_cached_frames ();					 \
}
@


1.10
log
@* vax-tdep.c (vax_frame_saved_pc): New function.
(vax_frame_args_address_correct): Ditto.
(vax_frame_args_address): Ditto.
(vax_frame_locals_address): Ditto.
(vax_frame_num_args): Move code to be in proximity to
other frame-related functions.
* config/vax/tm-vax.h (INNER_THAN): Use core_addr_lessthan.
(FRAME_SAVED_PC): Use vax_frame_saved_pc.
(FRAME_ARGS_ADDRESS_CORRECT): Use vax_frame_args_address_correct.
(FRAME_ARGS_ADDRESS): Use vax_frame_args_address.
(FRAME_LOCALS_ADDRESS): Use vax_frame_locals_address.
@
text
@d125 2
a126 9
/* Store the address of the place in which to copy the structure the
   subroutine will return.  This is called from call_function. */

#define STORE_STRUCT_RETURN(ADDR, SP) \
  { write_register (1, (ADDR)); }

/* Extract from an array REGBUF containing the (raw) register state
   a function return value of type TYPE, and copy that, in virtual format,
   into VALBUF.  */
d129 2
a130 4
  memcpy (VALBUF, REGBUF, TYPE_LENGTH (TYPE))

/* Write into appropriate registers a function return value
   of type TYPE, given in virtual format.  */
d133 2
a134 5
  write_register_bytes (0, VALBUF, TYPE_LENGTH (TYPE))

/* Extract from an array REGBUF containing the (raw) register state
   the address in which a function should return its structure value,
   as a CORE_ADDR (or an expression that can be used as one).  */
d136 3
a138 1
#define EXTRACT_STRUCT_VALUE_ADDRESS(REGBUF) (*(int *)(REGBUF))
@


1.9
log
@* vax-tdep.c (vax_frame_init_saved_regs): New function.
* config/vax/tm-vax.h (FRAME_FIND_SAVED_REGS): Remove.
(FRAME_INIT_SAVED_REGS): New macro.
@
text
@d54 1
a54 1
#define INNER_THAN(lhs,rhs) ((lhs) < (rhs))
d176 1
d179 2
a180 27
#define FRAME_SAVED_PC(FRAME) \
  (((FRAME)->signal_handler_caller \
    ? sigtramp_saved_pc (FRAME) \
    : read_memory_integer ((FRAME)->frame + 16, 4)) \
   )

/* Cannot find the AP register value directly from the FP value.  Must
   find it saved in the frame called by this one, or in the AP
   register for the innermost frame.  However, there is no way to tell
   the difference between the innermost frame and a frame for which we
   just don't know the frame that it called (e.g. "info frame
   0x7ffec789").  For the sake of argument suppose that the stack is
   somewhat trashed (which is one reason that "info frame" exists).
   So return 0 (indicating we don't know the address of
   the arglist) if we don't know what frame this frame calls.  */
#define FRAME_ARGS_ADDRESS_CORRECT(fi) \
 (((fi)->next                                  \
   ? read_memory_integer ((fi)->next->frame + 8, 4)   \
   : /* read_register (AP_REGNUM) */ 0))

/* In most of GDB, getting the args address is too important to
   just say "I don't know".  This is sometimes wrong for functions
   that aren't on top of the stack, but c'est la vie.  */
#define FRAME_ARGS_ADDRESS(fi) \
 (((fi)->next                                  \
   ? read_memory_integer ((fi)->next->frame + 8, 4)   \
   : read_register (AP_REGNUM) /* 0 */))
d182 9
a190 1
#define FRAME_LOCALS_ADDRESS(fi) ((fi)->frame)
@


1.8
log
@* vax-tdep.c: Update copyright years.
(vax_register_name): New function.
(vax_register_byte): Ditto.
(vax_register_raw_size): Ditto.
(vax_register_virtual_size): Ditto.
(vax_register_virtual_type): Ditto.
* config/vax/tm-vax.h: Update copyright years.
(REGISTER_NAMES): Remove.
(REGISTER_NAME): Define.
(REGISTER_BYTE): Use vax_register_byte.
(REGISTER_RAW_SIZE): Use vax_register_raw_size.
(REGISTER_VIRTUAL_SIZE): Use vax_register_virtual_size.
(REGISTER_VIRTUAL_TYPE): Use vax_register_virtual_type.
@
text
@d218 2
a219 24
/* Put here the code to store, into a struct frame_saved_regs,
   the addresses of the saved registers of frame described by FRAME_INFO.
   This includes special registers such as pc and fp saved in special
   ways in the stack frame.  sp is even more special:
   the address we return for it IS the sp for the next frame.  */

#define FRAME_FIND_SAVED_REGS(frame_info, frame_saved_regs) \
{ register int regnum;     \
  register int regmask = read_memory_integer ((frame_info)->frame+4, 4) >> 16; \
  register CORE_ADDR next_addr;     \
  memset (&frame_saved_regs, '\0', sizeof frame_saved_regs);     \
  next_addr = (frame_info)->frame + 16;     \
  /* Regmask's low bit is for register 0,     \
     which is the first one that would be pushed.  */     \
  for (regnum = 0; regnum < 12; regnum++, regmask >>= 1)  \
    (frame_saved_regs).regs[regnum] = (regmask & 1) ? (next_addr += 4) : 0;  \
  (frame_saved_regs).regs[SP_REGNUM] = next_addr + 4;  \
  if (read_memory_integer ((frame_info)->frame + 4, 4) & 0x20000000)   \
    (frame_saved_regs).regs[SP_REGNUM] += 4 + 4 * read_memory_integer (next_addr + 4, 4);  \
  (frame_saved_regs).regs[PC_REGNUM] = (frame_info)->frame + 16;  \
  (frame_saved_regs).regs[FP_REGNUM] = (frame_info)->frame + 12;  \
  (frame_saved_regs).regs[AP_REGNUM] = (frame_info)->frame + 8;  \
  (frame_saved_regs).regs[PS_REGNUM] = (frame_info)->frame + 4;  \
}
@


1.7
log
@Eliminate TARGET_BYTE_ORDER.
@
text
@d2 1
a2 1
   Copyright 1986, 1987, 1989, 1991, 1993, 1994, 1996, 1998, 1999, 2000
d76 3
a78 4
/* Initializer for an array of names of registers.
   There should be NUM_REGS strings in this initializer.  */

#define REGISTER_NAMES {"r0", "r1", "r2", "r3", "r4", "r5", "r6", "r7", "r8", "r9", "r10", "r11", "ap", "fp", "sp", "pc", "ps"}
d99 2
a100 2

#define REGISTER_BYTE(N) ((N) * 4)
d104 2
a105 2

#define REGISTER_RAW_SIZE(N) 4
d109 2
a110 2

#define REGISTER_VIRTUAL_SIZE(N) 4
d122 2
a123 2

#define REGISTER_VIRTUAL_TYPE(N) builtin_type_int
@


1.6
log
@* config/vax/tm-vax.h (INVALID_FLOAT): Move macro from here...
* vax-tdep.c (INVALID_FLOAT): To here.  Document why it is broken.

* rs6000-tdep.c (rs6000_do_registers_info): Delete code wrapped in
#ifdef INVALID_FLOAT.
* infcmd.c (do_registers_info): Ditto.
* values.c (unpack_double): Ditto.  Add comment.

* config/ns32k/tm-umax.h (INVALID_FLOAT): Delete macro that was
already commented out.
@
text
@a23 2
#define TARGET_BYTE_ORDER BFD_ENDIAN_LITTLE

@


1.5
log
@LITTLE_ENDIAN -> BFD_ENDIAN_LITTLE
@
text
@a67 5
/* Return 1 if P points to an invalid floating point value.
   LEN is the length in bytes -- not relevant on the Vax.  */

#define INVALID_FLOAT(p, len) ((*(short *) p & 0xff80) == 0x8000)

@


1.4
log
@Include regcache.h
@
text
@d24 1
a24 1
#define TARGET_BYTE_ORDER LITTLE_ENDIAN
@


1.3
log
@Update/correct copyright notices.
@
text
@d22 1
@


1.2
log
@PARAMS removal.
@
text
@d2 2
a3 1
   Copyright 1986, 1987, 1989, 1991, 1993 Free Software Foundation, Inc.
@


1.1
log
@Initial revision
@
text
@d4 1
a4 1
This file is part of GDB.
d6 14
a19 13
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
d32 2
a33 20
#define SKIP_PROLOGUE(pc)	\
{ register int op = (unsigned char) read_memory_integer (pc, 1);  \
  if (op == 0x11) pc += 2;  /* skip brb */			  \
  if (op == 0x31) pc += 3;  /* skip brw */			  \
  if (op == 0xC2 &&						  \
      ((unsigned char) read_memory_integer (pc+2, 1)) == 0x5E)	  \
    pc += 3;  /* skip subl2 */					  \
  if (op == 0x9E &&						  \
      ((unsigned char) read_memory_integer (pc+1, 1)) == 0xAE &&  \
      ((unsigned char) read_memory_integer(pc+3, 1)) == 0x5E)	  \
     pc += 4;  /* skip movab */					  \
  if (op == 0x9E &&						  \
      ((unsigned char) read_memory_integer (pc+1, 1)) == 0xCE &&  \
      ((unsigned char) read_memory_integer(pc+4, 1)) == 0x5E)	  \
    pc += 5;  /* skip movab */					  \
  if (op == 0x9E &&						  \
      ((unsigned char) read_memory_integer (pc+1, 1)) == 0xEE &&  \
      ((unsigned char) read_memory_integer(pc+6, 1)) == 0x5E)	  \
    pc += 7;  /* skip movab */					  \
}
d155 1
a156 1

d177 1
a177 1
#define FRAMELESS_FUNCTION_INVOCATION(FI, FRAMELESS)  {(FRAMELESS) = 0;}
d217 2
a218 2
#define FRAME_NUM_ARGS(numargs, fi)  \
{ numargs = (0xff & read_memory_integer (FRAME_ARGS_ADDRESS (fi), 1)); }
d294 2
a295 2
     calls #69, @@#32323232
     bpt
d300 1
a300 1
#define CALL_DUMMY_START_OFFSET 0  /* Start execution at beginning of dummy */
@


1.1.1.1
log
@Initial creation of sourceware repository
@
text
@@


1.1.1.2
log
@import gdb-19990504 snapshot
@
text
@d31 20
a50 2
extern CORE_ADDR vax_skip_prologue PARAMS ((CORE_ADDR));
#define SKIP_PROLOGUE(pc) (vax_skip_prologue (pc))
@


1.1.1.3
log
@import gdb-1999-05-25 snapshot
@
text
@d176 1
a176 1
#define FRAMELESS_FUNCTION_INVOCATION(FI)  (0)
d216 2
a217 2
extern int vax_frame_num_args PARAMS ((struct frame_info *fi));
#define FRAME_NUM_ARGS(fi) (vax_frame_num_args ((fi)))
@


1.1.1.4
log
@import gdb-1999-07-07 post reformat
@
text
@d4 1
a4 1
   This file is part of GDB.
d6 13
a18 14
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */
d154 1
a155 1

d216 1
a216 1
extern int vax_frame_num_args PARAMS ((struct frame_info * fi));
d293 2
a294 2
   calls #69, @@#32323232
   bpt
d299 1
a299 1
#define CALL_DUMMY_START_OFFSET 0	/* Start execution at beginning of dummy */
@

