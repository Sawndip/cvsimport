head	1.37;
access;
symbols
	drow-reverse-20070409-branch:1.35.0.2
	drow-reverse-20070409-branchpoint:1.35
	gdb_6_7_1-2007-10-29-release:1.36
	gdb_6_7-2007-10-10-release:1.36
	gdb_6_7-branch:1.36.0.2
	gdb_6_7-2007-09-07-branchpoint:1.36
	insight_6_6-20070208-release:1.34
	gdb_6_6-2006-12-18-release:1.34
	gdb_6_6-branch:1.34.0.32
	gdb_6_6-2006-11-15-branchpoint:1.34
	insight_6_5-20061003-release:1.34
	gdb-csl-symbian-6_4_50_20060226-12:1.34
	gdb-csl-sourcerygxx-3_4_4-25:1.34
	nickrob-async-20060828-mergepoint:1.34
	gdb-csl-symbian-6_4_50_20060226-11:1.34
	gdb-csl-sourcerygxx-4_1-17:1.34
	gdb-csl-20060226-branch-local-2:1.34
	gdb-csl-sourcerygxx-4_1-14:1.34
	gdb-csl-sourcerygxx-4_1-13:1.34
	gdb-csl-sourcerygxx-4_1-12:1.34
	gdb-csl-sourcerygxx-3_4_4-21:1.34
	gdb_6_5-20060621-release:1.34
	gdb-csl-sourcerygxx-4_1-9:1.34
	gdb-csl-sourcerygxx-4_1-8:1.34
	gdb-csl-sourcerygxx-4_1-7:1.34
	gdb-csl-arm-2006q1-6:1.34
	gdb-csl-sourcerygxx-4_1-6:1.34
	gdb-csl-symbian-6_4_50_20060226-10:1.34
	gdb-csl-symbian-6_4_50_20060226-9:1.34
	gdb-csl-symbian-6_4_50_20060226-8:1.34
	gdb-csl-coldfire-4_1-11:1.34
	gdb-csl-sourcerygxx-3_4_4-19:1.34
	gdb-csl-coldfire-4_1-10:1.34
	gdb_6_5-branch:1.34.0.30
	gdb_6_5-2006-05-14-branchpoint:1.34
	gdb-csl-sourcerygxx-4_1-5:1.34
	nickrob-async-20060513-branch:1.34.0.28
	nickrob-async-20060513-branchpoint:1.34
	gdb-csl-sourcerygxx-4_1-4:1.34
	msnyder-reverse-20060502-branch:1.34.0.26
	msnyder-reverse-20060502-branchpoint:1.34
	gdb-csl-morpho-4_1-4:1.34
	gdb-csl-sourcerygxx-3_4_4-17:1.34
	readline_5_1-import-branch:1.34.0.24
	readline_5_1-import-branchpoint:1.34
	gdb-csl-20060226-branch-merge-to-csl-symbian-1:1.34
	gdb-csl-symbian-20060226-branch:1.34.0.22
	gdb-csl-symbian-20060226-branchpoint:1.34
	gdb-csl-20060226-branch-merge-to-csl-local-1:1.34
	msnyder-reverse-20060331-branch:1.34.0.20
	msnyder-reverse-20060331-branchpoint:1.34
	gdb-csl-available-20060303-branch:1.34.0.18
	gdb-csl-available-20060303-branchpoint:1.34
	gdb-csl-20060226-branch:1.34.0.16
	gdb-csl-20060226-branchpoint:1.34
	gdb_6_4-20051202-release:1.34
	msnyder-fork-checkpoint-branch:1.34.0.14
	msnyder-fork-checkpoint-branchpoint:1.34
	gdb-csl-gxxpro-6_3-branch:1.34.0.12
	gdb-csl-gxxpro-6_3-branchpoint:1.34
	gdb_6_4-branch:1.34.0.10
	gdb_6_4-2005-11-01-branchpoint:1.34
	gdb-csl-arm-20051020-branch:1.34.0.8
	gdb-csl-arm-20051020-branchpoint:1.34
	msnyder-tracepoint-checkpoint-branch:1.34.0.6
	msnyder-tracepoint-checkpoint-branchpoint:1.34
	gdb-csl-arm-20050325-2005-q1b:1.34
	gdb-csl-arm-20050325-2005-q1a:1.34
	csl-arm-20050325-branch:1.34.0.4
	csl-arm-20050325-branchpoint:1.34
	gdb-post-i18n-errorwarning-20050211:1.34
	gdb-pre-i18n-errorwarning-20050211:1.34
	gdb_6_3-20041109-release:1.34
	gdb_6_3-branch:1.34.0.2
	gdb_6_3-20041019-branchpoint:1.34
	drow_intercu-merge-20040921:1.34
	drow_intercu-merge-20040915:1.34
	jimb-gdb_6_2-e500-branch:1.33.0.22
	jimb-gdb_6_2-e500-branchpoint:1.33
	gdb_6_2-20040730-release:1.33
	gdb_6_2-branch:1.33.0.18
	gdb_6_2-2004-07-10-gmt-branchpoint:1.33
	gdb_6_1_1-20040616-release:1.33
	gdb_6_1-2004-04-05-release:1.33
	drow_intercu-merge-20040402:1.33
	drow_intercu-merge-20040327:1.33
	ezannoni_pie-20040323-branch:1.33.0.16
	ezannoni_pie-20040323-branchpoint:1.33
	cagney_tramp-20040321-mergepoint:1.33
	cagney_tramp-20040309-branch:1.33.0.14
	cagney_tramp-20040309-branchpoint:1.33
	gdb_6_1-branch:1.33.0.12
	gdb_6_1-2004-03-01-gmt-branchpoint:1.33
	drow_intercu-20040221-branch:1.33.0.10
	drow_intercu-20040221-branchpoint:1.33
	cagney_bfdfile-20040213-branch:1.33.0.8
	cagney_bfdfile-20040213-branchpoint:1.33
	drow-cplus-merge-20040208:1.33
	carlton_dictionary-20040126-merge:1.33
	cagney_bigcore-20040122-branch:1.33.0.6
	cagney_bigcore-20040122-branchpoint:1.33
	drow-cplus-merge-20040113:1.33
	drow-cplus-merge-20031224:1.33
	drow-cplus-merge-20031220:1.33
	carlton_dictionary-20031215-merge:1.33
	drow-cplus-merge-20031214:1.33
	carlton-dictionary-20031111-merge:1.33
	gdb_6_0-2003-10-04-release:1.32
	kettenis_sparc-20030918-branch:1.33.0.4
	kettenis_sparc-20030918-branchpoint:1.33
	carlton_dictionary-20030917-merge:1.33
	ezannoni_pie-20030916-branchpoint:1.33
	ezannoni_pie-20030916-branch:1.33.0.2
	cagney_x86i386-20030821-branch:1.32.0.54
	cagney_x86i386-20030821-branchpoint:1.32
	carlton_dictionary-20030805-merge:1.32
	carlton_dictionary-20030627-merge:1.32
	gdb_6_0-branch:1.32.0.52
	gdb_6_0-2003-06-23-branchpoint:1.32
	jimb-ppc64-linux-20030613-branch:1.32.0.50
	jimb-ppc64-linux-20030613-branchpoint:1.32
	cagney_convert-20030606-branch:1.32.0.48
	cagney_convert-20030606-branchpoint:1.32
	cagney_writestrings-20030508-branch:1.32.0.46
	cagney_writestrings-20030508-branchpoint:1.32
	jimb-ppc64-linux-20030528-branch:1.32.0.44
	jimb-ppc64-linux-20030528-branchpoint:1.32
	carlton_dictionary-20030523-merge:1.32
	cagney_fileio-20030521-branch:1.32.0.42
	cagney_fileio-20030521-branchpoint:1.32
	kettenis_i386newframe-20030517-mergepoint:1.32
	jimb-ppc64-linux-20030509-branch:1.32.0.40
	jimb-ppc64-linux-20030509-branchpoint:1.32
	kettenis_i386newframe-20030504-mergepoint:1.32
	carlton_dictionary-20030430-merge:1.32
	kettenis_i386newframe-20030419-branch:1.32.0.38
	kettenis_i386newframe-20030419-branchpoint:1.32
	carlton_dictionary-20030416-merge:1.32
	cagney_frameaddr-20030409-mergepoint:1.32
	kettenis_i386newframe-20030406-branch:1.32.0.36
	kettenis_i386newframe-20030406-branchpoint:1.32
	cagney_frameaddr-20030403-branchpoint:1.32
	cagney_frameaddr-20030403-branch:1.32.0.34
	cagney_framebase-20030330-mergepoint:1.32
	cagney_framebase-20030326-branch:1.32.0.32
	cagney_framebase-20030326-branchpoint:1.32
	cagney_lazyid-20030317-branch:1.32.0.30
	cagney_lazyid-20030317-branchpoint:1.32
	kettenis-i386newframe-20030316-mergepoint:1.32
	offbyone-20030313-branch:1.32.0.28
	offbyone-20030313-branchpoint:1.32
	kettenis-i386newframe-20030308-branch:1.32.0.26
	kettenis-i386newframe-20030308-branchpoint:1.32
	carlton_dictionary-20030305-merge:1.32
	cagney_offbyone-20030303-branch:1.32.0.24
	cagney_offbyone-20030303-branchpoint:1.32
	carlton_dictionary-20030207-merge:1.32
	interps-20030203-mergepoint:1.32
	interps-20030202-branch:1.32.0.22
	interps-20030202-branchpoint:1.32
	cagney-unwind-20030108-branch:1.32.0.20
	cagney-unwind-20030108-branchpoint:1.32
	carlton_dictionary-20021223-merge:1.32
	gdb_5_3-2002-12-12-release:1.32
	carlton_dictionary-20021115-merge:1.32
	kseitz_interps-20021105-merge:1.32
	kseitz_interps-20021103-merge:1.32
	drow-cplus-merge-20021020:1.32
	drow-cplus-merge-20021025:1.32
	carlton_dictionary-20021025-merge:1.32
	carlton_dictionary-20021011-merge:1.32
	drow-cplus-branch:1.32.0.18
	drow-cplus-branchpoint:1.32
	kseitz_interps-20020930-merge:1.32
	carlton_dictionary-20020927-merge:1.32
	carlton_dictionary-branch:1.32.0.16
	carlton_dictionary-20020920-branchpoint:1.32
	gdb_5_3-branch:1.32.0.14
	gdb_5_3-2002-09-04-branchpoint:1.32
	kseitz_interps-20020829-merge:1.32
	cagney_sysregs-20020825-branch:1.32.0.12
	cagney_sysregs-20020825-branchpoint:1.32
	readline_4_3-import-branch:1.32.0.10
	readline_4_3-import-branchpoint:1.32
	gdb_5_2_1-2002-07-23-release:1.32
	kseitz_interps-20020528-branch:1.32.0.8
	kseitz_interps-20020528-branchpoint:1.32
	cagney_regbuf-20020515-branch:1.32.0.6
	cagney_regbuf-20020515-branchpoint:1.32
	jimb-macro-020506-branch:1.32.0.4
	jimb-macro-020506-branchpoint:1.32
	gdb_5_2-2002-04-29-release:1.32
	gdb_5_2-branch:1.32.0.2
	gdb_5_2-2002-03-03-branchpoint:1.32
	gdb_5_1_1-2002-01-24-release:1.7
	gdb_5_1_0_1-2002-01-03-release:1.7
	cygnus_cvs_20020108_pre:1.12
	gdb_5_1_0_1-2002-01-03-branchpoint:1.7
	gdb_5_1_0_1-2002-01-03-branch:1.7.0.8
	gdb_5_1-2001-11-21-release:1.7
	gdb_s390-2001-09-26-branch:1.7.0.6
	gdb_s390-2001-09-26-branchpoint:1.7
	gdb_5_1-2001-07-29-branch:1.7.0.4
	gdb_5_1-2001-07-29-branchpoint:1.7
	dberlin-typesystem-branch:1.7.0.2
	dberlin-typesystem-branchpoint:1.7
	gdb-post-ptid_t-2001-05-03:1.6
	gdb-pre-ptid_t-2001-05-03:1.6
	insight-precleanup-2001-01-01:1.4
	gdb-post-protoization-2000-07-29:1.3
	gdb-pre-protoization-2000-07-29:1.3
	gdb-premipsmulti-2000-06-06-branch:1.3.0.2
	gdb-premipsmulti-2000-06-06-branchpoint:1.3
	gdb-post-params-removal-2000-06-04:1.3
	gdb-pre-params-removal-2000-06-04:1.3
	gdb-post-params-removal-2000-05-28:1.3
	gdb-pre-params-removal-2000-05-28:1.3
	gdb_5_0-2000-05-19-release:1.2
	gdb_4_18_2-2000-05-18-release:1.2
	gdb_4_95_1-2000-05-11-snapshot:1.2
	gdb_4_95_0-2000-04-27-snapshot:1.2
	gdb_5_0-2000-04-10-branch:1.2.0.2
	gdb_5_0-2000-04-10-branchpoint:1.2
	repo-unification-2000-02-06:1.1.1.9
	insight-2000-02-04:1.1.1.9
	gdb-2000-02-04:1.1.1.9
	gdb-2000-02-02:1.1.1.8
	gdb-2000-02-01:1.1.1.8
	gdb-2000-01-31:1.1.1.8
	gdb-2000-01-26:1.1.1.8
	gdb-2000-01-24:1.1.1.8
	gdb-2000-01-17:1.1.1.8
	gdb-2000-01-10:1.1.1.8
	gdb-2000-01-05:1.1.1.8
	gdb-1999-12-21:1.1.1.8
	gdb-1999-12-13:1.1.1.7
	gdb-1999-12-07:1.1.1.7
	gdb-1999-12-06:1.1.1.7
	gdb-1999-11-16:1.1.1.7
	gdb-1999-11-08:1.1.1.7
	gdb-1999-11-01:1.1.1.7
	gdb-1999-10-25:1.1.1.7
	gdb-1999-10-18:1.1.1.7
	gdb-1999-10-11:1.1.1.7
	gdb-1999-10-04:1.1.1.7
	gdb-1999-09-28:1.1.1.7
	gdb-1999-09-21:1.1.1.7
	gdb-1999-09-13:1.1.1.7
	gdb-1999-09-08:1.1.1.7
	gdb-1999-08-30:1.1.1.7
	gdb-1999-08-23:1.1.1.6
	gdb-1999-08-16:1.1.1.6
	gdb-1999-08-09:1.1.1.6
	gdb-1999-08-02:1.1.1.5
	gdb-1999-07-26:1.1.1.5
	gdb-1999-07-19:1.1.1.5
	gdb-1999-07-12:1.1.1.5
	gdb-post-reformat-19990707:1.1.1.5
	gdb-1999-07-07-post-reformat-snapshot:1.1.1.5
	gdb-pre-reformat-19990707:1.1.1.4
	gdb-1999-07-07:1.1.1.4
	gdb-1999-07-05:1.1.1.4
	gdb-1999-06-28:1.1.1.4
	gdb-1999-06-21:1.1.1.4
	gdb-1999-06-14:1.1.1.4
	gdb-1999-06-07:1.1.1.4
	gdb-1999-06-01:1.1.1.4
	gdb-4_18-branch:1.1.1.1.0.2
	gdb-4_18-release:1.1.1.1
	gdb-1999-05-25:1.1.1.4
	gdb-1999-05-19:1.1.1.3
	gdb-1999-05-10:1.1.1.3
	gdb-19990504:1.1.1.3
	gdb-19990422:1.1.1.2
	SNAPSHOT:1.1.1
	gdb-4_18:1.1.1.1
	GDB_4_18:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.37
date	2007.10.11.19.01.42;	author drow;	state dead;
branches;
next	1.36;

1.36
date	2007.08.23.18.08.47;	author brobecke;	state Exp;
branches;
next	1.35;

1.35
date	2007.01.09.17.59.03;	author drow;	state Exp;
branches;
next	1.34;

1.34
date	2004.09.02.14.17.38;	author cagney;	state Exp;
branches;
next	1.33;

1.33
date	2003.08.22.00.35.31;	author cagney;	state Exp;
branches
	1.33.10.1;
next	1.32;

1.32
date	2002.02.18.16.42.54;	author rearnsha;	state Exp;
branches
	1.32.16.1
	1.32.18.1;
next	1.31;

1.31
date	2002.02.18.15.04.19;	author rearnsha;	state Exp;
branches;
next	1.30;

1.30
date	2002.02.15.16.12.24;	author rearnsha;	state Exp;
branches;
next	1.29;

1.29
date	2002.02.15.13.35.27;	author rearnsha;	state Exp;
branches;
next	1.28;

1.28
date	2002.02.14.19.00.58;	author corinna;	state Exp;
branches;
next	1.27;

1.27
date	2002.02.13.16.32.34;	author rearnsha;	state Exp;
branches;
next	1.26;

1.26
date	2002.02.11.18.34.12;	author rearnsha;	state Exp;
branches;
next	1.25;

1.25
date	2002.02.11.12.42.03;	author rearnsha;	state Exp;
branches;
next	1.24;

1.24
date	2002.02.08.18.26.37;	author rearnsha;	state Exp;
branches;
next	1.23;

1.23
date	2002.02.06.15.21.17;	author rearnsha;	state Exp;
branches;
next	1.22;

1.22
date	2002.02.06.13.00.47;	author rearnsha;	state Exp;
branches;
next	1.21;

1.21
date	2002.02.04.11.55.36;	author rearnsha;	state Exp;
branches;
next	1.20;

1.20
date	2002.02.01.13.39.43;	author rearnsha;	state Exp;
branches;
next	1.19;

1.19
date	2002.01.30.16.35.51;	author rearnsha;	state Exp;
branches;
next	1.18;

1.18
date	2002.01.29.03.51.16;	author cagney;	state Exp;
branches;
next	1.17;

1.17
date	2002.01.21.17.36.11;	author rearnsha;	state Exp;
branches;
next	1.16;

1.16
date	2002.01.21.16.27.42;	author rearnsha;	state Exp;
branches;
next	1.15;

1.15
date	2002.01.20.19.26.48;	author cagney;	state Exp;
branches;
next	1.14;

1.14
date	2002.01.20.18.05.52;	author cagney;	state Exp;
branches;
next	1.13;

1.13
date	2002.01.09.18.39.37;	author rearnsha;	state Exp;
branches;
next	1.12;

1.12
date	2002.01.05.04.30.24;	author cagney;	state Exp;
branches;
next	1.11;

1.11
date	2001.12.19.17.57.42;	author fnasser;	state Exp;
branches;
next	1.10;

1.10
date	2001.12.17.17.03.58;	author fnasser;	state Exp;
branches;
next	1.9;

1.9
date	2001.12.15.16.53.23;	author cagney;	state Exp;
branches;
next	1.8;

1.8
date	2001.11.14.08.18.33;	author cagney;	state Exp;
branches;
next	1.7;

1.7
date	2001.07.04.19.57.53;	author cagney;	state Exp;
branches;
next	1.6;

1.6
date	2001.03.14.23.23.09;	author cagney;	state Exp;
branches;
next	1.5;

1.5
date	2001.03.06.08.21.21;	author kevinb;	state Exp;
branches;
next	1.4;

1.4
date	2000.09.06.18.43.49;	author scottb;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.14.19.12.49;	author jimb;	state Exp;
branches;
next	1.2;

1.2
date	2000.04.07.22.26.11;	author scottb;	state Exp;
branches;
next	1.1;

1.1
date	99.04.16.01.34.15;	author shebs;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.16.01.34.15;	author shebs;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.04.26.18.26.11;	author shebs;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	99.05.05.14.43.18;	author shebs;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	99.05.25.18.04.13;	author jsm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	99.07.07.20.12.07;	author jsm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	99.08.09.21.34.12;	author jsm;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	99.08.31.01.06.48;	author jsm;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	99.12.22.21.45.13;	author jsm;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2000.02.05.07.29.52;	author jsm;	state Exp;
branches;
next	;

1.32.16.1
date	2003.09.17.21.28.38;	author carlton;	state Exp;
branches;
next	;

1.32.18.1
date	2003.12.14.20.27.35;	author drow;	state Exp;
branches;
next	;

1.33.10.1
date	2004.09.16.17.01.28;	author drow;	state Exp;
branches;
next	;


desc
@@


1.37
log
@	* dbxread.c (process_one_symbol): Remove VARIABLES_INSIDE_BLOCK
	checks.
	* config/arm/embed.mt, config/arm/linux.mt, config/arm/wince.mt: Do
	not set DEPRECATED_TM_FILE.
	* config/arm/tm-arm.h: Delete file.

	* gdbint.texinfo (Target Conditionals): Remove VARIABLES_INSIDE_BLOCK.
@
text
@/* Definitions to target GDB to ARM targets.
   Copyright 1986, 1987, 1988, 1989, 1991, 1993, 1994, 1995, 1996, 1997, 1998,
   1999, 2000, 2001, 2002, 2007 Free Software Foundation, Inc.

   This file is part of GDB.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

#ifndef TM_ARM_H
#define TM_ARM_H

/* Specify that for the native compiler variables for a particular
   lexical context are listed after the beginning LBRAC instead of
   before in the executables list of symbols.  */
#define VARIABLES_INSIDE_BLOCK(desc, gcc_p) (!(gcc_p))

#endif /* TM_ARM_H */
@


1.36
log
@        Switch the license of all .c files to GPLv3.
        Switch the license of all .h files to GPLv3.
        Switch the license of all .cc files to GPLv3.
@
text
@@


1.35
log
@Copyright updates for 2007.
@
text
@d9 1
a9 1
   the Free Software Foundation; either version 2 of the License, or
d18 1
a18 3
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */
@


1.34
log
@2004-09-02  Andrew Cagney  <cagney@@gnu.org>

	* config/sparc/tm-vxworks.h (GDB_MULTI_ARCH): Delete.
	* config/sparc/tm-sol2.h (GDB_MULTI_ARCH): Delete.
	* config/sparc/tm-nbsd.h (GDB_MULTI_ARCH): Delete.
	* config/sparc/tm-linux.h (GDB_MULTI_ARCH): Delete.
	* config/sparc/tm-fbsd.h (GDB_MULTI_ARCH): Delete.
	* config/sh/tm-sh.h (GDB_MULTI_ARCH): Delete.
	* config/rs6000/tm-rs6000.h (GDB_MULTI_ARCH): Delete.
	* config/pa/tm-hppa.h (GDB_MULTI_ARCH): Delete.
	* config/mips/tm-mips.h (GDB_MULTI_ARCH): Delete.
	* config/ia64/tm-ia64.h (GDB_MULTI_ARCH): Delete.
	* config/cris/tm-cris.h (GDB_MULTI_ARCH): Delete.
	* config/arm/tm-arm.h (GDB_MULTI_ARCH): Delete.
@
text
@d2 2
a3 2
   Copyright 1986, 1987, 1988, 1989, 1991, 1993, 1994, 1995, 1996, 1997,
   1998, 1999, 2000, 2001, 2002 Free Software Foundation, Inc.
@


1.33
log
@2003-08-21  Andrew Cagney  <cagney@@redhat.com>

	* config/sparc/tm-sp64.h: Delete #if !GDB_MULTI_ARCH and #if 0 code.
	* config/sparc/tm-sparc.h: Ditto.
	* config/arm/tm-arm.h (GDB_MULTI_ARCH): Define GDB_MULTI_ARCH
	unconditionally.
	* config/pa/tm-hppa.h (GDB_MULTI_ARCH): Ditto.
@
text
@a24 2
#define GDB_MULTI_ARCH 1

@


1.33.10.1
log
@Merge mainline to intercu branch - 2004-09-15
@
text
@d25 2
@


1.32
log
@* arm-tdep.c (arm_set_call_dummy_breakpoint_offset): New function.
(arm_fix_call_dummy): Call it.
(arm_call_dummy_breakpoint_offset): Delete.
(arm_gdbarch_init): Initialize call_dummy_breakpoint_offset.
* config/arm/tm-arm.h (CALL_DUMMY_BREAKPOINT_OFFSET): Delete.
@
text
@a24 1
#ifndef GDB_MULTI_ARCH
a25 1
#endif
@


1.32.18.1
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@d25 1
d27 1
@


1.32.16.1
log
@2003-09-17  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton_dictionary-20030917-merge.
@
text
@d25 1
d27 1
@


1.31
log
@* arm-tdep.c (arm_gdbarch_init): Initialize coerce_float_to_double.
* config/arm/tm-arm.h (COERCE_FLOAT_TO_DOUBLE): Delete.
@
text
@a32 4

/* XXX This is NOT multi-arch compatible.  */
#define CALL_DUMMY_BREAKPOINT_OFFSET arm_call_dummy_breakpoint_offset()
extern int arm_call_dummy_breakpoint_offset (void);
@


1.30
log
@* arm-tdep.h (struct gdbarch_tdep): Add fields for breakpoint
descriptions.
* arm-tdep.c (arm_default_arm_le_breakpoint)
(arm_default_arm_be_breakpoint, arm_default_thumb_le_breakpoint)
(arm_default_thumb_be_breakpoint): New.  Initialize them from
traditional breakpoint defines.
(arm_breakpoint_from_pc): Use new gdbarch_tdep entries.
(arm_gdbarch_init): Initialize new breakpoint variables.
* arm-linux-tdep.c (arm_linux_arm_le_breakpoint): New.
(arm_linux_init_abi): Initialize linux-specific breakpoint.
* armnbsd-tdep.c (arm_nbsd_arm_le_breakpoint): New.
(arm_netbsd_aout_init_abi, arm_netbsd_elf_init_abi): Split common
code out to ...
(arm_netbsd_init_abi_common): ... here; new function.
* config/arm/tm-arm.h (ARM_LE_BREAKPOINT, ARM_BE_BREAKPOINT)
(THUMB_LE_BREAKPOINT, THUMB_BE_BREAKPOINT): Delete.
* config/arm/tm-linux.h (ARM_LE_BREAKPOINT): Delete.
* config/arm/tm-nbsd.h (ARM_LE_BREAKPOINT): Delete.
@
text
@a37 2
#define COERCE_FLOAT_TO_DOUBLE(formal, actual) (standard_coerce_float_to_double (formal, actual))

@


1.29
log
@* arm-tdep.h (enum arm_abi): New enum.
(struct gdbarch_tdep): New structure.
(LOWEST_PC): Provide a default.
(arm_gdbarch_register_os_abi): Declare new function.
* arm-tdep.c (arm_abi_names): New array.
(process_note_abi_tag_sections): New function.
(get_elfosabi): New function.
(arm_gdbarch_register_os_abi): New function.
(arm_gdbarch_init): Try to determine the ABI of the inferior.  If
support for that ABI has been built in, then call the appropriate
configuration routine.  Use gdbarch_num_regs() to get the number
of registers.
(arm_dump_tdep): New function.
(arm_init_abi_eabi_v1, arm_init_abi_eabi_v2, arm_init_abi_apcs): New
place-holder functions.
(_initialize_arm_tdep): Register them.
* config/arm/tm-arm.h (LOWEST_PC): Delete.

* armnbsd-tdep.c: New file.
* Makefile.in (armnbsd-tdep.o): Add dependencies.
* config/arm/nbsd.mt (TDEPFILES): Add it.
* config/arm/tm-nbsd.h (LOWEST_PC): Delete.

* armnbsd-nat.c: Include regcache.h.
* Makefile.in (armnbsd-nat.o): Update dependency list.

* arm-tdep.c (arm_get_next_pc): Use printf_filtered for error message.
@
text
@a28 35
/* The following define instruction sequences that will cause ARM
   cpu's to take an undefined instruction trap.  These are used to
   signal a breakpoint to GDB.
   
   The newer ARMv4T cpu's are capable of operating in ARM or Thumb
   modes.  A different instruction is required for each mode.  The ARM
   cpu's can also be big or little endian.  Thus four different
   instructions are needed to support all cases.
   
   Note: ARMv4 defines several new instructions that will take the
   undefined instruction trap.  ARM7TDMI is nominally ARMv4T, but does
   not in fact add the new instructions.  The new undefined
   instructions in ARMv4 are all instructions that had no defined
   behaviour in earlier chips.  There is no guarantee that they will
   raise an exception, but may be treated as NOP's.  In practice, it
   may only safe to rely on instructions matching:
   
   3 3 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 
   1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0
   C C C C 0 1 1 x x x x x x x x x x x x x x x x x x x x 1 x x x x
   
   Even this may only true if the condition predicate is true. The
   following use a condition predicate of ALWAYS so it is always TRUE.
   
   There are other ways of forcing a breakpoint.  ARM Linux, RISC iX,
   and NetBSD will all use a software interrupt rather than an
   undefined instruction to force a trap.  This can be handled by
   redefining some or all of the following in a target dependent
   fashion.  */

#define ARM_LE_BREAKPOINT {0xFE,0xDE,0xFF,0xE7}
#define ARM_BE_BREAKPOINT {0xE7,0xFF,0xDE,0xFE}
#define THUMB_LE_BREAKPOINT {0xfe,0xdf}
#define THUMB_BE_BREAKPOINT {0xdf,0xfe}

@


1.28
log
@	* arm-tdep.c (arm_push_arguments): Eliminate special float type
	handling.
	* config/arm/tm-arm.h (COERCE_FLOAT_TO_DOUBLE): Define to call
	standard_coerce_float_to_double().
@
text
@a72 3
/* The first 0x20 bytes are the trap vectors.  */
#define LOWEST_PC	0x20

@


1.27
log
@* arm-tdep.c (arm_use_struct_convention): Make static.  Move to be
with other related struct-returning functions.
(arm_extract_struct_value_address): New function.
(arm_gdbarch_init): Initialize the above in multi-arch vector.  Also
initialize float_format, double_format and long_double_format as
appropriate to the endianness of the target.
* config/arm/tm-arm.h (TARGET_DOUBLE_FORMAT): Delete.
(arm_use_struct_convention): Delete declaration.
(USE_STRUCT_CONVENTION, EXTRACT_STRUCT_VALUE_ADDRESS): Delete.
@
text
@d76 2
@


1.26
log
@* arm-tdep.h: New file.
* arm-tdep.c: Include arm-tdep.h.
(arm_addr_bits_remove, arm_smash_text_address, arm_saved_pc_after_call)
(arm_skip_prologue, arm_call_dummy_words, arm_fix_call_dummy)
(arm_print_float_info, arm_register_type, convert_to_extended)
(arm_elf_make_msymbols_special, arm_coff_make_msymbol_special)
(arm_extract_return_value, arm_register_name): Make static.
(arm_software_single_step): Similarly.  Fix types in declaration.
(arm_register_byte, arm_register_raw_size, arm_register_virtual_size)
(arm_store_return_value, arm_store_struct_return): New functions.
(arm_gdbarch_init): Register the above functions.  Also register
call_dummy_start_offset, sizeof_call_dummy_words,
function_start_offset, inner_than, decr_pc_after_break, fp_regnum,
sp_regnum, pc_regnum, register_bytes, num_regs, max_register_raw_size,
max_register_virtual_size, register_size.  Set up
prologue_cache.saved_regs here, rather than ...
(_initialize_arm_tdep): ... here.
* config/arm/tm-arm.h (struct type, struct value): Delete forward
declarations.
(arm_addr_bits_remove, arm_smash_text_address, arm_saved_pc_after_call)
(arm_skip_prologue, arm_call_dummy_words, arm_fix_call_dummy)
(arm_print_float_info, arm_register_type, convert_to_extended)
(arm_elf_make_msymbols_special, arm_coff_make_msymbol_special)
(arm_extract_return_value, arm_register_name): Delete declarations.
(SMASH_TEXT_ADDRESS, ADDR_BITS_REMOVE, FUNCTION_START_OFFSET)
(SKIP_PROLOGUE, SAVED_PC_AFTER_CALL, INNER_THAN, BREAKPOINT_FROM_PC)
(DECR_PC_AFTER_BREAK, PRINT_FLOAT_INFO, REGISTER_SIZE, NUM_REGS)
(REGISTER_NAME, REGISTER_BYTES, REGISTER_BYTE, REGISTER_RAW_SIZE)
(REGISTER_VIRTUAL_SIZE, MAX_REGISTER_RAW_SIZE)
(MAX_REGISTER_VIRTUAL_SIZE, REGISTER_VIRTUAL_TYPE, STORE_STRUCT_RETURN)
(EXTRACT_RETURN_VALUE, STORE_RETURN_VALUE, CALL_DUMMY_WORDS)
(SIZEOF_CALL_DUMMY_WORDS, CALL_DUMMY_START_OFFSET, FIX_CALL_DUMMY)
(SOFTWARE_SINGLE_STEP_P, SOFTWARE_SINGLE_STEP)
(ELF_MAKE_MSYMBOL_SPECIAL, COFF_MAKE_MSYMBOL_SPECIAL) Delete.
(arm_pc_is_thumb, arm_pc_is_thumb_dummy, thumb_get_next_pc)
(arm_get_next_pc): No-longer static -- these are needed by the RDI
interface.
* arm-linux-nat.c arm-linux-tdep.c armnbsd-nat.c: Include arm-tdep.h.
* remote-rdi.c remote-rdp.c: Likewise.
* Makefile.in (arm-linux-nat.o, arm-linux-tdep.o arm-tdep.o)
(armnbsd-nat.o, remote-rdi.o, remote_rdp.o): Update dependencies.
* config/arm/tm-nbsd.h (SOFTWARE_SINGLE_STEP_P): Delete bogus
definition.

* arm-tdep.h (ARM_A1_REGNUM, ARM_A4_REGNUM, ARM_AP_REGNUM)
(ARM_SP_REGNUM, ARM_LR_REGNUM, ARM_PC_REGNUM, ARM_F0_REGNUM)
(ARM_F3_REGNUM, ARM_F7_REGNUM, ARM_FPS_REGNUM, ARM_PS_REGNUM): Renamed
from non-ARM_ prefixed definitions.
* arm-tdep.c armnbsd-nat.c arm-linux-nat.c arm-linux-tdep.c: Update
all uses of above.
* remote-rdi.c remote-rdp.c: Likewise.
* arm-linux-nat.c (ARM_CPSR_REGNUM): Renamed from CPSR_REGNUM.
@
text
@a28 8
#include "regcache.h"
#include "floatformat.h"

/* IEEE format floating point.  */
#define TARGET_DOUBLE_FORMAT  (TARGET_BYTE_ORDER == BFD_ENDIAN_BIG \
			       ? &floatformat_ieee_double_big	 \
			       : &floatformat_ieee_double_littlebyte_bigword)

a62 12

/* The system C compiler uses a similar structure return convention to gcc */
extern use_struct_convention_fn arm_use_struct_convention;
#define USE_STRUCT_CONVENTION(gcc_p, type) \
     arm_use_struct_convention (gcc_p, type)

/* Extract from an array REGBUF containing the (raw) register state
   the address in which a function should return its structure value,
   as a CORE_ADDR (or an expression that can be used as one).  */

#define EXTRACT_STRUCT_VALUE_ADDRESS(REGBUF) \
  (extract_address ((PTR)(REGBUF), REGISTER_RAW_SIZE(0)))
@


1.25
log
@* arm-tdep.c (arm_frameless_function_invocation)
(arm_frame_args_address, arm_frame_locals_address, arm_frame_num_args)
(arm_frame_chain, arm_init_extra_frame_info, arm_frame_saved_pc)
(arm_read_fp, arm_frame_init_saved_regs, arm_push_dummy_frame)
(arm_pop_frame, arm_get_next_pc): Make static.
(arm_gdbarch_init): Register above in gdbarch structure.
(arm_read_fp): Renamed from arm_target_read_fp.
(arm_pc_is_thumb, arm_pc_is_thumb_dummy): Make static.
* config/arm/tm-arm.h (arm_frameless_function_invocation)
(arm_frame_args_address, arm_frame_locals_address, arm_frame_num_args)
(arm_frame_chain, arm_init_extra_frame_info, arm_frame_saved_pc)
(arm_target_read_fp, arm_frame_init_saved_regs, arm_push_dummy_frame)
(arm_pop_frame, arm_get_next_pc, arm_pc_is_thumb)
(arm_pc_is_thumb_dummy): Delete declarations.
@
text
@a31 4
/* Forward declarations for prototypes.  */
struct type;
struct value;

a36 27
CORE_ADDR arm_smash_text_address(CORE_ADDR);
#define SMASH_TEXT_ADDRESS(ADDR) arm_smash_text_address (ADDR)

CORE_ADDR arm_addr_bits_remove (CORE_ADDR);
#define ADDR_BITS_REMOVE(VAL)	arm_addr_bits_remove (VAL)

/* Offset from address of function to start of its code.  Zero on most
   machines.  */

#define FUNCTION_START_OFFSET	0

/* Advance PC across any function entry prologue instructions to reach
   some "real" code.  */

extern CORE_ADDR arm_skip_prologue (CORE_ADDR pc);

#define SKIP_PROLOGUE(pc)  (arm_skip_prologue (pc))

/* Immediately after a function call, return the saved pc.  Can't
   always go through the frames for this because on some machines the
   new frame is not set up until the new function executes some
   instructions.  */

#define SAVED_PC_AFTER_CALL(frame)  arm_saved_pc_after_call (frame)
struct frame_info;
extern CORE_ADDR arm_saved_pc_after_call (struct frame_info *);

a71 164
/* Stack grows downward.  */

#define INNER_THAN(lhs,rhs) ((lhs) < (rhs))

/* !!!! if we're using RDP, then we're inserting breakpoints and
   storing their handles instread of what was in memory.  It is nice
   that this is the same size as a handle - otherwise remote-rdp will
   have to change. */

/* BREAKPOINT_FROM_PC uses the program counter value to determine
   whether a 16- or 32-bit breakpoint should be used.  It returns a
   pointer to a string of bytes that encode a breakpoint instruction,
   stores the length of the string to *lenptr, and adjusts the pc (if
   necessary) to point to the actual memory location where the
   breakpoint should be inserted.  */

extern breakpoint_from_pc_fn arm_breakpoint_from_pc;
#define BREAKPOINT_FROM_PC(pcptr, lenptr) arm_breakpoint_from_pc (pcptr, lenptr)

/* Amount PC must be decremented by after a breakpoint.  This is often
   the number of bytes in BREAKPOINT but not always.  */

#define DECR_PC_AFTER_BREAK 0

void arm_print_float_info (void);
#define PRINT_FLOAT_INFO()	arm_print_float_info ()

/* Say how long (ordinary) registers are.  This is a piece of bogosity
   used in push_word and a few other places; REGISTER_RAW_SIZE is the
   real way to know how big a register is.  */

#define REGISTER_SIZE	4

/* Say how long FP registers are.  Used for documentation purposes and
   code readability in this header.  IEEE extended doubles are 80
   bits.  DWORD aligned they use 96 bits.  */
#define FP_REGISTER_RAW_SIZE	12

/* GCC doesn't support long doubles (extended IEEE values).  The FP
   register virtual size is therefore 64 bits.  Used for documentation
   purposes and code readability in this header.  */
#define FP_REGISTER_VIRTUAL_SIZE	8

/* Status registers are the same size as general purpose registers.
   Used for documentation purposes and code readability in this
   header.  */
#define STATUS_REGISTER_SIZE	REGISTER_SIZE

/* Number of machine registers.  The only define actually required 
   is NUM_REGS.  The other definitions are used for documentation
   purposes and code readability.  */
/* For 26 bit ARM code, a fake copy of the PC is placed in register 25 (PS)
   (and called PS for processor status) so the status bits can be cleared
   from the PC (register 15).  For 32 bit ARM code, a copy of CPSR is placed
   in PS.  */
#define NUM_FREGS	8	/* Number of floating point registers.  */
#define NUM_SREGS	2	/* Number of status registers.  */
#define NUM_GREGS	16	/* Number of general purpose registers.  */
#define NUM_REGS	(NUM_GREGS + NUM_FREGS + NUM_SREGS)

/* An array of names of registers. */
extern char **arm_register_names;

#define REGISTER_NAME(i) arm_register_name(i)
char *arm_register_name (int);

/* Register numbers of various important registers.  Note that some of
   these values are "real" register numbers, and correspond to the
   general registers of the machine, and some are "phony" register
   numbers which are too large to be actual register numbers as far as
   the user is concerned but do serve to get the desired values when
   passed to read_register.  */

#define A1_REGNUM 0		/* first integer-like argument */
#define A4_REGNUM 3		/* last integer-like argument */
#define AP_REGNUM 11
#define FP_REGNUM 11		/* Contains address of executing stack frame */
#define SP_REGNUM 13		/* Contains address of top of stack */
#define LR_REGNUM 14		/* address to return to from a function call */
#define PC_REGNUM 15		/* Contains program counter */
#define F0_REGNUM 16		/* first floating point register */
#define F3_REGNUM 19		/* last floating point argument register */
#define F7_REGNUM 23		/* last floating point register */
#define FPS_REGNUM 24		/* floating point status register */
#define PS_REGNUM 25		/* Contains processor status */

#define THUMB_FP_REGNUM 7	/* R7 is frame register on Thumb */

#define ARM_NUM_ARG_REGS 	4
#define ARM_LAST_ARG_REGNUM 	A4_REGNUM
#define ARM_NUM_FP_ARG_REGS 	4
#define ARM_LAST_FP_ARG_REGNUM	F3_REGNUM

/* Instruction condition field values.  */
#define INST_EQ		0x0
#define INST_NE		0x1
#define INST_CS		0x2
#define INST_CC		0x3
#define INST_MI		0x4
#define INST_PL		0x5
#define INST_VS		0x6
#define INST_VC		0x7
#define INST_HI		0x8
#define INST_LS		0x9
#define INST_GE		0xa
#define INST_LT		0xb
#define INST_GT		0xc
#define INST_LE		0xd
#define INST_AL		0xe
#define INST_NV		0xf

#define FLAG_N		0x80000000
#define FLAG_Z		0x40000000
#define FLAG_C		0x20000000
#define FLAG_V		0x10000000



/* Total amount of space needed to store our copies of the machine's
   register state, the array `registers'.  */

#define REGISTER_BYTES ((NUM_GREGS * REGISTER_SIZE) + \
			(NUM_FREGS * FP_REGISTER_RAW_SIZE) + \
			(NUM_SREGS * STATUS_REGISTER_SIZE))

/* Index within `registers' of the first byte of the space for
   register N.  */

#define REGISTER_BYTE(N) \
     ((N) < F0_REGNUM \
      ? (N) * REGISTER_SIZE \
      : ((N) < PS_REGNUM \
	 ? (NUM_GREGS * REGISTER_SIZE + \
	    ((N) - F0_REGNUM) * FP_REGISTER_RAW_SIZE) \
	 : (NUM_GREGS * REGISTER_SIZE + \
	    NUM_FREGS * FP_REGISTER_RAW_SIZE + \
	    ((N) - FPS_REGNUM) * STATUS_REGISTER_SIZE)))

/* Number of bytes of storage in the actual machine representation for
   register N.  All registers are 4 bytes, except fp0 - fp7, which are
   12 bytes in length.  */
#define REGISTER_RAW_SIZE(N) \
     ((N) < F0_REGNUM ? REGISTER_SIZE : \
      (N) < FPS_REGNUM ? FP_REGISTER_RAW_SIZE : STATUS_REGISTER_SIZE)

/* Number of bytes of storage in a program's representation
   for register N.  */
#define REGISTER_VIRTUAL_SIZE(N) \
	((N) < F0_REGNUM ? REGISTER_SIZE : \
	 (N) < FPS_REGNUM ? FP_REGISTER_VIRTUAL_SIZE : STATUS_REGISTER_SIZE)

/* Largest value REGISTER_RAW_SIZE can have.  */

#define MAX_REGISTER_RAW_SIZE FP_REGISTER_RAW_SIZE

/* Largest value REGISTER_VIRTUAL_SIZE can have.  */
#define MAX_REGISTER_VIRTUAL_SIZE FP_REGISTER_VIRTUAL_SIZE

/* Return the GDB type object for the "standard" data type of data in
   register N.  */

extern struct type *arm_register_type (int regnum);
#define REGISTER_VIRTUAL_TYPE(N) arm_register_type (N)

a76 26
/* Store the address of the place in which to copy the structure the
   subroutine will return.  This is called from call_function. */

#define STORE_STRUCT_RETURN(ADDR, SP) \
     write_register (A1_REGNUM, (ADDR))

/* Extract from an array REGBUF containing the (raw) register state a
   function return value of type TYPE, and copy that, in virtual
   format, into VALBUF.  */

extern void arm_extract_return_value (struct type *, char[], char *);
#define EXTRACT_RETURN_VALUE(TYPE,REGBUF,VALBUF) \
     arm_extract_return_value ((TYPE), (REGBUF), (VALBUF))

/* Write into appropriate registers a function return value of type
   TYPE, given in virtual format.  */

extern void convert_to_extended (void *dbl, void *ptr);
#define STORE_RETURN_VALUE(TYPE,VALBUF) \
  if (TYPE_CODE (TYPE) == TYPE_CODE_FLT) {				\
    char _buf[MAX_REGISTER_RAW_SIZE];					\
    convert_to_extended (VALBUF, _buf); 					\
    write_register_bytes (REGISTER_BYTE (F0_REGNUM), _buf, MAX_REGISTER_RAW_SIZE); \
  } else								\
    write_register_bytes (0, VALBUF, TYPE_LENGTH (TYPE))

d89 1
a89 7
#define CALL_DUMMY_WORDS arm_call_dummy_words
extern LONGEST arm_call_dummy_words[];

#define SIZEOF_CALL_DUMMY_WORDS (3 * sizeof (LONGEST))

#define CALL_DUMMY_START_OFFSET	 0	/* Start execution at beginning of dummy */

a91 28

/* Insert the specified number of args and function address into a
   call sequence of the above form stored at DUMMYNAME.  */

#define FIX_CALL_DUMMY(dummyname, pc, fun, nargs, args, type, gcc_p) \
   arm_fix_call_dummy ((dummyname), (pc), (fun), (nargs), (args), (type), (gcc_p))

void arm_fix_call_dummy (char *dummy, CORE_ADDR pc, CORE_ADDR fun,
			 int nargs, struct value ** args,
			 struct type * type, int gcc_p);

/* Most ARMs don't have single stepping capability, so provide a 
   single-stepping mechanism by default */
#undef SOFTWARE_SINGLE_STEP_P
#define SOFTWARE_SINGLE_STEP_P() 1

#define SOFTWARE_SINGLE_STEP(sig,bpt) arm_software_single_step((sig), (bpt))
void arm_software_single_step (int, int);

struct minimal_symbol;

void arm_elf_make_msymbol_special(asymbol *, struct minimal_symbol *);
#define ELF_MAKE_MSYMBOL_SPECIAL(SYM,MSYM) \
	arm_elf_make_msymbol_special (SYM, MSYM)

void arm_coff_make_msymbol_special(int, struct minimal_symbol *);
#define COFF_MAKE_MSYMBOL_SPECIAL(VAL,MSYM) \
	arm_coff_make_msymbol_special (VAL, MSYM)
@


1.24
log
@* arm-tdep.c (arm_frame_chain_valid): Make static.
(arm_push_arguments): Likewise.
(arm_gdbarch_init): New function.
(_initialize_arm_tdep): Call it.
* config/arm/tm-arm.h (GDB_MULTI_ARCH): Set to 1.
(TARGET_DOUBLE_FORMAT): Test TARGET_BYTE_ORDER, not target_byte_order.
(FRAME_CHAIN_VALID): Delete.
(arm_frame_chain_valid): Delete declaration.
(PUSH_ARGUMENTS): Delete.
(arm_push_arguments): Delete declaration.
(CALL_DUMMY_P): Delete.
@
text
@a309 64

extern void arm_init_extra_frame_info (int fromleaf, struct frame_info * fi);
#define INIT_EXTRA_FRAME_INFO(fromleaf, fi) \
	arm_init_extra_frame_info ((fromleaf), (fi))

/* Return the frame address.  On ARM, it is R11; on Thumb it is R7.  */
CORE_ADDR arm_target_read_fp (void);
#define TARGET_READ_FP() arm_target_read_fp ()

/* Describe the pointer in each stack frame to the previous stack
   frame (its caller).  */

/* FRAME_CHAIN takes a frame's nominal address and produces the
   frame's chain-pointer.

   However, if FRAME_CHAIN_VALID returns zero,
   it means the given frame is the outermost one and has no caller.  */

CORE_ADDR arm_frame_chain (struct frame_info *);
#define FRAME_CHAIN(thisframe) arm_frame_chain (thisframe)

/* Define other aspects of the stack frame.  */

int arm_frameless_function_invocation (struct frame_info *fi);
#define FRAMELESS_FUNCTION_INVOCATION(FI) arm_frameless_function_invocation(FI)
    
CORE_ADDR arm_frame_saved_pc (struct frame_info *);
#define FRAME_SAVED_PC(FI)	arm_frame_saved_pc (FI)

CORE_ADDR arm_frame_args_address(struct frame_info *);
#define FRAME_ARGS_ADDRESS(FI) arm_frame_args_address(FI)

CORE_ADDR arm_frame_locals_address(struct frame_info *);
#define FRAME_LOCALS_ADDRESS(FI) arm_frame_locals_address(FI)

int arm_frame_num_args(struct frame_info *);
#define FRAME_NUM_ARGS(FI) arm_frame_num_args(FI)

/* Return number of bytes at start of arglist that are not really args. */

#define FRAME_ARGS_SKIP 0

/* Put here the code to store, into a struct frame_saved_regs, the
   addresses of the saved registers of frame described by FRAME_INFO.
   This includes special registers such as pc and fp saved in special
   ways in the stack frame.  sp is even more special: the address we
   return for it IS the sp for the next frame.  */

void arm_frame_init_saved_regs (struct frame_info *);
#define FRAME_INIT_SAVED_REGS(frame_info) \
	arm_frame_init_saved_regs (frame_info);

/* Push an empty stack frame, to record the current PC, etc.  */

void arm_push_dummy_frame (void);

#define PUSH_DUMMY_FRAME arm_push_dummy_frame ()

/* Discard from the stack the innermost frame, restoring all registers.  */

void arm_pop_frame (void);

#define POP_FRAME arm_pop_frame ()

a337 3
CORE_ADDR arm_get_next_pc (CORE_ADDR pc);


a349 7

/* Function to determine whether MEMADDR is in a Thumb function.  */
extern int arm_pc_is_thumb (bfd_vma memaddr);

/* Function to determine whether MEMADDR is in a call dummy called from
   a Thumb function.  */
extern int arm_pc_is_thumb_dummy (bfd_vma memaddr);
@


1.23
log
@* arm-tdep.c: Include elf-bfd.h and coff/internal.h.
(MSYMBOL_SET_SPECIAL, MSYMBOL_IS_SPECIAL, MSYMBOL_SIZE): Move defines
to here from config/tm-arm.h.
(coff_sym_is_thumb): Make static.
(arm_elf_make_msymbol_special): New function.
(arm_coff_make_msymbol_special): New function.
* config/arm/tm-arm.h (MSYMBOL_SET_SPECIAL): Delete definition.
(MSYMBOL_IS_SPECIAL, MSYMBOL_SIZE): Likewise.
(coff_sym_is_thumb): Delete declaration.
(arm_elf_make_msymbol_special): Declare.
(arm_coff_make_msymbol_special): Declare.
(ELF_MAKE_MSYMBOL_SPECIAL): Call arm_elf_make_msymbol_special.
(COFF_MAKE_MSYMBOL_SPECIAL): Call arm_coff_make_msymbol_special.
@
text
@d25 4
d37 1
a37 1
#define TARGET_DOUBLE_FORMAT  (target_byte_order == BFD_ENDIAN_BIG \
a330 4
int arm_frame_chain_valid (CORE_ADDR, struct frame_info *);
#define FRAME_CHAIN_VALID(chain, thisframe) \
     arm_frame_chain_valid (chain, thisframe)

a361 6
/* Things needed for making the inferior call functions.  */

CORE_ADDR arm_push_arguments (int, struct value **, CORE_ADDR, int, CORE_ADDR);
#define PUSH_ARGUMENTS(nargs, args, sp, struct_return, struct_addr) \
     arm_push_arguments ((nargs), (args), (sp), (struct_return), (struct_addr))

a372 2

#define CALL_DUMMY_P (1)
@


1.22
log
@* gdbarch.sh (PRINT_FLOAT_INFO): Add rule.
* gdbarch.c gdbarch.h: Regenerate.
* arch-utils.c (default_print_float_info): New function.
* arch-utils.h (default_print_float_info): Prototype it.
* infcmd.c (float_info): Call PRINT_FLOAT_INFO.
* doc/gdbint.texinfo (FLOAT_INFO): Mark as deprecated.
(PRINT_FLOAT_INFO): Document it.

* arm-tdep.c (arm_print_float_info): Renamed from arm_float_info.
* config/arm/tm-arm.h (FLOAT_INFO): Delete.
(PRINT_FLOAT_INFO): Define.
@
text
@a411 5
/* Macros for setting and testing a bit in a minimal symbol that marks
   it as Thumb function.  The MSB of the minimal symbol's "info" field
   is used for this purpose. This field is already being used to store
   the symbol size, so the assumption is that the symbol size cannot
   exceed 2^31.
d413 1
a413 13
   COFF_MAKE_MSYMBOL_SPECIAL
   ELF_MAKE_MSYMBOL_SPECIAL
   
   These macros test whether the COFF or ELF symbol corresponds to a
   thumb function, and set a "special" bit in a minimal symbol to
   indicate that it does.
   
   MSYMBOL_SET_SPECIAL	Actually sets the "special" bit.
   MSYMBOL_IS_SPECIAL   Tests the "special" bit in a minimal symbol.
   MSYMBOL_SIZE         Returns the size of the minimal symbol,
   			i.e. the "info" field with the "special" bit
   			masked out 
   */
d415 3
a417 1
extern int coff_sym_is_thumb (int val);
d419 3
a421 14
#define MSYMBOL_SET_SPECIAL(msym) \
	MSYMBOL_INFO (msym) = (char *) (((long) MSYMBOL_INFO (msym)) | 0x80000000)
#define MSYMBOL_IS_SPECIAL(msym) \
  (((long) MSYMBOL_INFO (msym) & 0x80000000) != 0)
#define MSYMBOL_SIZE(msym) \
  ((long) MSYMBOL_INFO (msym) & 0x7fffffff)

/* Thumb symbols are of type STT_LOPROC, (synonymous with STT_ARM_TFUNC) */
#define ELF_MAKE_MSYMBOL_SPECIAL(sym,msym) \
	{ if(ELF_ST_TYPE(((elf_symbol_type *)(sym))->internal_elf_sym.st_info) == STT_LOPROC) \
		MSYMBOL_SET_SPECIAL(msym); }

#define COFF_MAKE_MSYMBOL_SPECIAL(val,msym) \
 { if(coff_sym_is_thumb(val)) MSYMBOL_SET_SPECIAL(msym); }
@


1.21
log
@* gdbarch.sh (copyright): Update years in generated header.
(SMASH_TEXT_ADDRESS): Add rule.
*gdbarch.h, gdbarch.c: Re-generate.
* coffread.c: Multi-arch uses of SMASH_TEXT_ADDRESS.
* dbxread.c: Likewise.
* dwarfread.c: Likewise.
* elfread.c: Likewise.
* somread.c: Likewise.

* arm-tdep.c (arm_smash_text_address): New function.
* config/arm/tm-arm.h (SMASH_TEXT_ADDRESS): Define in terms of above.
@
text
@d123 2
a124 6
/* Code to execute to print interesting information about the floating
   point processor (if any) or emulator.  No need to define if there
   is nothing to do. */
extern void arm_float_info (void);

#define FLOAT_INFO	{ arm_float_info (); }
@


1.20
log
@* arm-tdep.c (arm_frameless_function_invocation): Add some comments.
(arm_frame_args_address, arm_frame_locals_address): New functions.
(arm_frame_num_args): New function.
* config/tm-arm.h (FRAME_ARGS_ADDRESS): Call arm_frame_args_address.
(FRAME_LOCALS_ADDRESS): Call arm_frame_locals_address.
(FRMA_NUM_ARGS): Call arm_frame_num_args.
@
text
@d37 2
a38 6
/* When reading symbols, we need to zap the low bit of the address,
   which may be set to 1 for Thumb functions.  */

#define SMASH_TEXT_ADDRESS(addr) ((addr) &= ~0x1)

/* Remove useless bits from addresses in a running program.  */
d41 1
a41 2

#define ADDR_BITS_REMOVE(val)	(arm_addr_bits_remove (val))
@


1.19
log
@* arm-tdep.c (arm_call_dummy_words): Define.
* arm-linux-tdep.c (arm_linux_call_dummy_words): Define.
* config/arm/tm-arm.h (CALL_DUMMY_P): Define.
(CALL_DUMMY_WORDS): Define.
(arm_call_dummy_words): Declare.
* config/arm/tm-linux.h (CALL_DUMMY_WORDS): Define.
(arm_linux_call_dummy_words): Declare.
@
text
@d333 1
a334 1
extern CORE_ADDR arm_frame_chain (struct frame_info *);
d336 1
a336 1
extern int arm_frame_chain_valid (CORE_ADDR, struct frame_info *);
d342 2
a343 19
/* A macro that tells us whether the function invocation represented
   by FI does not have a frame on the stack associated with it.  If it
   does not, FRAMELESS is set to 1, else 0.

   Sometimes we have functions that do a little setup (like saving the
   vN registers with the stmdb instruction, but DO NOT set up a frame.
   The symbol table will report this as a prologue.  However, it is
   important not to try to parse these partial frames as frames, or we
   will get really confused.

   So I will demand 3 instructions between the start & end of the
   prologue before I call it a real prologue, i.e. at least
         mov ip, sp,
	 stmdb sp!, {}
	 sub sp, ip, #4. */

extern int arm_frameless_function_invocation (struct frame_info *fi);
#define FRAMELESS_FUNCTION_INVOCATION(FI) \
(arm_frameless_function_invocation (FI))
d345 2
a346 1
/* Saved Pc.  */
d348 2
a349 2
#define FRAME_SAVED_PC(FRAME)	arm_frame_saved_pc (FRAME)
extern CORE_ADDR arm_frame_saved_pc (struct frame_info *);
d351 2
a352 1
#define FRAME_ARGS_ADDRESS(fi) (fi->frame)
d354 2
a355 6
#define FRAME_LOCALS_ADDRESS(fi) ((fi)->frame)

/* Return number of args passed to a frame.
   Can return -1, meaning no way to tell.  */

#define FRAME_NUM_ARGS(fi) (-1)
d373 1
d375 1
a375 3
     sp = arm_push_arguments ((nargs), (args), (sp), (struct_return), (struct_addr))
extern CORE_ADDR arm_push_arguments (int, struct value **, CORE_ADDR, int,
				     CORE_ADDR);
@


1.18
log
@* arch-utils.c (TARGET_BYTE_ORDER_DEFAULT): Delete macro.
(target_byte_order): Initialize to BFD_ENDIAN_BIG.
(initialize_current_architecture): Update target_byte_order using
information from BFD.
* config/powerpc/tm-ppcle-eabi.h (TARGET_BYTE_ORDER_DEFAULT):
* config/mcore/tm-mcore.h (TARGET_BYTE_ORDER_DEFAULT):
* config/arm/tm-arm.h (TARGET_BYTE_ORDER_DEFAULT): Delete.

Update doco.
@
text
@d409 1
a409 1
/* This sequence of words is the instructions
d411 2
a412 3
   mov  lr,pc
   mov  pc,r4
   illegal
d414 1
a414 1
   Note this is 12 bytes.  */
a415 1
#define CALL_DUMMY {0xe1a0e00f, 0xe1a0f004, 0xe7ffdefe}
@


1.17
log
@* arm-tdep.c (arm_register_name): New function.
(arm_registers_names): Make static.
* config/arm/tm-arm.h (arm_register_names): Delete declaration.
(arm_register_name): Declare.
(REGISTER_NAME): Use it.
@
text
@a31 4
/* Target byte order on ARM defaults to selectable, and defaults to
   little endian.  */
#define TARGET_BYTE_ORDER_DEFAULT BFD_ENDIAN_LITTLE

d167 3
@


1.16
log
@Richard Earnshaw  <rearnsha@@arm.com>
and Kevin Buettner  <kevinb@@redhat.com>
Convert arm targets to new FRAME interface.
* arm-tdep.c (struct frame_extra_info): Remove fsr.
(arm_frame_find_save_regs): Delete.
(arm_frame_init_saved_regs): New.
(arm_init_extra_frame_info): Alloacte saved_regs as required.
Allocate extra_info as required.  Convert all uses of fsr.regs
to use saved_regs, similarly all uses of EXTRA_FRAME_INFO fields
to use extra_info.
(thumb_scan_prologue, arm_scan_prologue, arm_find_callers_reg)
(arm_frame_chain, arm_frame_saved_pc, arm_pop_frame): Likewise.
(check_prologue_cache, save_prologue_cache): Likewise.
(_initialize_arm_tdep): Ensure prologue_cache is correctly set up.
* config/arm/tm-arm.h (EXTRA_FRAME_INFO): Delete.
(FRAME_FIND_SAVED_REGS): Delete.
(arm_frame_find_saved_regs): Delete prototype.
(arm_frame_init_saved_regs): New prototype.
(FRAME_INIT_SAVED_REGS): Define.
@
text
@d172 2
a173 4
/* An array of names of registers. */
extern char **arm_register_names;

#define REGISTER_NAME(i) arm_register_names[i]
@


1.15
log
@Assume TARGET_BYTE_ORDER_SELECTABLE{,_P} is always true.
@
text
@d3 1
a3 1
   1998, 1999, 2000 Free Software Foundation, Inc.
a318 12
/* Define other aspects of the stack frame.  We keep the offsets of
   all saved registers, 'cause we need 'em a lot!  We also keep the
   current size of the stack frame, and the offset of the frame
   pointer from the stack pointer (for frameless functions, and when
   we're still in the prologue of a function with a frame) */

#define EXTRA_FRAME_INFO  	\
  struct frame_saved_regs fsr;	\
  int framesize;		\
  int frameoffset;		\
  int framereg;

d389 3
a391 7
struct frame_saved_regs;
struct frame_info;
void arm_frame_find_saved_regs (struct frame_info * fi,
				struct frame_saved_regs * fsr);

#define FRAME_FIND_SAVED_REGS(frame_info, frame_saved_regs) \
	arm_frame_find_saved_regs (frame_info, &(frame_saved_regs));
@


1.14
log
@Eliminate IEEE_FLOAT.
@
text
@a33 1
#define TARGET_BYTE_ORDER_SELECTABLE_P	1
@


1.13
log
@* config/arm/arm-tdep.h (arm_software_single_step): Remove PARAMS.
* config/arm/nm-nbsd.h (arm_register_u_addr): Likewise.
* config/arm/tm-nbsd.h (get_longjmp_target): Likewise.
@
text
@a37 1
#define IEEE_FLOAT (1)
@


1.12
log
@s/BIG_ENDIAN/BFD_ENDIAN_BIG/
@
text
@d460 1
a460 1
void arm_software_single_step PARAMS((int, int));
@


1.11
log
@2001-12-19  Fernando Nasser  <fnasser@@redhat.com>

	* config/arm/tm-arm.h: Properly define SOFTWARE_SINGLE_STEP_P.
	Always define SOFTWARE_SINGLE_STEP.
	* config/arm/tm-embed.h: Properly define SOFTWARE_SINGLE_STEP_P.
	* arm-tdep.c (arm_get_next_pc, thumb_get_next_pc, bitcount,
	shifted_reg_val): Always compile these functions.
	(arm_software_single_step): Fix second argument in function calls.
@
text
@d39 1
a39 1
#define TARGET_DOUBLE_FORMAT  (target_byte_order == BIG_ENDIAN \
@


1.10
log
@2001-12-17  Fernando Nasser  <fnasser@@redhat.com>

	From Richard Earnshaw <rearnsha@@arm.com>:
	* arm-tdep.c (arm_software_single_step): New function. Implements
	software single-stepping for ARM targets.
	(arm_get_next_pc, thumb_get_next_pc, bitcount, shifted_reg_val): Only
	needed for software single-stepping.
	* config/arm/tm-arm.h: Activate SOFTWARE_SINGLE_STEP_P.
@
text
@d456 3
a458 4
#ifndef SOFTWARE_SINGLE_STEP_P
#define SOFTWARE_SINGLE_STEP_P 1
#endif
#if SOFTWARE_SINGLE_STEP_P
a460 1
#endif
@


1.9
log
@LITTLE_ENDIAN -> BFD_ENDIAN_LITTLE
@
text
@d99 3
a101 3
   There are other ways of forcing a breakpoint.  ARM Linux, RisciX,
   and I suspect NetBSD will all use a software interrupt rather than
   an undefined instruction to force a trap.  This can be handled by
d453 10
@


1.8
log
@* arm-tdep.c (arm_register_type): New function.
(arm_register_convertible): Delete.
(arm_register_convert_to_virtual): Delete.
(arm_register_convert_to_raw): Delete.
* config/arm/tm-arm.h (REGISTER_CONVERTIBLE): Delete.
(REGISTER_CONVERT_TO_VIRTUAL): Delete.
(REGISTER_CONVERT_TO_RAW): Delete.
(REGISTER_VIRTUAL_TYPE): Redefine as call to arm_register_type.
(arm_register_type): Declare.
@
text
@d35 1
a35 1
#define TARGET_BYTE_ORDER_DEFAULT	LITTLE_ENDIAN
@


1.7
log
@* config/arm/tm-arm.h: Include "floatformat.h".
@
text
@a270 23
/* Nonzero if register N requires conversion from raw format to
   virtual format. */
extern int arm_register_convertible (unsigned int);
#define REGISTER_CONVERTIBLE(REGNUM) (arm_register_convertible (REGNUM))

/* Convert data from raw format for register REGNUM in buffer FROM to
   virtual format with type TYPE in buffer TO. */

extern void arm_register_convert_to_virtual (unsigned int regnum,
					     struct type *type,
					     void *from, void *to);
#define REGISTER_CONVERT_TO_VIRTUAL(REGNUM,TYPE,FROM,TO) \
     arm_register_convert_to_virtual (REGNUM, TYPE, FROM, TO)

/* Convert data from virtual format with type TYPE in buffer FROM to
   raw format for register REGNUM in buffer TO.  */

extern void arm_register_convert_to_raw (unsigned int regnum,
					 struct type *type,
					 void *from, void *to);
#define REGISTER_CONVERT_TO_RAW(TYPE,REGNUM,FROM,TO) \
     arm_register_convert_to_raw (REGNUM, TYPE, FROM, TO)

d274 2
a275 3
#define REGISTER_VIRTUAL_TYPE(N) \
     (((unsigned)(N) - F0_REGNUM) < NUM_FREGS \
      ? builtin_type_double : builtin_type_int)
@


1.6
log
@Include regcache.h
@
text
@d26 1
@


1.5
log
@Update/correct copyright notices.
@
text
@d25 2
@


1.4
log
@Remove stray debugging statement and move prototypes so arm-linux-tdep.c
compiles without warnings.

2000-09-06  Scott Bambrough <scottb@@netwinder.org>

	* arm-linux-tdep.c (arm_linux_skip_solib_resolver):
	Removed debug print statement.  Removed arm_pc_is_thumb prototype.
	* config/arm/tm-arm.h (arm_pc_is_thumb, arm_pc_is_thumb_dummy):
	Move prototypes here from tm-embed.h.
	* config/arm/tm-embed.h (arm_pc_is_thumb, arm_pc_is_thumb_dummy):
	Remove prototypes.  Moved to tm-arm.h.
@
text
@d2 2
a3 1
   Copyright 1986, 1987, 1988, 1989, 1991, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000 Free Software Foundation, Inc.
@


1.3
log
@Bring IEEE_FLOAT under gdbarch's control.
* gdbarch.sh (IEEE_FLOAT): New entry.
* gdbarch.c, gdbarch.h: Regenerated.
* valprint.c (IEEE_FLOAT): Provide a default #definition for this.
(print_floating): Use IEEE_FLOAT as if it were an expression; use
the code specific to IEEE-format numbers whenever the value of
IEEE_FLOAT is non-zero.
* config/a29k/tm-a29k.h, config/alpha/tm-alpha.h,
config/arc/tm-arc.h, config/arm/tm-arm.h, config/fr30/tm-fr30.h,
config/h8300/tm-h8300.h, config/i386/tm-i386.h,
config/i960/tm-i960.h, config/m88k/tm-m88k.h,
config/mips/tm-mips.h, config/pa/tm-hppa.h,
config/sparc/tm-sparc.h, config/delta/tm-delta.h,
config/frv/tm-frv.h (IEEE_FLOAT): For all ports that #define
IEEE_FLOAT, make sure they give it the value (1).
@
text
@d516 7
@


1.2
log
@2000-04-07  Scott Bambrough <scottb@@netwinder.org>

	* ChangeLog: Correct date on last entry.
	* arm-linux-tdep.c (arm_linux_push_arguments): New function.
	* config/arm/tm-linux: Redefined PUSH_ARGUMENTS for Linux.
	* config/arm/tm-embed: Fix build warning from redefinition of
	LOWEST_PC.
	* config/arm/tm-arm.h: Remove TARGET_BYTE_ORDER_SELECTABLE.
	* config/arm/tm-wince.h: Remove TARGET_BYTE_ORDER_SELECTABLE and
	TARGET_BYTE_ORDER.  Add TARGET_BYTE_ORDER_SELECTABLE_P to
	override default in tm-arm.h.  Use default target byte order
	from tm-arm.h.
@
text
@d34 1
a34 1
#define IEEE_FLOAT
@


1.1
log
@Initial revision
@
text
@d1 2
a2 2
/* Definitions to make GDB target for an ARM
   Copyright 1986, 1987, 1989, 1991, 1993, 1997, 1998 Free Software Foundation, Inc.
d4 1
a4 1
This file is part of GDB.
d6 14
a19 13
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
d21 4
a24 1
#ifdef __STDC__		/* Forward decls for prototypes */
a26 3
#endif

#define TARGET_BYTE_ORDER_SELECTABLE
d28 4
a31 1
/* IEEE format floating point */
d33 1
d35 3
d39 2
a40 9
/* FIXME: may need a floatformat_ieee_double_bigbyte_littleword format for
   BIG_ENDIAN use. -fnf */

#define TARGET_DOUBLE_FORMAT (target_byte_order == BIG_ENDIAN \
			      ? &floatformat_ieee_double_big \
			      : &floatformat_ieee_double_littlebyte_bigword)

/* When reading symbols, we need to zap the low bit of the address, which
   may be set to 1 for Thumb functions.  */
d46 1
a46 1
CORE_ADDR arm_addr_bits_remove PARAMS ((CORE_ADDR));
d48 1
a48 1
#define ADDR_BITS_REMOVE(val) (arm_addr_bits_remove (val))
d50 2
a51 2
/* Offset from address of function to start of its code.
   Zero on most machines.  */
d53 1
a53 1
#define FUNCTION_START_OFFSET 0
d55 2
a56 2
/* Advance PC across any function entry prologue instructions
   to reach some "real" code.  */
d58 1
a58 1
extern CORE_ADDR arm_skip_prologue PARAMS ((CORE_ADDR pc));
d60 1
a60 1
#define SKIP_PROLOGUE(pc) { pc = arm_skip_prologue (pc); }
d62 4
a65 4
/* Immediately after a function call, return the saved pc.
   Can't always go through the frames for this because on some machines
   the new frame is not set up until the new function executes
   some instructions.  */
d67 1
a67 1
#define SAVED_PC_AFTER_CALL(frame) arm_saved_pc_after_call (frame)
d69 1
a69 1
extern CORE_ADDR arm_saved_pc_after_call PARAMS ((struct frame_info *));
d71 34
a104 7
/* I don't know the real values for these.  */
#define TARGET_UPAGES UPAGES
#define TARGET_NBPG NBPG

/* Address of end of stack space.  */

#define STACK_END_ADDR (0x01000000 - (TARGET_UPAGES * TARGET_NBPG))
d110 3
a112 3
/* !!!! if we're using RDP, then we're inserting breakpoints and storing
   their handles instread of what was in memory.  It is nice that
   this is the same size as a handle - otherwise remote-rdp will
d115 6
a120 6
/* BREAKPOINT_FROM_PC uses the program counter value to determine whether a
   16- or 32-bit breakpoint should be used.  It returns a pointer
   to a string of bytes that encode a breakpoint instruction, stores
   the length of the string to *lenptr, and adjusts the pc (if necessary) to
   point to the actual memory location where the breakpoint should be
   inserted.  */
d125 2
a126 3
/* Amount PC must be decremented by after a breakpoint.
   This is often the number of bytes in BREAKPOINT
   but not always.  */
d130 6
a135 5
/* code to execute to print interesting information about the
 * floating point processor (if any)
 * No need to define if there is nothing to do.
 */
#define FLOAT_INFO { arm_float_info (); }
d141 1
a141 3
#define REGISTER_SIZE 4

/* Number of machine registers */
d143 26
a168 4
/* Note: I make a fake copy of the pc in register 25 (calling it ps) so
   that I can clear the status bits from pc (register 15) */

#define NUM_REGS 26
d171 1
a172 1
extern char **arm_register_names;
d175 6
a180 6
/* Register numbers of various important registers.
   Note that some of these values are "real" register numbers,
   and correspond to the general registers of the machine,
   and some are "phony" register numbers which are too large
   to be actual register numbers as far as the user is concerned
   but do serve to get the desired values when passed to read_register.  */
d229 4
a232 1
#define REGISTER_BYTES (16*4 + 12*8 + 4 + 4)
d237 22
a258 13
#define REGISTER_BYTE(N) (((N) < F0_REGNUM) ? (N)*4 : \
			  (((N) < PS_REGNUM) ? 16*4 + ((N) - 16)*12 : \
			   16*4 + 8*12 + ((N) - FPS_REGNUM) * 4))

/* Number of bytes of storage in the actual machine representation
   for register N.  On the vax, all regs are 4 bytes.  */

#define REGISTER_RAW_SIZE(N) (((N) < F0_REGNUM || (N) >= FPS_REGNUM) ? 4 : 12)

/* Number of bytes of storage in the program's representation
   for register N.  On the vax, all regs are 4 bytes.  */

#define REGISTER_VIRTUAL_SIZE(N) (((N) < F0_REGNUM || (N) >= FPS_REGNUM) ? 4 : 8)
d262 1
a262 1
#define MAX_REGISTER_RAW_SIZE 12 
d265 1
d267 13
a279 1
#define MAX_REGISTER_VIRTUAL_SIZE 8
d281 2
a282 3
/* Nonzero if register N requires conversion
   from raw format to virtual format.  */
#define REGISTER_CONVERTIBLE(N) ((unsigned)(N) - F0_REGNUM < 8)
d284 5
a288 2
/* Convert data from raw format for register REGNUM in buffer FROM
   to virtual format with type TYPE in buffer TO.  */
d290 2
a291 17
#define REGISTER_CONVERT_TO_VIRTUAL(REGNUM,TYPE,FROM,TO) \
{ \
  double val; \
  convert_from_extended ((FROM), & val); \
  store_floating ((TO), TYPE_LENGTH (TYPE), val); \
}

/* Convert data from virtual format with type TYPE in buffer FROM
   to raw format for register REGNUM in buffer TO.  */

#define REGISTER_CONVERT_TO_RAW(TYPE,REGNUM,FROM,TO)	\
{ \
  double val = extract_floating ((FROM), TYPE_LENGTH (TYPE)); \
  convert_to_extended (&val, (TO)); \
}
/* Return the GDB type object for the "standard" data type
   of data in register N.  */
d294 3
a296 2
 (((unsigned)(N) - F0_REGNUM) < 8 ? builtin_type_double : builtin_type_int)

d299 2
a300 1
#define USE_STRUCT_CONVENTION(gcc_p, type) arm_use_struct_convention (gcc_p, type)
d306 1
a306 1
  { write_register (0, (ADDR)); }
d308 3
a310 3
/* Extract from an array REGBUF containing the (raw) register state
   a function return value of type TYPE, and copy that, in virtual format,
   into VALBUF.  */
d312 1
d314 1
a314 4
  if (TYPE_CODE (TYPE) == TYPE_CODE_FLT)				\
    convert_from_extended (REGBUF + REGISTER_BYTE (F0_REGNUM), VALBUF);	\
  else									\
    memcpy (VALBUF, REGBUF, TYPE_LENGTH (TYPE))
d316 2
a317 2
/* Write into appropriate registers a function return value
   of type TYPE, given in virtual format.  */
d319 1
d332 2
a333 1
#define EXTRACT_STRUCT_VALUE_ADDRESS(REGBUF) (*(int *)(REGBUF))
d339 1
d341 5
a345 6

/* Define other aspects of the stack frame. 
   We keep the offsets of all saved registers, 'cause we need 'em a lot!
   We also keep the current size of the stack frame, and the offset of
   the frame pointer from the stack pointer (for frameless functions, and
   when we're still in the prologue of a function with a frame) */
d353 3
a355 2
extern void arm_init_extra_frame_info PARAMS ((struct frame_info *fi));
#define INIT_EXTRA_FRAME_INFO(fromleaf, fi) arm_init_extra_frame_info (fi)
d358 1
a358 1
CORE_ADDR arm_target_read_fp PARAMS ((void));
d361 2
a362 2
/* Describe the pointer in each stack frame to the previous stack frame
   (its caller).  */
d364 2
a365 2
/* FRAME_CHAIN takes a frame's nominal address
   and produces the frame's chain-pointer.
d370 2
a371 2
#define FRAME_CHAIN(thisframe) (CORE_ADDR) arm_frame_chain (thisframe)
extern CORE_ADDR arm_frame_chain PARAMS ((struct frame_info *));
d373 3
a375 2
extern int arm_frame_chain_valid PARAMS ((CORE_ADDR, struct frame_info *));
#define FRAME_CHAIN_VALID(chain, thisframe) arm_frame_chain_valid (chain, thisframe)
d381 1
a381 10
   does not, FRAMELESS is set to 1, else 0.  */
#define FRAMELESS_FUNCTION_INVOCATION(FI, FRAMELESS) \
{							\
  CORE_ADDR func_start, after_prologue;			\
  func_start = (get_pc_function_start ((FI)->pc) +	\
		FUNCTION_START_OFFSET);			\
  after_prologue = func_start;				\
  SKIP_PROLOGUE (after_prologue);			\
  (FRAMELESS) = (after_prologue == func_start);		\
}
d383 16
d402 1
a402 1
extern CORE_ADDR arm_frame_saved_pc PARAMS ((struct frame_info *));
d411 1
a411 1
#define FRAME_NUM_ARGS(numargs, fi) (numargs = -1)
d413 1
a413 1
/* Return number of bytes at start of arglist that are not really args.  */
d417 2
a418 2
/* Put here the code to store, into a struct frame_saved_regs,
   the addresses of the saved registers of frame described by FRAME_INFO.
d420 2
a421 2
   ways in the stack frame.  sp is even more special:
   the address we return for it IS the sp for the next frame.  */
d425 2
a426 2
void frame_find_saved_regs PARAMS((struct frame_info *fi,
				   struct frame_saved_regs *fsr));
d429 1
a429 1
 arm_frame_find_saved_regs (frame_info, &(frame_saved_regs));
a430 1

d434 3
a436 3
    sp = arm_push_arguments ((nargs), (args), (sp), (struct_return), (struct_addr))
extern CORE_ADDR
arm_push_arguments PARAMS ((int, struct value **, CORE_ADDR, int, CORE_ADDR));
d440 1
a440 1
void arm_push_dummy_frame PARAMS ((void));
d446 1
a446 1
void arm_pop_frame PARAMS ((void));
d452 3
a454 3
     mov 	lr,pc
     mov	pc,r4
     illegal
d458 2
a459 3
#define CALL_DUMMY {0xe1a0e00f, 0xe1a0f004, 0xE7FFDEFE}

#define CALL_DUMMY_START_OFFSET 0  /* Start execution at beginning of dummy */
d462 1
a462 1
extern int arm_call_dummy_breakpoint_offset PARAMS ((void));
d464 2
a465 2
/* Insert the specified number of args and function address
   into a call sequence of the above form stored at DUMMYNAME.  */
d468 13
a480 1
   arm_fix_call_dummy (dummyname, pc, fun, nargs, args, type, gcc_p)
a481 25
void arm_fix_call_dummy PARAMS ((char *dummy, CORE_ADDR pc, CORE_ADDR fun,
				 int nargs, struct value **args,
				 struct type *type, int gcc_p));

CORE_ADDR arm_get_next_pc PARAMS ((CORE_ADDR));

/* Functions for dealing with Thumb call thunks.  */
#define IN_SOLIB_CALL_TRAMPOLINE(pc, name)	arm_in_call_stub (pc, name)
#define SKIP_TRAMPOLINE_CODE(pc)		arm_skip_stub (pc)
extern int arm_in_call_stub PARAMS ((CORE_ADDR pc,  char *name));
extern CORE_ADDR arm_skip_stub PARAMS ((CORE_ADDR pc));

/* Function to determine whether MEMADDR is in a Thumb function.  */
extern int arm_pc_is_thumb PARAMS ((bfd_vma memaddr));

/* Function to determine whether MEMADDR is in a call dummy called from
   a Thumb function.  */
extern int arm_pc_is_thumb_dummy PARAMS ((bfd_vma memaddr));

/* Macros for setting and testing a bit in a minimal symbol that
   marks it as Thumb function.  The MSB of the minimal symbol's
   "info" field is used for this purpose. This field is already
   being used to store the symbol size, so the assumption is
   that the symbol size cannot exceed 2^31.
 
d483 15
a497 10
   ELF_MAKE_MSYMBOL_SPECIAL	tests whether the COFF or ELF symbol corresponds 
                        to a thumb function, and sets a "special" bit in a
                        minimal symbol to indicate that it does
   MSYMBOL_SET_SPECIAL	actually sets the "special" bit
   MSYMBOL_IS_SPECIAL   tests the "special" bit in a minimal symbol
   MSYMBOL_SIZE         returns the size of the minimal symbol, i.e.
                        the "info" field with the "special" bit masked out
*/
 
extern int coff_sym_is_thumb(int val);
d499 1
a499 1
    MSYMBOL_INFO (msym) = (char *) (((long) MSYMBOL_INFO (msym)) | 0x80000000)
d505 1
a505 1
/* Thumb symbol are of type STT_LOPROC, (synonymous with STT_ARM_TFUNC) */
d507 3
a509 3
 { if(ELF_ST_TYPE(((elf_symbol_type *)(sym))->internal_elf_sym.st_info) == STT_LOPROC) \
	MSYMBOL_SET_SPECIAL(msym); }
  
d513 4
a516 2
#undef  IN_SIGTRAMP
#define IN_SIGTRAMP(pc, name) 0
@


1.1.1.1
log
@Initial creation of sourceware repository
@
text
@@


1.1.1.2
log
@import gdb-19990422 snapshot
@
text
@d2 1
a2 1
   Copyright 1986-1989, 1991, 1993-1999 Free Software Foundation, Inc.
d271 1
a271 2
#define EXTRACT_STRUCT_VALUE_ADDRESS(REGBUF) \
  (extract_address ((PTR) (REGBUF), REGISTER_RAW_SIZE(0)))
@


1.1.1.3
log
@import gdb-19990504 snapshot
@
text
@d59 1
a59 1
#define SKIP_PROLOGUE(pc) (arm_skip_prologue (pc))
@


1.1.1.4
log
@import gdb-1999-05-25 snapshot
@
text
@d316 12
a327 4
/* An expression that tells us whether the function invocation represented
   by FI does not have a frame on the stack associated with it. */
extern int arm_frameless_function_invocation PARAMS ((struct frame_info *frame));
#define FRAMELESS_FUNCTION_INVOCATION(FI) (arm_frameless_function_invocation (FI))
d341 1
a341 1
#define FRAME_NUM_ARGS(fi) (-1)
d365 3
a367 2
  (arm_push_arguments ((nargs), (args), (sp), (struct_return), (struct_addr)))
extern CORE_ADDR arm_push_arguments PARAMS ((int, struct value **, CORE_ADDR, int, CORE_ADDR));
@


1.1.1.5
log
@import gdb-1999-07-07 post reformat
@
text
@d4 1
a4 1
   This file is part of GDB.
d6 13
a18 14
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */
d20 1
a20 1
#ifdef __STDC__			/* Forward decls for prototypes */
d202 1
a202 1
#define MAX_REGISTER_RAW_SIZE 12
d278 1
a279 1

d292 1
a292 1
extern void arm_init_extra_frame_info PARAMS ((struct frame_info * fi));
d318 1
a318 1
extern int arm_frameless_function_invocation PARAMS ((struct frame_info * frame));
d347 2
a348 2
void frame_find_saved_regs PARAMS ((struct frame_info * fi,
				    struct frame_saved_regs * fsr));
d352 1
a353 1

d374 3
a376 3
   mov  lr,pc
   mov  pc,r4
   illegal
d382 1
a382 1
#define CALL_DUMMY_START_OFFSET 0	/* Start execution at beginning of dummy */
d394 2
a395 2
				 int nargs, struct value ** args,
				 struct type * type, int gcc_p));
d402 1
a402 1
extern int arm_in_call_stub PARAMS ((CORE_ADDR pc, char *name));
d417 1
a417 1

d419 4
a422 4
   ELF_MAKE_MSYMBOL_SPECIAL     tests whether the COFF or ELF symbol corresponds 
   to a thumb function, and sets a "special" bit in a
   minimal symbol to indicate that it does
   MSYMBOL_SET_SPECIAL  actually sets the "special" bit
d425 4
a428 4
   the "info" field with the "special" bit masked out
 */

extern int coff_sym_is_thumb (int val);
d440 1
a440 1

@


1.1.1.6
log
@import gdb-1999-08-09 snapshot
@
text
@d293 2
a294 4
extern void arm_init_extra_frame_info PARAMS ((int fromleaf,
					       struct frame_info *fi));
#define INIT_EXTRA_FRAME_INFO(fromleaf, fi) \
  arm_init_extra_frame_info (fromleaf, fi)
d317 5
a321 19
/* A macro that tells us whether the function invocation represented
   by FI does not have a frame on the stack associated with it.  If it
   does not, FRAMELESS is set to 1, else 0.

   Sometimes we have functions that do a little setup (like saving the vN
   registers with the stmdb instruction, but DO NOT set up a frame.
   The symbol table will report this as a prologue.  However, it is
   important not to try to parse these partial frames as frames, or we 
   will get really confused.

   So I will demand 3 instructions between the start & end of the prologue
   before I call it a real prologue, i.e. at least
         mov ip, sp,
	 stmdb sp!, {}
	 sub sp, ip, #4. */

#define FRAMELESS_FUNCTION_INVOCATION(FI) \
(arm_frameless_function_invocation (FI))
     
@


1.1.1.7
log
@import gdb-1999-08-30 snapshot
@
text
@d21 1
a21 1
/* Forward decls for prototypes */
d24 1
a107 2
extern void arm_float_info (void);

a215 2
void convert_from_extended (void *ptr, /*double*/void *dbl);

a225 2
extern void convert_to_extended (void *ptr, /*double*/void *dbl);

a334 1
extern int arm_frameless_function_invocation (struct frame_info *fi);
d364 2
a365 2
void arm_frame_find_saved_regs (struct frame_info * fi,
				struct frame_saved_regs * fsr);
@


1.1.1.8
log
@import gdb-1999-12-21 snapshot
@
text
@d1 1
a1 1
/* Definitions to target GDB to ARM targets.
d21 1
a21 4
#ifndef TM_ARM_H
#define TM_ARM_H

/* Forward declarations for prototypes.  */
d27 1
a27 4
/* Target byte order on ARM defaults to selectable, and defaults to
   little endian.  */
#define TARGET_BYTE_ORDER_SELECTABLE_P		1
#define TARGET_BYTE_ORDER_DEFAULT	LITTLE_ENDIAN
a28 1
/* IEEE format floating point.  */
a29 3
#define TARGET_DOUBLE_FORMAT  (target_byte_order == BIG_ENDIAN \
			       ? &floatformat_ieee_double_big	 \
			       : &floatformat_ieee_double_littlebyte_bigword)
d31 9
a39 2
/* When reading symbols, we need to zap the low bit of the address,
   which may be set to 1 for Thumb functions.  */
d45 1
a45 1
CORE_ADDR arm_addr_bits_remove (CORE_ADDR);
d47 1
a47 1
#define ADDR_BITS_REMOVE(val)	(arm_addr_bits_remove (val))
d49 2
a50 2
/* Offset from address of function to start of its code.  Zero on most
   machines.  */
d52 1
a52 1
#define FUNCTION_START_OFFSET	0
d54 2
a55 2
/* Advance PC across any function entry prologue instructions to reach
   some "real" code.  */
d57 1
a57 1
extern CORE_ADDR arm_skip_prologue (CORE_ADDR pc);
d59 1
a59 1
#define SKIP_PROLOGUE(pc)  (arm_skip_prologue (pc))
d61 4
a64 4
/* Immediately after a function call, return the saved pc.  Can't
   always go through the frames for this because on some machines the
   new frame is not set up until the new function executes some
   instructions.  */
d66 1
a66 1
#define SAVED_PC_AFTER_CALL(frame)  arm_saved_pc_after_call (frame)
d68 1
a68 1
extern CORE_ADDR arm_saved_pc_after_call (struct frame_info *);
d70 7
a76 34
/* The following define instruction sequences that will cause ARM
   cpu's to take an undefined instruction trap.  These are used to
   signal a breakpoint to GDB.
   
   The newer ARMv4T cpu's are capable of operating in ARM or Thumb
   modes.  A different instruction is required for each mode.  The ARM
   cpu's can also be big or little endian.  Thus four different
   instructions are needed to support all cases.
   
   Note: ARMv4 defines several new instructions that will take the
   undefined instruction trap.  ARM7TDMI is nominally ARMv4T, but does
   not in fact add the new instructions.  The new undefined
   instructions in ARMv4 are all instructions that had no defined
   behaviour in earlier chips.  There is no guarantee that they will
   raise an exception, but may be treated as NOP's.  In practice, it
   may only safe to rely on instructions matching:
   
   3 3 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 
   1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0
   C C C C 0 1 1 x x x x x x x x x x x x x x x x x x x x 1 x x x x
   
   Even this may only true if the condition predicate is true. The
   following use a condition predicate of ALWAYS so it is always TRUE.
   
   There are other ways of forcing a breakpoint.  ARM Linux, RisciX,
   and I suspect NetBSD will all use a software interrupt rather than
   an undefined instruction to force a trap.  This can be handled by
   redefining some or all of the following in a target dependent
   fashion.  */

#define ARM_LE_BREAKPOINT {0xFE,0xDE,0xFF,0xE7}
#define ARM_BE_BREAKPOINT {0xE7,0xFF,0xDE,0xFE}
#define THUMB_LE_BREAKPOINT {0xfe,0xdf}
#define THUMB_BE_BREAKPOINT {0xdf,0xfe}
d82 3
a84 3
/* !!!! if we're using RDP, then we're inserting breakpoints and
   storing their handles instread of what was in memory.  It is nice
   that this is the same size as a handle - otherwise remote-rdp will
d87 6
a92 6
/* BREAKPOINT_FROM_PC uses the program counter value to determine
   whether a 16- or 32-bit breakpoint should be used.  It returns a
   pointer to a string of bytes that encode a breakpoint instruction,
   stores the length of the string to *lenptr, and adjusts the pc (if
   necessary) to point to the actual memory location where the
   breakpoint should be inserted.  */
d97 3
a99 2
/* Amount PC must be decremented by after a breakpoint.  This is often
   the number of bytes in BREAKPOINT but not always.  */
d103 4
a106 3
/* Code to execute to print interesting information about the floating
   point processor (if any) or emulator.  No need to define if there
   is nothing to do. */
d109 1
a109 1
#define FLOAT_INFO	{ arm_float_info (); }
d115 3
a117 1
#define REGISTER_SIZE	4
d119 4
a122 26
/* Say how long FP registers are.  Used for documentation purposes and
   code readability in this header.  IEEE extended doubles are 80
   bits.  DWORD aligned they use 96 bits.  */
#define FP_REGISTER_RAW_SIZE	12

/* GCC doesn't support long doubles (extended IEEE values).  The FP
   register virtual size is therefore 64 bits.  Used for documentation
   purposes and code readability in this header.  */
#define FP_REGISTER_VIRTUAL_SIZE	8

/* Status registers are the same size as general purpose registers.
   Used for documentation purposes and code readability in this
   header.  */
#define STATUS_REGISTER_SIZE	REGISTER_SIZE

/* Number of machine registers.  The only define actually required 
   is NUM_REGS.  The other definitions are used for documentation
   purposes and code readability.  */
/* For 26 bit ARM code, a fake copy of the PC is placed in register 25 (PS)
   (and called PS for processor status) so the status bits can be cleared
   from the PC (register 15).  For 32 bit ARM code, a copy of CPSR is placed
   in PS.  */
#define NUM_FREGS	8	/* Number of floating point registers.  */
#define NUM_SREGS	2	/* Number of status registers.  */
#define NUM_GREGS	16	/* Number of general purpose registers.  */
#define NUM_REGS	(NUM_GREGS + NUM_FREGS + NUM_SREGS)
d125 1
a126 1

d129 6
a134 6
/* Register numbers of various important registers.  Note that some of
   these values are "real" register numbers, and correspond to the
   general registers of the machine, and some are "phony" register
   numbers which are too large to be actual register numbers as far as
   the user is concerned but do serve to get the desired values when
   passed to read_register.  */
d183 1
a183 4

#define REGISTER_BYTES ((NUM_GREGS * REGISTER_SIZE) + \
			(NUM_FREGS * FP_REGISTER_RAW_SIZE) + \
			(NUM_SREGS * STATUS_REGISTER_SIZE))
d188 13
a200 22
#define REGISTER_BYTE(N) \
     ((N) < F0_REGNUM \
      ? (N) * REGISTER_SIZE \
      : ((N) < PS_REGNUM \
	 ? (NUM_GREGS * REGISTER_SIZE + \
	    ((N) - F0_REGNUM) * FP_REGISTER_RAW_SIZE) \
	 : (NUM_GREGS * REGISTER_SIZE + \
	    NUM_FREGS * FP_REGISTER_RAW_SIZE + \
	    ((N) - FPS_REGNUM) * STATUS_REGISTER_SIZE)))

/* Number of bytes of storage in the actual machine representation for
   register N.  All registers are 4 bytes, except fp0 - fp7, which are
   12 bytes in length.  */
#define REGISTER_RAW_SIZE(N) \
     ((N) < F0_REGNUM ? REGISTER_SIZE : \
      (N) < FPS_REGNUM ? FP_REGISTER_RAW_SIZE : STATUS_REGISTER_SIZE)

/* Number of bytes of storage in a program's representation
   for register N.  */
#define REGISTER_VIRTUAL_SIZE(N) \
	((N) < F0_REGNUM ? REGISTER_SIZE : \
	 (N) < FPS_REGNUM ? FP_REGISTER_VIRTUAL_SIZE : STATUS_REGISTER_SIZE)
d204 1
a204 1
#define MAX_REGISTER_RAW_SIZE FP_REGISTER_RAW_SIZE
a206 1
#define MAX_REGISTER_VIRTUAL_SIZE FP_REGISTER_VIRTUAL_SIZE
d208 5
a212 13
/* Nonzero if register N requires conversion from raw format to
   virtual format. */
extern int arm_register_convertible (unsigned int);
#define REGISTER_CONVERTIBLE(REGNUM) (arm_register_convertible (REGNUM))

/* Convert data from raw format for register REGNUM in buffer FROM to
   virtual format with type TYPE in buffer TO. */

extern void arm_register_convert_to_virtual (unsigned int regnum,
					     struct type *type,
					     void *from, void *to);
#define REGISTER_CONVERT_TO_VIRTUAL(REGNUM,TYPE,FROM,TO) \
     arm_register_convert_to_virtual (REGNUM, TYPE, FROM, TO)
d214 2
a215 2
/* Convert data from virtual format with type TYPE in buffer FROM to
   raw format for register REGNUM in buffer TO.  */
d217 1
a217 5
extern void arm_register_convert_to_raw (unsigned int regnum,
					 struct type *type,
					 void *from, void *to);
#define REGISTER_CONVERT_TO_RAW(TYPE,REGNUM,FROM,TO) \
     arm_register_convert_to_raw (REGNUM, TYPE, FROM, TO)
d219 19
a237 2
/* Return the GDB type object for the "standard" data type of data in
   register N.  */
d240 2
a241 3
     (((unsigned)(N) - F0_REGNUM) < NUM_FREGS \
      ? builtin_type_double : builtin_type_int)

d244 1
a244 2
#define USE_STRUCT_CONVENTION(gcc_p, type) \
     arm_use_struct_convention (gcc_p, type)
d250 1
a250 1
     write_register (A1_REGNUM, (ADDR))
d252 3
a254 3
/* Extract from an array REGBUF containing the (raw) register state a
   function return value of type TYPE, and copy that, in virtual
   format, into VALBUF.  */
a255 1
extern void arm_extract_return_value (struct type *, char[], char *);
d257 4
a260 1
     arm_extract_return_value ((TYPE), (REGBUF), (VALBUF))
d262 2
a263 2
/* Write into appropriate registers a function return value of type
   TYPE, given in virtual format.  */
a264 1
extern void convert_to_extended (void *dbl, void *ptr);
d278 1
a278 1
  (extract_address ((PTR)(REGBUF), REGISTER_RAW_SIZE(0)))
d286 5
a290 5
/* Define other aspects of the stack frame.  We keep the offsets of
   all saved registers, 'cause we need 'em a lot!  We also keep the
   current size of the stack frame, and the offset of the frame
   pointer from the stack pointer (for frameless functions, and when
   we're still in the prologue of a function with a frame) */
d298 2
a299 1
extern void arm_init_extra_frame_info (int fromleaf, struct frame_info * fi);
d301 1
a301 1
	arm_init_extra_frame_info ((fromleaf), (fi))
d304 1
a304 1
CORE_ADDR arm_target_read_fp (void);
d307 2
a308 2
/* Describe the pointer in each stack frame to the previous stack
   frame (its caller).  */
d310 2
a311 2
/* FRAME_CHAIN takes a frame's nominal address and produces the
   frame's chain-pointer.
d316 2
a317 2
#define FRAME_CHAIN(thisframe) arm_frame_chain (thisframe)
extern CORE_ADDR arm_frame_chain (struct frame_info *);
d319 2
a320 3
extern int arm_frame_chain_valid (CORE_ADDR, struct frame_info *);
#define FRAME_CHAIN_VALID(chain, thisframe) \
     arm_frame_chain_valid (chain, thisframe)
d328 2
a329 2
   Sometimes we have functions that do a little setup (like saving the
   vN registers with the stmdb instruction, but DO NOT set up a frame.
d331 1
a331 1
   important not to try to parse these partial frames as frames, or we
d334 2
a335 2
   So I will demand 3 instructions between the start & end of the
   prologue before I call it a real prologue, i.e. at least
d343 1
a343 1
    
d347 1
a347 1
extern CORE_ADDR arm_frame_saved_pc (struct frame_info *);
d358 1
a358 1
/* Return number of bytes at start of arglist that are not really args. */
d362 2
a363 2
/* Put here the code to store, into a struct frame_saved_regs, the
   addresses of the saved registers of frame described by FRAME_INFO.
d365 2
a366 2
   ways in the stack frame.  sp is even more special: the address we
   return for it IS the sp for the next frame.  */
d374 2
a375 1
	arm_frame_find_saved_regs (frame_info, &(frame_saved_regs));
d380 2
a381 3
     sp = arm_push_arguments ((nargs), (args), (sp), (struct_return), (struct_addr))
extern CORE_ADDR arm_push_arguments (int, struct value **, CORE_ADDR, int,
				     CORE_ADDR);
d385 1
a385 1
void arm_push_dummy_frame (void);
d391 1
a391 1
void arm_pop_frame (void);
d403 3
a405 2
#define CALL_DUMMY {0xe1a0e00f, 0xe1a0f004, 0xe7ffdefe}
#define CALL_DUMMY_START_OFFSET	 0	/* Start execution at beginning of dummy */
d408 1
a408 1
extern int arm_call_dummy_breakpoint_offset (void);
d410 2
a411 2
/* Insert the specified number of args and function address into a
   call sequence of the above form stored at DUMMYNAME.  */
d414 1
a414 1
   arm_fix_call_dummy ((dummyname), (pc), (fun), (nargs), (args), (type), (gcc_p))
d416 24
a439 11
void arm_fix_call_dummy (char *dummy, CORE_ADDR pc, CORE_ADDR fun,
			 int nargs, struct value ** args,
			 struct type * type, int gcc_p);

CORE_ADDR arm_get_next_pc (CORE_ADDR pc);

/* Macros for setting and testing a bit in a minimal symbol that marks
   it as Thumb function.  The MSB of the minimal symbol's "info" field
   is used for this purpose. This field is already being used to store
   the symbol size, so the assumption is that the symbol size cannot
   exceed 2^31.
d442 8
a449 12
   ELF_MAKE_MSYMBOL_SPECIAL
   
   These macros test whether the COFF or ELF symbol corresponds to a
   thumb function, and set a "special" bit in a minimal symbol to
   indicate that it does.
   
   MSYMBOL_SET_SPECIAL	Actually sets the "special" bit.
   MSYMBOL_IS_SPECIAL   Tests the "special" bit in a minimal symbol.
   MSYMBOL_SIZE         Returns the size of the minimal symbol,
   			i.e. the "info" field with the "special" bit
   			masked out 
   */
a451 1

d453 1
a453 1
	MSYMBOL_INFO (msym) = (char *) (((long) MSYMBOL_INFO (msym)) | 0x80000000)
d459 1
a459 1
/* Thumb symbols are of type STT_LOPROC, (synonymous with STT_ARM_TFUNC) */
d461 2
a462 2
	{ if(ELF_ST_TYPE(((elf_symbol_type *)(sym))->internal_elf_sym.st_info) == STT_LOPROC) \
		MSYMBOL_SET_SPECIAL(msym); }
d467 2
a468 1
#endif /* TM_ARM_H */
@


1.1.1.9
log
@import gdb-2000-02-04 snapshot
@
text
@d2 1
a2 1
   Copyright 1986, 1987, 1988, 1989, 1991, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000 Free Software Foundation, Inc.
a513 3

/* The first 0x20 bytes are the trap vectors.  */
#define LOWEST_PC	0x20
@


