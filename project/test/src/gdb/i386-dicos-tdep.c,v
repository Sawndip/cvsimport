head	1.12;
access;
symbols
	gdb_7_6_1-2013-08-30-release:1.12
	gdb_7_6-2013-04-26-release:1.12
	gdb_7_6-branch:1.12.0.2
	gdb_7_6-2013-03-12-branchpoint:1.12
	gdb_7_5_1-2012-11-29-release:1.11
	gdb_7_5-2012-08-17-release:1.11
	gdb_7_5-branch:1.11.0.2
	gdb_7_5-2012-07-18-branchpoint:1.11
	gdb_7_4_1-2012-04-26-release:1.9.4.1
	gdb_7_4-2012-01-24-release:1.9.4.1
	gdb_7_4-branch:1.9.0.4
	gdb_7_4-2011-12-13-branchpoint:1.9
	gdb_7_3_1-2011-09-04-release:1.9
	gdb_7_3-2011-07-26-release:1.9
	gdb_7_3-branch:1.9.0.2
	gdb_7_3-2011-04-01-branchpoint:1.9
	gdb_7_2-2010-09-02-release:1.8
	gdb_7_2-branch:1.8.0.4
	gdb_7_2-2010-07-07-branchpoint:1.8
	gdb_7_1-2010-03-18-release:1.8
	gdb_7_1-branch:1.8.0.2
	gdb_7_1-2010-02-18-branchpoint:1.8
	gdb_7_0_1-2009-12-22-release:1.7
	gdb_7_0-2009-10-06-release:1.7
	gdb_7_0-branch:1.7.0.4
	gdb_7_0-2009-09-16-branchpoint:1.7
	msnyder-checkpoint-072509-branch:1.7.0.2
	msnyder-checkpoint-072509-branchpoint:1.7
	reverse-20081226-branch:1.5.0.4
	reverse-20081226-branchpoint:1.5
	multiprocess-20081120-branch:1.5.0.2
	multiprocess-20081120-branchpoint:1.5
	reverse-20080930-branch:1.3.0.4
	reverse-20080930-branchpoint:1.3
	reverse-20080717-branch:1.3.0.2
	reverse-20080717-branchpoint:1.3
	msnyder-reverse-20080609-branch:1.1.0.2
	msnyder-reverse-20080609-branchpoint:1.1;
locks; strict;
comment	@ * @;


1.12
date	2013.01.01.06.32.45;	author brobecke;	state Exp;
branches;
next	1.11;

1.11
date	2012.06.18.17.31.34;	author jkratoch;	state Exp;
branches;
next	1.10;

1.10
date	2012.01.04.08.17.04;	author brobecke;	state Exp;
branches;
next	1.9;

1.9
date	2011.01.01.15.33.07;	author brobecke;	state Exp;
branches
	1.9.4.1;
next	1.8;

1.8
date	2010.01.01.07.31.33;	author brobecke;	state Exp;
branches;
next	1.7;

1.7
date	2009.02.17.17.56.50;	author palves;	state Exp;
branches;
next	1.6;

1.6
date	2009.01.03.05.57.51;	author brobecke;	state Exp;
branches;
next	1.5;

1.5
date	2008.11.06.16.44.45;	author palves;	state Exp;
branches;
next	1.4;

1.4
date	2008.11.03.14.01.27;	author palves;	state Exp;
branches;
next	1.3;

1.3
date	2008.07.14.18.06.58;	author palves;	state Exp;
branches;
next	1.2;

1.2
date	2008.07.07.22.05.45;	author palves;	state Exp;
branches;
next	1.1;

1.1
date	2008.05.01.23.09.14;	author palves;	state Exp;
branches;
next	;

1.9.4.1
date	2012.01.06.04.43.15;	author brobecke;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Update years in copyright notice for the GDB files.

Two modifications:
  1. The addition of 2013 to the copyright year range for every file;
  2. The use of a single year range, instead of potentially multiple
     year ranges, as approved by the FSF.
@
text
@/* Target-dependent code for DICOS running on i386's, for GDB.

   Copyright (C) 2008-2013 Free Software Foundation, Inc.

   This file is part of GDB.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

#include "defs.h"
#include "osabi.h"
#include "gdb_string.h"
#include "dicos-tdep.h"

static void
i386_dicos_init_abi (struct gdbarch_info info, struct gdbarch *gdbarch)
{
  struct gdbarch_tdep *tdep = gdbarch_tdep (gdbarch);

  dicos_init_abi (gdbarch);
}

static enum gdb_osabi
i386_dicos_osabi_sniffer (bfd *abfd)
{
  char *target_name = bfd_get_target (abfd);

  /* On x86-DICOS, the Load Module's "header" section is 36 bytes.  */
  if (strcmp (target_name, "elf32-i386") == 0
      && dicos_load_module_p (abfd, 36))
    return GDB_OSABI_DICOS;

  return GDB_OSABI_UNKNOWN;
}

/* Provide a prototype to silence -Wmissing-prototypes.  */
void _initialize_i386_dicos_tdep (void);

void
_initialize_i386_dicos_tdep (void)
{
  gdbarch_register_osabi_sniffer (bfd_arch_i386, bfd_target_elf_flavour,
                                  i386_dicos_osabi_sniffer);

  gdbarch_register_osabi (bfd_arch_i386, 0, GDB_OSABI_DICOS,
                          i386_dicos_init_abi);
}
@


1.11
log
@gdb/
	Switch i386 and derived targets to ON_STACK.
	* amd64-dicos-tdep.c (amd64_dicos_push_dummy_code): Remove.
	(amd64_dicos_init_abi): Remove its installment.
	* dicos-tdep.c (dicos_init_abi): Remove the
	set_gdbarch_call_dummy_location call.  Update the comment here.
	* i386-dicos-tdep.c (i386_dicos_push_dummy_code): Remove.
	(i386_dicos_init_abi): Remove its installment.
	* i386-tdep.c (i386_push_dummy_code): New function.
	(i386_gdbarch_init): Call set_gdbarch_call_dummy_location, install
	i386_push_dummy_code.
@
text
@d3 1
a3 1
   Copyright (C) 2008-2012 Free Software Foundation, Inc.
@


1.10
log
@Copyright year update in most files of the GDB Project.

gdb/ChangeLog:

        Copyright year update in most files of the GDB Project.
@
text
@a24 18
static CORE_ADDR
i386_dicos_push_dummy_code (struct gdbarch *gdbarch,
			    CORE_ADDR sp, CORE_ADDR funaddr,
			    struct value **args, int nargs,
			    struct type *value_type,
			    CORE_ADDR *real_pc, CORE_ADDR *bp_addr,
			    struct regcache *regcache)
{
  int bplen;
  CORE_ADDR bppc = sp;

  gdbarch_breakpoint_from_pc (gdbarch, &bppc, &bplen);
  *bp_addr = sp - bplen;
  *real_pc = funaddr;

  return *bp_addr;
}

a30 2

  set_gdbarch_push_dummy_code (gdbarch, i386_dicos_push_dummy_code);
@


1.9
log
@run copyright.sh for 2011.
@
text
@d3 1
a3 1
   Copyright (C) 2008, 2009, 2010, 2011 Free Software Foundation, Inc.
@


1.9.4.1
log
@Copyright year update in most files of the GDB Project.

gdb/ChangeLog:

        Copyright year update in most files of the GDB Project.
@
text
@d3 1
a3 1
   Copyright (C) 2008-2012 Free Software Foundation, Inc.
@


1.8
log
@Update copyright year in most headers.

Automatic update by copyright.sh.
@
text
@d3 1
a3 1
   Copyright (C) 2008, 2009, 2010 Free Software Foundation, Inc.
@


1.7
log
@	* Makefile.in (ALL_64_TARGET_OBS): Add amd64-dicos-tdep.o.
	(ALL_TARGET_OBS): Add dicos-tdep.o.
	(ALLDEPFILES): Add amd64-dicos-tdep.c and dicos-tdep.c.
	* configure.tgt (i[34567]86-*-dicos*): Add dicos-tdep.o to
	gdb_target_obs.
	(x86_64-*-dicos*): Add dicos-tdep.o and amd64-dicos-tdep.o to
	gdb_target_obs.
	* dicos-tdep.h, dicos-tdep.c: New.
	* amd64-dicos-tdep.c: New.
	* i386-dicos-tdep.c: Don't include solib.h, solib-target.h or
	inferior.h.  Include dicos-tdep.h.
	(i386_dicos_init_abi): Call dicos_init_abi.
	(i386_dicos_bfd_has_symbol_p): Delete.
	(i386_dicos_osabi_sniffer): Use dicos_load_module_p.

	* NEWS: Mention x86-64 DICOS target support.
@
text
@d3 1
a3 1
   Copyright (C) 2008, 2009 Free Software Foundation, Inc.
@


1.6
log
@        Updated copyright notices for most files.
@
text
@d23 1
a23 3
#include "solib.h"
#include "solib-target.h"
#include "inferior.h"
d48 1
a48 1
  set_solib_ops (gdbarch, &solib_target_so_ops);
a49 8
  /* Every process, although has its own address space, sees the same
     list of shared libraries.  */
  set_gdbarch_has_global_solist (gdbarch, 1);

  /* There's no (standard definition of) entry point or a guaranteed
     text location we could find with a symbol where to place the call
     dummy, so we put it on the stack.  */
  set_gdbarch_call_dummy_location (gdbarch, ON_STACK);
a50 52

  /* DICOS rewinds itself.  Need to override the i386 default which is
     to decrement the PC.  */
  set_gdbarch_decr_pc_after_break (gdbarch, 0);
}

/* Look in the elf symbol table of ABFD for a symbol named WANTED.
   Return true if found.  */
static int
i386_dicos_bfd_has_symbol_p (bfd *abfd, const char *wanted)
{
  long storage_needed;
  int ret = 0;
  asymbol **symbol_table = NULL;

  storage_needed = bfd_get_symtab_upper_bound (abfd);
  if (storage_needed < 0)
    {
      warning (_("Can't read elf symbols from %s: %s"), bfd_get_filename (abfd),
	       bfd_errmsg (bfd_get_error ()));
      return 0;
    }

  if (storage_needed > 0)
    {
      long i, symcount;

      symbol_table = xmalloc (storage_needed);
      symcount = bfd_canonicalize_symtab (abfd, symbol_table);

      if (symcount < 0)
	warning (_("Can't read elf symbols from %s: %s"),
		 bfd_get_filename (abfd),
		 bfd_errmsg (bfd_get_error ()));
      else
	{
	  for (i = 0; i < symcount; i++)
	    {
	      asymbol *sym = symbol_table[i];
	      if (sym->name != NULL
		  && wanted[0] == sym->name[0]
		  && strcmp (wanted + 1, sym->name + 1) == 0)
		{
		  ret = 1;
		  break;
		}
	    }
	}
    }

  xfree (symbol_table);
  return ret;
d58 4
a61 13
  /* DICOS debug info files don't have a .note.ABI-tag marker or
     something similar.  We do know there's always a "header" section
     of 36 bytes, and there's always a "Dicos_loadModuleInfo" symbol
     defined.  Look for the section first, as that should be
     cheaper.  */
  if (strcmp (target_name, "elf32-i386") == 0)
    {
      asection *section = bfd_get_section_by_name (abfd, "header");
      if (section
	  && bfd_section_size (abfd, section) == 36
	  && i386_dicos_bfd_has_symbol_p (abfd, "Dicos_loadModuleInfo"))
	return GDB_OSABI_DICOS;
    }
@


1.5
log
@	* i386-dicos-tdep.c (i386_dicos_init_abi): Set decr_pc_after_break
	to 0.
@
text
@d3 1
a3 1
   Copyright (C) 2008 Free Software Foundation, Inc.
@


1.4
log
@	* remote.c (remote_start_remote): If the solib list is global,
	fetch libraries and insert breakpoints after connecting.
	* infcmd.c (post_create_inferior): If the solist is shared between
	inferiors, no need to refetch it on every new inferior.
	(detach_command): If the shared library list is shared between
	inferiors, then don't clear it on every inferior detach.
	* gdbarch.sh (has_global_solist): New.
	* i386-dicos-tdep.c (i386_dicos_init_abi): Set
	gdbarch_has_global_solist.
	* target.c (target_pre_inferior): If the shared library list is
	shared between inferiors, then don't clear it here, neither
	invalidate the memory regions or clear the target description.
	(target_detach): If the shared library list is shared between
	inferiors, then don't remove breakpoints from the target here.
	(target_disconnect): Comment.
	* solib.c (update_solib_list): Check for null_ptid.
	* breakpoint.c (insert_breakpoints, update_global_location_list):
	If the shared library list is shared between inferiors, insert
	breakpoints even if there's no execution.
	(breakpoint_init_inferior): If the shared library list is shared
	between inferiors, don't delete breakpoints or mark them
	uninserted here.

	* gdbarch.c, gdbarch.h: Regenerate.
@
text
@d61 4
@


1.3
log
@	* i386-dicos-tdep.c (i386_dicos_frame_align): Delete.
	(i386_dicos_push_dummy_code): New.
	(i386_dicos_init_abi): Don't register i386_dicos_frame_align.
	Register i386_dicos_push_dummy_code.
@
text
@d52 4
@


1.2
log
@	* i386-dicos-tdep.c: Include "inferior.h".
	(i386_dicos_frame_align): New.
	(i386_dicos_init_abi): Register i386_dicos_frame_align.  Set call
	dummy location ON_STACK.
	* Makefile.in (i386-dicos-tdep.o): Depend on $(inferior_h).
@
text
@d28 6
a33 1
i386_dicos_frame_align (struct gdbarch *gdbarch, CORE_ADDR sp)
d35 8
a42 6
  /* Having a call dummy on the stack requires a gdbarch_frame_align
     method to align the breakpoint instruction in the stack.
     Strictly speaking, we could just return SP pristine on x86.  But,
     as long as we're providing a frame align method, might as well
     align for efficiency.  */
  return sp & -(CORE_ADDR)16;
d56 1
a56 1
  set_gdbarch_frame_align (gdbarch, i386_dicos_frame_align);
@


1.1
log
@	* configure.tgt: Add i[34567]86-*-dicos* and x86_64-*-dicos*.
	(i[34567]86-*-dicos*, x86_64-*-dicos*):
	Set gdb_osabi to GDB_OSABI_DICOS.

	* defs.h (enum gdb_osabi): Add GDB_OSABI_DICOS.
	* osabi.c (gdb_osabi_name): Add "DICOS".

	* i386-dicos-tdep.c: New file.

	* Makefile.in (ALL_TARGET_OBS): Add i386-dicos-tdep.o.
	(ALLDEPFILES): Add i386-dicos-tdep.c.
	(i386-dicos-tdep.o): New rule.
@
text
@d25 12
d44 6
@

