head	1.6;
access;
symbols
	insight_7_6-2013-04-10-branchpoint:1.6
	gdb_7_6-branch:1.6.0.6
	gdb_7_5-branch:1.6.0.4
	gdb_7_4-branch:1.6.0.2
	gdb_7_3-branch:1.5.0.16
	gdb_7_1-branch:1.5.0.14
	gdb_7_0-branch:1.5.0.12
	arc-sim-20090309:1.5
	arc-insight_6_8-branch:1.5.0.10
	arc-insight_6_8-branchpoint:1.5
	insight_6_8-branch:1.5.0.8
	insight_6_8-branchpoint:1.5
	gdb_6_8-branch:1.5.0.6
	insight_6_6-20070208-release:1.5
	gdb_6_6-branch:1.5.0.4
	gdb_6_6-2006-11-15-branchpoint:1.5
	insight_6_5-20061003-release:1.5
	gdb_6_5-branch:1.5.0.2
	gdb_6_5-2006-05-14-branchpoint:1.5
	gdb-csl-gxxpro-6_3-branch:1.4.0.4
	gdb-csl-gxxpro-6_3-branchpoint:1.4
	gdb_6_4-branch:1.4.0.2
	gdb_6_4-2005-11-01-branchpoint:1.4
	gdb_6_1-2004-04-05-release:1.3
	gdb_6_1-branch:1.3.0.8
	gdb_6_1-2004-03-01-gmt-branchpoint:1.3
	gdb_6_0-2003-10-04-release:1.3
	gdb_6_0-branch:1.3.0.6
	gdb_6_0-2003-06-23-branchpoint:1.3
	gdb_5_3-2002-12-12-release:1.3
	gdb_5_3-branch:1.3.0.4
	gdb_5_3-2002-09-04-branchpoint:1.3
	gdb_5_2_1-2002-07-23-release:1.3
	gdb_5_2-2002-04-29-release:1.3
	gdb_5_2-branch:1.3.0.2
	gdb_5_2-2002-03-03-branchpoint:1.3
	gdb_5_1_1-2002-01-24-release:1.1
	cygnus_cvs_20020108_pre:1.3
	gdb_5_1_0_1-2002-01-03-branch:1.1.0.8
	gdb_5_1_0_1-2002-01-03-branchpoint:1.1
	gdb_5_1-2001-11-21-release:1.1
	gdb_s390-2001-09-26-branch:1.1.0.6
	gdb_s390-2001-09-26-branchpoint:1.1
	gdb_5_1-2001-07-29-branch:1.1.0.4
	gdb_5_1-2001-07-29-branchpoint:1.1
	dberlin-typesystem-branch:1.1.0.2
	dberlin-typesystem-branchpoint:1.1;
locks; strict;
comment	@ * @;


1.6
date	2012.02.28.21.50.51;	author kevinb;	state Exp;
branches;
next	1.5;

1.5
date	2005.12.23.18.23.16;	author eliz;	state Exp;
branches;
next	1.4;

1.4
date	2004.07.02.22.00.56;	author hunt;	state Exp;
branches;
next	1.3;

1.3
date	2001.12.21.22.31.08;	author tromey;	state Exp;
branches;
next	1.2;

1.2
date	2001.11.05.19.42.48;	author hunt;	state Exp;
branches;
next	1.1;

1.1
date	2001.05.10.18.04.23;	author kseitz;	state Exp;
branches;
next	;


desc
@@


1.6
log
@	* generic/gdbtk-cmds.h (pc_function_name): Make return type
	const.
	* generic/gdbtk-bp.c (gdb_get_breakpoint_info)
	(gdb_get_tracepoint_info): Make char * variables const to match
	recent GDB API changes.
	* generic/gdbtk-stack.c (get_frame_name): Likewise.
	* generic/gdbtk-cmds.c (gdb_get_function_command, gdb_listfuncs)
	(gdb_loc, perror_with_name_wrapper): Likewise.
	(pc_function_name): Likewise, plus change return type to be const.
@
text
@/* Tcl/Tk command interface for Insight
   Copyright (C) 2001 Free Software Foundation, Inc.

   This file is part of GDB.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street, Fifth Floor,
   Boston, MA 02110-1301, USA.  */

#if !defined(GDBTK_CMDS_H)
#define GDBTK_CMDS_H 1

/* This structure filled in gdbtk_call_wrapper and passed to
   the wrapped call function.
   It stores the command pointer and arguments 
   run in the wrapper function. */
struct wrapped_call_args
  {
    Tcl_Interp *interp;
    Tcl_ObjCmdProc *func;
    int objc;
    Tcl_Obj *CONST * objv;
    int val;
  };

/* A generic call-wrapper to catch longjmps when calling C commands from
   tcl. ALL tcl commands should be wrapped in this call. */
extern int gdbtk_call_wrapper (ClientData, Tcl_Interp *, int, Tcl_Obj * CONST[]);

/* Returns the source (demangled) name for a function at PC. Returns empty string
   if not found. Memory is owned by gdb. Do not free it. */
extern const char *pc_function_name (CORE_ADDR pc);

/* Convenience function to sprintf something(s) into a new element in
   a Tcl list object. */
extern void sprintf_append_element_to_obj (Tcl_Obj * objp, char *format, ...);

/* printf-like function to return error messages */
extern void gdbtk_set_result (Tcl_Interp *interp, const char *fmt,...);

/* Module init routines: Each module of commands should be declared here. */
extern int Gdbtk_Breakpoint_Init (Tcl_Interp *interp);
extern int Gdbtk_Stack_Init (Tcl_Interp *interp);
extern int Gdbtk_Register_Init (Tcl_Interp *interp);

/* replacement for removed gdb function */
char *symtab_to_filename (struct symtab *s);

#endif /* GDBTK_CMDS_H */
@


1.5
log
@	* generic/gdbtk.h:
	* generic/gdbtk.c:
	* generic/gdbtk-wrapper.h:
	* generic/gdbtk-wrapper.c:
	* generic/gdbtk-varobj.c:
	* generic/gdbtk-stack.c:
	* generic/gdbtk-register.c:
	* generic/gdbtk-main.c:
	* generic/gdbtk-interp.c:
	* generic/gdbtk-hooks.c:
	* generic/gdbtk-cmds.h:
	* generic/gdbtk-cmds.c:
	* generic/gdbtk-bp.c: Put (C) after Copyright.  Update the FSF
	address.
@
text
@d43 1
a43 1
extern char *pc_function_name (CORE_ADDR pc);
@


1.4
log
@2004-07-02  Martin Hunt  <hunt@@redhat.com>

	* generic/gdbtk-cmds.c (symtab_to_filename): New function. Like
	symtab_to_fullname() but returns the filename if the fullname
	cannot be found.

	* generic/gdbtk-cmds.c (gdb_find_file_command): Revert
	patch of 2004-06-11. Use symtab_to_filename() again.
	(gdb_loc): Ditto.
	(gdb_loadfile): Ditto.
	* generic/gdbtk-bp.c (gdb_get_breakpoint_info): Ditto.
	(gdb_get_tracepoint_info): Ditto.

	* generic/gdbtk-cmds.h: Declare symtab_to_filename().
@
text
@d2 1
a2 1
   Copyright 2001 Free Software Foundation, Inc.
d18 2
a19 2
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */
@


1.3
log
@	* generic/gdbtk-cmds.h (full_lookup_symtab): Don't declare.
	* generic/gdbtk-cmds.c (gdb_find_file_command): Use
	lookup_symtab.
	(gdb_listfuncs): Likewise.
	(gdb_loadfile): Likewise.
	(full_lookup_symtab): Removed.
	* generic/gdbtk-bp.c (gdb_find_bp_at_line): Use lookup_symtab.
	(gdb_set_bp): Likewise.
@
text
@d57 3
@


1.2
log
@2001-11-05  Martin M. Hunt  <hunt@@redhat.com>
	* generic/gdbtk-cmds.h (gdbtk_set_result): Declare.
	A printf-like function to return error messages.
	* generic/gdbtk-cmds.c (gdbtk_set_result): New
	function.
	(gdb_cmd): Use gdbtk_set_result.
	(gdb_immediate_command): Ditto.
	(gdb_load_info): Ditto.
	(gdb_find_file_command): Ditto.
	(gdb_listfuncs): Ditto.
	(gdb_load_disassembly): Ditto.
	(gdb_loc): Ditto.
	(gdb_set_mem): Ditto.
	(gdb_get_mem): Ditto.
	(gdb_loadfile): Ditto.
	* generic/gdbtk-varobj.c (variable_format): Ditto.
	(variable_value): Ditto.
	* generic/gdbtk-stack.c (gdb_get_vars_command): Ditto.
	* generic/gdbtk-bp.c (gdb_get_breakpoint_info): Ditto.
	(gdb_set_bp): Ditto.
	(gdb_set_bp_addr): Ditto.
	(gdb_get_tracepoint_info): Ditto.
@
text
@a40 4
/* Like lookup_symtab but this deals with full pathnames and multiple
   source files with the same basename. FIXME: why doesn't gdb use this? */
extern struct symtab *full_lookup_symtab (char *file);

@


1.1
log
@	* generic/gdbtk-cmds.c: Put on diet. All breakpoint-,
	tracepoint-, register-, and stack-related functions moved
	into separate files.
	(call_wrapper): Renamed to "gdbtk_call_wrapper" and export.
	Update all callers.
	* generic/gdbtk.h: Move all breakpoint-related stuff into
	gdbtk-bp.c.
	Remove declaration for "call_wrapper". Now in gdbtk-cmds.h
	(and called "gdbtk_call_wrapper").
	* generic/gdbtk-varobj.c: Include "gdbtk-cmds.h".
	* generic/gdbtk-cmds.h: New file.
	* generic/gdbtk-bp.c: New file.
	* generic/gdbtk-register.c: New file.
	* generic/gdbtk-stack.c: New file.
@
text
@d53 3
@

