head	1.57;
access;
symbols
	insight_7_6-2013-04-10-branchpoint:1.53
	gdb_7_6-branch:1.53.0.4
	gdb_7_5-branch:1.53.0.2
	gdb_7_4-branch:1.51.0.4
	gdb_7_3-branch:1.51.0.2
	gdb_7_1-branch:1.50.0.4
	gdb_7_0-branch:1.50.0.2
	arc-sim-20090309:1.46
	arc-insight_6_8-branch:1.46.0.6
	arc-insight_6_8-branchpoint:1.46
	insight_6_8-branch:1.46.0.4
	insight_6_8-branchpoint:1.46
	gdb_6_8-branch:1.46.0.2
	insight_6_6-20070208-release:1.44.4.1
	gdb_6_6-branch:1.44.0.4
	gdb_6_6-2006-11-15-branchpoint:1.44
	insight_6_5-20061003-release:1.44
	gdb_6_5-branch:1.44.0.2
	gdb_6_5-2006-05-14-branchpoint:1.44
	gdb-csl-gxxpro-6_3-branch:1.43.0.4
	gdb-csl-gxxpro-6_3-branchpoint:1.43
	gdb_6_4-branch:1.43.0.2
	gdb_6_4-2005-11-01-branchpoint:1.43
	gdb_6_1-2004-04-05-release:1.39
	gdb_6_1-branch:1.39.0.2
	gdb_6_1-2004-03-01-gmt-branchpoint:1.39
	gdb_6_0-2003-10-04-release:1.36
	gdb_6_0-branch:1.36.0.2
	gdb_6_0-2003-06-23-branchpoint:1.36
	gdb_5_3-2002-12-12-release:1.29
	gdb_5_3-branch:1.29.0.2
	gdb_5_3-2002-09-04-branchpoint:1.29
	gdb_5_2_1-2002-07-23-release:1.26.2.1
	gdb_5_2-2002-04-29-release:1.26.2.1
	gdb_5_2-branch:1.26.0.2
	gdb_5_2-2002-03-03-branchpoint:1.26
	gdb_5_1_1-2002-01-24-release:1.15
	cygnus_cvs_20020108_pre:1.24
	gdb_5_1_0_1-2002-01-03-branch:1.15.0.8
	gdb_5_1_0_1-2002-01-03-branchpoint:1.15
	gdb_5_1-2001-11-21-release:1.15
	gdb_s390-2001-09-26-branch:1.15.0.6
	gdb_s390-2001-09-26-branchpoint:1.15
	gdb_5_1-2001-07-29-branch:1.15.0.4
	gdb_5_1-2001-07-29-branchpoint:1.15
	dberlin-typesystem-branch:1.15.0.2
	dberlin-typesystem-branchpoint:1.15
	insight-precleanup-2001-01-01:1.8
	gdb_5_0-2000-05-19-release:1.1.1.1.2.1
	gdb_4_18_2-2000-05-18-release:1.1.1.1.2.1
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.1.2.1
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.1.2.1
	gdb_5_0-2000-04-10-branch:1.1.1.1.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1.1.1
	repo-unification-2000-02-06:1.1.1.1
	insight-2000-02-04:1.1.1.1
	SNAPSHOT:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.57
date	2013.09.20.11.38.18;	author aburgess;	state Exp;
branches;
next	1.56;

1.56
date	2013.07.23.16.40.47;	author kseitz;	state Exp;
branches;
next	1.55;

1.55
date	2013.07.02.17.07.29;	author kseitz;	state Exp;
branches;
next	1.54;

1.54
date	2013.06.05.20.19.46;	author kseitz;	state Exp;
branches;
next	1.53;

1.53
date	2012.03.30.07.04.59;	author rosch;	state Exp;
branches;
next	1.52;

1.52
date	2012.03.28.13.09.12;	author rosch;	state Exp;
branches;
next	1.51;

1.51
date	2010.06.18.22.25.26;	author muller;	state Exp;
branches;
next	1.50;

1.50
date	2009.04.06.23.33.32;	author muller;	state Exp;
branches;
next	1.49;

1.49
date	2009.04.06.23.11.10;	author muller;	state Exp;
branches;
next	1.48;

1.48
date	2009.03.25.23.43.07;	author muller;	state Exp;
branches;
next	1.47;

1.47
date	2008.08.02.22.08.32;	author kseitz;	state Exp;
branches;
next	1.46;

1.46
date	2008.03.03.23.25.03;	author kseitz;	state Exp;
branches;
next	1.45;

1.45
date	2006.12.01.02.09.24;	author kseitz;	state Exp;
branches;
next	1.44;

1.44
date	2005.12.23.18.23.16;	author eliz;	state Exp;
branches
	1.44.4.1;
next	1.43;

1.43
date	2005.09.12.16.00.37;	author kseitz;	state Exp;
branches;
next	1.42;

1.42
date	2005.04.28.23.45.07;	author bje;	state Exp;
branches;
next	1.41;

1.41
date	2005.02.25.22.23.25;	author kseitz;	state Exp;
branches;
next	1.40;

1.40
date	2004.04.22.16.51.43;	author kseitz;	state Exp;
branches;
next	1.39;

1.39
date	2004.02.06.18.30.48;	author fnf;	state Exp;
branches;
next	1.38;

1.38
date	2003.11.25.01.44.06;	author carlton;	state Exp;
branches;
next	1.37;

1.37
date	2003.08.04.17.08.23;	author carlton;	state Exp;
branches;
next	1.36;

1.36
date	2003.02.18.23.33.05;	author kseitz;	state Exp;
branches;
next	1.35;

1.35
date	2003.02.17.18.49.11;	author cgf;	state Exp;
branches;
next	1.34;

1.34
date	2003.02.17.18.41.29;	author cgf;	state Exp;
branches;
next	1.33;

1.33
date	2003.02.12.16.02.03;	author cagney;	state Exp;
branches;
next	1.32;

1.32
date	2003.02.11.16.08.38;	author cagney;	state Exp;
branches;
next	1.31;

1.31
date	2003.01.21.21.45.39;	author hunt;	state Exp;
branches;
next	1.30;

1.30
date	2002.11.27.19.09.17;	author hunt;	state Exp;
branches;
next	1.29;

1.29
date	2002.08.14.15.44.24;	author kseitz;	state Exp;
branches;
next	1.28;

1.28
date	2002.04.17.18.13.04;	author cagney;	state Exp;
branches;
next	1.27;

1.27
date	2002.03.25.16.45.35;	author aoliva;	state Exp;
branches;
next	1.26;

1.26
date	2002.02.07.21.56.07;	author hunt;	state Exp;
branches
	1.26.2.1;
next	1.25;

1.25
date	2002.02.07.05.05.06;	author hunt;	state Exp;
branches;
next	1.24;

1.24
date	2001.11.20.21.27.14;	author kseitz;	state Exp;
branches;
next	1.23;

1.23
date	2001.10.04.15.01.35;	author tromey;	state Exp;
branches;
next	1.22;

1.22
date	2001.09.19.18.10.37;	author kseitz;	state Exp;
branches;
next	1.21;

1.21
date	2001.09.10.19.21.47;	author irox;	state Exp;
branches;
next	1.20;

1.20
date	2001.08.21.19.29.00;	author kseitz;	state Exp;
branches;
next	1.19;

1.19
date	2001.08.21.16.55.21;	author kseitz;	state Exp;
branches;
next	1.18;

1.18
date	2001.08.16.23.04.46;	author kseitz;	state Exp;
branches;
next	1.17;

1.17
date	2001.08.16.17.38.18;	author kseitz;	state Exp;
branches;
next	1.16;

1.16
date	2001.08.15.21.13.56;	author kseitz;	state Exp;
branches;
next	1.15;

1.15
date	2001.06.07.14.43.01;	author kseitz;	state Exp;
branches;
next	1.14;

1.14
date	2001.06.05.22.01.21;	author hunt;	state Exp;
branches;
next	1.13;

1.13
date	2001.05.10.18.04.23;	author kseitz;	state Exp;
branches;
next	1.12;

1.12
date	2001.05.03.18.13.21;	author kseitz;	state Exp;
branches;
next	1.11;

1.11
date	2001.04.19.05.28.54;	author hunt;	state Exp;
branches;
next	1.10;

1.10
date	2001.04.05.02.02.14;	author cgf;	state Exp;
branches;
next	1.9;

1.9
date	2001.04.05.00.04.28;	author hunt;	state Exp;
branches;
next	1.8;

1.8
date	2000.11.29.00.27.46;	author fnasser;	state Exp;
branches;
next	1.7;

1.7
date	2000.10.13.20.50.44;	author fnasser;	state Exp;
branches;
next	1.6;

1.6
date	2000.07.02.20.07.07;	author kevinb;	state Exp;
branches;
next	1.5;

1.5
date	2000.06.08.08.13.20;	author cagney;	state Exp;
branches;
next	1.4;

1.4
date	2000.06.06.20.15.52;	author ezannoni;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.17.20.20.59;	author jlarmour;	state Exp;
branches;
next	1.2;

1.2
date	2000.04.14.08.04.46;	author jlarmour;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.07.00.19.42;	author jsm;	state Exp;
branches
	1.1.1.1;
next	;

1.44.4.1
date	2006.12.08.04.16.39;	author kseitz;	state Exp;
branches;
next	;

1.26.2.1
date	2002.03.25.16.46.19;	author aoliva;	state Exp;
branches;
next	;

1.1.1.1
date	2000.02.07.00.19.42;	author jsm;	state Exp;
branches
	1.1.1.1.2.1;
next	;

1.1.1.1.2.1
date	2000.04.14.08.06.27;	author jlarmour;	state Exp;
branches;
next	;


desc
@@


1.57
log
@Remove use of deprecated_init_ui_hook.

  https://sourceware.org/ml/insight/2013-q3/msg00042.html

gdb/gdbtk/ChangeLog

        * generic/gdbtk.c: Add include of "main.h".
        (gdbtk_init_1): Remove.
        (argv0): Remove.
        (_initialize_gdbtk): No longer set deprecated_init_ui_hook.
        (gdbtk_init): Use get_gdb_program_name function from main.h.
@
text
@/* Startup code for Insight
   Copyright (C) 1994-2013 Free Software Foundation, Inc.

   Written by Stu Grossman <grossman@@cygnus.com> of Cygnus Support.

   This file is part of GDB.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street, Fifth Floor,
   Boston, MA 02110-1301, USA.  */

#include "defs.h"
#include "inferior.h"
#include "symfile.h"
#include "objfiles.h"
#include "gdbcore.h"
#include "tracepoint.h"
#include "demangle.h"
#include "version.h"
#include "top.h"
#include "annotate.h"
#include "exceptions.h"
#include "main.h"

#if defined(_WIN32) || defined(__CYGWIN__)
#define WIN32_LEAN_AND_MEAN
#include <windows.h>
#endif

/* tcl header files includes varargs.h unless HAS_STDARG is defined,
   but gdb uses stdarg.h, so make sure HAS_STDARG is defined.  */
#define HAS_STDARG 1

#include <tcl.h>
#include <tk.h>
#include "guitcl.h"
#include "gdbtk.h"

#include <fcntl.h>
#include "gdb_stat.h"
#ifdef HAVE_SYS_IOCTL_H
#include <sys/ioctl.h>
#endif
#include <sys/time.h>
#include <signal.h>

#include "gdb_string.h"
#include "dis-asm.h"
#include "gdbcmd.h"

#ifdef __CYGWIN32__
#include <sys/cygwin.h>		/* for cygwin32_attach_handle_to_fd */
#endif

extern void _initialize_gdbtk (void);

#ifndef __MINGW32__
/* For unix natives, we use a timer to periodically keep the gui alive.
   See comments before x_event. */
static sigset_t nullsigmask;
static struct sigaction act1, act2;
static struct itimerval it_on, it_off;

static void
x_event_wrapper (int signo)
{
  x_event (signo);
}
#endif

/*
 * This variable controls the interaction with an external editor.
 */

char *external_editor_command = NULL;

extern int Tktable_Init (Tcl_Interp * interp);

void gdbtk_init (void);

void gdbtk_interactive (void);

static void cleanup_init (void *ignore);

static void tk_command (char *, int);

static int target_should_use_timer (struct target_ops *t);

int target_is_native (struct target_ops *t);

int gdbtk_test (char *);

static void view_command (char *, int);

/* Handle for TCL interpreter */
Tcl_Interp *gdbtk_interp = NULL;

static int gdbtk_timer_going = 0;

/* linked variable used to tell tcl what the current thread is */
int gdb_context = 0;

/* This variable is true when the inferior is running.  See note in
 * gdbtk.h for details.
 */
int running_now;

/* This variable holds the name of a Tcl file which should be sourced by the
   interpreter when it goes idle at startup. Used with the testsuite. */
static char *gdbtk_source_filename = NULL;

int gdbtk_disable_fputs = 1;

#ifndef _WIN32

/* Supply malloc calls for tcl/tk.  We do not want to do this on
   Windows, because Tcl_Alloc is probably in a DLL which will not call
   the mmalloc routines.
   We also don't need to do it for Tcl/Tk8.1, since we locally changed the
   allocator to use malloc & free. */

#if TCL_MAJOR_VERSION == 8 && TCL_MINOR_VERSION == 0
char *
TclpAlloc (unsigned int size)
{
  return xmalloc (size);
}

char *
TclpRealloc (char *ptr, unsigned int size)
{
  return xrealloc (ptr, size);
}

void
TclpFree (char *ptr)
{
  free (ptr);
}
#endif /* TCL_VERSION == 8.0 */

#endif /* ! _WIN32 */

#ifdef _WIN32

/* On Windows, if we hold a file open, other programs can't write to
 * it.  In particular, we don't want to hold the executable open,
 * because it will mean that people have to get out of the debugging
 * session in order to remake their program.  So we close it, although
 * this will cost us if and when we need to reopen it.
 */

void
close_bfds (void)
{
  struct objfile *o;
  
  ALL_OBJFILES (o)
    {
      if (o->obfd != NULL)
	bfd_cache_close (o->obfd);
    }
  
  if (exec_bfd != NULL)
    bfd_cache_close (exec_bfd);
}

#endif /* _WIN32 */


/* TclDebug (const char *fmt, ...) works just like printf() but 
 * sends the output to the GDB TK debug window. 
 * Not for normal use; just a convenient tool for debugging
 */

void
TclDebug (char level, const char *fmt,...)
{
  va_list args;
  char *buf;
  const char *v[3];
  char *merge;
  char *priority;

  switch (level)
    {
    case 'W':
      priority = "W";
      break;
    case 'E':
      priority = "E";
      break;
    case 'X':
      priority = "X";
      break;
    default:
      priority = "I";
    }

  va_start (args, fmt);


  buf = xstrvprintf (fmt, args);
  va_end (args);

  v[0] = "dbug";
  v[1] = priority;
  v[2] = buf;

  merge = Tcl_Merge (3, v);
  if (Tcl_Eval (gdbtk_interp, merge) != TCL_OK)
    Tcl_BackgroundError (gdbtk_interp);
  Tcl_Free (merge);
  free(buf);
}


/*
 * The rest of this file contains the start-up, and event handling code for gdbtk.
 */

/*
 * This cleanup function is added to the cleanup list that surrounds the Tk
 * main in gdbtk_init.  It deletes the Tcl interpreter.
 */

static void
cleanup_init (void *ignore)
{
  if (gdbtk_interp != NULL)
    Tcl_DeleteInterp (gdbtk_interp);
  gdbtk_interp = NULL;
}

/* Come here during long calculations to check for GUI events.  Usually invoked
   via the QUIT macro.  */

void
gdbtk_interactive (void)
{
  /* Tk_DoOneEvent (TK_DONT_WAIT|TK_IDLE_EVENTS); */
}

/* Start a timer which will keep the GUI alive while in target_wait. */
void
gdbtk_start_timer (void)
{
  static int first = 1;

  if (first)
    {
      /* first time called, set up all the structs */
      first = 0;
#ifndef __MINGW32__
      sigemptyset (&nullsigmask);

      act1.sa_handler = x_event_wrapper;
      act1.sa_mask = nullsigmask;
      act1.sa_flags = 0;

      act2.sa_handler = SIG_IGN;
      act2.sa_mask = nullsigmask;
      act2.sa_flags = 0;

      it_on.it_interval.tv_sec = 0;
      it_on.it_interval.tv_usec = 250000;	/* .25 sec */
      it_on.it_value.tv_sec = 0;
      it_on.it_value.tv_usec = 250000;

      it_off.it_interval.tv_sec = 0;
      it_off.it_interval.tv_usec = 0;
      it_off.it_value.tv_sec = 0;
      it_off.it_value.tv_usec = 0;
#endif
    }

  if (target_should_use_timer (&current_target))
    {
      if (!gdbtk_timer_going)
	{
#ifndef __MINGW32__
	  sigaction (SIGALRM, &act1, NULL);
	  setitimer (ITIMER_REAL, &it_on, NULL);
#endif
	  gdbtk_timer_going = 1;
	}
    }
  return;
}

/* Stop the timer if it is running. */
void
gdbtk_stop_timer (void)
{
  if (gdbtk_timer_going)
    {
      gdbtk_timer_going = 0;
#ifndef __MINGW32__
      setitimer (ITIMER_REAL, &it_off, NULL);
      sigaction (SIGALRM, &act2, NULL);
#endif
    }
  return;
}

/* Should this target use the timer? See comments before
   x_event for the logic behind all this. */
static int
target_should_use_timer (struct target_ops *t)
{
  return target_is_native (t);
}

/* Is T a native target? */
int
target_is_native (struct target_ops *t)
{
  char *name = t->to_shortname;

  if (strcmp (name, "exec") == 0 || strcmp (name, "hpux-threads") == 0
      || strcmp (name, "child") == 0 || strcmp (name, "procfs") == 0
      || strcmp (name, "solaris-threads") == 0
      || strcmp (name, "linuxthreads") == 0
      || strcmp (name, "multi-thread") == 0)
    return 1;

  return 0;
}

/* gdbtk_init installs this function as a final cleanup.  */

static void
gdbtk_cleanup (PTR dummy)
{
  Tcl_Eval (gdbtk_interp, "gdbtk_cleanup");
  Tcl_Finalize ();
}


/* Initialize gdbtk.  This involves creating a Tcl interpreter,
 * defining all the Tcl commands that the GUI will use, pointing
 * all the gdb "hooks" to the correct functions,
 * and setting the Tcl auto loading environment so that we can find all
 * the Tcl based library files.
 */

void
gdbtk_init (void)
{
  struct cleanup *old_chain;
  char *s;
  int element_count;
  const char **exec_path;
  CONST char *internal_exec_name;
  Tcl_Obj *command_obj;
  int running_from_builddir;

  old_chain = make_cleanup (cleanup_init, 0);

  /* First init tcl and tk. */
  Tcl_FindExecutable (get_gdb_program_name ());
  gdbtk_interp = Tcl_CreateInterp ();

#ifdef TCL_MEM_DEBUG
  Tcl_InitMemory (gdbtk_interp);
#endif

  if (!gdbtk_interp)
    error ("Tcl_CreateInterp failed");

  /* Set up some globals used by gdb to pass info to gdbtk
     for start up options and the like */
  s = xstrprintf ("%d", inhibit_gdbinit);
  Tcl_SetVar2 (gdbtk_interp, "GDBStartup", "inhibit_prefs", s, TCL_GLOBAL_ONLY);
  free(s);
   
  /* Note: Tcl_SetVar2() treats the value as read-only (making a
     copy).  Unfortunately it does not mark the parameter as
     ``const''. */
  Tcl_SetVar2 (gdbtk_interp, "GDBStartup", "host_name", (char*) host_name, TCL_GLOBAL_ONLY);
  Tcl_SetVar2 (gdbtk_interp, "GDBStartup", "target_name", (char*) target_name, TCL_GLOBAL_ONLY);
  {
#ifdef __CYGWIN
    char *srcdir = (char *) alloca (cygwin_posix_to_win32_path_list_buf_size (SRC_DIR));
    cygwin_posix_to_win32_path_list (SRC_DIR, srcdir);
#else /* !__CYGWIN */
    char *srcdir = SRC_DIR;
#endif /* !__CYGWIN */
    Tcl_SetVar2 (gdbtk_interp, "GDBStartup", "srcdir", srcdir, TCL_GLOBAL_ONLY);
  }

  /* This is really lame, but necessary. We need to set the path to our
     library sources in the global GDBTK_LIBRARY. This was only necessary
     for running from the build dir, but when using a system-supplied
     Tcl/Tk/Itcl, we cannot rely on the user installing Insight into
     the same tcl library directory. */

  internal_exec_name = Tcl_GetNameOfExecutable ();

  Tcl_SplitPath ((char *) internal_exec_name, &element_count, &exec_path);
  if (strcmp (exec_path[element_count - 2], "bin") == 0)
    running_from_builddir = 0;
  else
    running_from_builddir = 1;
  Tcl_Free ((char *) exec_path);

  /* This seems really complicated, and that's because it is.
     We would like to preserve the following ways of running
     Insight (and having it work, of course):

     1. Installed using installed Tcl et al
     2. From build directory using installed Tcl et al
     3. Installed using Tcl et al from the build tree
     4. From build directory using Tcl et al from the build tree

     When running from the builddir (nos. 2,4), we set all the
     *_LIBRARY variables manually to point at the proper locations in
     the source tree. (When Tcl et al are installed, their
     corresponding variables get set incorrectly, but tcl_findLibrary
     will still find the correct installed versions.)

     When not running from the build directory, we must set GDBTK_LIBRARY,
     just in case we are running from a non-standard install directory
     (i.e., Tcl and Insight were installed into two different
     install directories). One snafu: we use libgui's Paths
     environment variable to do this, so we cannot actually
     set GDBTK_LIBRARY until libgui is initialized. */

  if (running_from_builddir)
    {
      /* We check to see if TCL_LIBRARY, TK_LIBRARY,
	 ITCL_LIBRARY, ITK_LIBRARY, and maybe a couple other
	 environment variables have been set (we don't want
	 to override the User's settings).

	 If the *_LIBRARY variable is is not set, point it at
	 the source directory. */
      static char set_lib_paths_script[] = "\
          set srcDir [file dirname $GDBStartup(srcdir)]\n\
          if {![info exists env(TCL_LIBRARY)]} {\n\
              set env(TCL_LIBRARY) [file join $srcDir tcl library]\n\
          }\n\
\
          if {![info exists env(TK_LIBRARY)]} {\n\
              set env(TK_LIBRARY) [file join $srcDir tk library]\n\
          }\n\
\
          if {![info exists env(ITCL_LIBRARY)]} {\n\
              set env(ITCL_LIBRARY) [file join $srcDir itcl itcl library]\n\
          }\n\
\
          if {![info exists env(ITK_LIBRARY)]} {\n\
              set env(ITK_LIBRARY) [file join $srcDir itcl itk library]\n\
          }\n\
\
          if {![info exists env(IWIDGETS_LIBRARY)]} {\n\
              set env(IWIDGETS_LIBRARY) \
                     [file join $srcDir itcl iwidgets generic]\n\
          }\n\
\
	  if {![info exists env(GDBTK_LIBRARY)]} {\n\
	      set env(GDBTK_LIBRARY) [file join $GDBStartup(srcdir) gdbtk library]\n\
	  }\n\
\
          # Append the directory with the itcl/itk/iwidgets pkg indexes\n\
          set startDir [file dirname [file dirname [info nameofexecutable]]]\n\
          lappend ::auto_path [file join $startDir itcl itcl]\n\
          lappend ::auto_path [file join $startDir itcl itk]\n\
          lappend ::auto_path [file join $startDir itcl iwidgets]\n";

      command_obj = Tcl_NewStringObj (set_lib_paths_script, -1);
      Tcl_IncrRefCount (command_obj);
      Tcl_EvalObj (gdbtk_interp, command_obj);
      Tcl_DecrRefCount (command_obj);
    }

  make_final_cleanup (gdbtk_cleanup, NULL);

  if (Tcl_Init (gdbtk_interp) != TCL_OK)
    error ("Tcl_Init failed: %s", Tcl_GetStringResult (gdbtk_interp));

  /* Initialize the Paths variable.  */
  if (ide_initialize_paths (gdbtk_interp, "") != TCL_OK)
    error ("ide_initialize_paths failed: %s", Tcl_GetStringResult (gdbtk_interp));

  if (Tk_Init (gdbtk_interp) != TCL_OK)
    error ("Tk_Init failed: %s", Tcl_GetStringResult (gdbtk_interp));

  if (Tktable_Init (gdbtk_interp) != TCL_OK)
    error ("Tktable_Init failed: %s", Tcl_GetStringResult (gdbtk_interp));

  Tcl_StaticPackage (gdbtk_interp, "Tktable", Tktable_Init,
		     (Tcl_PackageInitProc *) NULL);

  /* If we are not running from the build directory,
     initialize GDBTK_LIBRARY. See comments above. */
  if (!running_from_builddir)
    {
      static char set_gdbtk_library_script[] = "\
	  if {![info exists env(GDBTK_LIBRARY)]} {\n\
	      set env(GDBTK_LIBRARY) [file join [file dirname [file dirname $Paths(guidir)]] insight1.0]\n\
	  }\n";

      command_obj = Tcl_NewStringObj (set_gdbtk_library_script, -1);
      Tcl_IncrRefCount (command_obj);
      Tcl_EvalObj (gdbtk_interp, command_obj);
      Tcl_DecrRefCount (command_obj);
    }

  /*
   * These are the commands to do some Windows Specific stuff...
   */

#ifdef __WIN32__
  if (ide_create_messagebox_command (gdbtk_interp) != TCL_OK)
    error ("messagebox command initialization failed");
  /* On Windows, create a sizebox widget command */
#if 0
  if (ide_create_sizebox_command (gdbtk_interp) != TCL_OK)
    error ("sizebox creation failed");
#endif
  if (ide_create_winprint_command (gdbtk_interp) != TCL_OK)
    error ("windows print code initialization failed");
  if (ide_create_win_grab_command (gdbtk_interp) != TCL_OK)
    error ("grab support command initialization failed");
  if (ide_create_shell_execute_command (gdbtk_interp) != TCL_OK)
    error ("cygwin shell execute command initialization failed");
#endif
#ifdef __CYGWIN32__
  /* Path conversion functions.  */
  if (ide_create_cygwin_path_command (gdbtk_interp) != TCL_OK)
    error ("cygwin path command initialization failed");
#endif

  /* Only for testing -- and only when it can't be done any
     other way. */
  if (cyg_create_warp_pointer_command (gdbtk_interp) != TCL_OK)
    error ("warp_pointer command initialization failed");

  /*
   * This adds all the Gdbtk commands.
   */

  if (Gdbtk_Init (gdbtk_interp) != TCL_OK)
    {
      error ("Gdbtk_Init failed: %s", Tcl_GetStringResult (gdbtk_interp));
    }

  Tcl_StaticPackage (gdbtk_interp, "Insight", Gdbtk_Init, NULL);

  /* Add a back door to Tk from the gdb console... */

  add_com ("tk", class_obscure, tk_command,
	   "Send a command directly into tk.");

  add_com ("view", class_obscure, view_command,
	   "View a location in the source window.");

  /*
   * Set the variable for external editor:
   */

  if (external_editor_command != NULL)
    {
      Tcl_SetVar (gdbtk_interp, "external_editor_command",
		  external_editor_command, 0);
      xfree (external_editor_command);
      external_editor_command = NULL;
    }

#ifdef __CYGWIN32__
  (void) FreeConsole ();
#endif

  discard_cleanups (old_chain);
}

void
gdbtk_source_start_file (void)
{
  /* find the gdb tcl library and source main.tcl */
#ifdef NO_TCLPRO_DEBUGGER
  static char script[] = "\
proc gdbtk_find_main {} {\n\
    global Paths GDBTK_LIBRARY\n\
    rename gdbtk_find_main {}\n\
    tcl_findLibrary insight 1.0 {} main.tcl GDBTK_LIBRARY GDBTKLIBRARY\n\
    set Paths(appdir) $GDBTK_LIBRARY\n\
}\n\
gdbtk_find_main";
#else
    static char script[] = "\
proc gdbtk_find_main {} {\n\
    global Paths GDBTK_LIBRARY env\n\
    rename gdbtk_find_main {}\n\
    if {[info exists env(DEBUG_STUB)]} {\n\
        source $env(DEBUG_STUB)\n\
        debugger_init\n\
        set debug_startup 1\n\
    } else {\n\
        set debug_startup 0\n\
    }\n\
    tcl_findLibrary insight 1.0 {} main.tcl GDBTK_LIBRARY GDBTK_LIBRARY\n\
    set Paths(appdir) $GDBTK_LIBRARY\n\
}\n\
gdbtk_find_main";
#endif /* NO_TCLPRO_DEBUGGER */

  /* now enable gdbtk to parse the output from gdb */
  gdbtk_disable_fputs = 0;
    
  if (Tcl_GlobalEval (gdbtk_interp, (char *) script) != TCL_OK)
    {
      struct gdb_exception e;
      const char *msg;

      /* Force errorInfo to be set up propertly.  */
      Tcl_AddErrorInfo (gdbtk_interp, "");
      msg = Tcl_GetVar (gdbtk_interp, "errorInfo", TCL_GLOBAL_ONLY);

#ifdef _WIN32
      /* On windows, display the error using a pop-up message box.
	 If GDB wasn't started from the DOS prompt, the user won't
	 get to see the failure reason.  */
      MessageBox (NULL, msg, NULL, MB_OK | MB_ICONERROR | MB_TASKMODAL);
#else
      /* gdb_stdout is already pointing to OUR stdout, so we cannot
	 use *_[un]filtered here. Since we're "throwing" an exception
         which should cause us to exit, just print out the error
         to stderr. */
      fputs (msg, stderr);
#endif

      e.reason  = RETURN_ERROR;
      e.error   = GENERIC_ERROR;
      e.message = msg;
      throw_exception (e);
    }

  /* Now source in the filename provided by the --tclcommand option.
     This is mostly used for the gdbtk testsuite... */

  if (gdbtk_source_filename != NULL)
    {
      char *s = "after idle source ";
      char *script = concat (s, gdbtk_source_filename, (char *) NULL);
      Tcl_Eval (gdbtk_interp, script);
      free (gdbtk_source_filename);
      free (script);
    }
}

/* gdbtk_test is used in main.c to validate the -tclcommand option to
   gdb, which sources in a file of tcl code after idle during the
   startup procedure. */

int
gdbtk_test (char *filename)
{
  if (access (filename, R_OK) != 0)
    return 0;
  else
    gdbtk_source_filename = xstrdup (filename);
  return 1;
}

/* Come here during initialize_all_files () */

void
_initialize_gdbtk (void)
{
#ifdef __CYGWIN__
  /* Current_interpreter not set yet, so we must check
     if "interpreter_p" is set to "insight" to know if
     insight is GOING to run. */
  if (strcmp (interpreter_p, "insight") != 0)
    {
      DWORD ft = GetFileType (GetStdHandle (STD_INPUT_HANDLE));

      switch (ft)
	{
	case FILE_TYPE_DISK:
	case FILE_TYPE_CHAR:
	case FILE_TYPE_PIPE:
	  break;
	default:
	  AllocConsole ();
	  cygwin_attach_handle_to_fd ("/dev/conin", 0,
				      GetStdHandle (STD_INPUT_HANDLE),
				      1, GENERIC_READ);
	  cygwin_attach_handle_to_fd ("/dev/conout", 1,
				      GetStdHandle (STD_OUTPUT_HANDLE),
				      0, GENERIC_WRITE);
	  cygwin_attach_handle_to_fd ("/dev/conout", 2,
				      GetStdHandle (STD_ERROR_HANDLE),
				      0, GENERIC_WRITE);
	  break;
	}
    }
#endif
}

static void
tk_command (char *cmd, int from_tty)
{
  int retval;
  char *result;
  struct cleanup *old_chain;

  /* Catch case of no argument, since this will make the tcl interpreter 
     dump core. */
  if (cmd == NULL)
    error_no_arg ("tcl command to interpret");

  retval = Tcl_Eval (gdbtk_interp, cmd);

  result = xstrdup (Tcl_GetStringResult (gdbtk_interp));

  old_chain = make_cleanup (xfree, result);

  if (retval != TCL_OK)
    error ("%s", result);

  printf_unfiltered ("%s\n", result);

  do_cleanups (old_chain);
}

static void
view_command (char *args, int from_tty)
{
  char *script;
  struct cleanup *old_chain;

  if (args != NULL)
    {
      script = xstrprintf (
		 "[lindex [ManagedWin::find SrcWin] 0] location BROWSE_TAG [gdb_loc %s]",
		 args);
      old_chain = make_cleanup (xfree, script);
      if (Tcl_Eval (gdbtk_interp, script) != TCL_OK)
	{
	  Tcl_Obj *obj = Tcl_GetObjResult (gdbtk_interp);
	  error ("%s", Tcl_GetStringFromObj (obj, NULL));
	}

      do_cleanups (old_chain);
    }
  else
    error ("Argument required (location to view)");
}
@


1.56
log
@	* generic/gdbtk.c (close_bfds): Update declaration.
@
text
@d34 1
a91 2
static void gdbtk_init_1 (char *argv0);

a123 2

static const char *argv0; 
d372 1
a372 1
  Tcl_FindExecutable (argv0);
a663 7
static void
gdbtk_init_1 (char *arg0)
{
  argv0 = arg0;
  deprecated_init_ui_hook = NULL;
}

d683 1
d687 1
a687 4
  if (strcmp (interpreter_p, "insight") == 0)
    deprecated_init_ui_hook = gdbtk_init_1;
#ifdef __CYGWIN__
  else
@


1.55
log
@	* generic/gdbtk-cmds.c (gdb_listfuncs): Update declaration.
	* generic/gdbtk-hooks.c (gdb_two_elem_cmd): Likewise.
	(report_error): Likewise.
	(gdbtk_readline_end, gdbtk_post_add_symbol, gdbtk_error_begin,
	gdbtk_attach): Likewise.
	* generic/gdbtk/gdbtk-register.c (setup_architecture_data):
	Likewise.
	* generic/gdbtk-wrapper.c (GDB_equal_value, GDB_reinit_frame_cache,
	GDB_value-coerce_array): Likewise.
	* generic/gdbtk.c (gdbtk_interactive, gdbtk_start_timer,
	gdbtk_stop_timer, _initialize_gdbtk): Likewise.
@
text
@d168 1
a168 1
close_bfds ()
@


1.54
log
@	* generic/gdbtk.c (tk_command): Use xfree instead of free.
	* generic/gdbtk-hooks.c (gdbtk_call_command): Remove unused
	cleanup.
	* generic/gdbtk-cmds.c (gdb_load_info): If bfd_check_format
	fails, run the cleanup.
@
text
@d253 1
a253 1
gdbtk_interactive ()
d260 1
a260 1
gdbtk_start_timer ()
d307 1
a307 1
gdbtk_stop_timer ()
d691 1
a691 1
_initialize_gdbtk ()
@


1.53
log
@	* generic/gdbtk.c: Updated Copyright year to 1994-2012.
	(gdbtk_init): Move call to ide_create_shell_execute_command
	to generic windows section.
@
text
@d2 1
a2 1
   Copyright (C) 1994-2012 Free Software Foundation, Inc.
d742 1
a742 1
  old_chain = make_cleanup (free, result);
@


1.52
log
@   * generic/gdbtk.c (gdbtk_init,tk_command): Replace deprecated access
   to tcl interpreter result string with Tcl_GetStringResult().
   * generic/gdbtk-hooks.c (gdbtk_read,gdbtk_readline,gdbtk_load_hash)
   (gdbtk_query): Likewise.
   (gdbtk_read): Simplified error handling in case "gdbtk_console_read"
   fails. Some reformatting.
@
text
@d2 1
a2 2
   Copyright (C) 1994, 1995, 1996, 1997, 1998, 2001, 2002, 2003, 2004, 2006, 2008
   Free Software Foundation, Inc.
d540 2
a546 2
  if (ide_create_shell_execute_command (gdbtk_interp) != TCL_OK)
    error ("cygwin shell execute command initialization failed");
@


1.51
log
@	* generic/gdbtk-cmds.c: Add cygwin macros to allow compilation
	with old or recent cygwin version.
	(gdb_path_conv): Use cygwin_conv_path function.
	(gdb_eval): Adapt to new field in val_print.
	* generic/gdbtk-register.c (get_register): Likewise.
	* generic/gdbtk-wrapper.c (wrap_val_print): Likewise.
	* generic/gdbtk.c (_initialize_gdbtk): Use cygwin_attach_handle_to_fd
	call to allow compilation with old and new cygwin version.
@
text
@d495 1
a495 1
    error ("Tcl_Init failed: %s", gdbtk_interp->result);
d499 1
a499 1
    error ("ide_initialize_paths failed: %s", gdbtk_interp->result);
d502 1
a502 1
    error ("Tk_Init failed: %s", gdbtk_interp->result);
d505 1
a505 1
    error ("Tktable_Init failed: %s", gdbtk_interp->result);
d561 1
a561 1
      error ("Gdbtk_Init failed: %s", gdbtk_interp->result);
d741 1
a741 1
  result = xstrdup (gdbtk_interp->result);
@


1.50
log
@	ARI fix: Use "gdb_stat.h" header instead of <sys/stat.h>.
	* generic/gdbtk-cmds.c: Apply change.
	* generic/gdbtk.c: Ditto.
@
text
@d712 9
a720 9
	  cygwin32_attach_handle_to_fd ("/dev/conin", 0,
					GetStdHandle (STD_INPUT_HANDLE),
					1, GENERIC_READ);
	  cygwin32_attach_handle_to_fd ("/dev/conout", 1,
					GetStdHandle (STD_OUTPUT_HANDLE),
					0, GENERIC_WRITE);
	  cygwin32_attach_handle_to_fd ("/dev/conout", 2,
					GetStdHandle (STD_ERROR_HANDLE),
					0, GENERIC_WRITE);
@


1.49
log
@	ARI fixes: xvasprintf and strdup rules.
	* generic/gdbtk-cmds.c (gdbtk_set_result): Replace xvasprintf by
	xstrvprintf.
	* generic/gdbtk-hooks.c (gdbtk_warning): Ditto.
	(gdbtk_readline_begin, gdbtk_query): Ditto.
	* generic/gdbtk.c (TclDebug): Ditto.
	* generic/gdbtk-varobj.c (variable_create): Replace strdup by xstrdup.
@
text
@d51 1
a51 1
#include <sys/stat.h>
@


1.48
log
@	ARI fix: "xasprintf" rule.
	* generic/gdbtk-bp.c (gdb_set_bp): Replace xasprintf by xstrprintf.
	(breakpoint_notify, tracepoint_notify):Ditto.
	* generic/gdbtk-cmds.c (gdbtk_load_source, gdbtk_load_asm):Ditto.
	* generic/gdbtk-hooks.c (gdbtk_ignorable_warning): Ditto.
	(gdbtk_set_hook, gdbtk_load_hash): Ditto.
	(gdbtk_selected_frame_changed, gdbtk_annotate_signal): Ditto.
	* generic/gdbtk-register.c (get_register_types):Ditto.
	* generic/gdbtk-stack.c (gdb_get_blocks): Ditto.
	(gdb_selected_block, gdb_selected_frame): Ditto.
	* generic/gdbtk.c (gdbtk_init, view_command): Ditto.
@
text
@d218 1
a218 1
  xvasprintf (&buf, fmt, args);
@


1.47
log
@        * generic/gdbtk-cmds.c: Don't include itcl.h.
        * generic/gdbtk-hooks.c: Likewise.
        * generic/gdbtk.c: Include tcl.h and tk.h instead of itcl.h
        and itk.h.
        (gdbtk_init): Rewrite to accommodate using a system-provided
        Tcl, Tk, Itcl, Itk.
        (gdbtk_source_start_file) [!_WIN32]: Don't call error() when
        we fail to source the start file. Just dump the message to stderr.
        Throw an exception indicating the failure.
        * library/ehandler.itb (GDBEventHander::dispatch): "itcl_info" is
        deprecated: use "itcl::find objects" instead.
        * library/managedwin.itb (window_instance): Ditto.
        (restart): Ditto.
        (shutdown): Ditto.
        (_open): Ditto.
        (find): Ditto.
        * library/globalpref.itb (_build_win): Don't pass config arguments
        for libgui widgets to the constructor. Configure the widget after
        creation.
        * library/srcpref.itb (_build_win): Ditto.
        * library/main.tcl: Update Tcl, Tk, Itcl, Itk, and Iwidgets (just
        added to this loop) version requirements.
        No need to initialize Iwidgets separately.
        * plugins/Make-rules (TCLHDIR): Renamed to TCL_INCLUDES. Change
        all references.
        (TCL_BUILD_LIB_SPEC): Renamed to TCL_LIBRARY. Change all references.
        * plugins/acinclude.m4: Include the standard tcl.m4 instead
        of the sourceware-derived one.
        * plugins/configure.ac: Use Tcl's standard SC_* macros instead of
        the sourceware-derived CYG_AC_* macros.
        Add logic to deal with using a system-supplied Tcl/Tk.
        * plugins/configure: Regenerated.
        * plugins/Makefile.in: Regenerated.
@
text
@d388 1
a388 1
  xasprintf (&s, "%d", inhibit_gdbinit);
d761 1
a761 1
      xasprintf (&script,
@


1.46
log
@        From Dave Murphy  <davem@@devkitpro.org>:
        * gdbtk-cmds.c: Guard <sys/ioctl.h> with HAVE_SYS_IOCTL_H.
        * gdbtk-hooks.c: Ditto.
        * gdbtk.c: Ditto.
        * gdbtk-interp.c: Include windows.h under mingw32.
        (gdbtk_start_timer, gdbtk_stop_timer): Remove timer calls under mingw.
        (gdbtk_init): Include windows-specific commands under mingw without
        cygwin path commands.
        * library/download.itb (Download::download_it): Only use ide_cygwin_path
        on cygwin hosts.
        * library/interface.tcl (_open_file): Ditto.
        * library/prefs.tcl (pref_read): Ditto.
        * library/targetselection.itb (TargetSelection::default_port): Default
        to "/dev/com1" under cygwin and "COM1" under mingw.
        (TargetSelection::port_list): Use "/dev/com" under cygwin and
        "COM" under mingw.
@
text
@d2 1
a2 1
   Copyright (C) 1994, 1995, 1996, 1997, 1998, 2001, 2002, 2003, 2004, 2006
d45 2
a46 2
#include <itcl.h>
#include <itk.h>
d370 2
d386 26
a411 3
  /* We need to check if we are being run from
     a bin directory, if not then we may have to
     set some environment variables. */
d416 27
d444 1
a444 1
  if (strcmp (exec_path[element_count - 2], "bin") != 0)
d447 5
a451 4
	 ITCL_LIBRARY, ITK_LIBRARY, TIX_LIBRARY and maybe
	 a couple other environment variables have been
	 set (we don't want to override the User's settings).
	 If the *_LIBRARY variable is not set, point it at
d453 5
a457 3

      static char set_libs_path_script[] = "\
	  set srcDir [file dirname [file dirname $env(TCL_LIBRARY)]];\n\
d459 3
a461 3
	  if {![info exists env(TK_LIBRARY)]} {\n\
	      set env(TK_LIBRARY) [file join $srcDir tk library]\n\
	  }\n\
d463 3
a465 3
	  if {![info exists env(ITCL_LIBRARY)]} {\n\
	      set env(ITCL_LIBRARY) [file join $srcDir itcl itcl library]\n\
	  }\n\
d467 3
a469 3
	  if {![info exists env(ITK_LIBRARY)]} {\n\
	      set env(ITK_LIBRARY) [file join $srcDir itcl itk library]\n\
	  }\n\
d471 2
a472 2
	  if {![info exists env(IWIDGETS_LIBRARY)]} {\n\
	      set env(IWIDGETS_LIBRARY)\
d474 1
a474 1
	  }\n\
d477 1
a477 1
	      set env(GDBTK_LIBRARY) [file join $srcDir gdb gdbtk library]\n\
d480 10
a489 51
          # Append the directory with the itcl pkg index\n\
          if {[info exists env(TCLLIBPATH)]} {\n\
            append env(TCLLIBPATH) :[file joing $srcDir itcl]\n\
          } else {\n\
            set env(TCLLIBPATH) [file join $srcDir itcl]\n\
          }\n\
\
          # We also need to append the iwidgets library path.\n\
          # Unfortunately, there is no IWIDGETS_LIBRARY.\n\
          set IWIDGETS_LIBRARY [file join $srcDir itcl iwidgets generic]\n";

      Tcl_Obj *commandObj;

      /* Before we can run our script we must set TCL_LIBRARY. */
      if (Tcl_GetVar2 (gdbtk_interp, "env", "TCL_LIBRARY", TCL_GLOBAL_ONLY) == NULL)
	{
	  int i, count;
	  char *src_dir = SRC_DIR;
	  const char **src_path;
	  const char **lib_path;
	  Tcl_DString lib_dstring;

	  Tcl_DStringInit (&lib_dstring);

#ifdef __CYGWIN__
	  /* SRC_DIR from configure is a posix path. Tcl really needs a
	     windows path. */
	  src_dir = (char *) alloca (cygwin_posix_to_win32_path_list_buf_size (SRC_DIR));
	  cygwin_posix_to_win32_path_list (SRC_DIR, src_dir);
#endif
	  Tcl_SplitPath (src_dir, &count, &src_path);

	  /* Append tcl/library to src_dir (src_dir=/foo/bar/gdb) */
	  lib_path = (const char **) alloca ((count + 2) * sizeof (char *));
	  for (i = 0; i < count - 1; i++)
	    lib_path[i] = src_path[i];
	  lib_path[i++] = "tcl";
	  lib_path[i++] = "library";
	  Tcl_JoinPath (i, lib_path, &lib_dstring);

	  /* Set TCL_LIBRARY */
	  Tcl_SetVar2 (gdbtk_interp, "env", "TCL_LIBRARY",
		       Tcl_DStringValue (&lib_dstring) , TCL_GLOBAL_ONLY);
	  Tcl_DStringFree (&lib_dstring);
	  Tcl_Free ((char *) src_path);
	}

      commandObj = Tcl_NewStringObj (set_libs_path_script, -1);
      Tcl_IncrRefCount (commandObj);
      Tcl_EvalObj (gdbtk_interp, commandObj);
      Tcl_DecrRefCount (commandObj);
d492 1
a492 1
  Tcl_Free ((char *) exec_path);
a496 14
  /* Set up some globals used by gdb to pass info to gdbtk
     for start up options and the like */
  xasprintf (&s, "%d", inhibit_gdbinit);
  Tcl_SetVar2 (gdbtk_interp, "GDBStartup", "inhibit_prefs", s, TCL_GLOBAL_ONLY);
  free(s);
   
  /* Note: Tcl_SetVar2() treats the value as read-only (making a
     copy).  Unfortunately it does not mark the parameter as
     ``const''. */
  Tcl_SetVar2 (gdbtk_interp, "GDBStartup", "host_name", (char*) host_name, TCL_GLOBAL_ONLY);
  Tcl_SetVar2 (gdbtk_interp, "GDBStartup", "target_name", (char*) target_name, TCL_GLOBAL_ONLY);

  make_final_cleanup (gdbtk_cleanup, NULL);

a503 10
  if (Itcl_Init (gdbtk_interp) == TCL_ERROR)
    error ("Itcl_Init failed: %s", gdbtk_interp->result);
  Tcl_StaticPackage (gdbtk_interp, "Itcl", Itcl_Init,
		     (Tcl_PackageInitProc *) NULL);

  if (Itk_Init (gdbtk_interp) == TCL_ERROR)
    error ("Itk_Init failed: %s", gdbtk_interp->result);
  Tcl_StaticPackage (gdbtk_interp, "Itk", Itk_Init,
		     (Tcl_PackageInitProc *) NULL);

d509 16
d629 1
a640 7
      {
        struct gdb_exception e;
        e.reason  = RETURN_ERROR;
        e.error   = GENERIC_ERROR;
        e.message = msg;
        throw_exception (e);
      }
d642 5
a646 3
      /* FIXME: cagney/2002-04-17: Wonder what the lifetime of
	 ``msg'' is - does it need a cleanup?  */
      error ("%s", msg);
d648 5
@


1.45
log
@        insight/299:
        * generic/gdbtk.c (gdbtk_init): Don't check if DISPLAY is set,
        it isn't needed anymore. Gdb will not abort, and Tk_Init will
        fail gracefully.
@
text
@d52 1
d54 1
d68 1
d80 1
d269 1
d289 1
d296 1
d299 1
d313 1
d316 1
d523 1
a523 1
#ifdef __CYGWIN32__
d535 2
@


1.44
log
@	* generic/gdbtk.h:
	* generic/gdbtk.c:
	* generic/gdbtk-wrapper.h:
	* generic/gdbtk-wrapper.c:
	* generic/gdbtk-varobj.c:
	* generic/gdbtk-stack.c:
	* generic/gdbtk-register.c:
	* generic/gdbtk-main.c:
	* generic/gdbtk-interp.c:
	* generic/gdbtk-hooks.c:
	* generic/gdbtk-cmds.h:
	* generic/gdbtk-cmds.c:
	* generic/gdbtk-bp.c: Put (C) after Copyright.  Update the FSF
	address.
@
text
@d2 1
a2 1
   Copyright (C) 1994, 1995, 1996, 1997, 1998, 2001, 2002, 2003, 2004
a360 11
  /* If there is no DISPLAY environment variable, Tk_Init below will fail,
     causing gdb to abort.  If instead we simply return here, gdb will
     gracefully degrade to using the command line interface. */

#ifndef _WIN32
  if (getenv ("DISPLAY") == NULL)
    {
      return;
    }
#endif

@


1.44.4.1
log
@Update from HEAD to fix some serious problems.
@
text
@d2 1
a2 1
   Copyright (C) 1994, 1995, 1996, 1997, 1998, 2001, 2002, 2003, 2004, 2006
d361 11
@


1.43
log
@        * generic/gdbtk.c (gdbtk_init): Remove all mention of Tix.
        * README: Ditto.
@
text
@d2 1
a2 1
   Copyright 1994, 1995, 1996, 1997, 1998, 2001, 2002, 2003, 2004
d21 2
a22 2
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */
@


1.42
log
@	* generic/gdbtk-interp.c (gdbtk_interpreter_exec): Return struct
	gdb_exception due to the 2005-04-26 renaming of struct exception.
	* generic/gdbtk.c (gdbtk_source_start_file): Likewise.
@
text
@a421 4
	  if {![info exists env(TIX_LIBRARY)]} {\n\
	      set env(TIX_LIBRARY) [file join $srcDir tix library]\n\
	  }\n\
\
@


1.41
log
@        * generic/gdbtk.c (gdbtk_source_start_file): In the _WIN32 case,
        use throw_exception (struct exception).
@
text
@d638 1
a638 1
        struct exception e;
@


1.40
log
@NOTE: This needs fixing. Shouldn't be difficult, but it will be tedious.
        * generic/gdbtk-hooks.c (gdbtk_add_hooks): "Update" deprecated hooks.
        "Houston... We have a problem."
        * generic/gdbtk-interp.c (gdbtk_interpreter_resume): Likewise.
        * generic/gdbtk.c (gdbtk_init_1): Likewise.
@
text
@d34 1
d637 7
a643 1
      throw_exception (RETURN_ERROR);
@


1.39
log
@Fix typo in comments (Unfortunatly)
@
text
@d2 1
a2 1
   Copyright 1994, 1995, 1996, 1997, 1998, 2001, 2002, 2003
d661 1
a661 1
  init_ui_hook = NULL;
d687 1
a687 1
    init_ui_hook = gdbtk_init_1;
@


1.38
log
@2003-11-24  David Carlton  <carlton@@kealia.com>

	* generic/gdbtk.c (target_is_native): Replace STREQ by strcmp.
	* generic/gdbtk-cmds.c (gdb_stop): Replace STREQ by strcmp.
	(gdb_search): Replace STREQN by strncmp and DEPRECATED_SYMBOL_NAME
	by SYMBOL_LINKAGE_NAME.
	* generic/gdbtk-varobj.c (variable_format): Replace STREQN by
	strncmp.
@
text
@d494 1
a494 1
     copy).  Unfortunatly it does not mark the parameter as
@


1.37
log
@2003-08-04  David Carlton  <carlton@@kealia.com>

	* charset.c (cached_iconv_convert): Add __FILE__ and __LINE__ args
	to internal_error call.
	* source.c (forward_search_command): Add "%s" format argument.
	(reverse_search_command): Ditto.
	* top.c (quit_confirm): Ditto.
	* cli/cli-setshow.c (do_setshow_command): Ditto.
	* cp-valprint.c (cp_print_class_method): Replace
	{f,}printf_{un,}filtered by {f,}puts_{un,}filtered.
	(cp_print_class_member): Ditto.
	* event-top.c (command_line_handler): Ditto.
	* linux-proc.c (linux_info_proc_cmd): Ditto.
	* p-typeprint.c (pascal_type_print_base): Ditto.
	* p-valprint.c (pascal_object_print_class_method): Ditto.
	(pascal_object_print_class_member): Ditto.
	* printcmd.c (print_scalar_formatted,printf_command): Ditto.
	* remote.c (remote_cisco_section_offsets): Ditto.
	* top.c (command_line_input): Ditto.
	* utils.c (vwarning,error_stream,quit): Ditto.
	* valprint.c (print_floating,print_binary_chars)
	(print_octal_chars,print_decimal_chars,print_hex_chars): Ditto.

2003-08-04  David Carlton  <carlton@@kealia.com>

	* mi-main.c (mi_error_last_message): Add "%s" second argument to
	xasprintf call.

2003-08-04  David Carlton  <carlton@@kealia.com>

	* generic/gdbtk.c (gdbtk_source_start_file): Add "%s" first
	argument to error call.
	(tk_command): Ditto.
	(view_command): Ditto.
@
text
@d324 5
a328 4
  if (STREQ (name, "exec") || STREQ (name, "hpux-threads")
      || STREQ (name, "child") || STREQ (name, "procfs")
      || STREQ (name, "solaris-threads") || STREQ (name, "linuxthreads")
      || STREQ (name, "multi-thread"))
@


1.36
log
@        * generic/gdbtk-main.c (main): Change name of intepreter to "insight".
        * generic/gdbtk.h: Add ifdef wrappers.
        (gdbtk_init): Declare.
        (gdbtk_source_start_file): Declare.
        * generic/gdbtk.c (gdbtk_init): Export.
        Reomve init_ui_hook stuff.
        Do not add hooks here anymore (moved into interps).
        Do not muck with gdbk_stdout et al (moved into interps).
        (gdbtk_source_start_file): Code ripped out of gdbtk_init
        which deals with sourcing the main startup file.
        (gdbtk_init_1): Hack: New function.
        (argv0): Hack: New static global.
        (tk_init): Moved to gdbtk-interps.c.
        (gdbtk_resume): Likewise.
        (gdbtk_suspend): Likewise.
        (gdbtk_prompt_p): Likewise.
        (gdbtk_exec): Likewise.
        (gdbtk_command_loop): Likewise.
        (_initialize_gdbtk): Move interpreter stuff to gdbtk-interps.c.
        Hack: Add new init_ui_hook.
        * generic/gdbtk-interps.c: New file.
@
text
@d639 1
a639 1
      error (msg);
d734 1
a734 1
    error (result);
d756 1
a756 1
	  error (Tcl_GetStringFromObj (obj, NULL));
@


1.35
log
@Revert below change.
@
text
@a31 1
#include "cli-out.h"
a33 1
#include "interps.h"
d85 3
a87 1
static void gdbtk_init (char *);
d122 1
d350 2
a351 2
static void
gdbtk_init (char *argv0)
a365 1
      init_ui_hook = NULL;
a560 7
  /* This adds all the hooks that call up from the bowels of gdb
   *  back into Tcl-land...
   */

  gdbtk_add_hooks ();


a580 9
  /* close old output and send new to GDBTK */
  ui_file_delete (gdb_stdout);
  ui_file_delete (gdb_stderr);
  gdb_stdout = gdbtk_fileopen ();
  gdb_stderr = gdbtk_fileopen ();
  gdb_stdlog = gdbtk_fileopen ();
  gdb_stdtarg = gdbtk_fileopen ();
  uiout = cli_out_new (gdb_stdout);

d585 6
a591 2

  {
d593 1
a593 1
    static char script[] = "\
d619 2
a620 2
    /* now enable gdbtk to parse the output from gdb */
    gdbtk_disable_fputs = 0;
d622 7
a628 7
    if (Tcl_GlobalEval (gdbtk_interp, (char *) script) != TCL_OK)
      {
	const char *msg;

	/* Force errorInfo to be set up propertly.  */
	Tcl_AddErrorInfo (gdbtk_interp, "");
	msg = Tcl_GetVar (gdbtk_interp, "errorInfo", TCL_GLOBAL_ONLY);
d631 5
a635 5
	/* On windows, display the error using a pop-up message box.
           If GDB wasn't started from the DOS prompt, the user won't
           get to see the failure reason.  */
	MessageBox (NULL, msg, NULL, MB_OK | MB_ICONERROR | MB_TASKMODAL);
	throw_exception (RETURN_ERROR);
d637 3
a639 3
	/* FIXME: cagney/2002-04-17: Wonder what the lifetime of
           ``msg'' is - does it need a cleanup?  */
	error (msg);
d641 1
a641 3
      }
  }

d654 1
d656 5
a660 1
  discard_cleanups (old_chain);
a676 65
void *
tk_init (void)
{
  /* FIXME: Should return the interpreter's context.  */
  return NULL;
}

int
gdbtk_resume (void *data)
{
  return 1;
}

int
gdbtk_suspend (void *data)
{
  return 1;
}

int
gdbtk_prompt_p (void *data)
{
  return 0;
}

int
gdbtk_exec (void *data, const char *command)
{
  internal_error (__FILE__, __LINE__, "tk_exec not implemented");
}

/* This function is called instead of gdb's internal command loop.  This is the
   last chance to do anything before entering the main Tk event loop. 
   At the end of the command, we enter the main loop. */

static void
gdbtk_command_loop (void *data)
{
  extern FILE *instream;

  /* We no longer want to use stdin as the command input stream */
  instream = NULL;

  if (Tcl_Eval (gdbtk_interp, "gdbtk_tcl_preloop") != TCL_OK)
    {
      const char *msg;

      /* Force errorInfo to be set up propertly.  */
      Tcl_AddErrorInfo (gdbtk_interp, "");

      msg = Tcl_GetVar (gdbtk_interp, "errorInfo", TCL_GLOBAL_ONLY);
#ifdef _WIN32
      MessageBox (NULL, msg, NULL, MB_OK | MB_ICONERROR | MB_TASKMODAL);
#else
      fputs_unfiltered (msg, gdb_stderr);
#endif
    }

#ifdef _WIN32
  close_bfds ();
#endif

  Tk_MainLoop ();
}

d682 6
a687 20
  static const struct interp_procs tk_procs =
  {
    tk_init,
    gdbtk_resume,
    gdbtk_suspend,
    gdbtk_exec,
    gdbtk_prompt_p,
    gdbtk_command_loop,
  };

  interp_add (interp_new ("gdbtk", NULL, NULL, &tk_procs));

  /* FIXME: cagney/2003-02-12: This is wrong.  The initialization
     should be done via the init function.  */
  if (use_windows)
    {
      /* Tell the rest of the world that Gdbtk is now set up. */
      init_ui_hook = gdbtk_init;
    }
#ifdef __CYGWIN32__
@


1.34
log
@* gdbtk/gdbtk.c (tk_procs): Make file global.  Declare at top.
(_initialize_gdbtk): Move interp_add from here.
(gdb_tk): Call interp_add here.  Pass correct uiout to interp_new.
@
text
@a71 1
static const struct interp_procs tk_procs;
a595 1
  interp_add (interp_new ("gdbtk", NULL, uiout, &tk_procs));
a751 9
static const struct interp_procs tk_procs =
{
  tk_init,
  gdbtk_resume,
  gdbtk_suspend,
  gdbtk_exec,
  gdbtk_prompt_p,
  gdbtk_command_loop,
};
d756 12
@


1.33
log
@2003-02-12  Andrew Cagney  <ac131313@@redhat.com>

	* generic/gdbtk-hooks.c (tk_command_loop): Move function ...
	* generic/gdbtk.c (gdbtk_command_loop): ... to here.  Add data
	parameter.
	* generic/gdbtk.c: Include "interps.h".
	(_initialize_gdbtk): Register the "gdbtk" interpreter.  Don't set
	init_ui_hook.
	(gdbtk_init): Change parameter to a void data pointer.
	(tk_init, gdbtk_resume, gdbtk_suspend): New functions.
	(gdbtk_prompt_p, gdbtk_exec): New functions.
	* generic/gdbtk-hooks.c (gdbtk_add_hooks): Don't set
	command_loop_hook.  Update copyright.
@
text
@d72 1
d597 1
d754 9
a766 12
  static const struct interp_procs tk_procs =
  {
    tk_init,
    gdbtk_resume,
    gdbtk_suspend,
    gdbtk_exec,
    gdbtk_prompt_p,
    gdbtk_command_loop,
  };

  interp_add (interp_new ("gdbtk", NULL, NULL, &tk_procs));

@


1.32
log
@2003-02-10  Andrew Cagney  <ac131313@@redhat.com>

	* generic/gdbtk-varobj.c (gdb_variable_command): Ditto for
	`commands'.
	(variable_type): Ditto for `first'.
	(variable_obj_command): Ditto.
	(variable_create): Ditto for create_options.
	(variable_type): Ditto for `last'.  Use `string' and not `first'
	when modifying the buffer.
	(struct disassembly_client_data ): Ditto for `asm_argv'
	* generic/gdbtk-register.c (gdb_register_info): Ditto for
	`commands'.
	* generic/gdbtk-hooks.c (tk_command_loop): Ditto for `msg'.
	* generic/gdbtk-cmds.c (gdb_search): Ditto for `switches'.
	(gdbtk_load_source): Ditto for `text_argv'.
	(struct disassembly_client_data ): Ditto for `source_argv'.
	(gdbtk_load_asm): Ditto for `text_argv'.
	(struct disassembly_client_data ): Ditto for `asm_argv'
	(gdb_loadfile): Ditto for `text_argv'.
	* generic/gdbtk.c (TclDebug): Make `v' a constant pointer.
	(gdbtk_init): Ditto for `old_chain', `src_path', `msg', and
	`lib_path'.
@
text
@d35 1
d686 65
d756 14
@


1.31
log
@2003-01-21  Martin M. Hunt  <hunt@@redhat.com>

	* generic/gdbtk.c (gdbtk_init): Look for iwidgets in
	"iwidgets" instead of "iwidgets3.0.0".
	Don't call ide_create_sizebox_command.

	* ChangeLog: New log for 2003.
	* ChangeLog-2002: Renamed from ChangeLog.
@
text
@d188 4
a191 1
  char *buf, *v[3], *merge, *priority;
d354 1
a354 1
  char **exec_path;
d445 2
a446 2
	  char **src_path;
	  char **lib_path;
d460 1
a460 1
	  lib_path = (char **) alloca ((count + 2) * sizeof (char *));
d635 1
a635 1
	char *msg;
@


1.30
log
@2002-11-27  Martin M. Hunt  <hunt@@redhat.com>

	* generic/gdbtk.c (gdbtk_init): Don't call Tix_Init.
	Don't include tix.h

	* generic/gdbtk-hooks.c: Don't include tix.h.

	* generic/gdbtkj-cmds.c: Don't include tix.h.
@
text
@d2 1
a2 1
   Copyright 1994, 1995, 1996, 1997, 1998, 2001, 2002
d413 1
a413 1
                     [file join $srcDir itcl iwidgets3.0.0 generic]\n\
d433 1
a433 1
          set IWIDGETS_LIBRARY [file join $srcDir itcl iwidgets3.0.0 generic]\n";
d526 1
d529 1
@


1.29
log
@        * generic/gdbtk.c (view_command): New function to display
        location in source window.
        (gdbtk_init): Add new gdb "view" command.
@
text
@a44 1
#include <tix.h>
a510 5
		     (Tcl_PackageInitProc *) NULL);

  if (Tix_Init (gdbtk_interp) != TCL_OK)
    error ("Tix_Init failed: %s", gdbtk_interp->result);
  Tcl_StaticPackage (gdbtk_interp, "Tix", Tix_Init,
@


1.28
log
@* generic/gdbtk.c (gdbtk_init): Use error or throw_exception to
report an error.
@
text
@d101 2
d573 3
d748 24
@


1.27
log
@* generic/gdbtk.c (HAS_STDARG): Define.
* generic/gdbtk-cmds.c (HAS_STDARG): Likewise.
* generic/gdbtk-hooks.c (HAS_STDARG): Likewise.
@
text
@d638 3
d642 1
d644 3
a646 1
	fprintf (stderr,msg);
a647 2

	error ("");
@


1.26
log
@2002-02-07  Martin M. Hunt  <hunt@@redhat.com>

	* generic/gdbtk.c, generic/gdbtk-bp.c, generic/gdbtk-cmds.c,
	generic/gdbtk-hooks.c, generic/gdbtk-stack.c: Cleanup includes.
@
text
@d41 4
@


1.26.2.1
log
@* generic/gdbtk.c (HAS_STDARG): Define.
* generic/gdbtk-cmds.c (HAS_STDARG): Likewise.
* generic/gdbtk-hooks.c (HAS_STDARG): Likewise.
@
text
@a40 4
/* tcl header files includes varargs.h unless HAS_STDARG is defined,
   but gdb uses stdarg.h, so make sure HAS_STDARG is defined.  */
#define HAS_STDARG 1

@


1.25
log
@2002-02-06  Martin M. Hunt  <hunt@@redhat.com>

	* generic/gdbtk.c, generic/gdbtk-bp.c, generic/gdbtk-cmds.c,
	generic/gdbtk-hooks.c, generic/gdbtk-register.c,
	generic/gdbtk-stack.c, generic/gdbtk-varobj.c,
	generic/gdbtk-wrapper.c: Cleanup. Fix indentation. Fix
	function declarations. Remove unused variables. Add 2002
	copyrights.
@
text
@a24 1
#include "symtab.h"
a25 2
#include "command.h"
#include "bfd.h"
a27 1
#include "target.h"
d33 2
d41 1
a41 4
#include <sys/stat.h>

#include <tcl.h>
#include <tk.h>
a42 1
#include <tix.h>
a46 1
#include <signal.h>
d48 1
a48 1
#include "top.h"
d50 3
a54 1
#include <stdio.h>
a55 3

#include "annotate.h"
#include <sys/time.h>
@


1.24
log
@	* generic/gdbtk.c (gdbtk_init): If DISPLAY is not set on Unix,
	clear the init_ui_hook so that gdb will properly initialize
	the cli.
@
text
@d2 1
a2 1
   Copyright 1994, 1995, 1996, 1997, 1998, 2001 
a76 1
static void x_event_wrapper (int);
d78 1
a78 2
x_event_wrapper (signo)
     int signo;
d83 3
a85 3
 /*
  * This variable controls the interaction with an external editor.
  */
d135 1
a135 2
TclpAlloc (size)
     unsigned int size;
d141 1
a141 3
TclpRealloc (ptr, size)
     char *ptr;
     unsigned int size;
d147 1
a147 2
TclpFree (ptr)
     char *ptr;
d168 1
a168 1

d170 5
a174 5
  {
    if (o->obfd != NULL)
      bfd_cache_close (o->obfd);
  }

d311 1
a311 2
target_should_use_timer (t)
     struct target_ops *t;
d318 1
a318 2
target_is_native (t)
     struct target_ops *t;
d334 1
a334 2
gdbtk_cleanup (dummy)
     PTR dummy;
d349 1
a349 2
gdbtk_init (argv0)
     char *argv0;
d597 1
a597 1
      (void) FreeConsole ();
d672 1
a672 2
gdbtk_test (filename)
     char *filename;
d720 1
a720 3
tk_command (cmd, from_tty)
     char *cmd;
     int from_tty;
d726 2
a727 1
  /* Catch case of no argument, since this will make the tcl interpreter dump core. */
a743 1

@


1.23
log
@	* library/tclIndex: Updated.
	* library/prefs.tcl (pref_set_defaults): Define gdb/editor
	preference.
	* library/srcpref.itb (SrcPref::constructor): Save gdb/editor
	preference.
	(SrcPref::build_win): Added external editor control.
	* library/srctextwin.itb (SrcTextWin::do_source_popup): Always
	enable external editor.  Use `code' instead of `list'.
	* library/srcwin.itb (SrcWin::edit): Use Editor::edit.
	* library/editor.tcl: New file.
	* generic/gdbtk.c (enable_external_editor): Removed.
	(external_editor_command): Default to NULL.
	(gdbtk_init): Don't set enable_external_editor.  Free external
	editor command when finished with it.
@
text
@d373 4
a376 1
    return;
@


1.22
log
@	* library/main.tcl: Append iwidgets library path, if needed.
	* generic/gdbtk.c (gdbtk_init): Add TCLLIBPATH to iwidgets
	package index.
	Define IWIDGETS_LIBRARY in interpreter so that we can add
	this path to the auto_path at the right time later.
@
text
@d86 1
a86 5
  * These two variables control the interaction with an external editor.
  * If enable_external_editor is set at startup, BEFORE Gdbtk_Init is run
  * then the Tcl variable of the same name will be set, and a command will
  * called external_editor_command will be invoked to call out to the
  * external editor.  We give a dummy version here to warn if it is not set.
d88 2
a89 3
int enable_external_editor = 0;
char *external_editor_command = "tk_dialog .warn-external \\\n\
\"No command is specified.\nUse --tclcommand <tcl/file> or --external-editor <cmd> to specify a new command\" 0 Ok";
d583 1
a583 1
   * Set the variables for external editor:
d586 7
a592 4
  Tcl_SetVar (gdbtk_interp, "enable_external_editor",
	      enable_external_editor ? "1" : "0", 0);
  Tcl_SetVar (gdbtk_interp, "external_editor_command",
	      external_editor_command, 0);
@


1.21
log
@	* generic/gdbtk.c (gdbtk_init): Set IWIDGETS_LIBRARY if
	Insight is launched from within the build directory.
	* library/util.tcl (find_iwidgets_library): Removed.
	* library/main.tcl: Don't call find_iwidgets_library, do a
	package require instead.
@
text
@d437 12
a448 1
	  }\n";
@


1.20
log
@	* generic/gdbtk.c (gdbtk_init): Reinitialize disassemle info's
	stream parameter: we just deleted the one it saved when we
@
text
@d426 5
@


1.19
log
@	* generic/gdbtk.c (gdbtk_init): Reinitialize disassemle info's
	stream parameter: we just deleted the one it saved when we
	re-routed gdb_stdout to our own gdb_stdout.
@
text
@a588 4
  /* We need to re-register the standard disassembler's
     output, since we just changed gdb_stdout. */
  tm_print_insn_info.stream = gdb_stdout;

@


1.18
log
@	* generic/gdbtk.c (gdbtk_init): Revert change from earlier.
	It is insufficient. We must get the absolute pathname
	from autoconf.
	Don't bother setting TCL_LIBRARY: it must be set already
	in order for us to execute a script.
@
text
@d589 4
@


1.17
log
@	* generic/gdbtk.c (gdbtk_init): Make sure we're working with
	absolute pathnames in the *_LIBRAY variables.
@
text
@a412 8
          set cwd [pwd]\n\
          cd $srcDir\n\
          set srcDir [pwd]\n\
          cd $cwd\n\
\
	  if {![info exists env(TCL_LIBRARY)]} {\n\
	      set env(TCL_LIBRARY) [file join $srcDir tcl library]\n\
	  }\n\
@


1.16
log
@	* generic/gdbtk.c (gdbtk_init): Don't assume a particular
	layout for the source directory, let the Makefile tell us
	where the real source directory is.
	When compiling under Cygwin, convert the (posix) path to a
	win32 path, which is what tcl really wants.

From Ian Roxborough <irox@@redhat.com>:

        * generic/gdbtk.c (gdbtk_init): If Insight isn't
        executed from inside a directory called "bin",
        assume that we are being running from the build
        directory and set the *_LIBRARY variables to point
        to (hopefully) the correct source directory.
@
text
@d413 4
@


1.15
log
@	Some "-Wall" cleanups.

	* generic/gdbtk-hooks.c (x_event): Remove unused variable "count".
	(tracepoint_notify): Remove superfluous declaration. This funtion
	was moved to gdbtk-bp.c.

	* generic/gdbtk-bp.c (gdb_find_bp_at_addr): Remove unused variable
	"b".
	(gdb_set_bp): Remove unused variable "cmd".
	(gdb_set_bp_addr): Remove unused variables "cmd" and "filename".

	* generic/gdbtk.c (gdbtk_init): Remove unused variables
	"auto_path_name", "auto_path_elem", and "found_main".
@
text
@d368 3
d394 88
d561 1
a561 1
  Tcl_StaticPackage (gdbtk_interp, "Gdbtk", Gdbtk_Init, NULL);
d605 1
a605 1
    tcl_findLibrary gdb 1.0 {} main.tcl GDBTK_LIBRARY GDBTK_LIBRARY gdbtk/library gdbtcl {}\n\
d621 1
a621 1
    tcl_findLibrary gdb 1.0 {} main.tcl GDBTK_LIBRARY GDBTK_LIBRARY gdbtk/library gdbtcl {} $debug_startup\n\
@


1.14
log
@2001-06-05  Martin Hunt  <hunt@@redhat.com>
	* generic/gdbtk.c (_initialize_gdbtk): Don't close console yet.
	(gdbtk_init): Wait until after tcl/tk stuff is all initialized
	to close console (on Windows) and redirect ouput.
@
text
@a366 1
  int found_main;
a367 2

  Tcl_Obj *auto_path_elem, *auto_path_name;
@


1.13
log
@	* generic/gdbtk-cmds.c: Put on diet. All breakpoint-,
	tracepoint-, register-, and stack-related functions moved
	into separate files.
	(call_wrapper): Renamed to "gdbtk_call_wrapper" and export.
	Update all callers.
	* generic/gdbtk.h: Move all breakpoint-related stuff into
	gdbtk-bp.c.
	Remove declaration for "call_wrapper". Now in gdbtk-cmds.h
	(and called "gdbtk_call_wrapper").
	* generic/gdbtk-varobj.c: Include "gdbtk-cmds.h".
	* generic/gdbtk-cmds.h: New file.
	* generic/gdbtk-bp.c: New file.
	* generic/gdbtk-register.c: New file.
	* generic/gdbtk-stack.c: New file.
@
text
@a382 9
  /* close old output and send new to GDBTK */
  ui_file_delete (gdb_stdout);
  ui_file_delete (gdb_stderr);
  gdb_stdout = gdbtk_fileopen ();
  gdb_stderr = gdbtk_fileopen ();
  gdb_stdlog = gdbtk_fileopen ();
  gdb_stdtarg = gdbtk_fileopen ();
  uiout = cli_out_new (gdb_stdout);

d496 12
a598 1

a599 3
#ifdef __CYGWIN32__
      (void) FreeConsole ();
#endif
@


1.12
log
@        * gdbtk.c (gdbtk_init): Include the command "warp_pointer"
        for all platforms. Used for testing ONLY.

        * util.tcl (gdbtk_read_defs): If there is an error reading
        the testsuite definition file, print the error message to
        stderr, not stdout. This will allow tcl to know that an error
        has occurred.
        (find_iwidgets_library): Make it work for running testsuites
        from installed directory.

        * main.tcl: If we failed to find iwidgets, check if the
        testsuite is running. If it is running, do not pop up
        a dialog box: just print out the error and exit.
        Initialize _test(verbose) for the testsuite.
@
text
@d36 1
d550 1
a550 1
	fputs_unfiltered (msg, gdb_stderr);
@


1.11
log
@2001-04-18  Martin M. Hunt  <hunt@@redhat.com>

	* generic/gdbtk.c (gdbtk_init): Initialize uiout.
@
text
@d465 4
a468 2
#else
  /* for now, this testing function is Unix only */
a470 1
#endif
@


1.10
log
@* main.c: Remove windows.h use.
(gdbtk_test): Use PATH_MAX for home var calculation.
* remote-e7000.c (e7000_parse_device): Accomodate Cygwin as well as Win32 in
test.
* ser-tcp.c: Use modern __CYGWIN__ conditional.
* source.c (mod_path): Add __CYGWIN__ conditional to WIN32 test.
(openp): Ditto.
* symfile.c (symfile_bfd_open): Ditto.
* gdbtk/generic/gdbtk.c: Ditto.
@
text
@d389 2
a390 1
  
@


1.9
log
@2001-04-04  Martin M. Hunt  <hunt@@redhat.com>

	* generic/gdbtk-hooks.c (gdbtk_fileopen): New function.
	Initialize ui_file stuff for gdbtk.
	(gdbtk_fputs): Don't print if gdbtk_disable_fputs. Send
	stdlog and stdtarg to their handler functions.

	* generic/gdbtk.c (Gdbtk_Init): Don't set gdb_stdlog
	and gdb_stdtarg to gdb_stdout,
	(gdbtk_init): Unset gdbtk_disable_fputs
	when ready to accept output from gdb. Remove references to
	fputs_unfiltered_hook.

	* generic/gdbtk.h: Declare new flag gdbtk_disable_fputs.

	* generic/gdbtk-cmds.c (gdb_restore_fputs): Instead of setting
	fputs_unfiltered_hook, set the new flag gdbtk_disable_fputs.

	* library/prefs.tcl (pref_set_defaults): Add defaults
	for log_fg and target_fg.

	* library/interface.tcl (gdbtk_tcl_fputs_error): Use
	err_tag.
	(gdbtk_tcl_fputs_log): New function. Write log messages
	to console.
	(gdbtk_tcl_fputs_target): New function.	Write target
	IO to console.

	* library/console.ith (einsert): Add tag parameter.

	* library/console.itb (_build_win): Add new tags for log
	and target IO.
	(einsert): Add tag parameter.
@
text
@d37 1
a37 1
#ifdef _WIN32
@


1.8
log
@2000-10-23  Fernando Nasser  <fnasser@@redhat.com>

	From 2000-10-19  Steven Johnson  <sbjohnson@@ozemail.com.au>
        Note: The original patch used asprintf/vasprintf.  I changed it to
	use the new xasprintf/xvasprintf gdb functions.
        * gdbtk.c (TclDebug, gdbtk_init): Replaced the vast majority of
	sprintf/vsprintf calls with asprintf and vasprintf respectively.
	Should prevent any possible buffer overruns possible with
	fixed size sprintf buffers. Specifically fixes a problem with long
	filenames and clearing breakpoints overflowing their buffers when
	using sprintf, causing a segfault. Generically should also prevent
	any other similar problems from occuring.
        * gdbtk-cmds.c (sprintf_append_element_to_obj, get_pc_register,
	gdb_get_tracepoint_info, gdb_load_disassembly, gdbtk_load_source,
	gdbtk_load_asm, gdb_set_bp, gdb_set_bp_addr, gdb_get_breakpoint_info,
	gdb_selected_frame, gdb_selected_block, gdb_get_blocks): Ditto.
        * gdbtk-hooks.c (gdbtk_warning, gdbtk_ignorable_warning,
	gdbtk_readline_begin, gdbtk_set_hook, breakpoint_notify,
	gdbtk_query, tracepoint_notify, gdbtk_error_begin,
	gdbtk_annotate_signal): Ditto.
@
text
@d1 3
a3 2
/* Startup code for gdbtk.
   Copyright 1994, 1995, 1996, 1997, 1998 Free Software Foundation, Inc.
a35 1
#include "tui/tui-file.h"
d128 2
d353 1
d368 1
d382 8
d487 1
d502 1
d533 3
a535 9
    /* fputs_unfiltered_hook = NULL; *//* Force errors to stdout/stderr */

    fputs_unfiltered_hook = gdbtk_fputs;

    /* FIXME: set gdb_stdtarg for now until gdbtk is changed to use
       struct ui_out. */

    gdb_stdtarg = gdb_stdout;

a541 1

a543 2
	fputs_unfiltered_hook = NULL;	/* Force errors to stdout/stderr */

a550 1

d554 1
a565 1

@


1.7
log
@2000-10-13  Fernando Nasser  <fnasser@@totem.to.cygnus.com>

	* gdbtk.c (target_is_native): The "multi-thread" target is native.
@
text
@d199 1
a199 1
  char buf[10000], *v[3], *merge, *priority;
d218 4
a225 3
  vsprintf (buf, fmt, args);
  va_end (args);

d230 1
d364 1
a364 1
  char s[5];
d394 1
a394 1
  sprintf (s, "%d", inhibit_gdbinit);
d396 2
@


1.6
log
@PARAMS elimination.
@
text
@d332 2
a333 1
      || STREQ (name, "solaris-threads") || STREQ (name, "linuxthreads"))
@


1.5
log
@Purge all uses of make_cleanup_func in GDBtk.
@
text
@d76 1
a76 1
static void x_event_wrapper PARAMS ((int));
d95 1
a95 1
extern int Tktable_Init PARAMS ((Tcl_Interp * interp));
d97 1
a97 1
static void gdbtk_init PARAMS ((char *));
d99 1
a99 1
void gdbtk_interactive PARAMS ((void));
d103 1
a103 1
static void tk_command PARAMS ((char *, int));
d105 1
a105 1
static int target_should_use_timer PARAMS ((struct target_ops * t));
d107 1
a107 1
int target_is_native PARAMS ((struct target_ops *t));
d109 1
a109 1
int gdbtk_test PARAMS ((char *));
@


1.4
log
@	* gdbtk.c: Remove CYGWIN32 conditional around timer machinery.
  	Cygwin can handle timers fine now.
@
text
@d101 1
a101 1
static void cleanup_init PARAMS ((int));
d242 1
a242 2
cleanup_init (ignored)
     int ignored;
d373 1
a373 1
  old_chain = make_cleanup ((make_cleanup_func) cleanup_init, 0);
@


1.3
log
@        * ChangeLog-gdbtk: Renamed to ChangeLog
        * ChangeLog: New file
        * gdbtk-cmds.c, gdbtk-hooks.c, gdbtk-variable.c, gdbtk-varobj.c,
        gdbtk-wrapper.h, gdbtk-wrapper.c, gdbtk.h, gdbtk.c: No need for
        changelog-default-name hint for Emacs now
@
text
@a69 1
#ifndef __CYGWIN32__
a82 1
#endif
a104 1
#ifndef __CYGWIN32__
a105 1
#endif
a113 1
#ifndef __CYGWIN32__
a114 1
#endif
a262 1
#ifndef __CYGWIN32__
a298 1
#else /* __CYGWIN32__ */
a299 1
#endif
a305 1
#ifndef __CYGWIN32__
a311 1
#else /* __CYGWIN32__ */
a312 1
#endif
a314 1
#ifndef __CYGWIN32__
a322 1
#endif /* !__CYGWIN32__ */
@


1.2
log
@        * gdbtk.c (gdbtk_init): For now, reset gdb_stdtarg to gdb_stdout
        when using gdbtk.
@
text
@d533 2
a534 1
    /* set gdb_stdtarg for now until gdbtk is changed to use struct ui_out. */
d659 1
a659 4

/* Local variables: */
/* change-log-default-name: "ChangeLog-gdbtk" */
/* End: */
@


1.1
log
@Initial revision
@
text
@d533 4
@


1.1.1.1
log
@import insight-2000-02-04 snapshot (2nd try)
@
text
@@


1.1.1.1.2.1
log
@
        * gdbtk.c (gdbtk_init): For now, reset gdb_stdtarg to gdb_stdout
        when using gdbtk.
@
text
@a532 4
    /* set gdb_stdtarg for now until gdbtk is changed to use struct ui_out. */

    gdb_stdtarg = gdb_stdout;

@

