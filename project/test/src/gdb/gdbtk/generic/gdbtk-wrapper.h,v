head	1.13;
access;
symbols
	insight_7_6-2013-04-10-branchpoint:1.12
	gdb_7_6-branch:1.12.0.4
	gdb_7_5-branch:1.12.0.2
	gdb_7_4-branch:1.11.0.8
	gdb_7_3-branch:1.11.0.6
	gdb_7_1-branch:1.11.0.4
	gdb_7_0-branch:1.11.0.2
	arc-sim-20090309:1.10
	arc-insight_6_8-branch:1.10.0.6
	arc-insight_6_8-branchpoint:1.10
	insight_6_8-branch:1.10.0.4
	insight_6_8-branchpoint:1.10
	gdb_6_8-branch:1.10.0.2
	insight_6_6-20070208-release:1.8
	gdb_6_6-branch:1.8.0.4
	gdb_6_6-2006-11-15-branchpoint:1.8
	insight_6_5-20061003-release:1.8
	gdb_6_5-branch:1.8.0.2
	gdb_6_5-2006-05-14-branchpoint:1.8
	gdb-csl-gxxpro-6_3-branch:1.7.0.10
	gdb-csl-gxxpro-6_3-branchpoint:1.7
	gdb_6_4-branch:1.7.0.8
	gdb_6_4-2005-11-01-branchpoint:1.7
	gdb_6_1-2004-04-05-release:1.7
	gdb_6_1-branch:1.7.0.6
	gdb_6_1-2004-03-01-gmt-branchpoint:1.7
	gdb_6_0-2003-10-04-release:1.7
	gdb_6_0-branch:1.7.0.4
	gdb_6_0-2003-06-23-branchpoint:1.7
	gdb_5_3-2002-12-12-release:1.7
	gdb_5_3-branch:1.7.0.2
	gdb_5_3-2002-09-04-branchpoint:1.7
	gdb_5_2_1-2002-07-23-release:1.5
	gdb_5_2-2002-04-29-release:1.5
	gdb_5_2-branch:1.5.0.2
	gdb_5_2-2002-03-03-branchpoint:1.5
	gdb_5_1_1-2002-01-24-release:1.4
	cygnus_cvs_20020108_pre:1.5
	gdb_5_1_0_1-2002-01-03-branch:1.4.0.8
	gdb_5_1_0_1-2002-01-03-branchpoint:1.4
	gdb_5_1-2001-11-21-release:1.4
	gdb_s390-2001-09-26-branch:1.4.0.6
	gdb_s390-2001-09-26-branchpoint:1.4
	gdb_5_1-2001-07-29-branch:1.4.0.4
	gdb_5_1-2001-07-29-branchpoint:1.4
	dberlin-typesystem-branch:1.4.0.2
	dberlin-typesystem-branchpoint:1.4
	insight-precleanup-2001-01-01:1.4
	gdb_5_0-2000-05-19-release:1.2
	gdb_4_18_2-2000-05-18-release:1.2
	gdb_4_95_1-2000-05-11-snapshot:1.2
	gdb_4_95_0-2000-04-27-snapshot:1.2
	gdb_5_0-2000-04-10-branch:1.2.0.2
	gdb_5_0-2000-04-10-branchpoint:1.2
	repo-unification-2000-02-06:1.1.1.1
	insight-2000-02-04:1.1.1.1
	SNAPSHOT:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.13
date	2013.07.15.07.42.21;	author rosch;	state Exp;
branches;
next	1.12;

1.12
date	2012.08.08.13.50.32;	author rosch;	state Exp;
branches;
next	1.11;

1.11
date	2008.07.14.23.43.36;	author kseitz;	state Exp;
branches;
next	1.10;

1.10
date	2008.03.07.08.03.19;	author kseitz;	state Exp;
branches;
next	1.9;

1.9
date	2007.04.27.15.39.50;	author macro;	state Exp;
branches;
next	1.8;

1.8
date	2005.12.23.18.23.16;	author eliz;	state Exp;
branches;
next	1.7;

1.7
date	2002.05.04.19.08.32;	author cagney;	state Exp;
branches;
next	1.6;

1.6
date	2002.04.21.22.52.41;	author cagney;	state Exp;
branches;
next	1.5;

1.5
date	2002.01.04.23.21.39;	author cagney;	state Exp;
branches;
next	1.4;

1.4
date	2000.07.02.20.07.07;	author kevinb;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.17.20.20.59;	author jlarmour;	state Exp;
branches;
next	1.2;

1.2
date	2000.02.24.03.11.47;	author kseitz;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.07.00.19.42;	author jsm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.07.00.19.42;	author jsm;	state Exp;
branches;
next	;


desc
@@


1.13
log
@2013-07-15  Roland Schwingel  <roland.schwingel@@onevision.com>

   * generic/gdbtk-register.c (get_register): Update
   to reflect changes from upstream gdb. Prettyprinting
   becomes prettyformatting now.
   * generic/gdbtk-wrapper.c (GDB_val_print,wrap_val_print):
   Likewise.
   * generic/gdbtk-wrapper.h (GDB_val_print): Likewise.
@
text
@/* longjmp-free interface between gdb and gdbtk.
   Copyright (C) 1999, 2000, 2002, 2008 Free Software Foundation, Inc.

This file is part of GDB.  It contains routines to safely call common gdb
functions without the fear of longjmp'ing.
 
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.
 
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
 
You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor,
Boston, MA 02110-1301, USA.  */

#ifndef GDBTK_WRAPPER_H
#define GDBTK_WRAPPER_H
#include "vec.h"

/* Use this struct used to pass arguments to wrapper routines. We assume
   (arbitrarily) that no gdb function takes more than ten arguments. */
struct gdb_wrapper_arguments {

  /* Pointer to some result from the gdb function call, if any */
  union
  {
    int integer;
    void *ptr;
  } result;

  /* The list of arguments. */
  union
  {
    void *ptr;
    int integer;
  } args[10];
};

/* FIXME: cagney/2002-01-04: GDB no longer uses or supplies the
   value_ptr typedef.  Provide one here to keep the Insight code
   immediatly happy.  */
typedef struct value *value_ptr;

/* Whenever any gdb function wrapper is called, its return status is: */
typedef enum gdb_wrapper_status { GDB_OK, GDB_ERROR } gdb_result;

/* This list of functions which have been wrapped. Please keep this list
   in alphabetical order, using "GDB_" to prefix the actual name of the
   function. */
extern gdb_result GDB_evaluate_expression (struct expression *expr,
					   value_ptr * val);
extern gdb_result GDB_type_print (value_ptr val, char *varstring,
				  struct ui_file *stream, int show);
extern gdb_result GDB_val_print (struct type *type, char *valaddr,
				 CORE_ADDR address, struct ui_file *stream,
				 int format, int deref_ref, int recurse,
				 enum val_prettyformat pretty);
extern gdb_result GDB_value_fetch_lazy (value_ptr value);
extern gdb_result GDB_value_equal (value_ptr val1, value_ptr val2,
				   int *result);
/*
extern gdb_result GDB_parse_exp_1 (char **stringptr, struct block *block,
				   int comma, struct expression **result);
*/
extern gdb_result GDB_evaluate_type (struct expression *exp,
				     value_ptr * result);
extern gdb_result GDB_block_for_pc (CORE_ADDR pc, struct block **result);
extern gdb_result GDB_block_innermost_frame (struct block *block,
					     struct frame_info **result);
extern gdb_result GDB_reinit_frame_cache (void);
extern gdb_result GDB_value_ind (value_ptr val, value_ptr * rval);
extern gdb_result GDB_value_slice (value_ptr val, int low, int num,
				   value_ptr * rval);
extern gdb_result GDB_value_coerce_array (value_ptr val, value_ptr * rval);
extern gdb_result GDB_value_struct_elt (value_ptr * argp, value_ptr * args,
					char *name, int *static_memfunc,
					char *err, value_ptr * rval);
extern gdb_result GDB_value_cast (struct type *type, value_ptr val,
				  value_ptr * rval);
gdb_result GDB_get_frame_block (struct frame_info *fi, struct block **rval);
extern gdb_result GDB_get_prev_frame (struct frame_info *fi,
				      struct frame_info **result);
extern gdb_result GDB_get_next_frame (struct frame_info *fi,
				      struct frame_info **result);
extern gdb_result GDB_find_relative_frame (struct frame_info *fi,
					   int *start,
					   struct frame_info **result);
extern gdb_result GDB_get_current_frame (struct frame_info **result);
extern gdb_result GDB_varobj_update (struct varobj **varp, int explicit,
				     VEC (varobj_update_result) **changes);
#endif /* GDBTK_WRAPPER_H */

@


1.12
log
@	* generic/gdbtk-cmds.c (gdb_load_info): Replace call to
	make_cleanup_bfd_close with make_cleanup_bfd_unref due
	to changes in gdb.
	(gdb_loc): Replace call to decode_line_spec with call to
	decode_line_with_current_source due to changes in gdb.
	* generic/gdbtk-wrapper.c: Comment unused functions
	GDB_parse_exp_1 and wrap_parse_exp_1 as parse_exp_1 has
	changed its interface and the code appears to be unused
	anyway.
	* generic/gdbtk-wrapper.h: ditto
@
text
@d63 1
a63 1
				 enum val_prettyprint pretty);
@


1.11
log
@        * generic/gdbtk-stack.c (gdb_block_args): Remove deprecated values
        LOC_LOCAL_ARG, LOC_COMPUTED_ARG, LOC_REGPARM, LOC_BASEARG_ARG, and
        LOC_BASEARG.
        (gdb_get_blocks): Likewise.
        (gdb_get_vars_command): Likewise.
        Fix type-punned pointer error introduced on 03-07.

        * generic/gdbtk-cmds.c (gdbtk_load_asm): Use paddress instead
        of deprecated_print_address_numeric.
        (gdb_stop): Update use of target_stop.

        * generic/gdbtk.h (gdbtk_get_ptid): Declare new function.
        * generic/gdbtk-hooks.c (gdbtk_wait): Save inferior's ptid.
        (gdbtk_get_ptid): Define new function.
        * generic/gdbtk-varobj.c (variable_update): Update for recent
        varobj_update API change.
        * generic/gdbtk-wrapper.h (GDB_varobj_update): Likewise.
        * generic/gdbtk-wrapper.c (GDB_varobj_update): Likewise.
        (wrap_varobj_update): Likewise.

        * library/targetselection.itb (init_target_db): Initialize
        preferences here instead of ...
        (_init): ... here.
        (_init_prefs): Define gdb/load/default-portname, too.
@
text
@d67 1
d70 1
@


1.10
log
@        * generic/gdbtk-register.c (map_arg): New data type
        for passing arguments to mapping functions.
        (map_func): New definition of mapping function.
        Changed all callers to use these new types.
        * generic/gdbtk-stack.c (gdb_get_vars_command): Change
        cast to int to dereference of int *.
        * generic/gdbtk-wrapper.c: Change all casts to char * for
        results and args to use pointer or integer flavor of
        gdb_wrapper_args.results and .args.
        * generic/gdbtk-wrapper.h: struct gdb_wrapper_arguments
        members result and args now return a union of void * and int.
@
text
@d2 1
a2 1
   Copyright (C) 1999, 2000, 2002 Free Software Foundation, Inc.
d24 2
d93 2
a94 3
extern gdb_result GDB_varobj_update (struct varobj **varp,
				     struct varobj ***changelist, int explicit,
				     int *result);
@


1.9
log
@gdb/:
* Makefile.in (gdbtk-wrapper.o): Update dependencies.
(gdbtk-varobj.o, gdbtk-cmds.o, gdbtk-stack.o): Likewise.

gdb/gdbtk/:
* generic/gdbtk-wrapper.c (GDB_varobj_update): New function.
(wrap_varobj_update): Likewise.
* generic/gdbtk-wrapper.h (GDB_varobj_update): New declaration.
* generic/gdbtk-varobj.c (variable_update): Call
GDB_varobj_update() rather than varobj_update() directly.  Take
the new semantics of the latter into account.
* generic/gdbtk-cmds.c: Include "varobj.h".
* generic/gdbtk-stack.c: Likewise.
@
text
@d29 5
a33 1
  char *result;
d36 5
a40 1
  char *args[10];
@


1.8
log
@	* generic/gdbtk.h:
	* generic/gdbtk.c:
	* generic/gdbtk-wrapper.h:
	* generic/gdbtk-wrapper.c:
	* generic/gdbtk-varobj.c:
	* generic/gdbtk-stack.c:
	* generic/gdbtk-register.c:
	* generic/gdbtk-main.c:
	* generic/gdbtk-interp.c:
	* generic/gdbtk-hooks.c:
	* generic/gdbtk-cmds.h:
	* generic/gdbtk-cmds.c:
	* generic/gdbtk-bp.c: Put (C) after Copyright.  Update the FSF
	address.
@
text
@d83 3
@


1.7
log
@* generic/gdbtk-wrapper.h (GDB_select_frame): Delete declaration.
* generic/gdbtk-wrapper.c (GDB_select_frame): Delete function.
(wrap_select_frame): Delete function.
@
text
@d19 2
a20 1
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
@


1.6
log
@* generic/gdbtk-wrapper.c (GDB_find_frame_addr_in_frame_chain):
Delete function.
(wrap_find_frame_addr_in_frame_chain): Delete function.
* generic/gdbtk-wrapper.h (GDB_find_frame_addr_in_frame_chain):
Delete declaration.
@
text
@a46 1
extern gdb_result GDB_select_frame (struct frame_info *fi, int level);
@


1.5
log
@Move value_ptr typedef to gdbtk-wrapper from value.h.
@
text
@d2 1
a2 1
   Copyright 1999-2000 Free Software Foundation, Inc.
a64 3
extern gdb_result GDB_find_frame_addr_in_frame_chain (CORE_ADDR addr,
						      struct frame_info
						      **result);
@


1.4
log
@PARAMS elimination.
@
text
@d34 5
@


1.3
log
@        * ChangeLog-gdbtk: Renamed to ChangeLog
        * ChangeLog: New file
        * gdbtk-cmds.c, gdbtk-hooks.c, gdbtk-variable.c, gdbtk-varobj.c,
        gdbtk-wrapper.h, gdbtk-wrapper.c, gdbtk.h, gdbtk.c: No need for
        changelog-default-name hint for Emacs now
@
text
@d40 41
a80 37
extern gdb_result GDB_evaluate_expression PARAMS ((struct expression *expr, value_ptr *val));
extern gdb_result GDB_select_frame PARAMS ((struct frame_info *fi, int level));
extern gdb_result GDB_type_print PARAMS ((value_ptr val, char *varstring,
					  struct ui_file *stream, int show));
extern gdb_result GDB_val_print PARAMS ((struct type *type, char *valaddr,
                                  CORE_ADDR address, struct ui_file *stream,
                                  int format, int deref_ref, int recurse,
                                  enum val_prettyprint pretty));
extern gdb_result GDB_value_fetch_lazy PARAMS ((value_ptr value));
extern gdb_result GDB_value_equal PARAMS ((value_ptr val1, value_ptr val2, int *result));
extern gdb_result GDB_parse_exp_1 PARAMS ((char **stringptr, struct block *block, int comma,
                                           struct expression **result));
extern gdb_result GDB_evaluate_type PARAMS ((struct expression *exp, value_ptr *result));
extern gdb_result GDB_block_for_pc PARAMS ((CORE_ADDR pc, struct block **result));
extern gdb_result GDB_block_innermost_frame PARAMS ((struct block *block,
                                              struct frame_info **result));
extern gdb_result GDB_reinit_frame_cache PARAMS ((void));
extern gdb_result GDB_find_frame_addr_in_frame_chain PARAMS ((CORE_ADDR addr,
                                                       struct frame_info **result));
extern gdb_result GDB_value_ind PARAMS ((value_ptr val, value_ptr *rval));
extern gdb_result GDB_value_slice PARAMS ((value_ptr val, int low, int num,
				    value_ptr *rval));
extern gdb_result GDB_value_coerce_array PARAMS ((value_ptr val, value_ptr *rval));
extern gdb_result GDB_value_struct_elt PARAMS ((value_ptr *argp, value_ptr *args,
						char *name, int *static_memfunc,
						char *err, value_ptr *rval));
extern gdb_result GDB_value_cast PARAMS ((struct type *type, value_ptr val,
					  value_ptr *rval));
gdb_result GDB_get_frame_block PARAMS ((struct frame_info *fi, struct block **rval));
extern gdb_result GDB_get_prev_frame PARAMS ((struct frame_info *fi,
					      struct frame_info **result));
extern gdb_result GDB_get_next_frame PARAMS ((struct frame_info *fi,
					      struct frame_info **result));
extern gdb_result GDB_find_relative_frame PARAMS ((struct frame_info *fi,
						   int *start,
						   struct frame_info **result));
extern gdb_result GDB_get_current_frame PARAMS ((struct frame_info **result));
@


1.2
log
@        * gdbtk-wrapper.h: Add declarations for GDB_get_prev_frame, GDB_get_next_frame,
        GDB_find_relative_frame, GDB_get_current_frame.
        * gdbtk-wrapper.c (GDB_get_prev_frame, wrap_get_prev_frame): New functions.
        (GDB_get_next_frame, wrap_get_next_frame): New functions.
        (GDB_find_relative_frame, wrap_find_relative_frame): New functions.
        (GDB_get_current_frame, wrap_get_current_frame): New functions.

        * gdbtk-hooks.c (gdbtk_add_hooks): Use "specify_exec_file_hook" so
        that our hook is added to the list of hooks run instead of overwriting
        all other hooks.

        * gdbtk-cmds.c (gdb_stack): Wrap all calls to internal functions and
        deal with errors more gracefully.
@
text
@d78 1
a78 4

/* Local variables: */
/* change-log-default-name: "ChangeLog-gdbtk" */
/* End: */
@


1.1
log
@Initial revision
@
text
@d42 6
a47 6
extern gdb_result GDB_type_print (value_ptr val, char *varstring,
				  struct ui_file *stream, int show);
extern gdb_result GDB_val_print (struct type *type, char *valaddr,
				 CORE_ADDR address, struct ui_file *stream,
				 int format, int deref_ref, int recurse,
				 enum val_prettyprint pretty);
d69 8
@


1.1.1.1
log
@import insight-2000-02-04 snapshot (2nd try)
@
text
@@
