head	1.61;
access;
symbols
	insight_7_6-2013-04-10-branchpoint:1.58
	gdb_7_6-branch:1.58.0.2
	gdb_7_5-branch:1.55.0.2
	gdb_7_4-branch:1.52.0.2
	gdb_7_3-branch:1.51.0.2
	gdb_7_1-branch:1.50.0.2
	gdb_7_0-branch:1.49.0.2
	arc-sim-20090309:1.42
	arc-insight_6_8-branch:1.42.0.6
	arc-insight_6_8-branchpoint:1.42
	insight_6_8-branch:1.42.0.4
	insight_6_8-branchpoint:1.42
	gdb_6_8-branch:1.42.0.2
	insight_6_6-20070208-release:1.41
	gdb_6_6-branch:1.41.0.4
	gdb_6_6-2006-11-15-branchpoint:1.41
	insight_6_5-20061003-release:1.41
	gdb_6_5-branch:1.41.0.2
	gdb_6_5-2006-05-14-branchpoint:1.41
	gdb-csl-gxxpro-6_3-branch:1.40.0.4
	gdb-csl-gxxpro-6_3-branchpoint:1.40
	gdb_6_4-branch:1.40.0.2
	gdb_6_4-2005-11-01-branchpoint:1.40
	gdb_6_1-2004-04-05-release:1.31
	gdb_6_1-branch:1.31.0.4
	gdb_6_1-2004-03-01-gmt-branchpoint:1.31
	gdb_6_0-2003-10-04-release:1.31
	gdb_6_0-branch:1.31.0.2
	gdb_6_0-2003-06-23-branchpoint:1.31
	gdb_5_3-2002-12-12-release:1.25
	gdb_5_3-branch:1.25.0.2
	gdb_5_3-2002-09-04-branchpoint:1.25
	gdb_5_2_1-2002-07-23-release:1.21.2.1
	gdb_5_2-2002-04-29-release:1.21.2.1
	gdb_5_2-branch:1.21.0.2
	gdb_5_2-2002-03-03-branchpoint:1.21
	gdb_5_1_1-2002-01-24-release:1.16
	cygnus_cvs_20020108_pre:1.18
	gdb_5_1_0_1-2002-01-03-branch:1.16.0.8
	gdb_5_1_0_1-2002-01-03-branchpoint:1.16
	gdb_5_1-2001-11-21-release:1.16
	gdb_s390-2001-09-26-branch:1.16.0.6
	gdb_s390-2001-09-26-branchpoint:1.16
	gdb_5_1-2001-07-29-branch:1.16.0.4
	gdb_5_1-2001-07-29-branchpoint:1.16
	dberlin-typesystem-branch:1.16.0.2
	dberlin-typesystem-branchpoint:1.16
	insight-precleanup-2001-01-01:1.8
	gdb_5_0-2000-05-19-release:1.3
	gdb_4_18_2-2000-05-18-release:1.3
	gdb_4_95_1-2000-05-11-snapshot:1.3
	gdb_4_95_0-2000-04-27-snapshot:1.3
	gdb_5_0-2000-04-10-branch:1.3.0.2
	gdb_5_0-2000-04-10-branchpoint:1.3
	repo-unification-2000-02-06:1.1.1.1
	insight-2000-02-04:1.1.1.1
	SNAPSHOT:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.61
date	2014.01.09.18.52.28;	author tromey;	state Exp;
branches;
next	1.60;

1.60
date	2013.07.02.17.07.29;	author kseitz;	state Exp;
branches;
next	1.59;

1.59
date	2013.06.05.20.19.46;	author kseitz;	state Exp;
branches;
next	1.58;

1.58
date	2012.11.10.17.49.57;	author kseitz;	state Exp;
branches;
next	1.57;

1.57
date	2012.10.24.15.30.38;	author kseitz;	state Exp;
branches;
next	1.56;

1.56
date	2012.10.10.17.28.03;	author kseitz;	state Exp;
branches;
next	1.55;

1.55
date	2012.05.25.11.36.08;	author rosch;	state Exp;
branches;
next	1.54;

1.54
date	2012.04.19.19.46.31;	author kseitz;	state Exp;
branches;
next	1.53;

1.53
date	2012.03.28.13.09.12;	author rosch;	state Exp;
branches;
next	1.52;

1.52
date	2011.05.13.00.36.26;	author kseitz;	state Exp;
branches;
next	1.51;

1.51
date	2010.12.02.06.48.00;	author kseitz;	state Exp;
branches;
next	1.50;

1.50
date	2009.12.02.19.29.42;	author ppluzhnikov;	state Exp;
branches;
next	1.49;

1.49
date	2009.05.24.08.38.27;	author muller;	state Exp;
branches;
next	1.48;

1.48
date	2009.04.06.23.11.10;	author muller;	state Exp;
branches;
next	1.47;

1.47
date	2009.03.25.23.43.07;	author muller;	state Exp;
branches;
next	1.46;

1.46
date	2008.09.18.18.28.45;	author kseitz;	state Exp;
branches;
next	1.45;

1.45
date	2008.08.02.22.08.32;	author kseitz;	state Exp;
branches;
next	1.44;

1.44
date	2008.07.25.16.12.03;	author tromey;	state Exp;
branches;
next	1.43;

1.43
date	2008.07.14.23.43.36;	author kseitz;	state Exp;
branches;
next	1.42;

1.42
date	2008.03.03.23.25.03;	author kseitz;	state Exp;
branches
	1.42.6.1;
next	1.41;

1.41
date	2005.12.23.18.23.16;	author eliz;	state Exp;
branches;
next	1.40;

1.40
date	2005.06.01.15.23.16;	author kseitz;	state Exp;
branches;
next	1.39;

1.39
date	2004.12.13.20.42.20;	author bje;	state Exp;
branches;
next	1.38;

1.38
date	2004.06.26.20.30.51;	author cagney;	state Exp;
branches;
next	1.37;

1.37
date	2004.06.25.19.44.22;	author cagney;	state Exp;
branches;
next	1.36;

1.36
date	2004.06.24.22.07.45;	author cagney;	state Exp;
branches;
next	1.35;

1.35
date	2004.06.24.21.50.24;	author cagney;	state Exp;
branches;
next	1.34;

1.34
date	2004.04.22.16.51.43;	author kseitz;	state Exp;
branches;
next	1.33;

1.33
date	2004.04.20.02.03.55;	author roland;	state Exp;
branches;
next	1.32;

1.32
date	2004.04.15.21.39.35;	author roland;	state Exp;
branches;
next	1.31;

1.31
date	2003.02.12.16.02.03;	author cagney;	state Exp;
branches;
next	1.30;

1.30
date	2003.02.11.16.08.38;	author cagney;	state Exp;
branches;
next	1.29;

1.29
date	2002.12.04.16.21.21;	author kseitz;	state Exp;
branches;
next	1.28;

1.28
date	2002.11.27.19.09.17;	author hunt;	state Exp;
branches;
next	1.27;

1.27
date	2002.11.06.14.22.28;	author kseitz;	state Exp;
branches;
next	1.26;

1.26
date	2002.09.27.20.07.48;	author kseitz;	state Exp;
branches;
next	1.25;

1.25
date	2002.07.03.17.38.22;	author hunt;	state Exp;
branches;
next	1.24;

1.24
date	2002.04.23.00.03.09;	author kseitz;	state Exp;
branches;
next	1.23;

1.23
date	2002.03.25.22.58.54;	author ezannoni;	state Exp;
branches;
next	1.22;

1.22
date	2002.03.25.16.45.35;	author aoliva;	state Exp;
branches;
next	1.21;

1.21
date	2002.02.14.07.25.22;	author hunt;	state Exp;
branches
	1.21.2.1;
next	1.20;

1.20
date	2002.02.07.21.56.07;	author hunt;	state Exp;
branches;
next	1.19;

1.19
date	2002.02.07.05.05.06;	author hunt;	state Exp;
branches;
next	1.18;

1.18
date	2001.08.16.15.48.14;	author kseitz;	state Exp;
branches;
next	1.17;

1.17
date	2001.08.13.18.30.36;	author kseitz;	state Exp;
branches;
next	1.16;

1.16
date	2001.06.13.20.01.42;	author kseitz;	state Exp;
branches;
next	1.15;

1.15
date	2001.06.07.14.43.01;	author kseitz;	state Exp;
branches;
next	1.14;

1.14
date	2001.05.18.22.49.34;	author kseitz;	state Exp;
branches;
next	1.13;

1.13
date	2001.05.10.22.34.54;	author kseitz;	state Exp;
branches;
next	1.12;

1.12
date	2001.04.23.20.27.54;	author kseitz;	state Exp;
branches;
next	1.11;

1.11
date	2001.04.20.17.20.02;	author kseitz;	state Exp;
branches;
next	1.10;

1.10
date	2001.04.19.22.51.02;	author kseitz;	state Exp;
branches;
next	1.9;

1.9
date	2001.04.05.00.04.28;	author hunt;	state Exp;
branches;
next	1.8;

1.8
date	2000.11.29.00.27.46;	author fnasser;	state Exp;
branches;
next	1.7;

1.7
date	2000.10.23.22.41.54;	author fnasser;	state Exp;
branches;
next	1.6;

1.6
date	2000.07.11.03.13.26;	author kevinb;	state Exp;
branches;
next	1.5;

1.5
date	2000.07.02.20.07.07;	author kevinb;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.17.20.20.59;	author jlarmour;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.03.21.29.00;	author jimb;	state Exp;
branches;
next	1.2;

1.2
date	2000.02.24.03.11.47;	author kseitz;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.07.00.19.42;	author jsm;	state Exp;
branches
	1.1.1.1;
next	;

1.42.6.1
date	2009.09.11.04.45.50;	author amylaar;	state Exp;
branches;
next	;

1.21.2.1
date	2002.03.25.16.46.19;	author aoliva;	state Exp;
branches;
next	;

1.1.1.1
date	2000.02.07.00.19.42;	author jsm;	state Exp;
branches;
next	;


desc
@@


1.61
log
@	* generic/gdbtk-hooks.c (gdbtk_add_hooks): Use
	command_param_changed observer, not deprecated_set_hook.
	(gdbtk_param_changed): Rename from gdbtk_set_hook.  Simplify.
@
text
@/* Startup code for Insight.

   Copyright (C) 1994, 1995, 1996, 1997, 1998, 2000, 200, 2002, 2003, 2004,
   2008, 2010, 2011, 2012, 2013, 2014 Free Software Foundation, Inc.

   Written by Stu Grossman <grossman@@cygnus.com> of Cygnus Support.

   This file is part of GDB.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street, Fifth Floor,
   Boston, MA 02110-1301, USA.  */

#include "defs.h"
#include "inferior.h"
#include "symfile.h"
#include "objfiles.h"
#include "gdbcore.h"
#include "tracepoint.h"
#include "demangle.h"
#include "top.h"
#include "annotate.h"
#include "cli/cli-decode.h"
#include "observer.h"
#include "gdbthread.h"

#ifdef _WIN32
#define WIN32_LEAN_AND_MEAN
#include <windows.h>
#endif

/* tcl header files includes varargs.h unless HAS_STDARG is defined,
   but gdb uses stdarg.h, so make sure HAS_STDARG is defined.  */
#define HAS_STDARG 1

#include <tcl.h>
#include <tk.h>
#include "guitcl.h"
#include "gdbtk.h"

#include <signal.h>
#include <fcntl.h>
#ifdef HAVE_SYS_IOCTL_H
#include <sys/ioctl.h>
#endif
#include <sys/time.h>

#include "gdb_string.h"
#include "dis-asm.h"
#include "gdbcmd.h"


volatile int in_fputs = 0;

/* Set by gdb_stop, this flag informs x_event to tell its caller
   that it should forcibly detach from the target. */
int gdbtk_force_detach = 0;

/* From gdbtk-bp.c */
extern void gdbtk_create_breakpoint (struct breakpoint *);
extern void gdbtk_delete_breakpoint (struct breakpoint *);
extern void gdbtk_modify_breakpoint (struct breakpoint *);

static void gdbtk_architecture_changed (struct gdbarch *);
static void gdbtk_trace_find (char *arg, int from_tty);
static void gdbtk_trace_start_stop (int, int);
static void gdbtk_attach (void);
static void gdbtk_detach (void);
static void gdbtk_file_changed (char *);
static void gdbtk_exec_file_display (char *);
static void gdbtk_call_command (struct cmd_list_element *, char *, int);
static ptid_t gdbtk_wait (ptid_t, struct target_waitstatus *, int);
int x_event (int);
static int gdbtk_query (const char *, va_list);
static void gdbtk_warning (const char *, va_list);
static char *gdbtk_readline (char *);
static void gdbtk_readline_begin (char *format,...);
static void gdbtk_readline_end (void);
static void gdbtk_pre_add_symbol (const char *);
static void gdbtk_print_frame_info (struct symtab *, int, int, int);
static void gdbtk_post_add_symbol (void);
static void gdbtk_register_changed (int regno);
static void gdbtk_memory_changed (struct inferior *inferior, CORE_ADDR addr,
				  ssize_t len, const bfd_byte *data);
static void gdbtk_selected_frame_changed (int);
static void gdbtk_context_change (int);
static void gdbtk_error_begin (void);
void report_error (void);
static void gdbtk_annotate_signal (void);
static void gdbtk_param_changed (const char *, const char *);

/*
 * gdbtk_fputs can't be static, because we need to call it in gdbtk.c.
 * See note there for details.
 */

long gdbtk_read (struct ui_file *, char *, long);
void gdbtk_fputs (const char *, struct ui_file *);
static int gdbtk_load_hash (const char *, unsigned long);

static ptid_t gdbtk_ptid;

/*
 * gdbtk_add_hooks - add all the hooks to gdb.  This will get called by the
 * startup code to fill in the hooks needed by core gdb.
 */

void
gdbtk_add_hooks (void)
{
  /* Gdb observers */
  observer_attach_breakpoint_created (gdbtk_create_breakpoint);
  observer_attach_breakpoint_modified (gdbtk_modify_breakpoint);
  observer_attach_breakpoint_deleted (gdbtk_delete_breakpoint);
  observer_attach_architecture_changed (gdbtk_architecture_changed);
  observer_attach_memory_changed (gdbtk_memory_changed);
  observer_attach_command_param_changed (gdbtk_param_changed);

  /* Hooks */
  deprecated_call_command_hook = gdbtk_call_command;
  deprecated_readline_begin_hook = gdbtk_readline_begin;
  deprecated_readline_hook = gdbtk_readline;
  deprecated_readline_end_hook = gdbtk_readline_end;

  deprecated_print_frame_info_listing_hook = gdbtk_print_frame_info;
  deprecated_query_hook = gdbtk_query;
  deprecated_warning_hook = gdbtk_warning;

  deprecated_interactive_hook = gdbtk_interactive;
  deprecated_target_wait_hook = gdbtk_wait;
  deprecated_ui_load_progress_hook = gdbtk_load_hash;

  deprecated_ui_loop_hook = x_event;
  deprecated_pre_add_symbol_hook = gdbtk_pre_add_symbol;
  deprecated_post_add_symbol_hook = gdbtk_post_add_symbol;
  deprecated_file_changed_hook = gdbtk_file_changed;
  specify_exec_file_hook (gdbtk_exec_file_display);

  deprecated_trace_find_hook = gdbtk_trace_find;
  deprecated_trace_start_stop_hook = gdbtk_trace_start_stop;

  deprecated_attach_hook            = gdbtk_attach;
  deprecated_detach_hook            = gdbtk_detach;

  deprecated_register_changed_hook = gdbtk_register_changed;
  deprecated_selected_frame_level_changed_hook = gdbtk_selected_frame_changed;
  deprecated_context_hook = gdbtk_context_change;

  deprecated_error_begin_hook = gdbtk_error_begin;

  deprecated_annotate_signal_hook = gdbtk_annotate_signal;
  deprecated_annotate_signalled_hook = gdbtk_annotate_signal;
}

/* These control where to put the gdb output which is created by
   {f}printf_{un}filtered and friends.  gdbtk_fputs is the lowest
   level of these routines and capture all output from the rest of
   GDB.

   The reason to use the result_ptr rather than the gdbtk_interp's result
   directly is so that a call_wrapper invoked function can preserve its result
   across calls into Tcl which might be made in the course of the function's
   execution.

   * result_ptr->obj_ptr is where to accumulate the result.
   * GDBTK_TO_RESULT flag means the output goes to the gdbtk_tcl_fputs proc
   instead of to the result_ptr.
   * GDBTK_MAKES_LIST flag means add to the result as a list element.

*/

gdbtk_result *result_ptr = NULL;

/* If you want to restore an old value of result_ptr whenever cleanups
   are run, pass this function to make_cleanup, along with the value
   of result_ptr you'd like to reinstate.  */
void
gdbtk_restore_result_ptr (void *old_result_ptr)
{
  result_ptr = (gdbtk_result *) old_result_ptr;
}

/* This allows you to Tcl_Eval a tcl command which takes
   a command word, and then a single argument. */
int
gdbtk_two_elem_cmd (char *cmd_name, char *argv1)
{
  char *command;
  int result, flags_ptr, arg_len, cmd_len;

  arg_len = Tcl_ScanElement (argv1, &flags_ptr);
  cmd_len = strlen (cmd_name);
  command = malloc (arg_len + cmd_len + 2);
  strcpy (command, cmd_name);
  strcat (command, " ");

  Tcl_ConvertElement (argv1, command + cmd_len + 1, flags_ptr);

  result = Tcl_Eval (gdbtk_interp, command);
  if (result != TCL_OK)
    report_error ();
  free (command);
  return result;
}

struct ui_file *
gdbtk_fileopenin (void)
{
  struct ui_file *file = ui_file_new ();
  set_ui_file_read (file, gdbtk_read);
  return file;
}

struct ui_file *
gdbtk_fileopen (void)
{
  struct ui_file *file = ui_file_new ();
  set_ui_file_fputs (file, gdbtk_fputs);
  return file;
}

/* This handles input from the gdb console.
 */

long
gdbtk_read (struct ui_file *stream, char *buf, long sizeof_buf)
{
  int result;
  size_t actual_len;

  if (stream == gdb_stdtargin)
    {
      result = Tcl_Eval (gdbtk_interp, "gdbtk_console_read");
      if (result != TCL_OK)
        {
          report_error ();
          actual_len = 0;
          buf[0] = '\0';
          return 0;
        }
      else
        {
          const char *tclResult = Tcl_GetStringResult (gdbtk_interp);
          actual_len = strlen (tclResult);

          /* Truncate the string if it is too big for the caller's buffer.  */
          if (actual_len >= sizeof_buf)
            actual_len = sizeof_buf - 1;

          memcpy (buf, tclResult, actual_len);
          buf[actual_len] = '\0';
          return actual_len;
        }
    }
  else
    {
      errno = EBADF;
      return 0;
    }
}


/* This handles all the output from gdb.  All the gdb printf_xxx functions
 * eventually end up here.  The output is either passed to the result_ptr
 * where it will go to the result of some gdbtk command, or passed to the
 * Tcl proc gdbtk_tcl_fputs (where it is usually just dumped to the console
 * window.
 *
 * The cases are:
 *
 * 1) result_ptr == NULL - This happens when some output comes from gdb which
 *    is not generated by a command in gdbtk-cmds, usually startup stuff.
 *    In this case we just route the data to gdbtk_tcl_fputs.
 * 2) The GDBTK_TO_RESULT flag is set - The result is supposed to go to Tcl.
 *    We place the data into the result_ptr, either as a string,
 *    or a list, depending whether the GDBTK_MAKES_LIST bit is set.
 * 3) The GDBTK_TO_RESULT flag is unset - We route the data to gdbtk_tcl_fputs
 *    UNLESS it was coming to gdb_stderr.  Then we place it in the result_ptr
 *    anyway, so it can be dealt with.
 *
 */

void
gdbtk_fputs (const char *ptr, struct ui_file *stream)
{
  if (gdbtk_disable_fputs)
    return;

  in_fputs = 1;

  if (stream == gdb_stdlog)
    gdbtk_two_elem_cmd ("gdbtk_tcl_fputs_log", (char *) ptr);
  else if (stream == gdb_stdtarg)
    gdbtk_two_elem_cmd ("gdbtk_tcl_fputs_target", (char *) ptr);
  else if (result_ptr != NULL)
    {
      if (result_ptr->flags & GDBTK_TO_RESULT)
	{
	  if (result_ptr->flags & GDBTK_MAKES_LIST)
	    Tcl_ListObjAppendElement (NULL, result_ptr->obj_ptr,
				      Tcl_NewStringObj ((char *) ptr, -1));
	  else
	    Tcl_AppendToObj (result_ptr->obj_ptr, (char *) ptr, -1);
	}
      else if (stream == gdb_stderr || result_ptr->flags & GDBTK_ERROR_ONLY)
	{
	  if (result_ptr->flags & GDBTK_ERROR_STARTED)
	    Tcl_AppendToObj (result_ptr->obj_ptr, (char *) ptr, -1);
	  else
	    {
	      Tcl_SetStringObj (result_ptr->obj_ptr, (char *) ptr, -1);
	      result_ptr->flags |= GDBTK_ERROR_STARTED;
	    }
	}
      else
	{
	  gdbtk_two_elem_cmd ("gdbtk_tcl_fputs", (char *) ptr);
	  if (result_ptr->flags & GDBTK_MAKES_LIST)
	    gdbtk_two_elem_cmd ("gdbtk_tcl_fputs", " ");
	}
    }
  else
    {
      gdbtk_two_elem_cmd ("gdbtk_tcl_fputs", (char *) ptr);
    }

  in_fputs = 0;
}

/*
 * This routes all warnings to the Tcl function "gdbtk_tcl_warning".
 */

static void
gdbtk_warning (const char *warning, va_list args)
{
  char *buf;
  buf = xstrvprintf (warning, args);
  gdbtk_two_elem_cmd ("gdbtk_tcl_warning", buf);
  free(buf);
}


/* Error-handling function for all hooks */
/* Hooks are not like tcl functions, they do not simply return */
/* TCL_OK or TCL_ERROR.  Also, the calling function typically */
/* doesn't care about errors in the hook functions.  Therefore */
/* after every hook function, report_error should be called. */
/* report_error can just call Tcl_BackgroundError() which will */
/* pop up a messagebox, or it can silently log the errors through */
/* the gdbtk dbug command.  */

void
report_error (void)
{
  TclDebug ('E', Tcl_GetVar (gdbtk_interp, "errorInfo", TCL_GLOBAL_ONLY));
  /*  Tcl_BackgroundError(gdbtk_interp); */
}

/*
 * This routes all ignorable warnings to the Tcl function
 * "gdbtk_tcl_ignorable_warning".
 */

void
gdbtk_ignorable_warning (const char *class, const char *warning)
{
  char *buf;
  buf = xstrprintf ("gdbtk_tcl_ignorable_warning {%s} {%s}", class, warning);
  if (Tcl_Eval (gdbtk_interp, buf) != TCL_OK)
    report_error ();
  free(buf);
}

static void
gdbtk_register_changed (int regno)
{
  if (Tcl_Eval (gdbtk_interp, "gdbtk_register_changed") != TCL_OK)
    report_error ();
}

static void
gdbtk_memory_changed (struct inferior *inferior, CORE_ADDR addr,
		      ssize_t len, const bfd_byte *data)
{
  if (Tcl_Eval (gdbtk_interp, "gdbtk_memory_changed") != TCL_OK)
    report_error ();
}


/* This hook is installed as the deprecated_ui_loop_hook, which is
 * used in several places to keep the gui alive (x_event runs gdbtk's
 * event loop). Users include:
 * - ser-tcp.c in socket reading code
 * - ser-unix.c in serial port reading code
 * - built-in simulators while executing
 *
 * x_event used to be called on SIGIO on the socket to the X server
 * for unix. Unfortunately, Linux does not deliver SIGIO, so we resort
 * to an elaborate scheme to keep the gui alive.
 *
 * For simulators and socket or serial connections on all hosts, we
 * rely on deprecated_ui_loop_hook (x_event) to keep us going. If the
 * user requests a detach (as a result of pressing the stop button --
 * see comments before gdb_stop in gdbtk-cmds.c), it sets the global
 * GDBTK_FORCE_DETACH, which is the value that x_event returns to it's
 * caller. It is up to the caller of x_event to act on this
 * information.
 *
 * For native unix, we simply set an interval timer which calls
 * x_event to allow the debugger to run through the Tcl event
 * loop. See comments before gdbtk_start_timer and gdb_stop_timer
 * in gdbtk.c.
 *
 * For native windows (and a few other targets, like the v850 ICE), we
 * rely on the target_wait loops to call deprecated_ui_loop_hook to
 * keep us alive.  */
int
x_event (int signo)
{
  static volatile int in_x_event = 0;
  static Tcl_Obj *varname = NULL;

  /* Do nor re-enter this code or enter it while collecting gdb output. */
  if (in_x_event || in_fputs)
    return 0;

  /* Also, only do things while the target is running (stops and redraws).
     FIXME: We wold like to at least redraw at other times but this is bundled
     together in the TCL_WINDOW_EVENTS group and we would also process user
     input.  We will have to prevent (unwanted)  user input to be generated
     in order to be able to redraw (removing this test here). */
  if (!running_now)
    return 0;

  in_x_event = 1;
  gdbtk_force_detach = 0;

  /* Process pending events */
  while (Tcl_DoOneEvent (TCL_DONT_WAIT | TCL_ALL_EVENTS) != 0)
    ;

  if (load_in_progress)
    {
      int val;
      if (varname == NULL)
	{
#if TCL_MAJOR_VERSION == 8 && (TCL_MINOR_VERSION < 1 || TCL_MINOR_VERSION > 2)
	  Tcl_Obj *varnamestrobj = Tcl_NewStringObj ("download_cancel_ok", -1);
	  varname = Tcl_ObjGetVar2 (gdbtk_interp, varnamestrobj, NULL, TCL_GLOBAL_ONLY);
#else
	  varname = Tcl_GetObjVar2 (gdbtk_interp, "download_cancel_ok", NULL, TCL_GLOBAL_ONLY);
#endif
	}
      if ((Tcl_GetIntFromObj (gdbtk_interp, varname, &val) == TCL_OK) && val)
	{
	  set_quit_flag ();
#ifdef REQUEST_QUIT
	  REQUEST_QUIT;
#else
	  if (immediate_quit)
	    quit ();
#endif
	}
    }
  in_x_event = 0;

  return gdbtk_force_detach;
}

/* VARARGS */
static void
gdbtk_readline_begin (char *format,...)
{
  va_list args;
  char *buf;

  va_start (args, format);
  buf = xstrvprintf (format, args);
  gdbtk_two_elem_cmd ("gdbtk_tcl_readline_begin", buf);
  free(buf);
}

static char *
gdbtk_readline (char *prompt)
{
  int result;

#ifdef _WIN32
  close_bfds ();
#endif

  result = gdbtk_two_elem_cmd ("gdbtk_tcl_readline", prompt);

  if (result == TCL_OK)
    {
      return (xstrdup (Tcl_GetStringResult (gdbtk_interp)));
    }
  else
    {
      gdbtk_fputs (Tcl_GetStringResult (gdbtk_interp), gdb_stdout);
      gdbtk_fputs ("\n", gdb_stdout);
      return (NULL);
    }
}

static void
gdbtk_readline_end (void)
{
  if (Tcl_Eval (gdbtk_interp, "gdbtk_tcl_readline_end") != TCL_OK)
    report_error ();
}

static void
gdbtk_call_command (struct cmd_list_element *cmdblk,
		    char *arg, int from_tty)
{
  running_now = 0;
  if (cmdblk->class == class_run || cmdblk->class == class_trace)
    {

      running_now = 1;
      if (!No_Update)
	Tcl_Eval (gdbtk_interp, "gdbtk_tcl_busy");
      cmd_func (cmdblk, arg, from_tty);
      running_now = 0;
      if (!No_Update)
	Tcl_Eval (gdbtk_interp, "gdbtk_tcl_idle");
    }
  else
    cmd_func (cmdblk, arg, from_tty);
}

/* Called after a `set' command succeeds.  Runs the Tcl hook
   `gdb_set_hook' with the full name of the variable (a Tcl list) as
   the first argument and the new value as the second argument.  */

static void
gdbtk_param_changed (const char *param, const char *value)
{
  Tcl_DString cmd;
  char *buffer = NULL;

  Tcl_DStringInit (&cmd);
  Tcl_DStringAppendElement (&cmd, "gdbtk_tcl_set_variable");

  Tcl_DStringAppendElement (&cmd, param);
  Tcl_DStringAppendElement (&cmd, value);

  if (Tcl_Eval (gdbtk_interp, Tcl_DStringValue (&cmd)) != TCL_OK)
    report_error ();

  Tcl_DStringFree (&cmd);

  if (buffer != NULL)
    {
      free(buffer);
    }
}

int
gdbtk_load_hash (const char *section, unsigned long num)
{
  char *buf;
  buf = xstrprintf ("Download::download_hash %s %ld", section, num);
  if (Tcl_Eval (gdbtk_interp, buf) != TCL_OK)
    report_error ();
  free(buf);

  return atoi (Tcl_GetStringResult (gdbtk_interp));
}


/* This hook is called whenever we are ready to load a symbol file so that
   the UI can notify the user... */
static void
gdbtk_pre_add_symbol (const char *name)
{
  gdbtk_two_elem_cmd ("gdbtk_tcl_pre_add_symbol", (char *) name);
}

/* This hook is called whenever we finish loading a symbol file. */
static void
gdbtk_post_add_symbol (void)
{
  if (Tcl_Eval (gdbtk_interp, "gdbtk_tcl_post_add_symbol") != TCL_OK)
    report_error ();
}

/* This hook function is called whenever we want to wait for the
   target.  */

static ptid_t
gdbtk_wait (ptid_t ptid, struct target_waitstatus *ourstatus, int options)
{
  gdbtk_force_detach = 0;
  gdbtk_start_timer ();
  ptid = target_wait (ptid, ourstatus, options);
  gdbtk_stop_timer ();
  gdbtk_ptid = ptid;

  return ptid;
}

/*
 * This handles all queries from gdb.
 * The first argument is a printf style format statement, the rest are its
 * arguments.  The resultant formatted string is passed to the Tcl function
 * "gdbtk_tcl_query".
 * It returns the users response to the query, as well as putting the value
 * in the result field of the Tcl interpreter.
 */

static int
gdbtk_query (const char *query, va_list args)
{
  char *buf;
  long val;

  buf = xstrvprintf (query, args);
  gdbtk_two_elem_cmd ("gdbtk_tcl_query", buf);
  free(buf);

  val = atol (Tcl_GetStringResult (gdbtk_interp));
  return val;
}


static void
gdbtk_print_frame_info (struct symtab *s, int line,
			int stopline, int noerror)
{
}

/*
 * gdbtk_trace_find
 *
 * This is run by the trace_find_command.  arg is the argument that was passed
 * to that command, from_tty is 1 if the command was run from a tty, 0 if it
 * was run from a script.  It runs gdbtk_tcl_tfind_hook passing on these two
 * arguments.
 *
 */

static void
gdbtk_trace_find (char *arg, int from_tty)
{
  Tcl_Obj *cmdObj;

  cmdObj = Tcl_NewListObj (0, NULL);
  Tcl_ListObjAppendElement (gdbtk_interp, cmdObj,
			    Tcl_NewStringObj ("gdbtk_tcl_trace_find_hook", -1));
  Tcl_ListObjAppendElement (gdbtk_interp, cmdObj, Tcl_NewStringObj (arg, -1));
  Tcl_ListObjAppendElement (gdbtk_interp, cmdObj, Tcl_NewIntObj (from_tty));
#if TCL_MAJOR_VERSION == 8 && (TCL_MINOR_VERSION < 1 || TCL_MINOR_VERSION > 2)
  if (Tcl_GlobalEvalObj (gdbtk_interp, cmdObj) != TCL_OK)
    report_error ();
#else
  if (Tcl_EvalObj (gdbtk_interp, cmdObj, TCL_EVAL_GLOBAL) != TCL_OK)
    report_error ();
#endif
}

/*
 * gdbtk_trace_start_stop
 *
 * This is run by the trace_start_command and trace_stop_command.
 * The START variable determines which, 1 meaning trace_start was run,
 * 0 meaning trace_stop was run.
 *
 */

static void
gdbtk_trace_start_stop (int start, int from_tty)
{

  if (start)
    Tcl_GlobalEval (gdbtk_interp, "gdbtk_tcl_tstart");
  else
    Tcl_GlobalEval (gdbtk_interp, "gdbtk_tcl_tstop");

}

static void
gdbtk_selected_frame_changed (int level)
{
#if TCL_MAJOR_VERSION == 8 && TCL_MINOR_VERSION < 1
  char *a;
  a = xstrprintf ("%d", level);
  Tcl_SetVar (gdbtk_interp, "gdb_selected_frame_level", a, TCL_GLOBAL_ONLY);
  xfree (a);
#else
  Tcl_SetVar2Ex (gdbtk_interp, "gdb_selected_frame_level", NULL,
		 Tcl_NewIntObj (level), TCL_GLOBAL_ONLY);
#endif
}

/* Called when the current thread changes. */
/* gdb_context is linked to the tcl variable "gdb_context_id" */
static void
gdbtk_context_change (int num)
{
  gdb_context = num;
}

/* Called from file_command */
static void
gdbtk_file_changed (char *filename)
{
  gdbtk_two_elem_cmd ("gdbtk_tcl_file_changed", filename);
}

/* Called from exec_file_command */
static void
gdbtk_exec_file_display (char *filename)
{
  gdbtk_two_elem_cmd ("gdbtk_tcl_exec_file_display", filename);
}

/* Called from error_begin, this hook is used to warn the gui
   about multi-line error messages */
static void
gdbtk_error_begin (void)
{
  if (result_ptr != NULL)
    result_ptr->flags |= GDBTK_ERROR_ONLY;
}

/* notify GDBtk when a signal occurs */
static void
gdbtk_annotate_signal (void)
{
  char *buf;
  struct thread_info *tp;

  /* Inform gui that the target has stopped. This is
     a necessary stop button evil. We don't want signal notification
     to interfere with the elaborate and painful stop button detach
     timeout. */
  Tcl_Eval (gdbtk_interp, "gdbtk_stop_idle_callback");

  if (ptid_equal (inferior_ptid, null_ptid))
    return;

  tp = inferior_thread ();

  buf = xstrprintf ("gdbtk_signal %s {%s}",
	     gdb_signal_to_name (tp->suspend.stop_signal),
	     gdb_signal_to_string (tp->suspend.stop_signal));
  if (Tcl_Eval (gdbtk_interp, buf) != TCL_OK)
    report_error ();
  free(buf);
}

static void
gdbtk_attach (void)
{
  if (Tcl_Eval (gdbtk_interp, "after idle \"update idletasks;gdbtk_attached\"") != TCL_OK)
    {
      report_error ();
    }
}

static void
gdbtk_detach (void)
{
  if (Tcl_Eval (gdbtk_interp, "gdbtk_detached") != TCL_OK)
    {
      report_error ();
    }
}

/* Called from gdbarch_update_p whenever the architecture changes. */
static void
gdbtk_architecture_changed (struct gdbarch *ignore)
{
  Tcl_Eval (gdbtk_interp, "gdbtk_tcl_architecture_changed");
}

ptid_t
gdbtk_get_ptid (void)
{
  return gdbtk_ptid;
}
@


1.60
log
@	* generic/gdbtk-cmds.c (gdb_listfuncs): Update declaration.
	* generic/gdbtk-hooks.c (gdb_two_elem_cmd): Likewise.
	(report_error): Likewise.
	(gdbtk_readline_end, gdbtk_post_add_symbol, gdbtk_error_begin,
	gdbtk_attach): Likewise.
	* generic/gdbtk/gdbtk-register.c (setup_architecture_data):
	Likewise.
	* generic/gdbtk-wrapper.c (GDB_equal_value, GDB_reinit_frame_cache,
	GDB_value-coerce_array): Likewise.
	* generic/gdbtk.c (gdbtk_interactive, gdbtk_start_timer,
	gdbtk_stop_timer, _initialize_gdbtk): Likewise.
@
text
@d4 1
a4 1
   2008, 2010, 2011, 2012, 2013 Free Software Foundation, Inc.
d101 1
a101 1
static void gdbtk_set_hook (struct cmd_list_element *cmdblk);
d128 1
a131 1
  deprecated_set_hook = gdbtk_set_hook;
d550 1
a550 1
gdbtk_set_hook (struct cmd_list_element *cmdblk)
a552 1
  char *p;
d558 2
a559 51
  /* Append variable name as sublist.  */
  Tcl_DStringStartSublist (&cmd);
  p = cmdblk->prefixname;
  while (p && *p)
    {
      char *q = strchr (p, ' ');
      char save = '\0';
      if (q)
	{
	  save = *q;
	  *q = '\0';
	}
      Tcl_DStringAppendElement (&cmd, p);
      if (q)
	*q = save;
      p = q + 1;
    }
  Tcl_DStringAppendElement (&cmd, cmdblk->name);
  Tcl_DStringEndSublist (&cmd);

  switch (cmdblk->var_type)
    {
    case var_string_noescape:
    case var_filename:
    case var_enum:
    case var_string:
      Tcl_DStringAppendElement (&cmd, (*(char **) cmdblk->var
				       ? *(char **) cmdblk->var
				       : "(null)"));
      break;

    case var_boolean:
      Tcl_DStringAppendElement (&cmd, (*(int *) cmdblk->var ? "1" : "0"));
      break;

    case var_uinteger:
    case var_zinteger:
      buffer = xstrprintf ("%u", *(unsigned int *) cmdblk->var);
      Tcl_DStringAppendElement (&cmd, buffer);
      break;

    case var_integer:
      buffer = xstrprintf ("%d", *(int *) cmdblk->var);
      Tcl_DStringAppendElement (&cmd, buffer);
      break;

    default:
      /* This case should already be trapped by the hook caller.  */
      Tcl_DStringAppendElement (&cmd, "error");
      break;
    }
@


1.59
log
@	* generic/gdbtk.c (tk_command): Use xfree instead of free.
	* generic/gdbtk-hooks.c (gdbtk_call_command): Remove unused
	cleanup.
	* generic/gdbtk-cmds.c (gdb_load_info): If bfd_check_format
	fails, run the cleanup.
@
text
@d197 1
a197 3
gdbtk_two_elem_cmd (cmd_name, argv1)
     char *cmd_name;
     char *argv1;
d365 1
a365 1
report_error ()
d519 1
a519 1
gdbtk_readline_end ()
d645 1
a645 1
gdbtk_post_add_symbol ()
d784 1
a784 1
gdbtk_error_begin ()
d817 1
a817 1
gdbtk_attach ()
d826 1
a826 1
gdbtk_detach ()
@


1.58
log
@	* generic/gdbtk-bp.c (breakpoint_notify): Handle tracepoints, too.
	(tracepoint_notify): Remove.
	(gdbtk_create_tracepoint): Remove.
	(gdbtk_delete_tracepoint): Remove.
	(gdbtk_modify_tracepoint): Remove.
	* generic/gdbtk-hooks.c: Remove deleted function extern declarations.
	(gdbtk_add_hooks): Remove tracepoint observers.
@
text
@d4 1
a4 1
   2008, 2010, 2011, 2012 Free Software Foundation, Inc.
a530 3
  struct cleanup *old_chain;

  old_chain = make_cleanup (null_cleanup, 0);
a544 2

  do_cleanups (old_chain);
@


1.57
log
@	* generic/gdbtk-hooks.c (gdbtk_memory_changed): Update for
	API changes.
@
text
@a73 3
extern void gdbtk_create_tracepoint (int);
extern void gdbtk_delete_tracepoint (int);
extern void gdbtk_modify_tracepoint (int);
a125 3
  observer_attach_tracepoint_created (gdbtk_create_tracepoint);
  observer_attach_tracepoint_modified (gdbtk_modify_tracepoint);
  observer_attach_tracepoint_deleted (gdbtk_delete_tracepoint);
@


1.56
log
@	* generic/gdbtk-hooks.c (gdbtk_memory_changed): Change LEN
	from int to ssize_t to match changes in the API.
	(x_event): Use set_quit_flag to set the quit_flag.
	* generic/gdbtk-cmds.c (gdb_stop): Likewise.
@
text
@d97 2
a98 2
static void gdbtk_memory_changed (CORE_ADDR addr, ssize_t len,
				  const bfd_byte *data);
d402 2
a403 1
gdbtk_memory_changed (CORE_ADDR addr, ssize_t len, const bfd_byte *data)
@


1.55
log
@2012-05-25  Roland Schwingel  <roland.schwingel@@onevision.com>

	* generic/gdbtk-bp.c (gdb_set_bp): Add new NULL param
	to call to create_breakpoint() due to changes in gdb.
	* generic/gdbtk-cmds.c (gdb_listfuncs): Iterator param
	in call to ALL_BLOCK_SYMBOLS() now is a pointer to
	struct block_iterator instead of struct dict_iterator.
	* generic/gdbtk-stack.c (gdb_block_vars,gdb_get_blocks)
	(gdb_get_vars_command): Likewise.
	* generic/gdbtk-hooks.c (gdbtk_annotate_signal): Change
	function calls: target_signal_to_name -> gdb_signal_to_name
	target_signal_to_string -> gdb_signal_to_string due to
	recent changes in gdb.
@
text
@d4 1
a4 1
   2008, 2010, 2011 Free Software Foundation, Inc.
d97 1
a97 1
static void gdbtk_memory_changed (CORE_ADDR addr, int len,
d402 1
a402 1
gdbtk_memory_changed (CORE_ADDR addr, int len, const bfd_byte *data)
d475 1
a475 1
	  quit_flag = 1;
@


1.54
log
@	From Patrick Monnerat  <pm@@datasphere.ch>:
	* generic/gdbtk-hooks.c (gdbtk_annotate_signal): Avoid
	dereferencing a null (i.e.: dead) process/thread.
@
text
@d821 2
a822 2
	     target_signal_to_name (tp->suspend.stop_signal),
	     target_signal_to_string (tp->suspend.stop_signal));
@


1.53
log
@   * generic/gdbtk.c (gdbtk_init,tk_command): Replace deprecated access
   to tcl interpreter result string with Tcl_GetStringResult().
   * generic/gdbtk-hooks.c (gdbtk_read,gdbtk_readline,gdbtk_load_hash)
   (gdbtk_query): Likewise.
   (gdbtk_read): Simplified error handling in case "gdbtk_console_read"
   fails. Some reformatting.
@
text
@d807 1
a807 1
  struct thread_info *tp = inferior_thread ();
d815 5
@


1.52
log
@	* generic/gdbtk-hooks.c (gdbtk_create_breakpoint): Change
	parameter from `int' to `struct breakpoint *'.
	(gdbtk_delete_breakpoint): Likewise.
	(gdbtk_modify_breakpoint): Likewise.
	* generic/gdbtk-bp.c (ALL_BREAKPOINTS): Define.
	(breakpoint_list): Remove.
	(breakpoint_list_size): Remove.
	(Gdbtk_Breakpoint_Init): Remove initialization of breakpoint_list.
	(gdb_find_bp_at_addr): Rewrite using ALL_BREAKPOINTS.
	(gdb_find_bp_at_line): Likewise.
	(gdb_get_breakpoint_info): Likewise.
	(gdb_get_breakpoint_list): Likewise.
	(gdbtk_create_breakpoint): Change parameter from `int' to
	`struct breakpoint *' and update function.
	(gdbtk_delete_breakpoint): Likewise.
	(gdbtk_modify_breakpoint): Likewise.
	(breakpoint_notify): Rewrite using ALL_BREAKPOINTS.
@
text
@d254 6
a259 4
	{
	  report_error ();
	  actual_len = 0;
	}
d261 12
a272 9
        actual_len = strlen (gdbtk_interp->result);

      /* Truncate the string if it is too big for the caller's buffer.  */
      if (actual_len >= sizeof_buf)
	actual_len = sizeof_buf - 1;
      
      memcpy (buf, gdbtk_interp->result, actual_len);
      buf[actual_len] = '\0';
      return actual_len;
d515 1
a515 1
      return (xstrdup (gdbtk_interp->result));
d519 1
a519 1
      gdbtk_fputs (gdbtk_interp->result, gdb_stdout);
d643 1
a643 1
  return atoi (gdbtk_interp->result);
d697 1
a697 1
  val = atol (gdbtk_interp->result);
@


1.51
log
@	* generic/gdbtk-hooks.c (gdbtk_annotate_signal): Update to reflect
	recnet thread_info changes.
@
text
@d4 1
a4 1
   2008, 2010 Free Software Foundation, Inc.
d71 3
a73 3
extern void gdbtk_create_breakpoint (int);
extern void gdbtk_delete_breakpoint (int);
extern void gdbtk_modify_breakpoint (int);
@


1.50
log
@gdb/ChangeLog:

2009-12-02  Paul Pluzhnikov  <ppluzhnikov@@google.com>

	* ada-lang.c (ada_value_assign): Use observer_notify_memory_changed.
	* valops.c (value_assign): Likewise.
	* defs.h (deprecated_memory_changed_hook): Remove.
	* top.c (deprecated_memory_changed_hook): Likewise.
	* interps.c (clear_interpreter_hooks): Adjust.

gdb/gdbtk/ChangeLog:

2009-12-02  Paul Pluzhnikov  <ppluzhnikov@@google.com>

	* generic/gdbtk-hooks.c (gdbtk_memory_changed): Adjust.
	(gdbtk_add_hooks): Adjust.

gdb/doc/ChangeLog:

2009-12-02  Paul Pluzhnikov  <ppluzhnikov@@google.com>

	* observer.texi: New memory_changed observer.
@
text
@d3 2
a4 2
   Copyright (C) 1994, 1995, 1996, 1997, 1998, 2000, 200, 2002, 2003, 2004, 2008
   Free Software Foundation, Inc.
d811 2
a812 2
	     target_signal_to_name (tp->stop_signal),
	     target_signal_to_string (tp->stop_signal));
@


1.49
log
@	* Adapt to target_wait_hook change.
	* generic/gdbtk-hooks.c (gdbtk_wait): Add `options' argument.
@
text
@d97 2
a98 1
static void gdbtk_memory_changed (CORE_ADDR addr, int len);
d133 1
a162 1
  deprecated_memory_changed_hook = gdbtk_memory_changed;
d397 1
a397 1
gdbtk_memory_changed (CORE_ADDR addr, int len)
@


1.48
log
@	ARI fixes: xvasprintf and strdup rules.
	* generic/gdbtk-cmds.c (gdbtk_set_result): Replace xvasprintf by
	xstrvprintf.
	* generic/gdbtk-hooks.c (gdbtk_warning): Ditto.
	(gdbtk_readline_begin, gdbtk_query): Ditto.
	* generic/gdbtk.c (TclDebug): Ditto.
	* generic/gdbtk-varobj.c (variable_create): Replace strdup by xstrdup.
@
text
@d86 1
a86 1
static ptid_t gdbtk_wait (ptid_t, struct target_waitstatus *);
d661 1
a661 1
gdbtk_wait (ptid_t ptid, struct target_waitstatus *ourstatus)
d665 1
a665 1
  ptid = target_wait (ptid, ourstatus);
@


1.47
log
@	ARI fix: "xasprintf" rule.
	* generic/gdbtk-bp.c (gdb_set_bp): Replace xasprintf by xstrprintf.
	(breakpoint_notify, tracepoint_notify):Ditto.
	* generic/gdbtk-cmds.c (gdbtk_load_source, gdbtk_load_asm):Ditto.
	* generic/gdbtk-hooks.c (gdbtk_ignorable_warning): Ditto.
	(gdbtk_set_hook, gdbtk_load_hash): Ditto.
	(gdbtk_selected_frame_changed, gdbtk_annotate_signal): Ditto.
	* generic/gdbtk-register.c (get_register_types):Ditto.
	* generic/gdbtk-stack.c (gdb_get_blocks): Ditto.
	(gdb_selected_block, gdb_selected_frame): Ditto.
	* generic/gdbtk.c (gdbtk_init, view_command): Ditto.
@
text
@d351 1
a351 1
  xvasprintf (&buf, warning, args);
d491 1
a491 1
  xvasprintf (&buf, format, args);
d687 1
a687 1
  xvasprintf (&buf, query, args);
@


1.46
log
@        From Pedro Alves  <pedro@@codesourcery.com>:
        * generic/gdbtk-cmds.c (gdb_cmd, gdb_immediate_command): Adjust to
        new bpstat_do_actions inferface.
        * generic/gdbtk-hooks.c: Include gdbthread.h.
        (gdbtk_annotate_signal): Get the stop_signal from the current
        thread.
@
text
@d382 1
a382 1
  xasprintf (&buf, "gdbtk_tcl_ignorable_warning {%s} {%s}", class, warning);
d602 1
a602 1
      xasprintf (&buffer, "%u", *(unsigned int *) cmdblk->var);
d607 1
a607 1
      xasprintf (&buffer, "%d", *(int *) cmdblk->var);
d632 1
a632 1
  xasprintf (&buf, "Download::download_hash %s %ld", section, num);
d756 1
a756 1
  xasprintf (&a, "%d", level);
d809 1
a809 1
  xasprintf (&buf, "gdbtk_signal %s {%s}",
@


1.45
log
@        * generic/gdbtk-cmds.c: Don't include itcl.h.
        * generic/gdbtk-hooks.c: Likewise.
        * generic/gdbtk.c: Include tcl.h and tk.h instead of itcl.h
        and itk.h.
        (gdbtk_init): Rewrite to accommodate using a system-provided
        Tcl, Tk, Itcl, Itk.
        (gdbtk_source_start_file) [!_WIN32]: Don't call error() when
        we fail to source the start file. Just dump the message to stderr.
        Throw an exception indicating the failure.
        * library/ehandler.itb (GDBEventHander::dispatch): "itcl_info" is
        deprecated: use "itcl::find objects" instead.
        * library/managedwin.itb (window_instance): Ditto.
        (restart): Ditto.
        (shutdown): Ditto.
        (_open): Ditto.
        (find): Ditto.
        * library/globalpref.itb (_build_win): Don't pass config arguments
        for libgui widgets to the constructor. Configure the widget after
        creation.
        * library/srcpref.itb (_build_win): Ditto.
        * library/main.tcl: Update Tcl, Tk, Itcl, Itk, and Iwidgets (just
        added to this loop) version requirements.
        No need to initialize Iwidgets separately.
        * plugins/Make-rules (TCLHDIR): Renamed to TCL_INCLUDES. Change
        all references.
        (TCL_BUILD_LIB_SPEC): Renamed to TCL_LIBRARY. Change all references.
        * plugins/acinclude.m4: Include the standard tcl.m4 instead
        of the sourceware-derived one.
        * plugins/configure.ac: Use Tcl's standard SC_* macros instead of
        the sourceware-derived CYG_AC_* macros.
        Add logic to deal with using a system-supplied Tcl/Tk.
        * plugins/configure: Regenerated.
        * plugins/Makefile.in: Regenerated.
@
text
@d36 1
d798 1
a798 1
gdbtk_annotate_signal ()
d801 1
d809 3
a811 2
  xasprintf (&buf, "gdbtk_signal %s {%s}", target_signal_to_name (stop_signal),
	     target_signal_to_string (stop_signal));
@


1.44
log
@gdb:
	* tui/tui-hooks.c: Include observer.h.
	(tui_event_default, tui_old_event_hooks, tui_event_hooks):
	Remove.
	(tui_bp_created_observer, tui_bp_deleted_observer,
	tui_bp_modified_observer): New globals.
	(tui_install_hooks): Use observers, not events.
	(tui_remove_hooks): Likewise.
	* mi/mi-cmd-break.c: Include observer.h, not gdb-events.h.
	(mi_breakpoint_observers_installed, mi_can_breakpoint_notify): New
	globals.
	(breakpoint_notify): Check mi_can_breakpoint_notify.
	(breakpoint_hooks): Remove.
	(mi_cmd_break_insert): Attach observers.  Don't use events.
	* tracepoint.c: Include observer.h, not gdb-events.h.
	(tracepoint_operation, trace_pass_command): Notify observer.
	* interps.c: Don't include gdb-events.h.
	(clear_interpreter_hooks): Don't call clear_gdb_event_hooks.
	* gdbarch.c: Rebuild.
	* gdbarch.sh: Emit include for observer.h, not gdb-events.h.
	(deprecated_current_gdbarch_select_hack): Notify observer.
	* breakpoint.h: Don't include gdb-events.h.
	* breakpoint.c: Don't include gdb-events.h.
	(condition_command): Notify observer.
	(commands_command): Likewise.
	(commands_from_control_command): Likewise.
	(mention, delete_breakpoint, set_ignore_count): Likewise.
	(disable_breakpoint, do_enable_breakpoint): Likewise.
	* Makefile.in (gdb_events_h): Remove.
	(breakpoint_h): Update.
	(COMMON_OBS): Remove gdb-events.o.
	(gdb-events.o): Remove.
	(breakpoint.o, gdbarch.o, interps.o, tracepoint.o, gdbtk-bp.o,
	gdbtk-hooks.o, mi-cmd-break.o, tui-hooks.o): Update.
	* gdb-events.c: Remove.
	* gdb-events.h: Remove.
	* gdb-events.sh: Remove.
gdb/doc:
	* observer.texi (GDB Observers): Document new observers:
	breakpoint_created, breakpoint_deleted, breakpoint_modified,
	tracepoint_created, tracepoint_deleted, tracepoint_modified,
	architecture_changed.
gdb/gdbtk:
	* generic/gdbtk-hooks.c: Include observer.h, not gdb-events.h.
	(gdbtk_add_hooks): Use observers, not events.
	(gdbtk_architecture_changed): Add argument, for observer.
	* generic/gdbtk-bp.c: Include observer.h.
	(gdb_set_bp): Notify observer.
	(gdb_set_bp_addr): Likewise.
@
text
@a45 1
#include <itcl.h>
@


1.43
log
@        * generic/gdbtk-stack.c (gdb_block_args): Remove deprecated values
        LOC_LOCAL_ARG, LOC_COMPUTED_ARG, LOC_REGPARM, LOC_BASEARG_ARG, and
        LOC_BASEARG.
        (gdb_get_blocks): Likewise.
        (gdb_get_vars_command): Likewise.
        Fix type-punned pointer error introduced on 03-07.

        * generic/gdbtk-cmds.c (gdbtk_load_asm): Use paddress instead
        of deprecated_print_address_numeric.
        (gdb_stop): Update use of target_stop.

        * generic/gdbtk.h (gdbtk_get_ptid): Declare new function.
        * generic/gdbtk-hooks.c (gdbtk_wait): Save inferior's ptid.
        (gdbtk_get_ptid): Define new function.
        * generic/gdbtk-varobj.c (variable_update): Update for recent
        varobj_update API change.
        * generic/gdbtk-wrapper.h (GDB_varobj_update): Likewise.
        * generic/gdbtk-wrapper.c (GDB_varobj_update): Likewise.
        (wrap_varobj_update): Likewise.

        * library/targetselection.itb (init_target_db): Initialize
        preferences here instead of ...
        (_init): ... here.
        (_init_prefs): Define gdb/load/default-portname, too.
@
text
@a31 1
#include "gdb-events.h"
d35 1
d78 1
a78 1
static void gdbtk_architecture_changed (void);
d124 8
a131 11
  static struct gdb_events handlers;

  /* Gdb event handlers */
  handlers.breakpoint_create = gdbtk_create_breakpoint;
  handlers.breakpoint_modify = gdbtk_modify_breakpoint;
  handlers.breakpoint_delete = gdbtk_delete_breakpoint;
  handlers.tracepoint_create = gdbtk_create_tracepoint;
  handlers.tracepoint_modify = gdbtk_modify_tracepoint;
  handlers.tracepoint_delete = gdbtk_delete_tracepoint;
  handlers.architecture_changed = gdbtk_architecture_changed;
  deprecated_set_gdb_event_hooks (&handlers);
d835 1
a835 1
gdbtk_architecture_changed (void)
@


1.42
log
@        From Dave Murphy  <davem@@devkitpro.org>:
        * gdbtk-cmds.c: Guard <sys/ioctl.h> with HAVE_SYS_IOCTL_H.
        * gdbtk-hooks.c: Ditto.
        * gdbtk.c: Ditto.
        * gdbtk-interp.c: Include windows.h under mingw32.
        (gdbtk_start_timer, gdbtk_stop_timer): Remove timer calls under mingw.
        (gdbtk_init): Include windows-specific commands under mingw without
        cygwin path commands.
        * library/download.itb (Download::download_it): Only use ide_cygwin_path
        on cygwin hosts.
        * library/interface.tcl (_open_file): Ditto.
        * library/prefs.tcl (pref_read): Ditto.
        * library/targetselection.itb (TargetSelection::default_port): Default
        to "/dev/com1" under cygwin and "COM1" under mingw.
        (TargetSelection::port_list): Use "/dev/com" under cygwin and
        "COM" under mingw.
@
text
@d3 1
a3 1
   Copyright (C) 1994, 1995, 1996, 1997, 1998, 2000, 200, 2002, 2003, 2004
d114 2
d670 1
d842 6
@


1.42.6.1
log
@gdb/insight for ARCompact (from Richard Stuckey)
@
text
@a78 3
// begin ARC
static void gdbtk_reg_architecture_changed (void);
// end ARC
a131 3
// begin ARC
  handlers.reg_architecture_changed = gdbtk_reg_architecture_changed;
// end ARC
a838 10


// begin ARC
/* Called from gdbarch_update_p whenever the register architecture changes. */
static void
gdbtk_reg_architecture_changed (void)
{
  Tcl_Eval (gdbtk_interp, "gdb_reg_arch_changed");
}
// end ARC
@


1.41
log
@	* generic/gdbtk.h:
	* generic/gdbtk.c:
	* generic/gdbtk-wrapper.h:
	* generic/gdbtk-wrapper.c:
	* generic/gdbtk-varobj.c:
	* generic/gdbtk-stack.c:
	* generic/gdbtk-register.c:
	* generic/gdbtk-main.c:
	* generic/gdbtk-interp.c:
	* generic/gdbtk-hooks.c:
	* generic/gdbtk-cmds.h:
	* generic/gdbtk-cmds.c:
	* generic/gdbtk-bp.c: Put (C) after Copyright.  Update the FSF
	address.
@
text
@d54 1
d56 1
@


1.40
log
@        From James Lemke  <jim@@wasabisystems.com>:
        * generic/gdbtk-hooks.c (gdbtk_fileopenin, gdbtk_read): New functions
        for target to read stdin from console window.
        * generic/gdbtk-interp.c (_stdtargin): Added.
        * generic/gdbtk.h (gdbtk_fileopenin): Add declaration.
@
text
@d3 2
a4 2
   Copyright 1994, 1995, 1996, 1997, 1998, 2000, 200, 2002, 2003, 2004 Free
   Software Foundation, Inc.
d22 2
a23 2
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */
@


1.39
log
@	Remove some warnings:
	* generic/gdbtk-hooks.c (gdbtk_pre_add_symbol): Cast `name'.
	* generic/gdbtk-cmds.c (gdbtk_dis_asm_read_memory): Remove.
@
text
@d108 1
d224 8
d239 36
@


1.38
log
@2004-06-26  Andrew Cagney  <cagney@@gnu.org>

	* generic/gdbtk-hooks.c (gdbtk_add_hooks): Call
	deprecated_set_gdb_event_hooks.
@
text
@d600 1
a600 1
  gdbtk_two_elem_cmd ("gdbtk_tcl_pre_add_symbol", name);
@


1.37
log
@2004-06-25  Andrew Cagney  <cagney@@gnu.org>

	* generic/gdbtk.h: "ui_loop_hook" was deprecated, update.
	* generic/gdbtk-hooks.c (gdbtk_add_hooks, x_event): Ditto.
	* generic/gdbtk-cmds.c: Ditto.
@
text
@d129 1
a129 1
  set_gdb_event_hooks (&handlers);
@


1.36
log
@2004-06-24  Andrew Cagney  <cagney@@gnu.org>

	* generic/gdbtk-hooks.c (gdbtk_add_hooks): Update references to
	pre_add_symbol_hook and post_add_symbol_hook, both deprecated.
	* library/interface.tcl (gdbtk_memory_changed): Update comments.
@
text
@d146 1
a146 1
  ui_loop_hook = x_event;
d357 3
a359 3
/* This hook is installed as the ui_loop_hook, which is used in several
 * places to keep the gui alive (x_event runs gdbtk's event loop). Users
 * include:
d369 5
a373 5
 * rely on ui_loop_hook (x_event) to keep us going. If the user
 * requests a detach (as a result of pressing the stop button -- see
 * comments before gdb_stop in gdbtk-cmds.c), it sets the global
 * GDBTK_FORCE_DETACH, which is the value that x_event returns to
 * it's caller. It is up to the caller of x_event to act on this
d381 3
a383 2
 * For native windows (and a few other targets, like the v850 ICE),
 * we rely on the target_wait loops to call ui_loop_hook to keep us alive. */
@


1.35
log
@2004-06-24  Andrew Cagney  <cagney@@gnu.org>

	* generic/gdbtk-hooks.c (ui_loop_hook, pre_add_symbol_hook)
	(post_add_symbol_hook, selected_frame_level_changed_hook): Delete
	extern declarations.
@
text
@d147 2
a148 2
  pre_add_symbol_hook = gdbtk_pre_add_symbol;
  post_add_symbol_hook = gdbtk_post_add_symbol;
@


1.34
log
@NOTE: This needs fixing. Shouldn't be difficult, but it will be tedious.
        * generic/gdbtk-hooks.c (gdbtk_add_hooks): "Update" deprecated hooks.
        "Houston... We have a problem."
        * generic/gdbtk-interp.c (gdbtk_interpreter_resume): Likewise.
        * generic/gdbtk.c (gdbtk_init_1): Likewise.
@
text
@a75 5
extern void (*pre_add_symbol_hook) (const char *);
extern void (*post_add_symbol_hook) (void);
extern void (*selected_frame_level_changed_hook) (int);
extern int (*ui_loop_hook) (int);

@


1.33
log
@2004-04-19  Roland McGrath  <roland@@redhat.com>

	* generic/gdbtk-hooks.c: Update gdbtk_pre_add_symbol forward decl to
	match defn type change.
@
text
@d3 1
a3 1
   Copyright 1994, 1995, 1996, 1997, 1998, 2000, 200, 2002, 2003 Free
d137 13
a149 13
  call_command_hook = gdbtk_call_command;
  set_hook = gdbtk_set_hook;
  readline_begin_hook = gdbtk_readline_begin;
  readline_hook = gdbtk_readline;
  readline_end_hook = gdbtk_readline_end;

  print_frame_info_listing_hook = gdbtk_print_frame_info;
  query_hook = gdbtk_query;
  warning_hook = gdbtk_warning;

  interactive_hook = gdbtk_interactive;
  target_wait_hook = gdbtk_wait;
  ui_load_progress_hook = gdbtk_load_hash;
d154 1
a154 1
  file_changed_hook = gdbtk_file_changed;
d157 2
a158 2
  trace_find_hook = gdbtk_trace_find;
  trace_start_stop_hook = gdbtk_trace_start_stop;
d160 2
a161 2
  attach_hook            = gdbtk_attach;
  detach_hook            = gdbtk_detach;
d163 4
a166 4
  register_changed_hook = gdbtk_register_changed;
  memory_changed_hook = gdbtk_memory_changed;
  selected_frame_level_changed_hook = gdbtk_selected_frame_changed;
  context_hook = gdbtk_context_change;
d168 1
a168 1
  error_begin_hook = gdbtk_error_begin;
d170 2
a171 2
  annotate_signal_hook = gdbtk_annotate_signal;
  annotate_signalled_hook = gdbtk_annotate_signal;
@


1.32
log
@2004-04-08  Roland McGrath  <roland@@redhat.com>

	* generic/gdbtk-hooks.c (gdbtk_pre_add_symbol): Add const to arg type.
	(pre_add_symbol): Likewise in extern decl.
@
text
@d96 1
a96 1
static void gdbtk_pre_add_symbol (char *);
@


1.31
log
@2003-02-12  Andrew Cagney  <ac131313@@redhat.com>

	* generic/gdbtk-hooks.c (tk_command_loop): Move function ...
	* generic/gdbtk.c (gdbtk_command_loop): ... to here.  Add data
	parameter.
	* generic/gdbtk.c: Include "interps.h".
	(_initialize_gdbtk): Register the "gdbtk" interpreter.  Don't set
	init_ui_hook.
	(gdbtk_init): Change parameter to a void data pointer.
	(tk_init, gdbtk_resume, gdbtk_suspend): New functions.
	(gdbtk_prompt_p, gdbtk_exec): New functions.
	* generic/gdbtk-hooks.c (gdbtk_add_hooks): Don't set
	command_loop_hook.  Update copyright.
@
text
@d76 1
a76 1
extern void (*pre_add_symbol_hook) (char *);
d161 1
a161 1
  detach_hook            = gdbtk_detach; 
d260 1
a260 1
  
d344 1
a344 1
  free(buf); 
d579 1
a579 1
   
d593 2
a594 2
  free(buf); 
   
d602 1
a602 1
gdbtk_pre_add_symbol (char *name)
d633 1
a633 1
 * "gdbtk_tcl_query".  
d769 1
a769 1
  free(buf);  
@


1.30
log
@2003-02-10  Andrew Cagney  <ac131313@@redhat.com>

	* generic/gdbtk-varobj.c (gdb_variable_command): Ditto for
	`commands'.
	(variable_type): Ditto for `first'.
	(variable_obj_command): Ditto.
	(variable_create): Ditto for create_options.
	(variable_type): Ditto for `last'.  Use `string' and not `first'
	when modifying the buffer.
	(struct disassembly_client_data ): Ditto for `asm_argv'
	* generic/gdbtk-register.c (gdb_register_info): Ditto for
	`commands'.
	* generic/gdbtk-hooks.c (tk_command_loop): Ditto for `msg'.
	* generic/gdbtk-cmds.c (gdb_search): Ditto for `switches'.
	(gdbtk_load_source): Ditto for `text_argv'.
	(struct disassembly_client_data ): Ditto for `source_argv'.
	(gdbtk_load_asm): Ditto for `text_argv'.
	(struct disassembly_client_data ): Ditto for `asm_argv'
	(gdb_loadfile): Ditto for `text_argv'.
	* generic/gdbtk.c (TclDebug): Make `v' a constant pointer.
	(gdbtk_init): Ditto for `old_chain', `src_path', `msg', and
	`lib_path'.
@
text
@d2 3
a4 2
   Copyright 1994, 1995, 1996, 1997, 1998, 2000, 200, 2002
   Free Software Foundation, Inc.
a87 1
static void tk_command_loop (void);
a136 1
  command_loop_hook = tk_command_loop;
a360 34

/* This function is called instead of gdb's internal command loop.  This is the
   last chance to do anything before entering the main Tk event loop. 
   At the end of the command, we enter the main loop. */

static void
tk_command_loop ()
{
  extern FILE *instream;

  /* We no longer want to use stdin as the command input stream */
  instream = NULL;

  if (Tcl_Eval (gdbtk_interp, "gdbtk_tcl_preloop") != TCL_OK)
    {
      const char *msg;

      /* Force errorInfo to be set up propertly.  */
      Tcl_AddErrorInfo (gdbtk_interp, "");

      msg = Tcl_GetVar (gdbtk_interp, "errorInfo", TCL_GLOBAL_ONLY);
#ifdef _WIN32
      MessageBox (NULL, msg, NULL, MB_OK | MB_ICONERROR | MB_TASKMODAL);
#else
      fputs_unfiltered (msg, gdb_stderr);
#endif
    }

#ifdef _WIN32
  close_bfds ();
#endif

  Tk_MainLoop ();
}
@


1.29
log
@        * generic/gdbtk-hooks.c: Include tcl.h and tk.h to pull
        in declarations for some Tk functions used in this file.
        * generic/gdbtk-cmds.c: Likewise.
@
text
@d377 1
a377 1
      char *msg;
@


1.28
log
@2002-11-27  Martin M. Hunt  <hunt@@redhat.com>

	* generic/gdbtk.c (gdbtk_init): Don't call Tix_Init.
	Don't include tix.h

	* generic/gdbtk-hooks.c: Don't include tix.h.

	* generic/gdbtkj-cmds.c: Don't include tix.h.
@
text
@d46 2
@


1.27
log
@        * generic/gdbtk-hooks.c (gdbtk_call_command): Make a null
        cleanup and run it after every issued gdb command. Apparently
        some commands depend on this. [This should really be part of
        main gdb...]
@
text
@a45 1
#include <tix.h>
@


1.26
log
@        * generic/gdbtk-hooks.c (gdbtk_add_hooks): Add gdbtk_annotate_signal
        as annotate_signalled_hook.
@
text
@d522 3
d539 2
@


1.25
log
@2002-07-03  Martin M. Hunt  <hunt@@redhat.com>

	* generic/gdbtk-hooks.c (gdbtk_call_command): Use cmd_func().
@
text
@d171 1
@


1.24
log
@        * generic/gdbtk-stack.c (Gdbtk_Stack_Init): Don't link
        selected_frame_level directly.
        * generic/gdbtk-hooks.c (gdbtk_selected_frame_changed): Set
        the global "gdb_selected_frame_level" directly.
@
text
@d528 1
a528 1
      (*cmdblk->function.cfunc) (arg, from_tty);
d534 1
a534 1
    (*cmdblk->function.cfunc) (arg, from_tty);
@


1.23
log
@2002-03-25  Elena Zannoni  <ezannoni@@redhat.com>

        * generic/gdbtk-hooks.c: Include cli/cli-decode.h for
        cmd_list_element.
@
text
@d739 9
a747 1
  Tcl_UpdateLinkedVar (gdbtk_interp, "gdb_selected_frame_level");
@


1.22
log
@* generic/gdbtk.c (HAS_STDARG): Define.
* generic/gdbtk-cmds.c (HAS_STDARG): Likewise.
* generic/gdbtk-hooks.c (HAS_STDARG): Likewise.
@
text
@d34 1
@


1.21
log
@2002-02-13  Martin M. Hunt  <hunt@@redhat.com>

	* generic/gdbtk-hooks.c (gdbtk_print_frame_info): Don't
	set GDB globals current_source_symtab and current_source_line.
	Let GDB do it.
@
text
@d40 4
@


1.21.2.1
log
@* generic/gdbtk.c (HAS_STDARG): Define.
* generic/gdbtk-cmds.c (HAS_STDARG): Likewise.
* generic/gdbtk-hooks.c (HAS_STDARG): Likewise.
@
text
@a39 4
/* tcl header files includes varargs.h unless HAS_STDARG is defined,
   but gdb uses stdarg.h, so make sure HAS_STDARG is defined.  */
#define HAS_STDARG 1

@


1.20
log
@2002-02-07  Martin M. Hunt  <hunt@@redhat.com>

	* generic/gdbtk.c, generic/gdbtk-bp.c, generic/gdbtk-cmds.c,
	generic/gdbtk-hooks.c, generic/gdbtk-stack.c: Cleanup includes.
@
text
@a679 2
  current_source_symtab = s;
  current_source_line = line;
@


1.19
log
@2002-02-06  Martin M. Hunt  <hunt@@redhat.com>

	* generic/gdbtk.c, generic/gdbtk-bp.c, generic/gdbtk-cmds.c,
	generic/gdbtk-hooks.c, generic/gdbtk-register.c,
	generic/gdbtk-stack.c, generic/gdbtk-varobj.c,
	generic/gdbtk-wrapper.c: Cleanup. Fix indentation. Fix
	function declarations. Remove unused variables. Add 2002
	copyrights.
@
text
@a24 1
#include "symtab.h"
a25 2
#include "command.h"
#include "bfd.h"
a27 1
#include "target.h"
d32 2
a39 4
#include <sys/stat.h>

#include <tcl.h>
#include <tk.h>
a44 1
#include <stdarg.h>
a46 1
#include "top.h"
d48 2
a51 1
#include <stdio.h>
a53 2
#include "annotate.h"
#include <sys/time.h>
@


1.18
log
@	From Ian Roxborough  <irox@@redhat.com>
	* generic/gdbtk-hooks.c (x_event): Deal with Tcl API insanity
	for Tcl_ObjGetVar2 or Tcl_GetObjVar2.
	(gdbtk_trace_find): Likewise for Tcl_GlobalEvalObj
	or Tcl_EvalObj (TCL_EVAL_GLOBAL).
@
text
@d2 1
a2 1
   Copyright 1994, 1995, 1996, 1997, 1998, 2000, 2001 
d192 1
a192 1
 */
d310 1
a310 3
gdbtk_warning (warning, args)
     const char *warning;
     va_list args;
a312 1

a314 1

d341 1
a341 3
gdbtk_ignorable_warning (class, warning)
     const char *class;
     const char *warning;
d351 1
a351 2
gdbtk_register_changed (regno)
     int regno;
d358 1
a358 3
gdbtk_memory_changed (addr, len)
     CORE_ADDR addr;
     int len;
d426 1
a426 2
x_event (signo)
     int signo;
d492 1
a492 2
gdbtk_readline (prompt)
     char *prompt;
d522 2
a523 4
gdbtk_call_command (cmdblk, arg, from_tty)
     struct cmd_list_element *cmdblk;
     char *arg;
     int from_tty;
d614 1
a614 1
       free(buffer);
d634 1
a634 2
gdbtk_pre_add_symbol (name)
     char *name;
d651 1
a651 3
gdbtk_wait (ptid, ourstatus)
     ptid_t ptid;
     struct target_waitstatus *ourstatus;
d671 1
a671 3
gdbtk_query (query, args)
     const char *query;
     va_list args;
d686 2
a687 5
gdbtk_print_frame_info (s, line, stopline, noerror)
     struct symtab *s;
     int line;
     int stopline;
     int noerror;
d704 1
a704 3
gdbtk_trace_find (arg, from_tty)
     char *arg;
     int from_tty;
d710 1
a710 1
			Tcl_NewStringObj ("gdbtk_tcl_trace_find_hook", -1));
d732 1
a732 3
gdbtk_trace_start_stop (start, from_tty)
     int start;
     int from_tty;
d743 1
a743 2
gdbtk_selected_frame_changed (level)
     int level;
d751 1
a751 2
gdbtk_context_change (num)
     int num;
d758 1
a758 2
gdbtk_file_changed (filename)
     char *filename;
d765 1
a765 2
gdbtk_exec_file_display (filename)
     char *filename;
d792 1
a792 1
	   target_signal_to_string (stop_signal));
@


1.17
log
@	* generic/gdbtk-hooks.c (gdbtk_add_hooks): Register
	architecture_changed event handler.
	(gdbtk_architecture_changed): New function.
	* library/gdbevent.ith (class ArchChangdEvent): New event.
	* library/ehandler.ith (arch_changed): New method. Handler
	for ArchChangedEvents.
	* library/interface.tcl (gdbtk_tcl_architecture_changed): New
	proc to handle architecture change events.
@
text
@d465 1
a465 1
#if TCL_MAJOR_VERSION == 8 && TCL_MINOR_VERSION < 1
d736 1
a736 1
#if TCL_MAJOR_VERSION == 8 && TCL_MINOR_VERSION < 1
@


1.16
log
@	* generic/gdbtk-bp.c (gdbtk_tracepoint_create): Change
	parameter to int to match breakpoint notifications.
	(gdbtk_tracepoint_modify): Ditto.
	(gdbtk_tracepoint_delete): Ditto.
	(tracepoint_notify): Ditto.
	* generic/gdbtk-hooks.c (gdbtk_add_hooks): Remove
	tracepoint hooks and install tracepoint event handlers.
@
text
@d83 1
d136 1
d845 6
@


1.15
log
@	Some "-Wall" cleanups.

	* generic/gdbtk-hooks.c (x_event): Remove unused variable "count".
	(tracepoint_notify): Remove superfluous declaration. This funtion
	was moved to gdbtk-bp.c.

	* generic/gdbtk-bp.c (gdb_find_bp_at_addr): Remove unused variable
	"b".
	(gdb_set_bp): Remove unused variable "cmd".
	(gdb_set_bp_addr): Remove unused variables "cmd" and "filename".

	* generic/gdbtk.c (gdbtk_init): Remove unused variables
	"auto_path_name", "auto_path_elem", and "found_main".
@
text
@d74 3
a76 3
extern void gdbtk_create_tracepoint (struct tracepoint *);
extern void gdbtk_delete_tracepoint (struct tracepoint *);
extern void gdbtk_modify_tracepoint (struct tracepoint *);
d132 3
a158 3
  create_tracepoint_hook = gdbtk_create_tracepoint;
  delete_tracepoint_hook = gdbtk_delete_tracepoint;
  modify_tracepoint_hook = gdbtk_modify_tracepoint;
@


1.14
log
@It appears that I forgot to check this in!

	* generic/gdbtk-hooks.c (gdbtk_wait): Change integer pid
	argument to match gdb's new "ptid_t" pids.
@
text
@a102 1
static void tracepoint_notify (struct tracepoint *, const char *);
a437 1
  static int count = 0;
@


1.13
log
@	* generic/gdbtk-bp.c (breakpoint_list, breakpoint_list_size): New
	variables. Gdb is forcing us to maintain our own breakpoint
	database.
	(Gdbtk_Breakpoint_Init): Initialize our breakpoint database.
	(gdb_find_bp_at_addr): Use our breakpoint database.
	(gdb_find_bp_at_line): Ditto.
	(gdb_get_breakpoint_list): Ditto.
	(gdb_get_breakpoint_info): Remove deleted breakpoint hack.
	(gdbtk_create_breakpoint): Moved here from gdbtk-hooks.c.
	Add breakpoint to our breakpoint database.
	(gdbtk_modify_breakpoint): Ditto the move.
	(gdbtk_delete_breakpoint): Ditto the move.
	Remove breakpoint from our database.
	(gdb_get_tracepoint_info): Remove delete tracepoint hack.
	It's not needed for tracepoints: they were implemented properly.
	(gdbtk_create_tracepoint): Moved here from gdbtk-hooks.c.
	(gdbtk_modify_tracepoint): Ditto.
	(gdbtk_delete_tracepoint): Ditto.
	* generic/gdbtk-hooks.c: Include "gdb-events.h".
	(gdbtk_create_breakpoint): Moved to gdbtk-bp.c
	(gdbtk_modify_breakpoint): Ditto.
	(gdbtk_delete_breakpoint): Ditto.
	(breakpoint_notify): Ditto.
	(gdbtk_create_tracepoint): Ditto.
	(gdbtk_modify_tracepoint): Ditto.
	(gdbtk_delete_tracepoint): Ditto.
	(tracepoint_notify): Ditto.
	(report_error): No longer static.
	(gdbtk_add_hooks): Create our own event handler
	vector and register breakpoint_create, breakpoint_modify,
	and breakpoint_delete handlers in gdbtk-bp.c.
@
text
@d91 1
a91 1
static int gdbtk_wait (int, struct target_waitstatus *);
d664 3
a666 3
static int
gdbtk_wait (pid, ourstatus)
     int pid;
d671 1
a671 1
  pid = target_wait (pid, ourstatus);
d674 1
a674 1
  return pid;
@


1.12
log
@	* generic/gdbtk-cmds.c (gdb_get_breakpoint_info): If unable
	to find the requested breakpoint for lookup, check if
	it is about to be deleted and return information about
	that breakpoint.
	(gdb_get_tracepoint_info): Ditto for tracepoints.
	* generic/gdbtk-hooks.c (gdbtk_deleted_bp): New global.
	(gdbtk_delete_breakpoint): Remember the deleted breakpoint
	for gdb_get_breakpoint_info, in case it is called during
	the event notification.
	(gdbtk_delete_tracepoints): Ditto for tracepoints.
@
text
@d35 1
d70 7
a76 13
/* Set/cleared by gdbtk_delete_breakpoint/tracepoint. Unfortunately,
   clear_command (in breakpoint.c) takes the breakpoint off of the
   breakpoint_chain before deleting the breakpoint. The BreakpointEvent
   which is created as a result of any breakpoint/tracepoint event
   calls gdb_get_breakpoint_info will, therefore, not find a breakpoint
   about which to return information. So we keep a handle on the deleted
   breakpoint when we're deleting it, and teach gdb_get_breakpoint_info
   to check for this variable whenever a breakpoint lookup fails.

   Why not just change BreakpointEvent? Good question. Answer: I refuse
   to allow BreakpointEvents to be all public variables. They are not.
   They ONLY depend on the breakpoint number (gdb's handle for them). */
void *gdbtk_deleted_bp = NULL;
a82 3
static void gdbtk_create_tracepoint (struct tracepoint *);
static void gdbtk_delete_tracepoint (struct tracepoint *);
static void gdbtk_modify_tracepoint (struct tracepoint *);
a84 3
static void gdbtk_create_breakpoint (struct breakpoint *);
static void gdbtk_delete_breakpoint (struct breakpoint *);
static void gdbtk_modify_breakpoint (struct breakpoint *);
d107 1
a107 1
static void report_error (void);
a117 1
static void breakpoint_notify (struct breakpoint *, const char *);
d127 9
a146 4
  create_breakpoint_hook = gdbtk_create_breakpoint;
  delete_breakpoint_hook = gdbtk_delete_breakpoint;
  modify_breakpoint_hook = gdbtk_modify_breakpoint;

d331 1
a331 1
static void
a630 55
/* The next three functions use breakpoint_notify to allow the GUI 
 * to handle creating, deleting and modifying breakpoints.  These three
 * functions are put into the appropriate gdb hooks in gdbtk_init.
 */

static void
gdbtk_create_breakpoint (b)
     struct breakpoint *b;
{
  breakpoint_notify (b, "create");
}

static void
gdbtk_delete_breakpoint (b)
     struct breakpoint *b;
{
  /* Hack. See comments near top of this file. */
  gdbtk_deleted_bp = b;
  breakpoint_notify (b, "delete");
  gdbtk_deleted_bp = NULL;
}

static void
gdbtk_modify_breakpoint (b)
     struct breakpoint *b;
{
  breakpoint_notify (b, "modify");
}

/* This is the generic function for handling changes in
 * a breakpoint.  It routes the information to the Tcl
 * command "gdbtk_tcl_breakpoint" in the form:
 *   gdbtk_tcl_breakpoint action b_number b_address b_line b_file
 * On error, the error string is written to gdb_stdout.
 */

static void
breakpoint_notify (b, action)
     struct breakpoint *b;
     const char *action;
{
  char *buf;

  if (b->type != bp_breakpoint)
    return;

  /* We ensure that ACTION contains no special Tcl characters, so we
     can do this.  */
  xasprintf (&buf, "gdbtk_tcl_breakpoint %s %d", action, b->number);

  if (Tcl_Eval (gdbtk_interp, buf) != TCL_OK)
    report_error ();
  free(buf); 
}

a711 40
}

static void
gdbtk_create_tracepoint (tp)
     struct tracepoint *tp;
{
  tracepoint_notify (tp, "create");
}

static void
gdbtk_delete_tracepoint (tp)
     struct tracepoint *tp;
{
  /* Hack. See comments near top of this file. */
  gdbtk_deleted_bp = tp;
  tracepoint_notify (tp, "delete");
  gdbtk_deleted_bp = NULL;
}

static void
gdbtk_modify_tracepoint (tp)
     struct tracepoint *tp;
{
  tracepoint_notify (tp, "modify");
}

static void
tracepoint_notify (tp, action)
     struct tracepoint *tp;
     const char *action;
{
  char *buf;

  /* We ensure that ACTION contains no special Tcl characters, so we
     can do this.  */
  xasprintf (&buf, "gdbtk_tcl_tracepoint %s %d", action, tp->number);

  if (Tcl_Eval (gdbtk_interp, buf) != TCL_OK)
    report_error ();
  free(buf); 
@


1.11
log
@Event model revamp for "gdb_set_hook".

	* library/interface.tcl (gdbtk_tcl_set_variable): New proc.
	* library/gdbevent.ith (SetVariableEvent): New event.
	* library/gdbevent.itb (SetVariableEvent::get): Override
	GDBEvent::get.
	* library/ehandler.ith (set_variable): New public method.
	* generic/gdbtk-hooks.c (gdbtk_set_hook): Let inteface function
	gdbtk_tcl_set_variable do all the work.
	* tclIndex: Regenerated.
@
text
@d69 14
d654 2
d657 1
d787 2
d790 1
@


1.10
log
@Breakpoint/tracepoint event notification using new event model...

	* generic/gdbtk-cmds.c (gdb_set_bp): Use create_breakpoint_hook
	to notify gui of changes.
	(gdb_set_bp_addr): Ditto.
	(gdb_get_breakpoint_info): Update comments to match reality.
	* generic/gdbtk-hooks.c (breakpoint_notify): Only pass the
	breakpoint number which generated the event.
	(tracepoint_notify): Ditto for tracepoints.
	* library/interface.tcl (gdb_breakpoint_change_hook): Mark
	as deprecated and comment out definition.
	(gdbtk_tcl_breakpoint): Use new GDBEvent event "breakpoint"
	to notify rest of UI about breakpoint event.
	(gdbtk_tcl_tracepoint): Ditto for "tracepoint" event.
	* library/bpwin.ith (update): Renamed to "breakpoint".
	(breakpoint): New public method.
	(tracepoint): New public method.
	(bp_add): Take event as argument instead of number.
	(bp_modify): Ditto.
	(bp_delete): Ditto.
	* library/bpwin.itb (constructor): Remove
	gdb_breakpoint_changed_hook.
	(destructor): Ditto.
	(build_win): Insert any existing breakpoints by
	making BreakpointEvents for them.
	(breakpoint): Renamed from "update" to handle
	breakpoint events.
	Remove code to deal with tracepoints.
	(tracepoint): New method to handle tracepoint
	events.
	(bp_add): Deal with breakpoint events, not breakpoint
	numbers.
	(bp_modify): Ditto.
	(bp_delete): Ditto.
	* library/srctextwin.ith: Inherit from GDBWin.
	(breakpoint): New public method.
	(tracepoint): New public method.
	* library/srctextwin.itb (constructor): Remove
	gdb_breakpoint_changed_hook.
	(destructor): Ditto.
	(breakpoint): New method to handle breakpoint event.
	(tracepoint): New method to handle tracepoint event.
	(do_bp): Handle duplicate breakpoints for asm, too.
	(remove_bp_at_line): Delete breakpoints by number, not
	linespec. clear_command removes breakpoints from the
	breakpoint_chain BEFORE deleting the breakpoint. delete_command
	does this afterward (so we can call gdb_get_breakpoint_info on
	an about-to-be-deleted breakpoint).
@
text
@d559 1
a559 2
  Tcl_DStringAppendElement (&cmd, "run_hooks");
  Tcl_DStringAppendElement (&cmd, "gdb_set_hook");
@


1.9
log
@2001-04-04  Martin M. Hunt  <hunt@@redhat.com>

	* generic/gdbtk-hooks.c (gdbtk_fileopen): New function.
	Initialize ui_file stuff for gdbtk.
	(gdbtk_fputs): Don't print if gdbtk_disable_fputs. Send
	stdlog and stdtarg to their handler functions.

	* generic/gdbtk.c (Gdbtk_Init): Don't set gdb_stdlog
	and gdb_stdtarg to gdb_stdout,
	(gdbtk_init): Unset gdbtk_disable_fputs
	when ready to accept output from gdb. Remove references to
	fputs_unfiltered_hook.

	* generic/gdbtk.h: Declare new flag gdbtk_disable_fputs.

	* generic/gdbtk-cmds.c (gdb_restore_fputs): Instead of setting
	fputs_unfiltered_hook, set the new flag gdbtk_disable_fputs.

	* library/prefs.tcl (pref_set_defaults): Add defaults
	for log_fg and target_fg.

	* library/interface.tcl (gdbtk_tcl_fputs_error): Use
	err_tag.
	(gdbtk_tcl_fputs_log): New function. Write log messages
	to console.
	(gdbtk_tcl_fputs_target): New function.	Write target
	IO to console.

	* library/console.ith (einsert): Add tag parameter.

	* library/console.itb (_build_win): Add new tags for log
	and target IO.
	(einsert): Add tag parameter.
@
text
@a663 3
  int v;
  struct symtab_and_line sal;
  char *filename;
d670 1
a670 8
  sal = find_pc_line (b->address, 0);
  filename = symtab_to_filename (sal.symtab);
  if (filename == NULL)
    filename = "";

  xasprintf (&buf, "gdbtk_tcl_breakpoint %s %d 0x%lx %d {%s} {%s} %d %d",
	   action, b->number, (long) b->address, b->line_number, filename,
	   bpdisp[b->disposition], b->enable, b->thread);
a786 3
  int v;
  struct symtab_and_line sal;
  char *filename;
d790 1
a790 7
  sal = find_pc_line (tp->address, 0);

  filename = symtab_to_filename (sal.symtab);
  if (filename == NULL)
    filename = "N/A";
  xasprintf (&buf, "gdbtk_tcl_tracepoint %s %d 0x%lx %d {%s} %d", action, tp->number,
	   (long) tp->address, sal.line, filename, tp->pass_count);
@


1.8
log
@2000-10-23  Fernando Nasser  <fnasser@@redhat.com>

	From 2000-10-19  Steven Johnson  <sbjohnson@@ozemail.com.au>
        Note: The original patch used asprintf/vasprintf.  I changed it to
	use the new xasprintf/xvasprintf gdb functions.
        * gdbtk.c (TclDebug, gdbtk_init): Replaced the vast majority of
	sprintf/vsprintf calls with asprintf and vasprintf respectively.
	Should prevent any possible buffer overruns possible with
	fixed size sprintf buffers. Specifically fixes a problem with long
	filenames and clearing breakpoints overflowing their buffers when
	using sprintf, causing a segfault. Generically should also prevent
	any other similar problems from occuring.
        * gdbtk-cmds.c (sprintf_append_element_to_obj, get_pc_register,
	gdb_get_tracepoint_info, gdb_load_disassembly, gdbtk_load_source,
	gdbtk_load_asm, gdb_set_bp, gdb_set_bp_addr, gdb_get_breakpoint_info,
	gdb_selected_frame, gdb_selected_block, gdb_get_blocks): Ditto.
        * gdbtk-hooks.c (gdbtk_warning, gdbtk_ignorable_warning,
	gdbtk_readline_begin, gdbtk_set_hook, breakpoint_notify,
	gdbtk_query, tracepoint_notify, gdbtk_error_begin,
	gdbtk_annotate_signal): Ditto.
@
text
@d1 3
a3 2
/* Startup code for gdbtk.
   Copyright 1994-1998, 2000 Free Software Foundation, Inc.
a196 2


a198 1

d222 8
d251 1
a251 3
gdbtk_fputs (ptr, stream)
     const char *ptr;
     struct ui_file *stream;
d253 3
d258 5
a262 1
  if (result_ptr != NULL)
@


1.7
log
@2000-10-23  Fernando Nasser  <fnasser@@totem.to.cygnus.com>

        * gdbtk-hooks.c (x_events): Only process events if the target is
        running.
@
text
@d295 1
a295 1
  char buf[200];
d297 1
a297 1
  vsprintf (buf, warning, args);
d299 2
d330 2
a331 2
  char buf[512];
  sprintf (buf, "gdbtk_tcl_ignorable_warning {%s} {%s}", class, warning);
d334 1
d475 1
a475 1
  char buf[200];
d478 1
a478 1
  vsprintf (buf, format, args);
d480 1
d545 1
a545 1
  char buffer[30];
d557 1
a557 1
      char save;
d588 1
a588 1
      sprintf (buffer, "%u", *(unsigned int *) cmdblk->var);
d593 1
a593 1
      sprintf (buffer, "%d", *(int *) cmdblk->var);
d607 5
d652 1
a652 1
  char buf[256];
d667 1
a667 1
  sprintf (buf, "gdbtk_tcl_breakpoint %s %d 0x%lx %d {%s} {%s} %d %d",
d673 1
d679 2
a680 2
  char buf[128];
  sprintf (buf, "Download::download_hash %s %ld", section, num);
d683 2
d736 1
a736 1
  char buf[200];
d739 1
a739 1
  vsprintf (buf, query, args);
d741 1
d785 1
a785 1
  char buf[256];
d797 1
a797 1
  sprintf (buf, "gdbtk_tcl_tracepoint %s %d 0x%lx %d {%s} %d", action, tp->number,
d802 1
d903 1
a903 1
  char buf[128];
d911 1
a911 1
  sprintf (buf, "gdbtk_signal %s {%s}", target_signal_to_name (stop_signal),
d915 1
@


1.6
log
@PARAMS elimination.
@
text
@d419 2
d422 8
@


1.5
log
@PARAMS elimination.
@
text
@d68 4
a71 4
extern void (*pre_add_symbol_hook) PARAMS ((char *));
extern void (*post_add_symbol_hook) PARAMS ((void));
extern void (*selected_frame_level_changed_hook) PARAMS ((int));
extern int (*ui_loop_hook) PARAMS ((int));
@


1.4
log
@        * ChangeLog-gdbtk: Renamed to ChangeLog
        * ChangeLog: New file
        * gdbtk-cmds.c, gdbtk-hooks.c, gdbtk-variable.c, gdbtk-varobj.c,
        gdbtk-wrapper.h, gdbtk-wrapper.c, gdbtk.h, gdbtk.c: No need for
        changelog-default-name hint for Emacs now
@
text
@d73 19
a91 19
static void gdbtk_create_tracepoint PARAMS ((struct tracepoint *));
static void gdbtk_delete_tracepoint PARAMS ((struct tracepoint *));
static void gdbtk_modify_tracepoint PARAMS ((struct tracepoint *));
static void gdbtk_trace_find PARAMS ((char *arg, int from_tty));
static void gdbtk_trace_start_stop PARAMS ((int, int));
static void gdbtk_create_breakpoint PARAMS ((struct breakpoint *));
static void gdbtk_delete_breakpoint PARAMS ((struct breakpoint *));
static void gdbtk_modify_breakpoint PARAMS ((struct breakpoint *));
static void   gdbtk_attach PARAMS ((void));
static void   gdbtk_detach PARAMS ((void));
static void gdbtk_file_changed PARAMS ((char *));
static void gdbtk_exec_file_display PARAMS ((char *));
static void tk_command_loop PARAMS ((void));
static void gdbtk_call_command PARAMS ((struct cmd_list_element *, char *, int));
static int gdbtk_wait PARAMS ((int, struct target_waitstatus *));
int x_event PARAMS ((int));
static int gdbtk_query PARAMS ((const char *, va_list));
static void gdbtk_warning PARAMS ((const char *, va_list));
static char *gdbtk_readline PARAMS ((char *));
d93 10
a102 10
static void gdbtk_readline_end PARAMS ((void));
static void gdbtk_pre_add_symbol PARAMS ((char *));
static void gdbtk_print_frame_info PARAMS ((struct symtab *, int, int, int));
static void gdbtk_post_add_symbol PARAMS ((void));
static void gdbtk_register_changed PARAMS ((int regno));
static void gdbtk_memory_changed PARAMS ((CORE_ADDR addr, int len));
static void tracepoint_notify PARAMS ((struct tracepoint *, const char *));
static void gdbtk_selected_frame_changed PARAMS ((int));
static void gdbtk_context_change PARAMS ((int));
static void gdbtk_error_begin PARAMS ((void));
d114 1
a114 1
static void breakpoint_notify PARAMS ((struct breakpoint *, const char *));
@


1.3
log
@* gdbtk-hooks.c (gdbtk_restore_result_ptr): New function.
* gdbtk.h (gdbtk_restore_result_ptr): Declare it.
* gdbtk-cmds.c (gdbtk_load_asm): Use it to restore the old value
of result_ptr, in case we get errors while disassembling things.
@
text
@d910 1
a910 3
/* Local variables: */
/* change-log-default-name: "ChangeLog-gdbtk" */
/* End: */
@


1.2
log
@        * gdbtk-wrapper.h: Add declarations for GDB_get_prev_frame, GDB_get_next_frame,
        GDB_find_relative_frame, GDB_get_current_frame.
        * gdbtk-wrapper.c (GDB_get_prev_frame, wrap_get_prev_frame): New functions.
        (GDB_get_next_frame, wrap_get_next_frame): New functions.
        (GDB_find_relative_frame, wrap_find_relative_frame): New functions.
        (GDB_get_current_frame, wrap_get_current_frame): New functions.

        * gdbtk-hooks.c (gdbtk_add_hooks): Use "specify_exec_file_hook" so
        that our hook is added to the list of hooks run instead of overwriting
        all other hooks.

        * gdbtk-cmds.c (gdb_stack): Wrap all calls to internal functions and
        deal with errors more gracefully.
@
text
@d186 10
@


1.1
log
@Initial revision
@
text
@d147 1
a147 1
  exec_file_display_hook = gdbtk_exec_file_display;
@


1.1.1.1
log
@import insight-2000-02-04 snapshot (2nd try)
@
text
@@
