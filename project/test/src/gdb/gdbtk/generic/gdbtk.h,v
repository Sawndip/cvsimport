head	1.14;
access;
symbols
	insight_7_6-2013-04-10-branchpoint:1.14
	gdb_7_6-branch:1.14.0.4
	gdb_7_5-branch:1.14.0.2
	gdb_7_4-branch:1.13.0.8
	gdb_7_3-branch:1.13.0.6
	gdb_7_1-branch:1.13.0.4
	gdb_7_0-branch:1.13.0.2
	arc-sim-20090309:1.11
	arc-insight_6_8-branch:1.11.0.10
	arc-insight_6_8-branchpoint:1.11
	insight_6_8-branch:1.11.0.8
	insight_6_8-branchpoint:1.11
	gdb_6_8-branch:1.11.0.6
	insight_6_6-20070208-release:1.11
	gdb_6_6-branch:1.11.0.4
	gdb_6_6-2006-11-15-branchpoint:1.11
	insight_6_5-20061003-release:1.11
	gdb_6_5-branch:1.11.0.2
	gdb_6_5-2006-05-14-branchpoint:1.11
	gdb-csl-gxxpro-6_3-branch:1.10.0.4
	gdb-csl-gxxpro-6_3-branchpoint:1.10
	gdb_6_4-branch:1.10.0.2
	gdb_6_4-2005-11-01-branchpoint:1.10
	gdb_6_1-2004-04-05-release:1.8
	gdb_6_1-branch:1.8.0.4
	gdb_6_1-2004-03-01-gmt-branchpoint:1.8
	gdb_6_0-2003-10-04-release:1.8
	gdb_6_0-branch:1.8.0.2
	gdb_6_0-2003-06-23-branchpoint:1.8
	gdb_5_3-2002-12-12-release:1.6
	gdb_5_3-branch:1.6.0.12
	gdb_5_3-2002-09-04-branchpoint:1.6
	gdb_5_2_1-2002-07-23-release:1.6
	gdb_5_2-2002-04-29-release:1.6
	gdb_5_2-branch:1.6.0.10
	gdb_5_2-2002-03-03-branchpoint:1.6
	gdb_5_1_1-2002-01-24-release:1.6
	cygnus_cvs_20020108_pre:1.6
	gdb_5_1_0_1-2002-01-03-branch:1.6.0.8
	gdb_5_1_0_1-2002-01-03-branchpoint:1.6
	gdb_5_1-2001-11-21-release:1.6
	gdb_s390-2001-09-26-branch:1.6.0.6
	gdb_s390-2001-09-26-branchpoint:1.6
	gdb_5_1-2001-07-29-branch:1.6.0.4
	gdb_5_1-2001-07-29-branchpoint:1.6
	dberlin-typesystem-branch:1.6.0.2
	dberlin-typesystem-branchpoint:1.6
	insight-precleanup-2001-01-01:1.4
	gdb_5_0-2000-05-19-release:1.2
	gdb_4_18_2-2000-05-18-release:1.2
	gdb_4_95_1-2000-05-11-snapshot:1.2
	gdb_4_95_0-2000-04-27-snapshot:1.2
	gdb_5_0-2000-04-10-branch:1.2.0.2
	gdb_5_0-2000-04-10-branchpoint:1.2
	repo-unification-2000-02-06:1.1.1.1
	insight-2000-02-04:1.1.1.1
	SNAPSHOT:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.14
date	2012.03.30.13.23.52;	author muller;	state Exp;
branches;
next	1.13;

1.13
date	2008.09.02.17.29.23;	author kseitz;	state Exp;
branches;
next	1.12;

1.12
date	2008.07.14.23.43.36;	author kseitz;	state Exp;
branches;
next	1.11;

1.11
date	2005.12.23.18.23.16;	author eliz;	state Exp;
branches;
next	1.10;

1.10
date	2005.06.01.15.23.17;	author kseitz;	state Exp;
branches;
next	1.9;

1.9
date	2004.06.25.19.44.22;	author cagney;	state Exp;
branches;
next	1.8;

1.8
date	2003.02.25.21.36.22;	author carlton;	state Exp;
branches;
next	1.7;

1.7
date	2003.02.18.23.33.05;	author kseitz;	state Exp;
branches;
next	1.6;

1.6
date	2001.05.10.18.04.24;	author kseitz;	state Exp;
branches;
next	1.5;

1.5
date	2001.04.05.00.04.28;	author hunt;	state Exp;
branches;
next	1.4;

1.4
date	2000.07.02.20.07.07;	author kevinb;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.17.20.20.59;	author jlarmour;	state Exp;
branches;
next	1.2;

1.2
date	2000.04.03.21.29.00;	author jimb;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.07.00.19.42;	author jsm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.07.00.19.42;	author jsm;	state Exp;
branches;
next	;


desc
@@


1.14
log
@	* generic/gdbtk.h (close_bfds): Fix prototype.
@
text
@/* Tcl/Tk interface routines header file.
   Copyright (C) 1994, 1995, 1996, 1997, 1998, 2000, 2001, 2003, 2008
   Free Software Foundation, Inc.

   Written by Stu Grossman <grossman@@cygnus.com> of Cygnus Support.

   This file is part of GDB.  It contains the public data that is shared between
   the gdbtk startup code and the gdbtk commands.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street, Fifth Floor,
   Boston, MA 02110-1301, USA.  */

#ifndef _GDBTK_H
#define _GDBTK_H

#ifdef _WIN32
#define GDBTK_PATH_SEP ";"
#else
#define GDBTK_PATH_SEP ":"
#endif

/* Some versions (1.3.79, 1.3.81) of Linux don't support SIOCSPGRP the way
   gdbtk wants to use it... */
#ifdef __linux__
#undef SIOCSPGRP
#endif

/*
 *  These are the version numbers for GDBTK.  There is a package require
 *  statement in main.tcl that checks the version.  If you make an incompatible
 *  change to the gdb commands, or add any new commands, be sure to bump the
 *  version number both here and in main.tcl.  This will save us the trouble of
 *  having a version of gdb find the wrong versions of the Tcl libraries.
 */

#define GDBTK_MAJOR_VERSION "1"
#define GDBTK_MINOR_VERSION "0"
#define GDBTK_VERSION       "1.0"

/*
 * These are variables that are needed in gdbtk commands. 
 */

/* This variable determines where memory used for disassembly is read from.
   If > 0, then disassembly comes from the exec file rather than the
   target (which might be at the other end of a slow serial link).  If
   == 0 then disassembly comes from target.  If < 0 disassembly is
   automatically switched to the target if it's an inferior process,
   otherwise the exec file is used.  It is defined in gdbtk.c */


extern int disassemble_from_exec;

/* This variable is true when the inferior is running.  Although it's
   possible to disable most input from widgets and thus prevent
   attempts to do anything while the inferior is running, any commands
   that get through - even a simple memory read - are Very Bad, and
   may cause GDB to crash or behave strangely.  So, this variable
   provides an extra layer of defense.  It is defined in gdbtk.c */

extern int running_now;

/* These two control how the GUI behaves when tracing or loading
   They are defined in gdbtk-cmds.c */

extern int No_Update;
extern int load_in_progress;

/* This is the main gdbtk interpreter.  It is defined and initialized
   in gdbtk.c */

extern Tcl_Interp *gdbtk_interp;

/*
 * This structure controls how the gdb output is fed into gdbtk_call_wrapper invoked
 * commands.  See the explanation of gdbtk_fputs in gdbtk_hooks.c for more details.
 */

typedef struct gdbtk_result
  {
    Tcl_Obj *obj_ptr;		/* This will eventually be copied over to the 
				   Tcl result */
    int flags;			/* Flag vector to control how the result is
				   used. */
  }
gdbtk_result;

struct target_ops;
struct ptid_t;

/* These defines give the allowed values for the gdbtk_result.flags field. */

#define GDBTK_TO_RESULT     1	/* This controls whether output from
				   gdbtk_fputs goes to the command result, or 
				   to gdbtk_tcl_fputs. */
#define GDBTK_MAKES_LIST    2	/* whether gdbtk_fputs adds the 
				   element it is outputting as a string, or
				   as a separate list element. */
#define GDBTK_IN_TCL_RESULT 4	/* Indicates that the result is already in the
				   Tcl result.  You can use this to preserve
				   error messages from functions like
				   Tcl_GetIntFromObj.  You can also store the
				   output of a call wrapped command directly in 
				   the Tcl result if you want, but beware, it will
				   not then be preserved across recursive
				   gdbtk_call_wrapper invocations. */
#define GDBTK_ERROR_STARTED 8	/* This one is just used in gdbtk_fputs.  If we 
				   see some output on stderr, we need to clear
				   the result we have been accumulating, or the 
				   error and the previous successful output
				   will get mixed, which would be confusing. */
#define GDBTK_ERROR_ONLY    16	/* Indicates that all incoming I/O is
				   to be treated as if it had arrived for gdb_stderr. This is
				   used to help error_begin in utils.c. */

/* This is a pointer to the gdbtk_result struct that
   we are currently filling.  We use the C stack to make a stack of these
   structures for nested calls to gdbtk commands that are invoked through
   the gdbtk_call_wrapper mechanism.  See that function for more details. */

extern gdbtk_result *result_ptr;

/* If you want to restore an old value of result_ptr whenever cleanups
   are run, pass this function to make_cleanup, along with the value
   of result_ptr you'd like to reinstate.  */
extern void gdbtk_restore_result_ptr (void *);

/* GDB context identifier */
extern int gdb_context;

/* Internal flag used to tell callers of deprecated_ui_loop_hook
   whether they should detach from the target. See explanations before
   x_event and gdb_stop. */
extern int gdbtk_force_detach;

/*
 * These functions are used in all the modules of Gdbtk.
 * 
 */

extern int Gdbtk_Init (Tcl_Interp * interp);
extern void gdbtk_stop_timer (void);
extern void gdbtk_start_timer (void);
extern void gdbtk_ignorable_warning (const char *, const char *);
extern void gdbtk_interactive (void);
extern int x_event (int);
extern int gdbtk_two_elem_cmd (char *, char *);
extern int target_is_native (struct target_ops *t);
extern void gdbtk_fputs (const char *, struct ui_file *);
extern struct ui_file *gdbtk_fileopen (void);
extern struct ui_file *gdbtk_fileopenin (void);
extern int gdbtk_disable_fputs;
extern ptid_t gdbtk_get_ptid (void);

#ifdef _WIN32
extern void close_bfds (void);
#endif /* _WIN32 */

extern void
  TclDebug (char level, const char *fmt,...);

/* A convenience macro for getting the demangled source names,
   regardless of the user's mangling style. */
#define GDBTK_SYMBOL_SOURCE_NAME(symbol) \
      (SYMBOL_DEMANGLED_NAME (symbol) != NULL \
       ? SYMBOL_DEMANGLED_NAME (symbol)       \
       : SYMBOL_PRINT_NAME (symbol))


/* gdbtk_add_hooks - add all the hooks to gdb.  This will get called
   by the startup code to fill in the hooks needed by core gdb. */
extern void gdbtk_add_hooks (void);

/* Initialize Insight */
extern void gdbtk_init (void);

/* Start Insight. Insight must have already been initialized with a call
   to gdbtk_init. */
extern void gdbtk_source_start_file (void);
#endif /* !_GDBTK_H */
@


1.13
log
@        * generic/gdbtk-cmds.c (gdb_listfuncs): Use SYMBOL_PRINT_NAME
        instead of DEPRECATED_SYMBOL_NAME.
        * generic/gdbtk-stack.c (gdb_block_vars): Likewise.
        (gdb_get_vars_command): Likewise.
        * generic/gdbtk.h (GDBTK_SYMBOL_SOURCE_NAME): Likewise.
@
text
@d168 1
a168 1
extern void close_bfds ();
@


1.12
log
@        * generic/gdbtk-stack.c (gdb_block_args): Remove deprecated values
        LOC_LOCAL_ARG, LOC_COMPUTED_ARG, LOC_REGPARM, LOC_BASEARG_ARG, and
        LOC_BASEARG.
        (gdb_get_blocks): Likewise.
        (gdb_get_vars_command): Likewise.
        Fix type-punned pointer error introduced on 03-07.

        * generic/gdbtk-cmds.c (gdbtk_load_asm): Use paddress instead
        of deprecated_print_address_numeric.
        (gdb_stop): Update use of target_stop.

        * generic/gdbtk.h (gdbtk_get_ptid): Declare new function.
        * generic/gdbtk-hooks.c (gdbtk_wait): Save inferior's ptid.
        (gdbtk_get_ptid): Define new function.
        * generic/gdbtk-varobj.c (variable_update): Update for recent
        varobj_update API change.
        * generic/gdbtk-wrapper.h (GDB_varobj_update): Likewise.
        * generic/gdbtk-wrapper.c (GDB_varobj_update): Likewise.
        (wrap_varobj_update): Likewise.

        * library/targetselection.itb (init_target_db): Initialize
        preferences here instead of ...
        (_init): ... here.
        (_init_prefs): Define gdb/load/default-portname, too.
@
text
@d179 1
a179 1
       : DEPRECATED_SYMBOL_NAME (symbol))
@


1.11
log
@	* generic/gdbtk.h:
	* generic/gdbtk.c:
	* generic/gdbtk-wrapper.h:
	* generic/gdbtk-wrapper.c:
	* generic/gdbtk-varobj.c:
	* generic/gdbtk-stack.c:
	* generic/gdbtk-register.c:
	* generic/gdbtk-main.c:
	* generic/gdbtk-interp.c:
	* generic/gdbtk-hooks.c:
	* generic/gdbtk-cmds.h:
	* generic/gdbtk-cmds.c:
	* generic/gdbtk-bp.c: Put (C) after Copyright.  Update the FSF
	address.
@
text
@d2 1
a2 1
   Copyright (C) 1994, 1995, 1996, 1997, 1998, 2000, 2001, 2003
d101 1
d165 1
@


1.10
log
@        From James Lemke  <jim@@wasabisystems.com>:
        * generic/gdbtk-hooks.c (gdbtk_fileopenin, gdbtk_read): New functions
        for target to read stdin from console window.
        * generic/gdbtk-interp.c (_stdtargin): Added.
        * generic/gdbtk.h (gdbtk_fileopenin): Add declaration.
@
text
@d2 1
a2 1
   Copyright 1994, 1995, 1996, 1997, 1998, 2000, 2001, 2003
d22 2
a23 2
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */
@


1.9
log
@2004-06-25  Andrew Cagney  <cagney@@gnu.org>

	* generic/gdbtk.h: "ui_loop_hook" was deprecated, update.
	* generic/gdbtk-hooks.c (gdbtk_add_hooks, x_event): Ditto.
	* generic/gdbtk-cmds.c: Ditto.
@
text
@d162 1
@


1.8
log
@2003-02-25  David Carlton  <carlton@@math.stanford.edu>

	* symtab.h (SYMBOL_NATURAL_NAME): New macro.
	(SYMBOL_LINKAGE_NAME): Ditto.
	(SYMBOL_PRINT_NAME): Use SYMBOL_NATURAL_NAME and
	SYMBOL_LINKAGE_NAME.
	(struct general_symbol_info): Expand comment.
	(DEPRECATED_SYMBOL_NAME): Rename from SYMBOL_NAME.
	(SYMBOL_MATCHES_NAME): Use DEPRECATED_SYMBOL_NAME.
	(SYMBOL_MATCHES_REGEXP): Ditto.
	* symtab.c (symbol_natural_name): New function.
	* objfiles.h: Replace all uses of SYMBOL_NAME by
	DEPRECATED_SYMBOL_NAME.
	* xcoffread.c, valops.c, typeprint.c, tracepoint.c: Ditto.
	* symtab.c, symmisc.c, symfile.c, stack.c, stabsread.c: Ditto.
	* somsolib.c, sol-thread.c, rs6000-tdep.c, p-valprint.c: Ditto.
	* printcmd.c, objfiles.c, objc-lang.c, mipsread.c: Ditto.
	* minsyms.c, mdebugread.c, linespec.c, jv-lang.c: Ditto.
	* i386-tdep.c, i386-linux-tdep.c, hpread.c, hppa-tdep.c: Ditto.
	* gnu-v2-abi.c, f-valprint.c, findvar.c, expprint.c: Ditto.
	* dwarfread.c, dwarf2read.c, dbxread.c, c-valprint.c: Ditto.
	* cp-valprint.c, coffread.c, buildsym.c, breakpoint.c: Ditto.
	* blockframe.c, ax-gdb.c, arm-linux-tdep.c, ada-lang.c: Ditto.
	* ada-exp.y: Ditto.
	* ada-exp.y: Update copyright.
	* sol-thread.c, mipsread.c, jv-lang.c, f-valprint.c: Ditto.
	* cp-valprint.c: Ditto.

2003-02-25  David Carlton  <carlton@@math.stanford.edu>

	* generic/gdbtk.h: Replace all instances of SYMBOL_NAME by
	DEPRECATED_SYMBOL_NAME.
	* generic/gdbtk-stack.c, generic/gdbtk-cmds.c: Ditto.
	* generic/gdbtk-stack.c, generic/gdbtk-cmds.c: Update copyright.

2003-02-25  David Carlton  <carlton@@math.stanford.edu>

	* mi-cmd-stack.c: Replace all instances of SYMBOL_NAME with
	DEPRECATED_SYMBOL_NAME.  Update copyright.
@
text
@d142 3
a144 2
/* Internal flag used to tell callers of ui_loop_hook whether they should
   detach from the target. See explanations before x_event and gdb_stop. */
@


1.7
log
@        * generic/gdbtk-main.c (main): Change name of intepreter to "insight".
        * generic/gdbtk.h: Add ifdef wrappers.
        (gdbtk_init): Declare.
        (gdbtk_source_start_file): Declare.
        * generic/gdbtk.c (gdbtk_init): Export.
        Reomve init_ui_hook stuff.
        Do not add hooks here anymore (moved into interps).
        Do not muck with gdbk_stdout et al (moved into interps).
        (gdbtk_source_start_file): Code ripped out of gdbtk_init
        which deals with sourcing the main startup file.
        (gdbtk_init_1): Hack: New function.
        (argv0): Hack: New static global.
        (tk_init): Moved to gdbtk-interps.c.
        (gdbtk_resume): Likewise.
        (gdbtk_suspend): Likewise.
        (gdbtk_prompt_p): Likewise.
        (gdbtk_exec): Likewise.
        (gdbtk_command_loop): Likewise.
        (_initialize_gdbtk): Move interpreter stuff to gdbtk-interps.c.
        Hack: Add new init_ui_hook.
        * generic/gdbtk-interps.c: New file.
@
text
@d175 1
a175 1
       : SYMBOL_NAME (symbol))
@


1.6
log
@	* generic/gdbtk-cmds.c: Put on diet. All breakpoint-,
	tracepoint-, register-, and stack-related functions moved
	into separate files.
	(call_wrapper): Renamed to "gdbtk_call_wrapper" and export.
	Update all callers.
	* generic/gdbtk.h: Move all breakpoint-related stuff into
	gdbtk-bp.c.
	Remove declaration for "call_wrapper". Now in gdbtk-cmds.h
	(and called "gdbtk_call_wrapper").
	* generic/gdbtk-varobj.c: Include "gdbtk-cmds.h".
	* generic/gdbtk-cmds.h: New file.
	* generic/gdbtk-bp.c: New file.
	* generic/gdbtk-register.c: New file.
	* generic/gdbtk-stack.c: New file.
@
text
@d2 1
a2 1
   Copyright 1994, 1995, 1996, 1997, 1998, 2000, 2001
d25 3
d182 7
@


1.5
log
@2001-04-04  Martin M. Hunt  <hunt@@redhat.com>

	* generic/gdbtk-hooks.c (gdbtk_fileopen): New function.
	Initialize ui_file stuff for gdbtk.
	(gdbtk_fputs): Don't print if gdbtk_disable_fputs. Send
	stdlog and stdtarg to their handler functions.

	* generic/gdbtk.c (Gdbtk_Init): Don't set gdb_stdlog
	and gdb_stdtarg to gdb_stdout,
	(gdbtk_init): Unset gdbtk_disable_fputs
	when ready to accept output from gdb. Remove references to
	fputs_unfiltered_hook.

	* generic/gdbtk.h: Declare new flag gdbtk_disable_fputs.

	* generic/gdbtk-cmds.c (gdb_restore_fputs): Instead of setting
	fputs_unfiltered_hook, set the new flag gdbtk_disable_fputs.

	* library/prefs.tcl (pref_set_defaults): Add defaults
	for log_fg and target_fg.

	* library/interface.tcl (gdbtk_tcl_fputs_error): Use
	err_tag.
	(gdbtk_tcl_fputs_log): New function. Write log messages
	to console.
	(gdbtk_tcl_fputs_target): New function.	Write target
	IO to console.

	* library/console.ith (einsert): Add tag parameter.

	* library/console.itb (_build_win): Add new tags for log
	and target IO.
	(einsert): Add tag parameter.
@
text
@a82 6
/* These two are lookup tables for elements of the breakpoint structure that
   gdbtk knows by string name.  They are defined in gdbtk-cmds.c */

extern char *bptypes[];
extern char *bpdisp[];

d84 1
a84 1
 * This structure controls how the gdb output is fed into call_wrapper invoked
d114 1
a114 1
				   call_wrapper invocations. */
d127 1
a127 1
   the call_wrapper mechanism.  See that function for more details. */
a154 1
extern int call_wrapper (ClientData, Tcl_Interp *, int, Tcl_Obj * CONST[]);
@


1.4
log
@PARAMS elimination.
@
text
@d2 2
a3 1
   Copyright 1994-1998, 2000 Free Software Foundation, Inc.
d164 2
@


1.3
log
@        * ChangeLog-gdbtk: Renamed to ChangeLog
        * ChangeLog: New file
        * gdbtk-cmds.c, gdbtk-hooks.c, gdbtk-variable.c, gdbtk-varobj.c,
        gdbtk-wrapper.h, gdbtk-wrapper.c, gdbtk.h, gdbtk.c: No need for
        changelog-default-name hint for Emacs now
@
text
@d154 8
a161 8
extern void gdbtk_stop_timer PARAMS ((void));
extern void gdbtk_start_timer PARAMS ((void));
extern void gdbtk_ignorable_warning PARAMS ((const char *, const char *));
extern void gdbtk_interactive PARAMS ((void));
extern int x_event PARAMS ((int));
extern int gdbtk_two_elem_cmd PARAMS ((char *, char *));
extern int call_wrapper PARAMS ((ClientData, Tcl_Interp *, int, Tcl_Obj * CONST[]));
extern int target_is_native PARAMS ((struct target_ops *t));
@


1.2
log
@* gdbtk-hooks.c (gdbtk_restore_result_ptr): New function.
* gdbtk.h (gdbtk_restore_result_ptr): Declare it.
* gdbtk-cmds.c (gdbtk_load_asm): Use it to restore the old value
of result_ptr, in case we get errors while disassembling things.
@
text
@a182 4

/* Local variables: */
/* change-log-default-name: "ChangeLog-gdbtk" */
/* End: */
@


1.1
log
@Initial revision
@
text
@d136 5
@


1.1.1.1
log
@import insight-2000-02-04 snapshot (2nd try)
@
text
@@
