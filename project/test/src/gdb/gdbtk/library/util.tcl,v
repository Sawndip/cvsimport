head	1.14;
access;
symbols
	insight_7_6-2013-04-10-branchpoint:1.14
	gdb_7_6-branch:1.14.0.22
	gdb_7_5-branch:1.14.0.20
	gdb_7_4-branch:1.14.0.18
	gdb_7_3-branch:1.14.0.16
	gdb_7_1-branch:1.14.0.14
	gdb_7_0-branch:1.14.0.12
	arc-sim-20090309:1.14
	arc-insight_6_8-branch:1.14.0.10
	arc-insight_6_8-branchpoint:1.14
	insight_6_8-branch:1.14.0.8
	insight_6_8-branchpoint:1.14
	gdb_6_8-branch:1.14.0.6
	insight_6_6-20070208-release:1.14
	gdb_6_6-branch:1.14.0.4
	gdb_6_6-2006-11-15-branchpoint:1.14
	insight_6_5-20061003-release:1.14
	gdb_6_5-branch:1.14.0.2
	gdb_6_5-2006-05-14-branchpoint:1.14
	gdb-csl-gxxpro-6_3-branch:1.13.0.4
	gdb-csl-gxxpro-6_3-branchpoint:1.13
	gdb_6_4-branch:1.13.0.2
	gdb_6_4-2005-11-01-branchpoint:1.13
	gdb_6_1-2004-04-05-release:1.12
	gdb_6_1-branch:1.12.0.4
	gdb_6_1-2004-03-01-gmt-branchpoint:1.12
	gdb_6_0-2003-10-04-release:1.12
	gdb_6_0-branch:1.12.0.2
	gdb_6_0-2003-06-23-branchpoint:1.12
	gdb_5_3-2002-12-12-release:1.11
	gdb_5_3-branch:1.11.0.2
	gdb_5_3-2002-09-04-branchpoint:1.11
	gdb_5_2_1-2002-07-23-release:1.10
	gdb_5_2-2002-04-29-release:1.10
	gdb_5_2-branch:1.10.0.2
	gdb_5_2-2002-03-03-branchpoint:1.10
	gdb_5_1_1-2002-01-24-release:1.8
	cygnus_cvs_20020108_pre:1.10
	gdb_5_1_0_1-2002-01-03-branch:1.8.0.6
	gdb_5_1_0_1-2002-01-03-branchpoint:1.8
	gdb_5_1-2001-11-21-release:1.8
	gdb_s390-2001-09-26-branch:1.8.0.4
	gdb_s390-2001-09-26-branchpoint:1.8
	gdb_5_1-2001-07-29-branch:1.8.0.2
	gdb_5_1-2001-07-29-branchpoint:1.8
	dberlin-typesystem-branch:1.7.0.2
	dberlin-typesystem-branchpoint:1.7
	insight-precleanup-2001-01-01:1.5
	gdb_5_0-2000-05-19-release:1.3
	gdb_4_18_2-2000-05-18-release:1.3
	gdb_4_95_1-2000-05-11-snapshot:1.3
	gdb_4_95_0-2000-04-27-snapshot:1.3
	gdb_5_0-2000-04-10-branch:1.3.0.2
	gdb_5_0-2000-04-10-branchpoint:1.3
	repo-unification-2000-02-06:1.1.1.1
	insight-2000-02-04:1.1.1.1
	SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.14
date	2005.12.23.18.26.50;	author eliz;	state Exp;
branches;
next	1.13;

1.13
date	2004.04.05.20.36.55;	author hunt;	state Exp;
branches;
next	1.12;

1.12
date	2002.11.08.05.25.20;	author hunt;	state Exp;
branches;
next	1.11;

1.11
date	2002.08.01.01.19.02;	author kseitz;	state Exp;
branches;
next	1.10;

1.10
date	2001.11.19.18.43.19;	author hunt;	state Exp;
branches;
next	1.9;

1.9
date	2001.09.10.19.21.47;	author irox;	state Exp;
branches;
next	1.8;

1.8
date	2001.07.19.17.40.09;	author hunt;	state Exp;
branches;
next	1.7;

1.7
date	2001.06.11.23.08.05;	author tromey;	state Exp;
branches;
next	1.6;

1.6
date	2001.05.03.18.13.21;	author kseitz;	state Exp;
branches;
next	1.5;

1.5
date	2000.10.23.21.46.06;	author fnasser;	state Exp;
branches;
next	1.4;

1.4
date	2000.06.08.20.30.07;	author fnasser;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.03.19.34.38;	author jingham;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.10.23.39.10;	author jingham;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.07.00.19.42;	author jsm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.07.00.19.42;	author jsm;	state Exp;
branches;
next	;


desc
@@


1.14
log
@	* library/attachdlg.itb:
	* library/actiondlg.tcl:
	* library/about.tcl:
	* library/ehandler.itb:
	* library/editor.tcl:
	* library/download.ith:
	* library/download.itb:
	* library/debugwin.ith:
	* library/debugwin.itb:
	* library/cspref.ith:
	* library/cspref.itb:
	* library/console.ith:
	* library/console.itb:
	* library/browserwin.ith:
	* library/browserwin.itb:
	* library/bpwin.ith:
	* library/bpwin.itb:
	* library/blockframe.ith:
	* library/managedwin.ith:
	* library/managedwin.itb:
	* library/main.tcl:
	* library/locals.tcl:
	* library/ipcpref.ith:
	* library/ipcpref.itb:
	* library/ipc.tcl:
	* library/interface.tcl:
	* library/helpviewer.tcl:
	* library/globalpref.ith:
	* library/globalpref.itb:
	* library/gdbwin.ith:
	* library/gdbtoolbar.itcl:
	* library/gdbmenubar.itcl:
	* library/gdbevent.ith:
	* library/gdbevent.itb:
	* library/embeddedwin.ith:
	* library/ehandler.ith:
	* library/srcwin.itb:
	* library/srctextwin.ith:
	* library/srctextwin.itb:
	* library/srcpref.ith:
	* library/srcpref.itb:
	* library/srcbar.itcl:
	* library/session.tcl:
	* library/regwin.ith:
	* library/regwin.itb:
	* library/process.ith:
	* library/process.itb:
	* library/prefs.tcl:
	* library/pluginwin.itcl:
	* library/modal.tcl:
	* library/memwin.ith:
	* library/memwin.itb:
	* library/mempref.ith:
	* library/mempref.itb:
	* library/watch.tcl:
	* library/watch.tcl:
	* library/warning.tcl:
	* library/vartree.ith:
	* library/vartree.itb:
	* library/util.tcl:
	* library/tracedlg.tcl:
	* library/toplevelwin.ith:
	* library/tfind_args.tcl:
	* library/tdump.tcl:
	* library/targetselection.ith:
	* library/targetselection.itb:
	* library/stackwin.ith:
	* library/stackwin.itb:
	* library/srcwin.ith:
@
text
@# Utilities for Insight.
# Copyright (C) 1997, 1998, 1999, 2004 Red Hat
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License (GPL) as published by
# the Free Software Foundation; either version 2 of the License, or (at
# your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.


# ----------------------------------------------------------------------
# Misc routines
#
#   PROCS:
#
#     keep_raised - keep a window raised
#     sleep - wait a certain number of seconds and return
#     toggle_debug_mode - turn debugging on and off
#     freeze - make a window modal
#     bp_exists - does a breakpoint exist on linespec?
#
# ----------------------------------------------------------------------
#


# A helper procedure to keep a window on top.
proc keep_raised {top} {
  if {[winfo exists $top]} {
    raise $top
    wm deiconify $top
    after 1000 [info level 0]
  }
}

# sleep - wait a certain number of seconds then return
proc sleep {sec} {
  global __sleep_timer
  set __sleep_timer 0
  after [expr {1000 * $sec}] set __sleep_timer 1
  vwait __sleep_timer
}


# ------------------------------------------------------------------
#  PROC:  auto_step - automatically step through a program
# ------------------------------------------------------------------

# FIXME FIXME
proc auto_step {} {
  global auto_step_id

  set auto_step_id [after 2000 auto_step]
  gdb_cmd next
}

# ------------------------------------------------------------------
#  PROC:  auto_step_cancel - cancel auto-stepping
# ------------------------------------------------------------------

proc auto_step_cancel {} {
  global auto_step_id

  if {[info exists auto_step_id]} {
    after cancel $auto_step_id
    unset auto_step_id
  }
}

# ------------------------------------------------------------------
#  PROC:  tfind_cmd -- to execute a tfind command on the target
# ------------------------------------------------------------------
proc tfind_cmd {command} {
  gdbtk_busy
  # need to call gdb_cmd because we want to ignore the output
  set err [catch {gdb_cmd $command} msg]
  if {$err || [regexp "Target failed to find requested trace frame" $msg]} {
    tk_messageBox -icon error -title "GDB" -type ok \
      -message $msg
    gdbtk_idle
    return
  } else {
    gdbtk_update
    gdbtk_idle
  }
}

# ------------------------------------------------------------------
#  PROC:  save_trace_command -- Saves the current trace settings to a file
# ------------------------------------------------------------------
proc save_trace_commands {} {
  
  set out_file [tk_getSaveFile -title "Enter output file for trace commands"]
  debug "Got outfile: $out_file"
  if {$out_file != ""} {
    gdb_cmd "save-tracepoints $out_file"
  }
}

# ------------------------------------------------------------------
#  PROC:  do_test - invoke the test passed in
#           This proc is provided for convenience. For any test
#           that uses the console window (like the console window
#           tests), the file cannot be sourced directly using the
#           'tk' command because it will block the console window
#           until the file is done executing. This proc assures
#           that the console window is free for input by wrapping
#           the source call in an after callback.
#           Users may also pass in the verbose and tests globals
#           used by the testsuite.
# ------------------------------------------------------------------
proc do_test {{file {}} {verbose {}} {tests {}}} {
  global _test

  if {$file == {}} {
    error "wrong \# args: should be: do_test file ?verbose? ?tests ...?"
  }

  if {$verbose != {}} {
    set _test(verbose) $verbose
  } elseif {![info exists _test(verbose)]} {
    set _test(verbose) 0
  }

  if {$tests != {}} {
    set _test(tests) $tests
  }

  set _test(interactive) 1
  after 500 [list source $file]
}

# ------------------------------------------------------------------
#  PROCEDURE:  gdbtk_read_defs
#        Reads in the defs file for the testsuite. This is usually
#        the first procedure called by a test file. It returns
#        1 if it was successful and 0 if not (if run interactively
#        from the console window) or exits (if running via dejagnu).
# ------------------------------------------------------------------
proc gdbtk_read_defs {} {
  global _test env

  if {[info exists env(DEFS)]} {
    set err [catch {source $env(DEFS)} errTxt]
  } else {
    set err [catch {source defs} errTxt]
  }

  if {$err} {
    if {$_test(interactive)} {
      tk_messageBox -icon error -message "Cannot load defs file:\n$errTxt" -type ok
      return 0
    } else {
      puts stderr "cannot load defs files: $errTxt\ntry setting DEFS"
      exit 1
    }
  }

  return 1
}

# ------------------------------------------------------------------
#  PROCEDURE:  bp_exists
#            Returns BPNUM if a breakpoint exists at LINESPEC or
#            -1 if no breakpoint exists there
# ------------------------------------------------------------------
proc bp_exists {linespec} {

  lassign $linespec foo function filename line_number addr pc_addr

  set bps [gdb_get_breakpoint_list]
  foreach bpnum $bps {
    set bpinfo [gdb_get_breakpoint_info $bpnum]
    lassign $bpinfo file func line pc type enabled disposition \
      ignore_count commands cond thread hit_count user_specification
    if {$filename == $file && $function == $func && $addr == $pc} {
      return $bpnum
    }
  }

  return -1
}


# gridCGet - This provides the missing grid cget
# command.

proc gridCGet {slave option} {
  set config_list [grid info $slave]
  return [lindex $config_list [expr [lsearch $config_list $option] + 1]] 
}

# ------------------------------------------------------------------
#  PROC:  get_disassembly_flavor - gets the current disassembly flavor.
#         The set disassembly-flavor command is assumed to exist.  This
#         will error out if it does not.
# ------------------------------------------------------------------
proc get_disassembly_flavor {} {
  if {[catch {gdb_cmd "show disassembly-flavor"} ret]} {
    return ""
  } else {
    regexp {\"([^\"]*)\"\.} $ret dummy gdb_val
    return $gdb_val
  }
}
 
# ------------------------------------------------------------------
#  PROC:  list_disassembly_flavors - Lists the current disassembly flavors.
#         Returns an empty list if the set disassembly-flavor is not supported.
# ------------------------------------------------------------------
proc list_disassembly_flavors {} {
  catch {gdb_cmd "set disassembly-flavor"} ret_val
  if {[regexp {Requires an argument\. Valid arguments are (.*)\.} \
	 $ret_val dummy list]} {
    foreach elem  [split $list ","] {
      lappend vals [string trim $elem]
    }
    return [lsort $vals]
  } else {
    return {}
  }    
}

# ------------------------------------------------------------------
#  PROC:  init_disassembly_flavor - Synchs up gdb's internal disassembly
#         flavor with the value in the preferences file.
# ------------------------------------------------------------------
proc init_disassembly_flavor {} { 
  set gdb_val [get_disassembly_flavor]
  if {$gdb_val != ""} {
    set def_val [pref get gdb/src/disassembly-flavor]
    if {[string compare $def_val ""] != 0} {
      if {[catch "gdb_cmd \"set disassembly-flavor $def_val\""]} {
	pref set gdb/src/disassembly-flavor $gdb_val
      }
    } else {
      pref set gdb/src/disassembly-flavor $gdb_val
    }
  }
}

# ------------------------------------------------------------------
#  PROC:  list_element_strcmp - to be used in lsort -command when the
#         elements are themselves lists, and you always want to look at
#         a particular item.
# ------------------------------------------------------------------
proc list_element_strcmp {index first second} {
  set theFirst [lindex $first $index]
  set theSecond [lindex $second $index]

  return [string compare $theFirst $theSecond]
}

# ------------------------------------------------------------------
#  PROC:  gdbtk_endian - returns BIG or LITTLE depending on target
#                        endianess
# ------------------------------------------------------------------

proc gdbtk_endian {} {
  if {[catch {gdb_cmd "show endian"} result]} {
    return "UNKNOWN"
  }
  if {[regexp {.*big endian} $result]} {
    set result "BIG"
  } elseif {[regexp {.*little endian} $result]} {
    set result "LITTLE"
  } else {
    set result "UNKNOWN"
  }
  return $result
}

# ------------------------------------------------------------------
#  PROC:  set_bg_colors - set background and text background for
#                        all windows.
# ------------------------------------------------------------------
proc set_bg_colors {{num ""}} {
  debug $num

  if {$num != ""} {
    set ::gdb_bg_num $num
  }
  set ::Colors(textbg) [pref get gdb/bg/$::gdb_bg_num]

  # calculate background as 80% of textbg
  set ::Colors(bg) [recolor $::Colors(textbg) 80]

  # calculate trough and activebackground as 90% of background
  set dbg [recolor $::Colors(bg) 90]

  r_setcolors . -background $::Colors(bg)
  r_setcolors . -highlightbackground $::Colors(bg)
  r_setcolors . -textbackground $::Colors(textbg)
  r_setcolors . -troughcolor $dbg
  r_setcolors . -activebackground $dbg

  pref_set_option_db 1
  ManagedWin::restart
}

# ------------------------------------------------------------------
#  PROC:  r_setcolors - recursively set background and text background for
#                        all windows.
# ------------------------------------------------------------------
proc r_setcolors {w option color} {
  debug "$w $option $color"

  # exception(s)
  if {![catch {$w isa Balloon} result] && $result == "1"} {
    return
  }
  catch {$w config $option $color}
  
  foreach child [winfo children $w] {
    r_setcolors $child $option $color
  }
}

# ------------------------------------------------------------------
#  PROC:  recolor - returns a darker or lighter color
# ------------------------------------------------------------------
proc recolor {color percent} {
  set c [winfo rgb . $color]
  return [format #%02x%02x%02x [expr {($percent * [lindex $c 0]) / 25600}]  \
	    [expr {($percent * [lindex $c 1]) / 25600}] [expr {($percent * [lindex $c 2]) / 25600}]]
}


@


1.13
log
@2004-04-05  Martin Hunt  <hunt@@redhat.com>

	* library/session.tcl: Make hostname and portname
	session-dependent. Add gdb_bg_num (the color
	scheme number) as a per-session variable.

	* library/prefs.tcl (pref_read): If color schemes are in use,
	set colors based on the current scheme.
	(pref_save): Add "bg" section.
	(pref_set_defaults): Define new variable gdb/use_color_schemes
	and define 16 default background colors.

	* library/managedwin.itb (ManagedWin::window_name): Append
	window "instance" string to window name.
	(ManagedWin::window_instance): Set window instance string.

	* library/debugwin.itb: Add a reconfig method to restore
	unique black textbackground, overriding color scheme.

	* library/csprefs.itb:
	* library/csprefs.ith: New files. Implement color scheme
	preferences.

	* library/util.tcl (set_bg_colors): New function.
	(r_setcolors): New function.

	* library/regwin.itb (_prefs_changed): Deleted.
	(reconfig): New function.  Updates tkTable color tags
	if color scheme changes.
	* library/regwin.ith: Update to reflect above changes.

	* library/srcbar.itcl (create_pref_menu): Add pulldown
	menus for "Edit Color Schemes..." and "Use Color Schemes".
	(reconfig): Fix up menu items for color schemes.

	* library/globalpref.itb (_init_var): Add
	gdb/use_color_schemes to variable list.
	(_build_win): Add a checkbutton to enable/disable
	color schemes.

	* library/gdbmenubar.itcl (menubar_add_cascade): Add a class
	argument so cascade menus can be managed by class too.

	* library/interface.tcl (gdbtk_tcl_fputs): Check for
	existence of gdbtk_state(console).  Stops annoying error
	messages.
	(gdbtk_tcl_fputs_error): Ditto.
	(gdbtk_tcl_fputs_log): Ditto.
@
text
@d2 1
a2 1
# Copyright 1997, 1998, 1999, 2004 Red Hat
@


1.12
log
@2002-11-07  Martin M. Hunt  <hunt@@redhat.com>

	* library/util.tcl (CygScrolledListbox): Delete.

	* library/srctextwin.itb: Change from CygScrolledListbox
	to iwidgets::scrolledlistbox. Set foreground and background.
	Center popup over source window.
@
text
@d1 2
a2 2
# Utilities for GDBtk.
# Copyright 1997, 1998, 1999 Cygnus Solutions
d275 56
@


1.11
log
@        * library/browserwin.itb (_full_funcs_combo): Remove "-modal"
        option from tk_messageBox call. It was redhat-local in tk8.0,
        but is no longer in tk8.3.
        * library/download.itb (download_it): Likewise.
        * library/interface.tcl (gdbtk_tcl_query): Likewise.
        (show_warning): Likewise.
        (set_exe): Likewise.
        (set_target): Likewise.
        * library/memwin.itb (error_dialog): Likewise.
        * library/srcwin.itb (fillFuncCB): Likewise.
        * library/util.tcl (tfind_cmd): Likewise.
@
text
@a187 22
# Scrolled Listbox - this could be in libgui,
# but we'll probably just start using new iwidgets stuff 
# soon so keep it here temporarily.  This is based on
# code from Welch's book.

proc CygScrolledListbox { win args } {
  frame $win
  # Create listbox attached to scrollbars, pass thru $args
  eval {listbox $win.list -yscrollcommand [list $win.sy set]} $args
  scrollbar $win.sy -orient vertical -command [list $win.list yview]
  
  # Create padding based on the scrollbar width and border
  set pad [expr [$win.sy cget -width] + 2* \
	     ([$win.sy cget -bd] + \
		[$win.sy cget -highlightthickness])]

  frame $win.pad -width $pad -height $pad
  pack $win.sy -side right -fill y
  pack $win.list -side left -fill both -expand true
  return $win.list
}

@


1.10
log
@2001-11-08  Martin M. Hunt  <hunt@@redhat.com>
	* generic/gdbtk-cmds.c (gdb_eval): Add an optional
	format argument.
	(hex2bin): Swap bytes around if target is little endian.
	Fix loop count.
	(gdb_incr_addr): New function to do address arithmetic.
	Needed because some addresses are 64-bits and tcl can't
	deal with them, except as strings.

	* library/memwin.itb (MemWin::build_win): Add a label
	to indicate the target endianess.
	(MemWin::edit): Use gdb_incr_addr.
	(MemWin::busy): The constructor calls gdbtk_busy which
	calls this before the window has finished drawing, so
	don't disable items that don't exist yet.
	(MemWin::update_address): Set a flag, bad_expr, if the
	expression does not evaluate. Call gdb_eval with 'x' flag
	to force the result to be hex.
	(MemWin::BadExpr): Set bad_expr.
	(MemWin::incr_addr): Use gdb_incr_addr.
	(MemWin::update_addr): Return is bad_expr is set. Use
	gdb_incr_addr.
	(MemWin::goto): Call update_address.
	* library/memwin.itb: Declare private variable bad_expr.

	* library/util.tcl (gdbtk_endian): New procedure. Returns
	BIG or LITTLE to indicate target endianess.
@
text
@d82 1
a82 1
      -modal task -message $msg
@


1.9
log
@	* generic/gdbtk.c (gdbtk_init): Set IWIDGETS_LIBRARY if
	Insight is launched from within the build directory.
	* library/util.tcl (find_iwidgets_library): Removed.
	* library/main.tcl: Don't call find_iwidgets_library, do a
	package require instead.
@
text
@d278 20
@


1.8
log
@2001-07-18  Martin M. Hunt  <hunt@@redhat.com>

	* library/util.tcl (find_iwidgets_library): Look
	for iwidgets3* so we don't accidently find iwidgets2.x.
@
text
@a218 84
# PROC: find_iwidgets_library - Find the IWidgets library.
#
# This is a little bit of bogosity which is necessary so we
# can find the iwidgets libraries if we are not installed:
# The problem is that the iwidgets are really weird.  The init file is 
# in the build tree, but all the library files are in the source tree...
#
# ------------------------------------------------------------------
proc find_iwidgets_library {} {
  global errMsg

  set IwidgetsOK 1

  if {[catch {package require Iwidgets 3.0} errMsg]} {

    # OK, we are not installed or this would have succeeded...
    # Lets try to do it by hand:
    set IwidgetsOK 0

    set iwidgetsSrcDir [glob -nocomplain [file join \
					    [file dirname [file dirname $::tcl_library]] \
					    itcl iwidgets3*]]
    
    # Canonicalize the executable's directory name.  It turns out that on Solaris, 
    # info nameofexecutable returns /foo/bar/real_dir/./gdb when gdb is launched from
    # another gdb session, so we have to fix this up.

    set exec_name [info nameofexecutable]
    set curdir [pwd] 
    if {[string compare [file type $exec_name] "link"] == 0} {
      set exec_name [file readlink $exec_name]
      if {[string compare [file pathtype $exec_name] "relative"] == 0} {
	set exec_name [file join [pwd] $exec_name]
      }
    }
    
    cd [file dirname $exec_name]
    set exec_name [pwd]
    cd $curdir

    set iwidgetsBuildDir [glob -nocomplain [file join \
					      [file dirname $exec_name] \
					      itcl iwidgets3*]]
    set initFile [file join [lindex $iwidgetsBuildDir 0] \
		    unix iwidgets.tcl]

    if {[llength $iwidgetsBuildDir] == 0} {
      # We could be runnning on an installed toolchain.
      # Check in "normal" installed place: "../../share/iwidgets*"
      set iwidgetsBuildDir [glob -nocomplain [file join \
						[file dirname [file dirname $exec_name]] \
						share iwidgets3*]]
      set initFile [file join [lindex $iwidgetsBuildDir 0] iwidgets.tcl]
    }

    if {[llength $iwidgetsSrcDir] == 1 && [llength $iwidgetsBuildDir] == 1} {
      # The lindex is necessary because the path may have spaces in it...
      set libDir [file join [lindex $iwidgetsSrcDir 0] generic]
      if {[file exists $initFile] && [file isdirectory $libDir]} {
	if {![catch {source $initFile} err]} {
	  # Now fix up the stuff the Iwidgets init file got wrong...
	  set libPos [lsearch $::auto_path [file join $::iwidgets::library scripts]]
	  if {$libPos >= 0} {
	    set auto_path [lreplace $::auto_path $libPos $libPos $libDir]
	  } else {
	    lappend ::auto_path $libDir
	  }
	  set ::iwidgets::library $libDir
	  set IwidgetsOK 1
	} else {
	  append errMsg "\nError in iwidgets.tcl file: $err"
	}
      }
    } else {
      append errMsg "\nCould not find in-place versions of the Iwidgets files\n"
      append errMsg "Looked at: $iwidgetsSrcDir\n"
      append errMsg "and: $iwidgetsBuildDir\n"
    }

  }
  return $IwidgetsOK
}

# ------------------------------------------------------------------
@


1.7
log
@	* library/session.tcl (session_save): Save breakpoints.
	(SESSION_serialize_bps): New proc.
	(SESSION_recreate_bps): New proc.
	(session_load): Recreate breakpoints.
	* library/util.tcl (bp_exists): Expect user specification in
	breakpoint info.
	* library/srctextwin.itb (SrcTextWin::showBPBalloon): Expect user
	specification in breakpoint info.
	* library/gdbevent.itb (BreakpointEvent::_init): Initialize
	_user_specification.
	(BreakpointEvent::get): Handle user_specification.
	* library/gdbevent.ith (BreakpointEvent): Added
	_user_specification field.
	* library/bpwin.itb (BpWin::bp_store): Expect user specification
	and use it when saving.
	(BpWin::bp_type): Expect user specification.
	* generic/gdbtk-bp.c (BREAKPOINT_IS_WATCHPOINT): New macro.
	(gdb_get_breakpoint_info): Added `user specification' to result.
@
text
@d240 1
a240 1
					    itcl iwidgets*]]
d261 1
a261 1
					      itcl iwidgets*]]
d270 1
a270 1
						share iwidgets*]]
@


1.6
log
@        * gdbtk.c (gdbtk_init): Include the command "warp_pointer"
        for all platforms. Used for testing ONLY.

        * util.tcl (gdbtk_read_defs): If there is an error reading
        the testsuite definition file, print the error message to
        stderr, not stdout. This will allow tcl to know that an error
        has occurred.
        (find_iwidgets_library): Make it work for running testsuites
        from installed directory.

        * main.tcl: If we failed to find iwidgets, check if the
        testsuite is running. If it is running, do not pop up
        a dialog box: just print out the error and exit.
        Initialize _test(verbose) for the testsuite.
@
text
@d178 1
a178 1
      ignore_count commands cond thread hit_count
@


1.5
log
@2000-10-23  Fernando Nasser  <fnasser@@cygnus.com>

        * util.tcl (find_iwidgets_library): Use the directories that were
        actually searched in the error message.
@
text
@d157 1
a157 1
      puts stdout "cannot load defs files: $errTxt\ntry setting DEFS"
d262 12
a273 1
    
a275 2
      set initFile [file join [lindex $iwidgetsBuildDir 0] \
		      $::tcl_platform(platform) iwidgets.tcl]
@


1.4
log
@2000-06-06  Fernando Nasser  <fnasser@@cygnus.com>

        * util.tcl (find_iwidgets_library): Add missing global declaration
        which caused a stack trace instead of the proper error message.
@
text
@d285 2
a286 4
      append errMsg "Looked at: [file join [file dirname\
                     [file dirname $::tcl_library]] itcl iwidgets*]\n"
      append errMsg "and: [file join [file dirname \
                    [info nameofexecutable]] itcl iwidgets*]\n"
@


1.3
log
@Follow links from the gdb the user ran to the actual executable, so
that you can still find all the Tcl support files.
@
text
@d228 1
@


1.2
log
@2000-03-10  James Ingham  <jingham@@leda.cygnus.com>

	* util.tcl (keep_raised): For some reason raising a window, then
	deiconifying it is MUCH faster on "e" & WindowMaker under XFree.
	Go figure.  Other WM's don't seem to care, so do it this way...
	* managedwin.itb (ManagedWin::reveal): Ditto...
@
text
@d247 7
@


1.1
log
@Initial revision
@
text
@d33 1
a34 1
    raise $top
@


1.1.1.1
log
@import insight-2000-02-04 snapshot (2nd try)
@
text
@@
