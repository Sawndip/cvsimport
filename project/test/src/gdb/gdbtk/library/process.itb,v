head	1.13;
access;
symbols
	insight_7_6-2013-04-10-branchpoint:1.13
	gdb_7_6-branch:1.13.0.18
	gdb_7_5-branch:1.13.0.16
	gdb_7_4-branch:1.13.0.14
	gdb_7_3-branch:1.13.0.12
	gdb_7_1-branch:1.13.0.10
	gdb_7_0-branch:1.13.0.8
	arc-sim-20090309:1.13
	arc-insight_6_8-branch:1.13.0.6
	arc-insight_6_8-branchpoint:1.13
	insight_6_8-branch:1.13.0.4
	insight_6_8-branchpoint:1.13
	gdb_6_8-branch:1.13.0.2
	insight_6_6-20070208-release:1.12
	gdb_6_6-branch:1.12.0.4
	gdb_6_6-2006-11-15-branchpoint:1.12
	insight_6_5-20061003-release:1.12
	gdb_6_5-branch:1.12.0.2
	gdb_6_5-2006-05-14-branchpoint:1.12
	gdb-csl-gxxpro-6_3-branch:1.11.0.8
	gdb-csl-gxxpro-6_3-branchpoint:1.11
	gdb_6_4-branch:1.11.0.6
	gdb_6_4-2005-11-01-branchpoint:1.11
	gdb_6_1-2004-04-05-release:1.11
	gdb_6_1-branch:1.11.0.4
	gdb_6_1-2004-03-01-gmt-branchpoint:1.11
	gdb_6_0-2003-10-04-release:1.11
	gdb_6_0-branch:1.11.0.2
	gdb_6_0-2003-06-23-branchpoint:1.11
	gdb_5_3-2002-12-12-release:1.9
	gdb_5_3-branch:1.9.0.2
	gdb_5_3-2002-09-04-branchpoint:1.9
	gdb_5_2_1-2002-07-23-release:1.7
	gdb_5_2-2002-04-29-release:1.7
	gdb_5_2-branch:1.7.0.2
	gdb_5_2-2002-03-03-branchpoint:1.7
	gdb_5_1_1-2002-01-24-release:1.4
	cygnus_cvs_20020108_pre:1.7
	gdb_5_1_0_1-2002-01-03-branch:1.4.0.8
	gdb_5_1_0_1-2002-01-03-branchpoint:1.4
	gdb_5_1-2001-11-21-release:1.4
	gdb_s390-2001-09-26-branch:1.4.0.6
	gdb_s390-2001-09-26-branchpoint:1.4
	gdb_5_1-2001-07-29-branch:1.4.0.4
	gdb_5_1-2001-07-29-branchpoint:1.4
	dberlin-typesystem-branch:1.4.0.2
	dberlin-typesystem-branchpoint:1.4
	insight-precleanup-2001-01-01:1.1.1.1
	gdb_5_0-2000-05-19-release:1.1.1.1
	gdb_4_18_2-2000-05-18-release:1.1.1.1
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.1
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.1
	gdb_5_0-2000-04-10-branch:1.1.1.1.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1.1.1
	repo-unification-2000-02-06:1.1.1.1
	insight-2000-02-04:1.1.1.1
	SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.13
date	2008.02.09.01.23.42;	author kseitz;	state Exp;
branches;
next	1.12;

1.12
date	2005.12.23.18.26.50;	author eliz;	state Exp;
branches;
next	1.11;

1.11
date	2003.03.27.18.02.08;	author kseitz;	state Exp;
branches;
next	1.10;

1.10
date	2002.10.15.21.19.51;	author hunt;	state Exp;
branches;
next	1.9;

1.9
date	2002.06.07.09.22.44;	author hunt;	state Exp;
branches;
next	1.8;

1.8
date	2002.03.05.22.22.19;	author hunt;	state Exp;
branches;
next	1.7;

1.7
date	2001.11.05.19.15.17;	author hunt;	state Exp;
branches;
next	1.6;

1.6
date	2001.08.29.00.23.30;	author kseitz;	state Exp;
branches;
next	1.5;

1.5
date	2001.08.28.22.36.40;	author kseitz;	state Exp;
branches;
next	1.4;

1.4
date	2001.06.04.15.49.53;	author kseitz;	state Exp;
branches;
next	1.3;

1.3
date	2001.05.31.20.32.58;	author kseitz;	state Exp;
branches;
next	1.2;

1.2
date	2001.05.31.15.21.40;	author kseitz;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.07.00.19.42;	author jsm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.07.00.19.42;	author jsm;	state Exp;
branches;
next	;


desc
@@


1.13
log
@        * library/main.tcl: Add gdbtk_platform definitions.
        * library/attachdlg.itb (list_pids): Use gdbtk_platform
        instead of tcl_platform.
        * library/bpwin.itb (build_win): Likewise.
        (_bp_add): Likewise.
        (_bp_modify): Likewise.
        * library/download.itb (download_it): Likewise.
        * library/globalpref.itb (_build_win): Likewise.
        * library/helpviewer.tcl (open_help): Likewise.
        * library/interface.tcl (gdbtk_tcl_query): Likewise.
        (show_warning): Likewise.
        (open_file): Likewise.
        (run_executable): Likewise.
        * library/managedwin.itb (reveal): Likewise.
        (_create): Likewise.
        * library/prefs.tcl (pref_read): Likewise.
        (pref_set_defaults): Likewise.
        (pref_set_colors): Likewise.
        * library/session.tcl (_exe_name): Likewise.
        * library/srcbar.itcl (_update_file_menu): Likewise.
        (create_run_menu): Likewise.
        * library/srctextwin.itb (_mtime_changed): Likewise.
        (LoadFromCache): Likewise.
        * library/targetselection.itb (default_port): Likewise.
        (build_win): Likewise.

        * library/memwin.itb (build_win): Remove unused tcl_platform
        declaration.
        * library/pluginwin.itcl (enable_ui): Likewise.
        * library/process.itb (build_win): Likewise.
        * library/srcbar.itcl (enable_ui): Likewise.
        * library/srcwin.itb (location): Likewise.
        * library/stackwin.itb (build_win): Likewise.
        * library/tdump.tcl (build_win): Likewise.
@
text
@# Process window for Insight.
# Copyright (C) 1998, 1999, 2001, 2002, 2008 Red Hat, Inc.
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License (GPL) as published by
# the Free Software Foundation; either version 2 of the License, or (at
# your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.


# ----------------------------------------------------------------------
# Implements a process window with a list of threads, tasks, and/or
# processes to debug.
#
# ----------------------------------------------------------------------

itcl::body ProcessWin::constructor {args} {

  window_name "Processes"
  gdbtk_busy
  build_win
  gdbtk_idle

  # Add hooks for this object
  add_hook gdb_no_inferior_hook [code $this idle]
}


# ------------------------------------------------------------------
#  METHOD:  build_win - build the main process window
# ------------------------------------------------------------------
itcl::body ProcessWin::build_win {} {

  itk_component add slbox {
    iwidgets::scrolledlistbox $itk_interior.slbox \
      -background $::Colors(bg) \
      -selectbackground $::Colors(sbg) -selectforeground $::Colors(sfg) \
      -textfont global/fixed \
      -exportselection false \
      -selectioncommand [code $this change_context]
  } {}
  [$itk_component(slbox) component listbox] configure \
    -bg $::Colors(textbg) -fg $::Colors(textfg)
  update dummy

  pack $itk_component(slbox) -side left -expand yes -fill both
}


# ------------------------------------------------------------------
#  METHOD:  update - update widget when something changes
# ------------------------------------------------------------------
itcl::body ProcessWin::update {event} {
  if {!$protect_me} {

    $itk_component(slbox) delete 0 end
    if {[catch {gdb_cmd "info thread"} threads]} {
      # failed.  leave window blank
      return
    }

    set threads [split $threads \n]
    debug "processWin update: \n$threads"
    if {[llength $threads] == 0} {
      # no processes/threads listed.
      return
    }
    
    # insert each line one at a time
    set active -1
    set num_threads 0
    foreach line $threads {
      # Active line starts with "*"
      if {[string index $line 0] == "*"} {
	# strip off leading "*"
	set line " [string trimleft $line "*"]"
	set active $num_threads
      }
      # scan for GDB ID number at start of line
      if {[scan $line "%d" id($num_threads)] == 1} {
	$itk_component(slbox) insert end $line
	incr num_threads
      }
    }
    
    # highlight the active thread
    if {$active >= 0} {
      set active_thread $id($active)
      $itk_component(slbox) selection set $active
      $itk_component(slbox) see $active
    }
  }
}

# ------------------------------------------------------------------
#  METHOD:  change_context - change the current context (active thread)
#        This method is currently ONLY called from the mouse binding
# ------------------------------------------------------------------
itcl::body ProcessWin::change_context {} {
  if {!$Running && [$itk_component(slbox) size] != 0} {
    gdbtk_busy
    set sel [$itk_component(slbox) curselection]
    set idnum $id($sel)
    #debug "change_context to line $sel  id=$idnum"
    catch {gdb_cmd "thread $idnum"}
    # Run idle hooks and cause all widgets to update
    set protect_me 1
    gdbtk_update
    set protect_me 0
    gdbtk_idle
  }
}

# ------------------------------------------------------------------
#  DESTRUCTOR - destroy window containing widget
# ------------------------------------------------------------------
itcl::body ProcessWin::destructor {} {
  remove_hook gdb_no_inferior_hook [code $this no_inferior]
}

# ------------------------------------------------------------------
#  METHOD:  reconfig - used when preferences change
# ------------------------------------------------------------------
itcl::body ProcessWin::reconfig {} {
  destroy $itk_interior.s
  if {[winfo exists $itk_interior.slbox]} { destroy $itk_interior.slbox }
  build_win
}

# ------------------------------------------------------------------
#  METHOD:  busy - BusyEvent handler
#
#        This method should accomplish blocking
#        - clicks in the window
#        - change mouse pointer
# ------------------------------------------------------------------
itcl::body ProcessWin::busy {event} {
  set Running 1
  cursor watch
}

# ------------------------------------------------------------------
#  METHOD:  idle - handle IdleEvent
# ------------------------------------------------------------------
itcl::body ProcessWin::idle {event} {
  set Running 0
  cursor {}
}

# ------------------------------------------------------------------
#  METHOD:  cursor - set the window cursor
#        This is a convenience method which simply sets the mouse
#        pointer to the given glyph.
# ------------------------------------------------------------------
itcl::body ProcessWin::cursor {glyph} {
  $_top configure -cursor $glyph
}
@


1.12
log
@	* library/attachdlg.itb:
	* library/actiondlg.tcl:
	* library/about.tcl:
	* library/ehandler.itb:
	* library/editor.tcl:
	* library/download.ith:
	* library/download.itb:
	* library/debugwin.ith:
	* library/debugwin.itb:
	* library/cspref.ith:
	* library/cspref.itb:
	* library/console.ith:
	* library/console.itb:
	* library/browserwin.ith:
	* library/browserwin.itb:
	* library/bpwin.ith:
	* library/bpwin.itb:
	* library/blockframe.ith:
	* library/managedwin.ith:
	* library/managedwin.itb:
	* library/main.tcl:
	* library/locals.tcl:
	* library/ipcpref.ith:
	* library/ipcpref.itb:
	* library/ipc.tcl:
	* library/interface.tcl:
	* library/helpviewer.tcl:
	* library/globalpref.ith:
	* library/globalpref.itb:
	* library/gdbwin.ith:
	* library/gdbtoolbar.itcl:
	* library/gdbmenubar.itcl:
	* library/gdbevent.ith:
	* library/gdbevent.itb:
	* library/embeddedwin.ith:
	* library/ehandler.ith:
	* library/srcwin.itb:
	* library/srctextwin.ith:
	* library/srctextwin.itb:
	* library/srcpref.ith:
	* library/srcpref.itb:
	* library/srcbar.itcl:
	* library/session.tcl:
	* library/regwin.ith:
	* library/regwin.itb:
	* library/process.ith:
	* library/process.itb:
	* library/prefs.tcl:
	* library/pluginwin.itcl:
	* library/modal.tcl:
	* library/memwin.ith:
	* library/memwin.itb:
	* library/mempref.ith:
	* library/mempref.itb:
	* library/watch.tcl:
	* library/watch.tcl:
	* library/warning.tcl:
	* library/vartree.ith:
	* library/vartree.itb:
	* library/util.tcl:
	* library/tracedlg.tcl:
	* library/toplevelwin.ith:
	* library/tfind_args.tcl:
	* library/tdump.tcl:
	* library/targetselection.ith:
	* library/targetselection.itb:
	* library/stackwin.ith:
	* library/stackwin.itb:
	* library/srcwin.ith:
@
text
@d2 1
a2 1
# Copyright (C) 1998, 1999, 2001, 2002 Red Hat, Inc.
a36 1
  global tcl_platform
@


1.11
log
@        From Nick Kelsey <nickk@@ubicom.com>:
        * process.itb (build_win): Removed ide_sizebox instantiation that is
        no longer required and is causing errors for win hosts.
        * tdump.tcl (build_win): Ditto.
        * locals.tcl (build_win): Removed ide_sizebox instantiation that is
        no longer required and already commented out.
        * regwin.itb (build_win): Ditto.
        * srcwin.itb (constructor): Ditto.
        * stackwin.itb (constructor): Ditto.
        * watch.tcl (constructor): Ditto.
@
text
@d2 1
a2 1
# Copyright 1998, 1999, 2001, 2002 Red Hat, Inc.
@


1.10
log
@2002-10-15  Martin M. Hunt  <hunt@@redhat.com>

	* library/* : auto_mkindex cannot rebuild
	tclIndex because it does not recognize the namespace
	import in main.tcl.  To get it to work again, rename the
	following:
		body -> itcl::body
		configbody -> itcl::configbody
		class -> itcl::class
@
text
@a38 10
  if {$tcl_platform(platform) == "windows"} {
    set hsmode static
    set vsmode static
    ide_sizebox $itk_interior.sbox
    place $itk_interior.sbox -relx 1.0 -rely 1.0 -anchor se
  } else {
    set hsmode dynamic
    set vsmode dynamic
  }

a130 1
  if {[winfo exists $itk_interior.sbox]} { destroy $itk_interior.sbox }
@


1.9
log
@2002-06-07  Martin M. Hunt  <hunt@@redhat.com>

	* library/prefs.tcl (pref_set_colors): New function.  Set up colors
	from Windows system colors or X resource database. Save in array.
	(pref_set_defaults): Remove gdb/font/normal_fg, etc.
	(pref_read): Call pref_set_colors.

	* library/main.tcl: Remove call to "tix resetoptions TixGray".

	* library/bpwin.itb, library/browserwin.itb, library/console.itb,
	library/globalpref.itb, library/memwin.itb, library/process.itb,
	library/regwin.itb, library/srcpref.itb, library/srctextwin.itb,
	library/stackwin.itb, library/tdump.tcl, library/tracedlg.tcl,
	library/variables.tcl: Replace calls to [pref get gdb/fonts/*]
	for colors with references to Color array. Remove all tixOptions calls.
	Fix up colors as necessary.
@
text
@d21 1
a21 1
body ProcessWin::constructor {args} {
d36 1
a36 1
body ProcessWin::build_win {} {
d68 1
a68 1
body ProcessWin::update {event} {
d114 1
a114 1
body ProcessWin::change_context {} {
d132 1
a132 1
body ProcessWin::destructor {} {
d139 1
a139 1
body ProcessWin::reconfig {} {
d153 1
a153 1
body ProcessWin::busy {event} {
d161 1
a161 1
body ProcessWin::idle {event} {
d171 1
a171 1
body ProcessWin::cursor {glyph} {
@


1.8
log
@2002-03-05  Martin M. Hunt  <hunt@@redhat.com>

	* library/prefs.tcl (pref_read): If a preference specifies
	"src-font", substitute "global/fixed".
	(pref_set_defaults): Change defaults from "src-font" to
	"global/fixed". Do not create font object "src-font". Do
	not add hook to trace its changes.
	(pref_src-font_trace): Remove.

	* library/console.itb (Console::_update_option): Remove
	font update because this happens automatically.

	* library/globalpref.itb: No need to set
	changed flag for fonts; updates happen automatically
	when prefs are updated.

	* library/bpwin.itb: Replaced src-font with global/fixed.
	* library/browserwin.itb: Ditto.
	* library/mempref.itb: Ditto.
	* library/memwin.itb: Ditto.
	* library/process.itb: Ditto.
	* library/regwin.itb: Ditto.
	* library/srcbar.itcl: Ditto.
	* library/srcpref.itb: Ditto.
	* library/srctextwin.itb: Ditto.
	* library/srcwin.itb: Ditto.
	* library/stackwin.itb: Ditto.
	* library/tdump.tcl: Ditto.
	* library/tracedlg.tcl: Ditto.
	* library/variables.tcl: Ditto.
	* library/watch.tcl: Ditto.
@
text
@d51 2
a52 3
      -background [pref get gdb/font/normal_bg] \
      -selectbackground green \
      -selectforeground black \
d58 1
a58 1
    -bg [pref get gdb/font/normal_bg]
@


1.7
log
@2001-11-05  Martin M. Hunt  <hunt@@redhat.com>

	* library/stackwin.itb (StcakWin::reconfig): Destroy sbox
	if it exists.

	* library/process.itb (ProcessWin::reconfig): Destroy sbox
	if it exists. This fixes reconfig failures on Windows. Also
	destroy slbox.

	* library/bpwin.itb (BpWin::reconfig): Destroy sbox if
	it exists.This fixes reconfig failures on Windows. Also
	destroy sf

	* library/tdump.tcl (TdumpWin::reconfig): Delete sbox
	and stext then rebuild window.
@
text
@d2 1
a2 1
# Copyright 1998, 1999, 2001 Red Hat, Inc.
d54 1
a54 1
      -textfont src-font \
@


1.6
log
@	* library/bpwin.itb (bp_select): Use standard preferences
	for selection fg & bg, not tixOption database.

	* process.itb, tracedlg.tcl: Remove all traces of those
	three evil little letters, "t", "i", "x".
@
text
@d142 2
@


1.5
log
@	* library/process.ith (top): Remove unused protected variable.
	Use GDBWin::_top instead.
	(lb): Remove unused variable.
	(change_context): Remove parameter. It's not needed.
	* library/process.itb (constructor): Don't set the variable
	"top". It isn't needed. GDBWin has this information.
	(buildwin): Get rid of tixScrolledListbox. Use
	iwidgets::scrolledlistbox instead.
	Loose the balloon help. It annoys more than helps.
	(update): Use new scrolledlistbox component.
	Split the list of threads BEFORE doing llength. Someone
	shoot me if this has to be fixed one more time...
	(change_context): Update definition and usage.
	(cursor): Use GDBWin::_top instead of our own private copy.
@
text
@d37 1
a37 1
  global tixOption tcl_platform
a39 1
    #tixScrolledListBox $itk_interior.s -scrollbar both -sizebox 1
a44 1
    #tixScrolledListBox $itk_interior.s -scrollbar auto
@


1.4
log
@	* library/interface.tcl (gdb_update_hook): Mark as deprecated.
	(gdbtk_update): Dispatch and UpdateEvent, too.
	* library/ehandler.ith (update): New event handler.
	* library/gdbevent.ith (UpdateEvent): New event.
	* library/gdbevent.itb (UpdateEvent::constructor): New method.
	(UpdateEvent::get): New method.
	* library/kod.ith (udpate): Match event handler definition.
	* library/kod.itb (update): Ditto.
	(build_win): Pass dummy argument to update method.
	(top): Ditto.
	(up): Ditto.
	(set_variable): Ditto.
	* library/memwin.ith (update): Match event handler definition.
	* library/memwin.itb (update): Ditto.
	(constructor): Remove gdb_update_hook.
	(destructor): Ditto.
	* library/process.ith (update): Match event handler definition.
	* library/process.itb (update): Ditto.
	(constructor): Remove gdb_update_hook.
	(destructor): Ditto.
	(build_win): Pass dummy argument to update method.
	* library/regwin.ith (update): Match event handler definition.
	* library/regwin.itb (update): Ditto.
	(constructor): Remove gdb_update_hook.
	(destructor): Ditto.
	(build_win): Pass dummy argument to update method.
	(but3): Ditto.
	(unedit): Ditto.
	* library/stackwin.ith (update): Match event handler definition.
	* library/stackwin.itb (update): Ditto.
	(constructor): Remove gdb_update_hook.
	(destructor): Ditto.
	(build_win): Pass dummy argument to update method.
	* library/tdump.tcl (update): Match event handler definition.
	(constructor): Remove gdb_update_hook.
	(destructor): Ditto.
	(build_win): Pass dummy argument to update method.
	* library/variables.tcl (update): Match event handler definition.
	(build_win): Pass dummy argument to update method.
	* library/locals.tcl (update): Match event handler definition.
	(constructor): Pass dummy argument to update method.
	* library/watch.tcl (update): Match event handler definition.
	Pass dummy argument to VariableWin::update.
	(add): Pass dummy argument to update method.
	* library/srcwin.ith (update): New method.
	(update_hook_init): Remove.
	* library/srcwin.itb (update): New method.
	(constructor): Remove gdb_update_hook.
	(destructor): Ditto.
	* tclIndex: Regenerate.
@
text
@d1 2
a2 2
# Process window for GDBtk.
# Copyright 1998, 1999 Cygnus Solutions
a21 1
  set top [winfo toplevel $itk_interior]
d38 1
d40 5
a44 1
    tixScrolledListBox $itk_interior.s -scrollbar both -sizebox 1
d46 3
a48 1
    tixScrolledListBox $itk_interior.s -scrollbar auto
d50 12
a61 6
  set lb [$itk_interior.s subwidget listbox]
  $lb configure -selectmode single -bg $tixOption(input1_bg) \
    -selectbackground green \
    -selectforeground black \
    -font src-font          \
    -exportselection false
a62 5
  balloon register $lb "Click on a line to change context"

  # bind mouse button 1 to change the current context
  bind $lb <ButtonPress-1> [code $this change_context %y]
  bind $lb <ButtonRelease-1> break
d64 1
a64 1
  pack $itk_interior.s -side left -expand yes -fill both
d74 1
a74 1
    $lb delete 0 end
d80 2
a81 1
    #debug "processWin update: \n$threads"
d90 1
a90 1
    foreach line [split $threads \n] {
d99 1
a99 1
	$lb insert end $line
d107 2
a108 2
      $lb selection set $active
      $lb see $active
d117 2
a118 2
body ProcessWin::change_context {y} {
  if {!$Running && [$lb size] != 0} {
d120 3
a122 3
    set linenum [$lb nearest $y]
    set idnum $id($linenum)
    #debug "change_context to line $linenum  id=$idnum"
d173 1
a173 1
  $top configure -cursor $glyph
@


1.3
log
@	* library/interface.tcl (gdb_idle_hook): Mark as deprecated.
	(gdbtk_idle): Dispatch an IdleEvent. gdb_idle_hook is gone.
	* library/ehandler.ith (idle): New event handler.
	* library/gdbevent.ith (IdleEvent): New event.
	* library/console.ith (idle): Match event handler definition.
	* library/console.itb (idle): Ditto.
	(constructor): Remove gdb_idle_hook.
	(destructor): Ditto.
	* library/kod.ith (idle): Match event handler definition.
	* library/kod.itb (idle): Ditto.
	(constructor): Remove gdb_idle_hook.
	(destructor): Ditto.
	* library/memwin.ith (idle): Match event handler definition.
	* library/memwin.itb (idle): Ditto.
	(constructor): Remove gdb_idle_hook.
	(destructor): Ditto.
	* library/pluginwin.itcl (stopped): Rename to "idle" and
	match event handler definition.
	Fix misleading comments.
	* library/process.ith (idle): Match event handler definition.
	* library/process.itb (idle): Ditto.
	(constructor): Remove gdb_idle_hook.
	(destructor): Ditto.
	* library/regwin.ith (idle): Match event handler definition.
	* library/regwin.itb (idle): Ditto.
	(constructor): Remove gdb_idle_hook.
	(destructor): Ditto.
	* library/srcbar.itcl (idle): New method.
	(constructor): Remove gdb_idle_hook.
	(destructor): Ditto.
	* library/srcwin.ith (idle): Match event handler definition.
	* library/srcwin.itb (idle): Ditto.
	(constructor): Remove gdb_idle_hook.
	(destructor): Ditto.
	* library/stackwin.ith (idle): Match event handler definition.
	* library/stackwin.itb (idle): Ditto.
	(constructor): Remove gdb_idle_hook.
	(destructor): Ditto.
	* library/variables.tcl (idle): Match event handler definition.
	(constructor): Remove gdb_idle_hook.
	(destructor): Ditto.
	* library/plugins/rhabout/rhabout.itcl (stopped): Rename
	to "idle" and match new event handler definition.
	* library/tclIndex: Regenerated.
@
text
@a29 1
  add_hook gdb_update_hook [code $this update]
d50 1
a50 1
  update
d64 1
a64 1
body ProcessWin::update {} {
a127 1
  remove_hook gdb_update_hook [code $this update]
@


1.2
log
@	* library/interface.tcl (gdb_busy_hook): Deprecate.
	(gdbtk_busy): Create and dispatch a BusyEvent instead
	of running hooks.
	* library/ehandler.ith (busy): New event handler.
	* library/gdbevent.ith (BusyEvent): New event class.
	* library/console.ith: Inherit from GDBEventHandler.
	(busy): Match event handler definition.
	* library/console.itb (busy): Ditto.
	(constructor): Remove gdb_busy_event.
	(destructor): Ditto.
	* library/kod.ith (busy): Match event handler definition.
	* library/kod.itb (busy): Ditto.
	(constructor): Remove gdb_busy_hook.
	(destructor): Ditto.
	* library/memwin.ith (busy): Match event handler definition.
	* library/memwin.itb (busy): Ditto.
	(constructor): Remove gdb_busy_hook.
	(destructor): Ditto.
	* library/pluginwin.itcl (running): Rename to "busy" and
	match event handler definition.
	(consturctor): Remove gdb_busy_hook.
	(destructor): Ditto.
	* library/process.ith (busy): Match event handler definition.
	* library/process.itb (busy): Ditto.
	(constructor): Remove gdb_busy_hook.
	(destructor): Ditto.
	* library/regwin.ith (busy): Match event handler definition.
	* library/regwin.itb (busy): Ditto.
	(constructor): Remove gdb_busy_hook.
	(destructor): Ditto.
	* library/srcbar.itcl (constructor): Remove gdb_busy_hook.
	(destructor): Ditto.
	(busy): New method.
	* library/srcwin.ith (busy): Match event handler definition.
	* library/srcwin.itb (busy): Ditto.
	Only do the "busy" stuff if do_updates is set.
	(toggle_updates): Remove gdb_busy_hook.
	(constructor): Ditto.
	(destructor): Ditto.
	* library/stackwin.ith (busy): Match event handler definition.
	* library/stackwin.itb (busy): Ditto.
	(constructor): Remove gdb_busy_hook.
	(destructor): Ditto.
	* library/variables.tcl (constructor): Ditto.
	(destructor): Ditto.
	(disable_ui): Rename to "busy" and match event handler
	definition.
	* library/plugins/rhabout/rhabout.itcl (running): Rename
	to "busy" and match new event handler definition.
	* library/tclIndex: Regenerated.
@
text
@a31 1
  add_hook gdb_idle_hook [code $this idle]
a129 1
  remove_hook gdb_idle_hook [code $this idle]
d154 1
a154 1
#  METHOD:  idle - idle hook.  Run when the target is not running
d156 1
a156 1
body ProcessWin::idle {} {
@


1.1
log
@Initial revision
@
text
@a30 1
  add_hook gdb_busy_hook [code $this busy]
a131 1
  remove_hook gdb_busy_hook [code $this busy]
d144 1
a144 1
#  METHOD:  busy - gdb_busy_hook
d150 1
a150 1
body ProcessWin::busy {} {
@


1.1.1.1
log
@import insight-2000-02-04 snapshot (2nd try)
@
text
@@
