head	1.37;
access;
symbols
	insight_7_6-2013-04-10-branchpoint:1.37
	gdb_7_6-branch:1.37.0.4
	gdb_7_5-branch:1.37.0.2
	gdb_7_4-branch:1.36.0.14
	gdb_7_3-branch:1.36.0.12
	gdb_7_1-branch:1.36.0.10
	gdb_7_0-branch:1.36.0.8
	arc-sim-20090309:1.36
	arc-insight_6_8-branch:1.36.0.6
	arc-insight_6_8-branchpoint:1.36
	insight_6_8-branch:1.36.0.4
	insight_6_8-branchpoint:1.36
	gdb_6_8-branch:1.36.0.2
	insight_6_6-20070208-release:1.34
	gdb_6_6-branch:1.34.0.2
	gdb_6_6-2006-11-15-branchpoint:1.34
	insight_6_5-20061003-release:1.32
	gdb_6_5-branch:1.32.0.2
	gdb_6_5-2006-05-14-branchpoint:1.32
	gdb-csl-gxxpro-6_3-branch:1.30.0.4
	gdb-csl-gxxpro-6_3-branchpoint:1.30
	gdb_6_4-branch:1.30.0.2
	gdb_6_4-2005-11-01-branchpoint:1.30
	gdb_6_1-2004-04-05-release:1.28
	gdb_6_1-branch:1.28.0.2
	gdb_6_1-2004-03-01-gmt-branchpoint:1.28
	gdb_6_0-2003-10-04-release:1.25.2.2
	gdb_6_0-branch:1.25.0.2
	gdb_6_0-2003-06-23-branchpoint:1.25
	gdb_5_3-2002-12-12-release:1.18
	gdb_5_3-branch:1.18.0.2
	gdb_5_3-2002-09-04-branchpoint:1.18
	gdb_5_2_1-2002-07-23-release:1.14
	gdb_5_2-2002-04-29-release:1.14
	gdb_5_2-branch:1.14.0.2
	gdb_5_2-2002-03-03-branchpoint:1.14
	gdb_5_1_1-2002-01-24-release:1.10
	cygnus_cvs_20020108_pre:1.14
	gdb_5_1_0_1-2002-01-03-branch:1.10.0.6
	gdb_5_1_0_1-2002-01-03-branchpoint:1.10
	gdb_5_1-2001-11-21-release:1.10
	gdb_s390-2001-09-26-branch:1.10.0.4
	gdb_s390-2001-09-26-branchpoint:1.10
	gdb_5_1-2001-07-29-branch:1.10.0.2
	gdb_5_1-2001-07-29-branchpoint:1.10
	dberlin-typesystem-branch:1.9.0.2
	dberlin-typesystem-branchpoint:1.9
	insight-precleanup-2001-01-01:1.4
	gdb_5_0-2000-05-19-release:1.3
	gdb_4_18_2-2000-05-18-release:1.3
	gdb_4_95_1-2000-05-11-snapshot:1.3
	gdb_4_95_0-2000-04-27-snapshot:1.3
	gdb_5_0-2000-04-10-branch:1.3.0.2
	gdb_5_0-2000-04-10-branchpoint:1.3
	repo-unification-2000-02-06:1.1.1.1
	insight-2000-02-04:1.1.1.1
	SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.37
date	2012.05.25.10.34.32;	author rosch;	state Exp;
branches;
next	1.36;

1.36
date	2008.03.03.23.25.03;	author kseitz;	state Exp;
branches;
next	1.35;

1.35
date	2008.02.09.01.23.42;	author kseitz;	state Exp;
branches;
next	1.34;

1.34
date	2006.09.19.18.39.38;	author kseitz;	state Exp;
branches;
next	1.33;

1.33
date	2006.08.25.15.55.23;	author kseitz;	state Exp;
branches;
next	1.32;

1.32
date	2005.12.23.18.26.50;	author eliz;	state Exp;
branches;
next	1.31;

1.31
date	2005.11.29.11.09.41;	author ams;	state Exp;
branches;
next	1.30;

1.30
date	2004.08.27.23.13.14;	author hunt;	state Exp;
branches;
next	1.29;

1.29
date	2004.04.05.20.36.46;	author hunt;	state Exp;
branches;
next	1.28;

1.28
date	2003.12.11.22.19.15;	author jimb;	state Exp;
branches;
next	1.27;

1.27
date	2003.07.29.22.08.10;	author hunt;	state Exp;
branches;
next	1.26;

1.26
date	2003.07.02.22.19.29;	author hunt;	state Exp;
branches;
next	1.25;

1.25
date	2003.06.13.19.30.49;	author hunt;	state Exp;
branches
	1.25.2.1;
next	1.24;

1.24
date	2003.02.10.09.47.52;	author hunt;	state Exp;
branches;
next	1.23;

1.23
date	2003.02.04.07.43.32;	author hunt;	state Exp;
branches;
next	1.22;

1.22
date	2002.12.04.20.46.04;	author hunt;	state Exp;
branches;
next	1.21;

1.21
date	2002.11.11.22.29.24;	author hunt;	state Exp;
branches;
next	1.20;

1.20
date	2002.11.08.20.56.44;	author hunt;	state Exp;
branches;
next	1.19;

1.19
date	2002.11.06.20.45.54;	author hunt;	state Exp;
branches;
next	1.18;

1.18
date	2002.08.01.17.56.27;	author kseitz;	state Exp;
branches;
next	1.17;

1.17
date	2002.06.07.09.22.44;	author hunt;	state Exp;
branches;
next	1.16;

1.16
date	2002.06.01.06.37.10;	author hunt;	state Exp;
branches;
next	1.15;

1.15
date	2002.03.05.22.22.19;	author hunt;	state Exp;
branches;
next	1.14;

1.14
date	2001.10.04.15.01.36;	author tromey;	state Exp;
branches;
next	1.13;

1.13
date	2001.09.27.14.47.45;	author kseitz;	state Exp;
branches;
next	1.12;

1.12
date	2001.08.22.21.11.16;	author tromey;	state Exp;
branches;
next	1.11;

1.11
date	2001.08.09.20.43.54;	author kseitz;	state Exp;
branches;
next	1.10;

1.10
date	2001.07.26.16.11.17;	author jlarmour;	state Exp;
branches;
next	1.9;

1.9
date	2001.05.12.01.47.36;	author tromey;	state Exp;
branches;
next	1.8;

1.8
date	2001.04.05.00.04.28;	author hunt;	state Exp;
branches;
next	1.7;

1.7
date	2001.03.15.18.31.38;	author tromey;	state Exp;
branches;
next	1.6;

1.6
date	2001.01.19.14.24.54;	author fnasser;	state Exp;
branches;
next	1.5;

1.5
date	2001.01.03.15.13.16;	author fnasser;	state Exp;
branches;
next	1.4;

1.4
date	2000.11.30.22.37.29;	author tromey;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.04.00.17.47;	author jingham;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.28.01.59.40;	author jingham;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.07.00.19.42;	author jsm;	state Exp;
branches
	1.1.1.1;
next	;

1.25.2.1
date	2003.07.03.17.15.09;	author hunt;	state Exp;
branches;
next	1.25.2.2;

1.25.2.2
date	2003.07.29.22.11.09;	author hunt;	state Exp;
branches;
next	;

1.1.1.1
date	2000.02.07.00.19.42;	author jsm;	state Exp;
branches;
next	;


desc
@@


1.37
log
@2012-05-25  Roland Schwingel  <roland.schwingel@@onevision.com>

   * library/locals.tcl: Updated copyright.
   (reconfig): New method for getting prefs updates.
   * library/prefs.tcl: Updated copyright.
   (pref_read): Moved comment. Take color for changed
   fields from gdb/src/PC_TAG prefs value.
   (pref_set_defaults): Change default of
   PC_TAG color to a somewhat darker green.
   (pref_set_colors): Call pref_load_default in central place.
   (pref_set_option_db): Remove hard wired old color for
   changed values.
   * library/regwin.itb: Update copyright.
   (reconfig): Update highlight color of register table.
   * library/srcpref.itb: Update copyright.
   (_build_win): Change text of PC color chooser.
   (_apply): Update global changed fields color from PC_TAG color.
   * library/vartree.itb (update_var): use changed field color from
   global colors list.
   (_init_data): Remove local copy of changed vars color.
@
text
@# Local preferences functions for Insight.
# Copyright (C) 1997-2012 Red Hat, Inc.
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License (GPL) as published by
# the Free Software Foundation; either version 2 of the License, or (at
# your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.


# On STARTUP:
# 1. Options database (.Xdefaults on Unix  or ? on Windows) is read
# 2. GDB prefs file is read ("gdbtk.ini" on Windows; ".gdbtkinit" on Unix)
# 3. GDB init script is read
#
# Normally all preferences will be set in the prefs file, which is
# a generated file.  Hand-editing, if necessary, should be done to the
# GDB init script.
#
# when "save options" is selected, the contents of the
# preferences array is written out to the GDB prefs file.
#
# Usage:
#   pref_save
#   pref_read
# ----------------------------------------------------------------------
#

proc pref_read {} {
  global prefs_init_filename env gdb_ImageDir GDBTK_LIBRARY GDBStartup
  global gdbtk_platform

  if {[info exists env(HOME)]} {
    if {$gdbtk_platform(os) == "cygwin"} {
      set home [ide_cygwin_path to_win32 $env(HOME)]
    } else {
      set home $env(HOME)
    }
  } else {
    set home ""
  }

  if {$gdbtk_platform(platform) == "windows"} {
    set prefs_init_filename "gdbtk.ini"
  } else {
    set prefs_init_filename ".gdbtkinit"
  }

  if {!$GDBStartup(inhibit_prefs) \
      || [info exists env(INSIGHT_FORCE_READ_PREFERENCES)]} {
    set file_opened 0
    if {[file exists $prefs_init_filename]} {
      if {[catch {open $prefs_init_filename r} fd]} {
	dbug E "$fd"
	return
      }
      set file_opened 1
    } elseif {$home != ""} {
      set name [file join $home $prefs_init_filename]
      if {[file exists $name]} {
	if {[catch {open $name r} fd]} {
	  dbug E "$fd"
	  return
	}
	set prefs_init_filename $name
	set file_opened 1
      }
    }

    if {$file_opened == "1"} {
      set section gdb
      set version 0
      while {[gets $fd line] >= 0} {
	switch -regexp -- $line {
	  {^[ \t\n]*#.*} {
	    # Comment.  We recognize one magic comment that includes
	    # the version number.
	    if {[regexp -- "^# GDBtkInitVersion: (\[0-9\]+)\$" $line \
		   dummy v]} {
	      set version $v
	    }
	  }

	  {^[ \t\n]*$} {
	    ;# empty line; ignore it
	  }

	  {^[ \t\n]*\[.*\]} {
	    regexp {\[(.*)\]} $line match section
	  }

	  {^[ \t\n]*option.*} {
	    set line [string trimleft $line]
	    eval $line
	  }

	  default {
	    set a ""
	    set name ""
	    set val ""
	    regexp "\[ \t\n\]*\(.+\)=\(.+\)" $line a name val
	    if {$a == "" || $name == ""} {
	      dbug W "Cannot parse line: $line"
	    } else {
	      # Must unescape equal signs in val
	      set val [unescape_value $val $version]
	      if {$section == "gdb"} {
		pref setd gdb/$name $val
	      } elseif {$section == "global" && [regexp "^font/" $name]} {
		set name [split $name /]
		set f global/
		append f [join [lrange $name 1 end] /]
		if {[lsearch [font names] $f] == -1} {
		  # new font
		  eval define_font $f $val
		} else {
		  # existing font
		  pref set global/font/[join [lrange $name 1 end] /] $val
		}
	      } elseif {$section == "global"} {
		pref setd $section/$name $val
	      } else {
		# backwards compatibility. recognize old src-font name
		if {$val == "src-font"} {set val "global/fixed"}
		pref setd gdb/$section/$name $val
	      }
	    }
	  }
	}
      }
      close $fd
    } elseif {$home != ""} {
      set prefs_init_filename [file join $home $prefs_init_filename]
    }
    
    # now set global options
    set gdb_ImageDir [file join $GDBTK_LIBRARY [pref get gdb/ImageDir]]

  }

  # finally set colors, from system if possible
  if {[pref get gdb/use_color_schemes] != "1"} {
    pref_set_colors $home
  } else {
    # These colors are the same for all schemes
    global Colors
    set Colors(textfg) black
    set Colors(fg) black
    set Colors(sbg) \#4c59a5
    set Colors(sfg) white
    set_bg_colors
  }

  # Set color for changes.
  global Colors
  set Colors(change) [pref get gdb/src/PC_TAG]
}

# ------------------------------------------------------------------
#  PROC:  pref_save - save preferences to a file and delete window
# ------------------------------------------------------------------
proc pref_save {{win {}}} {
  global prefs_init_filename GDBStartup env

  if {!$GDBStartup(inhibit_prefs)
      || [info exists env(INSIGHT_FORCE_READ_PREFERENCES)]} {
    debug "pref_save $prefs_init_filename"

    if {[catch {open $prefs_init_filename w} fd]} {
      debug "ERROR: $fd"
      return
    }
    
    puts $fd "\# GDBtk Init file"
    puts $fd {# GDBtkInitVersion: 1}

    set plist [pref list]
    # write out global options
    puts $fd "\[global\]"
    foreach var $plist {
      set t [split $var /]
      if {[lindex $t 0] == "global"} {
	set x [join [lrange $t 1 end] /]
	set v [escape_value [pref get $var]]

	if {$x != "" && $v != ""} {
	  puts $fd "\t$x=$v"
	}
      }
    }

    # write out gdb-global options
    puts $fd "\[gdb\]"
    foreach var $plist {
      set t [split $var /]
      # We use the funny join/lreplace code because the session code
      # can generate a key where [lindex $t 2] is empty but there is
      # still stuff after that.  This happens because the session code
      # uses filenames, which can start with `/'.
      if {[lindex $t 0] == "gdb"
	  && [string compare [join [lreplace $t 0 1] /] ""] == 0} {
	set x [lindex $t 1]
	set v [escape_value [pref get $var]]
	if {$x != "" && $v != ""} {
	  puts $fd "\t$x=$v"
	}
      }
    }

    # now loop through all sections writing out values
    # FIXME: this is broken.  We should discover the list
    # dynamically.
    lappend secs load console src reg stack locals watch bp search \
      process geometry help browser kod window session mem bg ipc

    foreach section $secs {
      puts $fd "\[$section\]"
      foreach var $plist {
	set t [split $var /]
	if {[lindex $t 0] == "gdb" && [lindex $t 1] == $section} {
	  set x [join [lrange $t 2 end] /]
	  set v [escape_value [pref get $var]]
	  if {$x != "" && $v != ""} {
	    puts $fd "\t$x=$v"
	  }
	}
      }
    }
    close $fd
  }

  if {$win != ""} {
    $win delete
  }
}

# -------------------------------------------------------
#  PROC: escape_value - escape all equal signs for saving
#         prefs to a file
# -------------------------------------------------------
proc escape_value {val} {
  # We use a URL-style quoting.  We encode `=', `%', the `[]'
  # characters and newlines.  We use a cute trick here: we regsub in
  # command expressions which we then expand using subst.
  if {[info tclversion] >= 8.1} {
    set expr {([\[\]=%\n])}
  } else {
    set expr "(\[\]\[=%\n\])"
  }
  regsub -all -- $expr $val \
    {[format "%%%02x" [scan {\1} %c x; set x]]} newval
  return [subst -nobackslashes -novariables $newval]
}

# -------------------------------------------------------
#  PROC: unescape_value - unescape all equal signs for
#         reading prefs from a file.  VERSION is the version
#         number of the encoding.
#  version 0 only encoded `='.
#  version 1 correctly encoded more values
# -------------------------------------------------------
proc unescape_value {val version} {
  switch -exact -- $version {
    0 {
      # Old-style encoding.
      if {[regsub -all -- {!%} $val = newval]} {
	return $newval
      }
    }

    1 {
      # Version 1 uses URL encoding.
      regsub -all -- "%(..)" $val \
	{[format %c 0x\1]} newval
      return [subst -nobackslashes -novariables $newval]
    }

    default {
      error "Unknown encoding version $version"
    }
  }

  return $val  
}

# ------------------------------------------------------------------
#  PROC:  pref_set_defaults - set up default values
# ------------------------------------------------------------------
proc pref_set_defaults {} {
  global GDBTK_LIBRARY gdbtk_platform gdb_ImageDir
  debug

  # Gdb global defaults
  pref define gdb/ImageDir                images2
  set gdb_ImageDir [file join $GDBTK_LIBRARY [pref get gdb/ImageDir]]
  pref define gdb/font_cache              ""
  pref define gdb/mode                    0;     # 0 no tracing, 1 tracing enabled
  pref define gdb/control_target          1;     # 0 can't control target (EMC), 1 can
  pref define gdb/B1_behavior             1;     # 0 means set/clear breakpoints,
  # 1 means set/clear tracepoints.
  pref define gdb/use_icons		  1;	 # For Unix, use gdbtk_icon.gif as an icon
  # some window managers can't deal with it.

  # OS compatibility. Valid values are "Windows", "GNOME", "KDE", and "default"
  if {$gdbtk_platform(platform) == "windows"}  {
    pref define gdb/compat	"Windows"
  } elseif {$gdbtk_platform(platform) == "unix"}  {
    pref define gdb/compat	"GNOME"
  } else {
    pref define gdb/compat	"default"
  }
  
  # set download and execution options
  pref define gdb/load/verbose 0
  pref define gdb/load/main 1
  pref define gdb/load/exit 1
  pref define gdb/load/check 0
  pref define gdb/load/bp_at_func 0
  pref define gdb/load/bp_func ""
  pref define gdb/load/baud 38400
  if {$gdbtk_platform(platform) == "windows"}  {
    pref define gdb/load/port com1
  } else {
    pref define gdb/load/port "/dev/ttyS0"
  }

  # The list of active windows:
  pref define gdb/window/active           {}

  # Console defaults
  pref define gdb/console/prompt          "(gdb) "
  pref define gdb/console/deleteLeft      1
  pref define gdb/console/wrap            0
  pref define gdb/console/prompt_fg       DarkGreen
  pref define gdb/console/error_fg        red
  pref define gdb/console/log_fg          \#00b300
  pref define gdb/console/target_fg       blue
  pref define gdb/console/font            global/fixed

  # Source window defaults
  pref define gdb/src/PC_TAG              \#00b300
  pref define gdb/src/STACK_TAG           gold
  pref define gdb/src/BROWSE_TAG          \#9595e2
  pref define gdb/src/handlebg            red
  pref define gdb/src/bp_fg               red
  pref define gdb/src/temp_bp_fg          orange
  pref define gdb/src/disabled_fg         black
  pref define gdb/src/font                global/fixed
  pref define gdb/src/break_fg            black
  pref define gdb/src/source2_fg          navy
  pref define gdb/src/variableBalloons    1
  pref define gdb/src/trace_fg            magenta
  pref define gdb/src/tab_size            8
  pref define gdb/src/linenums		  1
  pref define gdb/src/thread_fg           pink
  pref define gdb/src/top_control	  1;	# 1 srctextwin controls on top, 0 bottom

  # Define the run button's functions. These are defined here in case
  # we do a "run" with an exec target (which never causes target.tcl to 
  # source)...
  pref define gdb/src/run_attach          0
  pref define gdb/src/run_load            0
  pref define gdb/src/run_run             1
  pref define gdb/src/run_cont            0

  # This is the disassembly flavor.  For now this is only supported on x86
  # machines.

  pref define gdb/src/disassembly-flavor  ""

  # Variable Window defaults
  pref define gdb/variable/font           global/fixed
  pref define gdb/variable/disabled_fg    gray

  # Stack Window
  pref define gdb/stack/font              global/fixed
  
  # Register Window
  pref define gdb/reg/rows                16

  # Global Prefs Dialogs
  pref define gdb/global_prefs/save_fg    red
  pref define gdb/global_prefs/message_fg white
  pref define gdb/global_prefs/message_bg red

  # Browser Window Search
  pref define gdb/search/last_symbol      ""
  pref define gdb/search/filter_mode     "starts with"

  pref define gdb/browser/hide_h          0
  pref define gdb/browser/layout	2

  # BP (breakpoint)
  pref define gdb/bp/show_threads         0

  # Help
  pref define gdb/help/browsername	""

  # Kernel Objects (kod)
  pref define gdb/kod/show_icon           0

  # Various possible "main" functions. What's for Java?
  pref define gdb/main_names              [list main MAIN___ MAIN__ cyg_user_start cyg_start ]

  # These are the classes of warning dialogs, and whether the user plans
  # to ignore them.
  pref define gdb/warnings/signal         0

  # Memory window.
  pref define gdb/mem/size 4
  pref define gdb/mem/numbytes 0
  pref define gdb/mem/format x
  pref define gdb/mem/ascii 1
  pref define gdb/mem/ascii_char .
  pref define gdb/mem/bytes_per_row 16
  pref define gdb/mem/color green
  
  # External editor.
  pref define gdb/editor ""

  # background colors
  set ::gdb_bg_num 0
  pref define gdb/use_color_schemes	1
  pref define gdb/bg/0	\#ffffff
  pref define gdb/bg/1	\#ffffd0
  pref define gdb/bg/2	\#ffd0ff
  pref define gdb/bg/3	\#ffd0d0
  pref define gdb/bg/4	\#d0ffff
  pref define gdb/bg/5	\#d0ffd0
  pref define gdb/bg/6	\#d0d0ff
  pref define gdb/bg/7	\#d0d0d0
  pref define gdb/bg/8	\#ffffb0
  pref define gdb/bg/9	\#ffb0ff
  pref define gdb/bg/10	\#ffb0b0
  pref define gdb/bg/11	\#b0ffff
  pref define gdb/bg/12	\#b0ffb0
  pref define gdb/bg/13	\#b0b0ff
  pref define gdb/bg/14	\#b0b0b0
  pref define gdb/bg/15	\#d0b0d0

  # IPC prefs
  # set prefs based on GDB version?
  #set vers [lindex [split [lindex [split [gdb_cmd "show version"]] end-1 ] \"] 1]
  pref define gdb/ipc/enabled		0
  pref define gdb/ipc/port		9909
  pref define gdb/ipc/stop_button	1
  pref define gdb/ipc/step_button	1
  pref define gdb/ipc/cont_button	1
  pref define gdb/ipc/run_button	1
  pref define gdb/ipc/exit		1
}


##########################################################################
#
# Everything below this point is code to try to determine the current OS
# color scheme and use that.  It mostly works, but is not very compatible 
# with the use of multiple color schemes for different instances of Insight.
#
##########################################################################
proc pref_set_colors {home} {
  # set color palette
  
  # In the past, tk widgets got their color information from Windows or
  # the X resource database.  Unfortunately Insight is a mixture of widgets 
  # from all over and was coded first in tcl and later in itcl.  So lots of 
  # color inheritance is broken or wrong. And Insight has some special color
  # requirements. We also have to deal with new Unix desktops that don't use the Xrdb.
  # To enable us to fix that without hardcoding colors, we create a color
  # array here and use it as needed to force widgets to the correct colors.
  
  global Colors
  debug

  # UNIX colors
  
  # For KDE3 (and probably earlier versions) when the user sets
  # a color scheme from the KDE control center, the appropriate color 
  # information is set in the X resource database.  Well, most of it 
  # is there but it is missing some settings, so we will carefully 
  # adjust things.
  #
  # For GNOME, we read .gtkrc or .gtkrc-1.2-gnome2 and parse it
  # for the color information.  We cannot really get this right,
  # but with luck we can read enough to get the colors to mostly match.

  # If there is no information, we provide reasonable defaults.
  
  # If some theme sets the text foreground and background to something unusual
  # then Insight won't be able to display sources and highlight things properly.
  # Therefore we will not change the textfg and textbg.

  pref_load_default
  switch [pref get gdb/compat] {

    "Windows" {
      debug "loading OS colors for Windows"
      set Colors(fg) SystemButtonText
      set Colors(bg) SystemButtonFace
      #set Colors(textfg) SystemWindowText
      #set Colors(textbg) SystemWindow
      set Colors(textfg) black
      set Colors(textbg) white
      set Colors(sfg) SystemHighlightText
      set Colors(sbg) SystemHighlight
      pref_set_option_db 0
    }

    "KDE" {
      debug "loading OS colors for KDE"

      # try loading "~/.gtkrc-kde"
      if {[pref_load_gnome $home [list .gtkrc-kde]]} {
	debug "loaded gnome file"
	pref_set_option_db 0
	debug "loaded option file"
      } else {
	# no .gtkrc-kde so assume X defaults have been set

	# create an empty entry widget so we can query its colors
	entry .e
	
	# text background
	# set Colors(textbg) [option get .e background {}]
	set Colors(textbg) white
	
	# text foreground
	#set Colors(textfg) [option get .e foreground {}]
	set Colors(textfg) black
	
	# background
	set Colors(bg) [option get . background {}]
	if {$Colors(bg) == ""} {set Colors(bg) lightgray}
	
	# foreground
	set Colors(fg) [option get . foreground {}]
	if {$Colors(fg) == ""} {set Colors(fg) black}
	
	# selectBackground
	set Colors(sbg) [option get .e selectBackground {}]
	if {$Colors(sbg) == ""} {set Colors(sbg) blue}
	
	# selectForeground
	set Colors(sfg) [option get .e selectForeground {}]
	if {$Colors(sfg) == ""} {set Colors(sfg) white}
	
	destroy .e
	pref_set_option_db 1
      }
    }
    
    "GNOME" {
      pref_load_gnome $home
      pref_set_option_db 0
    }

    "default" {
      pref_set_option_db 1
    }
  }
}

proc pref_load_default {} {
  global Colors
  debug "loading default colors"
  
  set Colors(textbg) white
  set Colors(textfg) black
  set Colors(bg) lightgray
  set Colors(fg) black
  
  # selectBackground
  set Colors(sbg) blue
  
  # selectForeground
  set Colors(sfg) white
}


# load GNOME colors and fonts, if possible.
proc pref_load_gnome {home {possible_names {}}} {
  debug "loading OS colors for GNOME"

  if {$possible_names == ""} {
    set possible_names {.gtkrc .gtkrc-1.2-gnome2}
  }

  set found 0
  foreach name $possible_names {
    debug "home=$home name=$name"
    set fname [file join $home $name]
    debug "fname=$fname"
    if {[file exists $fname]} {
      if {[catch {open $fname r} fd]} {
	dbug W "cannot open $fname: $fd"
	return 0
      }
      set found 1
      break
    }
  }
  if {$found} {
    set found [load_gnome_file $fd]
    close $fd
  }
  return $found
}

proc load_gnome_file {fd} {
  global Colors
  set found 0
  
  while {[gets $fd line] >= 0} {
    if {[regexp {include \"([^\"]*)} $line foo incname]} {
      debug "include $incname $found"
      if {$found == 0 && [file exists $incname]} {
	if {[catch {open $incname r} fd2]} {
	  dbug W "cannot open $incname: $fd2"
	} else {
	  set found [load_gnome_file $fd2]
	  close $fd2
	  if {$found} {
	    return $found
	  }
	}
      }
      continue
    } elseif {[regexp "\[ \t\n\]*\(.+\) = \(.+\)" $line a name val] == 0} {
      continue 
    }

    if {[regexp "\"#......\"" $val a] == 1} {
	set val [lindex $a 0]
    } else {
	set res [scan $val "\{ %f, %f, %f \}" r g b]
	if {$res != 3} {
	    continue
	}
	set r [expr int($r*255)]
	set g [expr int($g*255)]
	set b [expr int($b*255)]
	set val [format "\#%02x%02x%02x" $r $g $b]
    }

    debug "name=\"$name\"  val=\"$val\""

    # This is a bit of a hack and probably only
    # works for trivial cases.  Scan for colors and
    # use the first one found.
    switch [string trimright $name] {
      {bg[NORMAL]} {
	set found 1
	if {![info exists new(bg)]} {
	  debug "setting bg to $val"
	  set new(bg) $val
	}
      }
      {base[NORMAL]} {
	#if {![info exists new(textbg)]} {
	#  set new(textbg) $val
	#}
      }
      {text[NORMAL]} {
	#if {![info exists new(textfg)]} {
	#  set new(textfg) $val
	#}
      }
      {fg[NORMAL]} {
	if {![info exists new(fg)]} {
	  set new(fg) $val
	}
      }
      {fg[ACTIVE]} {
	if {![info exists new(afg)]} {
	  set new(afg) $val
	}
      }
      {bg[SELECTED]} {
	if {![info exists new(sbg)]} {
	  set new(sbg) $val
	}
      }
      {base[SELECTED]} {
	if {![info exists new(sbg)]} {
	  set new(sbg) $val
	}
      }
      {fg[SELECTED]} {
	if {![info exists new(sfg)]} {
	  set new(sfg) $val
	}
      }
      {fg[INSENSITIVE]} {
	if {![info exists new(dfg)]} {
	  set new(dfg) $val
	}
      }
      {bg[PRELIGHT]} {
	set Colors(prelight) $val
      }
      {base[PRELIGHT]} {
	set Colors(prelight) $val
      }
    }
  } 

  foreach c {fg bg sfg sbg dfg} {
    if {[info exists new($c)]} {
      set Colors($c) $new($c)
    }
  }
  return 1
}


# load the colors into the tcl option database
proc pref_set_option_db {makebg} {
  global Colors

  option add *background $Colors(bg)
  option add *buttonBackground $Colors(bg)
  option add *Text*background $Colors(textbg)
  option add *Entry*background $Colors(textbg)
  option add *foreground $Colors(fg)
  option add *Text*foreground $Colors(textfg)
  option add *Entry*foreground $Colors(textfg)

  option add *highlightBackground $Colors(bg)
  option add *selectBackground $Colors(sbg)

  if {$::gdbtk_platform(platform) == "unix"}  {
    option add *activeBackground $Colors(sbg)
  }

  option add *selectForeground $Colors(sfg)
  option add *Menu*activeForeground $Colors(sfg)

  if {[info exists Colors(prelight)]} {
    option add *Button*activeBackground $Colors(prelight)
  }
  if {[info exists Colors(dfg)]} {
    option add *disabledForeground $Colors(dfg)
  }
  
  if {$makebg} {
    # calculate trough and activebackground as 90% of background
    set dbg [recolor $::Colors(bg) 90]
    option add *activeBackground $dbg
    option add *troughColor $dbg
  }

  # Change the default select color for checkbuttons, etc to match 
  # selectBackground.
  if {$::gdbtk_platform(platform) == "unix"}  {
    option add *selectColor $Colors(sbg)
  }
}
@


1.36
log
@        From Dave Murphy  <davem@@devkitpro.org>:
        * gdbtk-cmds.c: Guard <sys/ioctl.h> with HAVE_SYS_IOCTL_H.
        * gdbtk-hooks.c: Ditto.
        * gdbtk.c: Ditto.
        * gdbtk-interp.c: Include windows.h under mingw32.
        (gdbtk_start_timer, gdbtk_stop_timer): Remove timer calls under mingw.
        (gdbtk_init): Include windows-specific commands under mingw without
        cygwin path commands.
        * library/download.itb (Download::download_it): Only use ide_cygwin_path
        on cygwin hosts.
        * library/interface.tcl (_open_file): Ditto.
        * library/prefs.tcl (pref_read): Ditto.
        * library/targetselection.itb (TargetSelection::default_port): Default
        to "/dev/com1" under cygwin and "COM1" under mingw.
        (TargetSelection::port_list): Use "/dev/com" under cygwin and
        "COM" under mingw.
@
text
@d2 1
a2 1
# Copyright (C) 1997, 1998, 1999, 2002, 2003, 2004, 2008 Red Hat
d149 1
a150 1
    # These colors are the same for all schemes
d157 4
d340 1
a340 1
  pref define gdb/console/log_fg          green 
d345 1
a345 1
  pref define gdb/src/PC_TAG              green
d497 1
a515 1
      pref_load_default
a556 1
      pref_load_default
a561 1
      pref_load_default
a723 5
  # The color of text that indicates changed items
  # We standardize on one color here so that changed
  # items don't blend into any OS color scheme
  set Colors(change) "green"

@


1.35
log
@        * library/main.tcl: Add gdbtk_platform definitions.
        * library/attachdlg.itb (list_pids): Use gdbtk_platform
        instead of tcl_platform.
        * library/bpwin.itb (build_win): Likewise.
        (_bp_add): Likewise.
        (_bp_modify): Likewise.
        * library/download.itb (download_it): Likewise.
        * library/globalpref.itb (_build_win): Likewise.
        * library/helpviewer.tcl (open_help): Likewise.
        * library/interface.tcl (gdbtk_tcl_query): Likewise.
        (show_warning): Likewise.
        (open_file): Likewise.
        (run_executable): Likewise.
        * library/managedwin.itb (reveal): Likewise.
        (_create): Likewise.
        * library/prefs.tcl (pref_read): Likewise.
        (pref_set_defaults): Likewise.
        (pref_set_colors): Likewise.
        * library/session.tcl (_exe_name): Likewise.
        * library/srcbar.itcl (_update_file_menu): Likewise.
        (create_run_menu): Likewise.
        * library/srctextwin.itb (_mtime_changed): Likewise.
        (LoadFromCache): Likewise.
        * library/targetselection.itb (default_port): Likewise.
        (build_win): Likewise.

        * library/memwin.itb (build_win): Remove unused tcl_platform
        declaration.
        * library/pluginwin.itcl (enable_ui): Likewise.
        * library/process.itb (build_win): Likewise.
        * library/srcbar.itcl (enable_ui): Likewise.
        * library/srcwin.itb (location): Likewise.
        * library/stackwin.itb (build_win): Likewise.
        * library/tdump.tcl (build_win): Likewise.
@
text
@d38 1
a38 1
    if {$gdbtk_platform(platform) == "windows"} {
@


1.34
log
@        From Andrew Stubbs  <andrew.stubbs@@st.com>:
        * library/prefs.tcl (pref_save): Save preferences if
        INSIGHT_FORCE_READ_PREFERENCES is set in the environment.
@
text
@d2 1
a2 1
# Copyright (C) 1997, 1998, 1999, 2002, 2003, 2004 Red Hat
d35 1
a35 1
  global tcl_platform
d38 1
a38 1
    if {$tcl_platform(platform) == "windows"} {
d47 1
a47 1
  if {$tcl_platform(platform) == "windows"} {
d290 1
a290 1
  global GDBTK_LIBRARY tcl_platform gdb_ImageDir
d305 1
a305 1
  if {$tcl_platform(platform) == "windows"}  {
d307 1
a307 1
  } elseif {$tcl_platform(platform) == "unix"}  {
d321 1
a321 1
  if {$tcl_platform(platform) == "windows"}  {
d472 1
a472 1
  global Colors tcl_platform
d738 1
a738 1
  if {$::tcl_platform(platform) == "unix"}  {
d761 1
a761 1
  if {$::tcl_platform(platform) == "unix"}  {
@


1.33
log
@        * library/prefs.tcl (pref_set_defaults): Disable IPC, gdb/ipc/enabled,
        by default.
@
text
@d163 1
a163 1
  global prefs_init_filename GDBStartup
d165 2
a166 1
  if {!$GDBStartup(inhibit_prefs)} {
@


1.32
log
@	* library/attachdlg.itb:
	* library/actiondlg.tcl:
	* library/about.tcl:
	* library/ehandler.itb:
	* library/editor.tcl:
	* library/download.ith:
	* library/download.itb:
	* library/debugwin.ith:
	* library/debugwin.itb:
	* library/cspref.ith:
	* library/cspref.itb:
	* library/console.ith:
	* library/console.itb:
	* library/browserwin.ith:
	* library/browserwin.itb:
	* library/bpwin.ith:
	* library/bpwin.itb:
	* library/blockframe.ith:
	* library/managedwin.ith:
	* library/managedwin.itb:
	* library/main.tcl:
	* library/locals.tcl:
	* library/ipcpref.ith:
	* library/ipcpref.itb:
	* library/ipc.tcl:
	* library/interface.tcl:
	* library/helpviewer.tcl:
	* library/globalpref.ith:
	* library/globalpref.itb:
	* library/gdbwin.ith:
	* library/gdbtoolbar.itcl:
	* library/gdbmenubar.itcl:
	* library/gdbevent.ith:
	* library/gdbevent.itb:
	* library/embeddedwin.ith:
	* library/ehandler.ith:
	* library/srcwin.itb:
	* library/srctextwin.ith:
	* library/srctextwin.itb:
	* library/srcpref.ith:
	* library/srcpref.itb:
	* library/srcbar.itcl:
	* library/session.tcl:
	* library/regwin.ith:
	* library/regwin.itb:
	* library/process.ith:
	* library/process.itb:
	* library/prefs.tcl:
	* library/pluginwin.itcl:
	* library/modal.tcl:
	* library/memwin.ith:
	* library/memwin.itb:
	* library/mempref.ith:
	* library/mempref.itb:
	* library/watch.tcl:
	* library/watch.tcl:
	* library/warning.tcl:
	* library/vartree.ith:
	* library/vartree.itb:
	* library/util.tcl:
	* library/tracedlg.tcl:
	* library/toplevelwin.ith:
	* library/tfind_args.tcl:
	* library/tdump.tcl:
	* library/targetselection.ith:
	* library/targetselection.itb:
	* library/stackwin.ith:
	* library/stackwin.itb:
	* library/srcwin.ith:
@
text
@d443 1
a443 1
  pref define gdb/ipc/enabled	1
@


1.31
log
@2005-11-29  Andrew Stubbs  <andrew.stubbs@@st.com>

	* library/prefs.tcl (pref_read): Read preferences file if environment
	variable INSIGHT_FORCE_READ_PREFERENCES is set (regardless of -nx).
	* README: Mention INSIGHT_FORCE_READ_PREFERENCES.
@
text
@d2 1
a2 1
# Copyright 1997, 1998, 1999, 2002, 2003, 2004 Red Hat
@


1.30
log
@2004-08-27  Martin Hunt  <hunt@@redhat.com>

	* library/ipc.tcl: New file.
	* library/ipcpref.ith: New file.
	* library/ipcpref.itb: New file.

	* library/srcwin.itb (SrcWin::inferior): Call ipc
	send if enabled.

	* library/prefs.tcl (pref_set_defaults): Enable color
	schemes by default. Add IPC defaults.

	* library/srcbar.itcl (create_pref_menu): Create
	"Advanced" cascade menu and put "Edit Color Schemes"
	and "IPC Support" under it.

	* library/managedwin.itb (ManagedWin::destructor):
	If IPC enabled then send "quit" on exit.

	* library/main.tcl: Start IPC if enabled.

	* library/prefs.tcl (pref_set_defaults): Add IPC defaults.

	* library/gdbmenubar.itcl (menubar_get_current_menu):
	New method.
@
text
@d53 2
a54 1
  if {!$GDBStartup(inhibit_prefs)} {
@


1.29
log
@2004-04-05  Martin Hunt  <hunt@@redhat.com>

	* library/session.tcl: Make hostname and portname
	session-dependent. Add gdb_bg_num (the color
	scheme number) as a per-session variable.

	* library/prefs.tcl (pref_read): If color schemes are in use,
	set colors based on the current scheme.
	(pref_save): Add "bg" section.
	(pref_set_defaults): Define new variable gdb/use_color_schemes
	and define 16 default background colors.

	* library/managedwin.itb (ManagedWin::window_name): Append
	window "instance" string to window name.
	(ManagedWin::window_instance): Set window instance string.

	* library/debugwin.itb: Add a reconfig method to restore
	unique black textbackground, overriding color scheme.

	* library/csprefs.itb:
	* library/csprefs.ith: New files. Implement color scheme
	preferences.

	* library/util.tcl (set_bg_colors): New function.
	(r_setcolors): New function.

	* library/regwin.itb (_prefs_changed): Deleted.
	(reconfig): New function.  Updates tkTable color tags
	if color scheme changes.
	* library/regwin.ith: Update to reflect above changes.

	* library/srcbar.itcl (create_pref_menu): Add pulldown
	menus for "Edit Color Schemes..." and "Use Color Schemes".
	(reconfig): Fix up menu items for color schemes.

	* library/globalpref.itb (_init_var): Add
	gdb/use_color_schemes to variable list.
	(_build_win): Add a checkbutton to enable/disable
	color schemes.

	* library/gdbmenubar.itcl (menubar_add_cascade): Add a class
	argument so cascade menus can be managed by class too.

	* library/interface.tcl (gdbtk_tcl_fputs): Check for
	existence of gdbtk_state(console).  Stops annoying error
	messages.
	(gdbtk_tcl_fputs_error): Ditto.
	(gdbtk_tcl_fputs_log): Ditto.
@
text
@d212 1
a212 1
      process geometry help browser kod window session mem bg
d421 1
a421 1
  pref define gdb/use_color_schemes	0
d438 11
@


1.28
log
@* library/prefs.tcl (pref_read): The section marker or the word
'option' must be the first thing on the line; they don't count if
they appear in the middle of the line.
@
text
@d2 1
a2 1
# Copyright 1997, 1998, 1999, 2002, 2003 Red Hat
d145 11
a155 1
  pref_set_colors $home
d212 1
a212 1
      process geometry help browser kod window session mem
d418 20
d440 8
d715 1
d740 2
a741 5
    # compute a slightly darker background color
    # and use for activeBackground and troughColor
    set bg2 [winfo rgb . $Colors(bg)]
    set dbg [format #%02x%02x%02x [expr {(9*[lindex $bg2 0])/2560}] \
	       [expr {(9*[lindex $bg2 1])/2560}] [expr {(9*[lindex $bg2 2])/2560}]]
@


1.27
log
@2003-07-29  Martin Hunt  <hunt@@redhat.com>

	* library/prefs.tcl (pref_set_option_db): On Windows, fix
	highlighting of buttons.  On Unix, fix highlighting of
	menus.
@
text
@d91 1
a91 1
	  {\[.*\]} {
d95 1
a95 1
	  {[ \t\n]*option.*} {
@


1.26
log
@2003-07-02  Martin Hunt  <hunt@@redhat.com>

	* library/prefs.tcl (pref_set_option_db): Only
	set checkbutton select color for Unix.  Fixes Windows
	checkbutton problem.
@
text
@d685 5
a689 1
  option add *activeBackground $Colors(sbg)
d691 2
@


1.25
log
@2003-06-13  Martin Hunt  <hunt@@redhat.com>

	* library/prefs.tcl (load_gnome_file): Fix parsing
	of gtk theme files so Red Hat 9 (and others) GNOME colors
	are correct.
@
text
@d706 3
a708 1
  option add *selectColor $Colors(sbg)
@


1.25.2.1
log
@2003-07-03  Martin Hunt  <hunt@@redhat.com>

        * library/prefs.tcl (pref_set_option_db): Only
        set checkbutton select color for Unix.  Fixes Windows
        checkbutton problem.
@
text
@d706 1
a706 3
  if {$::tcl_platform(platform) == "unix"}  {
    option add *selectColor $Colors(sbg)
  }
@


1.25.2.2
log
@2003-07-29  Martin Hunt  <hunt@@redhat.com>

	* library/prefs.tcl (pref_set_option_db): On Windows, fix
	highlighting of buttons.  On Unix, fix highlighting of
	menus.
@
text
@d685 1
a685 5

  if {$::tcl_platform(platform) == "unix"}  {
    option add *activeBackground $Colors(sbg)
  }

a686 2
  option add *Menu*activeForeground $Colors(sfg)

@


1.24
log
@2003-02-10  Martin M. Hunt  <hunt@@redhat.com>

	* library/prefs.tcl (pref_set_defaults): Remove prefs
	gdb/browser/width, gdb/browser/top_height, gdb/browser/view_height,
	gdb/browser/view_is_open. Add gdb/browser/layout.

	* library/browserwin.ith: Update declarations to match
	changes in browserwin.itb.

	* library/browserwin.itb (constructor): Don't set toplevel
	bindings. Set _layout from prefs.
	(destructor): Don't check $resize_after. Don't save view_is_open.
	(_build_win): Create a popup menu and bind to button 3.
	Split the rest into 4 functions; _build_file_frame,
	_build_filter_frame, _build_function_frame, and _build_view_frame.
	Pack these 4 frames according to $_layout.
	(_toggle_more): Deleted.
	(_bind_toplevel): Deleted.
	(_do_resize): Deleted.
	(_resize): Deleted.
	(_fill_source): Always fill because source is always visible.
	(_fill_funcs_combo): Limit width of combo to 40 chars.
	(_build_filter_frame): New function.
	(_build_file_frame): New function.
	(_build_function_frame): New function.
	(_build_view_frame): New function.
	(_switch_layout): New function. Toggle between layouts.

	* library/tclIndex: Rebuilt.

	* library/help/browser.html: Rewrite.
@
text
@d582 14
a595 6
    set res [scan $val "\{ %f, %f, %f \}" r g b]
    if {$res != 3} {continue}
    set r [expr int($r*255)]
    set g [expr int($g*255)]
    set b [expr int($b*255)]
    set val [format "\#%02x%02x%02x" $r $g $b]
@


1.23
log
@2003-02-03  Martin M. Hunt  <hunt@@redhat.com>

        * library/globalpref.itb, library/mempref.itb, library/srcpref.itb,
        library/srcwin.itb, library/targetselection.itb, library/tracedlg.tcl:
        Set background color of comboboxes to Colors(textbg).

        * library/main.tcl: Load combobox version 2.2.

        * library/prefs.tcl: Minor optimization. Change order of main_names
        to have the most common, "main", first.
@
text
@d2 1
a2 1
# Copyright 1997, 1998, 1999, 2002 Red Hat
d379 1
a379 4
  pref define gdb/browser/width           0
  pref define gdb/browser/top_height       0
  pref define gdb/browser/view_height      -1
  pref define gdb/browser/view_is_open    0
@


1.22
log
@2002-12-04  Martin M. Hunt  <hunt@@redhat.com>

	* library/regwin.itb (update): Remove some old code
	that marked registers as changed when the target started.
	(_build_win): Make changed registers more visible by
	changing their bg to Colors(change).

	* library/prefs.tcl (pref_set_option_db): Create a new
	Color(change) which is the color of text indicating a change.
	Current default is green.

	* library/vartree.itb (_init_data): Make changed values
	Color(change). Can't change bg, so we change fill color.
@
text
@d394 1
a394 1
  pref define gdb/main_names              [list MAIN___ MAIN__ main cyg_user_start cyg_start ]
@


1.21
log
@2002-11-11  Martin M. Hunt  <hunt@@redhat.com>

	* library/helpviewer.tcl: New file. Finds
	an appropriate help browser and displays the help files.

	* library/vartree.itb: Fix open_help calls.

	* library/helpviewer.ith: Deleted.
	* library/helpviewer.itb: Deleted.

	* library/prefs.tcl (pref_set_defaults): Remove
	pref gdb/help/browser. Add pref gdb/help/browsername.
	We couldn't simply rename because it would break older
	versions of Insight that expect gdb/help/browser to be
	a number.
@
text
@d666 5
@


1.20
log
@2002-11-08  Martin M. Hunt  <hunt@@redhat.com>

	* library/prefs.tcl (pref_save): Fix GDBtkInitVersion.
	(pref_save): Check that value is not null before writing.
@
text
@d388 1
a388 1
  pref define gdb/help/browser		  0
@


1.19
log
@2002-11-06  Martin M. Hunt  <hunt@@redhat.com>

	* library/globalpref.itb (_build_win): Add radiobox
	to select KDE/GNOME/default for pref gdb/compat. Remove
	browser option.

	* library/regwin.itb (build_win): Colors(hbg) has been
	removed so use Colors(bg) instead.

	* library/prefs.tcl (pref_set_defaults): Add a new
	preference "gdb/compat" which can be set to KDE, GNOME,
	Windows or default. This allows us to change Insight's
	behavior based on windowing system.
	(pref_set_colors): Attempt to read in .gtkrc files.
	Do different things for KDE vs GNOME.
	(pref_load_default): New function. Load default colors.
	(pref_load_gnome): New function. Find and open GNOME file.
	(load_gnome_file): New function. Loads GNOME file.
	(pref_set_option_db): New function.  Set option database.
@
text
@d163 1
a163 1
    puts $fd "{# GDBtkInitVersion: 1}"
d191 2
a192 2
	if {$x != ""} {
	  set v [escape_value [pref get $var]]
@


1.18
log
@        * library/prefs.tcl (pref_read): Don't suppress setting the default
        colors if the user has suppressed reading the preferences file.
@
text
@d138 1
a138 1
  
d145 1
a145 1
  pref_set_colors
d161 1
a161 1
  
d163 1
a163 1
    puts $fd {# GDBtkInitVersion: 1}
d279 1
d288 1
a288 1
                                                 # 1 means set/clear tracepoints.
d290 11
a300 1
						 # some window managers can't deal with it.    
d365 1
a365 1

d408 1
a408 1

d413 1
a413 1
proc pref_set_colors {} {
d416 5
a420 3
  # In a normal tk app, most of this is not necessary.  Unfortunately
  # Insight is a mixture of widgets from all over and was coded first
  # in tcl and later in itcl.  So lots of color inheritance is broken or wrong.
a424 1
  
a426 26
  if {$tcl_platform(platform) == "windows"} {
    option add *foreground SystemButtonText
    set Colors(fg) SystemButtonText
    
    option add *background SystemButtonFace
    set Colors(bg) SystemButtonFace
    
    option add *Entry*foreground SystemWindowText
    option add *Text*foreground SystemWindowText
    set Colors(textfg) SystemWindowText
    
    option add *Entry*background SystemWindow
    option add *Text*background SystemWindow
    set Colors(textbg) SystemWindow
    
    option add *selectForeground SystemHighlightText
    set Colors(sfg) SystemHighlightText
    
    option add *selectBackground SystemHighlight
    set Colors(sbg) SystemHighlight
    
    option add *highlightBackground SystemButtonFace
    set Colors(hbg) SystemButtonFace
    return
  }

d435 90
a524 4
  # For GNOME, you can use a program called grdb update the X resource database
  # with your current color scheme.
  #
  # If there is no information in the X rdb, we provide reasonable defaults.
d526 2
a527 2
  # create an empty entry widget so we can query its colors
  entry .e
d529 137
a665 17
  # text background
  set Colors(textbg) [option get .e background {}]
  if {$Colors(textbg) == ""} {set Colors(textbg) white}
  
  # text foreground
  set Colors(textfg) [option get .e foreground {}]
  if {$Colors(textfg) == ""} {set Colors(textfg) black}
  
  # background
  set Colors(bg) [option get . background {}]
  if {$Colors(bg) == ""} {set Colors(bg) lightgray}
  
  # foreground
  set Colors(fg) [option get . foreground {}]
  if {$Colors(fg) == ""} {set Colors(fg) black}
  
  # now reset resource database so all widgets are consistent
d672 2
a673 9
  
  
  # highlightBackground.  Set to background for now.
  set Colors(hbg) $Colors(bg)
  option add *highlightBackground $Colors(hbg)
  
  # selectBackground
  set Colors(sbg) [option get .e selectBackground {}]
  if {$Colors(sbg) == ""} {set Colors(sbg) blue}
d675 1
a675 4
  
  # selectForeground
  set Colors(sfg) [option get .e selectForeground {}]
  if {$Colors(sfg) == ""} {set Colors(sfg) white}
d677 6
d684 10
a693 8
  # compute a slightly darker background color
  # and use for activeBackground and troughColor
  set bg2 [winfo rgb . $Colors(bg)]
  set dbg [format #%02x%02x%02x [expr {(9*[lindex $bg2 0])/2560}] \
	   [expr {(9*[lindex $bg2 1])/2560}] [expr {(9*[lindex $bg2 2])/2560}]]
  option add *activeBackground $dbg
  option add *troughColor $dbg
  
a696 2
  
  destroy .e
@


1.17
log
@2002-06-07  Martin M. Hunt  <hunt@@redhat.com>

	* library/prefs.tcl (pref_set_colors): New function.  Set up colors
	from Windows system colors or X resource database. Save in array.
	(pref_set_defaults): Remove gdb/font/normal_fg, etc.
	(pref_read): Call pref_set_colors.

	* library/main.tcl: Remove call to "tix resetoptions TixGray".

	* library/bpwin.itb, library/browserwin.itb, library/console.itb,
	library/globalpref.itb, library/memwin.itb, library/process.itb,
	library/regwin.itb, library/srcpref.itb, library/srctextwin.itb,
	library/stackwin.itb, library/tdump.tcl, library/tracedlg.tcl,
	library/variables.tcl: Replace calls to [pref get gdb/fonts/*]
	for colors with references to Color array. Remove all tixOptions calls.
	Fix up colors as necessary.
@
text
@a141 2
    # finally set colors, from system if possible
    pref_set_colors
d143 3
@


1.16
log
@2002-05-31  Martin M. Hunt  <hunt@@redhat.com>

	* library/prefs.tcl (pref_read): If the regular expression
	cannot parse line, print debug message and skip it.
@
text
@d141 3
d288 1
a288 22
						 # some window managers can't deal with it.

  #
  # Font attributes
  #

  # "Normal" font attributes
  pref define gdb/font/normal_fg    black
  pref define gdb/font/normal_bg    gray92

  # Selection foreground/background
  pref define gdb/font/select_fg    black
  pref define gdb/font/select_bg    lightgray

  # Highlight used when something changes (variable value changes, etc)
  pref define gdb/font/highlight_fg blue
  pref define gdb/font/highlight_bg gray92

  # "Header" foreground and background. Used by table headers and such.
  pref define gdb/font/header_fg    gray92
  pref define gdb/font/header_bg    darkgray

d401 108
@


1.15
log
@2002-03-05  Martin M. Hunt  <hunt@@redhat.com>

	* library/prefs.tcl (pref_read): If a preference specifies
	"src-font", substitute "global/fixed".
	(pref_set_defaults): Change defaults from "src-font" to
	"global/fixed". Do not create font object "src-font". Do
	not add hook to trace its changes.
	(pref_src-font_trace): Remove.

	* library/console.itb (Console::_update_option): Remove
	font update because this happens automatically.

	* library/globalpref.itb: No need to set
	changed flag for fonts; updates happen automatically
	when prefs are updated.

	* library/bpwin.itb: Replaced src-font with global/fixed.
	* library/browserwin.itb: Ditto.
	* library/mempref.itb: Ditto.
	* library/memwin.itb: Ditto.
	* library/process.itb: Ditto.
	* library/regwin.itb: Ditto.
	* library/srcbar.itcl: Ditto.
	* library/srcpref.itb: Ditto.
	* library/srctextwin.itb: Ditto.
	* library/srcwin.itb: Ditto.
	* library/stackwin.itb: Ditto.
	* library/tdump.tcl: Ditto.
	* library/tracedlg.tcl: Ditto.
	* library/variables.tcl: Ditto.
	* library/watch.tcl: Ditto.
@
text
@d57 1
a57 1
	debug "$fd"
d65 1
a65 1
	  debug "$fd"
d101 3
d105 20
a124 11
	    # Must unescape equal signs in val
	    set val [unescape_value $val $version]
	    if {$section == "gdb"} {
	      pref setd gdb/$name $val
	    } elseif {$section == "global" && [regexp "^font/" $name]} {
	      set name [split $name /]
	      set f global/
	      append f [join [lrange $name 1 end] /]
	      if {[lsearch [font names] $f] == -1} {
		# new font
		eval define_font $f $val
d126 3
a128 2
		# existing font
		pref set global/font/[join [lrange $name 1 end] /] $val
a129 6
	    } elseif {$section == "global"} {
	      pref setd $section/$name $val
	    } else {
	      # backwards compatibility. recognize old src-font name
	      if {$val == "src-font"} {set val "global/fixed"}
	      pref setd gdb/$section/$name $val
@


1.14
log
@	* library/tclIndex: Updated.
	* library/prefs.tcl (pref_set_defaults): Define gdb/editor
	preference.
	* library/srcpref.itb (SrcPref::constructor): Save gdb/editor
	preference.
	(SrcPref::build_win): Added external editor control.
	* library/srctextwin.itb (SrcTextWin::do_source_popup): Always
	enable external editor.  Use `code' instead of `list'.
	* library/srcwin.itb (SrcWin::edit): Use Editor::edit.
	* library/editor.tcl: New file.
	* generic/gdbtk.c (enable_external_editor): Removed.
	(external_editor_command): Default to NULL.
	(gdbtk_init): Don't set enable_external_editor.  Free external
	editor command when finished with it.
@
text
@d1 2
a2 2
# Local preferences functions for GDBtk.
# Copyright 1997, 1998, 1999 Cygnus Solutions
d120 2
d325 1
a325 1
  pref define gdb/console/font            src-font
d335 1
a335 1
  pref define gdb/src/font                src-font
a357 7
  # set up src-font
  set val [pref get global/font/fixed]
  eval font create src-font $val

  # Trace the global/font/fixed preference
  pref add_hook global/font/fixed pref_src-font_trace

d359 1
a359 1
  pref define gdb/variable/font           src-font
d363 1
a363 1
  pref define gdb/stack/font              src-font
a411 5
# This traces the global/fixed font and forces src-font to
# to be the same.
proc pref_src-font_trace {varname val} {
  eval font configure src-font $val
}
@


1.13
log
@        * library/prefs.tcl (escape_value): Update to work
        with Tcl's new and old syntax.
@
text
@d412 3
@


1.12
log
@	* library/prefs.tcl (pref_read): Version number appears in
	comment.
@
text
@d220 6
a225 1
  regsub -all -- "(\[\]\[=%\n\])" $val \
@


1.11
log
@	* library/prefs.tcl (pref_set_defaults): Add new font
	color defaults for highlighting, headers, selecting, and "normal".
	Get rid of gdb/variable/highlight_fg and gdb/reg/highlight_fg.
	* library/variables.tcl (build_win): Use gdb/font/highlight_fg
	and gdb/font/highilght_bg to set highlight style.
	* library/memwin.itb (build_win): Use header_fg and header_bg.
@
text
@d81 2
a82 1
	    if {[regexp -- "^GDBtkInitVersion: (\[0-9\]+)\$" $line v]} {
@


1.10
log
@
	* library/prefs.tcl (pref_set_defaults): Add additional entry
	points for eCos if main is not present.
@
text
@d272 20
a358 1
  pref define gdb/variable/highlight_fg   blue
a364 1
  pref define gdb/reg/highlight_fg        blue
@


1.9
log
@	* library/prefs.tcl (pref_save): Fix bug when key in gdb space has
	extra `/' in it.
@
text
@d374 1
a374 1
  pref define gdb/main_names              [list MAIN___ MAIN__ main]
@


1.8
log
@2001-04-04  Martin M. Hunt  <hunt@@redhat.com>

	* generic/gdbtk-hooks.c (gdbtk_fileopen): New function.
	Initialize ui_file stuff for gdbtk.
	(gdbtk_fputs): Don't print if gdbtk_disable_fputs. Send
	stdlog and stdtarg to their handler functions.

	* generic/gdbtk.c (Gdbtk_Init): Don't set gdb_stdlog
	and gdb_stdtarg to gdb_stdout,
	(gdbtk_init): Unset gdbtk_disable_fputs
	when ready to accept output from gdb. Remove references to
	fputs_unfiltered_hook.

	* generic/gdbtk.h: Declare new flag gdbtk_disable_fputs.

	* generic/gdbtk-cmds.c (gdb_restore_fputs): Instead of setting
	fputs_unfiltered_hook, set the new flag gdbtk_disable_fputs.

	* library/prefs.tcl (pref_set_defaults): Add defaults
	for log_fg and target_fg.

	* library/interface.tcl (gdbtk_tcl_fputs_error): Use
	err_tag.
	(gdbtk_tcl_fputs_log): New function. Write log messages
	to console.
	(gdbtk_tcl_fputs_target): New function.	Write target
	IO to console.

	* library/console.ith (einsert): Add tag parameter.

	* library/console.itb (_build_win): Add new tags for log
	and target IO.
	(einsert): Add tag parameter.
@
text
@d170 6
a175 1
      if {[lindex $t 0] == "gdb" && [lindex $t 2] == ""} {
@


1.7
log
@	* library/mempref.itb (MemPref::build_win): Correctly set initial
	value of combobox.
	* library/memwin.itb: Added copyright header.
	(MemWin::constructor): Set defaults from preference database.
	(MemWin::reconfig): Update preference database.
	* library/prefs.tcl (pref_save): Save `mem' preferences.
	(pref_set_defaults): Define default memory preferences.
@
text
@d290 2
@


1.6
log
@2001-01-19  Fernando Nasser  <fnasser@@redhat.com>

	* library/prefs.tcl (pref_set_defaults): Set default value of
	gdb/src/top_control to place the source window controls at the top.
@
text
@d183 1
a183 1
      process geometry help browser kod window session
d372 9
@


1.5
log
@2001-01-03  Fernando Nasser  <fnasser@@totem.toronto.redhat.com>

	* library/prefs.tcl (pref_set_defaults): Define gdb/src/top_control
	to allow the source window controls to be placed at the top.
	* library/srcwin.itb (_build_win): Test for gdb/src/top_control
	and place the controls accordingly.
@
text
@d308 1
a308 1
  pref define gdb/src/top_control	  0;	# 1 srctextwin controls on top, 0 bottom
@


1.4
log
@	* prefs.tcl (pref_save): Put version number into file.  Added
	`session' to list of top-level keys.  Allow keys with many `/'s.
	(pref_read): Recognize version number.
	(escape_value): Generate URL-style encoding.
	(unescape_value): Added `version' argument.  Handle URL decoding.
@
text
@d308 1
@


1.3
log
@2000-04-03  Steve Johnson  <sbjohnson@@ozemail.com.au>

	* regwin.itb (dimensions): Use rows from preference file rather
	than hard-coding a preference.
	* prefs.tcl (pref_set_defaults): Add gdb/reg/rows preference.
@
text
@d75 1
d79 5
a83 1
	    ;# comment; ignore it
d102 1
a102 1
	    set val [unescape_value $val]
d149 1
d179 3
a181 1
    #now loop through all sections writing out values
d183 1
a183 1
      process geometry help browser kod window
d190 1
a190 1
	set x [lindex $t 2]
d211 6
a216 6

  if {[regsub -all -- = $val {!%} newval]} {
    return $newval
  }

  return $val
d221 4
a224 1
#         reading prefs from a file
d226 15
a240 1
proc unescape_value {val} {
d242 3
a244 2
  if {[regsub -all -- {!%} $val = newval]} {
    return $newval
@


1.2
log
@Reintroduce the code that saves away window state, and restores it
when you restart gdbtk.

2000-03-27  James Ingham  <jingham@@leda.cygnus.com>

	* interface.tcl (gdbtk_quit): Let the window manager store away
	the list of active windows before quitting.
	(gdbtk_tcl_preloop): Open all the windows that were active in the
	former session.
	* prefs.tcl (pref_set_defaults): Set the default value of the
	"gdb/window/active" pref.  Stores the list of active windows.
	* managedwin.itb (ManagedWin::pickle): New method - store away
	instructions to recreate this window.
	(ManagedWin::shutdown): New Method - run through the active windows
	pickling them all.
	(ManagedWin::startup): Restore all the saved active windows.
	* managedwin.ith: Declare pickle, shutdown & startup.
	* tclIndex: regenerate.
@
text
@d313 1
@


1.1
log
@Initial revision
@
text
@d174 2
a175 1
    lappend secs load console src reg stack locals watch bp search process geometry help browser kod
d255 3
a269 1
  pref define gdb/src/active              1
d340 4
@


1.1.1.1
log
@import insight-2000-02-04 snapshot (2nd try)
@
text
@@
