head	1.6;
access;
symbols
	insight_7_6-2013-04-10-branchpoint:1.6
	gdb_7_6-branch:1.6.0.22
	gdb_7_5-branch:1.6.0.20
	gdb_7_4-branch:1.6.0.18
	gdb_7_3-branch:1.6.0.16
	gdb_7_1-branch:1.6.0.14
	gdb_7_0-branch:1.6.0.12
	arc-sim-20090309:1.6
	arc-insight_6_8-branch:1.6.0.10
	arc-insight_6_8-branchpoint:1.6
	insight_6_8-branch:1.6.0.8
	insight_6_8-branchpoint:1.6
	gdb_6_8-branch:1.6.0.6
	insight_6_6-20070208-release:1.6
	gdb_6_6-branch:1.6.0.4
	gdb_6_6-2006-11-15-branchpoint:1.6
	insight_6_5-20061003-release:1.6
	gdb_6_5-branch:1.6.0.2
	gdb_6_5-2006-05-14-branchpoint:1.6
	gdb-csl-gxxpro-6_3-branch:1.5.0.8
	gdb-csl-gxxpro-6_3-branchpoint:1.5
	gdb_6_4-branch:1.5.0.6
	gdb_6_4-2005-11-01-branchpoint:1.5
	gdb_6_1-2004-04-05-release:1.5
	gdb_6_1-branch:1.5.0.4
	gdb_6_1-2004-03-01-gmt-branchpoint:1.5
	gdb_6_0-2003-10-04-release:1.5
	gdb_6_0-branch:1.5.0.2
	gdb_6_0-2003-06-23-branchpoint:1.5
	gdb_5_3-2002-12-12-release:1.4
	gdb_5_3-branch:1.4.0.12
	gdb_5_3-2002-09-04-branchpoint:1.4
	gdb_5_2_1-2002-07-23-release:1.4
	gdb_5_2-2002-04-29-release:1.4
	gdb_5_2-branch:1.4.0.10
	gdb_5_2-2002-03-03-branchpoint:1.4
	gdb_5_1_1-2002-01-24-release:1.4
	cygnus_cvs_20020108_pre:1.4
	gdb_5_1_0_1-2002-01-03-branch:1.4.0.8
	gdb_5_1_0_1-2002-01-03-branchpoint:1.4
	gdb_5_1-2001-11-21-release:1.4
	gdb_s390-2001-09-26-branch:1.4.0.6
	gdb_s390-2001-09-26-branchpoint:1.4
	gdb_5_1-2001-07-29-branch:1.4.0.4
	gdb_5_1-2001-07-29-branchpoint:1.4
	dberlin-typesystem-branch:1.4.0.2
	dberlin-typesystem-branchpoint:1.4;
locks; strict;
comment	@# @;


1.6
date	2005.12.23.18.26.50;	author eliz;	state Exp;
branches;
next	1.5;

1.5
date	2002.10.15.21.19.51;	author hunt;	state Exp;
branches;
next	1.4;

1.4
date	2001.06.11.23.08.05;	author tromey;	state Exp;
branches;
next	1.3;

1.3
date	2001.06.04.15.49.53;	author kseitz;	state Exp;
branches;
next	1.2;

1.2
date	2001.04.20.17.20.02;	author kseitz;	state Exp;
branches;
next	1.1;

1.1
date	2001.04.19.22.48.47;	author kseitz;	state Exp;
branches;
next	;


desc
@@


1.6
log
@	* library/attachdlg.itb:
	* library/actiondlg.tcl:
	* library/about.tcl:
	* library/ehandler.itb:
	* library/editor.tcl:
	* library/download.ith:
	* library/download.itb:
	* library/debugwin.ith:
	* library/debugwin.itb:
	* library/cspref.ith:
	* library/cspref.itb:
	* library/console.ith:
	* library/console.itb:
	* library/browserwin.ith:
	* library/browserwin.itb:
	* library/bpwin.ith:
	* library/bpwin.itb:
	* library/blockframe.ith:
	* library/managedwin.ith:
	* library/managedwin.itb:
	* library/main.tcl:
	* library/locals.tcl:
	* library/ipcpref.ith:
	* library/ipcpref.itb:
	* library/ipc.tcl:
	* library/interface.tcl:
	* library/helpviewer.tcl:
	* library/globalpref.ith:
	* library/globalpref.itb:
	* library/gdbwin.ith:
	* library/gdbtoolbar.itcl:
	* library/gdbmenubar.itcl:
	* library/gdbevent.ith:
	* library/gdbevent.itb:
	* library/embeddedwin.ith:
	* library/ehandler.ith:
	* library/srcwin.itb:
	* library/srctextwin.ith:
	* library/srctextwin.itb:
	* library/srcpref.ith:
	* library/srcpref.itb:
	* library/srcbar.itcl:
	* library/session.tcl:
	* library/regwin.ith:
	* library/regwin.itb:
	* library/process.ith:
	* library/process.itb:
	* library/prefs.tcl:
	* library/pluginwin.itcl:
	* library/modal.tcl:
	* library/memwin.ith:
	* library/memwin.itb:
	* library/mempref.ith:
	* library/mempref.itb:
	* library/watch.tcl:
	* library/watch.tcl:
	* library/warning.tcl:
	* library/vartree.ith:
	* library/vartree.itb:
	* library/util.tcl:
	* library/tracedlg.tcl:
	* library/toplevelwin.ith:
	* library/tfind_args.tcl:
	* library/tdump.tcl:
	* library/targetselection.ith:
	* library/targetselection.itb:
	* library/stackwin.ith:
	* library/stackwin.itb:
	* library/srcwin.ith:
@
text
@# GDB event class implementations for Insight.
# Copyright (C) 2001 Red Hat, Inc.
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License (GPL) as published by
# the Free Software Foundation; either version 2 of the License, or (at
# your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# ------------------------------------------------------------
#  PUBLIC METHOD:  get - Retrieve data about the event
# ------------------------------------------------------------
itcl::body BreakpointEvent::get {what} {

  switch $what {
    action       { return $action }
    number       { return $number }
    file         { return $_file }
    function     { return $_function }
    line         { return $_line }
    address      { return $_address }
    type         { return $_type }
    enabled      { return $_enabled }
    disposition  { return $_disposition }
    ignore_count { return $_ignore_count }
    commands     { return $_commands }
    condition    { return $_condition }
    thread       { return $_thread }
    hit_count    { return $_hit_count }
    user_specification { return $_user_specification }

    default { error "unknown event data \"$what\": should be: action|number|file|function|line|address|type|enabled|disposition|ignore_count|commands|condition|thread|hit_count|user_specification" }
  }
}

# ------------------------------------------------------------
#  PRIVATE METHOD:  _init - Initialize all private data
# ------------------------------------------------------------
itcl::body BreakpointEvent::_init {} {
  if {[catch {gdb_get_breakpoint_info $number} bpinfo]} {
    set _file         {}
    set _function     {}
    set _line         {}
    set _address      {}
    set _type         {}
    set _enabled      {}
    set _disposition  {}
    set _ignore_count {}
    set _commands     {}
    set _condition    {}
    set _thread       {}
    set _hit_count    {}
    set _user_specification {}
  } else {
    lassign $bpinfo \
      _file         \
      _function     \
      _line         \
      _address      \
      _type         \
      _enabled      \
      _disposition  \
      _ignore_count \
      _commands     \
      _condition    \
      _thread       \
      _hit_count    \
      _user_specification
  }
}

# When the breakpoint number for the event changes,
# update the private data in the event.
itcl::configbody BreakpointEvent::number {
  _init
}

# ------------------------------------------------------------
#  PUBLIC METHOD:  get - Retrieve data about the event
# ------------------------------------------------------------
itcl::body TracepointEvent::get {what} {

  switch $what {
    action     { return $action }
    number     { return $number }
    file       { return $_file }
    function   { return $_function }
    line       { return $_line }
    address    { return $_address }
    enabled    { return $_enabled }
    pass_count { return $_pass_count }
    step_count { return $_step_count }
    thread     { return $_thread }
    hit_count  { return $_hit_count }
    actions    { return $_actions }

    default { error "unknown event data \"$what\": should be: action|number|file|function|line|address|pass_count|step_count|thread|hit_count|actions" }
  }
}

# ------------------------------------------------------------
#  PRIVATE METHOD:  _init - Initialize all private data
# ------------------------------------------------------------
itcl::body TracepointEvent::_init {} {
  if {[catch {gdb_get_tracepoint_info $number} tpinfo]} {
    set _file         {}
    set _function     {}
    set _line         {}
    set _address      {}
    set _enabled      {}
    set _pass_count   {}
    set _step_count   {}
    set _thread       {}
    set _hit_count    {}
    set _actions      {}
  } else {
    lassign $tpinfo \
      _file         \
      _function     \
      _line         \
      _address      \
      _enabled      \
      _pass_count   \
      _step_count   \
      _thread       \
      _hit_count    \
      _actions
  }
}

# When the tracepoint number for the event changes,
# update the private data in the event.
itcl::configbody TracepointEvent::number {
  _init
}

# ------------------------------------------------------------
#  PUBLIC METHOD:  get - Retrieve data about the event
# ------------------------------------------------------------
itcl::body TracepointEvent::get {what} {

  switch $what {
    action     { return $action }
    number     { return $number }
    file       { return $_file }
    function   { return $_function }
    line       { return $_line }
    address    { return $_address }
    enabled    { return $_enabled }
    pass_count { return $_pass_count }
    step_count { return $_step_count }
    thread     { return $_thread }
    hit_count  { return $_hit_count }
    actions    { return $_actions }

    default { error "unknown event data \"$what\": should be: action|number|file|function|line|address|pass_count|step_count|thread|hit_count|actions" }
  }
}

# ------------------------------------------------------------
#  PUBLIC METHOD:  get - Retrieve data about the event
# ------------------------------------------------------------
itcl::body SetVariableEvent::get {what} {

  switch $what {
    variable { return $variable }
    value    { return $value }

    default { error "unknown event data \"$what\": should be: variable|value" }
  }
}

# ------------------------------------------------------------
#  CONSTRUCTOR: Create an UpdateEvent
# ------------------------------------------------------------
itcl::body UpdateEvent::constructor {args} {
  if {[catch {gdb_loc} loc]} {
    dbug E "could not get current location: $loc"
  } else {
    lassign $loc _compile_filename _function _full_filename \
      _line _frame_pc _pc _shlib
  }
}

# ------------------------------------------------------------
#  PUBLIC METHOD:  get - Retrieve data about the event
# ------------------------------------------------------------
itcl::body UpdateEvent::get {what} {

  switch $what {
    compile_filename { return $_compile_filename }
    full_filename    { return $_full_filename }
    function         { return $_function }
    line             { return $_line }
    frame_pc         { return $_frame_pc }
    pc               { return $_pc }
    shlib            { return $_shlib }

    default { error "unknown event data \"$what\": should be: variable|value" }
  }
}
@


1.5
log
@2002-10-15  Martin M. Hunt  <hunt@@redhat.com>

	* library/* : auto_mkindex cannot rebuild
	tclIndex because it does not recognize the namespace
	import in main.tcl.  To get it to work again, rename the
	following:
		body -> itcl::body
		configbody -> itcl::configbody
		class -> itcl::class
@
text
@d2 1
a2 1
# Copyright 2001 Red Hat, Inc.
@


1.4
log
@	* library/session.tcl (session_save): Save breakpoints.
	(SESSION_serialize_bps): New proc.
	(SESSION_recreate_bps): New proc.
	(session_load): Recreate breakpoints.
	* library/util.tcl (bp_exists): Expect user specification in
	breakpoint info.
	* library/srctextwin.itb (SrcTextWin::showBPBalloon): Expect user
	specification in breakpoint info.
	* library/gdbevent.itb (BreakpointEvent::_init): Initialize
	_user_specification.
	(BreakpointEvent::get): Handle user_specification.
	* library/gdbevent.ith (BreakpointEvent): Added
	_user_specification field.
	* library/bpwin.itb (BpWin::bp_store): Expect user specification
	and use it when saving.
	(BpWin::bp_type): Expect user specification.
	* generic/gdbtk-bp.c (BREAKPOINT_IS_WATCHPOINT): New macro.
	(gdb_get_breakpoint_info): Added `user specification' to result.
@
text
@d17 1
a17 1
body BreakpointEvent::get {what} {
d43 1
a43 1
body BreakpointEvent::_init {} {
d78 1
a78 1
configbody BreakpointEvent::number {
d85 1
a85 1
body TracepointEvent::get {what} {
d108 1
a108 1
body TracepointEvent::_init {} {
d137 1
a137 1
configbody TracepointEvent::number {
d144 1
a144 1
body TracepointEvent::get {what} {
d167 1
a167 1
body SetVariableEvent::get {what} {
d180 1
a180 1
body UpdateEvent::constructor {args} {
d192 1
a192 1
body UpdateEvent::get {what} {
@


1.3
log
@	* library/interface.tcl (gdb_update_hook): Mark as deprecated.
	(gdbtk_update): Dispatch and UpdateEvent, too.
	* library/ehandler.ith (update): New event handler.
	* library/gdbevent.ith (UpdateEvent): New event.
	* library/gdbevent.itb (UpdateEvent::constructor): New method.
	(UpdateEvent::get): New method.
	* library/kod.ith (udpate): Match event handler definition.
	* library/kod.itb (update): Ditto.
	(build_win): Pass dummy argument to update method.
	(top): Ditto.
	(up): Ditto.
	(set_variable): Ditto.
	* library/memwin.ith (update): Match event handler definition.
	* library/memwin.itb (update): Ditto.
	(constructor): Remove gdb_update_hook.
	(destructor): Ditto.
	* library/process.ith (update): Match event handler definition.
	* library/process.itb (update): Ditto.
	(constructor): Remove gdb_update_hook.
	(destructor): Ditto.
	(build_win): Pass dummy argument to update method.
	* library/regwin.ith (update): Match event handler definition.
	* library/regwin.itb (update): Ditto.
	(constructor): Remove gdb_update_hook.
	(destructor): Ditto.
	(build_win): Pass dummy argument to update method.
	(but3): Ditto.
	(unedit): Ditto.
	* library/stackwin.ith (update): Match event handler definition.
	* library/stackwin.itb (update): Ditto.
	(constructor): Remove gdb_update_hook.
	(destructor): Ditto.
	(build_win): Pass dummy argument to update method.
	* library/tdump.tcl (update): Match event handler definition.
	(constructor): Remove gdb_update_hook.
	(destructor): Ditto.
	(build_win): Pass dummy argument to update method.
	* library/variables.tcl (update): Match event handler definition.
	(build_win): Pass dummy argument to update method.
	* library/locals.tcl (update): Match event handler definition.
	(constructor): Pass dummy argument to update method.
	* library/watch.tcl (update): Match event handler definition.
	Pass dummy argument to VariableWin::update.
	(add): Pass dummy argument to update method.
	* library/srcwin.ith (update): New method.
	(update_hook_init): Remove.
	* library/srcwin.itb (update): New method.
	(constructor): Remove gdb_update_hook.
	(destructor): Ditto.
	* tclIndex: Regenerate.
@
text
@d34 1
d36 1
a36 1
    default { error "unknown event data \"$what\": should be: action|number|file|function|line|address|type|enabled|disposition|ignore_count|commands|condition|thread|hit_count" }
d57 1
d71 2
a72 1
      _hit_count
@


1.2
log
@Event model revamp for "gdb_set_hook".

	* library/interface.tcl (gdbtk_tcl_set_variable): New proc.
	* library/gdbevent.ith (SetVariableEvent): New event.
	* library/gdbevent.itb (SetVariableEvent::get): Override
	GDBEvent::get.
	* library/ehandler.ith (set_variable): New public method.
	* generic/gdbtk-hooks.c (gdbtk_set_hook): Let inteface function
	gdbtk_tcl_set_variable do all the work.
	* tclIndex: Regenerated.
@
text
@d173 30
@


1.1
log
@New event handling infrastructure.

	* library/gdbevent.ith: New file. Defines new event model.
	* library/gdbevent.itb: New file. Implements new event
	model.
	* library/ehandler.ith: New file. Defines new event model.
	* library/ehandler.itb: New file. Implements new event
	model.
	* library/gdbwin.ith: Inherit from GDBEventHandler.
	(update): Delete unused method.
	(_state): Delete unused variable.
	* library/tclIndex: Regenerated.
@
text
@d137 36
@

