head	1.9;
access;
symbols
	gdb_5_2_1-2002-07-23-release:1.8
	gdb_5_2-2002-04-29-release:1.8
	gdb_5_2-branch:1.8.0.10
	gdb_5_2-2002-03-03-branchpoint:1.8
	gdb_5_1_1-2002-01-24-release:1.8
	cygnus_cvs_20020108_pre:1.8
	gdb_5_1_0_1-2002-01-03-branch:1.8.0.8
	gdb_5_1_0_1-2002-01-03-branchpoint:1.8
	gdb_5_1-2001-11-21-release:1.8
	gdb_s390-2001-09-26-branch:1.8.0.6
	gdb_s390-2001-09-26-branchpoint:1.8
	gdb_5_1-2001-07-29-branch:1.8.0.4
	gdb_5_1-2001-07-29-branchpoint:1.8
	dberlin-typesystem-branch:1.8.0.2
	dberlin-typesystem-branchpoint:1.8;
locks; strict;
comment	@# @;


1.9
date	2002.08.14.18.06.46;	author kseitz;	state dead;
branches;
next	1.8;

1.8
date	2001.05.31.20.32.58;	author kseitz;	state Exp;
branches;
next	1.7;

1.7
date	2001.05.31.15.21.41;	author kseitz;	state Exp;
branches;
next	1.6;

1.6
date	2001.02.01.22.56.27;	author fnasser;	state Exp;
branches;
next	1.5;

1.5
date	2001.02.01.21.03.43;	author fnasser;	state Exp;
branches;
next	1.4;

1.4
date	2001.02.01.17.59.38;	author fnasser;	state Exp;
branches;
next	1.3;

1.3
date	2001.02.01.04.54.11;	author fnasser;	state Exp;
branches;
next	1.2;

1.2
date	2001.01.31.23.37.20;	author fnasser;	state Exp;
branches;
next	1.1;

1.1
date	2001.01.31.03.02.49;	author fnasser;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Removed. Moved to ../plugins, since the plugins could contain host-specific
code.
@
text
@class RHAbout {
  inherit PluginWindow
  constructor {args} {
    global gdb_ImageDir

    # What about a menu?
    $menubar add menubutton file "File" 0
    $menubar add command None "Close" \
      [code $this destroy_toplevel] \
      -underline 1
    $menubar add menubutton help "Help" 0
    $menubar add command Other "Help Topics" \
      {HtmlViewer::open_help index.html} \
      -underline 0
    $menubar add separator
    $menubar add command Other "About GDB..." \
      {ManagedWin::open About -transient} \
      -underline 0

    # The menu only shows up if you do this:
    $menubar show

    # Do you want a toolbar?
    $toolbar add button con Other {ManagedWin::open Console} \
                           "Console (Ctrl+N)" -image console_img

    # The toolbar will only show up if you do this:
    $toolbar show

    # Now, fill the childsite with some graphics and text

    # Remember to use the childsite, do not pack in the widget hull
    set f [childsite]

    # Put in some graphics
    label $f.image1 -bg white -image \
      [image create photo -file [file join $gdb_ImageDir insight.gif]]

    # Here we call an interface function provided by GDBTCL
    set text [gdb_cmd {show version}]

    # Here we call a command procedure that we created, if it exists
    catch {append text [rhabout_extra_text]}

    # Now add the text
    message $f.m -bg white -fg black -text $text -aspect 500 -relief flat

    # Add a status bar so we can show some dynamic information
    set _status [label $f.stat -relief sunken -bd 3 \
                   -font global/status -height 1]

    # pack everything
    pack $f.image1 $f.m -fill both -expand yes
    pack $f.stat -expand 1 -fill both
    pack  $itk_interior

    # Give our sample window a name
    window_name "About Red Hat Insight Plug-In"
  }

  # You can overload the base class busy method, but make sure
  # to call it as well or the menu and button status will not be updated
  # (unless this is what you want)
  public method busy {event} {
    debug
    # Call the baseclass version
    PluginWindow::busy $event

    # Display something in the status area
    $_status configure -text "Running..."
  }

  # You can overload the base class idle method, but make sure
  # to call it as well or the menu and button status will not be updated
  # (unless this is what you want)
  private method idle {} {
    debug
    # First call the baseclass version
    PluginWindow::idle

    # Display something in the status area
    $_status configure -text "Stopped."
  }

  # Path to the status area
  private variable _status
}
@


1.8
log
@	* library/interface.tcl (gdb_idle_hook): Mark as deprecated.
	(gdbtk_idle): Dispatch an IdleEvent. gdb_idle_hook is gone.
	* library/ehandler.ith (idle): New event handler.
	* library/gdbevent.ith (IdleEvent): New event.
	* library/console.ith (idle): Match event handler definition.
	* library/console.itb (idle): Ditto.
	(constructor): Remove gdb_idle_hook.
	(destructor): Ditto.
	* library/kod.ith (idle): Match event handler definition.
	* library/kod.itb (idle): Ditto.
	(constructor): Remove gdb_idle_hook.
	(destructor): Ditto.
	* library/memwin.ith (idle): Match event handler definition.
	* library/memwin.itb (idle): Ditto.
	(constructor): Remove gdb_idle_hook.
	(destructor): Ditto.
	* library/pluginwin.itcl (stopped): Rename to "idle" and
	match event handler definition.
	Fix misleading comments.
	* library/process.ith (idle): Match event handler definition.
	* library/process.itb (idle): Ditto.
	(constructor): Remove gdb_idle_hook.
	(destructor): Ditto.
	* library/regwin.ith (idle): Match event handler definition.
	* library/regwin.itb (idle): Ditto.
	(constructor): Remove gdb_idle_hook.
	(destructor): Ditto.
	* library/srcbar.itcl (idle): New method.
	(constructor): Remove gdb_idle_hook.
	(destructor): Ditto.
	* library/srcwin.ith (idle): Match event handler definition.
	* library/srcwin.itb (idle): Ditto.
	(constructor): Remove gdb_idle_hook.
	(destructor): Ditto.
	* library/stackwin.ith (idle): Match event handler definition.
	* library/stackwin.itb (idle): Ditto.
	(constructor): Remove gdb_idle_hook.
	(destructor): Ditto.
	* library/variables.tcl (idle): Match event handler definition.
	(constructor): Remove gdb_idle_hook.
	(destructor): Ditto.
	* library/plugins/rhabout/rhabout.itcl (stopped): Rename
	to "idle" and match new event handler definition.
	* library/tclIndex: Regenerated.
@
text
@@


1.7
log
@	* library/interface.tcl (gdb_busy_hook): Deprecate.
	(gdbtk_busy): Create and dispatch a BusyEvent instead
	of running hooks.
	* library/ehandler.ith (busy): New event handler.
	* library/gdbevent.ith (BusyEvent): New event class.
	* library/console.ith: Inherit from GDBEventHandler.
	(busy): Match event handler definition.
	* library/console.itb (busy): Ditto.
	(constructor): Remove gdb_busy_event.
	(destructor): Ditto.
	* library/kod.ith (busy): Match event handler definition.
	* library/kod.itb (busy): Ditto.
	(constructor): Remove gdb_busy_hook.
	(destructor): Ditto.
	* library/memwin.ith (busy): Match event handler definition.
	* library/memwin.itb (busy): Ditto.
	(constructor): Remove gdb_busy_hook.
	(destructor): Ditto.
	* library/pluginwin.itcl (running): Rename to "busy" and
	match event handler definition.
	(consturctor): Remove gdb_busy_hook.
	(destructor): Ditto.
	* library/process.ith (busy): Match event handler definition.
	* library/process.itb (busy): Ditto.
	(constructor): Remove gdb_busy_hook.
	(destructor): Ditto.
	* library/regwin.ith (busy): Match event handler definition.
	* library/regwin.itb (busy): Ditto.
	(constructor): Remove gdb_busy_hook.
	(destructor): Ditto.
	* library/srcbar.itcl (constructor): Remove gdb_busy_hook.
	(destructor): Ditto.
	(busy): New method.
	* library/srcwin.ith (busy): Match event handler definition.
	* library/srcwin.itb (busy): Ditto.
	Only do the "busy" stuff if do_updates is set.
	(toggle_updates): Remove gdb_busy_hook.
	(constructor): Ditto.
	(destructor): Ditto.
	* library/stackwin.ith (busy): Match event handler definition.
	* library/stackwin.itb (busy): Ditto.
	(constructor): Remove gdb_busy_hook.
	(destructor): Ditto.
	* library/variables.tcl (constructor): Ditto.
	(destructor): Ditto.
	(disable_ui): Rename to "busy" and match event handler
	definition.
	* library/plugins/rhabout/rhabout.itcl (running): Rename
	to "busy" and match new event handler definition.
	* library/tclIndex: Regenerated.
@
text
@d73 1
a73 1
  # You can overload the base class stopped method, but make sure
d76 1
a76 1
  private method stopped {} {
d79 1
a79 1
    PluginWindow::stopped
@


1.6
log
@2001-02-01  Fernando Nasser  <fnasser@@redhat.com>

	* library/gdbtoolbar.itcl (add): New method.  Emulate the style of the
	toolbar iwidget commands.
	(toolbar_show): Old name.
        (show): New name.
	(toolbar_create_button): Old name.
        (create): New name.
	(toolbar_configure_button): Old name.
        (itemconfigure): New name.
        (toolbar_bind_button): Old name.
        (itembind): New name.
        (toolbar_set_button_balloon): Old name.
        (itemballoon): New name.
        (toolbar_add_button): Make private.
        (toolbar_add_label): Ditto.
        (toolbar_add_button_separator): Ditto.
	(toolbar_remove_button): Ditto.
	(tollbar_insert_button): Ditto.
	* library/srcbar.itcl: Adjust to the above syntax.
	* library/plugins/rhabout/rhabout.itcl: Ditto.
@
text
@d61 1
a61 1
  # You can overload the base class running method, but make sure
d64 1
a64 1
  private method running {} {
d67 1
a67 1
    PluginWindow::running
@


1.5
log
@2001-02-01  Fernando Nasser  <fnasser@@redhat.com>

	* library/gdbmenubar.itcl (constructor): Remove unused code.
	(add): New method.  Emulate the style of the menubar iwidget commands.
	(menubar_show): Old name.
	(show): New name.
	(menubar_menu_exists): Old name.
	(exists): New name.
	(menubar_clear_menu): Old name.
	(clear): New name.
	(menubar_delete_menu): Old name.
        (delete): New name.
	(menubar_new_menu): Make private.  Does not return anything.
	(menubar_add_menu_command): Make private.
	(menubar_add_menu_separator): Ditto.
	(menubar_change_menu_state): Ditto.
	* library/srcbar.itcl: Adjust to the above syntax.
	* library/plugins/plugins.tcl: Ditto.
	* library/plugins/rhabout/rhabout.itcl: Ditto.
@
text
@d24 1
a24 1
    $toolbar toolbar_add_button con Other {ManagedWin::open Console} \
d28 1
a28 1
    $toolbar toolbar_show
@


1.4
log
@2001-02-01  Fernando Nasser  <fnasser@@redhat.com>

	* library/pluginwin.itcl (contrucdtor, destructor): Use "code" to
	specify callbacks.
	(running, stopped, no_inferior): Make it a protected method.
	(childsite): Explicitly mark as a public method.
	* library/plugins/rhabout/rhabout.itcl (constructor): Add a label
	widget to show status messages.
	(running, stopped): Overload versions of the base class; display
	status messages as an example.
@
text
@d7 2
a8 2
    $menubar menubar_new_menu file "File" 0
    $menubar menubar_add_menu_command None "Close" \
d11 2
a12 2
    $menubar menubar_new_menu help "Help" 0
    $menubar menubar_add_menu_command Other "Help Topics" \
d15 2
a16 2
    $menubar menubar_add_menu_separator
    $menubar menubar_add_menu_command Other "About GDB..." \
d21 1
a21 1
    $menubar menubar_show
a58 7
  }

  # Don't quit if this is the last window.  The only way that this can
  # happen is if we are the splash screen. 

  method quit_if_last {} { 
    return 0
@


1.3
log
@2001-01-31  Fernando Nasser  <fnasser@@redhat.com>

	* library/pluginwin.itcl: New file.  Implements the PluginWindow
	class that provides some basic functionality for plug-ins.
	* library/plugins/rhabout/rhabout.itcl: Inherit from the new
	PluginWindow class.  Remove code dependent on ModalDlg.
	(constructor): Creates menus and a toolbar to show how these
	PluginWindow components are used.
@
text
@a1 1
#  inherit PluginWindow ModalDialog
d45 1
d47 6
d54 1
d56 3
a58 1
    window_name "About Red Hat Insight"
d68 26
a94 1

@


1.2
log
@2001-01-31  Fernando Nasser  <fnasser@@redhat.com>

	* library/plugins/rhabout.tcl: Add load for optional sample C command
	procedure.
	* library/plugins/rhabout/rhabout.itcl (constructor): Try calling
	optional sample C command procedure rhabout_extra_text.
	* library/plugins/rhabout/rhabout.c: New file. Implement an example
	plug-in shared library with a sample C command procedure.
	* library/plugins/rhabout/Makefile: New file. Makefile for the sample
	shared library above (Linux only).
@
text
@d2 2
a3 1
  inherit ManagedWin ModalDialog
d6 31
a36 1
    set f [frame $itk_interior.f]
d47 1
a47 1
    pack $f.image1 $f.m $itk_interior.f -fill both -expand yes
d49 1
a49 3
    bind $f.image1 <1> [code $this unpost]
    bind $f.m <1> [code $this unpost]
    window_name "About Cygnus Insight"
@


1.1
log
@2001-01-28  Fernando Nasser  <fnasser@@redhat.com>

	* library/plugins: New directory.  Sample plug-in directory to help
	developers of Insight plug-ins.  See README file in that directory.
	* library/plugins/plugins.tcl: New file. Sample version of a code
	fragment file which adds entries to the PlugIn menu of the Source
	Window to activate custom plug-in windows.
	* library/plugins/pkgIndex.tcl: New file.  Sample version of a file
	with package information for the installed plug-ins.
	* library/plugins/rhabout.tcl: New file. Sample file providing a
	plug-in package.
	* library/plugins/rhabout: New directory.  Sample plug-in.
	* library/plugins/rhabout/rhabout.itcl: New file.  Sample class
	implementing a plug-in window.
	* library/plugins/rhabout/tclIndex: New file.  Tcl index for the sample
	plug-in implementation.
@
text
@d8 8
a15 1
    message $f.m -bg white -fg black -text [gdb_cmd {show version}] -aspect 500 -relief flat
@

