head	1.11;
access;
symbols
	insight_7_6-2013-04-10-branchpoint:1.11
	gdb_7_6-branch:1.11.0.4
	gdb_7_5-branch:1.11.0.2
	gdb_7_4-branch:1.10.0.14
	gdb_7_3-branch:1.10.0.12
	gdb_7_1-branch:1.10.0.10
	gdb_7_0-branch:1.10.0.8
	arc-sim-20090309:1.10
	arc-insight_6_8-branch:1.10.0.6
	arc-insight_6_8-branchpoint:1.10
	insight_6_8-branch:1.10.0.4
	insight_6_8-branchpoint:1.10
	gdb_6_8-branch:1.10.0.2
	insight_6_6-20070208-release:1.9.4.1
	gdb_6_6-branch:1.9.0.4
	gdb_6_6-2006-11-15-branchpoint:1.9
	insight_6_5-20061003-release:1.9
	gdb_6_5-branch:1.9.0.2
	gdb_6_5-2006-05-14-branchpoint:1.9
	gdb-csl-gxxpro-6_3-branch:1.8.0.8
	gdb-csl-gxxpro-6_3-branchpoint:1.8
	gdb_6_4-branch:1.8.0.6
	gdb_6_4-2005-11-01-branchpoint:1.8
	gdb_6_1-2004-04-05-release:1.8
	gdb_6_1-branch:1.8.0.4
	gdb_6_1-2004-03-01-gmt-branchpoint:1.8
	gdb_6_0-2003-10-04-release:1.8
	gdb_6_0-branch:1.8.0.2
	gdb_6_0-2003-06-23-branchpoint:1.8
	gdb_5_3-2002-12-12-release:1.3
	gdb_5_3-branch:1.3.0.12
	gdb_5_3-2002-09-04-branchpoint:1.3
	gdb_5_2_1-2002-07-23-release:1.3
	gdb_5_2-2002-04-29-release:1.3
	gdb_5_2-branch:1.3.0.10
	gdb_5_2-2002-03-03-branchpoint:1.3
	gdb_5_1_1-2002-01-24-release:1.3
	cygnus_cvs_20020108_pre:1.3
	gdb_5_1_0_1-2002-01-03-branch:1.3.0.8
	gdb_5_1_0_1-2002-01-03-branchpoint:1.3
	gdb_5_1-2001-11-21-release:1.3
	gdb_s390-2001-09-26-branch:1.3.0.6
	gdb_s390-2001-09-26-branchpoint:1.3
	gdb_5_1-2001-07-29-branch:1.3.0.4
	gdb_5_1-2001-07-29-branchpoint:1.3
	dberlin-typesystem-branch:1.3.0.2
	dberlin-typesystem-branchpoint:1.3
	insight-precleanup-2001-01-01:1.1.1.1
	gdb_5_0-2000-05-19-release:1.1.1.1
	gdb_4_18_2-2000-05-18-release:1.1.1.1
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.1
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.1
	gdb_5_0-2000-04-10-branch:1.1.1.1.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1.1.1
	repo-unification-2000-02-06:1.1.1.1
	insight-2000-02-04:1.1.1.1
	SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.11
date	2012.05.25.10.34.32;	author rosch;	state Exp;
branches;
next	1.10;

1.10
date	2006.12.01.03.34.39;	author kseitz;	state Exp;
branches;
next	1.9;

1.9
date	2005.12.23.18.26.50;	author eliz;	state Exp;
branches
	1.9.4.1;
next	1.8;

1.8
date	2003.03.27.18.02.08;	author kseitz;	state Exp;
branches;
next	1.7;

1.7
date	2003.01.21.21.58.33;	author hunt;	state Exp;
branches;
next	1.6;

1.6
date	2002.11.06.23.45.25;	author hunt;	state Exp;
branches;
next	1.5;

1.5
date	2002.11.06.21.05.24;	author hunt;	state Exp;
branches;
next	1.4;

1.4
date	2002.10.15.21.19.51;	author hunt;	state Exp;
branches;
next	1.3;

1.3
date	2001.06.04.15.49.53;	author kseitz;	state Exp;
branches;
next	1.2;

1.2
date	2001.02.08.19.26.31;	author fnasser;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.07.00.19.42;	author jsm;	state Exp;
branches
	1.1.1.1;
next	;

1.9.4.1
date	2006.12.08.04.16.39;	author kseitz;	state Exp;
branches;
next	;

1.1.1.1
date	2000.02.07.00.19.42;	author jsm;	state Exp;
branches;
next	;


desc
@@


1.11
log
@2012-05-25  Roland Schwingel  <roland.schwingel@@onevision.com>

   * library/locals.tcl: Updated copyright.
   (reconfig): New method for getting prefs updates.
   * library/prefs.tcl: Updated copyright.
   (pref_read): Moved comment. Take color for changed
   fields from gdb/src/PC_TAG prefs value.
   (pref_set_defaults): Change default of
   PC_TAG color to a somewhat darker green.
   (pref_set_colors): Call pref_load_default in central place.
   (pref_set_option_db): Remove hard wired old color for
   changed values.
   * library/regwin.itb: Update copyright.
   (reconfig): Update highlight color of register table.
   * library/srcpref.itb: Update copyright.
   (_build_win): Change text of PC color chooser.
   (_apply): Update global changed fields color from PC_TAG color.
   * library/vartree.itb (update_var): use changed field color from
   global colors list.
   (_init_data): Remove local copy of changed vars color.
@
text
@# Local Variable Window for Insight.
# Copyright (C) 2002-2012 Red Hat, Inc.
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License (GPL) as published by
# the Free Software Foundation; either version 2 of the License, or (at
# your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.


# ----------------------------------------------------------------------
# Implements local variables windows for gdb.
# ----------------------------------------------------------------------

itcl::class LocalsWin {
  inherit EmbeddedWin GDBWin
  # ------------------------------------------------------------------
  #  CONSTRUCTOR - create new locals window
  # ------------------------------------------------------------------
  constructor {args} {
    debug

    gdbtk_busy
    build_win $itk_interior
    gdbtk_idle
    
    add_hook gdb_no_inferior_hook "$this no_inferior"
    add_hook gdb_clear_file_hook [code $this clear_file]
    add_hook file_changed_hook [code $this clear_file]

    update dummy
  }
  

  # ------------------------------------------------------------------
  #   PUBLIC METHOD:  busy - BusyEvent handler
  #           Disable all ui elements that could affect gdb's state
  # ------------------------------------------------------------------
  method busy {event} {
    debug
    cursor watch
  }

  # ------------------------------------------------------------------
  #  PUBLIC METHOD:  reconfig - used when preferences change
  # ------------------------------------------------------------------
  method reconfig {} {
    debug
    $tree update
  }

  # Re-enable the UI
  method idle {event} {
    debug
    cursor {}
  }

  # ------------------------------------------------------------------
  # METHOD:   no_inferior
  #           Reset this object.
  # ------------------------------------------------------------------
  method no_inferior {} {
    debug
    cursor {}
    catch {delete object $_frame}
    set _frame {}
    $tree remove all
  }
  
  # ------------------------------------------------------------------
  #  METHOD:  cursor - change the toplevel's cursor
  # ------------------------------------------------------------------
  method cursor {what} {
    [winfo toplevel [namespace tail $this]] configure -cursor $what
    ::update idletasks
  }
  
  
  # ------------------------------------------------------------------
  # METHOD: build_win - build window for variables. 
  # ------------------------------------------------------------------
  method build_win {f} {
    #debug "$f"
    
    set tree [VarTree $f.tree -type "local"]
    pack $f.tree -expand yes -fill both
    pack $f -expand yes -fill both
    
    window_name "Local Variables"
    ::update idletasks
  }


  # ------------------------------------------------------------------
  #  METHOD: clear_file - Clear out state so that a new executable
  #             can be loaded. For LocalWins, this means doing
  #             everything that no_inferior does.
  # ------------------------------------------------------------------
  method clear_file {} {
    no_inferior
  }

  # ------------------------------------------------------------------
  # DESTRUCTOR - delete locals window
  # ------------------------------------------------------------------
  destructor {
    debug
    set tree {}

    # Remove this window and all hooks
    remove_hook gdb_no_inferior_hook "$this no_inferior"
    remove_hook gdb_clear_file_hook [code $this clear_file]
    remove_hook file_changed_hook [code $this clear_file]
  }

  method context_switch {} {
    debug

    set err [catch {gdb_selected_frame} current_frame]
    #debug "1: err=$err; _frame=\"$_frame\"; current_frame=\"$current_frame\""

    if {$err && $_frame != ""} {
      # No current frame
      debug "no current frame"
      catch {delete object $_frame}
      set _frame {}
      return 1
    } elseif {$current_frame == "" && $_frame == ""} {
      #debug "2"
      return 0
    } elseif {$_frame == "" || $current_frame != [$_frame address]} {
      # We've changed frames. If we knew something about
      # the stack layout, we could be more intelligent about
      # destroying variables, but we don't know that here (yet).
      debug "switching to frame at $current_frame"
      
      # Destroy the old frame and create the new one
      catch {destroy $_frame}
      set _frame [Frame ::\#auto $current_frame]
      debug "created new frame: $_frame at [$_frame address]"
      return 1
    }
    
    # Nothing changed
    #debug "3"
    return 0
  }


  method update {event} {
    debug

    # Check that a context switch has not occured
    if {[context_switch]} {
      debug "CONTEXT SWITCH"
      
      # delete variables in tree
      $tree remove all

      if {$_frame != ""} {
	$tree add [$_frame variables]
      }
    } else {
      if {$_frame == ""} {return}
      # check for any new variables in the same frame
      $tree add [$_frame new]
    }    
    after idle [code $tree update]
  }
  
  protected variable Entry
  protected variable tree
  protected variable _frame {}
}
@


1.10
log
@        insight/293:
        * library/watch.tcl (no_inferior): Remove all varobjs and
        clear the display.
        (clear_file): Call no_inferior. Update comments.
        * library/locals.tcl: Remove unused variables "Running"
        and "Variables". Changed throughout.
        (no_inferior): Delete the current frame and clear the display.
        (clear_file): Call no_inferior. Update comments.
        (context_switch): To delete an Itcl object, one uses
        "delete object" not "destroy".
@
text
@d2 1
a2 1
# Copyright (C) 2002, 2003, 2006 Red Hat
d48 8
@


1.9
log
@	* library/attachdlg.itb:
	* library/actiondlg.tcl:
	* library/about.tcl:
	* library/ehandler.itb:
	* library/editor.tcl:
	* library/download.ith:
	* library/download.itb:
	* library/debugwin.ith:
	* library/debugwin.itb:
	* library/cspref.ith:
	* library/cspref.itb:
	* library/console.ith:
	* library/console.itb:
	* library/browserwin.ith:
	* library/browserwin.itb:
	* library/bpwin.ith:
	* library/bpwin.itb:
	* library/blockframe.ith:
	* library/managedwin.ith:
	* library/managedwin.itb:
	* library/main.tcl:
	* library/locals.tcl:
	* library/ipcpref.ith:
	* library/ipcpref.itb:
	* library/ipc.tcl:
	* library/interface.tcl:
	* library/helpviewer.tcl:
	* library/globalpref.ith:
	* library/globalpref.itb:
	* library/gdbwin.ith:
	* library/gdbtoolbar.itcl:
	* library/gdbmenubar.itcl:
	* library/gdbevent.ith:
	* library/gdbevent.itb:
	* library/embeddedwin.ith:
	* library/ehandler.ith:
	* library/srcwin.itb:
	* library/srctextwin.ith:
	* library/srctextwin.itb:
	* library/srcpref.ith:
	* library/srcpref.itb:
	* library/srcbar.itcl:
	* library/session.tcl:
	* library/regwin.ith:
	* library/regwin.itb:
	* library/process.ith:
	* library/process.itb:
	* library/prefs.tcl:
	* library/pluginwin.itcl:
	* library/modal.tcl:
	* library/memwin.ith:
	* library/memwin.itb:
	* library/mempref.ith:
	* library/mempref.itb:
	* library/watch.tcl:
	* library/watch.tcl:
	* library/warning.tcl:
	* library/vartree.ith:
	* library/vartree.itb:
	* library/util.tcl:
	* library/tracedlg.tcl:
	* library/toplevelwin.ith:
	* library/tfind_args.tcl:
	* library/tdump.tcl:
	* library/targetselection.ith:
	* library/targetselection.itb:
	* library/stackwin.ith:
	* library/stackwin.itb:
	* library/srcwin.ith:
@
text
@d2 1
a2 1
# Copyright (C) 2002, 2003 Red Hat
a44 1
    set Running 1
a50 1
    set Running 0
d61 1
a61 1
    set Running 0
d63 1
d92 2
a93 2
  #             can be loaded. For LocalWins, this means deleting
  #             the Variables list.
d96 1
a96 2
    debug
    set Variables {}
a109 4

    foreach var $Variables {
      $var delete
    }
d121 1
a121 1
      catch {destroy $_frame}
a154 1
      set Variables {}
a167 1
  protected variable Variables {}
a168 1
  protected variable Running
@


1.9.4.1
log
@Update from HEAD to fix some serious problems.
@
text
@d2 1
a2 1
# Copyright (C) 2002, 2003, 2006 Red Hat
d45 1
d52 1
d63 1
a63 1
    catch {delete object $_frame}
a64 1
    $tree remove all
d93 2
a94 2
  #             can be loaded. For LocalWins, this means doing
  #             everything that no_inferior does.
d97 2
a98 1
    no_inferior
d112 4
d127 1
a127 1
      catch {delete object $_frame}
d161 1
d175 1
d177 1
@


1.8
log
@        From Nick Kelsey <nickk@@ubicom.com>:
        * process.itb (build_win): Removed ide_sizebox instantiation that is
        no longer required and is causing errors for win hosts.
        * tdump.tcl (build_win): Ditto.
        * locals.tcl (build_win): Removed ide_sizebox instantiation that is
        no longer required and already commented out.
        * regwin.itb (build_win): Ditto.
        * srcwin.itb (constructor): Ditto.
        * stackwin.itb (constructor): Ditto.
        * watch.tcl (constructor): Ditto.
@
text
@d2 1
a2 1
# Copyright 2002, 2003 Red Hat
@


1.7
log
@2003-01-21  Martin M. Hunt  <hunt@@redhat.com>
	* library/main.tcl: Don't require iwidgets 3.0.

	* library/console.itb (Console::_build_win): Rename
	tkTextClosestGap to tk::TextClosestGap. Rename tkCancelRepeat
	to tk::CancelRepeat. Rename tkPriv to tk::Priv. Needed for tk 8.4.1.

	* library/bpwin.itb (BpWin::build_win): Don't
	create sizebox.
	* library/locals.tcl (build_win): Ditto.
	* library/regwin.itb (RegWin::_build_win): Ditto.
	* library/srcwin.itb (SrcWin::constructor): Ditto.
	* library/stackwin.itb (StackWin::build_win): Ditto.
	* library/watch.tcl (build_win): Ditto.
@
text
@a84 4
    if {$::tcl_platform(platform) == "windows"} {
#      ide_sizebox [namespace tail $this].sizebox
#      place [namespace tail $this].sizebox -relx 1 -rely 1 -anchor se
    }
@


1.6
log
@2002-11-06  Martin M. Hunt  <hunt@@redhat.com>

	* library/locals.tcl (build_win): Fix so window opens
	on Windows.
@
text
@d2 1
a2 1
# Copyright 2002 Red Hat
d86 2
a87 2
      ide_sizebox [namespace tail $this].sizebox
      place [namespace tail $this].sizebox -relx 1 -rely 1 -anchor se
@


1.5
log
@2002-11-06  Martin M. Hunt  <hunt@@redhat.com>

	* library/watch.tcl: Completely rewritten to use VarTree.
	* library/locals.tcl: Completely rewritten to use VarTree.
	* library/variables.tcl: Deleted.
	* library/vartree.ith: New file.
	* library/vartree.itb: New file. Implements a variable
	tree.
	* library/tclIndex: Rebuilt.
@
text
@d82 3
d86 2
a87 7
      frame $f.f
      set tree [VarTree $f.f -type "local"]
      pack $f.f -expand yes -fill both -side top
      frame $f.stat
      pack $f.stat -side bottom -fill x
    } else {
      set tree [VarTree $f.tree -type "local"]
a88 3

    pack $f.tree -expand yes -fill both
    pack $f -expand yes -fill both
@


1.4
log
@2002-10-15  Martin M. Hunt  <hunt@@redhat.com>

	* library/* : auto_mkindex cannot rebuild
	tclIndex because it does not recognize the namespace
	import in main.tcl.  To get it to work again, rename the
	following:
		body -> itcl::body
		configbody -> itcl::configbody
		class -> itcl::class
@
text
@d1 2
a2 2
# Local variable window for Insight.
# Copyright 1997, 1998, 1999, 2001 Red Hat
d15 4
d20 168
a187 106
    inherit VariableWin

    # ------------------------------------------------------------------
    #  CONSTRUCTOR - create new locals window
    # ------------------------------------------------------------------
    constructor {args} {
	update dummy
    }

    # ------------------------------------------------------------------
    # DESTRUCTOR - delete locals window
    # ------------------------------------------------------------------
    destructor {
    }

    method build_win {f} {
	global tcl_platform
	build_menu_helper Variable
	if {$tcl_platform(platform) == "windows"} {
	    frame $f.f
	    VariableWin::build_win $f.f
	    pack $f.f -expand yes -fill both -side top
	    frame $f.stat
	    pack $f.stat -side bottom -fill x
	} else {
	    VariableWin::build_win $f
	}
    }


    # ------------------------------------------------------------------
    # METHOD: reconfig
    # Overrides VarialbeWin::reconfig method.  Have to make sure the locals
    #  will get redrawn after everything is destroyed...
    # ------------------------------------------------------------------
    method reconfig {} {
	VariableWin::reconfig
	populate {}
    }

    # ------------------------------------------------------------------
    # METHOD: getVariablesBlankPath
    # Overrides VarialbeWin::getVariablesBlankPath. For a Locals Window,
    # this method returns a list of local variables.
    # ------------------------------------------------------------------
    method getVariablesBlankPath {} {
	global Update
	debug

	return [$_frame variables]
    }

    method update {event} {
	global Update Display

	debug "START LOCALS UPDATE CALLBACK"
	# Check that a context switch has not occured
	if {[context_switch]} {
	    debug "CONTEXT SWITCH"

	    # our context has changed... repopulate with new variables
	    # destroy the old tree and create a new one
	    #
	    # We need to be more intelligent about saving window state
	    # when browsing the stack or stepping into new frames, but
	    # for now, we'll have to settle for just getting this working.
	    deleteTree
	    set ChangeList {}
	    
	    # context_switch will have already created the new frame for
	    # us, so all we need to do is shove stuff into the window.
	    debug "_frame=$_frame"
	    if {$_frame != ""} {
		debug "vars=[$_frame variables]"
	    }
	    if {$_frame != "" && [$_frame variables] != ""} {
		populate {}
	    }
	}

	# Erase old variables
	if {$_frame != ""} {
	    foreach var [$_frame old] {
		$Hlist delete entry $var
		$_frame deleteOld
		unset Update($this,$var)
	    }

	    # Add new variables
	    foreach var [$_frame new] {
		set Update($this,$var) 1
		$Hlist add $var                 \
		    -itemtype text              \
		    -text [label $var]
		if {[$var numChildren] > 0} {
		    # Make sure we get this labeled as openable
		    $Tree setmode $var open
		}
	    }
	}

	# Update variables in window
	VariableWin::update dummy

	debug "END LOCALS UPDATE CALLBACK"
    }
a188 1

@


1.3
log
@	* library/interface.tcl (gdb_update_hook): Mark as deprecated.
	(gdbtk_update): Dispatch and UpdateEvent, too.
	* library/ehandler.ith (update): New event handler.
	* library/gdbevent.ith (UpdateEvent): New event.
	* library/gdbevent.itb (UpdateEvent::constructor): New method.
	(UpdateEvent::get): New method.
	* library/kod.ith (udpate): Match event handler definition.
	* library/kod.itb (update): Ditto.
	(build_win): Pass dummy argument to update method.
	(top): Ditto.
	(up): Ditto.
	(set_variable): Ditto.
	* library/memwin.ith (update): Match event handler definition.
	* library/memwin.itb (update): Ditto.
	(constructor): Remove gdb_update_hook.
	(destructor): Ditto.
	* library/process.ith (update): Match event handler definition.
	* library/process.itb (update): Ditto.
	(constructor): Remove gdb_update_hook.
	(destructor): Ditto.
	(build_win): Pass dummy argument to update method.
	* library/regwin.ith (update): Match event handler definition.
	* library/regwin.itb (update): Ditto.
	(constructor): Remove gdb_update_hook.
	(destructor): Ditto.
	(build_win): Pass dummy argument to update method.
	(but3): Ditto.
	(unedit): Ditto.
	* library/stackwin.ith (update): Match event handler definition.
	* library/stackwin.itb (update): Ditto.
	(constructor): Remove gdb_update_hook.
	(destructor): Ditto.
	(build_win): Pass dummy argument to update method.
	* library/tdump.tcl (update): Match event handler definition.
	(constructor): Remove gdb_update_hook.
	(destructor): Ditto.
	(build_win): Pass dummy argument to update method.
	* library/variables.tcl (update): Match event handler definition.
	(build_win): Pass dummy argument to update method.
	* library/locals.tcl (update): Match event handler definition.
	(constructor): Pass dummy argument to update method.
	* library/watch.tcl (update): Match event handler definition.
	Pass dummy argument to VariableWin::update.
	(add): Pass dummy argument to update method.
	* library/srcwin.ith (update): New method.
	(update_hook_init): Remove.
	* library/srcwin.itb (update): New method.
	(constructor): Remove gdb_update_hook.
	(destructor): Ditto.
	* tclIndex: Regenerate.
@
text
@d15 1
a15 1
class LocalsWin {
@


1.2
log
@2001-02-08  Fernando Nasser  <fnasser@@redhat.com>

	From 2001-02-06  Martin Hunt  <hunt@@redhat.com>
	* library/debugwin.itb: Change window name to "Insight Debug"
	* library/embeddedwin.ith: Fix debug messages.
	* library/locals.tcl: Ditto.
	* library/watch.tcl (postMenu): Ditto.
	* library/variables.tcl: Ditto.
	* library/interface.tcl: Ditto.
	* library/regwin.itb: Ditto.
	* library/gdbwin.ith: Ditto.
	* library/srcbar.itcl: Ditto.
@
text
@d22 1
a22 1
	update
d68 1
a68 1
    method update {} {
d118 1
a118 1
	VariableWin::update
@


1.1
log
@Initial revision
@
text
@d1 2
a2 2
# Local variable window for GDBtk.
# Copyright 1997, 1998, 1999 Cygnus Solutions
d63 1
a63 1
	debug "LocalsWin::getVariablesBlankPath"
@


1.1.1.1
log
@import insight-2000-02-04 snapshot (2nd try)
@
text
@@
