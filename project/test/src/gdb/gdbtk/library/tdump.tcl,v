head	1.11;
access;
symbols
	insight_7_6-2013-04-10-branchpoint:1.11
	gdb_7_6-branch:1.11.0.18
	gdb_7_5-branch:1.11.0.16
	gdb_7_4-branch:1.11.0.14
	gdb_7_3-branch:1.11.0.12
	gdb_7_1-branch:1.11.0.10
	gdb_7_0-branch:1.11.0.8
	arc-sim-20090309:1.11
	arc-insight_6_8-branch:1.11.0.6
	arc-insight_6_8-branchpoint:1.11
	insight_6_8-branch:1.11.0.4
	insight_6_8-branchpoint:1.11
	gdb_6_8-branch:1.11.0.2
	insight_6_6-20070208-release:1.10
	gdb_6_6-branch:1.10.0.4
	gdb_6_6-2006-11-15-branchpoint:1.10
	insight_6_5-20061003-release:1.10
	gdb_6_5-branch:1.10.0.2
	gdb_6_5-2006-05-14-branchpoint:1.10
	gdb-csl-gxxpro-6_3-branch:1.9.0.4
	gdb-csl-gxxpro-6_3-branchpoint:1.9
	gdb_6_4-branch:1.9.0.2
	gdb_6_4-2005-11-01-branchpoint:1.9
	gdb_6_1-2004-04-05-release:1.8
	gdb_6_1-branch:1.8.0.4
	gdb_6_1-2004-03-01-gmt-branchpoint:1.8
	gdb_6_0-2003-10-04-release:1.8
	gdb_6_0-branch:1.8.0.2
	gdb_6_0-2003-06-23-branchpoint:1.8
	gdb_5_3-2002-12-12-release:1.6
	gdb_5_3-branch:1.6.0.2
	gdb_5_3-2002-09-04-branchpoint:1.6
	gdb_5_2_1-2002-07-23-release:1.4
	gdb_5_2-2002-04-29-release:1.4
	gdb_5_2-branch:1.4.0.2
	gdb_5_2-2002-03-03-branchpoint:1.4
	gdb_5_1_1-2002-01-24-release:1.2
	cygnus_cvs_20020108_pre:1.4
	gdb_5_1_0_1-2002-01-03-branch:1.2.0.8
	gdb_5_1_0_1-2002-01-03-branchpoint:1.2
	gdb_5_1-2001-11-21-release:1.2
	gdb_s390-2001-09-26-branch:1.2.0.6
	gdb_s390-2001-09-26-branchpoint:1.2
	gdb_5_1-2001-07-29-branch:1.2.0.4
	gdb_5_1-2001-07-29-branchpoint:1.2
	dberlin-typesystem-branch:1.2.0.2
	dberlin-typesystem-branchpoint:1.2
	insight-precleanup-2001-01-01:1.1.1.1
	gdb_5_0-2000-05-19-release:1.1.1.1
	gdb_4_18_2-2000-05-18-release:1.1.1.1
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.1
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.1
	gdb_5_0-2000-04-10-branch:1.1.1.1.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1.1.1
	repo-unification-2000-02-06:1.1.1.1
	insight-2000-02-04:1.1.1.1
	SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.11
date	2008.02.09.01.23.43;	author kseitz;	state Exp;
branches;
next	1.10;

1.10
date	2005.12.23.18.26.50;	author eliz;	state Exp;
branches;
next	1.9;

1.9
date	2004.05.27.22.01.00;	author hunt;	state Exp;
branches;
next	1.8;

1.8
date	2003.03.27.18.02.08;	author kseitz;	state Exp;
branches;
next	1.7;

1.7
date	2002.10.15.21.19.51;	author hunt;	state Exp;
branches;
next	1.6;

1.6
date	2002.06.07.09.22.44;	author hunt;	state Exp;
branches;
next	1.5;

1.5
date	2002.03.05.22.22.20;	author hunt;	state Exp;
branches;
next	1.4;

1.4
date	2001.11.05.19.15.17;	author hunt;	state Exp;
branches;
next	1.3;

1.3
date	2001.08.28.23.38.01;	author kseitz;	state Exp;
branches;
next	1.2;

1.2
date	2001.06.04.15.49.53;	author kseitz;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.07.00.19.42;	author jsm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.07.00.19.42;	author jsm;	state Exp;
branches;
next	;


desc
@@


1.11
log
@        * library/main.tcl: Add gdbtk_platform definitions.
        * library/attachdlg.itb (list_pids): Use gdbtk_platform
        instead of tcl_platform.
        * library/bpwin.itb (build_win): Likewise.
        (_bp_add): Likewise.
        (_bp_modify): Likewise.
        * library/download.itb (download_it): Likewise.
        * library/globalpref.itb (_build_win): Likewise.
        * library/helpviewer.tcl (open_help): Likewise.
        * library/interface.tcl (gdbtk_tcl_query): Likewise.
        (show_warning): Likewise.
        (open_file): Likewise.
        (run_executable): Likewise.
        * library/managedwin.itb (reveal): Likewise.
        (_create): Likewise.
        * library/prefs.tcl (pref_read): Likewise.
        (pref_set_defaults): Likewise.
        (pref_set_colors): Likewise.
        * library/session.tcl (_exe_name): Likewise.
        * library/srcbar.itcl (_update_file_menu): Likewise.
        (create_run_menu): Likewise.
        * library/srctextwin.itb (_mtime_changed): Likewise.
        (LoadFromCache): Likewise.
        * library/targetselection.itb (default_port): Likewise.
        (build_win): Likewise.

        * library/memwin.itb (build_win): Remove unused tcl_platform
        declaration.
        * library/pluginwin.itcl (enable_ui): Likewise.
        * library/process.itb (build_win): Likewise.
        * library/srcbar.itcl (enable_ui): Likewise.
        * library/srcwin.itb (location): Likewise.
        * library/stackwin.itb (build_win): Likewise.
        * library/tdump.tcl (build_win): Likewise.
@
text
@# Trace dump window for Insight
# Copyright (C) 1998, 1999, 2001, 2002, 2004, 2008 Red Hat, Inc.
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License (GPL) as published by
# the Free Software Foundation; either version 2 of the License, or (at
# your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.


# ----------------------------------------------------------------------
# Implements Tdump window for gdb
#
#   PUBLIC ATTRIBUTES:
#
#
#   METHODS:
#
#     reconfig ....... called when preferences change
#
#
#   X11 OPTION DATABASE ATTRIBUTES
#
#
# ----------------------------------------------------------------------

itcl::class TdumpWin {
  inherit ManagedWin GDBWin

  # ------------------------------------------------------------------
  #  CONSTRUCTOR - create new tdump window
  # ------------------------------------------------------------------
  constructor {args} {
    window_name "Trace Dump"
    build_win
    eval itk_initialize $args
  }


  # ------------------------------------------------------------------
  #  METHOD:  build_win - build the main tdump window
  # ------------------------------------------------------------------
  method build_win {} {
    itk_component add stext {
      iwidgets::scrolledtext $itk_interior.stext -hscrollmode dynamic \
	-vscrollmode dynamic -textfont global/fixed \
	-background $::Colors(bg)
    } {}
    [$itk_component(stext) component text] configure \
      -background $::Colors(bg)
    pack $itk_component(stext) -side left -expand yes -fill both
    update dummy
  }


  # ------------------------------------------------------------------
  #  METHOD:  update - update widget when PC changes
  # ------------------------------------------------------------------
  method update {event} {
    #debug "tdump: update"
    gdbtk_busy
    set tframe_num [gdb_get_trace_frame_num]

    if { $tframe_num!=-1 } {
      debug "doing tdump"
      $itk_component(stext) delete 1.0 end

      if {[catch {gdb_cmd "tdump $tframe_num" 0} tdump_output]} {
	tk_messageBox -title "Error" -message $tdump_output -icon error \
	  -type ok
      } else {
	#debug "tdum output is $tdump_output"
	
	$itk_component(stext) insert end $tdump_output
	$itk_component(stext) see insert
      }
    }
    gdbtk_idle
  }

  # ------------------------------------------------------------------
  #  METHOD:  reconfig - used when preferences change
  # ------------------------------------------------------------------
  method reconfig {} {
    if {[winfo exists $itk_interior.stext]} { destroy $itk_interior.stext }
    build_win
  }
}

@


1.10
log
@	* library/attachdlg.itb:
	* library/actiondlg.tcl:
	* library/about.tcl:
	* library/ehandler.itb:
	* library/editor.tcl:
	* library/download.ith:
	* library/download.itb:
	* library/debugwin.ith:
	* library/debugwin.itb:
	* library/cspref.ith:
	* library/cspref.itb:
	* library/console.ith:
	* library/console.itb:
	* library/browserwin.ith:
	* library/browserwin.itb:
	* library/bpwin.ith:
	* library/bpwin.itb:
	* library/blockframe.ith:
	* library/managedwin.ith:
	* library/managedwin.itb:
	* library/main.tcl:
	* library/locals.tcl:
	* library/ipcpref.ith:
	* library/ipcpref.itb:
	* library/ipc.tcl:
	* library/interface.tcl:
	* library/helpviewer.tcl:
	* library/globalpref.ith:
	* library/globalpref.itb:
	* library/gdbwin.ith:
	* library/gdbtoolbar.itcl:
	* library/gdbmenubar.itcl:
	* library/gdbevent.ith:
	* library/gdbevent.itb:
	* library/embeddedwin.ith:
	* library/ehandler.ith:
	* library/srcwin.itb:
	* library/srctextwin.ith:
	* library/srctextwin.itb:
	* library/srcpref.ith:
	* library/srcpref.itb:
	* library/srcbar.itcl:
	* library/session.tcl:
	* library/regwin.ith:
	* library/regwin.itb:
	* library/process.ith:
	* library/process.itb:
	* library/prefs.tcl:
	* library/pluginwin.itcl:
	* library/modal.tcl:
	* library/memwin.ith:
	* library/memwin.itb:
	* library/mempref.ith:
	* library/mempref.itb:
	* library/watch.tcl:
	* library/watch.tcl:
	* library/warning.tcl:
	* library/vartree.ith:
	* library/vartree.itb:
	* library/util.tcl:
	* library/tracedlg.tcl:
	* library/toplevelwin.ith:
	* library/tfind_args.tcl:
	* library/tdump.tcl:
	* library/targetselection.ith:
	* library/targetselection.itb:
	* library/stackwin.ith:
	* library/stackwin.itb:
	* library/srcwin.ith:
@
text
@d2 1
a2 1
# Copyright (C) 1998, 1999, 2001, 2002, 2004 Red Hat, Inc.
a47 2
    global tcl_platform

@


1.9
log
@2004-05-27  Martin Hunt  <hunt@@redhat.com>

	* library/tdump.tcl (build_win): Remove old nonworking
	code to select scrolledtext mode.  Just use "dynamic".
@
text
@d2 1
a2 1
# Copyright 1998, 1999, 2001, 2002, 2004 Red Hat, Inc.
@


1.8
log
@        From Nick Kelsey <nickk@@ubicom.com>:
        * process.itb (build_win): Removed ide_sizebox instantiation that is
        no longer required and is causing errors for win hosts.
        * tdump.tcl (build_win): Ditto.
        * locals.tcl (build_win): Removed ide_sizebox instantiation that is
        no longer required and already commented out.
        * regwin.itb (build_win): Ditto.
        * srcwin.itb (constructor): Ditto.
        * stackwin.itb (constructor): Ditto.
        * watch.tcl (constructor): Ditto.
@
text
@d2 1
a2 1
# Copyright 1998, 1999, 2001, 2002 Red Hat, Inc.
d51 2
a52 2
      iwidgets::scrolledtext $itk_interior.stext -hscrollmode $mode \
	-vscrollmode $mode -textfont global/fixed \
@


1.7
log
@2002-10-15  Martin M. Hunt  <hunt@@redhat.com>

	* library/* : auto_mkindex cannot rebuild
	tclIndex because it does not recognize the namespace
	import in main.tcl.  To get it to work again, rename the
	following:
		body -> itcl::body
		configbody -> itcl::configbody
		class -> itcl::class
@
text
@a49 8
    if {[string compare $tcl_platform(platform) "windows"] == 0} {
      set mode static
      ide_sizebox $itk_interior.sbox
      place $itk_interior.sbox -relx 1.0 -rely 1.0 -anchor se
    } else {
      set mode dynamic
    }

a90 1
    if {[winfo exists $itk_interior.sbox]} { destroy $itk_interior.sbox }
@


1.6
log
@2002-06-07  Martin M. Hunt  <hunt@@redhat.com>

	* library/prefs.tcl (pref_set_colors): New function.  Set up colors
	from Windows system colors or X resource database. Save in array.
	(pref_set_defaults): Remove gdb/font/normal_fg, etc.
	(pref_read): Call pref_set_colors.

	* library/main.tcl: Remove call to "tix resetoptions TixGray".

	* library/bpwin.itb, library/browserwin.itb, library/console.itb,
	library/globalpref.itb, library/memwin.itb, library/process.itb,
	library/regwin.itb, library/srcpref.itb, library/srctextwin.itb,
	library/stackwin.itb, library/tdump.tcl, library/tracedlg.tcl,
	library/variables.tcl: Replace calls to [pref get gdb/fonts/*]
	for colors with references to Color array. Remove all tixOptions calls.
	Fix up colors as necessary.
@
text
@d31 1
a31 1
class TdumpWin {
@


1.5
log
@2002-03-05  Martin M. Hunt  <hunt@@redhat.com>

	* library/prefs.tcl (pref_read): If a preference specifies
	"src-font", substitute "global/fixed".
	(pref_set_defaults): Change defaults from "src-font" to
	"global/fixed". Do not create font object "src-font". Do
	not add hook to trace its changes.
	(pref_src-font_trace): Remove.

	* library/console.itb (Console::_update_option): Remove
	font update because this happens automatically.

	* library/globalpref.itb: No need to set
	changed flag for fonts; updates happen automatically
	when prefs are updated.

	* library/bpwin.itb: Replaced src-font with global/fixed.
	* library/browserwin.itb: Ditto.
	* library/mempref.itb: Ditto.
	* library/memwin.itb: Ditto.
	* library/process.itb: Ditto.
	* library/regwin.itb: Ditto.
	* library/srcbar.itcl: Ditto.
	* library/srcpref.itb: Ditto.
	* library/srctextwin.itb: Ditto.
	* library/srcwin.itb: Ditto.
	* library/stackwin.itb: Ditto.
	* library/tdump.tcl: Ditto.
	* library/tracedlg.tcl: Ditto.
	* library/variables.tcl: Ditto.
	* library/watch.tcl: Ditto.
@
text
@d61 1
a61 1
	-background [pref get gdb/font/normal_bg]
d64 1
a64 1
      -background [pref get gdb/font/normal_bg]
@


1.4
log
@2001-11-05  Martin M. Hunt  <hunt@@redhat.com>

	* library/stackwin.itb (StcakWin::reconfig): Destroy sbox
	if it exists.

	* library/process.itb (ProcessWin::reconfig): Destroy sbox
	if it exists. This fixes reconfig failures on Windows. Also
	destroy slbox.

	* library/bpwin.itb (BpWin::reconfig): Destroy sbox if
	it exists.This fixes reconfig failures on Windows. Also
	destroy sf

	* library/tdump.tcl (TdumpWin::reconfig): Delete sbox
	and stext then rebuild window.
@
text
@d2 1
a2 1
# Copyright 1998, 1999, 2001 Red Hat, Inc.
d60 1
a60 1
	-vscrollmode $mode -textfont src-font \
@


1.3
log
@	* library/tdump.tcl (class TdumpWin): Inherit from GDBWin
	and ManagedWin.
	(constructor): Remove old itcl2 handling code and name the
	window.
	(build_win): Use iwidgets::scrolledtext instead of
	tixScrolledText.
	(twin): Remove unused variable. Use itk_component(stext)
	instead.
	(maxwidth): Remove unused variable.
	(destructor): Remove unused method.
	(config): Ditto.
@
text
@d99 3
@


1.2
log
@	* library/interface.tcl (gdb_update_hook): Mark as deprecated.
	(gdbtk_update): Dispatch and UpdateEvent, too.
	* library/ehandler.ith (update): New event handler.
	* library/gdbevent.ith (UpdateEvent): New event.
	* library/gdbevent.itb (UpdateEvent::constructor): New method.
	(UpdateEvent::get): New method.
	* library/kod.ith (udpate): Match event handler definition.
	* library/kod.itb (update): Ditto.
	(build_win): Pass dummy argument to update method.
	(top): Ditto.
	(up): Ditto.
	(set_variable): Ditto.
	* library/memwin.ith (update): Match event handler definition.
	* library/memwin.itb (update): Ditto.
	(constructor): Remove gdb_update_hook.
	(destructor): Ditto.
	* library/process.ith (update): Match event handler definition.
	* library/process.itb (update): Ditto.
	(constructor): Remove gdb_update_hook.
	(destructor): Ditto.
	(build_win): Pass dummy argument to update method.
	* library/regwin.ith (update): Match event handler definition.
	* library/regwin.itb (update): Ditto.
	(constructor): Remove gdb_update_hook.
	(destructor): Ditto.
	(build_win): Pass dummy argument to update method.
	(but3): Ditto.
	(unedit): Ditto.
	* library/stackwin.ith (update): Match event handler definition.
	* library/stackwin.itb (update): Ditto.
	(constructor): Remove gdb_update_hook.
	(destructor): Ditto.
	(build_win): Pass dummy argument to update method.
	* library/tdump.tcl (update): Match event handler definition.
	(constructor): Remove gdb_update_hook.
	(destructor): Ditto.
	(build_win): Pass dummy argument to update method.
	* library/variables.tcl (update): Match event handler definition.
	(build_win): Pass dummy argument to update method.
	* library/locals.tcl (update): Match event handler definition.
	(constructor): Pass dummy argument to update method.
	* library/watch.tcl (update): Match event handler definition.
	Pass dummy argument to VariableWin::update.
	(add): Pass dummy argument to update method.
	* library/srcwin.ith (update): New method.
	(update_hook_init): Remove.
	* library/srcwin.itb (update): New method.
	(constructor): Remove gdb_update_hook.
	(destructor): Ditto.
	* tclIndex: Regenerate.
@
text
@d1 2
a2 2
# Trace dump window for GDBtk.
# Copyright 1998, 1999 Cygnus Solutions
d31 3
a33 1
itcl_class TdumpWin {
d37 2
a38 15
  constructor {config} {
    #
    #  Create a window with the same name as this object
    #
    set class [$this info class]
    set hull [namespace tail $this]
    set old_name $this
    ::rename $this $this-tmp-
    ::frame $hull -class $class 
    ::rename $hull $old_name-win-
    ::rename $this $old_name

    set top [winfo toplevel [namespace tail $this]]
    wm withdraw $top

d40 1
a40 2
    after idle [list wm deiconify $top]

d48 1
d50 7
a56 5
     tixScrolledText [namespace tail $this].stext -scrollbar y -height 200 -width 500
     set twin [[namespace tail $this].stext subwidget text]
    
    # make window non editable
    $twin configure -insertwidth 0 
d58 8
a65 1
    pack append  [namespace tail $this] [namespace tail $this].stext {left expand fill}
d80 1
a80 1
      $twin delete 1.0 end
d88 2
a89 2
	$twin insert end $tdump_output
	$twin see insert
a95 14
  #  DESTRUCTOR - destroy window containing widget
  # ------------------------------------------------------------------
  destructor {
    set top [winfo toplevel [namespace tail $this]]
    destroy $this
    destroy $top
  }

  # ------------------------------------------------------------------
  #  METHOD:  config - used to change public attributes
  # ------------------------------------------------------------------
  method config {config} {}
    
  # ------------------------------------------------------------------
a99 6
  
  #
  #  PROTECTED DATA
  #
  protected maxwidth 0
  protected twin
@


1.1
log
@Initial revision
@
text
@a50 1
    add_hook gdb_update_hook "$this update"
d68 1
a68 1
    update
d75 1
a75 1
  method update {} {
a100 1
    remove_hook gdb_update_hook "$this update"
@


1.1.1.1
log
@import insight-2000-02-04 snapshot (2nd try)
@
text
@@
