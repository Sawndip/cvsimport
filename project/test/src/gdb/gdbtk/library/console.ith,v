head	1.13;
access;
symbols
	insight_7_6-2013-04-10-branchpoint:1.13
	gdb_7_6-branch:1.13.0.22
	gdb_7_5-branch:1.13.0.20
	gdb_7_4-branch:1.13.0.18
	gdb_7_3-branch:1.13.0.16
	gdb_7_1-branch:1.13.0.14
	gdb_7_0-branch:1.13.0.12
	arc-sim-20090309:1.13
	arc-insight_6_8-branch:1.13.0.10
	arc-insight_6_8-branchpoint:1.13
	insight_6_8-branch:1.13.0.8
	insight_6_8-branchpoint:1.13
	gdb_6_8-branch:1.13.0.6
	insight_6_6-20070208-release:1.13
	gdb_6_6-branch:1.13.0.4
	gdb_6_6-2006-11-15-branchpoint:1.13
	insight_6_5-20061003-release:1.13
	gdb_6_5-branch:1.13.0.2
	gdb_6_5-2006-05-14-branchpoint:1.13
	gdb-csl-gxxpro-6_3-branch:1.12.0.8
	gdb-csl-gxxpro-6_3-branchpoint:1.12
	gdb_6_4-branch:1.12.0.6
	gdb_6_4-2005-11-01-branchpoint:1.12
	gdb_6_1-2004-04-05-release:1.12
	gdb_6_1-branch:1.12.0.4
	gdb_6_1-2004-03-01-gmt-branchpoint:1.12
	gdb_6_0-2003-10-04-release:1.12
	gdb_6_0-branch:1.12.0.2
	gdb_6_0-2003-06-23-branchpoint:1.12
	gdb_5_3-2002-12-12-release:1.10
	gdb_5_3-branch:1.10.0.4
	gdb_5_3-2002-09-04-branchpoint:1.10
	gdb_5_2_1-2002-07-23-release:1.10
	gdb_5_2-2002-04-29-release:1.10
	gdb_5_2-branch:1.10.0.2
	gdb_5_2-2002-03-03-branchpoint:1.10
	gdb_5_1_1-2002-01-24-release:1.5
	cygnus_cvs_20020108_pre:1.8
	gdb_5_1_0_1-2002-01-03-branch:1.5.0.8
	gdb_5_1_0_1-2002-01-03-branchpoint:1.5
	gdb_5_1-2001-11-21-release:1.5
	gdb_s390-2001-09-26-branch:1.5.0.6
	gdb_s390-2001-09-26-branchpoint:1.5
	gdb_5_1-2001-07-29-branch:1.5.0.4
	gdb_5_1-2001-07-29-branchpoint:1.5
	dberlin-typesystem-branch:1.5.0.2
	dberlin-typesystem-branchpoint:1.5
	insight-precleanup-2001-01-01:1.2
	gdb_5_0-2000-05-19-release:1.1.1.1
	gdb_4_18_2-2000-05-18-release:1.1.1.1
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.1
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.1
	gdb_5_0-2000-04-10-branch:1.1.1.1.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1.1.1
	repo-unification-2000-02-06:1.1.1.1
	insight-2000-02-04:1.1.1.1
	SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.13
date	2005.12.23.18.26.50;	author eliz;	state Exp;
branches;
next	1.12;

1.12
date	2002.12.18.19.35.55;	author hunt;	state Exp;
branches;
next	1.11;

1.11
date	2002.10.15.21.19.50;	author hunt;	state Exp;
branches;
next	1.10;

1.10
date	2002.01.18.17.24.30;	author kseitz;	state Exp;
branches;
next	1.9;

1.9
date	2002.01.15.19.52.01;	author kseitz;	state Exp;
branches;
next	1.8;

1.8
date	2002.01.03.00.03.46;	author kseitz;	state Exp;
branches;
next	1.7;

1.7
date	2002.01.02.23.42.49;	author kseitz;	state Exp;
branches;
next	1.6;

1.6
date	2001.09.28.16.36.50;	author tromey;	state Exp;
branches;
next	1.5;

1.5
date	2001.05.31.20.32.57;	author kseitz;	state Exp;
branches;
next	1.4;

1.4
date	2001.05.31.15.21.40;	author kseitz;	state Exp;
branches;
next	1.3;

1.3
date	2001.04.05.00.04.28;	author hunt;	state Exp;
branches;
next	1.2;

1.2
date	2000.12.04.19.29.01;	author tromey;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.07.00.19.42;	author jsm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.07.00.19.42;	author jsm;	state Exp;
branches;
next	;


desc
@@


1.13
log
@	* library/attachdlg.itb:
	* library/actiondlg.tcl:
	* library/about.tcl:
	* library/ehandler.itb:
	* library/editor.tcl:
	* library/download.ith:
	* library/download.itb:
	* library/debugwin.ith:
	* library/debugwin.itb:
	* library/cspref.ith:
	* library/cspref.itb:
	* library/console.ith:
	* library/console.itb:
	* library/browserwin.ith:
	* library/browserwin.itb:
	* library/bpwin.ith:
	* library/bpwin.itb:
	* library/blockframe.ith:
	* library/managedwin.ith:
	* library/managedwin.itb:
	* library/main.tcl:
	* library/locals.tcl:
	* library/ipcpref.ith:
	* library/ipcpref.itb:
	* library/ipc.tcl:
	* library/interface.tcl:
	* library/helpviewer.tcl:
	* library/globalpref.ith:
	* library/globalpref.itb:
	* library/gdbwin.ith:
	* library/gdbtoolbar.itcl:
	* library/gdbmenubar.itcl:
	* library/gdbevent.ith:
	* library/gdbevent.itb:
	* library/embeddedwin.ith:
	* library/ehandler.ith:
	* library/srcwin.itb:
	* library/srctextwin.ith:
	* library/srctextwin.itb:
	* library/srcpref.ith:
	* library/srcpref.itb:
	* library/srcbar.itcl:
	* library/session.tcl:
	* library/regwin.ith:
	* library/regwin.itb:
	* library/process.ith:
	* library/process.itb:
	* library/prefs.tcl:
	* library/pluginwin.itcl:
	* library/modal.tcl:
	* library/memwin.ith:
	* library/memwin.itb:
	* library/mempref.ith:
	* library/mempref.itb:
	* library/watch.tcl:
	* library/watch.tcl:
	* library/warning.tcl:
	* library/vartree.ith:
	* library/vartree.itb:
	* library/util.tcl:
	* library/tracedlg.tcl:
	* library/toplevelwin.ith:
	* library/tfind_args.tcl:
	* library/tdump.tcl:
	* library/targetselection.ith:
	* library/targetselection.itb:
	* library/stackwin.ith:
	* library/stackwin.itb:
	* library/srcwin.ith:
@
text
@# Console window class definition for GDBtk.
# Copyright (C) 1998, 1999, 2000, 2001, 2002 Red Hat, Inc.
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License (GPL) as published by
# the Free Software Foundation; either version 2 of the License, or (at
# your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.


# ----------------------------------------------------------------------
# Implements a console display widget using primitive widgets as the building
# blocks.  
# ----------------------------------------------------------------------

itcl::class Console {
  inherit EmbeddedWin GDBEventHandler

  public {
    #Approximate maximum number of lines allowed in widget
    variable throttle 2000

    method constructor {args}
    method destructor {}   
    method insert {line {tag ""}}
    method invoke {{controld 0}}
    method _insertion {args}
    method activate {{prompt {}}}
    method test {args}
    method gets {}

    #
    # GDB Events
    #
    method busy {event}
    method idle {event}
  }

  private {
    variable _twin
    variable _invoking 0
    variable _needNL 1
    variable _history {}
    variable _histElement -1
    variable _partialCommand ""
    variable _saved_insertion ""
    variable _running 0
    variable _saw_tab 0
    variable _pendingHistElement -1
    variable _input_mode 0
    variable _input_result ""
    variable _input_error 0

    method _build_win {}
    method _cancel {}
    method _complete {}
    method _delete {{left 0}}
    method _find_completion {cmd completions}
    method _find_lcp {slist}
    method _first {}
    method _last {}
    method _next {}
    method _operate_and_get_next {}
    method _paste {{check_primary 1}}
    method _previous {}
    method _reset_tab {}
    method _search_history {}
    method _rsearch_history {}
    method _setprompt {{prompt {}}}
    method _set_wrap {wrap}
    method _update_option {name value}
  }
}
@


1.12
log
@2002-12-17  Martin M. Hunt  <hunt@@redhat.com>

	* library/interface.tcl (gdbtk_tcl_fputs_target_err):
 	New function.
	(gdbtk_tcl_fputs_target): Open console window if it is
	not already open.
	(gdbtk_gets): New function.
	Opens a console window if necessary and calls Console::gets.

	* library/console.ith (gets): Declare method.
	(_input_mode): New private variable.
	(_input_result): Ditto.
	(_input_error): Ditto.
	(_cancel): New private method
	(invoke): Add arg.

	* library/console.itb (_setprompt): Allow setting prompt
	to nothing.  Delete to beginning of line before writing prompt.
	(gets): New public method to prompt user for input.
	(_cancel): New private method to handle ^C when inputting data.
	(invoke): Check for ^d when in input mode.
@
text
@d2 1
a2 1
# Copyright 1998, 1999, 2000, 2001, 2002 Red Hat, Inc.
@


1.11
log
@2002-10-15  Martin M. Hunt  <hunt@@redhat.com>

	* library/* : auto_mkindex cannot rebuild
	tclIndex because it does not recognize the namespace
	import in main.tcl.  To get it to work again, rename the
	following:
		body -> itcl::body
		configbody -> itcl::configbody
		class -> itcl::class
@
text
@d30 1
a30 1
    method invoke {}
d34 1
d54 3
d59 1
@


1.10
log
@        * library/console.ith (get_text): Delete.
        (test): New public method.
        * library/console.itb (get_text): Delete.
        (test): New public method.
@
text
@d20 1
a20 1
class Console {
@


1.9
log
@update copyrights (dates verified with cvs)
@
text
@a31 1
    method get_text {}
d33 1
@


1.8
log
@Update copyright.
@
text
@d2 1
a2 1
# Copyright 1998, 1999, 2002 Red Hat, Inc.
@


1.7
log
@	* library/console.ith (insert): Add tag parameter.
	(einsert): Delete.
	* library/console.itb: (insert): Add tag parameter.
	(einsert): Delete.
	* library/interface.tcl (gdbtk_tcl_fputs): Use Console::insert.
	(gdbtk_tcl_fputs_error): Likewise.
	(gdbtk_tcl_fputs_log): Likewise.
	(gdbtk_tcl_fputs_target): Likewise.
	(set_target): Likewise.
@
text
@d2 1
a2 1
# Copyright 1998, 1999 Cygnus Solutions
@


1.6
log
@	* library/console.itb (Console::_operate_and_get_next): New method.
	(Console::_setprompt): Insert next history element if requested.
	(Console::_build_win): Bind C-o to _operate_and_get_next.
	* library/console.ith (_operate_and_get_next): Declare.
	(_pendingHistElement): New variable.
@
text
@d29 1
a29 2
    method insert {line}
    method einsert {line tag}
@


1.5
log
@	* library/interface.tcl (gdb_idle_hook): Mark as deprecated.
	(gdbtk_idle): Dispatch an IdleEvent. gdb_idle_hook is gone.
	* library/ehandler.ith (idle): New event handler.
	* library/gdbevent.ith (IdleEvent): New event.
	* library/console.ith (idle): Match event handler definition.
	* library/console.itb (idle): Ditto.
	(constructor): Remove gdb_idle_hook.
	(destructor): Ditto.
	* library/kod.ith (idle): Match event handler definition.
	* library/kod.itb (idle): Ditto.
	(constructor): Remove gdb_idle_hook.
	(destructor): Ditto.
	* library/memwin.ith (idle): Match event handler definition.
	* library/memwin.itb (idle): Ditto.
	(constructor): Remove gdb_idle_hook.
	(destructor): Ditto.
	* library/pluginwin.itcl (stopped): Rename to "idle" and
	match event handler definition.
	Fix misleading comments.
	* library/process.ith (idle): Match event handler definition.
	* library/process.itb (idle): Ditto.
	(constructor): Remove gdb_idle_hook.
	(destructor): Ditto.
	* library/regwin.ith (idle): Match event handler definition.
	* library/regwin.itb (idle): Ditto.
	(constructor): Remove gdb_idle_hook.
	(destructor): Ditto.
	* library/srcbar.itcl (idle): New method.
	(constructor): Remove gdb_idle_hook.
	(destructor): Ditto.
	* library/srcwin.ith (idle): Match event handler definition.
	* library/srcwin.itb (idle): Ditto.
	(constructor): Remove gdb_idle_hook.
	(destructor): Ditto.
	* library/stackwin.ith (idle): Match event handler definition.
	* library/stackwin.itb (idle): Ditto.
	(constructor): Remove gdb_idle_hook.
	(destructor): Ditto.
	* library/variables.tcl (idle): Match event handler definition.
	(constructor): Remove gdb_idle_hook.
	(destructor): Ditto.
	* library/plugins/rhabout/rhabout.itcl (stopped): Rename
	to "idle" and match new event handler definition.
	* library/tclIndex: Regenerated.
@
text
@d53 1
d63 1
@


1.4
log
@	* library/interface.tcl (gdb_busy_hook): Deprecate.
	(gdbtk_busy): Create and dispatch a BusyEvent instead
	of running hooks.
	* library/ehandler.ith (busy): New event handler.
	* library/gdbevent.ith (BusyEvent): New event class.
	* library/console.ith: Inherit from GDBEventHandler.
	(busy): Match event handler definition.
	* library/console.itb (busy): Ditto.
	(constructor): Remove gdb_busy_event.
	(destructor): Ditto.
	* library/kod.ith (busy): Match event handler definition.
	* library/kod.itb (busy): Ditto.
	(constructor): Remove gdb_busy_hook.
	(destructor): Ditto.
	* library/memwin.ith (busy): Match event handler definition.
	* library/memwin.itb (busy): Ditto.
	(constructor): Remove gdb_busy_hook.
	(destructor): Ditto.
	* library/pluginwin.itcl (running): Rename to "busy" and
	match event handler definition.
	(consturctor): Remove gdb_busy_hook.
	(destructor): Ditto.
	* library/process.ith (busy): Match event handler definition.
	* library/process.itb (busy): Ditto.
	(constructor): Remove gdb_busy_hook.
	(destructor): Ditto.
	* library/regwin.ith (busy): Match event handler definition.
	* library/regwin.itb (busy): Ditto.
	(constructor): Remove gdb_busy_hook.
	(destructor): Ditto.
	* library/srcbar.itcl (constructor): Remove gdb_busy_hook.
	(destructor): Ditto.
	(busy): New method.
	* library/srcwin.ith (busy): Match event handler definition.
	* library/srcwin.itb (busy): Ditto.
	Only do the "busy" stuff if do_updates is set.
	(toggle_updates): Remove gdb_busy_hook.
	(constructor): Ditto.
	(destructor): Ditto.
	* library/stackwin.ith (busy): Match event handler definition.
	* library/stackwin.itb (busy): Ditto.
	(constructor): Remove gdb_busy_hook.
	(destructor): Ditto.
	* library/variables.tcl (constructor): Ditto.
	(destructor): Ditto.
	(disable_ui): Rename to "busy" and match event handler
	definition.
	* library/plugins/rhabout/rhabout.itcl (running): Rename
	to "busy" and match new event handler definition.
	* library/tclIndex: Regenerated.
@
text
@a28 1
    method idle {}
d40 1
@


1.3
log
@2001-04-04  Martin M. Hunt  <hunt@@redhat.com>

	* generic/gdbtk-hooks.c (gdbtk_fileopen): New function.
	Initialize ui_file stuff for gdbtk.
	(gdbtk_fputs): Don't print if gdbtk_disable_fputs. Send
	stdlog and stdtarg to their handler functions.

	* generic/gdbtk.c (Gdbtk_Init): Don't set gdb_stdlog
	and gdb_stdtarg to gdb_stdout,
	(gdbtk_init): Unset gdbtk_disable_fputs
	when ready to accept output from gdb. Remove references to
	fputs_unfiltered_hook.

	* generic/gdbtk.h: Declare new flag gdbtk_disable_fputs.

	* generic/gdbtk-cmds.c (gdb_restore_fputs): Instead of setting
	fputs_unfiltered_hook, set the new flag gdbtk_disable_fputs.

	* library/prefs.tcl (pref_set_defaults): Add defaults
	for log_fg and target_fg.

	* library/interface.tcl (gdbtk_tcl_fputs_error): Use
	err_tag.
	(gdbtk_tcl_fputs_log): New function. Write log messages
	to console.
	(gdbtk_tcl_fputs_target): New function.	Write target
	IO to console.

	* library/console.ith (einsert): Add tag parameter.

	* library/console.itb (_build_win): Add new tags for log
	and target IO.
	(einsert): Add tag parameter.
@
text
@d21 1
a21 1
  inherit EmbeddedWin
a29 1
    method busy {}
d36 5
@


1.2
log
@	* console.ith (_set_wrap): Declare.
	(_update_option): Likewise.
	* console.itb (Console::constructor): Install preference hooks
	(commented out pending a bug fix).
	(Console::destructor): Remove preference hooks.
	(Console::_set_wrap): New method.
	(Console::_update_option): New method.
	(Console::_build_win): Use _set_wrap.
@
text
@d32 1
a32 1
    method einsert {line}
@


1.1
log
@Initial revision
@
text
@d64 2
@


1.1.1.1
log
@import insight-2000-02-04 snapshot (2nd try)
@
text
@@
