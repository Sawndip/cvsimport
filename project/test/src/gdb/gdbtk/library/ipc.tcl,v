head	1.2;
access;
symbols
	insight_7_6-2013-04-10-branchpoint:1.2
	gdb_7_6-branch:1.2.0.22
	gdb_7_5-branch:1.2.0.20
	gdb_7_4-branch:1.2.0.18
	gdb_7_3-branch:1.2.0.16
	gdb_7_1-branch:1.2.0.14
	gdb_7_0-branch:1.2.0.12
	arc-sim-20090309:1.2
	arc-insight_6_8-branch:1.2.0.10
	arc-insight_6_8-branchpoint:1.2
	insight_6_8-branch:1.2.0.8
	insight_6_8-branchpoint:1.2
	gdb_6_8-branch:1.2.0.6
	insight_6_6-20070208-release:1.2
	gdb_6_6-branch:1.2.0.4
	gdb_6_6-2006-11-15-branchpoint:1.2
	insight_6_5-20061003-release:1.2
	gdb_6_5-branch:1.2.0.2
	gdb_6_5-2006-05-14-branchpoint:1.2
	gdb-csl-gxxpro-6_3-branch:1.1.0.4
	gdb-csl-gxxpro-6_3-branchpoint:1.1
	gdb_6_4-branch:1.1.0.2
	gdb_6_4-2005-11-01-branchpoint:1.1;
locks; strict;
comment	@# @;


1.2
date	2005.12.23.18.26.50;	author eliz;	state Exp;
branches;
next	1.1;

1.1
date	2004.08.27.23.13.14;	author hunt;	state Exp;
branches;
next	;


desc
@@


1.2
log
@	* library/attachdlg.itb:
	* library/actiondlg.tcl:
	* library/about.tcl:
	* library/ehandler.itb:
	* library/editor.tcl:
	* library/download.ith:
	* library/download.itb:
	* library/debugwin.ith:
	* library/debugwin.itb:
	* library/cspref.ith:
	* library/cspref.itb:
	* library/console.ith:
	* library/console.itb:
	* library/browserwin.ith:
	* library/browserwin.itb:
	* library/bpwin.ith:
	* library/bpwin.itb:
	* library/blockframe.ith:
	* library/managedwin.ith:
	* library/managedwin.itb:
	* library/main.tcl:
	* library/locals.tcl:
	* library/ipcpref.ith:
	* library/ipcpref.itb:
	* library/ipc.tcl:
	* library/interface.tcl:
	* library/helpviewer.tcl:
	* library/globalpref.ith:
	* library/globalpref.itb:
	* library/gdbwin.ith:
	* library/gdbtoolbar.itcl:
	* library/gdbmenubar.itcl:
	* library/gdbevent.ith:
	* library/gdbevent.itb:
	* library/embeddedwin.ith:
	* library/ehandler.ith:
	* library/srcwin.itb:
	* library/srctextwin.ith:
	* library/srctextwin.itb:
	* library/srcpref.ith:
	* library/srcpref.itb:
	* library/srcbar.itcl:
	* library/session.tcl:
	* library/regwin.ith:
	* library/regwin.itb:
	* library/process.ith:
	* library/process.itb:
	* library/prefs.tcl:
	* library/pluginwin.itcl:
	* library/modal.tcl:
	* library/memwin.ith:
	* library/memwin.itb:
	* library/mempref.ith:
	* library/mempref.itb:
	* library/watch.tcl:
	* library/watch.tcl:
	* library/warning.tcl:
	* library/vartree.ith:
	* library/vartree.itb:
	* library/util.tcl:
	* library/tracedlg.tcl:
	* library/toplevelwin.ith:
	* library/tfind_args.tcl:
	* library/tdump.tcl:
	* library/targetselection.ith:
	* library/targetselection.itb:
	* library/stackwin.ith:
	* library/stackwin.itb:
	* library/srcwin.ith:
@
text
@# ipc.tcl
# Copyright (C) 2004 Red Hat, Inc.
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License (GPL) as published by
# the Free Software Foundation; either version 2 of the License, or (at
# your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# ----------------------------------------------------------------------
# Implements IPC for multiple Insight instances, allowing any Insight
# to send commands to all other Insights on the same host.
#
#   PUBLIC METHODS:
#
#     send $cmd - sends $cmd to all Insights
#
# ----------------------------------------------------------------------

itcl::class Iipc {

  private variable socklist
  private variable portnum 9909
  private variable serversock

  constructor {} {
    init
  }

  destructor {
    debug
    foreach sock $socklist {
      catch {::close $sock}
    }

    if {$serversock != "0"} {
      catch {::close $serversock}
    }
    set ::iipc 0
  }
  
  private method init {} {
    debug "iipc init"
    set socklist {}
    set serversock 0
    set portnum [pref get gdb/ipc/port]
    if {[catch {socket -server [code $this accept] $portnum} serversock]} {
      debug "server already exists.  Connecting to it."
      set socklist [socket localhost $portnum]
      fconfigure $socklist -buffering line -blocking 0
      fileevent $socklist readable [code $this read $socklist]
    }
    set ::iipc 1
  }

  # accept new connection to server
  private method accept {sock addr port} {
    debug "accepting connecting from $sock -> $addr:$port"
    fconfigure $sock -buffering line -blocking 0
    lappend socklist $sock
    fileevent $sock readable [code $this sread $sock]
  }

  private method read {s} {
    if [eof $s] {
      debug "The server died on $s!!"
      catch {::close $s}
      init
      return
    }
    gets $s res
    debug "Server: $res"
    switch $res {
      quit { gdb_force_quit }
      stop { gdbtk_stop }
      run { gdbtk_run }
      default {
	catch {gdb_immediate "$res"}
      }
    }
  }

  # server read method.  Reads data then forwards
  # it to all listening sockets.
  private method sread {s} {
    if [eof $s] {
      close $s
      return
    }
    gets $s res
    if {$res != ""} {
      debug "Got: $res"
      foreach sock $socklist {
	if {$s != $sock} {
	  if {[catch {puts $sock $res}]} {
	    close $sock
	  }
	}
      }
      switch $res {
	quit { gdb_force_quit }
	stop { gdbtk_stop }
	run { gdbtk_run }
	default {
	  catch {gdb_immediate "$res"}
	}
      }
    }
  }

  # send data to all sockets.
  public method send {cmd} {
    debug "send $cmd"
    foreach sock $socklist {
      if {[catch {puts $sock $cmd}]} {
	close $sock
      }
    }
  }

  private method close {s} {
    debug "closing socket $s"
    set socklist [lremove $socklist $s]
    catch {::close $s}
  }
}





@


1.1
log
@2004-08-27  Martin Hunt  <hunt@@redhat.com>

	* library/ipc.tcl: New file.
	* library/ipcpref.ith: New file.
	* library/ipcpref.itb: New file.

	* library/srcwin.itb (SrcWin::inferior): Call ipc
	send if enabled.

	* library/prefs.tcl (pref_set_defaults): Enable color
	schemes by default. Add IPC defaults.

	* library/srcbar.itcl (create_pref_menu): Create
	"Advanced" cascade menu and put "Edit Color Schemes"
	and "IPC Support" under it.

	* library/managedwin.itb (ManagedWin::destructor):
	If IPC enabled then send "quit" on exit.

	* library/main.tcl: Start IPC if enabled.

	* library/prefs.tcl (pref_set_defaults): Add IPC defaults.

	* library/gdbmenubar.itcl (menubar_get_current_menu):
	New method.
@
text
@d2 1
a2 1
# Copyright 2004 Red Hat, Inc.
@

