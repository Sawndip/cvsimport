head	1.13;
access;
symbols
	insight_7_6-2013-04-10-branchpoint:1.13
	gdb_7_6-branch:1.13.0.18
	gdb_7_5-branch:1.13.0.16
	gdb_7_4-branch:1.13.0.14
	gdb_7_3-branch:1.13.0.12
	gdb_7_1-branch:1.13.0.10
	gdb_7_0-branch:1.13.0.8
	arc-sim-20090309:1.13
	arc-insight_6_8-branch:1.13.0.6
	arc-insight_6_8-branchpoint:1.13
	insight_6_8-branch:1.13.0.4
	insight_6_8-branchpoint:1.13
	gdb_6_8-branch:1.13.0.2
	insight_6_6-20070208-release:1.11
	gdb_6_6-branch:1.11.0.4
	gdb_6_6-2006-11-15-branchpoint:1.11
	insight_6_5-20061003-release:1.11
	gdb_6_5-branch:1.11.0.2
	gdb_6_5-2006-05-14-branchpoint:1.11
	gdb-csl-gxxpro-6_3-branch:1.10.0.4
	gdb-csl-gxxpro-6_3-branchpoint:1.10
	gdb_6_4-branch:1.10.0.2
	gdb_6_4-2005-11-01-branchpoint:1.10
	gdb_6_1-2004-04-05-release:1.9
	gdb_6_1-branch:1.9.0.4
	gdb_6_1-2004-03-01-gmt-branchpoint:1.9
	gdb_6_0-2003-10-04-release:1.9
	gdb_6_0-branch:1.9.0.2
	gdb_6_0-2003-06-23-branchpoint:1.9
	gdb_5_3-2002-12-12-release:1.8
	gdb_5_3-branch:1.8.0.2
	gdb_5_3-2002-09-04-branchpoint:1.8
	gdb_5_2_1-2002-07-23-release:1.6
	gdb_5_2-2002-04-29-release:1.6
	gdb_5_2-branch:1.6.0.8
	gdb_5_2-2002-03-03-branchpoint:1.6
	gdb_5_1_1-2002-01-24-release:1.6
	cygnus_cvs_20020108_pre:1.6
	gdb_5_1_0_1-2002-01-03-branch:1.6.0.6
	gdb_5_1_0_1-2002-01-03-branchpoint:1.6
	gdb_5_1-2001-11-21-release:1.6
	gdb_s390-2001-09-26-branch:1.6.0.4
	gdb_s390-2001-09-26-branchpoint:1.6
	gdb_5_1-2001-07-29-branch:1.6.0.2
	gdb_5_1-2001-07-29-branchpoint:1.6
	dberlin-typesystem-branch:1.5.0.2
	dberlin-typesystem-branchpoint:1.5
	insight-precleanup-2001-01-01:1.5
	gdb_5_0-2000-05-19-release:1.1.1.1
	gdb_4_18_2-2000-05-18-release:1.1.1.1
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.1
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.1
	gdb_5_0-2000-04-10-branch:1.1.1.1.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1.1.1
	repo-unification-2000-02-06:1.1.1.1
	insight-2000-02-04:1.1.1.1
	SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.13
date	2008.03.03.23.25.03;	author kseitz;	state Exp;
branches;
next	1.12;

1.12
date	2008.02.09.01.23.42;	author kseitz;	state Exp;
branches;
next	1.11;

1.11
date	2005.12.23.18.26.50;	author eliz;	state Exp;
branches;
next	1.10;

1.10
date	2004.12.08.22.31.45;	author kseitz;	state Exp;
branches;
next	1.9;

1.9
date	2002.10.15.21.19.51;	author hunt;	state Exp;
branches;
next	1.8;

1.8
date	2002.08.01.01.19.02;	author kseitz;	state Exp;
branches;
next	1.7;

1.7
date	2002.04.05.02.16.22;	author kseitz;	state Exp;
branches;
next	1.6;

1.6
date	2001.07.13.23.59.05;	author kseitz;	state Exp;
branches;
next	1.5;

1.5
date	2000.11.30.22.49.46;	author tromey;	state Exp;
branches;
next	1.4;

1.4
date	2000.11.30.22.37.29;	author tromey;	state Exp;
branches;
next	1.3;

1.3
date	2000.10.04.20.35.32;	author fnasser;	state Exp;
branches;
next	1.2;

1.2
date	2000.10.04.20.22.17;	author fnasser;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.07.00.19.42;	author jsm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.07.00.19.42;	author jsm;	state Exp;
branches;
next	;


desc
@@


1.13
log
@        From Dave Murphy  <davem@@devkitpro.org>:
        * gdbtk-cmds.c: Guard <sys/ioctl.h> with HAVE_SYS_IOCTL_H.
        * gdbtk-hooks.c: Ditto.
        * gdbtk.c: Ditto.
        * gdbtk-interp.c: Include windows.h under mingw32.
        (gdbtk_start_timer, gdbtk_stop_timer): Remove timer calls under mingw.
        (gdbtk_init): Include windows-specific commands under mingw without
        cygwin path commands.
        * library/download.itb (Download::download_it): Only use ide_cygwin_path
        on cygwin hosts.
        * library/interface.tcl (_open_file): Ditto.
        * library/prefs.tcl (pref_read): Ditto.
        * library/targetselection.itb (TargetSelection::default_port): Default
        to "/dev/com1" under cygwin and "COM1" under mingw.
        (TargetSelection::port_list): Use "/dev/com" under cygwin and
        "COM" under mingw.
@
text
@# Download class implementation for Insight.
# Copyright (C) 1999, 2001 Red Hat, Inc.
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License (GPL) as published by
# the Free Software Foundation; either version 2 of the License, or (at
# your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.


# ----------------------------------------------------------------------
# Download window and associated procs
#
# ----------------------------------------------------------------------

itcl::body Download::constructor {args} {
  global gdb_pretty_name
  debug $args
  eval itk_initialize $args
  window_name "Download Status" "Download"
  add_hook download_progress_hook "$this update_download"

  label $itk_interior.dload -text "Downloading $filename to $gdb_pretty_name"

  label $itk_interior.stat
  set f [frame $itk_interior.f]

  set i 0
  while {$i <$num_sections} {
    iwidgets::feedback $f.meter$i -steps $num_steps
    grid forget [$f.meter$i component percentage]
    label $f.sec$i -text [lindex $section(names) $i] -anchor w
    label $f.num$i -text $bytes($i) -anchor e
    grid $f.sec$i $f.meter$i $f.num$i -padx 4 -pady 4 -sticky news
    incr i
  }
  grid columnconfigure $f 1 -weight 1

  button $itk_interior.cancel -text Cancel -command "$this cancel" \
    -state active -width 10

  pack $itk_interior.dload -padx 5 -pady 5 -side top -fill x -expand yes
  pack $itk_interior.stat -padx 5 -pady 5 -expand yes
  pack $itk_interior.f -padx 5 -pady 5 -fill x -expand yes

  pack $itk_interior.cancel -padx 5 -pady 5 -side bottom
  ::update idletasks
}

# ------------------------------------------------------------------
#  METHOD:  update_download - update the download meters
# ------------------------------------------------------------------
itcl::body Download::update_download { sec num tot } {

  # Loop through all the sections, marking each as either done or
  # updating its meter. This will mark all previous sections prior to
  # SEC as complete. 
  foreach s $section(names) {
    set i $section($s)

    if {$s == $sec} {
      # Advance feedback meter. The iwidgets meter leaves a lot to
      # be desired. No way to query the current setting. No way to
      # set the state of the meter by percentage. It only understands
      # steps, and we must be careful not to step the widget past the
      # the configured number of steps, or else the meter will be
      # set wrong. How lame.
      set steps [expr {$num / $bytes($i) * $num_steps}]
      if {[expr {$completed_steps($s) + $steps}] > $num_steps} {
	set steps [expr {$num_steps - $completed_steps($s)}]
      }
      incr completed_steps($s) $steps
      $itk_interior.f.meter$i step $steps
      break
    } else {
      # Section already loaded. Make sure meter is at 100%.
      if {$completed_steps($s) < $num_steps} {
        set steps [expr {$num_steps - $completed_steps($s)}]
        set completed_steps($s) $num_steps
        $itk_interior.f.meter$i step $steps
      }
    }
  }

  ::update
}

# ------------------------------------------------------------------
#  METHOD:  done - notification that the download is really complete
# ------------------------------------------------------------------
itcl::body Download::done { {msg ""} } {
  bell

  if {$msg == ""} {
    # download finished
    set secs [expr {[clock seconds] - $::download_start_time}]
    if {$secs == 0} { incr secs }
    $itk_interior.cancel config -state disabled
    set bps [expr {8 * $total_bytes / $secs / 1000}]
    $itk_interior.stat config -text "$total_bytes bytes in $secs seconds ($bps kbps)"
    
    # set all indicators to FULL
    foreach sec $section(names) {
      set i $section($sec)
      if {$completed_steps($sec) < $num_steps} {
        set steps [expr {$num_steps - $completed_steps($sec)}]
        set completed_steps($sec) $num_steps
        $itk_interior.f.meter$i step $steps
      }
    }
  } else {
    # download failed
    if {$msg != "CANCEL"} {
      $itk_interior.stat config -text $msg
    }
  }
  
  # enable OK button
  $itk_interior.cancel config -state active -text OK -command "delete object $this"
  ::update
}

# ------------------------------------------------------------------
#  METHOD:  cancel - cancel the download
# ------------------------------------------------------------------
itcl::body Download::cancel {} {
  debug "canceling the download"
  set ::download_cancel_ok 1
}

# ------------------------------------------------------------------
#  DESTRUCTOR - destroy window containing widget
# ------------------------------------------------------------------
itcl::body Download::destructor {} {
  remove_hook download_progress_hook "$this update_download"
}

itcl::body Download::do_download_hooks {} {
  set ::download_timer(ok) 1
}

itcl::body Download::download_hash { section num } {
  global download_timer
  debug "sec=$section num=$num tot=$total_bytes ok=$::download_cancel_ok"
  ::update
  # Only run the timer at discrete times...
  if {[info exists download_timer(timer)]} {
    after cancel $download_timer(timer)
  }
  
  set download_timer(timer) [after 100 Download::do_download_hooks]
  if {![info exists download_timer(ok)] || $download_timer(ok)} {
    run_hooks download_progress_hook $section $num $total_bytes
    ::update
    unset download_timer(timer)
    set download_timer(ok) 0
  }
  
  return $::download_cancel_ok
}

# Download the executable. Return zero for success, and non-zero for error.
itcl::body Download::download_it { } {
  global gdb_exe_name gdb_downloading gdb_loaded
  global gdb_target_name gdb_pretty_name
  global gdb_running gdbtk_platform

  debug "exe=$gdb_exe_name downloading=$gdb_downloading"
  debug "    loaded=$gdb_loaded target=$gdb_target_name running=$gdb_running"

  if {$gdb_downloading || $gdb_exe_name == ""} {
    return 0
  }

  set gdb_downloading 1
  set gdb_loaded 0
  # Make sure the source window has had time to be created
  ::update

  gdbtk_busy

  # Only places that load files should do set_exe
  #set_exe
  switch [set_target] {
    ERROR {
      # target command failed
      set gdb_downloading 0
      gdbtk_idle
      return 0
    }
    CANCELED {
      # command cancelled by user
      set gdb_downloading 0
      if {$gdb_running} {
	# Run the idle hooks (free the UI)
	gdbtk_update
	gdbtk_idle
      } else {
	gdbtk_idle
      }
      return 1
    }
  }

  if {[string compare $gdbtk_platform(os) "cygwin"] == 0} {
    set f [ide_cygwin_path to_win32 $gdb_exe_name]
  } else {
    set f $gdb_exe_name
  }
  if {! [file exists $f]} {
    tk_messageBox -icon error -title GDB -type ok \
      -message "Request to download non-existent executable $gdb_exe_name"
    set gdb_downloading 0
    gdbtk_idle
    return 0
  }

  debug "downloading $gdb_exe_name"

  set target $gdb_target_name

  # get load info and total up number of bytes
  if {[catch {gdb_load_info $gdb_exe_name} val]} {
    set result "$gdb_exe_name: $val"
    tk_dialog .load_warn "" "$result"  error 0 Ok
    return 0
  }
  set i 0
  set total_bytes 0
  set section(names) {}
  foreach x $val {
    set s [lindex $x 0]
    lappend section(names) $s
    set section($s) $i
    set b [lindex $x 1]
    set bytes($i) [expr {double($b)}]
    incr total_bytes $b
    set completed_steps($s) 0
    incr i
  }
  set num_sections $i

  set ::download_cancel_ok 0
  set ::download_start_time [clock seconds]

  if {[pref getd gdb/load/$target-verbose] == "1"} {
    # open a detailed download dialog window
    set download_dialog [ManagedWin::open Download -transient -filename $gdb_exe_name]
  } else {
    # raise source windows
    foreach src [ManagedWin::find SrcWin] {
      $src reveal
      $src toolbar downloading
    }
    set download_dialog ""
  }

  set download_error ""
  debug "starting load"
  ::update idletasks
  if {[catch {gdb_cmd "load $gdb_exe_name"} errTxt]} {
    debug "load returned $errTxt"
    if {[regexp -nocase cancel $errTxt]} {
      set download_error "CANCEL"
    } else {
      set download_error $errTxt
    }
    set ::download_cancel_ok 1
  }

  debug "Done loading"

  set gdb_downloading 0
  if {$::download_cancel_ok} {
    set gdb_loaded 0
    if {$download_dialog != ""} {
      catch {$download_dialog done $download_error}
    }
  } else {
    set gdb_loaded 1
    if {$download_dialog != ""} {
      catch {$download_dialog done}
    }
  }

  foreach src [ManagedWin::find SrcWin] {
    if {$download_error == "CANCEL"} {
      $src download_progress CANCEL 1 1
    } else {
      $src download_progress DONE 0 $total_bytes $download_error
    }
  }

  set ::download_cancel_ok 0
  set download_dialog ""

  gdbtk_idle
  return 0
}
@


1.12
log
@        * library/main.tcl: Add gdbtk_platform definitions.
        * library/attachdlg.itb (list_pids): Use gdbtk_platform
        instead of tcl_platform.
        * library/bpwin.itb (build_win): Likewise.
        (_bp_add): Likewise.
        (_bp_modify): Likewise.
        * library/download.itb (download_it): Likewise.
        * library/globalpref.itb (_build_win): Likewise.
        * library/helpviewer.tcl (open_help): Likewise.
        * library/interface.tcl (gdbtk_tcl_query): Likewise.
        (show_warning): Likewise.
        (open_file): Likewise.
        (run_executable): Likewise.
        * library/managedwin.itb (reveal): Likewise.
        (_create): Likewise.
        * library/prefs.tcl (pref_read): Likewise.
        (pref_set_defaults): Likewise.
        (pref_set_colors): Likewise.
        * library/session.tcl (_exe_name): Likewise.
        * library/srcbar.itcl (_update_file_menu): Likewise.
        (create_run_menu): Likewise.
        * library/srctextwin.itb (_mtime_changed): Likewise.
        (LoadFromCache): Likewise.
        * library/targetselection.itb (default_port): Likewise.
        (build_win): Likewise.

        * library/memwin.itb (build_win): Remove unused tcl_platform
        declaration.
        * library/pluginwin.itcl (enable_ui): Likewise.
        * library/process.itb (build_win): Likewise.
        * library/srcbar.itcl (enable_ui): Likewise.
        * library/srcwin.itb (location): Likewise.
        * library/stackwin.itb (build_win): Likewise.
        * library/tdump.tcl (build_win): Likewise.
@
text
@d209 1
a209 1
  if {[string compare $gdbtk_platform(platform) "windows"] == 0} {
@


1.11
log
@	* library/attachdlg.itb:
	* library/actiondlg.tcl:
	* library/about.tcl:
	* library/ehandler.itb:
	* library/editor.tcl:
	* library/download.ith:
	* library/download.itb:
	* library/debugwin.ith:
	* library/debugwin.itb:
	* library/cspref.ith:
	* library/cspref.itb:
	* library/console.ith:
	* library/console.itb:
	* library/browserwin.ith:
	* library/browserwin.itb:
	* library/bpwin.ith:
	* library/bpwin.itb:
	* library/blockframe.ith:
	* library/managedwin.ith:
	* library/managedwin.itb:
	* library/main.tcl:
	* library/locals.tcl:
	* library/ipcpref.ith:
	* library/ipcpref.itb:
	* library/ipc.tcl:
	* library/interface.tcl:
	* library/helpviewer.tcl:
	* library/globalpref.ith:
	* library/globalpref.itb:
	* library/gdbwin.ith:
	* library/gdbtoolbar.itcl:
	* library/gdbmenubar.itcl:
	* library/gdbevent.ith:
	* library/gdbevent.itb:
	* library/embeddedwin.ith:
	* library/ehandler.ith:
	* library/srcwin.itb:
	* library/srctextwin.ith:
	* library/srctextwin.itb:
	* library/srcpref.ith:
	* library/srcpref.itb:
	* library/srcbar.itcl:
	* library/session.tcl:
	* library/regwin.ith:
	* library/regwin.itb:
	* library/process.ith:
	* library/process.itb:
	* library/prefs.tcl:
	* library/pluginwin.itcl:
	* library/modal.tcl:
	* library/memwin.ith:
	* library/memwin.itb:
	* library/mempref.ith:
	* library/mempref.itb:
	* library/watch.tcl:
	* library/watch.tcl:
	* library/warning.tcl:
	* library/vartree.ith:
	* library/vartree.itb:
	* library/util.tcl:
	* library/tracedlg.tcl:
	* library/toplevelwin.ith:
	* library/tfind_args.tcl:
	* library/tdump.tcl:
	* library/targetselection.ith:
	* library/targetselection.itb:
	* library/stackwin.ith:
	* library/stackwin.itb:
	* library/srcwin.ith:
@
text
@d170 1
a170 2
  global gdb_running
  global tcl_platform
d209 1
a209 1
  if {[string compare $tcl_platform(platform) "windows"] == 0} {
@


1.10
log
@        * library/download.ith (completed_steps): New variable.
        * library/download.itb (Download::constructor): Remove
        "-fraction" option from iwidgets feedback widget. It's not a valid
        option!
        (update_download): Compute the step number and use that to
        update the feedback widget.
        (done): Use completed_steps to figure out how many steps
        the dumb feedback meter needs to show full.
@
text
@d2 1
a2 1
# Copyright 1999, 2001 Red Hat, Inc.
@


1.9
log
@2002-10-15  Martin M. Hunt  <hunt@@redhat.com>

	* library/* : auto_mkindex cannot rebuild
	tclIndex because it does not recognize the namespace
	import in main.tcl.  To get it to work again, rename the
	following:
		body -> itcl::body
		configbody -> itcl::configbody
		class -> itcl::class
@
text
@d34 1
a34 1
    iwidgets::feedback $f.meter$i -steps $num_steps -fraction 0.0
d66 12
a77 2
      set f [expr {$num / $bytes($i)}]
      $itk_interior.f.meter$i configure -fraction $f
d80 6
a85 1
      $itk_interior.f.meter$i configure -fraction 1.0
d109 5
a113 1
      $itk_interior.f.meter$i configure -fraction 1.0
d243 1
@


1.8
log
@        * library/browserwin.itb (_full_funcs_combo): Remove "-modal"
        option from tk_messageBox call. It was redhat-local in tk8.0,
        but is no longer in tk8.3.
        * library/download.itb (download_it): Likewise.
        * library/interface.tcl (gdbtk_tcl_query): Likewise.
        (show_warning): Likewise.
        (set_exe): Likewise.
        (set_target): Likewise.
        * library/memwin.itb (error_dialog): Likewise.
        * library/srcwin.itb (fillFuncCB): Likewise.
        * library/util.tcl (tfind_cmd): Likewise.
@
text
@d20 1
a20 1
body Download::constructor {args} {
d57 1
a57 1
body Download::update_download { sec num tot } {
d80 1
a80 1
body Download::done { {msg ""} } {
d111 1
a111 1
body Download::cancel {} {
d119 1
a119 1
body Download::destructor {} {
d123 1
a123 1
body Download::do_download_hooks {} {
d127 1
a127 1
body Download::download_hash { section num } {
d148 1
a148 1
body Download::download_it { } {
@


1.7
log
@        * library/download.itb (constructor): Set feedback meter
        to "0.0".
        Remove "steps" array.
        (update_download): Use fractional completions for feedback.
        (done): Ditto.
        * library/download.ith (protected variable steps): Remove.
@
text
@d197 1
a197 1
    tk_messageBox -icon error -title GDB -type ok -modal task\
@


1.6
log
@	* library/download.itb (constructor): Use the iwidgets
	feedback widget instead of tixMeter.
	Pack all the topmost widgets together -- don't use grid.
	(update_download): Support the feedback widget.
	(done): Ditto.

	* library/download.ith (steps): New private variable.
	(num_steps): New common.
@
text
@d34 1
a34 1
    iwidgets::feedback $f.meter$i -steps $num_steps
a38 1
    set steps($i) 0
d66 2
a67 5
      set stepSize [expr {int($bytes($i) / $num_steps)}]
      set new_step [expr {int($num / $stepSize)}]
      set diff     [expr {$new_step - $steps($i)}]
      set steps($i) $new_step
      $itk_interior.f.meter$i step $diff
d70 1
a70 3
      if {$steps($i) != $num_steps} {
	$itk_interior.f.meter$i step $num_steps
      }
d94 1
a94 3
      if {$steps($i) != $num_steps} {
	$itk_interior.f.meter$i step $num_steps
      }
@


1.5
log
@Reverted erroneous checkin.  Sorry about that.
@
text
@d1 2
a2 2
# Download class implementation for GDBtk.
# Copyright 1999 Cygnus Solutions
d34 2
a35 1
    tixMeter $f.meter$i -value 0 -text 0 
d39 1
d42 1
a42 4

  grid $itk_interior.dload -padx 5 -pady 5
  grid $itk_interior.stat -padx 5 -pady 5
  grid $itk_interior.f -padx 5 -pady 5
d46 7
a52 3
  grid $itk_interior.cancel -padx 5 -pady 5
#  grid  $itk_interior
  
d67 5
a71 1
      $itk_interior.f.meter$i config -value [expr {$num / $bytes($i)}] -text $num
d74 2
a75 2
      if {[expr {double([$itk_interior.f.meter$i cget -value])}] != 1.0} {
	$itk_interior.f.meter$i config -value 1.0 -text [expr {int($bytes($i))}]
d79 1
d100 3
a102 1
      $itk_interior.f.meter$i config -value 1.0 -text "DONE"
d144 1
a144 1
  set download_timer(timer) [after 333 Download::do_download_hooks]
d161 1
a161 1
  
d164 1
a164 1
  
d168 1
a168 1
  
d173 1
a173 1
  
d175 1
a175 1
  
d198 1
a198 1
  
d211 1
a211 1
  
d213 1
a213 1
  
a237 1
  
d250 1
a250 1
  
d263 1
a263 1
  
d278 1
a278 1
  
@


1.4
log
@	* prefs.tcl (pref_save): Put version number into file.  Added
	`session' to list of top-level keys.  Allow keys with many `/'s.
	(pref_read): Recognize version number.
	(escape_value): Generate URL-style encoding.
	(unescape_value): Added `version' argument.  Handle URL decoding.
@
text
@d269 1
a269 1

@


1.3
log
@2000-10-04  Fernando Nasser  <fnasser@@totem.to.cygnus.com>

	* download.itb (download_it): Fix previous changes for non-windows
	hosts.
	* srctextwin.itb (LoadFromCache): Ditto.
@
text
@d269 1
a269 1
  
@


1.2
log
@2000-10-04  Fernando Nasser  <fnasser@@totem.to.cygnus.com>

	* download.itb (download_it): Convert filename to native before
	passing it to a Tcl command.
	* srctextwin.itb (_mtime_changed): Ditto.
	(LoadFromCache): Ditto.
@
text
@d191 2
@


1.1
log
@Initial revision
@
text
@d150 1
d189 4
a192 1
  if {! [file exists $gdb_exe_name]} {
@


1.1.1.1
log
@import insight-2000-02-04 snapshot (2nd try)
@
text
@@
