head	1.13;
access;
symbols
	insight_7_6-2013-04-10-branchpoint:1.13
	gdb_7_6-branch:1.13.0.22
	gdb_7_5-branch:1.13.0.20
	gdb_7_4-branch:1.13.0.18
	gdb_7_3-branch:1.13.0.16
	gdb_7_1-branch:1.13.0.14
	gdb_7_0-branch:1.13.0.12
	arc-sim-20090309:1.13
	arc-insight_6_8-branch:1.13.0.10
	arc-insight_6_8-branchpoint:1.13
	insight_6_8-branch:1.13.0.8
	insight_6_8-branchpoint:1.13
	gdb_6_8-branch:1.13.0.6
	insight_6_6-20070208-release:1.13
	gdb_6_6-branch:1.13.0.4
	gdb_6_6-2006-11-15-branchpoint:1.13
	insight_6_5-20061003-release:1.13
	gdb_6_5-branch:1.13.0.2
	gdb_6_5-2006-05-14-branchpoint:1.13
	gdb-csl-gxxpro-6_3-branch:1.12.0.4
	gdb-csl-gxxpro-6_3-branchpoint:1.12
	gdb_6_4-branch:1.12.0.2
	gdb_6_4-2005-11-01-branchpoint:1.12
	gdb_6_1-2004-04-05-release:1.11
	gdb_6_1-branch:1.11.0.4
	gdb_6_1-2004-03-01-gmt-branchpoint:1.11
	gdb_6_0-2003-10-04-release:1.11
	gdb_6_0-branch:1.11.0.2
	gdb_6_0-2003-06-23-branchpoint:1.11
	gdb_5_3-2002-12-12-release:1.9
	gdb_5_3-branch:1.9.0.2
	gdb_5_3-2002-09-04-branchpoint:1.9
	gdb_5_2_1-2002-07-23-release:1.8
	gdb_5_2-2002-04-29-release:1.8
	gdb_5_2-branch:1.8.0.2
	gdb_5_2-2002-03-03-branchpoint:1.8
	gdb_5_1_1-2002-01-24-release:1.7
	cygnus_cvs_20020108_pre:1.8
	gdb_5_1_0_1-2002-01-03-branch:1.7.0.8
	gdb_5_1_0_1-2002-01-03-branchpoint:1.7
	gdb_5_1-2001-11-21-release:1.7
	gdb_s390-2001-09-26-branch:1.7.0.6
	gdb_s390-2001-09-26-branchpoint:1.7
	gdb_5_1-2001-07-29-branch:1.7.0.4
	gdb_5_1-2001-07-29-branchpoint:1.7
	dberlin-typesystem-branch:1.7.0.2
	dberlin-typesystem-branchpoint:1.7
	insight-precleanup-2001-01-01:1.3
	gdb_5_0-2000-05-19-release:1.2
	gdb_4_18_2-2000-05-18-release:1.2
	gdb_4_95_1-2000-05-11-snapshot:1.2
	gdb_4_95_0-2000-04-27-snapshot:1.2
	gdb_5_0-2000-04-10-branch:1.2.0.2
	gdb_5_0-2000-04-10-branchpoint:1.2
	repo-unification-2000-02-06:1.1.1.1
	insight-2000-02-04:1.1.1.1
	SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.13
date	2005.12.23.18.26.50;	author eliz;	state Exp;
branches;
next	1.12;

1.12
date	2004.04.05.20.36.51;	author hunt;	state Exp;
branches;
next	1.11;

1.11
date	2002.12.17.20.29.12;	author hunt;	state Exp;
branches;
next	1.10;

1.10
date	2002.10.15.21.19.51;	author hunt;	state Exp;
branches;
next	1.9;

1.9
date	2002.05.16.01.09.37;	author hunt;	state Exp;
branches;
next	1.8;

1.8
date	2001.08.13.18.58.36;	author kseitz;	state Exp;
branches;
next	1.7;

1.7
date	2001.06.04.15.49.53;	author kseitz;	state Exp;
branches;
next	1.6;

1.6
date	2001.05.31.20.32.58;	author kseitz;	state Exp;
branches;
next	1.5;

1.5
date	2001.05.31.15.21.40;	author kseitz;	state Exp;
branches;
next	1.4;

1.4
date	2001.04.20.18.47.33;	author kseitz;	state Exp;
branches;
next	1.3;

1.3
date	2000.05.03.19.48.48;	author fnasser;	state Exp;
branches;
next	1.2;

1.2
date	2000.04.05.23.53.12;	author jingham;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.07.00.19.42;	author jsm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.07.00.19.42;	author jsm;	state Exp;
branches;
next	;


desc
@@


1.13
log
@	* library/attachdlg.itb:
	* library/actiondlg.tcl:
	* library/about.tcl:
	* library/ehandler.itb:
	* library/editor.tcl:
	* library/download.ith:
	* library/download.itb:
	* library/debugwin.ith:
	* library/debugwin.itb:
	* library/cspref.ith:
	* library/cspref.itb:
	* library/console.ith:
	* library/console.itb:
	* library/browserwin.ith:
	* library/browserwin.itb:
	* library/bpwin.ith:
	* library/bpwin.itb:
	* library/blockframe.ith:
	* library/managedwin.ith:
	* library/managedwin.itb:
	* library/main.tcl:
	* library/locals.tcl:
	* library/ipcpref.ith:
	* library/ipcpref.itb:
	* library/ipc.tcl:
	* library/interface.tcl:
	* library/helpviewer.tcl:
	* library/globalpref.ith:
	* library/globalpref.itb:
	* library/gdbwin.ith:
	* library/gdbtoolbar.itcl:
	* library/gdbmenubar.itcl:
	* library/gdbevent.ith:
	* library/gdbevent.itb:
	* library/embeddedwin.ith:
	* library/ehandler.ith:
	* library/srcwin.itb:
	* library/srctextwin.ith:
	* library/srctextwin.itb:
	* library/srcpref.ith:
	* library/srcpref.itb:
	* library/srcbar.itcl:
	* library/session.tcl:
	* library/regwin.ith:
	* library/regwin.itb:
	* library/process.ith:
	* library/process.itb:
	* library/prefs.tcl:
	* library/pluginwin.itcl:
	* library/modal.tcl:
	* library/memwin.ith:
	* library/memwin.itb:
	* library/mempref.ith:
	* library/mempref.itb:
	* library/watch.tcl:
	* library/watch.tcl:
	* library/warning.tcl:
	* library/vartree.ith:
	* library/vartree.itb:
	* library/util.tcl:
	* library/tracedlg.tcl:
	* library/toplevelwin.ith:
	* library/tfind_args.tcl:
	* library/tdump.tcl:
	* library/targetselection.ith:
	* library/targetselection.itb:
	* library/stackwin.ith:
	* library/stackwin.itb:
	* library/srcwin.ith:
@
text
@# Register display window class definition for Insight.
# Copyright (C) 1998, 1999, 2001 Red Hat, Inc.
#
# Written by Keith Seitz (keiths@@redhat.com)
# based on work by Martin Hunt (hunt@@redhat.com)
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License (GPL) as published by
# the Free Software Foundation; either version 2 of the License, or (at
# your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.


itcl::class RegWin {
  inherit EmbeddedWin GDBWin
  
  private {
    variable _change_list {}
    variable _menuitems

    # Display data for the table
    variable _data

    # Mapping of table cell index to register number
    variable _register

    # the register group that is displayed
    variable _group "all"

    # Mapping of register number to table cell index. "hidden" if
    # the register was "removed" from the display.
    variable _cell

    # Is REGNUM editable?
    variable _editable

    # List of possible display types for the registers (indexed by regnum)
    variable _types
    # The display type to use for each register (indexed by regnum)
    variable _type
    # The display format to use for each register (indexed by regnum)
    variable _format

    # The list of registers we're displaying
    variable _reg_display_list {}

    # Size of columns
    variable _col_size
    variable _max_label_width

    # Dimensions
    variable _rows
    variable _cols

    # Fencepost
    variable _running 0


    # Table layout/display methods
    method _build_win {}
    method _layout_table {}
    method _load_prefs {}
    method _size_cell_column {cell down}
    method _size_column {col down}

    # Table event handlers and related methods
    method _accept_edit {}
    method _add_to_watch {rn}
    method _but3 {x y X Y}
    method _delete_from_display {rn} 
    method _display_all {} 
    method _edit {x y}
    method _move {direction}
    method _open_memory {rn}
    method _select_group {}
    method _select_cell {cell}
    method _unedit {}

    # Register operations
    method _get_value {rn}
    method _change_format {rn {t {}}}
    method _update_register {rn}
  }

  public {
    method constructor {args}
    method destructor {}

    #
    # Gdb Events
    #
    method busy {event}
    method idle {event}
    method set_variable {event}
    method update {event}
    method arch_changed {event}
    method reconfig {}
  }
}
@


1.12
log
@2004-04-05  Martin Hunt  <hunt@@redhat.com>

	* library/session.tcl: Make hostname and portname
	session-dependent. Add gdb_bg_num (the color
	scheme number) as a per-session variable.

	* library/prefs.tcl (pref_read): If color schemes are in use,
	set colors based on the current scheme.
	(pref_save): Add "bg" section.
	(pref_set_defaults): Define new variable gdb/use_color_schemes
	and define 16 default background colors.

	* library/managedwin.itb (ManagedWin::window_name): Append
	window "instance" string to window name.
	(ManagedWin::window_instance): Set window instance string.

	* library/debugwin.itb: Add a reconfig method to restore
	unique black textbackground, overriding color scheme.

	* library/csprefs.itb:
	* library/csprefs.ith: New files. Implement color scheme
	preferences.

	* library/util.tcl (set_bg_colors): New function.
	(r_setcolors): New function.

	* library/regwin.itb (_prefs_changed): Deleted.
	(reconfig): New function.  Updates tkTable color tags
	if color scheme changes.
	* library/regwin.ith: Update to reflect above changes.

	* library/srcbar.itcl (create_pref_menu): Add pulldown
	menus for "Edit Color Schemes..." and "Use Color Schemes".
	(reconfig): Fix up menu items for color schemes.

	* library/globalpref.itb (_init_var): Add
	gdb/use_color_schemes to variable list.
	(_build_win): Add a checkbutton to enable/disable
	color schemes.

	* library/gdbmenubar.itcl (menubar_add_cascade): Add a class
	argument so cascade menus can be managed by class too.

	* library/interface.tcl (gdbtk_tcl_fputs): Check for
	existence of gdbtk_state(console).  Stops annoying error
	messages.
	(gdbtk_tcl_fputs_error): Ditto.
	(gdbtk_tcl_fputs_log): Ditto.
@
text
@d2 1
a2 1
# Copyright 1998, 1999, 2001 Red Hat, Inc.
@


1.11
log
@2002-12-17  Martin M. Hunt  <hunt@@redhat.com>

	* library/regwin.itb (_load_prefs): Get list of registers from
	the group name.
	(_build_win): Remove old menu system.  Replace with an optionmenu
	that contains all the valid group names for this architecture.
	(_layout_table): No need to update old menu.
	(_but3): Add "Close" to popup menu.
	(_delete_from_display): No need to update old menu.
	(_display_all): Ditto.
	(_post_menu): Deleted.
	(_select_group): New method. Callback for group optionmenu.

	* library/regwin.ith: New private variable _group.
	New private method _select_group.  Removed _post_menu.

	* generic/gdbtk-register.c: Include reggroups.h.
	(gdb_register_info): Add "group" and "grouplist".
	(gdb_regformat): Fix Tcl_WrongNumArgs call so it doesn't crash.
	(gdb_reggrouplist): New function. Returns the names of the
	register groups.
	(gdb_reggroup): New function. Returns the register numbers of the
	registers in a group.
@
text
@a66 1
    method _prefs_changed {pref value}
d101 1
@


1.10
log
@2002-10-15  Martin M. Hunt  <hunt@@redhat.com>

	* library/* : auto_mkindex cannot rebuild
	tclIndex because it does not recognize the namespace
	import in main.tcl.  To get it to work again, rename the
	following:
		body -> itcl::body
		configbody -> itcl::configbody
		class -> itcl::class
@
text
@d31 3
d80 1
a80 1
    method _post_menu {}
@


1.9
log
@2002-05-15  Martin M. Hunt  <hunt@@redhat.com>

	* library/help/register.html: Rewrite docs.

	* library/regwin.ith (_types): New private variable array to save
	the possible types for each register.
	(_type): New private variable array to save the selected type for
	each register.
	(_rows): New private variable. Number of rows in the table.
	(_cols): New private variable. Number of cols in the table.
	(_load_prefs): New private method.
	(_open_memory): New private method.
	(_edit_menu): Deleted:
	(_select): Deleted.
	(_change_format): Add optional type argument.

	* library/regwin.itb (RegWin::_load_prefs): New method. Collects
	all the prefs stuff here instead of in _layout_table. Prefs
	code was all rewritten to handle new types and formats.
	(RegWin::_build_win): Disable Double-1 binding. Bind
	button 1 to edit the cell. Don't make an Edit menu item.
	Remove Natural, Binary, Octal, and Raw formats. Add "Open
	Memory Window" menu item.
	(RegWin::_dimensions): This function was being abused so I removed
	it. Replaced with inline code in _layout_table which saves its
	computed values so it doesn't have to be recalculated unless
	something changes.
	(RegWin::_layout_table): Rewritten to be more efficient. Grabs
	all values in one call to gdb_reginfo instead of one for each register.
	Uses new types and formats.  Calls _load_prefs.
	(RegWin::_accept_edit): Use type information when setting value.
	When done, call _unedit to remove tags.
	(RegWin::_open_memory): Open memory window with initial value
	set to the value of a register.
	(RegWin::_but3): Add types menu items. Limit format options
	to reasonable ones. Add "Open Memory Window". Add "Help"
	(RegWin::_edit): Just call _select_cell.
	(RegWin::_edit_menu): Deleted.
	(RegWin::_move): Don't recompute rows and cols; use _rows and
	_cols computed by _layout_table.
	(RegWin::_post_menu): Update types and formats. Disable "Open Memory
	Window" if register is not integer. Remove Edit.
	(RegWin::_select): Deleted.
	(RegWin::_select_cell):	Tag cell as being edited. Then
	call focus, which is a workaround for a TkTable glitch where
	the insertion bar sometimes disappeared.
	(RegWin::_unedit): Clear selection. Call focus. Don't change
	any bindings.
	(RegWin::_get_value): Eliminate previous crap and just call
	"gdb_reginfo value".
	(RegWin::_change_format): Add optional type arg.  Call
	"gdb_reginfo format".
	(RegWin::_update): Get a list of all the changed registers
	instead of checking one at a time.

	* generic/gdbtk-register.c (Gdbtk_Register_Init): Don't
	create gdb_pc_reg.  It is not used. Call register_gdbarch_swap
	with regformat and regtype.
	(gdb_register_info): Add "type" and "format" options.
	(get_pc_register): Delete.
	(get_register_types): New function.  Returns list of valid types
	for a list of registers.
	(get_register): Use saved format and type for each register. Check if
	there are any registers yet (target not running). Use mem_file
	to collect output. Append output to a list.
	(map_arg_registers): If passed a list, iterate though each element
	and build a list of values to return.
	(setup_architecture_data): Memory was not being initialized, so
	use xcalloc(). Allocate memory for regformat and regtype.
	(gdb_regformat): New function called by "gdb_reginfo format".
@
text
@d18 1
a18 1
class RegWin {
@


1.8
log
@	* library/regwin.ith: Rewrite.
	* library/regwin.itb: Rewrite.
	* library/tclIndex: Regenerate.
@
text
@a34 3
    # Display formats for the registers (indexed by regnum)
    variable _format

d38 6
a43 2
    # Is REGNUM typed?
    variable _typed
d50 5
a61 1
    method _dimensions {}
d63 1
a74 1
    method _edit_menu {rn}
d76 1
a77 1
    method _select {x y}
d83 1
a83 1
    method _change_format {rn}
@


1.7
log
@	* library/interface.tcl (gdb_update_hook): Mark as deprecated.
	(gdbtk_update): Dispatch and UpdateEvent, too.
	* library/ehandler.ith (update): New event handler.
	* library/gdbevent.ith (UpdateEvent): New event.
	* library/gdbevent.itb (UpdateEvent::constructor): New method.
	(UpdateEvent::get): New method.
	* library/kod.ith (udpate): Match event handler definition.
	* library/kod.itb (update): Ditto.
	(build_win): Pass dummy argument to update method.
	(top): Ditto.
	(up): Ditto.
	(set_variable): Ditto.
	* library/memwin.ith (update): Match event handler definition.
	* library/memwin.itb (update): Ditto.
	(constructor): Remove gdb_update_hook.
	(destructor): Ditto.
	* library/process.ith (update): Match event handler definition.
	* library/process.itb (update): Ditto.
	(constructor): Remove gdb_update_hook.
	(destructor): Ditto.
	(build_win): Pass dummy argument to update method.
	* library/regwin.ith (update): Match event handler definition.
	* library/regwin.itb (update): Ditto.
	(constructor): Remove gdb_update_hook.
	(destructor): Ditto.
	(build_win): Pass dummy argument to update method.
	(but3): Ditto.
	(unedit): Ditto.
	* library/stackwin.ith (update): Match event handler definition.
	* library/stackwin.itb (update): Ditto.
	(constructor): Remove gdb_update_hook.
	(destructor): Ditto.
	(build_win): Pass dummy argument to update method.
	* library/tdump.tcl (update): Match event handler definition.
	(constructor): Remove gdb_update_hook.
	(destructor): Ditto.
	(build_win): Pass dummy argument to update method.
	* library/variables.tcl (update): Match event handler definition.
	(build_win): Pass dummy argument to update method.
	* library/locals.tcl (update): Match event handler definition.
	(constructor): Pass dummy argument to update method.
	* library/watch.tcl (update): Match event handler definition.
	Pass dummy argument to VariableWin::update.
	(add): Pass dummy argument to update method.
	* library/srcwin.ith (update): New method.
	(update_hook_init): Remove.
	* library/srcwin.itb (update): New method.
	(constructor): Remove gdb_update_hook.
	(destructor): Ditto.
	* tclIndex: Regenerate.
@
text
@d4 3
d22 59
a80 25
    variable reg_display_list {}
    variable all_regs_shown    1
    variable disp_all_menu_item
    variable num_regs 0
    variable nRows
    variable nCols
    variable changed_reg_list {}
    variable oldValue
    variable ScrolledWin
    variable Menu
    variable Editing -1
    variable selected -1
    variable mbar 1
    variable reg_names_dirty 0
    variable Running 0
    
    common HighlightForeground {}
    common NormalForeground {}
    
    method init_reg_display_vars {args}
    method disassembly_changed {}
    method dimensions {}
    method fixLength {s size where}
    method build_win {}  
  } 
a82 2
    proc save_reg_display_vars {} 

a84 13
    method reg_select_up {}
    method reg_select_down {}
    method reg_select_right {}
    method reg_select_left {}
    method reg_select { r }
    method but3 {rn X Y}
    method display_all {} 
    method delete_from_display_list {rn} 
    method addToWatch {reg}
    method edit {r} 
    method acceptEdit {r} 
    method unedit {} 
    method reconfig {}
a88 1
    method set_variable {event}
d91 1
d93 1
a94 2


a95 1

@


1.6
log
@	* library/interface.tcl (gdb_idle_hook): Mark as deprecated.
	(gdbtk_idle): Dispatch an IdleEvent. gdb_idle_hook is gone.
	* library/ehandler.ith (idle): New event handler.
	* library/gdbevent.ith (IdleEvent): New event.
	* library/console.ith (idle): Match event handler definition.
	* library/console.itb (idle): Ditto.
	(constructor): Remove gdb_idle_hook.
	(destructor): Ditto.
	* library/kod.ith (idle): Match event handler definition.
	* library/kod.itb (idle): Ditto.
	(constructor): Remove gdb_idle_hook.
	(destructor): Ditto.
	* library/memwin.ith (idle): Match event handler definition.
	* library/memwin.itb (idle): Ditto.
	(constructor): Remove gdb_idle_hook.
	(destructor): Ditto.
	* library/pluginwin.itcl (stopped): Rename to "idle" and
	match event handler definition.
	Fix misleading comments.
	* library/process.ith (idle): Match event handler definition.
	* library/process.itb (idle): Ditto.
	(constructor): Remove gdb_idle_hook.
	(destructor): Ditto.
	* library/regwin.ith (idle): Match event handler definition.
	* library/regwin.itb (idle): Ditto.
	(constructor): Remove gdb_idle_hook.
	(destructor): Ditto.
	* library/srcbar.itcl (idle): New method.
	(constructor): Remove gdb_idle_hook.
	(destructor): Ditto.
	* library/srcwin.ith (idle): Match event handler definition.
	* library/srcwin.itb (idle): Ditto.
	(constructor): Remove gdb_idle_hook.
	(destructor): Ditto.
	* library/stackwin.ith (idle): Match event handler definition.
	* library/stackwin.itb (idle): Ditto.
	(constructor): Remove gdb_idle_hook.
	(destructor): Ditto.
	* library/variables.tcl (idle): Match event handler definition.
	(constructor): Remove gdb_idle_hook.
	(destructor): Ditto.
	* library/plugins/rhabout/rhabout.itcl (stopped): Rename
	to "idle" and match new event handler definition.
	* library/tclIndex: Regenerated.
@
text
@a61 1
    method update {}
d70 1
@


1.5
log
@	* library/interface.tcl (gdb_busy_hook): Deprecate.
	(gdbtk_busy): Create and dispatch a BusyEvent instead
	of running hooks.
	* library/ehandler.ith (busy): New event handler.
	* library/gdbevent.ith (BusyEvent): New event class.
	* library/console.ith: Inherit from GDBEventHandler.
	(busy): Match event handler definition.
	* library/console.itb (busy): Ditto.
	(constructor): Remove gdb_busy_event.
	(destructor): Ditto.
	* library/kod.ith (busy): Match event handler definition.
	* library/kod.itb (busy): Ditto.
	(constructor): Remove gdb_busy_hook.
	(destructor): Ditto.
	* library/memwin.ith (busy): Match event handler definition.
	* library/memwin.itb (busy): Ditto.
	(constructor): Remove gdb_busy_hook.
	(destructor): Ditto.
	* library/pluginwin.itcl (running): Rename to "busy" and
	match event handler definition.
	(consturctor): Remove gdb_busy_hook.
	(destructor): Ditto.
	* library/process.ith (busy): Match event handler definition.
	* library/process.itb (busy): Ditto.
	(constructor): Remove gdb_busy_hook.
	(destructor): Ditto.
	* library/regwin.ith (busy): Match event handler definition.
	* library/regwin.itb (busy): Ditto.
	(constructor): Remove gdb_busy_hook.
	(destructor): Ditto.
	* library/srcbar.itcl (constructor): Remove gdb_busy_hook.
	(destructor): Ditto.
	(busy): New method.
	* library/srcwin.ith (busy): Match event handler definition.
	* library/srcwin.itb (busy): Ditto.
	Only do the "busy" stuff if do_updates is set.
	(toggle_updates): Remove gdb_busy_hook.
	(constructor): Ditto.
	(destructor): Ditto.
	* library/stackwin.ith (busy): Match event handler definition.
	* library/stackwin.itb (busy): Ditto.
	(constructor): Remove gdb_busy_hook.
	(destructor): Ditto.
	* library/variables.tcl (constructor): Ditto.
	(destructor): Ditto.
	(disable_ui): Rename to "busy" and match event handler
	definition.
	* library/plugins/rhabout/rhabout.itcl (running): Rename
	to "busy" and match new event handler definition.
	* library/tclIndex: Regenerated.
@
text
@a62 1
    method idle {}
d70 1
@


1.4
log
@Other half of SetVariableEvent:

	* library/srctextwin.ith (handle_set_hook): Rename to set_variable.
	* library/srctextwin.itb (set_variable): Handle SetVariableEvent.
	(constructor): Remove gdb_set_hook.
	(destructor): Ditto.
	* library/srcbar.itcl: Inherit from GDBEventHandler.
	(set_hook): Rename to set_variable and handle SetVariableEvent.
	(constructor): Remove gdb_set_hook.
	(destructor): Ditto.
	* library/regwin.ith (handle_set_hook): Renamed to set_variable.
	* library/regwin.itb (set_variable): Handle SetVariableEvent.
	(constructor): Remove gdb_set_hook.
	(destructor): Ditto.
	* library/kod.ith (set_os): Renamed to "set_variable".
	* library/kod.itb (set_variable): Handle SetVariableEvent.
	(constructor): Remove gdb_set_hook.
	(destructor): Ditto.
	* library/tclIndex: Regenerated.
@
text
@a64 1
    method busy {}
d70 1
@


1.3
log
@2000-05-01  Fernando Nasser  <fnasser@@cygnus.com>

	* regwin.itb (build_win): Adjust size of columns independently, force
	typed registers to raw mode and check if values can be edited.
	Also, add "Add to Watch" option to the menu.
	(update): Similar changes to similar code.
	(init_reg_display_vars): Initialize new variables used above.
	(reg_select): Deactivate menu options when action is not possible.
	(but3): Ditto.
	(edit): Do not edit if it is not editable.
	(acceptEdit): Fix bug is error message box display.
	(addToWatch): New mwthod.  Add a register to the Watch window.
	* regwin.ith: Add addToWatch to the class.
	* tclIndex: Regenerate.
@
text
@d1 2
a2 2
# Register display window class definition for GDBtk.
# Copyright 1998, 1999 Cygnus Solutions
a38 1
    method handle_set_hook {var val}
d66 5
@


1.2
log
@2000-04-05  James Ingham  <jingham@@leda.cygnus.com>

	* regwin.itb (RegWin::build_win): Enable the "Display all
	registers" menu at startup if any registers have been removed.
	(RegWin::save_reg_display_vars): Handle cases where the register
	set is not contiguous.
	(RegWin::destructor): Actually save away the removed registers.
	The latter two are Steve Johnson's change.

	* regwin.ith (RegWin): Added "all_regs_shown" and
	"disp_all_menu_item" to handle tracking whether any registers have
	been removed from the display.
@
text
@d59 1
@


1.1
log
@Initial revision
@
text
@d20 2
@


1.1.1.1
log
@import insight-2000-02-04 snapshot (2nd try)
@
text
@@
