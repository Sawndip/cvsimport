head	1.19;
access;
symbols
	insight_7_6-2013-04-10-branchpoint:1.19
	gdb_7_6-branch:1.19.0.12
	gdb_7_5-branch:1.19.0.10
	gdb_7_4-branch:1.19.0.8
	gdb_7_3-branch:1.19.0.6
	gdb_7_1-branch:1.19.0.4
	gdb_7_0-branch:1.19.0.2
	arc-sim-20090309:1.18
	arc-insight_6_8-branch:1.18.0.6
	arc-insight_6_8-branchpoint:1.18
	insight_6_8-branch:1.18.0.4
	insight_6_8-branchpoint:1.18
	gdb_6_8-branch:1.18.0.2
	insight_6_6-20070208-release:1.17
	gdb_6_6-branch:1.17.0.4
	gdb_6_6-2006-11-15-branchpoint:1.17
	insight_6_5-20061003-release:1.17
	gdb_6_5-branch:1.17.0.2
	gdb_6_5-2006-05-14-branchpoint:1.17
	gdb-csl-gxxpro-6_3-branch:1.16.0.4
	gdb-csl-gxxpro-6_3-branchpoint:1.16
	gdb_6_4-branch:1.16.0.2
	gdb_6_4-2005-11-01-branchpoint:1.16
	gdb_6_1-2004-04-05-release:1.15
	gdb_6_1-branch:1.15.0.4
	gdb_6_1-2004-03-01-gmt-branchpoint:1.15
	gdb_6_0-2003-10-04-release:1.15
	gdb_6_0-branch:1.15.0.2
	gdb_6_0-2003-06-23-branchpoint:1.15
	gdb_5_3-2002-12-12-release:1.10
	gdb_5_3-branch:1.10.0.2
	gdb_5_3-2002-09-04-branchpoint:1.10
	gdb_5_2_1-2002-07-23-release:1.8
	gdb_5_2-2002-04-29-release:1.8
	gdb_5_2-branch:1.8.0.2
	gdb_5_2-2002-03-03-branchpoint:1.8
	gdb_5_1_1-2002-01-24-release:1.3
	cygnus_cvs_20020108_pre:1.7
	gdb_5_1_0_1-2002-01-03-branch:1.3.0.8
	gdb_5_1_0_1-2002-01-03-branchpoint:1.3
	gdb_5_1-2001-11-21-release:1.3
	gdb_s390-2001-09-26-branch:1.3.0.6
	gdb_s390-2001-09-26-branchpoint:1.3
	gdb_5_1-2001-07-29-branch:1.3.0.4
	gdb_5_1-2001-07-29-branchpoint:1.3
	dberlin-typesystem-branch:1.3.0.2
	dberlin-typesystem-branchpoint:1.3
	insight-precleanup-2001-01-01:1.1.1.1
	gdb_5_0-2000-05-19-release:1.1.1.1
	gdb_4_18_2-2000-05-18-release:1.1.1.1
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.1
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.1
	gdb_5_0-2000-04-10-branch:1.1.1.1.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1.1.1
	repo-unification-2000-02-06:1.1.1.1
	insight-2000-02-04:1.1.1.1
	SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.19
date	2008.08.02.22.08.32;	author kseitz;	state Exp;
branches;
next	1.18;

1.18
date	2008.02.09.01.23.42;	author kseitz;	state Exp;
branches;
next	1.17;

1.17
date	2005.12.23.18.26.50;	author eliz;	state Exp;
branches;
next	1.16;

1.16
date	2004.08.27.23.13.14;	author hunt;	state Exp;
branches;
next	1.15;

1.15
date	2003.02.04.07.43.32;	author hunt;	state Exp;
branches;
next	1.14;

1.14
date	2003.02.04.07.12.25;	author hunt;	state Exp;
branches;
next	1.13;

1.13
date	2003.01.21.21.58.34;	author hunt;	state Exp;
branches;
next	1.12;

1.12
date	2002.12.19.05.35.49;	author hunt;	state Exp;
branches;
next	1.11;

1.11
date	2002.12.03.22.25.11;	author hunt;	state Exp;
branches;
next	1.10;

1.10
date	2002.08.14.18.10.49;	author kseitz;	state Exp;
branches;
next	1.9;

1.9
date	2002.06.07.09.22.44;	author hunt;	state Exp;
branches;
next	1.8;

1.8
date	2002.02.18.17.19.44;	author tromey;	state Exp;
branches;
next	1.7;

1.7
date	2001.11.05.19.14.00;	author hunt;	state Exp;
branches;
next	1.6;

1.6
date	2001.10.28.20.08.39;	author tromey;	state Exp;
branches;
next	1.5;

1.5
date	2001.09.19.18.10.37;	author kseitz;	state Exp;
branches;
next	1.4;

1.4
date	2001.09.10.19.21.47;	author irox;	state Exp;
branches;
next	1.3;

1.3
date	2001.05.03.18.13.21;	author kseitz;	state Exp;
branches;
next	1.2;

1.2
date	2001.01.28.18.52.48;	author fnasser;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.07.00.19.42;	author jsm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.07.00.19.42;	author jsm;	state Exp;
branches;
next	;


desc
@@


1.19
log
@        * generic/gdbtk-cmds.c: Don't include itcl.h.
        * generic/gdbtk-hooks.c: Likewise.
        * generic/gdbtk.c: Include tcl.h and tk.h instead of itcl.h
        and itk.h.
        (gdbtk_init): Rewrite to accommodate using a system-provided
        Tcl, Tk, Itcl, Itk.
        (gdbtk_source_start_file) [!_WIN32]: Don't call error() when
        we fail to source the start file. Just dump the message to stderr.
        Throw an exception indicating the failure.
        * library/ehandler.itb (GDBEventHander::dispatch): "itcl_info" is
        deprecated: use "itcl::find objects" instead.
        * library/managedwin.itb (window_instance): Ditto.
        (restart): Ditto.
        (shutdown): Ditto.
        (_open): Ditto.
        (find): Ditto.
        * library/globalpref.itb (_build_win): Don't pass config arguments
        for libgui widgets to the constructor. Configure the widget after
        creation.
        * library/srcpref.itb (_build_win): Ditto.
        * library/main.tcl: Update Tcl, Tk, Itcl, Itk, and Iwidgets (just
        added to this loop) version requirements.
        No need to initialize Iwidgets separately.
        * plugins/Make-rules (TCLHDIR): Renamed to TCL_INCLUDES. Change
        all references.
        (TCL_BUILD_LIB_SPEC): Renamed to TCL_LIBRARY. Change all references.
        * plugins/acinclude.m4: Include the standard tcl.m4 instead
        of the sourceware-derived one.
        * plugins/configure.ac: Use Tcl's standard SC_* macros instead of
        the sourceware-derived CYG_AC_* macros.
        Add logic to deal with using a system-supplied Tcl/Tk.
        * plugins/configure: Regenerated.
        * plugins/Makefile.in: Regenerated.
@
text
@# GDBtk (Insight) entry point
# Copyright (C) 1997, 1998, 1999, 2002, 2003, 2004, 2008 Red Hat, Inc.
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License (GPL) as published by
# the Free Software Foundation; either version 2 of the License, or (at
# your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.


# State is controlled by 5 global boolean variables.
#
# gdb_target_changed
# gdb_exe_changed
# gdb_running
# gdb_downloading
# gdb_loaded

################### Initialization code #########################

# If GDBtk fails to start at all, you might want to uncomment one or 
# both of these.
#set tcl_traceExec 2
#set tcl_traceCompile 1

# Add gdb's Tcl library directory to the end of the auto-load search path, if 
# it isn't already on the path.
# Also, add the plugins directory if it exists.
# Note: GDBTK_LIBRARY will be set in tcl_findLibrary before main.tcl is called.

set gdb_plugins ""
if {[info exists auto_path]} {
  if {[lsearch -exact $auto_path $GDBTK_LIBRARY] < 0} {
    lappend auto_path $GDBTK_LIBRARY
  }

  # Add default plugins directory, which will be [name of exe]/../../lib/insight1.0
  set exename [info nameofexecutable]
  set dir [file join [file dirname [file dirname $exename]] lib insight1.0]
  if {[file exists $dir]} {
    lappend gdb_plugins $dir
    lappend auto_path $dir
  }
  # Add any user-specified plugins directories
  if {[info exists env(INSIGHT_PLUGINS)]} {
    set dirs [split $env(INSIGHT_PLUGINS) :]
    lappend gdb_plugins $dirs
    lappend auto_path $dirs
  }
}

# Require the packages we need.  Most are loaded already, but this will catch 
# any odd errors... :

foreach p {{Tcl 8.4} {Tk 8.4} {Itcl 3.3} {Itk 3.3} {Iwidgets 4.0} {Gdbtk 1.0} {combobox 2.2} {debug 1.0}} {
  if {[catch {package require [lindex $p 0] [lindex $p 1]} msg]} {
    if {![info exists ::env(GDBTK_TEST_RUNNING)] || $::env(GDBTK_TEST_RUNNING) == 0} {
      if {$::tcl_platform(platform) != "windows"} {
	puts stderr "Error: $msg"
      }
      catch {tk_messageBox -title Error -message $msg -icon error -type ok}
    }
    exit -1
  } else {
    #puts "Loaded [lindex $p 0] $msg"
  }
}

namespace import itcl::*
namespace import debug::*

# Environment variables controlling debugging:
# GDBTK_TRACE
#	unset or 0	no tracing
#	1		tracing initialized but not started
#	2		tracing initialized and started
#
# GDBTK_DEBUGFILE - filename to write debugging messages and
#	trace information (if tracing is enabled).
#
if {[info exists env(GDBTK_TRACE)] && $env(GDBTK_TRACE) != 0} {
  # WARNING: the tracing code must not trace into itself or
  # infinite recursion will result. As currently configured
  # the tracing code will not trace basic tcl functions or anything defined
  # before debug::init.  For this reason we must source the DebugWin
  # code before debug::init is called.
  source [file join $GDBTK_LIBRARY debugwin.ith]
  source [file join $GDBTK_LIBRARY debugwin.itb]

  # Calling this installs our hooks for tracing and profiling.
  # This WILL slow things down.
  ::debug::init

  if {$env(GDBTK_TRACE) == 2} {
    ::debug::trace_start
  }
}

if {[info exists env(GDBTK_DEBUG)] && $env(GDBTK_DEBUG) != 0} {
  if {[info exists env(GDBTK_DEBUGFILE)]} {
    ::debug::logfile $env(GDBTK_DEBUGFILE)
  } else {
    ::debug::logfile "insight.log"
  }
}

# For testing
set _test(interactive) 0

# Set up platform globals. We replace Tcl's tcl_platform with
# our own version which knows the difference between cygwin and
# mingw.
global gdbtk_platform
set gdbtk_platform(platform) $tcl_platform(platform)
switch $tcl_platform(platform) {
  windows {
    if {[llength [info commands ide_cygwin_path]] == 0} {
      set gdbtk_platform(os) "mingw"
    } else {
      set gdbtk_platform(os) "cygwin"
    }
  }

  default {
    set gdbtk_platform(os) $tcl_platform(os)
  }
}
set gdbtk_platform(osVersion) $tcl_platform(osVersion)

# set traces on state variables
trace variable gdb_running w do_state_hook
trace variable gdb_downloading w do_state_hook
trace variable gdb_loaded w do_state_hook
define_hook state_hook

# set up preferences
pref init

# let libgui tell us how to feel
standard_look_and_feel

# now let GDB set its default preferences
pref_set_defaults

# read in preferences
pref_read

init_disassembly_flavor

# initialize state variables
initialize_gdbtk

# Arrange for session code to notice when file changes.
add_hook file_changed_hook Session::notice_file_change

ManagedWin::init

# This stuff will help us play nice with WindowMaker's AppIcons.
# Can't do the first bit yet, since we don't get this from gdb...
# wm command . [concat $argv0 $argv] 
wm group . . 

# some initial commands to get gdb in the right mode
gdb_cmd {set height 0}
gdb_cmd {set width 0}

if {[info exists env(GDBTK_TEST_RUNNING)] && $env(GDBTK_TEST_RUNNING)} {
  set gdb_target_name "exec"
} else {
  # gdb_target_name is the name of the GDB target; that is, the argument
  # to the GDB target command.
  set gdb_target_name ""
  # By setting gdb_target_changed, we force a target dialog
  # to be displayed on the first "run"
  set gdb_target_changed 1
}

update

# Uncomment the next line if you want a splash screen at startup...
# ManagedWin::open About -transient -expire 5000

# initialize IPC to enable multiple Insight's to communicate
# with each other.
set iipc 0
if {[pref get gdb/ipc/enabled]} {
  set ::insight_ipc [Iipc \#auto]
}

gdbtk_idle

@


1.18
log
@        * library/main.tcl: Add gdbtk_platform definitions.
        * library/attachdlg.itb (list_pids): Use gdbtk_platform
        instead of tcl_platform.
        * library/bpwin.itb (build_win): Likewise.
        (_bp_add): Likewise.
        (_bp_modify): Likewise.
        * library/download.itb (download_it): Likewise.
        * library/globalpref.itb (_build_win): Likewise.
        * library/helpviewer.tcl (open_help): Likewise.
        * library/interface.tcl (gdbtk_tcl_query): Likewise.
        (show_warning): Likewise.
        (open_file): Likewise.
        (run_executable): Likewise.
        * library/managedwin.itb (reveal): Likewise.
        (_create): Likewise.
        * library/prefs.tcl (pref_read): Likewise.
        (pref_set_defaults): Likewise.
        (pref_set_colors): Likewise.
        * library/session.tcl (_exe_name): Likewise.
        * library/srcbar.itcl (_update_file_menu): Likewise.
        (create_run_menu): Likewise.
        * library/srctextwin.itb (_mtime_changed): Likewise.
        (LoadFromCache): Likewise.
        * library/targetselection.itb (default_port): Likewise.
        (build_win): Likewise.

        * library/memwin.itb (build_win): Remove unused tcl_platform
        declaration.
        * library/pluginwin.itcl (enable_ui): Likewise.
        * library/process.itb (build_win): Likewise.
        * library/srcbar.itcl (enable_ui): Likewise.
        * library/srcwin.itb (location): Likewise.
        * library/stackwin.itb (build_win): Likewise.
        * library/tdump.tcl (build_win): Likewise.
@
text
@a55 1

d59 1
a59 1
foreach p {{Tcl 8.0} {Tk 8.0} {Itcl 3.0} {Itk 3.0} {Gdbtk 1.0} {combobox 2.2} {debug 1.0}} {
a75 15
# Finally, load Iwidgets
if {[info exists IWIDGETS_LIBRARY]} {
  lappend auto_path $IWIDGETS_LIBRARY
}
if {[catch {package require Iwidgets} msg]} {
  if {![info exists ::env(GDBTK_TEST_RUNNING)] || $::env(GDBTK_TEST_RUNNING) == 0} {
    if {$::tcl_platform(platform) != "windows"} {
      puts stderr "Error: $msg"
    }
    catch {tk_messageBox -title Error -message $msg -icon error -type ok}
  }
  exit -1
}


@


1.17
log
@	* library/attachdlg.itb:
	* library/actiondlg.tcl:
	* library/about.tcl:
	* library/ehandler.itb:
	* library/editor.tcl:
	* library/download.ith:
	* library/download.itb:
	* library/debugwin.ith:
	* library/debugwin.itb:
	* library/cspref.ith:
	* library/cspref.itb:
	* library/console.ith:
	* library/console.itb:
	* library/browserwin.ith:
	* library/browserwin.itb:
	* library/bpwin.ith:
	* library/bpwin.itb:
	* library/blockframe.ith:
	* library/managedwin.ith:
	* library/managedwin.itb:
	* library/main.tcl:
	* library/locals.tcl:
	* library/ipcpref.ith:
	* library/ipcpref.itb:
	* library/ipc.tcl:
	* library/interface.tcl:
	* library/helpviewer.tcl:
	* library/globalpref.ith:
	* library/globalpref.itb:
	* library/gdbwin.ith:
	* library/gdbtoolbar.itcl:
	* library/gdbmenubar.itcl:
	* library/gdbevent.ith:
	* library/gdbevent.itb:
	* library/embeddedwin.ith:
	* library/ehandler.ith:
	* library/srcwin.itb:
	* library/srctextwin.ith:
	* library/srctextwin.itb:
	* library/srcpref.ith:
	* library/srcpref.itb:
	* library/srcbar.itcl:
	* library/session.tcl:
	* library/regwin.ith:
	* library/regwin.itb:
	* library/process.ith:
	* library/process.itb:
	* library/prefs.tcl:
	* library/pluginwin.itcl:
	* library/modal.tcl:
	* library/memwin.ith:
	* library/memwin.itb:
	* library/mempref.ith:
	* library/mempref.itb:
	* library/watch.tcl:
	* library/watch.tcl:
	* library/warning.tcl:
	* library/vartree.ith:
	* library/vartree.itb:
	* library/util.tcl:
	* library/tracedlg.tcl:
	* library/toplevelwin.ith:
	* library/tfind_args.tcl:
	* library/tdump.tcl:
	* library/targetselection.ith:
	* library/targetselection.itb:
	* library/stackwin.ith:
	* library/stackwin.itb:
	* library/srcwin.ith:
@
text
@d2 1
a2 1
# Copyright (C) 1997, 1998, 1999, 2002, 2003, 2004 Red Hat, Inc.
d130 20
@


1.16
log
@2004-08-27  Martin Hunt  <hunt@@redhat.com>

	* library/ipc.tcl: New file.
	* library/ipcpref.ith: New file.
	* library/ipcpref.itb: New file.

	* library/srcwin.itb (SrcWin::inferior): Call ipc
	send if enabled.

	* library/prefs.tcl (pref_set_defaults): Enable color
	schemes by default. Add IPC defaults.

	* library/srcbar.itcl (create_pref_menu): Create
	"Advanced" cascade menu and put "Edit Color Schemes"
	and "IPC Support" under it.

	* library/managedwin.itb (ManagedWin::destructor):
	If IPC enabled then send "quit" on exit.

	* library/main.tcl: Start IPC if enabled.

	* library/prefs.tcl (pref_set_defaults): Add IPC defaults.

	* library/gdbmenubar.itcl (menubar_get_current_menu):
	New method.
@
text
@d2 1
a2 1
# Copyright 1997, 1998, 1999, 2002, 2003, 2004 Red Hat, Inc.
@


1.15
log
@2003-02-03  Martin M. Hunt  <hunt@@redhat.com>

        * library/globalpref.itb, library/mempref.itb, library/srcpref.itb,
        library/srcwin.itb, library/targetselection.itb, library/tracedlg.tcl:
        Set background color of comboboxes to Colors(textbg).

        * library/main.tcl: Load combobox version 2.2.

        * library/prefs.tcl: Minor optimization. Change order of main_names
        to have the most common, "main", first.
@
text
@d2 1
a2 1
# Copyright 1997, 1998, 1999, 2002, 2003 Red Hat, Inc.
d183 7
@


1.14
log
@2003-02-03  Martin M. Hunt  <hunt@@redhat.com>

	* library/interface.tcl (gdbtk_locate_main): Rewrite for efficiency.
	No longer uses gdb_search.  Caches result.
	(initialize_gdbtk): Initialize gdb_locate_main cache.
	* library/main.tcl: Call initialize_gdbtk after loading prefs.
@
text
@d2 1
a2 1
# Copyright 1997, 1998, 1999, 2002 Red Hat, Inc.
d60 1
a60 1
foreach p {{Tcl 8.0} {Tk 8.0} {Itcl 3.0} {Itk 3.0} {Gdbtk 1.0} {combobox 1.0} {debug 1.0}} {
@


1.13
log
@2003-01-21  Martin M. Hunt  <hunt@@redhat.com>
	* library/main.tcl: Don't require iwidgets 3.0.

	* library/console.itb (Console::_build_win): Rename
	tkTextClosestGap to tk::TextClosestGap. Rename tkCancelRepeat
	to tk::CancelRepeat. Rename tkPriv to tk::Priv. Needed for tk 8.4.1.

	* library/bpwin.itb (BpWin::build_win): Don't
	create sizebox.
	* library/locals.tcl (build_win): Ditto.
	* library/regwin.itb (RegWin::_build_win): Ditto.
	* library/srcwin.itb (SrcWin::constructor): Ditto.
	* library/stackwin.itb (StackWin::build_win): Ditto.
	* library/watch.tcl (build_win): Ditto.
@
text
@a129 3
# initialize state variables
initialize_gdbtk

d149 3
@


1.12
log
@2002-12-18  Martin M. Hunt  <hunt@@redhat.com>

	* library/main.tcl: Don't try to print errors to stderr on Windows.
@
text
@d81 1
a81 1
if {[catch {package require Iwidgets 3.0} msg]} {
@


1.11
log
@2002-12-03  Martin M. Hunt  <hunt@@redhat.com>

	* library/main.tcl: Require package "debug". Make
	package loading a bit more robust.
@
text
@d63 3
a65 1
      puts stderr "Error: $msg"
d83 3
a85 1
    puts stderr "Error: $msg"
@


1.10
log
@        * library/srcbar.itcl (create_plugin_menu): Deal with
        multi plugin directories.
        Catch any errors that might occur reading plugin.tcl.
        * library/main.tcl: Add plugins from new default directory.
        (INSIGHT_PLUGINS): New environment variable to point to other
        plugin directories.
@
text
@d56 1
d59 12
a70 6
package require Tcl 8.0
package require Tk 8.0
package require Itcl 3.0
package require Itk 3.0
package require Gdbtk 1.0
package require combobox 1.0
a72 1

d75 1
a75 1
# Setup iwidgets path, if needed
d79 1
a79 4

if {[catch {package require Iwidgets 3.0} errMsg]} {
  set msg "Could not find the Iwidgets libraries.\n\nGot nameofexec: [info nameofexecutable]\nError(s) were: \n$errMsg"

d81 2
a82 3
    puts stderr $msg
  } else {
    tk_messageBox -title Error -message $msg -icon error -type ok
d84 1
a84 1
  exit
d86 1
@


1.9
log
@2002-06-07  Martin M. Hunt  <hunt@@redhat.com>

	* library/prefs.tcl (pref_set_colors): New function.  Set up colors
	from Windows system colors or X resource database. Save in array.
	(pref_set_defaults): Remove gdb/font/normal_fg, etc.
	(pref_read): Call pref_set_colors.

	* library/main.tcl: Remove call to "tix resetoptions TixGray".

	* library/bpwin.itb, library/browserwin.itb, library/console.itb,
	library/globalpref.itb, library/memwin.itb, library/process.itb,
	library/regwin.itb, library/srcpref.itb, library/srctextwin.itb,
	library/stackwin.itb, library/tdump.tcl, library/tracedlg.tcl,
	library/variables.tcl: Replace calls to [pref get gdb/fonts/*]
	for colors with references to Color array. Remove all tixOptions calls.
	Fix up colors as necessary.
@
text
@a35 1

d40 13
a52 4
  # In any case, add the plugins directory if it exists
  if {[file exists [file join $GDBTK_LIBRARY plugins]]} {
    set gdb_plugins [file join $GDBTK_LIBRARY plugins]
    lappend auto_path $gdb_plugins
@


1.8
log
@	* library/tclIndex: Updated.
	* library/srcbar.itcl (SrcBar): Use new Session namespace.
	* library/main.tcl: Use new Session namespace.
	* library/interface.tcl (gdbtk_tcl_preloop): Use new Session
	namespace.
	(gdbtk_cleanup): Likewise.
	(_close_file): Likewise.
	* library/session.tcl: Use a namespace.  Renamed all functions.
@
text
@d2 1
a2 1
# Copyright 1997, 1998, 1999 Cygnus Solutions
a109 6
}

if {$tcl_platform(platform) == "unix"} {
#  tix resetoptions TK TK
#  tk_setPalette tan
  tix resetoptions TixGray [tix cget -fontset]
@


1.7
log
@2001-11-05  Martin M. Hunt  <hunt@@redhat.com>

	* library/debugwin.itb (DebugWin::build_win):
	Initialize gdbtk_de(ERRORS_ONLY) and gdbtk_de(filter_var)
	(DebugWin::puts): Rewrite filter to handle new options.
	(DebugWinDOpts::build_win): Update list of classes. Change
	filter dialog so we can not display only errors and warnings
	or choose between displaying ALL classes except those selected
	or only selected classes. Fix "OK" button to apply
	changes before closing dialog.
	DebugWinOpts::_apply): Now takes an agrument that
	indicates if dialog should exit after applying filter.

	* library/debugwin.ith (_apply): Now takes an arg.

	* library/main.tcl: If GDBTK_DEBUGFILE is not set,
	use "insight.log" as the default. If GDBTK_DEBUG is set
	and nonzero, start logging debug messages to
	GDBTK_DEBUGFILE immediately. Never open the debug window
	automatically.

	* library/managedwin.itb (ManagedWin::shutdown): Don't
	save debug window options dialog on active list

	* library/srcwin.itb: Remove troublesome debug line.
@
text
@d145 1
a145 1
add_hook file_changed_hook session_notice_file_change
@


1.6
log
@	* tclIndex: Updated.
	* library/main.tcl: Add session_notice_file_change to
	file_changed_hook.
	* library/session.tcl (session_load): Only load the executable.
	(session_notice_file_change): New proc.
	(SESSION_exe_name): New proc.
	(session_save): Use it.
	(session_notice_file_change): Likewise.
	* library/interface.tcl (gdbtk_tcl_exec_file_display): Don't call
	session_save.
	(gdbtk_tcl_preloop): Don't set executable name or try to find
	main.  Notice a new session if required.
@
text
@d104 6
a109 2
if {[info exists env(GDBTK_DEBUGFILE)]} {
  ::debug::logfile $env(GDBTK_DEBUGFILE)
a152 7

# Open debug window if testsuite is not running and GDBTK_DEBUG is set
if {![info exists env(GDBTK_TEST_RUNNING)] || !$env(GDBTK_TEST_RUNNING)} {
  if {[info exists env(GDBTK_DEBUG)] && $env(GDBTK_DEBUG) > 1} {
    ManagedWin::open DebugWin
  }
}
@


1.5
log
@	* library/main.tcl: Append iwidgets library path, if needed.
	* generic/gdbtk.c (gdbtk_init): Add TCLLIBPATH to iwidgets
	package index.
	Define IWIDGETS_LIBRARY in interpreter so that we can add
	this path to the auto_path at the right time later.
@
text
@d140 3
@


1.4
log
@	* generic/gdbtk.c (gdbtk_init): Set IWIDGETS_LIBRARY if
	Insight is launched from within the build directory.
	* library/util.tcl (find_iwidgets_library): Removed.
	* library/main.tcl: Don't call find_iwidgets_library, do a
	package require instead.
@
text
@d61 5
@


1.3
log
@        * gdbtk.c (gdbtk_init): Include the command "warp_pointer"
        for all platforms. Used for testing ONLY.

        * util.tcl (gdbtk_read_defs): If there is an error reading
        the testsuite definition file, print the error message to
        stderr, not stdout. This will allow tcl to know that an error
        has occurred.
        (find_iwidgets_library): Make it work for running testsuites
        from installed directory.

        * main.tcl: If we failed to find iwidgets, check if the
        testsuite is running. If it is running, do not pop up
        a dialog box: just print out the error and exit.
        Initialize _test(verbose) for the testsuite.
@
text
@d61 1
a61 1
if {![find_iwidgets_library]} {
@


1.2
log
@2001-01-28  Fernando Nasser  <fnasser@@redhat.com>

	* library/main.tcl: Add plugin subdirectory, if existent, to auto_path.
	* library/srcbar.itcl (create_plugin_menu): New method.  Create a pull
	down menu for plugins if there are any for this target configuration.
	(create_menu_items): Invoke the new method above.
@
text
@d62 7
a68 4
  tk_messageBox -title Error -message "Could not find the Iwidgets libraries.
Got nameofexec: [info nameofexecutable]
Error(s) were: \n$errMsg" \
      -icon error -type ok
d108 3
@


1.1
log
@Initial revision
@
text
@d31 2
a32 1
# it isn't already on the path:
d35 2
d40 5
@


1.1.1.1
log
@import insight-2000-02-04 snapshot (2nd try)
@
text
@@
