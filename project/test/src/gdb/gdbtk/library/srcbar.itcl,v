head	1.27;
access;
symbols
	insight_7_6-2013-04-10-branchpoint:1.27
	gdb_7_6-branch:1.27.0.4
	gdb_7_5-branch:1.27.0.2
	gdb_7_4-branch:1.26.0.14
	gdb_7_3-branch:1.26.0.12
	gdb_7_1-branch:1.26.0.10
	gdb_7_0-branch:1.26.0.8
	arc-sim-20090309:1.26
	arc-insight_6_8-branch:1.26.0.6
	arc-insight_6_8-branchpoint:1.26
	insight_6_8-branch:1.26.0.4
	insight_6_8-branchpoint:1.26
	gdb_6_8-branch:1.26.0.2
	insight_6_6-20070208-release:1.25
	gdb_6_6-branch:1.25.0.4
	gdb_6_6-2006-11-15-branchpoint:1.25
	insight_6_5-20061003-release:1.25
	gdb_6_5-branch:1.25.0.2
	gdb_6_5-2006-05-14-branchpoint:1.25
	gdb-csl-gxxpro-6_3-branch:1.24.0.4
	gdb-csl-gxxpro-6_3-branchpoint:1.24
	gdb_6_4-branch:1.24.0.2
	gdb_6_4-2005-11-01-branchpoint:1.24
	gdb_6_1-2004-04-05-release:1.22
	gdb_6_1-branch:1.22.0.4
	gdb_6_1-2004-03-01-gmt-branchpoint:1.22
	gdb_6_0-2003-10-04-release:1.22
	gdb_6_0-branch:1.22.0.2
	gdb_6_0-2003-06-23-branchpoint:1.22
	gdb_5_3-2002-12-12-release:1.19
	gdb_5_3-branch:1.19.0.2
	gdb_5_3-2002-09-04-branchpoint:1.19
	gdb_5_2_1-2002-07-23-release:1.17
	gdb_5_2-2002-04-29-release:1.17
	gdb_5_2-branch:1.17.0.2
	gdb_5_2-2002-03-03-branchpoint:1.17
	gdb_5_1_1-2002-01-24-release:1.11
	cygnus_cvs_20020108_pre:1.14
	gdb_5_1_0_1-2002-01-03-branch:1.11.0.6
	gdb_5_1_0_1-2002-01-03-branchpoint:1.11
	gdb_5_1-2001-11-21-release:1.11
	gdb_s390-2001-09-26-branch:1.11.0.4
	gdb_s390-2001-09-26-branchpoint:1.11
	gdb_5_1-2001-07-29-branch:1.11.0.2
	gdb_5_1-2001-07-29-branchpoint:1.11
	dberlin-typesystem-branch:1.10.0.2
	dberlin-typesystem-branchpoint:1.10;
locks; strict;
comment	@# @;


1.27
date	2012.06.25.12.08.57;	author rosch;	state Exp;
branches;
next	1.26;

1.26
date	2008.02.09.01.23.42;	author kseitz;	state Exp;
branches
	1.26.6.1;
next	1.25;

1.25
date	2005.12.23.18.26.50;	author eliz;	state Exp;
branches;
next	1.24;

1.24
date	2004.08.27.23.13.14;	author hunt;	state Exp;
branches;
next	1.23;

1.23
date	2004.04.05.20.36.52;	author hunt;	state Exp;
branches;
next	1.22;

1.22
date	2002.12.20.22.01.36;	author hunt;	state Exp;
branches;
next	1.21;

1.21
date	2002.11.11.22.39.38;	author hunt;	state Exp;
branches;
next	1.20;

1.20
date	2002.10.15.21.19.51;	author hunt;	state Exp;
branches;
next	1.19;

1.19
date	2002.08.14.18.10.49;	author kseitz;	state Exp;
branches;
next	1.18;

1.18
date	2002.03.05.22.22.20;	author hunt;	state Exp;
branches;
next	1.17;

1.17
date	2002.02.26.00.29.06;	author irox;	state Exp;
branches;
next	1.16;

1.16
date	2002.02.18.17.19.44;	author tromey;	state Exp;
branches;
next	1.15;

1.15
date	2002.01.15.19.52.01;	author kseitz;	state Exp;
branches;
next	1.14;

1.14
date	2002.01.07.08.58.47;	author irox;	state Exp;
branches;
next	1.13;

1.13
date	2001.10.29.21.45.30;	author hunt;	state Exp;
branches;
next	1.12;

1.12
date	2001.08.03.18.46.41;	author kseitz;	state Exp;
branches;
next	1.11;

1.11
date	2001.07.12.23.10.54;	author kseitz;	state Exp;
branches;
next	1.10;

1.10
date	2001.06.04.17.19.13;	author kseitz;	state Exp;
branches;
next	1.9;

1.9
date	2001.05.31.20.32.58;	author kseitz;	state Exp;
branches;
next	1.8;

1.8
date	2001.05.31.15.21.40;	author kseitz;	state Exp;
branches;
next	1.7;

1.7
date	2001.05.22.18.24.18;	author kseitz;	state Exp;
branches;
next	1.6;

1.6
date	2001.04.20.18.47.33;	author kseitz;	state Exp;
branches;
next	1.5;

1.5
date	2001.02.08.19.26.31;	author fnasser;	state Exp;
branches;
next	1.4;

1.4
date	2001.02.01.22.56.27;	author fnasser;	state Exp;
branches;
next	1.3;

1.3
date	2001.02.01.21.03.43;	author fnasser;	state Exp;
branches;
next	1.2;

1.2
date	2001.01.28.18.52.48;	author fnasser;	state Exp;
branches;
next	1.1;

1.1
date	2001.01.25.17.49.22;	author fnasser;	state Exp;
branches;
next	;

1.26.6.1
date	2009.09.11.04.45.50;	author amylaar;	state Exp;
branches;
next	;


desc
@@


1.27
log
@   * generic/gdbtk-cmds.c: On windows include
   windows.h/tlhelp32.h. Declare new
   function gdb_list_processes().
   (Gdbtk_Init): Register new tcl function
   "gdb_list_processes".
   (gdb_list_processes): New function.
   * library/attachdlg.itb: Updated copyright.
   (list_pids): Use gdb_list_processes for
   getting the process list. Fallback to
   ps if empty list is returned. Adapt method comment.
   * library/srcbar.itcl: Updated copyright.
   (create_run_menu): Allow "Attach to process" on
   windows, too.
@
text
@# SrcBar
# Copyright (C) 2001-2012 Red Hat, Inc.
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License (GPL) as published by
# the Free Software Foundation; either version 2 of the License, or (at
# your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# ----------------------------------------------------------------------
# Implements a menu and a toolbar that are attached to a source window.
#
#   PUBLIC ATTRIBUTES:
#
#
#   METHODS:
#
#     configure ....... used to change public attributes
#
#   PRIVATE METHODS
#
#   X11 OPTION DATABASE ATTRIBUTES
#
#
# ----------------------------------------------------------------------

itcl::class SrcBar {
  inherit itk::Widget GDBEventHandler

  # ------------------------------------------------------------------
  #  CONSTRUCTOR - create widget
  # ------------------------------------------------------------------
  constructor {src args} {
    set source $src

    # Load the images to be used in toolbar buttons
    _load_images
    _load_src_images

    # Create a menu widget for the Source Window
    set Menu [GDBMenuBar $itk_interior.menubar]

    # Fill it with the initial set of entries
    if {! [create_menu_items]} {
      destroy $this
    } else {
      # We do not pack the menu, but make it the menu of the toplevel window
      $Menu show
    }

    # Create a toolbar widget for the Source Window
    set Tool [GDBToolBar $itk_interior.toolbar]

    # Now create the Source Window initial set of toolbar buttons
    # First give the necessary info about each button and their position
    create_buttons
    # Then effectively create the tollbar widget
    $Tool show

    # Pack the toolbar
    pack $Tool -expand 1 -fill both

    # Set the srcbar's initial state
    enable_ui 2

    eval itk_initialize $args
    add_hook gdb_no_inferior_hook "$this enable_ui 2"
    add_hook gdb_trace_find_hook "$this handle_trace_find_hook"
  }

  # ------------------------------------------------------------------
  #  DESTRUCTOR - destroy window containing widget
  # ------------------------------------------------------------------
  destructor {
    global GDBSrcBar_state

    unset GDBSrcBar_state($this)
    remove_hook gdb_no_inferior_hook "$this enable_ui 2"
    remove_hook gdb_trace_find_hook "$this handle_trace_find_hook"

    #destroy $this
  }

  # ------------------------------------------------------------------
  #  NAME:         private method SrcBar::_post
  #  DESCRIPTION:  Post the given menu
  #
  #  ARGUMENTS:
  #                what  - which menu to post
  #  RETURNS:      Nothing
  # ------------------------------------------------------------------
  private method _post {what} {

    switch $what {
      file {
	_update_file_menu
      }
    }
  }


  ####################################################################
  # The next set of functions create the common menu groupings that
  # are used in gdb menus.
  # Private.  Used at contruction time.
  # These were previously at the GDBToolBar...
  ####################################################################

  # ------------------------------------------------------------------
  #  METHOD:  create_menu_items - Add some menu items to the menubar.
  #                               Returns 1 if any items added.
  # ------------------------------------------------------------------
  private method create_menu_items {} {

    create_file_menu

    create_run_menu

    create_view_menu

    if {[pref get gdb/control_target]} {
      create_control_menu
    }

    if {[pref get gdb/mode]} {
      create_trace_menu
    }

    create_plugin_menu

    create_pref_menu
    
    create_help_menu

    return 1
  }

  # ------------------------------------------------------------------
  #  PRIVATE METHOD:  _update_file_menu - update the file menu
  #                    Used really only to update the session list.
  # ------------------------------------------------------------------
  private method _update_file_menu {} {
    global enable_external_editor gdbtk_platform gdb_exe_name

    # Clear the File menu
    $Menu clear file

    if {[info exists enable_external_editor] && $enable_external_editor} {
      $Menu add command None "Edit Source" \
	[code $source edit]
    }

    $Menu add command Other "Open..."  \
      "_open_file" -underline 0 -accelerator "Ctrl+O"

    if {$gdb_exe_name == ""} {
      set state disabled
    } else {
      set state normal
    }
    $Menu add command Other "Close" \
      "_close_file" -underline 0 -accelerator "Ctrl+W" -state $state

    $Menu add command Other "Source..." \
      "source_file" -underline 0

    set sessions [Session::list_names]
    if {[llength $sessions]} {
      $Menu add separator
      set i 1
      foreach item $sessions {
	$Menu add command Other "$i $item" \
	  [list Session::load $item] \
	  -underline 0
	incr i
      }
    }

    $Menu add separator

    if {$gdbtk_platform(platform) == "windows"} {
      $Menu add command None "Page Setup..." \
	[format {
	  set top %s
	  ide_winprint page_setup -parent $top
	} [winfo toplevel [namespace tail $this]]] \
	-underline 8
    }

    $Menu add command None "Print Source..." \
      [code $source print] \
      -underline 0 -accelerator "Ctrl+P"

    $Menu add separator

    $Menu add command Other "Target Settings..." \
      "set_target_name" -underline 0

    $Menu add separator

    $Menu add command None "Exit" gdbtk_quit -underline 1
  }

  # ------------------------------------------------------------------
  #  METHOD:  create_file_menu - Creates the standard file menu. 
  # ------------------------------------------------------------------
  
  private method create_file_menu {} {

    $Menu add menubutton file "File" 0 -postcommand [code $this _post file]
    _update_file_menu
  }

  # ------------------------------------------------------------------
  #  METHOD:  create_run_menu - Creates the standard run menu, 
  #  or reconfigures it if it already exists.
  # ------------------------------------------------------------------
  
  private method create_run_menu {} {

    if {![$Menu exists Run]} {
      set run_menu [$Menu add menubutton run "Run" 0]
    } else {
      set run_menu [$Menu clear Run]
    }
    
    set is_native [TargetSelection::native_debugging]

    if {$is_native} {
	$Menu add command Attach "Attach to process" \
	  [code $this do_attach $run_menu] \
	  -underline 0 -accelerator "Ctrl+A"
    } else {
      $Menu add command Other "Connect to target" \
	"$this do_connect $run_menu" -underline 0
    }

    if {[pref get gdb/control_target]} {
      if {!$is_native} {
	$Menu add command Other "Download" Download::download_it \
	  -underline 0 -accelerator "Ctrl+D"
      }
      $Menu add command Other "Run" [code $source inferior run] \
        -underline 0 -accelerator R
    }

    if {$is_native} {
      if {[string compare $::gdbtk_platform(platform) windows] != 0} {
	$Menu add command Detach "Detach" \
          [code $this do_detach $run_menu] \
	  -underline 0 -state disabled
      }
    } else {
      $Menu add command Other "Disconnect"  \
	[code $this do_disconnect $run_menu] -underline 0 -state disabled
    }

    if {$is_native} {
      $Menu add separator
      $Menu add command Control "Kill" \
        [code $this do_kill $run_menu] \
	-underline 0 -state disabled
    }

    if { [pref get gdb/mode] } {
      $Menu add separator 

      $Menu add command Other "Start collection" "$this do_tstop" \
	-underline 0 -accelerator "Ctrl+B"
         
      $Menu add command Other "Stop collection" "$this do_tstop" \
	-underline 0  -accelerator "Ctrl+E" -state disabled
    }
  }

  # ------------------------------------------------------------------
  #  METHOD:  create_view_menu - Creates the standard view menu
  # ------------------------------------------------------------------
  
  private method create_view_menu {} {

    $Menu add menubutton view "View" 0

    $Menu add command Other "Stack" {ManagedWin::open StackWin} \
      -underline 0 -accelerator "Ctrl+S" 
      
    $Menu add command Other "Registers" {ManagedWin::open RegWin} \
      -underline 0 -accelerator "Ctrl+R" 
      
    $Menu add command Other "Memory" {ManagedWin::open MemWin} \
      -underline 0 -accelerator "Ctrl+M" 
      
    $Menu add command Other "Watch Expressions" \
      {ManagedWin::open WatchWin} \
      -underline 0 -accelerator "Ctrl+T" 
    $Menu add command Other "Local Variables" \
      {ManagedWin::open LocalsWin} \
      -underline 0 -accelerator "Ctrl+L" 

    if {[pref get gdb/control_target]} {
      $Menu add command Other "Breakpoints" \
	{ManagedWin::open BpWin -tracepoints 0} \
	-underline 0 -accelerator "Ctrl+B" 
    }

    if {[pref get gdb/mode]} {
      $Menu add command Other "Tracepoints" \
        {ManagedWin::open BpWin -tracepoints 1} \
	-underline 0 -accelerator "Ctrl+T"
      $Menu add command Other "Tdump" {ManagedWin::open TdumpWin} \
	-underline 2 -accelerator "Ctrl+U"
    }

    $Menu add command Other "Console" {ManagedWin::open Console} \
      -underline 2 -accelerator "Ctrl+N" 
      
    $Menu add command Other "Function Browser" \
      {ManagedWin::open BrowserWin} \
      -underline 1 -accelerator "Ctrl+F" 
    $Menu add command Other "Thread List" \
      {ManagedWin::open ProcessWin} \
      -underline 0 -accelerator "Ctrl+H"
    if {[info exists ::env(GDBTK_DEBUG)] && $::env(GDBTK_DEBUG)} {
      $Menu add separator
      $Menu add command Other "Debug Window" \
        {ManagedWin::open DebugWin} \
	-underline 3 -accelerator "Ctrl+U"
    }
  }

  # ------------------------------------------------------------------
  #  METHOD:  create_control_menu - Creates the standard control menu
  # ------------------------------------------------------------------
  
  private method create_control_menu {} {

    $Menu add menubutton cntrl "Control" 0
    
    $Menu add command Control "Step" [code $source inferior step] \
      -underline 0 -accelerator S
    
    $Menu add command Control "Next" [code $source inferior next] \
      -underline 0 -accelerator N
    
    $Menu add command Control "Finish" \
      [code $source inferior finish] \
      -underline 0 -accelerator F
    
    $Menu add command Control "Continue" \
      [code $source inferior continue] \
      -underline 0 -accelerator C
    
    $Menu add separator
    $Menu add command Control "Step Asm Inst" \
      [code $source inferior stepi] \
      -underline 1 -accelerator S
    
    $Menu add command Control "Next Asm Inst" \
      [code $source inferior nexti] \
      -underline 1 -accelerator N
    
    # $Menu add separator
    # $Menu add command Other "Automatic Step" auto_step
  }

  # ------------------------------------------------------------------
  #  METHOD:  create_trace_menu - Creates the standard trace menu
  # ------------------------------------------------------------------
  
  private method create_trace_menu {} {

    $Menu add menubutton trace "Trace" 0
    
    $Menu add command Other "Save Trace Commands..." \
      "save_trace_commands" \
      -underline 0

    $Menu add separator

    $Menu add command Trace "Next Hit" {tfind_cmd tfind} \
      -underline 0 -accelerator N
    
    $Menu add command Trace "Previous Hit" {tfind_cmd "tfind -"} \
      -underline 0 -accelerator P
    
    $Menu add command Trace "First Hit" {tfind_cmd "tfind start"} \
      -underline 0 -accelerator F
    
    $Menu add command Trace "Next Line Hit" \
      {tfind_cmd "tfind line"} \
      -underline 5 -accelerator L
    
    $Menu add command Trace "Next Hit Here" \
      {tfind_cmd "tfind tracepoint"} \
      -underline 9 -accelerator H
    
    $Menu add separator
    $Menu add command Trace "Tfind Line..." \
      "ManagedWin::open TfindArgs -Type LN" \
      -underline 9 -accelerator E
    
    $Menu add command Trace "Tfind PC..." \
      "ManagedWin::open TfindArgs -Type PC" \
      -underline 7 -accelerator C
    
    $Menu add command Trace "Tfind Tracepoint..." \
      "ManagedWin::open TfindArgs -Type TP" \
      -underline 6 -accelerator T

    $Menu add command Trace "Tfind Frame..." \
      "ManagedWin::open TfindArgs -Type FR" \
      -underline 6 -accelerator F
  }

  # ------------------------------------------------------------------
  #  METHOD:  create_plugin_menu - Creates the optional plugin menu
  # ------------------------------------------------------------------  
  private method create_plugin_menu {} {
    global gdb_plugins

    $Menu add menubutton plugin "PlugIn" 4
    set plugins_available 0
    foreach plugin_dir $gdb_plugins {
      if {[catch {source [file join $plugin_dir plugins.tcl]} txt]} {
	dbug E $txt
      }
    }

    if {! $plugins_available} {
      # No plugins are available for this configuration,
      # so remove the menu
      debug "No plugins configured, go remove the PlugIn menu..."
      $Menu delete plugin
    }
  }

  # ------------------------------------------------------------------
  #  METHOD:  create_pref_menu - Creates the standard preferences menu
  # ------------------------------------------------------------------  
  private method create_pref_menu {} {

    $Menu add menubutton pref "Preferences" 0
    
    $Menu add command Other "Global..." \
      "ManagedWin::open GlobalPref -transient" -underline 0
    
    $Menu add command Other "Source..." \
      "ManagedWin::open SrcPref -transient" -underline 0

    set save_menu [$Menu menubar_get_current_menu]

    set advanced_menu [$Menu add cascade adv Advanced "Advanced" 0]

    $advanced_menu add command -label "Edit Color Schemes..." -underline 0 \
      -command "ManagedWin::open CSPref -transient" -underline 0

    $advanced_menu add command -label "IPC Support..." -underline 0 \
      -command "ManagedWin::open IPCPref -transient" -underline 0

    $Menu menubar_set_current_menu $save_menu

    $Menu add separator

    set color_menu [$Menu add cascade use_cs Color "Use Color Scheme" 0]
    for {set i 0} {$i < 16} {incr i} {
      set dbg [recolor [pref get gdb/bg/$i] 80]
      $color_menu add command -label $i -background [pref get gdb/bg/$i] \
	-activebackground $dbg -command "set_bg_colors $i" -underline 0
    }

    if {[pref get gdb/use_color_schemes] == "1"} {
      set cs_state normal
    } else {
      set cs_state disabled
    }
    $Menu set_class_state "Color $cs_state"
  }

  # ------------------------------------------------------------------
  #  METHOD:  create_help_menu - Creates the standard help menu
  # ------------------------------------------------------------------  
  private method create_help_menu {} {
    # KDE and GNOME like the help menu to be the last item in the menubar.
    # The default Unix behavior is to be at the far right of the menubar.
    set os [pref get gdb/compat]
    if {$os == "KDE" || $os == "GNOME"} {
      set helpmenu "_help"
    } else {
      set helpmenu "help"
    }
    $Menu add menubutton $helpmenu "Help" 0
    $Menu add command Other "Help Topics" {open_help index.html} \
      -underline 0
    $Menu add separator
    $Menu add command Other "About GDB..." \
      {ManagedWin::open About -transient} \
      -underline 0
  }

  ####################################################################
  # The next set of functions are the generic button groups that gdb uses.
  # Private.  Used at contruction time.
  # These were previously at the GDBToolBar...
  ####################################################################
  
  # ------------------------------------------------------------------
  #  METHOD:  create_buttons - Add some buttons to the toolbar.
  #                         Returns list of buttons in form acceptable
  #                         to standard_toolbar.
  # ------------------------------------------------------------------
  private  method create_buttons {} {
    global enable_external_editor

    $Tool add button stop None {} {}
    _set_runstop

    if {[pref get gdb/mode]} {
      $Tool add button tstop Control \
                         [list $this do_tstop] "Start Collection" \
	                 -image Movie_on_img

      $Tool add button view Other [list $this set_control_mode 1] \
	                 "Switch to Browse Mode" -image watch_movie_img

      $Tool add separator

    }

    if {[pref get gdb/control_target]} {
      create_control_buttons
      if {[pref get gdb/mode]} {
	create_trace_buttons 0
      }
    } elseif {[get pref gdb/mode]} {

      #
      # If we don't control the target, then we might as well
      # put a copy of the trace controls on the source window.
      #
      create_trace_buttons 1
   }

    $Tool add separator

    create_window_buttons

    # Random bits of obscurity...
    $Tool itembind reg   <Button-3> "ManagedWin::open RegWin -force"
    $Tool itembind mem   <Button-3> "ManagedWin::open MemWin -force"
    $Tool itembind watch <Button-3> \
      "ManagedWin::open WatchWin -force"
    $Tool itembind vars  <Button-3> \
      "ManagedWin::open LocalsWin -force"

    $Tool add separator

    if {[info exists enable_external_editor] && $enable_external_editor} {
      $Tool add button edit Other [code $source edit] "Edit Source" \
	                      -image edit_img

      $Tool add separator
    }

    # Add find in file entry box.
    $Tool add label findlabel "Find:" "" -anchor e -font global/fixed
    $Tool add custom searchbox entry "Search in editor" \
       -bd 3 -font global/fixed -width 10

    set callback [code $source search]
    $Tool itembind searchbox <Return> \
	    "$callback forwards \[eval %W get\]"
    $Tool itembind searchbox <Shift-Return> \
            "$callback backwards \[eval %W get\]"

    $Tool add separator

    $Tool toolbar_button_right_justify

    create_stack_buttons

    # This feature has been disabled for now.
    # checkbutton $ButtonFrame.upd -command "$this _toggle_updates" \
    #   -variable GDBSrcBar_state($this)
    # lappend button_list $ButtonFrame.upd
    # global GDBSrcBar_state
    # ::set GDBSrcBar_state($this) $updatevalue
    # balloon register $ButtonFrame.upd "Toggle Window Updates"
  }

  # ------------------------------------------------------------------
  #  METHOD:  create_control_buttons - Creates the step, continue, etc buttons.
  # ------------------------------------------------------------------
  
  private method create_control_buttons {} {
    $Tool add button step Control [code $source inferior step] \
      "Step (S)" -image step_img
    
    $Tool add button next Control [code $source inferior next] \
      "Next (N)" -image next_img
    
    $Tool add button finish Control [code $source inferior finish] \
      "Finish (F)" -image finish_img
    
    $Tool add button continue Control [code $source inferior continue] \
      "Continue (C)" -image continue_img
    
    # A spacer before the assembly-level items looks good.  It helps
    # to indicate that these are somehow different.
    $Tool add separator
    
    $Tool add button stepi Control [code $source inferior stepi] \
      "Step Asm Inst (S)" -image stepi_img
    
    $Tool add button nexti Control [code $source inferior nexti] \
      "Next Asm Inst (N)" -image nexti_img
    
    _set_stepi

    set Run_control_buttons {step next finish continue -stepi nexti}
    
  }

  # ------------------------------------------------------------------
  #  METHOD:  create_trace_buttons - Creates the next hit, etc.
  # ------------------------------------------------------------------
  
  private method create_trace_buttons {{show 0}} {

    if {$show} {
      set command "add button"
    } else {
      set command "create"
    }

    $Tool $command tfindstart Trace {tfind_cmd "tfind start"} "First Hit <F>" \
      -image rewind_img
    
    $Tool $command tfind Trace {tfind_cmd tfind} "Next Hit <N>" -image next_hit_img
    
    $Tool $command tfindprev Trace {tfind_cmd "tfind -"} "Previous Hit <P>" \
      -image prev_hit_img
    
    $Tool $command tfindline Trace {tfind_cmd "tfind line"} "Next Line Hit <L>" \
      -image next_line_img
    
    $Tool $command tfindtp Trace { tfind_cmd "tfind tracepoint"} \
      "Next Hit Here <H>" -image next_check_img

    set Trace_control_buttons {tfindstart tfind tfindprev tfindline tfindtp}
  }

  # ------------------------------------------------------------------
  #  METHOD:  create_window_buttons - Creates the registers, etc, buttons
  # ------------------------------------------------------------------
  
  private method create_window_buttons {} {
    $Tool add button reg Other {ManagedWin::open RegWin} \
                           "Registers (Ctrl+R)" -image reg_img

    $Tool add button mem Other {ManagedWin::open MemWin} \
                           "Memory (Ctrl+M)" -image memory_img

    $Tool add button stack Other {ManagedWin::open StackWin} \
                             "Stack (Ctrl+S)" -image stack_img

    $Tool add button watch Other {ManagedWin::open WatchWin} \
                             "Watch Expressions (Ctrl+W)" -image watch_img

    $Tool add button vars Other {ManagedWin::open LocalsWin} \
                            "Local Variables (Ctrl+L)" -image vars_img

    if {[pref get gdb/control_target]} {
      $Tool add button bp Other {ManagedWin::open BpWin} \
                            "Breakpoints (Ctrl+B)" -image bp_img
    }

    if {[pref get gdb/mode]} {
      $Tool add button tp Other \
        {ManagedWin::open BpWin -tracepoints 1} \
	"Tracepoints (Ctrl+T)" -image tp_img
      
      $Tool add button tdump Trace {ManagedWin::open TdumpWin} \
                               "Tdump (Ctrl+D)" -image tdump_img
    }

    $Tool add button con Other {ManagedWin::open Console} \
                           "Console (Ctrl+N)" -image console_img
  }

  # ------------------------------------------------------------------
  #  METHOD:  create_stack_buttons - Creates the up down bottom stack buttons
  # ------------------------------------------------------------------
  
  private method create_stack_buttons {} {

    $Tool add button down {Trace Control} \
      [code $source stack down] \
      "Down Stack Frame" -image down_img

    $Tool add button up {Trace Control} \
      [code $source stack up] \
      "Up Stack Frame" -image up_img

    $Tool add button bottom {Trace Control} \
      [code $source stack bottom] \
      "Go to Bottom of Stack" -image bottom_img

  }

  ####################################################################
  #
  # Auxiliary methods used by the toolbar
  # 
  ####################################################################

  # ------------------------------------------------------------------
  #  METHOD:  _load_images - Load standard images.  Private method.
  # ------------------------------------------------------------------
  public method _load_images { {reconfig 0} } {
    global gdb_ImageDir
    if {!$reconfig && $_loaded_images} {
      return
    }
    set _loaded_images 1

    lappend imgs console reg stack vars watch memory bp
    foreach name $imgs {
      image create photo ${name}_img -file [file join $gdb_ImageDir ${name}.gif]
    }
  }

  # ------------------------------------------------------------------
  #  METHOD:  _load_src_images - Load standard images.  Private method.
  # ------------------------------------------------------------------
  method _load_src_images { {reconf 0} } {
    global gdb_ImageDir

    if {!$reconf && $_loaded_src_images} {
      return
    }
    set _loaded_src_images 1

    foreach name {run stop step next finish continue edit \
		    stepi nexti up down bottom Movie_on Movie_off \
		    next_line next_check next_hit rewind prev_hit \
		  watch_movie run_expt tdump tp} {
      image create photo ${name}_img -file [file join $gdb_ImageDir ${name}.gif]
    }
  }

  # ------------------------------------------------------------------
  #  METHOD:  _set_runstop - Set state of run/stop button.
  #
  #  busy        - Run button becomes disabled
  #  running     - Stop button appears, allowing user to stop executing target
  #  downloading - Stop button appears, allowing user to interrupt downloading
  #  normal      - Run button appears, allowing user to run/re-run exe
  # ------------------------------------------------------------------
  public method _set_runstop {} {
    dbug I $runstop

    switch $runstop {
      busy {
	$Tool itemconfigure stop -state disabled
      }
      downloading {
	$Tool itemconfigure stop -state normal -image stop_img \
	  -command [code $this cancel_download]
	$Tool itemballoon stop "Stop"
      }
      running {
	$Tool itemconfigure stop -state normal -image stop_img \
	  -command [code $source inferior stop]
	$Tool itemballoon stop "Stop"
      }
      normal {
	$Tool itemconfigure stop -state normal -image run_img \
	  -command [code $source inferior run]
	$Tool itemballoon stop "Run (R)"
      }
      default {
	dbug W "unknown state $runstop"
      }
    }
  }


  # ------------------------------------------------------------------
  #  METHOD:  _set_stepi - Set state of stepi/nexti buttons.
  # ------------------------------------------------------------------
  public method _set_stepi {} {
    
    # Only do this in synchronous mode
    if {!$Tracing} {
      # In source-only mode, disable these buttons.  Otherwise, enable
      # them.
      if {$displaymode == "SOURCE"} {
	set state disabled
      } else {
	set state normal
      }
      $Tool itemconfigure stepi -state $state
      $Tool itemconfigure nexti -state $state
    }
  }


  ####################################################################
  #
  # State control methods used by both the menu and the toolbar
  # 
  ####################################################################

  # ------------------------------------------------------------------
  #  METHOD:  handle_trace_find_hook - response to the tfind command.
  #             If the command puts us in a new mode, then switch modes...
  # ------------------------------------------------------------------
  method handle_trace_find_hook {mode from_tty} {
    debug "mode: $mode, from_tty: $from_tty, Browsing: $Browsing"
    if {[string compare $mode -1] == 0} {
      if {$Browsing} {
	set_control_mode 0
      }
    } else {
      if {!$Browsing} {
	set_control_mode 1
      }
    }
  }

  # ------------------------------------------------------------------
  #  METHOD:  set_control_mode - sets up the srcbar for browsing 
  #  a trace experiment.
  #   mode: 1 => browse mode
  #         0 => control mode
  # ------------------------------------------------------------------
  method set_control_mode  {mode} {
    debug "set_control_mode called with mode $mode"
    if {$mode} {
      set Browsing 1
      $Tool itemconfigure view -image run_expt_img \
                            -command "$this set_control_mode 0"
      $Tool itemballoon view "Switch to Control mode"
      # Now swap out the buttons...
      $Tool toolbar_swap_button_lists $Trace_control_buttons \
                                      $Run_control_buttons
      enable_ui 1
    } else {
      if {$Browsing} {
	tfind_cmd {tfind none}
      }
      set Browsing 0
      $Tool itemconfigure view -image watch_movie_img \
                            -command "$this set_control_mode 1"
      $Tool itemballoon view "Switch to Browse mode"
      # Now swap out the buttons...
      $Tool toolbar_swap_button_lists $Run_control_buttons \
                                      $Trace_control_buttons
      enable_ui 1
    }
  }

  # ------------------------------------------------------------------
  #  METHOD:  reconfig - reconfigure the srcbar
  #                      used when preferences change
  # ------------------------------------------------------------------
  public method reconfig {} {
    debug
    _load_src_images 1
    _load_images 1

    if {[pref get gdb/use_color_schemes] == "1"} {
      set cs_state normal
    } else {
      set cs_state disabled
    }
    $Menu set_class_state "Color $cs_state"
    for {set i 0} {$i < 16} {incr i} {
      set dbg [recolor [pref get gdb/bg/$i] 80]
      $color_menu entryconfigure $i -activebackground $dbg -background [pref get gdb/bg/$i]
    }
    # FIXME: Must Check if we are Tracing and set the buttons accordingly.
  }

  # ------------------------------------------------------------------
  #  METHOD:  set_variable - run when user enters a `set' command.
  #
  #  FIXME: Should not be accessing the base class internal data
  #         As the spec says, one must clear the menu and recreate it.
  # ------------------------------------------------------------------  
  public method set_variable {event} {
    set varname [$event get variable]
    set value   [$event get value]
    debug "Got $varname = $value"

    if {$varname == "os"} {
      # Make current_menu pointer point to the View Menu.
      # FIXME: Should not be accessing the base class internal data directly
      set view_menu [menu_find View]
      # Restore the current_menu pointer.
      set save_menu [$Menu menubar_set_current_menu $view_menu]
      set title "Kernel Objects"

      # Look for the KOD menu entry...
      if {[catch {$view_menu index $title} index]} {
	set index none
      }

      # FIXME: This assumes that the KOD menu is the last one as it does not
      # adjust the index information kept by the GDBMenuBar class.
      if {$value == ""} {
	# No OS, so remove KOD from View menu.
	if {$index != "none"} {
          # FIXME: Should not be accessing the base class internal data
	  $view_menu delete $index
	}
      } else {
	# Add KOD to View menu, but only if it isn't already there.
	if {$index == "none"} {
	  $Menu add command Other $title \
            {ManagedWin::open KodWin} \
	    -underline 0 -accelerator "Ctrl+K"
	}
      }

      # Restore the current_menu pointer.
      $Menu menubar_set_current_menu $save_menu

      global gdb_kod_cmd
      set gdb_kod_cmd $value
    }
  }

  ####################################################################
  # The following method enables/disables both menus and buttons.
  ####################################################################

  # ------------------------------------------------------------------
  # METHOD:  enable_ui - enable/disable the appropriate buttons and menus
  # Called from the busy, idle, and no_inferior hooks.
  #
  # on must be:
  # value      Control    Other    Trace    State
  #   0          off       off      off     gdb is busy
  #   1          on        on       off     gdb has inferior, and is idle
  #   2          off       on       off     gdb has no inferior, and is idle
  # ------------------------------------------------------------------
  public method enable_ui {on} {
    debug "$on - Browsing=$Browsing"

    # Do the enabling so that all the disabling happens first, this way if a
    # button belongs to two groups, enabling takes precedence, which is
    #  probably right.

    switch $on {
      0 {
        # Busy
	set enable_list {Control disabled \
			   Other disabled \
			   Trace disabled \
			   Attach disabled \
			   Detach disabled}
      }
      1 {
        # Idle, with inferior
	if {!$Browsing} {
	  set enable_list {Trace disabled \
			     Control normal \
			     Other normal \
			     Attach disabled \
			     Detach normal }
	  # set the states of stepi and nexti correctly
	  _set_stepi
	} else {
	  set enable_list {Control disabled Other normal Trace normal}
	}

      }
      2 {
        # Idle, no inferior
	set enable_list {Control disabled \
			   Trace disabled \
			   Other normal \
			   Attach normal \
			   Detach disabled }
      }
      default {
	debug "Unknown type: $on in enable_ui"
	return
      }
    }

    $Menu set_class_state $enable_list
    $Tool set_class_state $enable_list
  }

  ####################################################################
  #
  # Execute actions corresponding to menu events
  # 
  ####################################################################

  # ------------------------------------------------------------------
  # METHOD:  do_attach: attach to a running target
  # ------------------------------------------------------------------
  method do_attach {menu} {
      gdbtk_attach_native
  }

  # ------------------------------------------------------------------
  # METHOD:  do_detach: detach from a running target
  # ------------------------------------------------------------------
  method do_detach {menu} {
    gdbtk_disconnect
    gdbtk_idle
  }

  # ------------------------------------------------------------------
  # METHOD:  do_kill: kill the current target
  # ------------------------------------------------------------------
  method do_kill {menu} {
    gdb_cmd "kill"
    run_hooks gdb_no_inferior_hook
  }
  
  # ------------------------------------------------------------------
  # METHOD:  do_connect: connect to a remote target 
  #                      in asynch mode if async is 1
  # ------------------------------------------------------------------
  method do_connect {menu {async 0}} {

    set successful [gdbtk_connect $async]

    if {$successful} {
      $menu entryconfigure "Connect to target" -state disabled
      $menu entryconfigure "Disconnect" -state normal
    } else {
      $menu entryconfigure "Connect to target" -state normal
      $menu entryconfigure "Disconnect" -state disabled
    }

    # Make the menu reflect this change
    ::update idletasks
  }

  # ------------------------------------------------------------------
  # METHOD:  do_disconnect: disconnect from a remote target 
  #                               in asynch mode if async is 1.   
  #   
  # ------------------------------------------------------------------
  method do_disconnect {menu {async 0}} {
    debug "$menu $async"
    #
    # For now, these are the same, but they might be different...
    # 

    gdbtk_disconnect $async

    $menu entryconfigure "Connect to target" -state normal
    $menu entryconfigure "Disconnect" -state disabled
  }

  ####################################################################
  #
  # Execute actions corresponding to toolbar events
  # 
  ####################################################################

  # ------------------------------------------------------------------
  #  METHOD:  _toggle_updates - Run when the update checkbutton is
  #                             toggled.  Private method.
  # ------------------------------------------------------------------
  public method _toggle_updates {} {
    global GDBSrcBar_state
    if {$updatecommand != ""} {
      uplevel \#0 $updatecommand $GDBSrcBar_state($this)
    }
  }

  # ------------------------------------------------------------------
  #  METHOD:  cancel_download
  # ------------------------------------------------------------------
  public method cancel_download {} {
    global download_dialog download_cancel_ok

    if {"$download_dialog" != ""} {
      $download_dialog cancel
    } else {
      set download_cancel_ok 1
    }
  }

  ####################################################################
  #
  # Execute actions that can be activated by both menu entries and
  # toolbar buttons
  # 
  ####################################################################

  # ------------------------------------------------------------------
  # METHOD:  do_tstop: Change the GUI state, then do the tstop or
  #                    tstart command, whichever is appropriate.   
  #   
  # ------------------------------------------------------------------
  method do_tstop {} {
    debug "do_tstop called... Collecting is $Collecting"

    if {!$Collecting} {
      #
      # Start the trace experiment
      #

      if {$Browsing} {
	set ret [tk_messageBox -title "Warning" -message \
"You are currently browsing a trace experiment. 
This command will clear the results of that experiment.
Do you want to continue?" \
		   -icon warning -type okcancel -default ok]
	if {[string compare $ret cancel] == 0} {
	  return
	}
	set_control_mode 1
      }
      if {[tstart]} {
        # FIXME: Must enable the Stop Collection menu item and
        # disable the Start Collection item
        $Tool itemconfigure tstop -image Movie_off_img
        $Tool itemballoon tstop "End Collection"
	set Collecting 1
      } else {
	tk_messageBox -title Error \
          -message "Error downloading tracepoint info" \
	  -icon error -type ok
      }
    } else {
      #
      # Stop the trace experiment
      #

      if {[tstop]} {	
        # FIXME: Must enable the Stop Collection menu item and
        # disable the Start Collection item
        $Tool itemconfigure tstop -image Movie_on_img
        $Tool itemballoon tstop "Start Collection"
	set Collecting 0
     }
    }
  }

  # ------------------------------------------------------------------
  #  METHOD:  busy - BusyEvent handler
  # ------------------------------------------------------------------
  method busy {event} {
    enable_ui 0
  }

  # ------------------------------------------------------------------
  #  METHOD:  idle - IdleEvent handler
  # ------------------------------------------------------------------
  method idle {event} {
    enable_ui 1
  }

  ####################################################################
  #
  #  PRIVATE DATA
  #
  ####################################################################

  # This is a handle on our parent source window.
  private variable source {}

  # The GdbMenuBar component
  private variable Menu
  private variable color_menu

  # The GdbToolBar component
  private variable Tool

  # FIXME - Need to break the images into the sets needed for
  # each button group, and load them when the button group is
  # created.

  # This is set if we've already loaded the standard images.
  private common _loaded_images 0

  # This is set if we've already loaded the standard images.  Private
  # variable.
  private common _loaded_src_images 0

  # These buttons go in the control area when we are browsing
  protected variable Trace_control_buttons 

  # And these go in the control area when we are running
  protected variable Run_control_buttons

  ####################################################################
  #
  #  PUBLIC DATA
  #
  ####################################################################

  # This is the command that should be run when the `update'
  # checkbutton is toggled.  The current value of the checkbutton is
  # appended to the command.
  public variable updatecommand {}

  # This controls whether the `update' checkbutton is turned on or
  # off.
  public variable updatevalue 0 {
    global GDBSrcBar_state
    ::set GDBSrcBar_state($this) $updatevalue
  }

  # This holds the source window's display mode.  Valid values are
  # SOURCE, ASSEMBLY, SRC+ASM, and MIXED.
  public variable displaymode SOURCE {
    _set_stepi
  }

  # This indicates what is the inferior state.
  # Possible values are: {busy running downloading normal}
  public variable runstop normal {
    dbug I "configuring runstop $runstop"

    # Set the Run/Stop button accordingly
    _set_runstop
  }

  # The next three determine the state of the application when Tracing is enabled.

  public variable Tracing 0     ;# Is tracing enabled for this gdb?
  public variable Browsing   0  ;# Are we currently browsing a trace experiment?
  public variable Collecting 0  ;# Are we currently collecting a trace experiment?
}
@


1.26
log
@        * library/main.tcl: Add gdbtk_platform definitions.
        * library/attachdlg.itb (list_pids): Use gdbtk_platform
        instead of tcl_platform.
        * library/bpwin.itb (build_win): Likewise.
        (_bp_add): Likewise.
        (_bp_modify): Likewise.
        * library/download.itb (download_it): Likewise.
        * library/globalpref.itb (_build_win): Likewise.
        * library/helpviewer.tcl (open_help): Likewise.
        * library/interface.tcl (gdbtk_tcl_query): Likewise.
        (show_warning): Likewise.
        (open_file): Likewise.
        (run_executable): Likewise.
        * library/managedwin.itb (reveal): Likewise.
        (_create): Likewise.
        * library/prefs.tcl (pref_read): Likewise.
        (pref_set_defaults): Likewise.
        (pref_set_colors): Likewise.
        * library/session.tcl (_exe_name): Likewise.
        * library/srcbar.itcl (_update_file_menu): Likewise.
        (create_run_menu): Likewise.
        * library/srctextwin.itb (_mtime_changed): Likewise.
        (LoadFromCache): Likewise.
        * library/targetselection.itb (default_port): Likewise.
        (build_win): Likewise.

        * library/memwin.itb (build_win): Remove unused tcl_platform
        declaration.
        * library/pluginwin.itcl (enable_ui): Likewise.
        * library/process.itb (build_win): Likewise.
        * library/srcbar.itcl (enable_ui): Likewise.
        * library/srcwin.itb (location): Likewise.
        * library/stackwin.itb (build_win): Likewise.
        * library/tdump.tcl (build_win): Likewise.
@
text
@d2 1
a2 1
# Copyright (C) 2001, 2002, 2004, 2008 Red Hat, Inc.
a232 4
    # If we are on a Unix target, put in the attach options.  "ps" doesn't
    # give me the Windows PID yet, and the attach also seems flakey, so 
    # I will hold off on the Windows implementation for now.

a233 1
      if {[string compare $::gdbtk_platform(platform) windows] != 0} {
a236 1
      }
@


1.26.6.1
log
@gdb/insight for ARCompact (from Richard Stuckey)
@
text
@a1043 3
# ARC 24/11/08
# en/disable other menu items

d1046 1
a1046 3
      $menu entryconfigure "Download"          -state normal
      $menu entryconfigure "Run"               -state normal
      $menu entryconfigure "Disconnect"        -state normal
d1049 1
a1049 3
      $menu entryconfigure "Download"          -state disabled
      $menu entryconfigure "Run"               -state disabled
      $menu entryconfigure "Disconnect"        -state disabled
a1068 3
# ARC 24/11/08
# disable other menu items

d1070 1
a1070 3
    $menu entryconfigure "Download"          -state disabled
    $menu entryconfigure "Run"               -state disabled
    $menu entryconfigure "Disconnect"        -state disabled
@


1.25
log
@	* library/attachdlg.itb:
	* library/actiondlg.tcl:
	* library/about.tcl:
	* library/ehandler.itb:
	* library/editor.tcl:
	* library/download.ith:
	* library/download.itb:
	* library/debugwin.ith:
	* library/debugwin.itb:
	* library/cspref.ith:
	* library/cspref.itb:
	* library/console.ith:
	* library/console.itb:
	* library/browserwin.ith:
	* library/browserwin.itb:
	* library/bpwin.ith:
	* library/bpwin.itb:
	* library/blockframe.ith:
	* library/managedwin.ith:
	* library/managedwin.itb:
	* library/main.tcl:
	* library/locals.tcl:
	* library/ipcpref.ith:
	* library/ipcpref.itb:
	* library/ipc.tcl:
	* library/interface.tcl:
	* library/helpviewer.tcl:
	* library/globalpref.ith:
	* library/globalpref.itb:
	* library/gdbwin.ith:
	* library/gdbtoolbar.itcl:
	* library/gdbmenubar.itcl:
	* library/gdbevent.ith:
	* library/gdbevent.itb:
	* library/embeddedwin.ith:
	* library/ehandler.ith:
	* library/srcwin.itb:
	* library/srctextwin.ith:
	* library/srctextwin.itb:
	* library/srcpref.ith:
	* library/srcpref.itb:
	* library/srcbar.itcl:
	* library/session.tcl:
	* library/regwin.ith:
	* library/regwin.itb:
	* library/process.ith:
	* library/process.itb:
	* library/prefs.tcl:
	* library/pluginwin.itcl:
	* library/modal.tcl:
	* library/memwin.ith:
	* library/memwin.itb:
	* library/mempref.ith:
	* library/mempref.itb:
	* library/watch.tcl:
	* library/watch.tcl:
	* library/warning.tcl:
	* library/vartree.ith:
	* library/vartree.itb:
	* library/util.tcl:
	* library/tracedlg.tcl:
	* library/toplevelwin.ith:
	* library/tfind_args.tcl:
	* library/tdump.tcl:
	* library/targetselection.ith:
	* library/targetselection.itb:
	* library/stackwin.ith:
	* library/stackwin.itb:
	* library/srcwin.ith:
@
text
@d2 1
a2 1
# Copyright (C) 2001, 2002, 2004 Red Hat, Inc.
d147 1
a147 1
    global enable_external_editor tcl_platform gdb_exe_name
d185 1
a185 1
    if {$tcl_platform(platform) == "windows"} {
d238 1
a238 1
      if {[string compare $::tcl_platform(platform) windows] != 0} {
d258 1
a258 1
      if {[string compare $::tcl_platform(platform) windows] != 0} {
a958 1
    global tcl_platform
@


1.24
log
@2004-08-27  Martin Hunt  <hunt@@redhat.com>

	* library/ipc.tcl: New file.
	* library/ipcpref.ith: New file.
	* library/ipcpref.itb: New file.

	* library/srcwin.itb (SrcWin::inferior): Call ipc
	send if enabled.

	* library/prefs.tcl (pref_set_defaults): Enable color
	schemes by default. Add IPC defaults.

	* library/srcbar.itcl (create_pref_menu): Create
	"Advanced" cascade menu and put "Edit Color Schemes"
	and "IPC Support" under it.

	* library/managedwin.itb (ManagedWin::destructor):
	If IPC enabled then send "quit" on exit.

	* library/main.tcl: Start IPC if enabled.

	* library/prefs.tcl (pref_set_defaults): Add IPC defaults.

	* library/gdbmenubar.itcl (menubar_get_current_menu):
	New method.
@
text
@d2 1
a2 1
# Copyright 2001, 2002, 2004 Red Hat, Inc.
@


1.23
log
@2004-04-05  Martin Hunt  <hunt@@redhat.com>

	* library/session.tcl: Make hostname and portname
	session-dependent. Add gdb_bg_num (the color
	scheme number) as a per-session variable.

	* library/prefs.tcl (pref_read): If color schemes are in use,
	set colors based on the current scheme.
	(pref_save): Add "bg" section.
	(pref_set_defaults): Define new variable gdb/use_color_schemes
	and define 16 default background colors.

	* library/managedwin.itb (ManagedWin::window_name): Append
	window "instance" string to window name.
	(ManagedWin::window_instance): Set window instance string.

	* library/debugwin.itb: Add a reconfig method to restore
	unique black textbackground, overriding color scheme.

	* library/csprefs.itb:
	* library/csprefs.ith: New files. Implement color scheme
	preferences.

	* library/util.tcl (set_bg_colors): New function.
	(r_setcolors): New function.

	* library/regwin.itb (_prefs_changed): Deleted.
	(reconfig): New function.  Updates tkTable color tags
	if color scheme changes.
	* library/regwin.ith: Update to reflect above changes.

	* library/srcbar.itcl (create_pref_menu): Add pulldown
	menus for "Edit Color Schemes..." and "Use Color Schemes".
	(reconfig): Fix up menu items for color schemes.

	* library/globalpref.itb (_init_var): Add
	gdb/use_color_schemes to variable list.
	(_build_win): Add a checkbutton to enable/disable
	color schemes.

	* library/gdbmenubar.itcl (menubar_add_cascade): Add a class
	argument so cascade menus can be managed by class too.

	* library/interface.tcl (gdbtk_tcl_fputs): Check for
	existence of gdbtk_state(console).  Stops annoying error
	messages.
	(gdbtk_tcl_fputs_error): Ditto.
	(gdbtk_tcl_fputs_log): Ditto.
@
text
@d460 12
a471 3
    $Menu add command Color "Edit Color Schemes..." \
      "ManagedWin::open CSPref -transient" -underline 0
    
@


1.22
log
@2002-12-20  Martin M. Hunt  <hunt@@redhat.com>

	* library/srcbar.itcl (SrcBar): Don't load vmake icon.

	* library/images: Removed back.gif, build.gif, file.gif, fore.gif,
	gdbtk.gif, opt.gif, tools.gif, tools2_3d.gif, and vmake.gif.

	* library/images2: Removed back.gif, build.gif, file.gif, fore.gif,
	gdbtk.gif, load.gif, opt.gif, tools.gif, tools2_3d.gif, and vmake.gif.
@
text
@d2 1
a2 1
# Copyright 2001, 2002 Red Hat, Inc.
d459 19
d872 11
d1177 1
@


1.21
log
@2002-11-11  Martin M. Hunt  <hunt@@redhat.com>

	* library/srcbar.itcl (create_help_menu): For unix systems,
	if compatibility is set to KDE or GNOME, put the help menu
	in the right place. Otherwise put it on the far right, like
	Motif does.
@
text
@d708 1
a708 1
    lappend imgs console reg stack vmake vars watch memory bp
@


1.20
log
@2002-10-15  Martin M. Hunt  <hunt@@redhat.com>

	* library/* : auto_mkindex cannot rebuild
	tclIndex because it does not recognize the namespace
	import in main.tcl.  To get it to work again, rename the
	following:
		body -> itcl::body
		configbody -> itcl::configbody
		class -> itcl::class
@
text
@d465 10
a474 4

    $Menu add menubutton help "Help" 0
    $Menu add command Other "Help Topics" \
      {HtmlViewer::open_help index.html} \
@


1.19
log
@        * library/srcbar.itcl (create_plugin_menu): Deal with
        multi plugin directories.
        Catch any errors that might occur reading plugin.tcl.
        * library/main.tcl: Add plugins from new default directory.
        (INSIGHT_PLUGINS): New environment variable to point to other
        plugin directories.
@
text
@d31 1
a31 1
class SrcBar {
@


1.18
log
@2002-03-05  Martin M. Hunt  <hunt@@redhat.com>

	* library/prefs.tcl (pref_read): If a preference specifies
	"src-font", substitute "global/fixed".
	(pref_set_defaults): Change defaults from "src-font" to
	"global/fixed". Do not create font object "src-font". Do
	not add hook to trace its changes.
	(pref_src-font_trace): Remove.

	* library/console.itb (Console::_update_option): Remove
	font update because this happens automatically.

	* library/globalpref.itb: No need to set
	changed flag for fonts; updates happen automatically
	when prefs are updated.

	* library/bpwin.itb: Replaced src-font with global/fixed.
	* library/browserwin.itb: Ditto.
	* library/mempref.itb: Ditto.
	* library/memwin.itb: Ditto.
	* library/process.itb: Ditto.
	* library/regwin.itb: Ditto.
	* library/srcbar.itcl: Ditto.
	* library/srcpref.itb: Ditto.
	* library/srctextwin.itb: Ditto.
	* library/srcwin.itb: Ditto.
	* library/stackwin.itb: Ditto.
	* library/tdump.tcl: Ditto.
	* library/tracedlg.tcl: Ditto.
	* library/variables.tcl: Ditto.
	* library/watch.tcl: Ditto.
@
text
@d431 5
a435 9
    if {$gdb_plugins != ""} {
      $Menu add menubutton plugin "PlugIn" 4
      set plugins_available 0
      source [file join $gdb_plugins plugins.tcl]
      if {! $plugins_available} {
        # No plugins are available for this configuration,
        # so remove the menu
        debug "No plugins configured, go remove the PlugIn menu..."
        $Menu delete plugin
d437 7
@


1.17
log
@
	* library/srcbar.itcl (SrcBar::create_buttons): Added
	"Search in source file" entry box and label to the top
	row toolbar.
	* library/srcwin.itb (SrcWin::_build_win): Removed
	"Search in source file" entry box.
	(SrcWin::_search): Renamed to "search", add string
	parameter and cleaned up.
	* library/srcwin.ith (SrcWin): Removed private
	method "_search" and added public method "search".
@
text
@d538 1
a538 1
    $Tool add label findlabel "Find:" "" -anchor e -font src-font
d540 1
a540 1
       -bd 3 -font src-font -width 10
@


1.16
log
@	* library/tclIndex: Updated.
	* library/srcbar.itcl (SrcBar): Use new Session namespace.
	* library/main.tcl: Use new Session namespace.
	* library/interface.tcl (gdbtk_tcl_preloop): Use new Session
	namespace.
	(gdbtk_cleanup): Likewise.
	(_close_file): Likewise.
	* library/session.tcl: Use a namespace.  Renamed all functions.
@
text
@d537 13
@


1.15
log
@update copyrights (dates verified with cvs)
@
text
@d171 1
a171 1
    set sessions [session_list]
d177 1
a177 1
	  [list session_load $item] \
@


1.14
log
@	* library/srcbar.itcl (SrcBar::create_buttons): Line number
	and address fields have been removed and added to the
	status bar.
	* library/srcwin.itb (SrcWin::_build_win): Add address and
	line number fields to status bar.  Moved download progress
	bar to status bar.
	(SrcWin::download_progress):  Use canvas on status bar.
	Remember to adjust width of 64-bit address.
	(SrcWin::location): Set line number and address on status bar.
	* library/srcwin.ith (SrcWin): Added new private variable.
@
text
@d2 1
a2 1
# Copyright 2001 Red Hat, Inc.
@


1.13
log
@2001-10-29  Martin M. Hunt  <hunt@@redhat.com>

	* generic/gdbtk-bp.c (gdb_set_bp_addr): When setting
	the bp addr_string, use the string the function was called
	with instead of using sprintf to write a new one. This
	avoids a problem with truncating 64-bit addresses.

	* library/srcbar.itcl (SrcBar::create_buttons) Don't
	set width of address label.
	(SrcBar::address) When the address changes, recompute
	width of address label.  If it is more than 10, force it
	to 18, otherwise use 10.
@
text
@a536 6
    $Tool add label addr $address "Address" -relief sunken \
                           -bd 1 -anchor e -font  src-font

    $Tool add label line $line "Line Number" -width 6 -relief sunken \
                           -bd 1 -anchor e -font  src-font

a1161 17
  }

  # This holds the text that is shown in the address label.
  public variable address {} {
    if {[string length $address] > 10} {
      # 64-bit address plus "0x"
      set width 18
    } else {
      # 32-bit address plus "0x"
      set width 10
    }
    $Tool itemconfigure addr -text $address -font src-font -width $width
  }

  # This holds the text that is shown in the line label.
  public variable line {} {
    $Tool itemconfigure line -text $line
@


1.12
log
@	* library/srcbar.itcl (_post): New method.
	(_update_file_menu): New method.
	(create_file_menu): Move the guts to _update_file_menu.
	Add a post command to the menu.
	* library/interface.tcl (gdbtk_tcl_file_changed): Catch the
	call to run_hooks.
	(gdbtk_tcl_exec_file_display): Save the new session, too.
	(set_exe_name): Don't bother saving the session here.
	(_close_file): Save the session here, too.
	(gdbtk_clear_file): Catch the call to run_hooks, too.
	* library/gdbmenubar.itcl (menubar_new_menu): Allow caller
	to specify optional arguments to be passed to Tk when
	creating the menu.
	Tk's "menu add" command returns an empty string. Save the
	menu's index in the parent instead. This is what all
	the menu subcommands want.
@
text
@d537 1
a537 1
    $Tool add label addr $address "Address" -width 10 -relief sunken \
d1172 8
a1179 1
    $Tool itemconfigure addr -text $address -font src-font
@


1.11
log
@	* library/srcbar.itcl (create_trace_buttons): Fix
	syntax errors.

	* library/tracedlg.tcl: Update to work with Itcl3.0
	and ManagedWin.

	* library/actiondlg.tcl: Update to work with Itcl3.0
	and ManagedWin.
	(build_win): Use iwidgets scrolled listbox instead
	of the tix one.
@
text
@d87 18
d143 2
a144 1
  #  METHOD:  create_file_menu - Creates the standard file menu. 
d146 2
a147 3
  
  private method create_file_menu {} {
    global enable_external_editor tcl_platform
d149 2
a150 1
    $Menu add menubutton file "File" 0
d160 5
d166 1
a166 1
      "_close_file" -underline 0 -accelerator "Ctrl+W"
d206 10
@


1.10
log
@	* library/srcbar.itcl (constructor): Set the toolbar's initial
	state.
@
text
@d562 1
a562 1
      set command $Tool add button
d564 1
a564 1
      set command $Tool create
d567 1
a567 1
    $command tfindstart Trace {tfind_cmd "tfind start"} "First Hit <F>" \
d570 1
a570 1
    $command tfind Trace {tfind_cmd tfind} "Next Hit <N>" -image next_hit_img
d572 1
a572 1
    $command tfindprev Trace {tfind_cmd "tfind -"} "Previous Hit <P>" \
d575 1
a575 1
    $command tfindline Trace {tfind_cmd "tfind line"} "Next Line Hit <L>" \
d578 1
a578 1
    $command tfindtp Trace { tfind_cmd "tfind tracepoint"} \
@


1.9
log
@	* library/interface.tcl (gdb_idle_hook): Mark as deprecated.
	(gdbtk_idle): Dispatch an IdleEvent. gdb_idle_hook is gone.
	* library/ehandler.ith (idle): New event handler.
	* library/gdbevent.ith (IdleEvent): New event.
	* library/console.ith (idle): Match event handler definition.
	* library/console.itb (idle): Ditto.
	(constructor): Remove gdb_idle_hook.
	(destructor): Ditto.
	* library/kod.ith (idle): Match event handler definition.
	* library/kod.itb (idle): Ditto.
	(constructor): Remove gdb_idle_hook.
	(destructor): Ditto.
	* library/memwin.ith (idle): Match event handler definition.
	* library/memwin.itb (idle): Ditto.
	(constructor): Remove gdb_idle_hook.
	(destructor): Ditto.
	* library/pluginwin.itcl (stopped): Rename to "idle" and
	match event handler definition.
	Fix misleading comments.
	* library/process.ith (idle): Match event handler definition.
	* library/process.itb (idle): Ditto.
	(constructor): Remove gdb_idle_hook.
	(destructor): Ditto.
	* library/regwin.ith (idle): Match event handler definition.
	* library/regwin.itb (idle): Ditto.
	(constructor): Remove gdb_idle_hook.
	(destructor): Ditto.
	* library/srcbar.itcl (idle): New method.
	(constructor): Remove gdb_idle_hook.
	(destructor): Ditto.
	* library/srcwin.ith (idle): Match event handler definition.
	* library/srcwin.itb (idle): Ditto.
	(constructor): Remove gdb_idle_hook.
	(destructor): Ditto.
	* library/stackwin.ith (idle): Match event handler definition.
	* library/stackwin.itb (idle): Ditto.
	(constructor): Remove gdb_idle_hook.
	(destructor): Ditto.
	* library/variables.tcl (idle): Match event handler definition.
	(constructor): Remove gdb_idle_hook.
	(destructor): Ditto.
	* library/plugins/rhabout/rhabout.itcl (stopped): Rename
	to "idle" and match new event handler definition.
	* library/tclIndex: Regenerated.
@
text
@d67 3
@


1.8
log
@	* library/interface.tcl (gdb_busy_hook): Deprecate.
	(gdbtk_busy): Create and dispatch a BusyEvent instead
	of running hooks.
	* library/ehandler.ith (busy): New event handler.
	* library/gdbevent.ith (BusyEvent): New event class.
	* library/console.ith: Inherit from GDBEventHandler.
	(busy): Match event handler definition.
	* library/console.itb (busy): Ditto.
	(constructor): Remove gdb_busy_event.
	(destructor): Ditto.
	* library/kod.ith (busy): Match event handler definition.
	* library/kod.itb (busy): Ditto.
	(constructor): Remove gdb_busy_hook.
	(destructor): Ditto.
	* library/memwin.ith (busy): Match event handler definition.
	* library/memwin.itb (busy): Ditto.
	(constructor): Remove gdb_busy_hook.
	(destructor): Ditto.
	* library/pluginwin.itcl (running): Rename to "busy" and
	match event handler definition.
	(consturctor): Remove gdb_busy_hook.
	(destructor): Ditto.
	* library/process.ith (busy): Match event handler definition.
	* library/process.itb (busy): Ditto.
	(constructor): Remove gdb_busy_hook.
	(destructor): Ditto.
	* library/regwin.ith (busy): Match event handler definition.
	* library/regwin.itb (busy): Ditto.
	(constructor): Remove gdb_busy_hook.
	(destructor): Ditto.
	* library/srcbar.itcl (constructor): Remove gdb_busy_hook.
	(destructor): Ditto.
	(busy): New method.
	* library/srcwin.ith (busy): Match event handler definition.
	* library/srcwin.itb (busy): Ditto.
	Only do the "busy" stuff if do_updates is set.
	(toggle_updates): Remove gdb_busy_hook.
	(constructor): Ditto.
	(destructor): Ditto.
	* library/stackwin.ith (busy): Match event handler definition.
	* library/stackwin.itb (busy): Ditto.
	(constructor): Remove gdb_busy_hook.
	(destructor): Ditto.
	* library/variables.tcl (constructor): Ditto.
	(destructor): Ditto.
	(disable_ui): Rename to "busy" and match event handler
	definition.
	* library/plugins/rhabout/rhabout.itcl (running): Rename
	to "busy" and match new event handler definition.
	* library/tclIndex: Regenerated.
@
text
@a67 1
    add_hook gdb_idle_hook "$this enable_ui 1"
a78 1
    remove_hook gdb_idle_hook "$this enable_ui 1"
d1074 7
@


1.7
log
@	* library/interface.tcl (gdbtk_tcl_file_changed): Handle
	the case of empty-string files, sent by gdb when the
	user requests to reset the file.
	(_close_file): New proc to deal with closing an exe.
	* library/srcbar.itcl (create_file_menu): Add "Close" menu
	option.
	(create_view_menu): Change key binding for Watch Window to
	Ctrl+T to accomodate "Close" going to Ctrl+W.
	* library/srctextwin.itb (config_win): Update key binding
	for Watch Window.
	Add key binding for Close.
	(do_key): Add "close".
	(_clear_cache): Finally implement. I think this works now.
@
text
@a68 1
    add_hook gdb_busy_hook "$this enable_ui 0"
a80 1
    remove_hook gdb_busy_hook "$this enable_ui 0"
d1069 7
@


1.6
log
@Other half of SetVariableEvent:

	* library/srctextwin.ith (handle_set_hook): Rename to set_variable.
	* library/srctextwin.itb (set_variable): Handle SetVariableEvent.
	(constructor): Remove gdb_set_hook.
	(destructor): Ditto.
	* library/srcbar.itcl: Inherit from GDBEventHandler.
	(set_hook): Rename to set_variable and handle SetVariableEvent.
	(constructor): Remove gdb_set_hook.
	(destructor): Ditto.
	* library/regwin.ith (handle_set_hook): Renamed to set_variable.
	* library/regwin.itb (set_variable): Handle SetVariableEvent.
	(constructor): Remove gdb_set_hook.
	(destructor): Ditto.
	* library/kod.ith (set_os): Renamed to "set_variable".
	* library/kod.itb (set_variable): Handle SetVariableEvent.
	(constructor): Remove gdb_set_hook.
	(destructor): Ditto.
	* library/tclIndex: Regenerated.
@
text
@d142 3
d272 1
a272 1
      -underline 0 -accelerator "Ctrl+W" 
@


1.5
log
@2001-02-08  Fernando Nasser  <fnasser@@redhat.com>

	From 2001-02-06  Martin Hunt  <hunt@@redhat.com>
	* library/debugwin.itb: Change window name to "Insight Debug"
	* library/embeddedwin.ith: Fix debug messages.
	* library/locals.tcl: Ditto.
	* library/watch.tcl (postMenu): Ditto.
	* library/variables.tcl: Ditto.
	* library/interface.tcl: Ditto.
	* library/regwin.itb: Ditto.
	* library/gdbwin.ith: Ditto.
	* library/srcbar.itcl: Ditto.
@
text
@d32 1
a32 1
  inherit itk::Widget
a70 1
    add_hook gdb_set_hook "$this set_hook"
a83 1
    remove_hook gdb_set_hook "$this set_hook"
d805 1
a805 1
  #  METHOD:  set_hook - run when user enters a `set' command.
d810 3
a812 1
  method set_hook {varname value} {
@


1.4
log
@2001-02-01  Fernando Nasser  <fnasser@@redhat.com>

	* library/gdbtoolbar.itcl (add): New method.  Emulate the style of the
	toolbar iwidget commands.
	(toolbar_show): Old name.
        (show): New name.
	(toolbar_create_button): Old name.
        (create): New name.
	(toolbar_configure_button): Old name.
        (itemconfigure): New name.
        (toolbar_bind_button): Old name.
        (itembind): New name.
        (toolbar_set_button_balloon): Old name.
        (itemballoon): New name.
        (toolbar_add_button): Make private.
        (toolbar_add_label): Ditto.
        (toolbar_add_button_separator): Ditto.
	(toolbar_remove_button): Ditto.
	(tollbar_insert_button): Ditto.
	* library/srcbar.itcl: Adjust to the above syntax.
	* library/plugins/rhabout/rhabout.itcl: Ditto.
@
text
@d692 1
a692 1
    dbug W $runstop
d1139 1
a1139 1
    dbug W "configuring runstop $runstop"
@


1.3
log
@2001-02-01  Fernando Nasser  <fnasser@@redhat.com>

	* library/gdbmenubar.itcl (constructor): Remove unused code.
	(add): New method.  Emulate the style of the menubar iwidget commands.
	(menubar_show): Old name.
	(show): New name.
	(menubar_menu_exists): Old name.
	(exists): New name.
	(menubar_clear_menu): Old name.
	(clear): New name.
	(menubar_delete_menu): Old name.
        (delete): New name.
	(menubar_new_menu): Make private.  Does not return anything.
	(menubar_add_menu_command): Make private.
	(menubar_add_menu_separator): Ditto.
	(menubar_change_menu_state): Ditto.
	* library/srcbar.itcl: Adjust to the above syntax.
	* library/plugins/plugins.tcl: Ditto.
	* library/plugins/rhabout/rhabout.itcl: Ditto.
@
text
@d62 1
a62 1
    $Tool toolbar_show
d453 1
a453 1
    $Tool toolbar_add_button stop None {} {}
d457 1
a457 1
      $Tool toolbar_add_button tstop Control \
d461 1
a461 1
      $Tool toolbar_add_button view Other [list $this set_control_mode 1] \
d464 1
a464 1
      $Tool toolbar_add_button_separator
d482 1
a482 1
    $Tool toolbar_add_button_separator
d487 3
a489 3
    $Tool toolbar_bind_button reg   <Button-3> "ManagedWin::open RegWin -force"
    $Tool toolbar_bind_button mem   <Button-3> "ManagedWin::open MemWin -force"
    $Tool toolbar_bind_button watch <Button-3> \
d491 1
a491 1
    $Tool toolbar_bind_button vars  <Button-3> \
d494 1
a494 1
    $Tool toolbar_add_button_separator
d497 1
a497 1
      $Tool toolbar_add_button edit Other [code $source edit] "Edit Source" \
d500 1
a500 1
      $Tool toolbar_add_button_separator
d503 1
a503 1
    $Tool toolbar_add_label addr $address "Address" -width 10 -relief sunken \
d506 1
a506 1
    $Tool toolbar_add_label line $line "Line Number" -width 6 -relief sunken \
d527 1
a527 1
    $Tool toolbar_add_button step Control [code $source inferior step] \
d530 1
a530 1
    $Tool toolbar_add_button next Control [code $source inferior next] \
d533 1
a533 1
    $Tool toolbar_add_button finish Control [code $source inferior finish] \
d536 1
a536 1
    $Tool toolbar_add_button continue Control [code $source inferior continue] \
d541 1
a541 1
    $Tool toolbar_add_button_separator
d543 1
a543 1
    $Tool toolbar_add_button stepi Control [code $source inferior stepi] \
d546 1
a546 1
    $Tool toolbar_add_button nexti Control [code $source inferior nexti] \
d562 1
a562 1
      set command $Tool toolbar_add_button
d564 1
a564 1
      set command $Tool toolbar_create_button
d589 1
a589 1
    $Tool toolbar_add_button reg Other {ManagedWin::open RegWin} \
d592 1
a592 1
    $Tool toolbar_add_button mem Other {ManagedWin::open MemWin} \
d595 1
a595 1
    $Tool toolbar_add_button stack Other {ManagedWin::open StackWin} \
d598 1
a598 1
    $Tool toolbar_add_button watch Other {ManagedWin::open WatchWin} \
d601 1
a601 1
    $Tool toolbar_add_button vars Other {ManagedWin::open LocalsWin} \
d605 1
a605 1
      $Tool toolbar_add_button bp Other {ManagedWin::open BpWin} \
d610 1
a610 1
      $Tool toolbar_add_button tp Other \
d614 1
a614 1
      $Tool toolbar_add_button tdump Trace {ManagedWin::open TdumpWin} \
d618 1
a618 1
    $Tool toolbar_add_button con Other {ManagedWin::open Console} \
d628 1
a628 1
    $Tool toolbar_add_button down {Trace Control} \
d632 1
a632 1
    $Tool toolbar_add_button up {Trace Control} \
d636 1
a636 1
    $Tool toolbar_add_button bottom {Trace Control} \
d696 1
a696 1
	$Tool toolbar_configure_button stop -state disabled
d699 1
a699 1
	$Tool toolbar_configure_button stop -state normal -image stop_img \
d701 1
a701 1
	$Tool toolbar_set_button_balloon stop "Stop"
d704 1
a704 1
	$Tool toolbar_configure_button stop -state normal -image stop_img \
d706 1
a706 1
	$Tool toolbar_set_button_balloon stop "Stop"
d709 1
a709 1
	$Tool toolbar_configure_button stop -state normal -image run_img \
d711 1
a711 1
	$Tool toolbar_set_button_balloon stop "Run (R)"
d734 2
a735 2
      $Tool toolbar_configure_button stepi -state $state
      $Tool toolbar_configure_button nexti -state $state
d773 1
a773 1
      $Tool toolbar_configure_button view -image run_expt_img \
d775 1
a775 1
      $Tool toolbar_set_button_balloon view "Switch to Control mode"
d785 1
a785 1
      $Tool toolbar_configure_button view -image watch_movie_img \
d787 1
a787 1
      $Tool toolbar_set_button_balloon view "Switch to Browse mode"
d1047 2
a1048 2
        $Tool toolbar_configure_button tstop -image Movie_off_img
        $Tool toolbar_set_button_balloon tstop "End Collection"
d1063 2
a1064 2
        $Tool toolbar_configure_button tstop -image Movie_on_img
        $Tool toolbar_set_button_balloon tstop "Start Collection"
d1122 1
a1122 1
    $Tool toolbar_configure_button addr -text $address -font src-font
d1127 1
a1127 1
    $Tool toolbar_configure_button line -text $line
@


1.2
log
@2001-01-28  Fernando Nasser  <fnasser@@redhat.com>

	* library/main.tcl: Add plugin subdirectory, if existent, to auto_path.
	* library/srcbar.itcl (create_plugin_menu): New method.  Create a pull
	down menu for plugins if there are any for this target configuration.
	(create_menu_items): Invoke the new method above.
@
text
@d52 1
a52 1
      $Menu menubar_show
d134 1
a134 1
    $Menu menubar_new_menu file "File" 0
d137 1
a137 1
      $Menu menubar_add_menu_command None "Edit Source" \
d141 1
a141 1
    $Menu menubar_add_menu_command Other "Open..."  \
d144 1
a144 1
    $Menu menubar_add_menu_command Other "Source..." \
d149 1
a149 1
      $Menu menubar_add_menu_separator
d152 1
a152 1
	$Menu menubar_add_menu_command Other "$i $item" \
d159 1
a159 1
    $Menu menubar_add_menu_separator
d162 1
a162 1
      $Menu menubar_add_menu_command None "Page Setup..." \
d170 1
a170 1
    $Menu menubar_add_menu_command None "Print Source..." \
d174 1
a174 1
    $Menu menubar_add_menu_separator
d176 1
a176 1
    $Menu menubar_add_menu_command Other "Target Settings..." \
d179 1
a179 1
    $Menu menubar_add_menu_separator
d181 1
a181 1
    $Menu menubar_add_menu_command None "Exit" gdbtk_quit -underline 1
d191 2
a192 2
    if {![$Menu menubar_menu_exists Run]} {
      set run_menu [$Menu menubar_new_menu run "Run" 0]
d194 1
a194 1
      set run_menu [$Menu menubar_clear_menu Run]
d205 1
a205 1
	$Menu menubar_add_menu_command Attach "Attach to process" \
d210 1
a210 1
      $Menu menubar_add_menu_command Other "Connect to target" \
d216 1
a216 1
	$Menu menubar_add_menu_command Other "Download" Download::download_it \
d219 1
a219 1
      $Menu menubar_add_menu_command Other "Run" [code $source inferior run] \
d225 1
a225 1
	$Menu menubar_add_menu_command Detach "Detach" \
d230 1
a230 1
      $Menu menubar_add_menu_command Other "Disconnect"  \
d235 2
a236 2
      $Menu menubar_add_menu_separator
      $Menu menubar_add_menu_command Control "Kill" \
d242 1
a242 1
      $Menu menubar_add_menu_separator 
d244 1
a244 1
      $Menu menubar_add_menu_command Other "Start collection" "$this do_tstop" \
d247 1
a247 1
      $Menu menubar_add_menu_command Other "Stop collection" "$this do_tstop" \
d258 1
a258 1
    $Menu menubar_new_menu view "View" 0
d260 1
a260 1
    $Menu menubar_add_menu_command Other "Stack" {ManagedWin::open StackWin} \
d263 1
a263 1
    $Menu menubar_add_menu_command Other "Registers" {ManagedWin::open RegWin} \
d266 1
a266 1
    $Menu menubar_add_menu_command Other "Memory" {ManagedWin::open MemWin} \
d269 1
a269 1
    $Menu menubar_add_menu_command Other "Watch Expressions" \
d272 1
a272 1
    $Menu menubar_add_menu_command Other "Local Variables" \
d277 1
a277 1
      $Menu menubar_add_menu_command Other "Breakpoints" \
d283 1
a283 1
      $Menu menubar_add_menu_command Other "Tracepoints" \
d286 1
a286 1
      $Menu menubar_add_menu_command Other "Tdump" {ManagedWin::open TdumpWin} \
d290 1
a290 1
    $Menu menubar_add_menu_command Other "Console" {ManagedWin::open Console} \
d293 1
a293 1
    $Menu menubar_add_menu_command Other "Function Browser" \
d296 1
a296 1
    $Menu menubar_add_menu_command Other "Thread List" \
d300 2
a301 2
      $Menu menubar_add_menu_separator
      $Menu menubar_add_menu_command Other "Debug Window" \
d313 1
a313 1
    $Menu menubar_new_menu cntrl "Control" 0
d315 1
a315 1
    $Menu menubar_add_menu_command Control "Step" [code $source inferior step] \
d318 1
a318 1
    $Menu menubar_add_menu_command Control "Next" [code $source inferior next] \
d321 1
a321 1
    $Menu menubar_add_menu_command Control "Finish" \
d325 1
a325 1
    $Menu menubar_add_menu_command Control "Continue" \
d329 2
a330 2
    $Menu menubar_add_menu_separator
    $Menu menubar_add_menu_command Control "Step Asm Inst" \
d334 1
a334 1
    $Menu menubar_add_menu_command Control "Next Asm Inst" \
d338 2
a339 2
    # $Menu menubar_add_menu_separator
    # $Menu menubar_add_menu_command Other "Automatic Step" auto_step
d348 1
a348 1
    $Menu menubar_new_menu trace "Trace" 0
d350 1
a350 1
    $Menu menubar_add_menu_command Other "Save Trace Commands..." \
d354 1
a354 1
    $Menu menubar_add_menu_separator
d356 1
a356 1
    $Menu menubar_add_menu_command Trace "Next Hit" {tfind_cmd tfind} \
d359 1
a359 1
    $Menu menubar_add_menu_command Trace "Previous Hit" {tfind_cmd "tfind -"} \
d362 1
a362 1
    $Menu menubar_add_menu_command Trace "First Hit" {tfind_cmd "tfind start"} \
d365 1
a365 1
    $Menu menubar_add_menu_command Trace "Next Line Hit" \
d369 1
a369 1
    $Menu menubar_add_menu_command Trace "Next Hit Here" \
d373 2
a374 2
    $Menu menubar_add_menu_separator
    $Menu menubar_add_menu_command Trace "Tfind Line..." \
d378 1
a378 1
    $Menu menubar_add_menu_command Trace "Tfind PC..." \
d382 1
a382 1
    $Menu menubar_add_menu_command Trace "Tfind Tracepoint..." \
d386 1
a386 1
    $Menu menubar_add_menu_command Trace "Tfind Frame..." \
d398 1
a398 1
      $Menu menubar_new_menu plugin "PlugIn" 4
d405 1
a405 1
        $Menu menubar_delete_menu plugin
d415 1
a415 1
    $Menu menubar_new_menu pref "Preferences" 0
d417 1
a417 1
    $Menu menubar_add_menu_command Other "Global..." \
d420 1
a420 1
    $Menu menubar_add_menu_command Other "Source..." \
d429 2
a430 2
    $Menu menubar_new_menu help "Help" 0
    $Menu menubar_add_menu_command Other "Help Topics" \
d433 2
a434 2
    $Menu menubar_add_menu_separator
    $Menu menubar_add_menu_command Other "About GDB..." \
d839 1
a839 1
	  $Menu menubar_add_menu_command Other $title \
@


1.1
log
@2001-01-25  Fernando Nasser  <fnasser@@redhat.com>

	* library/srcbar.itcl: New file. Implement SrcBar, a menu and toolbar
	for the Source Window (code previously in srcmenubar.itcl and
	srctoolbar.itcl).
	* library/srcmenubar.itcl: Remove obsolete file.
	* library/srctoolbar.itcl: Remove obsolete file.
	* library/srcbar.tcl: Remove obsolete file.
        * library/srcwin.itb (_build_win): Use SrcBar.
	* library/tclIndex: Regenerate.
@
text
@d118 2
d389 19
@

