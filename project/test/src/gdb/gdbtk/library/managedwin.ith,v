head	1.9;
access;
symbols
	insight_7_6-2013-04-10-branchpoint:1.9
	gdb_7_6-branch:1.9.0.22
	gdb_7_5-branch:1.9.0.20
	gdb_7_4-branch:1.9.0.18
	gdb_7_3-branch:1.9.0.16
	gdb_7_1-branch:1.9.0.14
	gdb_7_0-branch:1.9.0.12
	arc-sim-20090309:1.9
	arc-insight_6_8-branch:1.9.0.10
	arc-insight_6_8-branchpoint:1.9
	insight_6_8-branch:1.9.0.8
	insight_6_8-branchpoint:1.9
	gdb_6_8-branch:1.9.0.6
	insight_6_6-20070208-release:1.9
	gdb_6_6-branch:1.9.0.4
	gdb_6_6-2006-11-15-branchpoint:1.9
	insight_6_5-20061003-release:1.9
	gdb_6_5-branch:1.9.0.2
	gdb_6_5-2006-05-14-branchpoint:1.9
	gdb-csl-gxxpro-6_3-branch:1.8.0.4
	gdb-csl-gxxpro-6_3-branchpoint:1.8
	gdb_6_4-branch:1.8.0.2
	gdb_6_4-2005-11-01-branchpoint:1.8
	gdb_6_1-2004-04-05-release:1.7
	gdb_6_1-branch:1.7.0.4
	gdb_6_1-2004-03-01-gmt-branchpoint:1.7
	gdb_6_0-2003-10-04-release:1.7
	gdb_6_0-branch:1.7.0.2
	gdb_6_0-2003-06-23-branchpoint:1.7
	gdb_5_3-2002-12-12-release:1.6
	gdb_5_3-branch:1.6.0.2
	gdb_5_3-2002-09-04-branchpoint:1.6
	gdb_5_2_1-2002-07-23-release:1.5
	gdb_5_2-2002-04-29-release:1.5
	gdb_5_2-branch:1.5.0.10
	gdb_5_2-2002-03-03-branchpoint:1.5
	gdb_5_1_1-2002-01-24-release:1.5
	cygnus_cvs_20020108_pre:1.5
	gdb_5_1_0_1-2002-01-03-branch:1.5.0.8
	gdb_5_1_0_1-2002-01-03-branchpoint:1.5
	gdb_5_1-2001-11-21-release:1.5
	gdb_s390-2001-09-26-branch:1.5.0.6
	gdb_s390-2001-09-26-branchpoint:1.5
	gdb_5_1-2001-07-29-branch:1.5.0.4
	gdb_5_1-2001-07-29-branchpoint:1.5
	dberlin-typesystem-branch:1.5.0.2
	dberlin-typesystem-branchpoint:1.5
	insight-precleanup-2001-01-01:1.2
	gdb_5_0-2000-05-19-release:1.2
	gdb_4_18_2-2000-05-18-release:1.2
	gdb_4_95_1-2000-05-11-snapshot:1.2
	gdb_4_95_0-2000-04-27-snapshot:1.2
	gdb_5_0-2000-04-10-branch:1.2.0.2
	gdb_5_0-2000-04-10-branchpoint:1.2
	repo-unification-2000-02-06:1.1.1.1
	insight-2000-02-04:1.1.1.1
	SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.9
date	2005.12.23.18.26.50;	author eliz;	state Exp;
branches;
next	1.8;

1.8
date	2004.04.05.20.36.45;	author hunt;	state Exp;
branches;
next	1.7;

1.7
date	2002.10.15.21.19.51;	author hunt;	state Exp;
branches;
next	1.6;

1.6
date	2002.04.24.17.11.19;	author kseitz;	state Exp;
branches;
next	1.5;

1.5
date	2001.05.18.22.57.30;	author kseitz;	state Exp;
branches;
next	1.4;

1.4
date	2001.03.01.20.00.12;	author kseitz;	state Exp;
branches;
next	1.3;

1.3
date	2001.03.01.12.43.58;	author nsd;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.28.01.59.40;	author jingham;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.07.00.19.42;	author jsm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.07.00.19.42;	author jsm;	state Exp;
branches;
next	;


desc
@@


1.9
log
@	* library/attachdlg.itb:
	* library/actiondlg.tcl:
	* library/about.tcl:
	* library/ehandler.itb:
	* library/editor.tcl:
	* library/download.ith:
	* library/download.itb:
	* library/debugwin.ith:
	* library/debugwin.itb:
	* library/cspref.ith:
	* library/cspref.itb:
	* library/console.ith:
	* library/console.itb:
	* library/browserwin.ith:
	* library/browserwin.itb:
	* library/bpwin.ith:
	* library/bpwin.itb:
	* library/blockframe.ith:
	* library/managedwin.ith:
	* library/managedwin.itb:
	* library/main.tcl:
	* library/locals.tcl:
	* library/ipcpref.ith:
	* library/ipcpref.itb:
	* library/ipc.tcl:
	* library/interface.tcl:
	* library/helpviewer.tcl:
	* library/globalpref.ith:
	* library/globalpref.itb:
	* library/gdbwin.ith:
	* library/gdbtoolbar.itcl:
	* library/gdbmenubar.itcl:
	* library/gdbevent.ith:
	* library/gdbevent.itb:
	* library/embeddedwin.ith:
	* library/ehandler.ith:
	* library/srcwin.itb:
	* library/srctextwin.ith:
	* library/srctextwin.itb:
	* library/srcpref.ith:
	* library/srcpref.itb:
	* library/srcbar.itcl:
	* library/session.tcl:
	* library/regwin.ith:
	* library/regwin.itb:
	* library/process.ith:
	* library/process.itb:
	* library/prefs.tcl:
	* library/pluginwin.itcl:
	* library/modal.tcl:
	* library/memwin.ith:
	* library/memwin.itb:
	* library/mempref.ith:
	* library/mempref.itb:
	* library/watch.tcl:
	* library/watch.tcl:
	* library/warning.tcl:
	* library/vartree.ith:
	* library/vartree.itb:
	* library/util.tcl:
	* library/tracedlg.tcl:
	* library/toplevelwin.ith:
	* library/tfind_args.tcl:
	* library/tdump.tcl:
	* library/targetselection.ith:
	* library/targetselection.itb:
	* library/stackwin.ith:
	* library/stackwin.itb:
	* library/srcwin.ith:
@
text
@# Managed window class definition for GDBtk.
# Copyright (C) 1998, 1999, 2000, 2001 Red Hat, Inc.
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License (GPL) as published by
# the Free Software Foundation; either version 2 of the License, or (at
# your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.


itcl::class ManagedWin {
  inherit itk::Widget
  
  public {
    method constructor {args}
    method destructor {}

    method reconfig {} {}
    method destroy_toplevel {}
    method quit_if_last {} {return 1}
    method pickle {}
    method reveal {}
    method window_name {wname {iname ""}}
    proc window_instance {ins}

    proc find {win}
    proc open {class args}
    proc open_dlg {class args}
    proc init {}
    proc restart {}
    proc startup {}
    proc shutdown {}

    common win_instance ""
  }

  protected {
    # The Tk's toplevel window for this ManagedWin
    variable _top

    # Variable which holds the geometry of this window
    variable _geometry {}

    # this is the counter of TopLevelWins open
    # when it hits 0, exit.
    common numTopWins 0

    common _screenwidth
    common _screenheight

    method _freeze_me {}
    method _thaw_me {}

    # Should this window be reopened when we startup?
    method _ignore_on_save {} { return 0 }

    # Should this window's size be remembered?
    proc dont_remember_size {} { return 0 }
  }

  private {
    proc _create {class args}
    proc _open {class args}
    proc _make_icon_window {name {file "gdbtk_icon"}}
    variable _wname {}
    variable _iname {}
  }
}
@


1.8
log
@2004-04-05  Martin Hunt  <hunt@@redhat.com>

	* library/session.tcl: Make hostname and portname
	session-dependent. Add gdb_bg_num (the color
	scheme number) as a per-session variable.

	* library/prefs.tcl (pref_read): If color schemes are in use,
	set colors based on the current scheme.
	(pref_save): Add "bg" section.
	(pref_set_defaults): Define new variable gdb/use_color_schemes
	and define 16 default background colors.

	* library/managedwin.itb (ManagedWin::window_name): Append
	window "instance" string to window name.
	(ManagedWin::window_instance): Set window instance string.

	* library/debugwin.itb: Add a reconfig method to restore
	unique black textbackground, overriding color scheme.

	* library/csprefs.itb:
	* library/csprefs.ith: New files. Implement color scheme
	preferences.

	* library/util.tcl (set_bg_colors): New function.
	(r_setcolors): New function.

	* library/regwin.itb (_prefs_changed): Deleted.
	(reconfig): New function.  Updates tkTable color tags
	if color scheme changes.
	* library/regwin.ith: Update to reflect above changes.

	* library/srcbar.itcl (create_pref_menu): Add pulldown
	menus for "Edit Color Schemes..." and "Use Color Schemes".
	(reconfig): Fix up menu items for color schemes.

	* library/globalpref.itb (_init_var): Add
	gdb/use_color_schemes to variable list.
	(_build_win): Add a checkbutton to enable/disable
	color schemes.

	* library/gdbmenubar.itcl (menubar_add_cascade): Add a class
	argument so cascade menus can be managed by class too.

	* library/interface.tcl (gdbtk_tcl_fputs): Check for
	existence of gdbtk_state(console).  Stops annoying error
	messages.
	(gdbtk_tcl_fputs_error): Ditto.
	(gdbtk_tcl_fputs_log): Ditto.
@
text
@d2 1
a2 1
# Copyright 1998, 1999, 2000, 2001 Red Hat, Inc.
@


1.7
log
@2002-10-15  Martin M. Hunt  <hunt@@redhat.com>

	* library/* : auto_mkindex cannot rebuild
	tclIndex because it does not recognize the namespace
	import in main.tcl.  To get it to work again, rename the
	following:
		body -> itcl::body
		configbody -> itcl::configbody
		class -> itcl::class
@
text
@d28 1
d37 2
d69 2
@


1.6
log
@        * library/managedwin.ith (_ignore_on_save): New protected method.
        * library/managedwin.itb (shutdown): If _ignore_on_save, don't
        save this window to the active window list in the preferences
        file.
        * library/debugwin.ith (DebugWin::_ignore_on_save): Don't save
        this window to preferences active list.
        (DebugWinDOpts::_ignore_on_save): Likewise.
        * library/pluginwin.itcl (_ignore_on_save): Likewise.
        * library/download.ith (_ignore_on_save): Likewise.
@
text
@d15 1
a15 1
class ManagedWin {
@


1.5
log
@	* library/managedwin.ith (_geometry): Use a protected variable
	instead of a global from ManagedWin::reveal.
	(open): Make arg list reflect managedwin.itb.
	* library/managedwin.itb (window_name): Use class variable
	_top instead of recomputing the toplevel every time.
	(reveal): Ditto.
	Use class variable "_geometry" instead of global variable.
	(shutdown): Do not save ModalDialogs.
	(_create): If centering the new window, use libgui's
	center_window to do it.
@
text
@d55 4
@


1.4
log
@Cleanup of managedwin.ith and managedwin.itb

	* library/managedwin.ith: Move all implementations into
	managedwin.itb.
	(public variable nosize): Delete.
	(freeze_me, thaw_me, make_icon_window): Prepend with
	underscore to remind people these are not public
	methods/procs.
	(protected variable Top, screenwidth, screenheight): Ditto
	for these variables.
	(protected common manage_active, mainwindow): Delete.
	(enable): Delete.
	(reconfig): Add empty body.
	* library/managedwin.itb: Move all implementations from
	header here.
	Update all references to renamed variables/methods/procs.
	(destructor, restart, shutdown, _open, find) Let
	Itcl tell us which ManagedWins we have lying around.
	(enable): Delete.
	(reconfig): It's empty. Moved empty body to header.
@
text
@d30 1
a30 1
    proc open {args}
d41 3
@


1.3
log
@	* library/managedwin.itb (ManagedWin::shutdown): Save each
	managed window's geometry as a preference.
	* library/managedwin.ith (ManagedWin::destructor): Don't save
	managed windows' geometries as preferences.
@
text
@d2 1
a2 1
# Copyright 1998, 1999 Cygnus Solutions
d19 4
a22 1
    method reconfig {}
a24 1
    method enable {on}
a28 2
    variable nosize 0
    
d39 2
a40 18
    proc dont_remember_size {} {
      return 0
    }
    method freeze_me {}
    method thaw_me {}

    variable Top
  }

  private {
    proc _create {class args}
    proc _open {class args}
    proc make_icon_window {name {file "gdbtk_icon"}}
  }

  protected {
    # manage_active - list of active window objects 
    common manage_active ""
d46 7
a52 3
    common screenwidth
    common screenheight
    common mainwindow
d55 4
a58 5
  constructor {args} {
    debug "$this args=$args"
    lappend manage_active $this
    set Top [winfo toplevel $itk_interior]
    
a59 22

  destructor {

    set infoList [after info]

    # remove object from list
    set i [lsearch -exact $manage_active $this]
    if {$i != -1} {
      set manage_active [lreplace $manage_active $i $i]
    }

    # If no toplevels remain, quit.  However, check the quit_if_last
    # flag since we might be doing something like displaying a 
    # splash screen at startup...

    if {!$numTopWins && [quit_if_last]} {
      gdb_force_quit
    } else {
      destroy_toplevel
    }
 }

@


1.2
log
@Reintroduce the code that saves away window state, and restores it
when you restart gdbtk.

2000-03-27  James Ingham  <jingham@@leda.cygnus.com>

	* interface.tcl (gdbtk_quit): Let the window manager store away
	the list of active windows before quitting.
	(gdbtk_tcl_preloop): Open all the windows that were active in the
	former session.
	* prefs.tcl (pref_set_defaults): Set the default value of the
	"gdb/window/active" pref.  Stores the list of active windows.
	* managedwin.itb (ManagedWin::pickle): New method - store away
	instructions to recreate this window.
	(ManagedWin::shutdown): New Method - run through the active windows
	pickling them all.
	(ManagedWin::startup): Restore all the saved active windows.
	* managedwin.ith: Declare pickle, shutdown & startup.
	* tclIndex: regenerate.
@
text
@a83 4
    # save geometry
    set g [wm geometry [winfo toplevel [namespace tail $this]]]
    pref setd gdb/geometry/[namespace tail $this] $g

a88 6
      # save window positions of remaining windows
      foreach obj $manage_active {
	set g [wm geometry [winfo toplevel [namespace tail $obj]]]
	pref setd gdb/geometry/[namespace tail $obj] $g
      }
      pref_save
@


1.1
log
@Initial revision
@
text
@d23 1
d34 2
@


1.1.1.1
log
@import insight-2000-02-04 snapshot (2nd try)
@
text
@@
