head	1.17;
access;
symbols
	insight_7_6-2013-04-10-branchpoint:1.17
	gdb_7_6-branch:1.17.0.4
	gdb_7_5-branch:1.17.0.2
	gdb_7_4-branch:1.16.0.8
	gdb_7_3-branch:1.16.0.6
	gdb_7_1-branch:1.16.0.4
	gdb_7_0-branch:1.16.0.2
	arc-sim-20090309:1.15
	arc-insight_6_8-branch:1.15.0.6
	arc-insight_6_8-branchpoint:1.15
	insight_6_8-branch:1.15.0.4
	insight_6_8-branchpoint:1.15
	gdb_6_8-branch:1.15.0.2
	insight_6_6-20070208-release:1.14
	gdb_6_6-branch:1.14.0.4
	gdb_6_6-2006-11-15-branchpoint:1.14
	insight_6_5-20061003-release:1.14
	gdb_6_5-branch:1.14.0.2
	gdb_6_5-2006-05-14-branchpoint:1.14
	gdb-csl-gxxpro-6_3-branch:1.13.0.4
	gdb-csl-gxxpro-6_3-branchpoint:1.13
	gdb_6_4-branch:1.13.0.2
	gdb_6_4-2005-11-01-branchpoint:1.13
	gdb_6_1-2004-04-05-release:1.12
	gdb_6_1-branch:1.12.0.4
	gdb_6_1-2004-03-01-gmt-branchpoint:1.12
	gdb_6_0-2003-10-04-release:1.12
	gdb_6_0-branch:1.12.0.2
	gdb_6_0-2003-06-23-branchpoint:1.12
	gdb_5_3-2002-12-12-release:1.8
	gdb_5_3-branch:1.8.0.2
	gdb_5_3-2002-09-04-branchpoint:1.8
	gdb_5_2_1-2002-07-23-release:1.6
	gdb_5_2-2002-04-29-release:1.6
	gdb_5_2-branch:1.6.0.2
	gdb_5_2-2002-03-03-branchpoint:1.6
	gdb_5_1_1-2002-01-24-release:1.4
	cygnus_cvs_20020108_pre:1.6
	gdb_5_1_0_1-2002-01-03-branch:1.4.0.8
	gdb_5_1_0_1-2002-01-03-branchpoint:1.4
	gdb_5_1-2001-11-21-release:1.4
	gdb_s390-2001-09-26-branch:1.4.0.6
	gdb_s390-2001-09-26-branchpoint:1.4
	gdb_5_1-2001-07-29-branch:1.4.0.4
	gdb_5_1-2001-07-29-branchpoint:1.4
	dberlin-typesystem-branch:1.4.0.2
	dberlin-typesystem-branchpoint:1.4
	insight-precleanup-2001-01-01:1.2
	gdb_5_0-2000-05-19-release:1.1.1.1
	gdb_4_18_2-2000-05-18-release:1.1.1.1
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.1
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.1
	gdb_5_0-2000-04-10-branch:1.1.1.1.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1.1.1
	repo-unification-2000-02-06:1.1.1.1
	insight-2000-02-04:1.1.1.1
	SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.17
date	2012.03.30.08.35.28;	author rosch;	state Exp;
branches;
next	1.16;

1.16
date	2008.08.02.22.08.32;	author kseitz;	state Exp;
branches;
next	1.15;

1.15
date	2008.02.09.01.23.42;	author kseitz;	state Exp;
branches;
next	1.14;

1.14
date	2005.12.23.18.26.50;	author eliz;	state Exp;
branches;
next	1.13;

1.13
date	2004.04.05.20.36.42;	author hunt;	state Exp;
branches;
next	1.12;

1.12
date	2003.02.15.02.10.41;	author hunt;	state Exp;
branches;
next	1.11;

1.11
date	2003.02.04.07.43.32;	author hunt;	state Exp;
branches;
next	1.10;

1.10
date	2002.11.06.20.45.53;	author hunt;	state Exp;
branches;
next	1.9;

1.9
date	2002.10.15.21.19.51;	author hunt;	state Exp;
branches;
next	1.8;

1.8
date	2002.06.07.09.22.44;	author hunt;	state Exp;
branches;
next	1.7;

1.7
date	2002.03.05.22.22.19;	author hunt;	state Exp;
branches;
next	1.6;

1.6
date	2001.11.05.19.00.30;	author hunt;	state Exp;
branches;
next	1.5;

1.5
date	2001.08.16.18.55.50;	author kseitz;	state Exp;
branches;
next	1.4;

1.4
date	2001.06.05.21.59.54;	author hunt;	state Exp;
branches;
next	1.3;

1.3
date	2001.05.07.15.43.23;	author kseitz;	state Exp;
branches;
next	1.2;

1.2
date	2000.11.01.22.15.37;	author lsmith;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.07.00.19.42;	author jsm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.07.00.19.42;	author jsm;	state Exp;
branches;
next	;


desc
@@


1.17
log
@	* library/globalpref.itb: Updated Copyright to 1997-2012 Red Hat, Inc.
	(_build_win): Remove unneeded debug call. Fix packing of
	OK/Apply/Cancel buttons for newer tk versions. Small reformatting.
@
text
@# Global preference class implementation for Insight.
# Copyright (C) 1997-2012 Red Hat, Inc.
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License (GPL) as published by
# the Free Software Foundation; either version 2 of the License, or (at
# your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.


# ----------------------------------------------------------------------
# Implements Global preferences dialog
#
# ----------------------------------------------------------------------

# ------------------------------------------------------------------
#  METHOD:  _init - set up the tracing labels info
# ------------------------------------------------------------------
itcl::body GlobalPref::_init {} {
  if {$inited} {
    return
  }
  
  set inited 1
  
  array set tracing_labels {
    0 "Tracing features disabled"
    1 "Tracing features enabled"
    max_len 0
  }
  
  foreach elem [array names tracing_labels] {
    set len [string length $tracing_labels($elem)]
    set tracing_labels(max_len) \
      [expr $len > $tracing_labels(max_len) ? $len : $tracing_labels(max_len) ]
  }
}

# ------------------------------------------------------------------
#  METHOD:  init_var - initialize preference variables
# ------------------------------------------------------------------
itcl::body GlobalPref::_init_var {} {
  set vlist {gdb/ImageDir gdb/console/wrap gdb/mode gdb/use_icons gdb/compat gdb/use_color_schemes}

  foreach var $vlist {
    set _saved($var) [pref get $var]
    set _new($var) $_saved($var)
  }
}

# ------------------------------------------------------------------
#  METHOD:  constructor - create the Global Preferences object
# ------------------------------------------------------------------
itcl::body GlobalPref::constructor {args} {    
  window_name "Global Preferences"
  _init
  _init_var
  _build_win
  eval itk_initialize $args
}

# ------------------------------------------------------------------
#  METHOD:  destructor - destroy the Global Preferences object
# ------------------------------------------------------------------
itcl::body GlobalPref::destructor {} {
  foreach thunk $_fonts {
    font delete test-$thunk-font
  }
}

# ------------------------------------------------------------------
#  METHOD:  _build_win - build the dialog
# ------------------------------------------------------------------
itcl::body GlobalPref::_build_win {} {
  global gdbtk_platform GDBTK_LIBRARY
  frame $itk_interior.f
  frame $itk_interior.x
  set frame $itk_interior.f
  
  # Icons
  frame $frame.icons
  label $frame.icons.lab -text "Icons: "
  combobox::combobox $frame.icons.cb -editable 0 -maxheight 10\
    -command [code $this _change_icons] -bg $::Colors(textbg)
  
  # get list of icon directories
  set curdir [pwd]
  set _icondirlist ""
  cd $GDBTK_LIBRARY
  foreach foo [glob -- *] {
    if {[file isdirectory $foo] && [file exists [file join $foo "icons.txt"]]} {
      lappend _icondirlist $foo
    }
  }

  set width 14
  # load combobox
  foreach dir $_icondirlist {
    if {![string compare $dir $_saved(gdb/ImageDir)]} {
      set cdir 1
    } else {
      set cdir 0
    }
    set foo [file join $dir "icons.txt"]
    if {[catch {::open $foo r} fid]} {
      # failed
      dbug E "couldn't open $foo:$fid"
      if {$cdir} {$frame.icons.cb entryset "unknown icons"}
      $frame.icons.cb list insert end "unknown icons"
    } else {
      if {[gets $fid txt] >= 0} {
	if {$cdir} {$frame.icons.cb entryset $txt}
	if {[string length $txt] > $width} {set width [string length $txt]}
	$frame.icons.cb list insert end $txt
      } else {
	if {$cdir} {$frame.icons.cb entryset "unknown icons"}
	$frame.icons.cb list insert end "unknown icons"
      }
      close $fid
    }
  }
  $frame.icons.cb configure -width $width
  cd $curdir

  # searching for fixed font families take a long time
  # therefore, we cache the font names.  The font cache
  # can be saved in the init file. A way should be provided
  # to rescan the font list, without deleting the entry from the
  # init file.

  set font_cache [pref get gdb/font_cache]

  # get list of fonts, removing some that typically
  # are not useful or cause tk problems
  set fam [lremove [font families] "open look glyph"]
  set fam [lremove $fam "open look cursor"]
  set fam [lremove $fam "song ti"]
  set fam [lremove $fam "clearlyu"]
  set fam [lremove $fam "clearlyu alternate glyphs"]
  set fam [lremove $fam "clearlyu arabic extra"]
  set fam [lremove $fam "clearlyu ligature"]
  set fam [lremove $fam "clearlyu pua"]
  set fam [lremove $fam "fangsong ti"]
  set fam [lremove $fam "newspaper"]
  set fam [lremove $fam "palatino linotype"]
  set fam [lsort $fam]
  
  if {$font_cache == ""} {
    if {$gdbtk_platform(platform) == "unix"} {
      toplevel .c
      wm title .c "Scanning for fonts"
      message .c.m -width 3i -text "Scanning system for fonts\n\nPlease wait..." \
	-relief flat -padx 30 -pady 30 \
	-bg [pref get gdb/global_prefs/message_bg] \
	-fg [pref get gdb/global_prefs/message_fg]
      ::update
      pack .c.m
      focus .c
      ::raise .c
      ::update
    }

    foreach fn $fam {
      if {[font metrics [list $fn] -fixed] == 1} {
	lappend font_cache $fn
      }
    }
    pref set gdb/font_cache $font_cache
    if {[winfo exists .c]} { destroy .c }
  }
  
  set f [Labelledframe $frame.d]
  $f configure -text "Fonts"
  set f [$frame.d get_frame]

  _make_font_item $f fixed "Fixed Font:" $font_cache

  if {$gdbtk_platform(platform) != "windows"} {
    # Cannot change the windows menu font ourselves
    _make_font_item $f menu "Menu Font:" $fam
  }

  _make_font_item $f default "Default Font:" $fam
  _make_font_item $f status  "Status Bar Font:" $fam

  iwidgets::Labeledframe $frame.misc -labelpos nw -labeltext "Misc"
  set f [$frame.misc childsite]

  # This is the tracing preference
  set tracing_cb [pref get gdb/mode]
  if { ![info exists tracing_labels($tracing_cb)]} {
    dbug E "Got unknown mode value: $tracing_cb"
    set tracing_labels($tracing_cb) "Unknown gdb mode..."
  }

  checkbutton $f.tracing -variable [scope _new(gdb/mode)] \
    -text $tracing_labels($tracing_cb) \
    -command [code $this _toggle_tracing $f.tracing] \
    -width $tracing_labels(max_len) -anchor w

  # use_icons
  if {$gdbtk_platform(platform) == "unix"} {
    checkbutton $f.use_icons  \
      -text "Use builtin image as icon." -variable [scope _new(gdb/use_icons)]
  }

  # console wrap
  checkbutton $f.consolewrap -text "Wrap text in console window" \
    -variable [scope _new(gdb/console/wrap)]

  # colored backgrounds
  checkbutton $f.use_cs -text "Enable Color Schemes" \
    -variable [scope _new(gdb/use_color_schemes)]

  grid $f.tracing -sticky w -padx 5 -pady 5

  if {$gdbtk_platform(platform) == "unix"} {
    grid $f.use_icons -sticky w -padx 5 -pady 5
  }
  grid $f.consolewrap -sticky w -padx 5 -pady 5
  grid $f.use_cs -sticky w -padx 5 -pady 5

  if {$gdbtk_platform(platform) == "unix"} {
    # Compatibility frame
    iwidgets::Labeledframe $frame.compat -labelpos nw -labeltext "OS Compatibility"
    set fc [$frame.compat childsite]
    radiobutton $fc.0 -text "GNOME" -value "GNOME" -variable [scope _new(gdb/compat)]
    radiobutton $fc.1 -text "KDE" -value "KDE" -variable [scope _new(gdb/compat)]
    radiobutton $fc.2 -text "default" -value "default" -variable [scope _new(gdb/compat)]
    grid $fc.0 -sticky w -padx 5 -pady 5
    grid $fc.1 -sticky w -padx 5 -pady 5
    grid $fc.2 -sticky w -padx 5 -pady 5
    grid [label $fc.warn -text "Restart required for all\nchanges to take effect"] -sticky w
  }

  # pack it all
  pack $frame.icons.lab $frame.icons.cb -side left
  grid $frame.icons x -sticky w -pady 10
  grid $frame.d -columnspan 2 -sticky w
  if {$gdbtk_platform(platform) == "unix"} {
    grid $frame.compat $frame.misc -sticky we
  } else {
    grid $frame.misc x -sticky we
  }

  # make buttons
  button $itk_interior.x.ok -text OK -width 7 -underline 0 -command [code $this _ok]
  button $itk_interior.x.apply -text Apply -width 7 -underline 0 -command [code $this _apply]
  button $itk_interior.x.cancel -text Cancel -width 7 -underline 0 -command [code $this _cancel]
  standard_button_box $itk_interior.x
  pack $itk_interior.x -side left

  pack $itk_interior.x -fill x -padx 5 -pady 5 -side bottom
  pack $itk_interior.f -fill both -expand yes -padx 5 -pady 5

  bind $itk_interior.x.ok <Return> \
    "$itk_interior.x.ok flash; $itk_interior.x.ok invoke"
  focus $itk_interior.x.ok

  # We don't want the window flashing around as we change the fonts...

  ::update idletasks

  _resize_font_item_height
  pack propagate $itk_interior.f 0
}
# ------------------------------------------------------------------
#  PRIVATE METHOD:  _make_font_item
# ------------------------------------------------------------------
itcl::body GlobalPref::_make_font_item {f name label font_list} {
  
  # create ComboBox with font name
  lappend _fonts $name
  
  set _original($name,family) [font actual global/$name -family]
  set _original($name,size) [font actual global/$name -size]
  font create test-$name-font -family $_original($name,family) \
    -size $_original($name,size)
  label $f.${name}x -text $label

  combobox::combobox $f.${name}n -editable 0 -value $_original($name,family) \
    -command [code $this _change_font $name] -bg $::Colors(textbg)

  foreach a $font_list {
    $f.${name}n list insert end $a
  }
  
  itk_component add $name-size {
    iwidgets::spinint $f.${name}s -labeltext "Size:" -range {6 18} -step 1 \
      -fixed 2 -width 2 -textvariable [scope _size($name)] -wrap 0 \
      -increment [code $this _change_size up $name] \
      -decrement [code $this _change_size down $name] \
      -textbackground $::Colors(textbg)
  } {}
  label $f.${name}l -text ABCDEFabcdef0123456789 -font test-$name-font
  set _size($name) $_original($name,size)

  grid $f.${name}x $f.${name}n $f.${name}s $f.${name}l -sticky we -padx 5 -pady 5
  grid columnconfigure $f 3 -weight 1
}

# ------------------------------------------------------------------
#  PRIVATE METHOD:  _resize_font_item_height
# ------------------------------------------------------------------
itcl::body GlobalPref::_resize_font_item_height {} {
  foreach font $_fonts {
    set master [$itk_interior.f.d get_frame]
    set row [gridCGet $master.${font}l -row]
    grid rowconfigure $master $row -minsize [lindex [grid bbox $master 0 $row 3 $row ] 3]
  } 
}

# ------------------------------------------------------------------
#  PRIVATE METHOD:  _change_icons
# ------------------------------------------------------------------
itcl::body GlobalPref::_change_icons {w args} {
  set index [$w curselection]
  if {$index != ""} {
    set _new(gdb/ImageDir) [lindex $_icondirlist $index]
  }
}

# ------------------------------------------------------------------
#  NAME:         private method GlobalPref::_change_font
#  DESCRIPTION:  Change the given font's family
#
#  ARGUMENTS:
#                font           - the font whose family is to be
#                                 changed
#                stupid         - the comobox widget which changed
#                implementation - the new value of the combobox
#  RETURNS:      Nothing
#
#  NOTES:        The combobox has a really non-standard callback
#                mechanism: it always adds two args to the callback.
# ------------------------------------------------------------------
itcl::body GlobalPref::_change_font {font stupid implementation} {
  font configure test-$font-font -family $implementation
}

# ------------------------------------------------------------------
#  NAME:         private method GlobalPref::_change_size
#  DESCRIPTION:  Change the given font's size
#
#  ARGUMENTS:
#                direction  - the direction of the change (up/down)
#                font       - the font that is changing
#  RETURNS:      Nothing
#
#  NOTES:        See comments for purpose of "direction". Sigh.
# ------------------------------------------------------------------
itcl::body GlobalPref::_change_size {direction font} {

  # Almost as stupid as the comobox, the iwidgets::spinint class
  # will not treat its -increment and -decrement commands
  # as command callbacks. Instead it OVERRIDES all behavior.
  # Thus, we need to call the stupid spinint's callback.
  $itk_component($font-size) $direction
  font configure test-$font-font -size $_size($font)
}


itcl::body GlobalPref::_toggle_tracing {win} {
  debug
  $win configure -text $tracing_labels($_new(gdb/mode))
}

# ------------------------------------------------------------------
#  METHOD:  _ok - called to accept settings and close dialog
# ------------------------------------------------------------------
itcl::body GlobalPref::_ok {} {
  _apply 1
}

# ------------------------------------------------------------------
#  METHOD:  _apply - apply current settings to the screen
# ------------------------------------------------------------------
itcl::body GlobalPref::_apply {{deleteMe 0}} {
  debug
  set changed_something 0

  # If you are not destroying the window, then make sure to
  # propagate the geometry info from the font frame, so that changing 
  # the fonts IN the window don't cause some of the buttons to 
  # get obscured...

  if {!$deleteMe} {
    pack propagate $itk_interior.f 1
  }

  foreach thunk $_fonts {
    set font [font configure test-$thunk-font]
    if {[pref get global/font/$thunk] != $font} {
      pref set global/font/$thunk $font
    }
  }

  foreach var [array names _new] {
    if {$_new($var) != [pref get $var]} {
      debug "$var = $_new($var)"

      if {$var == "gdb/mode"} { 
	if {!$_new(gdb/mode)} { pref set gdb/B1_behavior 1 }
      } elseif {$var == "gdb/ImageDir"} {
	set ::gdb_ImageDir [file join $::GDBTK_LIBRARY $_new($var)]
      }
      pref set $var $_new($var)
      set changed_something 1
    }
  }

  if {$changed_something} {
    if {$deleteMe} { unpost }
    ManagedWin::restart
    return
  }
  if {$deleteMe} { 
    unpost 
  } else {
    after idle " 
      update idletasks
      [code $this _resize_font_item_height]
      pack propagate $itk_interior.f 0
    "
  }    
}

# ------------------------------------------------------------------
#  METHOD:  _cancel - forget current settings -- reset to original
#                    state and close preferences
# ------------------------------------------------------------------
itcl::body GlobalPref::_cancel {} {
  debug
  set changed_something 0

  # Reset fonts if different
  foreach thunk $_fonts {
    set family [font configure global/$thunk -family]
    set size   [font configure global/$thunk -size]
    if {$_original($thunk,family) != $family || $_original($thunk,size) != $size} {
      pref set global/font/$thunk \
	[list -family $_original($thunk,family) -size $_original($thunk,size)]
      set changed_something 1
    }
  }

  foreach var [array names _saved] {
    if {$_saved($var) != [pref get $var]} {
      debug "$var = $_saved($var)"

      if {$var == "gdb/mode"} { 
	if {!$_saved(gdb/mode)} { pref set gdb/B1_behavior 1 }
      } elseif {$var == "gdb/ImageDir"} {
	set ::gdb_ImageDir [file join $::GDBTK_LIBRARY $_saved($var)]
      }
      pref set $var $_saved($var)
      set changed_something 1
    }
  }

  if {$changed_something} {
    ManagedWin::restart
  }
  unpost
}

# ------------------------------------------------------------------
#  METHOD:  cancel - override modal dialog cancel method.
#                    The cancel method is actually called when
#		     the window is closed. Name needs fixed.
# ------------------------------------------------------------------
itcl::body GlobalPref::cancel {} {
  # when the window is closed, we want the preferences selected to
  # be applied.
  _apply 1
}
@


1.16
log
@        * generic/gdbtk-cmds.c: Don't include itcl.h.
        * generic/gdbtk-hooks.c: Likewise.
        * generic/gdbtk.c: Include tcl.h and tk.h instead of itcl.h
        and itk.h.
        (gdbtk_init): Rewrite to accommodate using a system-provided
        Tcl, Tk, Itcl, Itk.
        (gdbtk_source_start_file) [!_WIN32]: Don't call error() when
        we fail to source the start file. Just dump the message to stderr.
        Throw an exception indicating the failure.
        * library/ehandler.itb (GDBEventHander::dispatch): "itcl_info" is
        deprecated: use "itcl::find objects" instead.
        * library/managedwin.itb (window_instance): Ditto.
        (restart): Ditto.
        (shutdown): Ditto.
        (_open): Ditto.
        (find): Ditto.
        * library/globalpref.itb (_build_win): Don't pass config arguments
        for libgui widgets to the constructor. Configure the widget after
        creation.
        * library/srcpref.itb (_build_win): Ditto.
        * library/main.tcl: Update Tcl, Tk, Itcl, Itk, and Iwidgets (just
        added to this loop) version requirements.
        No need to initialize Iwidgets separately.
        * plugins/Make-rules (TCLHDIR): Renamed to TCL_INCLUDES. Change
        all references.
        (TCL_BUILD_LIB_SPEC): Renamed to TCL_LIBRARY. Change all references.
        * plugins/acinclude.m4: Include the standard tcl.m4 instead
        of the sourceware-derived one.
        * plugins/configure.ac: Use Tcl's standard SC_* macros instead of
        the sourceware-derived CYG_AC_* macros.
        Add logic to deal with using a system-supplied Tcl/Tk.
        * plugins/configure: Regenerated.
        * plugins/Makefile.in: Regenerated.
@
text
@d2 1
a2 1
# Copyright (C) 1997, 1998, 1999, 2002, 2003, 2004, 2008 Red Hat
a79 1
  debug
d86 1
a86 1
  label $frame.icons.lab -text "Icons "
d134 1
a189 1

d251 1
a251 1
  button $itk_interior.x.ok -text OK -underline 0 -width 7 -command [code $this _ok]
a253 1
  pack $itk_interior.x.ok $itk_interior.x.apply $itk_interior.x.cancel -side left
d255 1
a269 1

@


1.15
log
@        * library/main.tcl: Add gdbtk_platform definitions.
        * library/attachdlg.itb (list_pids): Use gdbtk_platform
        instead of tcl_platform.
        * library/bpwin.itb (build_win): Likewise.
        (_bp_add): Likewise.
        (_bp_modify): Likewise.
        * library/download.itb (download_it): Likewise.
        * library/globalpref.itb (_build_win): Likewise.
        * library/helpviewer.tcl (open_help): Likewise.
        * library/interface.tcl (gdbtk_tcl_query): Likewise.
        (show_warning): Likewise.
        (open_file): Likewise.
        (run_executable): Likewise.
        * library/managedwin.itb (reveal): Likewise.
        (_create): Likewise.
        * library/prefs.tcl (pref_read): Likewise.
        (pref_set_defaults): Likewise.
        (pref_set_colors): Likewise.
        * library/session.tcl (_exe_name): Likewise.
        * library/srcbar.itcl (_update_file_menu): Likewise.
        (create_run_menu): Likewise.
        * library/srctextwin.itb (_mtime_changed): Likewise.
        (LoadFromCache): Likewise.
        * library/targetselection.itb (default_port): Likewise.
        (build_win): Likewise.

        * library/memwin.itb (build_win): Remove unused tcl_platform
        declaration.
        * library/pluginwin.itcl (enable_ui): Likewise.
        * library/process.itb (build_win): Likewise.
        * library/srcbar.itcl (enable_ui): Likewise.
        * library/srcwin.itb (location): Likewise.
        * library/stackwin.itb (build_win): Likewise.
        * library/tdump.tcl (build_win): Likewise.
@
text
@d176 2
a177 1
  Labelledframe $frame.d -text "Fonts"
@


1.14
log
@	* library/attachdlg.itb:
	* library/actiondlg.tcl:
	* library/about.tcl:
	* library/ehandler.itb:
	* library/editor.tcl:
	* library/download.ith:
	* library/download.itb:
	* library/debugwin.ith:
	* library/debugwin.itb:
	* library/cspref.ith:
	* library/cspref.itb:
	* library/console.ith:
	* library/console.itb:
	* library/browserwin.ith:
	* library/browserwin.itb:
	* library/bpwin.ith:
	* library/bpwin.itb:
	* library/blockframe.ith:
	* library/managedwin.ith:
	* library/managedwin.itb:
	* library/main.tcl:
	* library/locals.tcl:
	* library/ipcpref.ith:
	* library/ipcpref.itb:
	* library/ipc.tcl:
	* library/interface.tcl:
	* library/helpviewer.tcl:
	* library/globalpref.ith:
	* library/globalpref.itb:
	* library/gdbwin.ith:
	* library/gdbtoolbar.itcl:
	* library/gdbmenubar.itcl:
	* library/gdbevent.ith:
	* library/gdbevent.itb:
	* library/embeddedwin.ith:
	* library/ehandler.ith:
	* library/srcwin.itb:
	* library/srctextwin.ith:
	* library/srctextwin.itb:
	* library/srcpref.ith:
	* library/srcpref.itb:
	* library/srcbar.itcl:
	* library/session.tcl:
	* library/regwin.ith:
	* library/regwin.itb:
	* library/process.ith:
	* library/process.itb:
	* library/prefs.tcl:
	* library/pluginwin.itcl:
	* library/modal.tcl:
	* library/memwin.ith:
	* library/memwin.itb:
	* library/mempref.ith:
	* library/mempref.itb:
	* library/watch.tcl:
	* library/watch.tcl:
	* library/warning.tcl:
	* library/vartree.ith:
	* library/vartree.itb:
	* library/util.tcl:
	* library/tracedlg.tcl:
	* library/toplevelwin.ith:
	* library/tfind_args.tcl:
	* library/tdump.tcl:
	* library/targetselection.ith:
	* library/targetselection.itb:
	* library/stackwin.ith:
	* library/stackwin.itb:
	* library/srcwin.ith:
@
text
@d2 1
a2 1
# Copyright (C) 1997, 1998, 1999, 2002, 2003, 2004 Red Hat
d79 1
a79 1
  global tcl_platform GDBTK_LIBRARY
d153 1
a153 1
    if {$tcl_platform(platform) == "unix"} {
d181 1
a181 1
  if {$tcl_platform(platform) != "windows"} {
d206 1
a206 1
  if {$tcl_platform(platform) == "unix"} {
d221 1
a221 1
  if {$tcl_platform(platform) == "unix"} {
d227 1
a227 1
  if {$tcl_platform(platform) == "unix"} {
d244 1
a244 1
  if {$tcl_platform(platform) == "unix"} {
@


1.13
log
@2004-04-05  Martin Hunt  <hunt@@redhat.com>

	* library/session.tcl: Make hostname and portname
	session-dependent. Add gdb_bg_num (the color
	scheme number) as a per-session variable.

	* library/prefs.tcl (pref_read): If color schemes are in use,
	set colors based on the current scheme.
	(pref_save): Add "bg" section.
	(pref_set_defaults): Define new variable gdb/use_color_schemes
	and define 16 default background colors.

	* library/managedwin.itb (ManagedWin::window_name): Append
	window "instance" string to window name.
	(ManagedWin::window_instance): Set window instance string.

	* library/debugwin.itb: Add a reconfig method to restore
	unique black textbackground, overriding color scheme.

	* library/csprefs.itb:
	* library/csprefs.ith: New files. Implement color scheme
	preferences.

	* library/util.tcl (set_bg_colors): New function.
	(r_setcolors): New function.

	* library/regwin.itb (_prefs_changed): Deleted.
	(reconfig): New function.  Updates tkTable color tags
	if color scheme changes.
	* library/regwin.ith: Update to reflect above changes.

	* library/srcbar.itcl (create_pref_menu): Add pulldown
	menus for "Edit Color Schemes..." and "Use Color Schemes".
	(reconfig): Fix up menu items for color schemes.

	* library/globalpref.itb (_init_var): Add
	gdb/use_color_schemes to variable list.
	(_build_win): Add a checkbutton to enable/disable
	color schemes.

	* library/gdbmenubar.itcl (menubar_add_cascade): Add a class
	argument so cascade menus can be managed by class too.

	* library/interface.tcl (gdbtk_tcl_fputs): Check for
	existence of gdbtk_state(console).  Stops annoying error
	messages.
	(gdbtk_tcl_fputs_error): Ditto.
	(gdbtk_tcl_fputs_log): Ditto.
@
text
@d2 1
a2 1
# Copyright 1997, 1998, 1999, 2002, 2003, 2004 Red Hat
@


1.12
log
@2003-02-14  Martin M. Hunt  <hunt@@redhat.com>

	* library/globalpref.itb (GlobalPref::_change_icons): Fix
	curselection call for combobox.
@
text
@d2 1
a2 1
# Copyright 1997, 1998, 1999, 2002, 2003 Red Hat
d47 1
a47 1
  set vlist {gdb/ImageDir gdb/console/wrap gdb/mode gdb/use_icons gdb/compat}
d212 1
a212 1
  checkbutton $f.consolewrap -text "wrap text in console window" \
d215 4
d225 1
@


1.11
log
@2003-02-03  Martin M. Hunt  <hunt@@redhat.com>

        * library/globalpref.itb, library/mempref.itb, library/srcpref.itb,
        library/srcwin.itb, library/targetselection.itb, library/tracedlg.tcl:
        Set background color of comboboxes to Colors(textbg).

        * library/main.tcl: Load combobox version 2.2.

        * library/prefs.tcl: Minor optimization. Change order of main_names
        to have the most common, "main", first.
@
text
@d317 1
a317 2
  debug
  set index [$w list curselection]
@


1.10
log
@2002-11-06  Martin M. Hunt  <hunt@@redhat.com>

	* library/globalpref.itb (_build_win): Add radiobox
	to select KDE/GNOME/default for pref gdb/compat. Remove
	browser option.

	* library/regwin.itb (build_win): Colors(hbg) has been
	removed so use Colors(bg) instead.

	* library/prefs.tcl (pref_set_defaults): Add a new
	preference "gdb/compat" which can be set to KDE, GNOME,
	Windows or default. This allows us to change Insight's
	behavior based on windowing system.
	(pref_set_colors): Attempt to read in .gtkrc files.
	Do different things for KDE vs GNOME.
	(pref_load_default): New function. Load default colors.
	(pref_load_gnome): New function. Find and open GNOME file.
	(load_gnome_file): New function. Loads GNOME file.
	(pref_set_option_db): New function.  Set option database.
@
text
@d2 1
a2 1
# Copyright 1997, 1998, 1999, 2002 Red Hat
d89 1
a89 1
    -command [code $this _change_icons]
d282 1
a282 1
    -command [code $this _change_font $name]
@


1.9
log
@2002-10-15  Martin M. Hunt  <hunt@@redhat.com>

	* library/* : auto_mkindex cannot rebuild
	tclIndex because it does not recognize the namespace
	import in main.tcl.  To get it to work again, rename the
	following:
		body -> itcl::body
		configbody -> itcl::configbody
		class -> itcl::class
@
text
@d47 1
a47 2
  set vlist {gdb/ImageDir gdb/console/wrap gdb/mode
    gdb/help/browser gdb/use_icons}
d189 4
d200 1
a200 2
  frame $frame.tracing
  checkbutton $frame.tracing.cb -variable [scope _new(gdb/mode)] \
d202 1
a202 1
    -command [code $this _toggle_tracing $frame.tracing.cb] \
a203 12
    pack $frame.tracing.cb -pady 10 -side left -fill none 

  # help browser preferences
  if {$tcl_platform(platform) == "windows"} {
    set help_text "Use Internet Browser to View Help Files"
  } else {
    set help_text "Use Netscape to View Help Files"
  }
  frame $frame.browser
  checkbutton $frame.browser.cb  \
    -text $help_text -variable [scope _new(gdb/help/browser)]
  pack $frame.browser.cb -pady 10 -side left -fill none 
d207 1
a207 2
    frame $frame.use_icons
    checkbutton $frame.use_icons.cb  \
a208 1
    pack $frame.use_icons.cb -pady 10 -side left -fill none 
d212 1
a212 2
  frame $frame.consolewrap
  checkbutton $frame.consolewrap.cw -text "wrap text in console window" \
a213 1
  pack $frame.consolewrap.cw -pady 10 -side left -fill none
d215 21
d237 2
a238 3
  pack $frame.icons -side top -padx 10 -pady 10
  pack $frame.tracing -side top -fill x -expand 0 -side bottom
  pack $frame.browser -side top -fill x -expand 0 -side bottom
d240 3
a242 1
    pack $frame.use_icons -side top -fill x -expand 0 -side bottom
a243 2
  pack $frame.consolewrap -side top -fill x -expand 0 -side bottom
  pack $frame.d -side top -fill both -expand yes
d251 1
d253 1
a253 3


  pack $itk_interior.f -fill both -expand yes -padx 10 -pady 5
@


1.8
log
@2002-06-07  Martin M. Hunt  <hunt@@redhat.com>

	* library/prefs.tcl (pref_set_colors): New function.  Set up colors
	from Windows system colors or X resource database. Save in array.
	(pref_set_defaults): Remove gdb/font/normal_fg, etc.
	(pref_read): Call pref_set_colors.

	* library/main.tcl: Remove call to "tix resetoptions TixGray".

	* library/bpwin.itb, library/browserwin.itb, library/console.itb,
	library/globalpref.itb, library/memwin.itb, library/process.itb,
	library/regwin.itb, library/srcpref.itb, library/srctextwin.itb,
	library/stackwin.itb, library/tdump.tcl, library/tracedlg.tcl,
	library/variables.tcl: Replace calls to [pref get gdb/fonts/*]
	for colors with references to Color array. Remove all tixOptions calls.
	Fix up colors as necessary.
@
text
@d23 1
a23 1
body GlobalPref::_init {} {
d46 1
a46 1
body GlobalPref::_init_var {} {
d59 1
a59 1
body GlobalPref::constructor {args} {    
d70 1
a70 1
body GlobalPref::destructor {} {
d79 1
a79 1
body GlobalPref::_build_win {} {
d265 1
a265 1
body GlobalPref::_make_font_item {f name label font_list} {
d300 1
a300 1
body GlobalPref::_resize_font_item_height {} {
d311 1
a311 1
body GlobalPref::_change_icons {w args} {
d333 1
a333 1
body GlobalPref::_change_font {font stupid implementation} {
d348 1
a348 1
body GlobalPref::_change_size {direction font} {
d359 1
a359 1
body GlobalPref::_toggle_tracing {win} {
d367 1
a367 1
body GlobalPref::_ok {} {
d374 1
a374 1
body GlobalPref::_apply {{deleteMe 0}} {
d428 1
a428 1
body GlobalPref::_cancel {} {
d468 1
a468 1
body GlobalPref::cancel {} {
@


1.7
log
@2002-03-05  Martin M. Hunt  <hunt@@redhat.com>

	* library/prefs.tcl (pref_read): If a preference specifies
	"src-font", substitute "global/fixed".
	(pref_set_defaults): Change defaults from "src-font" to
	"global/fixed". Do not create font object "src-font". Do
	not add hook to trace its changes.
	(pref_src-font_trace): Remove.

	* library/console.itb (Console::_update_option): Remove
	font update because this happens automatically.

	* library/globalpref.itb: No need to set
	changed flag for fonts; updates happen automatically
	when prefs are updated.

	* library/bpwin.itb: Replaced src-font with global/fixed.
	* library/browserwin.itb: Ditto.
	* library/mempref.itb: Ditto.
	* library/memwin.itb: Ditto.
	* library/process.itb: Ditto.
	* library/regwin.itb: Ditto.
	* library/srcbar.itcl: Ditto.
	* library/srcpref.itb: Ditto.
	* library/srctextwin.itb: Ditto.
	* library/srcwin.itb: Ditto.
	* library/stackwin.itb: Ditto.
	* library/tdump.tcl: Ditto.
	* library/tracedlg.tcl: Ditto.
	* library/variables.tcl: Ditto.
	* library/watch.tcl: Ditto.
@
text
@d287 2
a288 1
      -decrement [code $this _change_size down $name]
@


1.6
log
@2001-10-18  Martin M. Hunt  <hunt@@redhat.com>
	* library/globalpref.itb (GlobalPref::_init_var):
	New method to initialize _saved and _new arrays.
	(GlobalPref::constructor): Call _init_var.
	(GlobalPref::_buildwin): Use _new array for prefs
	variables. Font optimizations. Remove troublesome
	fonts and sort the list.
	(GlobalPref::toggle_tracing_mode): Removed.  Some
	functionality moved to _apply and _cancel.
	(GlobalPref::_apply): Set prefs with values from the
	_new array.
	(SrcPref::_cancel): Reset prefs with values from _saved.
	* library/globalpref.ith: Changed private variables
	and methods to start with underscore.
	(tracing_cb): Removed.
	(_init): Changed from proc to method.
@
text
@d1 2
a2 2
# Global preference class implementation for GDBtk.
# Copyright 1997, 1998, 1999 Cygnus Solutions
a389 1
      set changed_something 1
@


1.5
log
@	* library/globalpref.ith (_change_font, _change_size): New
	private methods.
	(_size): New private variable.
	(font_changed, wfont_changed): Removed.
	* library/globalpref.itb (make_font_item): Change combobox
	callback to use _change_font.
	Replace tixControl with iwidgets::spinint.
	(font_changed, wfont_changed): Removed.
	(_change_font, _change_size): New private methods.
	* tclIndex: Regenerate.
@
text
@d21 1
a21 1
#  PROC:  _init - set up the tracing labels info
d44 13
d62 2
a63 1
  build_win
d71 1
a71 1
  foreach thunk $Fonts {
d77 1
a77 1
#  METHOD:  build_win - build the dialog
d79 1
a79 1
body GlobalPref::build_win {} {
d90 1
a90 1
    -command [code $this change_icons]
d94 1
a94 1
  set icondirlist ""
d98 1
a98 1
      lappend icondirlist $foo
d104 2
a105 3
  set imagedir [pref get gdb/ImageDir]
  foreach dir $icondirlist {
    if {![string compare $dir $imagedir]} {
d137 16
d167 1
a167 1
    set fam [font families]
d174 1
a174 1
    if {$tcl_platform(platform) == "unix"} { destroy .c }
d180 1
a180 1
  make_font_item $f fixed "Fixed Font:" $font_cache
d184 1
a184 1
    make_font_item $f menu "Menu Font:" [font families]
d187 2
a188 2
  make_font_item $f default "Default Font:" [font families]
  make_font_item $f status  "Status Bar Font:" [font families]
d193 1
a193 1
    debug "Got unknown mode value: $tracing_cb"
d198 1
a198 1
  checkbutton $frame.tracing.cb -variable [scope tracing_cb] \
d200 1
a200 1
    -command [code $this toggle_tracing $frame.tracing.cb] \
d212 1
a212 1
    -text $help_text -variable [pref varname gdb/help/browser]
d219 1
a219 1
      -text "Use builtin image as icon." -variable [pref varname gdb/use_icons]
d226 1
a226 1
    -variable [pref varname gdb/console/wrap]
d240 3
a242 3
  button $itk_interior.x.ok -text OK -underline 0 -width 7 -command [code $this ok]
  button $itk_interior.x.apply -text Apply -width 7 -underline 0 -command [code $this apply]
  button $itk_interior.x.cancel -text Cancel -width 7 -underline 0 -command [code $this cancel]
d258 1
a258 1
  resize_font_item_height
d263 1
a263 1
#  PRIVATE METHOD:  make_font_item
d265 1
a265 1
body GlobalPref::make_font_item {f name label font_list} {
d268 1
a268 1
  lappend Fonts $name
d270 4
a273 4
  set Original($name,family) [font actual global/$name -family]
  set Original($name,size) [font actual global/$name -size]
  font create test-$name-font -family $Original($name,family) \
    -size $Original($name,size)
d276 1
a276 1
  combobox::combobox $f.${name}n -editable 0 -value $Original($name,family) \
d290 1
a290 1
  set _size($name) $Original($name,size)
d297 1
a297 1
#  PRIVATE METHOD:  resize_font_item_height
d299 2
a300 2
body GlobalPref::resize_font_item_height {} {
  foreach font $Fonts {
d308 1
a308 1
#  PRIVATE METHOD:  change_icons
d310 2
a311 2
body GlobalPref::change_icons {w args} {
  global gdb_ImageDir GDBTK_LIBRARY
d314 1
a314 4
    set dir [lindex $icondirlist $index]
    pref set gdb/ImageDir $dir
    set gdb_ImageDir [file join $GDBTK_LIBRARY $dir]
    ManagedWin::restart
a356 10
# ------------------------------------------------------------------
#  METHOD:  toggle_tracing_mode - toggles the tracing mode on and off
# ------------------------------------------------------------------
body GlobalPref::toggle_tracing_mode {} {
  pref set gdb/mode $tracing_cb
  # Reset the button-1 behavior if you are going out of trace mode.
  if {!$tracing_cb} {
    pref set gdb/B1_behavior 1
  }    
}
d358 3
a360 3
body GlobalPref::toggle_tracing {win} {
  debug foo
  $win configure -text $tracing_labels($tracing_cb)
d364 1
a364 1
#  METHOD:  ok - called to accept settings and close dialog
d366 2
a367 2
body GlobalPref::ok {} {
  apply 1
d371 1
a371 1
#  METHOD:  apply - apply current settings to the screen
d373 3
a375 2
body GlobalPref::apply {{deleteMe 0}} {
  set commands {}
d386 1
a386 1
  foreach thunk $Fonts {
d389 2
a390 1
      lappend commands [list pref set global/font/$thunk $font]
d394 12
a405 2
  if {[pref get gdb/mode] != $tracing_cb} {
    lappend commands toggle_tracing_mode
d408 2
a409 7
  if {[llength $commands] > 0} {
    foreach command $commands {
      eval $command
    }
    if {$deleteMe} {
      unpost
    }
d413 2
a414 2
  if {$deleteMe} {
    unpost
d418 1
a418 1
      [code $this resize_font_item_height]
d425 1
a425 1
#  METHOD:  cancel - forget current settings -- reset to original
d428 4
a431 1
body GlobalPref::cancel {} {  
d433 1
a433 2
  set commands {}
  foreach thunk $Fonts {
d436 4
a439 3
    if {$Original($thunk,family) != $family || $Original($thunk,size) != $size} {
      lappend commands [list pref set global/font/$thunk \
	[list -family $Original($thunk,family) -size $Original($thunk,size)]]
d443 11
a453 3
  if {[llength $commands] > 0} {
    foreach command $commands {
      eval $command
d456 2
a457 1
  if {[llength $commands] > 0} {
d461 11
@


1.4
log
@2001-06-05  Martin Hunt  <hunt@@redhat.com>

	* library/globalpref.itb(build_win): Don't change directory
	before building icon combobox.  Add debug lines.
@
text
@d246 1
a246 1
  
d248 2
a249 2
    -command [code $this wfont_changed family $name]
  
d254 6
a259 3
  tixControl $f.${name}s -label Size: -integer true -max 18 -min 6 \
    -value $Original(${name},size) -command [code $this font_changed size $name]
  [$f.${name}s subwidget entry] configure -width 2
d261 2
a262 1
  
a264 1
  
d293 12
a304 2
#  PRIVATE METHOD:  wfont_changed - callback from font comboboxes
#  PRIVATE METHOD:  font_changed - callback from font tixControls
d306 2
a307 2
body GlobalPref::wfont_changed {attribute font w val} {
  font_changed $attribute $font $val
d310 19
a328 16
body GlobalPref::font_changed {attribute font val} {
  # val will be a size or a font name

  switch $attribute {
    size {
      set oldval [font configure test-$font-font -size]
      font configure test-$font-font -size $val
    }

    family {
      set oldval [font configure test-$font-font -family]
      font configure test-$font-font -family $val
    }
    
    default { debug "GlobalPref::font_changed -- invalid change" }
  }
@


1.3
log
@	* library/globalpref.itb (build_win): Preserve the
	current working directory.
@
text
@a86 1
  cd $curdir
d100 1
d116 1
a116 1
  
@


1.2
log
@


Fixed the partial implementation of the text wrapping option
in the console window, and added a way to select the new
option from the globalprefs.
@
text
@d79 1
d87 2
a88 1
  
@


1.1
log
@Initial revision
@
text
@d192 6
d203 1
a203 1
  pack $frame.use_icons -side top -fill x -expand 0 -side bottom
d205 1
@


1.1.1.1
log
@import insight-2000-02-04 snapshot (2nd try)
@
text
@@
