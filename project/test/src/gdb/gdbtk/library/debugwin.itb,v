head	1.13;
access;
symbols
	insight_7_6-2013-04-10-branchpoint:1.13
	gdb_7_6-branch:1.13.0.22
	gdb_7_5-branch:1.13.0.20
	gdb_7_4-branch:1.13.0.18
	gdb_7_3-branch:1.13.0.16
	gdb_7_1-branch:1.13.0.14
	gdb_7_0-branch:1.13.0.12
	arc-sim-20090309:1.13
	arc-insight_6_8-branch:1.13.0.10
	arc-insight_6_8-branchpoint:1.13
	insight_6_8-branch:1.13.0.8
	insight_6_8-branchpoint:1.13
	gdb_6_8-branch:1.13.0.6
	insight_6_6-20070208-release:1.13
	gdb_6_6-branch:1.13.0.4
	gdb_6_6-2006-11-15-branchpoint:1.13
	insight_6_5-20061003-release:1.13
	gdb_6_5-branch:1.13.0.2
	gdb_6_5-2006-05-14-branchpoint:1.13
	gdb-csl-gxxpro-6_3-branch:1.12.0.4
	gdb-csl-gxxpro-6_3-branchpoint:1.12
	gdb_6_4-branch:1.12.0.2
	gdb_6_4-2005-11-01-branchpoint:1.12
	gdb_6_1-2004-04-05-release:1.11
	gdb_6_1-branch:1.11.0.4
	gdb_6_1-2004-03-01-gmt-branchpoint:1.11
	gdb_6_0-2003-10-04-release:1.11
	gdb_6_0-branch:1.11.0.2
	gdb_6_0-2003-06-23-branchpoint:1.11
	gdb_5_3-2002-12-12-release:1.8
	gdb_5_3-branch:1.8.0.4
	gdb_5_3-2002-09-04-branchpoint:1.8
	gdb_5_2_1-2002-07-23-release:1.8
	gdb_5_2-2002-04-29-release:1.8
	gdb_5_2-branch:1.8.0.2
	gdb_5_2-2002-03-03-branchpoint:1.8
	gdb_5_1_1-2002-01-24-release:1.2
	cygnus_cvs_20020108_pre:1.7
	gdb_5_1_0_1-2002-01-03-branch:1.2.0.8
	gdb_5_1_0_1-2002-01-03-branchpoint:1.2
	gdb_5_1-2001-11-21-release:1.2
	gdb_s390-2001-09-26-branch:1.2.0.6
	gdb_s390-2001-09-26-branchpoint:1.2
	gdb_5_1-2001-07-29-branch:1.2.0.4
	gdb_5_1-2001-07-29-branchpoint:1.2
	dberlin-typesystem-branch:1.2.0.2
	dberlin-typesystem-branchpoint:1.2
	insight-precleanup-2001-01-01:1.1.1.1
	gdb_5_0-2000-05-19-release:1.1.1.1
	gdb_4_18_2-2000-05-18-release:1.1.1.1
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.1
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.1
	gdb_5_0-2000-04-10-branch:1.1.1.1.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1.1.1
	repo-unification-2000-02-06:1.1.1.1
	insight-2000-02-04:1.1.1.1
	SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.13
date	2005.12.23.18.26.50;	author eliz;	state Exp;
branches;
next	1.12;

1.12
date	2004.04.05.20.36.40;	author hunt;	state Exp;
branches;
next	1.11;

1.11
date	2002.12.04.20.58.05;	author hunt;	state Exp;
branches;
next	1.10;

1.10
date	2002.11.06.21.59.24;	author hunt;	state Exp;
branches;
next	1.9;

1.9
date	2002.10.15.21.19.50;	author hunt;	state Exp;
branches;
next	1.8;

1.8
date	2002.01.15.19.52.01;	author kseitz;	state Exp;
branches;
next	1.7;

1.7
date	2002.01.03.21.27.31;	author hunt;	state Exp;
branches;
next	1.6;

1.6
date	2001.11.08.18.31.40;	author hunt;	state Exp;
branches;
next	1.5;

1.5
date	2001.11.05.19.14.00;	author hunt;	state Exp;
branches;
next	1.4;

1.4
date	2001.10.30.06.17.15;	author hunt;	state Exp;
branches;
next	1.3;

1.3
date	2001.10.30.04.41.44;	author hunt;	state Exp;
branches;
next	1.2;

1.2
date	2001.02.08.19.26.31;	author fnasser;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.07.00.19.42;	author jsm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.07.00.19.42;	author jsm;	state Exp;
branches;
next	;


desc
@@


1.13
log
@	* library/attachdlg.itb:
	* library/actiondlg.tcl:
	* library/about.tcl:
	* library/ehandler.itb:
	* library/editor.tcl:
	* library/download.ith:
	* library/download.itb:
	* library/debugwin.ith:
	* library/debugwin.itb:
	* library/cspref.ith:
	* library/cspref.itb:
	* library/console.ith:
	* library/console.itb:
	* library/browserwin.ith:
	* library/browserwin.itb:
	* library/bpwin.ith:
	* library/bpwin.itb:
	* library/blockframe.ith:
	* library/managedwin.ith:
	* library/managedwin.itb:
	* library/main.tcl:
	* library/locals.tcl:
	* library/ipcpref.ith:
	* library/ipcpref.itb:
	* library/ipc.tcl:
	* library/interface.tcl:
	* library/helpviewer.tcl:
	* library/globalpref.ith:
	* library/globalpref.itb:
	* library/gdbwin.ith:
	* library/gdbtoolbar.itcl:
	* library/gdbmenubar.itcl:
	* library/gdbevent.ith:
	* library/gdbevent.itb:
	* library/embeddedwin.ith:
	* library/ehandler.ith:
	* library/srcwin.itb:
	* library/srctextwin.ith:
	* library/srctextwin.itb:
	* library/srcpref.ith:
	* library/srcpref.itb:
	* library/srcbar.itcl:
	* library/session.tcl:
	* library/regwin.ith:
	* library/regwin.itb:
	* library/process.ith:
	* library/process.itb:
	* library/prefs.tcl:
	* library/pluginwin.itcl:
	* library/modal.tcl:
	* library/memwin.ith:
	* library/memwin.itb:
	* library/mempref.ith:
	* library/mempref.itb:
	* library/watch.tcl:
	* library/watch.tcl:
	* library/warning.tcl:
	* library/vartree.ith:
	* library/vartree.itb:
	* library/util.tcl:
	* library/tracedlg.tcl:
	* library/toplevelwin.ith:
	* library/tfind_args.tcl:
	* library/tdump.tcl:
	* library/targetselection.ith:
	* library/targetselection.itb:
	* library/stackwin.ith:
	* library/stackwin.itb:
	* library/srcwin.ith:
@
text
@# Debug window for GDBtk.
# Copyright (C) 1998, 1999, 2000, 2001, 2002 Red Hat, Inc.
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License (GPL) as published by
# the Free Software Foundation; either version 2 of the License, or (at
# your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.


# -----------------------------------------------------------------------------
# NAME:		DebugWin::constructor
#	
# SYNOPSIS:	constructor::args
#
# DESC:		Creates the debug window  
#
# ARGS:		None are used yet.
# -----------------------------------------------------------------------------
itcl::body DebugWin::constructor {args} {
  debug $args
  window_name "Insight Debug" "Debug"

  build_win
}

# -----------------------------------------------------------------------------
# NAME:		DebugWin::destructor
#	
# SYNOPSIS:	Not called by hand
#
# DESC:		Destroys the debug window
#
# ARGS:		None
# -----------------------------------------------------------------------------
itcl::body DebugWin::destructor {} {
  # notify debug code that window is going away
  ::debug::debugwin ""
}

# -----------------------------------------------------------------------------
# NAME:		DebugWin::reconfig
#	
# SYNOPSIS:	Reconfigure callback
#
# DESC:		Fixes up window colors
#
# ARGS:		None
# -----------------------------------------------------------------------------
itcl::body DebugWin::reconfig {} {
  # This keeps the Debug window using its unique black background.
  # Otherwise, a reconfigure event will color it to match the other windows
  $itk_interior.s configure -textbackground black
}

# -----------------------------------------------------------------------------
# NAME:		DebugWin::build_win
#
# SYNOPSIS:	build_win
#	
# DESC:		Creates the Debug Window. Reads the contents of the debug log
#		file, if it exists. Notifies the debug functions in ::debug
#		to send output here.
# -----------------------------------------------------------------------------
itcl::body DebugWin::build_win {} {
  global gdb_ImageDir GDBTK_LIBRARY

  set top [winfo toplevel $itk_interior]
  
  # initialize the gdbtk_de array
  if {![info exists ::gdbtk_de]} {
    set ::gdbtk_de(ALL) 1
    set ::gdbtk_de(ERRORS_ONLY) 0
    set ::gdbtk_de(others) 0
    set ::gdbtk_de(filter_var) ALL
  }

  # create menubar
  set menu [menu $itk_interior.m  -tearoff 0]
  $menu add cascade -menu $menu.file -label "File" -underline 0
  set m [menu $menu.file] 
  $m add command -label "Clear" -underline 1 \
    -command [code $this _clear]
  $m add command -label "Mark Old" -underline 1 \
    -command [code $this _mark_old]
  $m add separator
  $m add command -label "Save" -underline 0 \
    -command [code $this _save_contents]
  $m add separator
  $m add command -label "Close" -underline 0 \
    -command "::debug::debugwin {};delete object $this"
  $menu add cascade -menu $menu.trace -label "Trace"
  set m [menu $menu.trace]
  $m add radiobutton -label Start -variable ::debug::tracing -value 1
  $m add radiobutton -label Stop -variable ::debug::tracing -value 0
  $menu add cascade -menu $menu.rs -label "ReSource"
  set m [menu $menu.rs]
  foreach f [lsort [glob [file join $GDBTK_LIBRARY *.itb]]] {
    $m add command -label "Source [file tail $f]"\
      -command [list source $f]
  }
  $m add separator
  $m add command -label "Source ALL" -command [code $this _source_all]

  $menu add cascade -menu $menu.opt -label "Options"
  set m [menu $menu.opt]
  $m add command -label "Display" -underline 0 \
    -command [list ManagedWin::open DebugWinDOpts -over $this]
  if {!$::debug::initialized} {
    $menu entryconfigure 1 -state disabled
    $menu add cascade -label "     Tracing Not Initialized" -foreground red \
      -activeforeground red
  }
  $menu add cascade -menu $menu.help -label "Help" -underline 0
  set m [menu $menu.help]
  $m add command -label "Debugging Functions" -underline 0 \
    -command {open_help debug.html}

  $top configure -menu $menu
  
  iwidgets::scrolledtext $itk_interior.s -hscrollmode static \
    -vscrollmode static -wrap none -textbackground black -foreground white
  set _t [$itk_interior.s component text]
  pack $itk_interior.s -expand 1 -fill both

  # define tags
  foreach color $_colors {
    $_t tag configure [lindex $color 0] -foreground [lindex $color 1]
  }
  $_t tag configure trace -foreground gray
  $_t tag configure args -foreground blue
  $_t tag configure marked -background grey20

  loadlog

  # now notify the debug functions to use this window
  ::debug::debugwin $this

  # override the window delete procedure so the messages are
  # turned off first.
  wm protocol $top WM_DELETE_WINDOW "::debug::debugwin {};destroy $top"
}

# -----------------------------------------------------------------------------
# NAME:		DebugWin::puts
#	
# SYNOPSIS:	puts {level cls func msg}
#
# DESC:		Writes debugging information into the DebugWin. A filter
#		will be applied to determine if the message should be
#		displayed or not.  
#
# ARGS:		level - priority level. See debug::dbug for details.
#		cls   - class name of caller, for example "SrcWin"
#		func  - function name of caller
#		msg   - message to display
# -----------------------------------------------------------------------------
itcl::body DebugWin::puts {level cls func msg} {
  # filter. check if we should display this message
  # for now we always let high-level messages through
  if {$level == "I"} {

    # errors and warnings only
    if {$::gdbtk_de(ERRORS_ONLY)} { return }

    # ALL classes except those set
    if {$::gdbtk_de(ALL)} {
      if {[info exists ::gdbtk_de($cls)]} {
	if {$::gdbtk_de($cls)} {
	  return
	}
      } elseif {$::gdbtk_de(others)} {
	return
      }
    }

    # ONLY the classes set
    if {!$::gdbtk_de(ALL)} {
      if {[info exists ::gdbtk_de($cls)]} {
	if {!$::gdbtk_de($cls)} {
	  return
	}
      } elseif {!$::gdbtk_de(others)} {
	return
      }
    }
  }

  if {$func != ""} {
    append cls ::$func
  }
  $_t insert end "($cls) " {} "$msg\n" $level
  $_t see insert
}

# -----------------------------------------------------------------------------
# NAME:		DebugWin::put_trace
#	
# SYNOPSIS:	put_trace {enter level func ar}
#	
# DESC:		Writes trace information into the DebugWin. A filter
#		will be applied to determine if the message should be
#		displayed or not.
#
# ARGS:		enter - 1 if this is a function entry, 0 otherwise.
#		level - stack level
#		func  - function name
#		ar    - function arguments
# -----------------------------------------------------------------------------
itcl::body DebugWin::put_trace {enter level func ar} {
  set x [expr {$level * 2 - 2}]
  if {$enter} {
    $_t insert end "[string range $_bigstr 0 $x]$func " trace "$ar\n" args
  } else {
    $_t insert end "[string range $_bigstr 0 $x]<- $func " trace "$ar\n" args
  }
  $_t see insert
}

# -----------------------------------------------------------------------------
# NAME:		DebugWin::loadlog
#
# SYNOPSIS:	loadlog
#	
# DESC:		Reads the contents of the debug log file, if it exists, into 
#		the DebugWin. 
# -----------------------------------------------------------------------------
itcl::body DebugWin::loadlog {} {
  $_t delete 0.0 end
  # Now load in log file, if possible.
  # this is rather rude, using the logfile variable in the debug namespace
  if {$::debug::logfile != "" && $::debug::logfile != "stdout"} {
    flush $::debug::logfile
    seek $::debug::logfile 0 start
    while {[gets $::debug::logfile line] >= 0} {
      while {[catch {set f [lindex $line 0]} f]} {
	# If the lindex failed its because the remainder of the
	# list is on the next line.  Get it.
	if {[gets $::debug::logfile line2] < 0} {
	  break
	}
	append line \n $line2
      }
      if {$f == "T"} {
	put_trace [lindex $line 1] [lindex $line 2] [lindex $line 3] \
	  [lindex $line 4]
      } else {
	puts $f [lindex $line 1] [lindex $line 2] [lindex $line 3]
      }
    }
  }
}

# -----------------------------------------------------------------------------
# NAME:		DebugWin::_source_all
#
# SYNOPSIS:	_source_all
#	
# DESC:		Re-sources all the .itb files.
# -----------------------------------------------------------------------------
itcl::body DebugWin::_source_all {} {
  foreach f [glob [file join $::GDBTK_LIBRARY *.itb]] {
    source $f
  }
}

# -----------------------------------------------------------------------------
# NAME:		DebugWin::_clear
#
# SYNOPSIS:	_clear
#	
# DESC:		Clears out the content of the debug window.
# -----------------------------------------------------------------------------
itcl::body DebugWin::_clear {} {
  $_t delete 1.0 end
}

# -----------------------------------------------------------------------------
# NAME:		DebugWin::_mark_old
#
# SYNOPSIS:	_mark_old
#	
# DESC:		Changes the background of the current contents of the window.
# -----------------------------------------------------------------------------
itcl::body DebugWin::_mark_old {} {
  $_t tag add marked 1.0 "end - 1c"
}

# -----------------------------------------------------------------------------
# NAME:		DebugWin::_save_contents
#
# SYNOPSIS:	_save_contents
#	
# DESC:		Changes the background of the current contents of the window.
# -----------------------------------------------------------------------------
itcl::body DebugWin::_save_contents {} {
  set file [tk_getSaveFile -title "Choose debug window dump file" \
	      -parent [winfo toplevel $itk_interior]]
  if {$file == ""} {
    return
  }

  if {[catch {::open $file w} fileH]} {
    tk_messageBox -type ok -icon error -message \
      "Can't open file: \"$file\". \n\nThe error was:\n\n\"$fileH\""
    return
  }
  ::puts $fileH [$_t get 1.0 end]

}

###############################################################################
# -----------------------------------------------------------------------------
# NAME:		DebugWinDOpts::constructor
#
# SYNOPSIS:	constructor
#	
# DESC:		Creates the Debug Window Options Dialog.
# -----------------------------------------------------------------------------
itcl::body DebugWinDOpts::constructor {args} {
    window_name "Debug Window Options"
    build_win
    eval itk_initialize $args 
}

###############################################################################
# -----------------------------------------------------------------------------
# NAME:		DebugWinDOpts::destructor
#
# SYNOPSIS:	Not called by hand
#	
# DESC:		Destroys the Debug Window Options Dialog.
# -----------------------------------------------------------------------------
itcl::body DebugWinDOpts::destructor {} {
}


# -----------------------------------------------------------------------------
# NAME:		DebugWinDOpts::build_win
#
# SYNOPSIS:	build_win
#	
# DESC:		Creates the Debug Window Options Dialog. This dialog allows the
#		user to select which information is displayed in the debug 
#		window and (eventually) how it looks.
# -----------------------------------------------------------------------------
itcl::body DebugWinDOpts::build_win {} {
  wm title [winfo toplevel $itk_interior] "Debug Display Options"
  # initialize here so we can resource this file and update the list
  set _classes {DebugWin RegWin SrcBar SrcWin ToolBar WatchWin EmbeddedWin \
		  ManagedWin GDBWin StackWin SrcTextWin global \
		  BpWin TargetSelection ModalDialog ProcessWin \
		  GDBEventHandler MemWin VarTree}
  set _classes [concat [lsort $_classes] others]

  set f [frame $itk_interior.f]
  set btns [frame $itk_interior.buttons]

  iwidgets::Labeledframe $f.display -labelpos nw -labeltext {Classes}
  set fr [$f.display childsite]
  radiobutton $fr.0 -text "Messages from ALL classes EXCEPT those selected below" \
    -variable ::gdbtk_de(filter_var) -value ALL -command [code $this _all]
  radiobutton $fr.1 -text "Messages from ONLY those classes selected below" \
    -variable ::gdbtk_de(filter_var) -value ONLY -command [code $this _all]
  radiobutton $fr.2 -text "Only WARNINGS and ERRORS" \
    -variable ::gdbtk_de(filter_var) -value ERRORS -command [code $this _all]

  grid $fr.0 -sticky w -padx 5 -pady 5
  grid $fr.1 -sticky w -padx 5 -pady 5
  grid $fr.2 -sticky w -padx 5 -pady 5

  iwidgets::Labeledframe $f.classes 
  set fr [$f.classes childsite]

  set i 0
  foreach cls $_classes {
    if {![info exists ::gdbtk_de($cls)]} {
      set ::gdbtk_de($cls) 0
    }
    checkbutton $fr.$i -text $cls -variable ::gdbtk_de($cls)
    incr i
  }

  set k [expr 3*(int($i/3))]
  set more [expr $i - $k]
  set j 0
  while {$j < $k} {
    grid $fr.$j $fr.[expr $j+1] $fr.[expr $j+2] -sticky w -padx 5 -pady 5
    incr j 3
  }
  switch $more {
    1 { grid $fr.$j x x -sticky w -padx 5 -pady 5}
    2 { grid $fr.$j $fr.[expr $j+1] x -sticky w -padx 5 -pady 5}
  }

  pack $f.display -side top -expand 1 -fill both
  pack $f.classes -side top -expand 1 -fill both

  button $btns.ok -text [gettext OK] -width 7 -command [code $this _apply 1] \
    -default active
  button $btns.apply -text "Apply to All"  -width 7 \
    -command [code $this _apply 0]
  if {$::debug::logfile == "" || $::debug::logfile == "stdout"} {
    $btns.apply configure -state disabled
  }
  button $btns.help -text [gettext Help] -width 10 -command [code $this help] \
    -state disabled
  standard_button_box $btns
  bind $btns.ok <Return> "$btns.ok flash; $btns.ok invoke"
  bind $btns.apply <Return> "$btns.apply flash; $btns.apply invoke"
  bind $btns.help <Return> "$btns.help flash; $btns.help invoke"
  
  pack $btns $f -side bottom -expand 1 -fill both -anchor e
  focus $btns.ok
}

# -----------------------------------------------------------------------------
# NAME:		DebugWinDOpts::_all
#
# SYNOPSIS:	_all
#	
# DESC:		Callback for selecting ALL classes. If the user selects ALL,
#		deselect all the individual class checkbuttons.
# -----------------------------------------------------------------------------
itcl::body DebugWinDOpts::_all {} {
  switch $::gdbtk_de(filter_var) {
    ALL {
      set ::gdbtk_de(ALL) 1
      set ::gdbtk_de(ERRORS_ONLY) 0
      #enable class buttons
      set num 0
      foreach class $_classes {
	[$itk_interior.f.classes childsite].$num configure -state normal
	incr num
      }
    }
    ONLY {
      set ::gdbtk_de(ALL) 0
      set ::gdbtk_de(ERRORS_ONLY) 0
      #enable class buttons
      set num 0
      foreach class $_classes {
	[$itk_interior.f.classes childsite].$num configure -state normal
	incr num
      }
    }
    ERRORS {
      set ::gdbtk_de(ALL) 0
      set ::gdbtk_de(ERRORS_ONLY) 1
      # disable class buttons
      set num 0
      foreach class $_classes {
	[$itk_interior.f.classes childsite].$num configure -state disabled
	incr num
      }
    }
  }
}


# -----------------------------------------------------------------------------
# NAME:		DebugWinDOpts::_apply
#
# SYNOPSIS:	_apply
#	
# DESC:		Callback for the "Apply" button. Loads the contents of the
#		log file through the new filter into the debug window. The
#		button is disabled if there is no log file.
# -----------------------------------------------------------------------------
itcl::body DebugWinDOpts::_apply { done } {
  set dw [ManagedWin::find DebugWin]
  debug $dw
  if {$dw != ""} {
    $dw loadlog
  }
  if {$done} {
    delete object $this
  }
}
@


1.12
log
@2004-04-05  Martin Hunt  <hunt@@redhat.com>

	* library/session.tcl: Make hostname and portname
	session-dependent. Add gdb_bg_num (the color
	scheme number) as a per-session variable.

	* library/prefs.tcl (pref_read): If color schemes are in use,
	set colors based on the current scheme.
	(pref_save): Add "bg" section.
	(pref_set_defaults): Define new variable gdb/use_color_schemes
	and define 16 default background colors.

	* library/managedwin.itb (ManagedWin::window_name): Append
	window "instance" string to window name.
	(ManagedWin::window_instance): Set window instance string.

	* library/debugwin.itb: Add a reconfig method to restore
	unique black textbackground, overriding color scheme.

	* library/csprefs.itb:
	* library/csprefs.ith: New files. Implement color scheme
	preferences.

	* library/util.tcl (set_bg_colors): New function.
	(r_setcolors): New function.

	* library/regwin.itb (_prefs_changed): Deleted.
	(reconfig): New function.  Updates tkTable color tags
	if color scheme changes.
	* library/regwin.ith: Update to reflect above changes.

	* library/srcbar.itcl (create_pref_menu): Add pulldown
	menus for "Edit Color Schemes..." and "Use Color Schemes".
	(reconfig): Fix up menu items for color schemes.

	* library/globalpref.itb (_init_var): Add
	gdb/use_color_schemes to variable list.
	(_build_win): Add a checkbutton to enable/disable
	color schemes.

	* library/gdbmenubar.itcl (menubar_add_cascade): Add a class
	argument so cascade menus can be managed by class too.

	* library/interface.tcl (gdbtk_tcl_fputs): Check for
	existence of gdbtk_state(console).  Stops annoying error
	messages.
	(gdbtk_tcl_fputs_error): Ditto.
	(gdbtk_tcl_fputs_log): Ditto.
@
text
@d2 1
a2 1
# Copyright 1998, 1999, 2000, 2001, 2002 Red Hat, Inc.
@


1.11
log
@2002-12-04  Martin M. Hunt  <hunt@@redhat.com>

	* library/helpviewer.tcl (open_help): Fix KDE apps list.

	* library/debugwin.itb (build_win): Fix help call.
@
text
@d46 15
@


1.10
log
@2002-11-06  Martin M. Hunt  <hunt@@redhat.com>

	* library/debugwin.itb: Remove VariableWin.  Add VarTree.
@
text
@d106 1
a106 2
    -command {ManagedWin::open HtmlViewer -force -file debug.html \
		-topics {{{"Debug Functions" debug.html}}}}
@


1.9
log
@2002-10-15  Martin M. Hunt  <hunt@@redhat.com>

	* library/* : auto_mkindex cannot rebuild
	tclIndex because it does not recognize the namespace
	import in main.tcl.  To get it to work again, rename the
	following:
		body -> itcl::body
		configbody -> itcl::configbody
		class -> itcl::class
@
text
@d341 1
a341 1
		  ManagedWin GDBWin StackWin SrcTextWin VariableWin global \
d343 1
a343 1
		  GDBEventHandler MemWin}
@


1.8
log
@update copyrights (dates verified with cvs)
@
text
@d24 1
a24 1
body DebugWin::constructor {args} {
d40 1
a40 1
body DebugWin::destructor {} {
d54 1
a54 1
body DebugWin::build_win {} {
d148 1
a148 1
body DebugWin::puts {level cls func msg} {
d200 1
a200 1
body DebugWin::put_trace {enter level func ar} {
d218 1
a218 1
body DebugWin::loadlog {} {
d251 1
a251 1
body DebugWin::_source_all {} {
d264 1
a264 1
body DebugWin::_clear {} {
d275 1
a275 1
body DebugWin::_mark_old {} {
d286 1
a286 1
body DebugWin::_save_contents {} {
d310 1
a310 1
body DebugWinDOpts::constructor {args} {
d324 1
a324 1
body DebugWinDOpts::destructor {} {
d337 1
a337 1
body DebugWinDOpts::build_win {} {
d415 1
a415 1
body DebugWinDOpts::_all {} {
d460 1
a460 1
body DebugWinDOpts::_apply { done } {
@


1.7
log
@2002-01-03  Martin M. Hunt  <hunt@@redhat.com>

	* library/debugwin.itb: Fix incorrect button names
	so they will be enabled/disabled properly.
@
text
@d2 1
a2 1
# Copyright 1998, 1999, 2001 Red Hat
@


1.6
log
@2001-11-08  Martin M. Hunt  <hunt@@redhat.com>

	* library/managedwin.itb (ManagedWin::shutdown): Fix
	typo in class name DebugWinDOpts.

	* library/debugwin.itb: Add MemWin to _classes.
@
text
@d423 1
a423 1
	$itk_interior.f.classes.childsite.$num configure -state normal
d433 1
a433 1
	$itk_interior.f.classes.childsite.$num configure -state normal
d443 1
a443 1
	$itk_interior.f.classes.childsite.$num configure -state disabled
@


1.5
log
@2001-11-05  Martin M. Hunt  <hunt@@redhat.com>

	* library/debugwin.itb (DebugWin::build_win):
	Initialize gdbtk_de(ERRORS_ONLY) and gdbtk_de(filter_var)
	(DebugWin::puts): Rewrite filter to handle new options.
	(DebugWinDOpts::build_win): Update list of classes. Change
	filter dialog so we can not display only errors and warnings
	or choose between displaying ALL classes except those selected
	or only selected classes. Fix "OK" button to apply
	changes before closing dialog.
	DebugWinOpts::_apply): Now takes an agrument that
	indicates if dialog should exit after applying filter.

	* library/debugwin.ith (_apply): Now takes an arg.

	* library/main.tcl: If GDBTK_DEBUGFILE is not set,
	use "insight.log" as the default. If GDBTK_DEBUG is set
	and nonzero, start logging debug messages to
	GDBTK_DEBUGFILE immediately. Never open the debug window
	automatically.

	* library/managedwin.itb (ManagedWin::shutdown): Don't
	save debug window options dialog on active list

	* library/srcwin.itb: Remove troublesome debug line.
@
text
@d341 3
a343 2
		ManagedWin GDBWin StackWin SrcTextWin VariableWin global BpWin \
		  TargetSelection ModalDialog ProcessWin GDBEventHandler}
@


1.4
log
@2001-10-29  Martin M. Hunt  <hunt@@redhat.com>

	* library/debugwin.itb: Don't increment number of
	TopLevelWins.
@
text
@d62 1
d64 1
a148 1

d151 23
a173 3
  if {!$::gdbtk_de(ALL) && $level == "I"} {
    if {[info exists ::gdbtk_de($cls)]} {
      if {!$::gdbtk_de($cls)} {
a175 2
    } elseif {!$::gdbtk_de(others)} {
      return
d341 4
a344 2
		ManagedWin GDBWin StackWin SrcTextWin VariableWin global BPWin \
		  TargetSelection ModalDialog ProcessWin}
d348 14
a361 1
  iwidgets::Labeledframe $f.classes -labelpos nw -labeltext {Classes}
d364 2
a365 3
  checkbutton $fr.0 -text ALL -variable ::gdbtk_de(ALL) -command [code $this _all]
  set i 1
  foreach cls [lsort $_classes] {
a371 2
  checkbutton $fr.$i -text others -variable ::gdbtk_de(others)
  incr i
d385 1
d388 1
a388 1
  button $btns.ok -text [gettext OK] -width 7 -command [code delete object $this] \
d391 1
a391 1
    -command [code $this _apply]
d415 30
a444 3
  if {$::gdbtk_de(ALL)} {
    foreach cls $_classes {
      set ::gdbtk_de($cls) 0
a445 1
    set ::gdbtk_de(others) 0
d459 1
a459 1
body DebugWinDOpts::_apply {} {
d461 1
d464 3
@


1.3
log
@2001-10-29  Martin M. Hunt  <hunt@@redhat.com>

	* library/debugwin.itb: Don't increment number of
	TopLevelWins.

	* library/managedwin.itb: Don't save DebugWins to
	active list.
@
text
@a42 1
  incr numTopWins -1
@


1.2
log
@2001-02-08  Fernando Nasser  <fnasser@@redhat.com>

	From 2001-02-06  Martin Hunt  <hunt@@redhat.com>
	* library/debugwin.itb: Change window name to "Insight Debug"
	* library/embeddedwin.ith: Fix debug messages.
	* library/locals.tcl: Ditto.
	* library/watch.tcl (postMenu): Ditto.
	* library/variables.tcl: Ditto.
	* library/interface.tcl: Ditto.
	* library/regwin.itb: Ditto.
	* library/gdbwin.ith: Ditto.
	* library/srcbar.itcl: Ditto.
@
text
@d25 1
a25 1
  debug ""
a28 1
  incr numTopWins
a130 1

@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
# Copyright 1998, 1999 Cygnus Solutions
d26 1
a26 1
  window_name "GDBTK Debug" "Debug"
@


1.1.1.1
log
@import insight-2000-02-04 snapshot (2nd try)
@
text
@@
