head	1.2;
access;
symbols
	insight_7_6-2013-04-10-branchpoint:1.2
	gdb_7_6-branch:1.2.0.22
	gdb_7_5-branch:1.2.0.20
	gdb_7_4-branch:1.2.0.18
	gdb_7_3-branch:1.2.0.16
	gdb_7_1-branch:1.2.0.14
	gdb_7_0-branch:1.2.0.12
	arc-sim-20090309:1.2
	arc-insight_6_8-branch:1.2.0.10
	arc-insight_6_8-branchpoint:1.2
	insight_6_8-branch:1.2.0.8
	insight_6_8-branchpoint:1.2
	gdb_6_8-branch:1.2.0.6
	insight_6_6-20070208-release:1.2
	gdb_6_6-branch:1.2.0.4
	gdb_6_6-2006-11-15-branchpoint:1.2
	insight_6_5-20061003-release:1.2
	gdb_6_5-branch:1.2.0.2
	gdb_6_5-2006-05-14-branchpoint:1.2
	gdb-csl-gxxpro-6_3-branch:1.1.0.4
	gdb-csl-gxxpro-6_3-branchpoint:1.1
	gdb_6_4-branch:1.1.0.2
	gdb_6_4-2005-11-01-branchpoint:1.1;
locks; strict;
comment	@# @;


1.2
date	2005.12.23.18.26.50;	author eliz;	state Exp;
branches;
next	1.1;

1.1
date	2004.08.27.23.13.14;	author hunt;	state Exp;
branches;
next	;


desc
@@


1.2
log
@	* library/attachdlg.itb:
	* library/actiondlg.tcl:
	* library/about.tcl:
	* library/ehandler.itb:
	* library/editor.tcl:
	* library/download.ith:
	* library/download.itb:
	* library/debugwin.ith:
	* library/debugwin.itb:
	* library/cspref.ith:
	* library/cspref.itb:
	* library/console.ith:
	* library/console.itb:
	* library/browserwin.ith:
	* library/browserwin.itb:
	* library/bpwin.ith:
	* library/bpwin.itb:
	* library/blockframe.ith:
	* library/managedwin.ith:
	* library/managedwin.itb:
	* library/main.tcl:
	* library/locals.tcl:
	* library/ipcpref.ith:
	* library/ipcpref.itb:
	* library/ipc.tcl:
	* library/interface.tcl:
	* library/helpviewer.tcl:
	* library/globalpref.ith:
	* library/globalpref.itb:
	* library/gdbwin.ith:
	* library/gdbtoolbar.itcl:
	* library/gdbmenubar.itcl:
	* library/gdbevent.ith:
	* library/gdbevent.itb:
	* library/embeddedwin.ith:
	* library/ehandler.ith:
	* library/srcwin.itb:
	* library/srctextwin.ith:
	* library/srctextwin.itb:
	* library/srcpref.ith:
	* library/srcpref.itb:
	* library/srcbar.itcl:
	* library/session.tcl:
	* library/regwin.ith:
	* library/regwin.itb:
	* library/process.ith:
	* library/process.itb:
	* library/prefs.tcl:
	* library/pluginwin.itcl:
	* library/modal.tcl:
	* library/memwin.ith:
	* library/memwin.itb:
	* library/mempref.ith:
	* library/mempref.itb:
	* library/watch.tcl:
	* library/watch.tcl:
	* library/warning.tcl:
	* library/vartree.ith:
	* library/vartree.itb:
	* library/util.tcl:
	* library/tracedlg.tcl:
	* library/toplevelwin.ith:
	* library/tfind_args.tcl:
	* library/tdump.tcl:
	* library/targetselection.ith:
	* library/targetselection.itb:
	* library/stackwin.ith:
	* library/stackwin.itb:
	* library/srcwin.ith:
@
text
@# IPC preferences dialog for Insight.
# Copyright (C) 2004 Red Hat
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License (GPL) as published by
# the Free Software Foundation; either version 2 of the License, or (at
# your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.


# ------------------------------------------------------------------
#  CONSTRUCTOR - create new IPC preferences window
# ------------------------------------------------------------------
itcl::body IPCPref::constructor {args} {
  window_name "Insight IPC Preferences"
  _init_var
  _build_win
}

# ------------------------------------------------------------------
#  METHOD:  init_var - initialize preference variables
# ------------------------------------------------------------------
itcl::body IPCPref::_init_var {} {
  set vlist [list gdb/ipc/enabled gdb/ipc/port gdb/ipc/step_button gdb/ipc/stop_button \
	       gdb/ipc/cont_button gdb/ipc/exit gdb/ipc/run_button]
  
  foreach var $vlist {
    set _saved($var) [pref get $var]
    set _new($var) $_saved($var)
  }
}


# ------------------------------------------------------------------
#  METHOD:  build_win - build the dialog
# ------------------------------------------------------------------
itcl::body IPCPref::_build_win {} {
  frame $itk_interior.f
  frame $itk_interior.f.a
  frame $itk_interior.f.b
  set f $itk_interior.f.a

  # Description frame
  set d [labelframe $f.desc -text "Description"]
  label $d.txt -justify left -wraplength 6i -background $::Colors(textbg) \
    -text "Some multiprocessor systems use multiple instances of Insight \
for debugging different CPUs.  In these cases it may be desirable to have \
all the instances stop, start, or continue at the same time.  The IPC \
feature can do that and more.\n\nThe IPC uses local TCP connections to the\
port number specified below."

  pack $d.txt -side top

  checkbutton $f.enabled -text "Enable IPC" -variable [scope _new(gdb/ipc/enabled)]
  frame $f.port
  spinbox $f.port.box -from 0 -to 65535 -wrap 0\
    -width 6 -textvariable [scope _new(gdb/ipc/port)] -validate key \
    -vcmd {string is integer %P}
  label $f.port.label -text "TCP Port Number"
  pack $f.desc -expand yes -fill both
  pack $f.enabled  -anchor w -pady 10
  pack $f.port.box $f.port.label -side left -pady 10
  pack $f.port -anchor w -pady 10

  set w [labelframe $f.buttons -text "Enable IPC on these buttons"]
  checkbutton $w.0 -text "Run" -variable [scope _new(gdb/ipc/run_button)]
  checkbutton $w.1 -text "Stop" -variable [scope _new(gdb/ipc/stop_button)]
  checkbutton $w.2 -text "Continue" -variable [scope _new(gdb/ipc/cont_button)]
  checkbutton $w.3 -text "Step" -variable [scope _new(gdb/ipc/step_button)]
  checkbutton $w.4 -text "Exit" -variable [scope _new(gdb/ipc/exit)]
  grid $w.0 $w.1 -padx 10 -pady 10 -sticky w
  grid $w.2 $w.3 -padx 10 -pady 10 -sticky w
  grid $w.4  -padx 10 -pady 10 -sticky w
  pack $w -fill both -expand yes
  pack $f.buttons -fill both -expand yes

  button $itk_interior.f.b.ok -text OK -width 7 -underline 0 -command [code $this _save]
  button $itk_interior.f.b.quit -text Cancel -width 7 -underline 0 -command [code $this _cancel]
  standard_button_box $itk_interior.f.b
  pack $itk_interior.f.a $itk_interior.f.b $itk_interior.f -expand yes -fill both -padx 5 -pady 5
}

# ------------------------------------------------------------------
#  METHOD:  apply - apply changes
# ------------------------------------------------------------------
itcl::body IPCPref::_apply {} {
  set enable_changed 0
  if {[pref get gdb/ipc/enabled] != $_new(gdb/ipc/enabled)} {
    set enable_changed 1
  } 
  if {$_new(gdb/ipc/enabled) && [pref get gdb/ipc/port] != $_new(gdb/ipc/port)} {
    set enable_changed 1
  }

  foreach var [array names _new] {
    if {$_new($var) != [pref get $var]} {
      pref set $var $_new($var)
    }
  }

  if {$enable_changed} {
    if {$_new(gdb/ipc/enabled)} {
      # must start up ipc
      catch {delete object $::insight_ipc}
      set ::insight_ipc [Iipc \#auto]
    } else {
      delete object $::insight_ipc
    }
  }
}

# ------------------------------------------------------------------
#  METHOD:  _cancel
# ------------------------------------------------------------------
itcl::body IPCPref::_cancel {} {
  foreach elem [array names _saved] {
    set cur_val [pref get $elem]
    if {[string compare $cur_val $_saved($elem)] != 0} {
      pref set $elem $_saved($elem)
    }
  }
  unpost
}

# ------------------------------------------------------------------
#  METHOD:  save - apply changes and quit
# ------------------------------------------------------------------
itcl::body IPCPref::_save {} {
  _apply
  unpost
}
@


1.1
log
@2004-08-27  Martin Hunt  <hunt@@redhat.com>

	* library/ipc.tcl: New file.
	* library/ipcpref.ith: New file.
	* library/ipcpref.itb: New file.

	* library/srcwin.itb (SrcWin::inferior): Call ipc
	send if enabled.

	* library/prefs.tcl (pref_set_defaults): Enable color
	schemes by default. Add IPC defaults.

	* library/srcbar.itcl (create_pref_menu): Create
	"Advanced" cascade menu and put "Edit Color Schemes"
	and "IPC Support" under it.

	* library/managedwin.itb (ManagedWin::destructor):
	If IPC enabled then send "quit" on exit.

	* library/main.tcl: Start IPC if enabled.

	* library/prefs.tcl (pref_set_defaults): Add IPC defaults.

	* library/gdbmenubar.itcl (menubar_get_current_menu):
	New method.
@
text
@d2 1
a2 1
# Copyright 2004 Red Hat
@

