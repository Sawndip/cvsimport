head	1.11;
access;
symbols
	insight_7_6-2013-04-10-branchpoint:1.11
	gdb_7_6-branch:1.11.0.18
	gdb_7_5-branch:1.11.0.16
	gdb_7_4-branch:1.11.0.14
	gdb_7_3-branch:1.11.0.12
	gdb_7_1-branch:1.11.0.10
	gdb_7_0-branch:1.11.0.8
	arc-sim-20090309:1.11
	arc-insight_6_8-branch:1.11.0.6
	arc-insight_6_8-branchpoint:1.11
	insight_6_8-branch:1.11.0.4
	insight_6_8-branchpoint:1.11
	gdb_6_8-branch:1.11.0.2
	insight_6_6-20070208-release:1.10.4.1
	gdb_6_6-branch:1.10.0.4
	gdb_6_6-2006-11-15-branchpoint:1.10
	insight_6_5-20061003-release:1.10
	gdb_6_5-branch:1.10.0.2
	gdb_6_5-2006-05-14-branchpoint:1.10
	gdb-csl-gxxpro-6_3-branch:1.9.0.8
	gdb-csl-gxxpro-6_3-branchpoint:1.9
	gdb_6_4-branch:1.9.0.6
	gdb_6_4-2005-11-01-branchpoint:1.9
	gdb_6_1-2004-04-05-release:1.9
	gdb_6_1-branch:1.9.0.4
	gdb_6_1-2004-03-01-gmt-branchpoint:1.9
	gdb_6_0-2003-10-04-release:1.9
	gdb_6_0-branch:1.9.0.2
	gdb_6_0-2003-06-23-branchpoint:1.9
	gdb_5_3-2002-12-12-release:1.5
	gdb_5_3-branch:1.5.0.2
	gdb_5_3-2002-09-04-branchpoint:1.5
	gdb_5_2_1-2002-07-23-release:1.4
	gdb_5_2-2002-04-29-release:1.4
	gdb_5_2-branch:1.4.0.10
	gdb_5_2-2002-03-03-branchpoint:1.4
	gdb_5_1_1-2002-01-24-release:1.4
	cygnus_cvs_20020108_pre:1.4
	gdb_5_1_0_1-2002-01-03-branch:1.4.0.8
	gdb_5_1_0_1-2002-01-03-branchpoint:1.4
	gdb_5_1-2001-11-21-release:1.4
	gdb_s390-2001-09-26-branch:1.4.0.6
	gdb_s390-2001-09-26-branchpoint:1.4
	gdb_5_1-2001-07-29-branch:1.4.0.4
	gdb_5_1-2001-07-29-branchpoint:1.4
	dberlin-typesystem-branch:1.4.0.2
	dberlin-typesystem-branchpoint:1.4
	insight-precleanup-2001-01-01:1.2
	gdb_5_0-2000-05-19-release:1.1.1.1
	gdb_4_18_2-2000-05-18-release:1.1.1.1
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.1
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.1
	gdb_5_0-2000-04-10-branch:1.1.1.1.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1.1.1
	repo-unification-2000-02-06:1.1.1.1
	insight-2000-02-04:1.1.1.1
	SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.11
date	2006.12.01.03.34.39;	author kseitz;	state Exp;
branches;
next	1.10;

1.10
date	2005.12.23.18.26.50;	author eliz;	state Exp;
branches
	1.10.4.1;
next	1.9;

1.9
date	2003.03.27.18.02.08;	author kseitz;	state Exp;
branches;
next	1.8;

1.8
date	2003.01.21.21.58.34;	author hunt;	state Exp;
branches;
next	1.7;

1.7
date	2002.11.06.21.05.24;	author hunt;	state Exp;
branches;
next	1.6;

1.6
date	2002.10.15.21.19.51;	author hunt;	state Exp;
branches;
next	1.5;

1.5
date	2002.03.05.22.22.20;	author hunt;	state Exp;
branches;
next	1.4;

1.4
date	2001.06.04.15.49.53;	author kseitz;	state Exp;
branches;
next	1.3;

1.3
date	2001.02.08.19.26.31;	author fnasser;	state Exp;
branches;
next	1.2;

1.2
date	2000.09.18.17.56.37;	author fnasser;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.07.00.19.42;	author jsm;	state Exp;
branches
	1.1.1.1;
next	;

1.10.4.1
date	2006.12.08.04.16.39;	author kseitz;	state Exp;
branches;
next	;

1.1.1.1
date	2000.02.07.00.19.42;	author jsm;	state Exp;
branches;
next	;


desc
@@


1.11
log
@        insight/293:
        * library/watch.tcl (no_inferior): Remove all varobjs and
        clear the display.
        (clear_file): Call no_inferior. Update comments.
        * library/locals.tcl: Remove unused variables "Running"
        and "Variables". Changed throughout.
        (no_inferior): Delete the current frame and clear the display.
        (clear_file): Call no_inferior. Update comments.
        (context_switch): To delete an Itcl object, one uses
        "delete object" not "destroy".
@
text
@# Watch window for Insight.
# Copyright (C) 2002, 2003, 2006 Red Hat
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License (GPL) as published by
# the Free Software Foundation; either version 2 of the License, or (at
# your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.


# ----------------------------------------------------------------------
# Implements watch windows for gdb.
# ----------------------------------------------------------------------

itcl::class WatchWin {
  inherit EmbeddedWin GDBWin
  # ------------------------------------------------------------------
  #  CONSTRUCTOR - create new watch window
  # ------------------------------------------------------------------
  constructor {args} {
    debug

    gdbtk_busy
    build_win $itk_interior
    gdbtk_idle
    
    add_hook gdb_no_inferior_hook "$this no_inferior"
    add_hook gdb_clear_file_hook [code $this clear_file]
    add_hook file_changed_hook [code $this clear_file]
  }
  

  # ------------------------------------------------------------------
  #   PUBLIC METHOD:  busy - BusyEvent handler
  #           Disable all ui elements that could affect gdb's state
  # ------------------------------------------------------------------
  method busy {event} {
    debug
    set Running 1
    cursor watch
  }

  # Re-enable the UI
  method idle {event} {
    debug
    set Running 0
    cursor {}
  }

  # ------------------------------------------------------------------
  # METHOD:   no_inferior
  #           Reset this object.
  # ------------------------------------------------------------------
  method no_inferior {} {
    debug
    cursor {}
    set Running 0
    foreach var $Watched {
      $var delete
    }
    $tree remove all
  }
  
  # ------------------------------------------------------------------
  #  METHOD:  cursor - change the toplevel's cursor
  # ------------------------------------------------------------------
  method cursor {what} {
    [winfo toplevel [namespace tail $this]] configure -cursor $what
    ::update idletasks
  }
  
  
  # ------------------------------------------------------------------
  # METHOD: build_win - build window for watch. 
  # ------------------------------------------------------------------
  method build_win {f} {
    #debug "$f"
    
    set f [::frame $f.f]
    set treeFrame  [frame $f.top]
    set entryFrame [frame $f.expr]

    set tree [VarTree $treeFrame.tree]
    pack $tree -expand yes -fill both

    set Entry [entry $entryFrame.ent -font global/fixed]
    button $entryFrame.but -text "Add Watch" -command [code $this validateEntry]
    pack $f -fill both -expand yes
    grid $entryFrame.ent -row 0 -column 0 -sticky news -padx 2
    grid $entryFrame.but -row 0 -column 1 -padx 2
    grid columnconfigure $entryFrame 0 -weight 1
    grid columnconfigure $entryFrame 1

    grid $treeFrame -row 0 -column 0 -sticky news
    grid $entryFrame -row 1 -column 0 -padx 5 -pady 5 -sticky news
    grid columnconfigure $f 0 -weight 1
    grid rowconfigure $f 0 -weight 1
    window_name "Watch"
    ::update idletasks
    # Binding for the entry
    bind $entryFrame.ent <Return> "$entryFrame.but flash; $entryFrame.but invoke"
  }

  method validateEntry {} {
    if {!$Running} {
      debug "Getting entry value...."
      set variable [$Entry get]
      debug "Got $variable, going to add"
      set ok [add $variable]
      debug "Added... with ok: $ok"      
      $Entry delete 0 end
    }
  }

  # ------------------------------------------------------------------
  #  METHOD: clear_file - Clear out state so that a new executable
  #             can be loaded. For WatchWins, this means doing
  #             everything that no_inferior does.
  # ------------------------------------------------------------------
  method clear_file {} {
    debug
    no_inferior
  }

  # ------------------------------------------------------------------
  # DESTRUCTOR - delete watch window
  # ------------------------------------------------------------------
  destructor {
    debug
    set tree {}

    # Remove this window and all hooks
    remove_hook gdb_no_inferior_hook "$this no_inferior"
    remove_hook gdb_clear_file_hook [code $this clear_file]
    remove_hook file_changed_hook [code $this clear_file]

    foreach var $Watched {
      $var delete
    }
  }

  method remove {entry} {
    debug $entry

    # Remove this entry from the list of watched variables
    set Watched [lremove $Watched $entry]

    $entry remove
    $entry delete
  }


  method update {event} {
    $tree update
  }


  # ------------------------------------------------------------------
  # METHOD: add - add a variable to the watch window
  # ------------------------------------------------------------------
  method add {name} {
    debug "Trying to add \"$name\" to watch"
 
    # Strip all the junk after the first \n
    set var [split $name \n]
    set var [lindex $var 0]
    set var [split $var =]
    set var [lindex $var 0]

    # Strip out leading/trailing +, -, ;, spaces, commas
    set var [string trim $var +-\;\ \r\n,]

    # Make sure that we have a valid variable
    set err [catch {gdb_cmd "set variable $var"} errTxt]
    if {$err} {
      dbug W "ERROR adding variable: $errTxt"
      ManagedWin::open WarningDlg -transient \
	-over $this -message [list $errTxt] -ignorable "watchvar"
    } else {
      if {[string index $var 0] == "\$"} {
	# We must make a special attempt at verifying convenience
	# variables.. Specifically, these are printed as "void"
	# when they are not defined. So if a user type "$_I_made_tbis_up",
	# gdb responds with the value "void" instead of an error
	catch {gdb_cmd "p $var"} msg
	set msg [split $msg =]
	set msg [string trim [lindex $msg 1] \ \r\n]
	if {$msg == "void"} {
	  return 0
	}
      }

      debug "In add, going to add $name"
      # make one last attempt to get errors
      set err [catch {set foo($name) 1}]
      debug "err1=$err"
      set err [expr {$err + [catch {expr {$foo($name) + 1}}]}]
      debug "err2=$err"
      if {!$err} {
	set var [gdb_variable create -expr $name]
	debug "var=$var"
	$tree add $var
	lappend Watched $var
	return 1
      }
    }    
    return 0
  }

  protected variable Entry
  protected variable Watched {}
  protected variable tree
  protected variable Running
}
@


1.10
log
@	* library/attachdlg.itb:
	* library/actiondlg.tcl:
	* library/about.tcl:
	* library/ehandler.itb:
	* library/editor.tcl:
	* library/download.ith:
	* library/download.itb:
	* library/debugwin.ith:
	* library/debugwin.itb:
	* library/cspref.ith:
	* library/cspref.itb:
	* library/console.ith:
	* library/console.itb:
	* library/browserwin.ith:
	* library/browserwin.itb:
	* library/bpwin.ith:
	* library/bpwin.itb:
	* library/blockframe.ith:
	* library/managedwin.ith:
	* library/managedwin.itb:
	* library/main.tcl:
	* library/locals.tcl:
	* library/ipcpref.ith:
	* library/ipcpref.itb:
	* library/ipc.tcl:
	* library/interface.tcl:
	* library/helpviewer.tcl:
	* library/globalpref.ith:
	* library/globalpref.itb:
	* library/gdbwin.ith:
	* library/gdbtoolbar.itcl:
	* library/gdbmenubar.itcl:
	* library/gdbevent.ith:
	* library/gdbevent.itb:
	* library/embeddedwin.ith:
	* library/ehandler.ith:
	* library/srcwin.itb:
	* library/srctextwin.ith:
	* library/srctextwin.itb:
	* library/srcpref.ith:
	* library/srcpref.itb:
	* library/srcbar.itcl:
	* library/session.tcl:
	* library/regwin.ith:
	* library/regwin.itb:
	* library/process.ith:
	* library/process.itb:
	* library/prefs.tcl:
	* library/pluginwin.itcl:
	* library/modal.tcl:
	* library/memwin.ith:
	* library/memwin.itb:
	* library/mempref.ith:
	* library/mempref.itb:
	* library/watch.tcl:
	* library/watch.tcl:
	* library/warning.tcl:
	* library/vartree.ith:
	* library/vartree.itb:
	* library/util.tcl:
	* library/tracedlg.tcl:
	* library/toplevelwin.ith:
	* library/tfind_args.tcl:
	* library/tdump.tcl:
	* library/targetselection.ith:
	* library/targetselection.itb:
	* library/stackwin.ith:
	* library/stackwin.itb:
	* library/srcwin.ith:
@
text
@d2 1
a2 1
# Copyright (C) 2002, 2003 Red Hat
d62 4
d121 2
a122 2
  #             can be loaded. For WatchWins, this means deleting
  #             the Watched list.
d126 1
a126 1
    set Watched {}
@


1.10.4.1
log
@Update from HEAD to fix some serious problems.
@
text
@d2 1
a2 1
# Copyright (C) 2002, 2003, 2006 Red Hat
a61 4
    foreach var $Watched {
      $var delete
    }
    $tree remove all
d117 2
a118 2
  #             can be loaded. For WatchWins, this means doing
  #             everything that no_inferior does.
d122 1
a122 1
    no_inferior
@


1.9
log
@        From Nick Kelsey <nickk@@ubicom.com>:
        * process.itb (build_win): Removed ide_sizebox instantiation that is
        no longer required and is causing errors for win hosts.
        * tdump.tcl (build_win): Ditto.
        * locals.tcl (build_win): Removed ide_sizebox instantiation that is
        no longer required and already commented out.
        * regwin.itb (build_win): Ditto.
        * srcwin.itb (constructor): Ditto.
        * stackwin.itb (constructor): Ditto.
        * watch.tcl (constructor): Ditto.
@
text
@d2 1
a2 1
# Copyright 2002, 2003 Red Hat
@


1.8
log
@2003-01-21  Martin M. Hunt  <hunt@@redhat.com>
	* library/main.tcl: Don't require iwidgets 3.0.

	* library/console.itb (Console::_build_win): Rename
	tkTextClosestGap to tk::TextClosestGap. Rename tkCancelRepeat
	to tk::CancelRepeat. Rename tkPriv to tk::Priv. Needed for tk 8.4.1.

	* library/bpwin.itb (BpWin::build_win): Don't
	create sizebox.
	* library/locals.tcl (build_win): Ditto.
	* library/regwin.itb (RegWin::_build_win): Ditto.
	* library/srcwin.itb (SrcWin::constructor): Ditto.
	* library/stackwin.itb (StackWin::build_win): Ditto.
	* library/watch.tcl (build_win): Ditto.
@
text
@a93 6
    if {$::tcl_platform(platform) == "windows"} {
#      grid columnconfigure $entryFrame 1 -pad 20
#      ide_sizebox [namespace tail $this].sizebox
#      place [namespace tail $this].sizebox -relx 1 -rely 1 -anchor se
    }

@


1.7
log
@2002-11-06  Martin M. Hunt  <hunt@@redhat.com>

	* library/watch.tcl: Completely rewritten to use VarTree.
	* library/locals.tcl: Completely rewritten to use VarTree.
	* library/variables.tcl: Deleted.
	* library/vartree.ith: New file.
	* library/vartree.itb: New file. Implements a variable
	tree.
	* library/tclIndex: Rebuilt.
@
text
@d2 1
a2 1
# Copyright 2002 Red Hat
d95 3
a97 3
      grid columnconfigure $entryFrame 1 -pad 20
      ide_sizebox [namespace tail $this].sizebox
      place [namespace tail $this].sizebox -relx 1 -rely 1 -anchor se
@


1.6
log
@2002-10-15  Martin M. Hunt  <hunt@@redhat.com>

	* library/* : auto_mkindex cannot rebuild
	tclIndex because it does not recognize the namespace
	import in main.tcl.  To get it to work again, rename the
	following:
		body -> itcl::body
		configbody -> itcl::configbody
		class -> itcl::class
@
text
@d2 1
a2 1
# Copyright 1997, 1998, 1999, 2001, 2002 Red Hat
d16 1
a16 2
# Implements watch windows for gdb. Inherits the VariableWin
# class from variables.tcl. 
d20 16
a35 1
  inherit VariableWin
d38 2
a39 1
  #  CONSTRUCTOR - create new locals window
d41 5
a45 2
  constructor {args} {
    set Sizebox 0
d47 5
a51 4
    # Only allow one watch window for now...
    if {$init} {
      set init 0
    }
d55 20
a74 3
  # METHOD: build_win - build window for watch. This supplants the 
  #         one in VariableWin, so that we can add the entry at the
  #         bottom.
a76 1
    global tcl_platform
d78 1
a78 7

    set Menu [build_menu_helper Watch]
    $Menu add command -label Remove -underline 0 \
      -command [format {
	%s remove [%s getSelection]
      } $this $this]

d82 4
a85 1
    VariableWin::build_win $treeFrame
d94 1
a94 1
    if {$tcl_platform(platform) == "windows"} {
d104 1
a104 1
    window_name "Watch Expressions"
a107 17

  }

  method selectionChanged {entry} {
    VariableWin::selectionChanged $entry

    set state disabled
    set entry [getSelection]
    foreach var $Watched {
      set name [lindex $var 0]
      if {"$name" == "$entry"} {
	set state normal
	break
      }
    }

    $Menu entryconfigure last -state $state
d116 1
a116 2
      debug "Added... with ok: $ok"
      
d124 1
a124 2
  #             the Watched list, in addition to the normal
  #             VariableWin stuff.
d127 1
a127 1
    VariableWin::clear_file
d135 2
a136 4
    foreach var $Watched {
      $var delete
    }
  }
d138 4
a141 2
  method postMenu {X Y} {
#    debug "$x $y"
a142 4
    set entry [getEntry $X $Y]
    
    # Disable "Remove" if we are not applying this to the parent
    set found 0
d144 1
a144 11
      set name [lindex $var 0]
      if {"$name" == "$entry"} {
	set found 1
	break
      }
    }

    # Ok, nasty, but a sad reality...
    set noStop [catch {$Popup index "Remove"} i]
    if {!$noStop} {
      $Popup delete $i
a145 5
    if {$found} {
      $Popup add command -label "Remove" -command "$this remove \{$entry\}"
    }

    VariableWin::postMenu $X $Y
d149 1
a149 1
    global Display Update
d152 1
a152 10
    set i [lsearch -exact $Watched $entry]
    if {$i == -1} {
      debug "WHAT HAPPENED?"
      return
    }
    set Watched [lreplace $Watched $i $i]    

    set list [$Hlist info children $entry]
    lappend list $entry
    $Hlist delete entry $entry
d154 1
a157 27
  # ------------------------------------------------------------------
  # METHOD: getVariablesBlankPath
  # Overrides VarialbeWin::getVariablesBlankPath. For a Watch Window,
  # this method returns a list of watched variables.
  #
  # ONLY return items that need to be added to the Watch Tree
  # (or use deleteTree)
  # ------------------------------------------------------------------
  method getVariablesBlankPath {} {
#    debug
    set list {}

    set variables [displayedVariables {}]
    foreach var $variables {
      set name [$var name]
      set on($name) 1
    }

    foreach var $Watched {
      set name [$var name]
      if {![info exists on($name)]} {
	lappend list $var
      }
    }

    return $list
  }
d160 1
a160 8
    global Update Display
    debug "START WATCH UPDATE CALLBACK"
    catch {populate {}} msg
    catch {VariableWin::update dummy} msg
    debug "Did VariableWin::update with return \"$msg\""

    # Make sure all variables are marked as _not_ Openable?
    debug "END WATCH UPDATE CALLBACK"
a162 3
  method showMe {} {
    debug "Watched: $Watched"
  }
d168 1
a168 1
      debug "Trying to add \"$name\" to watch"
d202 1
d204 1
d206 5
a210 5
	  set var [gdb_variable create -expr $name]
	  set ::Update($this,$var) 1
	  lappend Watched $var
	  update dummy
	  return 1
d212 1
a212 2
    }

d218 2
a219 2
  protected variable Menu {}
  protected common init 1
@


1.5
log
@2002-03-05  Martin M. Hunt  <hunt@@redhat.com>

	* library/prefs.tcl (pref_read): If a preference specifies
	"src-font", substitute "global/fixed".
	(pref_set_defaults): Change defaults from "src-font" to
	"global/fixed". Do not create font object "src-font". Do
	not add hook to trace its changes.
	(pref_src-font_trace): Remove.

	* library/console.itb (Console::_update_option): Remove
	font update because this happens automatically.

	* library/globalpref.itb: No need to set
	changed flag for fonts; updates happen automatically
	when prefs are updated.

	* library/bpwin.itb: Replaced src-font with global/fixed.
	* library/browserwin.itb: Ditto.
	* library/mempref.itb: Ditto.
	* library/memwin.itb: Ditto.
	* library/process.itb: Ditto.
	* library/regwin.itb: Ditto.
	* library/srcbar.itcl: Ditto.
	* library/srcpref.itb: Ditto.
	* library/srctextwin.itb: Ditto.
	* library/srcwin.itb: Ditto.
	* library/stackwin.itb: Ditto.
	* library/tdump.tcl: Ditto.
	* library/tracedlg.tcl: Ditto.
	* library/variables.tcl: Ditto.
	* library/watch.tcl: Ditto.
@
text
@d20 1
a20 1
class WatchWin {
@


1.4
log
@	* library/interface.tcl (gdb_update_hook): Mark as deprecated.
	(gdbtk_update): Dispatch and UpdateEvent, too.
	* library/ehandler.ith (update): New event handler.
	* library/gdbevent.ith (UpdateEvent): New event.
	* library/gdbevent.itb (UpdateEvent::constructor): New method.
	(UpdateEvent::get): New method.
	* library/kod.ith (udpate): Match event handler definition.
	* library/kod.itb (update): Ditto.
	(build_win): Pass dummy argument to update method.
	(top): Ditto.
	(up): Ditto.
	(set_variable): Ditto.
	* library/memwin.ith (update): Match event handler definition.
	* library/memwin.itb (update): Ditto.
	(constructor): Remove gdb_update_hook.
	(destructor): Ditto.
	* library/process.ith (update): Match event handler definition.
	* library/process.itb (update): Ditto.
	(constructor): Remove gdb_update_hook.
	(destructor): Ditto.
	(build_win): Pass dummy argument to update method.
	* library/regwin.ith (update): Match event handler definition.
	* library/regwin.itb (update): Ditto.
	(constructor): Remove gdb_update_hook.
	(destructor): Ditto.
	(build_win): Pass dummy argument to update method.
	(but3): Ditto.
	(unedit): Ditto.
	* library/stackwin.ith (update): Match event handler definition.
	* library/stackwin.itb (update): Ditto.
	(constructor): Remove gdb_update_hook.
	(destructor): Ditto.
	(build_win): Pass dummy argument to update method.
	* library/tdump.tcl (update): Match event handler definition.
	(constructor): Remove gdb_update_hook.
	(destructor): Ditto.
	(build_win): Pass dummy argument to update method.
	* library/variables.tcl (update): Match event handler definition.
	(build_win): Pass dummy argument to update method.
	* library/locals.tcl (update): Match event handler definition.
	(constructor): Pass dummy argument to update method.
	* library/watch.tcl (update): Match event handler definition.
	Pass dummy argument to VariableWin::update.
	(add): Pass dummy argument to update method.
	* library/srcwin.ith (update): New method.
	(update_hook_init): Remove.
	* library/srcwin.itb (update): New method.
	(constructor): Remove gdb_update_hook.
	(destructor): Ditto.
	* tclIndex: Regenerate.
@
text
@d2 1
a2 1
# Copyright 1997, 1998, 1999, 2001 Red Hat
d54 1
a54 1
    set Entry [entry $entryFrame.ent -font src-font]
@


1.3
log
@2001-02-08  Fernando Nasser  <fnasser@@redhat.com>

	From 2001-02-06  Martin Hunt  <hunt@@redhat.com>
	* library/debugwin.itb: Change window name to "Insight Debug"
	* library/embeddedwin.ith: Fix debug messages.
	* library/locals.tcl: Ditto.
	* library/watch.tcl (postMenu): Ditto.
	* library/variables.tcl: Ditto.
	* library/interface.tcl: Ditto.
	* library/regwin.itb: Ditto.
	* library/gdbwin.ith: Ditto.
	* library/srcbar.itcl: Ditto.
@
text
@d200 1
a200 1
  method update {} {
d204 1
a204 1
    catch {VariableWin::update} msg
d258 1
a258 1
	  update
@


1.2
log
@2000-09-18  Fernando Nasser  <fnasser@@cygnus.com>

	* watch.tcl (build_win): Use code when setting callback.
@
text
@d1 2
a2 2
# Watch window for GDBtk.
# Copyright 1997, 1998, 1999 Cygnus Solutions
d42 1
a42 1
    #debug "WatchWin::build_win $f"
d128 1
a128 1
#    debug "WatchWin::postMenu $x $y"
d181 1
a181 1
#    debug "WatchWin::getVariablesBlankPath"
@


1.1
log
@Initial revision
@
text
@d55 1
a55 1
    button $entryFrame.but -text "Add Watch" -command "$this validateEntry"
@


1.1.1.1
log
@import insight-2000-02-04 snapshot (2nd try)
@
text
@@
