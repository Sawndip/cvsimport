head	1.8;
access;
symbols
	insight_7_6-2013-04-10-branchpoint:1.8
	gdb_7_6-branch:1.8.0.12
	gdb_7_5-branch:1.8.0.10
	gdb_7_4-branch:1.8.0.8
	gdb_7_3-branch:1.8.0.6
	gdb_7_1-branch:1.8.0.4
	gdb_7_0-branch:1.8.0.2
	arc-sim-20090309:1.7
	arc-insight_6_8-branch:1.7.0.10
	arc-insight_6_8-branchpoint:1.7
	insight_6_8-branch:1.7.0.8
	insight_6_8-branchpoint:1.7
	gdb_6_8-branch:1.7.0.6
	insight_6_6-20070208-release:1.7
	gdb_6_6-branch:1.7.0.4
	gdb_6_6-2006-11-15-branchpoint:1.7
	insight_6_5-20061003-release:1.7
	gdb_6_5-branch:1.7.0.2
	gdb_6_5-2006-05-14-branchpoint:1.7
	gdb-csl-gxxpro-6_3-branch:1.5.0.8
	gdb-csl-gxxpro-6_3-branchpoint:1.5
	gdb_6_4-branch:1.5.0.6
	gdb_6_4-2005-11-01-branchpoint:1.5
	gdb_6_1-2004-04-05-release:1.5
	gdb_6_1-branch:1.5.0.4
	gdb_6_1-2004-03-01-gmt-branchpoint:1.5
	gdb_6_0-2003-10-04-release:1.5
	gdb_6_0-branch:1.5.0.2
	gdb_6_0-2003-06-23-branchpoint:1.5
	gdb_5_3-2002-12-12-release:1.3
	gdb_5_3-branch:1.3.0.2
	gdb_5_3-2002-09-04-branchpoint:1.3
	gdb_5_2_1-2002-07-23-release:1.2
	gdb_5_2-2002-04-29-release:1.2
	gdb_5_2-branch:1.2.0.10
	gdb_5_2-2002-03-03-branchpoint:1.2
	gdb_5_1_1-2002-01-24-release:1.2
	cygnus_cvs_20020108_pre:1.2
	gdb_5_1_0_1-2002-01-03-branch:1.2.0.8
	gdb_5_1_0_1-2002-01-03-branchpoint:1.2
	gdb_5_1-2001-11-21-release:1.2
	gdb_s390-2001-09-26-branch:1.2.0.6
	gdb_s390-2001-09-26-branchpoint:1.2
	gdb_5_1-2001-07-29-branch:1.2.0.4
	gdb_5_1-2001-07-29-branchpoint:1.2
	dberlin-typesystem-branch:1.2.0.2
	dberlin-typesystem-branchpoint:1.2
	insight-precleanup-2001-01-01:1.1.1.1
	gdb_5_0-2000-05-19-release:1.1.1.1
	gdb_4_18_2-2000-05-18-release:1.1.1.1
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.1
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.1
	gdb_5_0-2000-04-10-branch:1.1.1.1.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1.1.1
	repo-unification-2000-02-06:1.1.1.1
	insight-2000-02-04:1.1.1.1
	SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.8
date	2009.04.24.03.28.12;	author kseitz;	state Exp;
branches;
next	1.7;

1.7
date	2006.01.24.01.32.26;	author kseitz;	state Exp;
branches;
next	1.6;

1.6
date	2005.12.23.18.26.50;	author eliz;	state Exp;
branches;
next	1.5;

1.5
date	2003.02.04.07.43.32;	author hunt;	state Exp;
branches;
next	1.4;

1.4
date	2002.10.15.21.19.51;	author hunt;	state Exp;
branches;
next	1.3;

1.3
date	2002.03.05.22.22.19;	author hunt;	state Exp;
branches;
next	1.2;

1.2
date	2001.03.15.18.31.38;	author tromey;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.07.00.19.42;	author jsm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.07.00.19.42;	author jsm;	state Exp;
branches;
next	;


desc
@@


1.8
log
@	* library/mempref.itb (build_win): Replace libgui's "Labelledframe"
	with the iwidget's LabeledFrame. Replaced all occurrances.
	* libarary/memwin.itb (create_prefs): Use ManagedWin::open_dlg
	instead of ManagedWin::open.
@
text
@# Memory display preferences window for Insight.
# Copyright (C) 1998, 1999, 2002, 2003, 2006, 2009 Red Hat, Inc
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License (GPL) as published by
# the Free Software Foundation; either version 2 of the License, or (at
# your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.


# ------------------------------------------------------------------
#  METHOD:  constructor - build the dialog
# ------------------------------------------------------------------
itcl::body MemPref::constructor {args} {

  window_name "Memory Preferences"

  eval itk_initialize $args
  
  if {$float_size == ""} {
    set float_size [gdb_eval sizeof(float)]
    set double_size [gdb_eval sizeof(double)]
  }
  
  if {[string compare $format f] == 0} {
    set gformat x
    set format_disabled 1
    if {$size == $float_size} {
      set gsize 3
    } elseif {$size == $double_size} {
      set gsize 5
    }
  } else {
    set gsize $size
    set gformat $format
  }
  
  set gnumbytes $numbytes
  set gbpr $bpr
  set gbprlist [list 4 8 16 32 64 128]
  set gascii $ascii
  set gascii_char $ascii_char
  
  build_win
  
  if {$format_disabled} {
    set format_disabled 0
    disable_format
  }
  
  wm resizable [winfo toplevel $itk_interior] 0 0
}

# ------------------------------------------------------------------
#  METHOD:  destructor - destroy the dialog
# ------------------------------------------------------------------
itcl::body MemPref::destructor {} {
  trace vdelete [scope gnumbytes] w [code $this check_numbytes]
}

# ------------------------------------------------------------------
#  METHOD:  build_win - build the dialog
# ------------------------------------------------------------------
itcl::body MemPref::build_win {} {

  frame $itk_interior.f
  set f [frame $itk_interior.f.a]
  frame $itk_interior.f.b

  # SIZE
  iwidgets::Labeledframe $f.f1 -labelpos nw -labeltext [gettext "Size"]
  set fr [$f.f1 childsite]

  set Widgets(rb-Byte) [radiobutton $fr.1 -variable [scope gsize] -text Byte \
			  -value 1 -command [code $this enable_format]]
  set Widgets(rb-half_word) [radiobutton $fr.2 -variable [scope gsize] -text "Half Word" \
			       -value 2 -command [code $this enable_format]]
  set Widgets(rb-word) [radiobutton $fr.4 -variable [scope gsize] -text Word \
			  -value 4 -command [code $this enable_format]]
  set Widgets(rb-d_word) [radiobutton $fr.8 -variable [scope gsize] -text "Double Word" \
			    -value 8 -command [code $this enable_format]]
  set Widgets(rb-float) [radiobutton $fr.f -variable [scope gsize] -text Float \
			   -value 3 -command [code $this disable_format]]
  set Widgets(rb-d_float) [radiobutton $fr.d -variable [scope gsize] -text "Double Float" \
			     -value 5 -command [code $this disable_format]]
  grid $fr.1 $fr.4 $fr.f -sticky w -padx 4
  grid $fr.2 $fr.8 $fr.d -sticky w -padx 4

  # FORMAT
  iwidgets::Labeledframe $f.f2 -labelpos nw -labeltext [gettext "Format"]
  set fr [$f.f2 childsite]
  set Widgets(rb-binary) [radiobutton $fr.1 -variable [scope gformat] \
			    -text Binary -value t]
  set Widgets(rb-octal) [radiobutton $fr.2 -variable [scope gformat] \
			   -text Octal -value o]
  set Widgets(rb-hex) [radiobutton $fr.3 -variable [scope gformat] \
			 -text Hex -value x]
  set Widgets(rb-signed_dec) [radiobutton $fr.4 -variable [scope gformat] \
				-text "Signed Decimal" -value d]
  set Widgets(rb-unsign_dec) [radiobutton $fr.5 -variable [scope gformat] \
				-text "Unsigned Decimal" -value u]

  grid $fr.1 $fr.2 $fr.3 -sticky w -padx 4
  grid $fr.4 $fr.5 x -sticky w -padx 4

  # TOTAL BYTES
  iwidgets::Labeledframe $f.fx -labelpos nw \
      -labeltext [gettext "Number of Bytes"]

  if {$gnumbytes == 0} {
    set gnumbytes $default_numbytes
    set gvar 0
  } else {
    set gvar 1
  }

  set fr [$f.fx childsite]
  set Widgets(rb-win_size) [radiobutton $fr.1 -variable [scope gvar] -text "Depends on window size" \
			      -value 0 -command [code $this toggle_size_control]]
  frame $fr.2
  set Widgets(rb-fixed) [radiobutton $fr.2.b -variable [scope gvar] -text Fixed \
			   -value 1 -command [code $this toggle_size_control]]

  set old_numbytes $default_numbytes
  set Widgets(e-numbytes) [entry $fr.2.e -textvariable [scope gnumbytes] -width 3]
  set normal_background [$Widgets(e-numbytes) cget -background]

  #
  # Trace gnumbytes so it will always be a +'ve integer...  Have to set this
  # trace AFTER the widget's textvariable is set so this trace will fire
  # BEFORE the widget's trace.
  #

  trace variable [scope gnumbytes] w [code $this check_numbytes]

  label $fr.2.l -text bytes
  grid $fr.2.b $fr.2.e $fr.2.l -sticky we
  grid $fr.1 x -sticky w -padx 4
  grid $fr.2 x -sticky w -padx 4
  grid columnconfigure $fr 1 -weight 1

  # MISC
  iwidgets::Labeledframe $f.1 -labelpos nw \
      -labeltext [gettext "Miscellaneous"]
  set fr [$f.1 childsite]
  frame $fr.1
  label $fr.1.plabel -height 1 -width 1 -bg $color -relief raised  
  set Widgets(b-color) [button $fr.1.pc -text "Change color..."  \
			  -command [code $this pick $fr.1.plabel]]
  grid $fr.1.plabel $fr.1.pc
  frame $fr.2
  label $fr.2.l -text "Bytes Per Row "
  set Widgets(b-bytes_per_row) [::combobox::combobox $fr.2.c \
				  -command [code $this set_bytes_per_row]  \
				  -width 4 -editable 1 -font global/fixed \
				  -bg $::Colors(textbg)]
  foreach item $gbprlist {
    $fr.2.c list insert end $item
  }
  $fr.2.c configure -value $gbpr

  pack $fr.2.l -side left -anchor e
  pack $fr.2.c -side right

  set Widgets(cb-display_ascii) [checkbutton $fr.3 -variable [scope gascii] -text "Display ASCII"]
  frame $fr.4
  set Widgets(e-ascii_char) [entry $fr.4.e -textvariable [scope gascii_char] -width 1]
  label $fr.4.l -text "Control Char"
  grid $fr.4.e $fr.4.l -sticky we
  grid $fr.2 x $fr.3 -sticky w -padx 4
  grid $fr.4 -sticky w -padx 4
  grid columnconfigure $fr 1 -weight 1

  grid $f.f1 -padx 5 -pady 6 -sticky news
  grid $f.f2 -padx 5 -pady 6 -sticky news
  grid $f.fx -padx 5 -pady 6 -sticky news
  grid $f.1 -padx 5 -pady 6 -sticky we


  set Widgets(b-ok) [button $itk_interior.f.b.ok -text OK -command [code $this ok] -width 7 -default active]
  focus $Widgets(b-ok)
  
  # If there is an OK button, set Return in the entry field to invoke it...
  
  bind $Widgets(e-numbytes) <KeyPress-Return> "$Widgets(b-ok) flash ; $Widgets(b-ok) invoke"
  
  set Widgets(b-cancel) [button $itk_interior.f.b.quit -text Cancel -command [code $this cancel] -width 7]
  set Widgets(b-apply) [button $itk_interior.f.b.apply -text Apply -command [code $this apply] -width 7]
  standard_button_box $itk_interior.f.b
  
  grid $itk_interior.f.a 
  grid $itk_interior.f.b -sticky news
  grid $itk_interior.f
  
  #
  # Set the state of the window size entry here...
  #
  toggle_size_control

}

# ------------------------------------------------------------------
#  METHOD:  busy - make the widget unusable
# ------------------------------------------------------------------
itcl::body MemPref::busy {} {
  set top [winfo toplevel $itk_interior]
  $top configure -cursor watch
  
  # Disable all the radiobuttons and what not
  foreach w [array names Widgets] {
    set WidgetState($w) [$Widgets($w) cget -state]
  }
  foreach w [array names Widgets] {
    $Widgets($w) configure -state disabled
  }
}

# ------------------------------------------------------------------
#  METHOD:  idle - make the widget useable
# ------------------------------------------------------------------
itcl::body MemPref::idle {} {
  set top [winfo toplevel $itk_interior]
  $top configure -cursor {}

  # Re-enable all widgets
  foreach w [array names Widgets] {
    $Widgets($w) configure -state $WidgetState($w)
  }
}
# ------------------------------------------------------------------
#  METHOD:  ok - apply and quit
# ------------------------------------------------------------------
itcl::body MemPref::ok {} {
  apply
  unpost
}

# ------------------------------------------------------------------
#  METHOD:  cancel - just close the dialog w/o saving changes
# ------------------------------------------------------------------
itcl::body MemPref::cancel {} {
  unpost
}

# ------------------------------------------------------------------
#  METHOD:  check_numbytes - a trace to make sure gnumbytes is an int > 0
# ------------------------------------------------------------------
itcl::body MemPref::check_numbytes {var index mode} {
  upvar \#0 $var true
  if {($true != "") && ([catch {expr {(int($true) != double($true)) || $true <= 0}} val] 
			|| $val)} {
    bell
    set true $old_numbytes
  } else {
    set old_numbytes $true
  }
}

# ------------------------------------------------------------------
#  METHOD:  set_bytes_per_row - combobox callback to set the bytes per row
# ------------------------------------------------------------------
itcl::body MemPref::set_bytes_per_row {w value} {
  if {[string is integer -strict $value] && [expr {$value != 0}]} {
    # The input is a value number.
    set gbpr $value
    set gbpr [string trim $gbpr]

    # Too high a number will cause a Segmentation fault.
    if {[expr {$gbpr > 150}]} {set gbpr 150}

    # Insert the value into the combo box list, if it isn't there already.
    set found [lsearch $gbprlist $gbpr]

    if {$found == -1} {
      lappend gbprlist $gbpr
      $Widgets(b-bytes_per_row) list insert end $gbpr
    }

    set s $gsize
    if {$s == 3} {set s 4}
    if {$s == 5} {set s 8}
    set rem [expr {$gbpr % $s}]
    if {$rem != 0} {
      # The bytes-per-row is not a multiple of the size.
      set gbpr [expr {$gbpr + ($s - $rem)}]
    }
  }

  # Set the display to the new value. This may be different if the input
  # was zero or not a number, or if the user entered any whitespace.
  $Widgets(b-bytes_per_row) delete 0 end
  $Widgets(b-bytes_per_row) insert end $gbpr
}

# ------------------------------------------------------------------
#  METHOD:  toggle_size_control - toggle the state of the entry box as the
#           control method changes
# ------------------------------------------------------------------
itcl::body MemPref::toggle_size_control {} {

  if {$gvar} {
    $Widgets(e-numbytes) configure -state normal \
      -background $normal_background
  } else {
    $Widgets(e-numbytes) configure -state disabled -background lightgray
    if {[info exists Widgets(b-ok)]} {
      focus $Widgets(b-ok)
    }
  }
}

# ------------------------------------------------------------------
#  METHOD:  apply - apply changes to the parent window
# ------------------------------------------------------------------
itcl::body MemPref::apply {} {

  busy
  gdbtk_busy

  if {$gvar == 0} {
    set numbytes 0
  } elseif {$gnumbytes == "" || $gnumbytes == 0} {
    # Protect against the case where someone sets the
    # entry field to an empty string, or pastes in a 0...
    bell
    set gnumbytes $default_numbytes
    set numbytes $gnumbytes
  } else {
    set numbytes $gnumbytes
  }
  switch $gsize {
    3 {
      set size $float_size
      set format f
    }
    5 {
      set size $double_size
      set format f
    }
    default {
      set size $gsize
      set format $gformat
    }
  }

  # Ensure the value has been read from the text field.
  set_bytes_per_row "" [$Widgets(b-bytes_per_row) get]

  # pass all the changed values back to parent
  debug "$win configChange -size $size -numbytes $numbytes \
	     -format $format -ascii $gascii \
	     -ascii_char $gascii_char -bytes_per_row $gbpr \
	     -color $color"
  eval $win configure -size $size -numbytes $numbytes \
    -format $format -ascii $gascii \
    -ascii_char $gascii_char -bytes_per_row $gbpr \
    -color $color
  
  $win reconfig

  gdbtk_idle
  idle
}

# ------------------------------------------------------------------
#  METHOD:  enable_format - turn on the format radio buttons 
# ------------------------------------------------------------------
itcl::body MemPref::enable_format {} {
  # First ensure bytes per row is a multiple of the size.
  # Use the value of the widget, not $gbpr to ensure the typed value is kept.
  set_bytes_per_row "" [$Widgets(b-bytes_per_row) get]

  if {!$format_disabled} {
    return
  }

  foreach widget {rb-binary rb-octal rb-hex rb-signed_dec rb-unsign_dec} {
    $Widgets($widget) configure -state normal
  }
  set format_disabled 0
}


# ------------------------------------------------------------------
#  METHOD:  disable_format - turn off the format radio buttons 
# ------------------------------------------------------------------
itcl::body MemPref::disable_format {} {
  # First ensure bytes per row is a multiple of the size.
  # Use the value of the widget, not $gbpr to ensure the typed value is kept.
  set_bytes_per_row "" [$Widgets(b-bytes_per_row) get]

  if {$format_disabled} {
    return
  }

  foreach widget {rb-binary rb-octal rb-hex rb-signed_dec rb-unsign_dec} {
    $Widgets($widget) configure -state disabled
  }
  set format_disabled 1
}

# ------------------------------------------------------------------
#  METHOD:  pick - pick colors
# ------------------------------------------------------------------
itcl::body MemPref::pick {lab} {
  set new_color [tk_chooseColor -initialcolor $color -title "Choose color"]
  if {$new_color != $color && $new_color != ""} {
    set color $new_color
    $lab configure -bg $color
  }
}


# ------------------------------------------------------------------
#  METHOD:  reconfig - used when preferences change
# ------------------------------------------------------------------
itcl::body MemPref::reconfig {} {
  # for now, just delete and recreate
  destroy $itk_interior.f 
  build_win
}

@


1.7
log
@        From Andrew Stubbs  <andrew.stubbs@@st.com>:
        * library/mempref.itb (MemPref::constructor): Allow the Byte Per Row
        combo box to accept arbitrary values.
        (MemPref::set_bytes_per_row): Validate the new value; reject invalid
        entries and round up to a multiple of the word size.
        (MemPref::apply): Read the value from the text box even if the user
        has not pressed return.
        (MemPref::enable_format): Ensure the bytes per row value is still valid.
        (MemPref::disable_format): Likewise.
        * library/mempref.ith (MemPref): Add $gbprlist.
        * library/help/memory.html: Update.
@
text
@d2 1
a2 1
# Copyright (C) 1998, 1999, 2002, 2003, 2006 Red Hat
d75 2
a76 2
  Labelledframe $f.f1 -anchor nw -text Size
  set fr [$f.f1 get_frame]
d94 2
a95 2
  Labelledframe $f.f2 -anchor nw -text Format
  set fr [$f.f2 get_frame]
d111 2
a112 1
  Labelledframe $f.fx -anchor nw -text "Number of Bytes"
d121 1
a121 1
  set fr [$f.fx get_frame] 
d147 3
a149 2
  Labelledframe $f.1 -anchor nw -text "Miscellaneous"
  set fr [$f.1 get_frame] 
@


1.6
log
@	* library/attachdlg.itb:
	* library/actiondlg.tcl:
	* library/about.tcl:
	* library/ehandler.itb:
	* library/editor.tcl:
	* library/download.ith:
	* library/download.itb:
	* library/debugwin.ith:
	* library/debugwin.itb:
	* library/cspref.ith:
	* library/cspref.itb:
	* library/console.ith:
	* library/console.itb:
	* library/browserwin.ith:
	* library/browserwin.itb:
	* library/bpwin.ith:
	* library/bpwin.itb:
	* library/blockframe.ith:
	* library/managedwin.ith:
	* library/managedwin.itb:
	* library/main.tcl:
	* library/locals.tcl:
	* library/ipcpref.ith:
	* library/ipcpref.itb:
	* library/ipc.tcl:
	* library/interface.tcl:
	* library/helpviewer.tcl:
	* library/globalpref.ith:
	* library/globalpref.itb:
	* library/gdbwin.ith:
	* library/gdbtoolbar.itcl:
	* library/gdbmenubar.itcl:
	* library/gdbevent.ith:
	* library/gdbevent.itb:
	* library/embeddedwin.ith:
	* library/ehandler.ith:
	* library/srcwin.itb:
	* library/srctextwin.ith:
	* library/srctextwin.itb:
	* library/srcpref.ith:
	* library/srcpref.itb:
	* library/srcbar.itcl:
	* library/session.tcl:
	* library/regwin.ith:
	* library/regwin.itb:
	* library/process.ith:
	* library/process.itb:
	* library/prefs.tcl:
	* library/pluginwin.itcl:
	* library/modal.tcl:
	* library/memwin.ith:
	* library/memwin.itb:
	* library/mempref.ith:
	* library/mempref.itb:
	* library/watch.tcl:
	* library/watch.tcl:
	* library/warning.tcl:
	* library/vartree.ith:
	* library/vartree.itb:
	* library/util.tcl:
	* library/tracedlg.tcl:
	* library/toplevelwin.ith:
	* library/tfind_args.tcl:
	* library/tdump.tcl:
	* library/targetselection.ith:
	* library/targetselection.itb:
	* library/stackwin.ith:
	* library/stackwin.itb:
	* library/srcwin.ith:
@
text
@d2 1
a2 1
# Copyright (C) 1998, 1999, 2002, 2003 Red Hat
d44 1
d157 1
a157 1
				  -width 4 -editable 0 -font global/fixed \
d159 3
a161 6
  $fr.2.c list insert end 4
  $fr.2.c list insert end 8
  $fr.2.c list insert end 16
  $fr.2.c list insert end 32
  $fr.2.c list insert end 64
  $fr.2.c list insert end 128
d265 30
a294 1
  set gbpr $value
d348 3
d371 4
d390 4
@


1.5
log
@2003-02-03  Martin M. Hunt  <hunt@@redhat.com>

        * library/globalpref.itb, library/mempref.itb, library/srcpref.itb,
        library/srcwin.itb, library/targetselection.itb, library/tracedlg.tcl:
        Set background color of comboboxes to Colors(textbg).

        * library/main.tcl: Load combobox version 2.2.

        * library/prefs.tcl: Minor optimization. Change order of main_names
        to have the most common, "main", first.
@
text
@d2 1
a2 1
# Copyright 1998, 1999, 2002, 2003 Red Hat
@


1.4
log
@2002-10-15  Martin M. Hunt  <hunt@@redhat.com>

	* library/* : auto_mkindex cannot rebuild
	tclIndex because it does not recognize the namespace
	import in main.tcl.  To get it to work again, rename the
	following:
		body -> itcl::body
		configbody -> itcl::configbody
		class -> itcl::class
@
text
@d2 1
a2 1
# Copyright 1998, 1999, 2002 Red Hat
d156 2
a157 1
				  -width 4 -editable 0 -font global/fixed]
@


1.3
log
@2002-03-05  Martin M. Hunt  <hunt@@redhat.com>

	* library/prefs.tcl (pref_read): If a preference specifies
	"src-font", substitute "global/fixed".
	(pref_set_defaults): Change defaults from "src-font" to
	"global/fixed". Do not create font object "src-font". Do
	not add hook to trace its changes.
	(pref_src-font_trace): Remove.

	* library/console.itb (Console::_update_option): Remove
	font update because this happens automatically.

	* library/globalpref.itb: No need to set
	changed flag for fonts; updates happen automatically
	when prefs are updated.

	* library/bpwin.itb: Replaced src-font with global/fixed.
	* library/browserwin.itb: Ditto.
	* library/mempref.itb: Ditto.
	* library/memwin.itb: Ditto.
	* library/process.itb: Ditto.
	* library/regwin.itb: Ditto.
	* library/srcbar.itcl: Ditto.
	* library/srcpref.itb: Ditto.
	* library/srctextwin.itb: Ditto.
	* library/srcwin.itb: Ditto.
	* library/stackwin.itb: Ditto.
	* library/tdump.tcl: Ditto.
	* library/tracedlg.tcl: Ditto.
	* library/variables.tcl: Ditto.
	* library/watch.tcl: Ditto.
@
text
@d18 1
a18 1
body MemPref::constructor {args} {
d60 1
a60 1
body MemPref::destructor {} {
d67 1
a67 1
body MemPref::build_win {} {
d208 1
a208 1
body MemPref::busy {} {
d224 1
a224 1
body MemPref::idle {} {
d236 1
a236 1
body MemPref::ok {} {
d244 1
a244 1
body MemPref::cancel {} {
d251 1
a251 1
body MemPref::check_numbytes {var index mode} {
d265 1
a265 1
body MemPref::set_bytes_per_row {w value} {
d273 1
a273 1
body MemPref::toggle_size_control {} {
d289 1
a289 1
body MemPref::apply {} {
d339 1
a339 1
body MemPref::enable_format {} {
d354 1
a354 1
body MemPref::disable_format {} {
d368 1
a368 1
body MemPref::pick {lab} {
d380 1
a380 1
body MemPref::reconfig {} {
@


1.2
log
@	* library/mempref.itb (MemPref::build_win): Correctly set initial
	value of combobox.
	* library/memwin.itb: Added copyright header.
	(MemWin::constructor): Set defaults from preference database.
	(MemWin::reconfig): Update preference database.
	* library/prefs.tcl (pref_save): Save `mem' preferences.
	(pref_set_defaults): Define default memory preferences.
@
text
@d1 2
a2 2
# Memory display preferences window for GDBtk.
# Copyright 1998, 1999 Cygnus Solutions
d156 1
a156 1
				  -width 4 -editable 0 -font src-font]
@


1.1
log
@Initial revision
@
text
@d163 1
a163 1
  $fr.2.c configure -value 16
@


1.1.1.1
log
@import insight-2000-02-04 snapshot (2nd try)
@
text
@@
