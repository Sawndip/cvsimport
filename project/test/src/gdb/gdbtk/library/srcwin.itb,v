head	1.37;
access;
symbols
	insight_7_6-2013-04-10-branchpoint:1.37
	gdb_7_6-branch:1.37.0.12
	gdb_7_5-branch:1.37.0.10
	gdb_7_4-branch:1.37.0.8
	gdb_7_3-branch:1.37.0.6
	gdb_7_1-branch:1.37.0.4
	gdb_7_0-branch:1.37.0.2
	arc-sim-20090309:1.36
	arc-insight_6_8-branch:1.36.0.6
	arc-insight_6_8-branchpoint:1.36
	insight_6_8-branch:1.36.0.4
	insight_6_8-branchpoint:1.36
	gdb_6_8-branch:1.36.0.2
	insight_6_6-20070208-release:1.35
	gdb_6_6-branch:1.35.0.2
	gdb_6_6-2006-11-15-branchpoint:1.35
	insight_6_5-20061003-release:1.34.2.1
	gdb_6_5-branch:1.34.0.2
	gdb_6_5-2006-05-14-branchpoint:1.34
	gdb-csl-gxxpro-6_3-branch:1.33.0.4
	gdb-csl-gxxpro-6_3-branchpoint:1.33
	gdb_6_4-branch:1.33.0.2
	gdb_6_4-2005-11-01-branchpoint:1.33
	gdb_6_1-2004-04-05-release:1.32
	gdb_6_1-branch:1.32.0.2
	gdb_6_1-2004-03-01-gmt-branchpoint:1.32
	gdb_6_0-2003-10-04-release:1.31
	gdb_6_0-branch:1.31.0.2
	gdb_6_0-2003-06-23-branchpoint:1.31
	gdb_5_3-2002-12-12-release:1.26
	gdb_5_3-branch:1.26.0.2
	gdb_5_3-2002-09-04-branchpoint:1.26
	gdb_5_2_1-2002-07-23-release:1.22
	gdb_5_2-2002-04-29-release:1.22
	gdb_5_2-branch:1.22.0.2
	gdb_5_2-2002-03-03-branchpoint:1.22
	gdb_5_1_1-2002-01-24-release:1.15
	cygnus_cvs_20020108_pre:1.19
	gdb_5_1_0_1-2002-01-03-branch:1.15.0.8
	gdb_5_1_0_1-2002-01-03-branchpoint:1.15
	gdb_5_1-2001-11-21-release:1.15
	gdb_s390-2001-09-26-branch:1.15.0.6
	gdb_s390-2001-09-26-branchpoint:1.15
	gdb_5_1-2001-07-29-branch:1.15.0.4
	gdb_5_1-2001-07-29-branchpoint:1.15
	dberlin-typesystem-branch:1.15.0.2
	dberlin-typesystem-branchpoint:1.15
	insight-precleanup-2001-01-01:1.6
	gdb_5_0-2000-05-19-release:1.1.1.1
	gdb_4_18_2-2000-05-18-release:1.1.1.1
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.1
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.1
	gdb_5_0-2000-04-10-branch:1.1.1.1.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1.1.1
	repo-unification-2000-02-06:1.1.1.1
	insight-2000-02-04:1.1.1.1
	SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.37
date	2008.12.16.09.07.57;	author denis;	state Exp;
branches;
next	1.36;

1.36
date	2008.02.09.01.23.42;	author kseitz;	state Exp;
branches;
next	1.35;

1.35
date	2006.06.26.20.44.57;	author kseitz;	state Exp;
branches;
next	1.34;

1.34
date	2005.12.23.18.26.50;	author eliz;	state Exp;
branches
	1.34.2.1;
next	1.33;

1.33
date	2004.08.27.23.13.14;	author hunt;	state Exp;
branches;
next	1.32;

1.32
date	2004.02.17.18.43.57;	author hunt;	state Exp;
branches;
next	1.31;

1.31
date	2003.03.27.18.02.08;	author kseitz;	state Exp;
branches;
next	1.30;

1.30
date	2003.03.06.01.25.50;	author hunt;	state Exp;
branches;
next	1.29;

1.29
date	2003.02.04.07.43.32;	author hunt;	state Exp;
branches;
next	1.28;

1.28
date	2003.01.21.21.58.34;	author hunt;	state Exp;
branches;
next	1.27;

1.27
date	2002.10.15.21.19.51;	author hunt;	state Exp;
branches;
next	1.26;

1.26
date	2002.08.06.19.35.33;	author kseitz;	state Exp;
branches;
next	1.25;

1.25
date	2002.08.01.01.19.02;	author kseitz;	state Exp;
branches;
next	1.24;

1.24
date	2002.03.06.20.42.44;	author hunt;	state Exp;
branches;
next	1.23;

1.23
date	2002.03.05.22.22.20;	author hunt;	state Exp;
branches;
next	1.22;

1.22
date	2002.02.26.00.29.06;	author irox;	state Exp;
branches;
next	1.21;

1.21
date	2002.01.15.19.52.01;	author kseitz;	state Exp;
branches;
next	1.20;

1.20
date	2002.01.08.19.57.21;	author kseitz;	state Exp;
branches;
next	1.19;

1.19
date	2002.01.07.08.58.47;	author irox;	state Exp;
branches;
next	1.18;

1.18
date	2001.11.05.19.14.00;	author hunt;	state Exp;
branches;
next	1.17;

1.17
date	2001.10.04.15.01.36;	author tromey;	state Exp;
branches;
next	1.16;

1.16
date	2001.08.24.00.11.06;	author tromey;	state Exp;
branches;
next	1.15;

1.15
date	2001.06.04.15.49.53;	author kseitz;	state Exp;
branches;
next	1.14;

1.14
date	2001.05.31.20.32.58;	author kseitz;	state Exp;
branches;
next	1.13;

1.13
date	2001.05.31.15.21.40;	author kseitz;	state Exp;
branches;
next	1.12;

1.12
date	2001.02.07.01.11.18;	author fnasser;	state Exp;
branches;
next	1.11;

1.11
date	2001.01.25.17.49.22;	author fnasser;	state Exp;
branches;
next	1.10;

1.10
date	2001.01.15.20.18.44;	author fnasser;	state Exp;
branches;
next	1.9;

1.9
date	2001.01.03.15.13.16;	author fnasser;	state Exp;
branches;
next	1.8;

1.8
date	2001.01.03.05.34.04;	author fnasser;	state Exp;
branches;
next	1.7;

1.7
date	2001.01.03.04.31.15;	author fnasser;	state Exp;
branches;
next	1.6;

1.6
date	2000.12.07.20.14.02;	author tromey;	state Exp;
branches;
next	1.5;

1.5
date	2000.12.07.20.00.44;	author tromey;	state Exp;
branches;
next	1.4;

1.4
date	2000.11.30.22.49.46;	author tromey;	state Exp;
branches;
next	1.3;

1.3
date	2000.11.30.22.37.29;	author tromey;	state Exp;
branches;
next	1.2;

1.2
date	2000.08.09.21.01.51;	author fnasser;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.07.00.19.42;	author jsm;	state Exp;
branches
	1.1.1.1;
next	;

1.34.2.1
date	2006.06.26.20.44.07;	author kseitz;	state Exp;
branches;
next	;

1.1.1.1
date	2000.02.07.00.19.42;	author jsm;	state Exp;
branches;
next	;


desc
@@


1.37
log
@- Fix a problem with "File Close" menu that let insight becoming unstable
and unable to reopen a new binary (Linux and Win32 hosts)
- Fix a problem with the source window that, once a binary is closed, is
splitted into 2 part and alway displays the old sources. (Win32 hosts only)

2008-12-16  Denis Pilat  <denis.pilat@@st.com>
	on behalf of Nunzio Raciti  <nunzio.raciti@@st.com>

	* library/srctextwin.itb (_clear_cache): Take care of $p variable that
	could contains ":" for source pane on windows hosts.
	* library/srcwin.itb (choose_and_update): Avoid updating the "source"
	window if target executable name is empty.
@
text
@# Source window for Insight.
# Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2008,
# 2006 Red Hat, Inc.
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License (GPL) as published by
# the Free Software Foundation; either version 2 of the License, or (at
# your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.


# ------------------------------------------------------------------
#  CONSTRUCTOR - create new source window
# ------------------------------------------------------------------
itcl::body SrcWin::constructor {args} {
  debug "$args"
  eval itk_initialize $args
  set top [winfo toplevel $itk_interior]

  _update_title ""

  set Tracing [pref get gdb/mode]
  set current(filename) ""

  if {[catch {_build_win} mssg]} {
    dbug E "_build_win returned: $::errorInfo"
  }

  # add special delete handler
  wm protocol $top WM_DELETE_WINDOW "[code $this _exit]"

  # add hooks
  add_hook gdb_no_inferior_hook "$this no_inferior"
  add_hook download_progress_hook "$this download_progress"
  add_hook state_hook [code $this _set_state]
  add_hook gdb_clear_file_hook [code $this clear_file]
  after idle "
      update idletasks
      $this sizeWinByChild toolbar"

  lappend window_list $this
}

# ------------------------------------------------------------------
#  DESTRUCTOR - destroy window containing widget
# ------------------------------------------------------------------
itcl::body SrcWin::destructor {} {
  debug
  remove_hook gdb_no_inferior_hook "$this no_inferior"
  remove_hook download_progress_hook "$this download_progress"
  remove_hook state_hook [code $this _set_state]
  remove_hook gdb_clear_file_hook [code $this clear_file]
  set window_list [lremove $window_list $this]
  if {$pc_window == $this} then {
    set pc_window ""
  }
}

# ------------------------------------------------------------------
#  PRIVATE METHOD:  _build_win - build the main source window
# ------------------------------------------------------------------
itcl::body SrcWin::_build_win {} {
  global gdb_downloading gdb_running gdb_loaded

  # build source toolbar
  set _toolbar [conAdd toolbar -resizable 0]
  SrcBar $_toolbar $this \
    -updatecommand [list $this toggle_updates] \
    -updatevalue $do_updates
  pack $_toolbar -expand 1 -fill both

  # if user likes control on bottom...
  if {! [pref get gdb/src/top_control]} {

    # add a SrcTextWin container
    set srcwin [conAdd src]
    set twin [SrcTextWin $srcwin -Tracing $Tracing -parent $this]
    pack $srcwin -expand 1 -fill both

    # add status line
    set _status [conAdd status -resizable 0]
    label $_status -relief sunken -bd 3 -font global/status -height 1
    pack $_status -expand 1 -fill both
  }
  
  # add a status bar container
  set _statbar [conAdd stat -resizable 0]
  frame $_statbar
  pack $_statbar -expand 1 -fill both

  combobox::combobox $_statbar.name -maxheight 15 -font global/fixed\
    -command [code $this _name] -bg $::Colors(textbg)
  
  set need_files 1
  
  combobox::combobox $_statbar.func -maxheight 15 -font global/fixed\
    -command [code $this goto_func] -bg $::Colors(textbg)
  combobox::combobox $_statbar.mode -width 9 -editable false \
    -font global/fixed -command [code $this mode] -bg $::Colors(textbg)
  
  $_statbar.mode list insert end SOURCE
  $_statbar.mode list insert end ASSEMBLY
  $_statbar.mode list insert end MIXED
  $_statbar.mode list insert end SRC+ASM

  # Workaround: the three comboboxes above sometimes display with
  # height of one pixel. Inserting an invisible frame with the required
  # height "fixes" this...
  frame $_statbar.strut -height 24 -width 10

  pack $_statbar.mode -side right -padx 10 -pady 4
  pack $_statbar.name $_statbar.func $_statbar.strut  \
      -side left -pady 4 -padx 10

  # if user likes control on top...
  if {[pref get gdb/src/top_control]} {
  
    # add a SrcTextWin container
    set srcwin [conAdd src]
    set twin [SrcTextWin $srcwin -Tracing $Tracing -parent $this]
    pack $srcwin -expand 1 -fill both

    # add status line
    set _status [conAdd status -resizable 0]
    set _statusframe [frame $_status]
    set _status $_statusframe.con
    label $_status -relief sunken -bd 3 -font global/status -height 1 \
      -anchor w

    # add download progress meter
    canvas $_statusframe.progress -relief sunken -borderwidth 2 \
      -highlightthickness 0 -takefocus 0 -width 100 -height 0 -confine 1
    $_statusframe.progress create rectangle 0 0 0 \
      [winfo height $_statusframe.progress] -outline blue -fill blue -tags rect

    # add address and line number indicators
    label $_statusframe.addr -text "" -width 10 -relief sunken \
      -bd 1 -anchor e -font global/fixed
    label $_statusframe.line -text "" -width 6 -relief sunken \
      -bd 1 -anchor e -font global/fixed

    balloon register $_statusframe.addr "Address"
    balloon register $_statusframe.line "Line number"

    pack $_statusframe -expand 1 -fill both
    grid $_status -row 0 -column 1 -sticky news -pady 2 -padx 2
    grid $_statusframe.addr -row 0 -column 3 -sticky nes -pady 4
    grid $_statusframe.line -row 0 -column 4 -sticky nws -pady 4
    grid columnconfigure $_statusframe 1 -weight 10
    grid columnconfigure $_statusframe 2 -minsize 5
    grid columnconfigure $_statusframe 5 -minsize 5
  }

  set_execution_status

  # balloon help
  foreach i {entry button} {
    balloon register $_statbar.name.$i "Current file name"
    balloon register $_statbar.func.$i "Current function name"
    balloon register $_statbar.mode.$i "Source mode"
  }
  balloon variable $_status ${twin}_balloon

  $_statbar.mode entryset [$twin mode_get]

  # time to load the widget with a file.
  # If this is a new widget and the program is
  # not yet being debugged, load the file with "main" in it.
  if {$gdb_running} {
    if {[catch {gdb_loc} loc]} {
      # Nothing we can do but leave the window empty.
    } else {
      _update $loc
    }
  }
}


# ------------------------------------------------------------------
#  PUBLIC METHOD:  _set_state - do things when program state changes
# ------------------------------------------------------------------
itcl::body SrcWin::_set_state {varname} {
  global gdb_running gdb_downloading gdb_loaded gdb_program_has_run
  debug "$varname l=$gdb_loaded d=$gdb_downloading r=$gdb_running"

  if {$varname == "gdb_loaded" && $gdb_loaded == 1} {
    set gdb_program_has_run 0
    #set current(filename) ""
    return
  }

  if {$gdb_running} {
    set state normal
    set gdb_program_has_run 1
  } else {
    set state disabled
  }
  if {!$Tracing} {
    $twin SetRunningState $state
  }
}

# ------------------------------------------------------------------
#  PUBLIC METHOD:  download_progress - update the progress meter when downloading
# ------------------------------------------------------------------
itcl::body SrcWin::download_progress { section num tot {msg ""} } {
  global download_start_time download_cancel_ok gdb_loaded

  #debug "$section $num $tot $msg"
  if {$last_section_start == 0} {
    grid forget $_statusframe.addr $_statusframe.line
    grid $_statusframe.progress -row 0 -column 4 -padx 4 -sticky news
    ::update idletasks
  }

  if {$section == "DONE"} {
    set last_done $tot
    if {$gdb_loaded} {
      # loaded something
      set secs [expr {[clock seconds] - $download_start_time}]
      if {$secs} {
	set bps [expr {8 * $tot / $secs}]
	set_status "DOWNLOAD FINISHED: $tot bytes in $secs seconds ($bps bits per second)"
      } else {
	set_status "DOWNLOAD FINISHED"
      }
    }
  } elseif {$section != "CANCEL"} {
    if {$section != $last_section} {
      set last_section $section
      set last_section_start $last_done
    }
    set last_done [expr {$last_section_start + $num}]
    set_status "Downloading section $section - $num bytes"
  }

  set canvas $_statusframe.progress
  set height [winfo height $canvas]
  if {$last_done} {
    set width [winfo width $canvas]
    set rw [expr {double ($last_done) * $width / $tot}]
    $canvas coords rect 0 0 $rw $height
    ::update
  }

  if {$last_done == $tot || $section == "CANCEL"} {
    $_toolbar configure -runstop normal
    if {!$gdb_loaded} {
      ::update
      # errored or canceled
      if {$msg != ""} {
	set_status "DOWNLOAD FAILED: $msg"
      } else {
	set_status "DOWNLOAD CANCELLED"
      }
      $canvas coords rect 0 0 0 $height
      ::update idletasks
    }

    set last_section ""
    set last_done 0
    set last_section_start 0

    grid forget $_statusframe.progress
    grid $_statusframe.addr -row 0 -column 3 -sticky new -pady 4
    grid $_statusframe.line -row 0 -column 4 -sticky nws -pady 4
    ::update idletasks
  }
}

# ------------------------------------------------------------------
#  PUBLIC METHOD:  reconfig - used when preferences change
# ------------------------------------------------------------------
itcl::body SrcWin::reconfig {} {
  debug
  $_toolbar reconfig
  $twin reconfig
}


# ------------------------------------------------------------------
#  PRIVATE METHOD:  _name - filename combobox callback
#  This is only called when the user edits the name combobox.
#  It is the only way that files can be inserted into the file list
#  once the debugger is started. 
# ------------------------------------------------------------------
itcl::body SrcWin::_name {w {val ""}} {
  global _files
  debug "$w $val"
  if {$val != ""} {
    if {![info exists _files(short,$val)]} {
      if {![info exists _files(full,$val)]} {
	if [catch {gdb_find_file $val} full] {
	  set_status "Cannot find source file \"$val\": $full"
	  $_statbar.name entryset [lindex [file split $current(filename)] end]
	  return
	}
	if {$full == ""} {
	  set_status "Cannot find source file \"$val\""
	  $_statbar.name entryset [lindex [file split $current(filename)] end]
	  return
	}
	set _files(short,$full) $val
	set _files(full,$val) $full
      }
      set full $_files(full,$val)
    } else {
      set full $val
      set val $_files(short,$full)
    }
    $_statbar.name entryset $val
    location BROWSE_TAG [list $val "" $full 0 0 0 {}]
  }
}

# ------------------------------------------------------------------
#  PRIVATE PUBLIC METHOD:  toggle_updates - update toggle callback
# ------------------------------------------------------------------
itcl::body SrcWin::toggle_updates {value} {
  # save state in do_updates so it will be preserved
  # in window reconfigs
  set do_updates $value
}

# ------------------------------------------------------------------
#  PRIVATE PUBLIC METHOD:  goto_func - function combobox callback
# ------------------------------------------------------------------
itcl::body SrcWin::goto_func {w {val ""}} {
  if {$val != ""} {
    set mang 0
    if {[info exists _mangled_func($val)]} {
      set mang $_mangled_func($val)
    }
    if {$mang} {
      set loc $val
    } else {
      set fn [lindex [::file split $current(filename)] end]
      if {$fn == ""} {
	set loc $val
      } else {
	set loc $fn:$val
      }
    }
    debug "GOTO $loc"
    if {![catch {gdb_loc $loc} result]} {
      location BROWSE_TAG $result
    } else {
      dbug W "gdb_loc returned \"$result\""
    }
  }
}

# ------------------------------------------------------------------
#  PUBLIC METHOD:  fillNameCB - fill the name combobox
#
#         This method needs to be public, since other parts of
#         the gui can cause new symbols to be read.
# ------------------------------------------------------------------
itcl::body SrcWin::fillNameCB {} {
  global _files
  set allfiles [gdb_listfiles]
  foreach f $allfiles {
    # FIXME: If you reactivate this code add a catch as gdb_find_file can err
    # (P.S.: I don't know why this is commented out)
    #set fullname [gdb_find_file $f]
    #set _files(full,$f) $fullname
    #set _files(short,$fullname) $f
    $_statbar.name list insert end $f
  }
  set need_files 0
}


# ------------------------------------------------------------------
#  PUBLIC METHOD:  fillFuncCB - fill the function combobox
#
#         This method needs to be public, since other parts of
#         the gui can cause new symbols to be read.
# ------------------------------------------------------------------
itcl::body SrcWin::fillFuncCB {name} {
  $_statbar.func list delete 0 end
  if {$name != ""} {
    set maxlen 10
    if {[catch {gdb_listfuncs $name} listfuncs]} {
      tk_messageBox -icon error -default ok \
	-title "GDB" -type ok \
	-message "This file can not be found or does not contain\ndebugging information."
      _set_name ""
      return
    }
    foreach f [lsort -increasing $listfuncs] {
      lassign $f func mang
      set _mangled_func($func) $mang
      $_statbar.func list insert end $func
      if {[string length $func] > $maxlen} {
	set maxlen [string length $func]
      }
    }
    $_statbar.func configure -width [expr $maxlen + 1]
  }
}

# ------------------------------------------------------------------
#  PUBLIC METHOD:  location - update the location displayed
#
#  a linespec looks like this:
#  0: basename of the file
#  1: function name
#  2: full filename
#  3: source line number
#  4: address
#  5: current PC - which will often be the same as address, but not when
#     we are browsing, or walking the stack.
#  6: shared library name if the pc is in a shared lib
#
# linespec will be "{} {} {} 0 0x0 0x0" when GDB has not started debugging.
# ------------------------------------------------------------------
itcl::body SrcWin::location {tag linespec} {
  global gdb_running gdb_exe_name _files

  # We need to keep track of changes to the line, filename, function name
  # and address so we can keep the widgets up-to-date.  Otherwise we
  # basically pass things through to the SrcTextWin location public method.

  debug "running=$gdb_running tag=$tag linespec=$linespec"    
  lassign $linespec foo funcname name line addr pc_addr lib

  # need to call this to update running state
  set_execution_status $line $addr

  # "update" doesn't set the tag so we do it here
  if {$tag == ""} {
    if {$addr == $pc_addr} {
      set tag PC_TAG
    } else {
      set tag STACK_TAG
    }
  }
  
  if {!$gdb_running} {
    # When we are not yet debugging, we need to force something
    # to be displayed, so we choose to find function "main" and
    # display the file with it.
    set tag BROWSE_TAG
    debug "not running: name=$name funcname=$funcname line=$line"
    if {$name == ""} {
      if {[set linespec [gdbtk_locate_main]] == ""} {
	# no "main" function found
	return 
      }
      lassign $linespec foo funcname name line addr pc_addr lib
      debug "new linespec=$linespec"    
    }
  }

  # update file and function combobox
  if {$name != $current(filename)} {
    _set_name $name
    fillFuncCB $name
  }

  # get a proper address string to display
  set textaddr [gdb_CA_to_TAS $addr]

  # set address and line widgets
  if {[string length $textaddr] > 8} {
    # 64-bit address
    set width 16
  } else {
    # 32-bit address
    set width 8
  }
  $_statusframe.addr configure -text $textaddr -font global/fixed -width $width
  $_statusframe.line configure -text $line

  # set function combobox
  $_statbar.func entryset $funcname

  # call SrcTextWin::location
  $twin location $tag $name $funcname $line $addr $pc_addr $lib

  set current(filename) $name
}

# ------------------------------------------------------------------
#  PUBLIC METHOD:  stack - handle stack commands
# ------------------------------------------------------------------
itcl::body SrcWin::stack {cmd} {
  if {$cmd == "bottom"} {
    set cmd "frame 0"
  }
  gdbtk_busy
  if {[catch {gdb_cmd "$cmd"} message]} {
    dbug E "STACK ERROR: $message"
  }
  gdbtk_update
  gdbtk_idle
}

# ------------------------------------------------------------------
#  METHOD:  _update - update widget when PC changes
# ------------------------------------------------------------------
itcl::body SrcWin::_update {loc} {
  debug "loc=$loc"
  # See if name combobox needs filled.
  if {$need_files} {
    fillNameCB
  }
  location "" $loc
}

# ------------------------------------------------------------------
#  PUBLIC METHOD:  idle - callback for gdbtk_idle
#  Called when the target is idle, so enable all buttons.
# ------------------------------------------------------------------
itcl::body SrcWin::idle {event} {
  $_toolbar configure -runstop normal
  enable_ui 1
}

# ------------------------------------------------------------------
#  PUBLIC METHOD:  mode - set mode to SOURCE, ASSEMBLY, MIXED, SRC+ASM
# ------------------------------------------------------------------
itcl::body SrcWin::mode {w new_mode {go 1}} {
  gdbtk_busy
  $_statbar.mode entryset $new_mode
  catch {$twin mode_set $new_mode $go} errorVal
  $_toolbar configure -displaymode $new_mode
  gdbtk_idle
}

# ------------------------------------------------------------------
#  PRIVATE METHOD:  _update_title - update title bar
# ------------------------------------------------------------------
itcl::body SrcWin::_update_title {name} {
  set fn [lindex [::file split $name] end]
  if {$fn == ""} {
    set prefix ""
  } else {
    set prefix "$fn - "
  }
  window_name "${prefix}Source Window" $fn
}

# ------------------------------------------------------------------
#  PUBLIC METHOD:  busy - disable things when gdb is busy
# ------------------------------------------------------------------
itcl::body SrcWin::busy {event} {
  global gdb_loaded gdb_target_name
#  debug "gdb_loaded=$gdb_loaded, gdb_target_name=$gdb_target_name"

  if {$do_updates} {
    enable_ui 0
    if {$Running} {
      $_toolbar configure -runstop running
      if {$gdb_loaded || \
	    ([TargetSelection::native_debugging] && $gdb_target_name != "remote")} {
	set_status "Program is running."
      } 
    } else {
      $_toolbar configure -runstop busy
    }
  }
}

# ------------------------------------------------------------------
#   PUBLIC METHOD:  update - The inferior's state has changed.
# ------------------------------------------------------------------
itcl::body SrcWin::update {event} {

  # FIXME: This is kinda lame. We need to run this only once
  # as it is now written, so only the first window in the list
  # will actually call choose_and_update.
  # This is still better than before, since it will not
  # matter if this window is destroyed: as long as _a_
  # SrcWin exists, this will get called.
  if {[lindex $window_list 0] == $this} {
    choose_and_update
  }
}

# ------------------------------------------------------------------
#  PRIVATE METHOD:  _set_name - set the name in the name combobox and in the title
# ------------------------------------------------------------------
itcl::body SrcWin::_set_name { val {found 1} } {
  global _files
  _update_title $val
  if {![info exists _files(short,$val)]} {
    if {![info exists _files(full,$val)]} {
      # not in our list; just display basename
      $_statbar.name entryset [lindex [::file split $val] end]
      return
    }
  } else {
    set val $_files(short,$val)
  }
  if {$found} {
    $_statbar.name entryset $val
  } else {
    $_statbar.name entryset "$val (not found)"
  }
}

# ------------------------------------------------------------------
#  PUBLIC METHOD:  set_status - write a message to the status line.
#  If "tmp" is set, the status change will not be saved.
# ------------------------------------------------------------------

itcl::body SrcWin::set_status { {msg ""} {tmp 0} } {
  set msg [lindex [split $msg \n] 0]
  if {$tmp} {
    $_status configure -text $msg
    return
  }
  if {$msg != ""} {
    set saved_msg $msg
  }
  $_status configure -text $saved_msg
}

# ------------------------------------------------------------------
#  PUBLIC METHOD:  set_execution_status - write the current execution state 
#  to the status line
# ------------------------------------------------------------------
itcl::body SrcWin::set_execution_status { {line ""} {pc ""}} {
  global gdb_running gdb_loaded gdb_program_has_run gdb_target_changed
  #debug "line=$line pc=$pc [gdb_target_has_execution] running=$gdb_running loaded=$gdb_loaded"
  set message ""

  if {![gdb_target_has_execution]} {
    if {$gdb_running} {
      set gdb_running 0
      # tell text window program is no longer running
      $twin ClearTags
    }
    if {$gdb_loaded} {
      if {$gdb_program_has_run} {
	set message "Program terminated. 'Run' will restart."
	# Need to set gdb_target_changed because most
	# remote targets detach when they are finished, 
	# and this will force it to reattach.
	set gdb_target_changed 1
	set gdb_running 0
      } else {
	set message "Program is ready to run."
      }
    } else {
      set message "Program not running. Click on run icon to start."
    }
  } else {

    # gdb_target_has_execution has returned true, so we must be running.
    #
    # This can cause problems on targets which do not set inferior_pid.
    # Although this is bogus, much of gdb (and gdbtk) relies on
    # gdb_target_has_execution (and thus inferior_pid), so we should
    # not try to second guess it and fix those targets which do not set
    # inferior_pid when opened.
    set gdb_running 1

    # only do a gdb_loc if we have to
    if {$line == "" && $pc == ""} {
      if {[catch {gdb_loc} loc] == 0} {
	set line [lindex $loc 3] 
	set pc [lindex $loc 4]
      }
    }

    set pc [gdb_CA_to_TAS $pc]

    if {$line == "" || $line == 0} {
      if {$pc == "" || $pc == 0} {
	if {$Tracing} {
	  set message "Ready."
	} else {
	  set message "Program stopped."
	}
      } else {
	set message "Program stopped at 0x$pc"
      }
    } else {
      if {$Tracing} {
	set msg "Inspecting trace"
      } else {
	set msg "Program stopped"
      }
      switch [$twin mode_get] {
	ASSEMBLY {set message "$msg at 0x$pc" }
	MIXED {set message "$msg at line $line, 0x$pc" }
	SRC+ASM {set message "$msg at line $line, 0x$pc" }
	default {set message "$msg at line $line" }
      }
    }
  }
  set_status $message
}

# ------------------------------------------------------------------
#  PUBLIC METHOD:  edit - invoke external editor
# ------------------------------------------------------------------
itcl::body SrcWin::edit {} {
  global external_editor_command
  # If external editor is enabled, pass the file to the specified command

  if {$current(filename) == ""} {
    tk_dialog .warn {Edit} {No file is loaded in the source window.} error 0 Ok
    return
  }

  if {[catch {$twin report_source_location} loc_info]} {
    tk_dialog .warn "Edit" "No source file selected" error 0 Ok
    return
  }

  Editor::edit $loc_info
}

# ------------------------------------------------------------------
#  PUBLIC METHOD:  print - print the contents of the text widget
# ------------------------------------------------------------------
itcl::body SrcWin::print {} {
  # Call the SrcTextWin's print public method
  $twin print $top
}

# ------------------------------------------------------------------
# PUBLIC METHOD:   enable_ui
#              Enable all UI elements for user interaction.
# ------------------------------------------------------------------
itcl::body SrcWin::enable_ui { on } {
  #debug "$on"
  if {$on} {
    set Running 0
    set state normal
    set glyph ""
  } else {
    if {!$NoRun} {set Running 1}
    set state disabled
    set glyph watch
  }
  # combo boxes
  $_statbar.mode configure -state $state
  $_statbar.name configure -state $state
  $_statbar.func configure -state $state

  $twin enable $on
  $top configure -cursor $glyph
}

# ------------------------------------------------------------------
# PUBLIC METHOD:   no_inferior
#              Put the UI elements of this object into a state
#              appropriate for an inferior which is not executing.
#              For this object, this means:
# Disable:
# - key binding for all inferior control (not needed -- gdb does this
#    for us)
#
# Enable:
# - file/func/mode selectors
# - right-click popups, since gdb DOES allow looking at exe fil
# - selections
# 
# Change mouse pointer to normal
# ------------------------------------------------------------------
itcl::body SrcWin::no_inferior {} {
  #debug
  set_execution_status
  enable_ui 1
}

# ------------------------------------------------------------------
#   PUBLIC METHOD: reset - reset the source window
# ------------------------------------------------------------------  
itcl::body SrcWin::reset {} {
  set current(filename) ""
  set need_files 1
  set do_updates 1
  set last_section ""
  set last_section_start 0
  set last_done 0
  set saved_msg ""

  # do we need to flush the cache or clear the source windows?

  # Empty combo boxes
  $_statbar.name list delete 0 end
  $_statbar.name configure -value {}
  $_statbar.func list delete 0 end
  $_statbar.func configure -value {}
}

# ------------------------------------------------------------------
#  PUBLIC METHOD:  search - search for a STRING or jump to a specific line
#           in source window, going in the specified DIRECTION.
# ------------------------------------------------------------------
itcl::body SrcWin::search {direction string} {
  set_status
  set_status [$twin search $string $direction] 1
}

# ------------------------------------------------------------------
#  PROCEDURE: point_to_main
#         Proc that may be called to point some source window to
#         main (or an entry point?). (see gdbtk_tcl_exec_file_changed)
# ------------------------------------------------------------------
itcl::body SrcWin::point_to_main {} {
  # We need to force this to some default location. Assume main and
  # if that fails, let the source window guess (via gdb_loc using stop_pc).
  set src [lindex [ManagedWin::find SrcWin] 0]
  if {[set linespec [gdbtk_locate_main]] == ""} {
    gdbtk_update
    debug "could not find main"
  } else {
    $src location BROWSE_TAG [list $linespec]
  }
}

itcl::body SrcWin::_exit {} {
  debug
  if {[llength [ManagedWin::find SrcWin]] == 1} {
    if {![gdbtk_quit_check]} {
      return
    }
  }
  after idle [delete object $this]
}

# public method for testing use only!
itcl::body SrcWin::test_get {var {private_func 0}} {
  debug $var
  if {$private_func} {
    return [code $this $var]
  }
  return [set $var]
}

# ------------------------------------------------------------------
#  PUBLIC METHOD: toolbar - configure the toolbar's "state"
# ------------------------------------------------------------------
#
#  This method is used to configure the toolbar's running state.
#  Valid states include anything that the "runtest" variable of
#  the GDBSrcBar may accept. Specifically,
#
#  busy        - Run button becomes disabled
#  running     - Stop button appears, allowing user to stop executing target
#  downloading - Stop button appears, allowing user to interrupt downloading
#  normal      - Run button appears, allowing user to run/re-run exe
itcl::body SrcWin::toolbar {state} {
  $_toolbar configure -runstop $state
}

# ------------------------------------------------------------------
#  METHOD:  inferior - change execution state of inferior
# ------------------------------------------------------------------
#
# ACTION may be:
#   step       -  step the inferior one source line (stepping into functions)
#   next       -  step the inferior one source line (stepping over functions)
#   finish     -  finish the current frame of execution
#   continue   -  continue executing the inferior
#   stepi      -  step one machine instruction (stepping into calls)
#   nexti      -  step one machine instruction (stepping over calls)
#   run        -  run/re-run the inferior
#   stop       -  stop or detach from target
#
# FIXME: This should really be in an object which describes gdb's state.
# Unfortunately, this doesn't exist, so it's here for now.
itcl::body SrcWin::inferior {action} {

  # Check to see if this action is forwarded to other Insight instances
  if {$::iipc} {
    switch $action {
      step -
      next -
      stepi -
      nexti -
      finish {
	if {[pref get gdb/ipc/step_button]} {
	  $::insight_ipc send $action
	}
      }
      continue {
	if {[pref get gdb/ipc/cont_button]} {
	  $::insight_ipc send $action
	}
      }
      run { 
	if {[pref get gdb/ipc/run_button]} {
	  $::insight_ipc send $action
	}
      }
      stop {
	if {[pref get gdb/ipc/stop_button]} {
	  $::insight_ipc send $action
	}
      }
    }
  }

  switch $action {
    step { gdbtk_step }
    next { gdbtk_next }
    finish { gdbtk_finish }
    continue { gdbtk_continue }
    stepi { gdbtk_stepi }
    nexti { gdbtk_nexti }
    run { gdbtk_run }
    stop { gdbtk_stop }
  }
}

# ------------------------------------------------------------------
#  METHOD:  clear_file
#  Tasks for SrcWin to clear file:
#
# - clear window
# - reset to src mode
# - clear func/file comboboxes
# - clear status (done by no_inferior)
# - allow SrcTextWin to clear_file
# ------------------------------------------------------------------
itcl::body SrcWin::clear_file {} {

  # Reset to Source mode
  if {[$twin mode_get] != "SOURCE"} {
    mode {} SOURCE 0
  }

  no_inferior
  reset

  # run srctextwin clear_file
  $twin clear_file
}

# ------------------------------------------------------------------
#  METHOD:  get_file
#  Return name of displayed file, or empty string if no file.
# ------------------------------------------------------------------
itcl::body SrcWin::get_file {} {
  if {$twin == ""} {
    return ""
  } else {
    return [$twin get_file]
  }
}

# ------------------------------------------------------------------
#  METHOD:  is_fixed
#  Return boolean indicating whether this window is fixed.
# ------------------------------------------------------------------
itcl::body SrcWin::is_fixed {} {
  return 0
}

# ------------------------------------------------------------------
#  METHOD:  get_top
#  Return toplevel
# ------------------------------------------------------------------
itcl::body SrcWin::get_top {} {
  return $top
}

# ------------------------------------------------------------------
#  METHOD:  _set_tag_to_stack
#  Set tag to `stack' and update the underlying window.
# ------------------------------------------------------------------
itcl::body SrcWin::_set_tag_to_stack {} {
  set tag STACK_TAG
  if {$twin != ""} then {
    $twin set_tag_to_stack
  }
}

# ------------------------------------------------------------------
#  METHOD:  _choose_window
#  Choose the right source window.
# ------------------------------------------------------------------
itcl::body SrcWin::_choose_window {file} {
  # Find the next available source window.  The rules are:
  # 1. LRU overall
  # 2. Skip iconified windows
  # 3. If a window already shows the file, use it.  Prefer the
  #    window currently showing the PC
  # 4. If the window is fixed, skip it
  if {$pc_window != ""} then {
    if {[$pc_window get_file] == $file} then {
      return $pc_window
    }
  }

  set choice ""
  foreach win $window_list {
    if {[wm state [$win get_top]] != "normal"} then {
      continue
    }

    if {[$win get_file] == ""
	|| [$win get_file] == $file
	|| ! [$win is_fixed]} then {
      set choice $win
      break
    }
  }

  # If we didn't find an available window, then pick the current PC
  # window.
  if {$choice == ""} then {
    set choice $pc_window
  }

  set window_list [lremove $window_list $choice]
  lappend window_list $choice

  return $choice
}

# ------------------------------------------------------------------
#  METHOD:  choose_and_update
#  Choose the right source window and then cause it to be updated
# ------------------------------------------------------------------
itcl::body SrcWin::choose_and_update {} {
  global gdb_exe_name

  if {$pc_window == ""} then {
    set pc_window [lindex $window_list 0]
  }

  if {$pc_window == ""} then {
    # Nothing.
  } elseif {[catch {gdb_loc} loc]} {
    $pc_window set_execution_status
  } else {
    set prev $pc_window
    set file [lindex $loc 2]
    set pc_window [_choose_window $file]
    debug "chose window $pc_window"
    if {$gdb_exe_name != ""} {
      $pc_window _update $loc
      if {$pc_window != $prev} then {
        $pc_window reveal
        $prev _set_tag_to_stack
      }
    }
  }
}

# ------------------------------------------------------------------
#  METHOD:  choose_and_display
#  Choose the right source window for a given file
# ------------------------------------------------------------------
itcl::body SrcWin::choose_and_display {tag linespec} {
  set file [lindex $linespec 2]
  set window [_choose_window $file]
  $window location $tag $linespec
}
@


1.36
log
@        * library/main.tcl: Add gdbtk_platform definitions.
        * library/attachdlg.itb (list_pids): Use gdbtk_platform
        instead of tcl_platform.
        * library/bpwin.itb (build_win): Likewise.
        (_bp_add): Likewise.
        (_bp_modify): Likewise.
        * library/download.itb (download_it): Likewise.
        * library/globalpref.itb (_build_win): Likewise.
        * library/helpviewer.tcl (open_help): Likewise.
        * library/interface.tcl (gdbtk_tcl_query): Likewise.
        (show_warning): Likewise.
        (open_file): Likewise.
        (run_executable): Likewise.
        * library/managedwin.itb (reveal): Likewise.
        (_create): Likewise.
        * library/prefs.tcl (pref_read): Likewise.
        (pref_set_defaults): Likewise.
        (pref_set_colors): Likewise.
        * library/session.tcl (_exe_name): Likewise.
        * library/srcbar.itcl (_update_file_menu): Likewise.
        (create_run_menu): Likewise.
        * library/srctextwin.itb (_mtime_changed): Likewise.
        (LoadFromCache): Likewise.
        * library/targetselection.itb (default_port): Likewise.
        (build_win): Likewise.

        * library/memwin.itb (build_win): Remove unused tcl_platform
        declaration.
        * library/pluginwin.itcl (enable_ui): Likewise.
        * library/process.itb (build_win): Likewise.
        * library/srcbar.itcl (enable_ui): Likewise.
        * library/srcwin.itb (location): Likewise.
        * library/stackwin.itb (build_win): Likewise.
        * library/tdump.tcl (build_win): Likewise.
@
text
@d1029 2
d1044 6
a1049 4
    $pc_window _update $loc
    if {$pc_window != $prev} then {
      $pc_window reveal
      $prev _set_tag_to_stack
@


1.35
log
@        * library/srcwin.itb (_build_win): Add invisible frame to workaround
        the missing frame problem.
@
text
@d2 1
a2 1
# Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004,
d423 1
a423 1
  global gdb_running gdb_exe_name _files tcl_platform
@


1.34
log
@	* library/attachdlg.itb:
	* library/actiondlg.tcl:
	* library/about.tcl:
	* library/ehandler.itb:
	* library/editor.tcl:
	* library/download.ith:
	* library/download.itb:
	* library/debugwin.ith:
	* library/debugwin.itb:
	* library/cspref.ith:
	* library/cspref.itb:
	* library/console.ith:
	* library/console.itb:
	* library/browserwin.ith:
	* library/browserwin.itb:
	* library/bpwin.ith:
	* library/bpwin.itb:
	* library/blockframe.ith:
	* library/managedwin.ith:
	* library/managedwin.itb:
	* library/main.tcl:
	* library/locals.tcl:
	* library/ipcpref.ith:
	* library/ipcpref.itb:
	* library/ipc.tcl:
	* library/interface.tcl:
	* library/helpviewer.tcl:
	* library/globalpref.ith:
	* library/globalpref.itb:
	* library/gdbwin.ith:
	* library/gdbtoolbar.itcl:
	* library/gdbmenubar.itcl:
	* library/gdbevent.ith:
	* library/gdbevent.itb:
	* library/embeddedwin.ith:
	* library/ehandler.ith:
	* library/srcwin.itb:
	* library/srctextwin.ith:
	* library/srctextwin.itb:
	* library/srcpref.ith:
	* library/srcpref.itb:
	* library/srcbar.itcl:
	* library/session.tcl:
	* library/regwin.ith:
	* library/regwin.itb:
	* library/process.ith:
	* library/process.itb:
	* library/prefs.tcl:
	* library/pluginwin.itcl:
	* library/modal.tcl:
	* library/memwin.ith:
	* library/memwin.itb:
	* library/mempref.ith:
	* library/mempref.itb:
	* library/watch.tcl:
	* library/watch.tcl:
	* library/warning.tcl:
	* library/vartree.ith:
	* library/vartree.itb:
	* library/util.tcl:
	* library/tracedlg.tcl:
	* library/toplevelwin.ith:
	* library/tfind_args.tcl:
	* library/tdump.tcl:
	* library/targetselection.ith:
	* library/targetselection.itb:
	* library/stackwin.ith:
	* library/stackwin.itb:
	* library/srcwin.ith:
@
text
@d2 2
a3 1
# Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004 Red Hat, Inc.
d110 5
d116 2
a117 1
  pack $_statbar.name $_statbar.func -side left -pady 4 -padx 10
@


1.34.2.1
log
@        * library/srcwin.itb (_build_win): Add invisible frame to workaround
        the missing frame problem.
@
text
@d2 1
a2 2
# Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004,
# 2006 Red Hat, Inc.
a108 5
  # Workaround: the three comboboxes above sometimes display with
  # height of one pixel. Inserting an invisible frame with the required
  # height "fixes" this...
  frame $_statbar.strut -height 24 -width 10

d110 1
a110 2
  pack $_statbar.name $_statbar.func $_statbar.strut  \
      -side left -pady 4 -padx 10
@


1.33
log
@2004-08-27  Martin Hunt  <hunt@@redhat.com>

	* library/ipc.tcl: New file.
	* library/ipcpref.ith: New file.
	* library/ipcpref.itb: New file.

	* library/srcwin.itb (SrcWin::inferior): Call ipc
	send if enabled.

	* library/prefs.tcl (pref_set_defaults): Enable color
	schemes by default. Add IPC defaults.

	* library/srcbar.itcl (create_pref_menu): Create
	"Advanced" cascade menu and put "Edit Color Schemes"
	and "IPC Support" under it.

	* library/managedwin.itb (ManagedWin::destructor):
	If IPC enabled then send "quit" on exit.

	* library/main.tcl: Start IPC if enabled.

	* library/prefs.tcl (pref_set_defaults): Add IPC defaults.

	* library/gdbmenubar.itcl (menubar_get_current_menu):
	New method.
@
text
@d2 1
a2 1
# Copyright 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004 Red Hat, Inc.
@


1.32
log
@2004-02-17  Martin Hunt  <hunt@@redhat.com>

	* generic/gdbtk-register.c (Gdbtk_Register_Init): Replace
	calls to register_gdbarch_swap with deprecated_register_gdbarch_swap.

	* library/srcwin.itb: Remove an apparently redundant call
	to gdbtk_locate_main and location. This actually broken
	situations where no source files were found.
@
text
@d2 1
a2 1
# Copyright 1997, 1998, 1999, 2000, 2001, 2002, 2003 Red Hat, Inc.
d869 30
a900 1

a901 1

a902 1

a903 1

a904 1

a905 1

a906 1

@


1.31
log
@        From Nick Kelsey <nickk@@ubicom.com>:
        * process.itb (build_win): Removed ide_sizebox instantiation that is
        no longer required and is causing errors for win hosts.
        * tdump.tcl (build_win): Ditto.
        * locals.tcl (build_win): Removed ide_sizebox instantiation that is
        no longer required and already commented out.
        * regwin.itb (build_win): Ditto.
        * srcwin.itb (constructor): Ditto.
        * stackwin.itb (constructor): Ditto.
        * watch.tcl (constructor): Ditto.
@
text
@a171 4
  } else {
    if {[set linespec [gdbtk_locate_main]] != ""} {
      location BROWSE_TAG $linespec
    }
@


1.30
log
@2003-03-05  Martin M. Hunt  <hunt@@redhat.com>

	* generic/gdbtk-cmds.c (Gdbtk_Init): Create gdb_CA_to_TAS.
	(gdb_load_disassembly): Now takes CORE_ADDRs. Returns CORE_ADDRs
	for low and high.
	(gdbtk_load_asm): Use CORE_ADDRs.
	(gdb_loc): Return CORE_ADDRs.
	(gdb_entry_point): Return CORE_ADDR.
	(gdb_incr_addr): Update description.
	(gdb_CA_to_TAS): New function. Takes a CORE_ADDR and returns
	a target sddress string.

	* generic/gdbtk-bp.c (gdb_find_bp_at_addr): Change to
	take a CORE_ADDR.
	(gdb_get_breakpoint_info): Returns a CORE_ADDR.
	(gdb_set_bp_addr): Takes a CORE_ADDR.

	* library/bpwin.itb (bp_add): Call gdb_CA_to_TAS before
	displaying address.
	(bp_modify): Ditto.

	* library/srcwin.itb (location): Call gdb_CA_to_TAS before
	displaying address. Don't add "0x" in front of address.
	(set_execution_status): Call gdb_CA_to_TAS before
	displaying address. Don't call [gdb_cmd printf] to format
	output. Weird.
@
text
@a24 5
  # On Windows, create a sizebox.
  if {$::tcl_platform(platform) == "windows"} {
#    ide_sizebox $itk_interior.sizebox
  }

@


1.29
log
@2003-02-03  Martin M. Hunt  <hunt@@redhat.com>

        * library/globalpref.itb, library/mempref.itb, library/srcpref.itb,
        library/srcwin.itb, library/targetselection.itb, library/tracedlg.tcl:
        Set background color of comboboxes to Colors(textbg).

        * library/main.tcl: Load combobox version 2.2.

        * library/prefs.tcl: Minor optimization. Change order of main_names
        to have the most common, "main", first.
@
text
@d419 1
a420 1
#  we are browsing, or walking the stack.
d468 3
d472 3
a474 3
  if {[string length $addr] > 10} {
    # 64-bit address plus "0x"
    set width 18
d476 2
a477 2
    # 32-bit address plus "0x"
    set width 10
d479 1
a479 1
  $_statusframe.addr configure -text $addr -font global/fixed -width $width
d675 2
d685 1
a685 1
	set message [gdb_cmd "printf \"Program stopped at %lx\",$pc"]
d694 3
a696 3
	ASSEMBLY {set message [gdb_cmd "printf \"$msg at 0x%lx\",$pc"] }
	MIXED {set message [gdb_cmd "printf \"$msg at line $line, 0x%lx\",$pc"] }
	SRC+ASM {set message [gdb_cmd "printf \"$msg at line $line, 0x%lx\",$pc"] }
@


1.28
log
@2003-01-21  Martin M. Hunt  <hunt@@redhat.com>
	* library/main.tcl: Don't require iwidgets 3.0.

	* library/console.itb (Console::_build_win): Rename
	tkTextClosestGap to tk::TextClosestGap. Rename tkCancelRepeat
	to tk::CancelRepeat. Rename tkPriv to tk::Priv. Needed for tk 8.4.1.

	* library/bpwin.itb (BpWin::build_win): Don't
	create sizebox.
	* library/locals.tcl (build_win): Ditto.
	* library/regwin.itb (RegWin::_build_win): Ditto.
	* library/srcwin.itb (SrcWin::constructor): Ditto.
	* library/stackwin.itb (StackWin::build_win): Ditto.
	* library/watch.tcl (build_win): Ditto.
@
text
@d100 1
a100 1
    -command [code $this _name]
d105 1
a105 1
    -command [code $this goto_func]
d107 1
a107 1
    -font global/fixed -command [code $this mode]
@


1.27
log
@2002-10-15  Martin M. Hunt  <hunt@@redhat.com>

	* library/* : auto_mkindex cannot rebuild
	tclIndex because it does not recognize the namespace
	import in main.tcl.  To get it to work again, rename the
	following:
		body -> itcl::body
		configbody -> itcl::configbody
		class -> itcl::class
@
text
@d2 1
a2 1
# Copyright 1997, 1998, 1999, 2000, 2001, 2002 Red Hat, Inc.
d27 1
a27 1
    ide_sizebox $itk_interior.sizebox
@


1.26
log
@        * library/srcwin.itb (_build_win): Anchor status label so that
        text appears at left instead of centered.
@
text
@d18 1
a18 1
body SrcWin::constructor {args} {
d55 1
a55 1
body SrcWin::destructor {} {
d70 1
a70 1
body SrcWin::_build_win {} {
d188 1
a188 1
body SrcWin::_set_state {varname} {
d212 1
a212 1
body SrcWin::download_progress { section num tot {msg ""} } {
d280 1
a280 1
body SrcWin::reconfig {} {
d293 1
a293 1
body SrcWin::_name {w {val ""}} {
d325 1
a325 1
body SrcWin::toggle_updates {value} {
d334 1
a334 1
body SrcWin::goto_func {w {val ""}} {
d365 1
a365 1
body SrcWin::fillNameCB {} {
d386 1
a386 1
body SrcWin::fillFuncCB {name} {
d424 1
a424 1
body SrcWin::location {tag linespec} {
d491 1
a491 1
body SrcWin::stack {cmd} {
d506 1
a506 1
body SrcWin::_update {loc} {
d519 1
a519 1
body SrcWin::idle {event} {
d527 1
a527 1
body SrcWin::mode {w new_mode {go 1}} {
d538 1
a538 1
body SrcWin::_update_title {name} {
d551 1
a551 1
body SrcWin::busy {event} {
d572 1
a572 1
body SrcWin::update {event} {
d588 1
a588 1
body SrcWin::_set_name { val {found 1} } {
d612 1
a612 1
body SrcWin::set_status { {msg ""} {tmp 0} } {
d628 1
a628 1
body SrcWin::set_execution_status { {line ""} {pc ""}} {
d702 1
a702 1
body SrcWin::edit {} {
d722 1
a722 1
body SrcWin::print {} {
d731 1
a731 1
body SrcWin::enable_ui { on } {
d767 1
a767 1
body SrcWin::no_inferior {} {
d776 1
a776 1
body SrcWin::reset {} {
d798 1
a798 1
body SrcWin::search {direction string} {
d808 1
a808 1
body SrcWin::point_to_main {} {
d820 1
a820 1
body SrcWin::_exit {} {
d831 1
a831 1
body SrcWin::test_get {var {private_func 0}} {
d851 1
a851 1
body SrcWin::toolbar {state} {
d871 1
a871 1
body SrcWin::inferior {action} {
d902 1
a902 1
body SrcWin::clear_file {} {
d920 1
a920 1
body SrcWin::get_file {} {
d932 1
a932 1
body SrcWin::is_fixed {} {
d940 1
a940 1
body SrcWin::get_top {} {
d948 1
a948 1
body SrcWin::_set_tag_to_stack {} {
d959 1
a959 1
body SrcWin::_choose_window {file} {
d1002 1
a1002 1
body SrcWin::choose_and_update {} {
d1028 1
a1028 1
body SrcWin::choose_and_display {tag linespec} {
@


1.25
log
@        * library/browserwin.itb (_full_funcs_combo): Remove "-modal"
        option from tk_messageBox call. It was redhat-local in tk8.0,
        but is no longer in tk8.3.
        * library/download.itb (download_it): Likewise.
        * library/interface.tcl (gdbtk_tcl_query): Likewise.
        (show_warning): Likewise.
        (set_exe): Likewise.
        (set_target): Likewise.
        * library/memwin.itb (error_dialog): Likewise.
        * library/srcwin.itb (fillFuncCB): Likewise.
        * library/util.tcl (tfind_cmd): Likewise.
@
text
@d129 2
a130 1
    label $_status -relief sunken -bd 3 -font global/status -height 1
@


1.24
log
@2002-03-06  Martin M. Hunt  <hunt@@redhat.com>

	* library/srcwin.itb: Don't try to set balloon help
	for search widget; it moved to srcbar.
@
text
@d391 1
a391 1
	-title "GDB" -type ok -modal system \
@


1.23
log
@2002-03-05  Martin M. Hunt  <hunt@@redhat.com>

	* library/prefs.tcl (pref_read): If a preference specifies
	"src-font", substitute "global/fixed".
	(pref_set_defaults): Change defaults from "src-font" to
	"global/fixed". Do not create font object "src-font". Do
	not add hook to trace its changes.
	(pref_src-font_trace): Remove.

	* library/console.itb (Console::_update_option): Remove
	font update because this happens automatically.

	* library/globalpref.itb: No need to set
	changed flag for fonts; updates happen automatically
	when prefs are updated.

	* library/bpwin.itb: Replaced src-font with global/fixed.
	* library/browserwin.itb: Ditto.
	* library/mempref.itb: Ditto.
	* library/memwin.itb: Ditto.
	* library/process.itb: Ditto.
	* library/regwin.itb: Ditto.
	* library/srcbar.itcl: Ditto.
	* library/srcpref.itb: Ditto.
	* library/srctextwin.itb: Ditto.
	* library/srcwin.itb: Ditto.
	* library/stackwin.itb: Ditto.
	* library/tdump.tcl: Ditto.
	* library/tracedlg.tcl: Ditto.
	* library/variables.tcl: Ditto.
	* library/watch.tcl: Ditto.
@
text
@a162 1
  balloon register $_statbar.frame.search "Search for text"
@


1.22
log
@
	* library/srcbar.itcl (SrcBar::create_buttons): Added
	"Search in source file" entry box and label to the top
	row toolbar.
	* library/srcwin.itb (SrcWin::_build_win): Removed
	"Search in source file" entry box.
	(SrcWin::_search): Renamed to "search", add string
	parameter and cleaned up.
	* library/srcwin.ith (SrcWin): Removed private
	method "_search" and added public method "search".
@
text
@d99 1
a99 1
  combobox::combobox $_statbar.name -maxheight 15 -font src-font\
d104 1
a104 1
  combobox::combobox $_statbar.func -maxheight 15 -font src-font\
d107 1
a107 1
    -font src-font -command [code $this mode]
d139 1
a139 1
      -bd 1 -anchor e -font src-font
d141 1
a141 1
      -bd 1 -anchor e -font src-font
d476 1
a476 1
  $_statusframe.addr configure -text $addr -font src-font -width $width
@


1.21
log
@update copyrights (dates verified with cvs)
@
text
@a113 9
  # Search
  frame $_statbar.frame
  entry $_statbar.frame.search -bd 3 -font src-font -width 10
  bind_plain_key $_statbar.frame.search \
    Return [code $this _search forwards]
  bind_plain_key $_statbar.frame.search \
    Shift-Return [code $this _search backwards]

  pack $_statbar.frame -side right -pady 4 -padx 10 -fill y -expand 1 -anchor e
a116 2
  pack $_statbar.frame.search -fill x -expand yes  

d795 1
a795 1
#  PRIVATE METHOD:  _search - search for text or jump to a specific line
d798 1
a798 3
body SrcWin::_search {direction} {
  set exp [$_statbar.frame.search get]
  #debug "searching $direction for \"$exp\""
d800 1
a800 1
  set_status [$twin search $exp $direction] 1
@


1.20
log
@        * library/srcwin.itb (location): Fix typo. It's "addr" not
        "address".
@
text
@d2 1
a2 1
# Copyright 1997, 1998, 1999, 2001 Red Hat
@


1.19
log
@	* library/srcbar.itcl (SrcBar::create_buttons): Line number
	and address fields have been removed and added to the
	status bar.
	* library/srcwin.itb (SrcWin::_build_win): Add address and
	line number fields to status bar.  Moved download progress
	bar to status bar.
	(SrcWin::download_progress):  Use canvas on status bar.
	Remember to adjust width of 64-bit address.
	(SrcWin::location): Set line number and address on status bar.
	* library/srcwin.ith (SrcWin): Added new private variable.
@
text
@d480 1
a480 1
  if {[string length $address] > 10} {
@


1.18
log
@2001-11-05  Martin M. Hunt  <hunt@@redhat.com>

	* library/debugwin.itb (DebugWin::build_win):
	Initialize gdbtk_de(ERRORS_ONLY) and gdbtk_de(filter_var)
	(DebugWin::puts): Rewrite filter to handle new options.
	(DebugWinDOpts::build_win): Update list of classes. Change
	filter dialog so we can not display only errors and warnings
	or choose between displaying ALL classes except those selected
	or only selected classes. Fix "OK" button to apply
	changes before closing dialog.
	DebugWinOpts::_apply): Now takes an agrument that
	indicates if dialog should exit after applying filter.

	* library/debugwin.ith (_apply): Now takes an arg.

	* library/main.tcl: If GDBTK_DEBUGFILE is not set,
	use "insight.log" as the default. If GDBTK_DEBUG is set
	and nonzero, start logging debug messages to
	GDBTK_DEBUGFILE immediately. Never open the debug window
	automatically.

	* library/managedwin.itb (ManagedWin::shutdown): Don't
	save debug window options dialog on active list

	* library/srcwin.itb: Remove troublesome debug line.
@
text
@d114 1
a114 2

  # Search/download progress frame
a120 4
  canvas $_statbar.frame.progress -relief sunken -borderwidth 2 \
    -highlightthickness 0 -takefocus 0 -width 100 -height 0 -confine 1
  $_statbar.frame.progress create rectangle 0 0 0 \
    [winfo height $_statbar.frame.progress] -outline blue -fill blue -tags rect
d138 2
d141 23
a163 1
    pack $_status -expand 1 -fill both
d228 2
a229 2
    pack forget $_statbar.frame.search
    pack $_statbar.frame.progress -fill both -expand yes
d254 1
a254 1
  set canvas $_statbar.frame.progress
d281 3
a283 2
    pack forget $_statbar.frame.progress
    pack $_statbar.frame.search -fill x -expand yes
d480 9
a488 1
  $_toolbar configure -address $addr -line $line
@


1.17
log
@	* library/tclIndex: Updated.
	* library/prefs.tcl (pref_set_defaults): Define gdb/editor
	preference.
	* library/srcpref.itb (SrcPref::constructor): Save gdb/editor
	preference.
	(SrcPref::build_win): Added external editor control.
	* library/srctextwin.itb (SrcTextWin::do_source_popup): Always
	enable external editor.  Use `code' instead of `list'.
	* library/srcwin.itb (SrcWin::edit): Use Editor::edit.
	* library/editor.tcl: New file.
	* generic/gdbtk.c (enable_external_editor): Removed.
	(external_editor_command): Default to NULL.
	(gdbtk_init): Don't set enable_external_editor.  Free external
	editor command when finished with it.
@
text
@a358 1
  debug "gdb_listfiles returned $allfiles"
@


1.16
log
@	* library/srcwin.itb (SrcWin::fillFuncCB): Sort function names.
@
text
@d687 1
a687 1
  global enable_external_editor external_editor_command
d689 1
a689 1
    
d694 1
a694 1
  
d699 2
a700 8
  
  
  if {[info exists enable_external_editor] && $enable_external_editor} {
    if {[catch {uplevel \#0 "$external_editor_command edit $loc_info"} ]} {
      tk_dialog .warn-sn "Edit" $err error 0 Ok
    }
    return
  }  
@


1.15
log
@	* library/interface.tcl (gdb_update_hook): Mark as deprecated.
	(gdbtk_update): Dispatch and UpdateEvent, too.
	* library/ehandler.ith (update): New event handler.
	* library/gdbevent.ith (UpdateEvent): New event.
	* library/gdbevent.itb (UpdateEvent::constructor): New method.
	(UpdateEvent::get): New method.
	* library/kod.ith (udpate): Match event handler definition.
	* library/kod.itb (update): Ditto.
	(build_win): Pass dummy argument to update method.
	(top): Ditto.
	(up): Ditto.
	(set_variable): Ditto.
	* library/memwin.ith (update): Match event handler definition.
	* library/memwin.itb (update): Ditto.
	(constructor): Remove gdb_update_hook.
	(destructor): Ditto.
	* library/process.ith (update): Match event handler definition.
	* library/process.itb (update): Ditto.
	(constructor): Remove gdb_update_hook.
	(destructor): Ditto.
	(build_win): Pass dummy argument to update method.
	* library/regwin.ith (update): Match event handler definition.
	* library/regwin.itb (update): Ditto.
	(constructor): Remove gdb_update_hook.
	(destructor): Ditto.
	(build_win): Pass dummy argument to update method.
	(but3): Ditto.
	(unedit): Ditto.
	* library/stackwin.ith (update): Match event handler definition.
	* library/stackwin.itb (update): Ditto.
	(constructor): Remove gdb_update_hook.
	(destructor): Ditto.
	(build_win): Pass dummy argument to update method.
	* library/tdump.tcl (update): Match event handler definition.
	(constructor): Remove gdb_update_hook.
	(destructor): Ditto.
	(build_win): Pass dummy argument to update method.
	* library/variables.tcl (update): Match event handler definition.
	(build_win): Pass dummy argument to update method.
	* library/locals.tcl (update): Match event handler definition.
	(constructor): Pass dummy argument to update method.
	* library/watch.tcl (update): Match event handler definition.
	Pass dummy argument to VariableWin::update.
	(add): Pass dummy argument to update method.
	* library/srcwin.ith (update): New method.
	(update_hook_init): Remove.
	* library/srcwin.itb (update): New method.
	(constructor): Remove gdb_update_hook.
	(destructor): Ditto.
	* tclIndex: Regenerate.
@
text
@d389 1
a389 1
    foreach f $listfuncs {
@


1.14
log
@	* library/interface.tcl (gdb_idle_hook): Mark as deprecated.
	(gdbtk_idle): Dispatch an IdleEvent. gdb_idle_hook is gone.
	* library/ehandler.ith (idle): New event handler.
	* library/gdbevent.ith (IdleEvent): New event.
	* library/console.ith (idle): Match event handler definition.
	* library/console.itb (idle): Ditto.
	(constructor): Remove gdb_idle_hook.
	(destructor): Ditto.
	* library/kod.ith (idle): Match event handler definition.
	* library/kod.itb (idle): Ditto.
	(constructor): Remove gdb_idle_hook.
	(destructor): Ditto.
	* library/memwin.ith (idle): Match event handler definition.
	* library/memwin.itb (idle): Ditto.
	(constructor): Remove gdb_idle_hook.
	(destructor): Ditto.
	* library/pluginwin.itcl (stopped): Rename to "idle" and
	match event handler definition.
	Fix misleading comments.
	* library/process.ith (idle): Match event handler definition.
	* library/process.itb (idle): Ditto.
	(constructor): Remove gdb_idle_hook.
	(destructor): Ditto.
	* library/regwin.ith (idle): Match event handler definition.
	* library/regwin.itb (idle): Ditto.
	(constructor): Remove gdb_idle_hook.
	(destructor): Ditto.
	* library/srcbar.itcl (idle): New method.
	(constructor): Remove gdb_idle_hook.
	(destructor): Ditto.
	* library/srcwin.ith (idle): Match event handler definition.
	* library/srcwin.itb (idle): Ditto.
	(constructor): Remove gdb_idle_hook.
	(destructor): Ditto.
	* library/stackwin.ith (idle): Match event handler definition.
	* library/stackwin.itb (idle): Ditto.
	(constructor): Remove gdb_idle_hook.
	(destructor): Ditto.
	* library/variables.tcl (idle): Match event handler definition.
	(constructor): Remove gdb_idle_hook.
	(destructor): Ditto.
	* library/plugins/rhabout/rhabout.itcl (stopped): Rename
	to "idle" and match new event handler definition.
	* library/tclIndex: Regenerated.
@
text
@a40 4
  if {! $update_hook_init} then {
    set update_hook_init 1
    add_hook gdb_update_hook "SrcWin::choose_and_update"
  }
a316 5
  if {$value} {
    add_hook gdb_update_hook "$this update"
  } else {
    remove_hook gdb_update_hook "$this update"
  }
d550 16
@


1.13
log
@	* library/interface.tcl (gdb_busy_hook): Deprecate.
	(gdbtk_busy): Create and dispatch a BusyEvent instead
	of running hooks.
	* library/ehandler.ith (busy): New event handler.
	* library/gdbevent.ith (BusyEvent): New event class.
	* library/console.ith: Inherit from GDBEventHandler.
	(busy): Match event handler definition.
	* library/console.itb (busy): Ditto.
	(constructor): Remove gdb_busy_event.
	(destructor): Ditto.
	* library/kod.ith (busy): Match event handler definition.
	* library/kod.itb (busy): Ditto.
	(constructor): Remove gdb_busy_hook.
	(destructor): Ditto.
	* library/memwin.ith (busy): Match event handler definition.
	* library/memwin.itb (busy): Ditto.
	(constructor): Remove gdb_busy_hook.
	(destructor): Ditto.
	* library/pluginwin.itcl (running): Rename to "busy" and
	match event handler definition.
	(consturctor): Remove gdb_busy_hook.
	(destructor): Ditto.
	* library/process.ith (busy): Match event handler definition.
	* library/process.itb (busy): Ditto.
	(constructor): Remove gdb_busy_hook.
	(destructor): Ditto.
	* library/regwin.ith (busy): Match event handler definition.
	* library/regwin.itb (busy): Ditto.
	(constructor): Remove gdb_busy_hook.
	(destructor): Ditto.
	* library/srcbar.itcl (constructor): Remove gdb_busy_hook.
	(destructor): Ditto.
	(busy): New method.
	* library/srcwin.ith (busy): Match event handler definition.
	* library/srcwin.itb (busy): Ditto.
	Only do the "busy" stuff if do_updates is set.
	(toggle_updates): Remove gdb_busy_hook.
	(constructor): Ditto.
	(destructor): Ditto.
	* library/stackwin.ith (busy): Match event handler definition.
	* library/stackwin.itb (busy): Ditto.
	(constructor): Remove gdb_busy_hook.
	(destructor): Ditto.
	* library/variables.tcl (constructor): Ditto.
	(destructor): Ditto.
	(disable_ui): Rename to "busy" and match event handler
	definition.
	* library/plugins/rhabout/rhabout.itcl (running): Rename
	to "busy" and match new event handler definition.
	* library/tclIndex: Regenerated.
@
text
@a44 1
  add_hook gdb_idle_hook "$this idle"
a61 1
  remove_hook gdb_idle_hook "$this idle"
d512 1
a512 1
body SrcWin::idle {} {
@


1.12
log
@2001-02-06  Fernando Nasser  <fnasser@@redhat.com>

	Originally from Martin Hunt <hunt@@redhat.com>, with modifications
	* library/srcwin.itb (_name): Check for errors when invoking
	gdb_find_file.
	* library/srctextwin.itb (_mtime_changed, location): Ditto.
	* generic/gdbtk-cmds.c (gdb_find_file_command): Better error checking.
	(full_lookup_symtab): Fix misleading comment.
@
text
@a44 1
  add_hook gdb_busy_hook "$this busy"
a61 1
  remove_hook gdb_busy_hook "$this busy"
a324 1
    add_hook gdb_busy_hook "$this busy"
a326 1
    remove_hook gdb_busy_hook "$this busy"
d546 1
a546 1
body SrcWin::busy {} {
d550 11
a560 9
  enable_ui 0
  if {$Running} {
    $_toolbar configure -runstop running
    if {$gdb_loaded || \
	  ([TargetSelection::native_debugging] && $gdb_target_name != "remote")} {
      set_status "Program is running."
    } 
  } else {
    $_toolbar configure -runstop busy
@


1.11
log
@2001-01-25  Fernando Nasser  <fnasser@@redhat.com>

	* library/srcbar.itcl: New file. Implement SrcBar, a menu and toolbar
	for the Source Window (code previously in srcmenubar.itcl and
	srctoolbar.itcl).
	* library/srcmenubar.itcl: Remove obsolete file.
	* library/srctoolbar.itcl: Remove obsolete file.
	* library/srcbar.tcl: Remove obsolete file.
        * library/srcwin.itb (_build_win): Use SrcBar.
	* library/tclIndex: Regenerate.
@
text
@d1 2
a2 2
# Source window for GDBtk.
# Copyright 1997, 1998, 1999 Cygnus Solutions
d298 5
a302 1
	set full [gdb_find_file $val]
d376 2
@


1.10
log
@2001-01-15  Fernando Nasser  <fnasser@@redhat.com>

	* srcwin.itb (clear_file): Pass the appropriate value to the GO
	argument of mode() so it does not try to read a source file when
	no executable is loaded.
@
text
@a80 3
  # add a menu to the source window
  SrcMenuBar $this._menubar $this

d83 1
a83 1
  SrcToolBar $_toolbar $this \
d86 1
@


1.9
log
@2001-01-03  Fernando Nasser  <fnasser@@totem.toronto.redhat.com>

	* library/prefs.tcl (pref_set_defaults): Define gdb/src/top_control
	to allow the source window controls to be placed at the top.
	* library/srcwin.itb (_build_win): Test for gdb/src/top_control
	and place the controls accordingly.
@
text
@d891 1
a891 1
    mode {} SOURCE
@


1.8
log
@2001-01-02  Fernando Nasser  <fnasser@@totem.toronto.redhat.com>

	* library/gdbmenubar.itcl: New file. Define the GDBMenuBar class,
	a generic menubar building facility for Insight windows (WIP).
	* library/gdbtoolbar.itcl: New file. Define the GDBToolBar class,
	a generic toolbar building facility for Insight windows (WIP).
	* library/srcmenubar.itcl: New file. Define the SrcMenuBar class,
	which implements the Source Window menubar (inherits GDBMenuBar).
	* library/srctoolbar.itcl: New file. Define the SrcToolBar class,
	which implements the Source Window toolbar (inherits GDBToolBar).
	* library/srcwin.itb (_build_win): Use SrcMenuBar and SrcToolBar
	instead of the obsolete GDBSrcBar.
	* library/srcbar.tcl: Mark as OBSOLETE.
	* library/toolbar.tcl: Mark as OBSOLETE. Rename class GDBToolBar
	to avoid conflict with new class with the same name.
	* library/Makefile (TCL): Include .itcl files.
	* library/tclIndex: Regenerate.
@
text
@d90 13
a102 9
  # add a SrcTextWin container
  set srcwin [conAdd src]
  set twin [SrcTextWin $srcwin -Tracing $Tracing -parent $this]
  pack $srcwin -expand 1 -fill both

  # add status line
  set _status [conAdd status -resizable 0]
  label $_status -relief sunken -bd 3 -font global/status -height 1
  pack $_status -expand 1 -fill both
d142 14
@


1.7
log
@2001-01-02  Fernando Nasser  <fnasser@@totem.toronto.redhat.com>

	* library/srcwin.itb (_build_win): If gdb is running a program, load
	the window with source for that location (if available).
	(download_progress): Calls to "update" must refer to the global
	namespace.
@
text
@d81 3
d86 1
a86 1
  GDBSrcBar $_toolbar $this \
@


1.6
log
@	* bpwin.itb (BpWin::goto_bp): Handle multiple source windows.
	* srctextwin.itb (SrcTextWin::get_file): New method.
	(SrcTextWin::set_tag_to_stack): New method.
	* srctextwin.ith (get_file): Declare.
	* srcwin.ith (update_hook_init, window_list, pc_window): New
	common variables.
	(_choose_window, choose_and_update, is_fixed, get_file): Declare.
	* srcwin.itb (SrcWin::_choose_window): New method.
	(SrcWin::choose_and_update): Likewise.
	(SrcWin::_update): Renamed from update.  Now private.  Added `loc'
	argument.
	(SrcWin::get_file): New method.
	(SrcWin::is_fixed): Likewise.
	(SrcWin::constructor): Only add update hook once.  Append this
	object to window list.
	(SrcWin::destructor): Don't add update hook.  Remove this object
	from window list.  Clear pc_window if necessary.
	(SrcWin::get_top): New method.
	(SrcWin::_set_tag_to_stack): New method.
	(SrcWin::choose_and_display): New method.
@
text
@d153 5
a157 1
    update
d236 1
a236 1
      update
@


1.5
log
@	* srcwin.itb (SrcWin::edit): Use uplevel, not eval, to evaluate
	external editor expression.
@
text
@d22 1
a22 1
  
d24 1
a24 1
  
d29 1
a29 1
  
d32 1
a32 1
  
d36 1
a36 1
  
d39 1
a39 1
  
d41 4
a44 1
  add_hook gdb_update_hook "$this update"
d54 2
a62 1
  remove_hook gdb_update_hook "$this update"
d69 4
d474 1
a474 1
#  PUBLIC METHOD:  update - update widget when PC changes
d476 5
a480 10
body SrcWin::update {} {
  if {[catch {gdb_loc} loc]} {
    set_execution_status
  } else {
    debug "loc=$loc"
    # See if name combobox needs filled.
    if {$need_files} {
      fillNameCB
    }
    location "" $loc
d482 1
d874 118
@


1.4
log
@Reverted erroneous checkin.  Sorry about that.
@
text
@d666 1
a666 1
    if {[catch {eval $external_editor_command edit $loc_info} err]} {
@


1.3
log
@	* prefs.tcl (pref_save): Put version number into file.  Added
	`session' to list of top-level keys.  Allow keys with many `/'s.
	(pref_read): Recognize version number.
	(escape_value): Generate URL-style encoding.
	(unescape_value): Added `version' argument.  Handle URL decoding.
@
text
@d22 1
a22 1

d24 1
a24 1

d29 1
a29 1

d32 1
a32 1

d36 1
a36 1

d39 1
a39 1

d41 1
a41 4
  if {! $update_hook_init} then {
    set update_hook_init 1
    add_hook gdb_update_hook "SrcWin::choose_and_update"
  }
a50 2

  lappend window_list $this
d58 1
a64 4
  set window_list [lremove $window_list $this]
  if {$pc_window == $this} then {
    set pc_window ""
  }
d466 1
a466 1
#  METHOD:  _update - update widget when PC changes
d468 10
a477 5
body SrcWin::_update {loc} {
  debug "loc=$loc"
  # See if name combobox needs filled.
  if {$need_files} {
    fillNameCB
a478 1
  location "" $loc
a869 118
}

# ------------------------------------------------------------------
#  METHOD:  get_file
#  Return name of displayed file, or empty string if no file.
# ------------------------------------------------------------------
body SrcWin::get_file {} {
  if {$twin == ""} {
    return ""
  } else {
    return [$twin get_file]
  }
}

# ------------------------------------------------------------------
#  METHOD:  is_fixed
#  Return boolean indicating whether this window is fixed.
# ------------------------------------------------------------------
body SrcWin::is_fixed {} {
  return 0
}

# ------------------------------------------------------------------
#  METHOD:  get_top
#  Return toplevel
# ------------------------------------------------------------------
body SrcWin::get_top {} {
  return $top
}

# ------------------------------------------------------------------
#  METHOD:  _set_tag_to_stack
#  Set tag to `stack' and update the underlying window.
# ------------------------------------------------------------------
body SrcWin::_set_tag_to_stack {} {
  set tag STACK_TAG
  if {$twin != ""} then {
    $twin set_tag_to_stack
  }
}

# ------------------------------------------------------------------
#  METHOD:  _choose_window
#  Choose the right source window.
# ------------------------------------------------------------------
body SrcWin::_choose_window {file} {
  # Find the next available source window.  The rules are:
  # 1. LRU overall
  # 2. Skip iconified windows
  # 3. If a window already shows the file, use it.  Prefer the
  #    window currently showing the PC
  # 4. If the window is fixed, skip it
  if {$pc_window != ""} then {
    if {[$pc_window get_file] == $file} then {
      return $pc_window
    }
  }

  set choice ""
  foreach win $window_list {
    if {[wm state [$win get_top]] != "normal"} then {
      continue
    }

    if {[$win get_file] == ""
	|| [$win get_file] == $file
	|| ! [$win is_fixed]} then {
      set choice $win
      break
    }
  }

  # If we didn't find an available window, then pick the current PC
  # window.
  if {$choice == ""} then {
    set choice $pc_window
  }

  set window_list [lremove $window_list $choice]
  lappend window_list $choice

  return $choice
}

# ------------------------------------------------------------------
#  METHOD:  choose_and_update
#  Choose the right source window and then cause it to be updated
# ------------------------------------------------------------------
body SrcWin::choose_and_update {} {
  if {$pc_window == ""} then {
    set pc_window [lindex $window_list 0]
  }

  if {$pc_window == ""} then {
    # Nothing.
  } elseif {[catch {gdb_loc} loc]} {
    $pc_window set_execution_status
  } else {
    set prev $pc_window
    set file [lindex $loc 2]
    set pc_window [_choose_window $file]
    debug "chose window $pc_window"
    $pc_window _update $loc
    if {$pc_window != $prev} then {
      $pc_window reveal
      $prev _set_tag_to_stack
    }
  }
}

# ------------------------------------------------------------------
#  METHOD:  choose_and_display
#  Choose the right source window for a given file
# ------------------------------------------------------------------
body SrcWin::choose_and_display {tag linespec} {
  set file [lindex $linespec 2]
  set window [_choose_window $file]
  $window location $tag $linespec
@


1.2
log
@2000-08-09  Fernando Nasser  <fnasser@@cygnus.com>

	* srctxtwin.itb (FillSource): Add comments.
@
text
@d22 1
a22 1
  
d24 1
a24 1
  
d29 1
a29 1
  
d32 1
a32 1
  
d36 1
a36 1
  
d39 1
a39 1
  
d41 4
a44 1
  add_hook gdb_update_hook "$this update"
d54 2
a62 1
  remove_hook gdb_update_hook "$this update"
d69 4
d474 1
a474 1
#  PUBLIC METHOD:  update - update widget when PC changes
d476 5
a480 10
body SrcWin::update {} {
  if {[catch {gdb_loc} loc]} {
    set_execution_status
  } else {
    debug "loc=$loc"
    # See if name combobox needs filled.
    if {$need_files} {
      fillNameCB
    }
    location "" $loc
d482 1
d874 118
@


1.1
log
@Initial revision
@
text
@d639 1
a639 1
	SRC+ASM {set message [gb_cmd "printf \"$msg at line $line, 0x%lx\",$pc"] }
@


1.1.1.1
log
@import insight-2000-02-04 snapshot (2nd try)
@
text
@@
