head	1.9;
access;
symbols
	insight_7_6-2013-04-10-branchpoint:1.9
	gdb_7_6-branch:1.9.0.4
	gdb_7_5-branch:1.9.0.2
	gdb_7_4-branch:1.8.0.14
	gdb_7_3-branch:1.8.0.12
	gdb_7_1-branch:1.8.0.10
	gdb_7_0-branch:1.8.0.8
	arc-sim-20090309:1.8
	arc-insight_6_8-branch:1.8.0.6
	arc-insight_6_8-branchpoint:1.8
	insight_6_8-branch:1.8.0.4
	insight_6_8-branchpoint:1.8
	gdb_6_8-branch:1.8.0.2
	insight_6_6-20070208-release:1.7
	gdb_6_6-branch:1.7.0.4
	gdb_6_6-2006-11-15-branchpoint:1.7
	insight_6_5-20061003-release:1.7
	gdb_6_5-branch:1.7.0.2
	gdb_6_5-2006-05-14-branchpoint:1.7
	gdb-csl-gxxpro-6_3-branch:1.6.0.8
	gdb-csl-gxxpro-6_3-branchpoint:1.6
	gdb_6_4-branch:1.6.0.6
	gdb_6_4-2005-11-01-branchpoint:1.6
	gdb_6_1-2004-04-05-release:1.6
	gdb_6_1-branch:1.6.0.4
	gdb_6_1-2004-03-01-gmt-branchpoint:1.6
	gdb_6_0-2003-10-04-release:1.6
	gdb_6_0-branch:1.6.0.2
	gdb_6_0-2003-06-23-branchpoint:1.6
	gdb_5_3-2002-12-12-release:1.4
	gdb_5_3-branch:1.4.0.12
	gdb_5_3-2002-09-04-branchpoint:1.4
	gdb_5_2_1-2002-07-23-release:1.4
	gdb_5_2-2002-04-29-release:1.4
	gdb_5_2-branch:1.4.0.10
	gdb_5_2-2002-03-03-branchpoint:1.4
	gdb_5_1_1-2002-01-24-release:1.4
	cygnus_cvs_20020108_pre:1.4
	gdb_5_1_0_1-2002-01-03-branch:1.4.0.8
	gdb_5_1_0_1-2002-01-03-branchpoint:1.4
	gdb_5_1-2001-11-21-release:1.4
	gdb_s390-2001-09-26-branch:1.4.0.6
	gdb_s390-2001-09-26-branchpoint:1.4
	gdb_5_1-2001-07-29-branch:1.4.0.4
	gdb_5_1-2001-07-29-branchpoint:1.4
	dberlin-typesystem-branch:1.4.0.2
	dberlin-typesystem-branchpoint:1.4
	insight-precleanup-2001-01-01:1.4
	gdb_5_0-2000-05-19-release:1.3
	gdb_4_18_2-2000-05-18-release:1.3
	gdb_4_95_1-2000-05-11-snapshot:1.3
	gdb_4_95_0-2000-04-27-snapshot:1.3
	gdb_5_0-2000-04-10-branch:1.3.0.2
	gdb_5_0-2000-04-10-branchpoint:1.3
	repo-unification-2000-02-06:1.1.1.1
	insight-2000-02-04:1.1.1.1
	SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.9
date	2012.06.25.12.08.57;	author rosch;	state Exp;
branches;
next	1.8;

1.8
date	2008.02.09.01.23.42;	author kseitz;	state Exp;
branches;
next	1.7;

1.7
date	2005.12.23.18.26.50;	author eliz;	state Exp;
branches;
next	1.6;

1.6
date	2003.02.10.20.10.56;	author hunt;	state Exp;
branches;
next	1.5;

1.5
date	2002.10.15.21.19.50;	author hunt;	state Exp;
branches;
next	1.4;

1.4
date	2000.10.26.18.31.38;	author mdejong;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.09.16.02.27;	author ezannoni;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.02.18.34.35;	author ezannoni;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.07.00.19.42;	author jsm;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.07.00.19.42;	author jsm;	state Exp;
branches;
next	;


desc
@@


1.9
log
@   * generic/gdbtk-cmds.c: On windows include
   windows.h/tlhelp32.h. Declare new
   function gdb_list_processes().
   (Gdbtk_Init): Register new tcl function
   "gdb_list_processes".
   (gdb_list_processes): New function.
   * library/attachdlg.itb: Updated copyright.
   (list_pids): Use gdb_list_processes for
   getting the process list. Fallback to
   ps if empty list is returned. Adapt method comment.
   * library/srcbar.itcl: Updated copyright.
   (create_run_menu): Allow "Attach to process" on
   windows, too.
@
text
@# Attach Dialog for Insight.
# Copyright (C) 1999-2012 Red Hat, Inc.
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License (GPL) as published by
# the Free Software Foundation; either version 2 of the License, or (at
# your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.


itcl::body AttachDlg::constructor {args} {
  eval itk_initialize $args
  window_name "Attach To Process"
  build_win
}

itcl::body AttachDlg::build_win {} {
  # Frame
  itk_component add pid {
    iwidgets::labeledframe $itk_interior.f -labeltext "Choose Process" \
      -relief groove -borderwidth 2 -ipadx 6 -ipady 4
  }

  # Listbox of processes
  itk_component add choose_pid {
    iwidgets::scrolledlistbox [$itk_component(pid) childsite].pid \
      -visibleitems 30x15 -hscrollmode dynamic -vscrollmode dynamic\
      -exportselection 0 -selectioncommand [code $this select_pid] \
      -foreground $::Colors(textfg) -textbackground $::Colors(textbg) \
      -dblclickcommand [code $this doit] 
  }

  # Filter entryfield
  itk_component add pid_filter {
    iwidgets::entryfield [$itk_component(pid) childsite].filt \
      -labeltext "Filter:" \
      -foreground $::Colors(textfg) -textbackground $::Colors(textbg) \
      -focuscommand [code $this clear_pid_selection] \
      -command [code $this filter_pid_selection]
  }
  $itk_component(pid_filter) insert 0 *

  # seperator
  itk_component add pid_sep {
    frame [$itk_component(pid) childsite].sep \
      -height 2 -borderwidth 1 -relief sunken
  }

  # PID_ENTRY: this is the PID entry box.  You can enter the pid
  # by hand here, or click on the listbox to have it entered for you.
  itk_component add pid_entry {
    iwidgets::entryfield [$itk_component(pid) childsite].lab \
      -labeltext "PID:" -validate numeric \
      -foreground $::Colors(textfg) -textbackground $::Colors(textbg) \
      -focuscommand [code $this clear_pid_selection]
  }
  pack $itk_component(choose_pid) -fill x -side top -pady 4
  pack $itk_component(pid_filter) -fill x -side top -pady 4
  pack $itk_component(pid_sep) -fill x -side top -pady 8
  pack $itk_component(pid_entry) -fill x -side bottom -pady 4
  
  itk_component add symbol_label {
    iwidgets::labeledframe $itk_interior.sym -labeltext "Choose Exec file" \
      -labelpos nw -relief groove -borderwidth 2 \
      -ipadx 8 -ipady 6 
  }

  itk_component add symbol_file {
    iwidgets::entryfield [$itk_interior.sym childsite].f -labeltext "File:" \
      -foreground $::Colors(textfg) -textbackground $::Colors(textbg) 
  }
  pack $itk_component(symbol_file) -pady 4 -padx 4 -fill x

  # can't use the -state in the entryfield, 'cause that affects the
  # label as well...
  #$itk_component(symbol_file) component entry configure -state disabled  
  $itk_component(symbol_file) configure -state normal
  $itk_component(symbol_file) insert 0 $::gdb_exe_name
  #$itk_component(symbol_file) configure -state disabled
  
  itk_component add symbol_browse {
    button [$itk_component(symbol_file) childsite].br -text "Choose..." \
      -command [code $this choose_symbol_file]
  }
  pack $itk_component(symbol_browse) -pady 4 -padx 4 -ipadx 4

  itk_component add button_box {
    frame $itk_interior.b
  }
  
  itk_component add cancel {
    button $itk_component(button_box).cancel -text "Cancel" \
      -command [code $this cancel]
  }

  itk_component add ok {
    button $itk_component(button_box).ok -text "OK" -command [code $this doit]
  }
  
#  if {$::gdb_exe_name == ""} {
#    $itk_component(ok) configure -state disabled
#  }  

  ::standard_button_box $itk_component(button_box)

  pack $itk_component(button_box) -side bottom -fill x -pady 4 -padx 4
  pack $itk_component(symbol_label) -side bottom -fill x -pady 4 -padx 4
  pack $itk_component(pid) -fill both -expand 1 -pady 4 -padx 4

  after idle [list update idletasks;  $this list_pids]
}

# ------------------------------------------------------------------
#  METHOD:  doit - This accepts the attach command.
# ------------------------------------------------------------------

itcl::body AttachDlg::doit {} {
  set AttachDlg::last_button 1
  set AttachDlg::last_pid [$itk_component(pid_entry) get]
  set AttachDlg::symbol_file [$itk_component(symbol_file) get]
  unpost
}

# ------------------------------------------------------------------
#  METHOD:  cancel - unpost the dialog box without attaching.
# ------------------------------------------------------------------

itcl::body AttachDlg::cancel {} {
  set AttachDlg::last_button 0
  set AttachDlg::last_pid {}
  unpost
}

# ------------------------------------------------------------------
#  METHOD:  choose_symbol_file - Query for a new symbol file.
# ------------------------------------------------------------------

itcl::body AttachDlg::choose_symbol_file {} {
  set file [tk_getOpenFile -parent . -title "Load New Executable"]
  if {$file != ""} {
    $itk_component(symbol_file) configure -state normal
    $itk_component(symbol_file) clear
    $itk_component(symbol_file) insert 0 $file
#    $itk_component(symbol_file) configure -state disabled
    $itk_component(ok) configure -state active
  }
}

# ------------------------------------------------------------------
#  METHOD:  list_pids - List the available processes.
#           Right now on *nix systems this just spawns ps,
#           which means we have to deal with all the different
#           ps flags & output formats.  At some point we should
#           steal some C code to do it by hand.
# ------------------------------------------------------------------

itcl::body AttachDlg::list_pids {{pattern *}} {
  global gdbtk_platform

  $itk_component(choose_pid) clear
  set pid_list {}

  set processes [gdb_list_processes]
  if {[llength $processes] > 0} {
    foreach entry $processes {
      set executable [lindex $entry 1]
      if {[string match $pattern $executable]} {
        lappend pid_list $entry
        $itk_component(choose_pid) insert end $executable
      }
    }
  } else {
    switch $gdbtk_platform(os) {
      Linux {
        set ps_cmd "ps axw"
      }
      default {
        set ps_cmd "ps w"
      }
    }

    if {[catch {::open "|$ps_cmd" r} psH]} {
      set errTxt "Could not exec ps: $psH
You will have to enter the PID by hand."
      ManagedWin::open WarningDlg -message [list $errTxt]
      return
    }
    gets $psH header

    set nfields [llength $header]
    set nfields_m_1 [expr {$nfields - 1}]
    set regexp {^ *([^ ]*) +}
    for {set i 1} {$i < $nfields_m_1} {incr i} {
      append regexp {[^ ]* +}
    }
    append regexp {(.*)$}

    while {[gets $psH line] >= 0} {
      regexp $regexp $line dummy PID COMMAND
      if {[string match $pattern $COMMAND]} {
        lappend pid_list [list $PID $COMMAND]
        $itk_component(choose_pid) insert end $COMMAND
      }
    }

    close $psH
  }

  $itk_component(choose_pid) selection set 0
  select_pid
}

# ------------------------------------------------------------------
#  METHOD:  select_pid - Grab the selected element from the PID listbox
#           and insert the associated PID into the entry form.
# ------------------------------------------------------------------

itcl::body AttachDlg::select_pid {} {
  set hit [$itk_component(choose_pid) curselection]
  if {$hit != ""} {
    $itk_component(pid_entry) clear
    $itk_component(pid_entry) insert 0 [lindex [lindex $pid_list $hit] 0]
  }
}

# ------------------------------------------------------------------
#  METHOD:  clear_pid_selection - Clear the current PID selection.
# ------------------------------------------------------------------

itcl::body AttachDlg::clear_pid_selection {} {
  $itk_component(choose_pid) selection clear 0 end
  $itk_component(pid_entry) selection range 0 end
}

# ------------------------------------------------------------------
#  METHOD:  filter_pid_selection - Filters the pid box.
# ------------------------------------------------------------------

itcl::body AttachDlg::filter_pid_selection {} {
  list_pids [$itk_component(pid_filter) get]
}
@


1.8
log
@        * library/main.tcl: Add gdbtk_platform definitions.
        * library/attachdlg.itb (list_pids): Use gdbtk_platform
        instead of tcl_platform.
        * library/bpwin.itb (build_win): Likewise.
        (_bp_add): Likewise.
        (_bp_modify): Likewise.
        * library/download.itb (download_it): Likewise.
        * library/globalpref.itb (_build_win): Likewise.
        * library/helpviewer.tcl (open_help): Likewise.
        * library/interface.tcl (gdbtk_tcl_query): Likewise.
        (show_warning): Likewise.
        (open_file): Likewise.
        (run_executable): Likewise.
        * library/managedwin.itb (reveal): Likewise.
        (_create): Likewise.
        * library/prefs.tcl (pref_read): Likewise.
        (pref_set_defaults): Likewise.
        (pref_set_colors): Likewise.
        * library/session.tcl (_exe_name): Likewise.
        * library/srcbar.itcl (_update_file_menu): Likewise.
        (create_run_menu): Likewise.
        * library/srctextwin.itb (_mtime_changed): Likewise.
        (LoadFromCache): Likewise.
        * library/targetselection.itb (default_port): Likewise.
        (build_win): Likewise.

        * library/memwin.itb (build_win): Remove unused tcl_platform
        declaration.
        * library/pluginwin.itcl (enable_ui): Likewise.
        * library/process.itb (build_win): Likewise.
        * library/srcbar.itcl (enable_ui): Likewise.
        * library/srcwin.itb (location): Likewise.
        * library/stackwin.itb (build_win): Likewise.
        * library/tdump.tcl (build_win): Likewise.
@
text
@d2 1
a2 1
# Copyright (C) 1999, 2002, 2003, 2008 Red Hat, Inc.
a152 1

d154 5
a158 4
#  METHOD:  list_pids - List the available processes.  Right now,
#           this just spawns ps, which means we have to deal with
#           all the different ps flags & output formats.  At some
#           point we should steal some C code to do it by hand.
d164 11
a174 3
  switch $gdbtk_platform(os) {
    Linux {
      set ps_cmd "ps axw"
d176 8
a183 2
    default {
      set ps_cmd "ps w"
d185 3
a187 3
  }
  if {[catch {::open "|$ps_cmd" r} psH]} {
    set errTxt "Could not exec ps: $psH
d189 4
a192 4
    ManagedWin::open WarningDlg -message [list $errTxt]
    return
  }
  gets $psH header
d194 7
a200 10
  set nfields [llength $header]
  set nfields_m_1 [expr {$nfields - 1}]
  set regexp {^ *([^ ]*) +}
  for {set i 1} {$i < $nfields_m_1} {incr i} {
    append regexp {[^ ]* +}
  }
  append regexp {(.*)$}
  
  $itk_component(choose_pid) clear
  set pid_list {}
d202 6
a207 5
  while {[gets $psH line] >= 0} {
    regexp $regexp $line dummy PID COMMAND
    if {[string match $pattern $COMMAND]} {
      lappend pid_list [list $PID $COMMAND]
      $itk_component(choose_pid) insert end $COMMAND
d209 2
a212 1
  close $psH
@


1.7
log
@	* library/attachdlg.itb:
	* library/actiondlg.tcl:
	* library/about.tcl:
	* library/ehandler.itb:
	* library/editor.tcl:
	* library/download.ith:
	* library/download.itb:
	* library/debugwin.ith:
	* library/debugwin.itb:
	* library/cspref.ith:
	* library/cspref.itb:
	* library/console.ith:
	* library/console.itb:
	* library/browserwin.ith:
	* library/browserwin.itb:
	* library/bpwin.ith:
	* library/bpwin.itb:
	* library/blockframe.ith:
	* library/managedwin.ith:
	* library/managedwin.itb:
	* library/main.tcl:
	* library/locals.tcl:
	* library/ipcpref.ith:
	* library/ipcpref.itb:
	* library/ipc.tcl:
	* library/interface.tcl:
	* library/helpviewer.tcl:
	* library/globalpref.ith:
	* library/globalpref.itb:
	* library/gdbwin.ith:
	* library/gdbtoolbar.itcl:
	* library/gdbmenubar.itcl:
	* library/gdbevent.ith:
	* library/gdbevent.itb:
	* library/embeddedwin.ith:
	* library/ehandler.ith:
	* library/srcwin.itb:
	* library/srctextwin.ith:
	* library/srctextwin.itb:
	* library/srcpref.ith:
	* library/srcpref.itb:
	* library/srcbar.itcl:
	* library/session.tcl:
	* library/regwin.ith:
	* library/regwin.itb:
	* library/process.ith:
	* library/process.itb:
	* library/prefs.tcl:
	* library/pluginwin.itcl:
	* library/modal.tcl:
	* library/memwin.ith:
	* library/memwin.itb:
	* library/mempref.ith:
	* library/mempref.itb:
	* library/watch.tcl:
	* library/watch.tcl:
	* library/warning.tcl:
	* library/vartree.ith:
	* library/vartree.itb:
	* library/util.tcl:
	* library/tracedlg.tcl:
	* library/toplevelwin.ith:
	* library/tfind_args.tcl:
	* library/tdump.tcl:
	* library/targetselection.ith:
	* library/targetselection.itb:
	* library/stackwin.ith:
	* library/stackwin.itb:
	* library/srcwin.ith:
@
text
@d2 1
a2 1
# Copyright (C) 1999, 2002, 2003 Red Hat, Inc.
d162 1
a162 1
  global tcl_platform
d164 1
a164 1
  switch $tcl_platform(os) {
@


1.6
log
@2003-02-10  Martin M. Hunt  <hunt@@redhat.com>

	* library/interface.tcl (gdbtk_attach_native): Don't force the user
	to choose an exec file when attaching.

	* library/attachdlg.itb: Some fixes to work with latest iwidgets.
@
text
@d2 1
a2 1
# Copyright 1999, 2002, 2003 Red Hat, Inc.
@


1.5
log
@2002-10-15  Martin M. Hunt  <hunt@@redhat.com>

	* library/* : auto_mkindex cannot rebuild
	tclIndex because it does not recognize the namespace
	import in main.tcl.  To get it to work again, rename the
	following:
		body -> itcl::body
		configbody -> itcl::configbody
		class -> itcl::class
@
text
@d1 2
d4 4
a7 6
# attachdlg.itb - itcl implementations for class AttachDlg
# ----------------------------------------------------------------------
# Implements Attach to process window...
#
# ----------------------------------------------------------------------
#   Copyright (C) 1999 Cygnus Solutions
d9 5
d16 1
a16 1

a18 2
  eval itk_initialize $args

d22 5
a26 3
  
  # CHOOSE_PID: the list box with list or processes.  Also an entry
  # for typing in the PID by hand.
d28 1
d30 5
a34 7
    iwidgets::scrolledlistbox $itk_interior.cpid -visibleitems 30x15 \
      -labeltext "Choose process" -labelpos nw \
      -labelrelief groove -labelborderwidth 2 \
      -ipadx 8 -ipady 6 -childsitepos s -hscrollmode none \
      -textbackground white -exportselection 0 \
      -selectioncommand [code $this select_pid] \
      -dblclickcommand [code $this doit]
d37 1
d39 3
a41 2
    iwidgets::entryfield [$itk_component(choose_pid) childsite].filt \
      -labeltext Filter: -textbackground white \
a44 1

d47 1
d49 1
a49 1
    frame [$itk_component(choose_pid) childsite].sep \
a54 1

d56 3
a58 2
    iwidgets::entryfield [$itk_component(choose_pid) childsite].lab \
      -labeltext PID: -validate numeric -textbackground white \
d61 1
a65 1

d68 1
a68 1
      -labelpos nw -labelrelief groove -labelborderwidth 2 \
d73 2
a74 2
    iwidgets::entryfield [$itk_interior.sym childsite].f -labeltext File: \
      -textbackground white
d77 1
d80 1
a80 2
  $itk_component(symbol_file) component entry configure -state disabled
  
d83 1
a83 1
  $itk_component(symbol_file) configure -state disabled
d86 1
a86 1
    button [$itk_component(symbol_file) childsite].br -text Choose... \
d96 1
a96 1
    button $itk_component(button_box).cancel -text Cancel \
d101 1
a101 1
    button $itk_component(button_box).ok -text OK -command [code $this doit]
d104 3
a106 3
  if {$::gdb_exe_name == ""} {
    $itk_component(ok) configure -state disabled
  }  
d110 1
a110 2
  pack $itk_component(button_box) -side bottom -fill x \
    -pady 4 -padx 4
d112 1
a112 1
  pack $itk_component(choose_pid) -fill both -expand 1 -pady 4 -padx 4
a114 1

a124 1
  debug "About to unpost"
d148 1
a148 1
    $itk_component(symbol_file) configure -state disabled
a201 1

a230 1
  
@


1.4
log
@        * attachdlg.itb (list_pids): Use "ps axw" to get pid list
        when running under Linux. Use string match instead of
        regexp match is ps filter entry.
        * attachdlg.ith (list_pids): Change default argument to "*".
@
text
@d10 1
a10 1
body AttachDlg::constructor {args} {
d18 1
a18 1
body AttachDlg::build_win {} {
d117 1
a117 1
body AttachDlg::doit {} {
d129 1
a129 1
body AttachDlg::cancel {} {
d139 1
a139 1
body AttachDlg::choose_symbol_file {} {
d158 1
a158 1
body AttachDlg::list_pids {{pattern *}} {
d207 1
a207 1
body AttachDlg::select_pid {} {
d219 1
a219 1
body AttachDlg::clear_pid_selection {} {
d228 1
a228 1
body AttachDlg::filter_pid_selection {} {
@


1.3
log
@2000-03-09  Elena Zannoni  <ezannoni@@kwikemart.cygnus.com>

	From: James Ingham <jingham@@leda.cygnus.com>:
	* attachdlg.itb (build_win): Pack the dialog better, so that when
 	window is resized components are not hidden.
@
text
@d40 2
d158 12
a169 2
body AttachDlg::list_pids {{expr {}}} {
  if {[catch {::open "|ps w" r} psH]} {
d178 1
a178 1
  set nfields_m_1 [expr $nfields - 1]
d190 1
a190 1
    if {$expr == "" || [regexp $expr $COMMAND dummy]} {
@


1.2
log
@2000-03-02  Elena Zannoni  <ezannoni@@kwikemart.cygnus.com>

        * attachdlg.itb: Give a name to the window.
@
text
@d104 1
a105 1
  pack $itk_component(symbol_label) -fill x -pady 4 -padx 4
@


1.1
log
@Initial revision
@
text
@d12 1
@


1.1.1.1
log
@import insight-2000-02-04 snapshot (2nd try)
@
text
@@
