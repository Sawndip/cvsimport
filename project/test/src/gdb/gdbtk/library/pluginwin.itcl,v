head	1.8;
access;
symbols
	insight_7_6-2013-04-10-branchpoint:1.8
	gdb_7_6-branch:1.8.0.18
	gdb_7_5-branch:1.8.0.16
	gdb_7_4-branch:1.8.0.14
	gdb_7_3-branch:1.8.0.12
	gdb_7_1-branch:1.8.0.10
	gdb_7_0-branch:1.8.0.8
	arc-sim-20090309:1.8
	arc-insight_6_8-branch:1.8.0.6
	arc-insight_6_8-branchpoint:1.8
	insight_6_8-branch:1.8.0.4
	insight_6_8-branchpoint:1.8
	gdb_6_8-branch:1.8.0.2
	insight_6_6-20070208-release:1.7
	gdb_6_6-branch:1.7.0.4
	gdb_6_6-2006-11-15-branchpoint:1.7
	insight_6_5-20061003-release:1.7
	gdb_6_5-branch:1.7.0.2
	gdb_6_5-2006-05-14-branchpoint:1.7
	gdb-csl-gxxpro-6_3-branch:1.6.0.8
	gdb-csl-gxxpro-6_3-branchpoint:1.6
	gdb_6_4-branch:1.6.0.6
	gdb_6_4-2005-11-01-branchpoint:1.6
	gdb_6_1-2004-04-05-release:1.6
	gdb_6_1-branch:1.6.0.4
	gdb_6_1-2004-03-01-gmt-branchpoint:1.6
	gdb_6_0-2003-10-04-release:1.6
	gdb_6_0-branch:1.6.0.2
	gdb_6_0-2003-06-23-branchpoint:1.6
	gdb_5_3-2002-12-12-release:1.5
	gdb_5_3-branch:1.5.0.2
	gdb_5_3-2002-09-04-branchpoint:1.5
	gdb_5_2_1-2002-07-23-release:1.4
	gdb_5_2-2002-04-29-release:1.4
	gdb_5_2-branch:1.4.0.10
	gdb_5_2-2002-03-03-branchpoint:1.4
	gdb_5_1_1-2002-01-24-release:1.4
	cygnus_cvs_20020108_pre:1.4
	gdb_5_1_0_1-2002-01-03-branch:1.4.0.8
	gdb_5_1_0_1-2002-01-03-branchpoint:1.4
	gdb_5_1-2001-11-21-release:1.4
	gdb_s390-2001-09-26-branch:1.4.0.6
	gdb_s390-2001-09-26-branchpoint:1.4
	gdb_5_1-2001-07-29-branch:1.4.0.4
	gdb_5_1-2001-07-29-branchpoint:1.4
	dberlin-typesystem-branch:1.4.0.2
	dberlin-typesystem-branchpoint:1.4;
locks; strict;
comment	@# @;


1.8
date	2008.02.09.01.23.42;	author kseitz;	state Exp;
branches;
next	1.7;

1.7
date	2005.12.23.18.26.50;	author eliz;	state Exp;
branches;
next	1.6;

1.6
date	2002.10.15.21.19.51;	author hunt;	state Exp;
branches;
next	1.5;

1.5
date	2002.04.24.17.11.19;	author kseitz;	state Exp;
branches;
next	1.4;

1.4
date	2001.05.31.20.32.58;	author kseitz;	state Exp;
branches;
next	1.3;

1.3
date	2001.05.31.15.21.40;	author kseitz;	state Exp;
branches;
next	1.2;

1.2
date	2001.02.01.17.59.38;	author fnasser;	state Exp;
branches;
next	1.1;

1.1
date	2001.02.01.04.54.11;	author fnasser;	state Exp;
branches;
next	;


desc
@@


1.8
log
@        * library/main.tcl: Add gdbtk_platform definitions.
        * library/attachdlg.itb (list_pids): Use gdbtk_platform
        instead of tcl_platform.
        * library/bpwin.itb (build_win): Likewise.
        (_bp_add): Likewise.
        (_bp_modify): Likewise.
        * library/download.itb (download_it): Likewise.
        * library/globalpref.itb (_build_win): Likewise.
        * library/helpviewer.tcl (open_help): Likewise.
        * library/interface.tcl (gdbtk_tcl_query): Likewise.
        (show_warning): Likewise.
        (open_file): Likewise.
        (run_executable): Likewise.
        * library/managedwin.itb (reveal): Likewise.
        (_create): Likewise.
        * library/prefs.tcl (pref_read): Likewise.
        (pref_set_defaults): Likewise.
        (pref_set_colors): Likewise.
        * library/session.tcl (_exe_name): Likewise.
        * library/srcbar.itcl (_update_file_menu): Likewise.
        (create_run_menu): Likewise.
        * library/srctextwin.itb (_mtime_changed): Likewise.
        (LoadFromCache): Likewise.
        * library/targetselection.itb (default_port): Likewise.
        (build_win): Likewise.

        * library/memwin.itb (build_win): Remove unused tcl_platform
        declaration.
        * library/pluginwin.itcl (enable_ui): Likewise.
        * library/process.itb (build_win): Likewise.
        * library/srcbar.itcl (enable_ui): Likewise.
        * library/srcwin.itb (location): Likewise.
        * library/stackwin.itb (build_win): Likewise.
        * library/tdump.tcl (build_win): Likewise.
@
text
@# PluginWindow
# Copyright (C) 2001, 2008 Red Hat, Inc.
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License (GPL) as published by
# the Free Software Foundation; either version 2 of the License, or (at
# your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# ----------------------------------------------------------------------
# Implements a menu and a toolbar that are attached to a source window.
#
#   PUBLIC ATTRIBUTES:
#
#
#   METHODS:
#
#     configure ....... used to change public attributes
#
#   PRIVATE METHODS
#
#   X11 OPTION DATABASE ATTRIBUTES
#
#
# ----------------------------------------------------------------------

itcl::class PluginWindow {
  inherit ManagedWin GDBEventHandler

  # ------------------------------------------------------------------
  #  CONSTRUCTOR - create widget
  # ------------------------------------------------------------------
  constructor {args} {

    # Create a menu widget for the plug-in window
    set menubar [GDBMenuBar $itk_interior.menubar]

    # Create a toolbar widget for the plug-in window
    set toolbar [GDBToolBar $itk_interior.toolbar]

    # Pack the toolbar
    pack $toolbar -expand 1 -fill both

    # Create a frame for the subclass to use
    set child [frame $itk_interior.child]

    # Pack the childsite
    pack $child -expand 1 -fill both

    eval itk_initialize $args
    add_hook gdb_no_inferior_hook [code $this no_inferior]
  }

  # ------------------------------------------------------------------
  #  DESTRUCTOR - destroy window containing widget
  # ------------------------------------------------------------------
  destructor {
    remove_hook gdb_no_inferior_hook [code $this no_inferior]

    #destroy $this
  }

  # ------------------------------------------------------------------
  #  ACCESSOR METHOD - Retrieve childsite
  # ------------------------------------------------------------------
  public method childsite {} {
    return $child
  }

  # Don't automatically reload plugins.
  protected method _ignore_on_save {} { return 1 }

  ####################################################################
  #
  # State control methods used by both the menu and the toolbar
  # 
  ####################################################################

  # ------------------------------------------------------------------
  #  METHOD:  idle - handle IdleEvent
  # ------------------------------------------------------------------
  protected method idle {event} {
    debug "PluginWindow::idle"
    enable_ui 1
  }

  # ------------------------------------------------------------------
  #  METHOD:  busy - BusyEvent handler
  #             Invoked when gdb is going to run the inferior
  # ------------------------------------------------------------------
  public method busy {event} {
    debug "PluginWindow::busy"
    enable_ui 0
  }

  # ------------------------------------------------------------------
  #  METHOD:  no_inferior
  #             Invoked when gdb detects the inferior is gone 
  # ------------------------------------------------------------------
  protected method no_inferior {} {
    debug 
    enable_ui 2
  }

  ####################################################################
  # The following method enables/disables both menus and buttons.
  ####################################################################

  # ------------------------------------------------------------------
  # METHOD:  enable_ui - enable/disable the appropriate buttons and menus
  # Called from the busy, idle, and no_inferior hooks.
  #
  # on must be:
  # value      Control    Other     State
  #   0          off       off      gdb is busy
  #   1          on        on       gdb has inferior, and is idle
  #   2          off       on       gdb has no inferior, and is idle
  # ------------------------------------------------------------------
  public method enable_ui {on} {
    debug "$on"

    # Do the enabling so that all the disabling happens first, this way if a
    # button belongs to two groups, enabling takes precedence, which is
    #  probably right.

    switch $on {
      0 {
        # Busy
	set enable_list {Control disabled \
			   Other disabled}
      }
      1 {
        # Idle, with inferior
	set enable_list {Control normal \
			   Other normal}
      }
      2 {
        # Idle, no inferior
	set enable_list {Control disabled \
			   Other normal}
      }
      default {
	debug "Unknown type: $on in enable_ui"
	return
      }
    }

    $menubar set_class_state $enable_list
    $toolbar set_class_state $enable_list
  }

  ####################################################################
  #
  #  PRIVATE DATA
  #
  ####################################################################

  # The childsite
  private variable child

  ####################################################################
  #
  #  PROTECTED DATA
  #
  ####################################################################

  # The GdbMenuBar component
  protected variable menubar

  # The GdbToolBar component
  protected variable toolbar

  ####################################################################
  #
  #  PUBLIC DATA
  #
  ####################################################################

  # None.
}
@


1.7
log
@	* library/attachdlg.itb:
	* library/actiondlg.tcl:
	* library/about.tcl:
	* library/ehandler.itb:
	* library/editor.tcl:
	* library/download.ith:
	* library/download.itb:
	* library/debugwin.ith:
	* library/debugwin.itb:
	* library/cspref.ith:
	* library/cspref.itb:
	* library/console.ith:
	* library/console.itb:
	* library/browserwin.ith:
	* library/browserwin.itb:
	* library/bpwin.ith:
	* library/bpwin.itb:
	* library/blockframe.ith:
	* library/managedwin.ith:
	* library/managedwin.itb:
	* library/main.tcl:
	* library/locals.tcl:
	* library/ipcpref.ith:
	* library/ipcpref.itb:
	* library/ipc.tcl:
	* library/interface.tcl:
	* library/helpviewer.tcl:
	* library/globalpref.ith:
	* library/globalpref.itb:
	* library/gdbwin.ith:
	* library/gdbtoolbar.itcl:
	* library/gdbmenubar.itcl:
	* library/gdbevent.ith:
	* library/gdbevent.itb:
	* library/embeddedwin.ith:
	* library/ehandler.ith:
	* library/srcwin.itb:
	* library/srctextwin.ith:
	* library/srctextwin.itb:
	* library/srcpref.ith:
	* library/srcpref.itb:
	* library/srcbar.itcl:
	* library/session.tcl:
	* library/regwin.ith:
	* library/regwin.itb:
	* library/process.ith:
	* library/process.itb:
	* library/prefs.tcl:
	* library/pluginwin.itcl:
	* library/modal.tcl:
	* library/memwin.ith:
	* library/memwin.itb:
	* library/mempref.ith:
	* library/mempref.itb:
	* library/watch.tcl:
	* library/watch.tcl:
	* library/warning.tcl:
	* library/vartree.ith:
	* library/vartree.itb:
	* library/util.tcl:
	* library/tracedlg.tcl:
	* library/toplevelwin.ith:
	* library/tfind_args.tcl:
	* library/tdump.tcl:
	* library/targetselection.ith:
	* library/targetselection.itb:
	* library/stackwin.ith:
	* library/stackwin.itb:
	* library/srcwin.ith:
@
text
@d2 1
a2 1
# Copyright (C) 2001 Red Hat, Inc.
a123 1
    global tcl_platform
@


1.6
log
@2002-10-15  Martin M. Hunt  <hunt@@redhat.com>

	* library/* : auto_mkindex cannot rebuild
	tclIndex because it does not recognize the namespace
	import in main.tcl.  To get it to work again, rename the
	following:
		body -> itcl::body
		configbody -> itcl::configbody
		class -> itcl::class
@
text
@d2 1
a2 1
# Copyright 2001 Red Hat, Inc.
@


1.5
log
@        * library/managedwin.ith (_ignore_on_save): New protected method.
        * library/managedwin.itb (shutdown): If _ignore_on_save, don't
        save this window to the active window list in the preferences
        file.
        * library/debugwin.ith (DebugWin::_ignore_on_save): Don't save
        this window to preferences active list.
        (DebugWinDOpts::_ignore_on_save): Likewise.
        * library/pluginwin.itcl (_ignore_on_save): Likewise.
        * library/download.ith (_ignore_on_save): Likewise.
@
text
@d31 1
a31 1
class PluginWindow {
@


1.4
log
@	* library/interface.tcl (gdb_idle_hook): Mark as deprecated.
	(gdbtk_idle): Dispatch an IdleEvent. gdb_idle_hook is gone.
	* library/ehandler.ith (idle): New event handler.
	* library/gdbevent.ith (IdleEvent): New event.
	* library/console.ith (idle): Match event handler definition.
	* library/console.itb (idle): Ditto.
	(constructor): Remove gdb_idle_hook.
	(destructor): Ditto.
	* library/kod.ith (idle): Match event handler definition.
	* library/kod.itb (idle): Ditto.
	(constructor): Remove gdb_idle_hook.
	(destructor): Ditto.
	* library/memwin.ith (idle): Match event handler definition.
	* library/memwin.itb (idle): Ditto.
	(constructor): Remove gdb_idle_hook.
	(destructor): Ditto.
	* library/pluginwin.itcl (stopped): Rename to "idle" and
	match event handler definition.
	Fix misleading comments.
	* library/process.ith (idle): Match event handler definition.
	* library/process.itb (idle): Ditto.
	(constructor): Remove gdb_idle_hook.
	(destructor): Ditto.
	* library/regwin.ith (idle): Match event handler definition.
	* library/regwin.itb (idle): Ditto.
	(constructor): Remove gdb_idle_hook.
	(destructor): Ditto.
	* library/srcbar.itcl (idle): New method.
	(constructor): Remove gdb_idle_hook.
	(destructor): Ditto.
	* library/srcwin.ith (idle): Match event handler definition.
	* library/srcwin.itb (idle): Ditto.
	(constructor): Remove gdb_idle_hook.
	(destructor): Ditto.
	* library/stackwin.ith (idle): Match event handler definition.
	* library/stackwin.itb (idle): Ditto.
	(constructor): Remove gdb_idle_hook.
	(destructor): Ditto.
	* library/variables.tcl (idle): Match event handler definition.
	(constructor): Remove gdb_idle_hook.
	(destructor): Ditto.
	* library/plugins/rhabout/rhabout.itcl (stopped): Rename
	to "idle" and match new event handler definition.
	* library/tclIndex: Regenerated.
@
text
@d74 3
@


1.3
log
@	* library/interface.tcl (gdb_busy_hook): Deprecate.
	(gdbtk_busy): Create and dispatch a BusyEvent instead
	of running hooks.
	* library/ehandler.ith (busy): New event handler.
	* library/gdbevent.ith (BusyEvent): New event class.
	* library/console.ith: Inherit from GDBEventHandler.
	(busy): Match event handler definition.
	* library/console.itb (busy): Ditto.
	(constructor): Remove gdb_busy_event.
	(destructor): Ditto.
	* library/kod.ith (busy): Match event handler definition.
	* library/kod.itb (busy): Ditto.
	(constructor): Remove gdb_busy_hook.
	(destructor): Ditto.
	* library/memwin.ith (busy): Match event handler definition.
	* library/memwin.itb (busy): Ditto.
	(constructor): Remove gdb_busy_hook.
	(destructor): Ditto.
	* library/pluginwin.itcl (running): Rename to "busy" and
	match event handler definition.
	(consturctor): Remove gdb_busy_hook.
	(destructor): Ditto.
	* library/process.ith (busy): Match event handler definition.
	* library/process.itb (busy): Ditto.
	(constructor): Remove gdb_busy_hook.
	(destructor): Ditto.
	* library/regwin.ith (busy): Match event handler definition.
	* library/regwin.itb (busy): Ditto.
	(constructor): Remove gdb_busy_hook.
	(destructor): Ditto.
	* library/srcbar.itcl (constructor): Remove gdb_busy_hook.
	(destructor): Ditto.
	(busy): New method.
	* library/srcwin.ith (busy): Match event handler definition.
	* library/srcwin.itb (busy): Ditto.
	Only do the "busy" stuff if do_updates is set.
	(toggle_updates): Remove gdb_busy_hook.
	(constructor): Ditto.
	(destructor): Ditto.
	* library/stackwin.ith (busy): Match event handler definition.
	* library/stackwin.itb (busy): Ditto.
	(constructor): Remove gdb_busy_hook.
	(destructor): Ditto.
	* library/variables.tcl (constructor): Ditto.
	(destructor): Ditto.
	(disable_ui): Rename to "busy" and match event handler
	definition.
	* library/plugins/rhabout/rhabout.itcl (running): Rename
	to "busy" and match new event handler definition.
	* library/tclIndex: Regenerated.
@
text
@a54 1
    add_hook gdb_idle_hook [code $this stopped]
a61 1
    remove_hook gdb_idle_hook [code $this stopped]
d81 1
a81 2
  #  METHOD:  stopped
  #             Invoked when there is an inferior and it has stopped
d83 2
a84 2
  protected method stopped {} {
    debug "PluginWindow::stopped"
@


1.2
log
@2001-02-01  Fernando Nasser  <fnasser@@redhat.com>

	* library/pluginwin.itcl (contrucdtor, destructor): Use "code" to
	specify callbacks.
	(running, stopped, no_inferior): Make it a protected method.
	(childsite): Explicitly mark as a public method.
	* library/plugins/rhabout/rhabout.itcl (constructor): Add a label
	widget to show status messages.
	(running, stopped): Overload versions of the base class; display
	status messages as an example.
@
text
@d32 1
a32 1
  inherit ManagedWin
a55 1
    add_hook gdb_busy_hook [code $this running]
a63 1
    remove_hook gdb_busy_hook [code $this running]
d92 1
a92 1
  #  METHOD:  running
d95 2
a96 2
  protected method running {} {
    debug "PluginWindow::running"
@


1.1
log
@2001-01-31  Fernando Nasser  <fnasser@@redhat.com>

	* library/pluginwin.itcl: New file.  Implements the PluginWindow
	class that provides some basic functionality for plug-ins.
	* library/plugins/rhabout/rhabout.itcl: Inherit from the new
	PluginWindow class.  Remove code dependent on ModalDlg.
	(constructor): Creates menus and a toolbar to show how these
	PluginWindow components are used.
@
text
@d55 3
a57 3
    add_hook gdb_idle_hook "$this stopped"
    add_hook gdb_busy_hook "$this running"
    add_hook gdb_no_inferior_hook "$this no_inferior"
d64 3
a66 3
    remove_hook gdb_idle_hook "$this stopped"
    remove_hook gdb_busy_hook "$this running"
    remove_hook gdb_no_inferior_hook "$this no_inferior"
d74 1
a74 1
  method childsite {} {
d88 2
a89 2
  method stopped {} {
    debug 
d97 2
a98 2
  method running {} {
    debug 
d106 1
a106 1
  method no_inferior {} {
@

