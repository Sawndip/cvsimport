head	1.93;
access;
symbols
	gdb_7_6_1-2013-08-30-release:1.92
	gdb_7_6-2013-04-26-release:1.92
	gdb_7_6-branch:1.92.0.2
	gdb_7_6-2013-03-12-branchpoint:1.92
	gdb_7_5_1-2012-11-29-release:1.89
	gdb_7_5-2012-08-17-release:1.89
	gdb_7_5-branch:1.89.0.2
	gdb_7_5-2012-07-18-branchpoint:1.89
	gdb_7_4_1-2012-04-26-release:1.82.4.1
	gdb_7_4-2012-01-24-release:1.82.4.1
	gdb_7_4-branch:1.82.0.4
	gdb_7_4-2011-12-13-branchpoint:1.82
	gdb_7_3_1-2011-09-04-release:1.82
	gdb_7_3-2011-07-26-release:1.82
	gdb_7_3-branch:1.82.0.2
	gdb_7_3-2011-04-01-branchpoint:1.82
	gdb_7_2-2010-09-02-release:1.79
	gdb_7_2-branch:1.79.0.2
	gdb_7_2-2010-07-07-branchpoint:1.79
	gdb_7_1-2010-03-18-release:1.71
	gdb_7_1-branch:1.71.0.2
	gdb_7_1-2010-02-18-branchpoint:1.71
	gdb_7_0_1-2009-12-22-release:1.68.2.1
	gdb_7_0-2009-10-06-release:1.68.2.1
	gdb_7_0-branch:1.68.0.2
	gdb_7_0-2009-09-16-branchpoint:1.68
	arc-sim-20090309:1.54
	msnyder-checkpoint-072509-branch:1.65.0.2
	msnyder-checkpoint-072509-branchpoint:1.65
	arc-insight_6_8-branch:1.54.0.6
	arc-insight_6_8-branchpoint:1.54
	insight_6_8-branch:1.54.0.4
	insight_6_8-branchpoint:1.54
	reverse-20081226-branch:1.58.0.10
	reverse-20081226-branchpoint:1.58
	multiprocess-20081120-branch:1.58.0.8
	multiprocess-20081120-branchpoint:1.58
	reverse-20080930-branch:1.58.0.6
	reverse-20080930-branchpoint:1.58
	reverse-20080717-branch:1.58.0.4
	reverse-20080717-branchpoint:1.58
	msnyder-reverse-20080609-branch:1.58.0.2
	msnyder-reverse-20080609-branchpoint:1.58
	drow-reverse-20070409-branch:1.49.0.2
	drow-reverse-20070409-branchpoint:1.49
	gdb_6_8-2008-03-27-release:1.54
	gdb_6_8-branch:1.54.0.2
	gdb_6_8-2008-02-26-branchpoint:1.54
	gdb_6_7_1-2007-10-29-release:1.51
	gdb_6_7-2007-10-10-release:1.51
	gdb_6_7-branch:1.51.0.2
	gdb_6_7-2007-09-07-branchpoint:1.51
	insight_6_6-20070208-release:1.47
	gdb_6_6-2006-12-18-release:1.47
	gdb_6_6-branch:1.47.0.18
	gdb_6_6-2006-11-15-branchpoint:1.47
	insight_6_5-20061003-release:1.47
	gdb-csl-symbian-6_4_50_20060226-12:1.47
	gdb-csl-sourcerygxx-3_4_4-25:1.46
	nickrob-async-20060828-mergepoint:1.47
	gdb-csl-symbian-6_4_50_20060226-11:1.47
	gdb-csl-sourcerygxx-4_1-17:1.47
	gdb-csl-20060226-branch-local-2:1.47
	gdb-csl-sourcerygxx-4_1-14:1.47
	gdb-csl-sourcerygxx-4_1-13:1.47
	gdb-csl-sourcerygxx-4_1-12:1.47
	gdb-csl-sourcerygxx-3_4_4-21:1.47
	gdb_6_5-20060621-release:1.47
	gdb-csl-sourcerygxx-4_1-9:1.47
	gdb-csl-sourcerygxx-4_1-8:1.47
	gdb-csl-sourcerygxx-4_1-7:1.47
	gdb-csl-arm-2006q1-6:1.47
	gdb-csl-sourcerygxx-4_1-6:1.47
	gdb-csl-symbian-6_4_50_20060226-10:1.47
	gdb-csl-symbian-6_4_50_20060226-9:1.47
	gdb-csl-symbian-6_4_50_20060226-8:1.47
	gdb-csl-coldfire-4_1-11:1.47
	gdb-csl-sourcerygxx-3_4_4-19:1.47
	gdb-csl-coldfire-4_1-10:1.47
	gdb_6_5-branch:1.47.0.16
	gdb_6_5-2006-05-14-branchpoint:1.47
	gdb-csl-sourcerygxx-4_1-5:1.47
	nickrob-async-20060513-branch:1.47.0.14
	nickrob-async-20060513-branchpoint:1.47
	gdb-csl-sourcerygxx-4_1-4:1.47
	msnyder-reverse-20060502-branch:1.47.0.12
	msnyder-reverse-20060502-branchpoint:1.47
	gdb-csl-morpho-4_1-4:1.47
	gdb-csl-sourcerygxx-3_4_4-17:1.47
	readline_5_1-import-branch:1.47.0.10
	readline_5_1-import-branchpoint:1.47
	gdb-csl-20060226-branch-merge-to-csl-symbian-1:1.47
	gdb-csl-symbian-20060226-branch:1.47.0.8
	gdb-csl-symbian-20060226-branchpoint:1.47
	gdb-csl-20060226-branch-merge-to-csl-local-1:1.47
	msnyder-reverse-20060331-branch:1.47.0.6
	msnyder-reverse-20060331-branchpoint:1.47
	gdb-csl-available-20060303-branch:1.47.0.4
	gdb-csl-available-20060303-branchpoint:1.47
	gdb-csl-20060226-branch:1.47.0.2
	gdb-csl-20060226-branchpoint:1.47
	gdb_6_4-20051202-release:1.46
	msnyder-fork-checkpoint-branch:1.46.0.10
	msnyder-fork-checkpoint-branchpoint:1.46
	gdb-csl-gxxpro-6_3-branch:1.46.0.8
	gdb-csl-gxxpro-6_3-branchpoint:1.46
	gdb_6_4-branch:1.46.0.6
	gdb_6_4-2005-11-01-branchpoint:1.46
	gdb-csl-arm-20051020-branch:1.46.0.4
	gdb-csl-arm-20051020-branchpoint:1.46
	msnyder-tracepoint-checkpoint-branch:1.46.0.2
	msnyder-tracepoint-checkpoint-branchpoint:1.46
	gdb-csl-arm-20050325-2005-q1b:1.44
	gdb-csl-arm-20050325-2005-q1a:1.44
	csl-arm-20050325-branch:1.44.0.2
	csl-arm-20050325-branchpoint:1.44
	gdb-post-i18n-errorwarning-20050211:1.44
	gdb-pre-i18n-errorwarning-20050211:1.43
	gdb_6_3-20041109-release:1.41
	gdb_6_3-branch:1.41.0.2
	gdb_6_3-20041019-branchpoint:1.41
	drow_intercu-merge-20040921:1.41
	drow_intercu-merge-20040915:1.41
	jimb-gdb_6_2-e500-branch:1.39.0.6
	jimb-gdb_6_2-e500-branchpoint:1.39
	gdb_6_2-20040730-release:1.39
	gdb_6_2-branch:1.39.0.2
	gdb_6_2-2004-07-10-gmt-branchpoint:1.39
	gdb_6_1_1-20040616-release:1.35
	gdb_6_1-2004-04-05-release:1.35
	drow_intercu-merge-20040402:1.37
	drow_intercu-merge-20040327:1.37
	ezannoni_pie-20040323-branch:1.37.0.2
	ezannoni_pie-20040323-branchpoint:1.37
	cagney_tramp-20040321-mergepoint:1.36
	cagney_tramp-20040309-branch:1.35.0.8
	cagney_tramp-20040309-branchpoint:1.35
	gdb_6_1-branch:1.35.0.6
	gdb_6_1-2004-03-01-gmt-branchpoint:1.35
	drow_intercu-20040221-branch:1.35.0.4
	drow_intercu-20040221-branchpoint:1.35
	cagney_bfdfile-20040213-branch:1.35.0.2
	cagney_bfdfile-20040213-branchpoint:1.35
	drow-cplus-merge-20040208:1.35
	carlton_dictionary-20040126-merge:1.34
	cagney_bigcore-20040122-branch:1.34.0.2
	cagney_bigcore-20040122-branchpoint:1.34
	drow-cplus-merge-20040113:1.34
	drow-cplus-merge-20031224:1.34
	drow-cplus-merge-20031220:1.34
	carlton_dictionary-20031215-merge:1.34
	drow-cplus-merge-20031214:1.34
	carlton-dictionary-20031111-merge:1.33
	gdb_6_0-2003-10-04-release:1.30
	kettenis_sparc-20030918-branch:1.30.0.12
	kettenis_sparc-20030918-branchpoint:1.30
	carlton_dictionary-20030917-merge:1.30
	ezannoni_pie-20030916-branchpoint:1.30
	ezannoni_pie-20030916-branch:1.30.0.10
	cagney_x86i386-20030821-branch:1.30.0.8
	cagney_x86i386-20030821-branchpoint:1.30
	carlton_dictionary-20030805-merge:1.30
	carlton_dictionary-20030627-merge:1.30
	gdb_6_0-branch:1.30.0.6
	gdb_6_0-2003-06-23-branchpoint:1.30
	jimb-ppc64-linux-20030613-branch:1.30.0.4
	jimb-ppc64-linux-20030613-branchpoint:1.30
	cagney_convert-20030606-branch:1.30.0.2
	cagney_convert-20030606-branchpoint:1.30
	cagney_writestrings-20030508-branch:1.26.0.6
	cagney_writestrings-20030508-branchpoint:1.26
	jimb-ppc64-linux-20030528-branch:1.27.0.4
	jimb-ppc64-linux-20030528-branchpoint:1.27
	carlton_dictionary-20030523-merge:1.27
	cagney_fileio-20030521-branch:1.27.0.2
	cagney_fileio-20030521-branchpoint:1.27
	kettenis_i386newframe-20030517-mergepoint:1.27
	jimb-ppc64-linux-20030509-branch:1.26.0.4
	jimb-ppc64-linux-20030509-branchpoint:1.26
	kettenis_i386newframe-20030504-mergepoint:1.26
	carlton_dictionary-20030430-merge:1.26
	kettenis_i386newframe-20030419-branch:1.26.0.2
	kettenis_i386newframe-20030419-branchpoint:1.26
	carlton_dictionary-20030416-merge:1.26
	cagney_frameaddr-20030409-mergepoint:1.25
	kettenis_i386newframe-20030406-branch:1.25.0.14
	kettenis_i386newframe-20030406-branchpoint:1.25
	cagney_frameaddr-20030403-branchpoint:1.25
	cagney_frameaddr-20030403-branch:1.25.0.12
	cagney_framebase-20030330-mergepoint:1.25
	cagney_framebase-20030326-branch:1.25.0.10
	cagney_framebase-20030326-branchpoint:1.25
	cagney_lazyid-20030317-branch:1.25.0.8
	cagney_lazyid-20030317-branchpoint:1.25
	kettenis-i386newframe-20030316-mergepoint:1.25
	offbyone-20030313-branch:1.25.0.6
	offbyone-20030313-branchpoint:1.25
	kettenis-i386newframe-20030308-branch:1.25.0.4
	kettenis-i386newframe-20030308-branchpoint:1.25
	carlton_dictionary-20030305-merge:1.25
	cagney_offbyone-20030303-branch:1.25.0.2
	cagney_offbyone-20030303-branchpoint:1.25
	carlton_dictionary-20030207-merge:1.22
	interps-20030203-mergepoint:1.22
	interps-20030202-branch:1.22.0.4
	interps-20030202-branchpoint:1.22
	cagney-unwind-20030108-branch:1.22.0.2
	cagney-unwind-20030108-branchpoint:1.22
	carlton_dictionary-20021223-merge:1.20
	gdb_5_3-2002-12-12-release:1.17
	carlton_dictionary-20021115-merge:1.19
	kseitz_interps-20021105-merge:1.18
	kseitz_interps-20021103-merge:1.18
	drow-cplus-merge-20021020:1.17
	drow-cplus-merge-20021025:1.17
	carlton_dictionary-20021025-merge:1.17
	carlton_dictionary-20021011-merge:1.17
	drow-cplus-branch:1.17.0.10
	drow-cplus-branchpoint:1.17
	kseitz_interps-20020930-merge:1.17
	carlton_dictionary-20020927-merge:1.17
	carlton_dictionary-branch:1.17.0.8
	carlton_dictionary-20020920-branchpoint:1.17
	gdb_5_3-branch:1.17.0.6
	gdb_5_3-2002-09-04-branchpoint:1.17
	kseitz_interps-20020829-merge:1.17
	cagney_sysregs-20020825-branch:1.17.0.4
	cagney_sysregs-20020825-branchpoint:1.17
	readline_4_3-import-branch:1.17.0.2
	readline_4_3-import-branchpoint:1.17
	gdb_5_2_1-2002-07-23-release:1.11
	kseitz_interps-20020528-branch:1.12.0.6
	kseitz_interps-20020528-branchpoint:1.12
	cagney_regbuf-20020515-branch:1.12.0.4
	cagney_regbuf-20020515-branchpoint:1.12
	jimb-macro-020506-branch:1.12.0.2
	jimb-macro-020506-branchpoint:1.12
	gdb_5_2-2002-04-29-release:1.11
	gdb_5_2-branch:1.11.0.2
	gdb_5_2-2002-03-03-branchpoint:1.11
	gdb_5_1_1-2002-01-24-release:1.8
	gdb_5_1_0_1-2002-01-03-release:1.8
	cygnus_cvs_20020108_pre:1.10
	gdb_5_1_0_1-2002-01-03-branchpoint:1.8
	gdb_5_1_0_1-2002-01-03-branch:1.8.0.8
	gdb_5_1-2001-11-21-release:1.8
	gdb_s390-2001-09-26-branch:1.8.0.6
	gdb_s390-2001-09-26-branchpoint:1.8
	gdb_5_1-2001-07-29-branch:1.8.0.4
	gdb_5_1-2001-07-29-branchpoint:1.8
	dberlin-typesystem-branch:1.8.0.2
	dberlin-typesystem-branchpoint:1.8
	gdb-post-ptid_t-2001-05-03:1.8
	gdb-pre-ptid_t-2001-05-03:1.8
	insight-precleanup-2001-01-01:1.3
	gdb-post-protoization-2000-07-29:1.1
	gdb-pre-protoization-2000-07-29:1.1
	gdb-premipsmulti-2000-06-06-branch:1.1.0.4
	gdb-premipsmulti-2000-06-06-branchpoint:1.1
	gdb-post-params-removal-2000-06-04:1.1
	gdb-pre-params-removal-2000-06-04:1.1
	gdb-post-params-removal-2000-05-28:1.1
	gdb-pre-params-removal-2000-05-28:1.1
	gdb_5_0-2000-05-19-release:1.1
	gdb_4_18_2-2000-05-18-release:1.1
	gdb_4_95_1-2000-05-11-snapshot:1.1
	gdb_4_95_0-2000-04-27-snapshot:1.1
	gdb_5_0-2000-04-10-branch:1.1.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1;
locks; strict;
comment	@ * @;


1.93
date	2013.07.23.07.02.03;	author qiyao;	state Exp;
branches;
next	1.92;

1.92
date	2013.03.11.08.45.54;	author mmetzger;	state Exp;
branches;
next	1.91;

1.91
date	2013.03.11.08.42.55;	author mmetzger;	state Exp;
branches;
next	1.90;

1.90
date	2013.01.01.06.32.45;	author brobecke;	state Exp;
branches;
next	1.89;

1.89
date	2012.05.24.16.39.09;	author palves;	state Exp;
branches;
next	1.88;

1.88
date	2012.03.02.00.06.12;	author jkratoch;	state Exp;
branches;
next	1.87;

1.87
date	2012.03.01.21.13.58;	author palves;	state Exp;
branches;
next	1.86;

1.86
date	2012.02.29.14.59.41;	author jkratoch;	state Exp;
branches;
next	1.85;

1.85
date	2012.02.29.14.56.55;	author jkratoch;	state Exp;
branches;
next	1.84;

1.84
date	2012.02.02.20.19.14;	author devans;	state Exp;
branches;
next	1.83;

1.83
date	2012.01.04.08.17.04;	author brobecke;	state Exp;
branches;
next	1.82;

1.82
date	2011.01.09.03.08.56;	author msnyder;	state Exp;
branches
	1.82.4.1;
next	1.81;

1.81
date	2011.01.01.15.33.07;	author brobecke;	state Exp;
branches;
next	1.80;

1.80
date	2010.08.04.15.27.56;	author palves;	state Exp;
branches;
next	1.79;

1.79
date	2010.06.22.00.09.10;	author devans;	state Exp;
branches;
next	1.78;

1.78
date	2010.04.22.20.35.28;	author hjl;	state Exp;
branches;
next	1.77;

1.77
date	2010.04.21.20.22.20;	author hjl;	state Exp;
branches;
next	1.76;

1.76
date	2010.04.20.19.39.50;	author kettenis;	state Exp;
branches;
next	1.75;

1.75
date	2010.04.13.21.07.16;	author kettenis;	state Exp;
branches;
next	1.74;

1.74
date	2010.04.08.22.32.36;	author hjl;	state Exp;
branches;
next	1.73;

1.73
date	2010.04.07.18.43.45;	author hjl;	state Exp;
branches;
next	1.72;

1.72
date	2010.03.01.15.33.30;	author hjl;	state Exp;
branches;
next	1.71;

1.71
date	2010.01.04.14.57.43;	author uweigand;	state Exp;
branches;
next	1.70;

1.70
date	2010.01.01.07.31.33;	author brobecke;	state Exp;
branches;
next	1.69;

1.69
date	2009.09.21.05.55.53;	author teawater;	state Exp;
branches;
next	1.68;

1.68
date	2009.09.15.03.30.06;	author sergiodj;	state Exp;
branches
	1.68.2.1;
next	1.67;

1.67
date	2009.09.08.22.50.59;	author msnyder;	state Exp;
branches;
next	1.66;

1.66
date	2009.08.10.03.04.44;	author teawater;	state Exp;
branches;
next	1.65;

1.65
date	2009.07.02.17.25.54;	author uweigand;	state Exp;
branches;
next	1.64;

1.64
date	2009.05.24.04.42.51;	author teawater;	state Exp;
branches;
next	1.63;

1.63
date	2009.05.22.14.07.26;	author teawater;	state Exp;
branches;
next	1.62;

1.62
date	2009.05.17.12.26.44;	author teawater;	state Exp;
branches;
next	1.61;

1.61
date	2009.04.30.03.21.46;	author teawater;	state Exp;
branches;
next	1.60;

1.60
date	2009.02.06.22.59.00;	author palves;	state Exp;
branches;
next	1.59;

1.59
date	2009.01.03.05.57.51;	author brobecke;	state Exp;
branches;
next	1.58;

1.58
date	2008.05.24.16.32.01;	author cseo;	state Exp;
branches
	1.58.4.1
	1.58.6.1
	1.58.10.1;
next	1.57;

1.57
date	2008.05.02.16.49.54;	author palves;	state Exp;
branches;
next	1.56;

1.56
date	2008.04.30.21.19.44;	author drow;	state Exp;
branches;
next	1.55;

1.55
date	2008.04.30.21.18.28;	author drow;	state Exp;
branches;
next	1.54;

1.54
date	2008.01.01.22.53.11;	author drow;	state Exp;
branches;
next	1.53;

1.53
date	2007.11.02.14.27.14;	author uweigand;	state Exp;
branches;
next	1.52;

1.52
date	2007.10.19.12.26.33;	author uweigand;	state Exp;
branches;
next	1.51;

1.51
date	2007.08.23.18.08.34;	author brobecke;	state Exp;
branches;
next	1.50;

1.50
date	2007.06.15.22.44.55;	author uweigand;	state Exp;
branches;
next	1.49;

1.49
date	2007.01.09.17.58.51;	author drow;	state Exp;
branches;
next	1.48;

1.48
date	2006.11.28.21.41.02;	author uweigand;	state Exp;
branches;
next	1.47;

1.47
date	2005.12.17.22.34.01;	author eliz;	state Exp;
branches;
next	1.46;

1.46
date	2005.05.08.22.07.27;	author kettenis;	state Exp;
branches;
next	1.45;

1.45
date	2005.03.31.19.58.25;	author kevinb;	state Exp;
branches;
next	1.44;

1.44
date	2005.02.11.04.05.51;	author cagney;	state Exp;
branches;
next	1.43;

1.43
date	2004.11.09.14.28.42;	author cagney;	state Exp;
branches;
next	1.42;

1.42
date	2004.11.07.21.33.29;	author drow;	state Exp;
branches;
next	1.41;

1.41
date	2004.08.06.20.58.28;	author kettenis;	state Exp;
branches;
next	1.40;

1.40
date	2004.07.20.19.45.06;	author cagney;	state Exp;
branches;
next	1.39;

1.39
date	2004.04.09.23.26.19;	author kettenis;	state Exp;
branches;
next	1.38;

1.38
date	2004.04.09.16.28.50;	author kettenis;	state Exp;
branches;
next	1.37;

1.37
date	2004.03.23.14.47.56;	author cagney;	state Exp;
branches;
next	1.36;

1.36
date	2004.03.15.22.38.21;	author kettenis;	state Exp;
branches;
next	1.35;

1.35
date	2004.02.06.20.24.50;	author kettenis;	state Exp;
branches
	1.35.4.1
	1.35.8.1;
next	1.34;

1.34
date	2003.11.15.14.02.57;	author kettenis;	state Exp;
branches;
next	1.33;

1.33
date	2003.11.09.17.32.32;	author kettenis;	state Exp;
branches;
next	1.32;

1.32
date	2003.10.30.22.25.54;	author kettenis;	state Exp;
branches;
next	1.31;

1.31
date	2003.10.30.21.22.13;	author kettenis;	state Exp;
branches;
next	1.30;

1.30
date	2003.06.01.16.45.02;	author kettenis;	state Exp;
branches
	1.30.8.1;
next	1.29;

1.29
date	2003.05.31.16.08.05;	author kettenis;	state Exp;
branches;
next	1.28;

1.28
date	2003.05.30.19.24.29;	author kettenis;	state Exp;
branches;
next	1.27;

1.27
date	2003.05.17.05.59.58;	author cagney;	state Exp;
branches;
next	1.26;

1.26
date	2003.04.11.18.15.38;	author cagney;	state Exp;
branches
	1.26.2.1;
next	1.25;

1.25
date	2003.03.01.13.00.07;	author kettenis;	state Exp;
branches;
next	1.24;

1.24
date	2003.03.01.12.36.36;	author kettenis;	state Exp;
branches;
next	1.23;

1.23
date	2003.02.25.21.36.18;	author carlton;	state Exp;
branches;
next	1.22;

1.22
date	2003.01.08.22.47.46;	author cagney;	state Exp;
branches;
next	1.21;

1.21
date	2003.01.04.23.38.45;	author drow;	state Exp;
branches;
next	1.20;

1.20
date	2002.12.21.19.58.07;	author kettenis;	state Exp;
branches;
next	1.19;

1.19
date	2002.11.08.23.59.58;	author cagney;	state Exp;
branches;
next	1.18;

1.18
date	2002.10.31.20.51.15;	author drow;	state Exp;
branches;
next	1.17;

1.17
date	2002.08.12.19.05.33;	author cagney;	state Exp;
branches
	1.17.8.1
	1.17.10.1;
next	1.16;

1.16
date	2002.07.02.13.48.16;	author kettenis;	state Exp;
branches;
next	1.15;

1.15
date	2002.07.01.21.16.32;	author kettenis;	state Exp;
branches;
next	1.14;

1.14
date	2002.06.19.14.59.47;	author cagney;	state Exp;
branches;
next	1.13;

1.13
date	2002.06.14.19.42.19;	author kettenis;	state Exp;
branches;
next	1.12;

1.12
date	2002.04.24.16.28.15;	author cagney;	state Exp;
branches
	1.12.4.1
	1.12.6.1;
next	1.11;

1.11
date	2002.02.24.22.31.19;	author cagney;	state Exp;
branches;
next	1.10;

1.10
date	2001.12.10.22.04.10;	author fnf;	state Exp;
branches;
next	1.9;

1.9
date	2001.11.04.14.06.16;	author kettenis;	state Exp;
branches;
next	1.8;

1.8
date	2001.04.17.09.38.52;	author kettenis;	state Exp;
branches;
next	1.7;

1.7
date	2001.03.28.11.36.21;	author kettenis;	state Exp;
branches;
next	1.6;

1.6
date	2001.03.26.19.51.47;	author kettenis;	state Exp;
branches;
next	1.5;

1.5
date	2001.03.13.12.42.08;	author kettenis;	state Exp;
branches;
next	1.4;

1.4
date	2001.03.01.01.39.20;	author cagney;	state Exp;
branches;
next	1.3;

1.3
date	2000.10.31.19.35.03;	author msnyder;	state Exp;
branches;
next	1.2;

1.2
date	2000.08.29.23.31.10;	author msnyder;	state Exp;
branches;
next	1.1;

1.1
date	2000.03.20.20.38.22;	author jimb;	state Exp;
branches;
next	;

1.82.4.1
date	2012.01.06.04.43.15;	author brobecke;	state Exp;
branches;
next	;

1.68.2.1
date	2009.09.21.06.57.03;	author teawater;	state Exp;
branches;
next	;

1.58.4.1
date	2008.07.20.14.30.11;	author teawater;	state Exp;
branches;
next	1.58.4.2;

1.58.4.2
date	2008.08.07.03.04.25;	author teawater;	state Exp;
branches;
next	;

1.58.6.1
date	2008.10.01.04.23.32;	author msnyder;	state Exp;
branches;
next	;

1.58.10.1
date	2008.12.26.21.09.13;	author msnyder;	state Exp;
branches;
next	1.58.10.2;

1.58.10.2
date	2008.12.28.20.33.32;	author msnyder;	state Exp;
branches;
next	;

1.35.4.1
date	2004.03.27.17.37.49;	author drow;	state Exp;
branches;
next	1.35.4.2;

1.35.4.2
date	2004.09.16.17.01.08;	author drow;	state Exp;
branches;
next	;

1.35.8.1
date	2004.03.21.23.57.34;	author cagney;	state Exp;
branches;
next	;

1.30.8.1
date	2003.08.21.20.16.49;	author cagney;	state Exp;
branches;
next	;

1.26.2.1
date	2003.04.19.16.40.13;	author kettenis;	state Exp;
branches;
next	1.26.2.2;

1.26.2.2
date	2003.05.17.13.43.30;	author kettenis;	state Exp;
branches;
next	1.26.2.3;

1.26.2.3
date	2003.05.17.15.34.56;	author kettenis;	state Exp;
branches;
next	1.26.2.4;

1.26.2.4
date	2003.05.17.22.43.24;	author kettenis;	state Exp;
branches;
next	1.26.2.5;

1.26.2.5
date	2003.05.18.09.44.12;	author kettenis;	state Exp;
branches;
next	;

1.17.8.1
date	2002.11.15.19.18.47;	author carlton;	state Exp;
branches;
next	1.17.8.2;

1.17.8.2
date	2002.12.23.19.38.28;	author carlton;	state Exp;
branches;
next	1.17.8.3;

1.17.8.3
date	2003.01.28.00.33.12;	author carlton;	state Exp;
branches;
next	1.17.8.4;

1.17.8.4
date	2003.02.01.01.17.22;	author carlton;	state Exp;
branches;
next	1.17.8.5;

1.17.8.5
date	2003.02.07.19.17.49;	author carlton;	state Exp;
branches;
next	1.17.8.6;

1.17.8.6
date	2003.03.06.00.56.29;	author carlton;	state Exp;
branches;
next	1.17.8.7;

1.17.8.7
date	2003.04.16.19.56.52;	author carlton;	state Exp;
branches;
next	1.17.8.8;

1.17.8.8
date	2003.05.23.18.40.40;	author carlton;	state Exp;
branches;
next	1.17.8.9;

1.17.8.9
date	2003.06.27.21.49.58;	author carlton;	state Exp;
branches;
next	1.17.8.10;

1.17.8.10
date	2003.11.11.23.50.46;	author carlton;	state Exp;
branches;
next	1.17.8.11;

1.17.8.11
date	2003.12.16.00.00.36;	author carlton;	state Exp;
branches;
next	;

1.17.10.1
date	2003.12.14.20.27.16;	author drow;	state Exp;
branches;
next	1.17.10.2;

1.17.10.2
date	2004.02.09.19.43.40;	author drow;	state Exp;
branches;
next	;

1.12.4.1
date	2002.06.15.16.42.52;	author cagney;	state Exp;
branches;
next	1.12.4.2;

1.12.4.2
date	2002.06.21.16.19.25;	author cagney;	state Exp;
branches;
next	1.12.4.3;

1.12.4.3
date	2002.07.03.18.43.57;	author cagney;	state Exp;
branches;
next	;

1.12.6.1
date	2002.06.20.01.32.33;	author kseitz;	state Exp;
branches;
next	1.12.6.2;

1.12.6.2
date	2002.07.22.21.46.59;	author kseitz;	state Exp;
branches;
next	1.12.6.3;

1.12.6.3
date	2002.08.30.22.52.44;	author kseitz;	state Exp;
branches;
next	1.12.6.4;

1.12.6.4
date	2002.11.04.00.17.31;	author ezannoni;	state Exp;
branches;
next	;


desc
@@


1.93
log
@gdb/

	* i386-tdep.c (i386_in_stack_tramp_p): Remove unused
	parameter 'gdbarch'.
	(i386_stack_tramp_frame_sniffer): Caller update.
	* i386-linux-tdep.c (i386_linux_core_read_xcr0): Remove
	parameter 'gdbarch' and 'target'.
	(i386_linux_core_read_description): Caller update.
	* amd64-linux-tdep.c (amd64_linux_core_read_description):
	Likewise.
	* i386-linux-tdep.h (i386_linux_core_read_xcr0): Update
	declaration.
@
text
@/* Target-dependent code for GNU/Linux i386.

   Copyright (C) 2000-2013 Free Software Foundation, Inc.

   This file is part of GDB.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

#include "defs.h"
#include "gdbcore.h"
#include "frame.h"
#include "value.h"
#include "regcache.h"
#include "regset.h"
#include "inferior.h"
#include "osabi.h"
#include "reggroups.h"
#include "dwarf2-frame.h"
#include "gdb_string.h"

#include "i386-tdep.h"
#include "i386-linux-tdep.h"
#include "linux-tdep.h"
#include "glibc-tdep.h"
#include "solib-svr4.h"
#include "symtab.h"
#include "arch-utils.h"
#include "xml-syscall.h"

#include "i387-tdep.h"
#include "i386-xstate.h"

/* The syscall's XML filename for i386.  */
#define XML_SYSCALL_FILENAME_I386 "syscalls/i386-linux.xml"

#include "record-full.h"
#include "linux-record.h"
#include <stdint.h>

#include "features/i386/i386-linux.c"
#include "features/i386/i386-mmx-linux.c"
#include "features/i386/i386-avx-linux.c"

/* Supported register note sections.  */
static struct core_regset_section i386_linux_regset_sections[] =
{
  { ".reg", 68, "general-purpose" },
  { ".reg2", 108, "floating-point" },
  { NULL, 0 }
};

static struct core_regset_section i386_linux_sse_regset_sections[] =
{
  { ".reg", 68, "general-purpose" },
  { ".reg-xfp", 512, "extended floating-point" },
  { NULL, 0 }
};

static struct core_regset_section i386_linux_avx_regset_sections[] =
{
  { ".reg", 68, "general-purpose" },
  { ".reg-xstate", I386_XSTATE_MAX_SIZE, "XSAVE extended state" },
  { NULL, 0 }
};

/* Return non-zero, when the register is in the corresponding register
   group.  Put the LINUX_ORIG_EAX register in the system group.  */
static int
i386_linux_register_reggroup_p (struct gdbarch *gdbarch, int regnum,
				struct reggroup *group)
{
  if (regnum == I386_LINUX_ORIG_EAX_REGNUM)
    return (group == system_reggroup
	    || group == save_reggroup
	    || group == restore_reggroup);
  return i386_register_reggroup_p (gdbarch, regnum, group);
}


/* Recognizing signal handler frames.  */

/* GNU/Linux has two flavors of signals.  Normal signal handlers, and
   "realtime" (RT) signals.  The RT signals can provide additional
   information to the signal handler if the SA_SIGINFO flag is set
   when establishing a signal handler using `sigaction'.  It is not
   unlikely that future versions of GNU/Linux will support SA_SIGINFO
   for normal signals too.  */

/* When the i386 Linux kernel calls a signal handler and the
   SA_RESTORER flag isn't set, the return address points to a bit of
   code on the stack.  This function returns whether the PC appears to
   be within this bit of code.

   The instruction sequence for normal signals is
       pop    %eax
       mov    $0x77, %eax
       int    $0x80
   or 0x58 0xb8 0x77 0x00 0x00 0x00 0xcd 0x80.

   Checking for the code sequence should be somewhat reliable, because
   the effect is to call the system call sigreturn.  This is unlikely
   to occur anywhere other than in a signal trampoline.

   It kind of sucks that we have to read memory from the process in
   order to identify a signal trampoline, but there doesn't seem to be
   any other way.  Therefore we only do the memory reads if no
   function name could be identified, which should be the case since
   the code is on the stack.

   Detection of signal trampolines for handlers that set the
   SA_RESTORER flag is in general not possible.  Unfortunately this is
   what the GNU C Library has been doing for quite some time now.
   However, as of version 2.1.2, the GNU C Library uses signal
   trampolines (named __restore and __restore_rt) that are identical
   to the ones used by the kernel.  Therefore, these trampolines are
   supported too.  */

#define LINUX_SIGTRAMP_INSN0	0x58	/* pop %eax */
#define LINUX_SIGTRAMP_OFFSET0	0
#define LINUX_SIGTRAMP_INSN1	0xb8	/* mov $NNNN, %eax */
#define LINUX_SIGTRAMP_OFFSET1	1
#define LINUX_SIGTRAMP_INSN2	0xcd	/* int */
#define LINUX_SIGTRAMP_OFFSET2	6

static const gdb_byte linux_sigtramp_code[] =
{
  LINUX_SIGTRAMP_INSN0,					/* pop %eax */
  LINUX_SIGTRAMP_INSN1, 0x77, 0x00, 0x00, 0x00,		/* mov $0x77, %eax */
  LINUX_SIGTRAMP_INSN2, 0x80				/* int $0x80 */
};

#define LINUX_SIGTRAMP_LEN (sizeof linux_sigtramp_code)

/* If THIS_FRAME is a sigtramp routine, return the address of the
   start of the routine.  Otherwise, return 0.  */

static CORE_ADDR
i386_linux_sigtramp_start (struct frame_info *this_frame)
{
  CORE_ADDR pc = get_frame_pc (this_frame);
  gdb_byte buf[LINUX_SIGTRAMP_LEN];

  /* We only recognize a signal trampoline if PC is at the start of
     one of the three instructions.  We optimize for finding the PC at
     the start, as will be the case when the trampoline is not the
     first frame on the stack.  We assume that in the case where the
     PC is not at the start of the instruction sequence, there will be
     a few trailing readable bytes on the stack.  */

  if (!safe_frame_unwind_memory (this_frame, pc, buf, LINUX_SIGTRAMP_LEN))
    return 0;

  if (buf[0] != LINUX_SIGTRAMP_INSN0)
    {
      int adjust;

      switch (buf[0])
	{
	case LINUX_SIGTRAMP_INSN1:
	  adjust = LINUX_SIGTRAMP_OFFSET1;
	  break;
	case LINUX_SIGTRAMP_INSN2:
	  adjust = LINUX_SIGTRAMP_OFFSET2;
	  break;
	default:
	  return 0;
	}

      pc -= adjust;

      if (!safe_frame_unwind_memory (this_frame, pc, buf, LINUX_SIGTRAMP_LEN))
	return 0;
    }

  if (memcmp (buf, linux_sigtramp_code, LINUX_SIGTRAMP_LEN) != 0)
    return 0;

  return pc;
}

/* This function does the same for RT signals.  Here the instruction
   sequence is
       mov    $0xad, %eax
       int    $0x80
   or 0xb8 0xad 0x00 0x00 0x00 0xcd 0x80.

   The effect is to call the system call rt_sigreturn.  */

#define LINUX_RT_SIGTRAMP_INSN0		0xb8 /* mov $NNNN, %eax */
#define LINUX_RT_SIGTRAMP_OFFSET0	0
#define LINUX_RT_SIGTRAMP_INSN1		0xcd /* int */
#define LINUX_RT_SIGTRAMP_OFFSET1	5

static const gdb_byte linux_rt_sigtramp_code[] =
{
  LINUX_RT_SIGTRAMP_INSN0, 0xad, 0x00, 0x00, 0x00,	/* mov $0xad, %eax */
  LINUX_RT_SIGTRAMP_INSN1, 0x80				/* int $0x80 */
};

#define LINUX_RT_SIGTRAMP_LEN (sizeof linux_rt_sigtramp_code)

/* If THIS_FRAME is an RT sigtramp routine, return the address of the
   start of the routine.  Otherwise, return 0.  */

static CORE_ADDR
i386_linux_rt_sigtramp_start (struct frame_info *this_frame)
{
  CORE_ADDR pc = get_frame_pc (this_frame);
  gdb_byte buf[LINUX_RT_SIGTRAMP_LEN];

  /* We only recognize a signal trampoline if PC is at the start of
     one of the two instructions.  We optimize for finding the PC at
     the start, as will be the case when the trampoline is not the
     first frame on the stack.  We assume that in the case where the
     PC is not at the start of the instruction sequence, there will be
     a few trailing readable bytes on the stack.  */

  if (!safe_frame_unwind_memory (this_frame, pc, buf, LINUX_RT_SIGTRAMP_LEN))
    return 0;

  if (buf[0] != LINUX_RT_SIGTRAMP_INSN0)
    {
      if (buf[0] != LINUX_RT_SIGTRAMP_INSN1)
	return 0;

      pc -= LINUX_RT_SIGTRAMP_OFFSET1;

      if (!safe_frame_unwind_memory (this_frame, pc, buf,
				     LINUX_RT_SIGTRAMP_LEN))
	return 0;
    }

  if (memcmp (buf, linux_rt_sigtramp_code, LINUX_RT_SIGTRAMP_LEN) != 0)
    return 0;

  return pc;
}

/* Return whether THIS_FRAME corresponds to a GNU/Linux sigtramp
   routine.  */

static int
i386_linux_sigtramp_p (struct frame_info *this_frame)
{
  CORE_ADDR pc = get_frame_pc (this_frame);
  const char *name;

  find_pc_partial_function (pc, &name, NULL, NULL);

  /* If we have NAME, we can optimize the search.  The trampolines are
     named __restore and __restore_rt.  However, they aren't dynamically
     exported from the shared C library, so the trampoline may appear to
     be part of the preceding function.  This should always be sigaction,
     __sigaction, or __libc_sigaction (all aliases to the same function).  */
  if (name == NULL || strstr (name, "sigaction") != NULL)
    return (i386_linux_sigtramp_start (this_frame) != 0
	    || i386_linux_rt_sigtramp_start (this_frame) != 0);

  return (strcmp ("__restore", name) == 0
	  || strcmp ("__restore_rt", name) == 0);
}

/* Return one if the PC of THIS_FRAME is in a signal trampoline which
   may have DWARF-2 CFI.  */

static int
i386_linux_dwarf_signal_frame_p (struct gdbarch *gdbarch,
				 struct frame_info *this_frame)
{
  CORE_ADDR pc = get_frame_pc (this_frame);
  const char *name;

  find_pc_partial_function (pc, &name, NULL, NULL);

  /* If a vsyscall DSO is in use, the signal trampolines may have these
     names.  */
  if (name && (strcmp (name, "__kernel_sigreturn") == 0
	       || strcmp (name, "__kernel_rt_sigreturn") == 0))
    return 1;

  return 0;
}

/* Offset to struct sigcontext in ucontext, from <asm/ucontext.h>.  */
#define I386_LINUX_UCONTEXT_SIGCONTEXT_OFFSET 20

/* Assuming THIS_FRAME is a GNU/Linux sigtramp routine, return the
   address of the associated sigcontext structure.  */

static CORE_ADDR
i386_linux_sigcontext_addr (struct frame_info *this_frame)
{
  struct gdbarch *gdbarch = get_frame_arch (this_frame);
  enum bfd_endian byte_order = gdbarch_byte_order (gdbarch);
  CORE_ADDR pc;
  CORE_ADDR sp;
  gdb_byte buf[4];

  get_frame_register (this_frame, I386_ESP_REGNUM, buf);
  sp = extract_unsigned_integer (buf, 4, byte_order);

  pc = i386_linux_sigtramp_start (this_frame);
  if (pc)
    {
      /* The sigcontext structure lives on the stack, right after
	 the signum argument.  We determine the address of the
	 sigcontext structure by looking at the frame's stack
	 pointer.  Keep in mind that the first instruction of the
	 sigtramp code is "pop %eax".  If the PC is after this
	 instruction, adjust the returned value accordingly.  */
      if (pc == get_frame_pc (this_frame))
	return sp + 4;
      return sp;
    }

  pc = i386_linux_rt_sigtramp_start (this_frame);
  if (pc)
    {
      CORE_ADDR ucontext_addr;

      /* The sigcontext structure is part of the user context.  A
	 pointer to the user context is passed as the third argument
	 to the signal handler.  */
      read_memory (sp + 8, buf, 4);
      ucontext_addr = extract_unsigned_integer (buf, 4, byte_order);
      return ucontext_addr + I386_LINUX_UCONTEXT_SIGCONTEXT_OFFSET;
    }

  error (_("Couldn't recognize signal trampoline."));
  return 0;
}

/* Set the program counter for process PTID to PC.  */

static void
i386_linux_write_pc (struct regcache *regcache, CORE_ADDR pc)
{
  regcache_cooked_write_unsigned (regcache, I386_EIP_REGNUM, pc);

  /* We must be careful with modifying the program counter.  If we
     just interrupted a system call, the kernel might try to restart
     it when we resume the inferior.  On restarting the system call,
     the kernel will try backing up the program counter even though it
     no longer points at the system call.  This typically results in a
     SIGSEGV or SIGILL.  We can prevent this by writing `-1' in the
     "orig_eax" pseudo-register.

     Note that "orig_eax" is saved when setting up a dummy call frame.
     This means that it is properly restored when that frame is
     popped, and that the interrupted system call will be restarted
     when we resume the inferior on return from a function call from
     within GDB.  In all other cases the system call will not be
     restarted.  */
  regcache_cooked_write_unsigned (regcache, I386_LINUX_ORIG_EAX_REGNUM, -1);
}

/* Record all registers but IP register for process-record.  */

static int
i386_all_but_ip_registers_record (struct regcache *regcache)
{
  if (record_full_arch_list_add_reg (regcache, I386_EAX_REGNUM))
    return -1;
  if (record_full_arch_list_add_reg (regcache, I386_ECX_REGNUM))
    return -1;
  if (record_full_arch_list_add_reg (regcache, I386_EDX_REGNUM))
    return -1;
  if (record_full_arch_list_add_reg (regcache, I386_EBX_REGNUM))
    return -1;
  if (record_full_arch_list_add_reg (regcache, I386_ESP_REGNUM))
    return -1;
  if (record_full_arch_list_add_reg (regcache, I386_EBP_REGNUM))
    return -1;
  if (record_full_arch_list_add_reg (regcache, I386_ESI_REGNUM))
    return -1;
  if (record_full_arch_list_add_reg (regcache, I386_EDI_REGNUM))
    return -1;
  if (record_full_arch_list_add_reg (regcache, I386_EFLAGS_REGNUM))
    return -1;

  return 0;
}

/* i386_canonicalize_syscall maps from the native i386 Linux set
   of syscall ids into a canonical set of syscall ids used by
   process record (a mostly trivial mapping, since the canonical
   set was originally taken from the i386 set).  */

static enum gdb_syscall
i386_canonicalize_syscall (int syscall)
{
  enum { i386_syscall_max = 499 };

  if (syscall <= i386_syscall_max)
    return syscall;
  else
    return -1;
}

/* Parse the arguments of current system call instruction and record
   the values of the registers and memory that will be changed into
   "record_arch_list".  This instruction is "int 0x80" (Linux
   Kernel2.4) or "sysenter" (Linux Kernel 2.6).

   Return -1 if something wrong.  */

static struct linux_record_tdep i386_linux_record_tdep;

static int
i386_linux_intx80_sysenter_syscall_record (struct regcache *regcache)
{
  int ret;
  LONGEST syscall_native;
  enum gdb_syscall syscall_gdb;

  regcache_raw_read_signed (regcache, I386_EAX_REGNUM, &syscall_native);

  syscall_gdb = i386_canonicalize_syscall (syscall_native);

  if (syscall_gdb < 0)
    {
      printf_unfiltered (_("Process record and replay target doesn't "
                           "support syscall number %s\n"), 
			 plongest (syscall_native));
      return -1;
    }

  if (syscall_gdb == gdb_sys_sigreturn
      || syscall_gdb == gdb_sys_rt_sigreturn)
   {
     if (i386_all_but_ip_registers_record (regcache))
       return -1;
     return 0;
   }

  ret = record_linux_system_call (syscall_gdb, regcache,
				  &i386_linux_record_tdep);
  if (ret)
    return ret;

  /* Record the return value of the system call.  */
  if (record_full_arch_list_add_reg (regcache, I386_EAX_REGNUM))
    return -1;

  return 0;
}

#define I386_LINUX_xstate	270
#define I386_LINUX_frame_size	732

static int
i386_linux_record_signal (struct gdbarch *gdbarch,
                          struct regcache *regcache,
                          enum gdb_signal signal)
{
  ULONGEST esp;

  if (i386_all_but_ip_registers_record (regcache))
    return -1;

  if (record_full_arch_list_add_reg (regcache, I386_EIP_REGNUM))
    return -1;

  /* Record the change in the stack.  */
  regcache_raw_read_unsigned (regcache, I386_ESP_REGNUM, &esp);
  /* This is for xstate.
     sp -= sizeof (struct _fpstate);  */
  esp -= I386_LINUX_xstate;
  /* This is for frame_size.
     sp -= sizeof (struct rt_sigframe);  */
  esp -= I386_LINUX_frame_size;
  if (record_full_arch_list_add_mem (esp,
				     I386_LINUX_xstate + I386_LINUX_frame_size))
    return -1;

  if (record_full_arch_list_add_end ())
    return -1;

  return 0;
}


/* Core of the implementation for gdbarch get_syscall_number.  Get pending
   syscall number from REGCACHE.  If there is no pending syscall -1 will be
   returned.  Pending syscall means ptrace has stepped into the syscall but
   another ptrace call will step out.  PC is right after the int $0x80
   / syscall / sysenter instruction in both cases, PC does not change during
   the second ptrace step.  */

static LONGEST
i386_linux_get_syscall_number_from_regcache (struct regcache *regcache)
{
  struct gdbarch *gdbarch = get_regcache_arch (regcache);
  enum bfd_endian byte_order = gdbarch_byte_order (gdbarch);
  /* The content of a register.  */
  gdb_byte buf[4];
  /* The result.  */
  LONGEST ret;

  /* Getting the system call number from the register.
     When dealing with x86 architecture, this information
     is stored at %eax register.  */
  regcache_cooked_read (regcache, I386_LINUX_ORIG_EAX_REGNUM, buf);

  ret = extract_signed_integer (buf, 4, byte_order);

  return ret;
}

/* Wrapper for i386_linux_get_syscall_number_from_regcache to make it
   compatible with gdbarch get_syscall_number method prototype.  */

static LONGEST
i386_linux_get_syscall_number (struct gdbarch *gdbarch,
                               ptid_t ptid)
{
  struct regcache *regcache = get_thread_regcache (ptid);

  return i386_linux_get_syscall_number_from_regcache (regcache);
}

/* The register sets used in GNU/Linux ELF core-dumps are identical to
   the register sets in `struct user' that are used for a.out
   core-dumps.  These are also used by ptrace(2).  The corresponding
   types are `elf_gregset_t' for the general-purpose registers (with
   `elf_greg_t' the type of a single GP register) and `elf_fpregset_t'
   for the floating-point registers.

   Those types used to be available under the names `gregset_t' and
   `fpregset_t' too, and GDB used those names in the past.  But those
   names are now used for the register sets used in the `mcontext_t'
   type, which have a different size and layout.  */

/* Mapping between the general-purpose registers in `struct user'
   format and GDB's register cache layout.  */

/* From <sys/reg.h>.  */
int i386_linux_gregset_reg_offset[] =
{
  6 * 4,			/* %eax */
  1 * 4,			/* %ecx */
  2 * 4,			/* %edx */
  0 * 4,			/* %ebx */
  15 * 4,			/* %esp */
  5 * 4,			/* %ebp */
  3 * 4,			/* %esi */
  4 * 4,			/* %edi */
  12 * 4,			/* %eip */
  14 * 4,			/* %eflags */
  13 * 4,			/* %cs */
  16 * 4,			/* %ss */
  7 * 4,			/* %ds */
  8 * 4,			/* %es */
  9 * 4,			/* %fs */
  10 * 4,			/* %gs */
  -1, -1, -1, -1, -1, -1, -1, -1,
  -1, -1, -1, -1, -1, -1, -1, -1,
  -1, -1, -1, -1, -1, -1, -1, -1,
  -1,
  -1, -1, -1, -1, -1, -1, -1, -1,
  11 * 4			/* "orig_eax" */
};

/* Mapping between the general-purpose registers in `struct
   sigcontext' format and GDB's register cache layout.  */

/* From <asm/sigcontext.h>.  */
static int i386_linux_sc_reg_offset[] =
{
  11 * 4,			/* %eax */
  10 * 4,			/* %ecx */
  9 * 4,			/* %edx */
  8 * 4,			/* %ebx */
  7 * 4,			/* %esp */
  6 * 4,			/* %ebp */
  5 * 4,			/* %esi */
  4 * 4,			/* %edi */
  14 * 4,			/* %eip */
  16 * 4,			/* %eflags */
  15 * 4,			/* %cs */
  18 * 4,			/* %ss */
  3 * 4,			/* %ds */
  2 * 4,			/* %es */
  1 * 4,			/* %fs */
  0 * 4				/* %gs */
};

/* Get XSAVE extended state xcr0 from core dump.  */

uint64_t
i386_linux_core_read_xcr0 (bfd *abfd)
{
  asection *xstate = bfd_get_section_by_name (abfd, ".reg-xstate");
  uint64_t xcr0;

  if (xstate)
    {
      size_t size = bfd_section_size (abfd, xstate);

      /* Check extended state size.  */
      if (size < I386_XSTATE_AVX_SIZE)
	xcr0 = I386_XSTATE_SSE_MASK;
      else
	{
	  char contents[8];

	  if (! bfd_get_section_contents (abfd, xstate, contents,
					  I386_LINUX_XSAVE_XCR0_OFFSET,
					  8))
	    {
	      warning (_("Couldn't read `xcr0' bytes from "
			 "`.reg-xstate' section in core file."));
	      return 0;
	    }

	  xcr0 = bfd_get_64 (abfd, contents);
	}
    }
  else
    xcr0 = 0;

  return xcr0;
}

/* Get Linux/x86 target description from core dump.  */

static const struct target_desc *
i386_linux_core_read_description (struct gdbarch *gdbarch,
				  struct target_ops *target,
				  bfd *abfd)
{
  /* Linux/i386.  */
  uint64_t xcr0 = i386_linux_core_read_xcr0 (abfd);
  switch ((xcr0 & I386_XSTATE_AVX_MASK))
    {
    case I386_XSTATE_AVX_MASK:
      return tdesc_i386_avx_linux;
    case I386_XSTATE_SSE_MASK:
      return tdesc_i386_linux;
    case I386_XSTATE_X87_MASK:
      return tdesc_i386_mmx_linux;
    default:
      break;
    }

  if (bfd_get_section_by_name (abfd, ".reg-xfp") != NULL)
    return tdesc_i386_linux;
  else
    return tdesc_i386_mmx_linux;
}

/* Linux kernel shows PC value after the 'int $0x80' instruction even if
   inferior is still inside the syscall.  On next PTRACE_SINGLESTEP it will
   finish the syscall but PC will not change.
   
   Some vDSOs contain 'int $0x80; ret' and during stepping out of the syscall
   i386_displaced_step_fixup would keep PC at the displaced pad location.
   As PC is pointing to the 'ret' instruction before the step
   i386_displaced_step_fixup would expect inferior has just executed that 'ret'
   and PC should not be adjusted.  In reality it finished syscall instead and
   PC should get relocated back to its vDSO address.  Hide the 'ret'
   instruction by 'nop' so that i386_displaced_step_fixup is not confused.
   
   It is not fully correct as the bytes in struct displaced_step_closure will
   not match the inferior code.  But we would need some new flag in
   displaced_step_closure otherwise to keep the state that syscall is finishing
   for the later i386_displaced_step_fixup execution as the syscall execution
   is already no longer detectable there.  The new flag field would mean
   i386-linux-tdep.c needs to wrap all the displacement methods of i386-tdep.c
   which does not seem worth it.  The same effect is achieved by patching that
   'nop' instruction there instead.  */

static struct displaced_step_closure *
i386_linux_displaced_step_copy_insn (struct gdbarch *gdbarch,
				     CORE_ADDR from, CORE_ADDR to,
				     struct regcache *regs)
{
  struct displaced_step_closure *closure;
  
  closure = i386_displaced_step_copy_insn (gdbarch, from, to, regs);

  if (i386_linux_get_syscall_number_from_regcache (regs) != -1)
    {
      /* Since we use simple_displaced_step_copy_insn, our closure is a
	 copy of the instruction.  */
      gdb_byte *insn = (gdb_byte *) closure;

      /* Fake nop.  */
      insn[0] = 0x90;
    }

  return closure;
}

static void
i386_linux_init_abi (struct gdbarch_info info, struct gdbarch *gdbarch)
{
  struct gdbarch_tdep *tdep = gdbarch_tdep (gdbarch);
  const struct target_desc *tdesc = info.target_desc;
  struct tdesc_arch_data *tdesc_data = (void *) info.tdep_info;
  const struct tdesc_feature *feature;
  int valid_p;

  gdb_assert (tdesc_data);

  linux_init_abi (info, gdbarch);

  /* GNU/Linux uses ELF.  */
  i386_elf_init_abi (info, gdbarch);

  /* Reserve a number for orig_eax.  */
  set_gdbarch_num_regs (gdbarch, I386_LINUX_NUM_REGS);

  if (! tdesc_has_registers (tdesc))
    tdesc = tdesc_i386_linux;
  tdep->tdesc = tdesc;

  feature = tdesc_find_feature (tdesc, "org.gnu.gdb.i386.linux");
  if (feature == NULL)
    return;

  valid_p = tdesc_numbered_register (feature, tdesc_data,
				     I386_LINUX_ORIG_EAX_REGNUM,
				     "orig_eax");
  if (!valid_p)
    return;

  /* Add the %orig_eax register used for syscall restarting.  */
  set_gdbarch_write_pc (gdbarch, i386_linux_write_pc);

  tdep->register_reggroup_p = i386_linux_register_reggroup_p;

  tdep->gregset_reg_offset = i386_linux_gregset_reg_offset;
  tdep->gregset_num_regs = ARRAY_SIZE (i386_linux_gregset_reg_offset);
  tdep->sizeof_gregset = 17 * 4;

  tdep->jb_pc_offset = 20;	/* From <bits/setjmp.h>.  */

  tdep->sigtramp_p = i386_linux_sigtramp_p;
  tdep->sigcontext_addr = i386_linux_sigcontext_addr;
  tdep->sc_reg_offset = i386_linux_sc_reg_offset;
  tdep->sc_num_regs = ARRAY_SIZE (i386_linux_sc_reg_offset);

  tdep->xsave_xcr0_offset = I386_LINUX_XSAVE_XCR0_OFFSET;

  set_gdbarch_process_record (gdbarch, i386_process_record);
  set_gdbarch_process_record_signal (gdbarch, i386_linux_record_signal);

  /* Initialize the i386_linux_record_tdep.  */
  /* These values are the size of the type that will be used in a system
     call.  They are obtained from Linux Kernel source.  */
  i386_linux_record_tdep.size_pointer
    = gdbarch_ptr_bit (gdbarch) / TARGET_CHAR_BIT;
  i386_linux_record_tdep.size__old_kernel_stat = 32;
  i386_linux_record_tdep.size_tms = 16;
  i386_linux_record_tdep.size_loff_t = 8;
  i386_linux_record_tdep.size_flock = 16;
  i386_linux_record_tdep.size_oldold_utsname = 45;
  i386_linux_record_tdep.size_ustat = 20;
  i386_linux_record_tdep.size_old_sigaction = 140;
  i386_linux_record_tdep.size_old_sigset_t = 128;
  i386_linux_record_tdep.size_rlimit = 8;
  i386_linux_record_tdep.size_rusage = 72;
  i386_linux_record_tdep.size_timeval = 8;
  i386_linux_record_tdep.size_timezone = 8;
  i386_linux_record_tdep.size_old_gid_t = 2;
  i386_linux_record_tdep.size_old_uid_t = 2;
  i386_linux_record_tdep.size_fd_set = 128;
  i386_linux_record_tdep.size_dirent = 268;
  i386_linux_record_tdep.size_dirent64 = 276;
  i386_linux_record_tdep.size_statfs = 64;
  i386_linux_record_tdep.size_statfs64 = 84;
  i386_linux_record_tdep.size_sockaddr = 16;
  i386_linux_record_tdep.size_int
    = gdbarch_int_bit (gdbarch) / TARGET_CHAR_BIT;
  i386_linux_record_tdep.size_long
    = gdbarch_long_bit (gdbarch) / TARGET_CHAR_BIT;
  i386_linux_record_tdep.size_ulong
    = gdbarch_long_bit (gdbarch) / TARGET_CHAR_BIT;
  i386_linux_record_tdep.size_msghdr = 28;
  i386_linux_record_tdep.size_itimerval = 16;
  i386_linux_record_tdep.size_stat = 88;
  i386_linux_record_tdep.size_old_utsname = 325;
  i386_linux_record_tdep.size_sysinfo = 64;
  i386_linux_record_tdep.size_msqid_ds = 88;
  i386_linux_record_tdep.size_shmid_ds = 84;
  i386_linux_record_tdep.size_new_utsname = 390;
  i386_linux_record_tdep.size_timex = 128;
  i386_linux_record_tdep.size_mem_dqinfo = 24;
  i386_linux_record_tdep.size_if_dqblk = 68;
  i386_linux_record_tdep.size_fs_quota_stat = 68;
  i386_linux_record_tdep.size_timespec = 8;
  i386_linux_record_tdep.size_pollfd = 8;
  i386_linux_record_tdep.size_NFS_FHSIZE = 32;
  i386_linux_record_tdep.size_knfsd_fh = 132;
  i386_linux_record_tdep.size_TASK_COMM_LEN = 16;
  i386_linux_record_tdep.size_sigaction = 140;
  i386_linux_record_tdep.size_sigset_t = 8;
  i386_linux_record_tdep.size_siginfo_t = 128;
  i386_linux_record_tdep.size_cap_user_data_t = 12;
  i386_linux_record_tdep.size_stack_t = 12;
  i386_linux_record_tdep.size_off_t = i386_linux_record_tdep.size_long;
  i386_linux_record_tdep.size_stat64 = 96;
  i386_linux_record_tdep.size_gid_t = 2;
  i386_linux_record_tdep.size_uid_t = 2;
  i386_linux_record_tdep.size_PAGE_SIZE = 4096;
  i386_linux_record_tdep.size_flock64 = 24;
  i386_linux_record_tdep.size_user_desc = 16;
  i386_linux_record_tdep.size_io_event = 32;
  i386_linux_record_tdep.size_iocb = 64;
  i386_linux_record_tdep.size_epoll_event = 12;
  i386_linux_record_tdep.size_itimerspec
    = i386_linux_record_tdep.size_timespec * 2;
  i386_linux_record_tdep.size_mq_attr = 32;
  i386_linux_record_tdep.size_siginfo = 128;
  i386_linux_record_tdep.size_termios = 36;
  i386_linux_record_tdep.size_termios2 = 44;
  i386_linux_record_tdep.size_pid_t = 4;
  i386_linux_record_tdep.size_winsize = 8;
  i386_linux_record_tdep.size_serial_struct = 60;
  i386_linux_record_tdep.size_serial_icounter_struct = 80;
  i386_linux_record_tdep.size_hayes_esp_config = 12;
  i386_linux_record_tdep.size_size_t = 4;
  i386_linux_record_tdep.size_iovec = 8;

  /* These values are the second argument of system call "sys_ioctl".
     They are obtained from Linux Kernel source.  */
  i386_linux_record_tdep.ioctl_TCGETS = 0x5401;
  i386_linux_record_tdep.ioctl_TCSETS = 0x5402;
  i386_linux_record_tdep.ioctl_TCSETSW = 0x5403;
  i386_linux_record_tdep.ioctl_TCSETSF = 0x5404;
  i386_linux_record_tdep.ioctl_TCGETA = 0x5405;
  i386_linux_record_tdep.ioctl_TCSETA = 0x5406;
  i386_linux_record_tdep.ioctl_TCSETAW = 0x5407;
  i386_linux_record_tdep.ioctl_TCSETAF = 0x5408;
  i386_linux_record_tdep.ioctl_TCSBRK = 0x5409;
  i386_linux_record_tdep.ioctl_TCXONC = 0x540A;
  i386_linux_record_tdep.ioctl_TCFLSH = 0x540B;
  i386_linux_record_tdep.ioctl_TIOCEXCL = 0x540C;
  i386_linux_record_tdep.ioctl_TIOCNXCL = 0x540D;
  i386_linux_record_tdep.ioctl_TIOCSCTTY = 0x540E;
  i386_linux_record_tdep.ioctl_TIOCGPGRP = 0x540F;
  i386_linux_record_tdep.ioctl_TIOCSPGRP = 0x5410;
  i386_linux_record_tdep.ioctl_TIOCOUTQ = 0x5411;
  i386_linux_record_tdep.ioctl_TIOCSTI = 0x5412;
  i386_linux_record_tdep.ioctl_TIOCGWINSZ = 0x5413;
  i386_linux_record_tdep.ioctl_TIOCSWINSZ = 0x5414;
  i386_linux_record_tdep.ioctl_TIOCMGET = 0x5415;
  i386_linux_record_tdep.ioctl_TIOCMBIS = 0x5416;
  i386_linux_record_tdep.ioctl_TIOCMBIC = 0x5417;
  i386_linux_record_tdep.ioctl_TIOCMSET = 0x5418;
  i386_linux_record_tdep.ioctl_TIOCGSOFTCAR = 0x5419;
  i386_linux_record_tdep.ioctl_TIOCSSOFTCAR = 0x541A;
  i386_linux_record_tdep.ioctl_FIONREAD = 0x541B;
  i386_linux_record_tdep.ioctl_TIOCINQ = i386_linux_record_tdep.ioctl_FIONREAD;
  i386_linux_record_tdep.ioctl_TIOCLINUX = 0x541C;
  i386_linux_record_tdep.ioctl_TIOCCONS = 0x541D;
  i386_linux_record_tdep.ioctl_TIOCGSERIAL = 0x541E;
  i386_linux_record_tdep.ioctl_TIOCSSERIAL = 0x541F;
  i386_linux_record_tdep.ioctl_TIOCPKT = 0x5420;
  i386_linux_record_tdep.ioctl_FIONBIO = 0x5421;
  i386_linux_record_tdep.ioctl_TIOCNOTTY = 0x5422;
  i386_linux_record_tdep.ioctl_TIOCSETD = 0x5423;
  i386_linux_record_tdep.ioctl_TIOCGETD = 0x5424;
  i386_linux_record_tdep.ioctl_TCSBRKP = 0x5425;
  i386_linux_record_tdep.ioctl_TIOCTTYGSTRUCT = 0x5426;
  i386_linux_record_tdep.ioctl_TIOCSBRK = 0x5427;
  i386_linux_record_tdep.ioctl_TIOCCBRK = 0x5428;
  i386_linux_record_tdep.ioctl_TIOCGSID = 0x5429;
  i386_linux_record_tdep.ioctl_TCGETS2 = 0x802c542a;
  i386_linux_record_tdep.ioctl_TCSETS2 = 0x402c542b;
  i386_linux_record_tdep.ioctl_TCSETSW2 = 0x402c542c;
  i386_linux_record_tdep.ioctl_TCSETSF2 = 0x402c542d;
  i386_linux_record_tdep.ioctl_TIOCGPTN = 0x80045430;
  i386_linux_record_tdep.ioctl_TIOCSPTLCK = 0x40045431;
  i386_linux_record_tdep.ioctl_FIONCLEX = 0x5450;
  i386_linux_record_tdep.ioctl_FIOCLEX = 0x5451;
  i386_linux_record_tdep.ioctl_FIOASYNC = 0x5452;
  i386_linux_record_tdep.ioctl_TIOCSERCONFIG = 0x5453;
  i386_linux_record_tdep.ioctl_TIOCSERGWILD = 0x5454;
  i386_linux_record_tdep.ioctl_TIOCSERSWILD = 0x5455;
  i386_linux_record_tdep.ioctl_TIOCGLCKTRMIOS = 0x5456;
  i386_linux_record_tdep.ioctl_TIOCSLCKTRMIOS = 0x5457;
  i386_linux_record_tdep.ioctl_TIOCSERGSTRUCT = 0x5458;
  i386_linux_record_tdep.ioctl_TIOCSERGETLSR = 0x5459;
  i386_linux_record_tdep.ioctl_TIOCSERGETMULTI = 0x545A;
  i386_linux_record_tdep.ioctl_TIOCSERSETMULTI = 0x545B;
  i386_linux_record_tdep.ioctl_TIOCMIWAIT = 0x545C;
  i386_linux_record_tdep.ioctl_TIOCGICOUNT = 0x545D;
  i386_linux_record_tdep.ioctl_TIOCGHAYESESP = 0x545E;
  i386_linux_record_tdep.ioctl_TIOCSHAYESESP = 0x545F;
  i386_linux_record_tdep.ioctl_FIOQSIZE = 0x5460;

  /* These values are the second argument of system call "sys_fcntl"
     and "sys_fcntl64".  They are obtained from Linux Kernel source.  */
  i386_linux_record_tdep.fcntl_F_GETLK = 5;
  i386_linux_record_tdep.fcntl_F_GETLK64 = 12;
  i386_linux_record_tdep.fcntl_F_SETLK64 = 13;
  i386_linux_record_tdep.fcntl_F_SETLKW64 = 14;

  i386_linux_record_tdep.arg1 = I386_EBX_REGNUM;
  i386_linux_record_tdep.arg2 = I386_ECX_REGNUM;
  i386_linux_record_tdep.arg3 = I386_EDX_REGNUM;
  i386_linux_record_tdep.arg4 = I386_ESI_REGNUM;
  i386_linux_record_tdep.arg5 = I386_EDI_REGNUM;
  i386_linux_record_tdep.arg6 = I386_EBP_REGNUM;

  tdep->i386_intx80_record = i386_linux_intx80_sysenter_syscall_record;
  tdep->i386_sysenter_record = i386_linux_intx80_sysenter_syscall_record;
  tdep->i386_syscall_record = i386_linux_intx80_sysenter_syscall_record;

  /* N_FUN symbols in shared libaries have 0 for their values and need
     to be relocated.  */
  set_gdbarch_sofun_address_maybe_missing (gdbarch, 1);

  /* GNU/Linux uses SVR4-style shared libraries.  */
  set_gdbarch_skip_trampoline_code (gdbarch, find_solib_trampoline_target);
  set_solib_svr4_fetch_link_map_offsets
    (gdbarch, svr4_ilp32_fetch_link_map_offsets);

  /* GNU/Linux uses the dynamic linker included in the GNU C Library.  */
  set_gdbarch_skip_solib_resolver (gdbarch, glibc_skip_solib_resolver);

  dwarf2_frame_set_signal_frame_p (gdbarch, i386_linux_dwarf_signal_frame_p);

  /* Enable TLS support.  */
  set_gdbarch_fetch_tls_load_module_address (gdbarch,
                                             svr4_fetch_objfile_link_map);

  /* Install supported register note sections.  */
  if (tdesc_find_feature (tdesc, "org.gnu.gdb.i386.avx"))
    set_gdbarch_core_regset_sections (gdbarch, i386_linux_avx_regset_sections);
  else if (tdesc_find_feature (tdesc, "org.gnu.gdb.i386.sse"))
    set_gdbarch_core_regset_sections (gdbarch, i386_linux_sse_regset_sections);
  else
    set_gdbarch_core_regset_sections (gdbarch, i386_linux_regset_sections);

  set_gdbarch_core_read_description (gdbarch,
				     i386_linux_core_read_description);

  /* Displaced stepping.  */
  set_gdbarch_displaced_step_copy_insn (gdbarch,
                                        i386_linux_displaced_step_copy_insn);
  set_gdbarch_displaced_step_fixup (gdbarch, i386_displaced_step_fixup);
  set_gdbarch_displaced_step_free_closure (gdbarch,
                                           simple_displaced_step_free_closure);
  set_gdbarch_displaced_step_location (gdbarch,
                                       displaced_step_at_entry_point);

  /* Functions for 'catch syscall'.  */
  set_xml_syscall_file_name (XML_SYSCALL_FILENAME_I386);
  set_gdbarch_get_syscall_number (gdbarch,
                                  i386_linux_get_syscall_number);

  set_gdbarch_get_siginfo_type (gdbarch, linux_get_siginfo_type);
}

/* Provide a prototype to silence -Wmissing-prototypes.  */
extern void _initialize_i386_linux_tdep (void);

void
_initialize_i386_linux_tdep (void)
{
  gdbarch_register_osabi (bfd_arch_i386, 0, GDB_OSABI_LINUX,
			  i386_linux_init_abi);

  /* Initialize the Linux target description.  */
  initialize_tdesc_i386_linux ();
  initialize_tdesc_i386_mmx_linux ();
  initialize_tdesc_i386_avx_linux ();
}
@


1.92
log
@Rename record_ prefixes in record-full.h into record_full_.

gdb/
	* record-full.h, record-full.c (record_memory_query): Rename
	to ...
	(record_full_memory_query): ...this. Update all users.
	(record_arch_list_add_reg): Rename to ...
	(record_full_arch_list_add_reg): ...this. Update all users.
	(record_arch_list_add_mem): Rename to ...
	(record_full_arch_list_add_mem): ...this. Update all users.
	(record_arch_list_add_end): Rename to ...
	(record_full_arch_list_add_end): ...this. Update all users.
	(record_gdb_operation_disable_set): Rename to ...
	(record_full_gdb_operation_disable_set): ...this.
	Update all users.
@
text
@d602 1
a602 2
i386_linux_core_read_xcr0 (struct gdbarch *gdbarch,
			   struct target_ops *target, bfd *abfd)
d644 1
a644 1
  uint64_t xcr0 = i386_linux_core_read_xcr0 (gdbarch, target, abfd);
@


1.91
log
@Split record.h into record.h and record-full.h.
Split record.c into record.c and record-full.c.

The split leaves the command part in record.c and moves the target part into
record-full.c.

gdb/
	* record.h: Split into this and ...
	* record-full.h: ... this.
	* record.c: Split into this and ...
	* record-full.c: ... this.
	* target.h (target_ops): Add new fields to_info_record,
	to_save_record, to_delete_record, to_record_is_replaying,
	to_goto_record_begin, to_goto_record_end, to_goto_record.
	(target_info_record): New.
	(target_save_record): New.
	(target_supports_delete_record): New.
	(target_delete_record): New.
	(target_record_is_replaying): New.
	(target_goto_record_begin): New.
	(target_goto_record_end): New.
	(target_goto_record): New.
	* target.c (target_info_record): New.
	(target_save_record): New.
	(target_supports_delete_record): New.
	(target_delete_record): New.
	(target_record_is_replaying): New.
	(target_goto_record_begin): New.
	(target_goto_record_end): New.
	(target_goto_record): New.
	* record.h: Declare struct cmd_list_element.
	(record_cmdlist): New declaration.
	(set_record_cmdlist): New declaration.
	(show_record_cmdlist): New declaration.
	(info_record_cmdlist): New declaration.
	(cmd_record_goto): New declaration.
	* record.c: Remove unnecessary includes.
	Include inferior.h.
	(cmd_record_goto): Remove declaration.
	(record_cmdlist): Now extern. Initialize.
	(set_record_cmdlist): Now extern. Initialize.
	(show_record_cmdlist): Now extern. Initialize.
	(info_record_cmdlist): Now extern. Initialize.
	(find_record_target): New.
	(require_record_target): New.
	(cmd_record_start): Update.
	(cmd_record_delete): Remove target-specific code.
	Call target_delete_record.
	(cmd_record_stop): Unpush any record target.
	(set_record_insn_max_num): Move to record-full.c
	(set_record_command): Add comment.
	(show_record_command): Add comment.
	(info_record_command): Update comment.
	Remove target-specific code.
	Call the record target's to_info_record.
	(cmd_record_start): New.
	(cmd_record_goto): Now extern.
	Remove target-specific code.
	Call target_goto_begin,  target_goto_end, or target_goto.
	(_initialize_record): Move record target ops initialization to
	record-full.c.
	Change "record" command help text.
	Move "record restore", "record set", and "record show" commands to
	record-full.c.
	* Makefile.in (SFILES): Add record-full.c.
	(HFILES_NO_SRCDIR): Add record-full.h.
	(COMMON_OBS): Add record-full.o.
	* amd64-linux-tdep.c: Include record-full.h instead of record.h.
	* arm-tdep.c: Include record-full.h.
	* i386-linux-tdep.c: Include record-full.h instead of record.h.
	* i386-tdep.c: Include record-full.h.
	* infrun.c: Include record-full.h.
	* linux-record.c: Include record-full.h.
	* moxie-tdep.c: Include record-full.h.
	* record-full.c: Include record-full.h.
	Change module comment.
	(set_record_full_cmdlist): New.
	(show_record_full_cmdlist): New.
	(record_full_cmdlist): New.
	(record_goto_insn): New declaration.
	(record_save): New declaration.
	(record_check_insn_num): Change query string.
	(record_info): New.
	(record_delete): New.
	(record_is_replaying): New.
	(record_goto_entry): New.
	(record_goto_begin): New.
	(record_goto_end): New.
	(record_goto): New.
	(init_record_ops): Update.
	(init_record_core_ops): Update.
	(cmd_record_save): Rename to record_save. Remove target and arg checks.
	(cmd_record_start): New.
	(set_record_insn_max_num): Moved from record.c
	(set_record_full_command): New.
	(show_record_full_command): New.
	(_initialize_record_full): New.
@
text
@d373 1
a373 1
  if (record_arch_list_add_reg (regcache, I386_EAX_REGNUM))
d375 1
a375 1
  if (record_arch_list_add_reg (regcache, I386_ECX_REGNUM))
d377 1
a377 1
  if (record_arch_list_add_reg (regcache, I386_EDX_REGNUM))
d379 1
a379 1
  if (record_arch_list_add_reg (regcache, I386_EBX_REGNUM))
d381 1
a381 1
  if (record_arch_list_add_reg (regcache, I386_ESP_REGNUM))
d383 1
a383 1
  if (record_arch_list_add_reg (regcache, I386_EBP_REGNUM))
d385 1
a385 1
  if (record_arch_list_add_reg (regcache, I386_ESI_REGNUM))
d387 1
a387 1
  if (record_arch_list_add_reg (regcache, I386_EDI_REGNUM))
d389 1
a389 1
  if (record_arch_list_add_reg (regcache, I386_EFLAGS_REGNUM))
d453 1
a453 1
  if (record_arch_list_add_reg (regcache, I386_EAX_REGNUM))
d472 1
a472 1
  if (record_arch_list_add_reg (regcache, I386_EIP_REGNUM))
d483 2
a484 2
  if (record_arch_list_add_mem (esp,
                                I386_LINUX_xstate + I386_LINUX_frame_size))
d487 1
a487 1
  if (record_arch_list_add_end ())
@


1.90
log
@Update years in copyright notice for the GDB files.

Two modifications:
  1. The addition of 2013 to the copyright year range for every file;
  2. The use of a single year range, instead of potentially multiple
     year ranges, as approved by the FSF.
@
text
@d47 1
a47 1
#include "record.h"
@


1.89
log
@gdb/
2012-05-24  Pedro Alves  <palves@@redhat.com>

	PR gdb/7205

	Replace target_signal with gdb_signal throughout.

gdb/gdbserver/
2012-05-24  Pedro Alves  <palves@@redhat.com>

	PR gdb/7205

	Replace target_signal with gdb_signal throughout.

include/gdb/
2012-05-24  Pedro Alves  <palves@@redhat.com>

	PR gdb/7205

	Replace target_signal with gdb_signal throughout.

sim/common/
2012-05-24  Pedro Alves  <palves@@redhat.com>

	PR gdb/7205

	Replace target_signal with gdb_signal throughout.
@
text
@d3 1
a3 1
   Copyright (C) 2000-2005, 2007-2012 Free Software Foundation, Inc.
@


1.88
log
@gdb/
	Fix -Wmissing-prototypes build.
	* alpha-tdep.c (alpha_deal_with_atomic_sequence): Make it static.
	* amd64-darwin-tdep.c (_initialize_amd64_darwin_tdep): New prototype.
	* amd64-windows-tdep.c (_initialize_amd64_windows_tdep): Likewise.
	* arm-symbian-tdep.c (arm_symbian_skip_trampoline_code): Make it static.
	(_initialize_arm_symbian_tdep): New prototype.
	* arm-wince-tdep.c (arm_wince_skip_main_prologue): Make it static.
	* i386-darwin-tdep.c (_initialize_i386_darwin_tdep): New prototype.
	* i386-linux-tdep.c (i386_linux_displaced_step_copy_insn): Make it
	static.
	* lm32-tdep.c (_initialize_lm32_tdep): New prototype.
	* microblaze-linux-tdep.c (_initialize_microblaze_linux_tdep): New
	prototype.
	* microblaze-tdep.c (microblaze_debug, microblaze_fetch_instruction)
	(microblaze_skip_prologue, microblaze_frame_cache): Make them static.
	* mips-linux-tdep.c (mips_linux_regset_from_core_section): Make it
	static.
	* moxie-tdep.c (moxie_process_record): Likewise.
	* remote-mips.c (mips_can_use_watchpoint, mips_insert_watchpoint)
	(mips_remove_watchpoint, mips_stopped_by_watchpoint): Make them static.
	* rl78-tdep.c (rl78_breakpoint_from_pc): Make it static.
	(_initialize_rl78_tdep): New prototype.
	* rx-tdep.c (rx_breakpoint_from_pc): Make it static.
	(_initialize_rx_tdep): New prototype.
	* solib-darwin.c (darwin_in_dynsym_resolve_code): Make it static.
	(_initialize_darwin_solib): New prototype.
	* solib-spu.c: Include solib-spu.h.
	(_initialize_spu_solib): New prototype.
	* spu-multiarch.c (_initialize_spu_multiarch): New prototype.
	* tic6x-tdep.c (tic6x_analyze_prologue, tic6x_skip_prologue)
	(tic6x_breakpoint_from_pc, tic6x_frame_unwind_cache)
	(tic6x_software_single_step): Make it static.
	(_initialize_tic6x_tdep): New prototype.
@
text
@d465 1
a465 1
                          enum target_signal signal)
@


1.87
log
@2012-03-01  Pedro Alves  <palves@@redhat.com>

	* amd64-linux-tdep.c (amd64_linux_record_signal): Make static.
	* breakpoint.c (create_exception_master_breakpoint, trace_command)
	(ftrace_command, strace_command): Make static.
	* d-lang.c (_initialize_d_language): Declare.
	* dwarf2expr.c (_initialize_dwarf2expr): Declare.
	* dwarf2loc.c (_initialize_dwarf2loc):
	* dwarf2read.c (process_psymtab_comp_unit): Make static.
	* exec.c (exec_get_section_table): Make static.
	* i386-linux-tdep.c (i386_linux_record_signal): Make static.
	* infcmd.c (ensure_valid_thread, ensure_not_tfind_mode): Make static.
	* inferior.c (remove_inferior_command, add_inferior_command)
	(clone_inferior_command): Make static.
	* linux-nat.c (linux_nat_thread_address_space)
	(linux_nat_core_of_thread): Make static.
	* linux-tdep.c (_initialize_linux_tdep): Declare.
	* objc-lang.c (_initialize_objc_lang): Declare.
	* opencl-lang.c (builtin_opencl_type, opencl_language_arch_info):
	Make static.
	(_initialize_opencl_language): Declare.
	* record.c (_initialize_record): Declare.
	* remote.c (demand_private_info, remote_get_tib_address)
	(remote_supports_cond_tracepoints)
	(remote_supports_fast_tracepoints, remote_get_tracepoint_status):
	Make static.
	* skip.c (_initialize_step_skip): Declare.
	* symtab.c (skip_prologue_using_lineinfo): Make static.
	* tracepoint.c (delete_trace_state_variable)
	(trace_variable_command, delete_trace_variable_command)
	(get_uploaded_tsv, find_matching_tracepoint_location)
	(find_matching_tsv, create_tsv_from_upload, get_traceframe_info):
	Make static.
	* value.c (pack_unsigned_long): Make static.
	* varobj.c (varobj_ensure_python_env): Make static.
	* windows-tdep.c (_initialize_windows_tdep): Declare.
	* xml-syscall.c (make_cleanup_free_syscalls_info): Make static.
@
text
@d685 1
a685 1
struct displaced_step_closure *
@


1.86
log
@gdb/
	Fix disp-step-syscall.exp: fork: single step over fork.
	* i386-linux-tdep.c (-i386_linux_get_syscall_number): Rename to ...
	(i386_linux_get_syscall_number_from_regcache): ... here, new function
	comment, change parameters gdbarch and ptid to regcache.  Remove
	parameter regcache, initialize gdbarch from regcache here.
	(i386_linux_get_syscall_number, i386_linux_displaced_step_copy_insn):
	New functions.
	(i386_linux_init_abi): Install i386_linux_displaced_step_copy_insn
	instead.
	* i386-tdep.c (i386_syscall_p): Check also for 'sysenter' and
	'syscall'.  Make the 'int' check more strict.

gdb/testsuite/
	Fix disp-step-syscall.exp: fork: single step over fork.
	* gdb.base/disp-step-syscall.exp (syscall_insn): Anchor it by
	whitespaces.
	(single step over $syscall): Remove its check.
	(single step over $syscall final pc): New check.
@
text
@d462 1
a462 1
int
@


1.85
log
@gdb/
	Fix reverse mode for syscall on AMD CPUs in 32-bit mode.
	* i386-linux-tdep.c (i386_linux_intx80_sysenter_record): Rename to ...
	(i386_linux_intx80_sysenter_syscall_record): ... here.
	(i386_linux_init_abi): Initialize also I386_SYSCALL_RECORD.
	Use the renamed function name.
@
text
@d494 7
d502 1
a502 2
i386_linux_get_syscall_number (struct gdbarch *gdbarch,
                               ptid_t ptid)
d504 1
a504 1
  struct regcache *regcache = get_thread_regcache (ptid);
d521 12
d664 43
d955 1
a955 1
                                        i386_displaced_step_copy_insn);
@


1.84
log
@	* blockframe.c (find_pc_partial_function_gnu_ifunc): Change type of
	"name" parameter to const char ** from char **.  All callers updated.
	(find_pc_partial_function): Ditto.
	(cache_pc_function_name): Change type to const char * from char *.
	* symtab.h ((find_pc_partial_function_gnu_ifunc): Update.
	(find_pc_partial_function): Update.
	* alpha-tdep.h (struct gdbarch_tdep, member pc_in_sigtramp): Change
	type of "name" parameter to const char * from char *.
	All uses updated.
	* arch-utils.c (generic_in_solib_return_trampoline): Change
	type of "name" parameter to const char * from char *.
	* arch-utils.h (generic_in_solib_return_trampoline): Update.
	* frv-linux-tdep.c (frv_linux_pc_in_sigtramp): Change
	type of "name" parameter to const char * from char *.
	* gdbarch.sh (in_solib_return_trampoline): Ditto.
	* gdbarch.c: Regenerate.
	* gdbarch.h: Regenerate.
	* hppa-hpux-tdep.c (hppa_hpux_in_solib_return_trampoline): Update.
	* rs6000-tdep.c (rs6000_in_solib_return_trampoline): Update.
	* m32r-linux-tdep.c (m32r_linux_pc_in_sigtramp): Change
	type of "name" parameter to const char * from char *.
	* skip.c (skip_function_pc): Ditto.
	* sparc-sol2-tdep.c (sparc_sol2_pc_in_sigtramp): Ditto.
	* sparc-tdep.h (sparc_sol2_pc_in_sigtramp): Update.
	* sparc64fbsd-tdep.c (sparc64fbsd_pc_in_sigtramp): Ditto.
	* sparc64nbsd-tdep.c (sparc64nbsd_pc_in_sigtramp): Ditto.
	* sparc64obsd-tdep.c (sparc64obsd_pc_in_sigtramp): Ditto.
	* sparcnbsd-tdep.c (sparc32nbsd_pc_in_sigtramp): Ditto.
	* sparcobsd-tdep.c (sparc32obsd_pc_in_sigtramp): Ditto.
	* nbsd-tdep.c (nbsd_pc_in_sigtramp): Similary for "func_name".
	* nbsd-tdep.h (nbsd_pc_in_sigtramp): Update.
@
text
@d421 1
a421 1
i386_linux_intx80_sysenter_record (struct regcache *regcache)
d859 3
a861 2
  tdep->i386_intx80_record = i386_linux_intx80_sysenter_record;
  tdep->i386_sysenter_record = i386_linux_intx80_sysenter_record;
@


1.83
log
@Copyright year update in most files of the GDB Project.

gdb/ChangeLog:

        Copyright year update in most files of the GDB Project.
@
text
@d257 1
a257 1
  char *name;
d282 1
a282 1
  char *name;
@


1.82
log
@2011-01-08  Michael Snyder  <msnyder@@vmware.com>

	* h8300-tdep.c: Comment cleanup, mostly periods and spaces.
	* hppa-hpux-tdep.c: Ditto.
	* hppa-linux-nat.c: Ditto.
	* hppa-linux-tdep.c: Ditto.
	* hppanbsd-tdep.c: Ditto.
	* hppa-tdep.c: Ditto.
	* hppa-tdep.h: Ditto.
	* hpux-thread.c: Ditto.
	* i386-cygwin-tdep.c: Ditto.
	* i386-darwin-nat.c: Ditto.
	* i386gnu-nat.c: Ditto.
	* i386-linux-nat.c: Ditto.
	* i386-linux-tdep.c: Ditto.
	* i386-nat.c: Ditto.
	* i386-nat.h: Ditto.
	* i386nbsd-tdep.c: Ditto.
	* i386-sol2-nat.c: Ditto.
	* i386-stub.c: Ditto.
	* i386-tdep.c: Ditto.
	* i386-tdep.h: Ditto.
	* i387-tdep.c: Ditto.
	* ia64-linux-nat.c: Ditto.
	* ia64-linux-tdep.c: Ditto.
	* ia64-tdep.c: Ditto.
	* infcall.c: Ditto.
	* infcall.h: Ditto.
	* infcmd.c: Ditto.
	* inferior.c: Ditto.
	* inferior.h: Ditto.
	* infloop.c: Ditto.
	* inflow.c: Ditto.
	* infrun.c: Ditto.
	* interps.c: Ditto.
	* interps.h: Ditto.
	* iq2000-tdep.c: Ditto.
	* irix5-nat.c: Ditto.
	* jit.c: Ditto.
	* jit.h: Ditto.
	* jv-exp.y: Ditto.
	* jv-lang.c: Ditto.
	* jv-lang.h: Ditto.
	* jv-typeprint.c: Ditto.
	* jv-valprint.c: Ditto.
	* language.c: Ditto.
	* language.h: Ditto.
	* linespec.c: Ditto.
	* linux-fork.c: Ditto.
	* linux-nat.c: Ditto.
	* linux-thread-db.c: Ditto.
	* lm32-tdep.c: Ditto.
@
text
@d3 1
a3 2
   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008, 2009, 2010,
   2011 Free Software Foundation, Inc.
@


1.82.4.1
log
@Copyright year update in most files of the GDB Project.

gdb/ChangeLog:

        Copyright year update in most files of the GDB Project.
@
text
@d3 2
a4 1
   Copyright (C) 2000-2005, 2007-2012 Free Software Foundation, Inc.
@


1.81
log
@run copyright.sh for 2011.
@
text
@d606 2
a607 1
	      warning (_("Couldn't read `xcr0' bytes from `.reg-xstate' section in core file."));
d864 1
a864 1
     to be relocated. */
d918 1
a918 1
  /* Initialize the Linux target description  */
@


1.80
log
@	* corelow.c (core_pid_to_str): Default to using normal_pid_to_str
	instead of printing "Thread" here.
	* linux-tdep.c: Include inferior.h.
	(linux_core_pid_to_str): New.
	(linux_init_abi): New.
	* linux-tdep.h (linux_init_abi): Declare.
	* alpha-linux-tdep.c: Include linux-tdep.h.
	(alpha_linux_init_abi): Call linux_init_abi.
	* amd64-linux-tdep.c (amd64_linux_init_abi): Call linux_init_abi.
	* arm-linux-tdep.c (arm_linux_init_abi): Call linux_init_abi.
	* frv-linux-tdep.c: Include linux-tdep.h
	(frv_linux_init_abi): Call linux_init_abi.
	* hppa-linux-tdep.c: Include linux-tdep.h
	(hppa_linux_init_abi): Call linux_init_abi.
	* i386-linux-tdep.c (i386_linux_init_abi): Call linux_init_abi.
	* ia64-linux-tdep.c: Include linux-tdep.h.
	(ia64_linux_init_abi): Call linux_init_abi.
	* m32r-linux-tdep.c: Include linux-tdep.h.
	(m32r_linux_init_abi): Call linux_init_abi.
	* m68klinux-tdep.c: Include linux-tdep.h.
	(m68k_linux_init_abi): Call linux_init_abi.
	* microblaze-linux-tdep.c: Include linux-tdep.h.
	(microblaze_linux_init_abi): Call linux_init_abi.
	* mips-linux-tdep.c: Include linux-tdep.h.
	(mips_linux_init_abi): Call linux_init_abi.
	* mn10300-linux-tdep.c: Include linux-tdep.h.
	(am33_linux_init_osabi): Call linux_init_abi.  Rename the
	'gdbinfo' parameter to 'info'.
	* ppc-linux-tdep.c: Include linux-tdep.h.
	(ppc_linux_init_abi): Call linux_init_abi.
	* sh-linux-tdep.c: Include linux-tdep.h.
	(sh_linux_init_abi): Call linux_init_abi.
	* sparc-linux-tdep.c: Include linux-tdep.h.
	(sparc32_linux_init_abi): Call linux_init_abi.
	* sparc64-linux-tdep.c: Include linux-tdep.h.
	(sparc64_linux_init_abi): Call linux_init_abi.
	* xtensa-linux-tdep.c: Include linux-tdep.h.
	(xtensa_linux_init_abi): Call linux_init_abi.
	* i386-cygwin-tdep.c (i386_windows_core_pid_to_str): New.
	(i386_cygwin_init_abi): Install it as gdbarch_core_pid_to_str
	callback.
@
text
@d3 2
a4 2
   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008, 2009, 2010
   Free Software Foundation, Inc.
@


1.79
log
@	* i386-tdep.h (i386_displaced_step_copy_insn): Declare.
	* i386-tdep.c (i386_displaced_step_copy_insn): New function.
	(i386_syscall_p): Change type of lengthp to int.
	(i386_displaced_step_fixup): Handle kernels that run one past a
	syscall insn.
	* i386-linux-tdep.c (i386_linux_init_abi): Use
	i386_displaced_step_copy_insn instead of
	simple_displaced_step_copy_insn.
@
text
@d657 2
@


1.78
log
@Remove regmap from i386-linux-nat.c.

2010-04-22  H.J. Lu  <hongjiu.lu@@intel.com>

	* i386-linux-nat.c (regmap): Removed.
	(fetch_register): Replace regmap with
	i386_linux_gregset_reg_offset.
	(store_register): Likewise.
	(supply_gregset): Likewise.
	(fill_gregset): Likewise.

	* i386-linux-tdep.c (i386_linux_gregset_reg_offset): Make it
	global.

	* i386-linux-tdep.h (i386_linux_gregset_reg_offset): New.
@
text
@d891 1
a891 1
                                        simple_displaced_step_copy_insn);
@


1.77
log
@Properly read i386 coredump.

2010-04-21  H.J. Lu  <hongjiu.lu@@intel.com>

	PR corefiles/11523
	* amd64-linux-tdep.c (amd64_linux_core_read_description): Check
	XCR0 first.

	* i386-linux-tdep.c (i386_linux_core_read_xcr0): Return 0 if
	there is no .reg-xstate section.
	(i386_linux_core_read_description): Check XCR0 first.
@
text
@d532 1
a532 1
static int i386_linux_gregset_reg_offset[] =
@


1.76
log
@* i386-linux-tdep.c (i386_linux_regset_sections): Size of the
general-purpose register set should be 68 instead of 144.
(i386_linux_sse_regset_sections): Likewise.
(i386_linux_avx_regset_sections): Likewise.
@
text
@d614 1
a614 1
    xcr0 = I386_XSTATE_SSE_MASK;
d626 13
a638 2
  asection *section = bfd_get_section_by_name (abfd, ".reg2");
  uint64_t xcr0;
d640 3
a642 5
  if (section == NULL)
    return NULL;

  section = bfd_get_section_by_name (abfd, ".reg-xfp");
  if (section == NULL)
a643 7

  /* Linux/i386.  */
  xcr0 = i386_linux_core_read_xcr0 (gdbarch, target, abfd);
  if ((xcr0 & I386_XSTATE_AVX_MASK) == I386_XSTATE_AVX_MASK)
    return tdesc_i386_avx_linux;
  else
    return tdesc_i386_linux;
@


1.75
log
@* i386-linux-tdep.c (i386_linux_regset_sections): Remove extended
register note sections.
(i386_linux_sse_regset_sections, i386_linux_avx_regset_sections):
New variables.
(i386_linux_init_abi): Install list of supported register note
sections that matches the target description.
@
text
@d59 1
a59 1
  { ".reg", 144, "general-purpose" },
d66 1
a66 1
  { ".reg", 144, "general-purpose" },
d73 1
a73 1
  { ".reg", 144, "general-purpose" },
@


1.74
log
@Support i386 without SSE.

gdb/

2010-04-08  H.J. Lu  <hongjiu.lu@@intel.com>

	* i386-linux-nat.c (have_ptrace_getfpxregs): Initialize to -1
	if HAVE_PTRACE_GETFPXREGS is defined.
	(i386_linux_read_description): Set have_ptrace_getfpxregs and
	have_ptrace_getregset to 0 if ptrace PTRACE_GETFPXREGS failed.

	* i386-linux-tdep.c: Include "features/i386/i386-mmx-linux.c"
	(i386_linux_core_read_description): Return tdesc_i386_mmx_linux
	if .reg-xfp section doesn't exist.
	(_initialize_i386_linux_tdep): Call initialize_tdesc_i386_mmx_linux.

	* i386-linux-tdep.h (tdesc_i386_mmx_linux): New.

	* i386-tdep.c: Include "features/i386/i386-mmx.c".
	(i386_go32_init_abi): Set tdesc to tdesc_i386_mmx.
	(i386_validate_tdesc_p): Make org.gnu.gdb.i386.sse optional.  Set
	xcr0 to I386_XSTATE_X87_MASK if SSE isn't available.
	(i386_gdbarch_init): Update comments.
	(_initialize_i386_tdep): Call initialize_tdesc_i386_mmx.

	* common/i386-xstate.h (I386_XSTATE_X87_MASK): New.

	* config/djgpp/fnchange.lst: Add i386 MMX XML files.

	* features/Makefile (i386/i386-mmx-expedite): New.
	(i386/i386-mmx-linux-expedite): Likewise.
	($(outdir)/i386/i386-mmx.dat): Likewise.
	($(outdir)/i386/i386-mmx-linux.dat): Likewise.

	* features/i386/i386-mmx-linux.c: New.
	* features/i386/i386-mmx-linux.xml: Likewise.
	* features/i386/i386-mmx.c: Likewise.
	* features/i386/i386-mmx.xml: Likewise.
	* regformats/i386/i386-mmx-linux.dat: Likewise.
	* regformats/i386/i386-mmx.dat: Likewise.

	* features/Makefile (WHICH): Add i386/i386-mmx and
	i386/i386-mmx-linux.

gdb/doc/

2010-04-08  H.J. Lu  <hongjiu.lu@@intel.com>

	* gdb.texinfo (i386 Features): Make org.gnu.gdb.i386.avx
	optional.  Make org.gnu.gdb.i386.avx requires
	org.gnu.gdb.i386.avx.

gdb/gdbserver/

2010-04-08  H.J. Lu  <hongjiu.lu@@intel.com>

	* Makefile.in (clean): Also remove i386-mmx.c i386-mmx-linux.c.
	(i386-mmx.o): New.
	(i386-mmx.c): Likewise.
	(i386-mmx-linux.o): Likewise.
	(i386-mmx-linux.c): Likewise.

	* configure.srv (srv_i386_regobj): Add i386-mmx.o.
	(srv_i386_linux_regobj): Add i386-mmx-linux.o.
	(srv_i386_xmlfiles): Add i386/i386-mmx.xml.
	(srv_i386_linux_xmlfiles): Add i386/i386-mmx-linux.xml.

	* linux-x86-low.c (init_registers_i386_mmx_linux): New.
	(x86_linux_update_xmltarget): Call init_registers_i386_mmx_linux
	and return if ptrace PTRACE_GETFPXREGS failed in 32bit.
@
text
@d61 6
d68 6
d877 6
a882 1
  set_gdbarch_core_regset_sections (gdbarch, i386_linux_regset_sections);
@


1.73
log
@Support i386 AVX.

2010-04-07  H.J. Lu  <hongjiu.lu@@intel.com>

	* i386-linux-nat.c: Include "regset.h", "elf/common.h",
	<sys/uio.h> and "i386-xstate.h".
	(PTRACE_GETREGSET): New.
	(PTRACE_SETREGSET): Likewise.
	(fetch_xstateregs): Likewise.
	(store_xstateregs): Likewise.
	(GETXSTATEREGS_SUPPLIES): Likewise.
	(regmap): Include 8 upper YMM registers.
	(i386_linux_fetch_inferior_registers): Support XSAVE extended
	state.
	(i386_linux_store_inferior_registers): Likewise.
	(i386_linux_read_description): Check and enable AVX target
	descriptions.

	* i386-linux-tdep.c: Include "regset.h", "i387-tdep.h",
	"i386-xstate.h" and "features/i386/i386-avx-linux.c".
	(i386_linux_regset_sections): Add ".reg-xstate".
	(i386_linux_gregset_reg_offset): Include 8 upper YMM registers.
	(i386_linux_core_read_xcr0): New.
	(i386_linux_core_read_description): Check and enable AVX target
	description.
	(i386_linux_init_abi): Set xsave_xcr0_offset.
	(_initialize_i386_linux_tdep): Call
	initialize_tdesc_i386_avx_linux.

	* i386-linux-tdep.h (I386_LINUX_ORIG_EAX_REGNUM): Replace
	I386_SSE_NUM_REGS with I386_AVX_NUM_REGS.
	(i386_linux_core_read_xcr0): New.
	(tdesc_i386_avx_linux): Likewise.
	(I386_LINUX_XSAVE_XCR0_OFFSET): Likewise.

	* i386-tdep.c: Include "i386-xstate.h" and
	"features/i386/i386-avx.c".
	(i386_ymm_names): New.
	(i386_ymmh_names): Likewise.
	(i386_ymmh_regnum_p): Likewise.
	(i386_ymm_regnum_p): Likewise.
	(i386_xmm_regnum_p): Likewise.
	(i386_register_name): Likewise.
	(i386_ymm_type): Likewise.
	(i386_supply_xstateregset): Likewise.
	(i386_collect_xstateregset): Likewise.
	(i386_sse_regnum_p): Removed.
	(i386_pseudo_register_name): Support pseudo YMM registers.
	(i386_pseudo_register_type): Likewise.
	(i386_pseudo_register_read): Likewise.
	(i386_pseudo_register_write): Likewise.
	(i386_dbx_reg_to_regnum): Return %ymmN register number for
	%xmmN if AVX is available.
	(i386_regset_from_core_section): Support .reg-xstate section.
	(i386_register_reggroup_p): Supper upper YMM and YMM registers.
	(i386_process_record): Replace i386_sse_regnum_p with
	i386_xmm_regnum_p.
	(i386_validate_tdesc_p): Support org.gnu.gdb.i386.avx feature.
	Set ymmh_register_names, num_ymm_regs, ymm0h_regnum and xcr0.
	(i386_gdbarch_init): Set xstateregset.  Set xsave_xcr0_offset.
	Call set_gdbarch_register_name.  Replace I386_SSE_NUM_REGS with
	I386_AVX_NUM_REGS.  Set ymmh_register_names, ymm0h_regnum and
	num_ymm_regs.  Add num_ymm_regs to set_gdbarch_num_pseudo_regs.
	Set ymm0_regnum.
	(_initialize_i386_tdep): Call initialize_tdesc_i386_avx.

	* i386-tdep.h (gdbarch_tdep): Add xstateregset, ymm0_regnum,
	xcr0, xsave_xcr0_offset, ymm0h_regnum, ymmh_register_names and
	i386_ymm_type.
	(i386_regnum): Add I386_YMM0H_REGNUM, and I386_YMM7H_REGNUM.
	(I386_AVX_NUM_REGS): New.
	(i386_xmm_regnum_p): Likewise.
	(i386_ymm_regnum_p): Likewise.
	(i386_ymmh_regnum_p): Likewise.

	* common/i386-xstate.h: New.
@
text
@d53 1
d620 4
d898 1
@


1.72
log
@Enable XML target descriptions for x86.

gdb/

2010-03-01  H.J. Lu  <hongjiu.lu@@intel.com>

	* amd64-linux-nat.c (AMD64_LINUX_USER64_CS): New.
	(amd64_linux_read_description): Likewise.
	(_initialize_amd64_linux_nat): Set to_read_description to
	amd64_linux_read_description.

	* amd64-linux-tdep.c: Include "features/i386/amd64-linux.c".
	(amd64_linux_register_name): Removed.
	(amd64_linux_register_type): Likewise.
	(amd64_linux_core_read_description): New.
	(amd64_linux_init_abi): Set target description to
	tdesc_amd64_linux if needed.  Support orig_rax in target
	description.  Don't call set_gdbarch_register_name nor
	set_gdbarch_register_type.  Call
	set_gdbarch_core_read_description.
	(_initialize_amd64_linux_tdep): Call
	initialize_tdesc_amd64_linux.

	* amd64-linux-tdep.h (tdesc_amd64_linux): New.

	* amd64-tdep.c:  Include "features/i386/amd64.c".
	(amd64_register_names): Removed.
	(amd64_register_name): Likewise.
	(amd64_register_type): Likewise.
	(amd64_init_abi):  Set num_core_regs and register_names.  Set
	target description to tdesc_amd64 if needed.  Don't call
	set_gdbarch_register_name nor set_gdbarch_register_type.
	(_initialize_amd64_tdep): New.

	* i386-linux-nat.c (i386_linux_read_description): New.
	(_initialize_i386_linux_nat): Set to_read_description to
	i386_linux_read_description.

	* i386-linux-tdep.c: Include "features/i386/i386-linux.c".
	(i386_linux_register_name): Removed.
	(i386_linux_core_read_description): New.
	(i386_linux_read_description): Likewise.
	(i386_linux_init_abi): Don't call set_gdbarch_register_name.
	Set target description to tdesc_i386_linux if needed.  Support
	orig_eax.  Set register_reggroup_p.  Call
	set_gdbarch_core_read_description.
	(_initialize_i386_linux_tdep): Call initialize_tdesc_i386_linux.

	* i386-linux-tdep.h (tdesc_i386_linux): New.

	* i386-nto-tdep.c (i386nto_regset_id): Replace I386_NUM_FREGS
	with I387_NUM_REGS.

	* i386-tdep.c: Include "features/i386/i386.c".
	(i386_register_names): Make it const.
	(i386_mmx_names): Likewise.
	(i386_num_register_names): Removed.
	(i386_register_name): Likewise.
	(i386_eflags_type): Likewise.
	(i386_mxcsr_type): Likewise.
	(i386_sse_type): Likewise.
	(i386_register_type): Likewise.
	(i387_ext_type): Call tdesc_find_type instead of arch_float_type.
	(i386_pseudo_register_name): New.
	(i386_pseudo_register_type): Likewise.
	(i386_mmx_type): Make it static.
	(i386_gdbarch_init): Check arch.  Replace I386_NUM_FREGS with
	I387_NUM_REGS.  Set num_core_regs and register_names.  Don't
	call set_gdbarch_register_name nor set_gdbarch_register_type.
	Set register_reggroup_p.  Set target description to tdesc_i386
	if needed.  Call set_tdesc_pseudo_register_type,
	set_tdesc_pseudo_register_name and tdesc_use_registers.
	(_initialize_i386_tdep): Call initialize_tdesc_i386.
	initialize_tdesc_x86_64.

	* i386-tdep.h (gdbarch_tdep): Remove i386_eflags_type,
	i386_mxcsr_type and i386_sse_type.  Add num_core_regs,
	register_names, tdesc and register_reggroup_p.
	(I386_NUM_FREGS): Removed.
	(i386_eflags_type): Likewise.
	(i386_mxcsr_type): Likewise.
	(i386_mmx_type): Likewise.
	(i386_sse_type): Likewise.
	(i386_register_name): Likewise.
	(i386_regnum): Add I386_MXCSR_REGNUM.
	(I386_SSE_NUM_REGS): Defined with I386_MXCSR_REGNUM.

	* i387-tdep.h (I387_NUM_REGS): New.

	* regformats/i386/i386-linux.dat: Generated.
	* regformats/i386/i386.dat: Likewise.
	* regformats/i386/amd64-linux.dat: Likewise.
	* regformats/i386/amd64.dat: Likewise.

	* regformats/reg-i386-linux.dat: Removed.
	* regformats/reg-i386.dat: Likewise.
	* regformats/reg-x86-64-linux.dat: Likewise.
	* regformats/reg-x86-64.dat: Likewise.

gdb/gdbserver/

2010-03-01  H.J. Lu  <hongjiu.lu@@intel.com>

	* Makefile.in (clean): Replace reg-i386.c, reg-x86-64.c,
	reg-i386-linux.c and reg-x86-64-linux.c with i386.c, amd64.c,
	i386-linux.c and amd64-linux.c.
	(reg-i386.o): Removed.
	(reg-i386.c): Likewise.
	(reg-i386-linux.o): Likewise.
	(reg-i386-linux.c): Likewise.
	(reg-x86-64.o): Likewise.
	(reg-x86-64.c): Likewise.
	(reg-x86-64-linux.o): Likewise.
	(reg-x86-64-linux.c): Likewise.
	(i386.o): New.
	(i386.c): Likewise.
	(i386-linux.o): Likewise.
	(i386-linux.c): Likewise.
	(amd64.o): Likewise.
	(amd64.c): Likewise.
	(amd64-linux.o): Likewise.
	(amd64-linux.c): Likewise.

	* configure.srv (srv_i386_regobj): New.
	(srv_i386_linux_regobj): Likewise.
	(srv_amd64_regobj): Likewise.
	(srv_amd64_linux_regobj): Likewise.
	(srv_i386_32bit_xmlfiles): Likewise.
	(srv_i386_64bit_xmlfiles): Likewise.
	(srv_i386_xmlfiles): Likewise.
	(srv_amd64_xmlfiles): Likewise.
	(srv_i386_linux_xmlfiles): Likewise.
	(srv_amd64_linux_xmlfiles): Likewise.
	(i[34567]86-*-cygwin*): Set srv_regobj to $srv_i386_regobj.  Set
	srv_xmlfiles to $srv_i386_xmlfiles.
	(i[34567]86-*-mingw32ce*): Likewise.
	(i[34567]86-*-mingw*): Likewise.
	(i[34567]86-*-nto*): Likewise.
	(i[34567]86-*-linux*): Set srv_regobj to $srv_i386_linux_regobj
	and $srv_amd64_linux_regobj.  Set srv_xmlfiles to
	$srv_i386_linux_xmlfiles and $srv_amd64_linux_xmlfiles.
	(x86_64-*-linux*): Likewise.

	* linux-x86-low.c (init_registers_x86_64_linux): Removed.
	(init_registers_amd64_linux): New.
	(x86_arch_setup): Replace init_registers_x86_64_linux with
	init_registers_amd64_linux.

gdb/testsuite/

2010-03-01  H.J. Lu  <hongjiu.lu@@intel.com>

	* gdb.xml/tdesc-regs.exp (architecture): New.  Set it for x86.
	(load_description): Set architecture if defined.
@
text
@d26 1
a39 1
#include "regset.h"
d42 3
d53 1
d61 1
d541 1
d569 37
d614 1
d620 5
a624 1
  return tdesc_i386_linux;
d674 2
d893 1
@


1.71
log
@	* regset.h (struct core_regset_section): Add HUMAN_NAME.
	* i386-linux-tdep.c (i386_linux_regset_sections): Fill in HUMAN_NAME.
	* ppc-linux-tdep.c (ppc_linux_vsx_regset_sections): Likewise.
	(ppc_linux_vmx_regset_sections): Likewise.
	(ppc_linux_fp_regset_sections): Likewise.

	* corelow.c (get_core_register_section): Constify arguments.
	(get_core_registers): Use gdbarch_core_regset_sections instead
	of hard-coded platform-specific register section names.
@
text
@d49 2
a59 12
/* Return the name of register REG.  */

static const char *
i386_linux_register_name (struct gdbarch *gdbarch, int reg)
{
  /* Deal with the extra "orig_eax" pseudo register.  */
  if (reg == I386_LINUX_ORIG_EAX_REGNUM)
    return "orig_eax";

  return i386_register_name (gdbarch, reg);
}

d563 16
d583 6
d593 16
a608 2
  /* Since we have the extra "orig_eax" register on GNU/Linux, we have
     to adjust a few things.  */
d610 1
d612 2
a613 3
  set_gdbarch_num_regs (gdbarch, I386_LINUX_NUM_REGS);
  set_gdbarch_register_name (gdbarch, i386_linux_register_name);
  set_gdbarch_register_reggroup_p (gdbarch, i386_linux_register_reggroup_p);
d812 3
d840 3
@


1.70
log
@Update copyright year in most headers.

Automatic update by copyright.sh.
@
text
@d52 3
a54 3
  { ".reg", 144 },
  { ".reg2", 108 },
  { ".reg-xfp", 512 },
@


1.69
log
@2009-09-21  Hui Zhu  <teawater@@gmail.com>
	    Michael Snyder  <msnyder@@vmware.com>

	* i386-linux-tdep.c (i386_all_but_ip_registers_record): New
	function.
	(i386_linux_intx80_sysenter_record): Call
	i386_all_but_ip_registers_record if syscall is sys_sigreturn
	or sys_rt_sigreturn.
	(I386_LINUX_xstate, I386_LINUX_frame_size): New macros.
	(i386_linux_record_signal): New function.
	(i386_linux_init_abi): Call set_gdbarch_process_record_signal.
@
text
@d3 1
a3 1
   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008, 2009
@


1.68
log
@Implementing catch syscall.

* amd64-linux-tdep.c: Include xml-syscall.h header, define the XML
syscall name for the architecture.
(amd64_linux_get_syscall_number): New function.
(amd64_linux_init_abi): Register the correct functions for syscall
catchpoint; set the correct syscall file name.
* breakpoint.c: New include: xml-syscall.h.
(set_raw_breakpoint_without_location): Setting the parameters
for the catch syscall feature.
(insert_catch_syscall): New.
(remove_catch_syscall): New.
(breakpoint_hit_catch_syscall): New.
(print_it_catch_syscall): New.
(print_one_catch_syscall): New.
(print_mention_catch_syscall): New.
(catch_syscall_breakpoint_ops): New.
(syscall_catchpoint_p): New.
(create_catchpoint_without_mention): New.
(create_catchpoint): Modified in order to use
create_catchpoint_without_mention.
(create_syscall_event_catchpoint): New.
(clean_up_filters): New.
(catch_syscall_split_args): New.
(catch_syscall_command_1): New.
(delete_breakpoint): Add cleanup for catch syscall.
(is_syscall_catchpoint_enabled): New.
(catch_syscall_enabled): New.
(catching_syscall_number): New.
(catch_syscall_completer): New completer function.
(add_catch_command): Add the completer function for catchpoints.
* breakpoint.h (syscalls_to_be_caught): New vector.
(catch_syscall_enabled): New.
(catching_syscall_number): New.
* gdbarch.c: Regenerated.
* gdbarch.h: Regenerated.
* gdbarch.sh: Add syscall catchpoint functions and structures.
(get_syscall_number): New.
(UNKNOWN_SYSCALL): New definition.
* i386-linux-nat.c (i386_linux_resume): Select the proper request
to be made for ptrace() considering if we are catching syscalls
or not.
* i386-linux-tdep.c: Include xml-syscall.h header, define the XML
syscall name for the architecture.
(i386_linux_get_syscall_number): New.
(i386_linux_init_abi): Register the correct functions for syscall
catchpoint; set the correct syscall file name.
* inf-child.c (inf_child_set_syscall_catchpoint): New.
(inf_child_target): Assign default values to target_ops.
* inf-ptrace.c (inf_ptrace_resume): Select the proper request
to be made for ptrace() considering if we are catching syscalls
or not.
* inferior.h (struct inferior): Included new variables
any_syscall_count, syscalls_counts and total_syscalls_count,
used to keep track of requested syscall catchpoints.
* infrun.c (resume): Add syscall catchpoint.
(deal_with_syscall_event): New.
(handle_inferior_event): Add syscall entry/return events.
(inferior_has_called_syscall): New.
* linux-nat.c: Define some helpful variables to track wether we have
support for the needed ptrace option.
(linux_test_for_tracesysgood): New.
(linux_supports_tracesysgood): New.
(linux_enable_tracesysgood): New.
(linux_enable_event_reporting): Save the current used ptrace
options.
(linux_child_post_attach): Calling linux_enable_tracesysgood.
(linux_child_post_startup_inferior): Likewise.
(linux_child_set_syscall_catchpoint): New function.
(linux_handle_extended_wait): Handle the case which the inferior stops
because it has called or returned from a syscall.
(linux_target_install_ops): Install the necessary functions to handle
syscall catchpoints.
* linux-nat.h (struct lwp_info): Include syscall_state into the
structure, which indicates if we are in a syscall entry or return.
* ppc-linux-tdep.c: Include xml-syscall.h header, define the XML
syscall filename for the arch.
(ppc_linux_get_syscall_number): New.
(ppc_linux_init_abi): Register the correct functions for syscall
catchpoint; setting the correct name for the XML syscall file.
* target.c (update_current_target): Update/copy functions related to
syscall catchpoint.
(target_waitstatus_to_string): Add syscall catchpoint entry/return
events.
* target.h (struct target_waitstatus): Add syscall number.
(struct syscall): New struct to hold information about syscalls
in the system.
(struct target_ops): Add ops for syscall catchpoint.
(inferior_has_called_syscall): New.
(target_set_syscall_catchpoint): New.
* xml-support.c (xml_fetch_content_from_file): New function,
transferred from xml-tdesc.c.
* xml-support.h (xml_fetch_content_from_file): New.
* xml-tdesc.c (fetch_xml_from_file): Function removed;
transferred to xml-support.c.
(file_read_description_xml): Updated to use the new
xml_fetch_content_from_file function.
* syscalls/gdb-syscalls.dtd: New definition file for syscall's XML
support.
* syscalls/amd64-linux.xml: New file containing information about
syscalls for GNU/Linux systems that use amd64 architecture.
* syscalls/i386-linux.xml: New file containing information about
syscalls for GNU/Linux systems that use i386 architecture.
* syscalls/ppc-linux.xml: New file containing information about
syscalls for GNU/Linux systems that use PPC architecture.
* syscalls/ppc64-linux.xml: New file containing information about
syscalls for GNU/Linux systems that use PPC64 architecture.
* xml-syscall.c: New file containing functions for manipulating
syscall's XML files.
* xml-syscall.h: New file, exporting the functions above mentioned.
* Makefile.in: Support for relocatable GDB datadir and XML
syscall.
* NEWS: Added information about the catch syscall feature.
* doc/gdb.texinfo (Set Catchpoints): Documentation about the new
feature.
* testsuite/Makefile.in: Inclusion of catch-syscall object.
* testsuite/gdb.base/catch-syscall.c: New file.
* testsuite/gdb.base/catch-syscall.exp: New file.
@
text
@d361 26
a386 1
static struct linux_record_tdep i386_linux_record_tdep;
d411 2
d432 8
d451 34
d601 1
@


1.68.2.1
log
@2009-09-21  Hui Zhu  <teawater@@gmail.com>
	    Michael Snyder  <msnyder@@vmware.com>

	* amd64-linux-tdep.c (amd64_all_but_ip_registers_record): New
	function.
	(amd64_linux_syscall_record): Call
	amd64_all_but_ip_registers_record if syscall is
	sys_rt_sigreturn.
	(AMD64_LINUX_redzone, AMD64_LINUX_xstate,
	AMD64_LINUX_frame_size): New macros.
	(amd64_linux_record_signal): New function.
	(amd64_linux_init_abi): Call set_gdbarch_process_record_signal.

2009-09-21  Hui Zhu  <teawater@@gmail.com>
	    Michael Snyder  <msnyder@@vmware.com>

	* i386-linux-tdep.c (i386_all_but_ip_registers_record): New
	function.
	(i386_linux_intx80_sysenter_record): Call
	i386_all_but_ip_registers_record if syscall is sys_sigreturn
	or sys_rt_sigreturn.
	(I386_LINUX_xstate, I386_LINUX_frame_size): New macros.
	(i386_linux_record_signal): New function.
	(i386_linux_init_abi): Call set_gdbarch_process_record_signal.

2009-09-21  Hui Zhu  <teawater@@gmail.com>
	    Michael Snyder  <msnyder@@vmware.com>

	* record.c (record_end_entry): New struct.
	(record_type): Add end.
	(record_arch_list_add_end): Set rec->u.end.sigval to
	TARGET_SIGNAL_0.
	(record_message_args): New struct.
	(record_message): Call gdbarch_process_record_signal.
	(do_record_message): Add argument "signal".
	(record_resume): Ditto.
	(record_wait): Ditto.  Check record_list->u.end.sigval
	in replay mode.

2009-09-21  Hui Zhu  <teawater@@gmail.com>
	    Michael Snyder  <msnyder@@vmware.com>

	* gdbarch.sh (process_record_signal): New interface.
@
text
@d361 1
a361 26
/* Record all registers but IP register for process-record.  */

static int
i386_all_but_ip_registers_record (struct regcache *regcache)
{
  if (record_arch_list_add_reg (regcache, I386_EAX_REGNUM))
    return -1;
  if (record_arch_list_add_reg (regcache, I386_ECX_REGNUM))
    return -1;
  if (record_arch_list_add_reg (regcache, I386_EDX_REGNUM))
    return -1;
  if (record_arch_list_add_reg (regcache, I386_EBX_REGNUM))
    return -1;
  if (record_arch_list_add_reg (regcache, I386_ESP_REGNUM))
    return -1;
  if (record_arch_list_add_reg (regcache, I386_EBP_REGNUM))
    return -1;
  if (record_arch_list_add_reg (regcache, I386_ESI_REGNUM))
    return -1;
  if (record_arch_list_add_reg (regcache, I386_EDI_REGNUM))
    return -1;
  if (record_arch_list_add_reg (regcache, I386_EFLAGS_REGNUM))
    return -1;

  return 0;
}
a385 2
static struct linux_record_tdep i386_linux_record_tdep;

a404 8
  if (syscall_gdb == gdb_sys_sigreturn
      || syscall_gdb == gdb_sys_rt_sigreturn)
   {
     if (i386_all_but_ip_registers_record (regcache))
       return -1;
     return 0;
   }

a415 34

#define I386_LINUX_xstate	270
#define I386_LINUX_frame_size	732

int
i386_linux_record_signal (struct gdbarch *gdbarch,
                          struct regcache *regcache,
                          enum target_signal signal)
{
  ULONGEST esp;

  if (i386_all_but_ip_registers_record (regcache))
    return -1;

  if (record_arch_list_add_reg (regcache, I386_EIP_REGNUM))
    return -1;

  /* Record the change in the stack.  */
  regcache_raw_read_unsigned (regcache, I386_ESP_REGNUM, &esp);
  /* This is for xstate.
     sp -= sizeof (struct _fpstate);  */
  esp -= I386_LINUX_xstate;
  /* This is for frame_size.
     sp -= sizeof (struct rt_sigframe);  */
  esp -= I386_LINUX_frame_size;
  if (record_arch_list_add_mem (esp,
                                I386_LINUX_xstate + I386_LINUX_frame_size))
    return -1;

  if (record_arch_list_add_end ())
    return -1;

  return 0;
}
a531 1
  set_gdbarch_process_record_signal (gdbarch, i386_linux_record_signal);
@


1.67
log
@2009-09-08  Michael Snyder  <msnyder@@vmware.com>

	* amd64-linux-tdep.h (enum amd64_syscall): New enum consts,
	to replace literal consts used in amd64-linux-tdep.c
	* linux-record.h (enum gdb_syscall): New enum consts, to replace
	literal consts used in amd64-linux-tdep.c and linux-record.c.
	* amd64-linux-tdep.c (amd64_canonicalize_syscall): New function,
	translate from native amd64 Linux syscall id to internal gdb id.
	(amd64_linux_syscall_record): Switch statement abstracted out
	and replaced with a call to amd64_canonicalize_syscall.
	* linux-record.c (record_linux_system_call): Replace literal
	consts with enum consts.
	* i386-linux-tdep.c (i386_canonicalize_syscall): New function,
	trivially translate from native i386 Linux syscalls to gdb syscalls.
	(i386_linux_intx80_sysenter_record):
@
text
@d40 4
d418 21
d725 5
@


1.66
log
@2009-08-10  Hui Zhu  <teawater@@gmail.com>

	Add process record Linux system call 64 bits support.

        * linux-record.h (linux_record_tdep): Add size_pointer,
        size_size_t, size_iovec and arg6.  Change the values of
	size_int, size_long and size_ulong to
	gdbarch_int_bit (gdbarch) / TARGET_CHAR_BIT,
	gdbarch_long_bit (gdbarch) / TARGET_CHAR_BIT,
	gdbarch_long_bit (gdbarch) / TARGET_CHAR_BIT.
	* i386-linux-tdep.c (i386_linux_init_abi): Ditto.
	(i386_linux_intx80_sysenter_record): Add a check for system
	call number.
        * linux-record.c (record_linux_system_call): Make this
        function support 64 bits.
@
text
@d357 18
a381 2
static struct linux_record_tdep i386_linux_record_tdep;

d386 4
a389 1
  uint32_t tmpu32;
d391 1
a391 1
  regcache_raw_read (regcache, I386_EAX_REGNUM, (gdb_byte *) &tmpu32);
d393 1
a393 1
  if (tmpu32 > 499)
d396 2
a397 1
                           "support syscall number %u\n"), tmpu32);
d401 1
a401 1
  ret = record_linux_system_call (tmpu32, regcache,
@


1.65
log
@	* defs.h (extract_signed_integer, extract_unsigned_integer,
	extract_long_unsigned_integer, store_signed_integer,
	store_unsigned_integer): Add BYTE_ORDER parameter.
	* findvar.c (extract_signed_integer, extract_unsigned_integer,
	extract_long_unsigned_integer, store_signed_integer,
	store_unsigned_integer): Add BYTE_ORDER parameter.  Use it
	instead of current_gdbarch.

	* gdbcore.h (read_memory_integer, safe_read_memory_integer,
	read_memory_unsigned_integer, write_memory_signed_integer,
	write_memory_unsigned_integer): Add BYTE_ORDER parameter.
	* corefile.c (struct captured_read_memory_integer_arguments): Add
	BYTE_ORDER member.
	(safe_read_memory_integer): Add BYTE_ORDER parameter.  Store it into
	struct captured_read_memory_integer_arguments.
	(do_captured_read_memory_integer): Pass it to read_memory_integer.
	(read_memory_integer): Add BYTE_ORDER parameter.  Pass it to
	extract_signed_integer.
	(read_memory_unsigned_integer): Add BYTE_ORDER parameter.  Pass it to
	extract_unsigned_integer.
	(write_memory_signed_integer): Add BYTE_ORDER parameter.  Pass it
	to store_signed_integer.
	(write_memory_unsigned_integer): Add BYTE_ORDER parameter.  Pass it
	to store_unsigned_integer.

	* target.h (get_target_memory_unsigned): Add BYTE_ORDER parameter.
	* target.c (get_target_memory_unsigned): Add BYTE_ORDER parameter.
	Pass it to extract_unsigned_integer.


	Update calls to extract_signed_integer, extract_unsigned_integer,
	extract_long_unsigned_integer, store_signed_integer,
	store_unsigned_integer, read_memory_integer,
	read_memory_unsigned_integer, safe_read_memory_integer,
	write_memory_signed_integer, write_memory_unsigned_integer, and
	get_target_memory_unsigned to pass byte order:
	* ada-lang.c (ada_value_binop): Update.
	* ada-valprint.c (char_at): Update.
	* alpha-osf1-tdep.c (alpha_osf1_sigcontext_addr): Update.
	* alpha-tdep.c (alpha_lds, alpha_sts, alpha_push_dummy_call,
	alpha_extract_return_value, alpha_read_insn,
	alpha_get_longjmp_target): Update.
	* amd64-linux-tdep.c (amd64_linux_sigcontext_addr): Update.
	* amd64obsd-tdep.c (amd64obsd_supply_uthread,
	amd64obsd_collect_uthread, amd64obsd_trapframe_cache): Update.
	* amd64-tdep.c (amd64_push_dummy_call, amd64_analyze_prologue,
	amd64_frame_cache, amd64_sigtramp_frame_cache, fixup_riprel,
	amd64_displaced_step_fixup): Update.
	* arm-linux-tdep.c (arm_linux_sigreturn_init,
	arm_linux_rt_sigreturn_init, arm_linux_supply_gregset): Update.
	* arm-tdep.c (thumb_analyze_prologue, arm_skip_prologue,
	arm_scan_prologue, arm_push_dummy_call, thumb_get_next_pc,
	arm_get_next_pc, arm_extract_return_value, arm_store_return_value,
	arm_return_value): Update.
	* arm-wince-tdep.c (arm_pe_skip_trampoline_code): Update.
	* auxv.c (default_auxv_parse): Update.
	* avr-tdep.c (avr_address_to_pointer, avr_pointer_to_address,
	avr_scan_prologue, avr_extract_return_value,
	avr_frame_prev_register, avr_push_dummy_call): Update.
	* bsd-uthread.c (bsd_uthread_check_magic, bsd_uthread_lookup_offset,
	bsd_uthread_wait, bsd_uthread_thread_alive,
	bsd_uthread_extra_thread_info): Update.
	* c-lang.c (c_printstr, print_wchar): Update.
	* cp-valprint.c (cp_print_class_member): Update.
	* cris-tdep.c (cris_sigcontext_addr, cris_sigtramp_frame_unwind_cache,
	cris_push_dummy_call, cris_scan_prologue, cris_store_return_value,
	cris_extract_return_value, find_step_target, dip_prefix,
	sixteen_bit_offset_branch_op, none_reg_mode_jump_op,
	move_mem_to_reg_movem_op, get_data_from_address): Update.
	* dwarf2expr.c (dwarf2_read_address, execute_stack_op): Update.
	* dwarf2-frame.c (execute_cfa_program): Update.
	* dwarf2loc.c (find_location_expression): Update.
	* dwarf2read.c (dwarf2_const_value): Update.
	* expprint.c (print_subexp_standard): Update.
	* findvar.c (unsigned_pointer_to_address, signed_pointer_to_address,
	unsigned_address_to_pointer, address_to_signed_pointer,
	read_var_value): Update.
	* frame.c (frame_unwind_register_signed,
	frame_unwind_register_unsigned, get_frame_memory_signed,
	get_frame_memory_unsigned): Update.
	* frame-unwind.c (frame_unwind_got_constant): Update.
	* frv-linux-tdep.c (frv_linux_pc_in_sigtramp,
	frv_linux_sigcontext_reg_addr, frv_linux_sigtramp_frame_cache):
	Update.
	* frv-tdep.c (frv_analyze_prologue, frv_skip_main_prologue,
	frv_extract_return_value, find_func_descr,
	frv_convert_from_func_ptr_addr, frv_push_dummy_call): Update.
	* f-valprint.c (f_val_print): Update.
	* gnu-v3-abi.c (gnuv3_decode_method_ptr, gnuv3_make_method_ptr):
	Update.
	* h8300-tdep.c (h8300_is_argument_spill, h8300_analyze_prologue,
	h8300_push_dummy_call, h8300_extract_return_value,
	h8300h_extract_return_value, h8300_store_return_value,
	h8300h_store_return_value): Update.
	* hppabsd-tdep.c (hppabsd_find_global_pointer): Update.
	* hppa-hpux-nat.c (hppa_hpux_fetch_register, hppa_hpux_store_register):
	Update.
	* hppa-hpux-tdep.c (hppa32_hpux_in_solib_call_trampoline,
	hppa64_hpux_in_solib_call_trampoline,
	hppa_hpux_in_solib_return_trampoline, hppa_hpux_skip_trampoline_code,
	hppa_hpux_sigtramp_frame_unwind_cache,
	hppa_hpux_sigtramp_unwind_sniffer, hppa32_hpux_find_global_pointer,
	hppa64_hpux_find_global_pointer, hppa_hpux_search_pattern,
	hppa32_hpux_search_dummy_call_sequence,
	hppa64_hpux_search_dummy_call_sequence, hppa_hpux_supply_save_state,
	hppa_hpux_unwind_adjust_stub): Update.
	* hppa-linux-tdep.c (insns_match_pattern,
	hppa_linux_find_global_pointer): Update.
	* hppa-tdep.c (hppa_in_function_epilogue_p, hppa32_push_dummy_call,
	hppa64_convert_code_addr_to_fptr, hppa64_push_dummy_call,
	skip_prologue_hard_way, hppa_frame_cache, hppa_fallback_frame_cache,
	hppa_pseudo_register_read, hppa_frame_prev_register_helper,
	hppa_match_insns): Update.
	* hpux-thread.c (hpux_thread_fetch_registers): Update.
	* i386-tdep.c (i386bsd_sigcontext_addr): Update.
	* i386-cygwin-tdep.c (core_process_module_section): Update.
	* i386-darwin-nat.c (i386_darwin_sstep_at_sigreturn,
	amd64_darwin_sstep_at_sigreturn): Update.
	* i386-darwin-tdep.c (i386_darwin_sigcontext_addr,
	amd64_darwin_sigcontext_addr): Likewise.
	* i386-linux-nat.c (i386_linux_sigcontext_addr): Update.
	* i386nbsd-tdep.c (i386nbsd_sigtramp_cache_init): Update.
	* i386-nto-tdep.c (i386nto_sigcontext_addr): Update.
	* i386obsd-nat.c (i386obsd_supply_pcb): Update.
	* i386obsd-tdep.c (i386obsd_supply_uthread, i386obsd_collect_uthread,
	i386obsd_trapframe_cache): Update.
	* i386-tdep.c (i386_displaced_step_fixup, i386_follow_jump,
	i386_analyze_frame_setup, i386_analyze_prologue,
	i386_skip_main_prologue, i386_frame_cache, i386_sigtramp_frame_cache,
	i386_get_longjmp_target, i386_push_dummy_call,
	i386_pe_skip_trampoline_code, i386_svr4_sigcontext_addr,
	i386_fetch_pointer_argument): Update.
	* i387-tdep.c (i387_supply_fsave): Update.
	* ia64-linux-tdep.c (ia64_linux_sigcontext_register_address): Update.
	* ia64-tdep.c (ia64_pseudo_register_read, ia64_pseudo_register_write,
	examine_prologue, ia64_frame_cache, ia64_frame_prev_register,
	ia64_sigtramp_frame_cache, ia64_sigtramp_frame_prev_register,
	ia64_access_reg, ia64_access_rse_reg, ia64_libunwind_frame_this_id,
	ia64_libunwind_frame_prev_register,
	ia64_libunwind_sigtramp_frame_this_id,
	ia64_libunwind_sigtramp_frame_prev_register, ia64_find_global_pointer,
	find_extant_func_descr, find_func_descr,
	ia64_convert_from_func_ptr_addr, ia64_push_dummy_call, ia64_dummy_id,
	ia64_unwind_pc): Update.
	* iq2000-tdep.c (iq2000_pointer_to_address, iq2000_address_to_pointer,
	iq2000_scan_prologue, iq2000_extract_return_value,
	iq2000_push_dummy_call): Update.
	* irix5nat.c (fill_gregset): Update.
	* jv-lang.c (evaluate_subexp_java): Update.
	* jv-valprint.c (java_value_print): Update.
	* lm32-tdep.c (lm32_analyze_prologue, lm32_push_dummy_call,
	lm32_extract_return_value, lm32_store_return_value): Update.
	* m32c-tdep.c (m32c_push_dummy_call, m32c_return_value,
	m32c_skip_trampoline_code, m32c_m16c_address_to_pointer,
	m32c_m16c_pointer_to_address): Update.
	* m32r-tdep.c (m32r_store_return_value, decode_prologue,
	m32r_skip_prologue, m32r_push_dummy_call, m32r_extract_return_value):
	Update.
	* m68hc11-tdep.c (m68hc11_pseudo_register_read,
	m68hc11_pseudo_register_write, m68hc11_analyze_instruction,
	m68hc11_push_dummy_call): Update.
	* m68linux-tdep.c (m68k_linux_pc_in_sigtramp,
	m68k_linux_get_sigtramp_info, m68k_linux_sigtramp_frame_cache):
	Update.
	* m68k-tdep.c (m68k_push_dummy_call, m68k_analyze_frame_setup,
	m68k_analyze_register_saves, m68k_analyze_prologue, m68k_frame_cache,
	m68k_get_longjmp_target): Update.
	* m88k-tdep.c (m88k_fetch_instruction): Update.
	* mep-tdep.c (mep_pseudo_cr32_read, mep_pseudo_csr_write,
	mep_pseudo_cr32_write, mep_get_insn, mep_push_dummy_call): Update.
	* mi/mi-main.c (mi_cmd_data_write_memory): Update.
	* mips-linux-tdep.c (mips_linux_get_longjmp_target, supply_32bit_reg,
	mips64_linux_get_longjmp_target, mips64_fill_gregset,
	mips64_fill_fpregset, mips_linux_in_dynsym_stub): Update.
	* mipsnbdsd-tdep.c (mipsnbsd_get_longjmp_target): Update.
	* mips-tdep.c (mips_fetch_instruction, fetch_mips_16,
	mips_eabi_push_dummy_call, mips_n32n64_push_dummy_call,
	mips_o32_push_dummy_call, mips_o64_push_dummy_call,
	mips_single_step_through_delay, mips_skip_pic_trampoline_code,
	mips_integer_to_address): Update.
	* mn10300-tdep.c (mn10300_analyze_prologue, mn10300_push_dummy_call):
	Update.
	* monitor.c (monitor_supply_register, monitor_write_memory,
	monitor_read_memory_single): Update.
	* moxie-tdep.c (moxie_store_return_value, moxie_extract_return_value,
	moxie_analyze_prologue): Update.
	* mt-tdep.c (mt_return_value, mt_skip_prologue, mt_select_coprocessor,
	mt_pseudo_register_read, mt_pseudo_register_write, mt_registers_info,
	mt_push_dummy_call): Update.
	* objc-lang.c (read_objc_method, read_objc_methlist_nmethods,
	read_objc_methlist_method, read_objc_object, read_objc_super,
	read_objc_class, find_implementation_from_class): Update.
	* ppc64-linux-tdep.c (ppc64_desc_entry_point,
	ppc64_linux_convert_from_func_ptr_addr, ppc_linux_sigtramp_cache):
	Update.
	* ppcobsd-tdep.c (ppcobsd_sigtramp_frame_sniffer,
	ppcobsd_sigtramp_frame_cache): Update.
	* ppc-sysv-tdep.c (ppc_sysv_abi_push_dummy_call,
	do_ppc_sysv_return_value, ppc64_sysv_abi_push_dummy_call,
	ppc64_sysv_abi_return_value): Update.
	* ppc-linux-nat.c (ppc_linux_auxv_parse): Update.
	* procfs.c (procfs_auxv_parse): Update.
	* p-valprint.c (pascal_val_print): Update.
	* regcache.c (regcache_raw_read_signed, regcache_raw_read_unsigned,
	regcache_raw_write_signed, regcache_raw_write_unsigned,
	regcache_cooked_read_signed, regcache_cooked_read_unsigned,
	regcache_cooked_write_signed, regcache_cooked_write_unsigned): Update.
	* remote-m32r-sdi.c (m32r_fetch_register): Update.
	* remote-mips.c (mips_wait, mips_fetch_registers, mips_xfer_memory):
	Update.
	* rs6000-aix-tdep.c (rs6000_push_dummy_call, rs6000_return_value,
	rs6000_convert_from_func_ptr_addr, branch_dest,
	rs6000_software_single_step): Update.
	* rs6000-tdep.c (rs6000_in_function_epilogue_p,
	ppc_displaced_step_fixup, ppc_deal_with_atomic_sequence,
	bl_to_blrl_insn_p, rs6000_fetch_instruction, skip_prologue,
	rs6000_skip_main_prologue, rs6000_skip_trampoline_code,
	rs6000_frame_cache): Update.
	* s390-tdep.c (s390_pseudo_register_read, s390_pseudo_register_write,
	s390x_pseudo_register_read, s390x_pseudo_register_write, s390_load,
	s390_backchain_frame_unwind_cache, s390_sigtramp_frame_unwind_cache,
	extend_simple_arg, s390_push_dummy_call, s390_return_value): Update.
	* scm-exp.c (scm_lreadr): Update.
	* scm-lang.c (scm_get_field, scm_unpack): Update.
	* scm-valprint.c (scm_val_print): Update.
	* score-tdep.c (score_breakpoint_from_pc, score_push_dummy_call,
	score_fetch_inst): Update.
	* sh64-tdep.c (look_for_args_moves, sh64_skip_prologue_hard_way,
	sh64_analyze_prologue, sh64_push_dummy_call, sh64_extract_return_value,
	sh64_pseudo_register_read, sh64_pseudo_register_write,
	sh64_frame_prev_register): Update:
	* sh-tdep.c (sh_analyze_prologue, sh_push_dummy_call_fpu,
	sh_push_dummy_call_nofpu, sh_extract_return_value_nofpu,
	sh_store_return_value_nofpu, sh_in_function_epilogue_p): Update.
	* solib-darwin.c (darwin_load_image_infos): Update.
	* solib-frv.c (fetch_loadmap, lm_base, frv_current_sos, enable_break2,
	find_canonical_descriptor_in_load_object): Update.
	* solib-irix.c (extract_mips_address, fetch_lm_info, irix_current_sos,
	irix_open_symbol_file_object): Update.
	* solib-som.c (som_solib_create_inferior_hook, link_map_start,
	som_current_sos, som_open_symbol_file_object): Update.
	* solib-sunos.c (SOLIB_EXTRACT_ADDRESS, LM_ADDR, LM_NEXT, LM_NAME):
	Update.
	* solib-svr4.c (read_program_header, scan_dyntag_auxv,
	solib_svr4_r_ldsomap): Update.
	* sparc64-linux-tdep.c (sparc64_linux_step_trap): Update.
	* sparc64obsd-tdep.c (sparc64obsd_supply_uthread,
	sparc64obsd_collect_uthread): Update.
	* sparc64-tdep.c (sparc64_pseudo_register_read,
	sparc64_pseudo_register_write, sparc64_supply_gregset,
	sparc64_collect_gregset): Update.
	* sparc-linux-tdep.c (sparc32_linux_step_trap): Update.
	* sparcobsd-tdep.c (sparc32obsd_supply_uthread,
	sparc32obsd_collect_uthread): Update.
	* sparc-tdep.c (sparc_fetch_wcookie, sparc32_push_dummy_code,
	sparc32_store_arguments, sparc32_return_value, sparc_supply_rwindow,
	sparc_collect_rwindow): Update.
	* spu-linux-nat.c (parse_spufs_run): Update.
	* spu-tdep.c (spu_pseudo_register_read_spu,
	spu_pseudo_register_write_spu, spu_pointer_to_address,
	spu_analyze_prologue, spu_in_function_epilogue_p,
	spu_frame_unwind_cache, spu_push_dummy_call, spu_software_single_step,
	spu_get_longjmp_target, spu_get_overlay_table, spu_overlay_update_osect,
	info_spu_signal_command, info_spu_mailbox_list, info_spu_dma_cmdlist,
	info_spu_dma_command, info_spu_proxydma_command): Update.
	* stack.c (print_frame_nameless_args, frame_info): Update.
	* symfile.c (read_target_long_array, simple_read_overlay_table,
	simple_read_overlay_region_table): Update.
	* target.c (debug_print_register): Update.
	* tramp-frame.c (tramp_frame_start): Update.
	* v850-tdep.c (v850_analyze_prologue, v850_push_dummy_call,
	v850_extract_return_value, v850_store_return_value,
	* valarith.c (value_binop, value_bit_index): Update.
	* valops.c (value_cast): Update.
	* valprint.c (val_print_type_code_int, val_print_string,
	read_string): Update.
	* value.c (unpack_long, unpack_double, unpack_field_as_long,
	modify_field, pack_long): Update.
	* vax-tdep.c (vax_store_arguments, vax_push_dummy_call,
	vax_skip_prologue): Update.
	* xstormy16-tdep.c (xstormy16_push_dummy_call,
	xstormy16_analyze_prologue, xstormy16_in_function_epilogue_p,
	xstormy16_resolve_jmp_table_entry, xstormy16_find_jmp_table_entry,
	xstormy16_pointer_to_address, xstormy16_address_to_pointer): Update.
	* xtensa-tdep.c (extract_call_winsize, xtensa_pseudo_register_read,
	xtensa_pseudo_register_write, xtensa_frame_cache,
	xtensa_push_dummy_call, call0_track_op, call0_frame_cache): Update.


	* dfp.h (decimal_to_string, decimal_from_string, decimal_from_integral,
	decimal_from_floating, decimal_to_doublest, decimal_is_zero): Add
	BYTE_ORDER parameter.
	(decimal_binop): Add BYTE_ORDER_X, BYTE_ORDER_Y, and BYTE_ORDER_RESULT
	parameters.
	(decimal_compare): Add BYTE_ORDER_X and BYTE_ORDER_Y parameters.
	(decimal_convert): Add BYTE_ORDER_FROM and BYTE_ORDER_TO parameters.
	* dfp.c (match_endianness): Add BYTE_ORDER parameter.  Use it
	instead of current_gdbarch.
	(decimal_to_string, decimal_from_integral, decimal_from_floating,
	decimal_to_doublest, decimal_is_zero): Add BYTE_ORDER parameter.
	Pass it to match_endianness.
	(decimal_binop): Add BYTE_ORDER_X, BYTE_ORDER_Y, and BYTE_ORDER_RESULT
	parameters.  Pass them to match_endianness.
	(decimal_compare): Add BYTE_ORDER_X and BYTE_ORDER_Y parameters.
	Pass them to match_endianness.
	(decimal_convert): Add BYTE_ORDER_FROM and BYTE_ORDER_TO parameters.
	Pass them to match_endianness.
	* valarith.c (value_args_as_decimal): Add BYTE_ORDER_X and
	BYTE_ORDER_Y output parameters.
	(value_binop): Update call to value_args_as_decimal.

	Update calls to decimal_to_string, decimal_from_string,
	decimal_from_integral, decimal_from_floating, decimal_to_doublest,
	decimal_is_zero, decimal_binop, decimal_compare and decimal_convert
	to pass/receive byte order:
	* c-exp.y (parse_number): Update.
	* printcmd.c (printf_command): Update.
	* valarith.c (value_args_as_decimal, value_binop, value_logical_not,
	value_equal, value_less): Update.
	* valops.c (value_cast, value_one): Update.
	* valprint.c (print_decimal_floating): Update.
	* value.c (unpack_long, unpack_double): Update.
	* python/python-value.c (valpy_nonzero): Update.


	* ada-valprint.c (char_at): Add BYTE_ORDER parameter.
	(printstr): Update calls to char_at.
	(ada_val_print_array): Likewise.
	* valprint.c (read_string): Add BYTE_ORDER parameter.
	(val_print_string): Update call to read_string.
	* c-lang.c (c_get_string): Likewise.
	* charset.h (target_wide_charset): Add BYTE_ORDER parameter.
	* charset.c (target_wide_charset): Add BYTE_ORDER parameter.
	Use it instead of current_gdbarch.
	* printcmd.c (printf_command): Update calls to target_wide_charset.
	* c-lang.c (charset_for_string_type): Add BYTE_ORDER parameter.
	Pass to target_wide_charset.  Use it instead of current_gdbarch.
	(classify_type): Add BYTE_ORDER parameter.  Pass to
	charset_for_string_type.  Allow NULL encoding pointer.
	(print_wchar): Add BYTE_ORDER parameter.
	(c_emit_char): Update calls to classify_type and print_wchar.
	(c_printchar, c_printstr): Likewise.


	* gdbarch.sh (in_solib_return_trampoline): Convert to type "m".
	* gdbarch.c, gdbarch.h: Regenerate.
	* arch-utils.h (generic_in_solib_return_trampoline): Add GDBARCH
	parameter.
	* arch-utils.c (generic_in_solib_return_trampoline): Likewise.
	* hppa-hpux-tdep.c (hppa_hpux_in_solib_return_trampoline): Likewise.
	* rs6000-tdep.c (rs6000_in_solib_return_trampoline): Likewise.
	(rs6000_skip_trampoline_code): Update call.

	* alpha-tdep.h (struct gdbarch_tdep): Add GDBARCH parameter to
	dynamic_sigtramp_offset and pc_in_sigtramp callbacks.
	(alpha_read_insn): Add GDBARCH parameter.
	* alpha-tdep.c (alpha_lds, alpha_sts): Add GDBARCH parameter.
	(alpha_register_to_value): Pass architecture to alpha_sts.
	(alpha_extract_return_value): Likewise.
	(alpha_value_to_register): Pass architecture to alpha_lds.
	(alpha_store_return_value): Likewise.
	(alpha_read_insn): Add GDBARCH parameter.
	(alpha_skip_prologue): Pass architecture to alpha_read_insn.
	(alpha_heuristic_proc_start): Likewise.
	(alpha_heuristic_frame_unwind_cache): Likewise.
	(alpha_next_pc): Likewise.
	(alpha_sigtramp_frame_this_id): Pass architecture to
	tdep->dynamic_sigtramp_offset callback.
	(alpha_sigtramp_frame_sniffer): Pass architecture to
	tdep->pc_in_sigtramp callback.
	* alphafbsd-tdep.c (alphafbsd_pc_in_sigtramp): Add GDBARCH parameter.
	(alphafbsd_sigtramp_offset): Likewise.
	* alpha-linux-tdep.c (alpha_linux_sigtramp_offset_1): Add GDBARCH
	parameter.  Pass to alpha_read_insn.
	(alpha_linux_sigtramp_offset): Add GDBARCH parameter.  Pass to
	alpha_linux_sigtramp_offset_1.
	(alpha_linux_pc_in_sigtramp): Add GDBARCH parameter.  Pass to
	alpha_linux_sigtramp_offset.
	(alpha_linux_sigcontext_addr): Pass architecture to alpha_read_insn
	and alpha_linux_sigtramp_offset.
	* alphanbsd-tdep.c (alphanbsd_sigtramp_offset): Add GDBARCH parameter.
	(alphanbsd_pc_in_sigtramp): Add GDBARCH parameter.  Pass to
	alphanbsd_sigtramp_offset.
	* alphaobsd-tdep.c (alphaobsd_sigtramp_offset): Add GDBARCH parameter.
	(alphaobsd_pc_in_sigtramp): Add GDBARCH parameter.  Pass to
	alpha_read_insn.
	(alphaobsd_sigcontext_addr): Pass architecture to
	alphaobsd_sigtramp_offset.
	* alpha-osf1-tdep.c (alpha_osf1_pc_in_sigtramp): Add GDBARCH
	parameter.

	* amd64-tdep.c (amd64_analyze_prologue): Add GDBARCH parameter.
	(amd64_skip_prologue): Pass architecture to amd64_analyze_prologue.
	(amd64_frame_cache): Likewise.

	* arm-tdep.c (SWAP_SHORT, SWAP_INT): Remove.
	(thumb_analyze_prologue, arm_skip_prologue, arm_scan_prologue,
	thumb_get_next_pc, arm_get_next_pc): Do not use SWAP_ macros.
	* arm-wince-tdep.c: Include "frame.h".

	* avr-tdep.c (EXTRACT_INSN): Remove.
	(avr_scan_prologue): Add GDBARCH argument, inline EXTRACT_INSN.
	(avr_skip_prologue): Pass architecture to avr_scan_prologue.
	(avr_frame_unwind_cache): Likewise.

	* cris-tdep.c (struct instruction_environment): Add BYTE_ORDER member.
	(find_step_target): Initialize it.
	(get_data_from_address): Add BYTE_ORDER parameter.
	(bdap_prefix): Pass byte order to get_data_from_address.
	(handle_prefix_assign_mode_for_aritm_op): Likewise.
	(three_operand_add_sub_cmp_and_or_op): Likewise.
	(handle_inc_and_index_mode_for_aritm_op): Likewise.

	* frv-linux-tdep.c (frv_linux_pc_in_sigtramp): Add GDBARCH parameter.
	(frv_linux_sigcontext_reg_addr): Pass architecture to
	frv_linux_pc_in_sigtramp.
	(frv_linux_sigtramp_frame_sniffer): Likewise.

	* h8300-tdep.c (h8300_is_argument_spill): Add GDBARCH parameter.
	(h8300_analyze_prologue): Add GDBARCH parameter.  Pass to
	h8300_is_argument_spill.
	(h8300_frame_cache, h8300_skip_prologue): Pass architecture
	to h8300_analyze_prologue.

	* hppa-tdep.h (struct gdbarch_tdep): Add GDBARCH parameter to
	in_solib_call_trampoline callback.
	(hppa_in_solib_call_trampoline): Add GDBARCH parameter.
	* hppa-tdep.c (hppa64_convert_code_addr_to_fptr): Add GDBARCH
	parameter.
	(hppa64_push_dummy_call): Pass architecture to
	hppa64_convert_code_addr_to_fptr.
	(hppa_match_insns): Add GDBARCH parameter.
	(hppa_match_insns_relaxed): Add GDBARCH parameter.  Pass to
	hppa_match_insns.
	(hppa_skip_trampoline_code): Pass architecture to hppa_match_insns.
	(hppa_in_solib_call_trampoline): Add GDBARCH parameter.  Pass to
	hppa_match_insns_relaxed.
	(hppa_stub_unwind_sniffer): Pass architecture to
	tdep->in_solib_call_trampoline callback.
	* hppa-hpux-tdep.c (hppa_hpux_search_pattern): Add GDBARCH parameter.
	(hppa32_hpux_search_dummy_call_sequence): Pass architecture to
	hppa_hpux_search_pattern.
	* hppa-linux-tdep.c (insns_match_pattern): Add GDBARCH parameter.
	(hppa_linux_sigtramp_find_sigcontext): Add GDBARCH parameter.
	Pass to insns_match_pattern.
	(hppa_linux_sigtramp_frame_unwind_cache): Pass architecture to
	hppa_linux_sigtramp_find_sigcontext.
	(hppa_linux_sigtramp_frame_sniffer): Likewise.
	(hppa32_hpux_in_solib_call_trampoline): Add GDBARCH parameter.
	(hppa64_hpux_in_solib_call_trampoline): Likewise.

	* i386-tdep.c (i386_follow_jump): Add GDBARCH parameter.
	(i386_analyze_frame_setup): Add GDBARCH parameter.
	(i386_analyze_prologue): Add GDBARCH parameter.  Pass to
	i386_follow_jump and i386_analyze_frame_setup.
	(i386_skip_prologue): Pass architecture to i386_analyze_prologue
	and i386_follow_jump.
	(i386_frame_cache): Pass architecture to i386_analyze_prologue.
	(i386_pe_skip_trampoline_code): Add FRAME parameter.
	* i386-tdep.h (i386_pe_skip_trampoline_code): Add FRAME parameter.
	* i386-cygwin-tdep.c (i386_cygwin_skip_trampoline_code): Pass
	frame to i386_pe_skip_trampoline_code.

	* ia64-tdep.h (struct gdbarch_tdep): Add GDBARCH parameter
	to sigcontext_register_address callback.
	* ia64-tdep.c (ia64_find_global_pointer): Add GDBARCH parameter.
	(ia64_find_unwind_table): Pass architecture to
	ia64_find_global_pointer.
	(find_extant_func_descr): Add GDBARCH parameter.
	(find_func_descr): Pass architecture to find_extant_func_descr
	and ia64_find_global_pointer.
	(ia64_sigtramp_frame_init_saved_regs): Pass architecture to
	tdep->sigcontext_register_address callback.
	* ia64-linux-tdep.c (ia64_linux_sigcontext_register_address): Add
	GDBARCH parameter.

	* iq2000-tdep.c (iq2000_scan_prologue): Add GDBARCH parameter.
	(iq2000_frame_cache): Pass architecture to iq2000_scan_prologue.

	* lm32-tdep.c (lm32_analyze_prologue): Add GDBARCH parameter.
	(lm32_skip_prologue, lm32_frame_cache): Pass architecture to
	lm32_analyze_prologue.

	* m32r-tdep.c (decode_prologue): Add GDBARCH parameter.
	(m32r_skip_prologue): Pass architecture to decode_prologue.

	* m68hc11-tdep.c (m68hc11_analyze_instruction): Add GDBARCH parameter.
	(m68hc11_scan_prologue): Pass architecture to
	m68hc11_analyze_instruction.

	* m68k-tdep.c (m68k_analyze_frame_setup): Add GDBARCH parameter.
	(m68k_analyze_prologue): Pass architecture to
	m68k_analyze_frame_setup.

	* m88k-tdep.c (m88k_fetch_instruction): Add BYTE_ORDER parameter.
	(m88k_analyze_prologue): Add GDBARCH parameter.  Pass byte order
	to m88k_fetch_instruction.
	(m88k_skip_prologue): Pass architecture to m88k_analyze_prologue.
	(m88k_frame_cache): Likewise.

	* mep-tdep.c (mep_get_insn): Add GDBARCH parameter.
	(mep_analyze_prologue): Pass architecture to mep_get_insn.

	* mips-tdep.c (mips_fetch_instruction): Add GDBARCH parameter.
	(mips32_next_pc): Pass architecture to mips_fetch_instruction.
	(deal_with_atomic_sequence): Likewise.
	(unpack_mips16): Add GDBARCH parameter, pass to mips_fetch_instruction.
	(mips16_scan_prologue): Likewise.
	(mips32_scan_prologue): Likewise.
	(mips16_in_function_epilogue_p): Likewise.
	(mips32_in_function_epilogue_p): Likewise.
	(mips_about_to_return): Likewise.
	(mips_insn16_frame_cache): Pass architecture to mips16_scan_prologue.
	(mips_insn32_frame_cache): Pass architecture to mips32_scan_prologue.
	(mips_skip_prologue): Pass architecture to mips16_scan_prologue
	and mips32_scan_prologue.
	(mips_in_function_epilogue_p): Pass architecture to
	mips16_in_function_epilogue_p and
	mips32_in_function_epilogue_p.
	(heuristic_proc_start): Pass architecture to mips_fetch_instruction
	and mips_about_to_return.
	(mips_skip_mips16_trampoline_code): Pass architecture to
	mips_fetch_instruction.
	(fetch_mips_16): Add GDBARCH parameter.
	(mips16_next_pc): Pass architecture to fetch_mips_16.
	(extended_mips16_next_pc): Pass architecture to unpack_mips16 and
	fetch_mips_16.

	* objc-lang.c (read_objc_method, read_objc_methlist_nmethods,
	read_objc_methlist_method, read_objc_object, read_objc_super,
	read_objc_class): Add GDBARCH parameter.
	(find_implementation_from_class): Add GDBARCH parameter, pass
	to read_objc_class, read_objc_methlist_nmethods, and
	read_objc_methlist_method.
	(find_implementation): Add GDBARCH parameter, pass to
	read_objc_object and find_implementation_from_class.
	(resolve_msgsend, resolve_msgsend_stret): Pass architecture
	to find_implementation.
	(resolve_msgsend_super, resolve_msgsend_super_stret): Pass
	architecture to read_objc_super and find_implementation_from_class.

	* ppc64-linux-tdep.c (ppc64_desc_entry_point): Add GDBARCH parameter.
	(ppc64_standard_linkage1_target, ppc64_standard_linkage2_target,
	ppc64_standard_linkage3_target): Pass architecture to
	ppc64_desc_entry_point.
	* rs6000-tdep.c (bl_to_blrl_insn_p): Add BYTE_ORDER parameter.
	(skip_prologue): Pass byte order to bl_to_blrl_insn_p.
	(rs6000_fetch_instruction): Add GDBARCH parameter.
	(rs6000_skip_stack_check): Add GDBARCH parameter, pass to
	rs6000_fetch_instruction.
	(skip_prologue): Pass architecture to rs6000_fetch_instruction.

	* remote-mips.c (mips_store_word): Return old_contents as host
	integer value instead of target bytes.

	* s390-tdep.c (struct s390_prologue_data): Add BYTE_ORDER member.
	(s390_analyze_prologue): Initialize it.
	(extend_simple_arg): Add GDBARCH parameter.
	(s390_push_dummy_call): Pass architecture to extend_simple_arg.

	* scm-lang.c (scm_get_field): Add BYTE_ORDER parameter.
	* scm-lang.h (scm_get_field): Add BYTE_ORDER parameter.
	(SCM_CAR, SCM_CDR): Pass SCM_BYTE_ORDER to scm_get_field.
	* scm-valprint.c (scm_scmval_print): Likewise.
	(scm_scmlist_print, scm_ipruk, scm_scmval_print): Define
	SCM_BYTE_ORDER.

	* sh64-tdep.c (look_for_args_moves): Add GDBARCH parameter.
	(sh64_skip_prologue_hard_way): Add GDBARCH parameter, pass to
	look_for_args_moves.
	(sh64_skip_prologue): Pass architecture to
	sh64_skip_prologue_hard_way.
	* sh-tdep.c (sh_analyze_prologue): Add GDBARCH parameter.
	(sh_skip_prologue): Pass architecture to sh_analyze_prologue.
	(sh_frame_cache): Likewise.

	* solib-irix.c (extract_mips_address): Add GDBARCH parameter.
	(fetch_lm_info, irix_current_sos, irix_open_symbol_file_object):
	Pass architecture to extract_mips_address.

	* sparc-tdep.h (sparc_fetch_wcookie): Add GDBARCH parameter.
	* sparc-tdep.c (sparc_fetch_wcookie): Add GDBARCH parameter.
	(sparc_supply_rwindow, sparc_collect_rwindow): Pass architecture
	to sparc_fetch_wcookie.
	(sparc32_frame_prev_register): Likewise.
	* sparc64-tdep.c (sparc64_frame_prev_register): Likewise.
	* sparc32nbsd-tdep.c (sparc32nbsd_sigcontext_saved_regs): Likewise.
	* sparc64nbsd-tdep.c (sparc64nbsd_sigcontext_saved_regs): Likewise.

	* spu-tdep.c (spu_analyze_prologue): Add GDBARCH parameter.
	(spu_skip_prologue): Pass architecture to spu_analyze_prologue.
	(spu_virtual_frame_pointer): Likewise.
	(spu_frame_unwind_cache): Likewise.
	(info_spu_mailbox_list): Add BYTE_ORER parameter.
	(info_spu_mailbox_command): Pass byte order to info_spu_mailbox_list.
	(info_spu_dma_cmdlist): Add BYTE_ORER parameter.
	(info_spu_dma_command, info_spu_proxydma_command): Pass byte order
	to info_spu_dma_cmdlist.

	* symfile.c (read_target_long_array): Add GDBARCH parameter.
	(simple_read_overlay_table, simple_read_overlay_region_table,
	simple_overlay_update_1): Pass architecture to read_target_long_array.

	* v850-tdep.c (v850_analyze_prologue): Add GDBARCH parameter.
	(v850_frame_cache): Pass architecture to v850_analyze_prologue.

	* xstormy16-tdep.c (xstormy16_analyze_prologue): Add GDBARCH
	parameter.
	(xstormy16_skip_prologue, xstormy16_frame_cache): Pass architecture
	to xstormy16_analyze_prologue.
	(xstormy16_resolve_jmp_table_entry): Add GDBARCH parameter.
	(xstormy16_find_jmp_table_entry): Likewise.
	(xstormy16_skip_trampoline_code): Pass architecture to
	xstormy16_resolve_jmp_table_entry.
	(xstormy16_pointer_to_address): Likewise.
	(xstormy16_address_to_pointer): Pass architecture to
	xstormy16_find_jmp_table_entry.

	* xtensa-tdep.c (call0_track_op): Add GDBARCH parameter.
	(call0_analyze_prologue): Add GDBARCH parameter, pass to
	call0_track_op.
	(call0_frame_cache): Pass architecture to call0_analyze_prologue.
	(xtensa_skip_prologue): Likewise.
@
text
@d372 8
a379 1
  regcache_raw_read (regcache, I386_EAX_REGNUM, (gdb_byte *)&tmpu32);
d491 2
d513 6
a518 3
  i386_linux_record_tdep.size_int = 4;
  i386_linux_record_tdep.size_long = 4;
  i386_linux_record_tdep.size_ulong = 4;
d551 2
a552 1
  i386_linux_record_tdep.size_itimerspec = i386_linux_record_tdep.size_timespec * 2;
d562 2
d645 1
@


1.64
log
@	* i386-linux-tdep.c (I386_LINUX_RECORD_SIZE_*,
	I386_LINUX_RECORD_IOCTL_*,
	I386_LINUX_RECORD_FCNTL_*) Removed.
	(i386_linux_init_abi): Change size of record from macros to
	numbers.
	* i386-linux-tdep.c (i386_linux_init_abi): Remove size_char.
	* linux-record.c (record_linux_system_call): Ditto.
	* linux-record.h (linux_record_tdep): Ditto.
@
text
@d293 2
d300 1
a300 1
  sp = extract_unsigned_integer (buf, 4);
d325 1
a325 1
      ucontext_addr = extract_unsigned_integer (buf, 4);
@


1.63
log
@	Add sys_fcntl argument interfaces to linux_record_tdep.

	* linux-record.h (linux_record_tdep): Add fcntl_F_GETLK,
	fcntl_F_GETLK64, fcntl_F_SETLK64 and fcntl_F_SETLKW64 to be
	interfaces.
	* i386-linux-tdep.c (I386_LINUX_RECORD_FCNTL_F_GETLK,
	I386_LINUX_RECORD_FCNTL_F_GETLK64,
	I386_LINUX_RECORD_FCNTL_F_SETLK64,
	I386_LINUX_RECORD_FCNTL_F_SETLKW64): New macros. The values
	of I386 Linux sys_fcntl arguments.
	(i386_linux_init_abi): Set macros values to linux_record_tdep.
	* linux-record.c (record_linux_system_call): Change to use
	the interface in linux_record_tdep in sys_fcntl and
	sys_fcntl64.

	* linux-record.c (record_linux_system_call): Fix the process
	record build error about type in CYGWIN.
@
text
@a449 147
/* These macros are the size of the type that will be used in a system
   call.  The values of these macros were obtained from Linux Kernel
   source.  */
#define I386_LINUX_RECORD_SIZE__old_kernel_stat	32
#define I386_LINUX_RECORD_SIZE_tms			16
#define I386_LINUX_RECORD_SIZE_loff_t			8
#define I386_LINUX_RECORD_SIZE_flock			16
#define I386_LINUX_RECORD_SIZE_oldold_utsname		45
#define I386_LINUX_RECORD_SIZE_ustat			20
#define I386_LINUX_RECORD_SIZE_old_sigaction		140
#define I386_LINUX_RECORD_SIZE_old_sigset_t		128
#define I386_LINUX_RECORD_SIZE_rlimit			8
#define I386_LINUX_RECORD_SIZE_rusage			72
#define I386_LINUX_RECORD_SIZE_timeval		8
#define I386_LINUX_RECORD_SIZE_timezone		8
#define I386_LINUX_RECORD_SIZE_old_gid_t		2
#define I386_LINUX_RECORD_SIZE_old_uid_t		2
#define I386_LINUX_RECORD_SIZE_fd_set			128
#define I386_LINUX_RECORD_SIZE_dirent			268
#define I386_LINUX_RECORD_SIZE_dirent64		276
#define I386_LINUX_RECORD_SIZE_statfs			64
#define I386_LINUX_RECORD_SIZE_statfs64		84
#define I386_LINUX_RECORD_SIZE_sockaddr		16
#define I386_LINUX_RECORD_SIZE_int			4
#define I386_LINUX_RECORD_SIZE_long			4
#define I386_LINUX_RECORD_SIZE_ulong			4
#define I386_LINUX_RECORD_SIZE_msghdr			28
#define I386_LINUX_RECORD_SIZE_itimerval		16
#define I386_LINUX_RECORD_SIZE_stat			88
#define I386_LINUX_RECORD_SIZE_old_utsname		325
#define I386_LINUX_RECORD_SIZE_sysinfo		64
#define I386_LINUX_RECORD_SIZE_msqid_ds		88
#define I386_LINUX_RECORD_SIZE_shmid_ds		84
#define I386_LINUX_RECORD_SIZE_new_utsname		390
#define I386_LINUX_RECORD_SIZE_timex			128
#define I386_LINUX_RECORD_SIZE_mem_dqinfo		24
#define I386_LINUX_RECORD_SIZE_if_dqblk		68
#define I386_LINUX_RECORD_SIZE_fs_quota_stat		68
#define I386_LINUX_RECORD_SIZE_timespec		8
#define I386_LINUX_RECORD_SIZE_pollfd			8
#define I386_LINUX_RECORD_SIZE_NFS_FHSIZE		32
#define I386_LINUX_RECORD_SIZE_knfsd_fh		132
#define I386_LINUX_RECORD_SIZE_TASK_COMM_LEN		16
#define I386_LINUX_RECORD_SIZE_sigaction		140
#define I386_LINUX_RECORD_SIZE_sigset_t		8
#define I386_LINUX_RECORD_SIZE_siginfo_t		128
#define I386_LINUX_RECORD_SIZE_cap_user_data_t	12
#define I386_LINUX_RECORD_SIZE_stack_t		12
#define I386_LINUX_RECORD_SIZE_off_t			I386_LINUX_RECORD_SIZE_long
#define I386_LINUX_RECORD_SIZE_stat64			96
#define I386_LINUX_RECORD_SIZE_gid_t			2
#define I386_LINUX_RECORD_SIZE_uid_t			2
#define I386_LINUX_RECORD_SIZE_PAGE_SIZE		4096
#define I386_LINUX_RECORD_SIZE_flock64		24
#define I386_LINUX_RECORD_SIZE_user_desc		16
#define I386_LINUX_RECORD_SIZE_io_event		32
#define I386_LINUX_RECORD_SIZE_iocb			64
#define I386_LINUX_RECORD_SIZE_epoll_event		12
#define I386_LINUX_RECORD_SIZE_itimerspec		(I386_LINUX_RECORD_SIZE_timespec * 2)
#define I386_LINUX_RECORD_SIZE_mq_attr		32
#define I386_LINUX_RECORD_SIZE_siginfo		128
#define I386_LINUX_RECORD_SIZE_termios		36
#define I386_LINUX_RECORD_SIZE_termios2		44
#define I386_LINUX_RECORD_SIZE_pid_t			4
#define I386_LINUX_RECORD_SIZE_winsize		8
#define I386_LINUX_RECORD_SIZE_char			8
#define I386_LINUX_RECORD_SIZE_serial_struct		60
#define I386_LINUX_RECORD_SIZE_serial_icounter_struct	80
#define I386_LINUX_RECORD_SIZE_hayes_esp_config	12

/* These macros are the values of the second argument of system call
   "sys_ioctl".  The values of these macros were obtained from Linux
   Kernel source.  */
#define I386_LINUX_RECORD_IOCTL_TCGETS		0x5401
#define I386_LINUX_RECORD_IOCTL_TCSETS		0x5402
#define I386_LINUX_RECORD_IOCTL_TCSETSW		0x5403
#define I386_LINUX_RECORD_IOCTL_TCSETSF		0x5404
#define I386_LINUX_RECORD_IOCTL_TCGETA		0x5405
#define I386_LINUX_RECORD_IOCTL_TCSETA		0x5406
#define I386_LINUX_RECORD_IOCTL_TCSETAW		0x5407
#define I386_LINUX_RECORD_IOCTL_TCSETAF		0x5408
#define I386_LINUX_RECORD_IOCTL_TCSBRK		0x5409
#define I386_LINUX_RECORD_IOCTL_TCXONC		0x540A
#define I386_LINUX_RECORD_IOCTL_TCFLSH		0x540B
#define I386_LINUX_RECORD_IOCTL_TIOCEXCL		0x540C
#define I386_LINUX_RECORD_IOCTL_TIOCNXCL		0x540D
#define I386_LINUX_RECORD_IOCTL_TIOCSCTTY		0x540E
#define I386_LINUX_RECORD_IOCTL_TIOCGPGRP		0x540F
#define I386_LINUX_RECORD_IOCTL_TIOCSPGRP		0x5410
#define I386_LINUX_RECORD_IOCTL_TIOCOUTQ		0x5411
#define I386_LINUX_RECORD_IOCTL_TIOCSTI		0x5412
#define I386_LINUX_RECORD_IOCTL_TIOCGWINSZ		0x5413
#define I386_LINUX_RECORD_IOCTL_TIOCSWINSZ		0x5414
#define I386_LINUX_RECORD_IOCTL_TIOCMGET		0x5415
#define I386_LINUX_RECORD_IOCTL_TIOCMBIS		0x5416
#define I386_LINUX_RECORD_IOCTL_TIOCMBIC		0x5417
#define I386_LINUX_RECORD_IOCTL_TIOCMSET		0x5418
#define I386_LINUX_RECORD_IOCTL_TIOCGSOFTCAR		0x5419
#define I386_LINUX_RECORD_IOCTL_TIOCSSOFTCAR		0x541A
#define I386_LINUX_RECORD_IOCTL_FIONREAD		0x541B
#define I386_LINUX_RECORD_IOCTL_TIOCINQ		I386_LINUX_RECORD_IOCTL_FIONREAD
#define I386_LINUX_RECORD_IOCTL_TIOCLINUX		0x541C
#define I386_LINUX_RECORD_IOCTL_TIOCCONS		0x541D
#define I386_LINUX_RECORD_IOCTL_TIOCGSERIAL		0x541E
#define I386_LINUX_RECORD_IOCTL_TIOCSSERIAL		0x541F
#define I386_LINUX_RECORD_IOCTL_TIOCPKT		0x5420
#define I386_LINUX_RECORD_IOCTL_FIONBIO		0x5421
#define I386_LINUX_RECORD_IOCTL_TIOCNOTTY		0x5422
#define I386_LINUX_RECORD_IOCTL_TIOCSETD		0x5423
#define I386_LINUX_RECORD_IOCTL_TIOCGETD		0x5424
#define I386_LINUX_RECORD_IOCTL_TCSBRKP		0x5425
#define I386_LINUX_RECORD_IOCTL_TIOCTTYGSTRUCT 	0x5426
#define I386_LINUX_RECORD_IOCTL_TIOCSBRK		0x5427
#define I386_LINUX_RECORD_IOCTL_TIOCCBRK		0x5428
#define I386_LINUX_RECORD_IOCTL_TIOCGSID		0x5429
#define I386_LINUX_RECORD_IOCTL_TCGETS2		0x802c542a
#define I386_LINUX_RECORD_IOCTL_TCSETS2		0x402c542b
#define I386_LINUX_RECORD_IOCTL_TCSETSW2		0x402c542c
#define I386_LINUX_RECORD_IOCTL_TCSETSF2		0x402c542d
#define I386_LINUX_RECORD_IOCTL_TIOCGPTN		0x80045430
#define I386_LINUX_RECORD_IOCTL_TIOCSPTLCK		0x40045431
#define I386_LINUX_RECORD_IOCTL_FIONCLEX		0x5450
#define I386_LINUX_RECORD_IOCTL_FIOCLEX		0x5451
#define I386_LINUX_RECORD_IOCTL_FIOASYNC		0x5452
#define I386_LINUX_RECORD_IOCTL_TIOCSERCONFIG		0x5453
#define I386_LINUX_RECORD_IOCTL_TIOCSERGWILD		0x5454
#define I386_LINUX_RECORD_IOCTL_TIOCSERSWILD		0x5455
#define I386_LINUX_RECORD_IOCTL_TIOCGLCKTRMIOS	0x5456
#define I386_LINUX_RECORD_IOCTL_TIOCSLCKTRMIOS	0x5457
#define I386_LINUX_RECORD_IOCTL_TIOCSERGSTRUCT	0x5458
#define I386_LINUX_RECORD_IOCTL_TIOCSERGETLSR   	0x5459
#define I386_LINUX_RECORD_IOCTL_TIOCSERGETMULTI	0x545A
#define I386_LINUX_RECORD_IOCTL_TIOCSERSETMULTI	0x545B
#define I386_LINUX_RECORD_IOCTL_TIOCMIWAIT		0x545C
#define I386_LINUX_RECORD_IOCTL_TIOCGICOUNT		0x545D
#define I386_LINUX_RECORD_IOCTL_TIOCGHAYESESP		0x545E
#define I386_LINUX_RECORD_IOCTL_TIOCSHAYESESP		0x545F
#define I386_LINUX_RECORD_IOCTL_FIOQSIZE		0x5460

/* The values of the second argument of system call "sys_fcntl"
   and "sys_fcntl64".  The values of these macros were obtained from
   Linux Kernel source.  */
#define I386_LINUX_RECORD_FCNTL_F_GETLK			5
#define I386_LINUX_RECORD_FCNTL_F_GETLK64		12
#define I386_LINUX_RECORD_FCNTL_F_SETLK64		13
#define I386_LINUX_RECORD_FCNTL_F_SETLKW64		14

d480 142
a621 172
  i386_linux_record_tdep.size__old_kernel_stat =
    I386_LINUX_RECORD_SIZE__old_kernel_stat;
  i386_linux_record_tdep.size_tms = I386_LINUX_RECORD_SIZE_tms;
  i386_linux_record_tdep.size_loff_t = I386_LINUX_RECORD_SIZE_loff_t;
  i386_linux_record_tdep.size_flock = I386_LINUX_RECORD_SIZE_flock;
  i386_linux_record_tdep.size_oldold_utsname =
    I386_LINUX_RECORD_SIZE_oldold_utsname;
  i386_linux_record_tdep.size_ustat = I386_LINUX_RECORD_SIZE_ustat;
  i386_linux_record_tdep.size_old_sigaction =
    I386_LINUX_RECORD_SIZE_old_sigaction;
  i386_linux_record_tdep.size_old_sigset_t =
    I386_LINUX_RECORD_SIZE_old_sigset_t;
  i386_linux_record_tdep.size_rlimit = I386_LINUX_RECORD_SIZE_rlimit;
  i386_linux_record_tdep.size_rusage = I386_LINUX_RECORD_SIZE_rusage;
  i386_linux_record_tdep.size_timeval = I386_LINUX_RECORD_SIZE_timeval;
  i386_linux_record_tdep.size_timezone = I386_LINUX_RECORD_SIZE_timezone;
  i386_linux_record_tdep.size_old_gid_t = I386_LINUX_RECORD_SIZE_old_gid_t;
  i386_linux_record_tdep.size_old_uid_t = I386_LINUX_RECORD_SIZE_old_uid_t;
  i386_linux_record_tdep.size_fd_set = I386_LINUX_RECORD_SIZE_fd_set;
  i386_linux_record_tdep.size_dirent = I386_LINUX_RECORD_SIZE_dirent;
  i386_linux_record_tdep.size_dirent64 = I386_LINUX_RECORD_SIZE_dirent64;
  i386_linux_record_tdep.size_statfs = I386_LINUX_RECORD_SIZE_statfs;
  i386_linux_record_tdep.size_statfs64 = I386_LINUX_RECORD_SIZE_statfs64;
  i386_linux_record_tdep.size_sockaddr = I386_LINUX_RECORD_SIZE_sockaddr;
  i386_linux_record_tdep.size_int = I386_LINUX_RECORD_SIZE_int;
  i386_linux_record_tdep.size_long = I386_LINUX_RECORD_SIZE_long;
  i386_linux_record_tdep.size_ulong = I386_LINUX_RECORD_SIZE_ulong;
  i386_linux_record_tdep.size_msghdr = I386_LINUX_RECORD_SIZE_msghdr;
  i386_linux_record_tdep.size_itimerval = I386_LINUX_RECORD_SIZE_itimerval;
  i386_linux_record_tdep.size_stat = I386_LINUX_RECORD_SIZE_stat;
  i386_linux_record_tdep.size_old_utsname =
    I386_LINUX_RECORD_SIZE_old_utsname;
  i386_linux_record_tdep.size_sysinfo = I386_LINUX_RECORD_SIZE_sysinfo;
  i386_linux_record_tdep.size_msqid_ds = I386_LINUX_RECORD_SIZE_msqid_ds;
  i386_linux_record_tdep.size_shmid_ds = I386_LINUX_RECORD_SIZE_shmid_ds;
  i386_linux_record_tdep.size_new_utsname =
    I386_LINUX_RECORD_SIZE_new_utsname;
  i386_linux_record_tdep.size_timex = I386_LINUX_RECORD_SIZE_timex;
  i386_linux_record_tdep.size_mem_dqinfo = I386_LINUX_RECORD_SIZE_mem_dqinfo;
  i386_linux_record_tdep.size_if_dqblk = I386_LINUX_RECORD_SIZE_if_dqblk;
  i386_linux_record_tdep.size_fs_quota_stat =
    I386_LINUX_RECORD_SIZE_fs_quota_stat;
  i386_linux_record_tdep.size_timespec = I386_LINUX_RECORD_SIZE_timespec;
  i386_linux_record_tdep.size_pollfd = I386_LINUX_RECORD_SIZE_pollfd;
  i386_linux_record_tdep.size_NFS_FHSIZE = I386_LINUX_RECORD_SIZE_NFS_FHSIZE;
  i386_linux_record_tdep.size_knfsd_fh = I386_LINUX_RECORD_SIZE_knfsd_fh;
  i386_linux_record_tdep.size_TASK_COMM_LEN =
    I386_LINUX_RECORD_SIZE_TASK_COMM_LEN;
  i386_linux_record_tdep.size_sigaction = I386_LINUX_RECORD_SIZE_sigaction;
  i386_linux_record_tdep.size_sigset_t = I386_LINUX_RECORD_SIZE_sigset_t;
  i386_linux_record_tdep.size_siginfo_t = I386_LINUX_RECORD_SIZE_siginfo_t;
  i386_linux_record_tdep.size_cap_user_data_t =
    I386_LINUX_RECORD_SIZE_cap_user_data_t;
  i386_linux_record_tdep.size_stack_t = I386_LINUX_RECORD_SIZE_stack_t;
  i386_linux_record_tdep.size_off_t = I386_LINUX_RECORD_SIZE_off_t;
  i386_linux_record_tdep.size_stat64 = I386_LINUX_RECORD_SIZE_stat64;
  i386_linux_record_tdep.size_gid_t = I386_LINUX_RECORD_SIZE_gid_t;
  i386_linux_record_tdep.size_uid_t = I386_LINUX_RECORD_SIZE_uid_t;
  i386_linux_record_tdep.size_PAGE_SIZE = I386_LINUX_RECORD_SIZE_PAGE_SIZE;
  i386_linux_record_tdep.size_flock64 = I386_LINUX_RECORD_SIZE_flock64;
  i386_linux_record_tdep.size_user_desc = I386_LINUX_RECORD_SIZE_user_desc;
  i386_linux_record_tdep.size_io_event = I386_LINUX_RECORD_SIZE_io_event;
  i386_linux_record_tdep.size_iocb = I386_LINUX_RECORD_SIZE_iocb;
  i386_linux_record_tdep.size_epoll_event =
    I386_LINUX_RECORD_SIZE_epoll_event;
  i386_linux_record_tdep.size_itimerspec = I386_LINUX_RECORD_SIZE_itimerspec;
  i386_linux_record_tdep.size_mq_attr = I386_LINUX_RECORD_SIZE_mq_attr;
  i386_linux_record_tdep.size_siginfo = I386_LINUX_RECORD_SIZE_siginfo;
  i386_linux_record_tdep.size_termios = I386_LINUX_RECORD_SIZE_termios;
  i386_linux_record_tdep.size_termios2 = I386_LINUX_RECORD_SIZE_termios2;
  i386_linux_record_tdep.size_pid_t = I386_LINUX_RECORD_SIZE_pid_t;
  i386_linux_record_tdep.size_winsize = I386_LINUX_RECORD_SIZE_winsize;
  i386_linux_record_tdep.size_char = I386_LINUX_RECORD_SIZE_char;
  i386_linux_record_tdep.size_serial_struct =
    I386_LINUX_RECORD_SIZE_serial_struct;
  i386_linux_record_tdep.size_serial_icounter_struct =
    I386_LINUX_RECORD_SIZE_serial_icounter_struct;
  i386_linux_record_tdep.size_hayes_esp_config =
    I386_LINUX_RECORD_SIZE_hayes_esp_config;

  i386_linux_record_tdep.ioctl_TCGETS = I386_LINUX_RECORD_IOCTL_TCGETS;
  i386_linux_record_tdep.ioctl_TCSETS = I386_LINUX_RECORD_IOCTL_TCSETS;
  i386_linux_record_tdep.ioctl_TCSETSW = I386_LINUX_RECORD_IOCTL_TCSETSW;
  i386_linux_record_tdep.ioctl_TCSETSF = I386_LINUX_RECORD_IOCTL_TCSETSF;
  i386_linux_record_tdep.ioctl_TCGETA = I386_LINUX_RECORD_IOCTL_TCGETA;
  i386_linux_record_tdep.ioctl_TCSETA = I386_LINUX_RECORD_IOCTL_TCSETA;
  i386_linux_record_tdep.ioctl_TCSETAW = I386_LINUX_RECORD_IOCTL_TCSETAW;
  i386_linux_record_tdep.ioctl_TCSETAF = I386_LINUX_RECORD_IOCTL_TCSETAF;
  i386_linux_record_tdep.ioctl_TCSBRK = I386_LINUX_RECORD_IOCTL_TCSBRK;
  i386_linux_record_tdep.ioctl_TCXONC = I386_LINUX_RECORD_IOCTL_TCXONC;
  i386_linux_record_tdep.ioctl_TCFLSH = I386_LINUX_RECORD_IOCTL_TCFLSH;
  i386_linux_record_tdep.ioctl_TIOCEXCL = I386_LINUX_RECORD_IOCTL_TIOCEXCL;
  i386_linux_record_tdep.ioctl_TIOCNXCL = I386_LINUX_RECORD_IOCTL_TIOCNXCL;
  i386_linux_record_tdep.ioctl_TIOCSCTTY = I386_LINUX_RECORD_IOCTL_TIOCSCTTY;
  i386_linux_record_tdep.ioctl_TIOCGPGRP = I386_LINUX_RECORD_IOCTL_TIOCGPGRP;
  i386_linux_record_tdep.ioctl_TIOCSPGRP = I386_LINUX_RECORD_IOCTL_TIOCSPGRP;
  i386_linux_record_tdep.ioctl_TIOCOUTQ = I386_LINUX_RECORD_IOCTL_TIOCOUTQ;
  i386_linux_record_tdep.ioctl_TIOCSTI = I386_LINUX_RECORD_IOCTL_TIOCSTI;
  i386_linux_record_tdep.ioctl_TIOCGWINSZ =
    I386_LINUX_RECORD_IOCTL_TIOCGWINSZ;
  i386_linux_record_tdep.ioctl_TIOCSWINSZ =
    I386_LINUX_RECORD_IOCTL_TIOCSWINSZ;
  i386_linux_record_tdep.ioctl_TIOCMGET = I386_LINUX_RECORD_IOCTL_TIOCMGET;
  i386_linux_record_tdep.ioctl_TIOCMBIS = I386_LINUX_RECORD_IOCTL_TIOCMBIS;
  i386_linux_record_tdep.ioctl_TIOCMBIC = I386_LINUX_RECORD_IOCTL_TIOCMBIC;
  i386_linux_record_tdep.ioctl_TIOCMSET = I386_LINUX_RECORD_IOCTL_TIOCMSET;
  i386_linux_record_tdep.ioctl_TIOCGSOFTCAR =
    I386_LINUX_RECORD_IOCTL_TIOCGSOFTCAR;
  i386_linux_record_tdep.ioctl_TIOCSSOFTCAR =
    I386_LINUX_RECORD_IOCTL_TIOCSSOFTCAR;
  i386_linux_record_tdep.ioctl_FIONREAD = I386_LINUX_RECORD_IOCTL_FIONREAD;
  i386_linux_record_tdep.ioctl_TIOCINQ = I386_LINUX_RECORD_IOCTL_TIOCINQ;
  i386_linux_record_tdep.ioctl_TIOCLINUX = I386_LINUX_RECORD_IOCTL_TIOCLINUX;
  i386_linux_record_tdep.ioctl_TIOCCONS = I386_LINUX_RECORD_IOCTL_TIOCCONS;
  i386_linux_record_tdep.ioctl_TIOCGSERIAL =
    I386_LINUX_RECORD_IOCTL_TIOCGSERIAL;
  i386_linux_record_tdep.ioctl_TIOCSSERIAL =
    I386_LINUX_RECORD_IOCTL_TIOCSSERIAL;
  i386_linux_record_tdep.ioctl_TIOCPKT = I386_LINUX_RECORD_IOCTL_TIOCPKT;
  i386_linux_record_tdep.ioctl_FIONBIO = I386_LINUX_RECORD_IOCTL_FIONBIO;
  i386_linux_record_tdep.ioctl_TIOCNOTTY = I386_LINUX_RECORD_IOCTL_TIOCNOTTY;
  i386_linux_record_tdep.ioctl_TIOCSETD = I386_LINUX_RECORD_IOCTL_TIOCSETD;
  i386_linux_record_tdep.ioctl_TIOCGETD = I386_LINUX_RECORD_IOCTL_TIOCGETD;
  i386_linux_record_tdep.ioctl_TCSBRKP = I386_LINUX_RECORD_IOCTL_TCSBRKP;
  i386_linux_record_tdep.ioctl_TIOCTTYGSTRUCT =
    I386_LINUX_RECORD_IOCTL_TIOCTTYGSTRUCT;
  i386_linux_record_tdep.ioctl_TIOCSBRK = I386_LINUX_RECORD_IOCTL_TIOCSBRK;
  i386_linux_record_tdep.ioctl_TIOCCBRK = I386_LINUX_RECORD_IOCTL_TIOCCBRK;
  i386_linux_record_tdep.ioctl_TIOCGSID = I386_LINUX_RECORD_IOCTL_TIOCGSID;
  i386_linux_record_tdep.ioctl_TCGETS2 = I386_LINUX_RECORD_IOCTL_TCGETS2;
  i386_linux_record_tdep.ioctl_TCSETS2 = I386_LINUX_RECORD_IOCTL_TCSETS2;
  i386_linux_record_tdep.ioctl_TCSETSW2 = I386_LINUX_RECORD_IOCTL_TCSETSW2;
  i386_linux_record_tdep.ioctl_TCSETSF2 = I386_LINUX_RECORD_IOCTL_TCSETSF2;
  i386_linux_record_tdep.ioctl_TIOCGPTN = I386_LINUX_RECORD_IOCTL_TIOCGPTN;
  i386_linux_record_tdep.ioctl_TIOCSPTLCK =
    I386_LINUX_RECORD_IOCTL_TIOCSPTLCK;
  i386_linux_record_tdep.ioctl_FIONCLEX = I386_LINUX_RECORD_IOCTL_FIONCLEX;
  i386_linux_record_tdep.ioctl_FIOCLEX = I386_LINUX_RECORD_IOCTL_FIOCLEX;
  i386_linux_record_tdep.ioctl_FIOASYNC = I386_LINUX_RECORD_IOCTL_FIOASYNC;
  i386_linux_record_tdep.ioctl_TIOCSERCONFIG =
    I386_LINUX_RECORD_IOCTL_TIOCSERCONFIG;
  i386_linux_record_tdep.ioctl_TIOCSERGWILD =
    I386_LINUX_RECORD_IOCTL_TIOCSERGWILD;
  i386_linux_record_tdep.ioctl_TIOCSERSWILD =
    I386_LINUX_RECORD_IOCTL_TIOCSERSWILD;
  i386_linux_record_tdep.ioctl_TIOCGLCKTRMIOS =
    I386_LINUX_RECORD_IOCTL_TIOCGLCKTRMIOS;
  i386_linux_record_tdep.ioctl_TIOCSLCKTRMIOS =
    I386_LINUX_RECORD_IOCTL_TIOCSLCKTRMIOS;
  i386_linux_record_tdep.ioctl_TIOCSERGSTRUCT =
    I386_LINUX_RECORD_IOCTL_TIOCSERGSTRUCT;
  i386_linux_record_tdep.ioctl_TIOCSERGETLSR =
    I386_LINUX_RECORD_IOCTL_TIOCSERGETLSR;
  i386_linux_record_tdep.ioctl_TIOCSERGETMULTI =
    I386_LINUX_RECORD_IOCTL_TIOCSERGETMULTI;
  i386_linux_record_tdep.ioctl_TIOCSERSETMULTI =
    I386_LINUX_RECORD_IOCTL_TIOCSERSETMULTI;
  i386_linux_record_tdep.ioctl_TIOCMIWAIT =
    I386_LINUX_RECORD_IOCTL_TIOCMIWAIT;
  i386_linux_record_tdep.ioctl_TIOCGICOUNT =
    I386_LINUX_RECORD_IOCTL_TIOCGICOUNT;
  i386_linux_record_tdep.ioctl_TIOCGHAYESESP =
    I386_LINUX_RECORD_IOCTL_TIOCGHAYESESP;
  i386_linux_record_tdep.ioctl_TIOCSHAYESESP =
    I386_LINUX_RECORD_IOCTL_TIOCSHAYESESP;
  i386_linux_record_tdep.ioctl_FIOQSIZE = I386_LINUX_RECORD_IOCTL_FIOQSIZE;

  i386_linux_record_tdep.fcntl_F_GETLK = I386_LINUX_RECORD_FCNTL_F_GETLK;
  i386_linux_record_tdep.fcntl_F_GETLK64 = I386_LINUX_RECORD_FCNTL_F_GETLK64;
  i386_linux_record_tdep.fcntl_F_SETLK64 = I386_LINUX_RECORD_FCNTL_F_SETLK64;
  i386_linux_record_tdep.fcntl_F_SETLKW64 =
    I386_LINUX_RECORD_FCNTL_F_SETLKW64;
@


1.62
log
@* i386-tdep.c (i386_process_record): Make it extern.
(i386_gdbarch_init): Don't call set_gdbarch_process_record
here.
* i386-tdep.c (i386_process_record): Declare.
* i386-linux-tdep.c (i386_linux_init_abi): Call
set_gdbarch_process_record.
@
text
@d589 8
d794 6
@


1.61
log
@I386 Linux process record and replay support.

* i386-linux-tdep.c (i386_linux_record_tdep): New variable.
This struct has the argument for the function
"record_linux_system_call".
(i386_linux_intx80_sysenter_record): New function. Parse the
system call instruction and call function
"record_linux_system_call" to record execute log.
(i386_linux_init_abi): Initialize "i386_linux_record_tdep".
Set "i386_linux_intx80_sysenter_record" to
"i386_intx80_record" and "i386_sysenter_record".
@
text
@d616 2
@


1.60
log
@2009-02-06  Pedro Alves  <pedro@@codesourcery.com>

	gdb/
	* target.h (enum target_object): Add new TARGET_OBJECT_SIGNAL_INFO.
	* infrun.c (siginfo_value_read, siginfo_value_write): New.
	(siginfo_value_funcs): New.
	(siginfo_make_value): New.
	(_initialize_infrun): Create the $_siginfo convenience variable.
	* gdbtypes.h (append_composite_type_field_aligned): Declare.
	* gdbtypes.c (append_composite_type_field): Rename to...
	(append_composite_type_field_aligned): ... this.  Add ALIGNMENT
	argument.  Handle it.
	(append_composite_type_field): Rewrite on top of
	append_composite_type_field_aligned.
	* value.h (internalvar_make_value): New typedef.
	(struct internalvar) <make_value>: New field.
	(create_internalvar_type_lazy): Declare.
	* value.c (create_internalvar): Clear make_value.
	(create_internalvar_type_lazy): New.
	(value_of_internalvar): If make_value is set use it.
	(preserve_values): Skip internal variables that don't have a
	value.
	* gdbarch.sh (get_siginfo_type): New.
	* gdbarch.h, gdbarch.c: Regenerate.

	* linux-tdep.h, linux-tdep.c: New.
	* amd64-linux-tdep.c: Include "linux-tdep.h".
	(amd64_linux_init_abi): Register linux_get_siginfo_type and
	linux_get_siginfo_mapper.
	* i386-linux-tdep.c: Include "linux-tdep.h".
	(i386_linux_init_abi): Register linux_get_siginfo_type and
	linux_get_siginfo_mapper.
	* arm-linux-tdep.c: Include "linux-tdep.h".
	(i386_linux_init_abi): Register linux_get_siginfo_type and
	linux_get_siginfo_mapper.

	* linux-nat.c (linux_xfer_siginfo): New.
	(linux_nat_xfer_partial): Handle TARGET_OBJECT_SIGNAL_INFO.
	* remote.c (PACKET_qXfer_siginfo_read)
	(PACKET_qXfer_siginfo_write): New.
	(feature remote_protocol_features): Add "qXfer:siginfo:read" and
	"qXfer:siginfo:write" features.
	(remote_xfer_partial): Handle TARGET_OBJECT_SIGNAL_INFO.
	(_initialize_remote): Add "set/show remote read-siginfo-object"
	and "set/show remote write-siginfo-object" commands.

	* Makefile.in (ALL_TARGET_OBS): Add linux-tdep.o.
	(HFILES_NO_SRCDIR): Add linux-tdep.h.
	(ALLDEPFILES): Add linux-tdep.c.

	* configure.tgt (arm*-*-linux* | arm*-*-uclinux*)
	(i[34567]86-*-linux*, x86_64-*-linux*): Add linux-tdep.o to
	gdb_target_obs.

2009-02-06  Pedro Alves  <pedro@@codesourcery.com>

	gdb/gdbserver/
	* server.c (handle_query): Report qXfer:siginfo:read and
	qXfer:siginfo:write as supported and handle them.
	* target.h (struct target_ops) <qxfer_siginfo>: New field.
	* linux-low.c (linux_xfer_siginfo): New.
	(linux_target_ops): Set it.

2009-02-06  Pedro Alves  <pedro@@codesourcery.com>

	gdb/doc/
	* gdb.texinfo (Signals): Document $_siginfo.
	(Convenience Variables): Mention $_siginfo.
	(Remote Configuration): Document qXfer:siginfo:read,
	qXfer:siginfo:write packets, and the read-siginfo-object,
	write-siginfo-object commands.

2009-02-06  Pedro Alves  <pedro@@codesourcery.com>

	gdb/testsuite/
	* gdb.base/siginfo-obj.c, gdb.base/siginfo-obj.exp: New.
@
text
@d41 4
d354 29
d450 139
d616 177
@


1.59
log
@        Updated copyright notices for most files.
@
text
@d34 1
d473 2
@


1.58
log
@
	* gdbarch.sh: Added new gdbarch struct
	core_regset_sections.
	* gdbarch.c: Refreshed.
	* gdbarch.h: Refreshed.
	* regset.h (core_regset_section): Declared.
	* linux-nat.c (linux_nat_do_thread_registers): Added
	support for the new gdbarch struct core_regset_sections.
	* utils.c (host_address_to_string): New function.
	* defs.h (host_address_to_string): New prototype.
	* i386-linux-tdep.c (i386_regset_rections): New register
	sections list for i386.
	  (i386_linux_init_abi): Initialized new gdbarch struct
	  core_regset_sections.
	* Makefile.in: Updated to reflect dependency changes.
	* ppc-linux-tdep.c (ppc_regset_sections): Register
	sections list for ppc.
	  (ppc_linux_init_abi): Initialized new gdbarch struct
	  core_regset_sections
@
text
@d3 1
a3 1
   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008
@


1.58.10.1
log
@2008-12-26  Michael Snyder  <msnyder@@vmware.com>

	* Marker: adding teawater patches to branch.
@
text
@a39 4
#include "record.h"
#include "linux-record.h"
#include <stdint.h>

a348 31

/* Parse the arguments of current system call instruction and record the
   values of the registers and memory that will be changed in current system
   call instruction to "record_arch_list". This instruction is "int 0x80" (Linux
   Kernel2.4) or "sysenter" (Linux Kernel 2.6).
   Return -1 if something wrong.  */

static linux_record_tdep_t linux_record_tdep;

static int
i386_linux_intx80_sysenter_record (void)
{
  int ret;
  uint32_t tmpu32;

  regcache_raw_read (record_regcache, I386_EAX_REGNUM, (gdb_byte *) & tmpu32);

  ret = record_linux_system_call (tmpu32, &linux_record_tdep);
  if (ret)
    {
      return ret;
    }

  /* Record the return of system call.  */
  if (record_arch_list_add_reg (I386_EAX_REGNUM))
    {
      return -1;
    }

  return 0;
}
a415 139
/* These macros are the size of the type that will be used in system
   call.  The values of these macros are gotten from Linux Kernel
   source.  */
#define I386_RECORD_SIZE__old_kernel_stat	32
#define I386_RECORD_SIZE_tms			16
#define I386_RECORD_SIZE_loff_t			8
#define I386_RECORD_SIZE_flock			16
#define I386_RECORD_SIZE_oldold_utsname		45
#define I386_RECORD_SIZE_ustat			20
#define I386_RECORD_SIZE_old_sigaction		140
#define I386_RECORD_SIZE_old_sigset_t		128
#define I386_RECORD_SIZE_rlimit			8
#define I386_RECORD_SIZE_rusage			72
#define I386_RECORD_SIZE_timeval		8
#define I386_RECORD_SIZE_timezone		8
#define I386_RECORD_SIZE_old_gid_t		2
#define I386_RECORD_SIZE_old_uid_t		2
#define I386_RECORD_SIZE_fd_set			128
#define I386_RECORD_SIZE_dirent			268
#define I386_RECORD_SIZE_dirent64		276
#define I386_RECORD_SIZE_statfs			64
#define I386_RECORD_SIZE_statfs64		84
#define I386_RECORD_SIZE_sockaddr		16
#define I386_RECORD_SIZE_int			4
#define I386_RECORD_SIZE_long			4
#define I386_RECORD_SIZE_ulong			4
#define I386_RECORD_SIZE_msghdr			28
#define I386_RECORD_SIZE_itimerval		16
#define I386_RECORD_SIZE_stat			88
#define I386_RECORD_SIZE_old_utsname		325
#define I386_RECORD_SIZE_sysinfo		64
#define I386_RECORD_SIZE_msqid_ds		88
#define I386_RECORD_SIZE_shmid_ds		84
#define I386_RECORD_SIZE_new_utsname		390
#define I386_RECORD_SIZE_timex			128
#define I386_RECORD_SIZE_mem_dqinfo		24
#define I386_RECORD_SIZE_if_dqblk		68
#define I386_RECORD_SIZE_fs_quota_stat		68
#define I386_RECORD_SIZE_timespec		8
#define I386_RECORD_SIZE_pollfd			8
#define I386_RECORD_SIZE_NFS_FHSIZE		32
#define I386_RECORD_SIZE_knfsd_fh		132
#define I386_RECORD_SIZE_TASK_COMM_LEN		16
#define I386_RECORD_SIZE_sigaction		140
#define I386_RECORD_SIZE_sigset_t		8
#define I386_RECORD_SIZE_siginfo_t		128
#define I386_RECORD_SIZE_cap_user_data_t	12
#define I386_RECORD_SIZE_stack_t		12
#define I386_RECORD_SIZE_off_t			I386_RECORD_SIZE_long
#define I386_RECORD_SIZE_stat64			96
#define I386_RECORD_SIZE_gid_t			2
#define I386_RECORD_SIZE_uid_t			2
#define I386_RECORD_SIZE_PAGE_SIZE		4096
#define I386_RECORD_SIZE_flock64		24
#define I386_RECORD_SIZE_user_desc		16
#define I386_RECORD_SIZE_io_event		32
#define I386_RECORD_SIZE_iocb			64
#define I386_RECORD_SIZE_epoll_event		12
#define I386_RECORD_SIZE_itimerspec		(I386_RECORD_SIZE_timespec * 2)
#define I386_RECORD_SIZE_mq_attr		32
#define I386_RECORD_SIZE_siginfo		128
#define I386_RECORD_SIZE_termios		36
#define I386_RECORD_SIZE_termios2		44
#define I386_RECORD_SIZE_pid_t			4
#define I386_RECORD_SIZE_winsize		8
#define I386_RECORD_SIZE_char			8
#define I386_RECORD_SIZE_serial_struct		60
#define I386_RECORD_SIZE_serial_icounter_struct	80
#define I386_RECORD_SIZE_hayes_esp_config	12

/* These macros are the values of the second argument of system call
   "sys_ioctl". The values of these macros are gotten from Linux Kernel
   source.  */
#define I386_RECORD_IOCTL_TCGETS		0x5401
#define I386_RECORD_IOCTL_TCSETS		0x5402
#define I386_RECORD_IOCTL_TCSETSW		0x5403
#define I386_RECORD_IOCTL_TCSETSF		0x5404
#define I386_RECORD_IOCTL_TCGETA		0x5405
#define I386_RECORD_IOCTL_TCSETA		0x5406
#define I386_RECORD_IOCTL_TCSETAW		0x5407
#define I386_RECORD_IOCTL_TCSETAF		0x5408
#define I386_RECORD_IOCTL_TCSBRK		0x5409
#define I386_RECORD_IOCTL_TCXONC		0x540A
#define I386_RECORD_IOCTL_TCFLSH		0x540B
#define I386_RECORD_IOCTL_TIOCEXCL		0x540C
#define I386_RECORD_IOCTL_TIOCNXCL		0x540D
#define I386_RECORD_IOCTL_TIOCSCTTY		0x540E
#define I386_RECORD_IOCTL_TIOCGPGRP		0x540F
#define I386_RECORD_IOCTL_TIOCSPGRP		0x5410
#define I386_RECORD_IOCTL_TIOCOUTQ		0x5411
#define I386_RECORD_IOCTL_TIOCSTI		0x5412
#define I386_RECORD_IOCTL_TIOCGWINSZ		0x5413
#define I386_RECORD_IOCTL_TIOCSWINSZ		0x5414
#define I386_RECORD_IOCTL_TIOCMGET		0x5415
#define I386_RECORD_IOCTL_TIOCMBIS		0x5416
#define I386_RECORD_IOCTL_TIOCMBIC		0x5417
#define I386_RECORD_IOCTL_TIOCMSET		0x5418
#define I386_RECORD_IOCTL_TIOCGSOFTCAR		0x5419
#define I386_RECORD_IOCTL_TIOCSSOFTCAR		0x541A
#define I386_RECORD_IOCTL_FIONREAD		0x541B
#define I386_RECORD_IOCTL_TIOCINQ		I386_RECORD_IOCTL_FIONREAD
#define I386_RECORD_IOCTL_TIOCLINUX		0x541C
#define I386_RECORD_IOCTL_TIOCCONS		0x541D
#define I386_RECORD_IOCTL_TIOCGSERIAL		0x541E
#define I386_RECORD_IOCTL_TIOCSSERIAL		0x541F
#define I386_RECORD_IOCTL_TIOCPKT		0x5420
#define I386_RECORD_IOCTL_FIONBIO		0x5421
#define I386_RECORD_IOCTL_TIOCNOTTY		0x5422
#define I386_RECORD_IOCTL_TIOCSETD		0x5423
#define I386_RECORD_IOCTL_TIOCGETD		0x5424
#define I386_RECORD_IOCTL_TCSBRKP		0x5425
#define I386_RECORD_IOCTL_TIOCTTYGSTRUCT 	0x5426
#define I386_RECORD_IOCTL_TIOCSBRK		0x5427
#define I386_RECORD_IOCTL_TIOCCBRK		0x5428
#define I386_RECORD_IOCTL_TIOCGSID		0x5429
#define I386_RECORD_IOCTL_TCGETS2		0x802c542a
#define I386_RECORD_IOCTL_TCSETS2		0x402c542b
#define I386_RECORD_IOCTL_TCSETSW2		0x402c542c
#define I386_RECORD_IOCTL_TCSETSF2		0x402c542d
#define I386_RECORD_IOCTL_TIOCGPTN		0x80045430
#define I386_RECORD_IOCTL_TIOCSPTLCK		0x40045431
#define I386_RECORD_IOCTL_FIONCLEX		0x5450
#define I386_RECORD_IOCTL_FIOCLEX		0x5451
#define I386_RECORD_IOCTL_FIOASYNC		0x5452
#define I386_RECORD_IOCTL_TIOCSERCONFIG		0x5453
#define I386_RECORD_IOCTL_TIOCSERGWILD		0x5454
#define I386_RECORD_IOCTL_TIOCSERSWILD		0x5455
#define I386_RECORD_IOCTL_TIOCGLCKTRMIOS	0x5456
#define I386_RECORD_IOCTL_TIOCSLCKTRMIOS	0x5457
#define I386_RECORD_IOCTL_TIOCSERGSTRUCT	0x5458
#define I386_RECORD_IOCTL_TIOCSERGETLSR   	0x5459
#define I386_RECORD_IOCTL_TIOCSERGETMULTI	0x545A
#define I386_RECORD_IOCTL_TIOCSERSETMULTI	0x545B
#define I386_RECORD_IOCTL_TIOCMIWAIT		0x545C
#define I386_RECORD_IOCTL_TIOCGICOUNT		0x545D
#define I386_RECORD_IOCTL_TIOCGHAYESESP		0x545E
#define I386_RECORD_IOCTL_TIOCSHAYESESP		0x545F
#define I386_RECORD_IOCTL_FIOQSIZE		0x5460

a442 144
  /* Initial the linux_record_tdep */
  linux_record_tdep.size__old_kernel_stat = I386_RECORD_SIZE__old_kernel_stat;
  linux_record_tdep.size_tms = I386_RECORD_SIZE_tms;
  linux_record_tdep.size_loff_t = I386_RECORD_SIZE_loff_t;
  linux_record_tdep.size_flock = I386_RECORD_SIZE_flock;
  linux_record_tdep.size_oldold_utsname = I386_RECORD_SIZE_oldold_utsname;
  linux_record_tdep.size_ustat = I386_RECORD_SIZE_ustat;
  linux_record_tdep.size_old_sigaction = I386_RECORD_SIZE_old_sigaction;
  linux_record_tdep.size_old_sigset_t = I386_RECORD_SIZE_old_sigset_t;
  linux_record_tdep.size_rlimit = I386_RECORD_SIZE_rlimit;
  linux_record_tdep.size_rusage = I386_RECORD_SIZE_rusage;
  linux_record_tdep.size_timeval = I386_RECORD_SIZE_timeval;
  linux_record_tdep.size_timezone = I386_RECORD_SIZE_timezone;
  linux_record_tdep.size_old_gid_t = I386_RECORD_SIZE_old_gid_t;
  linux_record_tdep.size_old_uid_t = I386_RECORD_SIZE_old_uid_t;
  linux_record_tdep.size_fd_set = I386_RECORD_SIZE_fd_set;
  linux_record_tdep.size_dirent = I386_RECORD_SIZE_dirent;
  linux_record_tdep.size_dirent64 = I386_RECORD_SIZE_dirent64;
  linux_record_tdep.size_statfs = I386_RECORD_SIZE_statfs;
  linux_record_tdep.size_statfs64 = I386_RECORD_SIZE_statfs64;
  linux_record_tdep.size_sockaddr = I386_RECORD_SIZE_sockaddr;
  linux_record_tdep.size_int = I386_RECORD_SIZE_int;
  linux_record_tdep.size_long = I386_RECORD_SIZE_long;
  linux_record_tdep.size_ulong = I386_RECORD_SIZE_ulong;
  linux_record_tdep.size_msghdr = I386_RECORD_SIZE_msghdr;
  linux_record_tdep.size_itimerval = I386_RECORD_SIZE_itimerval;
  linux_record_tdep.size_stat = I386_RECORD_SIZE_stat;
  linux_record_tdep.size_old_utsname = I386_RECORD_SIZE_old_utsname;
  linux_record_tdep.size_sysinfo = I386_RECORD_SIZE_sysinfo;
  linux_record_tdep.size_msqid_ds = I386_RECORD_SIZE_msqid_ds;
  linux_record_tdep.size_shmid_ds = I386_RECORD_SIZE_shmid_ds;
  linux_record_tdep.size_new_utsname = I386_RECORD_SIZE_new_utsname;
  linux_record_tdep.size_timex = I386_RECORD_SIZE_timex;
  linux_record_tdep.size_mem_dqinfo = I386_RECORD_SIZE_mem_dqinfo;
  linux_record_tdep.size_if_dqblk = I386_RECORD_SIZE_if_dqblk;
  linux_record_tdep.size_fs_quota_stat = I386_RECORD_SIZE_fs_quota_stat;
  linux_record_tdep.size_timespec = I386_RECORD_SIZE_timespec;
  linux_record_tdep.size_pollfd = I386_RECORD_SIZE_pollfd;
  linux_record_tdep.size_NFS_FHSIZE = I386_RECORD_SIZE_NFS_FHSIZE;
  linux_record_tdep.size_knfsd_fh = I386_RECORD_SIZE_knfsd_fh;
  linux_record_tdep.size_TASK_COMM_LEN = I386_RECORD_SIZE_TASK_COMM_LEN;
  linux_record_tdep.size_sigaction = I386_RECORD_SIZE_sigaction;
  linux_record_tdep.size_sigset_t = I386_RECORD_SIZE_sigset_t;
  linux_record_tdep.size_siginfo_t = I386_RECORD_SIZE_siginfo_t;
  linux_record_tdep.size_cap_user_data_t = I386_RECORD_SIZE_cap_user_data_t;
  linux_record_tdep.size_stack_t = I386_RECORD_SIZE_stack_t;
  linux_record_tdep.size_off_t = I386_RECORD_SIZE_off_t;
  linux_record_tdep.size_stat64 = I386_RECORD_SIZE_stat64;
  linux_record_tdep.size_gid_t = I386_RECORD_SIZE_gid_t;
  linux_record_tdep.size_uid_t = I386_RECORD_SIZE_uid_t;
  linux_record_tdep.size_PAGE_SIZE = I386_RECORD_SIZE_PAGE_SIZE;
  linux_record_tdep.size_flock64 = I386_RECORD_SIZE_flock64;
  linux_record_tdep.size_user_desc = I386_RECORD_SIZE_user_desc;
  linux_record_tdep.size_io_event = I386_RECORD_SIZE_io_event;
  linux_record_tdep.size_iocb = I386_RECORD_SIZE_iocb;
  linux_record_tdep.size_epoll_event = I386_RECORD_SIZE_epoll_event;
  linux_record_tdep.size_itimerspec = I386_RECORD_SIZE_itimerspec;
  linux_record_tdep.size_mq_attr = I386_RECORD_SIZE_mq_attr;
  linux_record_tdep.size_siginfo = I386_RECORD_SIZE_siginfo;
  linux_record_tdep.size_termios = I386_RECORD_SIZE_termios;
  linux_record_tdep.size_termios2 = I386_RECORD_SIZE_termios2;
  linux_record_tdep.size_pid_t = I386_RECORD_SIZE_pid_t;
  linux_record_tdep.size_winsize = I386_RECORD_SIZE_winsize;
  linux_record_tdep.size_char = I386_RECORD_SIZE_char;
  linux_record_tdep.size_serial_struct = I386_RECORD_SIZE_serial_struct;
  linux_record_tdep.size_serial_icounter_struct =
    I386_RECORD_SIZE_serial_icounter_struct;
  linux_record_tdep.size_hayes_esp_config = I386_RECORD_SIZE_hayes_esp_config;

  linux_record_tdep.ioctl_TCGETS = I386_RECORD_IOCTL_TCGETS;
  linux_record_tdep.ioctl_TCSETS = I386_RECORD_IOCTL_TCSETS;
  linux_record_tdep.ioctl_TCSETSW = I386_RECORD_IOCTL_TCSETSW;
  linux_record_tdep.ioctl_TCSETSF = I386_RECORD_IOCTL_TCSETSF;
  linux_record_tdep.ioctl_TCGETA = I386_RECORD_IOCTL_TCGETA;
  linux_record_tdep.ioctl_TCSETA = I386_RECORD_IOCTL_TCSETA;
  linux_record_tdep.ioctl_TCSETAW = I386_RECORD_IOCTL_TCSETAW;
  linux_record_tdep.ioctl_TCSETAF = I386_RECORD_IOCTL_TCSETAF;
  linux_record_tdep.ioctl_TCSBRK = I386_RECORD_IOCTL_TCSBRK;
  linux_record_tdep.ioctl_TCXONC = I386_RECORD_IOCTL_TCXONC;
  linux_record_tdep.ioctl_TCFLSH = I386_RECORD_IOCTL_TCFLSH;
  linux_record_tdep.ioctl_TIOCEXCL = I386_RECORD_IOCTL_TIOCEXCL;
  linux_record_tdep.ioctl_TIOCNXCL = I386_RECORD_IOCTL_TIOCNXCL;
  linux_record_tdep.ioctl_TIOCSCTTY = I386_RECORD_IOCTL_TIOCSCTTY;
  linux_record_tdep.ioctl_TIOCGPGRP = I386_RECORD_IOCTL_TIOCGPGRP;
  linux_record_tdep.ioctl_TIOCSPGRP = I386_RECORD_IOCTL_TIOCSPGRP;
  linux_record_tdep.ioctl_TIOCOUTQ = I386_RECORD_IOCTL_TIOCOUTQ;
  linux_record_tdep.ioctl_TIOCSTI = I386_RECORD_IOCTL_TIOCSTI;
  linux_record_tdep.ioctl_TIOCGWINSZ = I386_RECORD_IOCTL_TIOCGWINSZ;
  linux_record_tdep.ioctl_TIOCSWINSZ = I386_RECORD_IOCTL_TIOCSWINSZ;
  linux_record_tdep.ioctl_TIOCMGET = I386_RECORD_IOCTL_TIOCMGET;
  linux_record_tdep.ioctl_TIOCMBIS = I386_RECORD_IOCTL_TIOCMBIS;
  linux_record_tdep.ioctl_TIOCMBIC = I386_RECORD_IOCTL_TIOCMBIC;
  linux_record_tdep.ioctl_TIOCMSET = I386_RECORD_IOCTL_TIOCMSET;
  linux_record_tdep.ioctl_TIOCGSOFTCAR = I386_RECORD_IOCTL_TIOCGSOFTCAR;
  linux_record_tdep.ioctl_TIOCSSOFTCAR = I386_RECORD_IOCTL_TIOCSSOFTCAR;
  linux_record_tdep.ioctl_FIONREAD = I386_RECORD_IOCTL_FIONREAD;
  linux_record_tdep.ioctl_TIOCINQ = I386_RECORD_IOCTL_TIOCINQ;
  linux_record_tdep.ioctl_TIOCLINUX = I386_RECORD_IOCTL_TIOCLINUX;
  linux_record_tdep.ioctl_TIOCCONS = I386_RECORD_IOCTL_TIOCCONS;
  linux_record_tdep.ioctl_TIOCGSERIAL = I386_RECORD_IOCTL_TIOCGSERIAL;
  linux_record_tdep.ioctl_TIOCSSERIAL = I386_RECORD_IOCTL_TIOCSSERIAL;
  linux_record_tdep.ioctl_TIOCPKT = I386_RECORD_IOCTL_TIOCPKT;
  linux_record_tdep.ioctl_FIONBIO = I386_RECORD_IOCTL_FIONBIO;
  linux_record_tdep.ioctl_TIOCNOTTY = I386_RECORD_IOCTL_TIOCNOTTY;
  linux_record_tdep.ioctl_TIOCSETD = I386_RECORD_IOCTL_TIOCSETD;
  linux_record_tdep.ioctl_TIOCGETD = I386_RECORD_IOCTL_TIOCGETD;
  linux_record_tdep.ioctl_TCSBRKP = I386_RECORD_IOCTL_TCSBRKP;
  linux_record_tdep.ioctl_TIOCTTYGSTRUCT = I386_RECORD_IOCTL_TIOCTTYGSTRUCT;
  linux_record_tdep.ioctl_TIOCSBRK = I386_RECORD_IOCTL_TIOCSBRK;
  linux_record_tdep.ioctl_TIOCCBRK = I386_RECORD_IOCTL_TIOCCBRK;
  linux_record_tdep.ioctl_TIOCGSID = I386_RECORD_IOCTL_TIOCGSID;
  linux_record_tdep.ioctl_TCGETS2 = I386_RECORD_IOCTL_TCGETS2;
  linux_record_tdep.ioctl_TCSETS2 = I386_RECORD_IOCTL_TCSETS2;
  linux_record_tdep.ioctl_TCSETSW2 = I386_RECORD_IOCTL_TCSETSW2;
  linux_record_tdep.ioctl_TCSETSF2 = I386_RECORD_IOCTL_TCSETSF2;
  linux_record_tdep.ioctl_TIOCGPTN = I386_RECORD_IOCTL_TIOCGPTN;
  linux_record_tdep.ioctl_TIOCSPTLCK = I386_RECORD_IOCTL_TIOCSPTLCK;
  linux_record_tdep.ioctl_FIONCLEX = I386_RECORD_IOCTL_FIONCLEX;
  linux_record_tdep.ioctl_FIOCLEX = I386_RECORD_IOCTL_FIOCLEX;
  linux_record_tdep.ioctl_FIOASYNC = I386_RECORD_IOCTL_FIOASYNC;
  linux_record_tdep.ioctl_TIOCSERCONFIG = I386_RECORD_IOCTL_TIOCSERCONFIG;
  linux_record_tdep.ioctl_TIOCSERGWILD = I386_RECORD_IOCTL_TIOCSERGWILD;
  linux_record_tdep.ioctl_TIOCSERSWILD = I386_RECORD_IOCTL_TIOCSERSWILD;
  linux_record_tdep.ioctl_TIOCGLCKTRMIOS = I386_RECORD_IOCTL_TIOCGLCKTRMIOS;
  linux_record_tdep.ioctl_TIOCSLCKTRMIOS = I386_RECORD_IOCTL_TIOCSLCKTRMIOS;
  linux_record_tdep.ioctl_TIOCSERGSTRUCT = I386_RECORD_IOCTL_TIOCSERGSTRUCT;
  linux_record_tdep.ioctl_TIOCSERGETLSR = I386_RECORD_IOCTL_TIOCSERGETLSR;
  linux_record_tdep.ioctl_TIOCSERGETMULTI = I386_RECORD_IOCTL_TIOCSERGETMULTI;
  linux_record_tdep.ioctl_TIOCSERSETMULTI = I386_RECORD_IOCTL_TIOCSERSETMULTI;
  linux_record_tdep.ioctl_TIOCMIWAIT = I386_RECORD_IOCTL_TIOCMIWAIT;
  linux_record_tdep.ioctl_TIOCGICOUNT = I386_RECORD_IOCTL_TIOCGICOUNT;
  linux_record_tdep.ioctl_TIOCGHAYESESP = I386_RECORD_IOCTL_TIOCGHAYESESP;
  linux_record_tdep.ioctl_TIOCSHAYESESP = I386_RECORD_IOCTL_TIOCSHAYESESP;
  linux_record_tdep.ioctl_FIOQSIZE = I386_RECORD_IOCTL_FIOQSIZE;

  linux_record_tdep.arg1 = I386_EBX_REGNUM;
  linux_record_tdep.arg2 = I386_ECX_REGNUM;
  linux_record_tdep.arg3 = I386_EDX_REGNUM;
  linux_record_tdep.arg4 = I386_ESI_REGNUM;
  linux_record_tdep.arg5 = I386_EDI_REGNUM;

  tdep->i386_intx80_record = i386_linux_intx80_sysenter_record;
  tdep->i386_sysenter_record = i386_linux_intx80_sysenter_record;

@


1.58.10.2
log
@2008-12-28  Michael Snyder  <msnyder@@vmware.com>

	* Comments, spelling, white space clean-ups.
@
text
@d354 3
a356 3
/* Parse the arguments of current system call instruction and record
   the values of the registers and memory that will be changed into
   "record_arch_list".  This instruction is "int 0x80" (Linux
a357 1

d376 1
a376 1
  /* Record the return value of the system call.  */
d451 2
a452 2
/* These macros are the size of the type that will be used in a system
   call.  The values of these macros were obtained from Linux Kernel
d522 2
a523 2
   "sys_ioctl".  The values of these macros were obtained from Linux 
   Kernel source.  */
d617 1
a617 1
  /* Initialize the linux_record_tdep.  */
@


1.58.6.1
log
@2008-09-30  Hui Zhu  <teawater@@gmail.com>

	Add process record and replay to i386 architecture.
	* i386-linux-tdep.c (linux_record_tdep): New static variable.
	I386 Linux record target-dependent stuff.
	(i386_linux_intx80_sysenter_record): New function. Record the
	running message of I386 Linux system call.
	(i386_linux_init_ab): Initialize the linux_record_tdep. Add
	i386_linux_intx80_sysenter_record to struct tdep.
	* i386-tdep.c (i386_record_modrm, i386_record_lea_modrm_addr,
	i386_record_lea_modrm, i386_record): New functions. Record the
	running message of I386 instruction.
	(i386_gdbarch_init): Add i386_record to struct gdbarch.
	* i386-tdep.h (gdbarch_tdep): Add elements "i386_intx80_record"
	and "i386_sysenter_record" to be the interfaces that record the
	running message of instruction "intx80" and "sysenter".
	* gdbarch.sh: Change process_record and process_record_dasm
	to multi-arch model.
	* gdbarch.c, gdbarch.h: Regenerate.
@
text
@a39 4
#include "record.h"
#include "linux-record.h"
#include <stdint.h>

a348 31

/* Parse the arguments of current system call instruction and record the
   values of the registers and memory that will be changed in current system
   call instruction to "record_arch_list". This instruction is "int 0x80" (Linux
   Kernel2.4) or "sysenter" (Linux Kernel 2.6).
   Return -1 if something wrong. */

static linux_record_tdep_t linux_record_tdep;

static int
i386_linux_intx80_sysenter_record (void)
{
  int ret;
  uint32_t tmpu32;

  regcache_raw_read (record_regcache, I386_EAX_REGNUM, (gdb_byte *) & tmpu32);

  ret = record_linux_system_call (tmpu32, &linux_record_tdep);
  if (ret)
    {
      return ret;
    }

  /* Record the return of system call. */
  if (record_arch_list_add_reg (I386_EAX_REGNUM))
    {
      return -1;
    }

  return 0;
}
a415 138
/* These macros are the size of the type that will be use in system call. The values of
   these macros are gotten from Linux Kernel source. */
#define I386_RECORD_SIZE__old_kernel_stat	32
#define I386_RECORD_SIZE_tms			16
#define I386_RECORD_SIZE_loff_t			8
#define I386_RECORD_SIZE_flock			16
#define I386_RECORD_SIZE_oldold_utsname		45
#define I386_RECORD_SIZE_ustat			20
#define I386_RECORD_SIZE_old_sigaction		140
#define I386_RECORD_SIZE_old_sigset_t		128
#define I386_RECORD_SIZE_rlimit			8
#define I386_RECORD_SIZE_rusage			72
#define I386_RECORD_SIZE_timeval		8
#define I386_RECORD_SIZE_timezone		8
#define I386_RECORD_SIZE_old_gid_t		2
#define I386_RECORD_SIZE_old_uid_t		2
#define I386_RECORD_SIZE_fd_set			128
#define I386_RECORD_SIZE_dirent			268
#define I386_RECORD_SIZE_dirent64		276
#define I386_RECORD_SIZE_statfs			64
#define I386_RECORD_SIZE_statfs64		84
#define I386_RECORD_SIZE_sockaddr		16
#define I386_RECORD_SIZE_int			4
#define I386_RECORD_SIZE_long			4
#define I386_RECORD_SIZE_ulong			4
#define I386_RECORD_SIZE_msghdr			28
#define I386_RECORD_SIZE_itimerval		16
#define I386_RECORD_SIZE_stat			88
#define I386_RECORD_SIZE_old_utsname		325
#define I386_RECORD_SIZE_sysinfo		64
#define I386_RECORD_SIZE_msqid_ds		88
#define I386_RECORD_SIZE_shmid_ds		84
#define I386_RECORD_SIZE_new_utsname		390
#define I386_RECORD_SIZE_timex			128
#define I386_RECORD_SIZE_mem_dqinfo		24
#define I386_RECORD_SIZE_if_dqblk		68
#define I386_RECORD_SIZE_fs_quota_stat		68
#define I386_RECORD_SIZE_timespec		8
#define I386_RECORD_SIZE_pollfd			8
#define I386_RECORD_SIZE_NFS_FHSIZE		32
#define I386_RECORD_SIZE_knfsd_fh		132
#define I386_RECORD_SIZE_TASK_COMM_LEN		16
#define I386_RECORD_SIZE_sigaction		140
#define I386_RECORD_SIZE_sigset_t		8
#define I386_RECORD_SIZE_siginfo_t		128
#define I386_RECORD_SIZE_cap_user_data_t	12
#define I386_RECORD_SIZE_stack_t		12
#define I386_RECORD_SIZE_off_t			I386_RECORD_SIZE_long
#define I386_RECORD_SIZE_stat64			96
#define I386_RECORD_SIZE_gid_t			2
#define I386_RECORD_SIZE_uid_t			2
#define I386_RECORD_SIZE_PAGE_SIZE		4096
#define I386_RECORD_SIZE_flock64		24
#define I386_RECORD_SIZE_user_desc		16
#define I386_RECORD_SIZE_io_event		32
#define I386_RECORD_SIZE_iocb			64
#define I386_RECORD_SIZE_epoll_event		12
#define I386_RECORD_SIZE_itimerspec		(I386_RECORD_SIZE_timespec * 2)
#define I386_RECORD_SIZE_mq_attr		32
#define I386_RECORD_SIZE_siginfo		128
#define I386_RECORD_SIZE_termios		36
#define I386_RECORD_SIZE_termios2		44
#define I386_RECORD_SIZE_pid_t			4
#define I386_RECORD_SIZE_winsize		8
#define I386_RECORD_SIZE_char			8
#define I386_RECORD_SIZE_serial_struct		60
#define I386_RECORD_SIZE_serial_icounter_struct	80
#define I386_RECORD_SIZE_hayes_esp_config	12

/* These macros are the values of the second argument of system call
   "sys_ioctl". The values of these macros are gotten from Linux Kernel
   source. */
#define I386_RECORD_IOCTL_TCGETS		0x5401
#define I386_RECORD_IOCTL_TCSETS		0x5402
#define I386_RECORD_IOCTL_TCSETSW		0x5403
#define I386_RECORD_IOCTL_TCSETSF		0x5404
#define I386_RECORD_IOCTL_TCGETA		0x5405
#define I386_RECORD_IOCTL_TCSETA		0x5406
#define I386_RECORD_IOCTL_TCSETAW		0x5407
#define I386_RECORD_IOCTL_TCSETAF		0x5408
#define I386_RECORD_IOCTL_TCSBRK		0x5409
#define I386_RECORD_IOCTL_TCXONC		0x540A
#define I386_RECORD_IOCTL_TCFLSH		0x540B
#define I386_RECORD_IOCTL_TIOCEXCL		0x540C
#define I386_RECORD_IOCTL_TIOCNXCL		0x540D
#define I386_RECORD_IOCTL_TIOCSCTTY		0x540E
#define I386_RECORD_IOCTL_TIOCGPGRP		0x540F
#define I386_RECORD_IOCTL_TIOCSPGRP		0x5410
#define I386_RECORD_IOCTL_TIOCOUTQ		0x5411
#define I386_RECORD_IOCTL_TIOCSTI		0x5412
#define I386_RECORD_IOCTL_TIOCGWINSZ		0x5413
#define I386_RECORD_IOCTL_TIOCSWINSZ		0x5414
#define I386_RECORD_IOCTL_TIOCMGET		0x5415
#define I386_RECORD_IOCTL_TIOCMBIS		0x5416
#define I386_RECORD_IOCTL_TIOCMBIC		0x5417
#define I386_RECORD_IOCTL_TIOCMSET		0x5418
#define I386_RECORD_IOCTL_TIOCGSOFTCAR		0x5419
#define I386_RECORD_IOCTL_TIOCSSOFTCAR		0x541A
#define I386_RECORD_IOCTL_FIONREAD		0x541B
#define I386_RECORD_IOCTL_TIOCINQ		I386_RECORD_IOCTL_FIONREAD
#define I386_RECORD_IOCTL_TIOCLINUX		0x541C
#define I386_RECORD_IOCTL_TIOCCONS		0x541D
#define I386_RECORD_IOCTL_TIOCGSERIAL		0x541E
#define I386_RECORD_IOCTL_TIOCSSERIAL		0x541F
#define I386_RECORD_IOCTL_TIOCPKT		0x5420
#define I386_RECORD_IOCTL_FIONBIO		0x5421
#define I386_RECORD_IOCTL_TIOCNOTTY		0x5422
#define I386_RECORD_IOCTL_TIOCSETD		0x5423
#define I386_RECORD_IOCTL_TIOCGETD		0x5424
#define I386_RECORD_IOCTL_TCSBRKP		0x5425
#define I386_RECORD_IOCTL_TIOCTTYGSTRUCT 	0x5426
#define I386_RECORD_IOCTL_TIOCSBRK		0x5427
#define I386_RECORD_IOCTL_TIOCCBRK		0x5428
#define I386_RECORD_IOCTL_TIOCGSID		0x5429
#define I386_RECORD_IOCTL_TCGETS2		0x802c542a
#define I386_RECORD_IOCTL_TCSETS2		0x402c542b
#define I386_RECORD_IOCTL_TCSETSW2		0x402c542c
#define I386_RECORD_IOCTL_TCSETSF2		0x402c542d
#define I386_RECORD_IOCTL_TIOCGPTN		0x80045430
#define I386_RECORD_IOCTL_TIOCSPTLCK		0x40045431
#define I386_RECORD_IOCTL_FIONCLEX		0x5450
#define I386_RECORD_IOCTL_FIOCLEX		0x5451
#define I386_RECORD_IOCTL_FIOASYNC		0x5452
#define I386_RECORD_IOCTL_TIOCSERCONFIG		0x5453
#define I386_RECORD_IOCTL_TIOCSERGWILD		0x5454
#define I386_RECORD_IOCTL_TIOCSERSWILD		0x5455
#define I386_RECORD_IOCTL_TIOCGLCKTRMIOS	0x5456
#define I386_RECORD_IOCTL_TIOCSLCKTRMIOS	0x5457
#define I386_RECORD_IOCTL_TIOCSERGSTRUCT	0x5458
#define I386_RECORD_IOCTL_TIOCSERGETLSR   	0x5459
#define I386_RECORD_IOCTL_TIOCSERGETMULTI	0x545A
#define I386_RECORD_IOCTL_TIOCSERSETMULTI	0x545B
#define I386_RECORD_IOCTL_TIOCMIWAIT		0x545C
#define I386_RECORD_IOCTL_TIOCGICOUNT		0x545D
#define I386_RECORD_IOCTL_TIOCGHAYESESP		0x545E
#define I386_RECORD_IOCTL_TIOCSHAYESESP		0x545F
#define I386_RECORD_IOCTL_FIOQSIZE		0x5460

a442 144
  /* Initial the linux_record_tdep */
  linux_record_tdep.size__old_kernel_stat = I386_RECORD_SIZE__old_kernel_stat;
  linux_record_tdep.size_tms = I386_RECORD_SIZE_tms;
  linux_record_tdep.size_loff_t = I386_RECORD_SIZE_loff_t;
  linux_record_tdep.size_flock = I386_RECORD_SIZE_flock;
  linux_record_tdep.size_oldold_utsname = I386_RECORD_SIZE_oldold_utsname;
  linux_record_tdep.size_ustat = I386_RECORD_SIZE_ustat;
  linux_record_tdep.size_old_sigaction = I386_RECORD_SIZE_old_sigaction;
  linux_record_tdep.size_old_sigset_t = I386_RECORD_SIZE_old_sigset_t;
  linux_record_tdep.size_rlimit = I386_RECORD_SIZE_rlimit;
  linux_record_tdep.size_rusage = I386_RECORD_SIZE_rusage;
  linux_record_tdep.size_timeval = I386_RECORD_SIZE_timeval;
  linux_record_tdep.size_timezone = I386_RECORD_SIZE_timezone;
  linux_record_tdep.size_old_gid_t = I386_RECORD_SIZE_old_gid_t;
  linux_record_tdep.size_old_uid_t = I386_RECORD_SIZE_old_uid_t;
  linux_record_tdep.size_fd_set = I386_RECORD_SIZE_fd_set;
  linux_record_tdep.size_dirent = I386_RECORD_SIZE_dirent;
  linux_record_tdep.size_dirent64 = I386_RECORD_SIZE_dirent64;
  linux_record_tdep.size_statfs = I386_RECORD_SIZE_statfs;
  linux_record_tdep.size_statfs64 = I386_RECORD_SIZE_statfs64;
  linux_record_tdep.size_sockaddr = I386_RECORD_SIZE_sockaddr;
  linux_record_tdep.size_int = I386_RECORD_SIZE_int;
  linux_record_tdep.size_long = I386_RECORD_SIZE_long;
  linux_record_tdep.size_ulong = I386_RECORD_SIZE_ulong;
  linux_record_tdep.size_msghdr = I386_RECORD_SIZE_msghdr;
  linux_record_tdep.size_itimerval = I386_RECORD_SIZE_itimerval;
  linux_record_tdep.size_stat = I386_RECORD_SIZE_stat;
  linux_record_tdep.size_old_utsname = I386_RECORD_SIZE_old_utsname;
  linux_record_tdep.size_sysinfo = I386_RECORD_SIZE_sysinfo;
  linux_record_tdep.size_msqid_ds = I386_RECORD_SIZE_msqid_ds;
  linux_record_tdep.size_shmid_ds = I386_RECORD_SIZE_shmid_ds;
  linux_record_tdep.size_new_utsname = I386_RECORD_SIZE_new_utsname;
  linux_record_tdep.size_timex = I386_RECORD_SIZE_timex;
  linux_record_tdep.size_mem_dqinfo = I386_RECORD_SIZE_mem_dqinfo;
  linux_record_tdep.size_if_dqblk = I386_RECORD_SIZE_if_dqblk;
  linux_record_tdep.size_fs_quota_stat = I386_RECORD_SIZE_fs_quota_stat;
  linux_record_tdep.size_timespec = I386_RECORD_SIZE_timespec;
  linux_record_tdep.size_pollfd = I386_RECORD_SIZE_pollfd;
  linux_record_tdep.size_NFS_FHSIZE = I386_RECORD_SIZE_NFS_FHSIZE;
  linux_record_tdep.size_knfsd_fh = I386_RECORD_SIZE_knfsd_fh;
  linux_record_tdep.size_TASK_COMM_LEN = I386_RECORD_SIZE_TASK_COMM_LEN;
  linux_record_tdep.size_sigaction = I386_RECORD_SIZE_sigaction;
  linux_record_tdep.size_sigset_t = I386_RECORD_SIZE_sigset_t;
  linux_record_tdep.size_siginfo_t = I386_RECORD_SIZE_siginfo_t;
  linux_record_tdep.size_cap_user_data_t = I386_RECORD_SIZE_cap_user_data_t;
  linux_record_tdep.size_stack_t = I386_RECORD_SIZE_stack_t;
  linux_record_tdep.size_off_t = I386_RECORD_SIZE_off_t;
  linux_record_tdep.size_stat64 = I386_RECORD_SIZE_stat64;
  linux_record_tdep.size_gid_t = I386_RECORD_SIZE_gid_t;
  linux_record_tdep.size_uid_t = I386_RECORD_SIZE_uid_t;
  linux_record_tdep.size_PAGE_SIZE = I386_RECORD_SIZE_PAGE_SIZE;
  linux_record_tdep.size_flock64 = I386_RECORD_SIZE_flock64;
  linux_record_tdep.size_user_desc = I386_RECORD_SIZE_user_desc;
  linux_record_tdep.size_io_event = I386_RECORD_SIZE_io_event;
  linux_record_tdep.size_iocb = I386_RECORD_SIZE_iocb;
  linux_record_tdep.size_epoll_event = I386_RECORD_SIZE_epoll_event;
  linux_record_tdep.size_itimerspec = I386_RECORD_SIZE_itimerspec;
  linux_record_tdep.size_mq_attr = I386_RECORD_SIZE_mq_attr;
  linux_record_tdep.size_siginfo = I386_RECORD_SIZE_siginfo;
  linux_record_tdep.size_termios = I386_RECORD_SIZE_termios;
  linux_record_tdep.size_termios2 = I386_RECORD_SIZE_termios2;
  linux_record_tdep.size_pid_t = I386_RECORD_SIZE_pid_t;
  linux_record_tdep.size_winsize = I386_RECORD_SIZE_winsize;
  linux_record_tdep.size_char = I386_RECORD_SIZE_char;
  linux_record_tdep.size_serial_struct = I386_RECORD_SIZE_serial_struct;
  linux_record_tdep.size_serial_icounter_struct =
    I386_RECORD_SIZE_serial_icounter_struct;
  linux_record_tdep.size_hayes_esp_config = I386_RECORD_SIZE_hayes_esp_config;

  linux_record_tdep.ioctl_TCGETS = I386_RECORD_IOCTL_TCGETS;
  linux_record_tdep.ioctl_TCSETS = I386_RECORD_IOCTL_TCSETS;
  linux_record_tdep.ioctl_TCSETSW = I386_RECORD_IOCTL_TCSETSW;
  linux_record_tdep.ioctl_TCSETSF = I386_RECORD_IOCTL_TCSETSF;
  linux_record_tdep.ioctl_TCGETA = I386_RECORD_IOCTL_TCGETA;
  linux_record_tdep.ioctl_TCSETA = I386_RECORD_IOCTL_TCSETA;
  linux_record_tdep.ioctl_TCSETAW = I386_RECORD_IOCTL_TCSETAW;
  linux_record_tdep.ioctl_TCSETAF = I386_RECORD_IOCTL_TCSETAF;
  linux_record_tdep.ioctl_TCSBRK = I386_RECORD_IOCTL_TCSBRK;
  linux_record_tdep.ioctl_TCXONC = I386_RECORD_IOCTL_TCXONC;
  linux_record_tdep.ioctl_TCFLSH = I386_RECORD_IOCTL_TCFLSH;
  linux_record_tdep.ioctl_TIOCEXCL = I386_RECORD_IOCTL_TIOCEXCL;
  linux_record_tdep.ioctl_TIOCNXCL = I386_RECORD_IOCTL_TIOCNXCL;
  linux_record_tdep.ioctl_TIOCSCTTY = I386_RECORD_IOCTL_TIOCSCTTY;
  linux_record_tdep.ioctl_TIOCGPGRP = I386_RECORD_IOCTL_TIOCGPGRP;
  linux_record_tdep.ioctl_TIOCSPGRP = I386_RECORD_IOCTL_TIOCSPGRP;
  linux_record_tdep.ioctl_TIOCOUTQ = I386_RECORD_IOCTL_TIOCOUTQ;
  linux_record_tdep.ioctl_TIOCSTI = I386_RECORD_IOCTL_TIOCSTI;
  linux_record_tdep.ioctl_TIOCGWINSZ = I386_RECORD_IOCTL_TIOCGWINSZ;
  linux_record_tdep.ioctl_TIOCSWINSZ = I386_RECORD_IOCTL_TIOCSWINSZ;
  linux_record_tdep.ioctl_TIOCMGET = I386_RECORD_IOCTL_TIOCMGET;
  linux_record_tdep.ioctl_TIOCMBIS = I386_RECORD_IOCTL_TIOCMBIS;
  linux_record_tdep.ioctl_TIOCMBIC = I386_RECORD_IOCTL_TIOCMBIC;
  linux_record_tdep.ioctl_TIOCMSET = I386_RECORD_IOCTL_TIOCMSET;
  linux_record_tdep.ioctl_TIOCGSOFTCAR = I386_RECORD_IOCTL_TIOCGSOFTCAR;
  linux_record_tdep.ioctl_TIOCSSOFTCAR = I386_RECORD_IOCTL_TIOCSSOFTCAR;
  linux_record_tdep.ioctl_FIONREAD = I386_RECORD_IOCTL_FIONREAD;
  linux_record_tdep.ioctl_TIOCINQ = I386_RECORD_IOCTL_TIOCINQ;
  linux_record_tdep.ioctl_TIOCLINUX = I386_RECORD_IOCTL_TIOCLINUX;
  linux_record_tdep.ioctl_TIOCCONS = I386_RECORD_IOCTL_TIOCCONS;
  linux_record_tdep.ioctl_TIOCGSERIAL = I386_RECORD_IOCTL_TIOCGSERIAL;
  linux_record_tdep.ioctl_TIOCSSERIAL = I386_RECORD_IOCTL_TIOCSSERIAL;
  linux_record_tdep.ioctl_TIOCPKT = I386_RECORD_IOCTL_TIOCPKT;
  linux_record_tdep.ioctl_FIONBIO = I386_RECORD_IOCTL_FIONBIO;
  linux_record_tdep.ioctl_TIOCNOTTY = I386_RECORD_IOCTL_TIOCNOTTY;
  linux_record_tdep.ioctl_TIOCSETD = I386_RECORD_IOCTL_TIOCSETD;
  linux_record_tdep.ioctl_TIOCGETD = I386_RECORD_IOCTL_TIOCGETD;
  linux_record_tdep.ioctl_TCSBRKP = I386_RECORD_IOCTL_TCSBRKP;
  linux_record_tdep.ioctl_TIOCTTYGSTRUCT = I386_RECORD_IOCTL_TIOCTTYGSTRUCT;
  linux_record_tdep.ioctl_TIOCSBRK = I386_RECORD_IOCTL_TIOCSBRK;
  linux_record_tdep.ioctl_TIOCCBRK = I386_RECORD_IOCTL_TIOCCBRK;
  linux_record_tdep.ioctl_TIOCGSID = I386_RECORD_IOCTL_TIOCGSID;
  linux_record_tdep.ioctl_TCGETS2 = I386_RECORD_IOCTL_TCGETS2;
  linux_record_tdep.ioctl_TCSETS2 = I386_RECORD_IOCTL_TCSETS2;
  linux_record_tdep.ioctl_TCSETSW2 = I386_RECORD_IOCTL_TCSETSW2;
  linux_record_tdep.ioctl_TCSETSF2 = I386_RECORD_IOCTL_TCSETSF2;
  linux_record_tdep.ioctl_TIOCGPTN = I386_RECORD_IOCTL_TIOCGPTN;
  linux_record_tdep.ioctl_TIOCSPTLCK = I386_RECORD_IOCTL_TIOCSPTLCK;
  linux_record_tdep.ioctl_FIONCLEX = I386_RECORD_IOCTL_FIONCLEX;
  linux_record_tdep.ioctl_FIOCLEX = I386_RECORD_IOCTL_FIOCLEX;
  linux_record_tdep.ioctl_FIOASYNC = I386_RECORD_IOCTL_FIOASYNC;
  linux_record_tdep.ioctl_TIOCSERCONFIG = I386_RECORD_IOCTL_TIOCSERCONFIG;
  linux_record_tdep.ioctl_TIOCSERGWILD = I386_RECORD_IOCTL_TIOCSERGWILD;
  linux_record_tdep.ioctl_TIOCSERSWILD = I386_RECORD_IOCTL_TIOCSERSWILD;
  linux_record_tdep.ioctl_TIOCGLCKTRMIOS = I386_RECORD_IOCTL_TIOCGLCKTRMIOS;
  linux_record_tdep.ioctl_TIOCSLCKTRMIOS = I386_RECORD_IOCTL_TIOCSLCKTRMIOS;
  linux_record_tdep.ioctl_TIOCSERGSTRUCT = I386_RECORD_IOCTL_TIOCSERGSTRUCT;
  linux_record_tdep.ioctl_TIOCSERGETLSR = I386_RECORD_IOCTL_TIOCSERGETLSR;
  linux_record_tdep.ioctl_TIOCSERGETMULTI = I386_RECORD_IOCTL_TIOCSERGETMULTI;
  linux_record_tdep.ioctl_TIOCSERSETMULTI = I386_RECORD_IOCTL_TIOCSERSETMULTI;
  linux_record_tdep.ioctl_TIOCMIWAIT = I386_RECORD_IOCTL_TIOCMIWAIT;
  linux_record_tdep.ioctl_TIOCGICOUNT = I386_RECORD_IOCTL_TIOCGICOUNT;
  linux_record_tdep.ioctl_TIOCGHAYESESP = I386_RECORD_IOCTL_TIOCGHAYESESP;
  linux_record_tdep.ioctl_TIOCSHAYESESP = I386_RECORD_IOCTL_TIOCSHAYESESP;
  linux_record_tdep.ioctl_FIOQSIZE = I386_RECORD_IOCTL_FIOQSIZE;

  linux_record_tdep.arg1 = I386_EBX_REGNUM;
  linux_record_tdep.arg2 = I386_ECX_REGNUM;
  linux_record_tdep.arg3 = I386_EDX_REGNUM;
  linux_record_tdep.arg4 = I386_ESI_REGNUM;
  linux_record_tdep.arg5 = I386_EDI_REGNUM;

  tdep->i386_intx80_record = i386_linux_intx80_sysenter_record;
  tdep->i386_sysenter_record = i386_linux_intx80_sysenter_record;

@


1.58.4.1
log
@Add record target to GDB.
@
text
@a39 4
#include "record.h"
#include "linux-record.h"
#include <stdint.h>

a348 31

/* Parse the arguments of current system call instruction and record the
   values of the registers and memory that will be changed in current system
   call instruction to "record_arch_list". This instruction is "int 0x80" (Linux
   Kernel2.4) or "sysenter" (Linux Kernel 2.6).
   Return -1 if something wrong. */

static linux_record_tdep_t linux_record_tdep;

static int
i386_linux_intx80_sysenter_record (void)
{
  int ret;
  uint32_t tmpu32;

  regcache_raw_read (record_regcache, I386_EAX_REGNUM, (gdb_byte *) & tmpu32);

  ret = record_linux_system_call (tmpu32, &linux_record_tdep);
  if (ret)
    {
      return ret;
    }

  /* Record the return of system call. */
  if (record_arch_list_add_reg (I386_EAX_REGNUM))
    {
      return -1;
    }

  return 0;
}
a415 70
/* These macros are the size of the type that will be use in system call. The values of
   these macros are gotten from Linux Kernel source. */
#define I386_RECORD_SIZE__old_kernel_stat	32
#define I386_RECORD_SIZE_tms			16
#define I386_RECORD_SIZE_loff_t			8
#define I386_RECORD_SIZE_flock			16
#define I386_RECORD_SIZE_oldold_utsname		45
#define I386_RECORD_SIZE_ustat			20
#define I386_RECORD_SIZE_old_sigaction		140
#define I386_RECORD_SIZE_old_sigset_t		128
#define I386_RECORD_SIZE_rlimit			8
#define I386_RECORD_SIZE_rusage			72
#define I386_RECORD_SIZE_timeval		8
#define I386_RECORD_SIZE_timezone		8
#define I386_RECORD_SIZE_old_gid_t		2
#define I386_RECORD_SIZE_old_uid_t		2
#define I386_RECORD_SIZE_fd_set			128
#define I386_RECORD_SIZE_dirent			268
#define I386_RECORD_SIZE_dirent64		276
#define I386_RECORD_SIZE_statfs			64
#define I386_RECORD_SIZE_statfs64		84
#define I386_RECORD_SIZE_sockaddr		16
#define I386_RECORD_SIZE_int			4
#define I386_RECORD_SIZE_long			4
#define I386_RECORD_SIZE_ulong			4
#define I386_RECORD_SIZE_msghdr			28
#define I386_RECORD_SIZE_itimerval		16
#define I386_RECORD_SIZE_stat			88
#define I386_RECORD_SIZE_old_utsname		325
#define I386_RECORD_SIZE_sysinfo		64
#define I386_RECORD_SIZE_msqid_ds		88
#define I386_RECORD_SIZE_shmid_ds		84
#define I386_RECORD_SIZE_new_utsname		390
#define I386_RECORD_SIZE_timex			128
#define I386_RECORD_SIZE_mem_dqinfo		24
#define I386_RECORD_SIZE_if_dqblk		68
#define I386_RECORD_SIZE_fs_quota_stat		68
#define I386_RECORD_SIZE_timespec		8
#define I386_RECORD_SIZE_pollfd			8
#define I386_RECORD_SIZE_NFS_FHSIZE		32
#define I386_RECORD_SIZE_knfsd_fh		132
#define I386_RECORD_SIZE_TASK_COMM_LEN		16
#define I386_RECORD_SIZE_sigaction		140
#define I386_RECORD_SIZE_sigset_t		8
#define I386_RECORD_SIZE_siginfo_t		128
#define I386_RECORD_SIZE_cap_user_data_t	12
#define I386_RECORD_SIZE_stack_t		12
#define I386_RECORD_SIZE_off_t			I386_RECORD_SIZE_long
#define I386_RECORD_SIZE_stat64			96
#define I386_RECORD_SIZE_gid_t			2
#define I386_RECORD_SIZE_uid_t			2
#define I386_RECORD_SIZE_PAGE_SIZE		4096
#define I386_RECORD_SIZE_flock64		24
#define I386_RECORD_SIZE_user_desc		16
#define I386_RECORD_SIZE_io_event		32
#define I386_RECORD_SIZE_iocb			64
#define I386_RECORD_SIZE_epoll_event		12
#define I386_RECORD_SIZE_itimerspec		(I386_RECORD_SIZE_timespec * 2)
#define I386_RECORD_SIZE_mq_attr		32
#define I386_RECORD_SIZE_siginfo		128

/* These macros are the values of the second argument of system call
   "sys_ioctl". The values of these macros are gotten from Linux Kernel
   source. */
#define I386_RECORD_IOCTL_FIONCLEX	0x5450
#define I386_RECORD_IOCTL_FIOCLEX	0x5451
#define I386_RECORD_IOCTL_FIONBIO	0x5421
#define I386_RECORD_IOCTL_FIOASYNC	0x5452
#define I386_RECORD_IOCTL_FIOQSIZE	0x5460

a442 75
  /* Initial the linux_record_tdep */
  linux_record_tdep.size__old_kernel_stat = I386_RECORD_SIZE__old_kernel_stat;
  linux_record_tdep.size_tms = I386_RECORD_SIZE_tms;
  linux_record_tdep.size_loff_t = I386_RECORD_SIZE_loff_t;
  linux_record_tdep.size_flock = I386_RECORD_SIZE_flock;
  linux_record_tdep.size_oldold_utsname = I386_RECORD_SIZE_oldold_utsname;
  linux_record_tdep.size_ustat = I386_RECORD_SIZE_ustat;
  linux_record_tdep.size_old_sigaction = I386_RECORD_SIZE_old_sigaction;
  linux_record_tdep.size_old_sigset_t = I386_RECORD_SIZE_old_sigset_t;
  linux_record_tdep.size_rlimit = I386_RECORD_SIZE_rlimit;
  linux_record_tdep.size_rusage = I386_RECORD_SIZE_rusage;
  linux_record_tdep.size_timeval = I386_RECORD_SIZE_timeval;
  linux_record_tdep.size_timezone = I386_RECORD_SIZE_timezone;
  linux_record_tdep.size_old_gid_t = I386_RECORD_SIZE_old_gid_t;
  linux_record_tdep.size_old_uid_t = I386_RECORD_SIZE_old_uid_t;
  linux_record_tdep.size_fd_set = I386_RECORD_SIZE_fd_set;
  linux_record_tdep.size_dirent = I386_RECORD_SIZE_dirent;
  linux_record_tdep.size_dirent64 = I386_RECORD_SIZE_dirent64;
  linux_record_tdep.size_statfs = I386_RECORD_SIZE_statfs;
  linux_record_tdep.size_statfs64 = I386_RECORD_SIZE_statfs64;
  linux_record_tdep.size_sockaddr = I386_RECORD_SIZE_sockaddr;
  linux_record_tdep.size_int = I386_RECORD_SIZE_int;
  linux_record_tdep.size_long = I386_RECORD_SIZE_long;
  linux_record_tdep.size_ulong = I386_RECORD_SIZE_ulong;
  linux_record_tdep.size_msghdr = I386_RECORD_SIZE_msghdr;
  linux_record_tdep.size_itimerval = I386_RECORD_SIZE_itimerval;
  linux_record_tdep.size_stat = I386_RECORD_SIZE_stat;
  linux_record_tdep.size_old_utsname = I386_RECORD_SIZE_old_utsname;
  linux_record_tdep.size_sysinfo = I386_RECORD_SIZE_sysinfo;
  linux_record_tdep.size_msqid_ds = I386_RECORD_SIZE_msqid_ds;
  linux_record_tdep.size_shmid_ds = I386_RECORD_SIZE_shmid_ds;
  linux_record_tdep.size_new_utsname = I386_RECORD_SIZE_new_utsname;
  linux_record_tdep.size_timex = I386_RECORD_SIZE_timex;
  linux_record_tdep.size_mem_dqinfo = I386_RECORD_SIZE_mem_dqinfo;
  linux_record_tdep.size_if_dqblk = I386_RECORD_SIZE_if_dqblk;
  linux_record_tdep.size_fs_quota_stat = I386_RECORD_SIZE_fs_quota_stat;
  linux_record_tdep.size_timespec = I386_RECORD_SIZE_timespec;
  linux_record_tdep.size_pollfd = I386_RECORD_SIZE_pollfd;
  linux_record_tdep.size_NFS_FHSIZE = I386_RECORD_SIZE_NFS_FHSIZE;
  linux_record_tdep.size_knfsd_fh = I386_RECORD_SIZE_knfsd_fh;
  linux_record_tdep.size_TASK_COMM_LEN = I386_RECORD_SIZE_TASK_COMM_LEN;
  linux_record_tdep.size_sigaction = I386_RECORD_SIZE_sigaction;
  linux_record_tdep.size_sigset_t = I386_RECORD_SIZE_sigset_t;
  linux_record_tdep.size_siginfo_t = I386_RECORD_SIZE_siginfo_t;
  linux_record_tdep.size_cap_user_data_t = I386_RECORD_SIZE_cap_user_data_t;
  linux_record_tdep.size_stack_t = I386_RECORD_SIZE_stack_t;
  linux_record_tdep.size_off_t = I386_RECORD_SIZE_off_t;
  linux_record_tdep.size_stat64 = I386_RECORD_SIZE_stat64;
  linux_record_tdep.size_gid_t = I386_RECORD_SIZE_gid_t;
  linux_record_tdep.size_uid_t = I386_RECORD_SIZE_uid_t;
  linux_record_tdep.size_PAGE_SIZE = I386_RECORD_SIZE_PAGE_SIZE;
  linux_record_tdep.size_flock64 = I386_RECORD_SIZE_flock64;
  linux_record_tdep.size_user_desc = I386_RECORD_SIZE_user_desc;
  linux_record_tdep.size_io_event = I386_RECORD_SIZE_io_event;
  linux_record_tdep.size_iocb = I386_RECORD_SIZE_iocb;
  linux_record_tdep.size_epoll_event = I386_RECORD_SIZE_epoll_event;
  linux_record_tdep.size_itimerspec = I386_RECORD_SIZE_itimerspec;
  linux_record_tdep.size_mq_attr = I386_RECORD_SIZE_mq_attr;
  linux_record_tdep.size_siginfo = I386_RECORD_SIZE_siginfo;

  linux_record_tdep.ioctl_FIONCLEX = I386_RECORD_IOCTL_FIONCLEX;
  linux_record_tdep.ioctl_FIOCLEX = I386_RECORD_IOCTL_FIOCLEX;
  linux_record_tdep.ioctl_FIONBIO = I386_RECORD_IOCTL_FIONBIO;
  linux_record_tdep.ioctl_FIOASYNC = I386_RECORD_IOCTL_FIOASYNC;
  linux_record_tdep.ioctl_FIOQSIZE = I386_RECORD_IOCTL_FIOQSIZE;

  linux_record_tdep.arg1 = I386_EBX_REGNUM;
  linux_record_tdep.arg2 = I386_ECX_REGNUM;
  linux_record_tdep.arg3 = I386_EDX_REGNUM;
  linux_record_tdep.arg4 = I386_ESI_REGNUM;
  linux_record_tdep.arg5 = I386_EDI_REGNUM;

  tdep->i386_intx80_record = i386_linux_intx80_sysenter_record;
  tdep->i386_sysenter_record = i386_linux_intx80_sysenter_record;

@


1.58.4.2
log
@	Support more ioctl requests in record target.

	* i386-linux-tdep.c (I386_RECORD_SIZE_termios,
	I386_RECORD_SIZE_termios2, I386_RECORD_SIZE_pid_t,
	I386_RECORD_SIZE_winsize, I386_RECORD_SIZE_char,
	I386_RECORD_SIZE_serial_struct,
	I386_RECORD_SIZE_serial_icounter_struct,
	I386_RECORD_SIZE_hayes_esp_config): New macros. Sizes of some types in
	I386.
	(I386_RECORD_IOCTL_TCGETS,
	I386_RECORD_IOCTL_TCSETS,
	I386_RECORD_IOCTL_TCSETSW,
	I386_RECORD_IOCTL_TCSETSF,
	I386_RECORD_IOCTL_TCGETA,
	I386_RECORD_IOCTL_TCSETA,
	I386_RECORD_IOCTL_TCSETAW,
	I386_RECORD_IOCTL_TCSETAF,
	I386_RECORD_IOCTL_TCSBRK,
	I386_RECORD_IOCTL_TCXONC,
	I386_RECORD_IOCTL_TCFLSH,
	I386_RECORD_IOCTL_TIOCEXCL,
	I386_RECORD_IOCTL_TIOCNXCL,
	I386_RECORD_IOCTL_TIOCSCTTY,
	I386_RECORD_IOCTL_TIOCGPGRP,
	I386_RECORD_IOCTL_TIOCSPGRP,
	I386_RECORD_IOCTL_TIOCOUTQ,
	I386_RECORD_IOCTL_TIOCSTI,
	I386_RECORD_IOCTL_TIOCGWINSZ,
	I386_RECORD_IOCTL_TIOCSWINSZ,
	I386_RECORD_IOCTL_TIOCMGET,
	I386_RECORD_IOCTL_TIOCMBIS,
	I386_RECORD_IOCTL_TIOCMBIC,
	I386_RECORD_IOCTL_TIOCMSET,
	I386_RECORD_IOCTL_TIOCGSOFTCAR,
	I386_RECORD_IOCTL_TIOCSSOFTCAR,
	I386_RECORD_IOCTL_FIONREAD,
	I386_RECORD_IOCTL_TIOCINQ,
	I386_RECORD_IOCTL_TIOCLINUX,
	I386_RECORD_IOCTL_TIOCCONS,
	I386_RECORD_IOCTL_TIOCGSERIAL,
	I386_RECORD_IOCTL_TIOCSSERIAL,
	I386_RECORD_IOCTL_TIOCPKT,
	I386_RECORD_IOCTL_FIONBIO,
	I386_RECORD_IOCTL_TIOCNOTTY,
	I386_RECORD_IOCTL_TIOCSETD,
	I386_RECORD_IOCTL_TIOCGETD,
	I386_RECORD_IOCTL_TCSBRKP,
	I386_RECORD_IOCTL_TIOCTTYGSTRUCT,
	I386_RECORD_IOCTL_TIOCSBRK,
	I386_RECORD_IOCTL_TIOCCBRK,
	I386_RECORD_IOCTL_TIOCGSID,
	I386_RECORD_IOCTL_TCGETS2,
	I386_RECORD_IOCTL_TCSETS2,
	I386_RECORD_IOCTL_TCSETSW2,
	I386_RECORD_IOCTL_TCSETSF2,
	I386_RECORD_IOCTL_TIOCGPTN,
	I386_RECORD_IOCTL_TIOCSPTLCK,
	I386_RECORD_IOCTL_FIONCLEX,
	I386_RECORD_IOCTL_FIOCLEX,
	I386_RECORD_IOCTL_FIOASYNC,
	I386_RECORD_IOCTL_TIOCSERCONFIG,
	I386_RECORD_IOCTL_TIOCSERGWILD,
	I386_RECORD_IOCTL_TIOCSERSWILD,
	I386_RECORD_IOCTL_TIOCGLCKTRMIOS,
	I386_RECORD_IOCTL_TIOCSLCKTRMIOS,
	I386_RECORD_IOCTL_TIOCSERGSTRUCT,
	I386_RECORD_IOCTL_TIOCSERGETLSR,
	I386_RECORD_IOCTL_TIOCSERGETMULTI,
	I386_RECORD_IOCTL_TIOCSERSETMULTI,
	I386_RECORD_IOCTL_TIOCMIWAIT,
	I386_RECORD_IOCTL_TIOCGICOUNT,
	I386_RECORD_IOCTL_TIOCGHAYESESP,
	I386_RECORD_IOCTL_TIOCSHAYESESP,
	I386_RECORD_IOCTL_FIOQSIZE): New macros. Ioctl request numbers in I386.
	(i386_linux_init_abi): Initialize the size of some types and ioctl
	request numbers in linux_record_tdep.
	linux-record.c (record_linux_system_call): Record more ioctl requests.
	linux-record.h (linux_record_tdep_s): Add size of some types and ioctl
	request numbers.

	Add a cleanup in function "record_wait".

	* record.c (record_wait_cleanups): New function. Clean for function
	"record_wait".
	(record_wait): Add a cleanup to call function "record_wait_cleanups".

	i386-tdep.c (i386_record_lea_modrm): If this is not a error, output
	warning message of "can't get the value of the segment register" just
	when record_debug is set.

	record.c (record_message): Change output message from "pause" to
	"stop".

	linux-record.c (record_linux_system_call): Change output message from
	"pause" to "stop".

	linux-record.c (record_linux_system_call): Make query message for
	syscall munmap more clear.

	record.c (_initialize_record): Fix a little bug.
@
text
@a510 8
#define I386_RECORD_SIZE_termios		36
#define I386_RECORD_SIZE_termios2		44
#define I386_RECORD_SIZE_pid_t			4
#define I386_RECORD_SIZE_winsize		8
#define I386_RECORD_SIZE_char			8
#define I386_RECORD_SIZE_serial_struct		60
#define I386_RECORD_SIZE_serial_icounter_struct	80
#define I386_RECORD_SIZE_hayes_esp_config	12
d515 5
a519 65
#define I386_RECORD_IOCTL_TCGETS		0x5401
#define I386_RECORD_IOCTL_TCSETS		0x5402
#define I386_RECORD_IOCTL_TCSETSW		0x5403
#define I386_RECORD_IOCTL_TCSETSF		0x5404
#define I386_RECORD_IOCTL_TCGETA		0x5405
#define I386_RECORD_IOCTL_TCSETA		0x5406
#define I386_RECORD_IOCTL_TCSETAW		0x5407
#define I386_RECORD_IOCTL_TCSETAF		0x5408
#define I386_RECORD_IOCTL_TCSBRK		0x5409
#define I386_RECORD_IOCTL_TCXONC		0x540A
#define I386_RECORD_IOCTL_TCFLSH		0x540B
#define I386_RECORD_IOCTL_TIOCEXCL		0x540C
#define I386_RECORD_IOCTL_TIOCNXCL		0x540D
#define I386_RECORD_IOCTL_TIOCSCTTY		0x540E
#define I386_RECORD_IOCTL_TIOCGPGRP		0x540F
#define I386_RECORD_IOCTL_TIOCSPGRP		0x5410
#define I386_RECORD_IOCTL_TIOCOUTQ		0x5411
#define I386_RECORD_IOCTL_TIOCSTI		0x5412
#define I386_RECORD_IOCTL_TIOCGWINSZ		0x5413
#define I386_RECORD_IOCTL_TIOCSWINSZ		0x5414
#define I386_RECORD_IOCTL_TIOCMGET		0x5415
#define I386_RECORD_IOCTL_TIOCMBIS		0x5416
#define I386_RECORD_IOCTL_TIOCMBIC		0x5417
#define I386_RECORD_IOCTL_TIOCMSET		0x5418
#define I386_RECORD_IOCTL_TIOCGSOFTCAR		0x5419
#define I386_RECORD_IOCTL_TIOCSSOFTCAR		0x541A
#define I386_RECORD_IOCTL_FIONREAD		0x541B
#define I386_RECORD_IOCTL_TIOCINQ		I386_RECORD_IOCTL_FIONREAD
#define I386_RECORD_IOCTL_TIOCLINUX		0x541C
#define I386_RECORD_IOCTL_TIOCCONS		0x541D
#define I386_RECORD_IOCTL_TIOCGSERIAL		0x541E
#define I386_RECORD_IOCTL_TIOCSSERIAL		0x541F
#define I386_RECORD_IOCTL_TIOCPKT		0x5420
#define I386_RECORD_IOCTL_FIONBIO		0x5421
#define I386_RECORD_IOCTL_TIOCNOTTY		0x5422
#define I386_RECORD_IOCTL_TIOCSETD		0x5423
#define I386_RECORD_IOCTL_TIOCGETD		0x5424
#define I386_RECORD_IOCTL_TCSBRKP		0x5425
#define I386_RECORD_IOCTL_TIOCTTYGSTRUCT 	0x5426
#define I386_RECORD_IOCTL_TIOCSBRK		0x5427
#define I386_RECORD_IOCTL_TIOCCBRK		0x5428
#define I386_RECORD_IOCTL_TIOCGSID		0x5429
#define I386_RECORD_IOCTL_TCGETS2		0x802c542a
#define I386_RECORD_IOCTL_TCSETS2		0x402c542b
#define I386_RECORD_IOCTL_TCSETSW2		0x402c542c
#define I386_RECORD_IOCTL_TCSETSF2		0x402c542d
#define I386_RECORD_IOCTL_TIOCGPTN		0x80045430
#define I386_RECORD_IOCTL_TIOCSPTLCK		0x40045431
#define I386_RECORD_IOCTL_FIONCLEX		0x5450
#define I386_RECORD_IOCTL_FIOCLEX		0x5451
#define I386_RECORD_IOCTL_FIOASYNC		0x5452
#define I386_RECORD_IOCTL_TIOCSERCONFIG		0x5453
#define I386_RECORD_IOCTL_TIOCSERGWILD		0x5454
#define I386_RECORD_IOCTL_TIOCSERSWILD		0x5455
#define I386_RECORD_IOCTL_TIOCGLCKTRMIOS	0x5456
#define I386_RECORD_IOCTL_TIOCSLCKTRMIOS	0x5457
#define I386_RECORD_IOCTL_TIOCSERGSTRUCT	0x5458
#define I386_RECORD_IOCTL_TIOCSERGETLSR   	0x5459
#define I386_RECORD_IOCTL_TIOCSERGETMULTI	0x545A
#define I386_RECORD_IOCTL_TIOCSERSETMULTI	0x545B
#define I386_RECORD_IOCTL_TIOCMIWAIT		0x545C
#define I386_RECORD_IOCTL_TIOCGICOUNT		0x545D
#define I386_RECORD_IOCTL_TIOCGHAYESESP		0x545E
#define I386_RECORD_IOCTL_TIOCSHAYESESP		0x545F
#define I386_RECORD_IOCTL_FIOQSIZE		0x5460
d607 1
a607 58
  linux_record_tdep.size_termios = I386_RECORD_SIZE_termios;
  linux_record_tdep.size_termios2 = I386_RECORD_SIZE_termios2;
  linux_record_tdep.size_pid_t = I386_RECORD_SIZE_pid_t;
  linux_record_tdep.size_winsize = I386_RECORD_SIZE_winsize;
  linux_record_tdep.size_char = I386_RECORD_SIZE_char;
  linux_record_tdep.size_serial_struct = I386_RECORD_SIZE_serial_struct;
  linux_record_tdep.size_serial_icounter_struct =
    I386_RECORD_SIZE_serial_icounter_struct;
  linux_record_tdep.size_hayes_esp_config = I386_RECORD_SIZE_hayes_esp_config;

  linux_record_tdep.ioctl_TCGETS = I386_RECORD_IOCTL_TCGETS;
  linux_record_tdep.ioctl_TCSETS = I386_RECORD_IOCTL_TCSETS;
  linux_record_tdep.ioctl_TCSETSW = I386_RECORD_IOCTL_TCSETSW;
  linux_record_tdep.ioctl_TCSETSF = I386_RECORD_IOCTL_TCSETSF;
  linux_record_tdep.ioctl_TCGETA = I386_RECORD_IOCTL_TCGETA;
  linux_record_tdep.ioctl_TCSETA = I386_RECORD_IOCTL_TCSETA;
  linux_record_tdep.ioctl_TCSETAW = I386_RECORD_IOCTL_TCSETAW;
  linux_record_tdep.ioctl_TCSETAF = I386_RECORD_IOCTL_TCSETAF;
  linux_record_tdep.ioctl_TCSBRK = I386_RECORD_IOCTL_TCSBRK;
  linux_record_tdep.ioctl_TCXONC = I386_RECORD_IOCTL_TCXONC;
  linux_record_tdep.ioctl_TCFLSH = I386_RECORD_IOCTL_TCFLSH;
  linux_record_tdep.ioctl_TIOCEXCL = I386_RECORD_IOCTL_TIOCEXCL;
  linux_record_tdep.ioctl_TIOCNXCL = I386_RECORD_IOCTL_TIOCNXCL;
  linux_record_tdep.ioctl_TIOCSCTTY = I386_RECORD_IOCTL_TIOCSCTTY;
  linux_record_tdep.ioctl_TIOCGPGRP = I386_RECORD_IOCTL_TIOCGPGRP;
  linux_record_tdep.ioctl_TIOCSPGRP = I386_RECORD_IOCTL_TIOCSPGRP;
  linux_record_tdep.ioctl_TIOCOUTQ = I386_RECORD_IOCTL_TIOCOUTQ;
  linux_record_tdep.ioctl_TIOCSTI = I386_RECORD_IOCTL_TIOCSTI;
  linux_record_tdep.ioctl_TIOCGWINSZ = I386_RECORD_IOCTL_TIOCGWINSZ;
  linux_record_tdep.ioctl_TIOCSWINSZ = I386_RECORD_IOCTL_TIOCSWINSZ;
  linux_record_tdep.ioctl_TIOCMGET = I386_RECORD_IOCTL_TIOCMGET;
  linux_record_tdep.ioctl_TIOCMBIS = I386_RECORD_IOCTL_TIOCMBIS;
  linux_record_tdep.ioctl_TIOCMBIC = I386_RECORD_IOCTL_TIOCMBIC;
  linux_record_tdep.ioctl_TIOCMSET = I386_RECORD_IOCTL_TIOCMSET;
  linux_record_tdep.ioctl_TIOCGSOFTCAR = I386_RECORD_IOCTL_TIOCGSOFTCAR;
  linux_record_tdep.ioctl_TIOCSSOFTCAR = I386_RECORD_IOCTL_TIOCSSOFTCAR;
  linux_record_tdep.ioctl_FIONREAD = I386_RECORD_IOCTL_FIONREAD;
  linux_record_tdep.ioctl_TIOCINQ = I386_RECORD_IOCTL_TIOCINQ;
  linux_record_tdep.ioctl_TIOCLINUX = I386_RECORD_IOCTL_TIOCLINUX;
  linux_record_tdep.ioctl_TIOCCONS = I386_RECORD_IOCTL_TIOCCONS;
  linux_record_tdep.ioctl_TIOCGSERIAL = I386_RECORD_IOCTL_TIOCGSERIAL;
  linux_record_tdep.ioctl_TIOCSSERIAL = I386_RECORD_IOCTL_TIOCSSERIAL;
  linux_record_tdep.ioctl_TIOCPKT = I386_RECORD_IOCTL_TIOCPKT;
  linux_record_tdep.ioctl_FIONBIO = I386_RECORD_IOCTL_FIONBIO;
  linux_record_tdep.ioctl_TIOCNOTTY = I386_RECORD_IOCTL_TIOCNOTTY;
  linux_record_tdep.ioctl_TIOCSETD = I386_RECORD_IOCTL_TIOCSETD;
  linux_record_tdep.ioctl_TIOCGETD = I386_RECORD_IOCTL_TIOCGETD;
  linux_record_tdep.ioctl_TCSBRKP = I386_RECORD_IOCTL_TCSBRKP;
  linux_record_tdep.ioctl_TIOCTTYGSTRUCT = I386_RECORD_IOCTL_TIOCTTYGSTRUCT;
  linux_record_tdep.ioctl_TIOCSBRK = I386_RECORD_IOCTL_TIOCSBRK;
  linux_record_tdep.ioctl_TIOCCBRK = I386_RECORD_IOCTL_TIOCCBRK;
  linux_record_tdep.ioctl_TIOCGSID = I386_RECORD_IOCTL_TIOCGSID;
  linux_record_tdep.ioctl_TCGETS2 = I386_RECORD_IOCTL_TCGETS2;
  linux_record_tdep.ioctl_TCSETS2 = I386_RECORD_IOCTL_TCSETS2;
  linux_record_tdep.ioctl_TCSETSW2 = I386_RECORD_IOCTL_TCSETSW2;
  linux_record_tdep.ioctl_TCSETSF2 = I386_RECORD_IOCTL_TCSETSF2;
  linux_record_tdep.ioctl_TIOCGPTN = I386_RECORD_IOCTL_TIOCGPTN;
  linux_record_tdep.ioctl_TIOCSPTLCK = I386_RECORD_IOCTL_TIOCSPTLCK;
d610 1
a611 13
  linux_record_tdep.ioctl_TIOCSERCONFIG = I386_RECORD_IOCTL_TIOCSERCONFIG;
  linux_record_tdep.ioctl_TIOCSERGWILD = I386_RECORD_IOCTL_TIOCSERGWILD;
  linux_record_tdep.ioctl_TIOCSERSWILD = I386_RECORD_IOCTL_TIOCSERSWILD;
  linux_record_tdep.ioctl_TIOCGLCKTRMIOS = I386_RECORD_IOCTL_TIOCGLCKTRMIOS;
  linux_record_tdep.ioctl_TIOCSLCKTRMIOS = I386_RECORD_IOCTL_TIOCSLCKTRMIOS;
  linux_record_tdep.ioctl_TIOCSERGSTRUCT = I386_RECORD_IOCTL_TIOCSERGSTRUCT;
  linux_record_tdep.ioctl_TIOCSERGETLSR = I386_RECORD_IOCTL_TIOCSERGETLSR;
  linux_record_tdep.ioctl_TIOCSERGETMULTI = I386_RECORD_IOCTL_TIOCSERGETMULTI;
  linux_record_tdep.ioctl_TIOCSERSETMULTI = I386_RECORD_IOCTL_TIOCSERSETMULTI;
  linux_record_tdep.ioctl_TIOCMIWAIT = I386_RECORD_IOCTL_TIOCMIWAIT;
  linux_record_tdep.ioctl_TIOCGICOUNT = I386_RECORD_IOCTL_TIOCGICOUNT;
  linux_record_tdep.ioctl_TIOCGHAYESESP = I386_RECORD_IOCTL_TIOCGHAYESESP;
  linux_record_tdep.ioctl_TIOCSHAYESESP = I386_RECORD_IOCTL_TIOCSHAYESESP;
@


1.57
log
@	Implement displaced stepping.

	gdb/
	* gdbarch.sh (max_insn_length): New 'variable'.
	(displaced_step_copy, displaced_step_fixup)
	(displaced_step_free_closure, displaced_step_location): New
	functions.
	(struct displaced_step_closure): Add forward declaration.
	* gdbarch.c, gdbarch.h: Regenerated.

	* arch-utils.c: #include "objfiles.h".
	(simple_displaced_step_copy_insn)
	(simple_displaced_step_free_closure)
	(displaced_step_at_entry_point): New functions.
	* arch-utils.h (simple_displaced_step_copy_insn)
	(simple_displaced_step_free_closure)
	(displaced_step_at_entry_point): New prototypes.

	* i386-tdep.c (I386_MAX_INSN_LEN): Rename to...
	(I386_MAX_MATCHED_INSN_LEN): ... this.
	(i386_absolute_jmp_p, i386_absolute_call_p)
	(i386_ret_p, i386_call_p, i386_breakpoint_p, i386_syscall_p)
	(i386_displaced_step_fixup): New functions.
	(struct i386_insn, i386_match_insn): Update.
	(i386_gdbarch_init): Set gdbarch_max_insn_length.
	* i386-tdep.h (I386_MAX_INSN_LEN): New.
	(i386_displaced_step_fixup): New prototype.
	* i386-linux-tdep.c (i386_linux_init_abi): Include "arch-utils.h".
	Register gdbarch_displaced_step_copy,
	gdbarch_displaced_step_fixup, gdbarch_displaced_step_free_closure,
	and gdbarch_displaced_step_location functions.

	* infrun.c (debug_displaced): New variable.
	(show_debug_displaced): New function.
	(struct displaced_step_request): New struct.
	(displaced_step_request_queue, displaced_step_ptid)
	(displaced_step_gdbarch, displaced_step_closure)
	(displaced_step_original, displaced_step_copy)
	(displaced_step_saved_copy, can_use_displaced_stepping): New
	variables.
	(show_can_use_displaced_stepping, use_displaced_stepping)
	(displaced_step_clear, cleanup_displaced_step_closure)
	(displaced_step_dump_bytes, displaced_step_prepare)
	(displaced_step_clear_cleanup, write_memory_ptid)
	(displaced_step_fixup): New functions.
	(resume): Call displaced_step_prepare.
	(proceed): Call read_pc once, and remember the value.  If using
	displaced stepping, don't remove breakpoints.
	(handle_inferior_event): Call displaced_step_fixup.  Add some
	debugging output.  When we try to step over a breakpoint, but get
	a signal to deliver to the thread instead, ensure the step-resume
	breakpoint is actually inserted.  If a thread hop is needed, and
	displaced stepping is enabled, don't remove breakpoints.
	(init_wait_for_inferior): Call displaced_step_clear.
	(_initialize_infrun): Add "set debug displaced" command.  Add
	"maint set can-use-displaced-stepping" command.  Clear
	displaced_step_ptid.
	* inferior.h (debug_displaced): Declare variable.
	(displaced_step_dump_bytes): Declare function.

	* Makefile.in (arch-utils.o, i386-linux-tdep.o): Update
	dependencies.

	gdb/testsuite/
	* gdb.asm/asmsrc1.s: Add scratch space.

	gdb/doc/
	* gdb.texinfo (Debugging Output): Document "set/show debug
	displaced".
	(Maintenance Commands): Document "maint set/show
	can-use-displaced-stepping".
@
text
@d38 10
d461 3
@


1.56
log
@	Update i386 and amd64 ports for unwinder changes.

	* amd64-tdep.c (amd64_frame_cache): Expect this_frame.
	(amd64_frame_this_id, amd64_frame_prev_register): Update signature.
	(amd64_frame_unwind): Use default_frame_sniffer.
	(amd64_frame_sniffer): Delete.
	(amd64_sigtramp_frame_cache): Expect this_frame.
	(amd64_sigtramp_frame_this_id, amd64_sigtramp_frame_prev_register)
	(amd64_sigtramp_frame_sniffer): Update signature.
	(amd64_sigtramp_frame_unwind): Add amd64_sigtramp_frame_sniffer.
	(amd64_frame_base_address): Expect this_frame.
	(amd64_dummy_id): Renamed from amd64_unwind_dummy_id.  Expect
	this_frame.
	(amd64_init_abi): Use set_gdbarch_dummy_id and
	frame_unwind_append_unwinder.
	* i386-tdep.c (i386_frame_cache): Expect this_frame.
	(i386_frame_this_id, i386_frame_prev_register): Update signature.
	(i386_frame_unwind): Use default_frame_sniffer.
	(i386_frame_sniffer): Delete.
	(i386_sigtramp_frame_cache): Expect this_frame.
	(i386_sigtramp_frame_this_id, i386_sigtramp_frame_prev_register)
	(i386_sigtramp_frame_sniffer): Update signature.
	(i386_sigtramp_frame_unwind): Use i386_sigtramp_frame_sniffer.
	(i386_frame_base_address): Update signature.
	(i386_dummy_id): Rename from i386_unwind_dummy_id.  Expect this_frame.
	(i386_push_dummy_call): Update comment.
	(i386_sigtramp_p, i386_svr4_sigtramp_p, i386_svr4_sigcontext_addr):
	Expect this_frame.
	(i386_gdbarch_init): Use set_gdbarch_dummy_id, dwarf2_append_unwinders,
	and frame_unwind_append_unwinder.
	* amd64-linux-tdep.c, amd64-sol2-tdep.c, amd64fbsd-tdep.c,
	amd64nbsd-tdep.c, amd64obsd-tdep.c, i386-linux-tdep.c,
	i386-nto-tdep.c, i386bsd-tdep.c, i386-sol2-tdep.c, i386obsd-tdep.c,
	i386nbsd-tdep.c: Update for unwinder changes.
@
text
@d37 1
d450 9
@


1.55
log
@	* dwarf2-frame.c (read_reg): Expect this_frame in the baton.
	(execute_stack_op): Put this_frame in the baton.
	(execute_cfa_program): Take this_frame.
	(struct dwarf2_frame_ops): Update comment for signal_frame_p.
	(dwarf2_frame_default_init_reg, dwarf2_frame_init_reg)
	(dwarf2_frame_signal_frame_p, dwarf2_frame_cache)
	(dwarf2_frame_this_id): Adjust to work on this_frame.
	(dwarf2_signal_frame_this_id): Delete.
	(dwarf2_frame_prev_register): Update signature.  Use new frame
	unwind methods.
	(dwarf2_frame_sniffer): Update signature.  Expect this_frame.
	(dwarf2_frame_unwind, dwarf2_signal_frame_unwind): Add
	dwarf2_frame_sniffer.
	(dwarf2_append_unwinders): New.
	(dwarf2_frame_base_address, dwarf2_frame_base_sniffer): Expect
	this_frame.
	* sparc-tdep.c (sparc32_dwarf2_struct_return_p)
	(sparc32_dwarf2_frame_init_reg): Expect this_frame.
	* cris-tdep.c (cris_dwarf2_frame_init_reg): Likewise.
	* rs6000-tdep.c (ppc_dwarf2_frame_init_reg): Likewise.
	* s390-tdep.c (s390_dwarf2_frame_init_reg): Likewise.
	* sh-tdep.c (sh_dwarf2_frame_init_reg): Likewise.
	* sparc64-tdep.c (sparc64_dwarf2_frame_init_reg): Likewise.
	* dwarf2-frame.h (dwarf2_frame_sniffer): Delete declaration.
	(dwarf2_append_unwinders): Declare.
	(dwarf2_frame_base_sniffer): Update declaration.
	* i386-linux-tdep.c (i386_linux_dwarf_signal_frame_p): Expect
	this_frame.
@
text
@d118 2
a119 2
/* If NEXT_FRAME unwinds into a sigtramp routine, return the address
   of the start of the routine.  Otherwise, return 0.  */
d122 1
a122 1
i386_linux_sigtramp_start (struct frame_info *next_frame)
d124 1
a124 1
  CORE_ADDR pc = frame_pc_unwind (next_frame);
d134 1
a134 1
  if (!safe_frame_unwind_memory (next_frame, pc, buf, LINUX_SIGTRAMP_LEN))
d155 1
a155 1
      if (!safe_frame_unwind_memory (next_frame, pc, buf, LINUX_SIGTRAMP_LEN))
d186 2
a187 2
/* If NEXT_FRAME unwinds into an RT sigtramp routine, return the
   address of the start of the routine.  Otherwise, return 0.  */
d190 1
a190 1
i386_linux_rt_sigtramp_start (struct frame_info *next_frame)
d192 1
a192 1
  CORE_ADDR pc = frame_pc_unwind (next_frame);
d202 1
a202 1
  if (!safe_frame_unwind_memory (next_frame, pc, buf, LINUX_RT_SIGTRAMP_LEN))
d212 1
a212 1
      if (!safe_frame_unwind_memory (next_frame, pc, buf,
d223 2
a224 2
/* Return whether the frame preceding NEXT_FRAME corresponds to a
   GNU/Linux sigtramp routine.  */
d227 1
a227 1
i386_linux_sigtramp_p (struct frame_info *next_frame)
d229 1
a229 1
  CORE_ADDR pc = frame_pc_unwind (next_frame);
d240 2
a241 2
    return (i386_linux_sigtramp_start (next_frame) != 0
	    || i386_linux_rt_sigtramp_start (next_frame) != 0);
d271 2
a272 2
/* Assuming NEXT_FRAME is a frame following a GNU/Linux sigtramp
   routine, return the address of the associated sigcontext structure.  */
d275 1
a275 1
i386_linux_sigcontext_addr (struct frame_info *next_frame)
d281 1
a281 1
  frame_unwind_register (next_frame, I386_ESP_REGNUM, buf);
d284 1
a284 1
  pc = i386_linux_sigtramp_start (next_frame);
d293 1
a293 1
      if (pc == frame_pc_unwind (next_frame))
d298 1
a298 1
  pc = i386_linux_rt_sigtramp_start (next_frame);
@


1.54
log
@	Updated copyright notices for most files.
@
text
@d247 2
a248 2
/* Return one if the unwound PC from NEXT_FRAME is in a signal trampoline
   which may have DWARF-2 CFI.  */
d252 1
a252 1
				 struct frame_info *next_frame)
d254 1
a254 1
  CORE_ADDR pc = frame_pc_unwind (next_frame);
@


1.53
log
@2007-11-02  Markus Deuling  <deuling@@de.ibm.com>

	* gdbarch.sh (register_name): Add gdbarch parameter.
	* gdbarch.{c,h}: Regenerate.

	* target-descriptions.c (tdesc_register_name): Add gdbarch parameter.
	(tdesc_register_name): Replace current_gdbarch by gdbarch.
	* target-descriptions.h (tdesc_register_name): Add gdbarch parameter.

	* xstormy16-tdep.c (xstormy16_register_name): Add gdbarch parameter.
	* vax-tdep.c (vax_register_name): Add gdbarch parameter.
	* spu-tdep.c (spu_register_name): Add gdbarch parameter.
	* s390-tdep.c (s390_register_name): Add gdbarch parameter.
	* mt-tdep.c (mt_register_name): Add gdbarch parameter.
	(mt_registers_info): Replace current_gdbarch by gdbarch.
	(mt_register_reggroup_p): Add gdbarch to mt_register_name call.
	* mips-tdep.c (mips_register_name): Add gdbarch parameter. Replace
	current_gdbarch by gdbarch.
	(mips_register_name): Add gdbarch to tdesc_register_name call.
	* mep-tdep.c (mep_register_name): Add gdbarch parameter. Replace
	current_gdbarch by gdbarch.
	(mep_register_reggroup_p): Add gdbarch to mep_register_name call.
	* m32c-tdep.c (m32c_register_name): Add gdbarch parameter. Replace
	current_gdbarch by gdbarch.
	* m88k-tdep.c (m88k_register_name): Add gdbarch parameter.
	* m68k-tdep.c (m68k_register_name): Add gdbarch parameter.
	* m32r-tdep.c (m32r_register_name): Add gdbarch parameter.
	(m32r_frame_unwind_cache): Use get_frame_arch to get at the current
	architecture by frame_info.
	* iq2000-tdep.c (iq2000_register_name): Add gdbarch parameter.
	* ia64-tdep.c (ia64_register_name): Add gdbarch parameter.
	* hppa-tdep.c (hppa32_register_name, hppa64_register_name): Add gdbarch
	parameter.
	* h8300-tdep.c (h8300_register_name, h8300s_register_name)
	(h8300sx_register_name): Add gdbarch parameter.
	* cris-tdep.c (cris_register_name, crisv32_register_name): Add
	gdbarch parameter. Replace current_gdbarch by gdbarch.
	(cris_gdbarch_init): Replace current_gdbarch by gdbarch (comment).
	* avr-tdep.c (avr_register_name): Add gdbarch parameter.
	* arm-tdep.c (arm_register_name): Add gdbarch paramete
	* amd64-tdep.c (amd64_register_name): Add gdbarch parameter. Update
	caller.
	* amd64-tdep.h (amd64_register_name): Add gdbarch parameter.
	* amd64-linux-tdep.c (amd64_linux_register_name): Add gdbarch parameter.
	* alpha-tdep.c (alpha_register_name): Add gdbarch parameter.
	(alpha_cannot_fetch_register, alpha_cannot_store_register): Update call
	of alpha_register_name.
	* frv-tdep.c (frv_register_name): Add gdbarch parameter.
	* i386-tdep.c (i386_register_name): Add gdbarch parameter. Replace
	current_gdbarch by gdbarch.
	(i386_register_type): Replace ?current_gdbarch by gdbarch.
	* i386-tdep.h (i386_register_name): Add gdbarch parameter.
	* i386-linux-tdep.c (i386_linux_register_name): Add gdbarch parameter.

	* m68hc11-tdep.c (m68hc11_register_name): Add gdbarch parameter.
	(m68hc11_register_reggroup_p): Add gdbarch to call of
	m68hc11_register_name.
	* mn10300-tdep.c (mn10300_generic_register_name, am33_register_name)
	(am33_2_register_name): Add gdbarch parameter.
	(mn10300_frame_unwind_cache): Use get_frame_arch to get at the current
	architecture by frame_info.
	(mn10300_dump_tdep): Replace current_gdbarch by gdbarch.
	* rs6000-tdep.c (rs6000_register_name): Add gdbarch parameter. Replace
	current_gdbarch by gdbarch.
	* score-tdep.c (score_register_name): Add gdbarch parameter.
	(score_return_value, score_push_dummy_call): Replace current_gdbarch
	by gdbarch.
	* sh64-tdep.c (sh64_register_name): Add gdbarch parameter.
	(sh64_compact_reg_base_num, sh64_register_convert_to_virtual)
	(sh64_register_convert_to_raw, sh64_fv_reg_base_num)
	(sh64_dr_reg_base_num, sh64_fpp_reg_base_num): Add gdbarch parameter
	and update caller. Replace current_gdbarch by gdbarch.
	(sh64_extract_return_value, sh64_store_return_value): Use
	get_regcache_arch to get at the current architecture by regcache.
	* sh-tdep.c (sh_sh_register_name, sh_sh3_register_name)
	(sh_sh3e_register_name, sh_sh2e_register_name, sh_sh2a_register_name)
	(sh_sh2a_nofpu_register_name, sh_sh_dsp_register_name)
	(sh_sh3_dsp_register_name, sh_sh4_register_name)
	(sh_sh4_nofpu_register_name, sh_sh4al_dsp_register_name): Add gdbarch
	parameter.
	(fv_reg_base_num, dr_reg_base_num, sh_justify_value_in_reg)
	(sh_next_flt_argreg): Add gdbarch parameter and update caller. Replace
	current_gdbarch by gdbarch.
	(sh_extract_return_value_fpu, sh_store_return_value_fpu): Use
	get_regcache_arch to get at the current architecture by regcache.
	* sparc-tdep.c (sparc32_register_name): Add gdbarch parameter.
	* sparc64-tdep.c (sparc64_register_name): Add gdbarch parameter.
	* v850-tdep.c (v850_register_name, v850e_register_name): Add gdbarch
	parameter.
	(v850_unwind_sp, v850_unwind_pc): Replace current_gdbarch by gdbarch.
	* xtensa-tdep.c (xtensa_register_name): Add gdbarch parameter. Replace
	current_gdbarch by gdbarch.
	(xtensa_pseudo_register_read, xtensa_pseudo_register_write)
	(xtensa_frame_prev_register): Add gdbarch parameter to
	xtensa_register_name call.
@
text
@d3 1
a3 1
   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2007
@


1.52
log
@
	* gdbarch.sh (sofun_address_maybe_missing): New gdbarch variable.
	* gdbarch.c, gdbarch.h: Regenerate.
	* dbxread.c (find_stab_function_addr): Define unconditionally.
	(read_dbx_symtab): Use gdbarch_sofun_address_maybe_missing
	instead of SOFUN_ADDRESS_MAYBE_MISSING.
	(end_psymtab): Likewise.
	(process_one_symbol): Likewise.
	* mdebugread.c (parse_partial_symbols): Likewise.

	* symtab.h (struct minimal_symbol): Always define "filename" member.
	* elfread.c (elf_symtab_read): Use msym->filename unconditionally.
	* minsyms.c (lookup_minimal_symbol): Likewise.
	* symmisc.c (dump_msymbols): Likewise.

	* config/i386/i386sol2.mt (DEPRECATED_TM_FILE): Remove.
	* config/i386/linux.mt (DEPRECATED_TM_FILE): Remove.
	* config/i386/tm-i386sol2.h: Remove file.
	* config/i386/tm-linux.h: Remove file.
	* i386-linux-tdep.c (i386_linux_init_abi): Add call to
	set_gdbarch_sofun_address_maybe_missing.
	* i386-sol2-tdep.c (i386_sol2_init_abi): Likewise.

	* config/powerpc/linux.mt (DEPRECATED_TM_FILE): Remove.
	* config/powerpc/nbsd.mt (DEPRECATED_TM_FILE): Remove.
	* config/powerpc/obsd.mt (DEPRECATED_TM_FILE): Remove.
	* config/powerpc/ppc-eabi.mt (DEPRECATED_TM_FILE): Remove.
	* config/powerpc/ppc-sim.mt (DEPRECATED_TM_FILE): Remove.
	* config/powerpc/tm-ppc-eabi.h: Remove file.
	* rs6000-tdep.c (rs6000_gdbarch_init): Add call to
	set_gdbarch_sofun_address_maybe_missing.

	* config/sparc/sol2-64.mt (DEPRECATED_TM_FILE): Remove.
	* config/sparc/sol2.mt (DEPRECATED_TM_FILE): Remove.
	* config/sparc/tm-sol2.h: Remove file.
	* sparc64-sol2-tdep.c (sparc64_sol2_init_abi): Add call to
	set_gdbarch_sofun_address_maybe_missing.
	* sparc-sol2-tdep.c (sparc32_sol2_init_abi): Likewise.

doc/ChangeLog:

	* gdbarch.texi (Target Conditionals): Remove documentation of
	SOFUN_ADDRESS_MAYBE_MISSING, replaced by ...
	(Compiler Characteristics): ... documentation of
	set_gdbarch_sofun_address_maybe_missing.
@
text
@d41 1
a41 1
i386_linux_register_name (int reg)
d47 1
a47 1
  return i386_register_name (reg);
@


1.51
log
@        Switch the license of all .c files to GPLv3.
        Switch the license of all .h files to GPLv3.
        Switch the license of all .cc files to GPLv3.
@
text
@d432 4
@


1.50
log
@	* gdbarch.sh (read_pc): Add REGCACHE argument.  Remove PTID argument.
	(write_pc): Likewise.  Remove default implementation, add predicate.
	* gdbarch.c, gdbarch.h: Regenerate.
	* regcache.c (read_pc_pid): Use current regcache instead of calling
	read_register_pid.
	(write_pc_pid): Check gdbarch_write_pc predicate, implement default
	case inline.
	(generic_target_write_pc): Remove.
	* inferior.h (generic_target_write_pc): Remove.
	* frv-tdep.c (frv_gdbarch_init): Do not install it.
	* m68hc11-tdep.c (m68hc11_gdbarch_init): Likewise.
	* rs6000-tdep.c (rs6000_gdbarch_init): Likewise.
	* sh64-tdep.c (sh64_gdbarch_init): Likewise.
	* sh-tdep.c (sh_gdbarch_init): Likewise.
	* xstormy16-tdep.c (xstormy16_gdbarch_init): Likewise.

	* avr-tdep.c (avr_read_pc): Add REGCACHE argument.  Remove PTID
	argument.  Use REGCACHE instead of calling read_register_pid.
	* hppa-hpux-tdep.c (hppa_hpux_read_pc): Likewise.
	* hppa-tdep.c (hppa_read_pc): Likewise.
	* hppa-tdep.h (hppa_read_pc): Likewise.
	* ia64-tdep.c (ia64_read_pc): Likewise.
	* m32r-tdep.c (m32r_read_pc): Likewise.
	* mep-tdep.c (mep_read_pc): Likewise.
	* mn10300-tdep.c (mn10300_read_pc): Likewise.
	* spu-tdep.c (spu_read_pc): Likewise.

	* arm-tdep.c (arm_write_pc): Add REGCACHE argument.  Remove PTID
	argument.  Use REGCACHE instead of calling write_register_pid.
	* avr-tdep.c (avr_write_pc): Likewise.
	* hppa-hpux-tdep.c (hppa_hpux_write_pc): Likewise.
	* hppa-tdep.c (hppa_write_pc): Likewise.
	* hppa-tdep.h (hppa_write_pc): Likewise.
	* i386-linux-tdep.c (i386_linux_write_pc): Likewise.
	* amd64-linux-tdep.c (amd64_linux_write_pc): Likewise.
	* ia64-linux-tdep.c (ia64_linux_write_pc): Likewise.
	* ia64-tdep.c (ia64_write_pc): Likewise.
	* ia64-tdep.h (ia64_write_pc): Likewise.
	* m32r-tdep.c (m32r_write_pc): Likewise.
	* m88k-tdep.c (m88k_write_pc): Likewise.
	* mep-tdep.c (mep_write_pc): Likewise.
	* mips-tdep.c (mips_write_pc): Likewise.
	* mips-linux-tdep.c (mips_linux_write_pc): Likewise.
	* mn10300-tdep.c (mn10300_write_pc): Likewise.
	* sparc-tdep.c (sparc_write_pc): Likewise.
	* spu-tdep.c (spu_write_pc): Likewise.

	* mips-tdep.c (read_signed_register): Remove.
	(read_signed_register_pid): Likewise.
	(mips_read_pc): Add REGCACHE argument.  Remove PTID argument.
	Use REGCACHE instead of calling read_signed_register_pid.
@
text
@d10 1
a10 1
   the Free Software Foundation; either version 2 of the License, or
d19 1
a19 3
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street, Fifth Floor,
   Boston, MA 02110-1301, USA.  */
@


1.49
log
@Copyright updates for 2007.
@
text
@d320 1
a320 1
i386_linux_write_pc (CORE_ADDR pc, ptid_t ptid)
d322 1
a322 1
  write_register_pid (I386_EIP_REGNUM, pc, ptid);
d338 1
a338 1
  write_register_pid (I386_LINUX_ORIG_EAX_REGNUM, -1, ptid);
@


1.48
log
@	* config/tm-linux.h: Delete file.
	* config/alpha/alpha-linux.mt (DEPRECATED_TM_FILE): Set to tm-alpha.h.
	* config/alpha/tm-alphalinux.h: Delete file.
	* config/arm/linux.mt (DEPRECATED_TM_FILE): Set to tm-arm.h
	* config/arm/tm-linux.h: Delete file.
	* config/i386/tm-linux.h: Do not include "config/tm-linux.h".
	* config/ia64/tm-linux.h: Do not include "config/tm-linux.h".
	* config/m32r/linux.mt (DEPRECATED_TM_FILE): Remove.
	* config/mips/tm-linux.h:  Do not include "config/tm-linux.h".
	* config/pa/linux.mt (DEPRECATED_TM_FILE): Set to tm-hppa.h.
	* config/pa/tm-linux.h: Delete file.
	* config/powerpc/tm-linux.h: Do not include "config/tm-linux.h".
	* config/s390/linux.mt (DEPRECATED_TM_FILE): Remove.
	* config/sh/linux.mt (DEPRECATED_TM_FILE): Set to tm-sh.h.
	* config/sh/tm-linux.h: Delete file.
	* alpha-linux-tdep.c: Include "symtab.h".
	(alpha_linux_init_abi): Call set_gdbarch_skip_trampoline_code.
	* i386-linux-tdep.c: Include "symtab.h".
	(i386_linux_init_abi): Call set_gdbarch_skip_trampoline_code.
	* ia64-linux-tdep.c: Include "symtab.h".
	(ia64_linux_init_abi): Call set_gdbarch_skip_trampoline_code.
	* m32r-linux-tdep.c: Include "symtab.h".
	(m32r_linux_init_abi): Call set_gdbarch_skip_trampoline_code.
	* mips-linux-tdep.c: Include "symtab.h".
	(mips_linux_init_abi): Call set_gdbarch_skip_trampoline_code.
	* sh-linux-tdep.c: Include "symtab.h".
	(sh_linux_init_abi): Call set_gdbarch_skip_trampoline_code.
	* s390-tdep.c (s390_gdbarch_init): Call
	set_gdbarch_skip_trampoline_code.
	* s390-nat.c: Do not include "tm.h".
	* Makefile.in (alpha-linux-tdep.o): Add dependency on $(symtab_h).
	(i386-linux-tdep.o): Likewise.
	(ia64-linux-tdep.o): Likewise.
	(m32r-linux-tdep.o): Likewise.
	(mips-linux-tdep.o): Likewise.
	(sh-linux-tdep.o): Likewise.
	(s390-nat.o): Remove dependency on $(tm_h).
@
text
@d3 1
a3 1
   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005
@


1.47
log
@
	* breakpoint.c:
	* arm-tdep.c:
	* ia64-tdep.c:
	* i386-tdep.c:
	* hpread.c:
	* hppa-tdep.c:
	* hppa-hpux-tdep.c:
	* gnu-nat.c:
	* gdbtypes.c:
	* gdbarch.h:
	* gdbarch.c:
	* eval.c:
	* dwarf2read.c:
	* dbxread.c:
	* copying:
	* symfile.c:
	* stabsread.c:
	* sh64-tdep.c:
	* sh-tdep.c:
	* s390-tdep.c:
	* rs6000-tdep.c:
	* remote.c:
	* remote-mips.c:
	* mips-tdep.c:
	* mdebugread.c:
	* linux-nat.c:
	* infrun.c:
	* xcoffread.c:
	* win32-nat.c:
	* valops.c:
	* utils.c:
	* tracepoint.c:
	* target.c:
	* symtab.c:
	* c-exp.y:
	* ada-valprint.c:
	* ada-typeprint.c:
	* ada-lex.l:
	* ada-lang.h:
	* ada-lang.c:
	* ada-exp.y:
	* alphafbsd-tdep.c:
	* alphabsd-tdep.h:
	* alphabsd-tdep.c:
	* alphabsd-nat.c:
	* alpha-tdep.h:
	* alpha-tdep.c:
	* alpha-osf1-tdep.c:
	* alpha-nat.c:
	* alpha-mdebug-tdep.c:
	* alpha-linux-tdep.c:
	* alpha-linux-nat.c:
	* aix-thread.c:
	* abug-rom.c:
	* arch-utils.c:
	* annotate.h:
	* annotate.c:
	* amd64obsd-tdep.c:
	* amd64obsd-nat.c:
	* amd64nbsd-tdep.c:
	* amd64nbsd-nat.c:
	* amd64fbsd-tdep.c:
	* amd64fbsd-nat.c:
	* amd64bsd-nat.c:
	* amd64-tdep.h:
	* amd64-tdep.c:
	* amd64-sol2-tdep.c:
	* amd64-nat.h:
	* amd64-nat.c:
	* amd64-linux-tdep.c:
	* amd64-linux-nat.c:
	* alphanbsd-tdep.c:
	* block.h:
	* block.c:
	* bfd-target.h:
	* bfd-target.c:
	* bcache.h:
	* bcache.c:
	* ax.h:
	* ax-general.c:
	* ax-gdb.h:
	* ax-gdb.c:
	* avr-tdep.c:
	* auxv.h:
	* auxv.c:
	* armnbsd-tdep.c:
	* armnbsd-nat.c:
	* arm-tdep.h:
	* arm-linux-nat.c:
	* arch-utils.h:
	* charset.c:
	* call-cmds.h:
	* c-valprint.c:
	* c-typeprint.c:
	* c-lang.h:
	* c-lang.c:
	* buildsym.h:
	* buildsym.c:
	* bsd-uthread.h:
	* bsd-uthread.c:
	* bsd-kvm.h:
	* bsd-kvm.c:
	* breakpoint.h:
	* core-regset.c:
	* core-aout.c:
	* completer.h:
	* completer.c:
	* complaints.h:
	* complaints.c:
	* command.h:
	* coffread.c:
	* coff-solib.h:
	* coff-solib.c:
	* coff-pe-read.h:
	* coff-pe-read.c:
	* cli-out.h:
	* cli-out.c:
	* charset.h:
	* dink32-rom.c:
	* dictionary.h:
	* dictionary.c:
	* demangle.c:
	* defs.h:
	* dcache.h:
	* dcache.c:
	* d10v-tdep.c:
	* cpu32bug-rom.c:
	* cp-valprint.c:
	* cp-support.h:
	* cp-support.c:
	* cp-namespace.c:
	* cp-abi.h:
	* cp-abi.c:
	* corelow.c:
	* corefile.c:
	* environ.c:
	* elfread.c:
	* dwarfread.c:
	* dwarf2loc.c:
	* dwarf2expr.h:
	* dwarf2expr.c:
	* dwarf2-frame.h:
	* dwarf2-frame.c:
	* dve3900-rom.c:
	* dummy-frame.h:
	* dummy-frame.c:
	* dsrec.c:
	* doublest.h:
	* doublest.c:
	* disasm.h:
	* disasm.c:
	* fork-child.c:
	* findvar.c:
	* fbsd-nat.h:
	* fbsd-nat.c:
	* f-valprint.c:
	* f-typeprint.c:
	* f-lang.h:
	* f-lang.c:
	* expression.h:
	* expprint.c:
	* exec.h:
	* exec.c:
	* exceptions.h:
	* exceptions.c:
	* event-top.h:
	* event-top.c:
	* event-loop.h:
	* event-loop.c:
	* gdb.c:
	* gdb-stabs.h:
	* gdb-events.h:
	* gdb-events.c:
	* gcore.c:
	* frv-tdep.h:
	* frv-tdep.c:
	* frv-linux-tdep.c:
	* frame.h:
	* frame.c:
	* frame-unwind.h:
	* frame-unwind.c:
	* frame-base.h:
	* frame-base.c:
	* gdb_vfork.h:
	* gdb_thread_db.h:
	* gdb_string.h:
	* gdb_stat.h:
	* gdb_regex.h:
	* gdb_ptrace.h:
	* gdb_proc_service.h:
	* gdb_obstack.h:
	* gdb_locale.h:
	* gdb_dirent.h:
	* gdb_curses.h:
	* gdb_assert.h:
	* gdbarch.sh:
	* gdb.h:
	* hpux-thread.c:
	* hppabsd-nat.c:
	* hppa-tdep.h:
	* hpacc-abi.c:
	* h8300-tdep.c:
	* gregset.h:
	* go32-nat.c:
	* gnu-v3-abi.c:
	* gnu-v2-abi.h:
	* gnu-v2-abi.c:
	* gnu-nat.h:
	* glibc-tdep.c:
	* gdbtypes.h:
	* gdbcore.h:
	* gdbcmd.h:
	* i386nbsd-tdep.c:
	* i386nbsd-nat.c:
	* i386gnu-tdep.c:
	* i386gnu-nat.c:
	* i386fbsd-tdep.c:
	* i386fbsd-nat.c:
	* i386bsd-tdep.c:
	* i386bsd-nat.h:
	* i386bsd-nat.c:
	* i386-tdep.h:
	* i386-sol2-nat.c:
	* i386-nto-tdep.c:
	* i386-nat.c:
	* i386-linux-tdep.h:
	* i386-linux-tdep.c:
	* i386-linux-nat.c:
	* i386-cygwin-tdep.c:
	* inf-ttrace.c:
	* inf-ptrace.h:
	* inf-ptrace.c:
	* inf-loop.h:
	* inf-loop.c:
	* inf-child.h:
	* inf-child.c:
	* ia64-tdep.h:
	* ia64-linux-nat.c:
	* i387-tdep.h:
	* i387-tdep.c:
	* i386v4-nat.c:
	* i386v-nat.c:
	* i386obsd-tdep.c:
	* i386obsd-nat.c:
	* kod.c:
	* jv-valprint.c:
	* jv-typeprint.c:
	* jv-lang.h:
	* jv-lang.c:
	* irix5-nat.c:
	* iq2000-tdep.c:
	* interps.h:
	* interps.c:
	* inftarg.c:
	* inflow.h:
	* inflow.c:
	* inferior.h:
	* infcmd.c:
	* infcall.h:
	* infcall.c:
	* inf-ttrace.h:
	* m32r-tdep.h:
	* m32r-tdep.c:
	* m32r-rom.c:
	* m32r-linux-tdep.c:
	* m32r-linux-nat.c:
	* m2-valprint.c:
	* m2-typeprint.c:
	* m2-lang.h:
	* m2-lang.c:
	* lynx-nat.c:
	* linux-thread-db.c:
	* linux-nat.h:
	* linespec.c:
	* libunwind-frame.h:
	* libunwind-frame.c:
	* language.h:
	* language.c:
	* macroexp.c:
	* macrocmd.c:
	* m88kbsd-nat.c:
	* m88k-tdep.h:
	* m88k-tdep.c:
	* m68klinux-tdep.c:
	* m68klinux-nat.c:
	* m68kbsd-tdep.c:
	* m68kbsd-nat.c:
	* m68k-tdep.h:
	* m68k-tdep.c:
	* mips-linux-nat.c:
	* mips-irix-tdep.c:
	* minsyms.c:
	* memattr.h:
	* memattr.c:
	* mem-break.c:
	* mdebugread.h:
	* main.h:
	* main.c:
	* macrotab.h:
	* macrotab.c:
	* macroscope.h:
	* macroscope.c:
	* macroexp.h:
	* nbsd-tdep.c:
	* mt-tdep.c:
	* monitor.h:
	* monitor.c:
	* mn10300-tdep.h:
	* mn10300-tdep.c:
	* mn10300-linux-tdep.c:
	* mipsv4-nat.c:
	* mipsread.c:
	* mipsnbsd-tdep.h:
	* mipsnbsd-tdep.c:
	* mipsnbsd-nat.c:
	* mips64obsd-tdep.c:
	* mips64obsd-nat.c:
	* mips-tdep.h:
	* mips-mdebug-tdep.c:
	* mips-linux-tdep.c:
	* osabi.h:
	* osabi.c:
	* ocd.h:
	* ocd.c:
	* observer.c:
	* objfiles.h:
	* objfiles.c:
	* objc-lang.h:
	* objc-lang.c:
	* objc-exp.y:
	* nto-tdep.h:
	* nto-tdep.c:
	* nto-procfs.c:
	* nlmread.c:
	* nbsd-tdep.h:
	* ppcobsd-tdep.c:
	* ppcobsd-nat.c:
	* ppcnbsd-tdep.h:
	* ppcnbsd-tdep.c:
	* ppcnbsd-nat.c:
	* ppcbug-rom.c:
	* ppc-tdep.h:
	* ppc-sysv-tdep.c:
	* ppc-linux-tdep.c:
	* ppc-linux-nat.c:
	* ppc-bdm.c:
	* parser-defs.h:
	* parse.c:
	* p-valprint.c:
	* p-typeprint.c:
	* p-lang.h:
	* p-lang.c:
	* remote-fileio.h:
	* remote-fileio.c:
	* remote-est.c:
	* remote-e7000.c:
	* regset.h:
	* regset.c:
	* reggroups.h:
	* reggroups.c:
	* regcache.h:
	* regcache.c:
	* proc-why.c:
	* proc-service.c:
	* proc-events.c:
	* printcmd.c:
	* ppcobsd-tdep.h:
	* sentinel-frame.h:
	* sentinel-frame.c:
	* scm-valprint.c:
	* scm-tags.h:
	* scm-lang.h:
	* scm-lang.c:
	* scm-exp.c:
	* s390-tdep.h:
	* rom68k-rom.c:
	* remote.h:
	* remote-utils.c:
	* remote-st.c:
	* remote-sim.c:
	* remote-sds.c:
	* remote-rdp.c:
	* remote-rdi.c:
	* remote-hms.c:
	* sim-regno.h:
	* shnbsd-tdep.h:
	* shnbsd-tdep.c:
	* shnbsd-nat.c:
	* sh-tdep.h:
	* serial.h:
	* serial.c:
	* ser-unix.h:
	* ser-unix.c:
	* ser-tcp.c:
	* ser-pipe.c:
	* ser-go32.c:
	* ser-e7kpc.c:
	* ser-base.h:
	* ser-base.c:
	* solib.c:
	* solib-svr4.h:
	* solib-svr4.c:
	* solib-sunos.c:
	* solib-som.h:
	* solib-som.c:
	* solib-pa64.h:
	* solib-pa64.c:
	* solib-osf.c:
	* solib-null.c:
	* solib-legacy.c:
	* solib-irix.c:
	* solib-frv.c:
	* solib-aix5.c:
	* sol-thread.c:
	* sparc64-linux-tdep.c:
	* sparc64-linux-nat.c:
	* sparc-tdep.h:
	* sparc-tdep.c:
	* sparc-sol2-tdep.c:
	* sparc-sol2-nat.c:
	* sparc-nat.h:
	* sparc-nat.c:
	* sparc-linux-tdep.c:
	* sparc-linux-nat.c:
	* source.h:
	* source.c:
	* somread.c:
	* solist.h:
	* solib.h:
	* std-regs.c:
	* stack.h:
	* stack.c:
	* stabsread.h:
	* sparcobsd-tdep.c:
	* sparcnbsd-tdep.c:
	* sparcnbsd-nat.c:
	* sparc64obsd-tdep.c:
	* sparc64nbsd-tdep.c:
	* sparc64nbsd-nat.c:
	* sparc64fbsd-tdep.c:
	* sparc64fbsd-nat.c:
	* sparc64-tdep.h:
	* sparc64-tdep.c:
	* sparc64-sol2-tdep.c:
	* sparc64-nat.c:
	* ui-file.c:
	* typeprint.h:
	* typeprint.c:
	* tramp-frame.h:
	* tramp-frame.c:
	* trad-frame.h:
	* trad-frame.c:
	* tracepoint.h:
	* top.c:
	* tobs.inc:
	* thread.c:
	* terminal.h:
	* target.h:
	* symfile.h:
	* stop-gdb.c:
	* vaxbsd-nat.c:
	* vax-tdep.h:
	* vax-tdep.c:
	* vax-nat.c:
	* varobj.h:
	* varobj.c:
	* value.h:
	* value.c:
	* valprint.h:
	* valprint.c:
	* v850-tdep.c:
	* uw-thread.c:
	* user-regs.c:
	* ui-out.h:
	* ui-out.c:
	* ui-file.h:
	* xcoffsolib.h:
	* xcoffsolib.c:
	* wrapper.c:
	* wince.c:
	* wince-stub.h:
	* wince-stub.c:
	* vaxobsd-tdep.c:
	* vaxnbsd-tdep.c:
	* gdb_gcore.sh:
	* copying.c:
	* configure.ac:
	* aclocal.m4:
	* acinclude.m4:
	* reply_mig_hack.awk:
	* observer.sh:
	* gdb_mbuild.sh:
	* arm-linux-tdep.c:
	* blockframe.c:
	* dbug-rom.c:
	* environ.h:
	* dwarf2loc.h:
	* gdb-events.sh:
	* glibc-tdep.h:
	* gdb_wait.h:
	* gdbthread.h:
	* i386-sol2-tdep.c:
	* hppabsd-tdep.c:
	* hppa-linux-nat.c:
	* hppa-hpux-nat.c:
	* ia64-linux-tdep.c:
	* infptrace.c:
	* linespec.h:
	* maint.c:
	* mips-mdebug-tdep.h:
	* remote-m32r-sdi.c:
	* s390-nat.c:
	* rs6000-nat.c:
	* remote-utils.h:
	* sh3-rom.c:
	* sh-linux-tdep.c:
	* top.h:
	* symtab.h:
	* symmisc.c:
	* symfile-mem.c:
	* srec.h:
	* user-regs.h:
	* version.h:
	* valarith.c:
	* xstormy16-tdep.c:
	* wrapper.h:
	* Makefile.in:
	* f-exp.y:
	* cris-tdep.c:
	* cp-name-parser.y:
	* procfs.c:
	* proc-utils.h:
	* proc-flags.c:
	* proc-api.c:
	* p-exp.y:
	* m68hc11-tdep.c:
	* m2-exp.y:
	* kod.h:
	* kod-cisco.c:
	* jv-exp.y:
	* hppa-linux-tdep.c: Add (c) after Copyright.  Update the FSF
	address.
@
text
@d38 1
d435 1
@


1.46
log
@* i386-linux-tdep.c (linux_sigtramp_code, linux_rt_sigtramp_code):
Change type to `static const gdb_byte'.
(i386_linux_sigtramp_start, i386_linux_rt_sigtramp_start)
(i386_linux_sigcontext_addr): Use gdb_byte for buf.
* amd64-linux-tdep.c (linux_sigtramp_code): Change type to `static
const gdb_byte'.
(amd64_linux_sigtramp_start, amd64_linux_sigcontext_addr): Use
gdb_byte for buf.
* amd64fbsd-tdep.c (amd64fbsd_supply_uthread)
(amd64fbsd_collect_uthread): Use gdb_byte for buf.
@
text
@d3 1
a3 1
   Copyright 2000, 2001, 2002, 2003, 2004, 2005
d20 2
a21 2
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */
@


1.45
log
@	* gdbarch.sh (fetch_tls_load_module_address): New architecture method.
	* gdbarch.c, gdbarch.h: Regenerate.
	* dwarf2loc.c (dwarf_expr_tls_address): Fetch TLS load module
	address and pass this address, instead of the objfile address, to
	target_get_thread_local_address().
	* linux-thread-db.c (thread_db_get_thread_local_address): Change
	second parameter from type ``struct objfile *'' to CORE_ADDR.  Do
	not call svr4_fetch_objfile_link_map() to fetch the load module
	address.
	* target.h (struct target_ops): Change second parameter of
	``to_get_thread_local_address'' from ``struct objfile *'' to
	``CORE_ADDR''.
	* alpha-linux-tdep.c (solib-svr4.h): Include.
	(alpha_linux_init_abi): Register TLS load module fetcher.
	* amd64-linux-tdep.c (amd64_linux_init_abi): Likewise.
	* hppa-linux-tdep.c (hppa_linux_init_abi): Likewise.
	* i386-linux-tdep.c (i386_linux_init_abi): Likewise.
	* ia64-linux-tdep.c (solib-svr4.h): Include.
	(ia64_linux_init_abi): Register TLS load module fetcher.
	* m32r-linux-tdep.c (m32r_linux_init_abi): Likewise.
	* m68klinux-tdep.c (m68k_linux_init_abi): Likewise.
	* mips-linux-tdep.c (mips_linux_init_abi): Likewise.
	* s390-tdep.c (s390_gdbarch_init): Likewise.
	* sparc-linux-tdep.c (sparc32_linux_init_abi): Likewise.
	* sparc64-linux-tdep.c (solib-svr4.h): Include.
	(sparc64_linux_init_abi): Register TLS load module fetcher.
	* Makefile.in (alpha-linux-tdep.o, ia64-linux-tdep.o)
	(sparc-linux-tdep.o): Update dependencies.
@
text
@d3 2
a4 1
   Copyright 2000, 2001, 2002, 2003, 2004 Free Software Foundation, Inc.
d110 1
a110 1
static const unsigned char linux_sigtramp_code[] =
d126 1
a126 1
  unsigned char buf[LINUX_SIGTRAMP_LEN];
d179 1
a179 1
static const unsigned char linux_rt_sigtramp_code[] =
d194 1
a194 1
  unsigned char buf[LINUX_RT_SIGTRAMP_LEN];
d280 1
a280 1
  char buf[4];
@


1.44
log
@2005-02-10  Andrew Cagney  <cagney@@gnu.org>

	Mark up all error and warning messages.
	* ada-lang.c, amd64-tdep.c, arch-utils.c, breakpoint.c: Update.
	* bsd-kvm.c, bsd-uthread.c, coff-solib.h, coffread.c: Update.
	* core-aout.c, core-regset.c, corefile.c, corelow.c: Update.
	* cp-abi.c, cp-support.c, cp-valprint.c, cris-tdep.c: Update.
	* dbxread.c, demangle.c, doublest.c, dsrec.c: Update.
	* dve3900-rom.c, dwarf2expr.c, dwarf2loc.c: Update.
	* dwarf2read.c, dwarfread.c, elfread.c, eval.c: Update.
	* event-top.c, exec.c, expprint.c, f-lang.c: Update.
	* f-typeprint.c, f-valprint.c, fbsd-nat.c, findvar.c: Update.
	* frame.c, frv-linux-tdep.c, gcore.c, gdbtypes.c: Update.
	* gnu-nat.c, gnu-v2-abi.c, gnu-v3-abi.c, go32-nat.c: Update.
	* hpacc-abi.c, hppa-hpux-nat.c, hppa-hpux-tdep.c: Update.
	* hppa-linux-nat.c, hppa-linux-tdep.c, hppa-tdep.c: Update.
	* hpread.c, hpux-thread.c, i386-linux-nat.c: Update.
	* i386-linux-tdep.c, i386-tdep.c, i386bsd-nat.c: Update.
	* i386gnu-nat.c, i387-tdep.c, ia64-linux-nat.c: Update.
	* ia64-tdep.c, inf-child.c, inf-ptrace.c, inf-ttrace.c: Update.
	* infcall.c, infcmd.c, inflow.c, infptrace.c, infrun.c: Update.
	* inftarg.c, interps.c, irix5-nat.c, jv-lang.c: Update.
	* kod-cisco.c, kod.c, language.c, libunwind-frame.c: Update.
	* linespec.c, linux-nat.c, linux-thread-db.c, m2-lang.c: Update.
	* m32r-rom.c, m68hc11-tdep.c, m68k-tdep.c: Update.
	* m68klinux-nat.c, macrocmd.c, macroexp.c, main.c: Update.
	* maint.c, mdebugread.c, mem-break.c, memattr.c: Update.
	* mips-linux-tdep.c, mips-tdep.c, mipsread.c, monitor.c: Update.
	* nlmread.c, nto-procfs.c, objc-lang.c, objfiles.c: Update.
	* observer.c, ocd.c, p-lang.c, p-typeprint.c: Update.
	* p-valprint.c, pa64solib.c, parse.c, ppc-linux-tdep.c: Update.
	* ppcnbsd-tdep.c, printcmd.c, procfs.c, remote-e7000.c: Update.
	* remote-fileio.c, remote-m32r-sdi.c, remote-rdi.c: Update.
	* remote-rdp.c, remote-sim.c, remote-st.c: Update.
	* remote-utils.c, remote-utils.h, remote.c: Update.
	* rom68k-rom.c, rs6000-nat.c, s390-tdep.c, scm-lang.c: Update.
	* ser-e7kpc.c, ser-tcp.c, ser-unix.c, sh-tdep.c: Update.
	* sh3-rom.c, shnbsd-tdep.c, sol-thread.c, solib-aix5.c: Update.
	* solib-frv.c, solib-irix.c, solib-osf.c, solib-pa64.c: Update.
	* solib-som.c, solib-sunos.c, solib-svr4.c, solib.c: Update.
	* somread.c, somsolib.c, source.c, stabsread.c: Update.
	* stack.c, std-regs.c, symfile-mem.c, symfile.c: Update.
	* symmisc.c, symtab.c, target.c, thread.c, top.c: Update.
	* tracepoint.c, trad-frame.c, typeprint.c, utils.c: Update.
	* uw-thread.c, valarith.c, valops.c, valprint.c: Update.
	* value.c, varobj.c, version.in, win32-nat.c, wince.c: Update.
	* xcoffread.c, xcoffsolib.c, cli/cli-cmds.c: Update.
	* cli/cli-decode.c, cli/cli-dump.c, cli/cli-logging.c: Update.
	* cli/cli-script.c, cli/cli-setshow.c, mi/mi-cmd-break.c: Update.
	* mi/mi-cmd-disas.c, mi/mi-cmd-env.c, mi/mi-cmd-file.c: Update.
	* mi/mi-cmd-stack.c, mi/mi-cmd-var.c, mi/mi-getopt.c: Update.
	* mi/mi-symbol-cmds.c, tui/tui-layout.c, tui/tui-stack.c: Update.
	* tui/tui-win.c: Update.
@
text
@d440 4
@


1.43
log
@2004-11-09  Andrew Cagney  <cagney@@gnu.org>

	* i386-linux-tdep.c: Include "dwarf2-frame.h".
	* Makefile.in: Update all dependencies.
@
text
@d311 1
a311 1
  error ("Couldn't recognize signal trampoline.");
@


1.42
log
@	* Makefile.in (symfile-mem.o): Update dependencies.
	* i386-linux-tdep.c (i386_linux_dwarf_signal_frame_p): New.
	(i386_linux_init_abi): Call dwarf2_frame_set_signal_frame_p.
	* inf-ptrace.c (inf_ptrace_attach): Call
	observer_notify_inferior_created.
	* inftarg.c (child_attach): Likewise.
	* symfile-mem.c: Include "observer.h", "auxv.h", and "elf/common.h".
	(symbol_file_add_from_memory): Take NAME argument.  Use it for
	the new BFD's filename.
	(add_symbol_file_from_memory_command): Update call to
	symbol_file_add_from_memory.
	(struct symbol_file_add_from_memory_args, add_vsyscall_page)
	(symbol_file_add_from_memory_wrapper): New.
	(_initialize_symfile_mem): Register add_vsyscall_page as an
	inferior_created observer.
@
text
@d30 1
a30 1

@


1.41
log
@* i386-linux-tdep.c (i386_linux_sigtramp_start)
(i386_linux_rt_sigtramp_start): Change argument from CORE_ADDR to
struct frame_info *.  Use safe_frame_unwind_memory instead of
deprecated_read_memory_nobpt.
(i386_linux_sigtramp_p, i386_linux_sigcontext_addr): Adjust for
changed signature of i386_linux_sigtramp_start and
i386_linux_rt_sigtramp_start.
@
text
@d247 21
d438 2
@


1.40
log
@2004-07-20  Andrew Cagney  <cagney@@gnu.org>

	* breakpoint.c (deprecated_read_memory_nobpt): Rename
	read_memory_nobpt.
	* sparc-linux-tdep.c (sparc_linux_sigtramp_start): Update.
	* s390-tdep.c (s390_readinstruction, s390_in_function_epilogue_p)
	(s390_sigtramp_frame_sniffer): Update.
	* mn10300-tdep.c (mn10300_analyze_prologue): Update.
	* mipsnbsd-tdep.c (mipsnbsd_sigtramp_offset): Update.
	* mips-tdep.c (mips_fetch_instruction, mips16_fetch_instruction)
	(mips32_fetch_instruction): Update.
	* mcore-tdep.c (get_insn): Update.
	* m68klinux-tdep.c (m68k_linux_pc_in_sigtramp): Update.
	* i386nbsd-tdep.c (i386nbsd_sigtramp_offset): Update.
	* i386ly-tdep.c (i386lynx_saved_pc_after_call): Update.
	* i386-linux-tdep.c (i386_linux_sigtramp_start)
	(i386_linux_rt_sigtramp_start): Update.
	* i386-linux-nat.c (child_resume): Update.
	* hppa-tdep.c (skip_prologue_hard_way, hppa_frame_cache): Update.
	* hppa-linux-tdep.c (insns_match_pattern): Update.
	* gdbcore.h: Update.
	* frv-tdep.c (frv_gdbarch_adjust_breakpoint_address): Update.
	* frame.c (safe_frame_unwind_memory): Update.
	* amd64-linux-tdep.c (amd64_linux_sigtramp_start): Update.
	* alphanbsd-tdep.c (alphanbsd_sigtramp_offset): Update.
	* alpha-tdep.c (alpha_read_insn): Update.
@
text
@d118 2
a119 2
/* If PC is in a sigtramp routine, return the address of the start of
   the routine.  Otherwise, return 0.  */
d122 1
a122 1
i386_linux_sigtramp_start (CORE_ADDR pc)
d124 1
d134 1
a134 1
  if (deprecated_read_memory_nobpt (pc, (char *) buf, LINUX_SIGTRAMP_LEN) != 0)
d155 1
a155 1
      if (deprecated_read_memory_nobpt (pc, (char *) buf, LINUX_SIGTRAMP_LEN) != 0)
d186 2
a187 2
/* If PC is in a RT sigtramp routine, return the address of the start
   of the routine.  Otherwise, return 0.  */
d190 1
a190 1
i386_linux_rt_sigtramp_start (CORE_ADDR pc)
d192 1
d202 1
a202 1
  if (deprecated_read_memory_nobpt (pc, (char *) buf, LINUX_RT_SIGTRAMP_LEN) != 0)
d212 2
a213 1
      if (deprecated_read_memory_nobpt (pc, (char *) buf, LINUX_RT_SIGTRAMP_LEN) != 0)
d240 2
a241 2
    return (i386_linux_sigtramp_start (pc) != 0
	    || i386_linux_rt_sigtramp_start (pc) != 0);
d263 1
a263 1
  pc = i386_linux_sigtramp_start (frame_pc_unwind (next_frame));
d277 1
a277 1
  pc = i386_linux_rt_sigtramp_start (frame_pc_unwind (next_frame));
@


1.39
log
@* amd64-linux-tdep.c, amd64nbsd-tdep.c, amd64obsd-tdep.c,
i386-linux-tdep.c, i386-tdep.c, i386nbsd-tdep.c, i386obsd-tdep.c:
Fix typo.
@
text
@d133 1
a133 1
  if (read_memory_nobpt (pc, (char *) buf, LINUX_SIGTRAMP_LEN) != 0)
d154 1
a154 1
      if (read_memory_nobpt (pc, (char *) buf, LINUX_SIGTRAMP_LEN) != 0)
d200 1
a200 1
  if (read_memory_nobpt (pc, (char *) buf, LINUX_RT_SIGTRAMP_LEN) != 0)
d210 1
a210 1
      if (read_memory_nobpt (pc, (char *) buf, LINUX_RT_SIGTRAMP_LEN) != 0)
@


1.38
log
@* amd64-tdep.c (amd64_sigtramp_frame_sniffer): Rewrite to use new
sigtramp_p member of `struct gdbarch_tdep'.  Also check whether
the program counter is in the range specified by `struct
gdbarch_tdep'.
* amd64-linux-tdep.c: Include "symtab.h".
(amd64_linux_pc_in_sigtramp): Remove function.
(amd64_linux_sigtramp_p): New function.
(amd64_linux_init_abi): Initialize TDEP->sigtramp_p.  Don't set
deprecated_pc_in_sigtramp.
* amd64nbsd-tdep.c: Include "symtab.h".
(amd64nbsd_sigtramp_p): New function.
(amd64nbsd_init_abi): Initialize TDEP->sigtramp_p.  Don't set
deprecated_pc_in_sigtramp.
* amd64obsd-tdep.c: Include "symtab.h" and "objfiles.h".  Add a
few comments.
(amd64obsd_pc_in_sigtramp): Remove function.
(amd64obsd_sigtramp_p): New function.
(amd64obsd_init_abi): Initialize TDEP->sigtramp_p.  Don't set
deprecated_pc_in_sigtramp.
* i386-tdep.h (struct gdbarch_tdep): Add sigtramp_p member.
(i386bsd_pc_ins_sigtramp): Remove prototype.
(i386bsd_sigtramp_start, i386bsd_sigtramp_end): Remove prototypes.
* i386-tdep.c (i386_sigtramp_frame_sniffer): Rewrite to use new
sigtramp_p member of `struct gdbarch_tdep'.  Also check whether
the program counter is in the range specified by `struct
gdbarch_tdep'.
(i386_pc_in_sigtramp, i386_svr4_pc_in_sigtramp): Remove functions.
(i386_sigtramp_p, i386_svr4_sigtramp_p): New functions.
(i386_go32_pc_in_sigtramp): Remove function.
(i386_svr4_init_abi): Don't set deprecated_pc_in_sigtramp.
Initialize TDEP->sigtramp_p.
(i386_go32_init_abi): Initialize TDEP->sigtramp_p to NULL.
(i386_gdbarch_init): Initialize TDEP->sigtramp_p.  Don't set
deprecated_pc_in_sigtramp.
* i386-linux-tdep.c: Adjust comments.
(i386_linux_pc_in_sigtramp): Remove function.
(i386_linux_sigtramp_p): New function.
(i386_linux_init_abi): Initialize TDEP->sigtramp_p.  Don't set
deprecated_pc_in_sigtramp.
* i386-nto-tdep.c: Update copyright year.
(i386nto_pc_in_sigtramp): Remove function.
(i386nto_sigtramp_p): New function.
(i386nto_sigcontext_addr): Use I386_ESP_REGNUM instead of
SP_REGNUM.
(i386nto_init_abi): Initialize TDEP->sigtramp_p.  Don't set
deprecated_pc_in_sigtramp.
* i386-sol2-tdep.c: Update copyright year.
(i386_sol2_pc_in_sigtramp): Remove function.
(i386_sol2_sigtramp_p): New function.
(i386_sol2_init_abi): Initialize TDEP->sigtramp_p.  Don't set
deprecated_pc_in_sigtramp.
* i386bsd-tdep.c (i386bsd_pc_in_sigtramp): Remove function.
(i386bsd_sigtramp_start, i386bsd_sigtramp_end): Remove functions.
(i386bsd_init_abi): Don't set deprecated_pc_in_sigtramp,
deprecated_sigtramp_start and deprecated_sigtramp_end.
* i386nbsd-tdep.c: Include "frame.h" and "symtab.h".
(i386nbsd_pc_in_sigtramp): Remove function.
(i386nbsd_sigtramp_p): New function.
(i386nbsd_init_abi): Don't set deprecated_pc_in_sigtramp,
deprecated_sigtramp_start, deprecated_sigtramp_end.  Initialize
TDEP->sigtramp_start, TDEP->sigtramp_end and TDEP->sigtramp_p.
* i386obsd-tdep.c: Include "frame.h", "symtab.h" and "objfiles.h".
(i386obsd_pc_in_sigtramp): Remove function.
(i386obsd_sigtramp_p): New function.
(i386obsd_sigtramp_start, i386obsd_sigtramp_end): Remove
functions.
(i386bsd_init_abi): Don't set deprecated_pc_in_sigtramp,
deprecated_sigtramp_start, deprecated_sigtramp_end.  Initialize
TDEP->sigtramp_p.
* Makefile.in (amd64-linux-tdep.o, amd64nbsd-tdep.o,
amd64obsd-tdep.o, i386nbsd-tdep.o, i386obsd-tdep.o): Update
dependencies.
@
text
@d220 1
a220 1
/* Return whether the frame preciding NEXT_FRAME corresponds to a
@


1.37
log
@2004-03-23  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (PC_IN_SIGTRAMP): Change to a function with
	predicate, deprecate.
	* gdbarch.h, gdbarch.c: Re-generate.
	* alpha-linux-tdep.c (alpha_linux_init_abi): Update.
	* alpha-osf1-tdep.c (alpha_osf1_init_abi): Update.
	* alpha-tdep.c (alpha_sigtramp_frame_sniffer): Update.
	* alphafbsd-tdep.c (alphafbsd_init_abi): Update.
	* alphanbsd-tdep.c (alphanbsd_init_abi): Update.
	* amd64-linux-tdep.c (amd64_linux_init_abi): Update.
	* amd64-tdep.c (amd64_sigtramp_frame_sniffer): Update.
	* amd64nbsd-tdep.c (amd64nbsd_init_abi): Update.
	* amd64obsd-tdep.c (amd64obsd_init_abi): Update.
	* arm-tdep.c (arm_sigtramp_unwind_sniffer): Update.
	* blockframe.c (find_pc_partial_function): Update.
	* breakpoint.c (bpstat_what): Update.
	* frame.c (frame_type_from_pc, legacy_get_prev_frame): Update.
	* frv-linux-tdep.c (frv_linux_init_abi): Update.
	* frv-tdep.c (frv_sigtramp_frame_sniffer): Update.
	* hppa-hpux-tdep.c (hppa_hpux_init_abi): Update.
	* i386-interix-tdep.c (i386_interix_init_abi): Update.
	* i386-linux-tdep.c (i386_linux_init_abi): Update.
	* i386-nto-tdep.c (i386nto_init_abi): Update.
	* i386-sol2-tdep.c (i386_sol2_init_abi): Update.
	* i386-tdep.c (i386_sigtramp_frame_sniffer)
	(i386_svr4_init_abi, i386_go32_init_abi, i386_gdbarch_init): Update.
	* i386bsd-tdep.c (i386bsd_init_abi): Update.
	* i386nbsd-tdep.c (i386nbsd_init_abi): Update.
	* i386obsd-tdep.c (i386obsd_init_abi): Update.
	* ia64-tdep.c (ia64_sigtramp_frame_sniffer): Update.
	* infrun.c (pc_in_sigtramp): Update.
	* m68k-tdep.c (m68k_sigtramp_frame_sniffer): Update.
	* m68klinux-tdep.c (m68k_linux_init_abi): Update.
	* mips-tdep.c (mips_gdbarch_init): Update.
	* mipsnbsd-tdep.c (mipsnbsd_init_abi): Update.
	* ppc-linux-tdep.c: Update comment.
	* ppcnbsd-tdep.c (ppcnbsd_init_abi): Update.
	* shnbsd-tdep.c (shnbsd_init_abi): Update.
	* sparc-linux-tdep.c (sparc32_linux_init_abi): Update.
	* sparc-sol2-tdep.c (sparc32_sol2_init_abi): Update.
	* sparc64-sol2-tdep.c (sparc64_sol2_init_abi): Update.
	* sparc64fbsd-tdep.c (sparc64fbsd_init_abi): Update.
	* sparc64nbsd-tdep.c (sparc64nbsd_init_abi): Update.
	* sparc64obsd-tdep.c (sparc64obsd_init_abi): Update.
	* sparcnbsd-tdep.c (sparc32nbsd_init_abi): Update.
	* sparcobsd-tdep.c (sparc32obsd_init_abi): Update.

Index: doc/ChangeLog
2004-03-23  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Deprecate
	references to PC_IN_SIGTRAMP.
@
text
@d86 1
a86 1
   to occur anywhere other than a signal trampoline.
d90 3
a92 3
   any other way.  The DEPRECATED_PC_IN_SIGTRAMP macro in tm-linux.h
   arranges to only call us if no function name could be identified,
   which should be the case since the code is on the stack.
d220 2
a221 1
/* Return whether PC is in a GNU/Linux sigtramp routine.  */
d224 1
a224 1
i386_linux_pc_in_sigtramp (CORE_ADDR pc, char *name)
d226 5
d403 1
a406 6

  /* When the i386 Linux kernel calls a signal handler, the return
     address points to a bit of code on the stack.  This function is
     used to identify this bit of code as a signal trampoline in order
     to support backtracing through calls to signal handlers.  */
  set_gdbarch_deprecated_pc_in_sigtramp (gdbarch, i386_linux_pc_in_sigtramp);
@


1.36
log
@* i386-linux-tdep.c: Update copyright year.
(i386_linux_svr4_fetch_link_map_offsets): Remove function.
(i386_linux_init_abi): Set solib_svr4_fetch_link_maop_offsets to
svr4_ilp32_link_map_offsets instead of
i386_linux_svr4_fetch_link_map_offsets.
@
text
@d90 3
a92 3
   any other way.  The PC_IN_SIGTRAMP macro in tm-linux.h arranges to
   only call us if no function name could be identified, which should
   be the case since the code is on the stack.
d405 1
a405 1
  set_gdbarch_pc_in_sigtramp (gdbarch, i386_linux_pc_in_sigtramp);
@


1.35
log
@* i386-linux-tdep.c (i386_linux_sigcontext_addr): Fix calculation
of UCONTEXT_ADDR.  Fixes PR backtrace/1545.
@
text
@d1 1
a1 1
/* Target-dependent code for GNU/Linux running on i386's, for GDB.
d3 1
a3 1
   Copyright 2000, 2001, 2002, 2003 Free Software Foundation, Inc.
a29 1
#include "solib-svr4.h"
d36 1
a308 41
/* Fetch (and possibly build) an appropriate link_map_offsets
   structure for native GNU/Linux x86 targets using the struct offsets
   defined in link.h (but without actual reference to that file).

   This makes it possible to access GNU/Linux x86 shared libraries
   from a GDB that was not built on an GNU/Linux x86 host (for cross
   debugging).  */

static struct link_map_offsets *
i386_linux_svr4_fetch_link_map_offsets (void)
{
  static struct link_map_offsets lmo;
  static struct link_map_offsets *lmp = NULL;

  if (lmp == NULL)
    {
      lmp = &lmo;

      lmo.r_debug_size = 8;	/* The actual size is 20 bytes, but
				   this is all we need.  */
      lmo.r_map_offset = 4;
      lmo.r_map_size   = 4;

      lmo.link_map_size = 20;	/* The actual size is 552 bytes, but
				   this is all we need.  */
      lmo.l_addr_offset = 0;
      lmo.l_addr_size   = 4;

      lmo.l_name_offset = 4;
      lmo.l_name_size   = 4;

      lmo.l_next_offset = 12;
      lmo.l_next_size   = 4;

      lmo.l_prev_offset = 16;
      lmo.l_prev_size   = 4;
    }

  return lmp;
}

d407 5
a412 2
  set_solib_svr4_fetch_link_map_offsets (gdbarch,
				       i386_linux_svr4_fetch_link_map_offsets);
@


1.35.4.1
log
@Merge mainline to intercu branch.
@
text
@d1 1
a1 1
/* Target-dependent code for GNU/Linux i386.
d3 1
a3 1
   Copyright 2000, 2001, 2002, 2003, 2004 Free Software Foundation, Inc.
d30 1
a36 1
#include "solib-svr4.h"
d90 3
a92 3
   any other way.  The DEPRECATED_PC_IN_SIGTRAMP macro in tm-linux.h
   arranges to only call us if no function name could be identified,
   which should be the case since the code is on the stack.
d309 41
d446 1
a446 5
  set_gdbarch_deprecated_pc_in_sigtramp (gdbarch, i386_linux_pc_in_sigtramp);

  /* GNU/Linux uses SVR4-style shared libraries.  */
  set_solib_svr4_fetch_link_map_offsets
    (gdbarch, svr4_ilp32_fetch_link_map_offsets);
a447 1
  /* GNU/Linux uses the dynamic linker included in the GNU C Library.  */
d449 2
@


1.35.4.2
log
@Merge mainline to intercu branch - 2004-09-15
@
text
@d86 1
a86 1
   to occur anywhere other than in a signal trampoline.
d90 3
a92 3
   any other way.  Therefore we only do the memory reads if no
   function name could be identified, which should be the case since
   the code is on the stack.
d118 2
a119 2
/* If NEXT_FRAME unwinds into a sigtramp routine, return the address
   of the start of the routine.  Otherwise, return 0.  */
d122 1
a122 1
i386_linux_sigtramp_start (struct frame_info *next_frame)
a123 1
  CORE_ADDR pc = frame_pc_unwind (next_frame);
d133 1
a133 1
  if (!safe_frame_unwind_memory (next_frame, pc, buf, LINUX_SIGTRAMP_LEN))
d154 1
a154 1
      if (!safe_frame_unwind_memory (next_frame, pc, buf, LINUX_SIGTRAMP_LEN))
d185 2
a186 2
/* If NEXT_FRAME unwinds into an RT sigtramp routine, return the
   address of the start of the routine.  Otherwise, return 0.  */
d189 1
a189 1
i386_linux_rt_sigtramp_start (struct frame_info *next_frame)
a190 1
  CORE_ADDR pc = frame_pc_unwind (next_frame);
d200 1
a200 1
  if (!safe_frame_unwind_memory (next_frame, pc, buf, LINUX_RT_SIGTRAMP_LEN))
d210 1
a210 2
      if (!safe_frame_unwind_memory (next_frame, pc, buf,
				     LINUX_RT_SIGTRAMP_LEN))
d220 1
a220 2
/* Return whether the frame preceding NEXT_FRAME corresponds to a
   GNU/Linux sigtramp routine.  */
d223 1
a223 1
i386_linux_sigtramp_p (struct frame_info *next_frame)
a224 5
  CORE_ADDR pc = frame_pc_unwind (next_frame);
  char *name;

  find_pc_partial_function (pc, &name, NULL, NULL);

d231 2
a232 2
    return (i386_linux_sigtramp_start (next_frame) != 0
	    || i386_linux_rt_sigtramp_start (next_frame) != 0);
d254 1
a254 1
  pc = i386_linux_sigtramp_start (next_frame);
d268 1
a268 1
  pc = i386_linux_rt_sigtramp_start (next_frame);
a396 1
  tdep->sigtramp_p = i386_linux_sigtramp_p;
d401 6
@


1.35.8.1
log
@Merge with mainline cagney_tramp-20040321-mergepoint.
@
text
@d1 1
a1 1
/* Target-dependent code for GNU/Linux i386.
d3 1
a3 1
   Copyright 2000, 2001, 2002, 2003, 2004 Free Software Foundation, Inc.
d30 1
a36 1
#include "solib-svr4.h"
d309 41
a447 5
  /* GNU/Linux uses SVR4-style shared libraries.  */
  set_solib_svr4_fetch_link_map_offsets
    (gdbarch, svr4_ilp32_fetch_link_map_offsets);

  /* GNU/Linux uses the dynamic linker included in the GNU C Library.  */
d449 2
@


1.34
log
@* glibc-tdep.h (struct gdbarch): Declare opaque.
(glibc_skip_solib_resolver): Adjust prototype.
* glibc-tdep.c (glibc_skip_solib_resolver): Adjust.
* arm-linux-tdep.c (arm_linux_skip_solib_resolver): Remove.
(arm_linux_init_abi): Set skip_solib_resolver.
* i386-linux-tdep.c (i386_linux_skip_solib_resolver): Remove.
(i386_linux_init_abi): Set skip_solib_resolver.
* config/arm/tm-linux.h (SKIP_SOLIB_RESOLVER): Remove.
(arm_linux_skip_solib_resolver): Remove prototype.
* config/i386/tm-linux.h (SKIP_SOLIB_RESOLVER): Remove.
(i386_linux_skip_solib_resolver): Remove prototype.
@
text
@d277 1
a277 1
      ucontext_addr = extract_unsigned_integer (buf, 4) + 20;
@


1.33
log
@See previous commit.
@
text
@a308 8
/* Calling functions in shared libraries.  */

CORE_ADDR
i386_linux_skip_solib_resolver (CORE_ADDR pc)
{
  return glibc_skip_solib_resolver (pc);
}

d448 1
@


1.32
log
@* i386-linux-tdep.c (i386_linux_gregset_reg_offset): New variable.
(i386_linux_init_abi): Initialize TDEP->gregset_reg_offset,
TDEP->gregset_num_regs and tdep->sizeof_gregset.
@
text
@d28 1
d30 1
d32 1
a32 8
/* For i386_linux_skip_solib_resolver.  */
#include "symtab.h"
#include "symfile.h"
#include "objfiles.h"

#include "solib-svr4.h"		/* For struct link_map_offsets.  */

#include "osabi.h"
d36 1
a310 72
/* Find the minimal symbol named NAME, and return both the minsym
   struct and its objfile.  This probably ought to be in minsym.c, but
   everything there is trying to deal with things like C++ and
   SOFUN_ADDRESS_MAYBE_TURQUOISE, ...  Since this is so simple, it may
   be considered too special-purpose for general consumption.  */

static struct minimal_symbol *
find_minsym_and_objfile (char *name, struct objfile **objfilep)
{
  struct objfile *objfile;

  ALL_OBJFILES (objfile)
    {
      struct minimal_symbol *msym;

      ALL_OBJFILE_MSYMBOLS (objfile, msym)
	{
	  if (SYMBOL_LINKAGE_NAME (msym)
	      && strcmp (SYMBOL_LINKAGE_NAME (msym), name) == 0)
	    {
	      *objfilep = objfile;
	      return msym;
	    }
	}
    }

  return 0;
}

static CORE_ADDR
skip_gnu_resolver (CORE_ADDR pc)
{
  /* The GNU dynamic linker is part of the GNU C library, so many
     GNU/Linux distributions use it.  (All ELF versions, as far as I
     know.)  An unresolved PLT entry points to "_dl_runtime_resolve",
     which calls "fixup" to patch the PLT, and then passes control to
     the function.

     We look for the symbol `_dl_runtime_resolve', and find `fixup' in
     the same objfile.  If we are at the entry point of `fixup', then
     we set a breakpoint at the return address (at the top of the
     stack), and continue.
  
     It's kind of gross to do all these checks every time we're
     called, since they don't change once the executable has gotten
     started.  But this is only a temporary hack --- upcoming versions
     of GNU/Linux will provide a portable, efficient interface for
     debugging programs that use shared libraries.  */

  struct objfile *objfile;
  struct minimal_symbol *resolver 
    = find_minsym_and_objfile ("_dl_runtime_resolve", &objfile);

  if (resolver)
    {
      struct minimal_symbol *fixup
	= lookup_minimal_symbol ("fixup", NULL, objfile);

      if (fixup && SYMBOL_VALUE_ADDRESS (fixup) == pc)
	return frame_pc_unwind (get_current_frame ()); 
    }

  return 0;
}      

/* See the comments for SKIP_SOLIB_RESOLVER at the top of infrun.c.
   This function:
   1) decides whether a PLT has sent us into the linker to resolve
      a function reference, and 
   2) if so, tells us where to set a temporary breakpoint that will
      trigger when the dynamic linker is done.  */

d314 1
a314 8
  CORE_ADDR result;

  /* Plug in functions for other kinds of resolvers here.  */
  result = skip_gnu_resolver (pc);
  if (result)
    return result;

  return 0;
@


1.31
log
@* i386-linux-tdep.c (i386_linux_sc_reg_offset): Don't explicitly
specify size of array.
(i386_linux_init_abi): Remove initialization of
TDEP->num_xmm_regs.  Use I386_LINUX_NUM_REGS for number of
registers.  Use ARRAY_SIZE to initialize TDEP->sc_num_regs.
@
text
@d442 44
d522 4
@


1.30
log
@* i386-linux-nat.c (child_resume): Use I386_ESP_REGNUM instead of
SP_REGNUM.
* i386-linux-tdep.c (i386_linux_sigcontext_addr): Likewise.
* i386bsd-tdep.c (i386bsd_sigcontext_addr): Likewise.
@
text
@d443 1
a443 1
static int i386_linux_sc_reg_offset[I386_NUM_GREGS] =
a470 4
  /* We support the SSE registers on GNU/Linux.  */
  tdep->num_xmm_regs = I386_NUM_XREGS - 1;
  /* set_gdbarch_num_regs (gdbarch, I386_SSE_NUM_REGS); */

d475 1
a475 1
  set_gdbarch_num_regs (gdbarch, I386_SSE_NUM_REGS + 1);
d483 1
a483 1
  tdep->sc_num_regs = I386_NUM_GREGS;
@


1.30.8.1
log
@2003-08-21  Andrew Cagney  <cagney@@redhat.com>

	* i386-tdep.h (i386_regnums): Replace I386_EAX_REGNUM,
	I386_EDX_REGNUM, I386_ESP_REGNUM, I386_EBP_REGNUM,
	I386_EIP_REGNUM, I386_EFLAGS_REGNUM, I386_ST0_REGNUM.
	* i386-linux-tdep.h (i386_linux_greg_offset): Declare.
	(i386_linux_supply_fpxregset): Declare.
	(i386_linux_supply_fpregset): Declare.
	(i386_linux_supply_gregset): Declare.
	* i386-linux-tdep.c: Include "gdb_assert.h", and "i387-tdep.h".
	Do not include "gregset.h".
	(enum user_regs): Define.
	(struct regnum_map, struct regnum_to_user): Define.
	(i386_linux_greg_offset): New function.
	(dummy_sse_values): New function, copied from "i386-linux-nat.c"
	make hist independant.
	(i386_linux_supply_fpregset): New function.
	(i386_linux_supply_gregset): New function.
	(i386_linux_supply_fpxregset): New function.
	(fetch_core_registers): New function.
	(i386_linux_core_sniffer): New function.
	(i386_linux_core_fns): New table.
	(_initialize_i386_linux_tdep): Add i386_linux_core_fns to core
	functions.
	* i386-linux-nat.c: Do not include "gregset.h".
	(dummy_sse_values) Delete function.
	(regmap): Delete array.
	(register_u_addr, fill_gregset, cannot_fetch_register): Use
	i386_linux_greg_offset.
	(cannot_store_register): Call cannot_fetch_register.
	(supply_gregset): Call i386_linux_supply_gregset.
	(supply_fpregset): Call i386_linux_supply_fpregset.
	(supply_fpxregset): Call i386_linux_supply_fpxregset.
	(fetch_core_registers): Delete function.
	(linux_elf_core_fns): Delete table.
	(_initialize_i386_linux_nat): Delete function.
@
text
@a28 1
#include "gdb_assert.h"
a39 1
#include "i387-tdep.h"
a41 114

/* The register sets used in GNU/Linux ELF core-dumps are identical to
   the register sets in `struct user' that is used for a.out
   core-dumps, and is also used by `ptrace'.  The corresponding types
   are `elf_gregset_t' for the general-purpose registers (with
   `elf_greg_t' the type of a single GP register) and `elf_fpregset_t'
   for the floating-point registers.

   Those types used to be available under the names `gregset_t' and
   `fpregset_t' too, and this file used those names in the past.  But
   those names are now used for the register sets used in the
   `mcontext_t' type, and have a different size and layout.  */

enum user_regs {
  USER_INVALID = -1,
  USER_EBX,
  USER_ECX,
  USER_EDX,
  USER_ESI,
  USER_EDI,
  USER_EBP,
  USER_EAX,
  USER_DS,
  USER_ES,
  USER_FS,
  USER_GS,
  USER_ORIG_EAX,
  USER_EIP,
  USER_CS,
  USER_EFL,
  USER_UESP,
  USER_SS,
  USER_MAX
};

struct regnum_map
{
  enum i386_regnums regnum;
  enum user_regs user;
};

struct regnum_to_user
{
  long nr;
  const struct regnum_map *map;
};

long
i386_linux_greg_offset (int regnum)
{
  /* Mapping between the general-purpose registers in `struct user'
     format and GDB's register array layout.  */
  static const struct regnum_map regnum_map[] = 
  {
    { I386_EAX_REGNUM, USER_EAX },
    { I386_ECX_REGNUM, USER_ECX },
    { I386_EDX_REGNUM, USER_EDX },
    { I386_EBX_REGNUM, USER_EBX },
    { I386_ESP_REGNUM, USER_UESP },
    { I386_EBP_REGNUM, USER_EBP },
    { I386_ESI_REGNUM, USER_ESI },
    { I386_EDI_REGNUM, USER_EDI },
    { I386_EIP_REGNUM, USER_EIP },
    { I386_EFLAGS_REGNUM, USER_EFL },
    { I386_CS_REGNUM, USER_CS },
    { I386_SS_REGNUM, USER_SS },
    { I386_DS_REGNUM, USER_DS },
    { I386_ES_REGNUM, USER_ES },
    { I386_FS_REGNUM, USER_FS },
    { I386_GS_REGNUM, USER_GS },
    { I386_ST0_REGNUM, USER_INVALID },
    { I386_ST1_REGNUM, USER_INVALID },
    { I386_ST2_REGNUM, USER_INVALID },
    { I386_ST3_REGNUM, USER_INVALID },
    { I386_ST4_REGNUM, USER_INVALID },
    { I386_ST5_REGNUM, USER_INVALID },
    { I386_ST6_REGNUM, USER_INVALID },
    { I386_ST7_REGNUM, USER_INVALID },
    { I386_FCTRL_REGNUM, USER_INVALID },
    { I386_FSTAT_REGNUM, USER_INVALID },
    { I386_FTAG_REGNUM, USER_INVALID },
    { I386_FISEG_REGNUM, USER_INVALID },
    { I386_FIOFF_REGNUM, USER_INVALID },
    { I386_FOSEG_REGNUM, USER_INVALID },
    { I386_FOOFF_REGNUM, USER_INVALID },
    { I386_FOP_REGNUM, USER_INVALID },
    { I386_XMM0_REGNUM, USER_INVALID },
    { I386_XMM1_REGNUM, USER_INVALID },
    { I386_XMM2_REGNUM, USER_INVALID },
    { I386_XMM3_REGNUM, USER_INVALID },
    { I386_XMM4_REGNUM, USER_INVALID },
    { I386_XMM5_REGNUM, USER_INVALID },
    { I386_XMM6_REGNUM, USER_INVALID },
    { I386_XMM6_REGNUM, USER_INVALID },
    { I386_MXCSR_REGNUM, USER_INVALID },
    { I386_LINUX_ORIG_EAX_REGNUM, USER_ORIG_EAX }
  };
  const static struct regnum_to_user regnum_to_user =
  {
    ARRAY_SIZE (regnum_map), regnum_map
  };

  gdb_assert (TARGET_ARCHITECTURE->arch == bfd_arch_i386);
  if (regnum < 0)
    return USER_MAX * 4;
  if (regnum >= regnum_to_user.nr)
    return -1;
  gdb_assert (regnum_to_user.map[regnum].regnum == regnum);
  if (regnum_to_user.map[regnum].user < 0)
    return -1;
  return regnum_to_user.map[regnum].user * 4;
}


a498 147


/* Interpreting register set info found in core files and ptrace
   buffers.  */

/* Fill GDB's register array with the floating-point register values in
   *FPREGSETP.  */

/* Fill the XMM registers in the register array with dummy values.  For
   cases where we don't have access to the XMM registers.  I think
   this is cleaner than printing a warning.  For a cleaner solution,
   we should gdbarchify the i386 family.  */

static void
dummy_sse_values (void)
{
  struct gdbarch_tdep *tdep = gdbarch_tdep (current_gdbarch);
  int reg;
  /* Assume i386 is always little endian.  */
  static const char mxcsr[MAX_REGISTER_SIZE] = { 0x80, 0x1f };
  /* C doesn't have a syntax for NaN's (0xffffffffff), so generate it
     on the fly.  */
  char nan[MAX_REGISTER_SIZE];
  memset (nan, -1, sizeof nan);

  for (reg = 0; reg < tdep->num_xmm_regs; reg++)
    supply_register (XMM0_REGNUM + reg, (char *) nan);
  if (tdep->num_xmm_regs > 0)
    supply_register (MXCSR_REGNUM, (char *) &mxcsr);
}

void 
i386_linux_supply_fpregset (void *fpregset)
{
  i387_supply_fsave (fpregset);
  dummy_sse_values ();
}

/* Fill GDB's register array with the general-purpose register values
   in *GREGSETP.  */

void
i386_linux_supply_gregset (void *gregset)
{
  bfd_byte *regp = gregset;
  int i;

  for (i = 0; i < I386_NUM_GREGS; i++)
    {
      long offset = i386_linux_greg_offset (i);
      if (offset >= 0)
	supply_register (i, regp + offset);
    }

  if (I386_LINUX_ORIG_EAX_REGNUM < NUM_REGS)
    {
      long offset = i386_linux_greg_offset (I386_LINUX_ORIG_EAX_REGNUM);
      if (offset >= 0)
	supply_register (I386_LINUX_ORIG_EAX_REGNUM, regp + offset);
    }
}

/* Fill GDB's register array with the floating-point and SSE register
   values in *FPXREGSETP.  */

void
i386_linux_supply_fpxregset (void *fpxregsetp)
{
  i387_supply_fxsave (fpxregsetp);
}


/* Provide registers to GDB from a core file.

   (We can't use the generic version of this function in
   core-regset.c, because GNU/Linux has *three* different kinds of
   register set notes.  core-regset.c would have to call
   supply_fpxregset, which most platforms don't have.)

   CORE_REG_SECT points to an array of bytes, which are the contents
   of a `note' from a core file which BFD thinks might contain
   register contents.  CORE_REG_SIZE is its size.

   WHICH says which register set corelow suspects this is:
     0 --- the general-purpose register set, in elf_gregset_t format
     2 --- the floating-point register set, in elf_fpregset_t format
     3 --- the extended floating-point register set, in elf_fpxregset_t format

   REG_ADDR isn't used on GNU/Linux.  */

static void
fetch_core_registers (char *core_reg_sect, unsigned core_reg_size,
				 int which, CORE_ADDR reg_addr)
{
  switch (which)
    {
    case 0:
      if (core_reg_size < i386_linux_greg_offset (-1))
 	warning ("Wrong size register set in core file.");
      else
	i386_linux_supply_gregset (core_reg_sect);
      break;

    case 2:
      if (core_reg_size < 108)
	warning ("Wrong size fpregset in core file.");
      else
	i386_linux_supply_fpregset (core_reg_sect);
      break;

    case 3:
      if (core_reg_size < 512)
	warning ("Wrong size fpxregset in core file.");
      else
	i386_linux_supply_fpxregset (core_reg_sect);
      break;

    default:
      /* We've covered all the kinds of registers we know about here,
         so this must be something we wouldn't know what to do with
         anyway.  Just ignore it.  */
      break;
    }
}

static int
i386_linux_core_sniffer (struct core_fns *our_fns, bfd *abfd)
{
  int result;

  result = ((bfd_get_flavour (abfd) == our_fns -> core_flavour)
	    && bfd_get_arch (abfd) == bfd_arch_i386
	    && (bfd_get_mach (abfd) == bfd_mach_i386_i386
		|| bfd_get_mach (abfd) == bfd_mach_i386_i386_intel_syntax));
  return (result);
}

static struct core_fns i386_linux_core_fns = 
{
  bfd_target_elf_flavour,		/* core_flavour */
  default_check_format,			/* check_format */
  i386_linux_core_sniffer,		/* core_sniffer */
  fetch_core_registers,			/* core_read_registers */
  NULL					/* next */
};


a504 1
  add_core_fns (&i386_linux_core_fns);
@


1.29
log
@From Michal Ludvig  <mludvig@@suse.cz>:
* i386-tdep.h (struct gdbarch_tdep): Add members `sc_reg_offset'
and `sc_num_regs'.
(I386_EAX_REGNUM, I386_EDX_REGNUM, I386_ESP_REGNUM,
I386_EBP_REGNUM, I386_EIP_REGNUM, I386_EFLAGS_REGNUM,
I386_ST0_REGNUM): Move here from...
* i386-tdep.c: ... here.
(I386_NUM_SAVED_REGS): Define to I386_NUM_REGS.
(i386_sigtramp_frame_cache): Use `sc_reg_offset' to find saved
registers if possible.
(i386_gdbarch_init): Initialize TDEP->sc_reg_offset.
* i386bsd-tdep.c (i386bsd_sc_pc_offset, i386bsd_sc_sp_offset):
Remove variables.
(i386bsd_sc_reg_offset): New variable.
(i386bsd_init_abi): Initialize TDEP->sc_reg_offset and
TDEP->sc_num_regs instead of TDEP->sc_pc_offset and
TDEP->sc_sp_offset.
(i386fbsd_sc_reg_offset): New variable.
(i386fbsdaout_init_abi): Initialize TDEP->sc_reg_offset and
TDEP->sc_num_regs.
(i386fbsd4_sc_pc_offset, i386fbsd4_sc_sp_offset): Remove
variables.
(i386fbsd4_sc_reg_offset): New variable.
(i3864bsd4_init_abi): Initialize TDEP->sc_reg_offset and
TDEP->sc_num_regs instead of TDEP->sc_pc_offset and
TDEP->sc_sp_offset.
* i386-linux-tdep.c (i386_linux_sc_reg_offset): New variable.
(i386_linux_init_abi): Set TDEP->sc_reg_offset and TDEP->sc_num_regs.
* i386nbsd-tdep.c (i386nbsd_sc_pc_offset, i386nbsd_sc_sp_offset):
Remove variables.
(i386nbsd_sc_reg_offset): New variable.
(i386nbsd_init_abi): Initialize TDEP->sc_reg_offset and
TDEP->sc_num_regs instead of TDEP->sc_pc_offset and
TDEP->sc_sp_offset.
* i386obsd-tdep.c (i386obsd_sc_pc_offset, i386obsd_sc_sp_offset):
Remove variables.
(i386obsd_sc_reg_offset): New variable.
(i386obsd_init_abi): Initialize TDEP->sc_reg_offset and
TDEP->sc_num_regs instead of TDEP->sc_pc_offset and
TDEP->sc_sp_offset.
* i386bsd-nat.c (_initialize_i386bsd_nat): Adjust for changes in
i386bsd-tdep.c, i386nbsd-tdep.c and i386obsd-tdep.c.  Add check
for frame pointer offset in `struct sigcontext'.
@
text
@d255 1
a255 1
  frame_unwind_register (next_frame, SP_REGNUM, buf);
d294 1
a294 1
  write_register_pid (PC_REGNUM, pc, ptid);
@


1.28
log
@* i386-tdep.h (i386bsd_sigcontext_addr): Remove prototype.
(I386_SIZEOF_GREGS, I386_SIZEOF_FREGS, I386_SIZEOF_XREGS): Remove
defenitions.
(IS_FP_REGNUM, IS_SSE_REGNUM): Remove definitions.
* i386-tdep.c: Mark functions that are 64-bit safe as such.
(I386_EAX_REGNUM, I386_EDX_REGNUM, I386_ESP_REGNUM,
I386_EBP_REGNUM, I386_EIP_REGNUM, I386_EFLAGS_REGNUM,
I386_ST0_REGNUM): New defines.
(CODESTREAM_BUFSIZ, codestream_tell, codestream_peek,
codestream_get): Remove define.
(codestream_next_addr, condestream_addr, condestream_buf,
codestream_off, codestream_cnt): Remove variables.
(codestream_fill, codestream_seek, codestream_read): Remove
functions.
(i386_follow_jump): Rewrite to avoid usage of removed codestream
functionality.
(i386_get_frame_setup, i386_frameless_signal_p, i386_frame_chain,
i386_sigtramp_saved_pc, i386_sigtramp_saved_sp,
i386_frame_saved_pc, i386_saved_pc_after_call,
i386_frame_num_args, i386_frame_init_saved_regs,
i386_push_return_address, i386_do_pop_frame, i386_pop_frame,
i386_push_arguments): Remove functions.
(i386_skip_prologue): Rewrite to avoid usage of removed codestream
functionality.  Use i386_analyze_prologue instead of
i386_get_frame_setup.
(I386_NUM_SAVED_REGS): New define.
(struct i386_frame_cache): New structure.
(i386_alloc_frame_cache, i386_analyze_struct_return,
i386_skip_probe, i386_analyze_frame_setup,
i386_analyze_register_saves, i386_analyze_prologue,
i386_unwind_pc, i386_frame_cache, i386_frame_this_id,
i386_frame_prev_register, i386_sigtramp_frame_cache,
i386_sigtramp_frame_this_id, i386_sigtramp_frame_prev_register,
i386_frame_p, i386_sigtramp_frame_p, i386_frame_base_address,
i386_unwind_dummy_id, i386_save_dummy_tos, i386_push_dummy_call):
New functions.
(i386_frame_unwind, i386_sigtramp_frame_unwind, i386_frame_base):
New variables.
(LOW_RETURN_REGNUM, HIGH_RETURN_REGNUM): Define in terms of
I386_EAX_REGNUM and I386_EDX_REGNUM.
(i386_extract_return_value, i386_store_return_value): Use
I386_ST0_REGNUM where appropriate.
(i386_extract_struct_value_address): Rewrite to use extract_address.
(i386_svr4_pc_in_sigtramp): Add comment.
(i386_svr4_sigcontext_addr): Rewrite.
(i386_svr4_init_abi): Adjust TDEP->sc_pc_offset and
TDEP->sc_sp_offset.
(i386_gdbarch_init): Don't set deprecated_init_frame_pc.  Set
sp_regnum, fp_regnum, pc_regnum, ps_regnum and fp0_regnum in terms
of new defines.  Set push_dummy_call, don't set
deprecated_push_arguments, deprecated_push_return_address,
deprecated_pop_frame.  Don't set parm_boundary.  Don't set
deprecated_frame_chain, deprecated_frame_saved_pc,
deprecated_saved_pc_after_call.  Set unwind_dummy_id,
save_dummy_frame_tos, unwind_pc.  Call
frame_unwind_append_predicate and frame_base_set_default.  Don't
set deprecated_dummy_write_pc.  Don't set deprecated_fp_regnum.
Don't set frameless_function_invocation.  Don't set
deprecated_register_bytes, deprecated_register_size,
deprecated_call_dummy_words and deprecated_sizeof_call_dummy.
* i386-linux-tdep.c: Fix formatting in some comments.
(LINUX_SIGTRAMP_INSN0, LINUX_SIGTRAMP_OFFSET0,
LINUX_SIGTRAMP_INSN1, LINUX_SIGTRAMP_OFFSET1,
LINUX_SIGTRAMP_INSN2, LINUX_SIGTRAMP_OFFSET2,
LINUX_RT_SIGTRAMP_INSN0, LINUX_RT_SIGTRAMP_OFFSET0,
LINUX_RT_SIGTRAMP_INSN1, LINUX_RT_SIGTRAMP_OFFSET1): Drop
redundant parentheses.
(I386_LINUX_UCONTEXT_SIGCONTEXT_OFFSET): New define.
(i386_linux_sigcontext_addr): Use it.  Rewrite.
(find_minsym_and_objfile): Change name of second argument.
(skip_gnu_resolver): Renamed from skip_hurd_resolver.  All callers
changed.  Use frame_pc_unwind instead of
DEPRECATED_SAVED_PC_AFTER_CALL.
(i386_linux_init_abi): Don't set deprecated_register_bytes.
* i386bsd-tdep.c (i386bsd_sigcontext_addr): Rewrite.
* i386-nto-tdep.c (i386nto_sigcontext_addr): Adapt for new frame
unwinder.
* i386-cygwin-tdep.c: Don't include "gdbcore.h", "frame.h" and
"dummy-frame.h".
(i386_cygwin_frame_chain_valid, i386_cygwin_frame_chain): Removed.
(_initialize_i386_cygwin_tdep): New prototype.
(i386_cygwin_init_abi): Don't set deprecated_frame_chain and
deprecated_frame_chain_valid.
* i386-sol2-tdep.c (i386_sol2_init_abi): Don't set
TDEP->sigcontext_addr, TDEP->sc_pc_offset and TDEP->sc_sp_offset.
Rely on the SVR4 defaults.
* config/i386/i386sol2.mt (TDEPFILES): Remove i386bsd-tdep.o.
* Makefile.in (i386-tdep.o, i386-cygwin-tdep.o): Update dependencies.
@
text
@d442 21
d486 2
a487 2
  tdep->sc_pc_offset = 14 * 4;	/* From <asm/sigcontext.h>.  */
  tdep->sc_sp_offset = 7 * 4;
@


1.27
log
@2003-05-16  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (DEPRECATED_REGISTER_BYTES): Rename REGISTER_BYTES.
	* gdbarch.h, gdbarch.c: Re-generate.
	* arm-linux-tdep.c (arm_linux_extract_return_value): Delete reference.
	* TODO (REGISTER_BYTES): Delete reference.
	* alpha-tdep.c (alpha_gdbarch_init): Update.
	* xstormy16-tdep.c (xstormy16_gdbarch_init): Update.
	* x86-64-tdep.c (x86_64_init_abi): Update.
	* vax-tdep.c (vax_gdbarch_init): Update.
	* v850-tdep.c (v850_gdbarch_init): Update.
	* sparc-tdep.c (sparc_gdbarch_init): Update.
	* sh-tdep.c (sh_gdbarch_init): Update.
	* s390-tdep.c (s390_gdbarch_init): Update.
	* rs6000-tdep.c (rs6000_gdbarch_init): Update.
	* ns32k-tdep.c (ns32k_gdbarch_init_32082): Update.
	(ns32k_gdbarch_init_32382): Update.
	* mn10300-tdep.c (mn10300_gdbarch_init): Update.
	* mcore-tdep.c (mcore_gdbarch_init): Update.
	* m68k-tdep.c (m68k_gdbarch_init): Update.
	* m68hc11-tdep.c (m68hc11_gdbarch_init): Update.
	* ia64-tdep.c (ia64_gdbarch_init): Update.
	* i386-tdep.c (i386_gdbarch_init): Update.
	* i386-linux-tdep.c (i386_linux_init_abi): Update.
	* hppa-tdep.c (hppa_gdbarch_init): Update.
	* h8300-tdep.c (h8300_gdbarch_init): Update.
	* frv-tdep.c (frv_gdbarch_init): Update.
	* cris-tdep.c (cris_gdbarch_init): Update.
	* avr-tdep.c (avr_gdbarch_init): Update.
	* arm-tdep.c (arm_gdbarch_init): Update.
	* sparc-tdep.c (sparc_pop_frame): Update.
	* rs6000-tdep.c (rs6000_pop_frame): Update.
	* remote.c (init_remote_state): Update.
	(remote_prepare_to_store): Update.
	* remote-vx.c (vx_prepare_to_store): Update.
	* remote-sds.c (sds_fetch_registers): Update.
	(sds_prepare_to_store): Update.
	* remote-array.c: Update.
	* regcache.c (init_legacy_regcache_descr): Update.
	(init_regcache_descr): Update.
	* mips-tdep.c (mips_eabi_extract_return_value): Update.
	(mips_o64_extract_return_value): Update.
	* irix5-nat.c (fetch_core_registers): Update.
	* irix4-nat.c (fetch_core_registers): Update.
	* i386-tdep.h: Update.
	* hppa-tdep.c (pa_do_registers_info): Update.
	(pa_do_strcat_registers_info): Update.
	* cris-tdep.c (cris_register_bytes_ok): Update.
	* config/nm-gnu.h (CHILD_PREPARE_TO_STORE): Update.
	* config/sparc/tm-sparc.h (DEPRECATED_REGISTER_BYTES): Update.
	* config/sparc/nm-sun4sol2.h (CHILD_PREPARE_TO_STORE): Update.
	* config/sparc/nm-sun4os4.h (CHILD_PREPARE_TO_STORE): Update.
	* config/sparc/nm-nbsd.h (CHILD_PREPARE_TO_STORE): Update.
	* config/sparc/tm-sp64.h (DEPRECATED_REGISTER_BYTES): Update.
	* config/s390/tm-s390.h (DEPRECATED_REGISTER_BYTES): Update.
	* config/pa/tm-hppa64.h (DEPRECATED_REGISTER_BYTES): Update.
	* config/mips/tm-mips.h (DEPRECATED_REGISTER_BYTES): Update.
	* config/mips/tm-irix6.h (DEPRECATED_REGISTER_BYTES): Update.
	* config/mips/tm-irix5.h (DEPRECATED_REGISTER_BYTES): Update.
	* config/m68k/tm-sun3.h (DEPRECATED_REGISTER_BYTES): Update.
	(REGISTER_BYTES_OK): Update.
	* config/m68k/nm-sun3.h (CHILD_PREPARE_TO_STORE): Update.
	* config/ia64/tm-ia64.h (DEPRECATED_REGISTER_BYTES): Update.

Index: doc/ChangeLog
2003-05-16  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Replace
	REGISTER_BYTES with DEPRECATED_REGISTER_BYTES.  Fix typo,
	DEPRECATED_REGISTER_SIZE instead of REGISTER_BYTE.

Index: mi/ChangeLog
2003-05-16  Andrew Cagney  <cagney@@redhat.com>

	* mi-main.c (mi_setup_architecture_data):
@
text
@d84 1
a84 1
       mov    $0x77,%eax
d106 6
a111 6
#define LINUX_SIGTRAMP_INSN0 (0x58)	/* pop %eax */
#define LINUX_SIGTRAMP_OFFSET0 (0)
#define LINUX_SIGTRAMP_INSN1 (0xb8)	/* mov $NNNN,%eax */
#define LINUX_SIGTRAMP_OFFSET1 (1)
#define LINUX_SIGTRAMP_INSN2 (0xcd)	/* int */
#define LINUX_SIGTRAMP_OFFSET2 (6)
d116 1
a116 1
  LINUX_SIGTRAMP_INSN1, 0x77, 0x00, 0x00, 0x00,		/* mov $0x77,%eax */
d170 1
a170 1
       mov    $0xad,%eax
d176 4
a179 4
#define LINUX_RT_SIGTRAMP_INSN0 (0xb8)	/* mov $NNNN,%eax */
#define LINUX_RT_SIGTRAMP_OFFSET0 (0)
#define LINUX_RT_SIGTRAMP_INSN1 (0xcd)	/* int */
#define LINUX_RT_SIGTRAMP_OFFSET1 (5)
d183 1
a183 1
  LINUX_RT_SIGTRAMP_INSN0, 0xad, 0x00, 0x00, 0x00,	/* mov $0xad,%eax */
d242 5
a246 2
/* Assuming FRAME is for a GNU/Linux sigtramp routine, return the
   address of the associated sigcontext structure.  */
d249 1
a249 1
i386_linux_sigcontext_addr (struct frame_info *frame)
d252 5
d258 1
a258 1
  pc = i386_linux_sigtramp_start (get_frame_pc (frame));
d261 7
a267 15
      CORE_ADDR sp;

      if (get_next_frame (frame))
	/* If this isn't the top frame, the next frame must be for the
	   signal handler itself.  The sigcontext structure lives on
	   the stack, right after the signum argument.  */
	return get_frame_base (get_next_frame (frame)) + 12;

      /* This is the top frame.  We'll have to find the address of the
	 sigcontext structure by looking at the stack pointer.  Keep
	 in mind that the first instruction of the sigtramp code is
	 "pop %eax".  If the PC is at this instruction, adjust the
	 returned value accordingly.  */
      sp = read_register (SP_REGNUM);
      if (pc == get_frame_pc (frame))
d272 1
a272 1
  pc = i386_linux_rt_sigtramp_start (get_frame_pc (frame));
d275 8
a282 11
      if (get_next_frame (frame))
	/* If this isn't the top frame, the next frame must be for the
	   signal handler itself.  The sigcontext structure is part of
	   the user context.  A pointer to the user context is passed
	   as the third argument to the signal handler.  */
	return read_memory_integer (get_frame_base (get_next_frame (frame))
				    + 16, 4) + 20;

      /* This is the top frame.  Again, use the stack pointer to find
	 the address of the sigcontext structure.  */
      return read_memory_integer (read_register (SP_REGNUM) + 8, 4) + 20;
d322 1
a322 1
find_minsym_and_objfile (char *name, struct objfile **objfile_p)
d335 1
a335 1
	      *objfile_p = objfile;
d345 1
a345 1
skip_hurd_resolver (CORE_ADDR pc)
d347 1
a347 1
  /* The HURD dynamic linker is part of the GNU C library, so many
d374 1
a374 1
	return (DEPRECATED_SAVED_PC_AFTER_CALL (get_current_frame ()));
d393 1
a393 1
  result = skip_hurd_resolver (pc);
a460 1
  set_gdbarch_deprecated_register_bytes (gdbarch, I386_SSE_SIZEOF_REGS + 4);
@


1.26
log
@2003-04-11  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (DEPRECATED_SAVED_PC_AFTER_CALL): Deprecate
	SAVED_PC_AFTER_CALL.
	* gdbarch.h, gdbarch.c: Regenerate.
	* xstormy16-tdep.c (xstormy16_gdbarch_init): Update.
	* x86-64-tdep.c (x86_64_init_abi): Update.
	* vax-tdep.c (vax_gdbarch_init): Update.
	* v850-tdep.c (v850_gdbarch_init): Update.
	* sparc-tdep.c (sparc_gdbarch_init): Update.
	* sh-tdep.c (sh_gdbarch_init): Update.
	* s390-tdep.c (s390_gdbarch_init): Update.
	* rs6000-tdep.c (rs6000_gdbarch_init): Update.
	* ns32k-tdep.c (ns32k_gdbarch_init): Update.
	* mn10300-tdep.c (mn10300_gdbarch_init): Update.
	* mips-tdep.c (mips_gdbarch_init): Update.
	* mcore-tdep.c (mcore_gdbarch_init): Update.
	* m68k-tdep.c (m68k_gdbarch_init): Update.
	* m68hc11-tdep.c (m68hc11_gdbarch_init): Update.
	* ia64-tdep.c (ia64_gdbarch_init): Update.
	(ia64_saved_pc_after_call): Update declaration.
	* i386ly-tdep.c (i386lynx_init_abi): Update.
	* i386-tdep.c (i386_gdbarch_init): Update.
	* hppa-tdep.c (hppa_gdbarch_init): Update.
	* h8300-tdep.c (h8300_gdbarch_init): Update.
	* frv-tdep.c (frv_gdbarch_init): Update.
	* cris-tdep.c (cris_gdbarch_init): Update.
	* avr-tdep.c (avr_gdbarch_init): Update.
	* arm-tdep.c (arm_gdbarch_init): Update.
	* alpha-tdep.c (alpha_gdbarch_init): Update.
	* ns32knbsd-nat.c (frame_num_args): Update.
	* ns32k-tdep.c (umax_frame_num_args): Update.
	* mips-tdep.c (mips_init_frame_pc_first): Update.
	* infrun.c (step_over_function): Update.
	* i386-linux-tdep.c (skip_hurd_resolver): Update.
	* i386-interix-tdep.c (i386_interix_back_one_frame): Update.
	* config/sparc/tm-sparc.h (DEPRECATED_SAVED_PC_AFTER_CALL): Update.
	(DEPRECATED_INIT_FRAME_PC_FIRST): Update.
	* config/rs6000/tm-rs6000.h (DEPRECATED_INIT_FRAME_PC_FIRST): Update.
	* config/pa/tm-hppa.h (DEPRECATED_SAVED_PC_AFTER_CALL): Update.
	* arm-linux-tdep.c (skip_hurd_resolver): Update.
	* arch-utils.c (init_frame_pc_default): Update.
	* alpha-tdep.c (alpha_init_frame_pc_first): Update.
	* x86-64-tdep.h (x86_64_linux_saved_pc_after_call): Update
	declaration.
@
text
@d464 1
a464 1
  set_gdbarch_register_bytes (gdbarch, I386_SSE_SIZEOF_REGS + 4);
@


1.26.2.1
log
@* i386-tdep.h (i386bsd_sigcontext_addr): Remove prototype.

* i386-tdep.c: Mark functions that are 64-bit safe as such.
(I386_EAX_REGNUM, I386_EDX_REGNUM, I386_ESP_REGNUM,
I386_EBP_REGNUM, I386_EIP_REGNUM, I386_EFLAGS_REGNUM,
I386_ST0_REGNUM): New defines.
(CODESTREAM_BUFSIZ, codestream_tell, codestream_peek,
codestream_get): Remove define.
(codestream_next_addr, condestream_addr, condestream_buf,
codestream_off, codestream_cnt): Remove variables.
(codestream_fill, codestream_seek, codestream_read): Remove
functions.
(i386_follow_jump): Rewrite to avoid usage of removed codestream
functionality.
(i386_get_frame_setup, i386_frameless_signal_p, i386_frame_chain,
i386_sigtramp_saved_pc, i386_sigtramp_saved_sp,
i386_frame_saved_pc, i386_saved_pc_after_call,
i386_frame_num_args, i386_frame_init_saved_regs,
i386_push_return_address, i386_do_pop_frame, i386_pop_frame,
i386_push_arguments): Remove functions.
(i386_skip_prologue): Rewrite to avoid usage of removed codestream
functionality.  Use i386_analyze_prologue instead of
i386_get_frame_setup.
(I386_NUM_SAVED_REGS): New define.
(struct i386_frame_cache): New structure.
(i386_alloc_frame_cache, i386_analyze_struct_return,
i386_skip_probe, i386_analyze_frame_setup,
i386_analyze_register_saves, i386_analyze_prologue,
i386_unwind_pc, i386_frame_cache, i386_frame_this_id,
i386_frame_prev_register, i386_sigtramp_frame_cache,
i386_sigtramp_frame_this_id, i386_sigtramp_frame_prev_register,
i386_frame_p, i386_frame_base_address, i386_unwind_dummy_id,
i386_save_dummy_tos, i386_push_dummy_call): New functions.
(i386_frame_unwind, i386_sigtramp_frame_unwind, i386_frame_base):
New variables.
(LOW_RETURN_REGNUM, HIGH_RETURN_REGNUM): Define in terms of
I386_EAX_REGNUM and I386_EDX_REGNUM.
(i386_extract_return_value, i386_store_return_value): Use
I386_ST0_REGNUM where appropriate.
(i386_extract_struct_value_address): Rewrite to use extract_address.
(i386_svr4_pc_in_sigtramp): Add comment.
(i386_svr4_sigcontext_addr): Rewrite.
(i386_svr4_init_abi): Adjust TDEP->sc_pc_offset and
TDEP->sc_sp_offset.
(i386_gdbarch_init): Don't set deprecated_init_frame_pc.  Set
sp_regnum, fp_regnum, pc_regnum, ps_regnum and fp0_regnum in terms
of new defines.  Set push_dummy_call, don't set
deprecated_push_arguments, deprecated_push_return_address,
deprecated_pop_frame.  Don't set parm_boundary.  Don't set
deprecated_frame_chain, deprecated_frame_saved_pc,
deprecated_saved_pc_after_call.  Set unwind_dummy_id,
save_dummy_frame_tos, unwind_pc.  Call
frame_unwind_append_predicate and frame_base_set_default.
Don't set deprecated_dummy_write_pc.

* i386-linux-tdep.c (i386_linux_sigcontext_addr): Rewrite.
(skip_gnu_resolver): Renamed from skip_hurd_resolver.  All callers
changed.  Use frame_pc_unwind instead of
DEPRECATED_SAVED_PC_AFTER_CALL.

* i386bsd-tdep.c (i386bsd_sigcontext_addr): Rewrite.

* i386-sol2-tdep.c (i386_sol2_init_abi): Don't set
TDEP->sigcontext_addr, TDEP->sc_pc_offset and TDEP->sc_sp_offset.
Rely on the SVR4 defaults.

* config/i386/i386sol2.mt (TDEPFILES): Remove i386bsd-tdep.o.
@
text
@d242 2
a243 2
/* Assuming NEXT_FRAME is a frame following a GNU/Linux sigtramp
   routine, return the address of the associated sigcontext structure.  */
d246 1
a246 1
i386_linux_sigcontext_addr (struct frame_info *next_frame)
a248 2
  CORE_ADDR sp;
  char buf[4];
d250 1
a250 4
  frame_unwind_register (next_frame, SP_REGNUM, buf);
  sp = extract_address (buf, 4);

  pc = i386_linux_sigtramp_start (frame_pc_unwind (next_frame));
d253 15
a267 7
      /* The sigcontext structure lives on the stack, right after
	 the signum argument.  We determine the address of the
	 sigcontext structure by looking at the frame's stack
	 pointer.  Keep in mind that the first instruction of the
	 sigtramp code is "pop %eax".  If the PC is after this
	 instruction, adjust the returned value accordingly.  */
      if (pc == frame_pc_unwind (next_frame))
d272 1
a272 1
  pc = i386_linux_rt_sigtramp_start (frame_pc_unwind (next_frame));
d275 11
a285 5
      /* The sigcontext structure is part of the user context.  A
	 pointer to the user context is passed as the third argument
	 to the signal handler.  */
      read_memory (sp + 8, 4, buf);
      return extract_address (buf, 4) + 20;
d348 1
a348 1
skip_gnu_resolver (CORE_ADDR pc)
d350 1
a350 1
  /* The GNU dynamic linker is part of the GNU C library, so many
d377 1
a377 1
	return frame_pc_unwind (get_current_frame ()); 
d396 1
a396 1
  result = skip_gnu_resolver (pc);
@


1.26.2.2
log
@* i386-tdep.c (i386_frame_cache, i386_sigtramp_frame_cache,
i386_extract_struct_value_address, i386_svr4_sigcontext_addr): Use
extract_unsigned_integer instead of extract_address.
* i386bsd-tdep.c (i386bsd_sigcontext_addr): Likewise.
* i386-linux-tdep.c (i386_linux_sigcontext_addr): Likewise.
@
text
@d253 1
a253 1
  sp = extract_unsigned_integer (buf, 4);
d276 1
a276 1
      return extract_unsigned_integer (buf, 4) + 20;
@


1.26.2.3
log
@* i386-tdep.c (i386_unwind_dummy_id): Use extract_unsigned_integer
instead of extract_typed_address for consistency with the rest of
the code in this file.
* i386-linux-tdep.c: Fix formatting in some comments.
(LINUX_SIGTRAMP_INSN0, LINUX_SIGTRAMP_OFFSET0,
LINUX_SIGTRAMP_INSN1, LINUX_SIGTRAMP_OFFSET1,
LINUX_SIGTRAMP_INSN2, LINUX_SIGTRAMP_OFFSET2,
LINUX_RT_SIGTRAMP_INSN0, LINUX_RT_SIGTRAMP_OFFSET0,
LINUX_RT_SIGTRAMP_INSN1, LINUX_RT_SIGTRAMP_OFFSET1): Drop
redundant parentheses.
(I386_LINUX_UCONTEXT_SIGCONTEXT_OFFSET): New define.
(i386_linux_sigcontext_addr): Use it.
(find_minsym_and_objfile): Change name of second argument.
@
text
@d84 1
a84 1
       mov    $0x77, %eax
d106 6
a111 6
#define LINUX_SIGTRAMP_INSN0	0x58	/* pop %eax */
#define LINUX_SIGTRAMP_OFFSET0	0
#define LINUX_SIGTRAMP_INSN1	0xb8	/* mov $NNNN, %eax */
#define LINUX_SIGTRAMP_OFFSET1	1
#define LINUX_SIGTRAMP_INSN2	0xcd	/* int */
#define LINUX_SIGTRAMP_OFFSET2	6
d116 1
a116 1
  LINUX_SIGTRAMP_INSN1, 0x77, 0x00, 0x00, 0x00,		/* mov $0x77, %eax */
d170 1
a170 1
       mov    $0xad, %eax
d176 4
a179 4
#define LINUX_RT_SIGTRAMP_INSN0		0xb8 /* mov $NNNN, %eax */
#define LINUX_RT_SIGTRAMP_OFFSET0	0
#define LINUX_RT_SIGTRAMP_INSN1		0xcd /* int */
#define LINUX_RT_SIGTRAMP_OFFSET1	5
d183 1
a183 1
  LINUX_RT_SIGTRAMP_INSN0, 0xad, 0x00, 0x00, 0x00,	/* mov $0xad, %eax */
a241 3
/* Offset to struct sigcontext in ucontext, from <asm/ucontext.h>.  */
#define I386_LINUX_UCONTEXT_SIGCONTEXT_OFFSET 20

a271 2
      CORE_ADDR ucontext_addr;

d276 1
a276 2
      ucontext_addr = extract_unsigned_integer (buf, 4) + 20;
      return ucontext_addr + I386_LINUX_UCONTEXT_SIGCONTEXT_OFFSET;
d316 1
a316 1
find_minsym_and_objfile (char *name, struct objfile **objfilep)
d329 1
a329 1
	      *objfilep = objfile;
@


1.26.2.4
log
@* i386-linux-tdep.c (i386_linux_sigcontext_addr): Call read_memory
with correct arguments.
* config/i386/x86-64linux.mt (TDEPFILES): Add i386-linux-tdep.o.
@
text
@d280 1
a280 1
      read_memory (sp + 8, buf, 4);
@


1.26.2.5
log
@2003-05-18  Mark Kettenis  <kettenis@@gnu.org>

	Merge from mainline.
	* i386-tdep.h (I386_SIZEOF_GREGS, I386_SIZEOF_FREGS,
	I386_SIZEOF_XREGS): Remove defenitions.
	(IS_FP_REGNUM, IS_SSE_REGNUM): Remove definitions.
	* i386-tdep.c (i386_gdbarch_init): Don't set register_bytes,
	register_size, call_dummy_words and sizeof_call_dummy.
	* i386-linux-tdep.c (i386_linux_init_abi): Don't set register_bytes.
	* x86-64-tdep.c (x86_64_init_abi): Don't set register_bytes and
	register_size.
	(x86_64_register_bytes): Remove variable.
	(_initialize_x86_64_tdep): Remove function.

	* i386-linux-tdep.c (i386_linux_sigcontext_addr): Call read_memory
	with correct arguments.
	* config/i386/x86-64linux.mt (TDEPFILES): Add i386-linux-tdep.o.
@
text
@d461 1
@


1.25
log
@* i386-linux-tdep.c (find_minsym_and_objfile): Replace usage of
DEPRECATED_SYMBOL_NAME with SYMBOL_LINKAGE_NAME.
@
text
@d377 1
a377 1
	return (SAVED_PC_AFTER_CALL (get_current_frame ()));
@


1.24
log
@* i386-linux-tdep.c (find_minsym_and_objfile): Use strcmp instead
of STREQ.
@
text
@d335 2
a336 2
	  if (DEPRECATED_SYMBOL_NAME (msym)
	      && strcmp (DEPRECATED_SYMBOL_NAME (msym), name) == 0)
@


1.23
log
@2003-02-25  David Carlton  <carlton@@math.stanford.edu>

	* symtab.h (SYMBOL_NATURAL_NAME): New macro.
	(SYMBOL_LINKAGE_NAME): Ditto.
	(SYMBOL_PRINT_NAME): Use SYMBOL_NATURAL_NAME and
	SYMBOL_LINKAGE_NAME.
	(struct general_symbol_info): Expand comment.
	(DEPRECATED_SYMBOL_NAME): Rename from SYMBOL_NAME.
	(SYMBOL_MATCHES_NAME): Use DEPRECATED_SYMBOL_NAME.
	(SYMBOL_MATCHES_REGEXP): Ditto.
	* symtab.c (symbol_natural_name): New function.
	* objfiles.h: Replace all uses of SYMBOL_NAME by
	DEPRECATED_SYMBOL_NAME.
	* xcoffread.c, valops.c, typeprint.c, tracepoint.c: Ditto.
	* symtab.c, symmisc.c, symfile.c, stack.c, stabsread.c: Ditto.
	* somsolib.c, sol-thread.c, rs6000-tdep.c, p-valprint.c: Ditto.
	* printcmd.c, objfiles.c, objc-lang.c, mipsread.c: Ditto.
	* minsyms.c, mdebugread.c, linespec.c, jv-lang.c: Ditto.
	* i386-tdep.c, i386-linux-tdep.c, hpread.c, hppa-tdep.c: Ditto.
	* gnu-v2-abi.c, f-valprint.c, findvar.c, expprint.c: Ditto.
	* dwarfread.c, dwarf2read.c, dbxread.c, c-valprint.c: Ditto.
	* cp-valprint.c, coffread.c, buildsym.c, breakpoint.c: Ditto.
	* blockframe.c, ax-gdb.c, arm-linux-tdep.c, ada-lang.c: Ditto.
	* ada-exp.y: Ditto.
	* ada-exp.y: Update copyright.
	* sol-thread.c, mipsread.c, jv-lang.c, f-valprint.c: Ditto.
	* cp-valprint.c: Ditto.

2003-02-25  David Carlton  <carlton@@math.stanford.edu>

	* generic/gdbtk.h: Replace all instances of SYMBOL_NAME by
	DEPRECATED_SYMBOL_NAME.
	* generic/gdbtk-stack.c, generic/gdbtk-cmds.c: Ditto.
	* generic/gdbtk-stack.c, generic/gdbtk-cmds.c: Update copyright.

2003-02-25  David Carlton  <carlton@@math.stanford.edu>

	* mi-cmd-stack.c: Replace all instances of SYMBOL_NAME with
	DEPRECATED_SYMBOL_NAME.  Update copyright.
@
text
@d336 1
a336 1
	      && STREQ (DEPRECATED_SYMBOL_NAME (msym), name))
@


1.22
log
@2003-01-08  Andrew Cagney  <cagney@@redhat.com>

	* gcore.c, i386-linux-tdep.c: Use get_frame_pc, get_next_frame and
	get_frame_base.
@
text
@d335 2
a336 2
	  if (SYMBOL_NAME (msym)
	      && STREQ (SYMBOL_NAME (msym), name))
@


1.21
log
@	* arch-utils.c (gdbarch_info_init): Set osabi to
	GDB_OSABI_UNINITIALIZED.
	* gdbarch.sh: Add osabi to struct gdbarch and to struct
	gdbarch_info.  Include "osabi.h" in gdbarch.c.  Check osabi
	in gdbarch_list_lookup_by_info and in gdbarch_update_p.
	* gdbarch.c: Regenerated.
	* gdbarch.h: Regenerated.
	* osabi.c (gdbarch_lookup_osabi): Return GDB_OSABI_UNINITIALIZED if
	there's no BFD.
	(gdbarch_init_osabi): Remove osabi argument; use info.osabi.
	* osabi.h (enum gdb_osabi): Move to defs.h.
	(gdbarch_init_osabi): Update prototype.
	* defs.h (enum gdb_osabi): Moved here.
	* Makefile.in: Update dependencies.

Plus updates to alpha, arm, hppa, i386, mips, ns32k, ppc, sh, sparc, and vax
ports to match.
@
text
@d250 1
a250 1
  pc = i386_linux_sigtramp_start (frame->pc);
d255 1
a255 1
      if (frame->next)
d259 1
a259 1
	return frame->next->frame + 12;
d267 1
a267 1
      if (pc == frame->pc)
d272 1
a272 1
  pc = i386_linux_rt_sigtramp_start (frame->pc);
d275 1
a275 1
      if (frame->next)
d280 2
a281 1
	return read_memory_integer (frame->next->frame + 16, 4) + 20;
@


1.20
log
@* osabi.c: Include "gdb_assert.h" and "gdb_string.h".
(struct gdb_osabi_handler): Remove member `arch'.  Add member
`arch_info'.
(gdbarch_register_osabi): Add new argument `machine'.  Use ot to
construct a `struct bfd_arch_info' and store it in the `struct
gdb_osabi_handler' that is created.
(gdbarch_init_osabi): Check for compatibility based on machine
type and architecture.
* osabi.h (gdbarch_register_osabi): Adjust prototype and update
comment.
* alpha-linux-tdep.c (_initialize_alpha_linux_tdep): Add 0 as
second argument in call to gdbarch_register_osabi.
* alpha-osf1-tdep.c (_initialize_alpha_osf1_tdep): Likewise.
* alphafbsd-tdep.c (_initialize_alphafbsd_tdep): Likewise.
* alphanbsd-tdep.c (_initialize_alphanbsd_tdep): Likewise.
* arm-linux-tdep.c (_initialize_arm_linux_tdep): Likewise.
* arm-tdep.c (_initialize_arm_tdep): Likewise.
* armnbsd-tdep.c (_initialize_armnbsd_tdep): Likewise.
* hppa-hpux-tdep.c (_initialize_hppa_hpux_tdep): Likewise.
* i386-interix-tdep.c (_initialize_i386_interix_tdep): Likewise.
* i386-linux-tdep.c (_initialize_i386_linux_tdep): Likewise.
* i386-sol2-tdep.c (_initialize_i386_sol2_tdep): Likewise.
* i386-tdep.c (_initialize_i386_tdep): Likewise.
* i386bsd-tdep.c (_initialize_i386bsd_tdep): Likewise.
* i386gnu-tdep.c (_initialize_i386gnu_tdep): Likewise.
* i386ly-tdep.c (_initialize_i386lynx_tdep): Renamed from
_initialize_i386bsd_tdep and updated likewise.
* i386nbsd-tdep.c (_initialize_i386nbsd_tdep): Likewise.
* i386obsd-tdep.c (_initialize_i386obsd_tdep): Likewise.
* mips-irix-tdep.c (_initialize_mips_irix_tdep): Likewise.
* mips-linux-tdep.c (_initialize_mips_linux_tdep): Likewise.
* mipsnbsd-tdep.c (_initialize_mipsnbsd__tdep): Likewise.
* ns32knbsd-tdep.c (_initialize_ns32kmnsd_tdep): Likewise.
* ppc-linux-tdep.c (_initialize_ppc_linux_tdep): Likewise.
* ppcnbsd-tdep.c (_initialize_ppcnbsd_tdep): Likewise.
* shnbsd-tdep.c (_initialize_shnbsd_tdep): Likewise.
* sparcnbsd-tdep.c (_initialize_sparcnbsd_tdep): Likewise.
@
text
@d3 1
a3 1
   Copyright 2000, 2001, 2002 Free Software Foundation, Inc.
d36 2
@


1.19
log
@2002-11-08  Andrew Cagney  <ac131313@@redhat.com>

	* i386-linux-tdep.c: Include "reggroups.h".
	(i386_linux_register_reggroup_p): New function.
	(i386_linux_init_abi): Set register_reggroup_p to
	i386_linux_register_reggroup_p.
	* i386-tdep.h (i386_register_reggroup_p): Declare.
	* i386-tdep.c: Include "reggroups.h".
	(i386_init_reggroups): New function.
	(i386_add_reggroups): New function.
	(i386_register_reggroup_p): New function.
	(i386_sse_reggroup, i386_mmx_reggroup): New variables.
	(_initialize_i386_tdep): Call i386_init_reggroups.
	(i386_gdbarch_init): Set register_reggroup_p and add in the i386
	specific reggroups.
@
text
@d485 1
a485 1
  gdbarch_register_osabi (bfd_arch_i386, GDB_OSABI_LINUX,
@


1.18
log
@	* i386-linux-tdep.c (i386_linux_pc_in_sigtramp): Check for
	trampolines in sigaction.
@
text
@d28 1
d51 14
d460 1
@


1.17
log
@2002-08-12  Andrew Cagney  <cagney@@redhat.com>

* i386-tdep.h (i386_register_byte, i386_register_raw_size): Delete
declarations.
* i386-linux-tdep.c (i386_linux_register_byte): Delete function.
(i386_linux_register_raw_size): Delete function.
i386_linux_init_abi): Update.
* i386-tdep.c (i386_register_raw_size): Delete function.
(i386_register_byte): Delete function.
(i386_gdbarch_init): Update.
(i386_register_size): Delete array.
(i386_register_offset): Delete array.

* config/i386/tm-symmetry.h (REGISTER_BYTE): Delete macro.
(REGISTER_RAW_SIZE): Delete macro.
* config/i386/tm-ptx.h (REGISTER_RAW_SIZE): Delete macro.
(REGISTER_BYTE): Delete macro.
@
text
@d212 11
a222 5
  if (name)
    return STREQ ("__restore", name) || STREQ ("__restore_rt", name);
  
  return (i386_linux_sigtramp_start (pc) != 0
	  || i386_linux_rt_sigtramp_start (pc) != 0);
@


1.17.10.1
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@d3 1
a3 1
   Copyright 2000, 2001, 2002, 2003 Free Software Foundation, Inc.
a27 3
#include "osabi.h"
#include "reggroups.h"
#include "solib-svr4.h"
d29 6
a34 1
#include "gdb_string.h"
a37 1
#include "glibc-tdep.h"
a49 14

/* Return non-zero, when the register is in the corresponding register
   group.  Put the LINUX_ORIG_EAX register in the system group.  */
static int
i386_linux_register_reggroup_p (struct gdbarch *gdbarch, int regnum,
				struct reggroup *group)
{
  if (regnum == I386_LINUX_ORIG_EAX_REGNUM)
    return (group == system_reggroup
	    || group == save_reggroup
	    || group == restore_reggroup);
  return i386_register_reggroup_p (gdbarch, regnum, group);
}

d67 1
a67 1
       mov    $0x77, %eax
d89 6
a94 6
#define LINUX_SIGTRAMP_INSN0	0x58	/* pop %eax */
#define LINUX_SIGTRAMP_OFFSET0	0
#define LINUX_SIGTRAMP_INSN1	0xb8	/* mov $NNNN, %eax */
#define LINUX_SIGTRAMP_OFFSET1	1
#define LINUX_SIGTRAMP_INSN2	0xcd	/* int */
#define LINUX_SIGTRAMP_OFFSET2	6
d99 1
a99 1
  LINUX_SIGTRAMP_INSN1, 0x77, 0x00, 0x00, 0x00,		/* mov $0x77, %eax */
d153 1
a153 1
       mov    $0xad, %eax
d159 4
a162 4
#define LINUX_RT_SIGTRAMP_INSN0		0xb8 /* mov $NNNN, %eax */
#define LINUX_RT_SIGTRAMP_OFFSET0	0
#define LINUX_RT_SIGTRAMP_INSN1		0xcd /* int */
#define LINUX_RT_SIGTRAMP_OFFSET1	5
d166 1
a166 1
  LINUX_RT_SIGTRAMP_INSN0, 0xad, 0x00, 0x00, 0x00,	/* mov $0xad, %eax */
d212 5
a216 11
  /* If we have NAME, we can optimize the search.  The trampolines are
     named __restore and __restore_rt.  However, they aren't dynamically
     exported from the shared C library, so the trampoline may appear to
     be part of the preceding function.  This should always be sigaction,
     __sigaction, or __libc_sigaction (all aliases to the same function).  */
  if (name == NULL || strstr (name, "sigaction") != NULL)
    return (i386_linux_sigtramp_start (pc) != 0
	    || i386_linux_rt_sigtramp_start (pc) != 0);

  return (strcmp ("__restore", name) == 0
	  || strcmp ("__restore_rt", name) == 0);
d219 2
a220 5
/* Offset to struct sigcontext in ucontext, from <asm/ucontext.h>.  */
#define I386_LINUX_UCONTEXT_SIGCONTEXT_OFFSET 20

/* Assuming NEXT_FRAME is a frame following a GNU/Linux sigtramp
   routine, return the address of the associated sigcontext structure.  */
d223 1
a223 1
i386_linux_sigcontext_addr (struct frame_info *next_frame)
a225 5
  CORE_ADDR sp;
  char buf[4];

  frame_unwind_register (next_frame, I386_ESP_REGNUM, buf);
  sp = extract_unsigned_integer (buf, 4);
d227 1
a227 1
  pc = i386_linux_sigtramp_start (frame_pc_unwind (next_frame));
d230 15
a244 7
      /* The sigcontext structure lives on the stack, right after
	 the signum argument.  We determine the address of the
	 sigcontext structure by looking at the frame's stack
	 pointer.  Keep in mind that the first instruction of the
	 sigtramp code is "pop %eax".  If the PC is after this
	 instruction, adjust the returned value accordingly.  */
      if (pc == frame_pc_unwind (next_frame))
d249 1
a249 1
  pc = i386_linux_rt_sigtramp_start (frame_pc_unwind (next_frame));
d252 10
a261 8
      CORE_ADDR ucontext_addr;

      /* The sigcontext structure is part of the user context.  A
	 pointer to the user context is passed as the third argument
	 to the signal handler.  */
      read_memory (sp + 8, buf, 4);
      ucontext_addr = extract_unsigned_integer (buf, 4) + 20;
      return ucontext_addr + I386_LINUX_UCONTEXT_SIGCONTEXT_OFFSET;
d273 1
a273 1
  write_register_pid (I386_EIP_REGNUM, pc, ptid);
d292 87
a420 65
/* The register sets used in GNU/Linux ELF core-dumps are identical to
   the register sets in `struct user' that are used for a.out
   core-dumps.  These are also used by ptrace(2).  The corresponding
   types are `elf_gregset_t' for the general-purpose registers (with
   `elf_greg_t' the type of a single GP register) and `elf_fpregset_t'
   for the floating-point registers.

   Those types used to be available under the names `gregset_t' and
   `fpregset_t' too, and GDB used those names in the past.  But those
   names are now used for the register sets used in the `mcontext_t'
   type, which have a different size and layout.  */

/* Mapping between the general-purpose registers in `struct user'
   format and GDB's register cache layout.  */

/* From <sys/reg.h>.  */
static int i386_linux_gregset_reg_offset[] =
{
  6 * 4,			/* %eax */
  1 * 4,			/* %ecx */
  2 * 4,			/* %edx */
  0 * 4,			/* %ebx */
  15 * 4,			/* %esp */
  5 * 4,			/* %ebp */
  3 * 4,			/* %esi */
  4 * 4,			/* %edi */
  12 * 4,			/* %eip */
  14 * 4,			/* %eflags */
  13 * 4,			/* %cs */
  16 * 4,			/* %ss */
  7 * 4,			/* %ds */
  8 * 4,			/* %es */
  9 * 4,			/* %fs */
  10 * 4,			/* %gs */
  -1, -1, -1, -1, -1, -1, -1, -1,
  -1, -1, -1, -1, -1, -1, -1, -1,
  -1, -1, -1, -1, -1, -1, -1, -1,
  -1,
  11 * 4			/* "orig_eax" */
};

/* Mapping between the general-purpose registers in `struct
   sigcontext' format and GDB's register cache layout.  */

/* From <asm/sigcontext.h>.  */
static int i386_linux_sc_reg_offset[] =
{
  11 * 4,			/* %eax */
  10 * 4,			/* %ecx */
  9 * 4,			/* %edx */
  8 * 4,			/* %ebx */
  7 * 4,			/* %esp */
  6 * 4,			/* %ebp */
  5 * 4,			/* %esi */
  4 * 4,			/* %edi */
  14 * 4,			/* %eip */
  16 * 4,			/* %eflags */
  15 * 4,			/* %cs */
  18 * 4,			/* %ss */
  3 * 4,			/* %ds */
  2 * 4,			/* %es */
  1 * 4,			/* %fs */
  0 * 4				/* %gs */
};

d429 4
d437 1
a437 1
  set_gdbarch_num_regs (gdbarch, I386_LINUX_NUM_REGS);
d439 1
a439 5
  set_gdbarch_register_reggroup_p (gdbarch, i386_linux_register_reggroup_p);

  tdep->gregset_reg_offset = i386_linux_gregset_reg_offset;
  tdep->gregset_num_regs = ARRAY_SIZE (i386_linux_gregset_reg_offset);
  tdep->sizeof_gregset = 17 * 4;
d444 2
a445 2
  tdep->sc_reg_offset = i386_linux_sc_reg_offset;
  tdep->sc_num_regs = ARRAY_SIZE (i386_linux_sc_reg_offset);
a452 1
  set_gdbarch_skip_solib_resolver (gdbarch, glibc_skip_solib_resolver);
d463 1
a463 1
  gdbarch_register_osabi (bfd_arch_i386, 0, GDB_OSABI_LINUX,
@


1.17.10.2
log
@Merge drow-cplus-merge-20040208 to drow-cplus-branch.
@
text
@d277 1
a277 1
      ucontext_addr = extract_unsigned_integer (buf, 4);
@


1.17.8.1
log
@2002-11-15  David Carlton  <carlton@@math.stanford.edu>

	* Merge from mainline; tag is carlton_dictionary-20021115-merge.
@
text
@a27 1
#include "reggroups.h"
a49 14

/* Return non-zero, when the register is in the corresponding register
   group.  Put the LINUX_ORIG_EAX register in the system group.  */
static int
i386_linux_register_reggroup_p (struct gdbarch *gdbarch, int regnum,
				struct reggroup *group)
{
  if (regnum == I386_LINUX_ORIG_EAX_REGNUM)
    return (group == system_reggroup
	    || group == save_reggroup
	    || group == restore_reggroup);
  return i386_register_reggroup_p (gdbarch, regnum, group);
}

d212 5
a216 11
  /* If we have NAME, we can optimize the search.  The trampolines are
     named __restore and __restore_rt.  However, they aren't dynamically
     exported from the shared C library, so the trampoline may appear to
     be part of the preceding function.  This should always be sigaction,
     __sigaction, or __libc_sigaction (all aliases to the same function).  */
  if (name == NULL || strstr (name, "sigaction") != NULL)
    return (i386_linux_sigtramp_start (pc) != 0
	    || i386_linux_rt_sigtramp_start (pc) != 0);

  return (strcmp ("__restore", name) == 0
	  || strcmp ("__restore_rt", name) == 0);
a438 1
  set_gdbarch_register_reggroup_p (gdbarch, i386_linux_register_reggroup_p);
@


1.17.8.2
log
@2002-12-23  David Carlton  <carlton@@math.stanford.edu>

	* Merge from mainline; tag is carlton_dictionary-20021223-merge.
@
text
@d485 1
a485 1
  gdbarch_register_osabi (bfd_arch_i386, 0, GDB_OSABI_LINUX,
@


1.17.8.3
log
@2003-01-27  David Carlton  <carlton@@math.stanford.edu>

	* objfiles.h: Add comments about objfile->msymbols being NULL.
	* objfiles.c (objfile_relocate): Enclose ALL_OBJFILE_MSYMBOLS in
	guard.
	* i386-linux-tdep.c (find_minsym_and_objfile): Call ALL_MSYMBOLS
	instead of ALL_OBJFILES and ALL_OBJFILE_MSYMBOLS.
	* arm-linux-tdep.c (find_minsym_and_objfile): Ditto.
@
text
@a324 1
  struct minimal_symbol *msym;
d326 1
a326 1
  ALL_MSYMBOLS (objfile, msym)
d328 3
a330 2
      if (SYMBOL_NAME (msym)
	  && STREQ (SYMBOL_NAME (msym), name))
d332 6
a337 2
	  *objfile_p = objfile;
	  return msym;
@


1.17.8.4
log
@2003-01-31  David Carlton  <carlton@@math.stanford.edu>

	From Jim Blandy  <jimb@@redhat.com>:

	Use a single, consistent representation for an empty minimal
	symbol table in an objfile.
	* objfiles.c (terminate_minimal_symbol_table): New function.
	(allocate_objfile): Call it.
	* objfiles.h (terminate_minimal_symbol_table): New declaration.
	(ALL_MSYMBOLS): No need to test whether (objfile)->msymbols is
	non-NULL.
	* minsyms.c (lookup_minimal_symbol_by_pc_section): To see whether
	objfile has minimal symbols, compare minimal_symbol_count to zero,
	instead of comparing msymbols with NULL.
	* objfiles.c (have_minimal_symbols): Same.
	* solib-sunos.c (solib_add_common_symbols): Call
	terminate_minimal_symbol_table.
	* symfile.c (reread_symbols): Same.

	* objfiles.h: Revert patch from 2003-01-27, to be replaced by
	similar patch from Jim Blandy.
	* objfiles.c (objfile_relocate): Ditto.
	* i386-linux-tdep.c (find_minsym_and_objfile): Ditto.
	* arm-linux-tdep.c (find_minsym_and_objfile): Ditto.
	* gdbtypes.h: Delete INTEGER_COERCION_BADNESS,
	FLOAT_COERCION_BADNESS.
	* gdbtypes.c (rank_one_type): Replace all uses of
	INTEGER_COERCION_BADNESS by INTEGER_CONVERSION_BADNESS.
	* valops.c (find_overload_match): Call cp_func_name.
	* cp-support.h: Declare cp_func_name.
	* cp-support.c (cp_func_name): New function.

2003-01-30  David Carlton  <carlton@@math.stanford.edu>

	* valops.c (find_overload_match): Move code into
	find_oload_champ_namespace.
	(find_oload_champ_namespace): New function, which immediately gets
	eviscerated and turned into a call to
	find_oload_champ_namespace_loop.
	(find_oload_champ_namespace_loop): New function.
	* symtab.c (make_symbol_overload_list): Move entire body into
	make_symbol_overload_list_qualified.
	(make_symbol_overload_list_qualified): New.
	(read_in_psymtabs): New.
	(make_symbol_overload_list_qualified): Rewrite.
	(make_symbol_overload_list_using): New.
	(lookup_symbol_namespace): Use alloca, not xmalloc.
	(make_symbol_overload_list): Put some memory management stuff back
	in.
@
text
@d325 1
d327 1
a327 1
  ALL_OBJFILES (objfile)
d329 2
a330 3
      struct minimal_symbol *msym;

      ALL_OBJFILE_MSYMBOLS (objfile, msym)
d332 2
a333 6
	  if (SYMBOL_NAME (msym)
	      && STREQ (SYMBOL_NAME (msym), name))
	    {
	      *objfile_p = objfile;
	      return msym;
	    }
@


1.17.8.5
log
@2003-02-07  David Carlton  <carlton@@math.stanford.edu>

	* Merge with mainline; tag is carlton_dictionary-20030207-merge.
@
text
@d3 1
a3 1
   Copyright 2000, 2001, 2002, 2003 Free Software Foundation, Inc.
a36 2
#include "osabi.h"

d248 1
a248 1
  pc = i386_linux_sigtramp_start (get_frame_pc (frame));
d253 1
a253 1
      if (get_next_frame (frame))
d257 1
a257 1
	return get_frame_base (get_next_frame (frame)) + 12;
d265 1
a265 1
      if (pc == get_frame_pc (frame))
d270 1
a270 1
  pc = i386_linux_rt_sigtramp_start (get_frame_pc (frame));
d273 1
a273 1
      if (get_next_frame (frame))
d278 1
a278 2
	return read_memory_integer (get_frame_base (get_next_frame (frame))
				    + 16, 4) + 20;
@


1.17.8.6
log
@2003-03-05  David Carlton  <carlton@@math.stanford.edu>

	* Merge with mainline.  Tag is carlton_dictionary-20030305-merge.
@
text
@d335 2
a336 2
	  if (SYMBOL_LINKAGE_NAME (msym)
	      && strcmp (SYMBOL_LINKAGE_NAME (msym), name) == 0)
@


1.17.8.7
log
@2003-04-16  David Carlton  <carlton@@bactrian.org>

	* Merge with mainline; tag is carlton_dictionary-20030416-merge.
@
text
@d377 1
a377 1
	return (DEPRECATED_SAVED_PC_AFTER_CALL (get_current_frame ()));
@


1.17.8.8
log
@2003-05-23  David Carlton  <carlton@@bactrian.org>

	* Merge with mainline; tag is carlton_dictionary-20030523-merge.
@
text
@d464 1
a464 1
  set_gdbarch_deprecated_register_bytes (gdbarch, I386_SSE_SIZEOF_REGS + 4);
@


1.17.8.9
log
@2003-06-27  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton_dictionary-20030627-merge.
@
text
@d84 1
a84 1
       mov    $0x77, %eax
d106 6
a111 6
#define LINUX_SIGTRAMP_INSN0	0x58	/* pop %eax */
#define LINUX_SIGTRAMP_OFFSET0	0
#define LINUX_SIGTRAMP_INSN1	0xb8	/* mov $NNNN, %eax */
#define LINUX_SIGTRAMP_OFFSET1	1
#define LINUX_SIGTRAMP_INSN2	0xcd	/* int */
#define LINUX_SIGTRAMP_OFFSET2	6
d116 1
a116 1
  LINUX_SIGTRAMP_INSN1, 0x77, 0x00, 0x00, 0x00,		/* mov $0x77, %eax */
d170 1
a170 1
       mov    $0xad, %eax
d176 4
a179 4
#define LINUX_RT_SIGTRAMP_INSN0		0xb8 /* mov $NNNN, %eax */
#define LINUX_RT_SIGTRAMP_OFFSET0	0
#define LINUX_RT_SIGTRAMP_INSN1		0xcd /* int */
#define LINUX_RT_SIGTRAMP_OFFSET1	5
d183 1
a183 1
  LINUX_RT_SIGTRAMP_INSN0, 0xad, 0x00, 0x00, 0x00,	/* mov $0xad, %eax */
d242 2
a243 5
/* Offset to struct sigcontext in ucontext, from <asm/ucontext.h>.  */
#define I386_LINUX_UCONTEXT_SIGCONTEXT_OFFSET 20

/* Assuming NEXT_FRAME is a frame following a GNU/Linux sigtramp
   routine, return the address of the associated sigcontext structure.  */
d246 1
a246 1
i386_linux_sigcontext_addr (struct frame_info *next_frame)
a248 5
  CORE_ADDR sp;
  char buf[4];

  frame_unwind_register (next_frame, I386_ESP_REGNUM, buf);
  sp = extract_unsigned_integer (buf, 4);
d250 1
a250 1
  pc = i386_linux_sigtramp_start (frame_pc_unwind (next_frame));
d253 15
a267 7
      /* The sigcontext structure lives on the stack, right after
	 the signum argument.  We determine the address of the
	 sigcontext structure by looking at the frame's stack
	 pointer.  Keep in mind that the first instruction of the
	 sigtramp code is "pop %eax".  If the PC is after this
	 instruction, adjust the returned value accordingly.  */
      if (pc == frame_pc_unwind (next_frame))
d272 1
a272 1
  pc = i386_linux_rt_sigtramp_start (frame_pc_unwind (next_frame));
d275 11
a285 8
      CORE_ADDR ucontext_addr;

      /* The sigcontext structure is part of the user context.  A
	 pointer to the user context is passed as the third argument
	 to the signal handler.  */
      read_memory (sp + 8, buf, 4);
      ucontext_addr = extract_unsigned_integer (buf, 4) + 20;
      return ucontext_addr + I386_LINUX_UCONTEXT_SIGCONTEXT_OFFSET;
d297 1
a297 1
  write_register_pid (I386_EIP_REGNUM, pc, ptid);
d325 1
a325 1
find_minsym_and_objfile (char *name, struct objfile **objfilep)
d338 1
a338 1
	      *objfilep = objfile;
d348 1
a348 1
skip_gnu_resolver (CORE_ADDR pc)
d350 1
a350 1
  /* The GNU dynamic linker is part of the GNU C library, so many
d377 1
a377 1
	return frame_pc_unwind (get_current_frame ()); 
d396 1
a396 1
  result = skip_gnu_resolver (pc);
a444 21
/* From <asm/sigcontext.h>.  */
static int i386_linux_sc_reg_offset[I386_NUM_GREGS] =
{
  11 * 4,			/* %eax */
  10 * 4,			/* %ecx */
  9 * 4,			/* %edx */
  8 * 4,			/* %ebx */
  7 * 4,			/* %esp */
  6 * 4,			/* %ebp */
  5 * 4,			/* %esi */
  4 * 4,			/* %edi */
  14 * 4,			/* %eip */
  16 * 4,			/* %eflags */
  15 * 4,			/* %cs */
  18 * 4,			/* %ss */
  3 * 4,			/* %ds */
  2 * 4,			/* %es */
  1 * 4,			/* %fs */
  0 * 4				/* %gs */
};

d464 1
d469 2
a470 2
  tdep->sc_reg_offset = i386_linux_sc_reg_offset;
  tdep->sc_num_regs = I386_NUM_GREGS;
@


1.17.8.10
log
@2003-11-11  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton-dictionary-20031111-merge.
@
text
@a27 1
#include "osabi.h"
a28 1
#include "solib-svr4.h"
d30 8
a37 1
#include "gdb_string.h"
a40 1
#include "glibc-tdep.h"
d315 72
d390 8
a397 1
  return glibc_skip_solib_resolver (pc);
a441 44
/* The register sets used in GNU/Linux ELF core-dumps are identical to
   the register sets in `struct user' that are used for a.out
   core-dumps.  These are also used by ptrace(2).  The corresponding
   types are `elf_gregset_t' for the general-purpose registers (with
   `elf_greg_t' the type of a single GP register) and `elf_fpregset_t'
   for the floating-point registers.

   Those types used to be available under the names `gregset_t' and
   `fpregset_t' too, and GDB used those names in the past.  But those
   names are now used for the register sets used in the `mcontext_t'
   type, which have a different size and layout.  */

/* Mapping between the general-purpose registers in `struct user'
   format and GDB's register cache layout.  */

/* From <sys/reg.h>.  */
static int i386_linux_gregset_reg_offset[] =
{
  6 * 4,			/* %eax */
  1 * 4,			/* %ecx */
  2 * 4,			/* %edx */
  0 * 4,			/* %ebx */
  15 * 4,			/* %esp */
  5 * 4,			/* %ebp */
  3 * 4,			/* %esi */
  4 * 4,			/* %edi */
  12 * 4,			/* %eip */
  14 * 4,			/* %eflags */
  13 * 4,			/* %cs */
  16 * 4,			/* %ss */
  7 * 4,			/* %ds */
  8 * 4,			/* %es */
  9 * 4,			/* %fs */
  10 * 4,			/* %gs */
  -1, -1, -1, -1, -1, -1, -1, -1,
  -1, -1, -1, -1, -1, -1, -1, -1,
  -1, -1, -1, -1, -1, -1, -1, -1,
  -1,
  11 * 4			/* "orig_eax" */
};

/* Mapping between the general-purpose registers in `struct
   sigcontext' format and GDB's register cache layout.  */

d443 1
a443 1
static int i386_linux_sc_reg_offset[] =
d471 4
d479 1
a479 1
  set_gdbarch_num_regs (gdbarch, I386_LINUX_NUM_REGS);
a482 4
  tdep->gregset_reg_offset = i386_linux_gregset_reg_offset;
  tdep->gregset_num_regs = ARRAY_SIZE (i386_linux_gregset_reg_offset);
  tdep->sizeof_gregset = 17 * 4;

d487 1
a487 1
  tdep->sc_num_regs = ARRAY_SIZE (i386_linux_sc_reg_offset);
@


1.17.8.11
log
@2003-12-15  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton_dictionary-20031215-merge.
	* cp-support.c (class_name_from_physname): Add DMGL_PARAMS to call
	to cplus_demangle.
	(method_name_from_physname): Ditto.
@
text
@d309 8
a455 1
  set_gdbarch_skip_solib_resolver (gdbarch, glibc_skip_solib_resolver);
@


1.16
log
@* i386-linux-tdep.c (i386_linux_sigcontext_addr): Make static.
(LINUX_SIGCONTEXT_PC_OFFSET, LINUX_SIGCONEXT_SP_OFFSET): Remove
macros.
(i386_linux_sigtramp_saved_pc, i386_linux_sigtramp_saved_sp):
Remove functions.
(FRAMELESS_SIGNAL): Remove function.
(i386_linux_frame_chain, i386_linux_frame_saved_pc,
i386_linux_saved_pc_after_call): Removed.
(i386_linux_init_abi): Initialize tdep->sigcontext_addr,
tdep->sc_pc_offset and tdep->sc_sp_offset.  Don't override
frame_chain, frame_saved_pc and saved_pc_after_call any longer.
@
text
@a49 21

static int
i386_linux_register_byte (int reg)
{
  /* Deal with the extra "orig_eax" pseudo register.  */
  if (reg == I386_LINUX_ORIG_EAX_REGNUM)
    return (i386_register_byte (I386_LINUX_ORIG_EAX_REGNUM - 1)
	    + i386_register_raw_size (I386_LINUX_ORIG_EAX_REGNUM - 1));

  return i386_register_byte (reg);
}

static int
i386_linux_register_raw_size (int reg)
{
  /* Deal with the extra "orig_eax" pseudo register.  */
  if (reg == I386_LINUX_ORIG_EAX_REGNUM)
    return 4;

  return i386_register_raw_size (reg);
}
a439 2
  set_gdbarch_register_byte (gdbarch, i386_linux_register_byte);
  set_gdbarch_register_raw_size (gdbarch, i386_linux_register_raw_size);
@


1.15
log
@* i386-tdep.h (struct gdbarch_tdep): Replace sigtramp_saved_pc
with sigcontext_addr.  Add sc_sp_offset.
(i386bsd_sigtramp_saved_pc): Remove prototype.
(i386bsd_sicontext_addr): Add prototype.
* i386-tdep.c (i386_sigtramp_saved_pc): New function.
(i386_frame_saved_pc): Rewrite to call i386_sigtramp_saved_pc.
(i386_svr4_sigtramp_saved_pc): Removed.
(i386_svr4_sigcontext_addr): New function.
(i386_svr4_init_abi): Don't initialize tdep->sigtramp_saved_pc.
Initialize tdep->sigcontext_addr instead.  Initialize
tdep->sc_pc_offset and tdep->sc_sp_offset.
(i386_gdbarch_init): Likewise.
* i386bsd-tdep.c (i386bsd_sigcontext_addr): Don't make it static
any more.
(i386bsd_sigtramp_saved_pc): Remove function.
(i386bsd_init_abi): Don't initialize tdep->sigtramp_saved_pc.
Initialize tdep->sigcontext_addr instead.  Initialize
tdep->sc_pc_offset.
* i386-linux-tdep.c (i386_linux_init_abi): Remove initialization
of tdep->sigtramp_saved_pc.
* i386-sol2-tdep.c (i386_sol2_init_abi): Don't initialize
tdep->sigtramp_saved_pc.  Initialize tdep->sigcontext_addr
instead.
@
text
@d243 1
a243 1
CORE_ADDR
a288 94
/* Offset to saved PC in sigcontext, from <asm/sigcontext.h>.  */
#define LINUX_SIGCONTEXT_PC_OFFSET (56)

/* Assuming FRAME is for a GNU/Linux sigtramp routine, return the
   saved program counter.  */

static CORE_ADDR
i386_linux_sigtramp_saved_pc (struct frame_info *frame)
{
  CORE_ADDR addr;
  addr = i386_linux_sigcontext_addr (frame);
  return read_memory_integer (addr + LINUX_SIGCONTEXT_PC_OFFSET, 4);
}

/* Offset to saved SP in sigcontext, from <asm/sigcontext.h>.  */
#define LINUX_SIGCONTEXT_SP_OFFSET (28)

/* Assuming FRAME is for a GNU/Linux sigtramp routine, return the
   saved stack pointer.  */

static CORE_ADDR
i386_linux_sigtramp_saved_sp (struct frame_info *frame)
{
  CORE_ADDR addr;
  addr = i386_linux_sigcontext_addr (frame);
  return read_memory_integer (addr + LINUX_SIGCONTEXT_SP_OFFSET, 4);
}

/* Signal trampolines don't have a meaningful frame.  As in
   "i386/tm-i386.h", the frame pointer value we use is actually the
   frame pointer of the calling frame -- that is, the frame which was
   in progress when the signal trampoline was entered.  GDB mostly
   treats this frame pointer value as a magic cookie.  We detect the
   case of a signal trampoline by looking at the SIGNAL_HANDLER_CALLER
   field, which is set based on PC_IN_SIGTRAMP.

   When a signal trampoline is invoked from a frameless function, we
   essentially have two frameless functions in a row.  In this case,
   we use the same magic cookie for three frames in a row.  We detect
   this case by seeing whether the next frame has
   SIGNAL_HANDLER_CALLER set, and, if it does, checking whether the
   current frame is actually frameless.  In this case, we need to get
   the PC by looking at the SP register value stored in the signal
   context.

   This should work in most cases except in horrible situations where
   a signal occurs just as we enter a function but before the frame
   has been set up.  */

#define FRAMELESS_SIGNAL(frame)					\
  ((frame)->next != NULL					\
   && (frame)->next->signal_handler_caller			\
   && frameless_look_for_prologue (frame))

CORE_ADDR
i386_linux_frame_chain (struct frame_info *frame)
{
  if (frame->signal_handler_caller || FRAMELESS_SIGNAL (frame))
    return frame->frame;

  if (! inside_entry_file (frame->pc))
    return read_memory_unsigned_integer (frame->frame, 4);

  return 0;
}

/* Return the saved program counter for FRAME.  */

CORE_ADDR
i386_linux_frame_saved_pc (struct frame_info *frame)
{
  if (frame->signal_handler_caller)
    return i386_linux_sigtramp_saved_pc (frame);

  if (FRAMELESS_SIGNAL (frame))
    {
      CORE_ADDR sp = i386_linux_sigtramp_saved_sp (frame->next);
      return read_memory_unsigned_integer (sp, 4);
    }

  return read_memory_unsigned_integer (frame->frame + 4, 4);
}

/* Immediately after a function call, return the saved pc.  */

CORE_ADDR
i386_linux_saved_pc_after_call (struct frame_info *frame)
{
  if (frame->signal_handler_caller)
    return i386_linux_sigtramp_saved_pc (frame);

  return read_memory_unsigned_integer (read_register (SP_REGNUM), 4);
}

d466 4
d471 3
a473 4
     address points to a bit of code on the stack.  These definitions
     are used to identify this bit of code as a signal trampoline in
     order to support backtracing through calls to signal handlers.  */

a474 3
  set_gdbarch_frame_chain (gdbarch, i386_linux_frame_chain);
  set_gdbarch_frame_saved_pc (gdbarch, i386_linux_frame_saved_pc);
  set_gdbarch_saved_pc_after_call (gdbarch, i386_linux_saved_pc_after_call);
@


1.14
log
@* i386-linux-tdep.c (i386_linux_register_name): Make return type
constant.
@
text
@a568 1
  tdep->sigtramp_saved_pc = i386_linux_sigtramp_saved_pc;
@


1.13
log
@* config/i386/i386sol2.mt (TDEPFILES): Add i386-sol2-tdep.o and
i386bsd-tdep.o.  Remove solib.o, solib-svr4.o and solib-legacy.o.
Move these to ...
* config/i386/i386sol2.mh: ... here.
* config/i386/tm-i386sol2.h (STAB_REG_TO_REGNUM): Remove define.
(sigtramp_saved_pc, I386V4_SIGTRAMP_SAVED_PC): Don't #undef.
(SIGCONTEXT_PC_OFFSET): Remove define.
(IN_SIGTRAMP): Remove define.
* i386-sol2-tdep.c: New file.

* config/i386/i386nw.mt (TM_FILE): Change to tm-i386.h.
* config/i386/tm-i386nw.h: Removed.

* config/i386/tm-fbsd.h (STAB_REG_TO_REGNUM,
USE_STRUCT_CONVENTION): Remove defines.
(JB_ELEMENT_SIZE, JB_PC, GET_LONGJMP_TARGET): Remove defines.
(get_longjmp_target): Remove prototype.
(IN_SIGTRAMP): Remove define.
(i386bsd_in_sigtramp): Remove prototype.
(i386bsd_sigtramp_start, i386bsd_sigtramp_end): Turn into a
function.  Update comment accordingly
(SIGTRAMP_START, SIGTRAMP): Adjust definition accordingly.
(FRAME_SAVED_PC): Remove define.
(i386bsd_frame_saved_pc): Remove prototype.
* config/i386/tm-nbsd.h (JB_ELEMENT_SIZE, JB_PC,
GET_LONGJMP_TARGET): Remove defines.
(get_longjmp_target): Remove prototype.
(IN_SIGTRAMP): Remove define.
(i386bsd_in_sigtramp): Remove prototype.
(i386bsd_sigtramp_start, i386bsd_sigtramp_end): Turn into a
function.  Update comment accordingly
(SIGTRAMP_START, SIGTRAMP): Adjust definition accordingly.
(FRAME_SAVED_PC): Remove define.
(i386bsd_frame_saved_pc): Remove prototype.
* config/i386/tm-nbsdaout.h (i386nbsd_aout_use_struct_convention):
Remove prototype.
(USE_STRUCT_CONVENTION): Remove prototype.
* i386bsd-nat.c (i386bsd_sigcontext_pc_offset): Remove
declaration.
(_initialize_i386bsd_nat): Revise logic to determine some
constants at compile time when compiling a native GDB.  Warn if
things don't match up with what we expect.
* i386bsd-tdep.c (i386bsd_sigtramp_start, i386bsd_sigtramp_end):
Remove variables.
(i386bsd_in_sigtramp): Rename tp i386bsd_pc_in_sigtramp.  Rewrite
to use date stored in `struct gdbarch_tdep'.
(i386bsd_sigcontext_offset): Remove varaible.
(i386bsd_sigtramp_saved_pc): Make public.  Rewrite to use data
stored in `struct gdbarch_tdep'.
(i386bsd_frame_saved_pc): Make static.
(i386bsd_sigtramp_start, i386bsd_sigtramp_end): New functions.
(i386bsd_sc_pc_offset, i386nbsd_sc_pc_offset,
i386fbsd_sigtramp_start, i386fbsd_sigtramp_end,
i386fbsd4_sc_pc_offset): New variables.
(i386bsd_init_abi, i386nbsd_init_abi, i386nbsdelf_init_abi,
i386fbsdaout_init_abi, i386fbsd_init_abi, i386fbsd4_init_abi): New
functions.
(i386bsd_aout_osabi_sniffer, _initialize_i386bsd_tdep): New
functions.
* i386fbsd-nat.c (_initialize_i386fbsd_nat): Fix type in comment.
Modify the value of i386fbsd_sigtramp_start and
i386fbsd_sigtramp_end instead of i386bsd_sigtramp_start and
i386fbsd_sigtramp_end.
* i386nbsd-tdep.c: (i386nbsd_aout_use_struct_convention): Remove
function.

* config/i386/tm-linux.h (I386_LINUX_ORIG_EAX_REGNUM): Move
define to i386-linux-tdep.h.
(NUM_REGS, MAX_NUM_REGS, REGISTER_BYTES, REGISTER_NAME,
REGISTER_BYTE, REGISTER_RAW_SIZE, STAB_REG_TO_REGNUM): Remove
defines.
(i386_linux_register_name, i386_linux_register_byte,
i386_linux_register_raw_size): Remove prototypes.
(i386_linux_svr4_fetch_link_map_offsets): Remove prototype.
(SVR4_FETCH_LINK_MAP_OFFSETS): Remove define.
(IN_SIGTRAMP, FRAME_CHAIN, FRAME_SAVED_PC, SAVED_PC_AFTER_CALL,
TARGET_WRITE_PC): Remove defines.
(i386_linux_in_sigtramp, i386_linux_frame_chain,
i386_linux_frame_saved_pc, i386_linux_saved_pc_after_call,
i386_linux_write_pc): Remove prototypes.
(JB_ELEMENT_SIZE, JB_PC, GET_LONGJMP_TARGET): Remove defines.
(get_longjmp_target): Remove prototype.
* i386-linux-tdep.h: New file.
* i386-linux-nat.c: Include "i386-linux-tdep.h".
* i386-linux-tdep.c: Include "i386-tdep.h" and
"i386-linux-tdep.h".
(i386_linux_register_name, i386_linux_register_byte,
i386_linux_register_raw_size, i386_linux_in_sigtramp,
i386_linux_write_pc, i386_linux_svr4_fetch_link_map_offsets):
Make static.
(i386_linux_init_abi): New function.
(_initialize_i386_linux_tdep): New function.

* config/i386/tm-i386.h (SAVED_PC_AFTER_CALL): Remove define.
(i386_saved_pc_after_call): Remove prototype.
(MAX_NUM_REGS): Increase to deal with Linux's orig_eax "register".
(REGISTER_NAME, STAB_REG_TO_REGNUM, SDB_REG_TO_REGNUM,
DWARF_REG_TO_REGNUM, DWARF2_REG_TO_REGNUM): Remove defines.
(i386_register_name, i386_stab_reg_to_regnum,
i386_dwarf_reg_to_regnum): Remove prototypes.
(SIZEOF_GREGS, SIZEOF_FPU_REGS, SIZEOF_FPU_CTL_REGS,
SIZEOF_SSE_REGS): Remove defines.
(REGISTER_BYTES): Remove define.
(REGISTER_BYTE, REGISTER_RAW_SIZE): Remove defines.
(i386_register_byte, i386_register_raw_size): Remove prototypes.
(FRAME_CHAIN, FRAME_SAVED_PC): Remove defines.
(i386_frame_chain, i386_frame_saved_pc): Remove prototypes.
* config/i386/tm-i386v4.h (FRAME_CHAIN_VALID): Remove define.
(JB_ELEMENT_SIZE, JB_PC, JB_EBX, JB_ESI, JB_EDI, JB_EBP, JB_ESP,
JB_EDX, GET_LONGJMP_TARGET): Remove defines.
(get_longjmp_target): Remove prototype.
(I386V4_SIGTRAMP_SAVED_PC, IN_SIGTRAMP): Remove defines.
(sigtramp_saved_pc): Remove define.
(i386v4_sigtramp_saved_pc): Remove prototype.
* config/i386/tm-go32.h (FRAME_CHAIN,
FRAMELESS_FUNCTION_INVOCATION, FRAME_SAVED_PC): Remove defines.
(i386go32_frame_saved_pc): Remove prototype.
(JB_ELEMENT_SIZE, JB_PC, GET_LONGJMP_TARGET): Remove defines.
(get_longjmp_target): Remove prototype.
* i386-tdep.h: Include "osabi.h".
(enum i386_abi): Removed.
(enum struct_return): New enum.
(struct gdbarch_tdep): Remove abi member, add osabi, jb_pc_offset,
struct_return, sigtramp_saved_pc, sigtramp_start, sigtramp_end and
sc_pc_offset members.
(i386_gdbarch_register_os_abi): Remove prototype.
(I386_NUM_GREGS, I386_NUM_FREGS, I386_NUM_XREGS,
I386_SSE_NUM_REGS): New defines.
(I386_SIZEOF_GREGS, I386_SIZEOF_FREGS, I386_SIZEOF_XREGS,
I386_SSE_SIZEOF_REGS): New defines.
(i386_register_name, i386_register_byte, i386_register_raw_size):
New prototypes.
(i386_elf_init_abi, i386_svr4_init_abi): New prototypes.
(i386bsd_sigtramp_saved_pc): New prototype.
* i386-tdep.c: Don't include "elf-bfd.h".
(i386_stab_reg_to_regnum, i386_dwarf_reg_to_regnum,
i386_frame_chain, i386_saved_pc_after_call): Make static.
(i386_frame_saved_pc): Rewrite to call architecture dependent
function to deal with signal handlers.  Make static.
(i386go32_frame_saved_pc): Removed.
[GET_LONGJMP_TARGET] (JB_PC, JB_ELEMENT_SIZE, get_longjmp_target):
Removed.
(i386_get_longjmp_target): New function.
(default_struct_convention, pcc_struct_convention,
reg_struct_convention, valid_conventions, struct_convention): New
variables.
(i386_use_struct_convention): New function.
(i386v4_sigtramp_saved_pc): Renamed to
i386_svr4_sigtramp_saved_pc.  Made static.  Moved.
(i386_pc_in_sigtramp): New function.
(i386_abi_names): Removed.
(ABI_TAG_OS_GNU_LINUX, ABI_TAG_OS_GNU_HURD,
ABI_TAG_OS_GNU_SOLARIS, ABI_TAG_OS_FREEBSD, ABI_TAG_OS_NETBSD):
Removed.
(process_note_sections, i386_elf_abi_from_note, i386_elf_abi,
i386_gdbarch_register_os_abi): Removed.
(struct i386_abi_handler): Removed.
(i386_abi_handler_list): Removed.
(i386_svr4_pc_in_sigtramp, i386_go32_pc_in_sigtramp): New
functions.
(i386_elf_init_abi, i386_svr4_init_abi, i386_go32_init_abi,
i386_nw_init_abi): New functions.
(i386_gdbarch_init): Rewritten to use generic OS ABI framework.
Use set_gdbarch_xxx() calls instead of relying on macros for a
number of calls.
(i386_coff_osabi_sniffer, i386_nlm_osabi_sniffer): New functions.
(_initialize_i386_tdep): Add new 'struct-convcention' command.
Register the various architecture variants defined in this file.
@
text
@d41 1
a41 1
static char *
@


1.12
log
@* arch-utils.h: Update copyright.

* gdbarch.sh (PC_IN_SIGTRAMP): Add.
* gdbarch.h, gdbarch.c: Re-generate.

* inferior.h (IN_SIGTRAMP): Delete definition.
* arch-utils.c (legacy_pc_in_sigtramp): New function.
* arch-utils.h (legacy_pc_in_sigtramp): Declare.

* mips-tdep.c (mips_init_extra_frame_info): Use PC_IN_SIGTRAMP.
(mips_dump_tdep): Do not print value of IN_SIGTRAMP.
* hppa-tdep.c (pc_in_interrupt_handler):  Use PC_IN_SIGTRAMP.
(find_proc_framesize): Ditto.
* alpha-tdep.c (alpha_osf_skip_sigtramp_frame): Ditto.
(alpha_init_extra_frame_info): Ditto.
* infrun.c (handle_inferior_event): Ditto.
(handle_inferior_event): Ditto.
(check_sigtramp2): Ditto.
* blockframe.c (create_new_frame): Ditto.
(get_prev_frame): Ditto.
* ppc-linux-tdep.c: Update comments.
* i386-linux-tdep.c: Update comments.
* breakpoint.c (bpstat_what): Update comment.

* gdbint.texinfo (Target Architecture Definition): Replace
IN_SIGTRAMP with PC_IN_SIGTRAMP.
@
text
@d36 3
d41 1
a41 1
char *
d51 1
a51 1
int
d62 1
a62 1
int
d230 2
a231 2
int
i386_linux_in_sigtramp (CORE_ADDR pc, char *name)
d385 1
a385 1
void
d502 1
a502 1
struct link_map_offsets *
d533 50
@


1.12.6.1
log
@Merge with mainline, kseitz_interps-20020619-merge.
@
text
@a35 3
#include "i386-tdep.h"
#include "i386-linux-tdep.h"

d38 1
a38 1
static const char *
d48 1
a48 1
static int
d59 1
a59 1
static int
d227 2
a228 2
static int
i386_linux_pc_in_sigtramp (CORE_ADDR pc, char *name)
d382 1
a382 1
static void
d499 1
a499 1
static struct link_map_offsets *
a529 50
}


static void
i386_linux_init_abi (struct gdbarch_info info, struct gdbarch *gdbarch)
{
  struct gdbarch_tdep *tdep = gdbarch_tdep (gdbarch);

  /* GNU/Linux uses ELF.  */
  i386_elf_init_abi (info, gdbarch);

  /* We support the SSE registers on GNU/Linux.  */
  tdep->num_xmm_regs = I386_NUM_XREGS - 1;
  /* set_gdbarch_num_regs (gdbarch, I386_SSE_NUM_REGS); */

  /* Since we have the extra "orig_eax" register on GNU/Linux, we have
     to adjust a few things.  */

  set_gdbarch_write_pc (gdbarch, i386_linux_write_pc);
  set_gdbarch_num_regs (gdbarch, I386_SSE_NUM_REGS + 1);
  set_gdbarch_register_name (gdbarch, i386_linux_register_name);
  set_gdbarch_register_bytes (gdbarch, I386_SSE_SIZEOF_REGS + 4);
  set_gdbarch_register_byte (gdbarch, i386_linux_register_byte);
  set_gdbarch_register_raw_size (gdbarch, i386_linux_register_raw_size);

  tdep->jb_pc_offset = 20;	/* From <bits/setjmp.h>.  */

  /* When the i386 Linux kernel calls a signal handler, the return
     address points to a bit of code on the stack.  These definitions
     are used to identify this bit of code as a signal trampoline in
     order to support backtracing through calls to signal handlers.  */

  set_gdbarch_pc_in_sigtramp (gdbarch, i386_linux_pc_in_sigtramp);
  set_gdbarch_frame_chain (gdbarch, i386_linux_frame_chain);
  set_gdbarch_frame_saved_pc (gdbarch, i386_linux_frame_saved_pc);
  set_gdbarch_saved_pc_after_call (gdbarch, i386_linux_saved_pc_after_call);
  tdep->sigtramp_saved_pc = i386_linux_sigtramp_saved_pc;

  set_solib_svr4_fetch_link_map_offsets (gdbarch,
				       i386_linux_svr4_fetch_link_map_offsets);
}

/* Provide a prototype to silence -Wmissing-prototypes.  */
extern void _initialize_i386_linux_tdep (void);

void
_initialize_i386_linux_tdep (void)
{
  gdbarch_register_osabi (bfd_arch_i386, GDB_OSABI_LINUX,
			  i386_linux_init_abi);
@


1.12.6.2
log
@Merge w/trunk (kseitz_interps-20020722-merge).
@
text
@d243 1
a243 1
static CORE_ADDR
d289 94
d560 4
a563 3
  tdep->sigcontext_addr = i386_linux_sigcontext_addr;
  tdep->sc_pc_offset = 14 * 4;	/* From <asm/sigcontext.h>.  */
  tdep->sc_sp_offset = 7 * 4;
a564 4
  /* When the i386 Linux kernel calls a signal handler, the return
     address points to a bit of code on the stack.  This function is
     used to identify this bit of code as a signal trampoline in order
     to support backtracing through calls to signal handlers.  */
d566 4
@


1.12.6.3
log
@Merge with kseitz_interps-20020829-merge tag from trunk.
@
text
@d50 21
d461 2
@


1.12.6.4
log
@merge from mainline
@
text
@d212 5
a216 11
  /* If we have NAME, we can optimize the search.  The trampolines are
     named __restore and __restore_rt.  However, they aren't dynamically
     exported from the shared C library, so the trampoline may appear to
     be part of the preceding function.  This should always be sigaction,
     __sigaction, or __libc_sigaction (all aliases to the same function).  */
  if (name == NULL || strstr (name, "sigaction") != NULL)
    return (i386_linux_sigtramp_start (pc) != 0
	    || i386_linux_rt_sigtramp_start (pc) != 0);

  return (strcmp ("__restore", name) == 0
	  || strcmp ("__restore_rt", name) == 0);
@


1.12.4.1
log
@merge from trunk
@
text
@a35 3
#include "i386-tdep.h"
#include "i386-linux-tdep.h"

d38 1
a38 1
static char *
d48 1
a48 1
static int
d59 1
a59 1
static int
d227 2
a228 2
static int
i386_linux_pc_in_sigtramp (CORE_ADDR pc, char *name)
d382 1
a382 1
static void
d499 1
a499 1
static struct link_map_offsets *
a529 50
}


static void
i386_linux_init_abi (struct gdbarch_info info, struct gdbarch *gdbarch)
{
  struct gdbarch_tdep *tdep = gdbarch_tdep (gdbarch);

  /* GNU/Linux uses ELF.  */
  i386_elf_init_abi (info, gdbarch);

  /* We support the SSE registers on GNU/Linux.  */
  tdep->num_xmm_regs = I386_NUM_XREGS - 1;
  /* set_gdbarch_num_regs (gdbarch, I386_SSE_NUM_REGS); */

  /* Since we have the extra "orig_eax" register on GNU/Linux, we have
     to adjust a few things.  */

  set_gdbarch_write_pc (gdbarch, i386_linux_write_pc);
  set_gdbarch_num_regs (gdbarch, I386_SSE_NUM_REGS + 1);
  set_gdbarch_register_name (gdbarch, i386_linux_register_name);
  set_gdbarch_register_bytes (gdbarch, I386_SSE_SIZEOF_REGS + 4);
  set_gdbarch_register_byte (gdbarch, i386_linux_register_byte);
  set_gdbarch_register_raw_size (gdbarch, i386_linux_register_raw_size);

  tdep->jb_pc_offset = 20;	/* From <bits/setjmp.h>.  */

  /* When the i386 Linux kernel calls a signal handler, the return
     address points to a bit of code on the stack.  These definitions
     are used to identify this bit of code as a signal trampoline in
     order to support backtracing through calls to signal handlers.  */

  set_gdbarch_pc_in_sigtramp (gdbarch, i386_linux_pc_in_sigtramp);
  set_gdbarch_frame_chain (gdbarch, i386_linux_frame_chain);
  set_gdbarch_frame_saved_pc (gdbarch, i386_linux_frame_saved_pc);
  set_gdbarch_saved_pc_after_call (gdbarch, i386_linux_saved_pc_after_call);
  tdep->sigtramp_saved_pc = i386_linux_sigtramp_saved_pc;

  set_solib_svr4_fetch_link_map_offsets (gdbarch,
				       i386_linux_svr4_fetch_link_map_offsets);
}

/* Provide a prototype to silence -Wmissing-prototypes.  */
extern void _initialize_i386_linux_tdep (void);

void
_initialize_i386_linux_tdep (void)
{
  gdbarch_register_osabi (bfd_arch_i386, GDB_OSABI_LINUX,
			  i386_linux_init_abi);
@


1.12.4.2
log
@Merge with trunk.
@
text
@d41 1
a41 1
static const char *
@


1.12.4.3
log
@merge with trunk.
@
text
@d243 1
a243 1
static CORE_ADDR
d289 94
d560 4
a563 3
  tdep->sigcontext_addr = i386_linux_sigcontext_addr;
  tdep->sc_pc_offset = 14 * 4;	/* From <asm/sigcontext.h>.  */
  tdep->sc_sp_offset = 7 * 4;
a564 4
  /* When the i386 Linux kernel calls a signal handler, the return
     address points to a bit of code on the stack.  This function is
     used to identify this bit of code as a signal trampoline in order
     to support backtracing through calls to signal handlers.  */
d566 4
@


1.11
log
@s/Linux/.../
Fix PR gdb/378.
@
text
@d95 1
a95 1
   any other way.  The IN_SIGTRAMP macro in tm-linux.h arranges to
d320 1
a320 1
   field, which is set based on IN_SIGTRAMP.
@


1.10
log
@Approved by Jim Blandy:

	2001-12-10  Fred Fish  <fnf@@redhat.com>
	* arm-linux-tdep.c (skip_hurd_resolver): Use NULL rather than
	zero in args to lookup_minimal_symbol.
	* linespec.c (decode_line_1): Ditto.
	* i386-linux-tdep.c (skip_hurd_resolver): Ditto.
	* minsyms.c (find_stab_function_addr): Ditto.
	* symfile.c (simple_read_overlay_table): Ditto.
	(simple_read_overlay_region_table): Ditto.
@
text
@d1 3
a3 2
/* Target-dependent code for Linux running on i386's, for GDB.
   Copyright 2000, 2001 Free Software Foundation, Inc.
d71 1
a71 1
/* Linux has two flavors of signals.  Normal signal handlers, and
d75 2
a76 2
   unlikely that future versions of Linux will support SA_SIGINFO for
   normal signals too.  */
d225 1
a225 1
/* Return whether PC is in a Linux sigtramp routine.  */
d237 2
a238 2
/* Assuming FRAME is for a Linux sigtramp routine, return the address
   of the associated sigcontext structure.  */
d289 2
a290 2
/* Assuming FRAME is for a Linux sigtramp routine, return the saved
   program counter.  */
d303 2
a304 2
/* Assuming FRAME is for a Linux sigtramp routine, return the saved
   stack pointer.  */
d452 1
a452 1
     of Linux will provide a portable, efficient interface for
d492 1
a492 1
   structure for native Linux/x86 targets using the struct offsets
d495 3
a497 2
   This makes it possible to access Linux/x86 shared libraries from a
   GDB that was not built on an Linux/x86 host (for cross debugging).  */
@


1.9
log
@Add support for "orig_eax" pseudo register on Linux/x86.
* i386-linux-tdep.c: Include "inferior.h".
(i386_linux_register_name, i386_linux_register_byte,
i386_linux_register_raw_size): New functions.
(i386_linux_write_pc): New function.
* config/i386/tm-linux.h (I386_LINUX_ORIG_EAX_REGNUM): New define.
(NUM_REGS, MAX_NUM_REGS, REGISTER_BYTES, REGISTER_NAME,
REGISTER_BYTE, REGISTER_RAW_SIZE): Define to deal with additional
register.
(i386_linux_register_name, i386_linux_register_byte,
i386_linux_register_raw_size): New prototypes.
(TARGET_WRITE_PC): New define.
(i386_linux_write_pc): New prototype.
@
text
@d461 1
a461 1
	= lookup_minimal_symbol ("fixup", 0, objfile);
@


1.8
log
@* i386-linux-tdep.c (i386_linux_saved_pc_after_call): Use
read_memory_unsigned_integer instead of read_memory_integer.
@
text
@d26 1
d35 32
d378 24
d403 1
a404 1
/* Calling functions in shared libraries.  */
@


1.7
log
@* i386-linux-tdep.c (FRAMELESS_SIGNAL): Moved here from
config/i386/nm-linux.h (including comment).
(i386_linux_frame_chain): New function implementing guts of the
former FRAME_CHAIN macro, but using read_memory_unsigned_integer
instead of read_memory_integer.
(i386_linux_frame_saved_pc): Removed doc pointing to
i386/tm-linux.h for an explanation of FRAMELESS_SIGNAL since that
now lives in this file.
* config/i386/tm-linux.h (FRAMELESS_SIGNAL): Moved to
i386-linux-tdep.c (including comment).
(FRAME_CHAIN): Redefined in terms of i386_linux_frame_chain.
(i386_linux_frame_chain): New prototype.
@
text
@d343 1
a343 1
  return read_memory_integer (read_register (SP_REGNUM), 4);
@


1.6
log
@* i386-linux-tdep.c (i386_linux_sigtramp_saved_pc,
i386_linux_sigtramp_saved_sp): Make static.
(i386_linux_frame_saved_pc): New function based on the old
FRAME_SAVED_PC macro, but use read_memory_unsigned_integer instead
of read_memory_integer.
* config/i386/tm-linux.h (sigtramp_saved_pc): Remove definition.
(i386_linux_sigtramp_saved_pc): Remove prototype.
(FRAME_SAVED_PC): Redefine in terms of i386_linux_frame_saved_pc.
(i386_linux_frame_saved_pc): New prototype.
@
text
@d280 38
a325 5
  /* See comment in "i386/tm-linux.h" for an explanation what this
     "FRAMELESS_SIGNAL" stuff is supposed to do.

     FIXME: kettenis/2001-03-26: That comment should eventually be
     moved to this file.  */
a344 1

@


1.5
log
@* i386-linux-tdep.c: Fix formatting and clarify comments.
(i386_linux_svr4_fetch_link_map_offsets): Use NULL instead of 0
where appropriate.
@
text
@d258 1
a258 1
CORE_ADDR
d272 1
a272 1
CORE_ADDR
d278 22
@


1.4
log
@Create new file regcache.h.  Update all uses.
@
text
@d31 2
a32 1
#include "solib-svr4.h"	/* for struct link_map_offsets */
d379 6
a384 7
/* Fetch (and possibly build) an appropriate link_map_offsets structure
   for native i386 linux targets using the struct offsets defined in
   link.h (but without actual reference to that file).

   This makes it possible to access i386-linux shared libraries from
   a gdb that was not built on an i386-linux host (for cross debugging).
   */
d390 1
a390 1
  static struct link_map_offsets *lmp = 0;
d392 1
a392 1
  if (lmp == 0)
d396 2
a397 2
      lmo.r_debug_size = 8;	/* 20 not actual size but all we need */

d401 2
a402 2
      lmo.link_map_size = 20;	/* 552 not actual size but all we need */

d416 1
a416 1
    return lmp;
a417 1

@


1.3
log
@2000-10-30  Michael Snyder  <msnyder@@cleaver.cygnus.com>

	* config/sh/tm-linux.h: New file.  Include generic tm-linux.h,
	plus tm-sh.h, then define SVR4_FETCH_LINK_MAP_OFFSETS to use
	the sh target function instead of the default link map offsets.
	* config/sh/sh.mt: Add solib.o and solib-svr4.o to TDEPFILES.
	Use sh/tm-linux.h instead of sh/tm-sh.h.
	* sh-tdep.c (sh_linux_svr4_fetch_link_map_offsets):
	New function.  Construct target-specific link map offsets.
	* i386-linux-tdep.c (i386_linux_svr4_fetch_link_map_offsets:
	New function.  Construct target-specific link map offsets.
	* config/i386/tm-linux.h: Use above function instead of default.

2000-10-30  Michael Snyder  <msnyder@@cleaver.cygnus.com>

	* config/i386/tm-linux.h: Remove definition of SVR4_SHARED_LIBS,
	and inclusion of solib.h.  Move up into ../tm-linux.h.
	config/tm-linux.h: Define SVR4_SHARED_LIBS, include solib.h.
@
text
@d2 1
a2 1
   Copyright (C) 2000 Free Software Foundation, Inc.
d25 1
@


1.2
log
@2000-08-29  Michael Snyder  <msnyder@@cleaver.cygnus.com>

        * i386-linux-nat.c (i386_linux_skip_solib_resolver,
        skip_hurd_resolver, find_minsym_and_objfile): Move these
        solib functions into i386-linux-tdep.c for cross debugging.
        * i386-linux-tdep.c: Receive the above functions.
@
text
@d30 1
d376 42
@


1.1
log
@* i386-linux-nat.c: No need to #include "frame.h" any more.
(LINUX_SIGTRAMP_INSN0, LINUX_SIGTRAMP_OFFSET0,
LINUX_SIGTRAMP_INSN1, LINUX_SIGTRAMP_OFFSET1,
LINUX_SIGTRAMP_INSN2, LINUX_SIGTRAMP_OFFSET2, linux_sigtramp_code,
LINUX_SIGTRAMP_LEN, i386_linux_sigtramp_start,
LINUX_RT_SIGTRAMP_INSN0, LINUX_RT_SIGTRAMP_OFFSET0,
LINUX_RT_SIGTRAMP_INSN1, LINUX_RT_SIGTRAMP_OFFSET1,
linux_rt_sigtramp_code, LINUX_RT_SIGTRAMP_LEN,
i386_linux_rt_sigtramp_start, i386_linux_in_sigtramp,
i386_linux_sigcontext_addr, LINUX_SIGCONTEXT_PC_OFFSET,
i386_linux_sigtramp_saved_pc, LINUX_SIGCONTEXT_SP_OFFSET,
i386_linux_sigtramp_saved_sp):	Deleted.  Folks rightly pointed
out that these are target-dependent, and useful in non-native
configurations.  Moved to...
* i386-linux-tdep.c: ... Here, a new file.
* Makefile.in (ALLDEPFILES): Add i386-linux-tdep.c.
(i386-linux-tdep.o): New rule.
(i386-linux-nat.o): We no longer depend on frame.h.
* config/i386/linux.mt (TDEPFILES): Add i386-linux-tdep.o.
@
text
@d26 5
d286 88
@

