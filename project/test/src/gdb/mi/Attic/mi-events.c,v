head	1.1;
access;
symbols
	interps-20030202-branch:1.1.0.4
	kseitz_interps-20020528-branch:1.1.0.2;
locks; strict;
comment	@ * @;


1.1
date	2002.05.29.20.03.17;	author kseitz;	state dead;
branches
	1.1.2.1
	1.1.4.1;
next	;

1.1.2.1
date	2002.05.29.20.03.17;	author kseitz;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2002.06.19.18.51.32;	author kseitz;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2002.07.22.22.01.31;	author kseitz;	state Exp;
branches;
next	1.1.2.4;

1.1.2.4
date	2002.07.25.17.20.56;	author kseitz;	state Exp;
branches;
next	1.1.2.5;

1.1.2.5
date	2002.08.09.19.53.56;	author kseitz;	state Exp;
branches;
next	1.1.2.6;

1.1.2.6
date	2002.08.21.23.04.27;	author kseitz;	state Exp;
branches;
next	1.1.2.7;

1.1.2.7
date	2002.11.04.16.18.02;	author ezannoni;	state Exp;
branches;
next	1.1.2.8;

1.1.2.8
date	2002.11.04.23.27.32;	author ezannoni;	state Exp;
branches;
next	1.1.2.9;

1.1.2.9
date	2002.11.04.23.45.13;	author ezannoni;	state Exp;
branches;
next	;

1.1.4.1
date	2003.02.03.06.02.46;	author cagney;	state Exp;
branches;
next	1.1.4.2;

1.1.4.2
date	2003.02.04.18.47.22;	author cagney;	state dead;
branches;
next	;


desc
@@


1.1
log
@file mi-events.c was initially added on branch kseitz_interps-20020528-branch.
@
text
@@


1.1.4.1
log
@Merge kseitz_interps-20020528-branch.
@
text
@a0 136
/* MI Event Handlers
   Copyright 2002 Free Software Foundation, Inc.

   This file is part of GDB.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

#include "defs.h"
#include "ui-out.h"
#include "interps.h"
#include "gdb.h"
#include "breakpoint.h"

#include "mi.h"

void 
mi_interp_stack_changed_hook (void)
{
  struct ui_out *saved_ui_out = uiout;
  struct mi_out *tmp_mi_out;
  struct cleanup *cleanup;

  if (gdb_interpreter_current_is_named_p (GDB_INTERPRETER_MI1))
    uiout = gdb_interpreter_ui_out (mi1_interp);
  else
    uiout = gdb_interpreter_ui_out (mi_interp);

  cleanup = make_cleanup_ui_out_list_begin_end (uiout, "MI_HOOK_RESULT");
  ui_out_field_string (uiout, "HOOK_TYPE", "stack_changed");
  do_cleanups (cleanup);
  uiout = saved_ui_out;
}

static void
event_notify (const char *string, ...)
{
  va_list args;

  if (!gdb_interpreter_current_is_named_p (GDB_INTERPRETER_MI1)
      && !gdb_interpreter_current_is_named_p (GDB_INTERPRETER_MI2))
    {
      va_start (args, string);
      vfprintf_unfiltered (mi_event_channel, string, args);
      va_end (args);
      gdb_flush (mi_event_channel);
    }
}

/* breakpoint-create,number=bpnum */
void
mi_create_breakpoint (int bpnum)
{
  event_notify ("breakpoint-create,number=\"%d\"", bpnum);
}

void
mi_modify_breakpoint (int bpnum)
{
  event_notify ("breakpoint-modify,number=\"%d\"", bpnum);
}

void
mi_delete_breakpoint (int bpnum)
{
  event_notify ("breakpoint-delete,number=\"%d\"", bpnum);
}

void
mi_create_tracepoint (int tpnum)
{
  event_notify ("tracepoint-create,number=\"%d\"", tpnum);
}

void
mi_modify_tracepoint (int tpnum)
{
  event_notify ("tracepoint-modify,number=\"%d\"", tpnum);
}

void
mi_delete_tracepoint (int tpnum)
{
  event_notify ("tracepoint-delete,number=\"%d\"", tpnum);
}

void
mi_architecture_changed (void)
{
  event_notify ("architecture-changed");
}

void
mi_target_changed (void)
{
  event_notify ("target-changed");
}

void
mi_selected_frame_level_changed (int level)
{
  event_notify ("selected-frame-level-changed,level=\"%d\"", level);
}

void
mi_context_changed (int thread_id)
{
  event_notify ("context-changed,thread=\"%d\"", thread_id);
}

struct gdb_events mi_event_handlers =
  {
    mi_create_breakpoint,
    mi_delete_breakpoint,
    mi_modify_breakpoint,
    mi_create_tracepoint,
    mi_delete_tracepoint,
    mi_modify_tracepoint,
    mi_architecture_changed,
    mi_target_changed,
    mi_selected_frame_level_changed,
    mi_context_changed
  };

@


1.1.4.2
log
@more zap zap.
@
text
@@


1.1.2.1
log
@Add files mentioned in yesterday's changelog. Oops.
@
text
@a0 148
/* MI Event Handlers
   Copyright 2002 Free Software Foundation, Inc.

   This file is part of GDB.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

#include "defs.h"
#include "ui-out.h"
#include "interps.h"
#include "gdb.h"
#include "breakpoint.h"

#include "mi.h"

void 
mi_interp_stack_changed_hook (void)
{
  struct ui_out *saved_ui_out = uiout;
  struct mi_out *tmp_mi_out;

  if (gdb_current_interpreter_is_named (GDB_INTERPRETER_MI0))
    uiout = gdb_interpreter_ui_out (mi0_interp);
  else
    uiout = gdb_interpreter_ui_out (mi_interp);

  ui_out_list_begin (uiout, "MI_HOOK_RESULT");
  ui_out_field_string (uiout, "HOOK_TYPE", "stack_changed");
  ui_out_list_end (uiout);
  uiout = saved_ui_out;
}

void 
mi_interp_frame_changed_hook (int new_frame_number)
{
  struct ui_out *saved_ui_out = uiout;
  struct mi_out *tmp_mi_out;

  if (gdb_current_interpreter_is_named (GDB_INTERPRETER_MI0))
    uiout = gdb_interpreter_ui_out (mi0_interp);
  else
    uiout = gdb_interpreter_ui_out (mi_interp);

  ui_out_list_begin (uiout, "MI_HOOK_RESULT");
  ui_out_field_string (uiout, "HOOK_TYPE", "frame_changed");
  ui_out_field_int (uiout, "frame", new_frame_number);
  ui_out_list_end (uiout);
  uiout = saved_ui_out;

}

void
mi_interp_context_hook (int thread_id)
{
  struct ui_out *saved_ui_out = uiout;
  struct mi_out *tmp_mi_out;

  if (gdb_current_interpreter_is_named (GDB_INTERPRETER_MI0))
    uiout = gdb_interpreter_ui_out (mi0_interp);
  else
    uiout = gdb_interpreter_ui_out (mi_interp);

  ui_out_list_begin (uiout, "MI_HOOK_RESULT");
  ui_out_field_string (uiout, "HOOK_TYPE", "thread_changed");
  ui_out_field_int (uiout, "thread", thread_id);
  ui_out_list_end (uiout);
  uiout = saved_ui_out;
}

void
mi_interp_create_breakpoint_hook (struct breakpoint *bpt)
{
  CORE_ADDR unusued_addr;
  struct ui_out *saved_ui_out = uiout;
  struct mi_out *tmp_mi_out;

  if (gdb_current_interpreter_is_named (GDB_INTERPRETER_MI0))
    uiout = gdb_interpreter_ui_out (mi0_interp);
  else
    uiout = gdb_interpreter_ui_out (mi_interp);

  /* This is a little inefficient, but it probably isn't worth adding
     a gdb_breakpoint_query that takes a bpt structure... */

  ui_out_list_begin (uiout, "MI_HOOK_RESULT");
  ui_out_field_string (uiout, "HOOK_TYPE", "breakpoint_create");
  gdb_breakpoint_query (uiout, bpt->number);
  ui_out_list_end (uiout);
  uiout = saved_ui_out; 
}

void
mi_interp_modify_breakpoint_hook (struct breakpoint *bpt)
{

  CORE_ADDR unusued_addr;
  struct ui_out *saved_ui_out = uiout;
  struct mi_out *tmp_mi_out;

  if (gdb_current_interpreter_is_named (GDB_INTERPRETER_MI0))
    uiout = gdb_interpreter_ui_out (mi0_interp);
  else
    uiout = gdb_interpreter_ui_out (mi_interp);

  /* This is a little inefficient, but it probably isn't worth adding
     a gdb_breakpoint_query that takes a bpt structure... */

  ui_out_list_begin (uiout, "MI_HOOK_RESULT");
  ui_out_field_string (uiout, "HOOK_TYPE", "breakpoint_modify");
  gdb_breakpoint_query (uiout, bpt->number);
  ui_out_list_end (uiout);
  uiout = saved_ui_out; 
}

void
mi_interp_delete_breakpoint_hook (struct breakpoint *bpt)
{
  CORE_ADDR unusued_addr;
  struct ui_out *saved_ui_out = uiout;
  struct mi_out *tmp_mi_out;

  if (gdb_current_interpreter_is_named (GDB_INTERPRETER_MI0))
    uiout = gdb_interpreter_ui_out (mi0_interp);
  else
    uiout = gdb_interpreter_ui_out (mi_interp);

  /* This is a little inefficient, but it probably isn't worth adding
     a gdb_breakpoint_query that takes a bpt structure... */

  ui_out_list_begin (uiout, "MI_HOOK_RESULT");
  ui_out_field_string (uiout, "HOOK_TYPE", "breakpoint_delete");
  ui_out_field_int (uiout, "bkptno", bpt->number);
  ui_out_list_end (uiout);
  uiout = saved_ui_out; 
}
@


1.1.2.2
log
@        * mi-cmd-break.c (breakpoint_notify): Only query the breakpoint
        for user breakpoints.
        (mi_cmd_break_insert): Only reset event handlers for MI0 and MI1
        interpreters.
        (mi_cmd_break_watch): Reset uiout output to clear watchpoint
        query. This is only used for MI0 and MI1.

        * mi-console.h (mi_console_file_new): Add "quote" parameter.
        * mi_console.c (struct mi_console_file): Add "quote".
        (mi_console_file_new): Add "quote" parameter.
        (mi_console_raw_packet): Use the quote character specified in
        mi_console_file_new, instead of assuming it is '"'.

        * mi-interp.c (mi_event_channel): New channel for event notifications.
        (mi_interpreter_init): Make static.
        Set event handlers.
        (mi_interpreter_resume): Make static.
        Deal with MI version bump.
        (mi_interpreter_suspend): Make static.
        (mi_interpreter_delete): Ditto.
        (mi_do_one_event): Ditto.
        (mi_cmd_exec_continuation): Ditto.
        (mi_interp_query_hook): Ditto.
        (mi_interp_read_one_line_hook): Ditto.
        (_initialize_mi_interp): Create explicit mi1 interp.

        * mi-events.c (notify_event): New helper function.
        (mi_create_breakpoint, mi_modify_breakpoint, mi_delete_breakpoint,
        mi_create_tracepoint, mi_modify_tracepoint, mi_delete_tracepoint,
        mi_architecture_changed): New functions.

        * mi.h: Add declarations for mi_create_breakpoint, mi_modify_breakpoint,
        mi_delete_breakpoint, mi_create_tracepoint, mi_modify_tracepoint,
        mi_delete_tracepoint, mi_architecture_changed, mi_stdout, mi_stderr,
        mi_stdtarg, mi_stdlog, and mi_eventchannel.

        * mi-main.c (captured_mi_execute_command): Deal with mi version
        bump.
        (mi_load_progress): Ditto.

        * gdbmi.texinfo: Expand notify-async-output to include GDB events.
        Update all examples to show breakpoint events and
        remove redundant breakpoint info on "-break-insert" and "-break-watch".
        The event now supplies everything that is needed.
@
text
@a148 58

static void
event_notify (const char *string, ...)
{
  va_list args;

  if (!gdb_current_interpreter_is_named (GDB_INTERPRETER_MI0)
      && !gdb_current_interpreter_is_named (GDB_INTERPRETER_MI1))
    {
      va_start (args, string);
      vfprintf_unfiltered (mi_event_channel, string, args);
      va_end (args);
      gdb_flush (mi_event_channel);
    }
}

/* breakpoint-create,number=bpnum */
void
mi_create_breakpoint (int bpnum)
{
  event_notify ("breakpoint-create,number=\"%d\"", bpnum);
}

void
mi_modify_breakpoint (int bpnum)
{
  event_notify ("breakpoint-modify,number=\"%d\"", bpnum);
}

void
mi_delete_breakpoint (int bpnum)
{
  event_notify ("breakpoint-delete,number=\"%d\"", bpnum);
}

void
mi_create_tracepoint (int tpnum)
{
  event_notify ("tracepoint-create,number=\"%d\"", tpnum);
}

void
mi_modify_tracepoint (int tpnum)
{
  event_notify ("tracepoint-modify,number=\"%d\"", tpnum);
}

void
mi_delete_tracepoint (int tpnum)
{
  event_notify ("tracepoint-delete,number=\"%d\"", tpnum);
}

void
mi_architecture_changed (void)
{
  event_notify ("architecture-changed");
}
@


1.1.2.3
log
@        * mi-events.c (mi_register_update): New function.
        * mi-interp.c (mi_event_handlers): Add mi_register_update
        event handler.
        * mi.h (mi_register_update): Add declaration.
@
text
@a206 6

void
mi_register_update(int regno)
{
  event_notify ("register-update,number=\"%d\"", regno);
}
@


1.1.2.4
log
@        * mi-interp.c (mi_event_handlers): Add selected_frame_level_changed
        handler.
        (mi_insert_notify_hooks): Remove breakpoint hooks and frame
        changed hook.
        (mi_remove_notify_hooks): Likewise.
        * mi-events.c (mi_selected_frame_level_changed): New function.
        (mi_interp_frame_changed_hook): Remove.
        (mi_interp_create_breakpoint_hook): Remove.
        (mi_interp_modify_breakpoint_hook): Remove.
        (mi_interp_delete_breakpoint_hook): Remove.
        * mi.h (mi_selected_frame_level_changed): Add declaration.
        (mi_interp_create_breakpoint_hook): Remove declaration.
        (mi_interp_modify_breakpoint_hook): Remove declaration.
        (mi_interp_delete_breakpoint_hook): Remove declaration.
        * mi-cmd-stack.c (mi_cmd_stack_select_frame): If the stack level changes,
        issue a selected_frame_level_changed event.
@
text
@d46 19
d83 67
d209 1
a209 1
mi_register_update (int regno)
a211 6
}

void
mi_selected_frame_level_changed (int level)
{
  event_notify ("selected-frame-level-changed,level=\"%d\"", level);
@


1.1.2.5
log
@        * mi-interp.c (mi_event_handlers): Add context_changed event
        handler.
        (mi_command_loop): Remove big block of code repeated in
        mi_interpreter_resume. I don't think this is needed.
        (mi_insert_notify_hooks): Remove context_hook.
        (mi_remove_notify_hooks): Likewise.
        * mi-events.c (mi_context_changed): New function.
        * mi.h (mi_context_changed): Add declaration.
@
text
@d46 18
a131 6
}

void
mi_context_changed (int thread_id)
{
  event_notify ("context-changed,thread=\"%d\"", thread_id);
@


1.1.2.6
log
@        * mi-events.c (mi_target_changed): Renamed from mi_register_update.
        * mi.h (mi_target_changed): Ditto.
        * mi-interp.c (mi_event_handlers): Ditto.
@
text
@d105 1
a105 1
mi_target_changed (void)
d107 1
a107 1
  event_notify ("target-changed");
@


1.1.2.7
log
@2002-11-04  Elena Zannoni  <ezannoni@@redhat.com>

	* interps.h (GDB_INTERPRETER_MI2): Define.
	(GDB_INTERPRETER_MI0): Remove.

2002-11-04  Elena Zannoni  <ezannoni@@redhat.com>

	* mi-interp.c: Increment mi version numbers: 0->1, 1->2,
	and 2->3. Remove MI0 references.
	* mi-events.c: Ditto.
	* mi-main.c: Ditto. Remove erroneously merged code.
	* mi.h: Ditto.
@
text
@d35 2
a36 2
  if (gdb_current_interpreter_is_named (GDB_INTERPRETER_MI1))
    uiout = gdb_interpreter_ui_out (mi1_interp);
d51 2
a52 2
  if (!gdb_current_interpreter_is_named (GDB_INTERPRETER_MI1)
      && !gdb_current_interpreter_is_named (GDB_INTERPRETER_MI2))
@


1.1.2.8
log
@2002-11-04  Elena Zannoni  <ezannoni@@redhat.com>

	* cli/cli-interp.c (_initialize_cli_interp): Call
	gdb_interpreter_new and gdb_interpreter_add.
	* top.c (gdb_init): Call gdb_interpreter_lookup.
	(gdb_init): Call gdb_interpreter_set.
	* interps.c (gdb_interpreter_new): Renamed from
	gdb_new_interpreter.
	(gdb_interpreter_add): Renamed from gdb_add_interpreter.
	(gdb_interpreter_set): Renamed from gdb_set_interpreter.
	(gdb_interpreter_lookup): Renamed from gdb_lookup_interpreter.
	(gdb_interpreter_current): Renamed from gdb_current_interpreter.
	Update all callers.
	* interps.h: Ditto.

2002-11-04  Elena Zannoni  <ezannoni@@redhat.com>

	* mi-interp.c (mi_interpreter_resume): Ditto.
	(mi_cmd_interpreter_exec): Use gdb_interpreter_lookup.
	(_initialize_mi_interp): Use gdb_interpreter_new,
	gdb_interpreter_add.
	* mi-cmd-break.c (mi_cmd_break_insert): Use
	gdb_interpreter_current_is_named_p.
	(mi_cmd_break_watch): Ditto.
	* mi-events.c (mi_interp_stack_changed_hook): Ditto.
	(event_notify): Ditto.
	* mi-main.c (captured_mi_execute_command): Use
	gdb_interpreter_current_is_named_p.
	(mi_load_progress): Ditto.
@
text
@d35 1
a35 1
  if (gdb_interpreter_current_is_named_p (GDB_INTERPRETER_MI1))
d51 2
a52 2
  if (!gdb_interpreter_current_is_named_p (GDB_INTERPRETER_MI1)
      && !gdb_interpreter_current_is_named_p (GDB_INTERPRETER_MI2))
@


1.1.2.9
log
@2002-11-04  Elena Zannoni  <ezannoni@@redhat.com>

	* interps.h (clear_interpreter_hooks): Add 'extern' keyword.

2002-11-04  Elena Zannoni  <ezannoni@@redhat.com>

	* mi.h: Clean up interface, removing unnecessarily exported
	functions and data structures.
	* mi-events.c (mi_event_handlers): Move here...
	* mi-interps.c: .. from here.
	Include gdb_string.h.
@
text
@a120 15

struct gdb_events mi_event_handlers =
  {
    mi_create_breakpoint,
    mi_delete_breakpoint,
    mi_modify_breakpoint,
    mi_create_tracepoint,
    mi_delete_tracepoint,
    mi_modify_tracepoint,
    mi_architecture_changed,
    mi_target_changed,
    mi_selected_frame_level_changed,
    mi_context_changed
  };

@


