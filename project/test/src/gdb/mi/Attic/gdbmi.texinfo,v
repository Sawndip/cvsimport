head	1.34;
access;
symbols
	cagney_framebase-20030326-branch:1.33.0.10
	cagney_framebase-20030326-branchpoint:1.33
	cagney_lazyid-20030317-branch:1.33.0.8
	cagney_lazyid-20030317-branchpoint:1.33
	kettenis-i386newframe-20030316-mergepoint:1.33
	offbyone-20030313-branch:1.33.0.6
	offbyone-20030313-branchpoint:1.33
	kettenis-i386newframe-20030308-branch:1.33.0.4
	kettenis-i386newframe-20030308-branchpoint:1.33
	carlton_dictionary-20030305-merge:1.33
	cagney_offbyone-20030303-branch:1.33.0.2
	cagney_offbyone-20030303-branchpoint:1.33
	carlton_dictionary-20030207-merge:1.33
	interps-20030203-mergepoint:1.32
	interps-20030202-branch:1.32.0.2
	interps-20030202-branchpoint:1.32
	cagney-unwind-20030108-branch:1.31.0.2
	cagney-unwind-20030108-branchpoint:1.31
	carlton_dictionary-20021223-merge:1.31
	gdb_5_3-2002-12-12-release:1.27
	carlton_dictionary-20021115-merge:1.30
	kseitz_interps-20021105-merge:1.29
	kseitz_interps-20021103-merge:1.29
	drow-cplus-merge-20021020:1.29
	drow-cplus-merge-20021025:1.29
	carlton_dictionary-20021025-merge:1.29
	carlton_dictionary-20021011-merge:1.29
	drow-cplus-branch:1.29.0.2
	drow-cplus-branchpoint:1.29
	kseitz_interps-20020930-merge:1.28
	carlton_dictionary-20020927-merge:1.28
	carlton_dictionary-branch:1.27.0.8
	carlton_dictionary-20020920-branchpoint:1.27
	gdb_5_3-branch:1.27.0.6
	gdb_5_3-2002-09-04-branchpoint:1.27
	kseitz_interps-20020829-merge:1.27
	cagney_sysregs-20020825-branch:1.27.0.4
	cagney_sysregs-20020825-branchpoint:1.27
	readline_4_3-import-branch:1.27.0.2
	readline_4_3-import-branchpoint:1.27
	gdb_5_2_1-2002-07-23-release:1.26
	kseitz_interps-20020528-branch:1.26.0.8
	kseitz_interps-20020528-branchpoint:1.26
	cagney_regbuf-20020515-branch:1.26.0.6
	cagney_regbuf-20020515-branchpoint:1.26
	jimb-macro-020506-branch:1.26.0.4
	jimb-macro-020506-branchpoint:1.26
	gdb_5_2-2002-04-29-release:1.26
	gdb_5_2-branch:1.26.0.2
	gdb_5_2-2002-03-03-branchpoint:1.26
	gdb_5_1_1-2002-01-24-release:1.23.4.1
	gdb_5_1_0_1-2002-01-03-release:1.23
	cygnus_cvs_20020108_pre:1.24
	gdb_5_1_0_1-2002-01-03-branch:1.23.0.8
	gdb_5_1_0_1-2002-01-03-branchpoint:1.23
	gdb_5_1-2001-11-21-release:1.23
	gdb_s390-2001-09-26-branch:1.23.0.6
	gdb_s390-2001-09-26-branchpoint:1.23
	gdb_5_1-2001-07-29-branch:1.23.0.4
	gdb_5_1-2001-07-29-branchpoint:1.23
	dberlin-typesystem-branch:1.23.0.2
	dberlin-typesystem-branchpoint:1.23
	gdb-post-ptid_t-2001-05-03:1.11
	gdb-pre-ptid_t-2001-05-03:1.11
	insight-precleanup-2001-01-01:1.9
	gdb-post-protoization-2000-07-29:1.7
	gdb-pre-protoization-2000-07-29:1.7
	gdb-premipsmulti-2000-06-06-branch:1.6.0.2
	gdb-premipsmulti-2000-06-06-branchpoint:1.6
	gdb-post-params-removal-2000-06-04:1.6
	gdb-pre-params-removal-2000-06-04:1.6
	gdb-post-params-removal-2000-05-28:1.6
	gdb-pre-params-removal-2000-05-28:1.6
	gdb_5_0-2000-05-19-release:1.2.2.3
	gdb_4_18_2-2000-05-18-release:1.2.2.3
	gdb_4_95_1-2000-05-11-snapshot:1.2.2.3
	gdb_4_95_0-2000-04-27-snapshot:1.2.2.2
	gdb_5_0-2000-04-10-branch:1.2.0.2
	gdb_5_0-2000-04-10-branchpoint:1.2;
locks; strict;
comment	@# @;


1.34
date	2003.03.27.15.17.35;	author cagney;	state dead;
branches;
next	1.33;

1.33
date	2003.02.04.18.41.29;	author cagney;	state Exp;
branches
	1.33.10.1;
next	1.32;

1.32
date	2003.02.02.06.24.04;	author cagney;	state Exp;
branches
	1.32.2.1;
next	1.31;

1.31
date	2002.12.13.17.00.22;	author jjohnstn;	state Exp;
branches;
next	1.30;

1.30
date	2002.11.11.17.09.50;	author jjohnstn;	state Exp;
branches;
next	1.29;

1.29
date	2002.10.03.22.31.31;	author jjohnstn;	state Exp;
branches
	1.29.2.1;
next	1.28;

1.28
date	2002.09.27.18.09.27;	author cagney;	state Exp;
branches;
next	1.27;

1.27
date	2002.06.17.17.30.57;	author kseitz;	state Exp;
branches
	1.27.8.1;
next	1.26;

1.26
date	2002.02.25.02.13.09;	author cagney;	state Exp;
branches
	1.26.6.1
	1.26.8.1;
next	1.25;

1.25
date	2002.01.22.17.15.57;	author cagney;	state Exp;
branches;
next	1.24;

1.24
date	2001.12.30.06.25.14;	author eliz;	state Exp;
branches;
next	1.23;

1.23
date	2001.06.27.17.27.06;	author cagney;	state Exp;
branches
	1.23.4.1;
next	1.22;

1.22
date	2001.06.26.19.11.48;	author cagney;	state Exp;
branches;
next	1.21;

1.21
date	2001.06.26.18.50.51;	author cagney;	state Exp;
branches;
next	1.20;

1.20
date	2001.06.26.18.13.45;	author cagney;	state Exp;
branches;
next	1.19;

1.19
date	2001.06.26.05.12.37;	author cagney;	state Exp;
branches;
next	1.18;

1.18
date	2001.06.26.04.48.47;	author cagney;	state Exp;
branches;
next	1.17;

1.17
date	2001.06.25.21.05.11;	author cagney;	state Exp;
branches;
next	1.16;

1.16
date	2001.06.25.20.08.52;	author cagney;	state Exp;
branches;
next	1.15;

1.15
date	2001.06.25.19.02.17;	author cagney;	state Exp;
branches;
next	1.14;

1.14
date	2001.06.25.18.34.24;	author cagney;	state Exp;
branches;
next	1.13;

1.13
date	2001.06.23.20.43.56;	author cagney;	state Exp;
branches;
next	1.12;

1.12
date	2001.06.16.18.57.56;	author cagney;	state Exp;
branches;
next	1.11;

1.11
date	2001.03.26.11.51.50;	author eliz;	state Exp;
branches;
next	1.10;

1.10
date	2001.03.06.08.21.44;	author kevinb;	state Exp;
branches;
next	1.9;

1.9
date	2000.10.16.07.34.02;	author eliz;	state Exp;
branches;
next	1.8;

1.8
date	2000.08.23.09.15.25;	author eliz;	state Exp;
branches;
next	1.7;

1.7
date	2000.07.24.06.09.48;	author eliz;	state Exp;
branches;
next	1.6;

1.6
date	2000.05.07.10.57.54;	author eliz;	state Exp;
branches;
next	1.5;

1.5
date	2000.05.07.10.55.23;	author eliz;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.26.23.39.53;	author cagney;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.23.08.15.49;	author eliz;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.06.22.14.44;	author ezannoni;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	2000.02.23.00.25.43;	author cagney;	state Exp;
branches;
next	;

1.2.2.1
date	2000.04.23.09.14.05;	author eliz;	state Exp;
branches;
next	1.2.2.2;

1.2.2.2
date	2000.04.26.23.39.54;	author cagney;	state Exp;
branches;
next	1.2.2.3;

1.2.2.3
date	2000.05.07.11.03.17;	author eliz;	state Exp;
branches;
next	;

1.23.4.1
date	2001.12.30.06.19.46;	author eliz;	state Exp;
branches;
next	;

1.26.6.1
date	2002.06.21.16.19.59;	author cagney;	state Exp;
branches;
next	;

1.26.8.1
date	2002.06.19.18.51.32;	author kseitz;	state Exp;
branches;
next	1.26.8.2;

1.26.8.2
date	2002.08.09.20.02.32;	author kseitz;	state Exp;
branches;
next	1.26.8.3;

1.26.8.3
date	2002.08.09.20.03.45;	author kseitz;	state Exp;
branches;
next	1.26.8.4;

1.26.8.4
date	2002.08.28.17.01.44;	author kseitz;	state Exp;
branches;
next	1.26.8.5;

1.26.8.5
date	2002.10.01.00.46.23;	author kseitz;	state Exp;
branches;
next	1.26.8.6;

1.26.8.6
date	2002.11.04.00.23.11;	author ezannoni;	state Exp;
branches;
next	;

1.27.8.1
date	2002.09.27.20.03.14;	author carlton;	state Exp;
branches;
next	1.27.8.2;

1.27.8.2
date	2002.10.11.22.23.00;	author carlton;	state Exp;
branches;
next	1.27.8.3;

1.27.8.3
date	2002.11.15.19.19.11;	author carlton;	state Exp;
branches;
next	1.27.8.4;

1.27.8.4
date	2002.12.23.19.39.09;	author carlton;	state Exp;
branches;
next	1.27.8.5;

1.27.8.5
date	2003.02.07.19.17.56;	author carlton;	state Exp;
branches;
next	1.27.8.6;

1.27.8.6
date	2003.04.16.19.57.01;	author carlton;	state dead;
branches;
next	;

1.29.2.1
date	2003.12.14.20.27.44;	author drow;	state dead;
branches;
next	;

1.32.2.1
date	2003.02.03.06.02.46;	author cagney;	state Exp;
branches;
next	;

1.33.10.1
date	2003.03.30.16.35.24;	author cagney;	state dead;
branches;
next	;


desc
@@


1.34
log
@Index: doc/ChangeLog
2003-03-27  Andrew Cagney  <cagney@@redhat.com>

	* gdb.texinfo (GDB/MI Variable Objects): Replace @@include with
	chapter body.  Use @@smallexample instead of @@example.
	(Annotations): Ditto.
	* Makefile.in (GDB_DOC_SOURCE_INCLUDES): Remove gdbmi.texinfo and
	annotate.texi.

Index: mi/ChangeLog
2003-03-27  Andrew Cagney  <cagney@@redhat.com>

	* gdbmi.texinfo: Delete file.  Contents moved to
	../doc/gdb.texinfo.
@
text
@@@c  \input texinfo   @@c -*-texinfo-*-
@@c  @@c %**start of header
@@c  @@setfilename gdbmi.info
@@c  @@settitle GDB/MI Machine Interface
@@c  @@setchapternewpage off
@@c  @@c %**end of header

@@c  @@ifinfo
@@c  This file documents GDB/MI, a Machine Interface to GDB.

@@c  Copyright 2000, 2001, 2002 Free Software Foundation, Inc.
@@c  Contributed by Cygnus Solutions.

@@c  Permission is granted to copy, distribute and/or modify this document
@@c  under the terms of the GNU Free Documentation License, Version 1.1 or
@@c  any later version published by the Free Software Foundation; with no
@@c  Invariant Sections, with the Front-Cover Texts being ``A GNU Manual,''
@@c  and with the Back-Cover Texts as in (a) below.

@@c  (a) The FSF's Back-Cover Text is: ``You have freedom to copy and modify
@@c  this GNU Manual, like GNU software.  Copies published by the Free
@@c  Software Foundation raise funds for GNU development.''
@@c  @@end ifinfo

@@c  @@c  This title page illustrates only one of the
@@c  @@c  two methods of forming a title page.

@@c  @@titlepage
@@c  @@title GDB/MI
@@c  @@subtitle Version 0.3
@@c  @@subtitle Apr 2001
@@c  @@author Andrew Cagney, Fernando Nasser and Elena Zannoni

@@c  @@c  The following two commands
@@c  @@c  start the copyright page.
@@c  @@page
@@c  @@vskip 0pt plus 1filll

@@c  Copyright @@copyright{} 2000, 2001, 2002 Free Software Foundation, Inc.

@@c  Permission is granted to copy, distribute and/or modify this document
@@c  under the terms of the GNU Free Documentation License, Version 1.1 or
@@c  any later version published by the Free Software Foundation; with no
@@c  Invariant Sections, with the Front-Cover texts being ``A GNU Manual,''
@@c  and with the Back-Cover Texts as in (a) below.

@@c  (a) The FSF's Back-Cover Text is: ``You have freedom to copy and modify
@@c  this GNU Manual, like GNU software.  Copies published by the Free
@@c  Software Foundation raise funds for GNU development.''
@@c  @@end titlepage

@@c %%%%%%%%%%%%%%%%%%%%%%%%%%%% CHAPTER %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@@node GDB/MI
@@chapter The @@sc{gdb/mi} Interface

@@unnumberedsec Function and Purpose

@@cindex @@sc{gdb/mi}, its purpose
@@sc{gdb/mi} is a line based machine oriented text interface to @@value{GDBN}.  It is
specifically intended to support the development of systems which use
the debugger as just one small component of a larger system.

This chapter is a specification of the @@sc{gdb/mi} interface.  It is written
in the form of a reference manual.

Note that @@sc{gdb/mi} is still under construction, so some of the
features described below are incomplete and subject to change.

@@unnumberedsec Notation and Terminology

@@cindex notational conventions, for @@sc{gdb/mi}
This chapter uses the following notation:

@@itemize @@bullet
@@item
@@code{|} separates two alternatives.

@@item
@@code{[ @@var{something} ]} indicates that @@var{something} is optional:
it may or may not be given.

@@item
@@code{( @@var{group} )*} means that @@var{group} inside the parentheses
may repeat zero or more times.

@@item
@@code{( @@var{group} )+} means that @@var{group} inside the parentheses
may repeat one or more times.

@@item
@@code{"@@var{string}"} means a literal @@var{string}.
@@end itemize

@@ignore
@@heading Dependencies
@@end ignore

@@heading Acknowledgments

In alphabetic order: Andrew Cagney, Fernando Nasser, Stan Shebs and
Elena Zannoni.

@@menu
* GDB/MI Command Syntax::
* GDB/MI Compatibility with CLI::
* GDB/MI Output Records::
* GDB/MI Command Description Format::
* GDB/MI Breakpoint Table Commands::
* GDB/MI Data Manipulation::
* GDB/MI Program Control::
* GDB/MI Miscellaneous Commands::
@@ignore
* GDB/MI Kod Commands::
* GDB/MI Memory Overlay Commands::
* GDB/MI Signal Handling Commands::
@@end ignore
* GDB/MI Stack Manipulation::
* GDB/MI Symbol Query::
* GDB/MI Target Manipulation::
* GDB/MI Thread Commands::
* GDB/MI Tracepoint Commands::
* GDB/MI Variable Objects::
@@end menu

@@c %%%%%%%%%%%%%%%%%%%%%%%%%%%% SECTION %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@@node GDB/MI Command Syntax
@@section @@sc{gdb/mi} Command Syntax

@@menu
* GDB/MI Input Syntax::
* GDB/MI Output Syntax::
* GDB/MI Simple Examples::
@@end menu

@@node GDB/MI Input Syntax
@@subsection @@sc{gdb/mi} Input Syntax

@@cindex input syntax for @@sc{gdb/mi}
@@cindex @@sc{gdb/mi}, input syntax
@@table @@code
@@item @@var{command} @@expansion{}
@@code{@@var{cli-command} | @@var{mi-command}}

@@item @@var{cli-command} @@expansion{}
@@code{[ @@var{token} ] @@var{cli-command} @@var{nl}}, where
@@var{cli-command} is any existing @@value{GDBN} CLI command.

@@item @@var{mi-command} @@expansion{}
@@code{[ @@var{token} ] "-" @@var{operation} ( " " @@var{option} )*
@@code{[} " --" @@code{]} ( " " @@var{parameter} )* @@var{nl}}

@@item @@var{token} @@expansion{}
"any sequence of digits"

@@item @@var{option} @@expansion{}
@@code{"-" @@var{parameter} [ " " @@var{parameter} ]}

@@item @@var{parameter} @@expansion{}
@@code{@@var{non-blank-sequence} | @@var{c-string}}

@@item @@var{operation} @@expansion{}
@@emph{any of the operations described in this chapter}

@@item @@var{non-blank-sequence} @@expansion{}
@@emph{anything, provided it doesn't contain special characters such as
"-", @@var{nl}, """ and of course " "}

@@item @@var{c-string} @@expansion{}
@@code{""" @@var{seven-bit-iso-c-string-content} """}

@@item @@var{nl} @@expansion{}
@@code{CR | CR-LF}
@@end table

@@noindent
Notes:

@@itemize @@bullet
@@item
The CLI commands are still handled by the @@sc{mi} interpreter; their
output is described below.

@@item
The @@code{@@var{token}}, when present, is passed back when the command
finishes.

@@item
Some @@sc{mi} commands accept optional arguments as part of the parameter
list.  Each option is identified by a leading @@samp{-} (dash) and may be
followed by an optional argument parameter.  Options occur first in the
parameter list and can be delimited from normal parameters using
@@samp{--} (this is useful when some parameters begin with a dash).
@@end itemize

Pragmatics:

@@itemize @@bullet
@@item
We want easy access to the existing CLI syntax (for debugging).

@@item
We want it to be easy to spot a @@sc{mi} operation.
@@end itemize

@@node GDB/MI Output Syntax
@@subsection @@sc{gdb/mi} Output Syntax

@@cindex output syntax of @@sc{gdb/mi}
@@cindex @@sc{gdb/mi}, output syntax
The output from @@sc{gdb/mi} consists of zero or more out-of-band records
followed, optionally, by a single result record.  This result record
is for the most recent command.  The sequence of output records is
terminated by @@samp{(@@value{GDBP})}.

If an input command was prefixed with a @@code{@@var{token}} then the
corresponding output for that command will also be prefixed by that same
@@var{token}.

@@table @@code
@@item @@var{output} @@expansion{}
@@code{( @@var{out-of-band-record} )* [ @@var{result-record} ] "(gdb)" @@var{nl}}

@@item @@var{result-record} @@expansion{}
@@code{ [ @@var{token} ] "^" @@var{result-class} ( "," @@var{result} )* @@var{nl}}

@@item @@var{out-of-band-record} @@expansion{}
@@code{@@var{async-record} | @@var{stream-record}}

@@item @@var{async-record} @@expansion{}
@@code{@@var{exec-async-output} | @@var{status-async-output} | @@var{notify-async-output}}

@@item @@var{exec-async-output} @@expansion{}
@@code{[ @@var{token} ] "*" @@var{async-output}}

@@item @@var{status-async-output} @@expansion{}
@@code{[ @@var{token} ] "+" @@var{async-output}}

@@item @@var{notify-async-output} @@expansion{}
@@code{[ @@var{token} ] "=" @@var{async-output}}

@@item @@var{async-output} @@expansion{}
@@code{@@var{async-class} ( "," @@var{result} )* @@var{nl}}

@@item @@var{result-class} @@expansion{}
@@code{"done" | "running" | "connected" | "error" | "exit"}

@@item @@var{async-class} @@expansion{}
@@code{"stopped" | @@var{others}} (where @@var{others} will be added
depending on the needs---this is still in development).

@@item @@var{result} @@expansion{}
@@code{ @@var{variable} "=" @@var{value}}

@@item @@var{variable} @@expansion{}
@@code{ @@var{string} }

@@item @@var{value} @@expansion{}
@@code{ @@var{const} | @@var{tuple} | @@var{list} }

@@item @@var{const} @@expansion{}
@@code{@@var{c-string}}

@@item @@var{tuple} @@expansion{}
@@code{ "@@{@@}" | "@@{" @@var{result} ( "," @@var{result} )* "@@}" }

@@item @@var{list} @@expansion{}
@@code{ "[]" | "[" @@var{value} ( "," @@var{value} )* "]" | "["
@@var{result} ( "," @@var{result} )* "]" }

@@item @@var{stream-record} @@expansion{}
@@code{@@var{console-stream-output} | @@var{target-stream-output} | @@var{log-stream-output}}

@@item @@var{console-stream-output} @@expansion{}
@@code{"~" @@var{c-string}}

@@item @@var{target-stream-output} @@expansion{}
@@code{"@@@@" @@var{c-string}}

@@item @@var{log-stream-output} @@expansion{}
@@code{"&" @@var{c-string}}

@@item @@var{nl} @@expansion{}
@@code{CR | CR-LF}

@@item @@var{token} @@expansion{}
@@emph{any sequence of digits}.
@@end table

@@noindent
Notes:

@@itemize @@bullet
@@item
All output sequences end in a single line containing a period.

@@item
The @@code{@@var{token}} is from the corresponding request.  If an execution
command is interrupted by the @@samp{-exec-interrupt} command, the
@@var{token} associated with the @@samp{*stopped} message is the one of the
original execution command, not the one of the interrupt command.

@@item
@@cindex status output in @@sc{gdb/mi}
@@var{status-async-output} contains on-going status information about the
progress of a slow operation.  It can be discarded.  All status output is
prefixed by @@samp{+}.

@@item
@@cindex async output in @@sc{gdb/mi}
@@var{exec-async-output} contains asynchronous state change on the target
(stopped, started, disappeared).  All async output is prefixed by
@@samp{*}.

@@item
@@cindex notify output in @@sc{gdb/mi}
@@var{notify-async-output} contains supplementary information that the
client should handle (e.g., a new breakpoint information).  All notify
output is prefixed by @@samp{=}.

@@item
@@cindex console output in @@sc{gdb/mi}
@@var{console-stream-output} is output that should be displayed as is in the
console.  It is the textual response to a CLI command.  All the console
output is prefixed by @@samp{~}.

@@item
@@cindex target output in @@sc{gdb/mi}
@@var{target-stream-output} is the output produced by the target program.
All the target output is prefixed by @@samp{@@@@}.

@@item
@@cindex log output in @@sc{gdb/mi}
@@var{log-stream-output} is output text coming from @@value{GDBN}'s internals, for
instance messages that should be displayed as part of an error log.  All
the log output is prefixed by @@samp{&}.

@@item
@@cindex list output in @@sc{gdb/mi}
New @@sc{gdb/mi} commands should only output @@var{lists} containing
@@var{values}.


@@end itemize

@@xref{GDB/MI Stream Records, , @@sc{gdb/mi} Stream Records}, for more
details about the various output records.

@@node GDB/MI Simple Examples
@@subsection Simple Examples of @@sc{gdb/mi} Interaction
@@cindex @@sc{gdb/mi}, simple examples

This subsection presents several simple examples of interaction using
the @@sc{gdb/mi} interface.  In these examples, @@samp{->} means that the
following line is passed to @@sc{gdb/mi} as input, while @@samp{<-} means
the output received from @@sc{gdb/mi}.

@@subsubheading Target Stop
@@c Ummm... There is no "-stop" command. This assumes async, no?
Here's an example of stopping the inferior process:

@@example
-> -stop
<- (@@value{GDBP})
@@end example

@@noindent
and later:

@@example
<- *stop,reason="stop",address="0x123",source="a.c:123"
<- (@@value{GDBP})
@@end example

@@subsubheading Simple CLI Command

Here's an example of a simple CLI command being passed through
@@sc{gdb/mi} and on to the CLI.

@@example
-> print 1+2
<- &"print 1+2\n"
<- ~"$1 = 3\n"
<- ^done
<- (@@value{GDBP})
@@end example

@@subsubheading Command With Side Effects

@@example
-> -symbol-file xyz.exe
<- *breakpoint,nr="3",address="0x123",source="a.c:123"
<- (@@value{GDBP})
@@end example

@@subsubheading A Bad Command

Here's what happens if you pass a non-existent command:

@@example
-> -rubbish
<- ^error,msg="Undefined MI command: rubbish"
<- (@@value{GDBP})
@@end example

@@c %%%%%%%%%%%%%%%%%%%%%%%%%%%% SECTION %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@@node GDB/MI Compatibility with CLI
@@section @@sc{gdb/mi} Compatibility with CLI

@@cindex compatibility, @@sc{gdb/mi} and CLI
@@cindex @@sc{gdb/mi}, compatibility with CLI
To help users familiar with @@value{GDBN}'s existing CLI interface, @@sc{gdb/mi}
accepts existing CLI commands.  As specified by the syntax, such
commands can be directly entered into the @@sc{gdb/mi} interface and @@value{GDBN} will
respond.

This mechanism is provided as an aid to developers of @@sc{gdb/mi}
clients and not as a reliable interface into the CLI.  Since the command
is being interpreteted in an environment that assumes @@sc{gdb/mi}
behaviour, the exact output of such commands is likely to end up being
an un-supported hybrid of @@sc{gdb/mi} and CLI output.

@@c %%%%%%%%%%%%%%%%%%%%%%%%%%%% SECTION %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@@node GDB/MI Output Records
@@section @@sc{gdb/mi} Output Records

@@menu
* GDB/MI Result Records::
* GDB/MI Stream Records::
* GDB/MI Out-of-band Records::
@@end menu

@@node GDB/MI Result Records
@@subsection @@sc{gdb/mi} Result Records

@@cindex result records in @@sc{gdb/mi}
@@cindex @@sc{gdb/mi}, result records
In addition to a number of out-of-band notifications, the response to a
@@sc{gdb/mi} command includes one of the following result indications:

@@table @@code
@@findex ^done
@@item "^done" [ "," @@var{results} ]
The synchronous operation was successful, @@code{@@var{results}} are the return
values.

@@item "^running"
@@findex ^running
@@c Is this one correct?  Should it be an out-of-band notification?
The asynchronous operation was successfully started.  The target is
running.

@@item "^error" "," @@var{c-string}
@@findex ^error
The operation failed.  The @@code{@@var{c-string}} contains the corresponding
error message.
@@end table

@@node GDB/MI Stream Records
@@subsection @@sc{gdb/mi} Stream Records

@@cindex @@sc{gdb/mi}, stream records
@@cindex stream records in @@sc{gdb/mi}
@@value{GDBN} internally maintains a number of output streams: the console, the
target, and the log.  The output intended for each of these streams is
funneled through the @@sc{gdb/mi} interface using @@dfn{stream records}.

Each stream record begins with a unique @@dfn{prefix character} which
identifies its stream (@@pxref{GDB/MI Output Syntax, , @@sc{gdb/mi} Output
Syntax}).  In addition to the prefix, each stream record contains a
@@code{@@var{string-output}}.  This is either raw text (with an implicit new
line) or a quoted C string (which does not contain an implicit newline).

@@table @@code
@@item "~" @@var{string-output}
The console output stream contains text that should be displayed in the
CLI console window.  It contains the textual responses to CLI commands.

@@item "@@@@" @@var{string-output}
The target output stream contains any textual output from the running
target.

@@item "&" @@var{string-output}
The log stream contains debugging messages being produced by @@value{GDBN}'s
internals.
@@end table

@@node GDB/MI Out-of-band Records
@@subsection @@sc{gdb/mi} Out-of-band Records

@@cindex out-of-band records in @@sc{gdb/mi}
@@cindex @@sc{gdb/mi}, out-of-band records
@@dfn{Out-of-band} records are used to notify the @@sc{gdb/mi} client of
additional changes that have occurred.  Those changes can either be a
consequence of @@sc{gdb/mi} (e.g., a breakpoint modified) or a result of
target activity (e.g., target stopped).

The following is a preliminary list of possible out-of-band records.

@@table @@code
@@item "*" "stop"
@@end table


@@c %%%%%%%%%%%%%%%%%%%%%%%%%%%% SECTION %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@@node GDB/MI Command Description Format
@@section @@sc{gdb/mi} Command Description Format

The remaining sections describe blocks of commands.  Each block of
commands is laid out in a fashion similar to this section.

Note the the line breaks shown in the examples are here only for
readability.  They don't appear in the real output.
Also note that the commands with a non-available example (N.A.@@:) are
not yet implemented.

@@subheading Motivation

The motivation for this collection of commands.

@@subheading Introduction

A brief introduction to this collection of commands as a whole.

@@subheading Commands

For each command in the block, the following is described:

@@subsubheading Synopsis

@@example
 -command @@var{args}@@dots{}
@@end example

@@subsubheading @@value{GDBN} Command

The corresponding @@value{GDBN} CLI command.

@@subsubheading Result

@@subsubheading Out-of-band

@@subsubheading Notes

@@subsubheading Example


@@c %%%%%%%%%%%%%%%%%%%%%%%%%%%% SECTION %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@@node GDB/MI Breakpoint Table Commands
@@section @@sc{gdb/mi} Breakpoint table commands

@@cindex breakpoint commands for @@sc{gdb/mi}
@@cindex @@sc{gdb/mi}, breakpoint commands
This section documents @@sc{gdb/mi} commands for manipulating
breakpoints.

@@subheading The @@code{-break-after} Command
@@findex -break-after

@@subsubheading Synopsis

@@example
 -break-after @@var{number} @@var{count}
@@end example

The breakpoint number @@var{number} is not in effect until it has been
hit @@var{count} times.  To see how this is reflected in the output of
the @@samp{-break-list} command, see the description of the
@@samp{-break-list} command below.

@@subsubheading @@value{GDBN} Command

The corresponding @@value{GDBN} command is @@samp{ignore}.

@@subsubheading Example

@@smallexample
(@@value{GDBP})
-break-insert main
^done,bkpt=@@{number="1",addr="0x000100d0",file="hello.c",line="5"@@}
(@@value{GDBP})
-break-after 1 3
~
^done
(@@value{GDBP})
-break-list
^done,BreakpointTable=@@{nr_rows="1",nr_cols="6",
hdr=[@@{width="3",alignment="-1",col_name="number",colhdr="Num"@@},
@@{width="14",alignment="-1",col_name="type",colhdr="Type"@@},
@@{width="4",alignment="-1",col_name="disp",colhdr="Disp"@@},
@@{width="3",alignment="-1",col_name="enabled",colhdr="Enb"@@},
@@{width="10",alignment="-1",col_name="addr",colhdr="Address"@@},
@@{width="40",alignment="2",col_name="what",colhdr="What"@@}],
body=[bkpt=@@{number="1",type="breakpoint",disp="keep",enabled="y",
addr="0x000100d0",func="main",file="hello.c",line="5",times="0",
ignore="3"@@}]@@}
(@@value{GDBP})
@@end smallexample

@@ignore
@@subheading The @@code{-break-catch} Command
@@findex -break-catch

@@subheading The @@code{-break-commands} Command
@@findex -break-commands
@@end ignore


@@subheading The @@code{-break-condition} Command
@@findex -break-condition

@@subsubheading Synopsis

@@example
 -break-condition @@var{number} @@var{expr}
@@end example

Breakpoint @@var{number} will stop the program only if the condition in
@@var{expr} is true.  The condition becomes part of the
@@samp{-break-list} output (see the description of the @@samp{-break-list}
command below).

@@subsubheading @@value{GDBN} Command

The corresponding @@value{GDBN} command is @@samp{condition}.

@@subsubheading Example

@@smallexample
(@@value{GDBP})
-break-condition 1 1
^done
(@@value{GDBP})
-break-list
^done,BreakpointTable=@@{nr_rows="1",nr_cols="6",
hdr=[@@{width="3",alignment="-1",col_name="number",colhdr="Num"@@},
@@{width="14",alignment="-1",col_name="type",colhdr="Type"@@},
@@{width="4",alignment="-1",col_name="disp",colhdr="Disp"@@},
@@{width="3",alignment="-1",col_name="enabled",colhdr="Enb"@@},
@@{width="10",alignment="-1",col_name="addr",colhdr="Address"@@},
@@{width="40",alignment="2",col_name="what",colhdr="What"@@}],
body=[bkpt=@@{number="1",type="breakpoint",disp="keep",enabled="y",
addr="0x000100d0",func="main",file="hello.c",line="5",cond="1",
times="0",ignore="3"@@}]@@}
(@@value{GDBP})
@@end smallexample

@@subheading The @@code{-break-delete} Command
@@findex -break-delete

@@subsubheading Synopsis

@@example
 -break-delete ( @@var{breakpoint} )+
@@end example

Delete the breakpoint(s) whose number(s) are specified in the argument
list.  This is obviously reflected in the breakpoint list.

@@subsubheading @@value{GDBN} command

The corresponding @@value{GDBN} command is @@samp{delete}.

@@subsubheading Example

@@example
(@@value{GDBP})
-break-delete 1
^done
(@@value{GDBP})
-break-list
^done,BreakpointTable=@@{nr_rows="0",nr_cols="6",
hdr=[@@{width="3",alignment="-1",col_name="number",colhdr="Num"@@},
@@{width="14",alignment="-1",col_name="type",colhdr="Type"@@},
@@{width="4",alignment="-1",col_name="disp",colhdr="Disp"@@},
@@{width="3",alignment="-1",col_name="enabled",colhdr="Enb"@@},
@@{width="10",alignment="-1",col_name="addr",colhdr="Address"@@},
@@{width="40",alignment="2",col_name="what",colhdr="What"@@}],
body=[]@@}
(@@value{GDBP})
@@end example

@@subheading The @@code{-break-disable} Command
@@findex -break-disable

@@subsubheading Synopsis

@@example
 -break-disable ( @@var{breakpoint} )+
@@end example

Disable the named @@var{breakpoint}(s).  The field @@samp{enabled} in the
break list is now set to @@samp{n} for the named @@var{breakpoint}(s).

@@subsubheading @@value{GDBN} Command

The corresponding @@value{GDBN} command is @@samp{disable}.

@@subsubheading Example

@@smallexample
(@@value{GDBP})
-break-disable 2
^done
(@@value{GDBP})
-break-list
^done,BreakpointTable=@@{nr_rows="1",nr_cols="6",
hdr=[@@{width="3",alignment="-1",col_name="number",colhdr="Num"@@},
@@{width="14",alignment="-1",col_name="type",colhdr="Type"@@},
@@{width="4",alignment="-1",col_name="disp",colhdr="Disp"@@},
@@{width="3",alignment="-1",col_name="enabled",colhdr="Enb"@@},
@@{width="10",alignment="-1",col_name="addr",colhdr="Address"@@},
@@{width="40",alignment="2",col_name="what",colhdr="What"@@}],
body=[bkpt=@@{number="2",type="breakpoint",disp="keep",enabled="n",
addr="0x000100d0",func="main",file="hello.c",line="5",times="0"@@}]@@}
(@@value{GDBP})
@@end smallexample

@@subheading The @@code{-break-enable} Command
@@findex -break-enable

@@subsubheading Synopsis

@@example
 -break-enable ( @@var{breakpoint} )+
@@end example

Enable (previously disabled) @@var{breakpoint}(s).

@@subsubheading @@value{GDBN} Command

The corresponding @@value{GDBN} command is @@samp{enable}.

@@subsubheading Example

@@smallexample
(@@value{GDBP})
-break-enable 2
^done
(@@value{GDBP})
-break-list
^done,BreakpointTable=@@{nr_rows="1",nr_cols="6",
hdr=[@@{width="3",alignment="-1",col_name="number",colhdr="Num"@@},
@@{width="14",alignment="-1",col_name="type",colhdr="Type"@@},
@@{width="4",alignment="-1",col_name="disp",colhdr="Disp"@@},
@@{width="3",alignment="-1",col_name="enabled",colhdr="Enb"@@},
@@{width="10",alignment="-1",col_name="addr",colhdr="Address"@@},
@@{width="40",alignment="2",col_name="what",colhdr="What"@@}],
body=[bkpt=@@{number="2",type="breakpoint",disp="keep",enabled="y",
addr="0x000100d0",func="main",file="hello.c",line="5",times="0"@@}]@@}
(@@value{GDBP})
@@end smallexample

@@subheading The @@code{-break-info} Command
@@findex -break-info

@@subsubheading Synopsis

@@example
 -break-info @@var{breakpoint}
@@end example

@@c REDUNDANT???
Get information about a single breakpoint.

@@subsubheading @@value{GDBN} command

The corresponding @@value{GDBN} command is @@samp{info break @@var{breakpoint}}.

@@subsubheading Example
N.A.

@@subheading The @@code{-break-insert} Command
@@findex -break-insert

@@subsubheading Synopsis

@@example
 -break-insert [ -t ] [ -h ] [ -r ]
    [ -c @@var{condition} ] [ -i @@var{ignore-count} ]
    [ -p @@var{thread} ] [ @@var{line} | @@var{addr} ]
@@end example

@@noindent
If specified, @@var{line}, can be one of:

@@itemize @@bullet
@@item function
@@c @@item +offset
@@c @@item -offset
@@c @@item linenum
@@item filename:linenum
@@item filename:function
@@item *address
@@end itemize

The possible optional parameters of this command are:

@@table @@samp
@@item -t
Insert a tempoary breakpoint.
@@item -h
Insert a hardware breakpoint.
@@item -c @@var{condition}
Make the breakpoint conditional on @@var{condition}.
@@item -i @@var{ignore-count}
Initialize the @@var{ignore-count}.
@@item -r
Insert a regular breakpoint in all the functions whose names match the
given regular expression.  Other flags are not applicable to regular
expresson.
@@end table

@@subsubheading Result

The result is in the form:

@@example
 ^done,bkptno="@@var{number}",func="@@var{funcname}",
  file="@@var{filename}",line="@@var{lineno}"
@@end example

@@noindent
where @@var{number} is the @@value{GDBN} number for this breakpoint, @@var{funcname}
is the name of the function where the breakpoint was inserted,
@@var{filename} is the name of the source file which contains this
function, and @@var{lineno} is the source line number within that file.

Note: this format is open to change.
@@c An out-of-band breakpoint instead of part of the result?

@@subsubheading @@value{GDBN} Command

The corresponding @@value{GDBN} commands are @@samp{break}, @@samp{tbreak},
@@samp{hbreak}, @@samp{thbreak}, and @@samp{rbreak}.

@@subsubheading Example

@@smallexample
(@@value{GDBP})
-break-insert main
^done,bkpt=@@{number="1",addr="0x0001072c",file="recursive2.c",line="4"@@}
(@@value{GDBP})
-break-insert -t foo
^done,bkpt=@@{number="2",addr="0x00010774",file="recursive2.c",line="11"@@}
(@@value{GDBP})
-break-list
^done,BreakpointTable=@@{nr_rows="2",nr_cols="6",
hdr=[@@{width="3",alignment="-1",col_name="number",colhdr="Num"@@},
@@{width="14",alignment="-1",col_name="type",colhdr="Type"@@},
@@{width="4",alignment="-1",col_name="disp",colhdr="Disp"@@},
@@{width="3",alignment="-1",col_name="enabled",colhdr="Enb"@@},
@@{width="10",alignment="-1",col_name="addr",colhdr="Address"@@},
@@{width="40",alignment="2",col_name="what",colhdr="What"@@}],
body=[bkpt=@@{number="1",type="breakpoint",disp="keep",enabled="y",
addr="0x0001072c", func="main",file="recursive2.c",line="4",times="0"@@},
bkpt=@@{number="2",type="breakpoint",disp="del",enabled="y",
addr="0x00010774",func="foo",file="recursive2.c",line="11",times="0"@@}]@@}
(@@value{GDBP})
-break-insert -r foo.*
~int foo(int, int);
^done,bkpt=@@{number="3",addr="0x00010774",file="recursive2.c",line="11"@@}
(@@value{GDBP})
@@end smallexample

@@subheading The @@code{-break-list} Command
@@findex -break-list

@@subsubheading Synopsis

@@example
 -break-list
@@end example

Displays the list of inserted breakpoints, showing the following fields:

@@table @@samp
@@item Number
number of the breakpoint
@@item Type
type of the breakpoint: @@samp{breakpoint} or @@samp{watchpoint}
@@item Disposition
should the breakpoint be deleted or disabled when it is hit: @@samp{keep}
or @@samp{nokeep}
@@item Enabled
is the breakpoint enabled or no: @@samp{y} or @@samp{n}
@@item Address
memory location at which the breakpoint is set
@@item What
logical location of the breakpoint, expressed by function name, file
name, line number
@@item Times
number of times the breakpoint has been hit
@@end table

If there are no breakpoints or watchpoints, the @@code{BreakpointTable}
@@code{body} field is an empty list.

@@subsubheading @@value{GDBN} Command

The corresponding @@value{GDBN} command is @@samp{info break}.

@@subsubheading Example

@@smallexample
(@@value{GDBP})
-break-list
^done,BreakpointTable=@@{nr_rows="2",nr_cols="6",
hdr=[@@{width="3",alignment="-1",col_name="number",colhdr="Num"@@},
@@{width="14",alignment="-1",col_name="type",colhdr="Type"@@},
@@{width="4",alignment="-1",col_name="disp",colhdr="Disp"@@},
@@{width="3",alignment="-1",col_name="enabled",colhdr="Enb"@@},
@@{width="10",alignment="-1",col_name="addr",colhdr="Address"@@},
@@{width="40",alignment="2",col_name="what",colhdr="What"@@}],
body=[bkpt=@@{number="1",type="breakpoint",disp="keep",enabled="y",
addr="0x000100d0",func="main",file="hello.c",line="5",times="0"@@},
bkpt=@@{number="2",type="breakpoint",disp="keep",enabled="y",
addr="0x00010114",func="foo",file="hello.c",line="13",times="0"@@}]@@}
(@@value{GDBP})
@@end smallexample

Here's an example of the result when there are no breakpoints:

@@smallexample
(@@value{GDBP})
-break-list
^done,BreakpointTable=@@{nr_rows="0",nr_cols="6",
hdr=[@@{width="3",alignment="-1",col_name="number",colhdr="Num"@@},
@@{width="14",alignment="-1",col_name="type",colhdr="Type"@@},
@@{width="4",alignment="-1",col_name="disp",colhdr="Disp"@@},
@@{width="3",alignment="-1",col_name="enabled",colhdr="Enb"@@},
@@{width="10",alignment="-1",col_name="addr",colhdr="Address"@@},
@@{width="40",alignment="2",col_name="what",colhdr="What"@@}],
body=[]@@}
(@@value{GDBP})
@@end smallexample

@@subheading The @@code{-break-watch} Command
@@findex -break-watch

@@subsubheading Synopsis

@@example
 -break-watch [ -a | -r ]
@@end example

Create a watchpoint.  With the @@samp{-a} option it will create an
@@dfn{access} watchpoint, i.e. a watchpoint that triggers either on a
read from or on a write to the memory location.  With the @@samp{-r}
option, the watchpoint created is a @@dfn{read} watchpoint, i.e. it will
trigger only when the memory location is accessed for reading.  Without
either of the options, the watchpoint created is a regular watchpoint,
i.e. it will trigger when the memory location is accessed for writing.
@@xref{Set Watchpoints, , Setting watchpoints}.

Note that @@samp{-break-list} will report a single list of watchpoints and
breakpoints inserted.

@@subsubheading @@value{GDBN} Command

The corresponding @@value{GDBN} commands are @@samp{watch}, @@samp{awatch}, and
@@samp{rwatch}.

@@subsubheading Example

Setting a watchpoint on a variable in the @@code{main} function:

@@smallexample
(@@value{GDBP})
-break-watch x
^done,wpt=@@{number="2",exp="x"@@}
(@@value{GDBP})
-exec-continue
^running
^done,reason="watchpoint-trigger",wpt=@@{number="2",exp="x"@@},
value=@@{old="-268439212",new="55"@@},
frame=@@{func="main",args=[],file="recursive2.c",line="5"@@}
(@@value{GDBP})
@@end smallexample

Setting a watchpoint on a variable local to a function.  @@value{GDBN} will stop
the program execution twice: first for the variable changing value, then
for the watchpoint going out of scope.

@@smallexample
(@@value{GDBP})
-break-watch C
^done,wpt=@@{number="5",exp="C"@@}
(@@value{GDBP})
-exec-continue
^running
^done,reason="watchpoint-trigger",
wpt=@@{number="5",exp="C"@@},value=@@{old="-276895068",new="3"@@},
frame=@@{func="callee4",args=[],
file="../../../devo/gdb/testsuite/gdb.mi/basics.c",line="13"@@}
(@@value{GDBP})
-exec-continue
^running
^done,reason="watchpoint-scope",wpnum="5",
frame=@@{func="callee3",args=[@@{name="strarg",
value="0x11940 \"A string argument.\""@@}],
file="../../../devo/gdb/testsuite/gdb.mi/basics.c",line="18"@@}
(@@value{GDBP})
@@end smallexample

Listing breakpoints and watchpoints, at different points in the program
execution.  Note that once the watchpoint goes out of scope, it is
deleted.

@@smallexample
(@@value{GDBP})
-break-watch C
^done,wpt=@@{number="2",exp="C"@@}
(@@value{GDBP})
-break-list
^done,BreakpointTable=@@{nr_rows="2",nr_cols="6",
hdr=[@@{width="3",alignment="-1",col_name="number",colhdr="Num"@@},
@@{width="14",alignment="-1",col_name="type",colhdr="Type"@@},
@@{width="4",alignment="-1",col_name="disp",colhdr="Disp"@@},
@@{width="3",alignment="-1",col_name="enabled",colhdr="Enb"@@},
@@{width="10",alignment="-1",col_name="addr",colhdr="Address"@@},
@@{width="40",alignment="2",col_name="what",colhdr="What"@@}],
body=[bkpt=@@{number="1",type="breakpoint",disp="keep",enabled="y",
addr="0x00010734",func="callee4",
file="../../../devo/gdb/testsuite/gdb.mi/basics.c",line="8",times="1"@@},
bkpt=@@{number="2",type="watchpoint",disp="keep",
enabled="y",addr="",what="C",times="0"@@}]@@}
(@@value{GDBP})
-exec-continue
^running
^done,reason="watchpoint-trigger",wpt=@@{number="2",exp="C"@@},
value=@@{old="-276895068",new="3"@@},
frame=@@{func="callee4",args=[],
file="../../../devo/gdb/testsuite/gdb.mi/basics.c",line="13"@@}
(@@value{GDBP})
-break-list
^done,BreakpointTable=@@{nr_rows="2",nr_cols="6",
hdr=[@@{width="3",alignment="-1",col_name="number",colhdr="Num"@@},
@@{width="14",alignment="-1",col_name="type",colhdr="Type"@@},
@@{width="4",alignment="-1",col_name="disp",colhdr="Disp"@@},
@@{width="3",alignment="-1",col_name="enabled",colhdr="Enb"@@},
@@{width="10",alignment="-1",col_name="addr",colhdr="Address"@@},
@@{width="40",alignment="2",col_name="what",colhdr="What"@@}],
body=[bkpt=@@{number="1",type="breakpoint",disp="keep",enabled="y",
addr="0x00010734",func="callee4",
file="../../../devo/gdb/testsuite/gdb.mi/basics.c",line="8",times="1"@@},
bkpt=@@{number="2",type="watchpoint",disp="keep",
enabled="y",addr="",what="C",times="-5"@@}]@@}
(@@value{GDBP})
-exec-continue
^running
^done,reason="watchpoint-scope",wpnum="2",
frame=@@{func="callee3",args=[@@{name="strarg",
value="0x11940 \"A string argument.\""@@}],
file="../../../devo/gdb/testsuite/gdb.mi/basics.c",line="18"@@}
(@@value{GDBP})
-break-list
^done,BreakpointTable=@@{nr_rows="1",nr_cols="6",
hdr=[@@{width="3",alignment="-1",col_name="number",colhdr="Num"@@},
@@{width="14",alignment="-1",col_name="type",colhdr="Type"@@},
@@{width="4",alignment="-1",col_name="disp",colhdr="Disp"@@},
@@{width="3",alignment="-1",col_name="enabled",colhdr="Enb"@@},
@@{width="10",alignment="-1",col_name="addr",colhdr="Address"@@},
@@{width="40",alignment="2",col_name="what",colhdr="What"@@}],
body=[bkpt=@@{number="1",type="breakpoint",disp="keep",enabled="y",
addr="0x00010734",func="callee4",
file="../../../devo/gdb/testsuite/gdb.mi/basics.c",line="8",times="1"@@}]@@}
(@@value{GDBP})
@@end smallexample

@@c %%%%%%%%%%%%%%%%%%%%%%%%%%%% SECTION %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@@node GDB/MI Data Manipulation
@@section @@sc{gdb/mi} Data Manipulation

@@cindex data manipulation, in @@sc{gdb/mi}
@@cindex @@sc{gdb/mi}, data manipulation
This section describes the @@sc{gdb/mi} commands that manipulate data:
examine memory and registers, evaluate expressions, etc.

@@c REMOVED FROM THE INTERFACE.
@@c @@subheading -data-assign
@@c Change the value of a program variable. Plenty of side effects.
@@c @@subsubheading GDB command
@@c set variable
@@c @@subsubheading Example
@@c N.A.

@@subheading The @@code{-data-disassemble} Command
@@findex -data-disassemble

@@subsubheading Synopsis

@@example
 -data-disassemble
    [ -s @@var{start-addr} -e @@var{end-addr} ]
  | [ -f @@var{filename} -l @@var{linenum} [ -n @@var{lines} ] ]
  -- @@var{mode}
@@end example

@@noindent
Where:

@@table @@samp
@@item @@var{start-addr}
is the beginning address (or @@code{$pc})
@@item @@var{end-addr}
is the end address
@@item @@var{filename}
is the name of the file to disassemble
@@item @@var{linenum}
is the line number to disassemble around
@@item @@var{lines}
is the the number of disassembly lines to be produced.  If it is -1,
the whole function will be disassembled, in case no @@var{end-addr} is
specified.  If @@var{end-addr} is specified as a non-zero value, and
@@var{lines} is lower than the number of disassembly lines between
@@var{start-addr} and @@var{end-addr}, only @@var{lines} lines are
displayed; if @@var{lines} is higher than the number of lines between
@@var{start-addr} and @@var{end-addr}, only the lines up to @@var{end-addr}
are displayed.
@@item @@var{mode}
is either 0 (meaning only disassembly) or 1 (meaning mixed source and
disassembly).
@@end table

@@subsubheading Result

The output for each instruction is composed of four fields:

@@itemize @@bullet
@@item Address
@@item Func-name
@@item Offset
@@item Instruction
@@end itemize

Note that whatever included in the instruction field, is not manipulated
directely by @@sc{gdb/mi}, i.e. it is not possible to adjust its format.

@@subsubheading @@value{GDBN} Command

There's no direct mapping from this command to the CLI.

@@subsubheading Example

Disassemble from the current value of @@code{$pc} to @@code{$pc + 20}:

@@smallexample
(@@value{GDBP})
-data-disassemble -s $pc -e "$pc + 20" -- 0
^done,
asm_insns=[
@@{address="0x000107c0",func-name="main",offset="4",
inst="mov  2, %o0"@@},
@@{address="0x000107c4",func-name="main",offset="8",
inst="sethi  %hi(0x11800), %o2"@@},
@@{address="0x000107c8",func-name="main",offset="12",
inst="or  %o2, 0x140, %o1\t! 0x11940 <_lib_version+8>"@@},
@@{address="0x000107cc",func-name="main",offset="16",
inst="sethi  %hi(0x11800), %o2"@@},
@@{address="0x000107d0",func-name="main",offset="20",
inst="or  %o2, 0x168, %o4\t! 0x11968 <_lib_version+48>"@@}]
(@@value{GDBP})
@@end smallexample

Disassemble the whole @@code{main} function.  Line 32 is part of
@@code{main}.

@@smallexample
-data-disassemble -f basics.c -l 32 -- 0
^done,asm_insns=[
@@{address="0x000107bc",func-name="main",offset="0",
inst="save  %sp, -112, %sp"@@},
@@{address="0x000107c0",func-name="main",offset="4",
inst="mov   2, %o0"@@},
@@{address="0x000107c4",func-name="main",offset="8",
inst="sethi %hi(0x11800), %o2"@@},
[@@dots{}]
@@{address="0x0001081c",func-name="main",offset="96",inst="ret "@@},
@@{address="0x00010820",func-name="main",offset="100",inst="restore "@@}]
(@@value{GDBP})
@@end smallexample

Disassemble 3 instructions from the start of @@code{main}:

@@smallexample
(@@value{GDBP})
-data-disassemble -f basics.c -l 32 -n 3 -- 0
^done,asm_insns=[
@@{address="0x000107bc",func-name="main",offset="0",
inst="save  %sp, -112, %sp"@@},
@@{address="0x000107c0",func-name="main",offset="4",
inst="mov  2, %o0"@@},
@@{address="0x000107c4",func-name="main",offset="8",
inst="sethi  %hi(0x11800), %o2"@@}]
(@@value{GDBP})
@@end smallexample

Disassemble 3 instructions from the start of @@code{main} in mixed mode:

@@smallexample
(@@value{GDBP})
-data-disassemble -f basics.c -l 32 -n 3 -- 1
^done,asm_insns=[
src_and_asm_line=@@{line="31",
file="/kwikemart/marge/ezannoni/flathead-dev/devo/gdb/ \
  testsuite/gdb.mi/basics.c",line_asm_insn=[
@@{address="0x000107bc",func-name="main",offset="0",
inst="save  %sp, -112, %sp"@@}]@@},
src_and_asm_line=@@{line="32",
file="/kwikemart/marge/ezannoni/flathead-dev/devo/gdb/ \
  testsuite/gdb.mi/basics.c",line_asm_insn=[
@@{address="0x000107c0",func-name="main",offset="4",
inst="mov  2, %o0"@@},
@@{address="0x000107c4",func-name="main",offset="8",
inst="sethi  %hi(0x11800), %o2"@@}]@@}]
(@@value{GDBP})
@@end smallexample


@@subheading The @@code{-data-evaluate-expression} Command
@@findex -data-evaluate-expression

@@subsubheading Synopsis

@@example
 -data-evaluate-expression @@var{expr}
@@end example

Evaluate @@var{expr} as an expression.  The expression could contain an
inferior function call.  The function call will execute synchronously.
If the expression contains spaces, it must be enclosed in double quotes.

@@subsubheading @@value{GDBN} Command

The corresponding @@value{GDBN} commands are @@samp{print}, @@samp{output}, and
@@samp{call}.  In @@code{gdbtk} only, there's a corresponding
@@samp{gdb_eval} command.

@@subsubheading Example

In the following example, the numbers that precede the commands are the
@@dfn{tokens} described in @@ref{GDB/MI Command Syntax, ,@@sc{gdb/mi}
Command Syntax}.  Notice how @@sc{gdb/mi} returns the same tokens in its
output.

@@smallexample
211-data-evaluate-expression A
211^done,value="1"
(@@value{GDBP})
311-data-evaluate-expression &A
311^done,value="0xefffeb7c"
(@@value{GDBP})
411-data-evaluate-expression A+3
411^done,value="4"
(@@value{GDBP})
511-data-evaluate-expression "A + 3"
511^done,value="4"
(@@value{GDBP})
@@end smallexample


@@subheading The @@code{-data-list-changed-registers} Command
@@findex -data-list-changed-registers

@@subsubheading Synopsis

@@example
 -data-list-changed-registers
@@end example

Display a list of the registers that have changed.

@@subsubheading @@value{GDBN} Command

@@value{GDBN} doesn't have a direct analog for this command; @@code{gdbtk}
has the corresponding command @@samp{gdb_changed_register_list}.

@@subsubheading Example

On a PPC MBX board:

@@smallexample
(@@value{GDBP})
-exec-continue
^running

(@@value{GDBP})
*stopped,reason="breakpoint-hit",bkptno="1",frame=@@{func="main",
args=[],file="try.c",line="5"@@}
(@@value{GDBP})
-data-list-changed-registers
^done,changed-registers=["0","1","2","4","5","6","7","8","9",
"10","11","13","14","15","16","17","18","19","20","21","22","23",
"24","25","26","27","28","30","31","64","65","66","67","69"]
(@@value{GDBP})
@@end smallexample


@@subheading The @@code{-data-list-register-names} Command
@@findex -data-list-register-names

@@subsubheading Synopsis

@@example
 -data-list-register-names [ ( @@var{regno} )+ ]
@@end example

Show a list of register names for the current target.  If no arguments
are given, it shows a list of the names of all the registers.  If
integer numbers are given as arguments, it will print a list of the
names of the registers corresponding to the arguments.  To ensure
consistency between a register name and its number, the output list may
include empty register names.

@@subsubheading @@value{GDBN} Command

@@value{GDBN} does not have a command which corresponds to
@@samp{-data-list-register-names}.  In @@code{gdbtk} there is a
corresponding command @@samp{gdb_regnames}.

@@subsubheading Example

For the PPC MBX board:
@@smallexample
(@@value{GDBP})
-data-list-register-names
^done,register-names=["r0","r1","r2","r3","r4","r5","r6","r7",
"r8","r9","r10","r11","r12","r13","r14","r15","r16","r17","r18",
"r19","r20","r21","r22","r23","r24","r25","r26","r27","r28","r29",
"r30","r31","f0","f1","f2","f3","f4","f5","f6","f7","f8","f9",
"f10","f11","f12","f13","f14","f15","f16","f17","f18","f19","f20",
"f21","f22","f23","f24","f25","f26","f27","f28","f29","f30","f31",
"", "pc","ps","cr","lr","ctr","xer"]
(@@value{GDBP})
-data-list-register-names 1 2 3
^done,register-names=["r1","r2","r3"]
(@@value{GDBP})
@@end smallexample

@@subheading The @@code{-data-list-register-values} Command
@@findex -data-list-register-values

@@subsubheading Synopsis

@@example
 -data-list-register-values @@var{fmt} [ ( @@var{regno} )*]
@@end example

Display the registers' contents.  @@var{fmt} is the format according to
which the registers' contents are to be returned, followed by an optional
list of numbers specifying the registers to display.  A missing list of
numbers indicates that the contents of all the registers must be returned.

Allowed formats for @@var{fmt} are:

@@table @@code
@@item x
Hexadecimal
@@item o
Octal
@@item t
Binary
@@item d
Decimal
@@item r
Raw
@@item N
Natural
@@end table

@@subsubheading @@value{GDBN} Command

The corresponding @@value{GDBN} commands are @@samp{info reg}, @@samp{info
all-reg}, and (in @@code{gdbtk}) @@samp{gdb_fetch_registers}.

@@subsubheading Example

For a PPC MBX board (note: line breaks are for readability only, they
don't appear in the actual output):

@@smallexample
(@@value{GDBP})
-data-list-register-values r 64 65
^done,register-values=[@@{number="64",value="0xfe00a300"@@},
@@{number="65",value="0x00029002"@@}]
(@@value{GDBP})
-data-list-register-values x
^done,register-values=[@@{number="0",value="0xfe0043c8"@@},
@@{number="1",value="0x3fff88"@@},@@{number="2",value="0xfffffffe"@@},
@@{number="3",value="0x0"@@},@@{number="4",value="0xa"@@},
@@{number="5",value="0x3fff68"@@},@@{number="6",value="0x3fff58"@@},
@@{number="7",value="0xfe011e98"@@},@@{number="8",value="0x2"@@},
@@{number="9",value="0xfa202820"@@},@@{number="10",value="0xfa202808"@@},
@@{number="11",value="0x1"@@},@@{number="12",value="0x0"@@},
@@{number="13",value="0x4544"@@},@@{number="14",value="0xffdfffff"@@},
@@{number="15",value="0xffffffff"@@},@@{number="16",value="0xfffffeff"@@},
@@{number="17",value="0xefffffed"@@},@@{number="18",value="0xfffffffe"@@},
@@{number="19",value="0xffffffff"@@},@@{number="20",value="0xffffffff"@@},
@@{number="21",value="0xffffffff"@@},@@{number="22",value="0xfffffff7"@@},
@@{number="23",value="0xffffffff"@@},@@{number="24",value="0xffffffff"@@},
@@{number="25",value="0xffffffff"@@},@@{number="26",value="0xfffffffb"@@},
@@{number="27",value="0xffffffff"@@},@@{number="28",value="0xf7bfffff"@@},
@@{number="29",value="0x0"@@},@@{number="30",value="0xfe010000"@@},
@@{number="31",value="0x0"@@},@@{number="32",value="0x0"@@},
@@{number="33",value="0x0"@@},@@{number="34",value="0x0"@@},
@@{number="35",value="0x0"@@},@@{number="36",value="0x0"@@},
@@{number="37",value="0x0"@@},@@{number="38",value="0x0"@@},
@@{number="39",value="0x0"@@},@@{number="40",value="0x0"@@},
@@{number="41",value="0x0"@@},@@{number="42",value="0x0"@@},
@@{number="43",value="0x0"@@},@@{number="44",value="0x0"@@},
@@{number="45",value="0x0"@@},@@{number="46",value="0x0"@@},
@@{number="47",value="0x0"@@},@@{number="48",value="0x0"@@},
@@{number="49",value="0x0"@@},@@{number="50",value="0x0"@@},
@@{number="51",value="0x0"@@},@@{number="52",value="0x0"@@},
@@{number="53",value="0x0"@@},@@{number="54",value="0x0"@@},
@@{number="55",value="0x0"@@},@@{number="56",value="0x0"@@},
@@{number="57",value="0x0"@@},@@{number="58",value="0x0"@@},
@@{number="59",value="0x0"@@},@@{number="60",value="0x0"@@},
@@{number="61",value="0x0"@@},@@{number="62",value="0x0"@@},
@@{number="63",value="0x0"@@},@@{number="64",value="0xfe00a300"@@},
@@{number="65",value="0x29002"@@},@@{number="66",value="0x202f04b5"@@},
@@{number="67",value="0xfe0043b0"@@},@@{number="68",value="0xfe00b3e4"@@},
@@{number="69",value="0x20002b03"@@}]
(@@value{GDBP})
@@end smallexample


@@subheading The @@code{-data-read-memory} Command
@@findex -data-read-memory

@@subsubheading Synopsis

@@example
 -data-read-memory [ -o @@var{byte-offset} ]
   @@var{address} @@var{word-format} @@var{word-size}
   @@var{nr-rows} @@var{nr-cols} [ @@var{aschar} ]
@@end example

@@noindent
where:

@@table @@samp
@@item @@var{address}
An expression specifying the address of the first memory word to be
read.  Complex expressions containing embedded white space should be
quoted using the C convention.

@@item @@var{word-format}
The format to be used to print the memory words.  The notation is the
same as for @@value{GDBN}'s @@code{print} command (@@pxref{Output Formats,
,Output formats}).

@@item @@var{word-size}
The size of each memory word in bytes.

@@item @@var{nr-rows}
The number of rows in the output table.

@@item @@var{nr-cols}
The number of columns in the output table.

@@item @@var{aschar}
If present, indicates that each row should include an @@sc{ascii} dump.  The
value of @@var{aschar} is used as a padding character when a byte is not a
member of the printable @@sc{ascii} character set (printable @@sc{ascii}
characters are those whose code is between 32 and 126, inclusively).

@@item @@var{byte-offset}
An offset to add to the @@var{address} before fetching memory.
@@end table

This command displays memory contents as a table of @@var{nr-rows} by
@@var{nr-cols} words, each word being @@var{word-size} bytes.  In total,
@@code{@@var{nr-rows} * @@var{nr-cols} * @@var{word-size}} bytes are read
(returned as @@samp{total-bytes}).  Should less than the requested number
of bytes be returned by the target, the missing words are identified
using @@samp{N/A}.  The number of bytes read from the target is returned
in @@samp{nr-bytes} and the starting address used to read memory in
@@samp{addr}.

The address of the next/previous row or page is available in
@@samp{next-row} and @@samp{prev-row}, @@samp{next-page} and
@@samp{prev-page}.

@@subsubheading @@value{GDBN} Command

The corresponding @@value{GDBN} command is @@samp{x}.  @@code{gdbtk} has
@@samp{gdb_get_mem} memory read command.

@@subsubheading Example

Read six bytes of memory starting at @@code{bytes+6} but then offset by
@@code{-6} bytes.  Format as three rows of two columns.  One byte per
word.  Display each word in hex.

@@smallexample
(@@value{GDBP})
9-data-read-memory -o -6 -- bytes+6 x 1 3 2
9^done,addr="0x00001390",nr-bytes="6",total-bytes="6",
next-row="0x00001396",prev-row="0x0000138e",next-page="0x00001396",
prev-page="0x0000138a",memory=[
@@{addr="0x00001390",data=["0x00","0x01"]@@},
@@{addr="0x00001392",data=["0x02","0x03"]@@},
@@{addr="0x00001394",data=["0x04","0x05"]@@}]
(@@value{GDBP})
@@end smallexample

Read two bytes of memory starting at address @@code{shorts + 64} and
display as a single word formatted in decimal.

@@smallexample
(@@value{GDBP})
5-data-read-memory shorts+64 d 2 1 1
5^done,addr="0x00001510",nr-bytes="2",total-bytes="2",
next-row="0x00001512",prev-row="0x0000150e",
next-page="0x00001512",prev-page="0x0000150e",memory=[
@@{addr="0x00001510",data=["128"]@@}]
(@@value{GDBP})
@@end smallexample

Read thirty two bytes of memory starting at @@code{bytes+16} and format
as eight rows of four columns.  Include a string encoding with @@samp{x}
used as the non-printable character.

@@smallexample
(@@value{GDBP})
4-data-read-memory bytes+16 x 1 8 4 x
4^done,addr="0x000013a0",nr-bytes="32",total-bytes="32",
next-row="0x000013c0",prev-row="0x0000139c",
next-page="0x000013c0",prev-page="0x00001380",memory=[
@@{addr="0x000013a0",data=["0x10","0x11","0x12","0x13"],ascii="xxxx"@@},
@@{addr="0x000013a4",data=["0x14","0x15","0x16","0x17"],ascii="xxxx"@@},
@@{addr="0x000013a8",data=["0x18","0x19","0x1a","0x1b"],ascii="xxxx"@@},
@@{addr="0x000013ac",data=["0x1c","0x1d","0x1e","0x1f"],ascii="xxxx"@@},
@@{addr="0x000013b0",data=["0x20","0x21","0x22","0x23"],ascii=" !\"#"@@},
@@{addr="0x000013b4",data=["0x24","0x25","0x26","0x27"],ascii="$%&'"@@},
@@{addr="0x000013b8",data=["0x28","0x29","0x2a","0x2b"],ascii="()*+"@@},
@@{addr="0x000013bc",data=["0x2c","0x2d","0x2e","0x2f"],ascii=",-./"@@}]
(@@value{GDBP})
@@end smallexample

@@subheading The @@code{-display-delete} Command
@@findex -display-delete

@@subsubheading Synopsis

@@example
 -display-delete @@var{number}
@@end example

Delete the display @@var{number}.

@@subsubheading @@value{GDBN} Command

The corresponding @@value{GDBN} command is @@samp{delete display}.

@@subsubheading Example
N.A.


@@subheading The @@code{-display-disable} Command
@@findex -display-disable

@@subsubheading Synopsis

@@example
 -display-disable @@var{number}
@@end example

Disable display @@var{number}.

@@subsubheading @@value{GDBN} Command

The corresponding @@value{GDBN} command is @@samp{disable display}.

@@subsubheading Example
N.A.


@@subheading The @@code{-display-enable} Command
@@findex -display-enable

@@subsubheading Synopsis

@@example
 -display-enable @@var{number}
@@end example

Enable display @@var{number}.

@@subsubheading @@value{GDBN} Command

The corresponding @@value{GDBN} command is @@samp{enable display}.

@@subsubheading Example
N.A.


@@subheading The @@code{-display-insert} Command
@@findex -display-insert

@@subsubheading Synopsis

@@example
 -display-insert @@var{expression}
@@end example

Display @@var{expression} every time the program stops.

@@subsubheading @@value{GDBN} Command

The corresponding @@value{GDBN} command is @@samp{display}.

@@subsubheading Example
N.A.


@@subheading The @@code{-display-list} Command
@@findex -display-list

@@subsubheading Synopsis

@@example
 -display-list
@@end example

List the displays.  Do not show the current values.

@@subsubheading @@value{GDBN} Command

The corresponding @@value{GDBN} command is @@samp{info display}.

@@subsubheading Example
N.A.


@@subheading The @@code{-environment-cd} Command
@@findex -environment-cd

@@subsubheading Synopsis

@@example
 -environment-cd @@var{pathdir}
@@end example

Set @@value{GDBN}'s working directory.

@@subsubheading @@value{GDBN} Command

The corresponding @@value{GDBN} command is @@samp{cd}.

@@subsubheading Example

@@smallexample
(@@value{GDBP})
-environment-cd /kwikemart/marge/ezannoni/flathead-dev/devo/gdb
^done
(@@value{GDBP})
@@end smallexample


@@subheading The @@code{-environment-directory} Command
@@findex -environment-directory

@@subsubheading Synopsis

@@example
 -environment-directory [ -r ] [ @@var{pathdir} ]+
@@end example

Add directories @@var{pathdir} to beginning of search path for source files.
If the @@samp{-r} option is used, the search path is reset to the default
search path.  If directories @@var{pathdir} are supplied in addition to the 
@@samp{-r} option, the search path is first reset and then addition
occurs as normal.
Multiple directories may be specified, separated by blanks.  Specifying 
multiple directories in a single command
results in the directories added to the beginning of the
search path in the same order they were presented in the command.
If blanks are needed as
part of a directory name, double-quotes should be used around
the name.  In the command output, the path will show up separated
by the system directory-separator character.  The directory-seperator 
character must not be used
in any directory name.
If no directories are specified, the current search path is displayed.

@@subsubheading @@value{GDBN} Command

The corresponding @@value{GDBN} command is @@samp{dir}.

@@subsubheading Example

@@smallexample
(@@value{GDBP})
-environment-directory /kwikemart/marge/ezannoni/flathead-dev/devo/gdb
^done,source-path="/kwikemart/marge/ezannoni/flathead-dev/devo/gdb:$cdir:$cwd"
(@@value{GDBP})
-environment-directory ""
^done,source-path="/kwikemart/marge/ezannoni/flathead-dev/devo/gdb:$cdir:$cwd"
(@@value{GDBP})
-environment-directory -r /home/jjohnstn/src/gdb /usr/src
^done,source-path="/home/jjohnstn/src/gdb:/usr/src:$cdir:$cwd"
(@@value{GDBP})
-environment-directory -r
^done,source-path="$cdir:$cwd"
(@@value{GDBP})
@@end smallexample


@@subheading The @@code{-environment-path} Command
@@findex -environment-path

@@subsubheading Synopsis

@@example
 -environment-path [ -r ] [ @@var{pathdir} ]+
@@end example

Add directories @@var{pathdir} to beginning of search path for object files.
If the @@samp{-r} option is used, the search path is reset to the original
search path that existed at gdb start-up.  If directories @@var{pathdir} are 
supplied in addition to the 
@@samp{-r} option, the search path is first reset and then addition
occurs as normal.
Multiple directories may be specified, separated by blanks.  Specifying 
multiple directories in a single command
results in the directories added to the beginning of the
search path in the same order they were presented in the command.
If blanks are needed as
part of a directory name, double-quotes should be used around
the name.  In the command output, the path will show up separated
by the system directory-separator character.  The directory-seperator 
character must not be used
in any directory name.
If no directories are specified, the current path is displayed.


@@subsubheading @@value{GDBN} Command

The corresponding @@value{GDBN} command is @@samp{path}.

@@subsubheading Example

@@smallexample
(@@value{GDBP})
-environment-path 
^done,path="/usr/bin"
(@@value{GDBP})
-environment-path /kwikemart/marge/ezannoni/flathead-dev/ppc-eabi/gdb /bin
^done,path="/kwikemart/marge/ezannoni/flathead-dev/ppc-eabi/gdb:/bin:/usr/bin"
(@@value{GDBP})
-environment-path -r /usr/local/bin
^done,path="/usr/local/bin:/usr/bin"
(@@value{GDBP})
@@end smallexample


@@subheading The @@code{-environment-pwd} Command
@@findex -environment-pwd

@@subsubheading Synopsis

@@example
 -environment-pwd
@@end example

Show the current working directory.

@@subsubheading @@value{GDBN} command

The corresponding @@value{GDBN} command is @@samp{pwd}.

@@subsubheading Example

@@smallexample
(@@value{GDBP})
-environment-pwd
^done,cwd="/kwikemart/marge/ezannoni/flathead-dev/devo/gdb"
(@@value{GDBP})
@@end smallexample

@@c %%%%%%%%%%%%%%%%%%%%%%%%%%%% SECTION %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@@node GDB/MI Program Control
@@section @@sc{gdb/mi} Program control

@@subsubheading Program termination

As a result of execution, the inferior program can run to completion, if
it doesn't encounter any breakpoints.  In this case the output will
include an exit code, if the program has exited exceptionally.

@@subsubheading Examples

@@noindent
Program exited normally:

@@smallexample
(@@value{GDBP})
-exec-run
^running
(@@value{GDBP})
x = 55
*stopped,reason="exited-normally"
(@@value{GDBP})
@@end smallexample

@@noindent
Program exited exceptionally:

@@smallexample
(@@value{GDBP})
-exec-run
^running
(@@value{GDBP})
x = 55
*stopped,reason="exited",exit-code="01"
(@@value{GDBP})
@@end smallexample

Another way the program can terminate is if it receives a signal such as
@@code{SIGINT}.  In this case, @@sc{gdb/mi} displays this:

@@smallexample
(@@value{GDBP})
*stopped,reason="exited-signalled",signal-name="SIGINT",
signal-meaning="Interrupt"
@@end smallexample


@@subheading The @@code{-exec-abort} Command
@@findex -exec-abort

@@subsubheading Synopsis

@@example
 -exec-abort
@@end example

Kill the inferior running program.

@@subsubheading @@value{GDBN} Command

The corresponding @@value{GDBN} command is @@samp{kill}.

@@subsubheading Example
N.A.


@@subheading The @@code{-exec-arguments} Command
@@findex -exec-arguments

@@subsubheading Synopsis

@@example
 -exec-arguments @@var{args}
@@end example

Set the inferior program arguments, to be used in the next
@@samp{-exec-run}.

@@subsubheading @@value{GDBN} Command

The corresponding @@value{GDBN} command is @@samp{set args}.

@@subsubheading Example

@@c FIXME!
Don't have one around.


@@subheading The @@code{-exec-continue} Command
@@findex -exec-continue

@@subsubheading Synopsis

@@example
 -exec-continue
@@end example

Asynchronous command.  Resumes the execution of the inferior program
until a breakpoint is encountered, or until the inferior exits.

@@subsubheading @@value{GDBN} Command

The corresponding @@value{GDBN} corresponding is @@samp{continue}.

@@subsubheading Example

@@smallexample
-exec-continue
^running
(@@value{GDBP})
@@@@Hello world
*stopped,reason="breakpoint-hit",bkptno="2",frame=@@{func="foo",args=[],
file="hello.c",line="13"@@}
(@@value{GDBP})
@@end smallexample


@@subheading The @@code{-exec-finish} Command
@@findex -exec-finish

@@subsubheading Synopsis

@@example
 -exec-finish
@@end example

Asynchronous command.  Resumes the execution of the inferior program
until the current function is exited.  Displays the results returned by
the function.

@@subsubheading @@value{GDBN} Command

The corresponding @@value{GDBN} command is @@samp{finish}.

@@subsubheading Example

Function returning @@code{void}.

@@smallexample
-exec-finish
^running
(@@value{GDBP})
@@@@hello from foo
*stopped,reason="function-finished",frame=@@{func="main",args=[],
file="hello.c",line="7"@@}
(@@value{GDBP})
@@end smallexample

Function returning other than @@code{void}.  The name of the internal
@@value{GDBN} variable storing the result is printed, together with the
value itself.

@@smallexample
-exec-finish
^running
(@@value{GDBP})
*stopped,reason="function-finished",frame=@@{addr="0x000107b0",func="foo",
args=[@@{name="a",value="1"],@@{name="b",value="9"@@}@@},
file="recursive2.c",line="14"@@},
gdb-result-var="$1",return-value="0"
(@@value{GDBP})
@@end smallexample


@@subheading The @@code{-exec-interrupt} Command
@@findex -exec-interrupt

@@subsubheading Synopsis

@@example
 -exec-interrupt
@@end example

Asynchronous command.  Interrupts the background execution of the target.
Note how the token associated with the stop message is the one for the
execution command that has been interrupted.  The token for the interrupt
itself only appears in the @@samp{^done} output.  If the user is trying to
interrupt a non-running program, an error message will be printed.

@@subsubheading @@value{GDBN} Command

The corresponding @@value{GDBN} command is @@samp{interrupt}.

@@subsubheading Example

@@smallexample
(@@value{GDBP})
111-exec-continue
111^running

(@@value{GDBP})
222-exec-interrupt
222^done
(@@value{GDBP})
111*stopped,signal-name="SIGINT",signal-meaning="Interrupt",
frame=@@{addr="0x00010140",func="foo",args=[],file="try.c",line="13"@@}
(@@value{GDBP})

(@@value{GDBP})
-exec-interrupt
^error,msg="mi_cmd_exec_interrupt: Inferior not executing."
(@@value{GDBP})
@@end smallexample


@@subheading The @@code{-exec-next} Command
@@findex -exec-next

@@subsubheading Synopsis

@@example
 -exec-next
@@end example

Asynchronous command.  Resumes execution of the inferior program, stopping
when the beginning of the next source line is reached.

@@subsubheading @@value{GDBN} Command

The corresponding @@value{GDBN} command is @@samp{next}.

@@subsubheading Example

@@smallexample
-exec-next
^running
(@@value{GDBP})
*stopped,reason="end-stepping-range",line="8",file="hello.c"
(@@value{GDBP})
@@end smallexample


@@subheading The @@code{-exec-next-instruction} Command
@@findex -exec-next-instruction

@@subsubheading Synopsis

@@example
 -exec-next-instruction
@@end example

Asynchronous command.  Executes one machine instruction.  If the
instruction is a function call continues until the function returns.  If
the program stops at an instruction in the middle of a source line, the
address will be printed as well.

@@subsubheading @@value{GDBN} Command

The corresponding @@value{GDBN} command is @@samp{nexti}.

@@subsubheading Example

@@smallexample
(@@value{GDBP})
-exec-next-instruction
^running

(@@value{GDBP})
*stopped,reason="end-stepping-range",
addr="0x000100d4",line="5",file="hello.c"
(@@value{GDBP})
@@end smallexample


@@subheading The @@code{-exec-return} Command
@@findex -exec-return

@@subsubheading Synopsis

@@example
 -exec-return
@@end example

Makes current function return immediately.  Doesn't execute the inferior.
Displays the new current frame.

@@subsubheading @@value{GDBN} Command

The corresponding @@value{GDBN} command is @@samp{return}.

@@subsubheading Example

@@smallexample
(@@value{GDBP})
200-break-insert callee4
200^done,bkpt=@@{number="1",addr="0x00010734",
file="../../../devo/gdb/testsuite/gdb.mi/basics.c",line="8"@@}
(@@value{GDBP})
000-exec-run
000^running
(@@value{GDBP})
000*stopped,reason="breakpoint-hit",bkptno="1",
frame=@@{func="callee4",args=[],
file="../../../devo/gdb/testsuite/gdb.mi/basics.c",line="8"@@}
(@@value{GDBP})
205-break-delete
205^done
(@@value{GDBP})
111-exec-return
111^done,frame=@@{level="0",func="callee3",
args=[@@{name="strarg",
value="0x11940 \"A string argument.\""@@}],
file="../../../devo/gdb/testsuite/gdb.mi/basics.c",line="18"@@}
(@@value{GDBP})
@@end smallexample


@@subheading The @@code{-exec-run} Command
@@findex -exec-run

@@subsubheading Synopsis

@@example
 -exec-run
@@end example

Asynchronous command.  Starts execution of the inferior from the
beginning.  The inferior executes until either a breakpoint is
encountered or the program exits.

@@subsubheading @@value{GDBN} Command

The corresponding @@value{GDBN} command is @@samp{run}.

@@subsubheading Example

@@smallexample
(@@value{GDBP})
-break-insert main
^done,bkpt=@@{number="1",addr="0x0001072c",file="recursive2.c",line="4"@@}
(@@value{GDBP})
-exec-run
^running
(@@value{GDBP})
*stopped,reason="breakpoint-hit",bkptno="1",
frame=@@{func="main",args=[],file="recursive2.c",line="4"@@}
(@@value{GDBP})
@@end smallexample


@@subheading The @@code{-exec-show-arguments} Command
@@findex -exec-show-arguments

@@subsubheading Synopsis

@@example
 -exec-show-arguments
@@end example

Print the arguments of the program.

@@subsubheading @@value{GDBN} Command

The corresponding @@value{GDBN} command is @@samp{show args}.

@@subsubheading Example
N.A.

@@c @@subheading -exec-signal

@@subheading The @@code{-exec-step} Command
@@findex -exec-step

@@subsubheading Synopsis

@@example
 -exec-step
@@end example

Asynchronous command.  Resumes execution of the inferior program, stopping
when the beginning of the next source line is reached, if the next
source line is not a function call.  If it is, stop at the first
instruction of the called function.

@@subsubheading @@value{GDBN} Command

The corresponding @@value{GDBN} command is @@samp{step}.

@@subsubheading Example

Stepping into a function:

@@smallexample
-exec-step
^running
(@@value{GDBP})
*stopped,reason="end-stepping-range",
frame=@@{func="foo",args=[@@{name="a",value="10"@@},
@@{name="b",value="0"@@}],file="recursive2.c",line="11"@@}
(@@value{GDBP})
@@end smallexample

Regular stepping:

@@smallexample
-exec-step
^running
(@@value{GDBP})
*stopped,reason="end-stepping-range",line="14",file="recursive2.c"
(@@value{GDBP})
@@end smallexample


@@subheading The @@code{-exec-step-instruction} Command
@@findex -exec-step-instruction

@@subsubheading Synopsis

@@example
 -exec-step-instruction
@@end example

Asynchronous command.  Resumes the inferior which executes one machine
instruction.  The output, once @@value{GDBN} has stopped, will vary depending on
whether we have stopped in the middle of a source line or not.  In the
former case, the address at which the program stopped will be printed as
well.

@@subsubheading @@value{GDBN} Command

The corresponding @@value{GDBN} command is @@samp{stepi}.

@@subsubheading Example

@@smallexample
(@@value{GDBP})
-exec-step-instruction
^running

(@@value{GDBP})
*stopped,reason="end-stepping-range",
frame=@@{func="foo",args=[],file="try.c",line="10"@@}
(@@value{GDBP})
-exec-step-instruction
^running

(@@value{GDBP})
*stopped,reason="end-stepping-range",
frame=@@{addr="0x000100f4",func="foo",args=[],file="try.c",line="10"@@}
(@@value{GDBP})
@@end smallexample


@@subheading The @@code{-exec-until} Command
@@findex -exec-until

@@subsubheading Synopsis

@@example
 -exec-until [ @@var{location} ]
@@end example

Asynchronous command.  Executes the inferior until the @@var{location}
specified in the argument is reached.  If there is no argument, the inferior
executes until a source line greater than the current one is reached.
The reason for stopping in this case will be @@samp{location-reached}.

@@subsubheading @@value{GDBN} Command

The corresponding @@value{GDBN} command is @@samp{until}.

@@subsubheading Example

@@smallexample
(@@value{GDBP})
-exec-until recursive2.c:6
^running
(@@value{GDBP})
x = 55
*stopped,reason="location-reached",frame=@@{func="main",args=[],
file="recursive2.c",line="6"@@}
(@@value{GDBP})
@@end smallexample

@@ignore
@@subheading -file-clear
Is this going away????
@@end ignore


@@subheading The @@code{-file-exec-and-symbols} Command
@@findex -file-exec-and-symbols

@@subsubheading Synopsis

@@example
 -file-exec-and-symbols @@var{file}
@@end example

Specify the executable file to be debugged.  This file is the one from
which the symbol table is also read.  If no file is specified, the
command clears the executable and symbol information.  If breakpoints
are set when using this command with no arguments, @@value{GDBN} will produce
error messages.  Otherwise, no output is produced, except a completion
notification.

@@subsubheading @@value{GDBN} Command

The corresponding @@value{GDBN} command is @@samp{file}.

@@subsubheading Example

@@smallexample
(@@value{GDBP})
-file-exec-and-symbols /kwikemart/marge/ezannoni/TRUNK/mbx/hello.mbx
^done
(@@value{GDBP})
@@end smallexample


@@subheading The @@code{-file-exec-file} Command
@@findex -file-exec-file

@@subsubheading Synopsis

@@example
 -file-exec-file @@var{file}
@@end example

Specify the executable file to be debugged.  Unlike
@@samp{-file-exec-and-symbols}, the symbol table is @@emph{not} read
from this file.  If used without argument, @@value{GDBN} clears the information
about the executable file.  No output is produced, except a completion
notification.

@@subsubheading @@value{GDBN} Command

The corresponding @@value{GDBN} command is @@samp{exec-file}.

@@subsubheading Example

@@smallexample
(@@value{GDBP})
-file-exec-file /kwikemart/marge/ezannoni/TRUNK/mbx/hello.mbx
^done
(@@value{GDBP})
@@end smallexample


@@subheading The @@code{-file-list-exec-sections} Command
@@findex -file-list-exec-sections

@@subsubheading Synopsis

@@example
 -file-list-exec-sections
@@end example

List the sections of the current executable file.

@@subsubheading @@value{GDBN} Command

The @@value{GDBN} command @@samp{info file} shows, among the rest, the same
information as this command.  @@code{gdbtk} has a corresponding command
@@samp{gdb_load_info}.

@@subsubheading Example
N.A.


@@subheading The @@code{-file-list-exec-source-files} Command
@@findex -file-list-exec-source-files

@@subsubheading Synopsis

@@example
 -file-list-exec-source-files
@@end example

List the source files for the current executable.

@@subsubheading @@value{GDBN} Command

There's no @@value{GDBN} command which directly corresponds to this one.
@@code{gdbtk} has an analogous command @@samp{gdb_listfiles}.

@@subsubheading Example
N.A.


@@subheading The @@code{-file-list-shared-libraries} Command
@@findex -file-list-shared-libraries

@@subsubheading Synopsis

@@example
 -file-list-shared-libraries
@@end example

List the shared libraries in the program.

@@subsubheading @@value{GDBN} Command

The corresponding @@value{GDBN} command is @@samp{info shared}.

@@subsubheading Example
N.A.


@@subheading The @@code{-file-list-symbol-files} Command
@@findex -file-list-symbol-files

@@subsubheading Synopsis

@@example
 -file-list-symbol-files
@@end example

List symbol files.

@@subsubheading @@value{GDBN} Command

The corresponding @@value{GDBN} command is @@samp{info file} (part of it).

@@subsubheading Example
N.A.


@@subheading The @@code{-file-symbol-file} Command
@@findex -file-symbol-file

@@subsubheading Synopsis

@@example
 -file-symbol-file @@var{file}
@@end example

Read symbol table info from the specified @@var{file} argument.  When
used without arguments, clears @@value{GDBN}'s symbol table info.  No output is
produced, except for a completion notification.

@@subsubheading @@value{GDBN} Command

The corresponding @@value{GDBN} command is @@samp{symbol-file}.

@@subsubheading Example

@@smallexample
(@@value{GDBP})
-file-symbol-file /kwikemart/marge/ezannoni/TRUNK/mbx/hello.mbx
^done
(@@value{GDBP})
@@end smallexample

@@c %%%%%%%%%%%%%%%%%%%%%%%%%%%% SECTION %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@@node GDB/MI Miscellaneous Commands
@@section Miscellaneous @@value{GDBN} commands in @@sc{gdb/mi}

@@c @@subheading -gdb-complete

@@subheading The @@code{-gdb-exit} Command
@@findex -gdb-exit

@@subsubheading Synopsis

@@example
 -gdb-exit
@@end example

Exit @@value{GDBN} immediately.

@@subsubheading @@value{GDBN} Command

Approximately corresponds to @@samp{quit}.

@@subsubheading Example

@@smallexample
(@@value{GDBP})
-gdb-exit
@@end smallexample

@@subheading The @@code{-gdb-set} Command
@@findex -gdb-set

@@subsubheading Synopsis

@@example
 -gdb-set
@@end example

Set an internal @@value{GDBN} variable.
@@c IS THIS A DOLLAR VARIABLE? OR SOMETHING LIKE ANNOTATE ?????

@@subsubheading @@value{GDBN} Command

The corresponding @@value{GDBN} command is @@samp{set}.

@@subsubheading Example

@@smallexample
(@@value{GDBP})
-gdb-set $foo=3
^done
(@@value{GDBP})
@@end smallexample


@@subheading The @@code{-gdb-show} Command
@@findex -gdb-show

@@subsubheading Synopsis

@@example
 -gdb-show
@@end example

Show the current value of a @@value{GDBN} variable.

@@subsubheading @@value{GDBN} command

The corresponding @@value{GDBN} command is @@samp{show}.

@@subsubheading Example

@@smallexample
(@@value{GDBP})
-gdb-show annotate
^done,value="0"
(@@value{GDBP})
@@end smallexample

@@c @@subheading -gdb-source


@@subheading The @@code{-gdb-version} Command
@@findex -gdb-version

@@subsubheading Synopsis

@@example
 -gdb-version
@@end example

Show version information for @@value{GDBN}.  Used mostly in testing.

@@subsubheading @@value{GDBN} Command

There's no equivalent @@value{GDBN} command.  @@value{GDBN} by default shows this
information when you start an interactive session.

@@subsubheading Example

@@c This example modifies the actual output from GDB to avoid overfull
@@c box in TeX.
@@smallexample
(@@value{GDBP})
-gdb-version
~GNU gdb 5.2.1
~Copyright 2000 Free Software Foundation, Inc.
~GDB is free software, covered by the GNU General Public License, and
~you are welcome to change it and/or distribute copies of it under
~ certain conditions.
~Type "show copying" to see the conditions.
~There is absolutely no warranty for GDB.  Type "show warranty" for
~ details.
~This GDB was configured as 
 "--host=sparc-sun-solaris2.5.1 --target=ppc-eabi".
^done
(@@value{GDBP})
@@end smallexample

@@subheading The @@code{-interpreter-exec} Command
@@findex -interpreter-exec

@@subheading Synopsis

@@smallexample
-interpreter-exec @@var{interpreter} @@var{command}
@@end smallexample

Execute the specified @@var{command} in the given @@var{interpreter}.

@@subheading @@value{GDBN} Command

The corresponding @@value{GDBN} command is @@samp{interpreter-exec}.

@@subheading Example

@@smallexample
(@@value{GDBP})
-interpreter-exec console "break main"
&"During symbol reading, couldn't parse type; debugger out of date?.\n"
&"During symbol reading, bad structure-type format.\n"
~"Breakpoint 1 at 0x8074fc6: file ../../src/gdb/main.c, line 743.\n"
^done
(@@value{GDBP})
@@end smallexample

@@ignore
@@c %%%%%%%%%%%%%%%%%%%%%%%%%%%% SECTION %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@@node GDB/MI Kod Commands
@@section @@sc{gdb/mi} Kod Commands

The Kod commands are not implemented.

@@c @@subheading -kod-info

@@c @@subheading -kod-list

@@c @@subheading -kod-list-object-types

@@c @@subheading -kod-show

@@c %%%%%%%%%%%%%%%%%%%%%%%%%%%% SECTION %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@@node GDB/MI Memory Overlay Commands
@@section @@sc{gdb/mi} Memory Overlay Commands

The memory overlay commands are not implemented.

@@c @@subheading -overlay-auto

@@c @@subheading -overlay-list-mapping-state

@@c @@subheading -overlay-list-overlays

@@c @@subheading -overlay-map

@@c @@subheading -overlay-off

@@c @@subheading -overlay-on

@@c @@subheading -overlay-unmap

@@c %%%%%%%%%%%%%%%%%%%%%%%%%%%% SECTION %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@@node GDB/MI Signal Handling Commands
@@section @@sc{gdb/mi} Signal Handling Commands

Signal handling commands are not implemented.

@@c @@subheading -signal-handle

@@c @@subheading -signal-list-handle-actions

@@c @@subheading -signal-list-signal-types
@@end ignore


@@c %%%%%%%%%%%%%%%%%%%%%%%%%%%% SECTION %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@@node GDB/MI Stack Manipulation
@@section @@sc{gdb/mi} Stack Manipulation Commands


@@subheading The @@code{-stack-info-frame} Command
@@findex -stack-info-frame

@@subsubheading Synopsis

@@example
 -stack-info-frame
@@end example

Get info on the current frame.

@@subsubheading @@value{GDBN} Command

The corresponding @@value{GDBN} command is @@samp{info frame} or @@samp{frame}
(without arguments).

@@subsubheading Example
N.A.

@@subheading The @@code{-stack-info-depth} Command
@@findex -stack-info-depth

@@subsubheading Synopsis

@@example
 -stack-info-depth [ @@var{max-depth} ]
@@end example

Return the depth of the stack.  If the integer argument @@var{max-depth}
is specified, do not count beyond @@var{max-depth} frames.

@@subsubheading @@value{GDBN} Command

There's no equivalent @@value{GDBN} command.

@@subsubheading Example

For a stack with frame levels 0 through 11:

@@smallexample
(@@value{GDBP})
-stack-info-depth
^done,depth="12"
(@@value{GDBP})
-stack-info-depth 4
^done,depth="4"
(@@value{GDBP})
-stack-info-depth 12
^done,depth="12"
(@@value{GDBP})
-stack-info-depth 11
^done,depth="11"
(@@value{GDBP})
-stack-info-depth 13
^done,depth="12"
(@@value{GDBP})
@@end smallexample

@@subheading The @@code{-stack-list-arguments} Command
@@findex -stack-list-arguments

@@subsubheading Synopsis

@@example
 -stack-list-arguments @@var{show-values}
    [ @@var{low-frame} @@var{high-frame} ]
@@end example

Display a list of the arguments for the frames between @@var{low-frame}
and @@var{high-frame} (inclusive).  If @@var{low-frame} and
@@var{high-frame} are not provided, list the arguments for the whole call
stack.

The @@var{show-values} argument must have a value of 0 or 1.  A value of
0 means that only the names of the arguments are listed, a value of 1
means that both names and values of the arguments are printed.

@@subsubheading @@value{GDBN} Command

@@value{GDBN} does not have an equivalent command.  @@code{gdbtk} has a
@@samp{gdb_get_args} command which partially overlaps with the
functionality of @@samp{-stack-list-arguments}.

@@subsubheading Example

@@smallexample
(@@value{GDBP})
-stack-list-frames
^done,
stack=[
frame=@@{level="0",addr="0x00010734",func="callee4",
file="../../../devo/gdb/testsuite/gdb.mi/basics.c",line="8"@@},
frame=@@{level="1",addr="0x0001076c",func="callee3",
file="../../../devo/gdb/testsuite/gdb.mi/basics.c",line="17"@@},
frame=@@{level="2",addr="0x0001078c",func="callee2",
file="../../../devo/gdb/testsuite/gdb.mi/basics.c",line="22"@@},
frame=@@{level="3",addr="0x000107b4",func="callee1",
file="../../../devo/gdb/testsuite/gdb.mi/basics.c",line="27"@@},
frame=@@{level="4",addr="0x000107e0",func="main",
file="../../../devo/gdb/testsuite/gdb.mi/basics.c",line="32"@@}]
(@@value{GDBP})
-stack-list-arguments 0
^done,
stack-args=[
frame=@@{level="0",args=[]@@},
frame=@@{level="1",args=[name="strarg"]@@},
frame=@@{level="2",args=[name="intarg",name="strarg"]@@},
frame=@@{level="3",args=[name="intarg",name="strarg",name="fltarg"]@@},
frame=@@{level="4",args=[]@@}]
(@@value{GDBP})
-stack-list-arguments 1
^done,
stack-args=[
frame=@@{level="0",args=[]@@},
frame=@@{level="1",
 args=[@@{name="strarg",value="0x11940 \"A string argument.\""@@}]@@},
frame=@@{level="2",args=[
@@{name="intarg",value="2"@@},
@@{name="strarg",value="0x11940 \"A string argument.\""@@}]@@},
@@{frame=@@{level="3",args=[
@@{name="intarg",value="2"@@},
@@{name="strarg",value="0x11940 \"A string argument.\""@@},
@@{name="fltarg",value="3.5"@@}]@@},
frame=@@{level="4",args=[]@@}]
(@@value{GDBP})
-stack-list-arguments 0 2 2
^done,stack-args=[frame=@@{level="2",args=[name="intarg",name="strarg"]@@}]
(@@value{GDBP})
-stack-list-arguments 1 2 2
^done,stack-args=[frame=@@{level="2",
args=[@@{name="intarg",value="2"@@},
@@{name="strarg",value="0x11940 \"A string argument.\""@@}]@@}]
(@@value{GDBP})
@@end smallexample

@@c @@subheading -stack-list-exception-handlers


@@subheading The @@code{-stack-list-frames} Command
@@findex -stack-list-frames

@@subsubheading Synopsis

@@example
 -stack-list-frames [ @@var{low-frame} @@var{high-frame} ]
@@end example

List the frames currently on the stack.  For each frame it displays the
following info:

@@table @@samp
@@item @@var{level}
The frame number, 0 being the topmost frame, i.e. the innermost function.
@@item @@var{addr}
The @@code{$pc} value for that frame.
@@item @@var{func}
Function name.
@@item @@var{file}
File name of the source file where the function lives.
@@item @@var{line}
Line number corresponding to the @@code{$pc}.
@@end table

If invoked without arguments, this command prints a backtrace for the
whole stack.  If given two integer arguments, it shows the frames whose
levels are between the two arguments (inclusive).  If the two arguments
are equal, it shows the single frame at the corresponding level.

@@subsubheading @@value{GDBN} Command

The corresponding @@value{GDBN} commands are @@samp{backtrace} and @@samp{where}.

@@subsubheading Example

Full stack backtrace:

@@smallexample
(@@value{GDBP})
-stack-list-frames
^done,stack=
[frame=@@{level="0",addr="0x0001076c",func="foo",
  file="recursive2.c",line="11"@@},
frame=@@{level="1",addr="0x000107a4",func="foo",
  file="recursive2.c",line="14"@@},
frame=@@{level="2",addr="0x000107a4",func="foo",
  file="recursive2.c",line="14"@@},
frame=@@{level="3",addr="0x000107a4",func="foo",
  file="recursive2.c",line="14"@@},
frame=@@{level="4",addr="0x000107a4",func="foo",
  file="recursive2.c",line="14"@@},
frame=@@{level="5",addr="0x000107a4",func="foo",
  file="recursive2.c",line="14"@@},
frame=@@{level="6",addr="0x000107a4",func="foo",
  file="recursive2.c",line="14"@@},
frame=@@{level="7",addr="0x000107a4",func="foo",
  file="recursive2.c",line="14"@@},
frame=@@{level="8",addr="0x000107a4",func="foo",
  file="recursive2.c",line="14"@@},
frame=@@{level="9",addr="0x000107a4",func="foo",
  file="recursive2.c",line="14"@@},
frame=@@{level="10",addr="0x000107a4",func="foo",
  file="recursive2.c",line="14"@@},
frame=@@{level="11",addr="0x00010738",func="main",
  file="recursive2.c",line="4"@@}]
(@@value{GDBP})
@@end smallexample

Show frames between @@var{low_frame} and @@var{high_frame}:

@@smallexample
(@@value{GDBP})
-stack-list-frames 3 5
^done,stack=
[frame=@@{level="3",addr="0x000107a4",func="foo",
  file="recursive2.c",line="14"@@},
frame=@@{level="4",addr="0x000107a4",func="foo",
  file="recursive2.c",line="14"@@},
frame=@@{level="5",addr="0x000107a4",func="foo",
  file="recursive2.c",line="14"@@}]
(@@value{GDBP})
@@end smallexample

Show a single frame:

@@smallexample
(@@value{GDBP})
-stack-list-frames 3 3
^done,stack=
[frame=@@{level="3",addr="0x000107a4",func="foo",
  file="recursive2.c",line="14"@@}]
(@@value{GDBP})
@@end smallexample


@@subheading The @@code{-stack-list-locals} Command
@@findex -stack-list-locals

@@subsubheading Synopsis

@@example
 -stack-list-locals @@var{print-values}
@@end example

Display the local variable names for the current frame.  With an
argument of 0 prints only the names of the variables, with argument of 1
prints also their values.

@@subsubheading @@value{GDBN} Command

@@samp{info locals} in @@value{GDBN}, @@samp{gdb_get_locals} in @@code{gdbtk}.

@@subsubheading Example

@@smallexample
(@@value{GDBP})
-stack-list-locals 0
^done,locals=[name="A",name="B",name="C"]
(@@value{GDBP})
-stack-list-locals 1
^done,locals=[@@{name="A",value="1"@@},@@{name="B",value="2"@@},
  @@{name="C",value="3"@@}]
(@@value{GDBP})
@@end smallexample


@@subheading The @@code{-stack-select-frame} Command
@@findex -stack-select-frame

@@subsubheading Synopsis

@@example
 -stack-select-frame @@var{framenum}
@@end example

Change the current frame.  Select a different frame @@var{framenum} on
the stack.

@@subsubheading @@value{GDBN} Command

The corresponding @@value{GDBN} commands are @@samp{frame}, @@samp{up},
@@samp{down}, @@samp{select-frame}, @@samp{up-silent}, and @@samp{down-silent}.

@@subsubheading Example

@@smallexample
(@@value{GDBP})
-stack-select-frame 2
^done
(@@value{GDBP})
@@end smallexample

@@c %%%%%%%%%%%%%%%%%%%%%%%%%%%% SECTION %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@@node GDB/MI Symbol Query
@@section @@sc{gdb/mi} Symbol Query Commands


@@subheading The @@code{-symbol-info-address} Command
@@findex -symbol-info-address

@@subsubheading Synopsis

@@example
 -symbol-info-address @@var{symbol}
@@end example

Describe where @@var{symbol} is stored.

@@subsubheading @@value{GDBN} Command

The corresponding @@value{GDBN} command is @@samp{info address}.

@@subsubheading Example
N.A.


@@subheading The @@code{-symbol-info-file} Command
@@findex -symbol-info-file

@@subsubheading Synopsis

@@example
 -symbol-info-file
@@end example

Show the file for the symbol.

@@subsubheading @@value{GDBN} Command

There's no equivalent @@value{GDBN} command.  @@code{gdbtk} has
@@samp{gdb_find_file}.

@@subsubheading Example
N.A.


@@subheading The @@code{-symbol-info-function} Command
@@findex -symbol-info-function

@@subsubheading Synopsis

@@example
 -symbol-info-function
@@end example

Show which function the symbol lives in.

@@subsubheading @@value{GDBN} Command

@@samp{gdb_get_function} in @@code{gdbtk}.

@@subsubheading Example
N.A.


@@subheading The @@code{-symbol-info-line} Command
@@findex -symbol-info-line

@@subsubheading Synopsis

@@example
 -symbol-info-line
@@end example

Show the core addresses of the code for a source line.

@@subsubheading @@value{GDBN} Command

The corresponding @@value{GDBN} comamnd is @@samp{info line}.
@@code{gdbtk} has the @@samp{gdb_get_line} and @@samp{gdb_get_file} commands.

@@subsubheading Example
N.A.


@@subheading The @@code{-symbol-info-symbol} Command
@@findex -symbol-info-symbol

@@subsubheading Synopsis

@@example
 -symbol-info-symbol @@var{addr}
@@end example

Describe what symbol is at location @@var{addr}.

@@subsubheading @@value{GDBN} Command

The corresponding @@value{GDBN} command is @@samp{info symbol}.

@@subsubheading Example
N.A.


@@subheading The @@code{-symbol-list-functions} Command
@@findex -symbol-list-functions

@@subsubheading Synopsis

@@example
 -symbol-list-functions
@@end example

List the functions in the executable.

@@subsubheading @@value{GDBN} Command

@@samp{info functions} in @@value{GDBN}, @@samp{gdb_listfunc} and
@@samp{gdb_search} in @@code{gdbtk}.

@@subsubheading Example
N.A.


@@subheading The @@code{-symbol-list-types} Command
@@findex -symbol-list-types

@@subsubheading Synopsis

@@example
 -symbol-list-types
@@end example

List all the type names.

@@subsubheading @@value{GDBN} Command

The corresponding commands are @@samp{info types} in @@value{GDBN},
@@samp{gdb_search} in @@code{gdbtk}.

@@subsubheading Example
N.A.


@@subheading The @@code{-symbol-list-variables} Command
@@findex -symbol-list-variables

@@subsubheading Synopsis

@@example
 -symbol-list-variables
@@end example

List all the global and static variable names.

@@subsubheading @@value{GDBN} Command

@@samp{info variables} in @@value{GDBN}, @@samp{gdb_search} in @@code{gdbtk}.

@@subsubheading Example
N.A.


@@subheading The @@code{-symbol-locate} Command
@@findex -symbol-locate

@@subsubheading Synopsis

@@example
 -symbol-locate
@@end example

@@subsubheading @@value{GDBN} Command

@@samp{gdb_loc} in @@code{gdbtk}.

@@subsubheading Example
N.A.


@@subheading The @@code{-symbol-type} Command
@@findex -symbol-type

@@subsubheading Synopsis

@@example
 -symbol-type @@var{variable}
@@end example

Show type of @@var{variable}.

@@subsubheading @@value{GDBN} Command

The corresponding @@value{GDBN} command is @@samp{ptype}, @@code{gdbtk} has
@@samp{gdb_obj_variable}.

@@subsubheading Example
N.A.


@@c %%%%%%%%%%%%%%%%%%%%%%%%%%%% SECTION %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@@node GDB/MI Target Manipulation
@@section @@sc{gdb/mi} Target Manipulation Commands


@@subheading The @@code{-target-attach} Command
@@findex -target-attach

@@subsubheading Synopsis

@@example
 -target-attach @@var{pid} | @@var{file}
@@end example

Attach to a process @@var{pid} or a file @@var{file} outside of @@value{GDBN}.

@@subsubheading @@value{GDBN} command

The corresponding @@value{GDBN} command is @@samp{attach}.

@@subsubheading Example
N.A.


@@subheading The @@code{-target-compare-sections} Command
@@findex -target-compare-sections

@@subsubheading Synopsis

@@example
 -target-compare-sections [ @@var{section} ]
@@end example

Compare data of section @@var{section} on target to the exec file.
Without the argument, all sections are compared.

@@subsubheading @@value{GDBN} Command

The @@value{GDBN} equivalent is @@samp{compare-sections}.

@@subsubheading Example
N.A.


@@subheading The @@code{-target-detach} Command
@@findex -target-detach

@@subsubheading Synopsis

@@example
 -target-detach
@@end example

Disconnect from the remote target.  There's no output.

@@subsubheading @@value{GDBN} command

The corresponding @@value{GDBN} command is @@samp{detach}.

@@subsubheading Example

@@smallexample
(@@value{GDBP})
-target-detach
^done
(@@value{GDBP})
@@end smallexample


@@subheading The @@code{-target-download} Command
@@findex -target-download

@@subsubheading Synopsis

@@example
 -target-download
@@end example

Loads the executable onto the remote target.
It prints out an update message every half second, which includes the fields:

@@table @@samp
@@item section
The name of the section.
@@item section-sent
The size of what has been sent so far for that section.
@@item section-size
The size of the section.
@@item total-sent
The total size of what was sent so far (the current and the previous sections).
@@item total-size
The size of the overall executable to download.
@@end table

@@noindent
Each message is sent as status record (@@pxref{GDB/MI Output Syntax, ,
@@sc{gdb/mi} Output Syntax}).

In addition, it prints the name and size of the sections, as they are
downloaded.  These messages include the following fields:

@@table @@samp
@@item section
The name of the section.
@@item section-size
The size of the section.
@@item total-size
The size of the overall executable to download.
@@end table

@@noindent
At the end, a summary is printed.

@@subsubheading @@value{GDBN} Command

The corresponding @@value{GDBN} command is @@samp{load}.

@@subsubheading Example

Note: each status message appears on a single line.  Here the messages
have been broken down so that they can fit onto a page.

@@smallexample
(@@value{GDBP})
-target-download
+download,@@{section=".text",section-size="6668",total-size="9880"@@}
+download,@@{section=".text",section-sent="512",section-size="6668",
total-sent="512",total-size="9880"@@}
+download,@@{section=".text",section-sent="1024",section-size="6668",
total-sent="1024",total-size="9880"@@}
+download,@@{section=".text",section-sent="1536",section-size="6668",
total-sent="1536",total-size="9880"@@}
+download,@@{section=".text",section-sent="2048",section-size="6668",
total-sent="2048",total-size="9880"@@}
+download,@@{section=".text",section-sent="2560",section-size="6668",
total-sent="2560",total-size="9880"@@}
+download,@@{section=".text",section-sent="3072",section-size="6668",
total-sent="3072",total-size="9880"@@}
+download,@@{section=".text",section-sent="3584",section-size="6668",
total-sent="3584",total-size="9880"@@}
+download,@@{section=".text",section-sent="4096",section-size="6668",
total-sent="4096",total-size="9880"@@}
+download,@@{section=".text",section-sent="4608",section-size="6668",
total-sent="4608",total-size="9880"@@}
+download,@@{section=".text",section-sent="5120",section-size="6668",
total-sent="5120",total-size="9880"@@}
+download,@@{section=".text",section-sent="5632",section-size="6668",
total-sent="5632",total-size="9880"@@}
+download,@@{section=".text",section-sent="6144",section-size="6668",
total-sent="6144",total-size="9880"@@}
+download,@@{section=".text",section-sent="6656",section-size="6668",
total-sent="6656",total-size="9880"@@}
+download,@@{section=".init",section-size="28",total-size="9880"@@}
+download,@@{section=".fini",section-size="28",total-size="9880"@@}
+download,@@{section=".data",section-size="3156",total-size="9880"@@}
+download,@@{section=".data",section-sent="512",section-size="3156",
total-sent="7236",total-size="9880"@@}
+download,@@{section=".data",section-sent="1024",section-size="3156",
total-sent="7748",total-size="9880"@@}
+download,@@{section=".data",section-sent="1536",section-size="3156",
total-sent="8260",total-size="9880"@@}
+download,@@{section=".data",section-sent="2048",section-size="3156",
total-sent="8772",total-size="9880"@@}
+download,@@{section=".data",section-sent="2560",section-size="3156",
total-sent="9284",total-size="9880"@@}
+download,@@{section=".data",section-sent="3072",section-size="3156",
total-sent="9796",total-size="9880"@@}
^done,address="0x10004",load-size="9880",transfer-rate="6586",
write-rate="429"
(@@value{GDBP})
@@end smallexample


@@subheading The @@code{-target-exec-status} Command
@@findex -target-exec-status

@@subsubheading Synopsis

@@example
 -target-exec-status
@@end example

Provide information on the state of the target (whether it is running or
not, for instance).

@@subsubheading @@value{GDBN} Command

There's no equivalent @@value{GDBN} command.

@@subsubheading Example
N.A.


@@subheading The @@code{-target-list-available-targets} Command
@@findex -target-list-available-targets

@@subsubheading Synopsis

@@example
 -target-list-available-targets
@@end example

List the possible targets to connect to.

@@subsubheading @@value{GDBN} Command

The corresponding @@value{GDBN} command is @@samp{help target}.

@@subsubheading Example
N.A.


@@subheading The @@code{-target-list-current-targets} Command
@@findex -target-list-current-targets

@@subsubheading Synopsis

@@example
 -target-list-current-targets
@@end example

Describe the current target.

@@subsubheading @@value{GDBN} Command

The corresponding information is printed by @@samp{info file} (among
other things).

@@subsubheading Example
N.A.


@@subheading The @@code{-target-list-parameters} Command
@@findex -target-list-parameters

@@subsubheading Synopsis

@@example
 -target-list-parameters
@@end example

@@c ????

@@subsubheading @@value{GDBN} Command

No equivalent.

@@subsubheading Example
N.A.


@@subheading The @@code{-target-select} Command
@@findex -target-select

@@subsubheading Synopsis

@@example
 -target-select @@var{type} @@var{parameters @@dots{}}
@@end example

Connect @@value{GDBN} to the remote target.  This command takes two args:

@@table @@samp
@@item @@var{type}
The type of target, for instance @@samp{async}, @@samp{remote}, etc.
@@item @@var{parameters}
Device names, host names and the like.  @@xref{Target Commands, ,
Commands for managing targets}, for more details.
@@end table

The output is a connection notification, followed by the address at
which the target program is, in the following form:

@@smallexample
^connected,addr="@@var{address}",func="@@var{function name}",
  args=[@@var{arg list}]
@@end smallexample

@@subsubheading @@value{GDBN} Command

The corresponding @@value{GDBN} command is @@samp{target}.

@@subsubheading Example

@@smallexample
(@@value{GDBP})
-target-select async /dev/ttya
^connected,addr="0xfe00a300",func="??",args=[]
(@@value{GDBP})
@@end smallexample

@@c %%%%%%%%%%%%%%%%%%%%%%%%%%%% SECTION %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@@node GDB/MI Thread Commands
@@section @@sc{gdb/mi} Thread Commands


@@subheading The @@code{-thread-info} Command
@@findex -thread-info

@@subsubheading Synopsis

@@example
 -thread-info
@@end example

@@subsubheading @@value{GDBN} command

No equivalent.

@@subsubheading Example
N.A.


@@subheading The @@code{-thread-list-all-threads} Command
@@findex -thread-list-all-threads

@@subsubheading Synopsis

@@example
 -thread-list-all-threads
@@end example

@@subsubheading @@value{GDBN} Command

The equivalent @@value{GDBN} command is @@samp{info threads}.

@@subsubheading Example
N.A.


@@subheading The @@code{-thread-list-ids} Command
@@findex -thread-list-ids

@@subsubheading Synopsis

@@example
 -thread-list-ids
@@end example

Produces a list of the currently known @@value{GDBN} thread ids.  At the
end of the list it also prints the total number of such threads.

@@subsubheading @@value{GDBN} Command

Part of @@samp{info threads} supplies the same information.

@@subsubheading Example

No threads present, besides the main process:

@@smallexample
(@@value{GDBP})
-thread-list-ids
^done,thread-ids=@@{@@},number-of-threads="0"
(@@value{GDBP})
@@end smallexample


Several threads:

@@smallexample
(@@value{GDBP})
-thread-list-ids
^done,thread-ids=@@{thread-id="3",thread-id="2",thread-id="1"@@},
number-of-threads="3"
(@@value{GDBP})
@@end smallexample


@@subheading The @@code{-thread-select} Command
@@findex -thread-select

@@subsubheading Synopsis

@@example
 -thread-select @@var{threadnum}
@@end example

Make @@var{threadnum} the current thread.  It prints the number of the new
current thread, and the topmost frame for that thread.

@@subsubheading @@value{GDBN} Command

The corresponding @@value{GDBN} command is @@samp{thread}.

@@subsubheading Example

@@smallexample
(@@value{GDBP})
-exec-next
^running
(@@value{GDBP})
*stopped,reason="end-stepping-range",thread-id="2",line="187",
file="../../../devo/gdb/testsuite/gdb.threads/linux-dp.c"
(@@value{GDBP})
-thread-list-ids
^done,
thread-ids=@@{thread-id="3",thread-id="2",thread-id="1"@@},
number-of-threads="3"
(@@value{GDBP})
-thread-select 3
^done,new-thread-id="3",
frame=@@{level="0",func="vprintf",
args=[@@{name="format",value="0x8048e9c \"%*s%c %d %c\\n\""@@},
@@{name="arg",value="0x2"@@}],file="vprintf.c",line="31"@@}
(@@value{GDBP})
@@end smallexample

@@c %%%%%%%%%%%%%%%%%%%%%%%%%%%% SECTION %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@@node GDB/MI Tracepoint Commands
@@section @@sc{gdb/mi} Tracepoint Commands

The tracepoint commands are not yet implemented.

@@c @@subheading -trace-actions

@@c @@subheading -trace-delete

@@c @@subheading -trace-disable

@@c @@subheading -trace-dump

@@c @@subheading -trace-enable

@@c @@subheading -trace-exists

@@c @@subheading -trace-find

@@c @@subheading -trace-frame-number

@@c @@subheading -trace-info

@@c @@subheading -trace-insert

@@c @@subheading -trace-list

@@c @@subheading -trace-pass-count

@@c @@subheading -trace-save

@@c @@subheading -trace-start

@@c @@subheading -trace-stop


@@c %%%%%%%%%%%%%%%%%%%%%%%%%%%% SECTION %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@@node GDB/MI Variable Objects
@@section @@sc{gdb/mi} Variable Objects


@@subheading Motivation for Variable Objects in @@sc{gdb/mi}

For the implementation of a variable debugger window (locals, watched
expressions, etc.), we are proposing the adaptation of the existing code
used by @@code{Insight}.

The two main reasons for that are:

@@enumerate 1
@@item
It has been proven in practice (it is already on its second generation).

@@item
It will shorten development time (needless to say how important it is
now).
@@end enumerate

The original interface was designed to be used by Tcl code, so it was
slightly changed so it could be used through @@sc{gdb/mi}.  This section
describes the @@sc{gdb/mi} operations that will be available and gives some
hints about their use.

@@emph{Note}: In addition to the set of operations described here, we
expect the @@sc{gui} implementation of a variable window to require, at
least, the following operations:

@@itemize @@bullet
@@item @@code{-gdb-show} @@code{output-radix}
@@item @@code{-stack-list-arguments}
@@item @@code{-stack-list-locals}
@@item @@code{-stack-select-frame}
@@end itemize

@@subheading Introduction to Variable Objects in @@sc{gdb/mi}

@@cindex variable objects in @@sc{gdb/mi}
The basic idea behind variable objects is the creation of a named object
to represent a variable, an expression, a memory location or even a CPU
register.  For each object created, a set of operations is available for
examining or changing its properties.

Furthermore, complex data types, such as C structures, are represented
in a tree format.  For instance, the @@code{struct} type variable is the
root and the children will represent the struct members.  If a child
is itself of a complex type, it will also have children of its own.
Appropriate language differences are handled for C, C@@t{++} and Java.

When returning the actual values of the objects, this facility allows
for the individual selection of the display format used in the result
creation.  It can be chosen among: binary, decimal, hexadecimal, octal
and natural.  Natural refers to a default format automatically
chosen based on the variable type (like decimal for an @@code{int}, hex
for pointers, etc.).

The following is the complete set of @@sc{gdb/mi} operations defined to
access this functionality:

@@multitable @@columnfractions .4 .6
@@item @@strong{Operation}
@@tab @@strong{Description}

@@item @@code{-var-create}
@@tab create a variable object
@@item @@code{-var-delete}
@@tab delete the variable object and its children
@@item @@code{-var-set-format}
@@tab set the display format of this variable
@@item @@code{-var-show-format}
@@tab show the display format of this variable
@@item @@code{-var-info-num-children}
@@tab tells how many children this object has
@@item @@code{-var-list-children}
@@tab return a list of the object's children
@@item @@code{-var-info-type}
@@tab show the type of this variable object
@@item @@code{-var-info-expression}
@@tab print what this variable object represents
@@item @@code{-var-show-attributes}
@@tab is this variable editable? does it exist here?
@@item @@code{-var-evaluate-expression}
@@tab get the value of this variable
@@item @@code{-var-assign}
@@tab set the value of this variable
@@item @@code{-var-update}
@@tab update the variable and its children
@@end multitable

In the next subsection we describe each operation in detail and suggest
how it can be used.

@@subheading Description And Use of Operations on Variable Objects

@@subheading The @@code{-var-create} Command
@@findex -var-create

@@subsubheading Synopsis

@@example
 -var-create @@{@@var{name} | "-"@@}
    @@{@@var{frame-addr} | "*"@@} @@var{expression}
@@end example

This operation creates a variable object, which allows the monitoring of
a variable, the result of an expression, a memory cell or a CPU
register.

The @@var{name} parameter is the string by which the object can be
referenced.  It must be unique.  If @@samp{-} is specified, the varobj
system will generate a string ``varNNNNNN'' automatically.  It will be
unique provided that one does not specify @@var{name} on that format.
The command fails if a duplicate name is found.

The frame under which the expression should be evaluated can be
specified by @@var{frame-addr}.  A @@samp{*} indicates that the current
frame should be used.

@@var{expression} is any expression valid on the current language set (must not
begin with a @@samp{*}), or one of the following:

@@itemize @@bullet
@@item
@@samp{*@@var{addr}}, where @@var{addr} is the address of a memory cell

@@item
@@samp{*@@var{addr}-@@var{addr}} --- a memory address range (TBD)

@@item
@@samp{$@@var{regname}} --- a CPU register name
@@end itemize

@@subsubheading Result

This operation returns the name, number of children and the type of the
object created.  Type is returned as a string as the ones generated by
the @@value{GDBN} CLI:

@@example
 name="@@var{name}",numchild="N",type="@@var{type}"
@@end example


@@subheading The @@code{-var-delete} Command
@@findex -var-delete

@@subsubheading Synopsis

@@example
 -var-delete @@var{name}
@@end example

Deletes a previously created variable object and all of its children.

Returns an error if the object @@var{name} is not found.


@@subheading The @@code{-var-set-format} Command
@@findex -var-set-format

@@subsubheading Synopsis

@@example
 -var-set-format @@var{name} @@var{format-spec}
@@end example

Sets the output format for the value of the object @@var{name} to be
@@var{format-spec}.

The syntax for the @@var{format-spec} is as follows:

@@example
 @@var{format-spec} @@expansion{}
 @@{binary | decimal | hexadecimal | octal | natural@@}
@@end example


@@subheading The @@code{-var-show-format} Command
@@findex -var-show-format

@@subsubheading Synopsis

@@example
 -var-show-format @@var{name}
@@end example

Returns the format used to display the value of the object @@var{name}.

@@example
 @@var{format} @@expansion{}
 @@var{format-spec}
@@end example


@@subheading The @@code{-var-info-num-children} Command
@@findex -var-info-num-children

@@subsubheading Synopsis

@@example
 -var-info-num-children @@var{name}
@@end example

Returns the number of children of a variable object @@var{name}:

@@example
 numchild=@@var{n}
@@end example


@@subheading The @@code{-var-list-children} Command
@@findex -var-list-children

@@subsubheading Synopsis

@@example
 -var-list-children @@var{name}
@@end example

Returns a list of the children of the specified variable object:

@@example
 numchild=@@var{n},children=[@@{name=@@var{name},
 numchild=@@var{n},type=@@var{type}@@},@@r{(repeats N times)}]
@@end example


@@subheading The @@code{-var-info-type} Command
@@findex -var-info-type

@@subsubheading Synopsis

@@example
 -var-info-type @@var{name}
@@end example

Returns the type of the specified variable @@var{name}.  The type is
returned as a string in the same format as it is output by the
@@value{GDBN} CLI:

@@example
 type=@@var{typename}
@@end example


@@subheading The @@code{-var-info-expression} Command
@@findex -var-info-expression

@@subsubheading Synopsis

@@example
 -var-info-expression @@var{name}
@@end example

Returns what is represented by the variable object @@var{name}:

@@example
 lang=@@var{lang-spec},exp=@@var{expression}
@@end example

@@noindent
where @@var{lang-spec} is @@code{@@{"C" | "C++" | "Java"@@}}.

@@subheading The @@code{-var-show-attributes} Command
@@findex -var-show-attributes

@@subsubheading Synopsis

@@example
 -var-show-attributes @@var{name}
@@end example

List attributes of the specified variable object @@var{name}:

@@example
 status=@@var{attr} [ ( ,@@var{attr} )* ]
@@end example

@@noindent
where @@var{attr} is @@code{@@{ @@{ editable | noneditable @@} | TBD @@}}.

@@subheading The @@code{-var-evaluate-expression} Command
@@findex -var-evaluate-expression

@@subsubheading Synopsis

@@example
 -var-evaluate-expression @@var{name}
@@end example

Evaluates the expression that is represented by the specified variable
object and returns its value as a string in the current format specified
for the object:

@@example
 value=@@var{value}
@@end example

Note that one must invoke @@code{-var-list-children} for a variable
before the value of a child variable can be evaluated.

@@subheading The @@code{-var-assign} Command
@@findex -var-assign

@@subsubheading Synopsis

@@example
 -var-assign @@var{name} @@var{expression}
@@end example

Assigns the value of @@var{expression} to the variable object specified
by @@var{name}.  The object must be @@samp{editable}.  If the variable's
value is altered by the assign, the variable will show up in any 
subsequent @@code{-var-update} list.

@@subsubheading Example

@@example
(@@value{GDBP})
-var-assign var1 3
^done,value="3"
(@@value{GDBP})
-var-update *
^done,changelist=[@@{name="var1",in_scope="true",type_changed="false"@@}]
(@@value{GDBP})
@@end example

@@subheading The @@code{-var-update} Command
@@findex -var-update

@@subsubheading Synopsis

@@example
 -var-update @@{@@var{name} | "*"@@}
@@end example

Update the value of the variable object @@var{name} by evaluating its
expression after fetching all the new values from memory or registers.
A @@samp{*} causes all existing variable objects to be updated.
@


1.33
log
@2003-02-04  Andrew Cagney  <ac131313@@redhat.com>

	From Keith Seitz <keiths@@redhat.com>:
	* gdbmi.texinfo (GDB/MI Miscellaneous Commands): Document the
	interpreter-exec command.
@
text
@@


1.33.10.1
log
@Merge with mainline.
@
text
@@


1.32
log
@2003-02-02  Andrew Cagney  <ac131313@@redhat.com>

	From 2002-11-10 Jason Molenda (jason-cl@@molenda.com):
        * mi-cmd-var.c (mi_cmd_var_list_children): CHILDREN field is
        now a list; still a tuple when in mi1.
        * gdbmi.texinfo: Update var-list-children example.

2003-02-02  Andrew Cagney  <ac131313@@redhat.com>

	2002-11-10 Jason Molenda (jason-cl@@molenda.com):
        * gdb.mi/mi-var-child.exp: -var-list-children's CHILDREN field is
        now a list, not a tuple.
        * gdb.mi/mi-var-display.exp: Ditto.
        * gdb.mi/gdb792.exp: Ditto.
@
text
@d2546 27
@


1.32.2.1
log
@Merge kseitz_interps-20020528-branch.
@
text
@d316 2
a317 2
@@var{notify-async-output} contains supplementary information (events) that the
client should handle (e.g., a new breakpoint was inserted).  All notify
d391 1
a391 2
<- =breakpoint-create,number="3"
<- ^done
d497 1
a497 1
The following is a preliminary list of out-of-band records.
d500 1
a500 44
@@item stop
The inferior stopped.
@@c Need an example!

@@item breakpoint-create
@@itemx breakpoint-modify
@@itemx breakpoint-delete
@@itemx tracepoint-create
@@itemx tracepoint-modify
@@itemx tracepoint-delete
A breakpoint or tracepoint was created, modified, or deleted. In all cases,
the event will also report the @@code{number} of the affected breakpoint/tracepoint:
@@smallexample
=breakpoint-create,number="1"
@@end smallexample

@@item architecture-changed
This event indicates that @@value{GDBN} has changed architectures, and that
the user interface may need to update certain views that are architecture-dependent,
such as registers.
@@smallexample
=architecture-changed
@@end smallexample

@@item register-update
A register has been changed in the inferior. The event will include the
@@code{number} of the register that the UI needs to update.
@@smallexample
=register-changed,number="3"
@@end smallexample

@@item selected-frame-level-changed
This event is sent whenever the user changes @@value{GDBN}'s selected frame.
The event will include the newly selected frame level.
@@smallexample
=selected-frame-level-changed,level="3"
@@end smallexample

@@item context-changed
The user has changed @@value{GDBN}'s current thread. The event will include
the newly selected thread number.
@@smallexample
=context-changed,thread="2"
@@end smallexample
d579 1
a579 2
=breakpoint-create,number="1"
^done
d582 1
a582 1
=breakpoint-modify,number="1"
a630 1
=breakpoint-modify,number="1"
a667 1
=breakpoint-delete,number="1"
a702 1
=breakpoint-modify,number="2"
a737 1
=breakpoint-modify,number="2"
d813 18
d841 1
a841 2
=breakpoint-create,number="1"
^done
d844 1
a844 2
=breakpoint-create,number="2"
^done
d861 1
a861 2
=breakpoint-create,number="1"
^done
d970 1
a970 2
=breakpoint-create,number="2"
^done
d987 1
a987 2
=breakpoint-create,number="5"
^done
d1012 1
a1012 2
=breakpoint-create,number="2"
^done
d1305 1
a1305 1
 -data-list-register-names [ [ -numbers ] ( @@var{regno} )+ ]
a1314 3
When the "-numbers" option is used, it will return the list of register
numbers in addition to the register names.

a2541 28
^done
(@@value{GDBP})
@@end smallexample

@@subheading The @@code{-interpreter-exec} Command
@@findex -interpreter-exec

@@subheading Synopsis

@@smallexample
-interpreter-exec @@var{interpreter} @@var{command}
@@end smallexample

Execute the specified @@var{command} in the given @@var{interpreter}.

@@subheading @@value{GDBN} Command

The corresponding @@value{GDBN} command is @@samp{interpreter-exec}.

@@subheading Example

@@smallexample
(@@value{GDBP})
-interpreter-exec console "break main"
&"During symbol reading, couldn't parse type; debugger out of date?.\n"
&"During symbol reading, bad structure-type format.\n"
~"Breakpoint 1 at 0x8074fc6: file ../../src/gdb/main.c, line 743.\n"
=breakpoint-create,number="1"
@


1.31
log
@
2002-12-13  Jeff Johnston  <jjohnstn@@redhat.com>

        * mi-cmds.c (-environment-directory) Change to use mi_cmd_env_dir,
        (-environment-cd): Change to use mi_cmd_env_cd,.
        (-environment-pwd): Change to use mi_cmd_env_pwd.
        (-environment-path): Change to use mi_cmd_env_path.
        * mi-cmds.h (mi_cmd_env_cd, mi_cmd_env_dir): New prototypes.
        (mi_cmd_env_path, mi_cmd_env_pwd): Ditto.
        * mi-cmd-env.c: New file.  Part of fix for PR gdb/741.
        * gdbmi.texinfo (environment-cd): Update output and example.
        (environment-pwd): Ditto.
        (environment-dir): Update output, description, and examples.
        (environment-path): Ditto.
@
text
@d3759 2
a3760 2
 numchild=@@var{n},children=@@{@@{name=@@var{name},
 numchild=@@var{n},type=@@var{type}@@},@@r{(repeats N times)}@@}
@


1.30
log
@
2002-11-11  Jeff Johnston  <jjohnstn@@redhat.com>

        * gdbmi.texinfo (-var-assign): Add comments about interaction
        with -var-update and add an example.  Part of fix for gdb/702.
@
text
@d1668 1
a1668 1
 -environment-directory @@var{pathdir}
d1671 16
a1686 1
Add directory @@var{pathdir} to beginning of search path for source files.
d1697 10
a1706 1
^done
d1717 1
a1717 1
 -environment-path ( @@var{pathdir} )+
d1721 17
d1747 8
a1754 2
-environment-path /kwikemart/marge/ezannoni/flathead-dev/ppc-eabi/gdb
^done
d1779 1
a1779 2
~Working directory /kwikemart/marge/ezannoni/flathead-dev/devo/gdb.
^done
@


1.29
log
@
2002-10-03  Jeff Johnston  <jjohnstn@@redhat.com>

        * gdbmi.texinfo: Fix examples that show frames to remove
        extraneous blank in level field.  Part of fix for PR gdb/192.
@
text
@d3802 15
a3816 1
by @@var{name}.  The object must be @@samp{editable}.
@


1.29.2.1
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@@


1.28
log
@2002-07-12  Mo DeJong  <supermo@@bayarea.net>
* gdbmi.texinfo (var-evaluate-expression): Note that
var-list-children must be invoked before child variable
values can be evaluated.
@
text
@d2037 1
a2037 1
111^done,frame=@@{level="0 ",func="callee3",
d2644 1
a2644 1
frame=@@{level="0 ",addr="0x00010734",func="callee4",
d2646 1
a2646 1
frame=@@{level="1 ",addr="0x0001076c",func="callee3",
d2648 1
a2648 1
frame=@@{level="2 ",addr="0x0001078c",func="callee2",
d2650 1
a2650 1
frame=@@{level="3 ",addr="0x000107b4",func="callee1",
d2652 1
a2652 1
frame=@@{level="4 ",addr="0x000107e0",func="main",
d2734 1
a2734 1
[frame=@@{level="0 ",addr="0x0001076c",func="foo",
d2736 1
a2736 1
frame=@@{level="1 ",addr="0x000107a4",func="foo",
d2738 1
a2738 1
frame=@@{level="2 ",addr="0x000107a4",func="foo",
d2740 1
a2740 1
frame=@@{level="3 ",addr="0x000107a4",func="foo",
d2742 1
a2742 1
frame=@@{level="4 ",addr="0x000107a4",func="foo",
d2744 1
a2744 1
frame=@@{level="5 ",addr="0x000107a4",func="foo",
d2746 1
a2746 1
frame=@@{level="6 ",addr="0x000107a4",func="foo",
d2748 1
a2748 1
frame=@@{level="7 ",addr="0x000107a4",func="foo",
d2750 1
a2750 1
frame=@@{level="8 ",addr="0x000107a4",func="foo",
d2752 1
a2752 1
frame=@@{level="9 ",addr="0x000107a4",func="foo",
d2767 1
a2767 1
[frame=@@{level="3 ",addr="0x000107a4",func="foo",
d2769 1
a2769 1
frame=@@{level="4 ",addr="0x000107a4",func="foo",
d2771 1
a2771 1
frame=@@{level="5 ",addr="0x000107a4",func="foo",
d2782 1
a2782 1
[frame=@@{level="3 ",addr="0x000107a4",func="foo",
d3445 1
a3445 1
frame=@@{level="0 ",func="vprintf",
@


1.27
log
@        * gdbmi.texinfo: Update command examples with real MI behavior.
@
text
@d3789 3
@


1.27.8.1
log
@Merge with mainline; tag is carlton_dictionary-20020927-merge
@
text
@a3788 3
Note that one must invoke @@code{-var-list-children} for a variable
before the value of a child variable can be evaluated.

@


1.27.8.2
log
@Merge with mainline; merge tag carlton_dictionary-20021011-merge.
@
text
@d2037 1
a2037 1
111^done,frame=@@{level="0",func="callee3",
d2644 1
a2644 1
frame=@@{level="0",addr="0x00010734",func="callee4",
d2646 1
a2646 1
frame=@@{level="1",addr="0x0001076c",func="callee3",
d2648 1
a2648 1
frame=@@{level="2",addr="0x0001078c",func="callee2",
d2650 1
a2650 1
frame=@@{level="3",addr="0x000107b4",func="callee1",
d2652 1
a2652 1
frame=@@{level="4",addr="0x000107e0",func="main",
d2734 1
a2734 1
[frame=@@{level="0",addr="0x0001076c",func="foo",
d2736 1
a2736 1
frame=@@{level="1",addr="0x000107a4",func="foo",
d2738 1
a2738 1
frame=@@{level="2",addr="0x000107a4",func="foo",
d2740 1
a2740 1
frame=@@{level="3",addr="0x000107a4",func="foo",
d2742 1
a2742 1
frame=@@{level="4",addr="0x000107a4",func="foo",
d2744 1
a2744 1
frame=@@{level="5",addr="0x000107a4",func="foo",
d2746 1
a2746 1
frame=@@{level="6",addr="0x000107a4",func="foo",
d2748 1
a2748 1
frame=@@{level="7",addr="0x000107a4",func="foo",
d2750 1
a2750 1
frame=@@{level="8",addr="0x000107a4",func="foo",
d2752 1
a2752 1
frame=@@{level="9",addr="0x000107a4",func="foo",
d2767 1
a2767 1
[frame=@@{level="3",addr="0x000107a4",func="foo",
d2769 1
a2769 1
frame=@@{level="4",addr="0x000107a4",func="foo",
d2771 1
a2771 1
frame=@@{level="5",addr="0x000107a4",func="foo",
d2782 1
a2782 1
[frame=@@{level="3",addr="0x000107a4",func="foo",
d3445 1
a3445 1
frame=@@{level="0",func="vprintf",
@


1.27.8.3
log
@2002-11-15  David Carlton  <carlton@@math.stanford.edu>

	* Merge from mainline; tag is carlton_dictionary-20021115-merge.
@
text
@d3802 1
a3802 15
by @@var{name}.  The object must be @@samp{editable}.  If the variable's
value is altered by the assign, the variable will show up in any 
subsequent @@code{-var-update} list.

@@subsubheading Example

@@example
(@@value{GDBP})
-var-assign var1 3
^done,value="3"
(@@value{GDBP})
-var-update *
^done,changelist=[@@{name="var1",in_scope="true",type_changed="false"@@}]
(@@value{GDBP})
@@end example
@


1.27.8.4
log
@2002-12-23  David Carlton  <carlton@@math.stanford.edu>

	* Merge from mainline; tag is carlton_dictionary-20021223-merge.
@
text
@d1668 1
a1668 1
 -environment-directory [ -r ] [ @@var{pathdir} ]+
d1671 1
a1671 16
Add directories @@var{pathdir} to beginning of search path for source files.
If the @@samp{-r} option is used, the search path is reset to the default
search path.  If directories @@var{pathdir} are supplied in addition to the 
@@samp{-r} option, the search path is first reset and then addition
occurs as normal.
Multiple directories may be specified, separated by blanks.  Specifying 
multiple directories in a single command
results in the directories added to the beginning of the
search path in the same order they were presented in the command.
If blanks are needed as
part of a directory name, double-quotes should be used around
the name.  In the command output, the path will show up separated
by the system directory-separator character.  The directory-seperator 
character must not be used
in any directory name.
If no directories are specified, the current search path is displayed.
d1682 1
a1682 10
^done,source-path="/kwikemart/marge/ezannoni/flathead-dev/devo/gdb:$cdir:$cwd"
(@@value{GDBP})
-environment-directory ""
^done,source-path="/kwikemart/marge/ezannoni/flathead-dev/devo/gdb:$cdir:$cwd"
(@@value{GDBP})
-environment-directory -r /home/jjohnstn/src/gdb /usr/src
^done,source-path="/home/jjohnstn/src/gdb:/usr/src:$cdir:$cwd"
(@@value{GDBP})
-environment-directory -r
^done,source-path="$cdir:$cwd"
d1693 1
a1693 1
 -environment-path [ -r ] [ @@var{pathdir} ]+
a1696 17
If the @@samp{-r} option is used, the search path is reset to the original
search path that existed at gdb start-up.  If directories @@var{pathdir} are 
supplied in addition to the 
@@samp{-r} option, the search path is first reset and then addition
occurs as normal.
Multiple directories may be specified, separated by blanks.  Specifying 
multiple directories in a single command
results in the directories added to the beginning of the
search path in the same order they were presented in the command.
If blanks are needed as
part of a directory name, double-quotes should be used around
the name.  In the command output, the path will show up separated
by the system directory-separator character.  The directory-seperator 
character must not be used
in any directory name.
If no directories are specified, the current path is displayed.

d1706 2
a1707 8
-environment-path 
^done,path="/usr/bin"
(@@value{GDBP})
-environment-path /kwikemart/marge/ezannoni/flathead-dev/ppc-eabi/gdb /bin
^done,path="/kwikemart/marge/ezannoni/flathead-dev/ppc-eabi/gdb:/bin:/usr/bin"
(@@value{GDBP})
-environment-path -r /usr/local/bin
^done,path="/usr/local/bin:/usr/bin"
d1732 2
a1733 1
^done,cwd="/kwikemart/marge/ezannoni/flathead-dev/devo/gdb"
@


1.27.8.5
log
@2003-02-07  David Carlton  <carlton@@math.stanford.edu>

	* Merge with mainline; tag is carlton_dictionary-20030207-merge.
@
text
@a2545 27
@@subheading The @@code{-interpreter-exec} Command
@@findex -interpreter-exec

@@subheading Synopsis

@@smallexample
-interpreter-exec @@var{interpreter} @@var{command}
@@end smallexample

Execute the specified @@var{command} in the given @@var{interpreter}.

@@subheading @@value{GDBN} Command

The corresponding @@value{GDBN} command is @@samp{interpreter-exec}.

@@subheading Example

@@smallexample
(@@value{GDBP})
-interpreter-exec console "break main"
&"During symbol reading, couldn't parse type; debugger out of date?.\n"
&"During symbol reading, bad structure-type format.\n"
~"Breakpoint 1 at 0x8074fc6: file ../../src/gdb/main.c, line 743.\n"
^done
(@@value{GDBP})
@@end smallexample

d3759 2
a3760 2
 numchild=@@var{n},children=[@@{name=@@var{name},
 numchild=@@var{n},type=@@var{type}@@},@@r{(repeats N times)}]
@


1.27.8.6
log
@2003-04-16  David Carlton  <carlton@@bactrian.org>

	* Merge with mainline; tag is carlton_dictionary-20030416-merge.
@
text
@@


1.26
log
@Fix PR gdb/287.  From wiz at danbala.  Then->than and typos.
@
text
@d11 1
a11 1
@@c  Copyright 2000, 2001 Free Software Foundation, Inc.
d39 1
a39 1
@@c  Copyright @@copyright{} 2000, 2001 Free Software Foundation, Inc.
d358 1
a358 1

d381 3
a383 1
<- ~3\n
d401 1
a401 1
<- error,"Rubbish not found"
@


1.26.6.1
log
@Merge with trunk.
@
text
@d11 1
a11 1
@@c  Copyright 2000, 2001, 2002 Free Software Foundation, Inc.
d39 1
a39 1
@@c  Copyright @@copyright{} 2000, 2001, 2002 Free Software Foundation, Inc.
d358 1
a358 1
@@c Ummm... There is no "-stop" command. This assumes async, no?
d381 1
a381 3
<- &"print 1+2\n"
<- ~"$1 = 3\n"
<- ^done
d399 1
a399 1
<- ^error,msg="Undefined MI command: rubbish"
@


1.26.8.1
log
@        * mi-cmd-break.c (breakpoint_notify): Only query the breakpoint
        for user breakpoints.
        (mi_cmd_break_insert): Only reset event handlers for MI0 and MI1
        interpreters.
        (mi_cmd_break_watch): Reset uiout output to clear watchpoint
        query. This is only used for MI0 and MI1.

        * mi-console.h (mi_console_file_new): Add "quote" parameter.
        * mi_console.c (struct mi_console_file): Add "quote".
        (mi_console_file_new): Add "quote" parameter.
        (mi_console_raw_packet): Use the quote character specified in
        mi_console_file_new, instead of assuming it is '"'.

        * mi-interp.c (mi_event_channel): New channel for event notifications.
        (mi_interpreter_init): Make static.
        Set event handlers.
        (mi_interpreter_resume): Make static.
        Deal with MI version bump.
        (mi_interpreter_suspend): Make static.
        (mi_interpreter_delete): Ditto.
        (mi_do_one_event): Ditto.
        (mi_cmd_exec_continuation): Ditto.
        (mi_interp_query_hook): Ditto.
        (mi_interp_read_one_line_hook): Ditto.
        (_initialize_mi_interp): Create explicit mi1 interp.

        * mi-events.c (notify_event): New helper function.
        (mi_create_breakpoint, mi_modify_breakpoint, mi_delete_breakpoint,
        mi_create_tracepoint, mi_modify_tracepoint, mi_delete_tracepoint,
        mi_architecture_changed): New functions.

        * mi.h: Add declarations for mi_create_breakpoint, mi_modify_breakpoint,
        mi_delete_breakpoint, mi_create_tracepoint, mi_modify_tracepoint,
        mi_delete_tracepoint, mi_architecture_changed, mi_stdout, mi_stderr,
        mi_stdtarg, mi_stdlog, and mi_eventchannel.

        * mi-main.c (captured_mi_execute_command): Deal with mi version
        bump.
        (mi_load_progress): Ditto.

        * gdbmi.texinfo: Expand notify-async-output to include GDB events.
        Update all examples to show breakpoint events and
        remove redundant breakpoint info on "-break-insert" and "-break-watch".
        The event now supplies everything that is needed.
@
text
@d11 1
a11 1
@@c  Copyright 2000, 2001, 2002 Free Software Foundation, Inc.
d39 1
a39 1
@@c  Copyright @@copyright{} 2000, 2001, 2002 Free Software Foundation, Inc.
d316 2
a317 2
@@var{notify-async-output} contains supplementary information (events) that the
client should handle (e.g., a new breakpoint was inserted).  All notify
d358 1
a358 1
@@c Ummm... There is no "-stop" command. This assumes async, no?
d381 1
a381 3
<- &"print 1+2\n"
<- ~"$1 = 3\n"
<- ^done
d389 1
a389 2
<- =breakpoint-create,number="3"
<- ^done
d399 1
a399 1
<- ^error,msg="Undefined MI command: rubbish"
d495 1
a495 1
The following is a preliminary list of out-of-band records.
d498 1
a498 23
@@item stop
The inferior stopped.
@@c Need an example!

@@item breakpoint-create
@@itemx breakpoint-modify
@@itemx breakpoint-delete
@@itemx tracepoint-create
@@itemx tracepoint-modify
@@itemx tracepoint-delete
A breakpoint or tracepoint was created, modified, or deleted. In all cases,
the event will also report the @@code{number} of the affected breakpoint/tracepoint:
@@smallexample
=breakpoint-create,number="1"
@@end smallexample

@@item architecture-changed
This event indicates that @@value{GDBN} has changed architectures, and that
the user interface may need to update certain views that are architecture-dependent,
such as registers.
@@smallexample
=architecture-changed
@@end smallexample
d577 1
a577 2
=breakpoint-create,number="1"
^done
d580 1
a580 1
=breakpoint-modify,number="1"
a628 1
=breakpoint-modify,number="1"
a665 1
=breakpoint-delete,number="1"
a700 1
=breakpoint-modify,number="2"
a735 1
=breakpoint-modify,number="2"
d811 18
d839 1
a839 2
=breakpoint-create,number="1"
^done
d842 1
a842 2
=breakpoint-create,number="2"
^done
d859 1
a859 2
=breakpoint-create,number="1"
^done
d968 1
a968 2
=breakpoint-create,number="2"
^done
d985 1
a985 2
=breakpoint-create,number="5"
^done
d1010 1
a1010 2
=breakpoint-create,number="2"
^done
@


1.26.8.2
log
@        * gdbmi.texinfo: Document selected-frame-changed, register-update,
        and context-changed events.
@
text
@a523 21

@@item register-update
A register has been changed in the inferior. The event will include the
@@code{number} of the register that the UI needs to update.
@@smallexample
=register-changed,number="3"
@@end smallexample

@@item selected-frame-level-changed
This event is sent whenever the user changes @@value{GDBN}'s selected frame.
The event will include the newly selected frame level.
@@smallexample
=selected-frame-level-changed,level="3"
@@end smallexample

@@item context-changed
The user has changed @@value{GDBN}'s current thread. The event will include
the newly selected thread number.
@@smallexample
=context-changed,thread="2"
@@end smallexample
@


1.26.8.3
log
@        * gdbmi.texinfo (-data-list-register-names): Document "-numbers"
        option.
@
text
@d1342 1
a1342 1
 -data-list-register-names [ [ -numbers ] ( @@var{regno} )+ ]
a1350 3

When the "-numbers" option is used, it will return the list of register
numbers in addition to the register names.
@


1.26.8.4
log
@        * gdbmi.texinfo: Document the interpreter-exec command.
@
text
@a2539 28
@@subheading The @@code{-interpreter-exec} Command
@@findex -interpreter-exec

@@subheading Synopsis

@@smallexample
-interpreter-exec @@var{interpreter} @@var{command}
@@end smallexample

Execute the specified @@var{command} in the given @@var{interpreter}.

@@subheading @@value{GDBN} Command

The corresponding @@value{GDBN} command is @@samp{interpreter-exec}.

@@subheading Example

@@smallexample
(@@value{GDBP})
-interpreter-exec console "break main"
&"During symbol reading, couldn't parse type; debugger out of date?.\n"
&"During symbol reading, bad structure-type format.\n"
~"Breakpoint 1 at 0x8074fc6: file ../../src/gdb/main.c, line 743.\n"
=breakpoint-create,number="1"
^done
(@@value{GDBP})
@@end smallexample

@


1.26.8.5
log
@Merge with kseitz_interps-20020930-merge.
@
text
@a3856 3
Note that one must invoke @@code{-var-list-children} for a variable
before the value of a child variable can be evaluated.

@


1.26.8.6
log
@merge from mainline
@
text
@d2077 1
a2077 1
111^done,frame=@@{level="0",func="callee3",
d2712 1
a2712 1
frame=@@{level="0",addr="0x00010734",func="callee4",
d2714 1
a2714 1
frame=@@{level="1",addr="0x0001076c",func="callee3",
d2716 1
a2716 1
frame=@@{level="2",addr="0x0001078c",func="callee2",
d2718 1
a2718 1
frame=@@{level="3",addr="0x000107b4",func="callee1",
d2720 1
a2720 1
frame=@@{level="4",addr="0x000107e0",func="main",
d2802 1
a2802 1
[frame=@@{level="0",addr="0x0001076c",func="foo",
d2804 1
a2804 1
frame=@@{level="1",addr="0x000107a4",func="foo",
d2806 1
a2806 1
frame=@@{level="2",addr="0x000107a4",func="foo",
d2808 1
a2808 1
frame=@@{level="3",addr="0x000107a4",func="foo",
d2810 1
a2810 1
frame=@@{level="4",addr="0x000107a4",func="foo",
d2812 1
a2812 1
frame=@@{level="5",addr="0x000107a4",func="foo",
d2814 1
a2814 1
frame=@@{level="6",addr="0x000107a4",func="foo",
d2816 1
a2816 1
frame=@@{level="7",addr="0x000107a4",func="foo",
d2818 1
a2818 1
frame=@@{level="8",addr="0x000107a4",func="foo",
d2820 1
a2820 1
frame=@@{level="9",addr="0x000107a4",func="foo",
d2835 1
a2835 1
[frame=@@{level="3",addr="0x000107a4",func="foo",
d2837 1
a2837 1
frame=@@{level="4",addr="0x000107a4",func="foo",
d2839 1
a2839 1
frame=@@{level="5",addr="0x000107a4",func="foo",
d2850 1
a2850 1
[frame=@@{level="3",addr="0x000107a4",func="foo",
d3513 1
a3513 1
frame=@@{level="0",func="vprintf",
@


1.25
log
@Eliminate texinfo 3.12 hacks.
@
text
@d1473 1
a1473 1
(returned as @@samp{total-bytes}).  Should less then the requested number
@


1.24
log
@Fix the application of GFDL in the Copyright notice.
@
text
@d112 5
a123 10

@@c When these are implemented, they should be moved to be between Misc and
@@c Stack Manipulation in the above menu.  They are now outside the menu
@@c because makeinfo 3.12 barfs if it sees @@ignore or @@comments in the
@@c middle of a menu.
@@ignore
* GDB/MI Kod Commands::
* GDB/MI Memory Overlay Commands::
* GDB/MI Signal Handling Commands::
@@end ignore
@


1.23
log
@For MI>0, output full breakpoint table header information.  Output the
breakpoint table body as a list.
@
text
@d16 2
a17 3
@@c  any later version published by the Free Software Foundation; with the
@@c  Invariant Sections being ``The GDB/MI Interface'' and ``GGDB/MI
@@c  Command Syntax'', with the Front-Cover texts being ``A GNU Manual,''
d43 2
a44 3
@@c  any later version published by the Free Software Foundation; with the
@@c  Invariant Sections being ``The GDB/MI Interface'' and ``GGDB/MI
@@c  Command Syntax'', with the Front-Cover texts being ``A GNU Manual,''
a3815 4

@@c Local variables:
@@c change-log-default-name: "ChangeLog-mi"
@@c End:
@


1.23.4.1
log
@Fix the use of GFDL in the Copyright notice.
@
text
@d16 3
a18 2
@@c  any later version published by the Free Software Foundation; with no
@@c  Invariant Sections, with the Front-Cover Texts being ``A GNU Manual,''
d44 3
a46 2
@@c  any later version published by the Free Software Foundation; with no
@@c  Invariant Sections, with the Front-Cover texts being ``A GNU Manual,''
d3818 4
@


1.22
log
@delete reference to query output
@
text
@d591 8
a598 2
^done,BreakpointTable=@@{hdr=@@{"Num","Type","Disp","Enb","Address","What"@@},
bkpt=@@{number="1",type="breakpoint",disp="keep",enabled="y",
d600 1
a600 1
ignore="3"@@}@@}
d639 8
a646 2
^done,BreakpointTable=@@{hdr=@@{"Num","Type","Disp","Enb","Address","What"@@},
bkpt=@@{number="1",type="breakpoint",disp="keep",enabled="y",
d648 1
a648 1
times="0",ignore="3"@@}@@}
d676 8
a683 1
^done,BreakpointTable=@@{@@}
d711 9
a719 3
^done,BreakpointTable=@@{hdr=@@{"Num","Type","Disp","Enb","Address","What"@@},
bkpt=@@{number="2",type="breakpoint",disp="keep",enabled="n",
addr="0x000100d0",func="main",file="hello.c",line="5",times="0"@@}@@}
d746 9
a754 3
^done,BreakpointTable=@@{hdr=@@{"Num","Type","Disp","Enb","Address","What"@@},
bkpt=@@{number="2",type="breakpoint",disp="keep",enabled="y",
addr="0x000100d0",func="main",file="hello.c",line="5",times="0"@@}@@}
d852 8
a859 2
^done,BreakpointTable=@@{hdr=@@{"Num","Type","Disp","Enb","Address","What"@@},
bkpt=@@{number="1",type="breakpoint",disp="keep",enabled="y",
d862 1
a862 1
addr="0x00010774",func="foo",file="recursive2.c",line="11",times="0"@@}@@}
d901 1
a901 1
field is an empty list.
d912 8
a919 2
^done,BreakpointTable=@@{hdr=@@{"Num","Type","Disp","Enb","Address","What"@@},
bkpt=@@{number="1",type="breakpoint",disp="keep",enabled="y",
d922 1
a922 1
addr="0x00010114",func="foo",file="hello.c",line="13",times="0"@@}@@}
d931 8
a938 1
^done,BreakpointTable=@@{@@}
d1020 8
a1027 2
^done,BreakpointTable=@@{hdr=@@{"Num","Type","Disp","Enb","Address","What"@@},
bkpt=@@{number="1",type="breakpoint",disp="keep",enabled="y",
d1031 1
a1031 1
enabled="y",addr="",what="C",times="0"@@}@@}
d1041 8
a1048 2
^done,BreakpointTable=@@{hdr=@@{"Num","Type","Disp","Enb","Address","What"@@},
bkpt=@@{number="1",type="breakpoint",disp="keep",enabled="y",
d1052 1
a1052 1
enabled="y",addr="",what="C",times="-5"@@}@@}
d1062 8
a1069 2
^done,BreakpointTable=@@{hdr=@@{"Num","Type","Disp","Enb","Address","What"@@},
bkpt=@@{number="1",type="breakpoint",disp="keep",enabled="y",
d1071 1
a1071 1
file="../../../devo/gdb/testsuite/gdb.mi/basics.c",line="8",times="1"@@}@@}
@


1.21
log
@* mi-cmd-stack.c (list_args_or_locals): Output a list of "args" or
"locals" entries.
* gdbmi.texinfo (stack-list-locals, stack-list-arguments)
(exec-interrupt, target-select, thread-select): Update
documentation.
* mi-stack.exp: Update.  Output for args=... and
locals=... changed to a list.
@
text
@a296 8
In addition, the following are still being developed:

@@table @@code
@@item @@var{query}
This action is currently undefined.
@@end table

@@noindent
@


1.20
log
@* mi-cmd-stack.c (mi_cmd_stack_list_frames): Output a list of
"stack" entries.
(mi_cmd_stack_list_args): Ditto for "stack-args".
* gdbmi.texinfo (stack-list-frames, stack-list-arguments): Update
documentation.
(GDB/MI Stack Manipulation Commands): Fix section title.  Was
Stack Manipulation Commands in GDB/MI.
* mi-stack.exp: Update. Output for stack=..., args=... and
stack-args=... changed to a list.
@
text
@d1878 1
a1878 1
frame=@@{addr="0x00010140",func="foo",args=@@{@@},file="try.c",line="13"@@}
d2603 5
a2607 5
frame=@@{level="0",args=@@{@@}@@},
frame=@@{level="1",args=@@{name="strarg"@@}@@},
frame=@@{level="2",args=@@{name="intarg",name="strarg"@@}@@},
frame=@@{level="3",args=@@{name="intarg",name="strarg",name="fltarg"@@}@@},
frame=@@{level="4",args=@@{@@}@@}]
d2612 1
a2612 1
frame=@@{level="0",args=@@{@@}@@},
d2614 2
a2615 2
 args=@@{@@{name="strarg",value="0x11940 \"A string argument.\""@@}@@}@@},
frame=@@{level="2",args=@@{
d2617 2
a2618 2
@@{name="strarg",value="0x11940 \"A string argument.\""@@}@@}@@},
@@{frame=@@{level="3",args=@@{
d2621 2
a2622 2
@@{name="fltarg",value="3.5"@@}@@}@@},
frame=@@{level="4",args=@@{@@}@@}]
d2625 1
a2625 1
^done,stack-args=[frame=@@{level="2",args=@@{name="intarg",name="strarg"@@}@@}]
d2629 2
a2630 2
args=@@{@@{name="intarg",value="2"@@},
@@{name="strarg",value="0x11940 \"A string argument.\""@@}@@}@@}]
d2755 1
a2755 1
^done,locals=@@{name="A",name="B",name="C"@@}
d2758 2
a2759 2
^done,locals=@@{@@{name="A",value="1"@@},@@{name="B",value="2"@@},
  @@{name="C",value="3"@@}@@}
d3263 1
a3263 1
  args=@@{@@var{arg list}@@}
d3275 1
a3275 1
^connected,addr="0xfe00a300",func="??",args=@@{@@}
d3391 2
a3392 2
args=@@{@@{name="format",value="0x8048e9c \"%*s%c %d %c\\n\""@@},
@@{name="arg",value="0x2"@@}@@},file="vprintf.c",line="31"@@}
@


1.19
log
@Unscramble two merged patches.  This puts memory lists back to normal.
@
text
@d2496 1
a2496 1
@@section Stack manipulation commands in @@sc{gdb/mi}
d2588 1
a2588 1
stack=@@{
d2598 1
a2598 1
file="../../../devo/gdb/testsuite/gdb.mi/basics.c",line="32"@@}@@}
d2602 1
a2602 1
stack-args=@@{
d2607 1
a2607 1
frame=@@{level="4",args=@@{@@}@@}@@}
d2611 1
a2611 1
stack-args=@@{
d2622 1
a2622 1
frame=@@{level="4",args=@@{@@}@@}@@}
d2625 1
a2625 1
^done,stack-args=@@{frame=@@{level="2",args=@@{name="intarg",name="strarg"@@}@@}@@}
d2628 1
a2628 1
^done,stack-args=@@{frame=@@{level="2",
d2630 1
a2630 1
@@{name="strarg",value="0x11940 \"A string argument.\""@@}@@}@@}@@}
d2679 1
a2679 1
@@{frame=@@{level="0 ",addr="0x0001076c",func="foo",
d2702 1
a2702 1
  file="recursive2.c",line="4"@@}@@}
d2712 1
a2712 1
@@{frame=@@{level="3 ",addr="0x000107a4",func="foo",
d2717 1
a2717 1
  file="recursive2.c",line="14"@@}@@}
d2727 2
a2728 2
@@{frame=@@{level="3 ",addr="0x000107a4",func="foo",
  file="recursive2.c",line="14"@@}@@}
@


1.18
log
@* stack.c (print_frame): For ui_out, output a list of arguments.
Update all tests.  Update doco.
@
text
@d1446 4
a1449 4
prev-page="0x0000138a",memory=@@{
@@{addr="0x00001390",data=@@{"0x00","0x01"@@}@@},
@@{addr="0x00001392",data=@@{"0x02","0x03"@@}@@},
@@{addr="0x00001394",data=@@{"0x04","0x05"@@}@@}@@}
d1461 2
a1462 2
next-page="0x00001512",prev-page="0x0000150e",memory=@@{
@@{addr="0x00001510",data=@@{"128"@@}@@}@@}
d1475 9
a1483 9
next-page="0x000013c0",prev-page="0x00001380",memory=@@{
@@{addr="0x000013a0",data=@@{"0x10","0x11","0x12","0x13"@@},ascii="xxxx"@@},
@@{addr="0x000013a4",data=@@{"0x14","0x15","0x16","0x17"@@},ascii="xxxx"@@},
@@{addr="0x000013a8",data=@@{"0x18","0x19","0x1a","0x1b"@@},ascii="xxxx"@@},
@@{addr="0x000013ac",data=@@{"0x1c","0x1d","0x1e","0x1f"@@},ascii="xxxx"@@},
@@{addr="0x000013b0",data=@@{"0x20","0x21","0x22","0x23"@@},ascii=" !\"#"@@},
@@{addr="0x000013b4",data=@@{"0x24","0x25","0x26","0x27"@@},ascii="$%&'"@@},
@@{addr="0x000013b8",data=@@{"0x28","0x29","0x2a","0x2b"@@},ascii="()*+"@@},
@@{addr="0x000013bc",data=@@{"0x2c","0x2d","0x2e","0x2f"@@},ascii=",-./"@@}@@}
@


1.17
log
@Update data-read-memory so that it outputs lists.
@
text
@d939 1
a939 1
frame=@@{func="main",args=@@{@@},file="recursive2.c",line="5"@@}
d956 1
a956 1
frame=@@{func="callee4",args=@@{@@},
d962 2
a963 2
frame=@@{func="callee3",args=@@{@@{name="strarg",
value="0x11940 \"A string argument.\""@@}@@},
d989 1
a989 1
frame=@@{func="callee4",args=@@{@@},
d1003 2
a1004 2
frame=@@{func="callee3",args=@@{@@{name="strarg",
value="0x11940 \"A string argument.\""@@}@@},
d1234 1
a1234 1
args=@@{@@},file="try.c",line="5"@@}
d1446 4
a1449 4
prev-page="0x0000138a",memory=[
@@{addr="0x00001390",data=["0x00","0x01"]@@},
@@{addr="0x00001392",data=["0x02","0x03"]@@},
@@{addr="0x00001394",data=["0x04","0x05"]@@}]
d1461 2
a1462 2
next-page="0x00001512",prev-page="0x0000150e",memory=[
@@{addr="0x00001510",data=["128"]@@}]
d1475 9
a1483 9
next-page="0x000013c0",prev-page="0x00001380",memory=[
@@{addr="0x000013a0",data=["0x10","0x11","0x12","0x13"],ascii="xxxx"@@},
@@{addr="0x000013a4",data=["0x14","0x15","0x16","0x17"],ascii="xxxx"@@},
@@{addr="0x000013a8",data=["0x18","0x19","0x1a","0x1b"],ascii="xxxx"@@},
@@{addr="0x000013ac",data=["0x1c","0x1d","0x1e","0x1f"],ascii="xxxx"@@},
@@{addr="0x000013b0",data=["0x20","0x21","0x22","0x23"],ascii=" !\"#"@@},
@@{addr="0x000013b4",data=["0x24","0x25","0x26","0x27"],ascii="$%&'"@@},
@@{addr="0x000013b8",data=["0x28","0x29","0x2a","0x2b"],ascii="()*+"@@},
@@{addr="0x000013bc",data=["0x2c","0x2d","0x2e","0x2f"],ascii=",-./"@@}]
d1794 1
a1794 1
*stopped,reason="breakpoint-hit",bkptno="2",frame=@@{func="foo",args=@@{@@},
d1826 1
a1826 1
*stopped,reason="function-finished",frame=@@{func="main",args=@@{@@},
d1840 1
a1840 1
args=@@{@@{name="a",value="1"@@},@@{name="b",value="9"@@}@@},
d1975 1
a1975 1
frame=@@{func="callee4",args=@@{@@},
d1983 2
a1984 2
args=@@{@@{name="strarg",
value="0x11940 \"A string argument.\""@@}@@},
d2018 1
a2018 1
frame=@@{func="main",args=@@{@@},file="recursive2.c",line="4"@@}
d2070 2
a2071 2
frame=@@{func="foo",args=@@{@@{name="a",value="10"@@},
@@{name="b",value="0"@@}@@},file="recursive2.c",line="11"@@}
d2114 1
a2114 1
frame=@@{func="foo",args=@@{@@},file="try.c",line="10"@@}
d2121 1
a2121 1
frame=@@{addr="0x000100f4",func="foo",args=@@{@@},file="try.c",line="10"@@}
d2152 1
a2152 1
*stopped,reason="location-reached",frame=@@{func="main",args=@@{@@},
@


1.16
log
@For data-list-register-values output a list of register values.
@
text
@d1446 4
a1449 4
prev-page="0x0000138a",memory=@@{
@@{addr="0x00001390",data=@@{"0x00","0x01"@@}@@},
@@{addr="0x00001392",data=@@{"0x02","0x03"@@}@@},
@@{addr="0x00001394",data=@@{"0x04","0x05"@@}@@}@@}
d1461 2
a1462 2
next-page="0x00001512",prev-page="0x0000150e",memory=@@{
@@{addr="0x00001510",data=@@{"128"@@}@@}@@}
d1475 9
a1483 9
next-page="0x000013c0",prev-page="0x00001380",memory=@@{
@@{addr="0x000013a0",data=@@{"0x10","0x11","0x12","0x13"@@},ascii="xxxx"@@},
@@{addr="0x000013a4",data=@@{"0x14","0x15","0x16","0x17"@@},ascii="xxxx"@@},
@@{addr="0x000013a8",data=@@{"0x18","0x19","0x1a","0x1b"@@},ascii="xxxx"@@},
@@{addr="0x000013ac",data=@@{"0x1c","0x1d","0x1e","0x1f"@@},ascii="xxxx"@@},
@@{addr="0x000013b0",data=@@{"0x20","0x21","0x22","0x23"@@},ascii=" !\"#"@@},
@@{addr="0x000013b4",data=@@{"0x24","0x25","0x26","0x27"@@},ascii="$%&'"@@},
@@{addr="0x000013b8",data=@@{"0x28","0x29","0x2a","0x2b"@@},ascii="()*+"@@},
@@{addr="0x000013bc",data=@@{"0x2c","0x2d","0x2e","0x2f"@@},ascii=",-./"@@}@@}
@


1.15
log
@Output register-names as a list.
@
text
@d1329 2
a1330 2
^done,register-values=@@{@@{number="64",value="0xfe00a300"@@},
@@{number="65",value="0x00029002"@@}@@}
d1333 1
a1333 1
^done,register-values=@@{@@{number="0",value="0xfe0043c8"@@},
d1368 1
a1368 1
@@{number="69",value="0x20002b03"@@}@@}
@


1.14
log
@data-list-changed-registers outputs a list of registers.
@
text
@d1256 3
a1258 1
names of the registers corresponding to the arguments.
d1272 1
a1272 1
^done,register-names=@@{"r0","r1","r2","r3","r4","r5","r6","r7",
d1278 1
a1278 1
"pc","ps","cr","lr","ctr","xer"@@}
d1281 1
a1281 1
^done,register-names=@@{"r1","r2","r3"@@}
@


1.13
log
@Change mi/data-disassemble command output to a list ([]) instead of
({}).
@
text
@d1237 1
a1237 1
^done,changed-registers=@@{"0","1","2","4","5","6","7","8","9",
d1239 1
a1239 1
"24","25","26","27","28","30","31","64","65","66","67","69"@@}
@


1.12
log
@* gdbmi.texinfo (GDB/MI Output Syntax): Add tuples and lists to
syntax.
(GDB/MI Draft Changes to Output Syntax): Delete section.
@
text
@d1096 1
a1096 1
asm_insns=@@{
d1106 1
a1106 1
inst="or  %o2, 0x168, %o4\t! 0x11968 <_lib_version+48>"@@}@@}
d1115 1
a1115 1
^done,asm_insns=@@{
d1124 1
a1124 1
@@{address="0x00010820",func-name="main",offset="100",inst="restore "@@}@@}
d1133 1
a1133 1
^done,asm_insns=@@{
d1139 1
a1139 1
inst="sethi  %hi(0x11800), %o2"@@}@@}
d1148 1
a1148 1
^done,asm_insns=@@{
d1151 1
a1151 1
  testsuite/gdb.mi/basics.c",line_asm_insn=@@{
d1153 1
a1153 2
inst="save  %sp, -112, %sp"@@}@@}@@},

d1156 1
a1156 1
  testsuite/gdb.mi/basics.c",line_asm_insn=@@{
d1160 1
a1160 1
inst="sethi  %hi(0x11800), %o2"@@}@@}@@}@@}
@


1.11
log
@	* gdbint.texinfo: Change Permissions to GFDL.  Update Copyright.

	* gdbgui.texinfo: Change Permissions to GFDL.  Update Copyright.
	Replace "GDB" with "@@value{GDBN}".  Fix markup.

	* annotate.texi: Change Permissions to GFDL.  Update Copyright.

	* gdb.texinfo: Change Permissions to GFDL.  Update Copyright.

	* gdbmi.texinfo: Update copyright.  Change Permissions to GFDL.
@
text
@a119 1
* GDB/MI Draft Changes to Output Syntax::
d259 4
a262 1
@@code{[ @@var{string} "=" ] @@var{value}}
d265 1
a265 1
@@code{@@var{const} | "@@{" @@var{result} ( "," @@var{result} )* "@@}"}
d270 7
d351 7
a362 3
@@xref{GDB/MI Draft Changes to Output Syntax, , @@sc{gdb/mi} Draft Changes
to Output Syntax}, for proposed revisions to the current output syntax.

a3756 158

@@c %%%%%%%%%%%%%%%%%%%%%%%%%%%% SECTION %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@@node GDB/MI Draft Changes to Output Syntax
@@section  @@sc{gdb/mi} Draft Changes to Output Syntax

@@cindex draft changes to output syntax of @@sc{gdb/mi}
@@cindex @@sc{gdb/mi}, draft changes to output syntax

One problem identified in the existing @@sc{gdb/mi} output syntax was the
difficulty in differentiating between a tuple such as:

@@example
@@{number="1",type="breakpoint",disp="keep",enabled="y"@@}
@@end example

where each value has a unique label, and a list such as:

@@example
@@{"1","2","4"@@}
@@{bp="1",bp="2",bp="4"@@}
@@end example

where values are un-labeled or the label is duplicated.

What follows is a draft revision to the output specification that
addresses this problem.

The output from @@sc{gdb/mi} consists of zero or more out-of-band records
optionally followed by a single result record, the result record being
for the most recent command input.  The sequence is terminated by
@@samp{(@@value{GDBP})}.

Asynchronous @@sc{gdb/mi} output is similar.

Each output record directly associated with an input command is prefixed
by the input command's @@code{@@var{token}}.

@@table @@code
@@item @@var{output} @@expansion{}
@@{ @@var{out-of-band-record} @@} @@code{[} @@var{result-record} @@code{]} "@@code{(@@value{GDBP})}" @@var{nl}

@@item @@var{result-record} @@expansion{}
@@code{[} @@var{token} @@code{]} "^" @@var{result-class} @@{ "," @@var{result} @@} @@var{nl}

@@item @@var{out-of-band-record} @@expansion{}
@@var{async-record} @@code{|} @@var{stream-record}

@@item @@var{async-record} @@expansion{}
@@var{exec-async-output} @@code{|} @@var{status-async-output} @@code{|} @@var{notify-async-output}

@@item @@var{exec-async-output} @@expansion{}
@@code{[} @@var{token} @@code{]} "*" @@var{async-output}

@@item @@var{status-async-output} @@expansion{}
@@code{[} @@var{token} @@code{]} "+" @@var{async-output}

@@item @@var{notify-async-output} @@expansion{}
@@code{[} @@var{token} @@code{]} "=" @@var{async-output}

@@item @@var{async-output} @@expansion{}
@@var{async-class} @@{ "," @@var{result} @@} @@var{nl}

@@item @@var{result-class} @@expansion{}
"done" @@code{|} "running" @@code{|} "connected" @@code{|} "error" @@code{|} "exit"

@@item @@var{async-class} @@expansion{}
"stopped" @@code{|} @@emph{others depending on need as still in development}

@@item @@var{result} @@expansion{}
@@var{string} "=" @@var{value}

@@item @@var{value} @@expansion{}
@@var{c-string} @@code{|} @@var{tupple} @@code{|} @@var{list}

@@item @@var{tupple} @@expansion{}
"@@{@@}" @@code{|} "@@{" @@var{result} @@{ "," @@var{result} @@} "@@}"

@@item @@var{list} @@expansion{}
"@@code{[]}" @@code{|} "@@code{[}" @@var{value} @@{ "," @@var{value} @@} "@@code{]}"

@@item @@var{string} @@expansion{}
@@emph{[-A-Za-z\.0-9_]*}

@@item @@var{c-string} @@expansion{}
@@emph{See the input specification}

@@item @@var{stream-record} @@expansion{}
@@var{console-stream-output} @@code{|} @@var{target-stream-output} @@code{|} @@var{log-stream-output}

@@item @@var{console-stream-output} @@expansion{}
"~" @@var{c-string}

@@item @@var{target-stream-output} @@expansion{}
"@@@@" @@var{c-string}

@@item @@var{log-stream-output} @@expansion{}
"&" @@var{c-string}

@@item @@var{nl} @@expansion{}
CR @@code{|} CR-LF

@@item @@var{token} @@expansion{}
"any sequence of digits"

@@end table

In addition, the following are still being developed.

@@table @@code

@@item @@var{query}
This action is currently undefined.

@@end table

Notes:

@@itemize @@bullet

@@item
All output sequences end in a single line containing a period.

@@item
The @@code{@@var{token}} is from the corresponding request.  If an execution
command is interrupted by the @@code{-exec-interrupt} command, the token
associated with the `*stopped' message is the one of the original
execution command, not the one of the interrupt command.

@@item
@@var{status-async-output} contains on-going status information about the
progress of a slow operation.  It can be discarded.  All status output is
prefixed by the prefix @@samp{+}.

@@item
@@var{exec-async-output} contains asynchronous state change on the target
(stopped, started, disappeared).  All async output is prefixed by
the prefix @@samp{*}.

@@item
@@var{notify-async-output} contains supplementary information that the
client should handle (new breakpoint information).  All notify output is
prefixed by the prefix @@samp{=}.

@@item
@@var{console-stream-output} is output that should be displayed as is, in the
console.  It is the textual response to a CLI command.  All the console
output is prefixed by the prefix @@samp{~}.

@@item
@@var{target-stream-output} is the output produced by the target program.
All the target output is prefixed by the prefix @@samp{@@@@}.

@@item
@@var{log-stream-output} is output text coming from @@value{GDBN}'s
internals, for instance messages that should be displayed as part of an
error log.  All the log output is prefixed by the prefix @@samp{&}.

@@end itemize
@


1.10
log
@Update/correct copyright notices.
@
text
@d11 1
a11 1
@@c  Copyright 2000 Free Software Foundation, Inc.
d14 10
a23 18
@@c  Permission is granted to make and distribute verbatim copies of this
@@c  manual provided the copyright notice and this permission notice are
@@c  preserved on all copies.

@@c  @@ignore
@@c  Permission is granted to process this file through TeX and print the
@@c  results, provided the printed document carries copying permission notice
@@c  identical to this one except for the removal of this paragraph (this
@@c  paragraph not being relevant to the printed manual).

@@c  @@end ignore
@@c  Permission is granted to copy and distribute modified versions of this
@@c  manual under the conditions for verbatim copying, provided also that the
@@c  entire resulting derived work is distributed under the terms of a
@@c  permission notice identical to this one.

@@c  Permission is granted to copy and distribute translations of this manual
@@c  into another language, under the above conditions for modified versions.
d31 2
a32 2
@@c  @@subtitle Version 0.2
@@c  @@subtitle Feb 2000
a38 3
@@c  Permission is granted to make and distribute verbatim copies of this
@@c  manual provided the copyright notice and this permission notice are
@@c  preserved on all copies.
d40 12
a51 1
@@c  Copyright @@copyright{} 2000, Free Software Foundation, Inc.
@


1.9
log
@Spelling changes from Dmitry Sivachenko <dima@@Chg.RU>.
@
text
@d11 1
a11 1
@@c  Copyright (C) 2000, Free Software Foundation, Inc.
@


1.8
log
@	* gdbmi.texinfo: Change flathead -> @@sc{gdb/mi}.
	Fix typos and markup mistakes (from Dmitry S.
	Sivachenko <dima@@Chg.RU>).
@
text
@d3481 1
a3481 1
@@multitable @@columnfractions .3 .6
@


1.7
log
@	* gdbmi.texinfo: Change GDB -> @@value{GDBN}, and
	(gdb) -> (@@value{GDBP}).  Fix a few typos and some markup.  From
	Dmitry S. Sivachenko <dima@@Chg.RU>.
@
text
@d161 1
a161 1
@@code{"any sequence of digits"}
d170 1
a170 1
@@emph{any of the operations described in this document}
d183 1
d197 1
a197 1
list. Each option is identified by a leading @@samp{-} (dash) and may be
d221 1
a221 1
terminated by @@samp{(gdb)}.
d287 1
d295 1
d305 2
a306 2
@@var{token} associated with the `*stopped' message is the one of the
original execution command, not the one of the interrupt-command.
d365 1
a365 1
<- (gdb)
d373 1
a373 1
<- (gdb)
d384 1
a384 1
<- (gdb)
d392 1
a392 1
<- (gdb)
d402 1
a402 1
<- (gdb)
d443 2
a444 2
The synchronous operation was successful, @@code{@@var{results}} is the return
value.
d509 1
a509 1
commands is laid out in a fashion similar to this chapter.
d512 1
a512 1
readability. They don't appear in the real output.
d602 1
a602 1
@@subheading The -break-condition Command
d858 2
a859 2
If there are no breakpoints or watchpoints, the BreakpointTable field is
an empty list.
d1059 1
a1059 1
The output for each instruction is composed of two fields:
d1069 1
a1069 1
directely by flathead, i.e. it is not possible to adjust its format.
d1412 1
a1412 1
The address of the next/previous page or row is available in
d1453 1
a1453 1
as eight rows of four columns.  Include a string encoding with @@code{x}
d1627 1
a1627 1
Add directories to beginning of search path for object files.
d1678 1
a1678 1
@@subsubheading Examples:
d2124 1
a2124 1
The reason for stopping in this case will be ``location-reached''.
d3322 1
a3322 1
No threads present, besides the main process.
d3332 1
a3332 1
Several threads.
d3442 2
a3443 2
slightly changed so it could be used through flathead.  This section
describes the flathead operations that will be available and gives some
d3451 4
a3454 4
@@item -gdb-show output-radix
@@item -stack-list-arguments
@@item -stack-list-locals
@@item -stack-select-frame
d3478 1
a3478 1
The following is the complete set of flathead operations defined to
d3485 1
a3485 1
@@item -var-create
d3487 1
a3487 1
@@item -var-delete
d3489 1
a3489 1
@@item -var-set-format
d3491 1
a3491 1
@@item -var-show-format
d3493 1
a3493 1
@@item -var-info-num-children
d3495 1
a3495 1
@@item -var-list-children
d3497 1
a3497 1
@@item -var-info-type
d3499 1
a3499 1
@@item -var-info-expression
d3501 1
a3501 1
@@item -var-show-attributes
d3503 1
a3503 1
@@item -var-evaluate-expression
d3505 1
a3505 1
@@item -var-assign
d3507 1
a3507 1
@@item -var-update
d3532 1
a3532 1
system will generate a string "varNNNNNN'' automatically.  It will be
d3548 1
a3548 1
@@samp{*@@var{addr}-@@var{addr}} -- a memory address range (TBD)
d3551 1
a3551 1
@@samp{$@@var{regname}} -- a CPU register name
d3611 1
a3611 1
 format @@expansion{}
d3645 1
a3645 1
 numchild=@@var{n},type=@@var{type}@@},(repeats N times)@@}
d3730 1
a3730 1
by @@var{name}.  The object must be ``editable''.
d3774 1
a3774 1
``(@@value{GDBP})''.
d3779 1
a3779 1
by the input commands @@code{@@var{token}}.
d3783 1
a3783 1
@@{ @@var{out-of-band-record} @@} @@code{[} @@var{result-record} @@code{]} "(@@value{GDBP})" @@var{nl}
d3868 1
a3868 1
command is interrupted by the -exec-interrupt command, the token
d3870 1
a3870 1
execution command, not the one of the interrupt-command.
d3873 3
a3875 3
@@var{status-async-output} contains on-going status information about the progress
of a slow operation.  It can be discarded. All status output is prefixed by
the prefix `+'.
d3879 2
a3880 2
(stopped, started, disappeared). All async output is prefixed by
the prefix `*'.
d3883 3
a3885 3
@@var{notify-async-output} contains supplementary information that the client should
handle (new breakpoint information). All notify output is prefixed by
the prefix `='.
d3889 2
a3890 2
console.  It is the textual response to a CLI command. All the console
output is prefixed by the prefix ``~''.
d3894 1
a3894 1
All the target output is prefixed by the prefix ``@@@@''.
d3899 1
a3899 1
error log.  All the log output is prefixed by the prefix ``&''.
@


1.6
log
@Typo correction, again from Brian Youmans.
@
text
@d61 1
a61 1
@@sc{gdb/mi} is a line based machine oriented text interface to GDB.  It is
d154 1
a154 1
@@var{cli-command} is any existing GDB CLI command.
d336 1
a336 1
@@var{log-stream-output} is output text coming from GDB's internals, for
d408 1
a408 1
To help users familiar with GDB's existing CLI interface, @@sc{gdb/mi}
d410 1
a410 1
commands can be directly entered into the @@sc{gdb/mi} interface and GDB will
d450 1
a450 1
@@cindex ^error
d460 1
a460 1
GDB internally maintains a number of output streams: the console, the
d466 1
a466 1
Syntax}). In addition to the prefix, each stream record contains a
d480 1
a480 1
The LOG stream contains debugging messages being produced by GDB's
d515 1
a515 1
The motivation for this collection of commands
d528 1
a528 1
 -command @@var{args}...
d531 1
a531 1
@@subsubheading GDB Command
d533 1
a533 1
The corresponding GDB CLI command.
d567 1
a567 1
@@subsubheading GDB Command
d569 1
a569 1
The corresponding GDB command is @@samp{ignore}.
d574 1
a574 1
(gdb)
d577 1
a577 1
(gdb)
d581 1
a581 1
(gdb)
d587 1
a587 1
(gdb)
d599 1
a599 1
@@subheading -break-condition
d613 1
a613 1
@@subsubheading GDB Command
d615 1
a615 1
The corresponding GDB command is @@samp{condition}.
d620 1
a620 1
(gdb)
d623 1
a623 1
(gdb)
d629 1
a629 1
(gdb)
d642 1
a642 1
list. This is obviously reflected in the breakpoint list.
d644 1
a644 1
@@subsubheading GDB command
d646 1
a646 1
The corresponding GDB command is @@samp{delete}.
d651 1
a651 1
(gdb)
d654 1
a654 1
(gdb)
d657 1
a657 1
(gdb)
d672 1
a672 1
@@subsubheading GDB Command
d674 1
a674 1
The corresponding GDB command is @@samp{disable}.
d679 1
a679 1
(gdb)
d682 1
a682 1
(gdb)
d687 1
a687 1
(gdb)
d701 1
a701 1
@@subsubheading GDB Command
d703 1
a703 1
The corresponding GDB command is @@samp{enable}.
d708 1
a708 1
(gdb)
d711 1
a711 1
(gdb)
d716 1
a716 1
(gdb)
d731 1
a731 1
@@subsubheading GDB command
d733 1
a733 1
The corresponding GDB command is @@samp{info break @@var{breakpoint}}.
d789 1
a789 1
where @@var{number} is the GDB number for this breakpoint, @@var{funcname}
d797 1
a797 1
@@subsubheading GDB Command
d799 1
a799 1
The corresponding GDB commands are @@samp{break}, @@samp{tbreak},
d805 1
a805 1
(gdb)
d808 1
a808 1
(gdb)
d811 1
a811 1
(gdb)
d818 1
a818 1
(gdb)
d822 1
a822 1
(gdb)
d851 1
a851 1
@@item times
d858 1
a858 1
@@subsubheading GDB Command
d860 1
a860 1
The corresponding GDB command is @@samp{info break}.
d865 1
a865 1
(gdb)
d872 1
a872 1
(gdb)
d878 1
a878 1
(gdb)
d881 1
a881 1
(gdb)
d905 1
a905 1
@@subsubheading GDB Command
d907 1
a907 1
The corresponding GDB commands are @@samp{watch}, @@samp{awatch}, and
d915 1
a915 1
(gdb)
d918 1
a918 1
(gdb)
d924 1
a924 1
(gdb)
d927 1
a927 1
Setting a watchpoint on a variable local to a function.  GDB will stop
d932 1
a932 1
(gdb)
d935 1
a935 1
(gdb)
d942 1
a942 1
(gdb)
d949 1
a949 1
(gdb)
d957 1
a957 1
(gdb)
d960 1
a960 1
(gdb)
d968 1
a968 1
(gdb)
d975 1
a975 1
(gdb)
d983 1
a983 1
(gdb)
d990 1
a990 1
(gdb)
d996 1
a996 1
(gdb)
d1051 1
a1051 1
disassembly)
d1068 1
a1068 1
@@subsubheading GDB Command
d1077 1
a1077 1
(gdb)
d1091 1
a1091 1
(gdb)
d1106 1
a1106 1
[...]
d1109 1
a1109 1
(gdb)
d1115 1
a1115 1
(gdb)
d1124 1
a1124 1
(gdb)
d1130 1
a1130 1
(gdb)
d1146 1
a1146 1
(gdb)
d1163 1
a1163 1
@@subsubheading GDB Command
d1165 1
a1165 1
The corresponding GDB commands are @@samp{print}, @@samp{output}, and
d1172 1
a1172 1
@@dfn{tokens} described in @@ref{GDB/MI Command Syntax, , @@sc{gdb/mi}
d1179 1
a1179 1
(gdb)
d1182 1
a1182 1
(gdb)
d1185 1
a1185 1
(gdb)
d1188 1
a1188 1
(gdb)
d1203 1
a1203 1
@@subsubheading GDB Command
d1205 2
a1206 2
GDB doesn't have a direct analog for this command; @@code{gdbtk} has the
corresponding command @@samp{gdb_changed_register_list}.
d1213 1
a1213 1
(gdb)
d1217 1
a1217 1
(gdb)
d1220 1
a1220 1
(gdb)
d1225 1
a1225 1
(gdb)
d1243 1
a1243 1
@@subsubheading GDB Command
d1245 1
a1245 1
GDB does not have a command which corresponds to
d1253 1
a1253 1
(gdb)
d1262 1
a1262 1
(gdb)
d1265 1
a1265 1
(gdb)
d1299 1
a1299 1
@@subsubheading GDB Command
d1301 2
a1302 2
The corresponding GDB commands are @@samp{info reg}, @@samp{info all-reg},
and (in @@code{gdbtk}) @@samp{gdb_fetch_registers}.
d1310 1
a1310 1
(gdb)
d1314 1
a1314 1
(gdb)
d1352 1
a1352 1
(gdb)
d1378 2
a1379 2
same as for GDB's @@code{print} command (@@pxref{Output Formats, , Output
formats}).
d1413 1
a1413 1
@@subsubheading GDB Command
d1415 2
a1416 2
The corresponding GDB command is @@samp{x}.  @@code{gdbtk} has
@@samp{gdb_get_mem} memory read.
d1421 1
a1421 1
@@code{-6} bytes.  Format as three rows of two columns. One byte per
d1425 1
a1425 1
(gdb)
d1433 1
a1433 1
(gdb)
d1440 1
a1440 1
(gdb)
d1446 1
a1446 1
(gdb)
d1454 1
a1454 1
(gdb)
d1467 1
a1467 1
(gdb)
d1481 1
a1481 1
@@subsubheading GDB Command
d1483 1
a1483 1
The corresponding GDB command is @@samp{delete display}.
d1500 1
a1500 1
@@subsubheading GDB Command
d1502 1
a1502 1
The corresponding GDB command is @@samp{disable display}.
d1519 1
a1519 1
@@subsubheading GDB Command
d1521 1
a1521 1
The corresponding GDB command is @@samp{enable display}.
d1538 1
a1538 1
@@subsubheading GDB Command
d1540 1
a1540 1
The corresponding GDB command is @@samp{display}.
d1557 1
a1557 1
@@subsubheading GDB Command
d1559 1
a1559 1
The corresponding GDB command is @@samp{info display}.
d1574 1
a1574 1
Set GDB's working directory.
d1576 1
a1576 1
@@subsubheading GDB Command
d1578 1
a1578 1
The corresponding GDB command is @@samp{cd}.
d1583 1
a1583 1
(gdb)
d1586 1
a1586 1
(gdb)
d1601 1
a1601 1
@@subsubheading GDB Command
d1603 1
a1603 1
The corresponding GDB command is @@samp{dir}.
d1608 1
a1608 1
(gdb)
d1611 1
a1611 1
(gdb)
d1626 1
a1626 1
@@subsubheading GDB Command
d1628 1
a1628 1
The corresponding GDB command is @@samp{path}.
d1633 1
a1633 1
(gdb)
d1636 1
a1636 1
(gdb)
d1651 1
a1651 1
@@subsubheading GDB command
d1653 1
a1653 1
The corresponding GDB command is @@samp{pwd}.
d1658 1
a1658 1
(gdb)
d1662 1
a1662 1
(gdb)
d1672 1
a1672 1
it doesn't encouter any breakpoints.  In this case the ouput will
d1681 1
a1681 1
(gdb)
d1684 1
a1684 1
(gdb)
d1687 1
a1687 1
(gdb)
d1694 1
a1694 1
(gdb)
d1697 1
a1697 1
(gdb)
d1700 1
a1700 1
(gdb)
d1707 1
a1707 1
(gdb)
d1724 1
a1724 1
@@subsubheading GDB Command
d1726 1
a1726 1
The corresponding GDB command is @@samp{kill}.
d1744 1
a1744 1
@@subsubheading GDB Command
d1746 1
a1746 1
The corresponding GDB command is @@samp{set args}.
d1766 1
a1766 1
@@subsubheading GDB Command
d1768 1
a1768 1
The corresponding GDB corresponding is @@samp{continue}.
d1775 1
a1775 1
(gdb)
d1779 1
a1779 1
(gdb)
d1796 1
a1796 1
@@subsubheading GDB Command
d1798 1
a1798 1
The corresponding GDB command is @@samp{finish}.
d1807 1
a1807 1
(gdb)
d1811 1
a1811 1
(gdb)
d1814 3
a1816 2
Function returning other than @@code{void}.  The name of the internal GDB
variable storing the result is printed, together with the value itself.
d1821 1
a1821 1
(gdb)
d1826 1
a1826 1
(gdb)
d1839 1
a1839 1
Asynchronous command. Interrupts the background execution of the target.
d1842 1
a1842 1
itself only appears in the '^done' output.  If the user is trying to
d1845 1
a1845 1
@@subsubheading GDB Command
d1847 1
a1847 1
The corresponding GDB command is @@samp{interrupt}.
d1852 1
a1852 1
(gdb)
d1856 1
a1856 1
(gdb)
d1859 1
a1859 1
(gdb)
d1862 1
a1862 1
(gdb)
d1864 1
a1864 1
(gdb)
d1867 1
a1867 1
(gdb)
d1883 1
a1883 1
@@subsubheading GDB Command
d1885 1
a1885 1
The corresponding GDB command is @@samp{next}.
d1892 1
a1892 1
(gdb)
d1894 1
a1894 1
(gdb)
d1912 1
a1912 1
@@subsubheading GDB Command
d1914 1
a1914 1
The corresponding GDB command is @@samp{nexti}.
d1919 1
a1919 1
(gdb)
d1923 1
a1923 1
(gdb)
d1926 1
a1926 1
(gdb)
d1942 1
a1942 1
@@subsubheading GDB Command
d1944 1
a1944 1
The corresponding GDB command is @@samp{return}.
d1949 1
a1949 1
(gdb)
d1953 1
a1953 1
(gdb)
d1956 1
a1956 1
(gdb)
d1960 1
a1960 1
(gdb)
d1963 1
a1963 1
(gdb)
d1969 1
a1969 1
(gdb)
d1986 1
a1986 1
@@subsubheading GDB Command
d1988 1
a1988 1
The corresponding GDB command is @@samp{run}.
d1993 1
a1993 1
(gdb)
d1996 1
a1996 1
(gdb)
d1999 1
a1999 1
(gdb)
d2002 1
a2002 1
(gdb)
d2017 1
a2017 1
@@subsubheading GDB Command
d2019 1
a2019 1
The corresponding GDB command is @@samp{show args}.
d2040 1
a2040 1
@@subsubheading GDB Command
d2042 1
a2042 1
The corresponding GDB command is @@samp{step}.
d2051 1
a2051 1
(gdb)
d2055 1
a2055 1
(gdb)
d2063 1
a2063 1
(gdb)
d2065 1
a2065 1
(gdb)
d2079 1
a2079 1
instruction.  The output, once GDB has stopped, will vary depending on
d2084 1
a2084 1
@@subsubheading GDB Command
d2086 1
a2086 1
The corresponding GDB command is @@samp{stepi}.
d2091 1
a2091 1
(gdb)
d2095 1
a2095 1
(gdb)
d2098 1
a2098 1
(gdb)
d2102 1
a2102 1
(gdb)
d2105 1
a2105 1
(gdb)
d2123 1
a2123 1
@@subsubheading GDB Command
d2125 1
a2125 1
The corresponding GDB command is @@samp{until}.
d2130 1
a2130 1
(gdb)
d2133 1
a2133 1
(gdb)
d2137 1
a2137 1
(gdb)
d2158 1
a2158 1
are set when using this command with no arguments, gdb will produce
d2162 1
a2162 1
@@subsubheading GDB Command
d2164 1
a2164 1
The corresponding GDB command is @@samp{file}.
d2169 1
a2169 1
(gdb)
d2172 1
a2172 1
(gdb)
d2187 1
a2187 1
from this file.  If used without argument, GDB clears the information
d2191 1
a2191 1
@@subsubheading GDB Command
d2193 1
a2193 1
The corresponding GDB command is @@samp{exec-file}.
d2198 1
a2198 1
(gdb)
d2201 1
a2201 1
(gdb)
d2216 1
a2216 1
@@subsubheading GDB Command
d2218 1
a2218 1
The GDB command @@samp{info file} shows, among the rest, the same
d2237 1
a2237 1
@@subsubheading GDB Command
d2239 1
a2239 1
There's no GDB command which directly corresponds to this one.
d2257 1
a2257 1
@@subsubheading GDB Command
d2259 1
a2259 1
The corresponding GDB command is @@samp{info shared}.
d2276 1
a2276 1
@@subsubheading GDB Command
d2278 1
a2278 1
The corresponding GDB command is @@samp{info file} (part of it).
d2294 1
a2294 1
used without arguments, clears GDB's symbol table info.  No output is
d2297 1
a2297 1
@@subsubheading GDB Command
d2299 1
a2299 1
The corresponding GDB command is @@samp{symbol-file}.
d2304 1
a2304 1
(gdb)
d2307 1
a2307 1
(gdb)
d2312 1
a2312 1
@@section Miscellaneous GDB commands in @@sc{gdb/mi}
d2325 1
a2325 1
Exit GDB immediately.
d2327 1
a2327 1
@@subsubheading GDB Command
d2334 1
a2334 1
(gdb)
d2347 1
a2347 1
Set an internal GDB variable.
d2350 1
a2350 1
@@subsubheading GDB Command
d2352 1
a2352 1
The corresponding GDB command is @@samp{set}.
d2357 1
a2357 1
(gdb)
d2360 1
a2360 1
(gdb)
d2373 1
a2373 1
Show the current value of a GDB variable.
d2375 1
a2375 1
@@subsubheading GDB command
d2377 1
a2377 1
The corresponding GDB command is @@samp{show}.
d2382 1
a2382 1
(gdb)
d2385 1
a2385 1
(gdb)
d2400 1
a2400 1
Show version information for GDB.  Used mostly in testing.
d2402 1
a2402 1
@@subsubheading GDB Command
d2404 1
a2404 1
There's no equivalent GDB command.  GDB by default shows this
d2412 1
a2412 1
(gdb)
d2425 1
a2425 1
(gdb)
d2493 1
a2493 1
@@subsubheading GDB Command
d2495 1
a2495 1
The corresponding GDB command is @@samp{info frame} or @@samp{frame}
d2513 1
a2513 1
@@subsubheading GDB Command
d2515 1
a2515 1
There's no equivalent GDB command.
d2522 1
a2522 1
(gdb)
d2525 1
a2525 1
(gdb)
d2528 1
a2528 1
(gdb)
d2531 1
a2531 1
(gdb)
d2534 1
a2534 1
(gdb)
d2537 1
a2537 1
(gdb)
d2559 1
a2559 1
@@subsubheading GDB Command
d2561 1
a2561 1
GDB does not have an equivalent command.  @@code{gdbtk} has a
d2568 1
a2568 1
(gdb)
d2582 1
a2582 1
(gdb)
d2591 1
a2591 1
(gdb)
d2606 1
a2606 1
(gdb)
d2609 1
a2609 1
(gdb)
d2614 1
a2614 1
(gdb)
d2650 1
a2650 1
@@subsubheading GDB Command
d2652 1
a2652 1
The corresponding GDB commands are @@samp{backtrace} and @@samp{where}.
d2659 1
a2659 1
(gdb)
d2686 1
a2686 1
(gdb)
d2689 1
a2689 1
Show frames between low_frame and high_frame:
d2692 1
a2692 1
(gdb)
d2701 1
a2701 1
(gdb)
d2707 1
a2707 1
(gdb)
d2712 1
a2712 1
(gdb)
d2729 1
a2729 1
@@subsubheading GDB Command
d2731 1
a2731 1
@@samp{info locals} in GDB, @@samp{gdb_get_locals} in @@code{gdbtk}.
d2736 1
a2736 1
(gdb)
d2739 1
a2739 1
(gdb)
d2743 1
a2743 1
(gdb)
d2759 1
a2759 1
@@subsubheading GDB Command
d2761 2
a2762 2
The corresponding GDB commands are @@samp{frame}, @@samp{up}, @@samp{down},
@@samp{select-frame}, @@samp{up-silent}, and @@samp{down-silent}.
d2767 1
a2767 1
(gdb)
d2770 1
a2770 1
(gdb)
d2789 1
a2789 1
@@subsubheading GDB Command
d2791 1
a2791 1
The corresponding GDB command is @@samp{info address}.
d2808 1
a2808 1
@@subsubheading GDB Command
d2810 2
a2811 2
There's no equivalent GDB command.  @@code{gdbtk} has
@@samp{gdb_filnd_file}.
d2828 1
a2828 1
@@subsubheading GDB Command
d2847 1
a2847 1
@@subsubheading GDB Command
d2849 2
a2850 2
The corresponding GDB comamnd is @@samp{info line}.  @@code{gdbtk} has the
@@samp{gdb_get_line} @@samp{gdb_get_file} commands.
d2867 1
a2867 1
@@subsubheading GDB Command
d2869 1
a2869 1
The corresponding GDB command is @@samp{info symbol}.
d2886 1
a2886 1
@@subsubheading GDB Command
d2888 2
a2889 2
@@samp{info functions} in GDB, @@samp{gdb_listfunc} @@samp{gdb_search} in
@@code{gdbtk}.
d2906 1
a2906 1
@@subsubheading GDB Command
d2908 1
a2908 1
The corresponding commands are @@samp{info types} in GDB,
d2926 1
a2926 1
@@subsubheading GDB Command
d2928 1
a2928 1
@@samp{info variables} in GDB, @@samp{gdb_search} in @@code{gdbtk}.
d2943 1
a2943 1
@@subsubheading GDB Command
d2962 1
a2962 1
@@subsubheading GDB Command
d2964 1
a2964 1
The corresponding GDB command is @@samp{ptype}, @@code{gdbtk} has
d2985 1
a2985 1
Attach to a process @@var{pid} or a file @@var{file} outside of GDB.
d2987 1
a2987 1
@@subsubheading GDB command
d2989 1
a2989 1
The corresponding GDB command is @@samp{attach}.
d3007 1
a3007 1
@@subsubheading GDB Command
d3009 1
a3009 1
The GDB equivalent is @@samp{compare-sections}.
d3026 1
a3026 1
@@subsubheading GDB command
d3028 1
a3028 1
The corresponding GDB command is @@samp{detach}.
d3033 1
a3033 1
(gdb)
d3036 1
a3036 1
(gdb)
d3082 1
a3082 1
At the end,  a summary is printed.
d3084 1
a3084 1
@@subsubheading GDB Command
d3086 1
a3086 1
The corresponding GDB command is @@samp{load}.
d3094 1
a3094 1
(gdb)
d3140 1
a3140 1
(gdb)
d3156 1
a3156 1
@@subsubheading GDB Command
d3158 1
a3158 1
There's no equivalent GDB command.
d3175 1
a3175 1
@@subsubheading GDB Command
d3177 1
a3177 1
The corresponding GDB command is @@samp{help target}.
d3194 1
a3194 1
@@subsubheading GDB Command
d3214 1
a3214 1
@@subsubheading GDB Command
d3228 1
a3228 1
 -target-select @@var{type} @@var{parameters ...}
d3231 1
a3231 1
Connect GDB to the remote target.  This command takes two args:
d3249 1
a3249 1
@@subsubheading GDB Command
d3251 1
a3251 1
The corresponding GDB command is @@samp{target}.
d3256 1
a3256 1
(gdb)
d3259 1
a3259 1
(gdb)
d3276 1
a3276 1
@@subsubheading GDB command
d3293 1
a3293 1
@@subsubheading GDB Command
d3295 1
a3295 1
The equivalent GDB command is @@samp{info threads}.
d3310 2
a3311 2
Produces a list of the currently known gdb thread ids.  At the end of the
list it also prints the total number of such threads.
d3313 1
a3313 1
@@subsubheading GDB Command
d3322 1
a3322 1
(gdb)
d3325 1
a3325 1
(gdb)
d3332 1
a3332 1
(gdb)
d3336 1
a3336 1
(gdb)
d3352 1
a3352 1
@@subsubheading GDB Command
d3354 1
a3354 1
The corresponding GDB command is @@samp{thread}.
d3359 1
a3359 1
(gdb)
d3362 1
a3362 1
(gdb)
d3365 1
a3365 1
(gdb)
d3370 1
a3370 1
(gdb)
d3376 1
a3376 1
(gdb)
d3439 1
a3439 1
slightly changed so it could be used through flathead.  This document
d3555 1
a3555 1
the GDB CLI:
d3656 2
a3657 1
returned as a string in the same format as it is output by the GDB CLI:
d3771 1
a3771 1
``(gdb)''.
d3780 1
a3780 1
@@{ @@var{out-of-band-record} @@} @@code{[} @@var{result-record} @@code{]} "(gdb)" @@var{nl}
d3894 3
a3896 3
@@var{log-stream-output} is output text coming from GDB's internals, for
instance messages that should be displayed as part of an error log.  All
the log output is prefixed by the prefix ``&''.
@


1.5
log
@	* gdbmi.texinfo: Lots of typos and grammar fixes from Brian
        Youmans <3diff@@flib.gnu.ai.mit.edu>.
@
text
@d2078 4
a2081 5
instruction.  The output, once stop, will vary depend on whether we have
@@c Someone who knows this should figure out what 'once stop' is supposed
@@c to be.  'once stop is reached'?  - BTY
stopped in the middle of a source line or not.  In the former case, the
address at which the program stopped will be printed as well.
@


1.4
log
@Add section discussing future changes to output syntax.
@
text
@d113 1
a113 1
* GDB/MI Misc Commands::
d218 2
a219 2
followed, optionally, by a single result record.  The result record
being for the most recent command.  The sequence of output records is
d408 1
a408 1
To help users familiar with the GDB's existing CLI interface, @@sc{gdb/mi}
d894 1
a894 1
@@dfn{access} watchpoint, i.e. a watchpoints that triggers either on a
d1042 1
a1042 1
the whole function will be disassembled, in case no @@var{end-add} is
d1044 1
a1044 1
@@var{lines} is lower that the number of disassembly lines between
d1112 1
a1112 1
Disassemble 3 instruction from the start of @@code{main}:
d1127 1
a1127 1
Disassemble 3 instruction from the start of @@code{main} in mixed mode:
d1166 1
a1166 1
@@code{call}.  In @@code{gdbtk} only, there's a corresponding
d1277 2
a1278 2
Display the registers contents.  @@var{fmt} is the format according to
which the registers contents are to be returned, followed by an optional
d1403 1
a1403 1
(returned as @@samp{total-bytes}.  Should less then the requested number
d1405 1
a1405 1
using @@samp{N/A}.  The number of bytes read  from the target is returned
d1502 1
a1502 1
the corresponding GDB command is @@samp{disable display}.
d1578 1
a1578 1
the corresponding GDB command is @@samp{cd}.
d1987 1
a1987 1
The corresponding GDB command is @@samp{run}
d2079 2
d2159 1
a2159 1
error messages.  Oterwise, no output is produced, except a completion
d2259 1
a2259 1
The corresponding GDB command os @@samp{info shared}.
d2294 1
a2294 1
used without arguments, clears GDB'S symbol table info.  No output is
d2311 2
a2312 2
@@node GDB/MI Misc Commands
@@section Misc GDB commands in @@sc{gdb/mi}
d2557 1
a2557 1
means that both names and values of the argumetns are printed.
d2725 1
a2725 1
Display the local variables names for the current frame.  With an
d2791 1
a2791 1
the corresponding GDB command is @@samp{info address}.
d3091 1
a3091 1
have been broken down, so they can fit into a page.
d3424 1
a3424 1
expressions, etc.), we are proposing the adaptation of the existent code
d3471 1
a3471 1
and natural.  Natural refers to the a default format automatically
d3537 1
a3537 1
Expression is any expression valid on the current language set (must not
d3768 2
a3769 2
optionally followed by a single result record.  The result record being
for the most recent command input.  The sequence being terminated by
d3884 1
a3884 1
@@var{console-stream-output} is output that should be displayed as is in the
@


1.3
log
@	* Makefile.in (GDBMI_DIR): New variable.
	(SET_TEXINPUTS): Add $(GDBMI_DIR).
	(SFILES_DOC): Add $(GDBMI_DIR)/gdbmi.texinfo.
	(gdbmi.texinfo): New target, for texi2roff.
	(gdb.me, gdb.ms, gdb.mm): Depend on gdbmi.texinfo.
	(gdb.info, gdb_toc.html): Add "-I ${GDBMI_DIR}".

	* gdb.texinfo (Top): Add GDB/MI to the main menu and @@include
	gdbmi.texinfo.
	(Mode Options): Add xref to GDB/MI docs and remove a FIXME
	comment.

	* gdbmi.texinfo: Lots of changes, to include this document as part
	of the GDB manual.

	* TODO, NEWS: Update due to inclusion of gdbmi.texinfo in the GDB
	manual.
@
text
@d107 1
a107 1
* GDB/MI and CLI::
d120 1
d344 3
d403 1
a403 1
@@node GDB/MI and CLI
d3739 22
a3760 3
@@ignore
@@c%%%%%%%%%%%%%%%%%%%%%%%%%%%% APPENDIX %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@@appendix Proposed v2.0 Output Syntax
d3762 2
a3763 2
This appendix is not part of the MI specification.  It is provided as a
discussion point.
a3895 3

@@end ignore

@


1.2
log
@2000-03-06  Elena Zannoni  <ezannoni@@kwikemart.cygnus.com>

	* gdbmi.texinfo: Update data-disassemble documentation.
@
text
@d1 49
a49 16
\input texinfo   @@c -*-texinfo-*-
@@c %**start of header
@@setfilename gdbmi.info
@@settitle GDB/MI Machine Interface
@@setchapternewpage off
@@c %**end of header

@@ifinfo
This file documents GDB/MI, a Machine Interface to GDB.

Copyright (C) 2000, Free Software Foundation, Inc.
Contributed by Cygnus Solutions.

Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.
d51 2
a52 35
@@ignore
Permission is granted to process this file through TeX and print the
results, provided the printed document carries copying permission notice
identical to this one except for the removal of this paragraph (this
paragraph not being relevant to the printed manual).

@@end ignore
Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided also that the
entire resulting derived work is distributed under the terms of a
permission notice identical to this one.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions.
@@end ifinfo

@@c  This title page illustrates only one of the
@@c  two methods of forming a title page.

@@titlepage
@@title GDB/MI
@@subtitle Version 0.2
@@subtitle Feb 2000
@@author Andrew Cagney, Fernando Nasser and Elena Zannoni

@@c  The following two commands
@@c  start the copyright page.
@@page
@@vskip 0pt plus 1filll
Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

Copyright @@copyright{} 2000, Free Software Foundation, Inc.
@@end titlepage
d55 2
a56 1
@@chapter Overview
d58 1
a58 1
@@heading Function and Purpose
d60 2
a61 1
GDB/MI is a line based machine oriented text interface to GDB.  It is
d65 10
a74 1
@@heading This Document
d76 15
a90 2
This document is a specification of the GDB/MI interface.  It is written
in the form of a reference manual.
d92 3
a94 1
@@heading Terminology
d96 1
d98 1
d102 29
a130 1
In alphabetic order: Fernando Nasser, Stan Shebs and Elena Zannoni.
d132 9
a140 2
@@c %%%%%%%%%%%%%%%%%%%%%%%%%%%% CHAPTER %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@@chapter Command Syntax
d142 2
a143 1
@@section Input Syntax
d145 2
d148 2
d151 3
a153 5
@@item <command> @@expansion{} 
<cli-command> | <mi-command>

@@item <cli-command> @@expansion{}
[ <token> ] "any existing GDB CLI command" <nl>
d155 3
a157 2
@@item <mi-command> @@expansion{}
[ <token> ] ``-'' <operation> ( `` '' <option> )* [ `` --'' ] ( `` '' <parameter> )* <nl> 
d159 2
a160 2
@@item <token> @@expansion{}
``any sequence of digits''
d162 2
a163 2
@@item <option> @@expansion{}
``-'' <parameter> [ `` '' <parameter> ]
d165 2
a166 2
@@item <parameter> @@expansion{}
<non-blank-sequence> | <c-string>
d168 2
a169 2
@@item <operation> @@expansion{}
any of the operations described in this document.
d171 3
a173 3
@@item <non-blank-sequence> @@expansion{}
anything provided it doesn't contain special characters such as ``-''
 <nl>, ``"'' and of course `` ''.
d175 2
a176 5
@@item <c-string> @@expansion{}
``"'' <seven-bit-iso-c-string-content> ``"''

@@item <nl> @@expansion{}
CR | CR-LF
d178 2
a184 1

d186 2
a187 2
The CLI commands are still handled by the MI interpreter; their output
is described below
d190 1
a190 1
The @@code{<token>}, when present, is passed back when the command
d194 5
a198 6
Some mi commands accept optional arguments as part of the parameter
list. Each option is identified by a leading @@code{-} (dash) and may be
followed by an option argument parameter.  Options occure first in the
parameter list and can be delimiated from normal parameters using
@@code{--}.

a203 1

d208 1
a208 2
We want it easy to spot a MI operation

d211 2
a212 1
@@section Output Syntax
d214 3
a216 1
The output from GDB/MI consists of zero or more out-of-band records
d219 1
a219 1
terminated by ``(gdb)''.
d221 1
a221 1
If an input command was prefixed with a @@code{<token>} then the
d223 1
a223 1
token.
d226 2
a227 5
@@item <output> @@expansion{}
( <out-of-band-record> )* [ <result-record> ] ``(gdb)'' <nl> 

@@item <result-record> @@expansion{}
[ <token> ] ``^'' <result-class> ( ``,'' <result> )* <nl>
d229 2
a230 2
@@item <out-of-band-record> @@expansion{}
<async-record> | <stream-record>
d232 2
a233 2
@@item <async-record> @@expansion{}
<exec-async-output> | <status-async-output> | <notify-async-output>
d235 2
a236 2
@@item <exec-async-output> @@expansion{}
[ <token> ] ``*'' <async-output>
d238 2
a239 2
@@item <status-async-output> @@expansion{}
[ <token> ] ``+'' <async-output>
d241 2
a242 2
@@item <notify-async-output> @@expansion{}
[ <token> ] ``='' <async-output>
d244 2
a245 2
@@item <async-output> @@expansion{}
<async-class> ( ``,'' <result> )* <nl> 
d247 2
a248 2
@@item <result-class> @@expansion{} 
``done'' | ``running'' | ``connected'' | ``error'' | ``exit''
d250 2
a251 2
@@item <async-class> @@expansion{} 
``stopped'' | others (depending on needs, still in development)
d253 3
a255 2
@@item <result> @@expansion{}
[ <string> ``='' ] <value>
d257 2
a258 2
@@item <value> @@expansion{}
<const> | ``@@{'' <result> ( ``,'' <result> )* ``@@}''
d260 2
a261 2
@@item <const> @@expansion{}
<c-string>
d263 2
a264 2
@@item <stream-record> @@expansion{}
<console-stream-output> | <target-stream-output> | <log-stream-output>
d266 2
a267 2
@@item <console-stream-output> @@expansion{}
``~'' <c-string>
d269 2
a270 2
@@item <target-stream-output> @@expansion{}
``@@@@'' <c-string>
d272 2
a273 2
@@item <log-stream-output> @@expansion{}
``&'' <c-string>
d275 2
a276 2
@@item <nl> @@expansion{}
CR | CR-LF
d278 2
a279 2
@@item <token> @@expansion{}
``any sequence of digits''
d281 2
d285 1
a285 1
In addition, the following are still being developed.
d288 1
a288 2

@@item <query>
a289 1

a294 1

d299 4
a302 4
The @@code{<token>} is from the corresponding request.  If an execution
command is interrupted by the -exec-interrupt command, the token
associated with the `*stopped' message is the one of the original
execution command, not the one of the interrupt-command.
d305 4
a308 3
<status-async-output> contains on-going status information about the progress
of a slow operation.  It can be discarded. All status output is prefixed by
the prefix `+'.
d311 4
a314 3
<exec-async-output> contains asynchronous state change on the target
(stopped, started, disappeared). All async output is prefixed by
the prefix `*'.
d317 4
a320 3
<notify-async-output> contains supplementary information that the client should
handle (new breakpoint information). All notify output is prefixed by
the prefix `='.
d323 4
a326 3
<console-stream-output> is output that should be displayed as is in the
console.  It is the textual response to a CLI command. All the console
output is prefixed by the prefix ``~''.
d329 3
a331 2
<target-stream-output> is the output produced by the target program.
All the target output is prefixed by the prefix ``@@@@''.
d334 2
a335 1
<log-stream-output> is output text coming from GDB's internals, for
d337 9
a345 1
the log output is prefixed by the prefix ``&''.
d347 4
a350 1
@@end itemize
d352 1
a352 1
@@section Simple Examples
d354 1
a354 1
@@subheading Target stop:
d361 2
a362 1
(later)
d369 1
d371 2
a372 1
@@subheading Simple CLI command being passed through the MI and on to the CLI.
d380 1
a380 2

@@subheading Command with side effects:
d388 1
d390 1
a390 1
@@subheading A bad command:
d398 9
a406 6
@@c %%%%%%%%%%%%%%%%%%%%%%%%%%%% CHAPTER %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@@chapter CLI compatibility

To help users familiar with the GDB's existing CLI interface, the GDB/MI
will accept existing CLI commands.  As specified by the syntax, such
commands can be directly entered into the MI interface and GDB will
d409 23
a431 14
The mechanism is provided as an aid to developers of MI clients and not
as a reliable interface into the CLI.  Since the command is being
interpreteted in an environment that assumes MI behaviour the exact
output of such commands is likely to end up being an un-supported hybrid
of MI and CLI output.


@@c %%%%%%%%%%%%%%%%%%%%%%%%%%%% CHAPTER %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@@chapter Output Records

@@section Result Records

In addition to a number of out-of-band notifications the response to an
MI command includes one of the following result indications.
d434 3
a436 3

@@item ``^done'' [ ``,'' <results> ]
The synchronous operation was successful, @@code{<results>} is the return
d439 3
a441 1
@@item ``^running''
d443 1
a443 2
running.  @@emph{Is this one correct should it be an out-of-band
notification?}
d445 3
a447 2
@@item ``^error'' ``,'' <c-string>
The operation failed.  The @@code{<c-string>} contains the corresponding
a448 1

d451 2
a452 1
@@section Stream Records
d454 2
d458 1
a458 1
tunneled through the MI interface using stream records.
d460 4
a463 2
In addition to the prefix each stream record contains a
@@code{<string-output>}.  This is either raw text (with an implicit new
d467 1
a467 2

@@item ``~'' <string-output>
d471 1
a471 1
@@item ``@@@@'' <string-output>
d475 1
a475 1
@@item ``&'' <string-output>
a477 1

d480 2
a481 1
@@section Out-of-band Records.
d483 6
a488 4
Out-of-band records are used to notify the MI client of additional
changes that have occurred.  Those changes can either be a consequence of
an MI (breakpoint modified) or as a result of target activity (target
stopped).
d493 1
a493 3

@@item ``*'' ``stop''

d497 3
a499 2
@@c %%%%%%%%%%%%%%%%%%%%%%%%%%%% CHAPTER %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@@chapter Command Description Format
d501 1
a501 1
The remaining chapters describe blocks of commands.  Each block of
d506 10
a515 2
Note that the commands with a non available example (N.A.) are not yet
implemented.
d517 1
a517 1
@@section Motivation
d519 1
a519 1
What motivates the collection of commands
d521 1
a521 1
@@section Introduction
d523 3
a525 1
Brief introduction to the commands as a whole.
d527 1
a527 1
@@section Operations
d529 1
a529 1
@@subsection -command <args>...
d531 1
a531 1
@@subsubsection Result
d533 1
a533 1
@@subsubsection Out-of-band
d535 1
a535 1
@@subsubsection Notes
d537 1
a537 1
@@subsubsection Example
d540 8
a547 2
@@c %%%%%%%%%%%%%%%%%%%%%%%%%%%% CHAPTER %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@@chapter Breakpoint table commands
d549 2
a550 3
@@section -break-after <number> <count>
The breakpoint number <number> is not in effect until it has been hit <count> times.
Note how this is reflected in the output of the -break-list command.
d552 1
a552 2
@@subsection GDB command
ignore
a553 1
@@subsection Example
d555 16
a570 1
(gdb) 
d573 1
a573 1
(gdb) 
d577 1
a577 1
(gdb) 
d581 21
a601 2
addr="0x000100d0",func="main",file="hello.c",line="5",times="0",ignore="3"@@}@@}
(gdb) 
d604 6
a609 1
@@c @@section -break-catch
d611 1
a611 1
@@c @@section -break-commands
d613 4
a616 8
@@section -break-condition <number> <expr>
Breakpoint <number> will stop the program only if the condition in <expr> is true.
The condition becomes part of the -break-list output.
@@subsection GDB command
condition
@@subsection Example
@@example
(gdb) 
d619 1
a619 1
(gdb) 
d623 12
a634 2
addr="0x000100d0",func="main",file="hello.c",line="5",cond="1",times="0",ignore="3"@@}@@}
(gdb) 
d637 9
a645 6
@@section -break-delete @@{ <breakpoint> @@}+
Delete the breakpoint(s) specified in the argument list. This is
obviously reflected in the breakpoint list.
@@subsection GDB command
delete
@@subsection Example
d647 2
a648 2
(gdb) 
-break-delete 1  
d650 1
a650 1
(gdb) 
d653 1
a653 1
(gdb) 
d656 5
a660 6
@@section -break-disable @@{ <breakpoint> @@}+
Disable the breakpoint(s). Note how the field 'enabled' in the break
list is now set to 'n'.
@@subsection GDB command
disable
@@subsection Example
d662 14
a675 1
(gdb) 
d678 1
a678 1
(gdb) 
d683 10
a692 1
(gdb) 
d695 11
a705 8
@@section -break-enable @@{ <breakpoint> @@}+
Enable a previously disabled breakpoint(s). 
@@subsection GDB command
enable
@@subsection Example
@@example
(gdb) 
enable 2
d707 1
a707 1
(gdb) 
d712 10
a721 1
(gdb) 
d724 8
a731 4
@@section -break-info <breakpoint>
REDUNDANT??? Get information about a single breakpoint.
@@subsection GDB command
@@subsection Example
d734 13
a746 1
@@section -break-insert [ "-t" ] [ "-h" ] [ "-r" ] [ "-c" <condition> ] [ "-i" <ignore-count> ] [ "-p" <thread> ] [ <line> | <addr> ]
a747 1
<line>, if specified, accordingly to the gdb manual can be one of:
d758 1
a758 1
The possible forms of this command are: 
d765 4
a768 4
@@item -c <condition>
Make the breakpoint conditional on <condition>
@@item -i <ignore-count>
Initialize the <ignore-count>
d775 1
a778 9
^done,bkptno="<gdb number for this breakpoint>",func="<name of the
function where the breakpoint was inserted>",file="<source file which
contains this function>",line="<source line number within the file>"

Note: this is open to change.  An out-of-band breakpoint instead of part
of the result?
@@subsection GDB command
break, tbreak, hbreak, thbreak, rbreak.
@@subsection Example
d780 22
a801 1
(gdb) 
d804 1
a804 1
(gdb) 
d807 1
a807 1
(gdb) 
d810 5
a814 5
bkpt=@@{number="1",type="breakpoint",disp="keep",enabled="y",addr="0x0001072c",
func="main",file="recursive2.c",line="4",times="0"@@},
bkpt=@@{number="2",type="breakpoint",disp="del",enabled="y",addr="0x00010774",
func="foo",file="recursive2.c",line="11",times="0"@@}@@}
(gdb) 
d818 10
a827 1
(gdb) 
a829 1
@@section -break-list
d831 1
d834 1
a834 1
Number of the breakpoint
d836 1
a836 1
Type of the breakpoint: breakpoint or watchpoint
d838 2
a839 1
Should the breakpoint be deleted or disabled when it is hit: keep or nokeep
d841 1
a841 1
Is the breakpoint enabled or no: y or n
d843 1
a843 1
Memory location at which the breakpoint is set.
d845 2
a846 1
Logical location of the breakpoint, expressed by function name, file name, line number.
d848 1
a848 1
Number of times the breakpoint has been hit.
a852 2
@@subsection GDB command
info break
d854 7
a860 2
@@subsection Example 1
@@example
d869 5
a873 3
@@end example
@@subsection Example 2
@@example
d877 10
a886 1
(gdb) 
d889 8
a896 8
@@section -break-watch [ "-a" | "-r" ]
Create a watchpoint.  With the ``-a'' option it will create an access
watchpoint, i.e. a watchpoints that triggers either on a read or on a
write on the memory location.  With the ``-r'' option, the watchoint
created is a read watchpoint, i.e. it will trigger only when the memory
location os accessed for reading.  Without either of the options, the
watchpoint created is a regular watchpoint, i.e. it will trigger whe the
memory location is accessed for writing.
d898 1
a898 1
Note that ``-break-list'' will report a single list of watchpoints and
d901 6
a906 2
@@subsection GDB command
watch, awatch, rwatch
d908 4
a911 4
@@subsection Example 1
Watchpoint on a variable in main().
@@example
(gdb) 
d914 2
a915 2
(gdb) 
-exec-continue 
d920 9
a928 7
(gdb) 
@@end example
@@subsection Example 2
Watchpoint on a variable local to a function. Gdb will stop the program execution 
twice: first for the variable changing value, then for the watchpoint going out of scope.
@@example
(gdb) 
d931 1
a931 1
(gdb) 
d936 3
a938 3
frame=@@{func="callee4",args=@@{@@},file="../../../devo/gdb/testsuite/gdb.mi/basics.c",
line="13"@@}
(gdb) 
d942 2
a943 1
frame=@@{func="callee3",args=@@{@@{name="strarg",value="0x11940 \"A string argument.\""@@}@@},
d945 6
a950 2
(gdb) 
@@end example
d952 2
a953 5
@@subsection Example 3
Listing breakpoints and watchpoints, at different points in the program execution.
Note that once the watchpoint goes out of scope, it is deleted.
@@example
(gdb) 
d956 2
a957 2
(gdb) 
-break-list   
d959 2
a960 2
bkpt=@@{number="1",type="breakpoint",disp="keep",enabled="y",addr="0x00010734",
func="callee4",
d964 1
a964 1
(gdb) 
d971 1
a971 1
(gdb) 
d974 2
a975 2
bkpt=@@{number="1",type="breakpoint",disp="keep",enabled="y",addr="0x00010734",
func="callee4",
d979 1
a979 1
(gdb) 
d983 2
a984 1
frame=@@{func="callee3",args=@@{@@{name="strarg",value="0x11940 \"A string argument.\""@@}@@},
d986 1
a986 1
(gdb) 
d989 2
a990 2
bkpt=@@{number="1",type="breakpoint",disp="keep",enabled="y",addr="0x00010734",
func="callee4",
d992 11
a1002 4
(gdb) 
@@end example
@@c %%%%%%%%%%%%%%%%%%%%%%%%%%%% CHAPTER %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@@chapter Data manipulation
d1004 2
a1005 2
@@c REMOVED FROM THE ITNERFACE.
@@c @@section -data-assign
d1007 1
a1007 1
@@c @@subsection GDB command
d1009 1
a1009 1
@@c @@subsection Example 
d1012 15
a1026 2
@@section -data-disassemble ( -s <start-addr> -e <end-addr> ) | (-f <filename> -l <linenum> [-n <lines> ]] -- <mode>
Where
d1028 20
a1047 18
@@item <start-addr>
Is the beginning address (or $pc).
@@item <end-addr>
End address.
@@item <filename>
Name of the file to disassemble.
@@item <linenum>
Line number to disassemble around.
@@item <number-of-lines>
specifies the number of disassembly lines to be produced. If it is -1
the whole function will be disassembled, in case no <end> address is
specified.  If <end> is specified as a non-zero value, and
<number-of-lines> is lower that the number of disassembly lines between
<begin> and <end>, we'll display only <number-of-lines> lines, vice
versa if <number-of-lines> is higher than the number of lines between
<begin> and <end>, we'll display only the lines up to <end>.
@@item <mode>
can be 0 (only disassembly) or 1 (mixed source and disassembly).
d1050 2
d1053 1
d1060 1
d1062 3
a1064 3
directely by Flathead, i.e. it is not possible to adjust its format.
@@subsection GDB command
N.A. No direct mapping.
d1066 1
a1066 2
@@subsection Example 1
Disassemble from the current PC value to PC + 20.
d1068 5
a1072 1
@@example
d1074 1
a1074 1
-data-disassemble -s $pc -e "$pc + 20" -- 0 
d1076 11
a1086 11
asm_insns={
{address="0x000107c0",func-name="main",offset="4",
inst="mov  2, %o0"},
{address="0x000107c4",func-name="main",offset="8",
inst="sethi  %hi(0x11800), %o2"},
{address="0x000107c8",func-name="main",offset="12",
inst="or  %o2, 0x140, %o1\t! 0x11940 <_lib_version+8>"},
{address="0x000107cc",func-name="main",offset="16",
inst="sethi  %hi(0x11800), %o2"},
{address="0x000107d0",func-name="main",offset="20",
inst="or  %o2, 0x168, %o4\t! 0x11968 <_lib_version+48>"}}
d1088 4
a1091 1
@@end example
d1093 1
a1093 3
@@subsection Example 2
Disassemble the whole function main. Line 32 is part of main.
@@example
d1095 7
a1101 4
^done,asm_insns={
{address="0x000107bc",func-name="main",offset="0",inst="save  %sp, -112, %sp"},
{address="0x000107c0",func-name="main",offset="4",inst="mov  2, %o0"},
{address="0x000107c4",func-name="main",offset="8",inst="sethi  %hi(0x11800), %o2"},
d1103 39
a1141 2
{address="0x0001081c",func-name="main",offset="96",inst="ret "},
{address="0x00010820",func-name="main",offset="100",inst="restore "}}
d1143 7
a1149 1
@@end example
a1150 2
@@subsection Example 3
Disassemble 3 instruction from the start of main.
d1152 1
a1152 7
(gdb) 
-data-disassemble -f basics.c -l 32 -n 3 -- 0
^done,asm_insns={
{address="0x000107bc",func-name="main",offset="0",inst="save  %sp, -112, %sp"},
{address="0x000107c0",func-name="main",offset="4",inst="mov  2, %o0"},
{address="0x000107c4",func-name="main",offset="8",inst="sethi  %hi(0x11800), %o2"}}
(gdb) 
d1155 2
a1156 22
@@subsection Example 4
Disassemble 3 instruction from the start of main in mixed mode.
@@example
(gdb) 
-data-disassemble -f basics.c -l 32 -n 3 -- 1
^done,asm_insns={
src_and_asm_line={line="31",
file="/kwikemart/marge/ezannoni/flathead-dev/devo/gdb/testsuite/gdb.mi/basics.c",
line_asm_insn={
{address="0x000107bc",func-name="main",offset="0",inst="save  %sp, -112, %sp"}}},

src_and_asm_line={line="32",
file="/kwikemart/marge/ezannoni/flathead-dev/devo/gdb/testsuite/gdb.mi/basics.c",
line_asm_insn={
{address="0x000107c0",func-name="main",offset="4",inst="mov  2, %o0"},
{address="0x000107c4",func-name="main",offset="8",inst="sethi  %hi(0x11800), %o2"}}}}
(gdb) 
@@end example

@@section -data-evaluate-expression
Evaluate an expression. The expression could contain an inferior
function call. The function call will execute synchronously.
d1158 15
a1172 4
@@subsection GDB command
print, output, gdb_eval
@@subsection Example
@@example
d1175 1
a1175 1
(gdb) 
d1181 1
a1181 1
(gdb) 
d1184 11
a1194 1
(gdb) 
a1196 1
@@section -data-list-changed-registers
d1198 12
a1209 6
@@subsection GDB command
gdb_changed_register_list. This is in gdbtk only.
@@subsection Example
On a PPC MBX board.
@@example
(gdb) 
d1213 1
a1213 1
(gdb) 
d1216 1
a1216 1
(gdb) 
d1221 11
a1231 1
(gdb) 
a1233 1
@@section -data-list-register-names
d1237 10
a1246 4
names corresponding to the arguments.
@@subsection GDB command
gdb_regnames
@@subsection Example
d1248 1
a1248 1
@@example
d1261 10
a1270 1
(gdb) 
d1273 31
a1303 14
@@section -data-list-register-values
Display the registers contents.  Arguments are the format according to
which the registers contents are to be returned, and a list of numbers
specifying the registers to display. A missing list of number indicates
that the contents of all the registers must be returned.
Allowed formats are:
@@itemize @@bullet
@@item 'x': Hexadecimal
@@item 'o': Octal
@@item 't': Binary
@@item 'd': Decimal
@@item 'r': Raw
@@item 'N': Natural
@@end itemize
d1305 2
a1306 7
@@subsection GDB command
info reg, info all-reg  AND/OR gdb_fetch_registers
@@subsection Example
For a PPC MBX board. Note, line breaks are for readability only, they
don't appear in the actual output.
@@example
(gdb) 
d1310 1
a1310 1
(gdb) 
d1348 13
a1360 1
(gdb) 
d1363 3
a1365 2
@@section -data-read-memory [ -o <byte-offset> ] [ -- ] <address> <word-format> <word-size> <nr-rows> <nr-cols> [ <aschar> ]
Where
d1367 1
a1367 1
@@item <address>
d1371 2
a1372 1
@@item <word-format>
d1374 4
a1377 2
same as for GDB's @@code{print} command.
@@item <word-size>
d1379 2
a1380 1
@@item <nr-rows>
d1382 2
a1383 1
@@item <nr-cols>
d1385 9
a1393 6
@@item <aschar>
If present, indicates that each row should include an ascii dump.  The
value of <aschar> is used as a padding character when a byte is not a
member of the printable ascii character set (@@code{<32} or @@code{>126}).
@@item <byte-offset>
An offset to add to the <address> before fetching memory.
d1395 9
a1403 7
Display memory contents as a table of <nr-rows> by <nr-cols> words.
Each word being <word-size> bytes.  In total @@code{<nr-rows> * <nr-cols>
* <word-size>} bytes are read (returned as @@code{total-bytes}.  Should
less then the requested number of bytes be returned by the target, the
missing words are identified using @@code{N/A}.  The number of bytes read
from the target is returned in @@code{nr-bytes} and the starting address
used to read memory by @@code{addr}.
d1406 10
a1415 5
@@code{next-row} and @@code{prev-row}, @@code{next-page} and
@@code{prev-page}.
@@subsection GDB command
x AND/OR gdb_get_mem AND/OR GDBtk's memory read.
@@subsection Example 1
d1419 3
a1421 2
@@example
(gdb) 
d1429 3
a1431 3
(gdb) 
@@end example
@@subsection Example 2
d1434 3
a1436 2
@@example
(gdb) 
d1442 3
a1444 3
(gdb) 
@@end example
@@subsection Example 3
d1448 3
a1450 2
@@example
(gdb) 
d1463 10
a1472 1
(gdb) 
d1475 7
a1481 5
@@section -display-delete <number>
Delete the display <number>.
@@subsection GDB command
delete display 
@@subsection Example
d1484 17
a1500 5
@@section -display-disable <number>
Disable display <number>
@@subsection GDB command
disable display
@@subsection Example
d1503 17
a1519 5
@@section -display-enable <number>
Enable display <number>
@@subsection GDB command
enable display
@@subsection Example
d1522 17
a1538 5
@@section -display-insert <expression>
Display <expression> every time the program stops.
@@subsection GDB command
display
@@subsection Example
d1541 17
a1557 5
@@section -display-list
List the displays. Do not show the current values.
@@subsection GDB command
info display
@@subsection Example
d1560 10
a1569 1
@@section -environment-cd <pathdir>
d1571 9
a1579 5
@@subsection GDB command
cd
@@subsection Example
@@example
(gdb) 
d1582 11
a1592 1
(gdb) 
d1595 10
a1604 7
@@section -environment-directory <pathdir>
Add directory <pathdir> to beginning of search path for source files.
@@subsection GDB command
dir
@@subsection Example
@@example
(gdb) 
d1608 11
a1618 1
@@end example 
a1619 1
@@section -environment-path @@{ <pathdir> @@}+
d1621 9
a1629 5
@@subsection GDB command
path
@@subsection Example
@@example
(gdb) 
d1633 7
a1639 1
@@end example 
a1640 5
@@section -environment-pwd
Show the current working directory
@@subsection GDB command
pwd
@@subsection Example
d1642 13
a1654 1
(gdb) 
d1658 6
a1663 2
(gdb) 
@@end example
d1665 1
a1665 2
@@c %%%%%%%%%%%%%%%%%%%%%%%%%%%% CHAPTER %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@@chapter Program control
a1666 1
@@section Program termination
d1670 4
a1673 1
@@subsection Example 1
d1675 3
a1677 2
@@example
(gdb) 
d1683 2
a1684 2
(gdb) 
@@end example
d1686 1
a1686 1
@@subsection Example 2
d1688 3
a1690 2
@@example
(gdb) 
d1696 17
a1712 2
(gdb) 
@@end example
a1713 3
Another way the program can terminate is if it receives a signal like SIGINT.
@@subsection Example 
Program exited with signal (for a more complete example, see the exec-interrupt command).
d1715 1
a1715 2
(gdb) 
*stopped,reason="exited-signalled",signal-name="SIGINT",signal-meaning="Interrupt"
d1718 1
d1720 1
a1720 2
@@section -exec-abort
Kill the inferior running program.
d1722 1
a1722 2
@@subsection GDB command
kill
d1724 1
a1724 1
@@subsection Example
a1726 2
@@section -exec-arguments
Set the inferior program arguments, to be used in the next -exec-run.
d1728 20
a1747 2
@@subsection GDB command
set args
a1748 2
@@subsection Example
Don't have it around.
d1750 2
a1751 3
@@section -exec-continue
Asynchronous command. Resumes the execution of the inferior program until
a breakpoint is encountered, or the inferior exits.
d1753 1
a1753 2
@@subsection GDB command
continue
a1754 1
@@subsection Example
d1756 13
d1771 1
a1771 1
(gdb) 
d1776 10
d1788 3
a1790 3
@@section -exec-finish
Asynchronous command. Resumes the execution of the inferior program until the
current function is exited. Displays the results returned by the function (???).
d1792 1
a1792 2
@@subsection GDB command
finish
d1794 7
a1800 3
@@subsection Example 1
Function returning 'void'.
@@example
d1803 1
a1803 1
(gdb) 
d1807 7
a1813 6
(gdb) 
@@end example
@@subsection Example 2
Function returning other than 'void'. The name of the internal gdb variable storing the
result is printed, and the value itself.
@@example
d1816 1
a1816 1
(gdb) 
d1818 2
a1819 1
args=@@{@@{name="a",value="1"@@},@@{name="b",value="9"@@}@@},file="recursive2.c",line="14"@@},
d1821 2
a1822 1
(gdb) 
d1824 8
d1833 1
a1833 1
@@section -exec-interrupt
d1836 1
a1836 1
execution command that has been interrupted. The token for the interrupt
d1838 7
a1844 3
interrupt a non running program, an error message will be printed.
@@subsection GDB command
interrupt
d1846 2
a1847 3
@@subsection Example
@@example
(gdb) 
d1851 1
a1851 1
(gdb) 
d1854 1
a1854 1
(gdb) 
d1857 1
a1857 1
(gdb) 
d1859 1
a1859 1
(gdb) 
d1862 3
a1864 1
(gdb) 
d1866 7
d1875 1
a1875 2
@@section -exec-next
Asynchronous command. Resumes execution of the inferior program, stopping
d1878 3
a1880 2
@@subsection GDB command
next
d1882 3
a1884 2
@@subsection Example
@@example
d1887 1
a1887 1
(gdb) 
d1889 11
a1899 1
(gdb) 
d1902 1
a1902 2
@@section -exec-next-instruction
Asynchronous command. Executes one machine instruction. If the
a1905 2
@@subsection GDB command
nexti
d1907 1
a1907 5
@@subsection Example
@@example
(gdb) 
-exec-next-instruction
^running
d1909 10
a1918 1
(gdb) 
d1921 11
a1931 1
(gdb) 
d1934 2
a1935 3
@@section -exec-return
Makes current function return immediately. Doesn't execute the inferior.
It displays the new current frame.
d1937 1
a1937 2
@@subsection GDB command
return
d1939 5
a1943 2
@@subsection Example
@@example
d1949 1
a1949 1
000-exec-run 
d1955 1
a1955 1
(gdb) 
d1961 2
a1962 1
args=@@{@@{name="strarg",value="0x11940 \"A string argument.\""@@}@@},
d1965 10
d1977 2
a1978 3
@@section -exec-run
Asynchronous command. Starts execution of the inferior from the
beginning. The inferior executes until either a breakpoint is
d1981 3
a1983 2
@@subsection GDB command
run
d1985 4
a1988 3
@@subsection Example
@@example
(gdb) 
d1991 1
a1991 1
(gdb) 
d1994 1
a1994 1
(gdb) 
d1997 11
a2007 1
(gdb) 
d2010 3
d2014 3
a2016 5
@@section -exec-show-arguments
Print the arguments of the program.
@@subsection GDB command
show args
@@subsection Example
d2019 4
a2022 1
@@c @@section -exec-signal
d2024 7
a2030 2
@@section -exec-step
Asynchronous command. Resumes execution of the inferior program, stopping
d2032 1
a2032 1
source line is not a function call. If it is, stop at the first
d2035 5
a2039 2
@@subsection GDB command
step
a2040 1
@@subsection Example 1
d2042 2
a2043 1
@@example
d2046 3
a2048 2
(gdb) 
*stopped,reason="end-stepping-range",frame=@@{func="foo",args=@@{@@{name="a",value="10"@@},
d2050 6
a2055 5
(gdb) 
@@end example
@@subsection Example 2
Regular stepping 
@@example
d2058 1
a2058 1
(gdb) 
d2060 11
a2070 1
(gdb) 
d2073 2
a2074 3
@@section -exec-step-instruction
Asynchronous command. Resumes the inferior which executes one machine
instruction. The output, once stop, will vary depend on whether we have
d2078 3
a2080 2
@@subsection GDB command
stepi
d2082 4
a2085 3
@@subsection Example
@@example
(gdb) 
d2089 1
a2089 1
(gdb) 
d2092 1
a2092 1
(gdb) 
d2096 1
a2096 1
(gdb) 
d2099 11
a2109 1
(gdb) 
d2112 2
a2113 3
@@section -exec-until
Asynchronous command. Executes the inferior until the location specified
in the argument is reached. If there is no argument, the inferior
a2115 2
@@subsection GDB command
until
d2117 8
a2124 3
@@subsection Example
@@example
(gdb) 
d2127 1
a2127 1
(gdb) 
d2131 2
a2132 2
(gdb) 
@@end example
d2134 2
a2135 1
@@section -file-clear
d2137 2
d2140 4
a2143 8
@@section -file-exec-and-symbols <file>
Specify the executable file to be debugged. This file is the one from
which the symbol table is also read.  If no file is specified, it clears
the executable and symbol information.  If breakpoints are set when
using this command with no arguments, gdb will produce errors. No output
is produced, except a completion notification.
@@subsection GDB command
file <file>
a2144 1
@@subsection Example
d2146 17
d2167 10
d2179 3
a2181 3
@@section -file-exec-file <file>
Specify the executable file to be debugged. The symbol table is not read
from this file. If used without argument gdb clears the information
a2183 2
@@subsection GDB command
exec-file <file>
d2185 8
a2192 3
@@subsection Example
@@example
(gdb) 
d2195 11
a2205 1
(gdb) 
a2207 1
@@section -file-list-exec-sections
d2209 8
a2216 3
@@subsection GDB command
info file (only part of it), gdb_load_info
@@subsection Example
d2219 10
a2228 1
@@section -file-list-exec-source-files
d2230 7
a2236 3
@@subsection GDB command
gdb_listfiles (gdbtk).
@@subsection Example
d2239 10
a2248 1
@@section -file-list-shared-libraries
d2250 6
a2255 3
@@subsection GDB command
info shared
@@subsection Example
d2258 10
a2267 1
@@section -file-list-symbol-files
d2269 6
a2274 3
@@subsection GDB command
info file (part of it).
@@subsection Example
a2276 6
@@section -file-symbol-file <file>
Read symbol table info from the file specified as argument.  Used
without arguments clears gdb's symbol table info.  No output is
produced, except a completion notification.
@@subsection GDB command
symbol-file <file>
d2278 5
a2282 1
@@subsection Example
d2284 15
a2298 1
(gdb) 
d2301 16
a2316 1
(gdb) 
d2319 7
a2325 2
@@c %%%%%%%%%%%%%%%%%%%%%%%%%%%% CHAPTER %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@@chapter Misc GDB commands
d2327 4
a2330 1
@@c @@section -gdb-complete
d2332 2
a2333 1
@@section -gdb-exit
d2335 1
a2335 3
Exit GDB immediately.
@@subsection GDB command
Approximately corresponds to 'quit'.
a2336 1
@@subsection Example
d2338 1
a2338 2
(gdb) 
-gdb-exit
a2340 1
@@section -gdb-set
d2342 3
a2344 1
IS THIS A DOLLAR VARIABLE? OR SOMETHING LIKE ANNOTATE ?????
d2346 1
a2346 2
@@subsection GDB command
set
d2348 3
a2350 2
@@subsection Example
@@example
d2354 11
a2364 1
(gdb) 
a2366 1
@@section -gdb-show
d2369 5
a2373 2
@@subsection GDB command
show
d2375 2
a2376 3
@@subsection Example
@@example
(gdb) 
d2379 13
a2391 1
(gdb) 
d2394 3
a2396 1
@@c @@section -gdb-source
d2398 2
a2399 2
@@section -gdb-version
Show version information for gdb. Used in testing mostly.
d2401 1
a2401 2
@@subsection GDB command
No equivalent.
d2403 3
a2405 2
@@subsection Example
@@example
d2408 5
a2412 4
~GNU gdb 4.18.1 HEADLESS
~Copyright 1998 Free Software Foundation, Inc.
~GDB is free software, covered by the GNU General Public License, and you are
~welcome to change it and/or distribute copies of it under certain conditions.
d2414 4
a2417 2
~There is absolutely no warranty for GDB.  Type "show warranty" for details.
~This GDB was configured as "--host=sparc-sun-solaris2.5.1 --target=ppc-eabi".
d2419 2
a2420 2
(gdb) 
@@end example
d2422 4
a2425 2
@@c %%%%%%%%%%%%%%%%%%%%%%%%%%%% CHAPTER %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@@chapter Kod Commands
d2429 1
a2429 1
@@c @@section -kod-info
d2431 1
a2431 1
@@c @@section -kod-list
d2433 1
a2433 1
@@c @@section -kod-list-object-types
d2435 1
a2435 1
@@c @@section -kod-show
d2437 3
a2439 2
@@c %%%%%%%%%%%%%%%%%%%%%%%%%%%% CHAPTER %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@@chapter Memory Overlay Commands
d2441 1
a2441 1
the memory overlay commands not implemented.
d2443 1
a2443 1
@@c @@section -overlay-auto
d2445 1
a2445 1
@@c @@section -overlay-list-mapping-state
d2447 1
a2447 1
@@c @@section -overlay-list-overlays
d2449 1
a2449 1
@@c @@section -overlay-map
d2451 1
a2451 1
@@c @@section -overlay-off
d2453 1
a2453 1
@@c @@section -overlay-on
d2455 1
a2455 1
@@c @@section -overlay-unmap
d2457 3
a2459 2
@@c %%%%%%%%%%%%%%%%%%%%%%%%%%%% CHAPTER %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@@chapter Signal Handling Commands
d2463 1
a2463 1
@@c @@section -signal-handle
d2465 1
a2465 1
@@c @@section -signal-list-handle-actions
d2467 2
a2468 1
@@c @@section -signal-list-signal-types
a2469 2
@@c %%%%%%%%%%%%%%%%%%%%%%%%%%%% CHAPTER %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@@chapter Stack manipulation commands
d2471 14
a2484 1
@@section -stack-info-frame
d2486 7
a2492 3
@@subsection GDB command
info frame or frame (w/o args).
@@subsection Example
d2495 18
a2512 6
@@section -stack-info-depth [max-depth]
Return the depth of the stack. If the integer argument <max-depth> is specified, do not
count beyond max-depth frames. 
@@subsection GDB command
No equivalent.
@@subsection Example
d2514 3
a2516 2
@@example
(gdb) 
d2519 1
a2519 1
(gdb) 
d2522 1
a2522 1
(gdb) 
d2525 1
a2525 1
(gdb) 
d2528 1
a2528 1
(gdb) 
d2531 11
a2541 1
(gdb) 
d2544 19
a2562 12
@@section -stack-list-arguments <show-values> [ <low-frame> <high-frame> ]
Display a list of the arguments for the frames between low-frame and
high-frame (inclusive). If low-frame and high-frame are not provided, it
will list the arguments for the whole stack. The show-values argument
must have a value of 0 or 1. A value of 0 means that only the names of
the arguments are listed, a value of 1 means that both names and values
of the argumetns are printed.
@@subsection GDB command
gdb_get_args (partially).
@@subsection Example
@@example
(gdb) 
d2576 1
a2576 1
(gdb) 
d2585 1
a2585 1
(gdb) 
d2590 2
a2591 1
frame=@@{level="1",args=@@{@@{name="strarg",value="0x11940 \"A string argument.\""@@}@@}@@},
d2600 1
a2600 1
(gdb) 
d2603 1
a2603 1
(gdb) 
d2608 13
a2620 1
(gdb) 
d2623 2
a2624 1
@@c @@section -stack-list-exception-handlers
a2625 2
@@section -stack-list-frames [ <low-frame> <high-frame> ]
List the frames currently on the stack. For each frame it displays the following info:
d2627 1
a2627 1
@@item <level>
d2629 8
a2636 8
@@item <addr>
Pc value for that frame.
@@item <func>
Function name 
@@item <file>
File name of the source fle where the function lives.
@@item <line>
Line number corresponding to the pc.
d2639 4
a2642 4
If invoked without arguments, it prints a backtrace for the whole stack.
If given two integer arguments it shows the frames whose levels are
between the two arguments (inclusive). If the two arguments are equal,
it shows the single frame at the corresponding level.
d2644 1
a2644 2
@@subsection GDB command
backtrace or where
d2646 1
a2646 2
@@subsection Example 1
Whole stack backtrace.
d2648 5
a2652 1
@@example
d2656 26
a2681 12
@@{frame=@@{level="0 ",addr="0x0001076c",func="foo",file="recursive2.c",line="11"@@},
frame=@@{level="1 ",addr="0x000107a4",func="foo",file="recursive2.c",line="14"@@},
frame=@@{level="2 ",addr="0x000107a4",func="foo",file="recursive2.c",line="14"@@},
frame=@@{level="3 ",addr="0x000107a4",func="foo",file="recursive2.c",line="14"@@},
frame=@@{level="4 ",addr="0x000107a4",func="foo",file="recursive2.c",line="14"@@},
frame=@@{level="5 ",addr="0x000107a4",func="foo",file="recursive2.c",line="14"@@},
frame=@@{level="6 ",addr="0x000107a4",func="foo",file="recursive2.c",line="14"@@},
frame=@@{level="7 ",addr="0x000107a4",func="foo",file="recursive2.c",line="14"@@},
frame=@@{level="8 ",addr="0x000107a4",func="foo",file="recursive2.c",line="14"@@},
frame=@@{level="9 ",addr="0x000107a4",func="foo",file="recursive2.c",line="14"@@},
frame=@@{level="10",addr="0x000107a4",func="foo",file="recursive2.c",line="14"@@},
frame=@@{level="11",addr="0x00010738",func="main",file="recursive2.c",line="4"@@}@@}
d2683 34
a2716 1
(gdb) 
d2719 27
a2745 2
@@subsection Example 2
Show frames between low_frame and high_frame.
d2747 228
a2974 10
(gdb) 
-stack-list-frames 3 5
^done,stack=
@@{frame=@@{level="3 ",addr="0x000107a4",func="foo",file="recursive2.c",line="14"@@},
frame=@@{level="4 ",addr="0x000107a4",func="foo",file="recursive2.c",line="14"@@},
frame=@@{level="5 ",addr="0x000107a4",func="foo",file="recursive2.c",line="14"@@}@@}
(gdb) 
@@end example
@@subsection Example 3
Show one single frame.
d2976 1
a2976 5
(gdb) 
-stack-list-frames 3 3
^done,stack=
@@{frame=@@{level="3 ",addr="0x000107a4",func="foo",file="recursive2.c",line="14"@@}@@}
(gdb) 
d2979 12
a2990 6
@@section -stack-list-locals <print-values>
Display the local variables names for the current frame.  With an
argument of 0 prints only the names of the variables, with argument of 1
prints also the values.
@@subsection GDB command
gdb_get_locals
d2992 1
a2992 10
@@subsection Example
@@example
(gdb) 
-stack-list-locals 0
^done,locals=@@{name="A",name="B",name="C"@@}
(gdb) 
-stack-list-locals 1
^done,locals=@@{@@{name="A",value="1"@@},@@{name="B",value="2"@@},@@{name="C",value="3"@@}@@}
(gdb) 
@@end example
a2993 7
@@section -stack-select-frame <framenum>
Change the current frame. Select a different frame on the stack.
@@subsection GDB command
frame (part), up, down
AND/OR select-frame,
up-silent, down-silent
@@subsection Example
d2995 1
a2995 4
(gdb) 
-stack-select-frame 2
^done
(gdb) 
d2998 2
a2999 2
@@c %%%%%%%%%%%%%%%%%%%%%%%%%%%% CHAPTER %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@@chapter Symbol query commands
d3001 1
a3001 6
@@section -symbol-info-address <symbol>
Describe where <symbol> is stored.
@@subsection GDB command
Info address
@@subsection Example
N.A.
d3003 1
a3003 6
@@section -symbol-info-file
Show the file for the symbol [NOT SURE]
@@subsection GDB command
gdb_filnd_file (gdbtk).
@@subsection Example
N.A.
d3005 1
a3005 5
@@section -symbol-info-function
Show which function the symbol lives in. [NOT SURE]
@@subsection GDB command
gdb_get_function (gdbtk)
@@subsection Example
a3007 6
@@section -symbol-info-line
Core addresses of the code for a source line.
@@subsection GDB command
info line , gdb_get_line, gdb_get_file
@@subsection Example
N.A.
d3009 2
a3010 6
@@section -symbol-info-symbol
Describe what symbol is at location ADDR [NOT SURE]
@@subsection GDB command
info symbol
@@subsection Example
N.A.
d3012 1
a3012 6
@@section -symbol-list-functions
List the functions in the executable.
@@subsection GDB command
info functions, gdb_listfunc, gdb_search
@@subsection Example
N.A.
d3014 3
a3016 6
@@section -symbol-list-types
List all the type names.
@@subsection GDB command
info types, gdb_search
@@subsection Example
N.A.
d3018 1
a3018 6
@@section -symbol-list-variables
List all global and static variable names.
@@subsection GDB command
Info variables, gdb_search
@@subsection Example
N.A.
d3020 1
a3020 5
@@section -symbol-locate
@@subsection GDB command
gdb_loc (gdbtk)
@@subsection Example
N.A.
d3022 1
a3022 6
@@section -symbol-type
Show type of a variable.
@@subsection GDB command
ptype, gdb_obj_variable
@@subsection Example
N.A.
d3024 1
a3024 2
@@c %%%%%%%%%%%%%%%%%%%%%%%%%%%% CHAPTER %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@@chapter Target manipulation commands
d3026 6
a3031 6
@@section -target-attach
Attach to a process or file outside of GDB.
@@subsection GDB command
attach
@@subsection Example
N.A.
a3032 6
@@section -target-compare-sections
Compare section data on target to the exec file.
@@subsection GDB command
compare-sections
@@subsection Example
N.A.
d3034 2
a3035 3
@@section -target-detach
Disconnect from the remote target.
No output.
d3037 1
a3037 2
@@subsection GDB command
detach
a3038 1
@@subsection Example
d3040 1
a3040 4
(gdb) 
-target-detach
^done
(gdb) 
a3042 1
@@section -target-download
a3044 8
@@itemize @@bullet
@@item section: The name of the section.
@@item section-sent: The size of what has been sent so far for that section.
@@item section-size: The size of the section.
@@item total-sent: The total size of what was sent so far (the current and the previous sections).
@@item total-size: The size of the overall executable to download.
@@end itemize
Each message is sent as status record.
d3046 37
a3082 10
In addition it prints the name and size of the sections, as they are
downloaded. These messages include the fields:
@@itemize @@bullet
@@item section: The name of the section.
@@item section-size: The size of the section.
@@item total-size: The size of the overall executable to download.
@@end itemize
At the end a summary is printed.
@@subsection GDB command
load
d3084 1
a3084 2
@@subsection Example
Note: Each status message appears on a single line. Here the messages
d3086 2
a3087 1
@@example
d3132 13
a3144 2
^done,address="0x10004",load-size="9880",transfer-rate="6586",write-rate="429"
(gdb) 
d3147 8
a3154 5
@@section -target-exec-status
Provide information on the state of the target. Whether it is running or not, for instance.
@@subsection GDB command
No equivalent
@@subsection Example
d3157 10
a3166 1
@@section -target-list-available-targets
d3168 6
a3173 3
@@subsection GDB command
help target
@@subsection Example
d3176 18
a3193 5
@@section -target-list-current-targets
What the current target is.
@@subsection GDB command
info file (part of it).
@@subsection Example
d3196 17
a3212 5
@@section -target-list-parameters
????
@@subsection GDB command
No equivalent
@@subsection Example
a3214 3
@@section -target-select
Connect GDB to the remote target.
It takes two args:
d3216 4
a3219 1
-target-select <type> <parameters>.
d3221 5
a3225 1
Where:
d3228 5
a3232 4
@@item <type>
The type of target, for instance async, remote, etc.
@@item <parameters>
Device names, host names and the like.
d3234 1
d3236 10
a3245 2
which the target program is, in the following form: 
^connected,addr="<address>",func="<function name>",args=@@{<arg list>@@}
d3247 1
a3247 2
@@subsection GDB command
target
d3249 2
a3250 3
@@subsection Example
@@example
(gdb) 
d3253 49
a3301 1
(gdb) 
d3304 8
a3311 2
@@c %%%%%%%%%%%%%%%%%%%%%%%%%%%% CHAPTER %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@@chapter Thread commands
a3312 14
@@section -thread-info
@@subsection GDB command
@@subsection Example

@@section -thread-list-all-threads
@@subsection GDB command
@@subsection Example

@@section -thread-list-ids
Produces a list of the currently known gdb thread ids. At the end of the
list it also prints the toal number of such threads.
@@subsection GDB command
None equivalent. (Maybe part of info threads).
@@subsection Example 1
d3314 3
a3316 2
@@example
(gdb) 
d3319 4
a3322 3
(gdb) 
@@end example
@@subsection Example 2
d3324 3
a3326 2
@@example
(gdb) 
d3330 11
a3340 1
(gdb) 
d3343 1
a3343 2
@@section -thread-select <threadnum>
Make <threadnum> the current thread. It prints the number of the new
d3345 9
a3353 5
@@subsection GDB command
thread
@@subsection Example
@@example
(gdb) 
d3356 1
a3356 1
(gdb) 
d3359 1
a3359 1
(gdb) 
d3362 1
a3362 1
thread-ids={thread-id="3",thread-id="2",thread-id="1"},
d3364 1
a3364 1
(gdb) 
d3370 6
a3375 2
(gdb) 
@@end example
d3377 1
a3377 2
@@c %%%%%%%%%%%%%%%%%%%%%%%%%%%% CHAPTER %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@@chapter Tracepoint Commands
d3379 1
a3379 1
The tracepoint commands are not implemented.
d3381 1
a3381 1
@@c @@section -trace-actions
d3383 1
a3383 1
@@c @@section -trace-delete
d3385 1
a3385 1
@@c @@section -trace-disable
d3387 1
a3387 1
@@c @@section -trace-dump
d3389 1
a3389 1
@@c @@section -trace-enable
d3391 1
a3391 1
@@c @@section -trace-exists
d3393 1
a3393 1
@@c @@section -trace-find
d3395 1
a3395 1
@@c @@section -trace-frame-number
d3397 1
a3397 1
@@c @@section -trace-info
d3399 1
a3399 1
@@c @@section -trace-insert
d3401 1
a3401 1
@@c @@section -trace-list
d3403 1
a3403 1
@@c @@section -trace-pass-count
d3405 1
a3405 1
@@c @@section -trace-save
d3407 1
a3407 1
@@c @@section -trace-start
a3408 1
@@c @@section -trace-stop
d3410 3
a3413 2
@@c %%%%%%%%%%%%%%%%%%%%%%%%%%%% CHAPTER %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@@chapter Variable Objects
d3415 1
a3415 1
@@section Motivation
d3419 1
a3419 1
used by Insight.
d3421 1
a3421 1
The two main reason for that are:
d3425 2
a3426 1
It has been proven in practice (it is already on it's second generation)
d3429 1
a3429 1
now)
d3433 1
a3433 1
slightly changed so it can be used through flathead.  This document
d3435 1
a3435 1
hints about its use.
d3438 4
a3441 3
expect the GUI implementation of a variable window to require, at least,
the following operations:
@@itemize bullet
d3448 1
a3448 1
@@section Introduction
d3450 1
d3457 4
a3460 4
in a tree format.  For instance, the struct type variable is the root
and the children will represent the struct members.  If a children is
itself of a complex type, it will also have children of its own.
Appropriate language differences are handled for C, C++ and Java.
d3465 3
a3467 3
and natural. Natural refers to the a default format automatically chosen
based on the variable type (like decimal for int, hex for pointers,
etc.).
d3502 4
a3505 2
In the next section we describe each operation in detail and suggest how
it can be used.
d3507 2
d3510 1
a3510 1
@@section Operations Description And Use
d3512 4
a3515 1
@@subsection -var-create @@{<name> | '-'@@} @@{<frame-addr> | '*'@@} <expression>
d3521 5
a3525 5
The <name> parameter is the string by which the object can be
referenced.  It must be unique.  If '-' is specified, the varobj system
will generate a string "varNNNNNN" automatically.  It will be unique
provided that one does not specify <name> on that format.  The command
fails if a duplicate name is found.
d3528 2
a3529 1
specified.  A '*' indicates that the current frame should be used.
d3532 15
a3546 4
begin with '*') or: *<addr> - The address of a memory cell
*<addr>-<addr> - An memory address range (TBD) $<regname> - A CPU
register
  
d3549 72
a3620 1
gdb CLI.
a3621 1
name="<name>",numchild="N",type="<type>"
d3623 2
a3624 1
@@subsection -var-delete <name>
d3626 1
a3626 1
Deletes a previously created variable object and all of it's children.
d3628 3
a3630 1
Returns an error if the object <name> is not found.
d3632 1
a3632 1
@@subsection -var-set-format <name> <format-spec>
d3634 4
a3637 1
Sets the output format for the value of the object.
a3638 1
<format-spec> = @@{binary | decimal | hexadecimal | octal | natural@@}
d3640 2
a3641 1
@@subsection -var-show-format <name>
d3643 1
a3643 1
Returns the format used to display the value of the object.
d3645 3
a3647 1
format="<format-spec>"
d3649 2
a3650 1
@@subsection -var-info-num-children <name>
d3652 3
a3654 1
Returns the number of children of a variable object.
a3655 1
numchild="N"
d3657 2
a3658 1
@@subsection -var-list-children <name>
d3660 1
a3660 1
Returns a list of the children of the specified variable object.
d3662 3
a3664 1
numchild="N",children=@@{@@{name="<name>",numchild="N",type="<type>"@@},(repeats N times)@@}
d3666 1
a3666 1
@@subsection -var-info-type <name>
d3668 3
a3670 2
Returns the type of the specified variable.  The type is returned as a
string in the same format as it is output by gdb's CLI.
d3672 2
a3673 1
type="<type>"
d3675 2
a3676 1
@@subsection -var-info-expression <name>
d3678 1
a3678 1
Returns what is represented by the specified variable object.
d3680 3
a3682 1
lang="<lang-spec>",exp="<expression>"
d3684 1
a3684 1
where <lang-spec> = @@{"C" | "C++" | "Java"@@}
d3686 3
a3688 1
@@subsection -var-show-attributes <name>
d3690 2
a3691 1
List attributes of the specified variable object.
d3693 2
a3694 1
status="<attr>[,<attr>]*"
d3696 1
a3696 1
where <attr> = @@{ @@{ editable | noneditable @@} | TBD @@}
d3698 3
a3700 1
@@subsection -var-evaluate-expression <name>
d3704 8
a3711 1
for the object.
d3713 1
a3713 1
value="<value>"
d3715 3
a3717 1
@@subsection -var-assign <name> <expression>
d3719 2
a3720 2
Assigns a new value for the variable object specified.  The object must
be "editable".
d3722 2
a3723 1
@@subsection -var-update @@{<name> | '*'@@}
d3725 5
a3729 3
Update the value of the variable object by evaluating its expression
after fetching all the new values from memory or registers.  A '*'
causes all existing variable objects to be updated.
d3731 3
d3735 1
d3742 1
a3742 1
The output from GDB/MI consists of zero or more out-of-band records
d3747 1
a3747 1
Asynchronous GDB/MI output is similar.
d3750 1
a3750 1
by the input commands @@code{<token>}.
d3753 2
a3754 2
@@item <output> @@expansion{}
@@{ <out-of-band-record> @@} [ <result-record> ] ``(gdb)'' <nl> 
d3756 2
a3757 2
@@item <result-record> @@expansion{}
[ <token> ] ``^'' <result-class> @@{ ``,'' <result> @@} <nl>
d3759 2
a3760 2
@@item <out-of-band-record> @@expansion{}
<async-record> | <stream-record>
d3762 2
a3763 2
@@item <async-record> @@expansion{}
<exec-async-output> | <status-async-output> | <notify-async-output>
d3765 2
a3766 2
@@item <exec-async-output> @@expansion{}
[ <token> ] ``*'' <async-output>
d3768 2
a3769 2
@@item <status-async-output> @@expansion{}
[ <token> ] ``+'' <async-output>
d3771 2
a3772 2
@@item <notify-async-output> @@expansion{}
[ <token> ] ``='' <async-output>
d3774 2
a3775 2
@@item <async-output> @@expansion{}
<async-class> @@{ ``,'' <result> @@} <nl> 
d3777 2
a3778 2
@@item <result-class> @@expansion{} 
``done'' | ``running'' | ``connected'' | ``error'' | ``exit''
d3780 2
a3781 2
@@item <async-class> @@expansion{} 
``stopped'' | @@emph{others depending on need as still in development}
d3783 2
a3784 2
@@item <result> @@expansion{}
<string> ``='' <value>
d3786 2
a3787 2
@@item <value> @@expansion{}
<c-string> | <tupple> | <list>
d3789 2
a3790 2
@@item <tupple> @@expansion{}
``@@{@@}'' | ``@@{'' <result> @@{ ``,'' <result> @@} ``@@}''
d3792 2
a3793 2
@@item <list> @@expansion{}
``[]'' | ``['' <value> @@{ ``,'' <value> @@} ``]''
d3795 1
a3795 1
@@item <string> @@expansion{}
d3798 1
a3798 1
@@item <c-string> @@expansion{}
d3801 2
a3802 2
@@item <stream-record> @@expansion{}
<console-stream-output> | <target-stream-output> | <log-stream-output>
d3804 2
a3805 2
@@item <console-stream-output> @@expansion{}
``~'' <c-string>
d3807 2
a3808 2
@@item <target-stream-output> @@expansion{}
``@@@@'' <c-string>
d3810 2
a3811 2
@@item <log-stream-output> @@expansion{}
``&'' <c-string>
d3813 2
a3814 2
@@item <nl> @@expansion{}
CR | CR-LF
d3816 2
a3817 2
@@item <token> @@expansion{}
``any sequence of digits''
d3825 1
a3825 1
@@item <query>
d3838 1
a3838 1
The @@code{<token>} is from the corresponding request.  If an execution
d3844 1
a3844 1
<status-async-output> contains on-going status information about the progress
d3849 1
a3849 1
<exec-async-output> contains asynchronous state change on the target
d3854 1
a3854 1
<notify-async-output> contains supplementary information that the client should
d3859 1
a3859 1
<console-stream-output> is output that should be displayed as is in the
d3864 1
a3864 1
<target-stream-output> is the output produced by the target program.
d3868 1
a3868 1
<log-stream-output> is output text coming from GDB's internals, for
d3874 2
a3879 1
@@bye
@


1.2.2.1
log
@	* Makefile.in (GDBMI_DIR): New variable.
	(SET_TEXINPUTS): Add $(GDBMI_DIR).
	(SFILES_DOC): Add $(GDBMI_DIR)/gdbmi.texinfo.
	(gdbmi.texinfo): New target, for texi2roff.
	(gdb.me, gdb.ms, gdb.mm): Depend on gdbmi.texinfo.
	(gdb.info, gdb_toc.html): Add "-I ${GDBMI_DIR}".

	* gdb.texinfo (Top): Add GDB/MI to the main menu and @@include
	gdbmi.texinfo.
	(Mode Options): Add xref to GDB/MI docs and remove a FIXME
	comment.

	* gdbmi.texinfo: Lots of changes, to include this document as part
	of the GDB manual.

	* TODO, NEWS: Update due to inclusion of gdbmi.texinfo in the GDB
	manual.
@
text
@d1 16
a16 49
@@c  \input texinfo   @@c -*-texinfo-*-
@@c  @@c %**start of header
@@c  @@setfilename gdbmi.info
@@c  @@settitle GDB/MI Machine Interface
@@c  @@setchapternewpage off
@@c  @@c %**end of header

@@c  @@ifinfo
@@c  This file documents GDB/MI, a Machine Interface to GDB.

@@c  Copyright (C) 2000, Free Software Foundation, Inc.
@@c  Contributed by Cygnus Solutions.

@@c  Permission is granted to make and distribute verbatim copies of this
@@c  manual provided the copyright notice and this permission notice are
@@c  preserved on all copies.

@@c  @@ignore
@@c  Permission is granted to process this file through TeX and print the
@@c  results, provided the printed document carries copying permission notice
@@c  identical to this one except for the removal of this paragraph (this
@@c  paragraph not being relevant to the printed manual).

@@c  @@end ignore
@@c  Permission is granted to copy and distribute modified versions of this
@@c  manual under the conditions for verbatim copying, provided also that the
@@c  entire resulting derived work is distributed under the terms of a
@@c  permission notice identical to this one.

@@c  Permission is granted to copy and distribute translations of this manual
@@c  into another language, under the above conditions for modified versions.
@@c  @@end ifinfo

@@c  @@c  This title page illustrates only one of the
@@c  @@c  two methods of forming a title page.

@@c  @@titlepage
@@c  @@title GDB/MI
@@c  @@subtitle Version 0.2
@@c  @@subtitle Feb 2000
@@c  @@author Andrew Cagney, Fernando Nasser and Elena Zannoni

@@c  @@c  The following two commands
@@c  @@c  start the copyright page.
@@c  @@page
@@c  @@vskip 0pt plus 1filll
@@c  Permission is granted to make and distribute verbatim copies of this
@@c  manual provided the copyright notice and this permission notice are
@@c  preserved on all copies.
d18 35
a52 2
@@c  Copyright @@copyright{} 2000, Free Software Foundation, Inc.
@@c  @@end titlepage
d55 1
a55 2
@@node GDB/MI
@@chapter The @@sc{gdb/mi} Interface
d57 1
a57 1
@@unnumberedsec Function and Purpose
d59 1
a59 2
@@cindex @@sc{gdb/mi}, its purpose
@@sc{gdb/mi} is a line based machine oriented text interface to GDB.  It is
d63 3
a65 1
This chapter is a specification of the @@sc{gdb/mi} interface.  It is written
d68 1
a68 27
Note that @@sc{gdb/mi} is still under construction, so some of the
features described below are incomplete and subject to change.

@@unnumberedsec Notation and Terminology

@@cindex notational conventions, for @@sc{gdb/mi}
This chapter uses the following notation:

@@itemize @@bullet
@@item
@@code{|} separates two alternatives.

@@item
@@code{[ @@var{something} ]} indicates that @@var{something} is optional:
it may or may not be given.

@@item
@@code{( @@var{group} )*} means that @@var{group} inside the parentheses
may repeat zero or more times.

@@item
@@code{( @@var{group} )+} means that @@var{group} inside the parentheses
may repeat one or more times.

@@item
@@code{"@@var{string}"} means a literal @@var{string}.
@@end itemize
a69 1
@@ignore
a70 1
@@end ignore
d74 4
a77 2
In alphabetic order: Andrew Cagney, Fernando Nasser, Stan Shebs and
Elena Zannoni.
d79 1
a79 26
@@menu
* GDB/MI Command Syntax::
* GDB/MI and CLI::
* GDB/MI Output Records::
* GDB/MI Command Description Format::
* GDB/MI Breakpoint Table Commands::
* GDB/MI Data Manipulation::
* GDB/MI Program Control::
* GDB/MI Misc Commands::
* GDB/MI Stack Manipulation::
* GDB/MI Symbol Query::
* GDB/MI Target Manipulation::
* GDB/MI Thread Commands::
* GDB/MI Tracepoint Commands::
* GDB/MI Variable Objects::
@@end menu

@@c When these are implemented, they should be moved to be between Misc and
@@c Stack Manipulation in the above menu.  They are now outside the menu
@@c because makeinfo 3.12 barfs if it sees @@ignore or @@comments in the
@@c middle of a menu.
@@ignore
* GDB/MI Kod Commands::
* GDB/MI Memory Overlay Commands::
* GDB/MI Signal Handling Commands::
@@end ignore
d81 1
a81 9
@@c %%%%%%%%%%%%%%%%%%%%%%%%%%%% SECTION %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@@node GDB/MI Command Syntax
@@section @@sc{gdb/mi} Command Syntax

@@menu
* GDB/MI Input Syntax::
* GDB/MI Output Syntax::
* GDB/MI Simple Examples::
@@end menu
d83 2
a84 2
@@node GDB/MI Input Syntax
@@subsection @@sc{gdb/mi} Input Syntax
d86 2
a87 5
@@cindex input syntax for @@sc{gdb/mi}
@@cindex @@sc{gdb/mi}, input syntax
@@table @@code
@@item @@var{command} @@expansion{}
@@code{@@var{cli-command} | @@var{mi-command}}
d89 2
a90 3
@@item @@var{cli-command} @@expansion{}
@@code{[ @@var{token} ] @@var{cli-command} @@var{nl}}, where
@@var{cli-command} is any existing GDB CLI command.
d92 2
a93 3
@@item @@var{mi-command} @@expansion{}
@@code{[ @@var{token} ] "-" @@var{operation} ( " " @@var{option} )*
@@code{[} " --" @@code{]} ( " " @@var{parameter} )* @@var{nl}}
d95 2
a96 2
@@item @@var{token} @@expansion{}
@@code{"any sequence of digits"}
d98 2
a99 2
@@item @@var{option} @@expansion{}
@@code{"-" @@var{parameter} [ " " @@var{parameter} ]}
d101 2
a102 2
@@item @@var{parameter} @@expansion{}
@@code{@@var{non-blank-sequence} | @@var{c-string}}
d104 3
a106 2
@@item @@var{operation} @@expansion{}
@@emph{any of the operations described in this document}
d108 2
a109 3
@@item @@var{non-blank-sequence} @@expansion{}
@@emph{anything, provided it doesn't contain special characters such as
"-", @@var{nl}, """ and of course " "}
d111 2
a112 2
@@item @@var{c-string} @@expansion{}
@@code{""" @@var{seven-bit-iso-c-string-content} """}
a113 2
@@item @@var{nl} @@expansion{}
@@code{CR | CR-LF}
d119 1
d121 2
a122 2
The CLI commands are still handled by the @@sc{mi} interpreter; their
output is described below.
d125 1
a125 1
The @@code{@@var{token}}, when present, is passed back when the command
d129 6
a134 5
Some @@sc{mi} commands accept optional arguments as part of the parameter
list. Each option is identified by a leading @@samp{-} (dash) and may be
followed by an optional argument parameter.  Options occur first in the
parameter list and can be delimited from normal parameters using
@@samp{--} (this is useful when some parameters begin with a dash).
d140 1
d145 2
a146 1
We want it to be easy to spot a @@sc{mi} operation.
d149 1
a149 2
@@node GDB/MI Output Syntax
@@subsection @@sc{gdb/mi} Output Syntax
d151 1
a151 3
@@cindex output syntax of @@sc{gdb/mi}
@@cindex @@sc{gdb/mi}, output syntax
The output from @@sc{gdb/mi} consists of zero or more out-of-band records
d154 1
a154 1
terminated by @@samp{(gdb)}.
d156 1
a156 1
If an input command was prefixed with a @@code{@@var{token}} then the
d158 1
a158 1
@@var{token}.
d161 5
a165 2
@@item @@var{output} @@expansion{}
@@code{( @@var{out-of-band-record} )* [ @@var{result-record} ] "(gdb)" @@var{nl}}
d167 2
a168 2
@@item @@var{result-record} @@expansion{}
@@code{ [ @@var{token} ] "^" @@var{result-class} ( "," @@var{result} )* @@var{nl}}
d170 2
a171 2
@@item @@var{out-of-band-record} @@expansion{}
@@code{@@var{async-record} | @@var{stream-record}}
d173 2
a174 2
@@item @@var{async-record} @@expansion{}
@@code{@@var{exec-async-output} | @@var{status-async-output} | @@var{notify-async-output}}
d176 2
a177 2
@@item @@var{exec-async-output} @@expansion{}
@@code{[ @@var{token} ] "*" @@var{async-output}}
d179 2
a180 2
@@item @@var{status-async-output} @@expansion{}
@@code{[ @@var{token} ] "+" @@var{async-output}}
d182 2
a183 2
@@item @@var{notify-async-output} @@expansion{}
@@code{[ @@var{token} ] "=" @@var{async-output}}
d185 2
a186 2
@@item @@var{async-output} @@expansion{}
@@code{@@var{async-class} ( "," @@var{result} )* @@var{nl}}
d188 2
a189 2
@@item @@var{result-class} @@expansion{}
@@code{"done" | "running" | "connected" | "error" | "exit"}
d191 2
a192 3
@@item @@var{async-class} @@expansion{}
@@code{"stopped" | @@var{others}} (where @@var{others} will be added
depending on the needs---this is still in development).
d194 2
a195 2
@@item @@var{result} @@expansion{}
@@code{[ @@var{string} "=" ] @@var{value}}
d197 2
a198 2
@@item @@var{value} @@expansion{}
@@code{@@var{const} | "@@{" @@var{result} ( "," @@var{result} )* "@@}"}
d200 2
a201 2
@@item @@var{const} @@expansion{}
@@code{@@var{c-string}}
d203 2
a204 2
@@item @@var{stream-record} @@expansion{}
@@code{@@var{console-stream-output} | @@var{target-stream-output} | @@var{log-stream-output}}
d206 2
a207 2
@@item @@var{console-stream-output} @@expansion{}
@@code{"~" @@var{c-string}}
d209 2
a210 2
@@item @@var{target-stream-output} @@expansion{}
@@code{"@@@@" @@var{c-string}}
d212 2
a213 2
@@item @@var{log-stream-output} @@expansion{}
@@code{"&" @@var{c-string}}
d215 2
a216 2
@@item @@var{nl} @@expansion{}
@@code{CR | CR-LF}
a217 2
@@item @@var{token} @@expansion{}
@@emph{any sequence of digits}.
d220 1
a220 1
In addition, the following are still being developed:
d223 2
a224 1
@@item @@var{query}
d226 1
d232 1
d237 4
a240 4
The @@code{@@var{token}} is from the corresponding request.  If an execution
command is interrupted by the @@samp{-exec-interrupt} command, the
@@var{token} associated with the `*stopped' message is the one of the
original execution command, not the one of the interrupt-command.
d243 3
a245 4
@@cindex status output in @@sc{gdb/mi}
@@var{status-async-output} contains on-going status information about the
progress of a slow operation.  It can be discarded.  All status output is
prefixed by @@samp{+}.
d248 3
a250 4
@@cindex async output in @@sc{gdb/mi}
@@var{exec-async-output} contains asynchronous state change on the target
(stopped, started, disappeared).  All async output is prefixed by
@@samp{*}.
d253 3
a255 4
@@cindex notify output in @@sc{gdb/mi}
@@var{notify-async-output} contains supplementary information that the
client should handle (e.g., a new breakpoint information).  All notify
output is prefixed by @@samp{=}.
d258 3
a260 4
@@cindex console output in @@sc{gdb/mi}
@@var{console-stream-output} is output that should be displayed as is in the
console.  It is the textual response to a CLI command.  All the console
output is prefixed by @@samp{~}.
d263 2
a264 3
@@cindex target output in @@sc{gdb/mi}
@@var{target-stream-output} is the output produced by the target program.
All the target output is prefixed by @@samp{@@@@}.
d267 1
a267 2
@@cindex log output in @@sc{gdb/mi}
@@var{log-stream-output} is output text coming from GDB's internals, for
d269 2
a270 1
the log output is prefixed by @@samp{&}.
d273 1
a273 11
@@xref{GDB/MI Stream Records, , @@sc{gdb/mi} Stream Records}, for more
details about the various output records.

@@node GDB/MI Simple Examples
@@subsection Simple Examples of @@sc{gdb/mi} Interaction
@@cindex @@sc{gdb/mi}, simple examples

This subsection presents several simple examples of interaction using
the @@sc{gdb/mi} interface.  In these examples, @@samp{->} means that the
following line is passed to @@sc{gdb/mi} as input, while @@samp{<-} means
the output received from @@sc{gdb/mi}.
d275 1
a275 3
@@subsubheading Target Stop

Here's an example of stopping the inferior process:
d282 1
a282 2
@@noindent
and later:
a288 1
@@subsubheading Simple CLI Command
d290 1
a290 2
Here's an example of a simple CLI command being passed through
@@sc{gdb/mi} and on to the CLI.
d298 2
a299 1
@@subsubheading Command With Side Effects
a306 1
@@subsubheading A Bad Command
d308 1
a308 1
Here's what happens if you pass a non-existent command:
d316 6
a321 9
@@c %%%%%%%%%%%%%%%%%%%%%%%%%%%% SECTION %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@@node GDB/MI and CLI
@@section @@sc{gdb/mi} Compatibility with CLI

@@cindex compatibility, @@sc{gdb/mi} and CLI
@@cindex @@sc{gdb/mi}, compatibility with CLI
To help users familiar with the GDB's existing CLI interface, @@sc{gdb/mi}
accepts existing CLI commands.  As specified by the syntax, such
commands can be directly entered into the @@sc{gdb/mi} interface and GDB will
d324 14
a337 23
This mechanism is provided as an aid to developers of @@sc{gdb/mi}
clients and not as a reliable interface into the CLI.  Since the command
is being interpreteted in an environment that assumes @@sc{gdb/mi}
behaviour, the exact output of such commands is likely to end up being
an un-supported hybrid of @@sc{gdb/mi} and CLI output.

@@c %%%%%%%%%%%%%%%%%%%%%%%%%%%% SECTION %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@@node GDB/MI Output Records
@@section @@sc{gdb/mi} Output Records

@@menu
* GDB/MI Result Records::
* GDB/MI Stream Records::
* GDB/MI Out-of-band Records::
@@end menu

@@node GDB/MI Result Records
@@subsection @@sc{gdb/mi} Result Records

@@cindex result records in @@sc{gdb/mi}
@@cindex @@sc{gdb/mi}, result records
In addition to a number of out-of-band notifications, the response to a
@@sc{gdb/mi} command includes one of the following result indications:
d340 3
a342 3
@@findex ^done
@@item "^done" [ "," @@var{results} ]
The synchronous operation was successful, @@code{@@var{results}} is the return
d345 1
a345 3
@@item "^running"
@@findex ^running
@@c Is this one correct?  Should it be an out-of-band notification?
d347 2
a348 1
running.
d350 2
a351 3
@@item "^error" "," @@var{c-string}
@@cindex ^error
The operation failed.  The @@code{@@var{c-string}} contains the corresponding
d353 1
d356 1
a356 2
@@node GDB/MI Stream Records
@@subsection @@sc{gdb/mi} Stream Records
a357 2
@@cindex @@sc{gdb/mi}, stream records
@@cindex stream records in @@sc{gdb/mi}
d360 1
a360 1
funneled through the @@sc{gdb/mi} interface using @@dfn{stream records}.
d362 2
a363 4
Each stream record begins with a unique @@dfn{prefix character} which
identifies its stream (@@pxref{GDB/MI Output Syntax, , @@sc{gdb/mi} Output
Syntax}). In addition to the prefix, each stream record contains a
@@code{@@var{string-output}}.  This is either raw text (with an implicit new
d367 2
a368 1
@@item "~" @@var{string-output}
d372 1
a372 1
@@item "@@@@" @@var{string-output}
d376 1
a376 1
@@item "&" @@var{string-output}
d379 1
d382 1
a382 2
@@node GDB/MI Out-of-band Records
@@subsection @@sc{gdb/mi} Out-of-band Records
d384 4
a387 6
@@cindex out-of-band records in @@sc{gdb/mi}
@@cindex @@sc{gdb/mi}, out-of-band records
@@dfn{Out-of-band} records are used to notify the @@sc{gdb/mi} client of
additional changes that have occurred.  Those changes can either be a
consequence of @@sc{gdb/mi} (e.g., a breakpoint modified) or a result of
target activity (e.g., target stopped).
d392 3
a394 1
@@item "*" "stop"
d398 2
a399 3
@@c %%%%%%%%%%%%%%%%%%%%%%%%%%%% SECTION %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@@node GDB/MI Command Description Format
@@section @@sc{gdb/mi} Command Description Format
d401 1
a401 1
The remaining sections describe blocks of commands.  Each block of
d406 2
a407 2
Also note that the commands with a non-available example (N.A.@@:) are
not yet implemented.
d409 1
a409 1
@@subheading Motivation
d411 1
a411 1
The motivation for this collection of commands
d413 1
a413 1
@@subheading Introduction
d415 1
a415 1
A brief introduction to this collection of commands as a whole.
d417 1
a417 1
@@subheading Commands
d419 1
a419 1
For each command in the block, the following is described:
d421 1
a421 1
@@subsubheading Synopsis
d423 1
a423 3
@@example
 -command @@var{args}...
@@end example
d425 1
a425 1
@@subsubheading GDB Command
d427 1
a427 1
The corresponding GDB CLI command.
a428 1
@@subsubheading Result
d430 2
a431 3
@@subsubheading Out-of-band

@@subsubheading Notes
d433 3
a435 1
@@subsubheading Example
d437 2
d440 1
a440 14
@@c %%%%%%%%%%%%%%%%%%%%%%%%%%%% SECTION %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@@node GDB/MI Breakpoint Table Commands
@@section @@sc{gdb/mi} Breakpoint table commands

@@cindex breakpoint commands for @@sc{gdb/mi}
@@cindex @@sc{gdb/mi}, breakpoint commands
This section documents @@sc{gdb/mi} commands for manipulating
breakpoints.

@@subheading The @@code{-break-after} Command
@@findex -break-after

@@subsubheading Synopsis

d442 1
a442 16
 -break-after @@var{number} @@var{count}
@@end example

The breakpoint number @@var{number} is not in effect until it has been
hit @@var{count} times.  To see how this is reflected in the output of
the @@samp{-break-list} command, see the description of the
@@samp{-break-list} command below.

@@subsubheading GDB Command

The corresponding GDB command is @@samp{ignore}.

@@subsubheading Example

@@smallexample
(gdb)
d445 1
a445 1
(gdb)
d449 1
a449 1
(gdb)
d453 3
a455 13
addr="0x000100d0",func="main",file="hello.c",line="5",times="0",
ignore="3"@@}@@}
(gdb)
@@end smallexample

@@ignore
@@subheading The @@code{-break-catch} Command
@@findex -break-catch

@@subheading The @@code{-break-commands} Command
@@findex -break-commands
@@end ignore

d457 1
a457 2
@@subheading -break-condition
@@findex -break-condition
d459 1
a459 1
@@subsubheading Synopsis
d461 6
d468 1
a468 16
 -break-condition @@var{number} @@var{expr}
@@end example

Breakpoint @@var{number} will stop the program only if the condition in
@@var{expr} is true.  The condition becomes part of the
@@samp{-break-list} output (see the description of the @@samp{-break-list}
command below).

@@subsubheading GDB Command

The corresponding GDB command is @@samp{condition}.

@@subsubheading Example

@@smallexample
(gdb)
d471 1
a471 1
(gdb)
d475 2
a476 12
addr="0x000100d0",func="main",file="hello.c",line="5",cond="1",
times="0",ignore="3"@@}@@}
(gdb)
@@end smallexample

@@subheading The @@code{-break-delete} Command
@@findex -break-delete

@@subsubheading Synopsis

@@example
 -break-delete ( @@var{breakpoint} )+
d479 6
a484 9
Delete the breakpoint(s) whose number(s) are specified in the argument
list. This is obviously reflected in the breakpoint list.

@@subsubheading GDB command

The corresponding GDB command is @@samp{delete}.

@@subsubheading Example

d486 2
a487 2
(gdb)
-break-delete 1
d489 1
a489 1
(gdb)
d492 1
a492 1
(gdb)
d495 6
a500 5
@@subheading The @@code{-break-disable} Command
@@findex -break-disable

@@subsubheading Synopsis

d502 1
a502 14
 -break-disable ( @@var{breakpoint} )+
@@end example

Disable the named @@var{breakpoint}(s).  The field @@samp{enabled} in the
break list is now set to @@samp{n} for the named @@var{breakpoint}(s).

@@subsubheading GDB Command

The corresponding GDB command is @@samp{disable}.

@@subsubheading Example

@@smallexample
(gdb)
d505 1
a505 1
(gdb)
d510 2
a511 7
(gdb)
@@end smallexample

@@subheading The @@code{-break-enable} Command
@@findex -break-enable

@@subsubheading Synopsis
d513 5
d519 2
a520 14
 -break-enable ( @@var{breakpoint} )+
@@end example

Enable (previously disabled) @@var{breakpoint}(s).

@@subsubheading GDB Command

The corresponding GDB command is @@samp{enable}.

@@subsubheading Example

@@smallexample
(gdb)
-break-enable 2
d522 1
a522 1
(gdb)
d527 1
a527 10
(gdb)
@@end smallexample

@@subheading The @@code{-break-info} Command
@@findex -break-info

@@subsubheading Synopsis

@@example
 -break-info @@var{breakpoint}
d530 4
a533 8
@@c REDUNDANT???
Get information about a single breakpoint.

@@subsubheading GDB command

The corresponding GDB command is @@samp{info break @@var{breakpoint}}.

@@subsubheading Example
d536 1
a536 13
@@subheading The @@code{-break-insert} Command
@@findex -break-insert

@@subsubheading Synopsis

@@example
 -break-insert [ -t ] [ -h ] [ -r ]
    [ -c @@var{condition} ] [ -i @@var{ignore-count} ]
    [ -p @@var{thread} ] [ @@var{line} | @@var{addr} ]
@@end example

@@noindent
If specified, @@var{line}, can be one of:
d538 1
d549 1
a549 1
The possible optional parameters of this command are:
d556 4
a559 4
@@item -c @@var{condition}
Make the breakpoint conditional on @@var{condition}.
@@item -i @@var{ignore-count}
Initialize the @@var{ignore-count}.
a565 1
@@subsubheading Result
d569 9
d579 1
a579 22
 ^done,bkptno="@@var{number}",func="@@var{funcname}",
  file="@@var{filename}",line="@@var{lineno}"
@@end example

@@noindent
where @@var{number} is the GDB number for this breakpoint, @@var{funcname}
is the name of the function where the breakpoint was inserted,
@@var{filename} is the name of the source file which contains this
function, and @@var{lineno} is the source line number within that file.

Note: this format is open to change.
@@c An out-of-band breakpoint instead of part of the result?

@@subsubheading GDB Command

The corresponding GDB commands are @@samp{break}, @@samp{tbreak},
@@samp{hbreak}, @@samp{thbreak}, and @@samp{rbreak}.

@@subsubheading Example

@@smallexample
(gdb)
d582 1
a582 1
(gdb)
d585 1
a585 1
(gdb)
d588 5
a592 5
bkpt=@@{number="1",type="breakpoint",disp="keep",enabled="y",
addr="0x0001072c", func="main",file="recursive2.c",line="4",times="0"@@},
bkpt=@@{number="2",type="breakpoint",disp="del",enabled="y",
addr="0x00010774",func="foo",file="recursive2.c",line="11",times="0"@@}@@}
(gdb)
d596 1
a596 10
(gdb)
@@end smallexample

@@subheading The @@code{-break-list} Command
@@findex -break-list

@@subsubheading Synopsis

@@example
 -break-list
d599 1
a600 1

d603 1
a603 1
number of the breakpoint
d605 1
a605 1
type of the breakpoint: @@samp{breakpoint} or @@samp{watchpoint}
d607 1
a607 2
should the breakpoint be deleted or disabled when it is hit: @@samp{keep}
or @@samp{nokeep}
d609 1
a609 1
is the breakpoint enabled or no: @@samp{y} or @@samp{n}
d611 1
a611 1
memory location at which the breakpoint is set
d613 1
a613 2
logical location of the breakpoint, expressed by function name, file
name, line number
d615 1
a615 1
number of times the breakpoint has been hit
d620 2
d623 2
a624 7
@@subsubheading GDB Command

The corresponding GDB command is @@samp{info break}.

@@subsubheading Example

@@smallexample
d633 3
a635 5
@@end smallexample

Here's an example of the result when there are no breakpoints:

@@smallexample
d639 1
a639 10
(gdb)
@@end smallexample

@@subheading The @@code{-break-watch} Command
@@findex -break-watch

@@subsubheading Synopsis

@@example
 -break-watch [ -a | -r ]
d642 8
a649 8
Create a watchpoint.  With the @@samp{-a} option it will create an
@@dfn{access} watchpoint, i.e. a watchpoints that triggers either on a
read from or on a write to the memory location.  With the @@samp{-r}
option, the watchpoint created is a @@dfn{read} watchpoint, i.e. it will
trigger only when the memory location is accessed for reading.  Without
either of the options, the watchpoint created is a regular watchpoint,
i.e. it will trigger when the memory location is accessed for writing.
@@xref{Set Watchpoints, , Setting watchpoints}.
d651 1
a651 1
Note that @@samp{-break-list} will report a single list of watchpoints and
d654 2
a655 1
@@subsubheading GDB Command
d657 4
a660 9
The corresponding GDB commands are @@samp{watch}, @@samp{awatch}, and
@@samp{rwatch}.

@@subsubheading Example

Setting a watchpoint on a variable in the @@code{main} function:

@@smallexample
(gdb)
d663 2
a664 2
(gdb)
-exec-continue
d669 7
a675 9
(gdb)
@@end smallexample

Setting a watchpoint on a variable local to a function.  GDB will stop
the program execution twice: first for the variable changing value, then
for the watchpoint going out of scope.

@@smallexample
(gdb)
d678 1
a678 1
(gdb)
d683 3
a685 3
frame=@@{func="callee4",args=@@{@@},
file="../../../devo/gdb/testsuite/gdb.mi/basics.c",line="13"@@}
(gdb)
d689 1
a689 2
frame=@@{func="callee3",args=@@{@@{name="strarg",
value="0x11940 \"A string argument.\""@@}@@},
d691 2
a692 2
(gdb)
@@end smallexample
d694 5
a698 6
Listing breakpoints and watchpoints, at different points in the program
execution.  Note that once the watchpoint goes out of scope, it is
deleted.

@@smallexample
(gdb)
d701 2
a702 2
(gdb)
-break-list
d704 2
a705 2
bkpt=@@{number="1",type="breakpoint",disp="keep",enabled="y",
addr="0x00010734",func="callee4",
d709 1
a709 1
(gdb)
d716 1
a716 1
(gdb)
d719 2
a720 2
bkpt=@@{number="1",type="breakpoint",disp="keep",enabled="y",
addr="0x00010734",func="callee4",
d724 1
a724 1
(gdb)
d728 1
a728 2
frame=@@{func="callee3",args=@@{@@{name="strarg",
value="0x11940 \"A string argument.\""@@}@@},
d730 1
a730 1
(gdb)
d733 2
a734 2
bkpt=@@{number="1",type="breakpoint",disp="keep",enabled="y",
addr="0x00010734",func="callee4",
d736 4
a739 2
(gdb)
@@end smallexample
d741 2
a742 11
@@c %%%%%%%%%%%%%%%%%%%%%%%%%%%% SECTION %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@@node GDB/MI Data Manipulation
@@section @@sc{gdb/mi} Data Manipulation

@@cindex data manipulation, in @@sc{gdb/mi}
@@cindex @@sc{gdb/mi}, data manipulation
This section describes the @@sc{gdb/mi} commands that manipulate data:
examine memory and registers, evaluate expressions, etc.

@@c REMOVED FROM THE INTERFACE.
@@c @@subheading -data-assign
d744 1
a744 1
@@c @@subsubheading GDB command
d746 1
a746 1
@@c @@subsubheading Example
d749 2
a750 15
@@subheading The @@code{-data-disassemble} Command
@@findex -data-disassemble

@@subsubheading Synopsis

@@example
 -data-disassemble
    [ -s @@var{start-addr} -e @@var{end-addr} ]
  | [ -f @@var{filename} -l @@var{linenum} [ -n @@var{lines} ] ]
  -- @@var{mode}
@@end example

@@noindent
Where:

d752 18
a769 20
@@item @@var{start-addr}
is the beginning address (or @@code{$pc})
@@item @@var{end-addr}
is the end address
@@item @@var{filename}
is the name of the file to disassemble
@@item @@var{linenum}
is the line number to disassemble around
@@item @@var{lines}
is the the number of disassembly lines to be produced.  If it is -1,
the whole function will be disassembled, in case no @@var{end-add} is
specified.  If @@var{end-addr} is specified as a non-zero value, and
@@var{lines} is lower that the number of disassembly lines between
@@var{start-addr} and @@var{end-addr}, only @@var{lines} lines are
displayed; if @@var{lines} is higher than the number of lines between
@@var{start-addr} and @@var{end-addr}, only the lines up to @@var{end-addr}
are displayed.
@@item @@var{mode}
is either 0 (meaning only disassembly) or 1 (meaning mixed source and
disassembly)
a771 2
@@subsubheading Result

a772 1

a778 1

d780 3
a782 1
directely by flathead, i.e. it is not possible to adjust its format.
d784 2
a785 1
@@subsubheading GDB Command
d787 1
a787 7
There's no direct mapping from this command to the CLI.

@@subsubheading Example

Disassemble from the current value of @@code{$pc} to @@code{$pc + 20}:

@@smallexample
d789 1
a789 1
-data-disassemble -s $pc -e "$pc + 20" -- 0
d791 11
a801 11
asm_insns=@@{
@@{address="0x000107c0",func-name="main",offset="4",
inst="mov  2, %o0"@@},
@@{address="0x000107c4",func-name="main",offset="8",
inst="sethi  %hi(0x11800), %o2"@@},
@@{address="0x000107c8",func-name="main",offset="12",
inst="or  %o2, 0x140, %o1\t! 0x11940 <_lib_version+8>"@@},
@@{address="0x000107cc",func-name="main",offset="16",
inst="sethi  %hi(0x11800), %o2"@@},
@@{address="0x000107d0",func-name="main",offset="20",
inst="or  %o2, 0x168, %o4\t! 0x11968 <_lib_version+48>"@@}@@}
d803 1
a803 1
@@end smallexample
d805 3
a807 4
Disassemble the whole @@code{main} function.  Line 32 is part of
@@code{main}.

@@smallexample
d809 4
a812 7
^done,asm_insns=@@{
@@{address="0x000107bc",func-name="main",offset="0",
inst="save  %sp, -112, %sp"@@},
@@{address="0x000107c0",func-name="main",offset="4",
inst="mov   2, %o0"@@},
@@{address="0x000107c4",func-name="main",offset="8",
inst="sethi %hi(0x11800), %o2"@@},
d814 2
a815 2
@@{address="0x0001081c",func-name="main",offset="96",inst="ret "@@},
@@{address="0x00010820",func-name="main",offset="100",inst="restore "@@}@@}
d817 1
a817 1
@@end smallexample
d819 4
a822 4
Disassemble 3 instruction from the start of @@code{main}:

@@smallexample
(gdb)
d824 6
a829 9
^done,asm_insns=@@{
@@{address="0x000107bc",func-name="main",offset="0",
inst="save  %sp, -112, %sp"@@},
@@{address="0x000107c0",func-name="main",offset="4",
inst="mov  2, %o0"@@},
@@{address="0x000107c4",func-name="main",offset="8",
inst="sethi  %hi(0x11800), %o2"@@}@@}
(gdb)
@@end smallexample
d831 4
a834 4
Disassemble 3 instruction from the start of @@code{main} in mixed mode:

@@smallexample
(gdb)
d836 21
a856 23
^done,asm_insns=@@{
src_and_asm_line=@@{line="31",
file="/kwikemart/marge/ezannoni/flathead-dev/devo/gdb/ \
  testsuite/gdb.mi/basics.c",line_asm_insn=@@{
@@{address="0x000107bc",func-name="main",offset="0",
inst="save  %sp, -112, %sp"@@}@@}@@},

src_and_asm_line=@@{line="32",
file="/kwikemart/marge/ezannoni/flathead-dev/devo/gdb/ \
  testsuite/gdb.mi/basics.c",line_asm_insn=@@{
@@{address="0x000107c0",func-name="main",offset="4",
inst="mov  2, %o0"@@},
@@{address="0x000107c4",func-name="main",offset="8",
inst="sethi  %hi(0x11800), %o2"@@}@@}@@}@@}
(gdb)
@@end smallexample


@@subheading The @@code{-data-evaluate-expression} Command
@@findex -data-evaluate-expression

@@subsubheading Synopsis

a857 21
 -data-evaluate-expression @@var{expr}
@@end example

Evaluate @@var{expr} as an expression.  The expression could contain an
inferior function call.  The function call will execute synchronously.
If the expression contains spaces, it must be enclosed in double quotes.

@@subsubheading GDB Command

The corresponding GDB commands are @@samp{print}, @@samp{output}, and
@@code{call}.  In @@code{gdbtk} only, there's a corresponding
@@samp{gdb_eval} command.

@@subsubheading Example

In the following example, the numbers that precede the commands are the
@@dfn{tokens} described in @@ref{GDB/MI Command Syntax, , @@sc{gdb/mi}
Command Syntax}.  Notice how @@sc{gdb/mi} returns the same tokens in its
output.

@@smallexample
d860 1
a860 1
(gdb)
d866 1
a866 1
(gdb)
d869 1
a869 11
(gdb)
@@end smallexample


@@subheading The @@code{-data-list-changed-registers} Command
@@findex -data-list-changed-registers

@@subsubheading Synopsis

@@example
 -data-list-changed-registers
d872 1
d874 6
a879 12

@@subsubheading GDB Command

GDB doesn't have a direct analog for this command; @@code{gdbtk} has the
corresponding command @@samp{gdb_changed_register_list}.

@@subsubheading Example

On a PPC MBX board:

@@smallexample
(gdb)
d883 1
a883 1
(gdb)
d886 1
a886 1
(gdb)
d891 1
a891 11
(gdb)
@@end smallexample


@@subheading The @@code{-data-list-register-names} Command
@@findex -data-list-register-names

@@subsubheading Synopsis

@@example
 -data-list-register-names [ ( @@var{regno} )+ ]
d894 1
d898 4
a901 10
names of the registers corresponding to the arguments.

@@subsubheading GDB Command

GDB does not have a command which corresponds to
@@samp{-data-list-register-names}.  In @@code{gdbtk} there is a
corresponding command @@samp{gdb_regnames}.

@@subsubheading Example

d903 1
a903 1
@@smallexample
d916 2
a917 2
(gdb)
@@end smallexample
d919 14
a932 4
@@subheading The @@code{-data-list-register-values} Command
@@findex -data-list-register-values

@@subsubheading Synopsis
d934 5
d940 1
a940 37
 -data-list-register-values @@var{fmt} [ ( @@var{regno} )*]
@@end example

Display the registers contents.  @@var{fmt} is the format according to
which the registers contents are to be returned, followed by an optional
list of numbers specifying the registers to display.  A missing list of
numbers indicates that the contents of all the registers must be returned.

Allowed formats for @@var{fmt} are:

@@table @@code
@@item x
Hexadecimal
@@item o
Octal
@@item t
Binary
@@item d
Decimal
@@item r
Raw
@@item N
Natural
@@end table

@@subsubheading GDB Command

The corresponding GDB commands are @@samp{info reg}, @@samp{info all-reg},
and (in @@code{gdbtk}) @@samp{gdb_fetch_registers}.

@@subsubheading Example

For a PPC MBX board (note: line breaks are for readability only, they
don't appear in the actual output):

@@smallexample
(gdb)
d944 1
a944 1
(gdb)
d982 1
a982 13
(gdb)
@@end smallexample


@@subheading The @@code{-data-read-memory} Command
@@findex -data-read-memory

@@subsubheading Synopsis

@@example
 -data-read-memory [ -o @@var{byte-offset} ]
   @@var{address} @@var{word-format} @@var{word-size}
   @@var{nr-rows} @@var{nr-cols} [ @@var{aschar} ]
d985 2
a986 3
@@noindent
where:

d988 1
a988 1
@@item @@var{address}
d992 1
a992 2

@@item @@var{word-format}
d994 2
a995 4
same as for GDB's @@code{print} command (@@pxref{Output Formats, , Output
formats}).

@@item @@var{word-size}
d997 1
a997 2

@@item @@var{nr-rows}
d999 1
a999 2

@@item @@var{nr-cols}
d1001 6
a1006 9

@@item @@var{aschar}
If present, indicates that each row should include an @@sc{ascii} dump.  The
value of @@var{aschar} is used as a padding character when a byte is not a
member of the printable @@sc{ascii} character set (printable @@sc{ascii}
characters are those whose code is between 32 and 126, inclusively).

@@item @@var{byte-offset}
An offset to add to the @@var{address} before fetching memory.
d1008 7
a1014 9

This command displays memory contents as a table of @@var{nr-rows} by
@@var{nr-cols} words, each word being @@var{word-size} bytes.  In total,
@@code{@@var{nr-rows} * @@var{nr-cols} * @@var{word-size}} bytes are read
(returned as @@samp{total-bytes}.  Should less then the requested number
of bytes be returned by the target, the missing words are identified
using @@samp{N/A}.  The number of bytes read  from the target is returned
in @@samp{nr-bytes} and the starting address used to read memory in
@@samp{addr}.
d1017 5
a1021 10
@@samp{next-row} and @@samp{prev-row}, @@samp{next-page} and
@@samp{prev-page}.

@@subsubheading GDB Command

The corresponding GDB command is @@samp{x}.  @@code{gdbtk} has
@@samp{gdb_get_mem} memory read.

@@subsubheading Example

d1025 2
a1026 3

@@smallexample
(gdb)
d1034 3
a1036 3
(gdb)
@@end smallexample

d1039 2
a1040 3

@@smallexample
(gdb)
d1046 3
a1048 3
(gdb)
@@end smallexample

d1052 2
a1053 3

@@smallexample
(gdb)
d1066 1
a1066 10
(gdb)
@@end smallexample

@@subheading The @@code{-display-delete} Command
@@findex -display-delete

@@subsubheading Synopsis

@@example
 -display-delete @@var{number}
d1069 5
a1073 7
Delete the display @@var{number}.

@@subsubheading GDB Command

The corresponding GDB command is @@samp{delete display}.

@@subsubheading Example
d1076 5
a1080 17

@@subheading The @@code{-display-disable} Command
@@findex -display-disable

@@subsubheading Synopsis

@@example
 -display-disable @@var{number}
@@end example

Disable display @@var{number}.

@@subsubheading GDB Command

the corresponding GDB command is @@samp{disable display}.

@@subsubheading Example
d1083 5
a1087 17

@@subheading The @@code{-display-enable} Command
@@findex -display-enable

@@subsubheading Synopsis

@@example
 -display-enable @@var{number}
@@end example

Enable display @@var{number}.

@@subsubheading GDB Command

The corresponding GDB command is @@samp{enable display}.

@@subsubheading Example
d1090 5
a1094 17

@@subheading The @@code{-display-insert} Command
@@findex -display-insert

@@subsubheading Synopsis

@@example
 -display-insert @@var{expression}
@@end example

Display @@var{expression} every time the program stops.

@@subsubheading GDB Command

The corresponding GDB command is @@samp{display}.

@@subsubheading Example
d1097 5
a1101 17

@@subheading The @@code{-display-list} Command
@@findex -display-list

@@subsubheading Synopsis

@@example
 -display-list
@@end example

List the displays.  Do not show the current values.

@@subsubheading GDB Command

The corresponding GDB command is @@samp{info display}.

@@subsubheading Example
d1104 5
a1108 6

@@subheading The @@code{-environment-cd} Command
@@findex -environment-cd

@@subsubheading Synopsis

d1110 1
a1110 13
 -environment-cd @@var{pathdir}
@@end example

Set GDB's working directory.

@@subsubheading GDB Command

the corresponding GDB command is @@samp{cd}.

@@subsubheading Example

@@smallexample
(gdb)
d1113 2
a1114 8
(gdb)
@@end smallexample


@@subheading The @@code{-environment-directory} Command
@@findex -environment-directory

@@subsubheading Synopsis
d1116 5
d1122 1
a1122 13
 -environment-directory @@var{pathdir}
@@end example

Add directory @@var{pathdir} to beginning of search path for source files.

@@subsubheading GDB Command

The corresponding GDB command is @@samp{dir}.

@@subsubheading Example

@@smallexample
(gdb)
d1126 1
a1126 7
@@end smallexample


@@subheading The @@code{-environment-path} Command
@@findex -environment-path

@@subsubheading Synopsis
d1128 5
d1134 1
a1134 13
 -environment-path ( @@var{pathdir} )+
@@end example

Add directories to beginning of search path for object files.

@@subsubheading GDB Command

The corresponding GDB command is @@samp{path}.

@@subsubheading Example

@@smallexample
(gdb)
d1138 1
a1138 7
@@end smallexample


@@subheading The @@code{-environment-pwd} Command
@@findex -environment-pwd

@@subsubheading Synopsis
d1140 5
d1146 1
a1146 13
 -environment-pwd
@@end example

Show the current working directory.

@@subsubheading GDB command

The corresponding GDB command is @@samp{pwd}.

@@subsubheading Example

@@smallexample
(gdb)
d1150 2
a1151 2
(gdb)
@@end smallexample
d1153 2
a1154 5
@@c %%%%%%%%%%%%%%%%%%%%%%%%%%%% SECTION %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@@node GDB/MI Program Control
@@section @@sc{gdb/mi} Program control

@@subsubheading Program termination
d1156 1
d1160 1
a1160 4

@@subsubheading Examples:

@@noindent
d1162 2
a1163 3

@@smallexample
(gdb)
d1169 2
a1170 2
(gdb)
@@end smallexample
d1172 1
a1172 1
@@noindent
d1174 2
a1175 3

@@smallexample
(gdb)
d1181 2
a1182 17
(gdb)
@@end smallexample

Another way the program can terminate is if it receives a signal such as
@@code{SIGINT}.  In this case, @@sc{gdb/mi} displays this:

@@smallexample
(gdb)
*stopped,reason="exited-signalled",signal-name="SIGINT",
signal-meaning="Interrupt"
@@end smallexample


@@subheading The @@code{-exec-abort} Command
@@findex -exec-abort

@@subsubheading Synopsis
d1184 3
d1188 2
a1189 1
 -exec-abort
d1192 2
d1196 2
a1197 1
@@subsubheading GDB Command
d1199 1
a1199 3
The corresponding GDB command is @@samp{kill}.

@@subsubheading Example
d1202 2
d1205 2
a1206 20
@@subheading The @@code{-exec-arguments} Command
@@findex -exec-arguments

@@subsubheading Synopsis

@@example
 -exec-arguments @@var{args}
@@end example

Set the inferior program arguments, to be used in the next
@@samp{-exec-run}.

@@subsubheading GDB Command

The corresponding GDB command is @@samp{set args}.

@@subsubheading Example

@@c FIXME!
Don't have one around.
d1208 2
d1211 3
a1213 2
@@subheading The @@code{-exec-continue} Command
@@findex -exec-continue
d1215 2
a1216 1
@@subsubheading Synopsis
d1218 1
a1219 13
 -exec-continue
@@end example

Asynchronous command.  Resumes the execution of the inferior program
until a breakpoint is encountered, or until the inferior exits.

@@subsubheading GDB Command

The corresponding GDB corresponding is @@samp{continue}.

@@subsubheading Example

@@smallexample
d1222 1
a1222 1
(gdb)
d1227 1
a1227 1
@@end smallexample
d1229 3
d1233 2
a1234 4
@@subheading The @@code{-exec-finish} Command
@@findex -exec-finish

@@subsubheading Synopsis
d1236 2
a1238 16
 -exec-finish
@@end example

Asynchronous command.  Resumes the execution of the inferior program
until the current function is exited.  Displays the results returned by
the function.

@@subsubheading GDB Command

The corresponding GDB command is @@samp{finish}.

@@subsubheading Example

Function returning @@code{void}.

@@smallexample
d1241 1
a1241 1
(gdb)
d1245 6
a1250 7
(gdb)
@@end smallexample

Function returning other than @@code{void}.  The name of the internal GDB
variable storing the result is printed, together with the value itself.

@@smallexample
d1253 1
a1253 1
(gdb)
d1255 1
a1255 2
args=@@{@@{name="a",value="1"@@},@@{name="b",value="9"@@}@@},
file="recursive2.c",line="14"@@},
d1257 1
a1257 2
(gdb)
@@end smallexample
a1258 8

@@subheading The @@code{-exec-interrupt} Command
@@findex -exec-interrupt

@@subsubheading Synopsis

@@example
 -exec-interrupt
d1260 1
a1260 1

d1263 1
a1263 1
execution command that has been interrupted.  The token for the interrupt
d1265 3
a1267 1
interrupt a non-running program, an error message will be printed.
d1269 3
a1271 8
@@subsubheading GDB Command

The corresponding GDB command is @@samp{interrupt}.

@@subsubheading Example

@@smallexample
(gdb)
d1275 1
a1275 1
(gdb)
d1278 1
a1278 1
(gdb)
d1281 1
a1281 1
(gdb)
d1283 1
a1283 1
(gdb)
d1286 1
a1286 3
(gdb)
@@end smallexample

a1287 7
@@subheading The @@code{-exec-next} Command
@@findex -exec-next

@@subsubheading Synopsis

@@example
 -exec-next
d1290 2
a1291 1
Asynchronous command.  Resumes execution of the inferior program, stopping
d1294 2
a1295 1
@@subsubheading GDB Command
d1297 2
a1298 5
The corresponding GDB command is @@samp{next}.

@@subsubheading Example

@@smallexample
d1301 1
a1301 1
(gdb)
d1303 1
a1303 11
(gdb)
@@end smallexample


@@subheading The @@code{-exec-next-instruction} Command
@@findex -exec-next-instruction

@@subsubheading Synopsis

@@example
 -exec-next-instruction
d1306 2
a1307 1
Asynchronous command.  Executes one machine instruction.  If the
d1311 2
d1314 5
a1318 1
@@subsubheading GDB Command
d1320 1
a1320 10
The corresponding GDB command is @@samp{nexti}.

@@subsubheading Example

@@smallexample
(gdb)
-exec-next-instruction
^running

(gdb)
d1323 2
a1324 3
(gdb)
@@end smallexample

d1326 3
a1328 2
@@subheading The @@code{-exec-return} Command
@@findex -exec-return
d1330 2
a1331 1
@@subsubheading Synopsis
d1333 1
a1334 13
 -exec-return
@@end example

Makes current function return immediately.  Doesn't execute the inferior.
Displays the new current frame.

@@subsubheading GDB Command

The corresponding GDB command is @@samp{return}.

@@subsubheading Example

@@smallexample
d1340 1
a1340 1
000-exec-run
d1346 1
a1346 1
(gdb)
d1352 1
a1352 2
args=@@{@@{name="strarg",
value="0x11940 \"A string argument.\""@@}@@},
a1354 10
@@end smallexample


@@subheading The @@code{-exec-run} Command
@@findex -exec-run

@@subsubheading Synopsis

@@example
 -exec-run
d1357 3
a1359 2
Asynchronous command.  Starts execution of the inferior from the
beginning.  The inferior executes until either a breakpoint is
d1362 2
a1363 1
@@subsubheading GDB Command
d1365 3
a1367 6
The corresponding GDB command is @@samp{run}

@@subsubheading Example

@@smallexample
(gdb)
d1370 1
a1370 1
(gdb)
d1373 1
a1373 1
(gdb)
d1376 2
a1377 3
(gdb)
@@end smallexample

a1378 8
@@subheading The @@code{-exec-show-arguments} Command
@@findex -exec-show-arguments

@@subsubheading Synopsis

@@example
 -exec-show-arguments
@@end example
d1380 1
d1382 3
a1384 6

@@subsubheading GDB Command

The corresponding GDB command is @@samp{show args}.

@@subsubheading Example
d1387 1
a1387 10
@@c @@subheading -exec-signal

@@subheading The @@code{-exec-step} Command
@@findex -exec-step

@@subsubheading Synopsis

@@example
 -exec-step
@@end example
d1389 2
a1390 1
Asynchronous command.  Resumes execution of the inferior program, stopping
d1392 1
a1392 1
source line is not a function call.  If it is, stop at the first
d1395 2
a1396 5
@@subsubheading GDB Command

The corresponding GDB command is @@samp{step}.

@@subsubheading Example
d1398 1
d1400 1
a1400 2

@@smallexample
d1403 2
a1404 3
(gdb)
*stopped,reason="end-stepping-range",
frame=@@{func="foo",args=@@{@@{name="a",value="10"@@},
d1406 5
a1410 6
(gdb)
@@end smallexample

Regular stepping:

@@smallexample
d1413 1
a1413 1
(gdb)
d1415 1
a1415 11
(gdb)
@@end smallexample


@@subheading The @@code{-exec-step-instruction} Command
@@findex -exec-step-instruction

@@subsubheading Synopsis

@@example
 -exec-step-instruction
d1418 3
a1420 2
Asynchronous command.  Resumes the inferior which executes one machine
instruction.  The output, once stop, will vary depend on whether we have
d1424 2
a1425 1
@@subsubheading GDB Command
d1427 3
a1429 6
The corresponding GDB command is @@samp{stepi}.

@@subsubheading Example

@@smallexample
(gdb)
d1433 1
a1433 1
(gdb)
d1436 1
a1436 1
(gdb)
d1440 1
a1440 1
(gdb)
d1443 1
a1443 11
(gdb)
@@end smallexample


@@subheading The @@code{-exec-until} Command
@@findex -exec-until

@@subsubheading Synopsis

@@example
 -exec-until [ @@var{location} ]
d1446 3
a1448 2
Asynchronous command.  Executes the inferior until the @@var{location}
specified in the argument is reached.  If there is no argument, the inferior
d1451 2
d1454 3
a1456 8
@@subsubheading GDB Command

The corresponding GDB command is @@samp{until}.

@@subsubheading Example

@@smallexample
(gdb)
d1459 1
a1459 1
(gdb)
d1463 2
a1464 2
(gdb)
@@end smallexample
d1466 1
a1466 2
@@ignore
@@subheading -file-clear
a1467 5
@@end ignore


@@subheading The @@code{-file-exec-and-symbols} Command
@@findex -file-exec-and-symbols
d1469 8
a1476 1
@@subsubheading Synopsis
d1478 1
a1479 17
 -file-exec-and-symbols @@var{file}
@@end example

Specify the executable file to be debugged.  This file is the one from
which the symbol table is also read.  If no file is specified, the
command clears the executable and symbol information.  If breakpoints
are set when using this command with no arguments, gdb will produce
error messages.  Oterwise, no output is produced, except a completion
notification.

@@subsubheading GDB Command

The corresponding GDB command is @@samp{file}.

@@subsubheading Example

@@smallexample
a1483 10
@@end smallexample


@@subheading The @@code{-file-exec-file} Command
@@findex -file-exec-file

@@subsubheading Synopsis

@@example
 -file-exec-file @@var{file}
d1486 3
a1488 3
Specify the executable file to be debugged.  Unlike
@@samp{-file-exec-and-symbols}, the symbol table is @@emph{not} read
from this file.  If used without argument, GDB clears the information
d1491 2
d1494 3
a1496 8
@@subsubheading GDB Command

The corresponding GDB command is @@samp{exec-file}.

@@subsubheading Example

@@smallexample
(gdb)
d1499 1
a1499 11
(gdb)
@@end smallexample


@@subheading The @@code{-file-list-exec-sections} Command
@@findex -file-list-exec-sections

@@subsubheading Synopsis

@@example
 -file-list-exec-sections
d1502 1
d1504 3
a1506 8

@@subsubheading GDB Command

The GDB command @@samp{info file} shows, among the rest, the same
information as this command.  @@code{gdbtk} has a corresponding command
@@samp{gdb_load_info}.

@@subsubheading Example
d1509 1
a1509 10

@@subheading The @@code{-file-list-exec-source-files} Command
@@findex -file-list-exec-source-files

@@subsubheading Synopsis

@@example
 -file-list-exec-source-files
@@end example

d1511 3
a1513 7

@@subsubheading GDB Command

There's no GDB command which directly corresponds to this one.
@@code{gdbtk} has an analogous command @@samp{gdb_listfiles}.

@@subsubheading Example
d1516 1
a1516 10

@@subheading The @@code{-file-list-shared-libraries} Command
@@findex -file-list-shared-libraries

@@subsubheading Synopsis

@@example
 -file-list-shared-libraries
@@end example

d1518 3
a1520 6

@@subsubheading GDB Command

The corresponding GDB command os @@samp{info shared}.

@@subsubheading Example
d1523 1
a1523 10

@@subheading The @@code{-file-list-symbol-files} Command
@@findex -file-list-symbol-files

@@subsubheading Synopsis

@@example
 -file-list-symbol-files
@@end example

d1525 3
a1527 6

@@subsubheading GDB Command

The corresponding GDB command is @@samp{info file} (part of it).

@@subsubheading Example
d1530 6
d1537 1
a1537 5
@@subheading The @@code{-file-symbol-file} Command
@@findex -file-symbol-file

@@subsubheading Synopsis

d1539 1
a1539 15
 -file-symbol-file @@var{file}
@@end example

Read symbol table info from the specified @@var{file} argument.  When
used without arguments, clears GDB'S symbol table info.  No output is
produced, except for a completion notification.

@@subsubheading GDB Command

The corresponding GDB command is @@samp{symbol-file}.

@@subsubheading Example

@@smallexample
(gdb)
d1542 2
a1543 2
(gdb)
@@end smallexample
d1545 2
a1546 3
@@c %%%%%%%%%%%%%%%%%%%%%%%%%%%% SECTION %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@@node GDB/MI Misc Commands
@@section Misc GDB commands in @@sc{gdb/mi}
d1548 1
a1548 1
@@c @@subheading -gdb-complete
d1550 1
a1550 2
@@subheading The @@code{-gdb-exit} Command
@@findex -gdb-exit
d1552 3
a1554 1
@@subsubheading Synopsis
d1556 1
d1558 1
a1558 13
 -gdb-exit
@@end example

Exit GDB immediately.

@@subsubheading GDB Command

Approximately corresponds to @@samp{quit}.

@@subsubheading Example

@@smallexample
(gdb)
a1559 9
@@end smallexample

@@subheading The @@code{-gdb-set} Command
@@findex -gdb-set

@@subsubheading Synopsis

@@example
 -gdb-set
d1562 1
d1564 1
a1564 1
@@c IS THIS A DOLLAR VARIABLE? OR SOMETHING LIKE ANNOTATE ?????
d1566 2
a1567 1
@@subsubheading GDB Command
d1569 2
a1570 5
The corresponding GDB command is @@samp{set}.

@@subsubheading Example

@@smallexample
d1574 1
a1574 11
(gdb)
@@end smallexample


@@subheading The @@code{-gdb-show} Command
@@findex -gdb-show

@@subsubheading Synopsis

@@example
 -gdb-show
d1577 1
d1580 2
a1581 1
@@subsubheading GDB command
d1583 3
a1585 6
The corresponding GDB command is @@samp{show}.

@@subsubheading Example

@@smallexample
(gdb)
d1588 2
a1589 2
(gdb)
@@end smallexample
d1591 1
a1591 1
@@c @@subheading -gdb-source
d1593 2
d1596 2
a1597 4
@@subheading The @@code{-gdb-version} Command
@@findex -gdb-version

@@subsubheading Synopsis
d1599 1
a1600 15
 -gdb-version
@@end example

Show version information for GDB.  Used mostly in testing.

@@subsubheading GDB Command

There's no equivalent GDB command.  GDB by default shows this
information when you start an interactive session.

@@subsubheading Example

@@c This example modifies the actual output from GDB to avoid overfull
@@c box in TeX.
@@smallexample
d1603 4
a1606 5
~GNU gdb 5.2.1
~Copyright 2000 Free Software Foundation, Inc.
~GDB is free software, covered by the GNU General Public License, and
~you are welcome to change it and/or distribute copies of it under
~ certain conditions.
d1608 2
a1609 4
~There is absolutely no warranty for GDB.  Type "show warranty" for
~ details.
~This GDB was configured as 
 "--host=sparc-sun-solaris2.5.1 --target=ppc-eabi".
d1611 2
a1612 2
(gdb)
@@end smallexample
d1614 2
a1615 4
@@ignore
@@c %%%%%%%%%%%%%%%%%%%%%%%%%%%% SECTION %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@@node GDB/MI Kod Commands
@@section @@sc{gdb/mi} Kod Commands
d1619 1
a1619 1
@@c @@subheading -kod-info
d1621 1
a1621 1
@@c @@subheading -kod-list
d1623 1
a1623 1
@@c @@subheading -kod-list-object-types
d1625 1
a1625 1
@@c @@subheading -kod-show
d1627 2
a1628 3
@@c %%%%%%%%%%%%%%%%%%%%%%%%%%%% SECTION %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@@node GDB/MI Memory Overlay Commands
@@section @@sc{gdb/mi} Memory Overlay Commands
d1630 1
a1630 1
The memory overlay commands are not implemented.
d1632 1
a1632 1
@@c @@subheading -overlay-auto
d1634 1
a1634 1
@@c @@subheading -overlay-list-mapping-state
d1636 1
a1636 1
@@c @@subheading -overlay-list-overlays
d1638 1
a1638 1
@@c @@subheading -overlay-map
d1640 1
a1640 1
@@c @@subheading -overlay-off
d1642 1
a1642 1
@@c @@subheading -overlay-on
d1644 1
a1644 1
@@c @@subheading -overlay-unmap
d1646 2
a1647 3
@@c %%%%%%%%%%%%%%%%%%%%%%%%%%%% SECTION %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@@node GDB/MI Signal Handling Commands
@@section @@sc{gdb/mi} Signal Handling Commands
d1651 1
a1651 1
@@c @@subheading -signal-handle
d1653 1
a1653 1
@@c @@subheading -signal-list-handle-actions
d1655 1
a1655 2
@@c @@subheading -signal-list-signal-types
@@end ignore
d1657 2
d1660 1
a1660 14
@@c %%%%%%%%%%%%%%%%%%%%%%%%%%%% SECTION %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@@node GDB/MI Stack Manipulation
@@section Stack manipulation commands in @@sc{gdb/mi}


@@subheading The @@code{-stack-info-frame} Command
@@findex -stack-info-frame

@@subsubheading Synopsis

@@example
 -stack-info-frame
@@end example

d1662 3
a1664 7

@@subsubheading GDB Command

The corresponding GDB command is @@samp{info frame} or @@samp{frame}
(without arguments).

@@subsubheading Example
d1667 7
a1673 5
@@subheading The @@code{-stack-info-depth} Command
@@findex -stack-info-depth

@@subsubheading Synopsis

d1675 1
a1675 16
 -stack-info-depth [ @@var{max-depth} ]
@@end example

Return the depth of the stack.  If the integer argument @@var{max-depth}
is specified, do not count beyond @@var{max-depth} frames.

@@subsubheading GDB Command

There's no equivalent GDB command.

@@subsubheading Example

For a stack with frame levels 0 through 11:

@@smallexample
(gdb)
d1678 1
a1678 1
(gdb)
d1681 1
a1681 1
(gdb)
d1684 1
a1684 1
(gdb)
d1687 1
a1687 1
(gdb)
d1690 2
a1691 7
(gdb)
@@end smallexample

@@subheading The @@code{-stack-list-arguments} Command
@@findex -stack-list-arguments

@@subsubheading Synopsis
d1693 10
d1704 1
a1704 23
 -stack-list-arguments @@var{show-values}
    [ @@var{low-frame} @@var{high-frame} ]
@@end example

Display a list of the arguments for the frames between @@var{low-frame}
and @@var{high-frame} (inclusive).  If @@var{low-frame} and
@@var{high-frame} are not provided, list the arguments for the whole call
stack.

The @@var{show-values} argument must have a value of 0 or 1.  A value of
0 means that only the names of the arguments are listed, a value of 1
means that both names and values of the argumetns are printed.

@@subsubheading GDB Command

GDB does not have an equivalent command.  @@code{gdbtk} has a
@@samp{gdb_get_args} command which partially overlaps with the
functionality of @@samp{-stack-list-arguments}.

@@subsubheading Example

@@smallexample
(gdb)
d1718 1
a1718 1
(gdb)
d1727 1
a1727 1
(gdb)
d1732 1
a1732 2
frame=@@{level="1",
 args=@@{@@{name="strarg",value="0x11940 \"A string argument.\""@@}@@}@@},
d1741 1
a1741 1
(gdb)
d1744 1
a1744 1
(gdb)
d1749 1
a1749 13
(gdb)
@@end smallexample

@@c @@subheading -stack-list-exception-handlers


@@subheading The @@code{-stack-list-frames} Command
@@findex -stack-list-frames

@@subsubheading Synopsis

@@example
 -stack-list-frames [ @@var{low-frame} @@var{high-frame} ]
d1752 1
a1752 2
List the frames currently on the stack.  For each frame it displays the
following info:
d1754 2
d1757 1
a1757 1
@@item @@var{level}
d1759 8
a1766 8
@@item @@var{addr}
The @@code{$pc} value for that frame.
@@item @@var{func}
Function name.
@@item @@var{file}
File name of the source file where the function lives.
@@item @@var{line}
Line number corresponding to the @@code{$pc}.
d1769 4
a1772 4
If invoked without arguments, this command prints a backtrace for the
whole stack.  If given two integer arguments, it shows the frames whose
levels are between the two arguments (inclusive).  If the two arguments
are equal, it shows the single frame at the corresponding level.
d1774 2
a1775 1
@@subsubheading GDB Command
d1777 2
a1778 1
The corresponding GDB commands are @@samp{backtrace} and @@samp{where}.
d1780 1
a1780 5
@@subsubheading Example

Full stack backtrace:

@@smallexample
d1784 12
a1795 26
@@{frame=@@{level="0 ",addr="0x0001076c",func="foo",
  file="recursive2.c",line="11"@@},
frame=@@{level="1 ",addr="0x000107a4",func="foo",
  file="recursive2.c",line="14"@@},
frame=@@{level="2 ",addr="0x000107a4",func="foo",
  file="recursive2.c",line="14"@@},
frame=@@{level="3 ",addr="0x000107a4",func="foo",
  file="recursive2.c",line="14"@@},
frame=@@{level="4 ",addr="0x000107a4",func="foo",
  file="recursive2.c",line="14"@@},
frame=@@{level="5 ",addr="0x000107a4",func="foo",
  file="recursive2.c",line="14"@@},
frame=@@{level="6 ",addr="0x000107a4",func="foo",
  file="recursive2.c",line="14"@@},
frame=@@{level="7 ",addr="0x000107a4",func="foo",
  file="recursive2.c",line="14"@@},
frame=@@{level="8 ",addr="0x000107a4",func="foo",
  file="recursive2.c",line="14"@@},
frame=@@{level="9 ",addr="0x000107a4",func="foo",
  file="recursive2.c",line="14"@@},
frame=@@{level="10",addr="0x000107a4",func="foo",
  file="recursive2.c",line="14"@@},
frame=@@{level="11",addr="0x00010738",func="main",
  file="recursive2.c",line="4"@@}@@}
(gdb)
@@end smallexample
d1797 2
a1798 1
Show frames between low_frame and high_frame:
d1800 4
a1803 2
@@smallexample
(gdb)
d1806 9
a1814 13
@@{frame=@@{level="3 ",addr="0x000107a4",func="foo",
  file="recursive2.c",line="14"@@},
frame=@@{level="4 ",addr="0x000107a4",func="foo",
  file="recursive2.c",line="14"@@},
frame=@@{level="5 ",addr="0x000107a4",func="foo",
  file="recursive2.c",line="14"@@}@@}
(gdb)
@@end smallexample

Show a single frame:

@@smallexample
(gdb)
d1817 2
a1818 13
@@{frame=@@{level="3 ",addr="0x000107a4",func="foo",
  file="recursive2.c",line="14"@@}@@}
(gdb)
@@end smallexample


@@subheading The @@code{-stack-list-locals} Command
@@findex -stack-list-locals

@@subsubheading Synopsis

@@example
 -stack-list-locals @@var{print-values}
d1821 1
d1824 3
a1826 1
prints also their values.
d1828 3
a1830 8
@@subsubheading GDB Command

@@samp{info locals} in GDB, @@samp{gdb_get_locals} in @@code{gdbtk}.

@@subsubheading Example

@@smallexample
(gdb)
d1833 1
a1833 1
(gdb)
d1835 2
a1836 44
^done,locals=@@{@@{name="A",value="1"@@},@@{name="B",value="2"@@},
  @@{name="C",value="3"@@}@@}
(gdb)
@@end smallexample


@@subheading The @@code{-stack-select-frame} Command
@@findex -stack-select-frame

@@subsubheading Synopsis

@@example
 -stack-select-frame @@var{framenum}
@@end example

Change the current frame.  Select a different frame @@var{framenum} on
the stack.

@@subsubheading GDB Command

The corresponding GDB commands are @@samp{frame}, @@samp{up}, @@samp{down},
@@samp{select-frame}, @@samp{up-silent}, and @@samp{down-silent}.

@@subsubheading Example

@@smallexample
(gdb)
-stack-select-frame 2
^done
(gdb)
@@end smallexample

@@c %%%%%%%%%%%%%%%%%%%%%%%%%%%% SECTION %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@@node GDB/MI Symbol Query
@@section @@sc{gdb/mi} Symbol Query Commands


@@subheading The @@code{-symbol-info-address} Command
@@findex -symbol-info-address

@@subsubheading Synopsis

@@example
 -symbol-info-address @@var{symbol}
d1839 7
a1845 169
Describe where @@var{symbol} is stored.

@@subsubheading GDB Command

the corresponding GDB command is @@samp{info address}.

@@subsubheading Example
N.A.


@@subheading The @@code{-symbol-info-file} Command
@@findex -symbol-info-file

@@subsubheading Synopsis

@@example
 -symbol-info-file
@@end example

Show the file for the symbol.

@@subsubheading GDB Command

There's no equivalent GDB command.  @@code{gdbtk} has
@@samp{gdb_filnd_file}.

@@subsubheading Example
N.A.


@@subheading The @@code{-symbol-info-function} Command
@@findex -symbol-info-function

@@subsubheading Synopsis

@@example
 -symbol-info-function
@@end example

Show which function the symbol lives in.

@@subsubheading GDB Command

@@samp{gdb_get_function} in @@code{gdbtk}.

@@subsubheading Example
N.A.


@@subheading The @@code{-symbol-info-line} Command
@@findex -symbol-info-line

@@subsubheading Synopsis

@@example
 -symbol-info-line
@@end example

Show the core addresses of the code for a source line.

@@subsubheading GDB Command

The corresponding GDB comamnd is @@samp{info line}.  @@code{gdbtk} has the
@@samp{gdb_get_line} @@samp{gdb_get_file} commands.

@@subsubheading Example
N.A.


@@subheading The @@code{-symbol-info-symbol} Command
@@findex -symbol-info-symbol

@@subsubheading Synopsis

@@example
 -symbol-info-symbol @@var{addr}
@@end example

Describe what symbol is at location @@var{addr}.

@@subsubheading GDB Command

The corresponding GDB command is @@samp{info symbol}.

@@subsubheading Example
N.A.


@@subheading The @@code{-symbol-list-functions} Command
@@findex -symbol-list-functions

@@subsubheading Synopsis

@@example
 -symbol-list-functions
@@end example

List the functions in the executable.

@@subsubheading GDB Command

@@samp{info functions} in GDB, @@samp{gdb_listfunc} @@samp{gdb_search} in
@@code{gdbtk}.

@@subsubheading Example
N.A.


@@subheading The @@code{-symbol-list-types} Command
@@findex -symbol-list-types

@@subsubheading Synopsis

@@example
 -symbol-list-types
@@end example

List all the type names.

@@subsubheading GDB Command

The corresponding commands are @@samp{info types} in GDB,
@@samp{gdb_search} in @@code{gdbtk}.

@@subsubheading Example
N.A.


@@subheading The @@code{-symbol-list-variables} Command
@@findex -symbol-list-variables

@@subsubheading Synopsis

@@example
 -symbol-list-variables
@@end example

List all the global and static variable names.

@@subsubheading GDB Command

@@samp{info variables} in GDB, @@samp{gdb_search} in @@code{gdbtk}.

@@subsubheading Example
N.A.


@@subheading The @@code{-symbol-locate} Command
@@findex -symbol-locate

@@subsubheading Synopsis

@@example
 -symbol-locate
@@end example

@@subsubheading GDB Command

@@samp{gdb_loc} in @@code{gdbtk}.

@@subsubheading Example
N.A.


@@subheading The @@code{-symbol-type} Command
@@findex -symbol-type

@@subsubheading Synopsis

d1847 4
a1850 1
 -symbol-type @@var{variable}
d1853 2
a1854 1
Show type of @@var{variable}.
d1856 6
a1861 1
@@subsubheading GDB Command
d1863 6
a1868 2
The corresponding GDB command is @@samp{ptype}, @@code{gdbtk} has
@@samp{gdb_obj_variable}.
d1870 5
a1874 1
@@subsubheading Example
d1877 6
d1884 6
a1889 3
@@c %%%%%%%%%%%%%%%%%%%%%%%%%%%% SECTION %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@@node GDB/MI Target Manipulation
@@section @@sc{gdb/mi} Target Manipulation Commands
d1891 6
d1898 6
a1903 2
@@subheading The @@code{-target-attach} Command
@@findex -target-attach
d1905 6
a1910 1
@@subsubheading Synopsis
d1912 5
a1916 3
@@example
 -target-attach @@var{pid} | @@var{file}
@@end example
d1918 6
a1923 1
Attach to a process @@var{pid} or a file @@var{file} outside of GDB.
d1925 2
a1926 3
@@subsubheading GDB command

The corresponding GDB command is @@samp{attach}.
d1928 5
a1932 1
@@subsubheading Example
d1935 5
a1939 18

@@subheading The @@code{-target-compare-sections} Command
@@findex -target-compare-sections

@@subsubheading Synopsis

@@example
 -target-compare-sections [ @@var{section} ]
@@end example

Compare data of section @@var{section} on target to the exec file.
Without the argument, all sections are compared.

@@subsubheading GDB Command

The GDB equivalent is @@samp{compare-sections}.

@@subsubheading Example
d1942 3
d1946 2
a1947 4
@@subheading The @@code{-target-detach} Command
@@findex -target-detach

@@subsubheading Synopsis
d1949 1
d1951 1
a1951 13
 -target-detach
@@end example

Disconnect from the remote target.  There's no output.

@@subsubheading GDB command

The corresponding GDB command is @@samp{detach}.

@@subsubheading Example

@@smallexample
(gdb)
d1954 1
a1954 11
(gdb)
@@end smallexample


@@subheading The @@code{-target-download} Command
@@findex -target-download

@@subsubheading Synopsis

@@example
 -target-download
d1957 1
d1960 8
d1969 10
a1978 16
@@table @@samp
@@item section
The name of the section.
@@item section-sent
The size of what has been sent so far for that section.
@@item section-size
The size of the section.
@@item total-sent
The total size of what was sent so far (the current and the previous sections).
@@item total-size
The size of the overall executable to download.
@@end table

@@noindent
Each message is sent as status record (@@pxref{GDB/MI Output Syntax, ,
@@sc{gdb/mi} Output Syntax}).
d1980 2
a1981 22
In addition, it prints the name and size of the sections, as they are
downloaded.  These messages include the following fields:

@@table @@samp
@@item section
The name of the section.
@@item section-size
The size of the section.
@@item total-size
The size of the overall executable to download.
@@end table

@@noindent
At the end,  a summary is printed.

@@subsubheading GDB Command

The corresponding GDB command is @@samp{load}.

@@subsubheading Example

Note: each status message appears on a single line.  Here the messages
d1983 1
a1983 2

@@smallexample
d2028 2
a2029 13
^done,address="0x10004",load-size="9880",transfer-rate="6586",
write-rate="429"
(gdb)
@@end smallexample


@@subheading The @@code{-target-exec-status} Command
@@findex -target-exec-status

@@subsubheading Synopsis

@@example
 -target-exec-status
d2032 5
a2036 8
Provide information on the state of the target (whether it is running or
not, for instance).

@@subsubheading GDB Command

There's no equivalent GDB command.

@@subsubheading Example
d2039 1
a2039 10

@@subheading The @@code{-target-list-available-targets} Command
@@findex -target-list-available-targets

@@subsubheading Synopsis

@@example
 -target-list-available-targets
@@end example

d2041 3
a2043 6

@@subsubheading GDB Command

The corresponding GDB command is @@samp{help target}.

@@subsubheading Example
d2046 5
a2050 18

@@subheading The @@code{-target-list-current-targets} Command
@@findex -target-list-current-targets

@@subsubheading Synopsis

@@example
 -target-list-current-targets
@@end example

Describe the current target.

@@subsubheading GDB Command

The corresponding information is printed by @@samp{info file} (among
other things).

@@subsubheading Example
d2053 5
a2057 17

@@subheading The @@code{-target-list-parameters} Command
@@findex -target-list-parameters

@@subsubheading Synopsis

@@example
 -target-list-parameters
@@end example

@@c ????

@@subsubheading GDB Command

No equivalent.

@@subsubheading Example
d2060 3
d2064 1
a2064 2
@@subheading The @@code{-target-select} Command
@@findex -target-select
d2066 1
a2066 7
@@subsubheading Synopsis

@@example
 -target-select @@var{type} @@var{parameters ...}
@@end example

Connect GDB to the remote target.  This command takes two args:
d2069 4
a2072 5
@@item @@var{type}
The type of target, for instance @@samp{async}, @@samp{remote}, etc.
@@item @@var{parameters}
Device names, host names and the like.  @@xref{Target Commands, ,
Commands for managing targets}, for more details.
a2073 1

d2075 2
a2076 1
which the target program is, in the following form:
d2078 2
a2079 4
@@smallexample
^connected,addr="@@var{address}",func="@@var{function name}",
  args=@@{@@var{arg list}@@}
@@end smallexample
d2081 3
a2083 8
@@subsubheading GDB Command

The corresponding GDB command is @@samp{target}.

@@subsubheading Example

@@smallexample
(gdb)
d2086 1
a2086 15
(gdb)
@@end smallexample

@@c %%%%%%%%%%%%%%%%%%%%%%%%%%%% SECTION %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@@node GDB/MI Thread Commands
@@section @@sc{gdb/mi} Thread Commands


@@subheading The @@code{-thread-info} Command
@@findex -thread-info

@@subsubheading Synopsis

@@example
 -thread-info
d2089 2
a2090 29
@@subsubheading GDB command

No equivalent.

@@subsubheading Example
N.A.


@@subheading The @@code{-thread-list-all-threads} Command
@@findex -thread-list-all-threads

@@subsubheading Synopsis

@@example
 -thread-list-all-threads
@@end example

@@subsubheading GDB Command

The equivalent GDB command is @@samp{info threads}.

@@subsubheading Example
N.A.


@@subheading The @@code{-thread-list-ids} Command
@@findex -thread-list-ids

@@subsubheading Synopsis
d2092 15
d2108 1
a2108 16
 -thread-list-ids
@@end example

Produces a list of the currently known gdb thread ids.  At the end of the
list it also prints the total number of such threads.

@@subsubheading GDB Command

Part of @@samp{info threads} supplies the same information.

@@subsubheading Example

No threads present, besides the main process.

@@smallexample
(gdb)
d2111 3
a2113 4
(gdb)
@@end smallexample


d2115 2
a2116 3

@@smallexample
(gdb)
d2120 1
a2120 11
(gdb)
@@end smallexample


@@subheading The @@code{-thread-select} Command
@@findex -thread-select

@@subsubheading Synopsis

@@example
 -thread-select @@var{threadnum}
d2123 2
a2124 1
Make @@var{threadnum} the current thread.  It prints the number of the new
d2126 5
a2130 9

@@subsubheading GDB Command

The corresponding GDB command is @@samp{thread}.

@@subsubheading Example

@@smallexample
(gdb)
d2133 1
a2133 1
(gdb)
d2136 1
a2136 1
(gdb)
d2139 1
a2139 1
thread-ids=@@{thread-id="3",thread-id="2",thread-id="1"@@},
d2141 1
a2141 1
(gdb)
d2147 2
a2148 2
(gdb)
@@end smallexample
d2150 2
a2151 3
@@c %%%%%%%%%%%%%%%%%%%%%%%%%%%% SECTION %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@@node GDB/MI Tracepoint Commands
@@section @@sc{gdb/mi} Tracepoint Commands
d2153 1
a2153 1
The tracepoint commands are not yet implemented.
d2155 1
a2155 1
@@c @@subheading -trace-actions
d2157 1
a2157 1
@@c @@subheading -trace-delete
d2159 1
a2159 1
@@c @@subheading -trace-disable
d2161 1
a2161 1
@@c @@subheading -trace-dump
d2163 1
a2163 1
@@c @@subheading -trace-enable
d2165 1
a2165 1
@@c @@subheading -trace-exists
d2167 1
a2167 1
@@c @@subheading -trace-find
d2169 1
a2169 1
@@c @@subheading -trace-frame-number
d2171 1
a2171 1
@@c @@subheading -trace-info
d2173 1
a2173 1
@@c @@subheading -trace-insert
d2175 1
a2175 1
@@c @@subheading -trace-list
d2177 1
a2177 1
@@c @@subheading -trace-pass-count
d2179 1
a2179 1
@@c @@subheading -trace-save
d2181 1
a2181 1
@@c @@subheading -trace-start
d2183 1
a2183 1
@@c @@subheading -trace-stop
d2186 2
a2187 4
@@c %%%%%%%%%%%%%%%%%%%%%%%%%%%% SECTION %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@@node GDB/MI Variable Objects
@@section @@sc{gdb/mi} Variable Objects

d2189 1
a2189 1
@@subheading Motivation for Variable Objects in @@sc{gdb/mi}
d2193 1
a2193 1
used by @@code{Insight}.
d2195 1
a2195 1
The two main reasons for that are:
d2199 1
a2199 2
It has been proven in practice (it is already on its second generation).

d2202 1
a2202 1
now).
d2206 1
a2206 1
slightly changed so it could be used through flathead.  This document
d2208 1
a2208 1
hints about their use.
d2211 3
a2213 4
expect the @@sc{gui} implementation of a variable window to require, at
least, the following operations:

@@itemize @@bullet
d2220 1
a2220 1
@@subheading Introduction to Variable Objects in @@sc{gdb/mi}
a2221 1
@@cindex variable objects in @@sc{gdb/mi}
d2228 4
a2231 4
in a tree format.  For instance, the @@code{struct} type variable is the
root and the children will represent the struct members.  If a child
is itself of a complex type, it will also have children of its own.
Appropriate language differences are handled for C, C@@t{++} and Java.
d2236 3
a2238 3
and natural.  Natural refers to the a default format automatically
chosen based on the variable type (like decimal for an @@code{int}, hex
for pointers, etc.).
d2273 2
a2274 4
In the next subsection we describe each operation in detail and suggest
how it can be used.

@@subheading Description And Use of Operations on Variable Objects
a2275 2
@@subheading The @@code{-var-create} Command
@@findex -var-create
d2277 1
a2277 1
@@subsubheading Synopsis
d2279 1
a2279 4
@@example
 -var-create @@{@@var{name} | "-"@@}
    @@{@@var{frame-addr} | "*"@@} @@var{expression}
@@end example
d2285 5
a2289 5
The @@var{name} parameter is the string by which the object can be
referenced.  It must be unique.  If @@samp{-} is specified, the varobj
system will generate a string "varNNNNNN'' automatically.  It will be
unique provided that one does not specify @@var{name} on that format.
The command fails if a duplicate name is found.
d2292 1
a2292 2
specified by @@var{frame-addr}.  A @@samp{*} indicates that the current
frame should be used.
d2295 4
a2298 15
begin with a @@samp{*}), or one of the following:

@@itemize @@bullet
@@item
@@samp{*@@var{addr}}, where @@var{addr} is the address of a memory cell

@@item
@@samp{*@@var{addr}-@@var{addr}} -- a memory address range (TBD)

@@item
@@samp{$@@var{regname}} -- a CPU register name
@@end itemize

@@subsubheading Result

d2301 1
a2301 72
the GDB CLI:

@@example
 name="@@var{name}",numchild="N",type="@@var{type}"
@@end example


@@subheading The @@code{-var-delete} Command
@@findex -var-delete

@@subsubheading Synopsis

@@example
 -var-delete @@var{name}
@@end example

Deletes a previously created variable object and all of its children.

Returns an error if the object @@var{name} is not found.


@@subheading The @@code{-var-set-format} Command
@@findex -var-set-format

@@subsubheading Synopsis

@@example
 -var-set-format @@var{name} @@var{format-spec}
@@end example

Sets the output format for the value of the object @@var{name} to be
@@var{format-spec}.

The syntax for the @@var{format-spec} is as follows:

@@example
 @@var{format-spec} @@expansion{}
 @@{binary | decimal | hexadecimal | octal | natural@@}
@@end example


@@subheading The @@code{-var-show-format} Command
@@findex -var-show-format

@@subsubheading Synopsis

@@example
 -var-show-format @@var{name}
@@end example

Returns the format used to display the value of the object @@var{name}.

@@example
 format @@expansion{}
 @@var{format-spec}
@@end example


@@subheading The @@code{-var-info-num-children} Command
@@findex -var-info-num-children

@@subsubheading Synopsis

@@example
 -var-info-num-children @@var{name}
@@end example

Returns the number of children of a variable object @@var{name}:

@@example
 numchild=@@var{n}
@@end example
d2303 1
d2305 1
a2305 2
@@subheading The @@code{-var-list-children} Command
@@findex -var-list-children
d2307 1
a2307 1
@@subsubheading Synopsis
d2309 1
a2309 3
@@example
 -var-list-children @@var{name}
@@end example
d2311 1
a2311 1
Returns a list of the children of the specified variable object:
d2313 1
a2313 4
@@example
 numchild=@@var{n},children=@@{@@{name=@@var{name},
 numchild=@@var{n},type=@@var{type}@@},(repeats N times)@@}
@@end example
d2315 1
d2317 1
a2317 2
@@subheading The @@code{-var-info-type} Command
@@findex -var-info-type
d2319 1
a2319 1
@@subsubheading Synopsis
d2321 1
a2321 3
@@example
 -var-info-type @@var{name}
@@end example
d2323 1
a2323 2
Returns the type of the specified variable @@var{name}.  The type is
returned as a string in the same format as it is output by the GDB CLI:
d2325 1
a2325 3
@@example
 type=@@var{typename}
@@end example
d2327 1
d2329 1
a2329 2
@@subheading The @@code{-var-info-expression} Command
@@findex -var-info-expression
d2331 1
a2331 1
@@subsubheading Synopsis
d2333 1
a2333 3
@@example
 -var-info-expression @@var{name}
@@end example
d2335 1
a2335 1
Returns what is represented by the variable object @@var{name}:
d2337 2
a2338 3
@@example
 lang=@@var{lang-spec},exp=@@var{expression}
@@end example
d2340 1
a2340 2
@@noindent
where @@var{lang-spec} is @@code{@@{"C" | "C++" | "Java"@@}}.
d2342 1
a2342 2
@@subheading The @@code{-var-show-attributes} Command
@@findex -var-show-attributes
d2344 1
a2344 1
@@subsubheading Synopsis
d2346 1
a2346 3
@@example
 -var-show-attributes @@var{name}
@@end example
d2348 1
a2348 1
List attributes of the specified variable object @@var{name}:
d2350 1
a2350 3
@@example
 status=@@var{attr} [ ( ,@@var{attr} )* ]
@@end example
d2352 1
a2352 2
@@noindent
where @@var{attr} is @@code{@@{ @@{ editable | noneditable @@} | TBD @@}}.
d2354 1
a2354 2
@@subheading The @@code{-var-evaluate-expression} Command
@@findex -var-evaluate-expression
d2356 1
a2356 1
@@subsubheading Synopsis
d2358 1
a2358 3
@@example
 -var-evaluate-expression @@var{name}
@@end example
d2362 1
a2362 8
for the object:

@@example
 value=@@var{value}
@@end example

@@subheading The @@code{-var-assign} Command
@@findex -var-assign
d2364 1
a2364 1
@@subsubheading Synopsis
d2366 1
a2366 3
@@example
 -var-assign @@var{name} @@var{expression}
@@end example
d2368 2
a2369 2
Assigns the value of @@var{expression} to the variable object specified
by @@var{name}.  The object must be ``editable''.
d2371 1
a2371 2
@@subheading The @@code{-var-update} Command
@@findex -var-update
d2373 3
a2375 5
@@subsubheading Synopsis

@@example
 -var-update @@{@@var{name} | "*"@@}
@@end example
a2376 3
Update the value of the variable object @@var{name} by evaluating its
expression after fetching all the new values from memory or registers.
A @@samp{*} causes all existing variable objects to be updated.
a2377 1
@@ignore
d2384 1
a2384 1
The output from @@sc{gdb/mi} consists of zero or more out-of-band records
d2389 1
a2389 1
Asynchronous @@sc{gdb/mi} output is similar.
d2392 1
a2392 1
by the input commands @@code{@@var{token}}.
d2395 2
a2396 2
@@item @@var{output} @@expansion{}
@@{ @@var{out-of-band-record} @@} @@code{[} @@var{result-record} @@code{]} "(gdb)" @@var{nl}
d2398 2
a2399 2
@@item @@var{result-record} @@expansion{}
@@code{[} @@var{token} @@code{]} "^" @@var{result-class} @@{ "," @@var{result} @@} @@var{nl}
d2401 2
a2402 2
@@item @@var{out-of-band-record} @@expansion{}
@@var{async-record} @@code{|} @@var{stream-record}
d2404 2
a2405 2
@@item @@var{async-record} @@expansion{}
@@var{exec-async-output} @@code{|} @@var{status-async-output} @@code{|} @@var{notify-async-output}
d2407 2
a2408 2
@@item @@var{exec-async-output} @@expansion{}
@@code{[} @@var{token} @@code{]} "*" @@var{async-output}
d2410 2
a2411 2
@@item @@var{status-async-output} @@expansion{}
@@code{[} @@var{token} @@code{]} "+" @@var{async-output}
d2413 2
a2414 2
@@item @@var{notify-async-output} @@expansion{}
@@code{[} @@var{token} @@code{]} "=" @@var{async-output}
d2416 2
a2417 2
@@item @@var{async-output} @@expansion{}
@@var{async-class} @@{ "," @@var{result} @@} @@var{nl}
d2419 2
a2420 2
@@item @@var{result-class} @@expansion{}
"done" @@code{|} "running" @@code{|} "connected" @@code{|} "error" @@code{|} "exit"
d2422 2
a2423 2
@@item @@var{async-class} @@expansion{}
"stopped" @@code{|} @@emph{others depending on need as still in development}
d2425 2
a2426 2
@@item @@var{result} @@expansion{}
@@var{string} "=" @@var{value}
d2428 2
a2429 2
@@item @@var{value} @@expansion{}
@@var{c-string} @@code{|} @@var{tupple} @@code{|} @@var{list}
d2431 2
a2432 2
@@item @@var{tupple} @@expansion{}
"@@{@@}" @@code{|} "@@{" @@var{result} @@{ "," @@var{result} @@} "@@}"
d2434 2
a2435 2
@@item @@var{list} @@expansion{}
"@@code{[]}" @@code{|} "@@code{[}" @@var{value} @@{ "," @@var{value} @@} "@@code{]}"
d2437 1
a2437 1
@@item @@var{string} @@expansion{}
d2440 1
a2440 1
@@item @@var{c-string} @@expansion{}
d2443 2
a2444 2
@@item @@var{stream-record} @@expansion{}
@@var{console-stream-output} @@code{|} @@var{target-stream-output} @@code{|} @@var{log-stream-output}
d2446 2
a2447 2
@@item @@var{console-stream-output} @@expansion{}
"~" @@var{c-string}
d2449 2
a2450 2
@@item @@var{target-stream-output} @@expansion{}
"@@@@" @@var{c-string}
d2452 2
a2453 2
@@item @@var{log-stream-output} @@expansion{}
"&" @@var{c-string}
d2455 2
a2456 2
@@item @@var{nl} @@expansion{}
CR @@code{|} CR-LF
d2458 2
a2459 2
@@item @@var{token} @@expansion{}
"any sequence of digits"
d2467 1
a2467 1
@@item @@var{query}
d2480 1
a2480 1
The @@code{@@var{token}} is from the corresponding request.  If an execution
d2486 1
a2486 1
@@var{status-async-output} contains on-going status information about the progress
d2491 1
a2491 1
@@var{exec-async-output} contains asynchronous state change on the target
d2496 1
a2496 1
@@var{notify-async-output} contains supplementary information that the client should
d2501 1
a2501 1
@@var{console-stream-output} is output that should be displayed as is in the
d2506 1
a2506 1
@@var{target-stream-output} is the output produced by the target program.
d2510 1
a2510 1
@@var{log-stream-output} is output text coming from GDB's internals, for
a2515 2
@@end ignore

d2520 1
@


1.2.2.2
log
@Add section discussing future changes to output syntax.
@
text
@d107 1
a107 1
* GDB/MI Compatibility with CLI::
a119 1
* GDB/MI Draft Changes to Output Syntax::
a342 3
@@xref{GDB/MI Draft Changes to Output Syntax, , @@sc{gdb/mi} Draft Changes
to Output Syntax}, for proposed revisions to the current output syntax.

d399 1
a399 1
@@node GDB/MI Compatibility with CLI
d3735 3
a3737 13
@@c %%%%%%%%%%%%%%%%%%%%%%%%%%%% SECTION %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@@node GDB/MI Draft Changes to Output Syntax
@@section  @@sc{gdb/mi} Draft Changes to Output Syntax

@@cindex draft changes to output syntax of @@sc{gdb/mi}
@@cindex @@sc{gdb/mi}, draft changes to output syntax

One problem identified in the existing @@sc{gdb/mi} output syntax was the
difficulty in differentiating between a tuple such as:

@@example
@@{number="1",type="breakpoint",disp="keep",enabled="y"@@}
@@end example
d3739 2
a3740 11
where each value has a unique label, and a list such as:

@@example
@@{"1","2","4"@@}
@@{bp="1",bp="2",bp="4"@@}
@@end example

where values are un-labeled or the label is duplicated.

What follows is a draft revision to the output specification that
addresses this problem.
d3873 3
@


1.2.2.3
log
@	* gdbmi.texinfo: Lots of typos and grammar fixes from Brian
        Youmans <3diff@@gnu.org>.
@
text
@d113 1
a113 1
* GDB/MI Miscellaneous Commands::
d218 2
a219 2
followed, optionally, by a single result record.  This result record
is for the most recent command.  The sequence of output records is
d408 1
a408 1
To help users familiar with GDB's existing CLI interface, @@sc{gdb/mi}
d894 1
a894 1
@@dfn{access} watchpoint, i.e. a watchpoint that triggers either on a
d1042 1
a1042 1
the whole function will be disassembled, in case no @@var{end-addr} is
d1044 1
a1044 1
@@var{lines} is lower than the number of disassembly lines between
d1112 1
a1112 1
Disassemble 3 instructions from the start of @@code{main}:
d1127 1
a1127 1
Disassemble 3 instructions from the start of @@code{main} in mixed mode:
d1166 1
a1166 1
@@samp{call}.  In @@code{gdbtk} only, there's a corresponding
d1277 2
a1278 2
Display the registers' contents.  @@var{fmt} is the format according to
which the registers' contents are to be returned, followed by an optional
d1403 1
a1403 1
(returned as @@samp{total-bytes}).  Should less then the requested number
d1405 1
a1405 1
using @@samp{N/A}.  The number of bytes read from the target is returned
d1502 1
a1502 1
The corresponding GDB command is @@samp{disable display}.
d1578 1
a1578 1
The corresponding GDB command is @@samp{cd}.
d1987 1
a1987 1
The corresponding GDB command is @@samp{run}.
d2078 3
a2080 4
instruction.  The output, once GDB has stopped, will vary depending on
whether we have stopped in the middle of a source line or not.  In the
former case, the address at which the program stopped will be printed as
well.
d2157 1
a2157 1
error messages.  Otherwise, no output is produced, except a completion
d2257 1
a2257 1
The corresponding GDB command is @@samp{info shared}.
d2292 1
a2292 1
used without arguments, clears GDB's symbol table info.  No output is
d2309 2
a2310 2
@@node GDB/MI Miscellaneous Commands
@@section Miscellaneous GDB commands in @@sc{gdb/mi}
d2555 1
a2555 1
means that both names and values of the arguments are printed.
d2723 1
a2723 1
Display the local variable names for the current frame.  With an
d2789 1
a2789 1
The corresponding GDB command is @@samp{info address}.
d3089 1
a3089 1
have been broken down so that they can fit onto a page.
d3422 1
a3422 1
expressions, etc.), we are proposing the adaptation of the existing code
d3469 1
a3469 1
and natural.  Natural refers to a default format automatically
d3535 1
a3535 1
@@var{expression} is any expression valid on the current language set (must not
d3766 2
a3767 2
optionally followed by a single result record, the result record being
for the most recent command input.  The sequence is terminated by
d3882 1
a3882 1
@@var{console-stream-output} is output that should be displayed as is, in the
@


1.1
log
@Add mi/ and testsuite/gdb.mi/ subdirectories.
Add --enable-gdbmi option to configury.
Add mi rules to Makefile.in
Add mi conditional output to event-top.c infrun.c main.c top.c.
Add -i=mi option.
@
text
@d749 1
a749 1
@@section -data-disassemble <begin> <end> <mode> <number-of-lines>
d752 8
a759 7
@@item <begin>
Is a function name or an address (or $pc)
@@item <end>
can be 0 (in which case the enclosing function will be disassembled), or
an address.
@@item <mode>
can be 0 (only disassembly) or 1 (mixed source and disassembly).
d768 2
d775 2
d779 2
a780 2
Note that whatever included in those fields, is not manipulated
directely by Flathead, i.e. it is not possible to adjust their format.
d785 2
d789 14
a802 21
-data-disassemble main 0 0 -1
^done,asm_insns=@@{
@@{address="0x100b8 <main>",inst=" stwu r1,-16(r1)"@@},
@@{address="0x100bc <main+4>",inst="mflr r0"@@},
@@{address="0x100c0 <main+8>",inst=" stw r31,12(r1)"@@},
@@{address="0x100c4 <main+12>",inst=" stw r0,20(r1)"@@},
@@{address="0x100c8 <main+16>",inst=" mr r31,r1"@@},
@@{address="0x100cc <main+20>",inst=" bl0x1013c <__eabi>"@@},
@@{address="0x100d0 <main+24>",inst=" lis r9,2"@@},
@@{address="0x100d4 <main+28>",inst=" addi r3,r9,-25680"@@},
@@{address="0x100d8 <main+32>",inst=" bl 0x10fc8 <printf>"@@},
@@{address="0x100dc <main+36>",inst=" bl 0x10100 <foo>"@@},
@@{address="0x100e0 <main+40>",inst=" li r3,0"@@},
@@{address="0x100e4 <main+44>",inst=" b 0x100e8 <main+48>"@@},
@@{address="0x100e8 <main+48>",inst=" lwz r11,0(r1)"@@},
@@{address="0x100ec <main+52>",inst=" lwz r0,4(r11)"@@},
@@{address="0x100f0 <main+56>",inst=" mtlr r0"@@},
@@{address="0x100f4 <main+60>",inst=" lwz r31,-4(r11)"@@},
@@{address="0x100f8 <main+64>",inst=" mr r1,r11"@@},
@@{address="0x100fc <main+68>",inst=" blr"@@}
(gdb) 
d806 1
d808 8
d817 11
a827 5
-data-disassemble main 0 0 3
^done,asm_insns=@@{
@@{address=" 0x100b8 <main>",inst=" stwu r1,-16(r1)"@@},
@@{address=" 0x100bc <main+4>",inst="mflr r0"@@},
@@{address=" 0x100c0 <main+8>",inst=" stw r31,12(r1)"@@}
d831 2
a832 1
@@subsection Example 3
d835 12
a846 21
-data-disassemble foo 0 1 -1
^done,asm_insns=@@{src_and_asm_line=@@{line="11",file="hello.c",
line_asm_insn=@@{
@@{address="    0x10100 <foo>",inst="      stwu        r1,-16(r1)"@@},
@@{address="    0x10104 <foo+4>",inst="           mflrr0"@@},
@@{address="    0x10108 <foo+8>",inst="           stw r31,12(r1)"@@},
@@{address="    0x1010c <foo+12>",inst="         stw  r0,20(r1)"@@},
@@{address="    0x10110 <foo+16>",inst="           mr  r31,r1"@@}@@}@@},
src_and_asm_line=@@{line="12",file="hello.c",
line_asm_insn=@@{
@@{address="    0x10114 <foo+20>",inst="          lisr9,2"@@},
@@{address="    0x10118 <foo+24>",inst="         addi        r3,r9,-25664"@@},
@@{address="    0x1011c <foo+28>",inst="        bl  0x10fc8 <printf>"@@}@@}@@},
src_and_asm_line=@@{line="14",file="hello.c",
line_asm_insn=@@{
@@{address="    0x10120 <foo+32>",inst="        lwz r11,0(r1)"@@},
@@{address="    0x10124 <foo+36>",inst="           lwz r0,4(r11)"@@},
@@{address="    0x10128 <foo+40>",inst="           mtlr        r0"@@},
@@{address="    0x1012c <foo+44>",inst="          lwz r31,-4(r11)"@@},
@@{address="    0x10130 <foo+48>",inst="         mr r1,r11"@@},
@@{address="    0x10134 <foo+52>",inst="       blr"@@}@@}@@}@@}
@

