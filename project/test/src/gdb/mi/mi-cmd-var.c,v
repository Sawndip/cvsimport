head	1.80;
access;
symbols
	gdb_7_6_1-2013-08-30-release:1.78
	gdb_7_6-2013-04-26-release:1.78
	gdb_7_6-branch:1.78.0.2
	gdb_7_6-2013-03-12-branchpoint:1.78
	gdb_7_5_1-2012-11-29-release:1.74
	gdb_7_5-2012-08-17-release:1.74
	gdb_7_5-branch:1.74.0.2
	gdb_7_5-2012-07-18-branchpoint:1.74
	gdb_7_4_1-2012-04-26-release:1.71.2.1
	gdb_7_4-2012-01-24-release:1.71.2.1
	gdb_7_4-branch:1.71.0.2
	gdb_7_4-2011-12-13-branchpoint:1.71
	gdb_7_3_1-2011-09-04-release:1.68
	gdb_7_3-2011-07-26-release:1.68
	gdb_7_3-branch:1.68.0.2
	gdb_7_3-2011-04-01-branchpoint:1.68
	gdb_7_2-2010-09-02-release:1.64
	gdb_7_2-branch:1.64.0.2
	gdb_7_2-2010-07-07-branchpoint:1.64
	gdb_7_1-2010-03-18-release:1.62
	gdb_7_1-branch:1.62.0.2
	gdb_7_1-2010-02-18-branchpoint:1.62
	gdb_7_0_1-2009-12-22-release:1.61
	gdb_7_0-2009-10-06-release:1.61
	gdb_7_0-branch:1.61.0.2
	gdb_7_0-2009-09-16-branchpoint:1.61
	arc-sim-20090309:1.45
	msnyder-checkpoint-072509-branch:1.59.0.2
	msnyder-checkpoint-072509-branchpoint:1.59
	arc-insight_6_8-branch:1.45.0.6
	arc-insight_6_8-branchpoint:1.45
	insight_6_8-branch:1.45.0.4
	insight_6_8-branchpoint:1.45
	reverse-20081226-branch:1.53.0.8
	reverse-20081226-branchpoint:1.53
	multiprocess-20081120-branch:1.53.0.6
	multiprocess-20081120-branchpoint:1.53
	reverse-20080930-branch:1.53.0.4
	reverse-20080930-branchpoint:1.53
	reverse-20080717-branch:1.53.0.2
	reverse-20080717-branchpoint:1.53
	msnyder-reverse-20080609-branch:1.51.0.2
	msnyder-reverse-20080609-branchpoint:1.51
	drow-reverse-20070409-branch:1.31.0.2
	drow-reverse-20070409-branchpoint:1.31
	gdb_6_8-2008-03-27-release:1.45
	gdb_6_8-branch:1.45.0.2
	gdb_6_8-2008-02-26-branchpoint:1.45
	gdb_6_7_1-2007-10-29-release:1.40
	gdb_6_7-2007-10-10-release:1.40
	gdb_6_7-branch:1.40.0.2
	gdb_6_7-2007-09-07-branchpoint:1.40
	insight_6_6-20070208-release:1.23
	gdb_6_6-2006-12-18-release:1.23
	gdb_6_6-branch:1.23.0.18
	gdb_6_6-2006-11-15-branchpoint:1.23
	insight_6_5-20061003-release:1.23
	gdb-csl-symbian-6_4_50_20060226-12:1.23
	gdb-csl-sourcerygxx-3_4_4-25:1.22
	nickrob-async-20060828-mergepoint:1.23
	gdb-csl-symbian-6_4_50_20060226-11:1.23
	gdb-csl-sourcerygxx-4_1-17:1.23
	gdb-csl-20060226-branch-local-2:1.23
	gdb-csl-sourcerygxx-4_1-14:1.23
	gdb-csl-sourcerygxx-4_1-13:1.23
	gdb-csl-sourcerygxx-4_1-12:1.23
	gdb-csl-sourcerygxx-3_4_4-21:1.23
	gdb_6_5-20060621-release:1.23
	gdb-csl-sourcerygxx-4_1-9:1.23
	gdb-csl-sourcerygxx-4_1-8:1.23
	gdb-csl-sourcerygxx-4_1-7:1.23
	gdb-csl-arm-2006q1-6:1.23
	gdb-csl-sourcerygxx-4_1-6:1.23
	gdb-csl-symbian-6_4_50_20060226-10:1.23
	gdb-csl-symbian-6_4_50_20060226-9:1.23
	gdb-csl-symbian-6_4_50_20060226-8:1.23
	gdb-csl-coldfire-4_1-11:1.23
	gdb-csl-sourcerygxx-3_4_4-19:1.23
	gdb-csl-coldfire-4_1-10:1.23
	gdb_6_5-branch:1.23.0.16
	gdb_6_5-2006-05-14-branchpoint:1.23
	gdb-csl-sourcerygxx-4_1-5:1.23
	nickrob-async-20060513-branch:1.23.0.14
	nickrob-async-20060513-branchpoint:1.23
	gdb-csl-sourcerygxx-4_1-4:1.23
	msnyder-reverse-20060502-branch:1.23.0.12
	msnyder-reverse-20060502-branchpoint:1.23
	gdb-csl-morpho-4_1-4:1.23
	gdb-csl-sourcerygxx-3_4_4-17:1.23
	readline_5_1-import-branch:1.23.0.10
	readline_5_1-import-branchpoint:1.23
	gdb-csl-20060226-branch-merge-to-csl-symbian-1:1.23
	gdb-csl-symbian-20060226-branch:1.23.0.8
	gdb-csl-symbian-20060226-branchpoint:1.23
	gdb-csl-20060226-branch-merge-to-csl-local-1:1.23
	msnyder-reverse-20060331-branch:1.23.0.6
	msnyder-reverse-20060331-branchpoint:1.23
	gdb-csl-available-20060303-branch:1.23.0.4
	gdb-csl-available-20060303-branchpoint:1.23
	gdb-csl-20060226-branch:1.23.0.2
	gdb-csl-20060226-branchpoint:1.23
	gdb_6_4-20051202-release:1.22
	msnyder-fork-checkpoint-branch:1.22.0.8
	msnyder-fork-checkpoint-branchpoint:1.22
	gdb-csl-gxxpro-6_3-branch:1.22.0.6
	gdb-csl-gxxpro-6_3-branchpoint:1.22
	gdb_6_4-branch:1.22.0.4
	gdb_6_4-2005-11-01-branchpoint:1.22
	gdb-csl-arm-20051020-branch:1.22.0.2
	gdb-csl-arm-20051020-branchpoint:1.22
	msnyder-tracepoint-checkpoint-branch:1.21.0.4
	msnyder-tracepoint-checkpoint-branchpoint:1.21
	gdb-csl-arm-20050325-2005-q1b:1.21
	gdb-csl-arm-20050325-2005-q1a:1.21
	csl-arm-20050325-branch:1.21.0.2
	csl-arm-20050325-branchpoint:1.21
	gdb-post-i18n-errorwarning-20050211:1.21
	gdb-pre-i18n-errorwarning-20050211:1.20
	gdb_6_3-20041109-release:1.20
	gdb_6_3-branch:1.20.0.4
	gdb_6_3-20041019-branchpoint:1.20
	drow_intercu-merge-20040921:1.20
	drow_intercu-merge-20040915:1.20
	jimb-gdb_6_2-e500-branch:1.20.0.6
	jimb-gdb_6_2-e500-branchpoint:1.20
	gdb_6_2-20040730-release:1.20
	gdb_6_2-branch:1.20.0.2
	gdb_6_2-2004-07-10-gmt-branchpoint:1.20
	gdb_6_1_1-20040616-release:1.19
	gdb_6_1-2004-04-05-release:1.19
	drow_intercu-merge-20040402:1.19
	drow_intercu-merge-20040327:1.19
	ezannoni_pie-20040323-branch:1.19.0.10
	ezannoni_pie-20040323-branchpoint:1.19
	cagney_tramp-20040321-mergepoint:1.19
	cagney_tramp-20040309-branch:1.19.0.8
	cagney_tramp-20040309-branchpoint:1.19
	gdb_6_1-branch:1.19.0.6
	gdb_6_1-2004-03-01-gmt-branchpoint:1.19
	drow_intercu-20040221-branch:1.19.0.4
	drow_intercu-20040221-branchpoint:1.19
	cagney_bfdfile-20040213-branch:1.19.0.2
	cagney_bfdfile-20040213-branchpoint:1.19
	drow-cplus-merge-20040208:1.19
	carlton_dictionary-20040126-merge:1.19
	cagney_bigcore-20040122-branch:1.18.0.2
	cagney_bigcore-20040122-branchpoint:1.18
	drow-cplus-merge-20040113:1.17
	drow-cplus-merge-20031224:1.17
	drow-cplus-merge-20031220:1.17
	carlton_dictionary-20031215-merge:1.17
	drow-cplus-merge-20031214:1.17
	carlton-dictionary-20031111-merge:1.17
	gdb_6_0-2003-10-04-release:1.16
	kettenis_sparc-20030918-branch:1.16.0.38
	kettenis_sparc-20030918-branchpoint:1.16
	carlton_dictionary-20030917-merge:1.16
	ezannoni_pie-20030916-branchpoint:1.16
	ezannoni_pie-20030916-branch:1.16.0.36
	cagney_x86i386-20030821-branch:1.16.0.34
	cagney_x86i386-20030821-branchpoint:1.16
	carlton_dictionary-20030805-merge:1.16
	carlton_dictionary-20030627-merge:1.16
	gdb_6_0-branch:1.16.0.32
	gdb_6_0-2003-06-23-branchpoint:1.16
	jimb-ppc64-linux-20030613-branch:1.16.0.30
	jimb-ppc64-linux-20030613-branchpoint:1.16
	cagney_convert-20030606-branch:1.16.0.28
	cagney_convert-20030606-branchpoint:1.16
	cagney_writestrings-20030508-branch:1.16.0.26
	cagney_writestrings-20030508-branchpoint:1.16
	jimb-ppc64-linux-20030528-branch:1.16.0.24
	jimb-ppc64-linux-20030528-branchpoint:1.16
	carlton_dictionary-20030523-merge:1.16
	cagney_fileio-20030521-branch:1.16.0.22
	cagney_fileio-20030521-branchpoint:1.16
	kettenis_i386newframe-20030517-mergepoint:1.16
	jimb-ppc64-linux-20030509-branch:1.16.0.20
	jimb-ppc64-linux-20030509-branchpoint:1.16
	kettenis_i386newframe-20030504-mergepoint:1.16
	carlton_dictionary-20030430-merge:1.16
	kettenis_i386newframe-20030419-branch:1.16.0.18
	kettenis_i386newframe-20030419-branchpoint:1.16
	carlton_dictionary-20030416-merge:1.16
	cagney_frameaddr-20030409-mergepoint:1.16
	kettenis_i386newframe-20030406-branch:1.16.0.16
	kettenis_i386newframe-20030406-branchpoint:1.16
	cagney_frameaddr-20030403-branchpoint:1.16
	cagney_frameaddr-20030403-branch:1.16.0.14
	cagney_framebase-20030330-mergepoint:1.16
	cagney_framebase-20030326-branch:1.16.0.12
	cagney_framebase-20030326-branchpoint:1.16
	cagney_lazyid-20030317-branch:1.16.0.10
	cagney_lazyid-20030317-branchpoint:1.16
	kettenis-i386newframe-20030316-mergepoint:1.16
	offbyone-20030313-branch:1.16.0.8
	offbyone-20030313-branchpoint:1.16
	kettenis-i386newframe-20030308-branch:1.16.0.6
	kettenis-i386newframe-20030308-branchpoint:1.16
	carlton_dictionary-20030305-merge:1.16
	cagney_offbyone-20030303-branch:1.16.0.4
	cagney_offbyone-20030303-branchpoint:1.16
	carlton_dictionary-20030207-merge:1.16
	interps-20030203-mergepoint:1.16
	interps-20030202-branch:1.16.0.2
	interps-20030202-branchpoint:1.16
	cagney-unwind-20030108-branch:1.15.0.2
	cagney-unwind-20030108-branchpoint:1.15
	carlton_dictionary-20021223-merge:1.15
	gdb_5_3-2002-12-12-release:1.12
	carlton_dictionary-20021115-merge:1.15
	kseitz_interps-20021105-merge:1.14
	kseitz_interps-20021103-merge:1.14
	drow-cplus-merge-20021020:1.13
	drow-cplus-merge-20021025:1.14
	carlton_dictionary-20021025-merge:1.14
	carlton_dictionary-20021011-merge:1.13
	drow-cplus-branch:1.13.0.2
	drow-cplus-branchpoint:1.13
	kseitz_interps-20020930-merge:1.12
	carlton_dictionary-20020927-merge:1.12
	carlton_dictionary-branch:1.12.0.8
	carlton_dictionary-20020920-branchpoint:1.12
	gdb_5_3-branch:1.12.0.6
	gdb_5_3-2002-09-04-branchpoint:1.12
	kseitz_interps-20020829-merge:1.12
	cagney_sysregs-20020825-branch:1.12.0.4
	cagney_sysregs-20020825-branchpoint:1.12
	readline_4_3-import-branch:1.12.0.2
	readline_4_3-import-branchpoint:1.12
	gdb_5_2_1-2002-07-23-release:1.10
	kseitz_interps-20020528-branch:1.11.0.6
	kseitz_interps-20020528-branchpoint:1.11
	cagney_regbuf-20020515-branch:1.11.0.4
	cagney_regbuf-20020515-branchpoint:1.11
	jimb-macro-020506-branch:1.11.0.2
	jimb-macro-020506-branchpoint:1.11
	gdb_5_2-2002-04-29-release:1.10
	gdb_5_2-branch:1.10.0.2
	gdb_5_2-2002-03-03-branchpoint:1.10
	gdb_5_1_1-2002-01-24-release:1.9
	gdb_5_1_0_1-2002-01-03-release:1.9
	cygnus_cvs_20020108_pre:1.10
	gdb_5_1_0_1-2002-01-03-branch:1.9.0.8
	gdb_5_1_0_1-2002-01-03-branchpoint:1.9
	gdb_5_1-2001-11-21-release:1.9
	gdb_s390-2001-09-26-branch:1.9.0.6
	gdb_s390-2001-09-26-branchpoint:1.9
	gdb_5_1-2001-07-29-branch:1.9.0.4
	gdb_5_1-2001-07-29-branchpoint:1.9
	dberlin-typesystem-branch:1.9.0.2
	dberlin-typesystem-branchpoint:1.9
	gdb-post-ptid_t-2001-05-03:1.8
	gdb-pre-ptid_t-2001-05-03:1.8
	insight-precleanup-2001-01-01:1.7
	gdb-post-protoization-2000-07-29:1.5
	gdb-pre-protoization-2000-07-29:1.5
	gdb-premipsmulti-2000-06-06-branch:1.5.0.2
	gdb-premipsmulti-2000-06-06-branchpoint:1.5
	gdb-post-params-removal-2000-06-04:1.5
	gdb-pre-params-removal-2000-06-04:1.5
	gdb-post-params-removal-2000-05-28:1.5
	gdb-pre-params-removal-2000-05-28:1.5
	gdb_5_0-2000-05-19-release:1.3
	gdb_4_18_2-2000-05-18-release:1.3
	gdb_4_95_1-2000-05-11-snapshot:1.3
	gdb_4_95_0-2000-04-27-snapshot:1.3
	gdb_5_0-2000-04-10-branch:1.3.0.2
	gdb_5_0-2000-04-10-branchpoint:1.3;
locks; strict;
comment	@ * @;


1.80
date	2013.06.03.03.16.24;	author qiyao;	state Exp;
branches;
next	1.79;

1.79
date	2013.05.30.17.37.12;	author tromey;	state Exp;
branches;
next	1.78;

1.78
date	2013.01.01.06.33.00;	author brobecke;	state Exp;
branches;
next	1.77;

1.77
date	2012.12.06.18.59.56;	author tromey;	state Exp;
branches;
next	1.76;

1.76
date	2012.10.17.00.53.23;	author qiyao;	state Exp;
branches;
next	1.75;

1.75
date	2012.08.02.09.36.40;	author qiyao;	state Exp;
branches;
next	1.74;

1.74
date	2012.03.06.22.48.53;	author shebs;	state Exp;
branches;
next	1.73;

1.73
date	2012.01.04.08.17.24;	author brobecke;	state Exp;
branches;
next	1.72;

1.72
date	2011.12.17.06.06.49;	author ndreys;	state Exp;
branches;
next	1.71;

1.71
date	2011.08.28.20.39.29;	author jkratoch;	state Exp;
branches
	1.71.2.1;
next	1.70;

1.70
date	2011.08.04.19.10.14;	author palves;	state Exp;
branches;
next	1.69;

1.69
date	2011.06.27.19.21.51;	author tromey;	state Exp;
branches;
next	1.68;

1.68
date	2011.01.12.21.09.39;	author tromey;	state Exp;
branches;
next	1.67;

1.67
date	2011.01.11.15.10.03;	author msnyder;	state Exp;
branches;
next	1.66;

1.66
date	2011.01.06.00.57.02;	author msnyder;	state Exp;
branches;
next	1.65;

1.65
date	2011.01.01.15.33.25;	author brobecke;	state Exp;
branches;
next	1.64;

1.64
date	2010.05.17.20.49.39;	author msnyder;	state Exp;
branches;
next	1.63;

1.63
date	2010.05.06.00.32.38;	author msnyder;	state Exp;
branches;
next	1.62;

1.62
date	2010.01.01.07.31.50;	author brobecke;	state Exp;
branches;
next	1.61;

1.61
date	2009.09.15.18.51.25;	author tromey;	state Exp;
branches;
next	1.60;

1.60
date	2009.07.30.13.12.54;	author jkratoch;	state Exp;
branches;
next	1.59;

1.59
date	2009.07.10.14.18.14;	author jkratoch;	state Exp;
branches;
next	1.58;

1.58
date	2009.07.07.09.26.13;	author jkratoch;	state Exp;
branches;
next	1.57;

1.57
date	2009.07.02.17.21.07;	author uweigand;	state Exp;
branches;
next	1.56;

1.56
date	2009.05.28.01.09.20;	author tromey;	state Exp;
branches;
next	1.55;

1.55
date	2009.05.23.15.34.36;	author jkratoch;	state Exp;
branches;
next	1.54;

1.54
date	2009.01.03.05.57.57;	author brobecke;	state Exp;
branches;
next	1.53;

1.53
date	2008.07.13.05.31.44;	author vprus;	state Exp;
branches;
next	1.52;

1.52
date	2008.06.25.15.15.42;	author vprus;	state Exp;
branches;
next	1.51;

1.51
date	2008.05.28.12.06.36;	author vprus;	state Exp;
branches;
next	1.50;

1.50
date	2008.04.19.17.03.19;	author vprus;	state Exp;
branches;
next	1.49;

1.49
date	2008.04.13.09.33.48;	author vprus;	state Exp;
branches;
next	1.48;

1.48
date	2008.04.09.13.29.55;	author marckhouzam;	state Exp;
branches;
next	1.47;

1.47
date	2008.03.26.14.51.28;	author vprus;	state Exp;
branches;
next	1.46;

1.46
date	2008.03.24.17.33.30;	author vprus;	state Exp;
branches;
next	1.45;

1.45
date	2008.01.30.07.17.31;	author vprus;	state Exp;
branches;
next	1.44;

1.44
date	2008.01.23.06.13.44;	author nickrob;	state Exp;
branches;
next	1.43;

1.43
date	2008.01.01.22.53.14;	author drow;	state Exp;
branches;
next	1.42;

1.42
date	2007.11.27.23.02.59;	author nickrob;	state Exp;
branches;
next	1.41;

1.41
date	2007.11.20.19.55.16;	author nickrob;	state Exp;
branches;
next	1.40;

1.40
date	2007.08.31.18.52.05;	author vprus;	state Exp;
branches;
next	1.39;

1.39
date	2007.08.31.18.41.50;	author vprus;	state Exp;
branches;
next	1.38;

1.38
date	2007.08.28.20.34.18;	author msnyder;	state Exp;
branches;
next	1.37;

1.37
date	2007.08.23.18.08.48;	author brobecke;	state Exp;
branches;
next	1.36;

1.36
date	2007.08.13.22.57.39;	author msnyder;	state Exp;
branches;
next	1.35;

1.35
date	2007.08.10.21.44.23;	author msnyder;	state Exp;
branches;
next	1.34;

1.34
date	2007.08.04.03.00.40;	author msnyder;	state Exp;
branches;
next	1.33;

1.33
date	2007.06.13.19.08.47;	author drow;	state Exp;
branches;
next	1.32;

1.32
date	2007.04.14.09.51.29;	author vprus;	state Exp;
branches;
next	1.31;

1.31
date	2007.02.27.23.42.33;	author brobecke;	state Exp;
branches;
next	1.30;

1.30
date	2007.02.13.08.15.49;	author denis;	state Exp;
branches;
next	1.29;

1.29
date	2007.02.08.19.46.30;	author nickrob;	state Exp;
branches;
next	1.28;

1.28
date	2007.01.09.17.59.08;	author drow;	state Exp;
branches;
next	1.27;

1.27
date	2006.12.08.04.09.53;	author nickrob;	state Exp;
branches;
next	1.26;

1.26
date	2006.11.29.22.53.07;	author nickrob;	state Exp;
branches;
next	1.25;

1.25
date	2006.11.29.15.40.59;	author vprus;	state Exp;
branches;
next	1.24;

1.24
date	2006.11.28.19.40.27;	author vprus;	state Exp;
branches;
next	1.23;

1.23
date	2005.12.23.18.57.46;	author eliz;	state Exp;
branches;
next	1.22;

1.22
date	2005.07.15.04.12.19;	author drow;	state Exp;
branches;
next	1.21;

1.21
date	2005.02.11.04.06.11;	author cagney;	state Exp;
branches;
next	1.20;

1.20
date	2004.06.01.13.33.58;	author cagney;	state Exp;
branches;
next	1.19;

1.19
date	2004.01.24.04.22.10;	author nickrob;	state Exp;
branches
	1.19.4.1;
next	1.18;

1.18
date	2004.01.20.00.46.36;	author nickrob;	state Exp;
branches;
next	1.17;

1.17
date	2003.11.06.22.54.02;	author cagney;	state Exp;
branches;
next	1.16;

1.16
date	2003.02.02.06.24.04;	author cagney;	state Exp;
branches
	1.16.36.1;
next	1.15;

1.15
date	2002.11.07.01.43.59;	author jjohnstn;	state Exp;
branches;
next	1.14;

1.14
date	2002.10.23.21.17.51;	author jjohnstn;	state Exp;
branches;
next	1.13;

1.13
date	2002.10.03.20.02.13;	author jjohnstn;	state Exp;
branches
	1.13.2.1;
next	1.12;

1.12
date	2002.07.30.13.45.15;	author cagney;	state Exp;
branches
	1.12.8.1;
next	1.11;

1.11
date	2002.03.19.02.51.08;	author cagney;	state Exp;
branches
	1.11.6.1;
next	1.10;

1.10
date	2001.08.17.19.01.22;	author kseitz;	state Exp;
branches;
next	1.9;

1.9
date	2001.05.12.04.08.24;	author cagney;	state Exp;
branches;
next	1.8;

1.8
date	2001.03.06.08.21.45;	author kevinb;	state Exp;
branches;
next	1.7;

1.7
date	2000.12.15.01.01.51;	author kevinb;	state Exp;
branches;
next	1.6;

1.6
date	2000.11.20.02.06.19;	author cagney;	state Exp;
branches;
next	1.5;

1.5
date	2000.05.16.05.07.53;	author cagney;	state Exp;
branches;
next	1.4;

1.4
date	2000.05.15.11.48.50;	author cagney;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.13.21.51.46;	author jingham;	state Exp;
branches;
next	1.2;

1.2
date	2000.02.23.06.19.22;	author cagney;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.23.00.25.43;	author cagney;	state Exp;
branches;
next	;

1.71.2.1
date	2012.01.06.04.43.40;	author brobecke;	state Exp;
branches;
next	;

1.19.4.1
date	2004.09.16.17.01.37;	author drow;	state Exp;
branches;
next	;

1.16.36.1
date	2004.03.23.20.15.09;	author ezannoni;	state Exp;
branches;
next	;

1.13.2.1
date	2002.10.26.17.12.18;	author drow;	state Exp;
branches;
next	1.13.2.2;

1.13.2.2
date	2003.12.14.20.27.44;	author drow;	state Exp;
branches;
next	1.13.2.3;

1.13.2.3
date	2004.02.09.19.43.54;	author drow;	state Exp;
branches;
next	;

1.12.8.1
date	2002.10.11.22.23.00;	author carlton;	state Exp;
branches;
next	1.12.8.2;

1.12.8.2
date	2002.10.25.23.49.57;	author carlton;	state Exp;
branches;
next	1.12.8.3;

1.12.8.3
date	2002.11.15.19.19.12;	author carlton;	state Exp;
branches;
next	1.12.8.4;

1.12.8.4
date	2003.02.07.19.17.56;	author carlton;	state Exp;
branches;
next	1.12.8.5;

1.12.8.5
date	2003.11.11.23.51.09;	author carlton;	state Exp;
branches;
next	1.12.8.6;

1.12.8.6
date	2004.01.26.19.11.40;	author carlton;	state Exp;
branches;
next	;

1.11.6.1
date	2002.08.09.18.34.33;	author kseitz;	state Exp;
branches;
next	1.11.6.2;

1.11.6.2
date	2002.11.04.00.23.11;	author ezannoni;	state Exp;
branches;
next	;


desc
@@


1.80
log
@gdb/
	* mi/mi-cmd-var.c (mi_no_values, mi_simple_values): Move to
	mi-parse.c.  Make them static.
	(mi_all_values): Likewise.
	(mi_parse_values_option): Move to mi-parse.c.  Rename it to
	mi_parse_print_values.  Make it external.
	* mi/mi-cmds.h (mi_no_values, mi_simple_values, mi_all_values):
	Remove the declarations.
	* mi/mi-parse.c (mi_parse_print_values): Moved from mi-cmd-var.c.
	* mi/mi-parse.h (mi_parse_print_values): Declare.
	* mi/mi-cmd-stack.c: Include mi-parse.h.
	(parse_print_values): Remove
	(mi_cmd_stack_list_locals): Call mi_parse_print_values instead
	of parse_print_values.
	(mi_cmd_stack_list_args, mi_cmd_stack_list_variables): Likewise.
@
text
@/* MI Command Set - varobj commands.
   Copyright (C) 2000-2013 Free Software Foundation, Inc.

   Contributed by Cygnus Solutions (a Red Hat company).

   This file is part of GDB.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

#include "defs.h"
#include "mi-cmds.h"
#include "mi-main.h"
#include "ui-out.h"
#include "mi-out.h"
#include "varobj.h"
#include "value.h"
#include <ctype.h>
#include "gdb_string.h"
#include "mi-getopt.h"
#include "gdbthread.h"
#include "mi-parse.h"

extern unsigned int varobjdebug;		/* defined in varobj.c.  */

static void varobj_update_one (struct varobj *var,
			       enum print_values print_values,
			       int explicit);

static int mi_print_value_p (struct varobj *var,
			     enum print_values print_values);

/* Print variable object VAR.  The PRINT_VALUES parameter controls
   if the value should be printed.  The PRINT_EXPRESSION parameter
   controls if the expression should be printed.  */

static void 
print_varobj (struct varobj *var, enum print_values print_values,
	      int print_expression)
{
  struct ui_out *uiout = current_uiout;
  char *type;
  int thread_id;
  char *display_hint;

  ui_out_field_string (uiout, "name", varobj_get_objname (var));
  if (print_expression)
    ui_out_field_string (uiout, "exp", varobj_get_expression (var));
  ui_out_field_int (uiout, "numchild", varobj_get_num_children (var));
  
  if (mi_print_value_p (var, print_values))
    {
      char *val = varobj_get_value (var);

      ui_out_field_string (uiout, "value", val);
      xfree (val);
    }

  type = varobj_get_type (var);
  if (type != NULL)
    {
      ui_out_field_string (uiout, "type", type);
      xfree (type);
    }

  thread_id = varobj_get_thread_id (var);
  if (thread_id > 0)
    ui_out_field_int (uiout, "thread-id", thread_id);

  if (varobj_get_frozen (var))
    ui_out_field_int (uiout, "frozen", 1);

  display_hint = varobj_get_display_hint (var);
  if (display_hint)
    {
      ui_out_field_string (uiout, "displayhint", display_hint);
      xfree (display_hint);
    }

  if (varobj_pretty_printed_p (var))
    ui_out_field_int (uiout, "dynamic", 1);
}

/* VAROBJ operations */

void
mi_cmd_var_create (char *command, char **argv, int argc)
{
  struct ui_out *uiout = current_uiout;
  CORE_ADDR frameaddr = 0;
  struct varobj *var;
  char *name;
  char *frame;
  char *expr;
  struct cleanup *old_cleanups;
  enum varobj_type var_type;

  if (argc != 3)
    error (_("-var-create: Usage: NAME FRAME EXPRESSION."));

  name = xstrdup (argv[0]);
  /* Add cleanup for name. Must be free_current_contents as name can
     be reallocated.  */
  old_cleanups = make_cleanup (free_current_contents, &name);

  frame = xstrdup (argv[1]);
  make_cleanup (xfree, frame);

  expr = xstrdup (argv[2]);
  make_cleanup (xfree, expr);

  if (strcmp (name, "-") == 0)
    {
      xfree (name);
      name = varobj_gen_name ();
    }
  else if (!isalpha (*name))
    error (_("-var-create: name of object must begin with a letter"));

  if (strcmp (frame, "*") == 0)
    var_type = USE_CURRENT_FRAME;
  else if (strcmp (frame, "@@") == 0)
    var_type = USE_SELECTED_FRAME;  
  else
    {
      var_type = USE_SPECIFIED_FRAME;
      frameaddr = string_to_core_addr (frame);
    }

  if (varobjdebug)
    fprintf_unfiltered (gdb_stdlog,
		    "Name=\"%s\", Frame=\"%s\" (%s), Expression=\"%s\"\n",
			name, frame, hex_string (frameaddr), expr);

  var = varobj_create (name, expr, frameaddr, var_type);

  if (var == NULL)
    error (_("-var-create: unable to create variable object"));

  print_varobj (var, PRINT_ALL_VALUES, 0 /* don't print expression */);

  ui_out_field_int (uiout, "has_more", varobj_has_more (var, 0));

  do_cleanups (old_cleanups);
}

void
mi_cmd_var_delete (char *command, char **argv, int argc)
{
  char *name;
  struct varobj *var;
  int numdel;
  int children_only_p = 0;
  struct cleanup *old_cleanups;
  struct ui_out *uiout = current_uiout;

  if (argc < 1 || argc > 2)
    error (_("-var-delete: Usage: [-c] EXPRESSION."));

  name = xstrdup (argv[0]);
  /* Add cleanup for name. Must be free_current_contents as name can
     be reallocated.  */
  old_cleanups = make_cleanup (free_current_contents, &name);

  /* If we have one single argument it cannot be '-c' or any string
     starting with '-'.  */
  if (argc == 1)
    {
      if (strcmp (name, "-c") == 0)
	error (_("-var-delete: Missing required "
		 "argument after '-c': variable object name"));
      if (*name == '-')
	error (_("-var-delete: Illegal variable object name"));
    }

  /* If we have 2 arguments they must be '-c' followed by a string
     which would be the variable name.  */
  if (argc == 2)
    {
      if (strcmp (name, "-c") != 0)
	error (_("-var-delete: Invalid option."));
      children_only_p = 1;
      do_cleanups (old_cleanups);
      name = xstrdup (argv[1]);
      old_cleanups = make_cleanup (free_current_contents, &name);
    }

  /* If we didn't error out, now NAME contains the name of the
     variable.  */

  var = varobj_get_handle (name);

  numdel = varobj_delete (var, NULL, children_only_p);

  ui_out_field_int (uiout, "ndeleted", numdel);

  do_cleanups (old_cleanups);
}

/* Parse a string argument into a format value.  */

static enum varobj_display_formats
mi_parse_format (const char *arg)
{
  if (arg != NULL)
    {
      int len;

      len = strlen (arg);

      if (strncmp (arg, "natural", len) == 0)
	return FORMAT_NATURAL;
      else if (strncmp (arg, "binary", len) == 0)
	return FORMAT_BINARY;
      else if (strncmp (arg, "decimal", len) == 0)
	return FORMAT_DECIMAL;
      else if (strncmp (arg, "hexadecimal", len) == 0)
	return FORMAT_HEXADECIMAL;
      else if (strncmp (arg, "octal", len) == 0)
	return FORMAT_OCTAL;
    }

  error (_("Must specify the format as: \"natural\", "
	   "\"binary\", \"decimal\", \"hexadecimal\", or \"octal\""));
}

void
mi_cmd_var_set_format (char *command, char **argv, int argc)
{
  enum varobj_display_formats format;
  struct varobj *var;
  char *val;
  struct ui_out *uiout = current_uiout;

  if (argc != 2)
    error (_("-var-set-format: Usage: NAME FORMAT."));

  /* Get varobj handle, if a valid var obj name was specified.  */
  var = varobj_get_handle (argv[0]);

  format = mi_parse_format (argv[1]);
  
  /* Set the format of VAR to the given format.  */
  varobj_set_display_format (var, format);

  /* Report the new current format.  */
  ui_out_field_string (uiout, "format", varobj_format_string[(int) format]);
 
  /* Report the value in the new format.  */
  val = varobj_get_value (var);
  ui_out_field_string (uiout, "value", val);
  xfree (val);
}

void
mi_cmd_var_set_visualizer (char *command, char **argv, int argc)
{
  struct varobj *var;

  if (argc != 2)
    error (_("Usage: NAME VISUALIZER_FUNCTION."));

  var = varobj_get_handle (argv[0]);

  if (var == NULL)
    error (_("Variable object not found"));

  varobj_set_visualizer (var, argv[1]);
}

void
mi_cmd_var_set_frozen (char *command, char **argv, int argc)
{
  struct varobj *var;
  int frozen;

  if (argc != 2)
    error (_("-var-set-format: Usage: NAME FROZEN_FLAG."));

  var = varobj_get_handle (argv[0]);

  if (strcmp (argv[1], "0") == 0)
    frozen = 0;
  else if (strcmp (argv[1], "1") == 0)
    frozen = 1;
  else
    error (_("Invalid flag value"));

  varobj_set_frozen (var, frozen);

  /* We don't automatically return the new value, or what varobjs got
     new values during unfreezing.  If this information is required,
     client should call -var-update explicitly.  */
}

void
mi_cmd_var_show_format (char *command, char **argv, int argc)
{
  struct ui_out *uiout = current_uiout;
  enum varobj_display_formats format;
  struct varobj *var;

  if (argc != 1)
    error (_("-var-show-format: Usage: NAME."));

  /* Get varobj handle, if a valid var obj name was specified.  */
  var = varobj_get_handle (argv[0]);

  format = varobj_get_display_format (var);

  /* Report the current format.  */
  ui_out_field_string (uiout, "format", varobj_format_string[(int) format]);
}

void
mi_cmd_var_info_num_children (char *command, char **argv, int argc)
{
  struct ui_out *uiout = current_uiout;
  struct varobj *var;

  if (argc != 1)
    error (_("-var-info-num-children: Usage: NAME."));

  /* Get varobj handle, if a valid var obj name was specified.  */
  var = varobj_get_handle (argv[0]);

  ui_out_field_int (uiout, "numchild", varobj_get_num_children (var));
}

/* Return 1 if given the argument PRINT_VALUES we should display
   the varobj VAR.  */

static int
mi_print_value_p (struct varobj *var, enum print_values print_values)
{
  struct type *type;

  if (print_values == PRINT_NO_VALUES)
    return 0;

  if (print_values == PRINT_ALL_VALUES)
    return 1;

  if (varobj_pretty_printed_p (var))
    return 1;

  type = varobj_get_gdb_type (var);
  if (type == NULL)
    return 1;
  else
    {
      type = check_typedef (type);

      /* For PRINT_SIMPLE_VALUES, only print the value if it has a type
	 and that type is not a compound type.  */
      return (TYPE_CODE (type) != TYPE_CODE_ARRAY
	      && TYPE_CODE (type) != TYPE_CODE_STRUCT
	      && TYPE_CODE (type) != TYPE_CODE_UNION);
    }
}

void
mi_cmd_var_list_children (char *command, char **argv, int argc)
{
  struct ui_out *uiout = current_uiout;
  struct varobj *var;  
  VEC(varobj_p) *children;
  struct varobj *child;
  enum print_values print_values;
  int ix;
  int from, to;
  char *display_hint;

  if (argc < 1 || argc > 4)
    error (_("-var-list-children: Usage: "
	     "[PRINT_VALUES] NAME [FROM TO]"));

  /* Get varobj handle, if a valid var obj name was specified.  */
  if (argc == 1 || argc == 3)
    var = varobj_get_handle (argv[0]);
  else
    var = varobj_get_handle (argv[1]);

  if (argc > 2)
    {
      from = atoi (argv[argc - 2]);
      to = atoi (argv[argc - 1]);
    }
  else
    {
      from = -1;
      to = -1;
    }

  children = varobj_list_children (var, &from, &to);
  ui_out_field_int (uiout, "numchild", to - from);
  if (argc == 2 || argc == 4)
    print_values = mi_parse_print_values (argv[0]);
  else
    print_values = PRINT_NO_VALUES;

  display_hint = varobj_get_display_hint (var);
  if (display_hint)
    {
      ui_out_field_string (uiout, "displayhint", display_hint);
      xfree (display_hint);
    }

  if (from < to)
    {
      struct cleanup *cleanup_children;

      if (mi_version (uiout) == 1)
	cleanup_children
	  = make_cleanup_ui_out_tuple_begin_end (uiout, "children");
      else
	cleanup_children
	  = make_cleanup_ui_out_list_begin_end (uiout, "children");
      for (ix = from;
	   ix < to && VEC_iterate (varobj_p, children, ix, child);
	   ++ix)
	{
	  struct cleanup *cleanup_child;

	  cleanup_child = make_cleanup_ui_out_tuple_begin_end (uiout, "child");
	  print_varobj (child, print_values, 1 /* print expression */);
	  do_cleanups (cleanup_child);
	}
      do_cleanups (cleanup_children);
    }

  ui_out_field_int (uiout, "has_more", varobj_has_more (var, to));
}

void
mi_cmd_var_info_type (char *command, char **argv, int argc)
{
  struct ui_out *uiout = current_uiout;
  struct varobj *var;

  if (argc != 1)
    error (_("-var-info-type: Usage: NAME."));

  /* Get varobj handle, if a valid var obj name was specified.  */
  var = varobj_get_handle (argv[0]);

  ui_out_field_string (uiout, "type", varobj_get_type (var));
}

void
mi_cmd_var_info_path_expression (char *command, char **argv, int argc)
{
  struct ui_out *uiout = current_uiout;
  struct varobj *var;
  char *path_expr;

  if (argc != 1)
    error (_("Usage: NAME."));

  /* Get varobj handle, if a valid var obj name was specified.  */
  var = varobj_get_handle (argv[0]);
  
  path_expr = varobj_get_path_expr (var);

  ui_out_field_string (uiout, "path_expr", path_expr);
}

void
mi_cmd_var_info_expression (char *command, char **argv, int argc)
{
  struct ui_out *uiout = current_uiout;
  enum varobj_languages lang;
  struct varobj *var;

  if (argc != 1)
    error (_("-var-info-expression: Usage: NAME."));

  /* Get varobj handle, if a valid var obj name was specified.  */
  var = varobj_get_handle (argv[0]);

  lang = varobj_get_language (var);

  ui_out_field_string (uiout, "lang", varobj_language_string[(int) lang]);
  ui_out_field_string (uiout, "exp", varobj_get_expression (var));
}

void
mi_cmd_var_show_attributes (char *command, char **argv, int argc)
{
  struct ui_out *uiout = current_uiout;
  int attr;
  char *attstr;
  struct varobj *var;

  if (argc != 1)
    error (_("-var-show-attributes: Usage: NAME."));

  /* Get varobj handle, if a valid var obj name was specified */
  var = varobj_get_handle (argv[0]);

  attr = varobj_get_attributes (var);
  /* FIXME: define masks for attributes */
  if (attr & 0x00000001)
    attstr = "editable";
  else
    attstr = "noneditable";

  ui_out_field_string (uiout, "attr", attstr);
}

void
mi_cmd_var_evaluate_expression (char *command, char **argv, int argc)
{
  struct ui_out *uiout = current_uiout;
  struct varobj *var;

  enum varobj_display_formats format;
  int formatFound;
  int oind;
  char *oarg;
    
  enum opt
  {
    OP_FORMAT
  };
  static const struct mi_opt opts[] =
    {
      {"f", OP_FORMAT, 1},
      { 0, 0, 0 }
    };

  /* Parse arguments.  */
  format = FORMAT_NATURAL;
  formatFound = 0;
  oind = 0;
  while (1)
    {
      int opt = mi_getopt ("-var-evaluate-expression", argc, argv,
			   opts, &oind, &oarg);

      if (opt < 0)
	break;
      switch ((enum opt) opt)
	{
	case OP_FORMAT:
	  if (formatFound)
	    error (_("Cannot specify format more than once"));
   
	  format = mi_parse_format (oarg);
	  formatFound = 1;
	  break;
	}
    }

  if (oind >= argc)
    error (_("Usage: [-f FORMAT] NAME"));
   
  if (oind < argc - 1)
    error (_("Garbage at end of command"));
 
  /* Get varobj handle, if a valid var obj name was specified.  */
  var = varobj_get_handle (argv[oind]);
   
  if (formatFound)
    {
      char *val = varobj_get_formatted_value (var, format);

      ui_out_field_string (uiout, "value", val);
      xfree (val);
    }
  else
    {
      char *val = varobj_get_value (var);

      ui_out_field_string (uiout, "value", val);
      xfree (val);
    }
}

void
mi_cmd_var_assign (char *command, char **argv, int argc)
{
  struct ui_out *uiout = current_uiout;
  struct varobj *var;
  char *expression, *val;
  struct cleanup *cleanup;

  if (argc != 2)
    error (_("-var-assign: Usage: NAME EXPRESSION."));

  /* Get varobj handle, if a valid var obj name was specified.  */
  var = varobj_get_handle (argv[0]);

  if (!varobj_editable_p (var))
    error (_("-var-assign: Variable object is not editable"));

  expression = xstrdup (argv[1]);

  /* MI command '-var-assign' may write memory, so suppress memory
     changed notification if it does.  */
  cleanup
    = make_cleanup_restore_integer (&mi_suppress_notification.memory);
  mi_suppress_notification.memory = 1;

  if (!varobj_set_value (var, expression))
    error (_("-var-assign: Could not assign "
	     "expression to variable object"));

  val = varobj_get_value (var);
  ui_out_field_string (uiout, "value", val);
  xfree (val);

  do_cleanups (cleanup);
}

/* Type used for parameters passing to mi_cmd_var_update_iter.  */

struct mi_cmd_var_update
  {
    int only_floating;
    enum print_values print_values;
  };

/* Helper for mi_cmd_var_update - update each VAR.  */

static void
mi_cmd_var_update_iter (struct varobj *var, void *data_pointer)
{
  struct mi_cmd_var_update *data = data_pointer;
  int thread_id, thread_stopped;

  thread_id = varobj_get_thread_id (var);

  if (thread_id == -1 && is_stopped (inferior_ptid))
    thread_stopped = 1;
  else
    {
      struct thread_info *tp = find_thread_id (thread_id);

      if (tp)
	thread_stopped = is_stopped (tp->ptid);
      else
	thread_stopped = 1;
    }

  if (thread_stopped
      && (!data->only_floating || varobj_floating_p (var)))
    varobj_update_one (var, data->print_values, 0 /* implicit */);
}

void
mi_cmd_var_update (char *command, char **argv, int argc)
{
  struct ui_out *uiout = current_uiout;
  struct cleanup *cleanup;
  char *name;
  enum print_values print_values;

  if (argc != 1 && argc != 2)
    error (_("-var-update: Usage: [PRINT_VALUES] NAME."));

  if (argc == 1)
    name = argv[0];
  else
    name = argv[1];

  if (argc == 2)
    print_values = mi_parse_print_values (argv[0]);
  else
    print_values = PRINT_NO_VALUES;

  if (mi_version (uiout) <= 1)
    cleanup = make_cleanup_ui_out_tuple_begin_end (uiout, "changelist");
  else
    cleanup = make_cleanup_ui_out_list_begin_end (uiout, "changelist");

  /* Check if the parameter is a "*", which means that we want to
     update all variables.  */

  if ((*name == '*' || *name == '@@') && (*(name + 1) == '\0'))
    {
      struct mi_cmd_var_update data;

      data.only_floating = (*name == '@@');
      data.print_values = print_values;

      /* varobj_update_one automatically updates all the children of
	 VAROBJ.  Therefore update each VAROBJ only once by iterating
	 only the root VAROBJs.  */

      all_root_varobjs (mi_cmd_var_update_iter, &data);
    }
  else
    {
      /* Get varobj handle, if a valid var obj name was specified.  */
      struct varobj *var = varobj_get_handle (name);

      varobj_update_one (var, print_values, 1 /* explicit */);
    }

  do_cleanups (cleanup);
}

/* Helper for mi_cmd_var_update().  */

static void
varobj_update_one (struct varobj *var, enum print_values print_values,
		   int explicit)
{
  struct ui_out *uiout = current_uiout;
  VEC (varobj_update_result) *changes;
  varobj_update_result *r;
  int i;
  
  changes = varobj_update (&var, explicit);
  
  for (i = 0; VEC_iterate (varobj_update_result, changes, i, r); ++i)
    {
      char *display_hint;
      int from, to;
      struct cleanup *cleanup = make_cleanup (null_cleanup, NULL);

      if (mi_version (uiout) > 1)
	make_cleanup_ui_out_tuple_begin_end (uiout, NULL);
      ui_out_field_string (uiout, "name", varobj_get_objname (r->varobj));

      switch (r->status)
	{
	case VAROBJ_IN_SCOPE:
	  if (mi_print_value_p (r->varobj, print_values))
	    {
	      char *val = varobj_get_value (r->varobj);

	      ui_out_field_string (uiout, "value", val);
	      xfree (val);
	    }
	  ui_out_field_string (uiout, "in_scope", "true");
	  break;
        case VAROBJ_NOT_IN_SCOPE:
          ui_out_field_string (uiout, "in_scope", "false");
	  break;
        case VAROBJ_INVALID:
          ui_out_field_string (uiout, "in_scope", "invalid");
 	  break;
	}

      if (r->status != VAROBJ_INVALID)
	{
	  if (r->type_changed)
	    ui_out_field_string (uiout, "type_changed", "true");
	  else
	    ui_out_field_string (uiout, "type_changed", "false");
	}

      if (r->type_changed)
	ui_out_field_string (uiout, "new_type", varobj_get_type (r->varobj));

      if (r->type_changed || r->children_changed)
	ui_out_field_int (uiout, "new_num_children", 
			  varobj_get_num_children (r->varobj));

      display_hint = varobj_get_display_hint (r->varobj);
      if (display_hint)
	{
	  ui_out_field_string (uiout, "displayhint", display_hint);
	  xfree (display_hint);
	}

      if (varobj_pretty_printed_p (r->varobj))
	ui_out_field_int (uiout, "dynamic", 1);

      varobj_get_child_range (r->varobj, &from, &to);
      ui_out_field_int (uiout, "has_more",
			varobj_has_more (r->varobj, to));

      if (r->new)
	{
	  int j;
	  varobj_p child;
	  struct cleanup *cleanup;

	  cleanup = make_cleanup_ui_out_list_begin_end (uiout, "new_children");
	  for (j = 0; VEC_iterate (varobj_p, r->new, j, child); ++j)
	    {
	      struct cleanup *cleanup_child;

	      cleanup_child
		= make_cleanup_ui_out_tuple_begin_end (uiout, NULL);
	      print_varobj (child, print_values, 1 /* print_expression */);
	      do_cleanups (cleanup_child);
	    }

	  do_cleanups (cleanup);
	  VEC_free (varobj_p, r->new);
	  r->new = NULL;	/* Paranoia.  */
	}

      do_cleanups (cleanup);
    }
  VEC_free (varobj_update_result, changes);
}

void
mi_cmd_enable_pretty_printing (char *command, char **argv, int argc)
{
  if (argc != 0)
    error (_("-enable-pretty-printing: no arguments allowed"));

  varobj_enable_pretty_printing ();
}

void
mi_cmd_var_set_update_range (char *command, char **argv, int argc)
{
  struct varobj *var;
  int from, to;

  if (argc != 3)
    error (_("-var-set-update-range: Usage: VAROBJ FROM TO"));
  
  var = varobj_get_handle (argv[0]);
  from = atoi (argv[1]);
  to = atoi (argv[2]);

  varobj_set_child_range (var, from, to);
}
@


1.79
log
@fix mi-cmd-var.c

This is a stylistic change in mi-cmd-var.c that adds outer cleanups
where needed by the checker.

	* mi/mi-cmd-var.c (varobj_update_one): Add an outer null cleanup.
@
text
@d32 1
a32 4

const char mi_no_values[] = "--no-values";
const char mi_simple_values[] = "--simple-values";
const char mi_all_values[] = "--all-values";
a339 20
/* Parse a string argument into a print_values value.  */

static enum print_values
mi_parse_values_option (const char *arg)
{
  if (strcmp (arg, "0") == 0
      || strcmp (arg, mi_no_values) == 0)
    return PRINT_NO_VALUES;
  else if (strcmp (arg, "1") == 0
	   || strcmp (arg, mi_all_values) == 0)
    return PRINT_ALL_VALUES;
  else if (strcmp (arg, "2") == 0
	   || strcmp (arg, mi_simple_values) == 0)
    return PRINT_SIMPLE_VALUES;
  else
    error (_("Unknown value for PRINT_VALUES\n\
Must be: 0 or \"%s\", 1 or \"%s\", 2 or \"%s\""),
	   mi_no_values, mi_simple_values, mi_all_values);
}

d408 1
a408 1
    print_values = mi_parse_values_option (argv[0]);
d678 1
a678 1
    print_values = mi_parse_values_option (argv[0]);
@


1.78
log
@Update years in copyright notice for the GDB files.

Two modifications:
  1. The addition of 2013 to the copyright year range for every file;
  2. The use of a single year range, instead of potentially multiple
     year ranges, as approved by the FSF.
@
text
@a743 1
  struct cleanup *cleanup = NULL;
d754 1
d757 1
a757 1
        cleanup = make_cleanup_ui_out_tuple_begin_end (uiout, NULL);
d831 1
a831 2
      if (mi_version (uiout) > 1)
	do_cleanups (cleanup);
@


1.77
log
@2012-12-06  Jens Elmenthaler <jens.elmenthaler@@advantest.com>

	PR mi/14741:
	* mi/mi-cmd-var.c (varobj_update_one): Take value of
	attribute "dynamic" and "displayhint" from printed child,
	not the root variable.

	* gdb.python/py-mi.exp: Correct expected results for attribute
	"dynamic" returned by -var-update.
	Add test case for correct handling of "diplayhint" for children
	of dynamic varobjs.
	* gdb.python/py-prettyprint.c (set_itme): New function.
	(bug_14741) New function.
	(main) Add call to bug_14741().
	* gdb.python/py-prettyprint.py (class ArrayPrinter): New class.
@
text
@d2 1
a2 2
   Copyright (C) 2000, 2002, 2004-2005, 2007-2012 Free Software
   Foundation, Inc.
@


1.76
log
@gdb:
	* breakpoint.c (invalidate_bp_value_on_memory_change): Add one
	more parameter 'inferior'.
	* corefile.c (write_memory_with_notification): Caller update.

	* mi/mi-cmd-var.c: Include "mi-main.h".
	(mi_cmd_var_assign): Set mi_suppress_notification.data_write_memory
	to 1 and restore it later.
	* mi/mi-cmds.c (mi_cmd mi_cmds): Update for "data-write-memory"
	and "data-write-memory-bytes.
	* mi/mi-interp.c: Include objfiles.h.
	(mi_interpreter_init): Call observer_attach_memory_changed.
	(mi_memory_changed): New.
	* mi/mi-main.h (struct mi_suppress_notification) <memory>:
	New field.

	* NEWS: Mention new MI notification "memory-changed".

gdb/doc:

	* observer.texi (GDB Observers): Update observer
	'memory_changed'.
	* gdb.texinfo (GDB/MI Async Records): Document for
	"memory-changed" notification.

gdb/testsuite:

	* gdb.mi/mi-memory-changed.exp: New.
@
text
@d796 1
a796 1
      display_hint = varobj_get_display_hint (var);
d803 1
a803 1
      if (varobj_pretty_printed_p (var))
@


1.75
log
@gdb/
	* dwarf2loc.c (entry_values_debug): Add 'unsigned'.
	(_initialize_dwarf2loc): Call add_setshow_zuinteger_cmd instead of
	add_setshow_zinteger_cmd.
	* dwarf2loc.h: Update the declaration of 'entry_values_debug'.
	* dwarf2read.c (dwarf2_die_debug): Add 'unsigned'.
	(_initialize_dwarf2_read): Call add_setshow_zuinteger_cmd
	instead of add_setshow_zinteger_cmd.
	* darwin-nat.c (dwarwin_debug_flag): Add 'unsigned'.
	(_initialize_darwin_inferior): Call add_setshow_zuinteger_cmd
	instead of add_setshow_zinteger_cmd.
	* frame.c (frame_debug): Add 'unsigned'.
	(_intialize_frame): Call add_setshow_zuinteger_cmd instead of
	add_setshow_zinteger_cmd.
	* frame.h: Update the declaration of 'frame_debug'.
	* gdbtypes.c (overload_debug): Add 'unsigned'.
	(_initialize_gdbtypes): Call add_setshow_zuinteger_cmd instead of
	add_setshow_zinteger_cmd.
	* inferior.h: Update declaration of 'debug_infrun'.
	* infrun.c (debug_infrun): Add 'unsigned'.
	(_initialize_infrun): Call add_setshow_zuinteger_cmd instead of
	add_setshow_zinteger_cmd.
	* jit.c (jit_debug): Add 'unsigned'.
	(_initialize_jit): Call add_setshow_zuinteger_cmd instead of
	add_setshow_zinteger_cmd.
	* linux-nat.c (debug_linux_nat): Add 'unsigned'.
	(_initialize_linux_nat): Call add_setshow_zuinteger_cmd
	instead of add_setshow_zinteger_cmd.
	* linux-thread-db.c (libthread_db_debug): Add 'unsigned'.
	(_initialize_thread_db): Call add_setshow_zuinteger_cmd instead of
	add_setshow_zinteger_cmd.
	* machoread.c (mach_o_debug_level): Add 'unsigned'.
	(_initialize_machoread): Call add_setshow_zuinteger_cmd
	instead of add_setshow_zinteger_cmd.
	* mi/mi-cmd-var.c: Update the declaration of 'varobjdebug'.
	* microblaze-tdep.c (microblaze_debug_flag): Add 'unsigned'.
	(_initialize_microblaze_tdep): Call add_setshow_zuinteger_cmd
	intead of add_setshow_zinteger_cmd.
	* mips-tdep.c (mips_debug): Add 'unsigned'.
	(_initialize_mips_tdep): Call add_setshow_zuinteger_cmd
	instead of add_setshow_zinteger_cmd.
	* monitor.c (monitor_debug): Add 'unsigned'.
	(_initialize_remote_monitors): Call add_setshow_zuinteger_cmd instead of
	add_setshow_zinteger_cmd.
	* observer.c (observer_debug): Add 'unsigned'.
	(_initialize_observer): Call add_setshow_zuinteger_cmd instead of
	add_setshow_zinteger_cmd.
	* parse.c (expressiondebug): Add 'unsigned'.
	(_initialize_parse): Call add_setshow_zuinteger_cmd instead of
	add_setshow_zinteger_cmd.
	* record.c (record_debug): Add 'unsigned'.
	(_initialize_record): Call add_setshow_zuinteger_cmd instead of
	add_setshow_zinteger_cmd.
	* record.h: Update the declaration of 'record_debug'.
	* stap-probe.c (stap_expression_debug): Add 'unsigned'.
	(_initialize_stap_probe): Call add_setshow_zuinteger_cmd instead of
	add_setshow_zinteger_cmd.
	* serial.c (global_serial_debug_p): Add 'unsigned'.
	(_initialize_serial): Call add_setshow_zuinteger_cmd instead of
	add_setshow_zinteger_cmd.
	* solib-dsbt.c (solib_dsbt_debug): Add 'unsigned'.
	(_initialize_dsbt_solib): Call add_setshow_zuinteger_cmd instead of
	add_setshow_zinteger_cmd.
	* solib-frv.c (solib_frv_debug): Add 'unsigned'.
	(_initialize_frv_solib): Call add_setshow_zuinteger_cmd instead of
	add_setshow_zinteger_cmd.
	* target.c (targetdebug): Add 'unsigned'.
	(initialize_targets): Call add_setshow_zuinteger_cmd instead of
	add_setshow_zinteger_cmd.
	* valops.c (overload_debug): Add 'unsigned'.
	* varobj.c (varobjdebug): Add 'unsigned'.
	(_initialize_varobj): Call add_setshow_zuinteger_cmd instead of
	add_setshow_zinteger_cmd.
	* xtensa-tdep.c (xtensa_debug_level): Add 'unsigned'.
	(_initialize_xtensa_tdep): Call add_setshow_zuinteger_cmd
	instead of add_setshow_zinteger_cmd.

	* arch-utils.h: Remove the declaration of 'gdbarch_debug'.
	* gdbarch.sh (gdbarch_debug): Add 'unsigned'.
	(extern void _initialize_gdbarch): Call add_setshow_zuinteger_cmd
	instead of add_setshow_zinteger_cmd.
	* gdbarch.c, gdbarch.h: Re-generated.
@
text
@d24 1
d620 1
d633 6
d646 2
@


1.74
log
@	* mi/mi-cmd-break.c: Enforce coding standards, fix comments.
	* mi/mi-cmd-disas.c: Ditto.
	* mi/mi-cmd-env.c: Ditto.
	* mi/mi-cmd-file.c: Ditto.
	* mi/mi-cmd-stack.c: Ditto.
	* mi/mi-cmd-target.c: Ditto.
	* mi/mi-cmd-var.c: Ditto.
	* mi/mi-cmds.c: Ditto.
	* mi/mi-cmds.h: Ditto.
	* mi/mi-console.c: Ditto.
	* mi/mi-getopt.c: Ditto.
	* mi/mi-getopt.h: Ditto.
	* mi/mi-interp.c: Ditto.
	* mi/mi-main.c: Ditto.
	* mi/mi-out.c: Ditto.
	* mi/mi-parse.c: Ditto.
	* mi/mi-parse.h: Ditto.
	* mi/mi-symbol-cmds.c: Ditto.

	* mi/mi-getopt.h: Move mi_opt struct up.
	* mi/mi-main.c (captured_mi_execute_command): Remove redundant
	return.
	* mi/mi-out.c (_initialize_mi_out): Remove empty initialize.
@
text
@d37 1
a37 1
extern int varobjdebug;		/* defined in varobj.c.  */
@


1.73
log
@Copyright year update in most files of the GDB Project.

gdb/ChangeLog:

        Copyright year update in most files of the GDB Project.
@
text
@a1 1

d40 2
a41 2
			      enum print_values print_values,
			      int explicit);
d49 1
d112 1
a112 5
    {
      /* mi_error_message = xstrprintf ("-var-create: Usage:
         ...."); return MI_CMD_ERROR; */
      error (_("-var-create: Usage: NAME FRAME EXPRESSION."));
    }
d115 2
a116 2
  /* Add cleanup for name. Must be free_current_contents as
     name can be reallocated */
d174 2
a175 2
  /* Add cleanup for name. Must be free_current_contents as
     name can be reallocated */
d179 1
a179 1
     starting with '-'. */
d190 1
a190 1
     which would be the variable name. */
d202 1
a202 1
     variable. */
d251 1
a251 1
  /* Get varobj handle, if a valid var obj name was specified */
d256 1
a256 1
  /* Set the format of VAR to given format */
d259 1
a259 1
  /* Report the new current format */
d262 1
a262 1
  /* Report the value in the new format */
d304 3
a306 3
  /* We don't automatically return the new value, or what varobjs got new
     values during unfreezing.  If this information is required, client
     should call -var-update explicitly.  */
a308 1

d319 1
a319 1
  /* Get varobj handle, if a valid var obj name was specified */
d324 1
a324 1
  /* Report the current format */
d337 1
a337 1
  /* Get varobj handle, if a valid var obj name was specified */
d411 1
a411 1
  /* Get varobj handle, if a valid var obj name was specified */
d477 1
a477 1
  /* Get varobj handle, if a valid var obj name was specified */
d511 1
a511 1
  /* Get varobj handle, if a valid var obj name was specified */
d556 4
d561 2
a562 1
      OP_FORMAT
a563 5
  static const struct mi_opt opts[] =
  {
    {"f", OP_FORMAT, 1},
    { 0, 0, 0 }
  };
d565 1
a565 1
  /* Parse arguments */
d577 1
a577 1
      {
d585 1
a585 1
      }
d594 1
a594 1
     /* Get varobj handle, if a valid var obj name was specified */
d623 1
a623 1
  /* Get varobj handle, if a valid var obj name was specified */
d670 3
a672 3
  if (thread_stopped)
    if (!data->only_floating || varobj_floating_p (var))
      varobj_update_one (var, data->print_values, 0 /* implicit */);
d689 1
a689 1
    name = (argv[1]);
d701 2
a702 2
  /* Check if the parameter is a "*" which means that we want
     to update all variables */
d708 1
a708 1
      data.only_floating = *name == '@@';
d711 3
a713 3
      /* varobj_update_one automatically updates all the children of VAROBJ.
	 Therefore update each VAROBJ only once by iterating only the root
	 VAROBJs.  */
d719 1
a719 1
      /* Get varobj handle, if a valid var obj name was specified */
d833 1
@


1.72
log
@* mi/mi-cmd-var.c (print_varobj): Rename `optind' and `optarg' to
`oind' and `oarg', respectively(-Wshadow).
@
text
@d3 2
a4 2
   Copyright (C) 2000, 2002, 2004, 2005, 2007, 2008, 2009, 2010, 2011
   Free Software Foundation, Inc.
@


1.71
log
@gdb/
	Code cleanup - make mi_opt const.
	* mi/mi-cmd-break.c (mi_cmd_break_insert, mi_cmd_break_watch): Make
	opts const.
	* mi/mi-cmd-disas.c (mi_cmd_disassemble): Likewise.
	* mi/mi-cmd-env.c (mi_cmd_env_path): Likewise.
	(mi_cmd_env_dir): Likewise.
	* mi/mi-cmd-target.c (mi_cmd_target_file_get): Likewise.
	(mi_cmd_target_file_put): Likewise.
	* mi/mi-cmd-target.c (mi_cmd_target_file_delete): Likewise.
	* mi/mi-cmd-var.c (mi_cmd_var_evaluate_expression): Likewise.
	* mi/mi-getopt.c (mi_getopt): Make opts and opt const.
	(mi_valid_noargs): Make opts const.
	* mi/mi-getopt.h (mi_getopt): Make opts and opt const.
	* mi/mi-main.c (mi_cmd_list_thread_groups): Make opts const.
	(mi_cmd_data_read_memory): Likewise.
	(mi_cmd_data_read_memory_bytes): Likewise.
	(mi_cmd_data_write_memory): Likewise.
@
text
@d557 2
a558 2
  int optind;
  char *optarg;
d573 1
a573 1
  optind = 0;
d577 1
a577 1
			   opts, &optind, &optarg);
d587 1
a587 1
	  format = mi_parse_format (optarg);
d593 1
a593 1
  if (optind >= argc)
d596 1
a596 1
  if (optind < argc - 1)
d600 1
a600 1
  var = varobj_get_handle (argv[optind]);
@


1.71.2.1
log
@Copyright year update in most files of the GDB Project.

gdb/ChangeLog:

        Copyright year update in most files of the GDB Project.
@
text
@d3 2
a4 2
   Copyright (C) 2000, 2002, 2004-2005, 2007-2012 Free Software
   Foundation, Inc.
@


1.70
log
@2011-08-04  Pedro Alves  <pedro@@codesourcery.com>

	* ui-out.h (uiout): Rename to ...
	(current_uiout): ... this.
	* ui-out.c (uiout): Rename to ...
	(current_uiout): ... this.
	* ada-lang.c (print_it_exception, print_one_exception)
	(print_mention_exception): Adjust.
	* breakpoint.c (watchpoint_check): Adjust.
	(print_breakpoint_location, print_one_breakpoint, breakpoint_1)
	(default_collect_info, watchpoints_info, print_one_catch_fork)
	(print_one_catch_vfork, print_one_catch_syscall)
	(print_one_catch_exec, mention, print_it_ranged_breakpoint)
	(print_one_ranged_breakpoint, print_mention_ranged_breakpoint)
	(print_it_watchpoint, print_mention_watchpoint)
	(print_it_masked_watchpoint, print_mention_masked_watchpoint)
	(print_it_exception_catchpoint, print_one_exception_catchpoint)
	(print_mention_exception_catchpoint, say_where, bkpt_print_it)
	(bkpt_print_mention, momentary_bkpt_print_it)
	(tracepoint_print_mention, update_static_tracepoint)
	(tracepoints_info, save_breakpoints): Adjust.
	* cli-out.c (field_separator): Adjust.
	* cp-abi.c (list_cp_abis, show_cp_abi_cmd): Adjust.
	* exceptions.c (catch_exceptions_with_msg, catch_errors): Adjust.
	* frame.c (get_current_frame): Adjust.
	* infcmd.c (run_command_1, print_return_value): Adjust.
	* inferior.c (inferior_command, info_inferiors_command): Adjust.
	* infrun.c (print_end_stepping_range_reason): Adjust.
	(print_signal_exited_reason, print_exited_reason): Adjust.
	(print_signal_received_reason, print_no_history_reason): Adjust.
	* interps.c (interp_set): Adjust.
	* osdata.c (info_osdata_command): Adjust.
	* progspace.c (maintenance_info_program_spaces_command): Adjust.
	* remote-fileio.c (remote_fileio_request): Adjust.
	* remote.c (show_remote_cmd): Adjust.
	* solib.c (info_sharedlibrary_command): Adjust.
	* source.c (print_source_lines_base): Adjust.
	* stack.c (print_stack_frame): Adjust.
	(do_gdb_disassembly, print_frame_info, print_frame): Adjust.
	* symfile-mem.c (add_vsyscall_page): Adjust.
	* symfile.c (load_progress, generic_load)
	(print_transfer_performance): Adjust.
	* thread.c (info_threads_command, restore_selected_frame)
	(thread_command): Adjust.
	* top.c (make_cleanup_restore_ui_file): Adjust.
	* tracepoint.c (tvariables_info_1, trace_status_mi, tfind_1)
	(print_one_static_tracepoint_marker): Adjust.
	* cli/cli-cmds.c (print_disassembly): Adjust.
	* cli/cli-decode.c (print_doc_line): Adjust.
	* cli/cli-interp.c (safe_execute_command): Adjust.
	* cli/cli-logging.c (set_logging_redirect, pop_output_files)
	(handle_redirections): Adjust.
	* cli/cli-script.c (show_user_1): Adjust.
	* cli/cli-setshow.c (do_setshow_command, cmd_show_list): Adjust.
	* mi/mi-cmd-break.c (breakpoint_notify): Adjust.
	* mi/mi-cmd-disas.c (mi_cmd_disassemble): Adjust.
	* mi/mi-cmd-env.c (mi_cmd_env_pwd, mi_cmd_env_path)
	(mi_cmd_env_dir): Adjust.
	* mi/mi-cmd-file.c (mi_cmd_file_list_exec_source_file)
	(print_partial_file_name, mi_cmd_file_list_exec_source_files): Adjust.
	* mi/mi-cmd-stack.c (mi_cmd_stack_list_frames)
	(mi_cmd_stack_info_depth, mi_cmd_stack_list_args)
	(list_args_or_locals): Adjust.
	* mi/mi-cmd-var.c (print_varobj, mi_cmd_var_create)
	(mi_cmd_var_delete, mi_cmd_var_set_format, mi_cmd_var_set_frozen)
	(mi_cmd_var_show_format, mi_cmd_var_info_num_children)
	(mi_cmd_var_list_children, mi_cmd_var_info_type)
	(mi_cmd_var_info_path_expression, mi_cmd_var_info_expression)
	(mi_cmd_var_show_attributes, mi_cmd_var_evaluate_expression)
	(mi_cmd_var_assign, mi_cmd_var_update, varobj_update_one): Adjust.
	* mi/mi-interp.c (mi_on_normal_stop): Adjust.
	* mi/mi-main.c (mi_cmd_gdb_exit, mi_cmd_thread_select)
	(mi_cmd_thread_list_ids, mi_cmd_thread_info, print_one_inferior)
	(list_available_thread_groups, mi_cmd_list_thread_groups)
	(mi_cmd_data_list_register_names)
	(mi_cmd_data_list_changed_registers)
	(mi_cmd_data_list_register_values, get_register)
	(mi_cmd_data_evaluate_expression, mi_cmd_data_read_memory)
	(mi_cmd_data_read_memory_bytes, mi_cmd_list_features)
	(mi_cmd_list_target_features, mi_cmd_add_inferior)
	(mi_execute_command, mi_load_progress): Adjust.
	* mi/mi-symbol-cmds.c (mi_cmd_symbol_list_lines): Adjust.
	* python/py-auto-load.c (print_script, info_auto_load_scripts):
	Adjust.
	* python/py-breakpoint.c (bppy_get_commands): Adjust.
	* tui/tui-interp.c (tui_command_loop): Adjust.
	* tui/tui-io.c (tui_setup_io, tui_initialize_io): Adjust.
@
text
@d564 1
a564 1
  static struct mi_opt opts[] =
@


1.69
log
@	* valops.c (find_overload_match): Call do_cleanups before early
	return.
	* top.c (execute_command): Call do_cleanups before early return.
	(command_loop): Likewise.
	* stack.c (backtrace_command): Make a null cleanup early.  Don't
	conditionally call do_cleanups.
	* python/py-value.c (TRY_CATCH): Move cleanup handling into
	TRY_CATCH.
	* python/py-breakpoint.c (gdbpy_breakpoint_has_py_cond): Rearrange
	so cleanups are always run.
	* mi/mi-cmd-var.c (mi_cmd_var_delete): Reset old_cleanups.
	* findcmd.c (parse_find_args): Call do_cleanups on early return
	path.
	* dbxread.c (elfstab_build_psymtabs): Make a null cleanup early.
	Don't conditionally call do_cleanups.
	* cli/cli-script.c (execute_user_command): Initialize 'old_chain'
	later.
@
text
@d54 1
d102 1
d172 1
d250 1
d317 1
d336 1
d403 1
d476 1
d491 1
d509 1
d528 1
d552 1
d621 1
d683 1
d739 1
@


1.68
log
@gdb
	* mi/mi-symbol-cmds.c (mi_cmd_symbol_list_lines): Fix error
	messages.
	* mi/mi-main.c (mi_cmd_thread_select): Fix error messages.
	(mi_cmd_thread_list_ids): Likewise.
	(mi_cmd_data_list_changed_registers): Likewise.
	(mi_cmd_data_list_register_values): Likewise.
	(mi_cmd_data_write_register_values): Likewise.
	(mi_cmd_data_evaluate_expression): Likewise.
	(mi_cmd_data_read_memory): Likewise.
	(mi_cmd_data_read_memory_bytes): Likewise.
	(mi_cmd_data_write_memory): Likewise.
	(mi_cmd_enable_timings): Likewise.
	* mi/mi-interp.c (mi_cmd_interpreter_exec): Fix error messages.
	* mi/mi-cmd-var.c (mi_cmd_var_create): Fix error messages.
	(mi_cmd_var_delete): Likewise.
	(mi_cmd_var_set_format): Likewise.
	(mi_cmd_var_show_format): Likewise.
	(mi_cmd_var_info_num_children): Likewise.
	(mi_cmd_var_list_children): Likewise.
	(mi_cmd_var_info_type): Likewise.
	(mi_cmd_var_info_expression): Likewise.
	(mi_cmd_var_show_attributes): Likewise.
	(mi_cmd_var_assign): Likewise.
	(mi_cmd_var_update): Likewise.
	(mi_cmd_enable_pretty_printing): Likewise.
	(mi_cmd_var_set_update_range): Likewise.
	* mi/mi-cmd-target.c (mi_cmd_target_file_get): Fix error
	messages.
	(mi_cmd_target_file_put): Likewise.
	(mi_cmd_target_file_delete): Likewise.
	* mi/mi-cmd-stack.c (mi_cmd_stack_list_frames): Fix error
	messages.
	(mi_cmd_stack_info_depth): Likewise.
	(mi_cmd_stack_list_locals): Likewise.
	(mi_cmd_stack_list_args): Likewise.
	(mi_cmd_stack_select_frame): Likewise.
	(mi_cmd_stack_select_frame): Likewise.
	(mi_cmd_stack_info_frame): Likewise.
	* mi/mi-cmd-file.c (mi_cmd_file_list_exec_source_file): Fix error
	messages.
	(mi_cmd_file_list_exec_source_files): Likewise.
	* mi/mi-cmd-env.c (mi_cmd_env_pwd): Fix error messages.
	(mi_cmd_env_cd): Likewise.
	(mi_cmd_env_path): Likewise.
	(mi_cmd_env_dir): Likewise.
	(mi_cmd_inferior_tty_show): Likewise.
	* mi/mi-cmd-disas.c (mi_cmd_disassemble): Fix error messages.
	* mi/mi-cmd-break.c (mi_cmd_break_insert): Fix error messages.
	(mi_cmd_break_watch): Likewise.
gdb/testsuite
	* gdb.mi/gdb2549.exp: Update for error message changes.
	* gdb.mi/mi-cli.exp: Likewise.
	* gdb.mi/mi-disassemble.exp: Likewise.
	* gdb.mi/mi-pthreads.exp: Likewise.
	* gdb.mi/mi-regs.exp: Likewise.
	* gdb.mi/mi-stack.exp: Likewise.
	* gdb.mi/mi-var-block.exp: Likewise.
	* gdb.mi/mi-var-cmd.exp: Likewise.
	* gdb.mi/mi2-cli.exp: Likewise.
	* gdb.mi/mi2-disassemble.exp: Likewise.
	* gdb.mi/mi2-pthreads.exp: Likewise.
	* gdb.mi/mi2-regs.exp: Likewise.
	* gdb.mi/mi2-stack.exp: Likewise.
	* gdb.mi/mi2-var-block.exp: Likewise.
	* gdb.mi/mi2-var-cmd.exp: Likewise.
@
text
@d199 1
a199 1
      make_cleanup (free_current_contents, &name);
@


1.67
log
@2011-01-11  Michael Snyder  <msnyder@@vmware.com>

	* arm-tdep.c: Internationalization.
	* c-lang.c: Ditto.
	* charset.c: Ditto.
	* fork-child.c: Ditto.
	* nto-procfs.c: Ditto.
	* ppc-sysv-tdep.c: Ditto.
	* procfs.c: Ditto.
	* remote-mips.c: Ditto.
	* remote.c: Ditto.
	* rs6000-nat.c: Ditto.
	* rs6000-tdep.c: Ditto.
	* target.c: Ditto.
	* valops.c: Ditto.
	* value.c: Ditto.
	* xml-support.c: Ditto.
	* mi/mi-cmd-break.c: Ditto.
	* mi/mi-cmd-var.c: Ditto.
	* mi/mi-interp.c: Ditto.
	* mi/mi-main.c: Ditto.
@
text
@d111 1
a111 1
      /* mi_error_message = xstrprintf ("mi_cmd_var_create: Usage:
d113 1
a113 1
      error (_("mi_cmd_var_create: Usage: NAME FRAME EXPRESSION."));
d133 1
a133 1
    error (_("mi_cmd_var_create: name of object must begin with a letter"));
d153 1
a153 1
    error (_("mi_cmd_var_create: unable to create variable object"));
d172 1
a172 1
    error (_("mi_cmd_var_delete: Usage: [-c] EXPRESSION."));
d184 1
a184 1
	error (_("mi_cmd_var_delete: Missing required "
d187 1
a187 1
	error (_("mi_cmd_var_delete: Illegal variable object name"));
d195 1
a195 1
	error (_("mi_cmd_var_delete: Invalid option."));
d249 1
a249 1
    error (_("mi_cmd_var_set_format: Usage: NAME FORMAT."));
d317 1
a317 1
    error (_("mi_cmd_var_show_format: Usage: NAME."));
d334 1
a334 1
    error (_("mi_cmd_var_info_num_children: Usage: NAME."));
d406 1
a406 1
    error (_("mi_cmd_var_list_children: Usage: "
d472 1
a472 1
    error (_("mi_cmd_var_info_type: Usage: NAME."));
d504 1
a504 1
    error (_("mi_cmd_var_info_expression: Usage: NAME."));
d523 1
a523 1
    error (_("mi_cmd_var_show_attributes: Usage: NAME."));
d613 1
a613 1
    error (_("mi_cmd_var_assign: Usage: NAME EXPRESSION."));
d619 1
a619 1
    error (_("mi_cmd_var_assign: Variable object is not editable"));
d624 1
a624 1
    error (_("mi_cmd_var_assign: Could not assign "
d675 1
a675 1
    error (_("mi_cmd_var_update: Usage: [PRINT_VALUES] NAME."));
d822 1
a822 1
    error (_("mi_cmd_enable_pretty_printing: no arguments allowed"));
d833 1
a833 1
    error (_("mi_cmd_var_set_update_range: Usage: VAROBJ FROM TO"));
@


1.66
log
@2011-01-05  Michael Snyder  <msnyder@@vmware.com>

	* cli/cli-cmds.c: Shorten lines of >= 80 columns.
	* cli/cli-decode.c: Ditto.
	* cli/cli-dump.c: Ditto.
	* cli/cli-logging.c: Ditto.
	* cli/cli-script.c: Ditto.
	* cli/cli-setshow.c: Ditto.
	* common/signals.c: Ditto.
	* mi/mi-cmd-break.c: Ditto.
	* mi/mi-cmd-disas.c: Ditto.
	* mi/mi-cmd-stack.c: Ditto.
	* mi/mi-cmd-var.c: Ditto.
	* mi/mi-cmds.c: Ditto.
	* mi/mi-common.h: Ditto.
	* mi/mi-console.c: Ditto.
	* mi/mi-interp.c: Ditto.
	* mi/mi-main.c: Ditto.
	* osf-share/cma_attr.c: Ditto.
	* osf-share/cma_deb_core.h: Ditto.
	* osf-share/cma_debug_client.h: Ditto.
	* osf-share/cma_handle.h: Ditto.
	* osf-share/cma_mutex.h: Ditto.
	* osf-share/cma_stack_int.h: Ditto.
	* osf-share/cma_tcb_defs.h: Ditto.
	* python/py-auto-load.c: Ditto.
	* python/py-breakpoint.c: Ditto.
	* python/py-cmd.c: Ditto.
	* python/py-frame.c: Ditto.
	* python/py-objfile.c: Ditto.
	* python/py-param.c: Ditto.
	* python/py-progspace.c: Ditto.
	* python/py-symbol.c: Ditto.
	* python/py-value.c: Ditto.
	* python/python-internal.h: Ditto.
	* python/python.c: Ditto.
	* tui/tui-data.c: Ditto.
	* tui/tui-disasm.c: Ditto.
	* tui/tui-hooks.c: Ditto.
	* tui/tui-io.c: Ditto.
	* tui/tui-layout.c: Ditto.
	* tui/tui-regs.c: Ditto.
	* tui/tui-source.c: Ditto.
	* tui/tui-stack.c: Ditto.
	* tui/tui-win.c: Ditto.
	* tui/tui-windata.c: Ditto.
	* tui/tui-winsource.c: Ditto.
@
text
@d274 1
a274 1
    error ("Usage: NAME VISUALIZER_FUNCTION.");
d279 1
a279 1
    error ("Variable object not found");
@


1.65
log
@run copyright.sh for 2011.
@
text
@d44 2
a45 1
static int mi_print_value_p (struct varobj *var, enum print_values print_values);
d184 2
a185 1
	error (_("mi_cmd_var_delete: Missing required argument after '-c': variable object name"));
d237 2
a238 1
  error (_("Must specify the format as: \"natural\", \"binary\", \"decimal\", \"hexadecimal\", or \"octal\""));
d406 2
a407 1
    error (_("mi_cmd_var_list_children: Usage: [PRINT_VALUES] NAME [FROM TO]"));
d624 2
a625 1
    error (_("mi_cmd_var_assign: Could not assign expression to variable object"));
d801 2
a802 1
	      cleanup_child = make_cleanup_ui_out_tuple_begin_end (uiout, NULL);
@


1.64
log
@2010-05-17  Michael Snyder  <msnyder@@vmware.com>

	* mi/mi-cmd-break.c: White space.
	* mi/mi-cmd-env.c: White space.
	* mi/mi-cmds.c: White space.
	* mi/mi-cmd-stack.c: White space.
	* mi/mi-cmd-var.c: White space.
	* mi/mi-console.c: White space.
	* mi/mi-getopt.c: White space.
	* mi/mi-interp.c: White space.
	* mi/mi-main.c: White space.
	* mi/mi-out.c: White space.
	* mi/mi-parse.c: White space.
@
text
@d3 1
a3 1
   Copyright (C) 2000, 2002, 2004, 2005, 2007, 2008, 2009, 2010
@


1.63
log
@2010-05-05  Michael Snyder  <msnyder@@vmware.com>

	* mi/mi-out.c (mi_table_begin): Delete unused variable.
	* mi/mi-cmd-var.c (print_varobj): Delete unused variable.
	(mi_cmd_var_list_children): Delete unused variable.
	(varobj_update_one): Delete unused variable.
	* mi/mi-cmd-break.c (mi_cmd_break_insert): Delete unused variables.
	* mi/mi-cmd-stack.c (mi_cmd_stack_list_locals):
	Delete unused variable.
	(mi_cmd_stack_list_variables): Delete unused variable.
	(list_args_or_locals): Delete unused variable.
	* mi/mi-cmd-file.c (mi_cmd_file_list_exec_source_file):
	Delete unused variables.
	(mi_cmd_file_list_exec_source_files): Delete unused variable.
	* mi/mi-cmd-target.c (mi_cmd_target_file_delete):
	Delete unused variable.
	* mi/mi-interp.c (mi_interpreter_exec): Delete unused variable.
	(mi_cmd_interpreter_exec): Delete unused variable.
	(mi_on_normal_stop): Delete unused variable.
	* mi/mi-main.c (run_one_inferior): Delete unused variable.
	(print_one_inferior): Delete unused variables.
	(mi_execute_command): Delete unused variable.
	(mi_cmd_execute): Delete unused variable.
	(timestamp): Delete unused variable.
@
text
@d65 1
d439 1
d451 1
d560 3
a562 1
      int opt = mi_getopt ("-var-evaluate-expression", argc, argv, opts, &optind, &optarg);
d589 1
d596 1
d742 1
d795 1
@


1.62
log
@Update copyright year in most headers.

Automatic update by copyright.sh.
@
text
@a52 1
  struct type *gdb_type;
a395 1
  int numchild;
a712 1
  struct varobj **cc;
@


1.61
log
@gdb
	* varobj.h (varobj_update_result_t) <new>: New field.
	(varobj_get_child_range, varobj_set_child_range): Declare.
	(varobj_list_children): Update.
	(varobj_enable_pretty_printing, varobj_has_more)
	(varobj_pretty_printed_p): Declare.
	* varobj.c (pretty_printing): New global.
	(varobj_enable_pretty_printing): New function.
	(struct varobj_root) <from, to, constructor, child_iter,
	saved_item>: New fields.
	(varobj_create): Don't call install_default_visualizer.
	(instantiate_pretty_printer): Don't use value_copy.
	(varobj_has_more): New function.
	(restrict_range): New function.
	(install_dynamic_child): Likewise.
	(dynamic_varobj_has_child_method): Likewise.
	(update_dynamic_varobj_children): Remove 'new_and_unchanged'
	argument; add 'new', 'unchanged', 'from', and 'to' arguments.
	Rewrite.
	(varobj_get_num_children): Call update_dynamic_varobj_children.
	(varobj_list_children): Add 'from' and 'to' arguments.  Ignore
	result of update_dynamic_varobj_children.  Don't call
	install_default_visualizer.  Restrict result range.
	(varobj_add_child): Don't call install_default_visualizer.
	(varobj_pretty_printed_p): New function.
	(install_visualizer): Rewrite.  Move earlier in file.
	(install_default_visualizer): Likewise.
	(construct_visualizer): New function.
	(install_new_value_visualizer): Likewise.
	(install_new_value): Don't call release_value.  Special case
	pretty-printed objects.  Use value_incref.  Rearrange "changed"
	logic.
	(varobj_get_child_range): New function.
	(varobj_set_child_range): Likewise.
	(varobj_set_visualizer): Rewrite.
	(varobj_update): Rewrite pretty-printing logic.
	(new_variable): Initialize new fields.
	(free_variable): Destroy new fields.
	(value_of_root): Copy 'from' and 'to'.
	(my_value_of_variable): Handle pretty-printers.
	(value_get_print_value): Rework pretty-printing logic.
	(cplus_describe_child): Don't use release_value.
	* mi/mi-cmds.h (mi_cmd_enable_pretty_printing)
	(mi_cmd_var_set_update_range): Declare.
	* mi/mi-cmds.c (mi_cmds): Add enable-pretty-printing and
	var-set-update-range.
	* mi/mi-cmd-var.c (print_varobj): Update.  Emit "dynamic"
	attribute.
	(mi_cmd_var_create): Emit "has_more" attribute.
	(mi_cmd_var_set_format): Plug memory leak.
	(mi_print_value_p): Replace 'type' argument with 'var'.  Handle
	pretty-printed varobjs.
	(mi_cmd_var_list_children): Accept 'from' and 'to' arguments.
	Emit "has_more" attribute.
	(mi_cmd_var_evaluate_expression): Plug memory leak.
	(mi_cmd_var_assign): Likewise.
	(varobj_update_one): Likewise.  Emit "dynamic", "has_more", and
	"new_children" attributes.
	(mi_cmd_enable_pretty_printing): New function.
	(mi_cmd_var_set_update_range): Likewise.
gdb/doc
	* gdb.texinfo (GDB/MI Variable Objects): Document
	-enable-pretty-printing, -var-set-update-range, dynamic varobjs.
	Expand -var-update documentation.
gdb/testsuite
	* lib/mi-support.exp (mi_create_varobj): Update.
	(mi_create_floating_varobj): Likewise.
	(mi_create_dynamic_varobj): New proc.
	(mi_varobj_update): Update.
	(mi_varobj_update_with_type_change): Likewise.
	(mi_varobj_update_kv_helper): New proc.
	(mi_varobj_update_dynamic_helper): Rewrite.
	(mi_varobj_update_dynamic): New proc.
	(mi_list_varobj_children): Update.
	(mi_list_varobj_children_range): Add 'from' and 'to' arguments.
	* gdb.python/python-prettyprint.py (pp_outer): New class.
	(pp_nullstr): Likewise.
	(lookup_function): Register new printers.
	* gdb.python/python-prettyprint.c (struct substruct): New type.
	(struct outerstruct): Likewise.
	(substruct_test): New function.
	(struct nullstr): New type.
	(string_1, string_2): New globals.
	(main): Add new tests.
	* gdb.python/python-mi.exp: Added regression tests.
	* gdb.mi/mi2-var-display.exp: Update.
	* gdb.mi/mi2-var-cmd.exp: Update.
	* gdb.mi/mi2-var-child.exp: Update.
	* gdb.mi/mi2-var-block.exp: Update.
	* gdb.mi/mi-var-invalidate.exp: Update.
	* gdb.mi/mi-var-display.exp: Update.
	* gdb.mi/mi-var-cmd.exp: Update.
	* gdb.mi/mi-var-child.exp: Update.
	* gdb.mi/mi-var-block.exp: Update.
	* gdb.mi/mi-break.exp: Update.
	* gdb.mi/gdb701.exp: Update.
@
text
@d3 1
a3 1
   Copyright (C) 2000, 2002, 2004, 2005, 2007, 2008, 2009
@


1.60
log
@gdb/
	Replace public function varobj_list by all_root_varobjs iterator.
	* mi/mi-cmd-var.c (struct mi_cmd_var_update, mi_cmd_var_update_iter):
	New.
	(mi_cmd_var_update): Replace the varobj_list call by all_root_varobjs.
	Remove the variables rootlist, cr.  New variable data.
	* varobj.c (rootcount, varobj_list): Remove.
	(install_variable, uninstall_variable): Remove the rootcount updates.
	(all_root_varobjs): New function.
	(varobj_invalidate): Use the all_root_varobjs call.  Move the code to...
	(varobj_invalidate_iter): ... a new function.
	* varobj.h (varobj_list): Remove the prototype.
	(all_root_varobjs): New prototype.
@
text
@d44 1
a44 1
static int mi_print_value_p (struct type *type, enum print_values print_values);
d56 1
d63 6
a68 2
  if (mi_print_value_p (varobj_get_gdb_type (var), print_values))
    ui_out_field_string (uiout, "value", varobj_get_value (var));
d83 10
d156 2
d243 1
d260 3
a262 1
  ui_out_field_string (uiout, "value", varobj_get_value (var));
d360 1
a360 1
   a value of type TYPE.  */
d363 1
a363 1
mi_print_value_p (struct type *type, enum print_values print_values)
d365 1
d373 4
a396 1
  struct cleanup *cleanup_children;
d400 1
d403 2
a404 2
  if (argc != 1 && argc != 2)
    error (_("mi_cmd_var_list_children: Usage: [PRINT_VALUES] NAME"));
d407 1
a407 1
  if (argc == 1)
d412 14
a425 3
  children = varobj_list_children (var);
  ui_out_field_int (uiout, "numchild", VEC_length (varobj_p, children));
  if (argc == 2)
d437 1
a437 8
  if (VEC_length (varobj_p, children) == 0)
    return;

  if (mi_version (uiout) == 1)
    cleanup_children = make_cleanup_ui_out_tuple_begin_end (uiout, "children");
  else
    cleanup_children = make_cleanup_ui_out_list_begin_end (uiout, "children");
  for (ix = 0; VEC_iterate (varobj_p, children, ix, child); ++ix)
d439 17
a455 4
      struct cleanup *cleanup_child;
      cleanup_child = make_cleanup_ui_out_tuple_begin_end (uiout, "child");
      print_varobj (child, print_values, 1 /* print expression */);
      do_cleanups (cleanup_child);
d457 2
a458 1
  do_cleanups (cleanup_children);
d584 5
a588 1
    ui_out_field_string (uiout, "value", varobj_get_formatted_value (var, format));
d590 5
a594 1
    ui_out_field_string (uiout, "value", varobj_get_value (var));
d601 1
a601 1
  char *expression;
d617 3
a619 1
  ui_out_field_string (uiout, "value", varobj_get_value (var));
d726 1
d735 6
a740 2
	  if (mi_print_value_p (varobj_get_gdb_type (r->varobj), print_values))
	    ui_out_field_string (uiout, "value", varobj_get_value (r->varobj));
d760 5
a764 5
	{
          ui_out_field_string (uiout, "new_type", varobj_get_type (r->varobj));
          ui_out_field_int (uiout, "new_num_children", 
			    varobj_get_num_children (r->varobj));
	}
d773 8
a780 1
      if (r->children_changed)
d782 3
a784 4
	  int ix;
	  struct varobj *child;
	  struct cleanup *cleanup =
	    make_cleanup_ui_out_list_begin_end (uiout, "children");
d786 2
a787 3
	  VEC (varobj_p)* children = varobj_list_children (r->varobj);

	  for (ix = 0; VEC_iterate (varobj_p, children, ix, child); ++ix)
d791 1
a791 1
	      print_varobj (child, print_values, 1 /* print expression */);
d796 2
d799 1
a799 1
  
d805 24
@


1.59
log
@gdb/
	Tidy up the code.
	* mi/mi-cmd-var.c (mi_cmd_var_update): Remove variable nv.  Move
	variables var, rootlist and cr to their local sub-block.  Move the
	make_cleanup_ui_out_tuple_begin_end, make_cleanup_ui_out_list_begin_end
	and do_cleanups calls to the common base block.  Remove the zero NV
	check.
@
text
@d569 35
d634 1
a634 4
      struct varobj **rootlist, **cr;

      varobj_list (&rootlist);
      make_cleanup (xfree, rootlist);
d636 2
a637 4
      for (cr = rootlist; *cr != NULL; cr++)
	{
	  int thread_id = varobj_get_thread_id (*cr);
	  int thread_stopped = 0;
d639 3
a641 10
	  if (thread_id == -1 && is_stopped (inferior_ptid))
	    thread_stopped = 1;
	  else
	    {
	      struct thread_info *tp = find_thread_id (thread_id);
	      if (tp)
		thread_stopped = is_stopped (tp->ptid);
	      else
		thread_stopped = 1;
	    }
d643 1
a643 4
	  if (thread_stopped)
	    if (*name == '*' || varobj_floating_p (*cr))
	      varobj_update_one (*cr, print_values, 0 /* implicit */);
	}
@


1.58
log
@gdb/
	* mi/mi-cmd-var.c (mi_cmd_var_update): Replace a while loop by for loop.
	* varobj.c (varobj_invalidate): Replace a while loop by for loop.
@
text
@a571 3
  struct varobj *var;
  struct varobj **rootlist;
  struct varobj **cr;
a573 1
  int nv;
d589 5
d599 5
a603 11
      nv = varobj_list (&rootlist);
      cleanup = make_cleanup (xfree, rootlist);
      if (mi_version (uiout) <= 1)
        make_cleanup_ui_out_tuple_begin_end (uiout, "changelist");
      else
        make_cleanup_ui_out_list_begin_end (uiout, "changelist");
      if (nv <= 0)
	{
	  do_cleanups (cleanup);
	  return;
	}
d608 1
d612 1
a612 1
	    {	      
d619 1
a623 1
      do_cleanups (cleanup);
d628 1
a628 1
      var = varobj_get_handle (name);
a629 4
      if (mi_version (uiout) <= 1)
        cleanup = make_cleanup_ui_out_tuple_begin_end (uiout, "changelist");
      else
        cleanup = make_cleanup_ui_out_list_begin_end (uiout, "changelist");
a630 1
      do_cleanups (cleanup);
d632 2
@


1.57
log
@	* defs.h (strlen_paddr, paddr, paddr_nz): Remove.
	(paddress): Add GDBARCH parameter.
	* utils.c (strlen_paddr, paddr, paddr_nz): Remove.
	(paddress): Add GDBARCH parameter, use it instead of current_gdbarch.
	* ui-out.h (ui_out_field_core_addr): Add GDBARCH parameter.
	* ui-out.c (ui_out_field_core_addr): Add GDBARCH parameter,
	use it instead of current_gdbarch.

	Update calls to ui_out_field_core_addr to pass architecture:
	* ada-lang.c (print_one_exception): Update.
	* breakpoint.c (print_one_breakpoint_location,
	print_one_exception_catchpoint): Update.
	* disasm.c (dump_insns): Update.
	* darwin-nat-info.c (darwin_debug_regions_recurse): Update.
	* mi/mi-main.c (mi_cmd_data_read_memory): Update.
	* mi/mi-symbol-cmds.c: Include "objfiles.h".
	(mi_cmd_symbol_list_lines): Update.
	* stack.c (print_frame_info, print_frame): Update.

	Update callers of paddress to pass architecture:
	* ada-tasks.c (info_task): Update.
	* ada-valprint.c (ada_val_print_1): Update.
	* annotate.c (annotate_source, annotate_frame_begin): Update.
	* breakpoint.c (insert_bp_location, describe_other_breakpoints,
	mention): Update.
	* cli/cli-cmds.c (edit_command, list_command, print_disassembly):
	Update.
	* corefile.c (memory_error): Update.
	* c-valprint.c (print_function_pointer_address, c_val_print): Update.
	* disasm.c (dis_asm_print_address): Update.
	* exec.c (print_section_info): Update.
	* f-valprint.c (f_val_print): Update.
	* infcmd.c: Include "arch-utils.h".
	(jump_command, program_info): Update.
	* linux-fork.c: Include "arch-utils.h".
	(info_forks_command): Update.
	* m2-valprint.c (print_function_pointer_address,
	print_unpacked_pointer, print_variable_at_address,
	m2_val_print): Update.
	* m32r-rom.c (m32r_load_section, m32r_load, m32r_upload_command):
	Update.
	* printcmd.c (print_address, print_address_demangle, address_info):
	Update.
	* p-valprint.c (pascal_val_print): Update.
	* source.c: Include "arch-utils.h".
	(line_info): Update.
	* stack.c (frame_info, print_block_frame_labels): Update.
	* symfile.c (add_symbol_file_command, list_overlays_command): Update.
	* symmisc.c (dump_msymbols, dump_psymtab, dump_symtab_1,
	print_symbol, print_partial_symbols, maintenance_info_psymtabs,
	maintenance_check_symtabs): Update.
	* symtab.c (find_pc_sect_symtab): Update.
	* target.c (deprecated_debug_xfer_memory): Update.
	* tracepoint.c (scope_info): Update.
	* tui/tui-stack.c (tui_make_status_line): Update.
	* valprint.c (val_print_string): Update.

	Update callers of paddr_nz to use paddress instead (keeping
	user-visible output identical):
	* alpha-tdep.c (alpha_heuristic_proc_start): Update.
	* amd64-tdep.c (fixup_riprel, amd64_displaced_step_copy_insn,
	amd64_displaced_step_fixup): Update.
	* arch-utils.c (simple_displaced_step_copy_insn): Update.
	* auxv.c (fprint_target_auxv): Update.
	* breakpoint.c (insert_single_step_breakpoint): Update.
	* buildsym.c (finish_block): Update.
	* cli/cli-dump.c (restore_section_callback): Update.
	* fbsd-nat.c (fbsd_find_memory_regions): Update.
	* frame.c (frame_unwind_register_value): Update.
	* gcore.c (gcore_create_callback): Update.
	* hppa-tdep.c (hppa_frame_cache, hppa_skip_trampoline_code): Update.
	* i386-tdep.c (i386_displaced_step_fixup, i386_record_modrm,
	i386_record_lea_modrm_addr, i386_record_lea_modrm,
	i386_process_record): Update.
	* ia64-tdep.c (ia64_frame_this_id, ia64_sigtramp_frame_this_id,
	ia64_libunwind_frame_this_id, ia64_libunwind_sigtramp_frame_this_id,
	ia64_dummy_id, ia64_access_reg, ia64_access_rse_reg): Update.
	* infrun.c (displaced_step_prepare, displaced_step_fixup,
	handle_inferior_event, insert_step_resume_breakpoint_at_sal,
	insert_longjmp_resume_breakpoint): Update.
	* linux-nat.c (linux_nat_find_memory_regions): Update.
	* linux-record.c (record_linux_system_call): Update.
	* mips-tdep.c (heuristic_proc_start, mips_eabi_push_dummy_call,
	mips_n32n64_push_dummy_call, mips_o32_push_dummy_call,
	mips_o64_push_dummy_call): Update.
	* monitor.c (monitor_error, monitor_remove_breakpoint): Update.
	* record.c (record_arch_list_add_mem, record_wait,
	record_xfer_partial): Update.
	* remote-mips.c (mips_fetch_word, mips_check_lsi_error,
	mips_common_breakpoint): Update.
	* remote-sim.c (gdbsim_xfer_inferior_memory): Update.
	* rs6000-tdep.c (ppc_displaced_step_fixup): Update.
	* solib-som.c (som_current_sos): Update.
	* symfile.c (load_progress, generic_load): Update.
	* symfile-mem.c (add_vsyscall_page): Update.
	* valops.c (value_fetch_lazy): Update.
	* windows-tdep.c (windows_xfer_shared_library): Update.

	Update callers of paddr_nz to use paddress instead (changing
	user-visible output to make it more correct):
	* dwarf2loc.c (locexpr_describe_location): Update.
	* ia64-tdep.c (ia64_memory_insert_breakpoint,
	ia64_memory_remove_breakpoint): Update.
	* jv-valprint.c (java_value_print): Update.
	* m32c-tdep.c (m32c_m16c_address_to_pointer): Update.
	* monitor.c (monitor_read_memory): Update.

	Update callers of paddr to use paddress instead (changing
	user-visible output to make it more correct):
	* arm-tdep.c (arm_push_dummy_call): Update.
	* breakpoint.c (insert_bp_location, create_thread_event_breakpoint,
	create_breakpoint): Update.
	* darwin-nat-info.c (darwin_debug_regions): Update.
	* dcache.c (dcache_info): Update.
	* dsrec.c (load_srec, make_srec): Update.
	* dwarf2-frame.c (dwarf2_restore_rule, execute_cfa_program,
	dwarf2_frame_cache): Update.
	* gcore.c (gcore_copy_callback): Update.
	* gnu-nat.c (gnu_xfer_memory): Update.
	* mips-linux-nat.c (mips_show_dr): Update.
	* monitor.c (monitor_write_memory, monitor_insert_breakpoint,
	monitor_remove_breakpoint): Update.
	* remote.c (compare_sections_command): Update.
	* remote-m32r-sdi.c (m32r_xfer_memory, m32r_insert_breakpoint,
	m32r_remove_breakpoint, m32r_insert_watchpoint,
	m32r_remove_watchpoint): Update.
	* sol-thread.c (info_cb): Update.
	* symfile.c (load_progress): Update.

	Update callers of paddress or paddr_nz to use hex_string instead
	(changes output of internal/error/debug messages only):
	* dwarf2read.c (dump_die_shallow): Update.
	* frame.c (fprint_field, fprint_frame, frame_pc_unwind,
	get_frame_func, create_new_frame): Update.
	* hppa-tdep.c (find_unwind_entry, unwind_command): Update.
	* ia64-tdep.c (get_kernel_table, ia64_find_proc_info_x,
	ia64_get_dyn_info_list): Update.
	* maint.c (maintenance_translate_address): Update.
	* mi/mi-cmd-var.c (mi_cmd_var_create): Update.
	* target.c (target_flash_erase): Update.

	Update callers of paddr/paddr_nz to use phex/phex_nz instead,
	using an appropriate address size.  Remove use of strlen_paddr.
	* exec.c (exec_files_info): Update.
	* i386-nat.c (i386_show_dr): Update.
	* remote.c (remote_flash_erase): Update.
	* m32r-rom.c (m32r_load_section): Update.
	* monitor.c (monitor_vsprintf, monitor_store_register): Update.
	* remote.c (remote_check_symbols, remote_search_memory): Update.
	* remote-mips.c (mips_request, mips_common_breakpoint): Update.
	* scm-valprint.c (scm_ipruk, scm_scmval_print): Update.
	* sh64-tdep.c (sh64_show_media_regs, sh64_show_compact_regs): Update.
	* sh-tdep.c (sh_generic_show_regs, sh3_show_regs, sh2e_show_regs,
	sh2a_show_regs, sh2a_nofpu_show_regs, sh3e_show_regs,
	sh3_dsp_show_regs, sh4_show_regs, sh4_nofpu_show_regs,
	sh_dsp_show_regs): Update.
	* xcoffsolib.c (sharedlibrary_command): Update.


	* maint.c (maint_print_section_info): Add ADDR_SIZE parameter.
	Use hex_string_custom instead of paddr.
	(print_bfd_section_info): Pass address size.
	(print_objfile_section_info): Likewise.

	* annotate.h (annotate_source): Add GDBARCH parameter.
	(annotate_frame_begin): Likewise.
	* annotate.c (annotate_source): Add GDBARCH parameter.
	(annotate_frame_begin): Likewise.
	* source.c (identify_source_line): Update call to annotate_source.
	* stack.c (print_frame_info, print_frame): Update call to
	annotate_frame_begin.

	* breakpoint.c (describe_other_breakpoints): Add GDBARCH parameter.
	(create_breakpoint, create_ada_exception_breakpoint): Update call.

	* stack.c (print_block_frame_labels): Add GDBARCH parameter.
	(print_frame_label_vars): Update call.

	* symmisc.c (print_partial_symbols): Add GDBARCH parameter.
	(dump_psymtab): Update call to print_partial_symbols.
	(struct print_symbol_args): Add GDBARCH member.
	(dump_symtab_1): Set print_symbol_args architecture member.
	(print_symbol): Use it.

	* windows-tdep.h (windows_xfer_shared_library): Add GDBARCH
	parameter.
	* windows-tdep.c (windows_xfer_shared_library): Likewise.
	* i386-cygwin-tdep.c (struct cpms_data): Add GDBARCH member.
	(core_process_module_section): Pass architecture from cpms_data to
	windows_xfer_shared_library.
	(windows_core_xfer_shared_libraries): Initialize cmps_data
	architecture member.
	* windows-nat.c (windows_xfer_shared_libraries): Pass architecture
	to windows_xfer_shared_library.

	* defs.h (print_address): Add GDBARCH parameter.
	* printcmd.c (print_address): Add GDBARCH parameter.
	(print_scalar_formatted, do_examine): Update call.
	* findcmd.c (find_command): Update call.
	* tracepoint.c: Include "arch-utils.h".
	(trace_find_line_command): Update call.
	* tui/tui-disasm.c (tui_disassemble): Update call.

	* value.h (print_address_demangle): Add GDBARCH parameter.
	* printcmd.c (print_address_demangle): Add GDBARCH parameter.
	* c-valprint.c (print_function_pointer_address, c_val_print):
	Update call.
	* f-valprint.c (f_val_print): Update call.
	* gnu-v3-abi.c (gnuv3_print_method_ptr): Update call.
	* jv-valprint.c (java_val_print): Update call.
	* m2-valprint.c (print_function_pointer_address, m2_val_print):
	Update call.
	* p-valprint.c (pascal_val_print): Update call.

	* disasm.c (gdb_disassemble_info): Install architecture into
	di.application_data field.

testsuite/ChangeLog:

	* gdb.threads/tls-shared.exp: Update to locexpr_describe_location
	change to prefix TLS offset in hex with 0x.

doc/ChangeLog:

	* gdbint.texinfo (Item Output Functions): Update signature
	for ui_out_field_core_addr.
@
text
@d609 1
a609 2
      cr = rootlist;
      while (*cr != NULL)
a625 1
	  cr++;
@


1.56
log
@gdb

2009-05-27  Vladimir Prus  <vladimir@@codesourcery.com>
	    Tom Tromey  <tromey@@redhat.com>
	    Thiago Jung Bauermann  <bauerman@@br.ibm.com>

	* mi/mi-main.c (mi_cmd_list_features): List "python" feature.
	* varobj.h (varobj_set_visualizer): Declare.
	(varobj_get_display_hint): Likewise.
	(varobj_update_result_t) <children_changed, value_installed>: New
	fields.
	* mi/mi-cmds.c (mi_cmds): Add var-set-visualizer.
	* mi/mi-cmds.h (mi_cmd_var_set_visualizer,
	mi_cmd_var_set_child_range): Declare.
	* mi/mi-cmd-var.c (mi_cmd_var_set_visualizer): New function.
	(mi_cmd_var_list_children): Emit display hint.
	(varobj_update_one): Emit display hint.  Handle dynamic children.
	* python/python.c (GdbMethods): Add "default_visualizer".
	* python/python-internal.h (apply_varobj_pretty_printer,
	gdbpy_get_varobj_pretty_printer, gdbpy_get_display_hint):
	Declare.
	(gdbpy_default_visualizer): Likewise.
	* varobj.c: Include python.h, python-internal.h.
	(PyObject): New typedef.
	(struct varobj) <children_requested, pretty_printer>: New fields.
	(varobj_create): Call install_default_visualizer.
	(instantiate_pretty_printer): New function.
	(varobj_set_display_format): Update.
	(varobj_get_display_hint): New function.
	(update_dynamic_varobj_children): New function.
	(varobj_get_num_children): Handle dynamic children.
	(varobj_list_children): Likewise.
	(install_new_value): Likewise.
	(varobj_add_child): New function.
	(install_visualizer): Likewise.
	(install_default_visualizer): Likewise.
	(varobj_set_visualizer): Likewise.
	(varobj_update): Handle dynamic children.
	(create_child): Use create_child_with_value.
	(create_child_with_value): New function.
	(value_get_print_value): Call pretty printer.  Add value_formatter
	argument.
	(c_value_of_variable): Update.
	(varobj_invalidate): Always free all_rootvarobj.
	* python/python-prettyprint.c (apply_varobj_pretty_printer): New
	function.
	(gdbpy_get_varobj_pretty_printer): Likewise.
	(gdbpy_default_visualizer): Likewise.

gdb/doc

2009-05-27  Tom Tromey  <tromey@@redhat.com>

	* gdb.texinfo (GDB/MI Miscellaneous Commands): Document "python"
	feature.
	(GDB/MI Variable Objects): Document -var-set-visualizer.

gdb/testsuite

2009-05-27  Tom Tromey  <tromey@@redhat.com>
	    Thiago Jung Bauermann  <bauerman@@br.ibm.com>

	* lib/mi-support.exp (mi_varobj_update_dynamic): New proc.
	(mi_child_regexp): Likewise.
	(mi_list_varobj_children_range): Likewise.
	(mi_get_features): Likewise.
	(mi_list_varobj_children): Rewrite.
	* gdb.python/python-mi.exp: New file.
@
text
@d131 2
a132 2
		    "Name=\"%s\", Frame=\"%s\" (0x%s), Expression=\"%s\"\n",
			name, frame, paddr (frameaddr), expr);
@


1.55
log
@gdb/
	Remove already unreachable code.
	* varobj.c (varobj_get_handle): Fix comment when error is called.
	All callers updated.
@
text
@d246 16
d376 1
d394 7
d661 2
d696 27
@


1.54
log
@        Updated copyright notices for most files.
@
text
@a187 3
  if (var == NULL)
    error (_("mi_cmd_var_delete: Variable object not found."));

a232 3
  if (var == NULL)
    error (_("mi_cmd_var_set_format: Variable object not found"));

a254 2
  if (var == NULL)
    error (_("Variable object not found"));
a281 2
  if (var == NULL)
    error (_("mi_cmd_var_show_format: Variable object not found"));
a298 2
  if (var == NULL)
    error (_("mi_cmd_var_info_num_children: Variable object not found"));
a368 2
  if (var == NULL)
    error (_("Variable object not found"));
a403 2
  if (var == NULL)
    error (_("mi_cmd_var_info_type: Variable object not found"));
a418 2
  if (var == NULL)
    error (_("Variable object not found"));
a435 2
  if (var == NULL)
    error (_("mi_cmd_var_info_expression: Variable object not found"));
a454 2
  if (var == NULL)
    error (_("mi_cmd_var_show_attributes: Variable object not found"));
a514 2
  if (var == NULL)
    error (_("Variable object not found"));
a532 2
  if (var == NULL)
    error (_("mi_cmd_var_assign: Variable object not found"));
a610 2
      if (var == NULL)
	error (_("mi_cmd_var_update: Variable object not found"));
@


1.53
log
@	Skip varobj in running threads.
        * mi/mi-cmd-var.c (mi_cmd_var_update): If varobj's
        thread is not stopped, skip the varobj.
        * Makefile.in: Update dependencies.
@
text
@d3 1
a3 1
   Copyright (C) 2000, 2002, 2004, 2005, 2007, 2008
@


1.52
log
@	Kill the return value for all MI command functions.
	* mi/mi-cmds.h (enum mi_cmd_result): Remove.
	(mi_cmd_argv_ftype): Change return type to void.

	* mi/mi-main.c: Adjust all function that implement
	MI commands to return nothing.
	(struct captured_mi_execute_command_actions):
	Remove the rc field.
	(mi_cmd_execute): Return nothing.
	(mi_execute_async_cli_command): Return nothing.
	(mi_cmd_exec_interrupt): Don't print ^done here.
	(mi_cmd_target_select): Don't print ^connected here.
	(captured_mi_execute_command): Don't check for MI_CMD_DONE.
	Special-case -target-select and output ^connected, not ^done.

	* mi/mi-cmd-break.c: Adjust.
	* mi/mi-cmd-disas.c: Adjust.
	* mi/mi-cmd-env.c: Adjust.
	* mi/mi-cmd-file.c: Adjust.
	* mi/mi-cmd-stack.c: Adjust.
	* mi/mi-cmd-target.c: Adjust.
	* mi/mi-cmd-var.c: Adjust.
	* mi/mi-interp.c: Adjust.
	* mi/mi-symbol-cmds.c: Adjust.
@
text
@d32 1
d614 15
a628 2
	  if (*name == '*' || varobj_floating_p (*cr))
	    varobj_update_one (*cr, print_values, 0 /* implicit */);
@


1.51
log
@	Refactor varobj_update interface.
        * varobj.c (varobj_update): Report changes as vector.  Also
        return not just a list of varobj, but a list of special structures
        that tell what exactly has changed.
        * varobj.h (enum varobj_update_error): Rename to
        varobj_scope_status.
        (struct varobj_update_result_t): New.
        (varobj_update): Adjust prototype.
        * mi/mi-cmd-var.c: Adjust for changes.
@
text
@d81 1
a81 1
enum mi_cmd_result
a140 1
  return MI_CMD_DONE;
d143 1
a143 1
enum mi_cmd_result
a194 1
  return MI_CMD_DONE;
d223 1
a223 1
enum mi_cmd_result
a247 1
  return MI_CMD_DONE;
d250 1
a250 1
enum mi_cmd_result
a274 1
  return MI_CMD_DONE;
d278 1
a278 1
enum mi_cmd_result
a295 1
  return MI_CMD_DONE;
d298 1
a298 1
enum mi_cmd_result
a311 1
  return MI_CMD_DONE;
d361 1
a361 1
enum mi_cmd_result
d391 1
a391 1
    return MI_CMD_DONE;
a404 1
  return MI_CMD_DONE;
d407 1
a407 1
enum mi_cmd_result
a420 1
  return MI_CMD_DONE;
d423 1
a423 1
enum mi_cmd_result
a439 2

  return MI_CMD_DONE;
d442 1
a442 1
enum mi_cmd_result
a459 1
  return MI_CMD_DONE;
d462 1
a462 1
enum mi_cmd_result
a484 1
  return MI_CMD_DONE;
d487 1
a487 1
enum mi_cmd_result
a542 2

  return MI_CMD_DONE;
d545 1
a545 1
enum mi_cmd_result
a567 1
  return MI_CMD_DONE;
d570 1
a570 1
enum mi_cmd_result
d608 1
a608 1
	  return MI_CMD_DONE;
a632 1
    return MI_CMD_DONE;
@


1.50
log
@	* mi/mi-cmd-var.c (varobj_update_one): Print new
	value for variable objects that changed type.
@
text
@a656 1
  struct varobj **changelist;
d659 5
a663 7
  int nc;

  nc = varobj_update (&var, &changelist, explicit);

  /* nc >= 0  represents the number of changes reported into changelist.
     nc < 0   means that an error occured or the the variable has 
              changed type (TYPE_CHANGED).  */
d665 1
a665 3
  if (nc == 0)
    return;
  else if (nc < 0)
d669 1
a669 1
      ui_out_field_string (uiout, "name", varobj_get_objname(var));
d671 8
a678 3
      switch (nc)
      {
        case NOT_IN_SCOPE:
d681 1
a681 1
        case INVALID:
d684 13
a696 4
        case TYPE_CHANGED:
	  ui_out_field_string (uiout, "in_scope", "true");
	  ui_out_field_string (uiout, "type_changed", "true");
          ui_out_field_string (uiout, "new_type", varobj_get_type(var));
d698 3
a700 5
			    varobj_get_num_children(var));
	  if (mi_print_value_p (varobj_get_gdb_type (var), print_values))
	    ui_out_field_string (uiout, "value", varobj_get_value (var));
	  break;
      }
d702 1
a702 19
        do_cleanups (cleanup);
    }
  else
    {
      cc = changelist;
      while (*cc != NULL)
	{
	  if (mi_version (uiout) > 1)
	    cleanup = make_cleanup_ui_out_tuple_begin_end (uiout, NULL);
	  ui_out_field_string (uiout, "name", varobj_get_objname (*cc));
	  if (mi_print_value_p (varobj_get_gdb_type (*cc), print_values))
	    ui_out_field_string (uiout, "value", varobj_get_value (*cc));
	  ui_out_field_string (uiout, "in_scope", "true");
	  ui_out_field_string (uiout, "type_changed", "false");
	  if (mi_version (uiout) > 1)
	    do_cleanups (cleanup);
	  cc++;
	}
      xfree (changelist);
d704 1
@


1.49
log
@	Fix @@-varobjs.
        * varobj.c (value_of_root): Update the expression for
        floating varobjs.
        * mi/mi-cmd-var.c (varobj_update_one): If type has changed,
        report that.
@
text
@d690 2
@


1.48
log
@gdb/ChangeLog
2008-04-09  Marc Khouzam  <marc.khouzam@@ericsson.com>

        * mi/mi-cmd-var.c: Include "mi-getopt.h".
        (mi_parse_format): New.  Factored out from mi_cmd_var_set_format.
        (mi_cmd_var_set_format): Use new mi_parse_format.
        (mi_cmd_var_evaluate_expression): Support for -f option to specify
        format.
        * Makefile.in (mi-cmd-var.o): Update dependencies.

        * varobj.h (varobj_get_formatted_value): Declare.
        * varobj.c (my_value_of_variable): Added format parameter.
        (cplus_value_of_variable): Likewise.
        (java_value_of_variable): Likewise.
        (c_value_of_variable): Likewise.  Evaluate expression based
        on format parameter.
        (struct language_specific): Add format parameter to function member
        *value_of_variable.
        (varobj_get_formatted_value): New.
        (varobj_get_value): Added format parameter to method call.

gdb/doc/ChangeLog
2008-04-09  Marc Khouzam  <marc.khouzam@@ericsson.com>

        * gdb.texinfo (GDB/MI Variable Objects): Add anchor to
        -var-set-format.  Add -f option to -var-evaluate-expression.

gdb/testsuite/ChangeLog
2008-04-09  Marc Khouzam  <marc.khouzam@@ericsson.com>

        * gdb.mi/mi2-var-display.exp: Added tests for the new -f
        option of -var-evaluate-expression.
        * gdb.mi/mi2-var-display.exp: Likewise.
@
text
@d686 1
@


1.47
log
@	* varobj.h (varobj_floating_p): Declare.
	* varobj.c (varobj_floating_p): New.
	* mi/mi-cmd-var.c (mi_cmd_var_update): When passed
	'@@' as the name, update all floating varobjs.
@
text
@d31 1
d199 26
a228 1
  int len;
a229 1
  char *formspec;
d240 2
a241 19
  formspec = argv[1];
  if (formspec == NULL)
    error (_("mi_cmd_var_set_format: Must specify the format as: \"natural\", \"binary\", \"decimal\", \"hexadecimal\", or \"octal\""));

  len = strlen (formspec);

  if (strncmp (formspec, "natural", len) == 0)
    format = FORMAT_NATURAL;
  else if (strncmp (formspec, "binary", len) == 0)
    format = FORMAT_BINARY;
  else if (strncmp (formspec, "decimal", len) == 0)
    format = FORMAT_DECIMAL;
  else if (strncmp (formspec, "hexadecimal", len) == 0)
    format = FORMAT_HEXADECIMAL;
  else if (strncmp (formspec, "octal", len) == 0)
    format = FORMAT_OCTAL;
  else
    error (_("mi_cmd_var_set_format: Unknown display format: must be: \"natural\", \"binary\", \"decimal\", \"hexadecimal\", or \"octal\""));

d504 35
a538 2
  if (argc != 1)
    error (_("mi_cmd_var_evaluate_expression: Usage: NAME."));
d540 8
a547 2
  /* Get varobj handle, if a valid var obj name was specified */
  var = varobj_get_handle (argv[0]);
d549 6
a554 1
    error (_("mi_cmd_var_evaluate_expression: Variable object not found"));
a555 1
  ui_out_field_string (uiout, "value", varobj_get_value (var));
@


1.46
log
@        * varobj.c  (struct varobj_root): New component thread_id.
        (varobj_get_thread_id, check_scope): New functions.
        (c_value_of_root): Use check_scope.  Switch to the
	proper thread if necessary.

        * varobj.h (varobj_get_thread_id): New extern.

        * mi/mi-cmd-var.c (print_varobj): Add thread-id field.
@
text
@d561 1
a561 1
  if ((*name == '*') && (*(name + 1) == '\0'))
d577 2
a578 1
	  varobj_update_one (*cr, print_values, 0 /* implicit */);
@


1.45
log
@	Use vector for varobj_list_children interface.
        * gdb/varobj.c (varobj_list_children): Return vector
        of varobjs.
        * gdb/varobj.h (varobj_list_children): Adjust
        prototype.
        (varobj_p): Declare.  Declare vector thereof.
        * mi/mi-cmd-var.c (mi_cmd_var_list_children): Adjust
        for varobj_list_children change.
	* Makefile.in (varobj_h): Update dependencies.
@
text
@d53 1
d70 4
@


1.44
log
@(mi_cmd_var_set_format): Add value field to output.
@
text
@d357 3
a359 3
  struct varobj *var;
  struct varobj **childlist;
  struct varobj **cc;
d363 1
d376 2
a377 2
  numchild = varobj_list_children (var, &childlist);
  ui_out_field_int (uiout, "numchild", numchild);
d383 2
a384 5
  if (numchild <= 0)
    {
      xfree (childlist);
      return MI_CMD_DONE;
    }
d390 1
a390 2
  cc = childlist;
  while (*cc != NULL)
d394 1
a394 2
      print_varobj (*cc, print_values, 1 /* print expression */);
      cc++;
a397 1
  xfree (childlist);
@


1.43
log
@	Updated copyright notices for most files.
@
text
@d234 3
@


1.42
log
@(print_varobj): Revert change from 2007-08-31.
(mi_print_value_p): Guard against type = NULL.
@
text
@d3 2
a4 1
   Copyright (C) 2000, 2002, 2004, 2005, 2007 Free Software Foundation, Inc.
@


1.41
log
@(mi_cmd_var_assign): Simplify.
@
text
@d58 1
a58 2
  gdb_type = varobj_get_gdb_type (var);
  if (gdb_type && mi_print_value_p (gdb_type, print_values))
a328 1
  type = check_typedef (type);
d336 5
a340 2
  /* For PRINT_SIMPLE_VALUES, only print the value if it has a type
     and that type is not a compound type.  */
d342 6
a347 3
  return (TYPE_CODE (type) != TYPE_CODE_ARRAY
	  && TYPE_CODE (type) != TYPE_CODE_STRUCT
	  && TYPE_CODE (type) != TYPE_CODE_UNION);
@


1.40
log
@	Implement -var-info-path-expression.

	* mi/mi-cmds.h (mi_cmd_var_info_path_expression):
	Declare.
	* mi/mi-cmds.c (mi_cmds): Register var-info-path-expression.
	* mi/mi-cmd-var.c (mi_cmd_var_info_path_expression): New.
	* varobj.c (struct varobj): New field 'path_expr'.
	(c_path_expr_of_child, cplus_path_expr_of_child)
	(java_path_expr_of_child): New.
	(struct language_specific): New field path_expr_of_child.
	(varobj_create): Initialize the path_expr field.
	(varobj_get_path_expr): New.
	(new_variable): Initialize the path_expr field.
	(free_variable): Free the path_expr field.
	(adjust_value_for_children_access): New parameter
	WAS_TYPE.
	(c_number_of_children): Adjust.
	(c_describe_child): New parameter CFULL_EXPRESSION.
	Compute full expression.
	(c_value_of_child, c_type_of_child): Adjust.
	(cplus_number_of_children): Adjust.
	(cplus_describe_child): New parameter CFULL_EXPRESSION.
	Compute full expression.
	(cplus_name_of_child, cplus_value_of_child)
	(cplus_type_of_child): Adjust.
	* varobj.h (varobj_get_path_expr): Declare.
@
text
@d514 1
a514 2
  /* FIXME: define masks for attributes */
  if (!(varobj_get_attributes (var) & 0x00000001))
@


1.39
log
@	* mi/mi-cmd-var.c (print_varobj): If a varobj
	type is NULL, don't try to print it.
@
text
@d416 21
@


1.38
log
@2007-08-28  Michael Snyder  <msnyder@@access-company.com>

	* mi/mi-cmd-var.c (mi_print_value_p): No longer necessary to
	check for null before calling check_typedef.
@
text
@d50 1
d58 2
a59 1
  if (mi_print_value_p (varobj_get_gdb_type (var), print_values))
@


1.37
log
@        Switch the license of all .c files to GPLv3.
        Switch the license of all .h files to GPLv3.
        Switch the license of all .cc files to GPLv3.
@
text
@d328 1
a328 2
  if (type != NULL)
    type = check_typedef (type);
@


1.36
log
@2007-08-13  Michael Snyder  <msnyder@@access-company.com>

	* mi/mi-cmd-var.c (mi_cmd_var_set_format): Memory leak.
	No need to make copy.
@
text
@d11 1
a11 1
   the Free Software Foundation; either version 2 of the License, or
d20 1
a20 3
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street, Fifth Floor,
   Boston, MA 02110-1301, USA.  */
@


1.35
log
@2007-08-10  Michael Snyder  <msnyder@@access-company.com>

	* mi/mi-cmd-var.c (mi_cmd_var_list_children): Memory leak.
@
text
@d210 1
a210 1
  formspec = xstrdup (argv[1]);
@


1.34
log
@2007-08-03  Michael Snyder  <msnyder@@access-company.com>

	* mi-cmd-var.c (mi_cmd_var_delete): Remove unused variable,
	stop memory leak, straighten out cleanups.
@
text
@d376 4
a379 1
    return MI_CMD_DONE;
@


1.33
log
@2007-06-13  Arthur Huillet  <arthur.huillet@@free.fr>

	* mi/mi-cmd-var.c (mi_cmd_var_assign): Fix typo.
@
text
@a141 1
  char *expr;
a168 1
      expr = xstrdup (argv[1]);
d172 3
a174 3
      xfree (name);
      name = xstrdup (expr);
      xfree (expr);
@


1.32
log
@        * varobj.h (varobj_set_frozen): New
        (varobj_get_frozen): New.
        (varobj_update): New parameter explicit.
        * varobj.c (struct varobj): New fields frozen
        and not_fetched.
        (varobj_set_frozen, varobj_get_frozen): New.
        (install_new_value): Don't fetch values for
        frozen variable object, or children thereof.  Allow
        a frozen variable object to have non-fetched value.
        (varobj_update): Allow updating child variables.
        Don't traverse frozen children.
        (new_variable): Initialize the frozen field.
        (c_value_of_variable): Return NULL for frozen
        variable without any value yet.
        * mi/mi-cmd-var.c (varobj_update_one): New parameter
        'explicit'.
        (mi_cmd_var_create): Output the 'frozen' field,
        as soon as testsuite is adjusted to expect that field.
        (mi_cmd_var_set_frozen): New.
        (mi_cmd_var_update): Pass the 'explicit' parameter to
        varobj_update_one.
        * mi/mi-cmds.c (mi_cmds): Register '-var-set-frozen'.
        * mi/mi-cmds.h (mi_cmd_var_set_frozen): Declare.
@
text
@d500 1
a500 1
    error (_("mi_cmd_var_assign: Could not assign expression to varible object"));
@


1.31
log
@        * mi/mi-cmd-var.c (varobj_update_one): Remove reference to
        unused WRONG_PARAM value since it was recently deleted.
@
text
@d40 2
a41 1
			      enum print_values print_values);
d68 3
d240 29
d549 1
a549 1
	  varobj_update_one (*cr, print_values);
d565 1
a565 1
      varobj_update_one (var, print_values);
d574 2
a575 1
varobj_update_one (struct varobj *var, enum print_values print_values)
d582 1
a582 1
  nc = varobj_update (&var, &changelist);
@


1.30
log
@2007-02-13  Denis Pilat  <denis.pilat@@st.com>

	* varobj.h (enum varobj_update_error): New enum.
	* varobj.c (struct varobj_root): Add is_valid member.
	(varobj_get_type): Check for invalid varobj.
	(varobj_get_attributes): Likewise.
	(variable_editable):Likewise.
	(varobj_update): Likewise.  Use varobj_update_error.
	(new_root_variable): Set root varobj as valid by default.
	(varobj_invalidate): New function.
	* symfile.c (clear_symtab_users): Use varobj_invalidate.
	* mi/mi-cmd-var.c (varobj_update_one): Change return type to void.
	Use varobj_update_error.
@
text
@a564 1
        case WRONG_PARAM:
@


1.29
log
@* mi/mi-cmd-var.c (mi_cmd_var_create): Add value field.

* gdb.mi/mi-var-block.exp, gdb.mi/mi2-var-block.exp
* gdb.mi/mi-var-child.exp, gdb.mi/mi2-var-child.exp
* gdb.mi/mi-var-child-f.exp, gdb.mi/mi-var-cmd.exp
* gdb.mi/mi2-var-cmd.exp, gdb.mi/mi-var-display.exp
* gdb.mi/mi2-var-display.exp, gdb.mi/gdb701.exp
* gdb.mi/gdb792.exp, gdb.mi/gdb792.exp
* lib/mi-support.exp:
Update tests to include value field in output of -var-create.
@
text
@d37 1
a37 1
extern int varobjdebug;		/* defined in varobj.c */
d39 1
a39 1
static int varobj_update_one (struct varobj *var,
d538 1
a538 3
/* Helper for mi_cmd_var_update() Returns 0 if the update for
   the variable fails (usually because the variable is out of
   scope), and 1 if it succeeds. */
d540 1
a540 1
static int
d550 3
a552 3
  /* nc == 0 means that nothing has changed.
     nc == -1 means that an error occured in updating the variable.
     nc == -2 means the variable has changed type. */
d555 2
a556 2
    return 1;
  else if (nc == -1)
d561 17
a577 14
      ui_out_field_string (uiout, "in_scope", "false");
      if (mi_version (uiout) > 1)
        do_cleanups (cleanup);
      return -1;
    }
  else if (nc == -2)
    {
      if (mi_version (uiout) > 1)
        cleanup = make_cleanup_ui_out_tuple_begin_end (uiout, NULL);
      ui_out_field_string (uiout, "name", varobj_get_objname (var));
      ui_out_field_string (uiout, "in_scope", "true");
      ui_out_field_string (uiout, "new_type", varobj_get_type(var));
      ui_out_field_int (uiout, "new_num_children", 
			   varobj_get_num_children(var));
a582 1
      
a597 1
      return 1;
a598 1
  return 1;
@


1.28
log
@Copyright updates for 2007.
@
text
@d128 1
a128 1
  print_varobj (var, PRINT_NO_VALUES, 0 /* don't print expression */);
@


1.27
log
@(mi_cmd_var_update):  Fix memory leak.
@
text
@d3 1
a3 1
   Copyright (C) 2000, 2002, 2004, 2005 Free Software Foundation, Inc.
@


1.26
log
@(mi_cmd_var_list_children): Remove unused
variable.
@
text
@d503 1
d505 1
a505 1
        cleanup = make_cleanup_ui_out_tuple_begin_end (uiout, "changelist");
d507 1
a507 1
        cleanup = make_cleanup_ui_out_list_begin_end (uiout, "changelist");
a518 1
      xfree (rootlist);
@


1.25
log
@2006-07-29  Vladimir Prus  <vladimir@@codesourcery.com>

	* mi/mi-cmd-var.c (print_varobj): New function.
	(mi_cmd_var_create): Use the above.
	(mi_cmd_var_list_children): Likewise.
@
text
@a323 1
  char *type;
@


1.24
log
@2006-11-28  Vladimir Prus  <vladimir@@codesourcery.com>

        * mi/mi-cmd-var.c (mi_cmd_var_create): Fix cleanup
        handlers. Free expression.
@
text
@d42 27
a78 1
  char *type;
d128 1
a128 10
  ui_out_field_string (uiout, "name", name);
  ui_out_field_int (uiout, "numchild", varobj_get_num_children (var));
  type = varobj_get_type (var);
  if (type == NULL)
    ui_out_field_string (uiout, "type", "");
  else
    {
      ui_out_field_string (uiout, "type", type);
      xfree (type);
    }
d357 2
a358 9
      ui_out_field_string (uiout, "name", varobj_get_objname (*cc));
      ui_out_field_string (uiout, "exp", varobj_get_expression (*cc));
      ui_out_field_int (uiout, "numchild", varobj_get_num_children (*cc));
      if (mi_print_value_p (varobj_get_gdb_type (*cc), print_values))
	ui_out_field_string (uiout, "value", varobj_get_value (*cc));
      type = varobj_get_type (*cc);
      /* C++ pseudo-variables (public, private, protected) do not have a type */
      if (type)
	ui_out_field_string (uiout, "type", type);
a359 1
      cc++;
@


1.23
log
@	* mi/mi-symbol-cmds.c:
	* mi/mi-parse.h:
	* mi/mi-parse.c:
	* mi/mi-out.h:
	* mi/mi-out.c:
	* mi/mi-main.h:
	* mi/mi-main.c:
	* mi/mi-interp.c:
	* mi/mi-getopt.h:
	* mi/mi-getopt.c:
	* mi/mi-console.h:
	* mi/mi-console.c:
	* mi/mi-common.h:
	* mi/mi-common.c:
	* mi/mi-cmds.h:
	* mi/mi-cmds.c:
	* mi/mi-cmd-var.c:
	* mi/mi-cmd-stack.c:
	* mi/mi-cmd-file.c:
	* mi/mi-cmd-env.c:
	* mi/mi-cmd-disas.c:
	* mi/mi-cmd-break.c: Add (C) after Copyright.  Update the FSF
	address.
@
text
@d69 1
a69 1
  old_cleanups = make_cleanup (xfree, frame);
d72 1
@


1.22
log
@2005-07-15  Nick Roberts  <nickrob@@snap.net.nz>
	    Daniel Jacobowitz  <dan@@codesourcery.com>

	* mi/mi-cmds.h (mi_no_values, mi_simple_values, mi_all_values): New
	declarations.
	* mi/mi-cmd-stack.c (mi_cmd_stack_list_locals): Use string
	constants instead of literals for MI command options.
	* mi/mi-cmd-var.c (mi_no_values, mi_simple_values, mi_all_values):
	New variables.
	(mi_parse_values_option, mi_print_value_p): New functions.
	(mi_cmd_var_list_children): Use mi_parse_values_option and
	mi_print_value_p.
	(mi_cmd_var_update): Support a PRINT_VALUES option.  Update calls
	to varobj_update_one.
	(varobj_update_one): Take a print_values argument.  Call
	mi_print_value_p.
	* varobj.c (varobj_get_gdb_type): New function.
	* varobj.h (varobj_get_gdb_type): New prototype.
@
text
@d3 1
a3 1
   Copyright 2000, 2002, 2004, 2005 Free Software Foundation, Inc.
d21 2
a22 2
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */
@


1.21
log
@2005-02-10  Andrew Cagney  <cagney@@gnu.org>

	Mark up all error and warning messages.
	* ada-lang.c, amd64-tdep.c, arch-utils.c, breakpoint.c: Update.
	* bsd-kvm.c, bsd-uthread.c, coff-solib.h, coffread.c: Update.
	* core-aout.c, core-regset.c, corefile.c, corelow.c: Update.
	* cp-abi.c, cp-support.c, cp-valprint.c, cris-tdep.c: Update.
	* dbxread.c, demangle.c, doublest.c, dsrec.c: Update.
	* dve3900-rom.c, dwarf2expr.c, dwarf2loc.c: Update.
	* dwarf2read.c, dwarfread.c, elfread.c, eval.c: Update.
	* event-top.c, exec.c, expprint.c, f-lang.c: Update.
	* f-typeprint.c, f-valprint.c, fbsd-nat.c, findvar.c: Update.
	* frame.c, frv-linux-tdep.c, gcore.c, gdbtypes.c: Update.
	* gnu-nat.c, gnu-v2-abi.c, gnu-v3-abi.c, go32-nat.c: Update.
	* hpacc-abi.c, hppa-hpux-nat.c, hppa-hpux-tdep.c: Update.
	* hppa-linux-nat.c, hppa-linux-tdep.c, hppa-tdep.c: Update.
	* hpread.c, hpux-thread.c, i386-linux-nat.c: Update.
	* i386-linux-tdep.c, i386-tdep.c, i386bsd-nat.c: Update.
	* i386gnu-nat.c, i387-tdep.c, ia64-linux-nat.c: Update.
	* ia64-tdep.c, inf-child.c, inf-ptrace.c, inf-ttrace.c: Update.
	* infcall.c, infcmd.c, inflow.c, infptrace.c, infrun.c: Update.
	* inftarg.c, interps.c, irix5-nat.c, jv-lang.c: Update.
	* kod-cisco.c, kod.c, language.c, libunwind-frame.c: Update.
	* linespec.c, linux-nat.c, linux-thread-db.c, m2-lang.c: Update.
	* m32r-rom.c, m68hc11-tdep.c, m68k-tdep.c: Update.
	* m68klinux-nat.c, macrocmd.c, macroexp.c, main.c: Update.
	* maint.c, mdebugread.c, mem-break.c, memattr.c: Update.
	* mips-linux-tdep.c, mips-tdep.c, mipsread.c, monitor.c: Update.
	* nlmread.c, nto-procfs.c, objc-lang.c, objfiles.c: Update.
	* observer.c, ocd.c, p-lang.c, p-typeprint.c: Update.
	* p-valprint.c, pa64solib.c, parse.c, ppc-linux-tdep.c: Update.
	* ppcnbsd-tdep.c, printcmd.c, procfs.c, remote-e7000.c: Update.
	* remote-fileio.c, remote-m32r-sdi.c, remote-rdi.c: Update.
	* remote-rdp.c, remote-sim.c, remote-st.c: Update.
	* remote-utils.c, remote-utils.h, remote.c: Update.
	* rom68k-rom.c, rs6000-nat.c, s390-tdep.c, scm-lang.c: Update.
	* ser-e7kpc.c, ser-tcp.c, ser-unix.c, sh-tdep.c: Update.
	* sh3-rom.c, shnbsd-tdep.c, sol-thread.c, solib-aix5.c: Update.
	* solib-frv.c, solib-irix.c, solib-osf.c, solib-pa64.c: Update.
	* solib-som.c, solib-sunos.c, solib-svr4.c, solib.c: Update.
	* somread.c, somsolib.c, source.c, stabsread.c: Update.
	* stack.c, std-regs.c, symfile-mem.c, symfile.c: Update.
	* symmisc.c, symtab.c, target.c, thread.c, top.c: Update.
	* tracepoint.c, trad-frame.c, typeprint.c, utils.c: Update.
	* uw-thread.c, valarith.c, valops.c, valprint.c: Update.
	* value.c, varobj.c, version.in, win32-nat.c, wince.c: Update.
	* xcoffread.c, xcoffsolib.c, cli/cli-cmds.c: Update.
	* cli/cli-decode.c, cli/cli-dump.c, cli/cli-logging.c: Update.
	* cli/cli-script.c, cli/cli-setshow.c, mi/mi-cmd-break.c: Update.
	* mi/mi-cmd-disas.c, mi/mi-cmd-env.c, mi/mi-cmd-file.c: Update.
	* mi/mi-cmd-stack.c, mi/mi-cmd-var.c, mi/mi-getopt.c: Update.
	* mi/mi-symbol-cmds.c, tui/tui-layout.c, tui/tui-stack.c: Update.
	* tui/tui-win.c: Update.
@
text
@d3 1
a3 1
   Copyright 2000, 2002, 2004 Free Software Foundation, Inc.
d33 4
d39 2
a40 1
static int varobj_update_one (struct varobj *var);
d255 43
d313 4
a316 2
  if (argc == 1) var = varobj_get_handle (argv[0]);
  else var = varobj_get_handle (argv[1]);
d323 3
a325 9
    if (strcmp (argv[0], "0") == 0
	|| strcmp (argv[0], "--no-values") == 0)
      print_values = PRINT_NO_VALUES;
    else if (strcmp (argv[0], "1") == 0
	     || strcmp (argv[0], "--all-values") == 0)
      print_values = PRINT_ALL_VALUES;
    else
     error (_("Unknown value for PRINT_VALUES: must be: 0 or \"--no-values\", 1 or \"--all-values\""));
  else print_values = PRINT_NO_VALUES;
d342 1
a342 1
      if (print_values)
d347 1
a347 1
	ui_out_field_string (uiout, "type", varobj_get_type (*cc));
d473 1
d475 7
a481 2
  if (argc != 1)
    error (_("mi_cmd_var_update: Usage: NAME."));
d483 4
a486 1
  name = argv[0];
d506 1
a506 1
	  varobj_update_one (*cr);
d523 1
a523 1
      varobj_update_one (var);
d534 1
a534 1
varobj_update_one (struct varobj *var)
d580 2
@


1.20
log
@2004-06-01  Andrew Cagney  <cagney@@gnu.org>

	* mi/mi-cmd-env.c (env_execute_cli_command): Use xstrprintf
	instead of xasprintf.
	* mi/mi-main.c (mi_error_last_message, mi_cmd_exec_interrupt)
	(mi_cmd_thread_select, mi_cmd_thread_list_ids)
	(mi_cmd_data_list_register_names)
	(mi_cmd_data_list_changed_registers)
	(mi_cmd_data_list_register_values)
	(get_register, mi_cmd_data_write_register_values)
	(mi_cmd_data_write_register_values)
	(mi_cmd_data_assign, mi_cmd_data_evaluate_expression)
	(mi_cmd_target_download, mi_cmd_target_select)
	(mi_cmd_data_read_memory, mi_cmd_data_write_memory)
	(mi_execute_cli_command, mi_execute_async_cli_command)
	(mi_execute_async_cli_command): Ditto.
	* mi/mi-interp.c (mi_cmd_interpreter_exec) Ditto.
	* mi/mi-cmd-var.c (mi_cmd_var_create): Ditto.
@
text
@d55 1
a55 1
      error ("mi_cmd_var_create: Usage: NAME FRAME EXPRESSION.");
d74 1
a74 1
    error ("mi_cmd_var_create: name of object must begin with a letter");
d94 1
a94 1
    error ("mi_cmd_var_create: unable to create variable object");
d122 1
a122 1
    error ("mi_cmd_var_delete: Usage: [-c] EXPRESSION.");
d134 1
a134 1
	error ("mi_cmd_var_delete: Missing required argument after '-c': variable object name");
d136 1
a136 1
	error ("mi_cmd_var_delete: Illegal variable object name");
d145 1
a145 1
	error ("mi_cmd_var_delete: Invalid option.");
d158 1
a158 1
    error ("mi_cmd_var_delete: Variable object not found.");
d177 1
a177 1
    error ("mi_cmd_var_set_format: Usage: NAME FORMAT.");
d183 1
a183 1
    error ("mi_cmd_var_set_format: Variable object not found");
d187 1
a187 1
    error ("mi_cmd_var_set_format: Must specify the format as: \"natural\", \"binary\", \"decimal\", \"hexadecimal\", or \"octal\"");
d202 1
a202 1
    error ("mi_cmd_var_set_format: Unknown display format: must be: \"natural\", \"binary\", \"decimal\", \"hexadecimal\", or \"octal\"");
d219 1
a219 1
    error ("mi_cmd_var_show_format: Usage: NAME.");
d224 1
a224 1
    error ("mi_cmd_var_show_format: Variable object not found");
d239 1
a239 1
    error ("mi_cmd_var_info_num_children: Usage: NAME.");
d244 1
a244 1
    error ("mi_cmd_var_info_num_children: Variable object not found");
d262 1
a262 1
    error ("mi_cmd_var_list_children: Usage: [PRINT_VALUES] NAME");
d268 1
a268 1
    error ("Variable object not found");
d280 1
a280 1
     error ("Unknown value for PRINT_VALUES: must be: 0 or \"--no-values\", 1 or \"--all-values\"");
d318 1
a318 1
    error ("mi_cmd_var_info_type: Usage: NAME.");
d323 1
a323 1
    error ("mi_cmd_var_info_type: Variable object not found");
d336 1
a336 1
    error ("mi_cmd_var_info_expression: Usage: NAME.");
d341 1
a341 1
    error ("mi_cmd_var_info_expression: Variable object not found");
d358 1
a358 1
    error ("mi_cmd_var_show_attributes: Usage: NAME.");
d363 1
a363 1
    error ("mi_cmd_var_show_attributes: Variable object not found");
d382 1
a382 1
    error ("mi_cmd_var_evaluate_expression: Usage: NAME.");
d387 1
a387 1
    error ("mi_cmd_var_evaluate_expression: Variable object not found");
d400 1
a400 1
    error ("mi_cmd_var_assign: Usage: NAME EXPRESSION.");
d405 1
a405 1
    error ("mi_cmd_var_assign: Variable object not found");
d409 1
a409 1
    error ("mi_cmd_var_assign: Variable object is not editable");
d414 1
a414 1
    error ("mi_cmd_var_assign: Could not assign expression to varible object");
d431 1
a431 1
    error ("mi_cmd_var_update: Usage: NAME.");
d464 1
a464 1
	error ("mi_cmd_var_update: Variable object not found");
@


1.19
log
@Update copyright year.
@
text
@d53 2
a54 3
      /*      xasprintf (&mi_error_message,
         "mi_cmd_var_create: Usage: .");
         return MI_CMD_ERROR; */
@


1.19.4.1
log
@Merge mainline to intercu branch - 2004-09-15
@
text
@d53 3
a55 2
      /* mi_error_message = xstrprintf ("mi_cmd_var_create: Usage:
         ...."); return MI_CMD_ERROR; */
@


1.18
log
@(mi_cmd_var_list_children): Print the values of the
children, if required.
@
text
@d3 1
a3 1
   Copyright 2000, 2002 Free Software Foundation, Inc.
@


1.17
log
@2003-11-06  Andrew Cagney  <cagney@@redhat.com>

	* valops.c (destructor_name_p): Replace STREQN with strncmp.
	* top.c (command_line_input): Ditto.
	* objc-exp.y (yylex): Ditto.
	* minsyms.c (prim_record_minimal_symbol_and_info): Ditto.
	* jv-exp.y (yylex): Ditto.
	* f-exp.y (yylex): Ditto.
	* event-top.c (command_line_handler): Ditto.
	* environ.c (get_in_environ): Ditto.
	(set_in_environ): Ditto.
	* dwarfread.c (handle_producer): Ditto.
	* dbxread.c (process_one_symbol): Ditto.
	* c-typeprint.c (c_type_print_base): Ditto.
	* c-exp.y (yylex): Ditto.

2003-11-06  Andrew Cagney  <cagney@@redhat.com>

	* mi-cmd-var.c (mi_cmd_var_set_format): Replace STREQN with
	strncmp.
@
text
@d260 1
d262 2
a263 2
  if (argc != 1)
    error ("mi_cmd_var_list_children: Usage: NAME.");
d266 2
a267 1
  var = varobj_get_handle (argv[0]);
d269 1
a269 1
    error ("mi_cmd_var_list_children: Variable object not found");
d273 10
d299 2
@


1.16
log
@2003-02-02  Andrew Cagney  <ac131313@@redhat.com>

	From 2002-11-10 Jason Molenda (jason-cl@@molenda.com):
        * mi-cmd-var.c (mi_cmd_var_list_children): CHILDREN field is
        now a list; still a tuple when in mi1.
        * gdbmi.texinfo: Update var-list-children example.

2003-02-02  Andrew Cagney  <ac131313@@redhat.com>

	2002-11-10 Jason Molenda (jason-cl@@molenda.com):
        * gdb.mi/mi-var-child.exp: -var-list-children's CHILDREN field is
        now a list, not a tuple.
        * gdb.mi/mi-var-display.exp: Ditto.
        * gdb.mi/gdb792.exp: Ditto.
@
text
@d192 1
a192 1
  if (STREQN (formspec, "natural", len))
d194 1
a194 1
  else if (STREQN (formspec, "binary", len))
d196 1
a196 1
  else if (STREQN (formspec, "decimal", len))
d198 1
a198 1
  else if (STREQN (formspec, "hexadecimal", len))
d200 1
a200 1
  else if (STREQN (formspec, "octal", len))
@


1.16.36.1
log
@merge mainline changes into branch
@
text
@d3 1
a3 1
   Copyright 2000, 2002, 2004 Free Software Foundation, Inc.
d192 1
a192 1
  if (strncmp (formspec, "natural", len) == 0)
d194 1
a194 1
  else if (strncmp (formspec, "binary", len) == 0)
d196 1
a196 1
  else if (strncmp (formspec, "decimal", len) == 0)
d198 1
a198 1
  else if (strncmp (formspec, "hexadecimal", len) == 0)
d200 1
a200 1
  else if (strncmp (formspec, "octal", len) == 0)
a259 1
  enum print_values print_values;
d261 2
a262 2
  if (argc != 1 && argc != 2)
    error ("mi_cmd_var_list_children: Usage: [PRINT_VALUES] NAME");
d265 1
a265 2
  if (argc == 1) var = varobj_get_handle (argv[0]);
  else var = varobj_get_handle (argv[1]);
d267 1
a267 1
    error ("Variable object not found");
a270 10
  if (argc == 2)
    if (strcmp (argv[0], "0") == 0
	|| strcmp (argv[0], "--no-values") == 0)
      print_values = PRINT_NO_VALUES;
    else if (strcmp (argv[0], "1") == 0
	     || strcmp (argv[0], "--all-values") == 0)
      print_values = PRINT_ALL_VALUES;
    else
     error ("Unknown value for PRINT_VALUES: must be: 0 or \"--no-values\", 1 or \"--all-values\"");
  else print_values = PRINT_NO_VALUES;
a286 2
      if (print_values)
	ui_out_field_string (uiout, "value", varobj_get_value (*cc));
@


1.15
log
@
2002-11-06  Jeff Johnston  <jjohnstn@@redhat.com>

        * mi-cmd-var.c (mi_cmd_var_create): Change the function used to
        parse the frame addr from parse_and_eval_address() to
        string_to_core_addr().  This is a fix for PR gdb/494.
@
text
@d275 4
a278 1
  cleanup_children = make_cleanup_ui_out_tuple_begin_end (uiout, "children");
@


1.14
log
@
2002-10-23  Jeff Johnston  <jjohnstn@@redhat.com>

        * mi-cmd-var.c: Change all remaining occurrences of ui_out_tuple_begin
        to make_cleanup_ui_out_tuple_begin_end.  Change all remaining
        occurrences of ui_out_list_begin to make_cleanup_ui_out_list_begin_end.         Use do_cleanups instead of ui_out_list_end or ui_out_tuple_end.  This
        is a fix for PR gdb/680.
        * mi-cmd-stack.c: Ditto.
        * mi-main.c: Ditto.
@
text
@d84 1
a84 1
      frameaddr = parse_and_eval_address (frame);
@


1.13
log
@
2002-10-03  Jeff Johnston  <jjohnstn@@redhat.com>

        * mi-cmd-var.c (mi_cmd_var_update): Fix for PR gdb/672.  For m2,
        output list begin and end for "changelist" rather than tuple begin/end.
        (varobj_update_one): For m2, add tuple begin and end for varobj
        update output.
@
text
@d257 1
d275 1
a275 1
  ui_out_tuple_begin (uiout, "children");
d279 2
a280 1
      ui_out_tuple_begin (uiout, "child");
d288 1
a288 1
      ui_out_tuple_end (uiout);
d291 1
a291 1
  ui_out_tuple_end (uiout);
@


1.13.2.1
log
@Merge drow-cplus-merge-20021025 to drow-cplus-branch.
@
text
@a256 1
  struct cleanup *cleanup_children;
d274 1
a274 1
  cleanup_children = make_cleanup_ui_out_tuple_begin_end (uiout, "children");
d278 1
a278 2
      struct cleanup *cleanup_child;
      cleanup_child = make_cleanup_ui_out_tuple_begin_end (uiout, "child");
d286 1
a286 1
      do_cleanups (cleanup_child);
d289 1
a289 1
  do_cleanups (cleanup_children);
@


1.13.2.2
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@d84 1
a84 1
      frameaddr = string_to_core_addr (frame);
d192 1
a192 1
  if (strncmp (formspec, "natural", len) == 0)
d194 1
a194 1
  else if (strncmp (formspec, "binary", len) == 0)
d196 1
a196 1
  else if (strncmp (formspec, "decimal", len) == 0)
d198 1
a198 1
  else if (strncmp (formspec, "hexadecimal", len) == 0)
d200 1
a200 1
  else if (strncmp (formspec, "octal", len) == 0)
d275 1
a275 4
  if (mi_version (uiout) == 1)
    cleanup_children = make_cleanup_ui_out_tuple_begin_end (uiout, "children");
  else
    cleanup_children = make_cleanup_ui_out_list_begin_end (uiout, "children");
@


1.13.2.3
log
@Merge drow-cplus-merge-20040208 to drow-cplus-branch.
@
text
@d3 1
a3 1
   Copyright 2000, 2002, 2004 Free Software Foundation, Inc.
a259 1
  enum print_values print_values;
d261 2
a262 2
  if (argc != 1 && argc != 2)
    error ("mi_cmd_var_list_children: Usage: [PRINT_VALUES] NAME");
d265 1
a265 2
  if (argc == 1) var = varobj_get_handle (argv[0]);
  else var = varobj_get_handle (argv[1]);
d267 1
a267 1
    error ("Variable object not found");
a270 10
  if (argc == 2)
    if (strcmp (argv[0], "0") == 0
	|| strcmp (argv[0], "--no-values") == 0)
      print_values = PRINT_NO_VALUES;
    else if (strcmp (argv[0], "1") == 0
	     || strcmp (argv[0], "--all-values") == 0)
      print_values = PRINT_ALL_VALUES;
    else
     error ("Unknown value for PRINT_VALUES: must be: 0 or \"--no-values\", 1 or \"--all-values\"");
  else print_values = PRINT_NO_VALUES;
a286 2
      if (print_values)
	ui_out_field_string (uiout, "value", varobj_get_value (*cc));
@


1.12
log
@2002-07-30  Andrew Cagney  <ac131313@@redhat.com>

* symtab.h: Replace #include "gdb_obstack.h" with opaque
declaration.
* cli/cli-cmds.c, cli/cli-script.c: Include "gdb_string.h".
* gnu-v3-abi.c, arc-tdep.c, cli/cli-decode.c: Ditto.
* avr-tdep.c, mon960-rom.c, i960-tdep.c: Ditto.
* arch-utils.c, cli/cli-setshow.c: Unconditionally include
"gdb_string.h".
* Makefile.in (cli-script.o, cli-cmds.o): Update dependencies.
(gnu-v3-abi.o, cli-setshow.o, i960-tdep.o): Ditto.
(cli-decode.o, mi-cmd-var.o, mi-cmd-disas.o): Ditto.
(avr-tdep.o, mon960-rom.o): Ditto.
(aout_stabs_gnu_h): Define.
(symtab_h): Remove $(gdb_obstack_h).
@
text
@d408 1
d423 4
a426 1
      ui_out_tuple_begin (uiout, "changelist");
d429 1
a429 1
	  ui_out_tuple_end (uiout);
d439 1
a439 1
      ui_out_tuple_end (uiout);
d448 4
a451 1
      ui_out_tuple_begin (uiout, "changelist");
d453 1
a453 1
      ui_out_tuple_end (uiout);
d467 1
d480 2
d484 2
d490 2
d497 2
d506 2
d511 2
@


1.12.8.1
log
@Merge with mainline; merge tag carlton_dictionary-20021011-merge.
@
text
@a407 1
  struct cleanup *cleanup;
d422 1
a422 4
      if (mi_version (uiout) <= 1)
        cleanup = make_cleanup_ui_out_tuple_begin_end (uiout, "changelist");
      else
        cleanup = make_cleanup_ui_out_list_begin_end (uiout, "changelist");
d425 1
a425 1
	  do_cleanups (cleanup);
d435 1
a435 1
      do_cleanups (cleanup);
d444 1
a444 4
      if (mi_version (uiout) <= 1)
        cleanup = make_cleanup_ui_out_tuple_begin_end (uiout, "changelist");
      else
        cleanup = make_cleanup_ui_out_list_begin_end (uiout, "changelist");
d446 1
a446 1
      do_cleanups (cleanup);
a459 1
  struct cleanup *cleanup = NULL;
a471 2
      if (mi_version (uiout) > 1)
        cleanup = make_cleanup_ui_out_tuple_begin_end (uiout, NULL);
a473 2
      if (mi_version (uiout) > 1)
        do_cleanups (cleanup);
a477 2
      if (mi_version (uiout) > 1)
        cleanup = make_cleanup_ui_out_tuple_begin_end (uiout, NULL);
a482 2
      if (mi_version (uiout) > 1)
        do_cleanups (cleanup);
a489 2
	  if (mi_version (uiout) > 1)
	    cleanup = make_cleanup_ui_out_tuple_begin_end (uiout, NULL);
a492 2
	  if (mi_version (uiout) > 1)
	    do_cleanups (cleanup);
@


1.12.8.2
log
@2002-10-25  David Carlton  <carlton@@math.stanford.edu>

	* symtab.c (lookup_symbol_aux_block): New function.
	(lookup_symbol_aux_local): Call lookup_symbol_aux_block.
	(lookup_symbol_aux): Ditto.

	* Merge from mainline; tag is carlton_dictionary-20021025-merge.

2002-10-25  David Carlton  <carlton@@math.stanford.edu>

	* cp-support.c: Add comment to demangled name pitfalls.
	* symtab.c (lookup_transparent_type): Add FIXME comment at
	beginning.

2002-10-23  David Carlton  <carlton@@math.stanford.edu>

	* symtab.c: Delete cplusplus_hint.
	Delete prototype for find_template_name_end.
	* dwarf2read.c (scan_partial_symbols): Add in a gdb_assert from a
	later version of my namespace_minimal patch.

2002-10-25  David Carlton  <carlton@@math.stanford.edu>

	* gdb.c++/namespace.exp: Change all of the setup_xfail tests that
	I added into setup_kfails.
@
text
@a256 1
  struct cleanup *cleanup_children;
d274 1
a274 1
  cleanup_children = make_cleanup_ui_out_tuple_begin_end (uiout, "children");
d278 1
a278 2
      struct cleanup *cleanup_child;
      cleanup_child = make_cleanup_ui_out_tuple_begin_end (uiout, "child");
d286 1
a286 1
      do_cleanups (cleanup_child);
d289 1
a289 1
  do_cleanups (cleanup_children);
@


1.12.8.3
log
@2002-11-15  David Carlton  <carlton@@math.stanford.edu>

	* Merge from mainline; tag is carlton_dictionary-20021115-merge.
@
text
@d84 1
a84 1
      frameaddr = string_to_core_addr (frame);
@


1.12.8.4
log
@2003-02-07  David Carlton  <carlton@@math.stanford.edu>

	* Merge with mainline; tag is carlton_dictionary-20030207-merge.
@
text
@d275 1
a275 4
  if (mi_version (uiout) == 1)
    cleanup_children = make_cleanup_ui_out_tuple_begin_end (uiout, "children");
  else
    cleanup_children = make_cleanup_ui_out_list_begin_end (uiout, "children");
@


1.12.8.5
log
@2003-11-11  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton-dictionary-20031111-merge.
@
text
@d192 1
a192 1
  if (strncmp (formspec, "natural", len) == 0)
d194 1
a194 1
  else if (strncmp (formspec, "binary", len) == 0)
d196 1
a196 1
  else if (strncmp (formspec, "decimal", len) == 0)
d198 1
a198 1
  else if (strncmp (formspec, "hexadecimal", len) == 0)
d200 1
a200 1
  else if (strncmp (formspec, "octal", len) == 0)
@


1.12.8.6
log
@2004-01-26  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton_dictionary-20040126-merge.
@
text
@d3 1
a3 1
   Copyright 2000, 2002, 2004 Free Software Foundation, Inc.
a259 1
  enum print_values print_values;
d261 2
a262 2
  if (argc != 1 && argc != 2)
    error ("mi_cmd_var_list_children: Usage: [PRINT_VALUES] NAME");
d265 1
a265 2
  if (argc == 1) var = varobj_get_handle (argv[0]);
  else var = varobj_get_handle (argv[1]);
d267 1
a267 1
    error ("Variable object not found");
a270 10
  if (argc == 2)
    if (strcmp (argv[0], "0") == 0
	|| strcmp (argv[0], "--no-values") == 0)
      print_values = PRINT_NO_VALUES;
    else if (strcmp (argv[0], "1") == 0
	     || strcmp (argv[0], "--all-values") == 0)
      print_values = PRINT_ALL_VALUES;
    else
     error ("Unknown value for PRINT_VALUES: must be: 0 or \"--no-values\", 1 or \"--all-values\"");
  else print_values = PRINT_NO_VALUES;
a286 2
      if (print_values)
	ui_out_field_string (uiout, "value", varobj_get_value (*cc));
@


1.11
log
@* defs.h (XMALLOC): Define.
* gdb-events.sh (XMALLOC): Delete macro.
* gdb-events.c, gdb-events.h: Regenerate.
* gdbarch.sh (XMALLOC): Delete macro.
* gdbarch.c: Regenerate.
* serial.c (XMALLOC): Delete macro.
* ui-file.c (XMALLOC): Ditto.
* ser-unix.h (XMALLOC): Ditto.
* sh-tdep.c (XMALLOC): Ditto.
* ui-out.c (XMALLOC): Ditto.
* utils.c (XMALLOC): Ditto.
* i386-tdep.c (XMALLOC): Ditto.
* gdb-events.c (XMALLOC): Ditto.
* d10v-tdep.c (XMALLOC): Ditto.
* cli-out.c (XMALLOC): Ditto.

* cli-out.c, d10v-tdep.c, gdb-events.c: Update copyright.
* gdb-events.sh, i386-tdep.c, ser-unix.h, serial.c: Ditto.
* ui-file.c, ui-out.c: Ditto.
@
text
@d31 1
@


1.11.6.1
log
@Merge with kseitz_interps-20020809-merge of CVS head.
@
text
@a30 1
#include "gdb_string.h"
@


1.11.6.2
log
@merge from mainline
@
text
@a256 1
  struct cleanup *cleanup_children;
d274 1
a274 1
  cleanup_children = make_cleanup_ui_out_tuple_begin_end (uiout, "children");
d278 1
a278 2
      struct cleanup *cleanup_child;
      cleanup_child = make_cleanup_ui_out_tuple_begin_end (uiout, "child");
d286 1
a286 1
      do_cleanups (cleanup_child);
d289 1
a289 1
  do_cleanups (cleanup_children);
a407 1
  struct cleanup *cleanup;
d422 1
a422 4
      if (mi_version (uiout) <= 1)
        cleanup = make_cleanup_ui_out_tuple_begin_end (uiout, "changelist");
      else
        cleanup = make_cleanup_ui_out_list_begin_end (uiout, "changelist");
d425 1
a425 1
	  do_cleanups (cleanup);
d435 1
a435 1
      do_cleanups (cleanup);
d444 1
a444 4
      if (mi_version (uiout) <= 1)
        cleanup = make_cleanup_ui_out_tuple_begin_end (uiout, "changelist");
      else
        cleanup = make_cleanup_ui_out_list_begin_end (uiout, "changelist");
d446 1
a446 1
      do_cleanups (cleanup);
a459 1
  struct cleanup *cleanup = NULL;
a471 2
      if (mi_version (uiout) > 1)
        cleanup = make_cleanup_ui_out_tuple_begin_end (uiout, NULL);
a473 2
      if (mi_version (uiout) > 1)
        do_cleanups (cleanup);
a477 2
      if (mi_version (uiout) > 1)
        cleanup = make_cleanup_ui_out_tuple_begin_end (uiout, NULL);
a482 2
      if (mi_version (uiout) > 1)
        do_cleanups (cleanup);
a489 2
	  if (mi_version (uiout) > 1)
	    cleanup = make_cleanup_ui_out_tuple_begin_end (uiout, NULL);
a492 2
	  if (mi_version (uiout) > 1)
	    do_cleanups (cleanup);
@


1.10
log
@	* mi-cmd-var.c (varobj_update_one): Update call to
	varobj_update to reflect recent api change.
@
text
@d2 3
a4 1
   Copyright 2000 Free Software Foundation, Inc.
a30 5

/* Convenience macro for allocting typesafe memory. */

#undef XMALLOC
#define XMALLOC(TYPE) (TYPE*) xmalloc (sizeof (TYPE))
@


1.9
log
@s/ui_out_list/ui_out_tupple/
@
text
@d464 1
a464 1
  nc = varobj_update (var, &changelist);
@


1.8
log
@Update/correct copyright notices.
@
text
@d276 1
a276 1
  ui_out_list_begin (uiout, "children");
d280 1
a280 1
      ui_out_list_begin (uiout, "child");
d288 1
a288 1
      ui_out_list_end (uiout);
d291 1
a291 1
  ui_out_list_end (uiout);
d424 1
a424 1
      ui_out_list_begin (uiout, "changelist");
d427 1
a427 1
	  ui_out_list_end (uiout);
d437 1
a437 1
      ui_out_list_end (uiout);
d446 1
a446 1
      ui_out_list_begin (uiout, "changelist");
d448 1
a448 1
      ui_out_list_end (uiout);
@


1.7
log
@Replace free() with xfree().
@
text
@d2 1
a2 1
   Copyright (C) 2000, Free Software Foundation, Inc.
@


1.6
log
@Replace asprintf() / vasprintf() with xasprintf() xvasprintf().
@
text
@d67 1
a67 1
  old_cleanups = make_cleanup (free, frame);
d73 1
a73 1
      free (name);
d107 1
a107 1
      free (type);
d150 1
a150 1
      free (name);
d152 1
a152 1
      free (expr);
d292 1
a292 1
  free (childlist);
d436 1
a436 1
      free (rootlist);
d497 1
a497 1
      free (changelist);
@


1.5
log
@Rename mi/ChangeLog-mi -> mi/ChangeLog
@
text
@d55 1
a55 1
      /*      asprintf (&mi_error_message,
@


1.4
log
@Cleanup cleanups - delete use of make_cleanup_func as cast.
@
text
@a501 4

/* Local variables: */
/* change-log-default-name: "ChangeLog-mi" */
/* End: */
@


1.3
log
@2000-03-13  James Ingham  <jingham@@leda.cygnus.com>

	Add support for a variable object that tries to evaluate itself in
	the currently selected frame, rather than in a fixed frame.

	* wrapper.c,h (gdb_parse_exp_1): Added a wrapper for
 	gdb_parse_exp_1.
	* varobj.h: Added USE_CURRENT_FRAME to varobj_type & changed def'n
	of varobj_create.
	* varobj.c (varobj_list): Return type indicates whether the
	variable's type has changed (for current frame variables).
	(varobj_update): Handle the case where the variable's type has
	changed.
	(delete_variable_1): Allow for deletion of variables that have not
	been installed yet.
	(new_root_variable): Initialize use_selected_frame variable.
	(value_of_root): This is where most of the work to handle "current
	frame" variables was added.  Most of the complexity involves
	handling the case where the type of the variable has changed.
	(varobj_create): Add a "type" argument, to tell if the
	variable is one of these "current frame" variables.  Also protect
	call to parse_exp_1 from long jumping.

	* mi-var-block.exp: The error report from varobj_create changed
	since I am now trapping parse_exp_1 errors.  Change the tests to
	match the new error message.
	* mi-var-child.exp: Ditto.
	* mi-var-cmd.exp: Ditto.

	* lib/gdb.exp: Fix the gdbtk_start routine to correctly find all
	the library directories.

	* gdbtk-varobj.c (variable_create): Pass the correct
	"how_specified" flag to the varobj_create routine.
@
text
@d64 1
a64 2
  old_cleanups = make_cleanup ((make_cleanup_func) free_current_contents,
			       &name);
d130 1
a130 2
  old_cleanups = make_cleanup ((make_cleanup_func) free_current_contents,
			       &name);
@


1.2
log
@Fix copyright - Cygnus is a Red Hat company.
@
text
@d37 1
a37 1
static void varobj_update_one (struct varobj *var);
d44 1
a44 1
  CORE_ADDR frameaddr;
d51 1
d81 3
a83 1
    frameaddr = -1;
d85 4
a88 1
    frameaddr = parse_and_eval_address (frame);
d95 1
a95 1
  var = varobj_create (name, expr, frameaddr);
d452 1
a452 1
  return MI_CMD_DONE;
d455 3
a457 1
/* Helper for mi_cmd_var_update() */
d459 1
a459 1
static void
d468 21
a488 5
  if (nc <= 0)
    return;

  cc = changelist;
  while (*cc != NULL)
d490 11
a500 2
      ui_out_field_string (uiout, "name", varobj_get_objname (*cc));
      cc++;
d502 1
a502 1
  free (changelist);
@


1.1
log
@Add mi/ and testsuite/gdb.mi/ subdirectories.
Add --enable-gdbmi option to configury.
Add mi rules to Makefile.in
Add mi conditional output to event-top.c infrun.c main.c top.c.
Add -i=mi option.
@
text
@d3 1
a3 1
   Contributed by Cygnus Solutions.
@

