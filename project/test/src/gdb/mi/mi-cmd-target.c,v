head	1.14;
access;
symbols
	gdb_7_6_1-2013-08-30-release:1.14
	gdb_7_6-2013-04-26-release:1.14
	gdb_7_6-branch:1.14.0.2
	gdb_7_6-2013-03-12-branchpoint:1.14
	gdb_7_5_1-2012-11-29-release:1.13
	gdb_7_5-2012-08-17-release:1.13
	gdb_7_5-branch:1.13.0.2
	gdb_7_5-2012-07-18-branchpoint:1.13
	gdb_7_4_1-2012-04-26-release:1.10.2.1
	gdb_7_4-2012-01-24-release:1.10.2.1
	gdb_7_4-branch:1.10.0.2
	gdb_7_4-2011-12-13-branchpoint:1.10
	gdb_7_3_1-2011-09-04-release:1.8
	gdb_7_3-2011-07-26-release:1.8
	gdb_7_3-branch:1.8.0.2
	gdb_7_3-2011-04-01-branchpoint:1.8
	gdb_7_2-2010-09-02-release:1.6
	gdb_7_2-branch:1.6.0.2
	gdb_7_2-2010-07-07-branchpoint:1.6
	gdb_7_1-2010-03-18-release:1.5
	gdb_7_1-branch:1.5.0.2
	gdb_7_1-2010-02-18-branchpoint:1.5
	gdb_7_0_1-2009-12-22-release:1.4
	gdb_7_0-2009-10-06-release:1.4
	gdb_7_0-branch:1.4.0.4
	gdb_7_0-2009-09-16-branchpoint:1.4
	arc-sim-20090309:1.2
	msnyder-checkpoint-072509-branch:1.4.0.2
	msnyder-checkpoint-072509-branchpoint:1.4
	arc-insight_6_8-branch:1.2.0.8
	arc-insight_6_8-branchpoint:1.2
	insight_6_8-branch:1.2.0.6
	insight_6_8-branchpoint:1.2
	reverse-20081226-branch:1.3.0.8
	reverse-20081226-branchpoint:1.3
	multiprocess-20081120-branch:1.3.0.6
	multiprocess-20081120-branchpoint:1.3
	reverse-20080930-branch:1.3.0.4
	reverse-20080930-branchpoint:1.3
	reverse-20080717-branch:1.3.0.2
	reverse-20080717-branchpoint:1.3
	msnyder-reverse-20080609-branch:1.2.0.4
	msnyder-reverse-20080609-branchpoint:1.2
	gdb_6_8-2008-03-27-release:1.2
	gdb_6_8-branch:1.2.0.2
	gdb_6_8-2008-02-26-branchpoint:1.2;
locks; strict;
comment	@ * @;


1.14
date	2013.01.01.06.33.00;	author brobecke;	state Exp;
branches;
next	1.13;

1.13
date	2012.03.06.22.48.53;	author shebs;	state Exp;
branches;
next	1.12;

1.12
date	2012.01.04.08.17.24;	author brobecke;	state Exp;
branches;
next	1.11;

1.11
date	2011.12.17.06.03.21;	author ndreys;	state Exp;
branches;
next	1.10;

1.10
date	2011.08.28.20.43.43;	author jkratoch;	state Exp;
branches
	1.10.2.1;
next	1.9;

1.9
date	2011.08.28.20.39.29;	author jkratoch;	state Exp;
branches;
next	1.8;

1.8
date	2011.01.12.21.09.39;	author tromey;	state Exp;
branches;
next	1.7;

1.7
date	2011.01.01.15.33.25;	author brobecke;	state Exp;
branches;
next	1.6;

1.6
date	2010.05.06.00.32.37;	author msnyder;	state Exp;
branches;
next	1.5;

1.5
date	2010.01.01.07.31.50;	author brobecke;	state Exp;
branches;
next	1.4;

1.4
date	2009.01.03.05.57.57;	author brobecke;	state Exp;
branches;
next	1.3;

1.3
date	2008.06.25.15.15.42;	author vprus;	state Exp;
branches;
next	1.2;

1.2
date	2008.01.01.22.53.14;	author drow;	state Exp;
branches;
next	1.1;

1.1
date	2007.11.30.21.50.19;	author drow;	state Exp;
branches;
next	;

1.10.2.1
date	2012.01.06.04.43.40;	author brobecke;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Update years in copyright notice for the GDB files.

Two modifications:
  1. The addition of 2013 to the copyright year range for every file;
  2. The use of a single year range, instead of potentially multiple
     year ranges, as approved by the FSF.
@
text
@/* MI Command Set - target commands.
   Copyright (C) 2007-2013 Free Software Foundation, Inc.

   This file is part of GDB.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

#include "defs.h"
#include "mi-cmds.h"
#include "mi-getopt.h"
#include "remote.h"

/* Get a file from the target.  */

void
mi_cmd_target_file_get (char *command, char **argv, int argc)
{
  int oind = 0;
  char *oarg;
  const char *remote_file, *local_file;
  static const struct mi_opt opts[] =
    {
      { 0, 0, 0 }
    };
  static const char prefix[] = "-target-file-get";

  if (mi_getopt (prefix, argc, argv, opts, &oind, &oarg) != -1
      || oind != argc - 2)
    error (_("-target-file-get: Usage: REMOTE_FILE LOCAL_FILE"));

  remote_file = argv[oind];
  local_file = argv[oind + 1];

  remote_file_get (remote_file, local_file, 0);
}

/* Send a file to the target.  */

void
mi_cmd_target_file_put (char *command, char **argv, int argc)
{
  int oind = 0;
  char *oarg;
  const char *remote_file, *local_file;
  static const struct mi_opt opts[] =
    {
      { 0, 0, 0 }
    };
  static const char prefix[] = "-target-file-put";

  if (mi_getopt (prefix, argc, argv, opts, &oind, &oarg) != -1
      || oind != argc - 2)
    error (_("-target-file-put: Usage: LOCAL_FILE REMOTE_FILE"));

  local_file = argv[oind];
  remote_file = argv[oind + 1];

  remote_file_put (local_file, remote_file, 0);
}

/* Delete a file on the target.  */

void
mi_cmd_target_file_delete (char *command, char **argv, int argc)
{
  int oind = 0;
  char *oarg;
  const char *remote_file;
  static const struct mi_opt opts[] =
    {
      { 0, 0, 0 }
    };
  static const char prefix[] = "-target-file-delete";

  if (mi_getopt (prefix, argc, argv, opts, &oind, &oarg) != -1
      || oind != argc - 1)
    error (_("-target-file-delete: Usage: REMOTE_FILE"));

  remote_file = argv[oind];

  remote_file_delete (remote_file, 0);
}

@


1.13
log
@	* mi/mi-cmd-break.c: Enforce coding standards, fix comments.
	* mi/mi-cmd-disas.c: Ditto.
	* mi/mi-cmd-env.c: Ditto.
	* mi/mi-cmd-file.c: Ditto.
	* mi/mi-cmd-stack.c: Ditto.
	* mi/mi-cmd-target.c: Ditto.
	* mi/mi-cmd-var.c: Ditto.
	* mi/mi-cmds.c: Ditto.
	* mi/mi-cmds.h: Ditto.
	* mi/mi-console.c: Ditto.
	* mi/mi-getopt.c: Ditto.
	* mi/mi-getopt.h: Ditto.
	* mi/mi-interp.c: Ditto.
	* mi/mi-main.c: Ditto.
	* mi/mi-out.c: Ditto.
	* mi/mi-parse.c: Ditto.
	* mi/mi-parse.h: Ditto.
	* mi/mi-symbol-cmds.c: Ditto.

	* mi/mi-getopt.h: Move mi_opt struct up.
	* mi/mi-main.c (captured_mi_execute_command): Remove redundant
	return.
	* mi/mi-out.c (_initialize_mi_out): Remove empty initialize.
@
text
@d2 1
a2 1
   Copyright (C) 2007-2012 Free Software Foundation, Inc.
@


1.12
log
@Copyright year update in most files of the GDB Project.

gdb/ChangeLog:

        Copyright year update in most files of the GDB Project.
@
text
@d33 3
a35 3
  {
    { 0, 0, 0 }
  };
d57 3
a59 3
  {
    { 0, 0, 0 }
  };
d81 3
a83 3
  {
    { 0, 0, 0 }
  };
@


1.11
log
@* mi/mi-cmd-target.c (mi_cmd_target_file_get): Rename `optind' and
`optarg' to `oind' and `oarg', respectively(-Wshadow).
(mi_cmd_target_file_put): Ditto.
(mi_cmd_target_file_delete): Ditto.
@
text
@d2 1
a2 1
   Copyright (C) 2007, 2008, 2009, 2010, 2011 Free Software Foundation, Inc.
@


1.10
log
@gdb/
	Code cleanup.
	* mi/mi-cmd-stack.c (list_args_or_locals): Remove stb initialization
	and the static keyword.
	* mi/mi-cmd-target.c (mi_cmd_target_file_get, mi_cmd_target_file_put):
	Make prefix an array.
	* mi/mi-cmd-target.c (mi_cmd_target_file_delete): Likewise.
	* mi/mi-main.c (get_register): Remove stb initialization and the static
	keyword.
@
text
@d29 2
a30 2
  int optind = 0;
  char *optarg;
d38 2
a39 2
  if (mi_getopt (prefix, argc, argv, opts, &optind, &optarg) != -1
      || optind != argc - 2)
d42 2
a43 2
  remote_file = argv[optind];
  local_file = argv[optind + 1];
d53 2
a54 2
  int optind = 0;
  char *optarg;
d62 2
a63 2
  if (mi_getopt (prefix, argc, argv, opts, &optind, &optarg) != -1
      || optind != argc - 2)
d66 2
a67 2
  local_file = argv[optind];
  remote_file = argv[optind + 1];
d77 2
a78 2
  int optind = 0;
  char *optarg;
d86 2
a87 2
  if (mi_getopt (prefix, argc, argv, opts, &optind, &optarg) != -1
      || optind != argc - 1)
d90 1
a90 1
  remote_file = argv[optind];
@


1.10.2.1
log
@Copyright year update in most files of the GDB Project.

gdb/ChangeLog:

        Copyright year update in most files of the GDB Project.
@
text
@d2 1
a2 1
   Copyright (C) 2007-2012 Free Software Foundation, Inc.
@


1.9
log
@gdb/
	Code cleanup - make mi_opt const.
	* mi/mi-cmd-break.c (mi_cmd_break_insert, mi_cmd_break_watch): Make
	opts const.
	* mi/mi-cmd-disas.c (mi_cmd_disassemble): Likewise.
	* mi/mi-cmd-env.c (mi_cmd_env_path): Likewise.
	(mi_cmd_env_dir): Likewise.
	* mi/mi-cmd-target.c (mi_cmd_target_file_get): Likewise.
	(mi_cmd_target_file_put): Likewise.
	* mi/mi-cmd-target.c (mi_cmd_target_file_delete): Likewise.
	* mi/mi-cmd-var.c (mi_cmd_var_evaluate_expression): Likewise.
	* mi/mi-getopt.c (mi_getopt): Make opts and opt const.
	(mi_valid_noargs): Make opts const.
	* mi/mi-getopt.h (mi_getopt): Make opts and opt const.
	* mi/mi-main.c (mi_cmd_list_thread_groups): Make opts const.
	(mi_cmd_data_read_memory): Likewise.
	(mi_cmd_data_read_memory_bytes): Likewise.
	(mi_cmd_data_write_memory): Likewise.
@
text
@d36 1
a36 1
  static const char *prefix = "-target-file-get";
d60 1
a60 1
  static const char *prefix = "-target-file-put";
d84 1
a84 1
  static const char *prefix = "-target-file-delete";
@


1.8
log
@gdb
	* mi/mi-symbol-cmds.c (mi_cmd_symbol_list_lines): Fix error
	messages.
	* mi/mi-main.c (mi_cmd_thread_select): Fix error messages.
	(mi_cmd_thread_list_ids): Likewise.
	(mi_cmd_data_list_changed_registers): Likewise.
	(mi_cmd_data_list_register_values): Likewise.
	(mi_cmd_data_write_register_values): Likewise.
	(mi_cmd_data_evaluate_expression): Likewise.
	(mi_cmd_data_read_memory): Likewise.
	(mi_cmd_data_read_memory_bytes): Likewise.
	(mi_cmd_data_write_memory): Likewise.
	(mi_cmd_enable_timings): Likewise.
	* mi/mi-interp.c (mi_cmd_interpreter_exec): Fix error messages.
	* mi/mi-cmd-var.c (mi_cmd_var_create): Fix error messages.
	(mi_cmd_var_delete): Likewise.
	(mi_cmd_var_set_format): Likewise.
	(mi_cmd_var_show_format): Likewise.
	(mi_cmd_var_info_num_children): Likewise.
	(mi_cmd_var_list_children): Likewise.
	(mi_cmd_var_info_type): Likewise.
	(mi_cmd_var_info_expression): Likewise.
	(mi_cmd_var_show_attributes): Likewise.
	(mi_cmd_var_assign): Likewise.
	(mi_cmd_var_update): Likewise.
	(mi_cmd_enable_pretty_printing): Likewise.
	(mi_cmd_var_set_update_range): Likewise.
	* mi/mi-cmd-target.c (mi_cmd_target_file_get): Fix error
	messages.
	(mi_cmd_target_file_put): Likewise.
	(mi_cmd_target_file_delete): Likewise.
	* mi/mi-cmd-stack.c (mi_cmd_stack_list_frames): Fix error
	messages.
	(mi_cmd_stack_info_depth): Likewise.
	(mi_cmd_stack_list_locals): Likewise.
	(mi_cmd_stack_list_args): Likewise.
	(mi_cmd_stack_select_frame): Likewise.
	(mi_cmd_stack_select_frame): Likewise.
	(mi_cmd_stack_info_frame): Likewise.
	* mi/mi-cmd-file.c (mi_cmd_file_list_exec_source_file): Fix error
	messages.
	(mi_cmd_file_list_exec_source_files): Likewise.
	* mi/mi-cmd-env.c (mi_cmd_env_pwd): Fix error messages.
	(mi_cmd_env_cd): Likewise.
	(mi_cmd_env_path): Likewise.
	(mi_cmd_env_dir): Likewise.
	(mi_cmd_inferior_tty_show): Likewise.
	* mi/mi-cmd-disas.c (mi_cmd_disassemble): Fix error messages.
	* mi/mi-cmd-break.c (mi_cmd_break_insert): Fix error messages.
	(mi_cmd_break_watch): Likewise.
gdb/testsuite
	* gdb.mi/gdb2549.exp: Update for error message changes.
	* gdb.mi/mi-cli.exp: Likewise.
	* gdb.mi/mi-disassemble.exp: Likewise.
	* gdb.mi/mi-pthreads.exp: Likewise.
	* gdb.mi/mi-regs.exp: Likewise.
	* gdb.mi/mi-stack.exp: Likewise.
	* gdb.mi/mi-var-block.exp: Likewise.
	* gdb.mi/mi-var-cmd.exp: Likewise.
	* gdb.mi/mi2-cli.exp: Likewise.
	* gdb.mi/mi2-disassemble.exp: Likewise.
	* gdb.mi/mi2-pthreads.exp: Likewise.
	* gdb.mi/mi2-regs.exp: Likewise.
	* gdb.mi/mi2-stack.exp: Likewise.
	* gdb.mi/mi2-var-block.exp: Likewise.
	* gdb.mi/mi2-var-cmd.exp: Likewise.
@
text
@d32 1
a32 1
  static struct mi_opt opts[] =
d56 1
a56 1
  static struct mi_opt opts[] =
d80 1
a80 1
  static struct mi_opt opts[] =
@


1.7
log
@run copyright.sh for 2011.
@
text
@d36 1
a36 1
  static const char *prefix = "mi_cmd_target_file_get";
d40 1
a40 1
    error (_("mi_cmd_target_file_get: Usage: REMOTE_FILE LOCAL_FILE"));
d60 1
a60 1
  static const char *prefix = "mi_cmd_target_file_put";
d64 1
a64 1
    error (_("mi_cmd_target_file_put: Usage: LOCAL_FILE REMOTE_FILE"));
d84 1
a84 1
  static const char *prefix = "mi_cmd_target_file_delete";
d88 1
a88 1
    error (_("mi_cmd_target_file_delete: Usage: REMOTE_FILE"));
@


1.6
log
@2010-05-05  Michael Snyder  <msnyder@@vmware.com>

	* mi/mi-out.c (mi_table_begin): Delete unused variable.
	* mi/mi-cmd-var.c (print_varobj): Delete unused variable.
	(mi_cmd_var_list_children): Delete unused variable.
	(varobj_update_one): Delete unused variable.
	* mi/mi-cmd-break.c (mi_cmd_break_insert): Delete unused variables.
	* mi/mi-cmd-stack.c (mi_cmd_stack_list_locals):
	Delete unused variable.
	(mi_cmd_stack_list_variables): Delete unused variable.
	(list_args_or_locals): Delete unused variable.
	* mi/mi-cmd-file.c (mi_cmd_file_list_exec_source_file):
	Delete unused variables.
	(mi_cmd_file_list_exec_source_files): Delete unused variable.
	* mi/mi-cmd-target.c (mi_cmd_target_file_delete):
	Delete unused variable.
	* mi/mi-interp.c (mi_interpreter_exec): Delete unused variable.
	(mi_cmd_interpreter_exec): Delete unused variable.
	(mi_on_normal_stop): Delete unused variable.
	* mi/mi-main.c (run_one_inferior): Delete unused variable.
	(print_one_inferior): Delete unused variables.
	(mi_execute_command): Delete unused variable.
	(mi_cmd_execute): Delete unused variable.
	(timestamp): Delete unused variable.
@
text
@d2 1
a2 1
   Copyright (C) 2007, 2008, 2009, 2010 Free Software Foundation, Inc.
@


1.5
log
@Update copyright year in most headers.

Automatic update by copyright.sh.
@
text
@d79 1
a79 1
  const char *remote_file, *local_file;
@


1.4
log
@        Updated copyright notices for most files.
@
text
@d2 1
a2 1
   Copyright (C) 2007, 2008, 2009 Free Software Foundation, Inc.
@


1.3
log
@	Kill the return value for all MI command functions.
	* mi/mi-cmds.h (enum mi_cmd_result): Remove.
	(mi_cmd_argv_ftype): Change return type to void.

	* mi/mi-main.c: Adjust all function that implement
	MI commands to return nothing.
	(struct captured_mi_execute_command_actions):
	Remove the rc field.
	(mi_cmd_execute): Return nothing.
	(mi_execute_async_cli_command): Return nothing.
	(mi_cmd_exec_interrupt): Don't print ^done here.
	(mi_cmd_target_select): Don't print ^connected here.
	(captured_mi_execute_command): Don't check for MI_CMD_DONE.
	Special-case -target-select and output ^connected, not ^done.

	* mi/mi-cmd-break.c: Adjust.
	* mi/mi-cmd-disas.c: Adjust.
	* mi/mi-cmd-env.c: Adjust.
	* mi/mi-cmd-file.c: Adjust.
	* mi/mi-cmd-stack.c: Adjust.
	* mi/mi-cmd-target.c: Adjust.
	* mi/mi-cmd-var.c: Adjust.
	* mi/mi-interp.c: Adjust.
	* mi/mi-symbol-cmds.c: Adjust.
@
text
@d2 1
a2 1
   Copyright (C) 2007, 2008 Free Software Foundation, Inc.
@


1.2
log
@	Updated copyright notices for most files.
@
text
@d26 1
a26 1
enum mi_cmd_result
a45 2

  return MI_CMD_DONE;
d50 1
a50 1
enum mi_cmd_result
a69 2

  return MI_CMD_DONE;
d74 1
a74 1
enum mi_cmd_result
a92 2

  return MI_CMD_DONE;
@


1.1
log
@	* remote.c (remote_cmdlist): New variable.
	(PACKET_vFile_open, PACKET_vFile_pread, PACKET_vFile_pwrite)
	(PACKET_vFile_close, PACKET_vFile_unlink): New constants.
	(remote_buffer_add_string, remote_buffer_add_bytes)
	(remote_buffer_add_int, remote_hostio_parse_result)
	(remote_hostio_send_command, remote_hostio_open, remote_hostio_pwrite)
	(remote_hostio_pread, remote_hostio_close, remote_hostio_unlink)
	(remote_fileio_errno_to_host, remote_hostio_error, fclose_cleanup)
	(remote_hostio_close_cleanup, remote_file_put, remote_file_get)
	(remote_file_delete, remote_put_command, remote_get_command)
	(remote_delete_command, remote_command): New functions.
	(_initialize_remote): Register new packets and commands.
	* Makefile.in (gdb_fileio_h): New variable.
	(remote.o): Update.
	(SUBDIR_MI_OBS): Add mi-cmd-target.o.
	(SUBDIR_MI_SRCS): Add mi/mi-cmd-target.c.
	(mi-cmd-target.o): New rule.
	* mi/mi-cmd-target.c: New file.
	* mi/mi-cmds.c (mi_cmds): Add target-file-delete, target-file-get,
	and target-file-put.
	* mi/mi-cmds.h (mi_cmd_target_file_get, mi_cmd_target_file_put)
	(mi_cmd_target_file_delete): Declare.
	* remote.h (remote_file_put, remote_file_get, remote_file_delete):
	Declare.
	* NEWS: Describe new file transfer support.

	* gdb.texinfo (Debugging Programs with Multiple Processes): Correct
	formatting.
	(Remote Debugging): Add File Transfer section.
	(Remote Configuration): Document Host I/O packets.
	(GDB/MI): Add GDB/MI File Transfer Commands section.
	(Remote Protocol): Add Host I/O Packets section.
	(Packets): Add vFile.

	* Makefile.in (OBS): Add hostio.o.
	(hostio.o): New rule.
	* server.h (handle_vFile): Declare.
	* hostio.c: New file.
	* server.c (handle_v_requests): Take packet_len and new_packet_len
	for binary packets.  Call handle_vFile.
	(main): Update call to handle_v_requests.

	* gdb.server/file-transfer.exp, gdb.server/transfer.txt,
	gdb.mi/mi-file-transfer.exp: New.
@
text
@d2 1
a2 1
   Copyright (C) 2007 Free Software Foundation, Inc.
@

