head	1.244;
access;
symbols
	gdb_7_6_1-2013-08-30-release:1.228.2.1
	gdb_7_6-2013-04-26-release:1.228
	gdb_7_6-branch:1.228.0.2
	gdb_7_6-2013-03-12-branchpoint:1.228
	gdb_7_5_1-2012-11-29-release:1.219
	gdb_7_5-2012-08-17-release:1.219
	gdb_7_5-branch:1.219.0.2
	gdb_7_5-2012-07-18-branchpoint:1.219
	gdb_7_4_1-2012-04-26-release:1.209.2.2
	gdb_7_4-2012-01-24-release:1.209.2.1
	gdb_7_4-branch:1.209.0.2
	gdb_7_4-2011-12-13-branchpoint:1.209
	gdb_7_3_1-2011-09-04-release:1.195
	gdb_7_3-2011-07-26-release:1.195
	gdb_7_3-branch:1.195.0.2
	gdb_7_3-2011-04-01-branchpoint:1.195
	gdb_7_2-2010-09-02-release:1.178.2.2
	gdb_7_2-branch:1.178.0.2
	gdb_7_2-2010-07-07-branchpoint:1.178
	gdb_7_1-2010-03-18-release:1.166.2.1
	gdb_7_1-branch:1.166.0.2
	gdb_7_1-2010-02-18-branchpoint:1.166
	gdb_7_0_1-2009-12-22-release:1.157
	gdb_7_0-2009-10-06-release:1.157
	gdb_7_0-branch:1.157.0.2
	gdb_7_0-2009-09-16-branchpoint:1.157
	arc-sim-20090309:1.108
	msnyder-checkpoint-072509-branch:1.156.0.2
	msnyder-checkpoint-072509-branchpoint:1.156
	arc-insight_6_8-branch:1.108.0.6
	arc-insight_6_8-branchpoint:1.108
	insight_6_8-branch:1.108.0.4
	insight_6_8-branchpoint:1.108
	reverse-20081226-branch:1.139.0.2
	reverse-20081226-branchpoint:1.139
	multiprocess-20081120-branch:1.137.0.2
	multiprocess-20081120-branchpoint:1.137
	reverse-20080930-branch:1.131.0.2
	reverse-20080930-branchpoint:1.131
	reverse-20080717-branch:1.128.0.2
	reverse-20080717-branchpoint:1.128
	msnyder-reverse-20080609-branch:1.115.0.2
	msnyder-reverse-20080609-branchpoint:1.115
	drow-reverse-20070409-branch:1.94.0.2
	drow-reverse-20070409-branchpoint:1.94
	gdb_6_8-2008-03-27-release:1.108
	gdb_6_8-branch:1.108.0.2
	gdb_6_8-2008-02-26-branchpoint:1.108
	gdb_6_7_1-2007-10-29-release:1.103.2.1
	gdb_6_7-2007-10-10-release:1.103
	gdb_6_7-branch:1.103.0.2
	gdb_6_7-2007-09-07-branchpoint:1.103
	insight_6_6-20070208-release:1.85.2.1
	gdb_6_6-2006-12-18-release:1.85.2.1
	gdb_6_6-branch:1.85.0.2
	gdb_6_6-2006-11-15-branchpoint:1.85
	insight_6_5-20061003-release:1.84
	gdb-csl-symbian-6_4_50_20060226-12:1.83
	gdb-csl-sourcerygxx-3_4_4-25:1.80
	nickrob-async-20060828-mergepoint:1.85
	gdb-csl-symbian-6_4_50_20060226-11:1.83
	gdb-csl-sourcerygxx-4_1-17:1.83
	gdb-csl-20060226-branch-local-2:1.83
	gdb-csl-sourcerygxx-4_1-14:1.83
	gdb-csl-sourcerygxx-4_1-13:1.83
	gdb-csl-sourcerygxx-4_1-12:1.83
	gdb-csl-sourcerygxx-3_4_4-21:1.83
	gdb_6_5-20060621-release:1.84
	gdb-csl-sourcerygxx-4_1-9:1.83
	gdb-csl-sourcerygxx-4_1-8:1.83
	gdb-csl-sourcerygxx-4_1-7:1.83
	gdb-csl-arm-2006q1-6:1.83
	gdb-csl-sourcerygxx-4_1-6:1.83
	gdb-csl-symbian-6_4_50_20060226-10:1.83
	gdb-csl-symbian-6_4_50_20060226-9:1.83
	gdb-csl-symbian-6_4_50_20060226-8:1.83
	gdb-csl-coldfire-4_1-11:1.83
	gdb-csl-sourcerygxx-3_4_4-19:1.83
	gdb-csl-coldfire-4_1-10:1.83
	gdb_6_5-branch:1.84.0.4
	gdb_6_5-2006-05-14-branchpoint:1.84
	gdb-csl-sourcerygxx-4_1-5:1.83
	nickrob-async-20060513-branch:1.84.0.2
	nickrob-async-20060513-branchpoint:1.84
	gdb-csl-sourcerygxx-4_1-4:1.83
	msnyder-reverse-20060502-branch:1.83.0.12
	msnyder-reverse-20060502-branchpoint:1.83
	gdb-csl-morpho-4_1-4:1.83
	gdb-csl-sourcerygxx-3_4_4-17:1.83
	readline_5_1-import-branch:1.83.0.10
	readline_5_1-import-branchpoint:1.83
	gdb-csl-20060226-branch-merge-to-csl-symbian-1:1.83
	gdb-csl-symbian-20060226-branch:1.83.0.8
	gdb-csl-symbian-20060226-branchpoint:1.83
	gdb-csl-20060226-branch-merge-to-csl-local-1:1.83
	msnyder-reverse-20060331-branch:1.83.0.6
	msnyder-reverse-20060331-branchpoint:1.83
	gdb-csl-available-20060303-branch:1.83.0.4
	gdb-csl-available-20060303-branchpoint:1.83
	gdb-csl-20060226-branch:1.83.0.2
	gdb-csl-20060226-branchpoint:1.83
	gdb_6_4-20051202-release:1.80.4.1
	msnyder-fork-checkpoint-branch:1.81.0.2
	msnyder-fork-checkpoint-branchpoint:1.81
	gdb-csl-gxxpro-6_3-branch:1.80.0.6
	gdb-csl-gxxpro-6_3-branchpoint:1.80
	gdb_6_4-branch:1.80.0.4
	gdb_6_4-2005-11-01-branchpoint:1.80
	gdb-csl-arm-20051020-branch:1.80.0.2
	gdb-csl-arm-20051020-branchpoint:1.80
	msnyder-tracepoint-checkpoint-branch:1.78.0.2
	msnyder-tracepoint-checkpoint-branchpoint:1.78
	gdb-csl-arm-20050325-2005-q1b:1.76
	gdb-csl-arm-20050325-2005-q1a:1.76
	csl-arm-20050325-branch:1.76.0.2
	csl-arm-20050325-branchpoint:1.76
	gdb-post-i18n-errorwarning-20050211:1.75
	gdb-pre-i18n-errorwarning-20050211:1.75
	gdb_6_3-20041109-release:1.65
	gdb_6_3-branch:1.65.0.2
	gdb_6_3-20041019-branchpoint:1.65
	drow_intercu-merge-20040921:1.65
	drow_intercu-merge-20040915:1.65
	jimb-gdb_6_2-e500-branch:1.63.0.6
	jimb-gdb_6_2-e500-branchpoint:1.63
	gdb_6_2-20040730-release:1.63
	gdb_6_2-branch:1.63.0.2
	gdb_6_2-2004-07-10-gmt-branchpoint:1.63
	gdb_6_1_1-20040616-release:1.58
	gdb_6_1-2004-04-05-release:1.58
	drow_intercu-merge-20040402:1.58
	drow_intercu-merge-20040327:1.58
	ezannoni_pie-20040323-branch:1.58.0.8
	ezannoni_pie-20040323-branchpoint:1.58
	cagney_tramp-20040321-mergepoint:1.58
	cagney_tramp-20040309-branch:1.58.0.6
	cagney_tramp-20040309-branchpoint:1.58
	gdb_6_1-branch:1.58.0.4
	gdb_6_1-2004-03-01-gmt-branchpoint:1.58
	drow_intercu-20040221-branch:1.58.0.2
	drow_intercu-20040221-branchpoint:1.58
	cagney_bfdfile-20040213-branch:1.56.0.4
	cagney_bfdfile-20040213-branchpoint:1.56
	drow-cplus-merge-20040208:1.56
	carlton_dictionary-20040126-merge:1.56
	cagney_bigcore-20040122-branch:1.56.0.2
	cagney_bigcore-20040122-branchpoint:1.56
	drow-cplus-merge-20040113:1.56
	drow-cplus-merge-20031224:1.56
	drow-cplus-merge-20031220:1.56
	carlton_dictionary-20031215-merge:1.56
	drow-cplus-merge-20031214:1.56
	carlton-dictionary-20031111-merge:1.56
	gdb_6_0-2003-10-04-release:1.48.4.2
	kettenis_sparc-20030918-branch:1.53.0.2
	kettenis_sparc-20030918-branchpoint:1.53
	carlton_dictionary-20030917-merge:1.53
	ezannoni_pie-20030916-branchpoint:1.52
	ezannoni_pie-20030916-branch:1.52.0.2
	cagney_x86i386-20030821-branch:1.51.0.2
	cagney_x86i386-20030821-branchpoint:1.51
	carlton_dictionary-20030805-merge:1.50
	carlton_dictionary-20030627-merge:1.48
	gdb_6_0-branch:1.48.0.4
	gdb_6_0-2003-06-23-branchpoint:1.48
	jimb-ppc64-linux-20030613-branch:1.48.0.2
	jimb-ppc64-linux-20030613-branchpoint:1.48
	cagney_convert-20030606-branch:1.46.0.6
	cagney_convert-20030606-branchpoint:1.46
	cagney_writestrings-20030508-branch:1.45.0.4
	cagney_writestrings-20030508-branchpoint:1.45
	jimb-ppc64-linux-20030528-branch:1.46.0.4
	jimb-ppc64-linux-20030528-branchpoint:1.46
	carlton_dictionary-20030523-merge:1.46
	cagney_fileio-20030521-branch:1.46.0.2
	cagney_fileio-20030521-branchpoint:1.46
	kettenis_i386newframe-20030517-mergepoint:1.46
	jimb-ppc64-linux-20030509-branch:1.45.0.2
	jimb-ppc64-linux-20030509-branchpoint:1.45
	kettenis_i386newframe-20030504-mergepoint:1.42
	carlton_dictionary-20030430-merge:1.42
	kettenis_i386newframe-20030419-branch:1.42.0.10
	kettenis_i386newframe-20030419-branchpoint:1.42
	carlton_dictionary-20030416-merge:1.42
	cagney_frameaddr-20030409-mergepoint:1.42
	kettenis_i386newframe-20030406-branch:1.42.0.8
	kettenis_i386newframe-20030406-branchpoint:1.42
	cagney_frameaddr-20030403-branchpoint:1.42
	cagney_frameaddr-20030403-branch:1.42.0.6
	cagney_framebase-20030330-mergepoint:1.42
	cagney_framebase-20030326-branch:1.42.0.4
	cagney_framebase-20030326-branchpoint:1.42
	cagney_lazyid-20030317-branch:1.42.0.2
	cagney_lazyid-20030317-branchpoint:1.42
	kettenis-i386newframe-20030316-mergepoint:1.42
	offbyone-20030313-branch:1.41.0.6
	offbyone-20030313-branchpoint:1.41
	kettenis-i386newframe-20030308-branch:1.41.0.4
	kettenis-i386newframe-20030308-branchpoint:1.41
	carlton_dictionary-20030305-merge:1.41
	cagney_offbyone-20030303-branch:1.41.0.2
	cagney_offbyone-20030303-branchpoint:1.41
	carlton_dictionary-20030207-merge:1.40
	interps-20030203-mergepoint:1.39
	interps-20030202-branch:1.39.0.2
	interps-20030202-branchpoint:1.39
	cagney-unwind-20030108-branch:1.38.0.2
	cagney-unwind-20030108-branchpoint:1.38
	carlton_dictionary-20021223-merge:1.38
	gdb_5_3-2002-12-12-release:1.30
	carlton_dictionary-20021115-merge:1.37
	kseitz_interps-20021105-merge:1.35
	kseitz_interps-20021103-merge:1.35
	drow-cplus-merge-20021020:1.33
	drow-cplus-merge-20021025:1.35
	carlton_dictionary-20021025-merge:1.35
	carlton_dictionary-20021011-merge:1.33
	drow-cplus-branch:1.33.0.2
	drow-cplus-branchpoint:1.33
	kseitz_interps-20020930-merge:1.31
	carlton_dictionary-20020927-merge:1.31
	carlton_dictionary-branch:1.31.0.2
	carlton_dictionary-20020920-branchpoint:1.31
	gdb_5_3-branch:1.30.0.8
	gdb_5_3-2002-09-04-branchpoint:1.30
	kseitz_interps-20020829-merge:1.30
	cagney_sysregs-20020825-branch:1.30.0.6
	cagney_sysregs-20020825-branchpoint:1.30
	readline_4_3-import-branch:1.30.0.4
	readline_4_3-import-branchpoint:1.30
	gdb_5_2_1-2002-07-23-release:1.26
	kseitz_interps-20020528-branch:1.30.0.2
	kseitz_interps-20020528-branchpoint:1.30
	cagney_regbuf-20020515-branch:1.29.0.4
	cagney_regbuf-20020515-branchpoint:1.29
	jimb-macro-020506-branch:1.29.0.2
	jimb-macro-020506-branchpoint:1.29
	gdb_5_2-2002-04-29-release:1.26
	gdb_5_2-branch:1.26.0.2
	gdb_5_2-2002-03-03-branchpoint:1.26
	gdb_5_1_1-2002-01-24-release:1.23
	gdb_5_1_0_1-2002-01-03-release:1.23
	cygnus_cvs_20020108_pre:1.25
	gdb_5_1_0_1-2002-01-03-branch:1.23.0.6
	gdb_5_1_0_1-2002-01-03-branchpoint:1.23
	gdb_5_1-2001-11-21-release:1.23
	gdb_s390-2001-09-26-branch:1.23.0.4
	gdb_s390-2001-09-26-branchpoint:1.23
	gdb_5_1-2001-07-29-branch:1.23.0.2
	gdb_5_1-2001-07-29-branchpoint:1.23
	dberlin-typesystem-branch:1.19.0.2
	dberlin-typesystem-branchpoint:1.19
	gdb-post-ptid_t-2001-05-03:1.12
	gdb-pre-ptid_t-2001-05-03:1.12
	insight-precleanup-2001-01-01:1.9
	gdb-post-protoization-2000-07-29:1.7
	gdb-pre-protoization-2000-07-29:1.6
	gdb-premipsmulti-2000-06-06-branch:1.6.0.2
	gdb-premipsmulti-2000-06-06-branchpoint:1.6
	gdb-post-params-removal-2000-06-04:1.6
	gdb-pre-params-removal-2000-06-04:1.6
	gdb-post-params-removal-2000-05-28:1.6
	gdb-pre-params-removal-2000-05-28:1.6
	gdb_5_0-2000-05-19-release:1.3
	gdb_4_18_2-2000-05-18-release:1.3
	gdb_4_95_1-2000-05-11-snapshot:1.3
	gdb_4_95_0-2000-04-27-snapshot:1.3
	gdb_5_0-2000-04-10-branch:1.3.0.2
	gdb_5_0-2000-04-10-branchpoint:1.3;
locks; strict;
comment	@ * @;


1.244
date	2013.10.04.08.35.30;	author brobecke;	state Exp;
branches;
next	1.243;

1.243
date	2013.10.02.16.15.45;	author palves;	state Exp;
branches;
next	1.242;

1.242
date	2013.09.30.11.50.12;	author luisgpm;	state Exp;
branches;
next	1.241;

1.241
date	2013.09.17.18.26.39;	author palves;	state Exp;
branches;
next	1.240;

1.240
date	2013.08.30.15.37.37;	author palves;	state Exp;
branches;
next	1.239;

1.239
date	2013.08.28.17.52.03;	author jkratoch;	state Exp;
branches;
next	1.238;

1.238
date	2013.07.25.10.39.39;	author aburgess;	state Exp;
branches;
next	1.237;

1.237
date	2013.07.09.16.57.09;	author devans;	state Exp;
branches;
next	1.236;

1.236
date	2013.06.26.08.17.27;	author qiyao;	state Exp;
branches;
next	1.235;

1.235
date	2013.06.26.08.01.57;	author qiyao;	state Exp;
branches;
next	1.234;

1.234
date	2013.06.20.00.39.11;	author qiyao;	state Exp;
branches;
next	1.233;

1.233
date	2013.06.08.00.21.42;	author qiyao;	state Exp;
branches;
next	1.232;

1.232
date	2013.05.30.17.04.47;	author tromey;	state Exp;
branches;
next	1.231;

1.231
date	2013.05.20.20.29.44;	author tromey;	state Exp;
branches;
next	1.230;

1.230
date	2013.03.14.09.02.30;	author qiyao;	state Exp;
branches;
next	1.229;

1.229
date	2013.03.14.08.50.55;	author qiyao;	state Exp;
branches;
next	1.228;

1.228
date	2013.03.12.18.50.39;	author kseitz;	state Exp;
branches
	1.228.2.1;
next	1.227;

1.227
date	2013.02.14.10.19.39;	author abidh;	state Exp;
branches;
next	1.226;

1.226
date	2013.01.31.18.37.38;	author aristovski;	state Exp;
branches;
next	1.225;

1.225
date	2013.01.01.06.33.01;	author brobecke;	state Exp;
branches;
next	1.224;

1.224
date	2012.11.13.21.19.10;	author tromey;	state Exp;
branches;
next	1.223;

1.223
date	2012.09.28.00.39.17;	author qiyao;	state Exp;
branches;
next	1.222;

1.222
date	2012.09.28.00.25.24;	author qiyao;	state Exp;
branches;
next	1.221;

1.221
date	2012.08.31.08.41.57;	author qiyao;	state Exp;
branches;
next	1.220;

1.220
date	2012.08.09.12.53.45;	author qiyao;	state Exp;
branches;
next	1.219;

1.219
date	2012.06.29.22.46.46;	author devans;	state Exp;
branches;
next	1.218;

1.218
date	2012.05.24.16.51.38;	author palves;	state Exp;
branches;
next	1.217;

1.217
date	2012.05.18.21.02.51;	author sergiodj;	state Exp;
branches;
next	1.216;

1.216
date	2012.04.24.14.26.22;	author marckhouzam;	state Exp;
branches;
next	1.215;

1.215
date	2012.03.27.19.08.37;	author palves;	state Exp;
branches;
next	1.214;

1.214
date	2012.03.14.07.58.05;	author jkratoch;	state Exp;
branches;
next	1.213;

1.213
date	2012.03.13.01.16.07;	author qiyao;	state Exp;
branches;
next	1.212;

1.212
date	2012.03.06.22.48.53;	author shebs;	state Exp;
branches;
next	1.211;

1.211
date	2012.01.04.08.17.24;	author brobecke;	state Exp;
branches;
next	1.210;

1.210
date	2011.12.17.06.14.45;	author ndreys;	state Exp;
branches;
next	1.209;

1.209
date	2011.12.06.18.54.40;	author tromey;	state Exp;
branches
	1.209.2.1;
next	1.208;

1.208
date	2011.11.20.23.59.48;	author shebs;	state Exp;
branches;
next	1.207;

1.207
date	2011.10.03.21.38.31;	author brobecke;	state Exp;
branches;
next	1.206;

1.206
date	2011.09.20.15.19.28;	author jsm28;	state Exp;
branches;
next	1.205;

1.205
date	2011.08.28.20.43.43;	author jkratoch;	state Exp;
branches;
next	1.204;

1.204
date	2011.08.28.20.39.29;	author jkratoch;	state Exp;
branches;
next	1.203;

1.203
date	2011.08.04.19.10.14;	author palves;	state Exp;
branches;
next	1.202;

1.202
date	2011.07.05.04.34.58;	author bauermann;	state Exp;
branches;
next	1.201;

1.201
date	2011.06.29.17.30.01;	author tromey;	state Exp;
branches;
next	1.200;

1.200
date	2011.05.26.18.23.32;	author palves;	state Exp;
branches;
next	1.199;

1.199
date	2011.05.20.16.31.31;	author palves;	state Exp;
branches;
next	1.198;

1.198
date	2011.05.13.04.34.25;	author bauermann;	state Exp;
branches;
next	1.197;

1.197
date	2011.04.27.10.17.37;	author vprus;	state Exp;
branches;
next	1.196;

1.196
date	2011.04.04.18.13.05;	author tromey;	state Exp;
branches;
next	1.195;

1.195
date	2011.03.18.18.40.08;	author palves;	state Exp;
branches;
next	1.194;

1.194
date	2011.03.18.14.22.35;	author muller;	state Exp;
branches;
next	1.193;

1.193
date	2011.02.21.23.40.46;	author msnyder;	state Exp;
branches;
next	1.192;

1.192
date	2011.01.25.17.00.27;	author palves;	state Exp;
branches;
next	1.191;

1.191
date	2011.01.25.12.47.25;	author palves;	state Exp;
branches;
next	1.190;

1.190
date	2011.01.12.21.09.39;	author tromey;	state Exp;
branches;
next	1.189;

1.189
date	2011.01.11.15.10.03;	author msnyder;	state Exp;
branches;
next	1.188;

1.188
date	2011.01.06.00.57.02;	author msnyder;	state Exp;
branches;
next	1.187;

1.187
date	2011.01.01.15.33.25;	author brobecke;	state Exp;
branches;
next	1.186;

1.186
date	2010.12.23.04.30.39;	author brobecke;	state Exp;
branches;
next	1.185;

1.185
date	2010.12.22.18.30.19;	author marckhouzam;	state Exp;
branches;
next	1.184;

1.184
date	2010.12.18.02.10.05;	author marckhouzam;	state Exp;
branches;
next	1.183;

1.183
date	2010.12.09.19.23.49;	author tromey;	state Exp;
branches;
next	1.182;

1.182
date	2010.11.12.18.46.42;	author marckhouzam;	state Exp;
branches;
next	1.181;

1.181
date	2010.09.01.19.03.54;	author marckhouzam;	state Exp;
branches;
next	1.180;

1.180
date	2010.08.13.13.22.44;	author vprus;	state Exp;
branches;
next	1.179;

1.179
date	2010.08.05.15.42.06;	author marckhouzam;	state Exp;
branches;
next	1.178;

1.178
date	2010.06.11.15.36.07;	author tromey;	state Exp;
branches
	1.178.2.1;
next	1.177;

1.177
date	2010.06.05.05.56.02;	author vprus;	state Exp;
branches;
next	1.176;

1.176
date	2010.05.17.20.49.39;	author msnyder;	state Exp;
branches;
next	1.175;

1.175
date	2010.05.06.00.32.38;	author msnyder;	state Exp;
branches;
next	1.174;

1.174
date	2010.03.23.22.05.46;	author vprus;	state Exp;
branches;
next	1.173;

1.173
date	2010.03.23.22.01.47;	author vprus;	state Exp;
branches;
next	1.172;

1.172
date	2010.03.23.21.50.11;	author vprus;	state Exp;
branches;
next	1.171;

1.171
date	2010.03.23.21.46.33;	author vprus;	state Exp;
branches;
next	1.170;

1.170
date	2010.03.18.13.25.18;	author uweigand;	state Exp;
branches;
next	1.169;

1.169
date	2010.02.24.23.11.28;	author palves;	state Exp;
branches;
next	1.168;

1.168
date	2010.02.24.07.51.46;	author vprus;	state Exp;
branches;
next	1.167;

1.167
date	2010.02.24.07.33.55;	author vprus;	state Exp;
branches;
next	1.166;

1.166
date	2010.02.18.19.17.00;	author palves;	state Exp;
branches
	1.166.2.1;
next	1.165;

1.165
date	2010.02.12.21.28.25;	author msnyder;	state Exp;
branches;
next	1.164;

1.164
date	2010.02.04.07.37.36;	author vprus;	state Exp;
branches;
next	1.163;

1.163
date	2010.01.12.23.05.52;	author devans;	state Exp;
branches;
next	1.162;

1.162
date	2010.01.12.21.40.24;	author vprus;	state Exp;
branches;
next	1.161;

1.161
date	2010.01.01.07.31.50;	author brobecke;	state Exp;
branches;
next	1.160;

1.160
date	2009.12.21.10.02.06;	author vprus;	state Exp;
branches;
next	1.159;

1.159
date	2009.10.30.17.34.53;	author vprus;	state Exp;
branches;
next	1.158;

1.158
date	2009.10.19.09.51.42;	author palves;	state Exp;
branches;
next	1.157;

1.157
date	2009.08.31.20.18.46;	author devans;	state Exp;
branches;
next	1.156;

1.156
date	2009.07.02.17.25.59;	author uweigand;	state Exp;
branches;
next	1.155;

1.155
date	2009.07.02.17.21.07;	author uweigand;	state Exp;
branches;
next	1.154;

1.154
date	2009.07.02.17.02.35;	author uweigand;	state Exp;
branches;
next	1.153;

1.153
date	2009.07.02.12.46.19;	author uweigand;	state Exp;
branches;
next	1.152;

1.152
date	2009.06.17.18.38.16;	author uweigand;	state Exp;
branches;
next	1.151;

1.151
date	2009.06.16.18.23.36;	author palves;	state Exp;
branches;
next	1.150;

1.150
date	2009.06.05.18.34.21;	author vprus;	state Exp;
branches;
next	1.149;

1.149
date	2009.05.28.01.09.20;	author tromey;	state Exp;
branches;
next	1.148;

1.148
date	2009.05.28.00.53.52;	author tromey;	state Exp;
branches;
next	1.147;

1.147
date	2009.04.08.06.58.37;	author vprus;	state Exp;
branches;
next	1.146;

1.146
date	2009.03.25.21.42.35;	author palves;	state Exp;
branches;
next	1.145;

1.145
date	2009.03.22.18.06.07;	author palves;	state Exp;
branches;
next	1.144;

1.144
date	2009.03.12.20.08.03;	author vprus;	state Exp;
branches;
next	1.143;

1.143
date	2009.03.12.19.54.54;	author vprus;	state Exp;
branches;
next	1.142;

1.142
date	2009.01.14.15.21.55;	author palves;	state Exp;
branches;
next	1.141;

1.141
date	2009.01.14.14.22.01;	author palves;	state Exp;
branches;
next	1.140;

1.140
date	2009.01.03.05.57.57;	author brobecke;	state Exp;
branches;
next	1.139;

1.139
date	2008.12.02.15.52.15;	author palves;	state Exp;
branches;
next	1.138;

1.138
date	2008.12.02.07.57.37;	author vprus;	state Exp;
branches;
next	1.137;

1.137
date	2008.11.17.16.43.33;	author vprus;	state Exp;
branches;
next	1.136;

1.136
date	2008.11.17.16.39.51;	author vprus;	state Exp;
branches;
next	1.135;

1.135
date	2008.11.17.16.37.35;	author vprus;	state Exp;
branches;
next	1.134;

1.134
date	2008.11.17.12.13.49;	author vprus;	state Exp;
branches;
next	1.133;

1.133
date	2008.11.14.18.38.32;	author tromey;	state Exp;
branches;
next	1.132;

1.132
date	2008.10.28.17.19.57;	author tromey;	state Exp;
branches;
next	1.131;

1.131
date	2008.09.08.22.10.20;	author palves;	state Exp;
branches;
next	1.130;

1.130
date	2008.08.19.13.05.02;	author vprus;	state Exp;
branches;
next	1.129;

1.129
date	2008.08.16.22.26.19;	author palves;	state Exp;
branches;
next	1.128;

1.128
date	2008.07.13.04.13.50;	author vprus;	state Exp;
branches;
next	1.127;

1.127
date	2008.07.13.03.59.28;	author vprus;	state Exp;
branches;
next	1.126;

1.126
date	2008.07.12.17.10.59;	author vprus;	state Exp;
branches;
next	1.125;

1.125
date	2008.07.12.16.37.57;	author vprus;	state Exp;
branches;
next	1.124;

1.124
date	2008.07.11.11.07.39;	author palves;	state Exp;
branches;
next	1.123;

1.123
date	2008.07.09.22.30.46;	author palves;	state Exp;
branches;
next	1.122;

1.122
date	2008.07.09.22.16.15;	author palves;	state Exp;
branches;
next	1.121;

1.121
date	2008.06.29.17.36.36;	author vprus;	state Exp;
branches;
next	1.120;

1.120
date	2008.06.28.11.53.34;	author vprus;	state Exp;
branches;
next	1.119;

1.119
date	2008.06.26.15.10.48;	author vprus;	state Exp;
branches;
next	1.118;

1.118
date	2008.06.25.15.15.42;	author vprus;	state Exp;
branches;
next	1.117;

1.117
date	2008.06.25.14.32.33;	author vprus;	state Exp;
branches;
next	1.116;

1.116
date	2008.06.10.09.35.08;	author vprus;	state Exp;
branches;
next	1.115;

1.115
date	2008.05.06.21.35.01;	author brobecke;	state Exp;
branches;
next	1.114;

1.114
date	2008.04.24.13.28.06;	author vprus;	state Exp;
branches;
next	1.113;

1.113
date	2008.04.24.12.09.49;	author vprus;	state Exp;
branches;
next	1.112;

1.112
date	2008.04.24.11.13.44;	author vprus;	state Exp;
branches;
next	1.111;

1.111
date	2008.04.04.21.59.25;	author palves;	state Exp;
branches;
next	1.110;

1.110
date	2008.03.27.03.45.22;	author nickrob;	state Exp;
branches;
next	1.109;

1.109
date	2008.03.15.13.53.25;	author vprus;	state Exp;
branches;
next	1.108;

1.108
date	2008.01.01.22.53.14;	author drow;	state Exp;
branches;
next	1.107;

1.107
date	2007.12.18.11.06.12;	author vprus;	state Exp;
branches;
next	1.106;

1.106
date	2007.12.16.13.37.26;	author brobecke;	state Exp;
branches;
next	1.105;

1.105
date	2007.10.16.11.55.17;	author drow;	state Exp;
branches;
next	1.104;

1.104
date	2007.09.16.14.59.31;	author vprus;	state Exp;
branches;
next	1.103;

1.103
date	2007.09.03.17.51.10;	author drow;	state Exp;
branches
	1.103.2.1;
next	1.102;

1.102
date	2007.08.23.18.08.48;	author brobecke;	state Exp;
branches;
next	1.101;

1.101
date	2007.08.10.21.52.38;	author msnyder;	state Exp;
branches;
next	1.100;

1.100
date	2007.06.16.17.16.26;	author uweigand;	state Exp;
branches;
next	1.99;

1.99
date	2007.06.09.13.42.16;	author uweigand;	state Exp;
branches;
next	1.98;

1.98
date	2007.05.31.17.32.21;	author uweigand;	state Exp;
branches;
next	1.97;

1.97
date	2007.05.31.17.00.07;	author uweigand;	state Exp;
branches;
next	1.96;

1.96
date	2007.04.28.21.52.38;	author uweigand;	state Exp;
branches;
next	1.95;

1.95
date	2007.04.10.14.53.46;	author drow;	state Exp;
branches;
next	1.94;

1.94
date	2007.02.03.05.41.15;	author nickrob;	state Exp;
branches;
next	1.93;

1.93
date	2007.02.02.23.29.52;	author nickrob;	state Exp;
branches;
next	1.92;

1.92
date	2007.02.02.23.01.27;	author nickrob;	state Exp;
branches;
next	1.91;

1.91
date	2007.01.23.20.27.58;	author nickrob;	state Exp;
branches;
next	1.90;

1.90
date	2007.01.13.22.36.59;	author kettenis;	state Exp;
branches;
next	1.89;

1.89
date	2007.01.09.17.59.08;	author drow;	state Exp;
branches;
next	1.88;

1.88
date	2007.01.03.19.01.25;	author drow;	state Exp;
branches;
next	1.87;

1.87
date	2007.01.01.11.17.28;	author kettenis;	state Exp;
branches;
next	1.86;

1.86
date	2006.11.17.19.30.41;	author drow;	state Exp;
branches;
next	1.85;

1.85
date	2006.08.15.18.46.25;	author drow;	state Exp;
branches
	1.85.2.1;
next	1.84;

1.84
date	2006.05.05.15.50.20;	author drow;	state Exp;
branches
	1.84.2.1;
next	1.83;

1.83
date	2006.01.10.22.42.03;	author kettenis;	state Exp;
branches;
next	1.82;

1.82
date	2005.12.23.18.57.46;	author eliz;	state Exp;
branches;
next	1.81;

1.81
date	2005.11.18.17.02.14;	author ams;	state Exp;
branches;
next	1.80;

1.80
date	2005.06.13.22.21.57;	author nickrob;	state Exp;
branches
	1.80.4.1;
next	1.79;

1.79
date	2005.06.13.02.41.50;	author drow;	state Exp;
branches;
next	1.78;

1.78
date	2005.05.22.14.53.35;	author cagney;	state Exp;
branches;
next	1.77;

1.77
date	2005.04.26.05.03.40;	author cagney;	state Exp;
branches;
next	1.76;

1.76
date	2005.02.21.03.59.23;	author cagney;	state Exp;
branches;
next	1.75;

1.75
date	2005.02.07.17.06.29;	author cagney;	state Exp;
branches;
next	1.74;

1.74
date	2005.02.07.00.09.56;	author cagney;	state Exp;
branches;
next	1.73;

1.73
date	2005.01.14.22.59.36;	author cagney;	state Exp;
branches;
next	1.72;

1.72
date	2005.01.14.18.55.33;	author cagney;	state Exp;
branches;
next	1.71;

1.71
date	2005.01.14.02.33.24;	author cagney;	state Exp;
branches;
next	1.70;

1.70
date	2005.01.13.22.08.27;	author cagney;	state Exp;
branches;
next	1.69;

1.69
date	2005.01.13.18.15.02;	author cagney;	state Exp;
branches;
next	1.68;

1.68
date	2005.01.12.18.31.34;	author cagney;	state Exp;
branches;
next	1.67;

1.67
date	2004.11.12.21.45.08;	author cagney;	state Exp;
branches;
next	1.66;

1.66
date	2004.10.29.20.23.17;	author cagney;	state Exp;
branches;
next	1.65;

1.65
date	2004.09.12.15.00.42;	author cagney;	state Exp;
branches;
next	1.64;

1.64
date	2004.08.03.00.57.27;	author cagney;	state Exp;
branches;
next	1.63;

1.63
date	2004.06.09.20.42.29;	author cagney;	state Exp;
branches;
next	1.62;

1.62
date	2004.06.01.13.33.58;	author cagney;	state Exp;
branches;
next	1.61;

1.61
date	2004.06.01.13.15.02;	author cagney;	state Exp;
branches;
next	1.60;

1.60
date	2004.06.01.12.55.33;	author cagney;	state Exp;
branches;
next	1.59;

1.59
date	2004.04.28.16.36.25;	author cagney;	state Exp;
branches;
next	1.58;

1.58
date	2004.02.15.15.22.06;	author cagney;	state Exp;
branches
	1.58.2.1;
next	1.57;

1.57
date	2004.02.14.17.26.35;	author cagney;	state Exp;
branches;
next	1.56;

1.56
date	2003.10.02.20.28.31;	author cagney;	state Exp;
branches;
next	1.55;

1.55
date	2003.09.30.19.12.20;	author cagney;	state Exp;
branches;
next	1.54;

1.54
date	2003.09.20.17.50.28;	author cagney;	state Exp;
branches;
next	1.53;

1.53
date	2003.09.17.14.24.31;	author cagney;	state Exp;
branches;
next	1.52;

1.52
date	2003.09.11.02.34.00;	author ezannoni;	state Exp;
branches
	1.52.2.1;
next	1.51;

1.51
date	2003.08.08.19.00.08;	author cagney;	state Exp;
branches;
next	1.50;

1.50
date	2003.08.04.23.18.50;	author cagney;	state Exp;
branches;
next	1.49;

1.49
date	2003.08.04.17.08.24;	author carlton;	state Exp;
branches;
next	1.48;

1.48
date	2003.06.11.19.38.27;	author cagney;	state Exp;
branches
	1.48.4.1;
next	1.47;

1.47
date	2003.06.08.18.27.14;	author cagney;	state Exp;
branches;
next	1.46;

1.46
date	2003.05.17.06.00.01;	author cagney;	state Exp;
branches;
next	1.45;

1.45
date	2003.05.08.20.52.49;	author cagney;	state Exp;
branches;
next	1.44;

1.44
date	2003.05.08.18.46.49;	author cagney;	state Exp;
branches;
next	1.43;

1.43
date	2003.05.05.17.56.57;	author cagney;	state Exp;
branches;
next	1.42;

1.42
date	2003.03.14.17.07.01;	author cagney;	state Exp;
branches
	1.42.10.1;
next	1.41;

1.41
date	2003.03.01.17.03.19;	author cagney;	state Exp;
branches
	1.41.4.1;
next	1.40;

1.40
date	2003.02.06.01.19.12;	author cagney;	state Exp;
branches;
next	1.39;

1.39
date	2003.01.14.00.07.43;	author ezannoni;	state Exp;
branches
	1.39.2.1;
next	1.38;

1.38
date	2002.11.29.19.15.16;	author cagney;	state Exp;
branches
	1.38.2.1;
next	1.37;

1.37
date	2002.11.14.00.25.05;	author cagney;	state Exp;
branches;
next	1.36;

1.36
date	2002.11.08.20.39.06;	author jjohnstn;	state Exp;
branches;
next	1.35;

1.35
date	2002.10.23.21.17.51;	author jjohnstn;	state Exp;
branches;
next	1.34;

1.34
date	2002.10.22.17.53.42;	author kseitz;	state Exp;
branches;
next	1.33;

1.33
date	2002.10.02.21.33.59;	author ezannoni;	state Exp;
branches
	1.33.2.1;
next	1.32;

1.32
date	2002.10.01.21.15.43;	author cagney;	state Exp;
branches;
next	1.31;

1.31
date	2002.09.11.21.49.04;	author kseitz;	state Exp;
branches
	1.31.2.1;
next	1.30;

1.30
date	2002.05.20.18.09.57;	author kseitz;	state Exp;
branches
	1.30.2.1;
next	1.29;

1.29
date	2002.04.21.20.23.34;	author cagney;	state Exp;
branches
	1.29.4.1;
next	1.28;

1.28
date	2002.04.12.18.18.59;	author cagney;	state Exp;
branches;
next	1.27;

1.27
date	2002.03.19.02.51.08;	author cagney;	state Exp;
branches;
next	1.26;

1.26
date	2002.01.17.22.15.18;	author cagney;	state Exp;
branches;
next	1.25;

1.25
date	2002.01.05.04.30.46;	author cagney;	state Exp;
branches;
next	1.24;

1.24
date	2001.09.18.05.00.51;	author cagney;	state Exp;
branches;
next	1.23;

1.23
date	2001.07.28.19.48.15;	author cagney;	state Exp;
branches;
next	1.22;

1.22
date	2001.07.12.05.54.48;	author cagney;	state Exp;
branches;
next	1.21;

1.21
date	2001.07.09.16.53.03;	author kevinb;	state Exp;
branches;
next	1.20;

1.20
date	2001.07.09.14.50.37;	author cagney;	state Exp;
branches;
next	1.19;

1.19
date	2001.06.25.21.05.11;	author cagney;	state Exp;
branches;
next	1.18;

1.18
date	2001.06.25.20.08.52;	author cagney;	state Exp;
branches;
next	1.17;

1.17
date	2001.06.25.19.02.17;	author cagney;	state Exp;
branches;
next	1.16;

1.16
date	2001.06.25.18.34.24;	author cagney;	state Exp;
branches;
next	1.15;

1.15
date	2001.06.18.17.57.41;	author cagney;	state Exp;
branches;
next	1.14;

1.14
date	2001.05.12.04.08.24;	author cagney;	state Exp;
branches;
next	1.13;

1.13
date	2001.05.10.20.31.46;	author cagney;	state Exp;
branches;
next	1.12;

1.12
date	2001.03.28.23.21.43;	author cagney;	state Exp;
branches;
next	1.11;

1.11
date	2001.03.13.23.31.14;	author cagney;	state Exp;
branches;
next	1.10;

1.10
date	2001.03.01.01.39.22;	author cagney;	state Exp;
branches;
next	1.9;

1.9
date	2000.12.15.01.01.51;	author kevinb;	state Exp;
branches;
next	1.8;

1.8
date	2000.11.20.02.06.19;	author cagney;	state Exp;
branches;
next	1.7;

1.7
date	2000.07.30.01.48.28;	author kevinb;	state Exp;
branches;
next	1.6;

1.6
date	2000.05.16.05.07.53;	author cagney;	state Exp;
branches;
next	1.5;

1.5
date	2000.05.16.04.57.49;	author cagney;	state Exp;
branches;
next	1.4;

1.4
date	2000.05.15.11.48.50;	author cagney;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.06.22.57.52;	author ezannoni;	state Exp;
branches;
next	1.2;

1.2
date	2000.02.23.06.19.22;	author cagney;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.23.00.25.43;	author cagney;	state Exp;
branches;
next	;

1.228.2.1
date	2013.08.28.17.55.55;	author jkratoch;	state Exp;
branches;
next	;

1.209.2.1
date	2012.01.06.04.43.40;	author brobecke;	state Exp;
branches;
next	1.209.2.2;

1.209.2.2
date	2012.04.24.15.02.12;	author marckhouzam;	state Exp;
branches;
next	;

1.178.2.1
date	2010.08.05.16.06.36;	author marckhouzam;	state Exp;
branches;
next	1.178.2.2;

1.178.2.2
date	2010.09.01.19.16.00;	author marckhouzam;	state Exp;
branches;
next	1.178.2.3;

1.178.2.3
date	2010.11.12.19.04.45;	author marckhouzam;	state Exp;
branches;
next	1.178.2.4;

1.178.2.4
date	2010.12.09.19.22.59;	author tromey;	state Exp;
branches;
next	1.178.2.5;

1.178.2.5
date	2010.12.18.01.56.07;	author marckhouzam;	state Exp;
branches;
next	1.178.2.6;

1.178.2.6
date	2010.12.22.18.23.38;	author marckhouzam;	state Exp;
branches;
next	1.178.2.7;

1.178.2.7
date	2010.12.23.04.35.38;	author brobecke;	state Exp;
branches;
next	;

1.166.2.1
date	2010.03.18.15.52.22;	author uweigand;	state Exp;
branches;
next	;

1.103.2.1
date	2007.10.16.11.56.58;	author drow;	state Exp;
branches;
next	;

1.85.2.1
date	2006.12.02.17.54.50;	author brobecke;	state Exp;
branches;
next	;

1.84.2.1
date	2006.05.12.07.40.18;	author nickrob;	state Exp;
branches;
next	1.84.2.2;

1.84.2.2
date	2006.08.28.07.48.45;	author nickrob;	state Exp;
branches;
next	1.84.2.3;

1.84.2.3
date	2006.09.04.10.07.23;	author nickrob;	state Exp;
branches;
next	1.84.2.4;

1.84.2.4
date	2006.09.05.10.12.19;	author nickrob;	state Exp;
branches;
next	1.84.2.5;

1.84.2.5
date	2006.09.14.02.24.45;	author nickrob;	state Exp;
branches;
next	;

1.80.4.1
date	2005.11.18.16.55.26;	author ams;	state Exp;
branches;
next	;

1.58.2.1
date	2004.09.16.17.01.37;	author drow;	state Exp;
branches;
next	;

1.52.2.1
date	2004.03.23.20.15.09;	author ezannoni;	state Exp;
branches;
next	;

1.48.4.1
date	2003.08.08.18.35.23;	author cagney;	state Exp;
branches;
next	1.48.4.2;

1.48.4.2
date	2003.09.11.02.33.19;	author ezannoni;	state Exp;
branches;
next	;

1.42.10.1
date	2003.05.18.09.44.34;	author kettenis;	state Exp;
branches;
next	;

1.41.4.1
date	2003.03.16.14.01.54;	author kettenis;	state Exp;
branches;
next	;

1.39.2.1
date	2003.02.03.06.02.46;	author cagney;	state Exp;
branches;
next	1.39.2.2;

1.39.2.2
date	2003.02.04.07.02.36;	author cagney;	state Exp;
branches;
next	1.39.2.3;

1.39.2.3
date	2003.02.04.16.52.10;	author cagney;	state Exp;
branches;
next	1.39.2.4;

1.39.2.4
date	2003.02.04.19.59.02;	author cagney;	state Exp;
branches;
next	;

1.38.2.1
date	2003.01.20.00.38.14;	author cagney;	state Exp;
branches;
next	;

1.33.2.1
date	2002.10.26.17.12.18;	author drow;	state Exp;
branches;
next	1.33.2.2;

1.33.2.2
date	2003.12.14.20.27.44;	author drow;	state Exp;
branches;
next	;

1.31.2.1
date	2002.10.11.22.23.00;	author carlton;	state Exp;
branches;
next	1.31.2.2;

1.31.2.2
date	2002.10.25.23.49.57;	author carlton;	state Exp;
branches;
next	1.31.2.3;

1.31.2.3
date	2002.11.15.19.19.12;	author carlton;	state Exp;
branches;
next	1.31.2.4;

1.31.2.4
date	2002.12.23.19.39.10;	author carlton;	state Exp;
branches;
next	1.31.2.5;

1.31.2.5
date	2003.02.07.19.17.57;	author carlton;	state Exp;
branches;
next	1.31.2.6;

1.31.2.6
date	2003.03.06.00.56.36;	author carlton;	state Exp;
branches;
next	1.31.2.7;

1.31.2.7
date	2003.04.16.19.57.01;	author carlton;	state Exp;
branches;
next	1.31.2.8;

1.31.2.8
date	2003.05.23.18.40.51;	author carlton;	state Exp;
branches;
next	1.31.2.9;

1.31.2.9
date	2003.06.27.21.50.19;	author carlton;	state Exp;
branches;
next	1.31.2.10;

1.31.2.10
date	2003.08.05.17.13.21;	author carlton;	state Exp;
branches;
next	1.31.2.11;

1.31.2.11
date	2003.09.17.21.28.48;	author carlton;	state Exp;
branches;
next	1.31.2.12;

1.31.2.12
date	2003.11.11.23.51.09;	author carlton;	state Exp;
branches;
next	;

1.30.2.1
date	2002.05.28.23.47.02;	author kseitz;	state Exp;
branches;
next	1.30.2.2;

1.30.2.2
date	2002.06.19.18.51.32;	author kseitz;	state Exp;
branches;
next	1.30.2.3;

1.30.2.3
date	2002.06.25.00.00.50;	author kseitz;	state Exp;
branches;
next	1.30.2.4;

1.30.2.4
date	2002.08.09.19.54.56;	author kseitz;	state Exp;
branches;
next	1.30.2.5;

1.30.2.5
date	2002.10.01.00.46.23;	author kseitz;	state Exp;
branches;
next	1.30.2.6;

1.30.2.6
date	2002.11.04.00.23.11;	author ezannoni;	state Exp;
branches;
next	1.30.2.7;

1.30.2.7
date	2002.11.04.16.18.02;	author ezannoni;	state Exp;
branches;
next	1.30.2.8;

1.30.2.8
date	2002.11.04.23.27.32;	author ezannoni;	state Exp;
branches;
next	;

1.29.4.1
date	2002.05.16.00.54.57;	author cagney;	state Exp;
branches;
next	1.29.4.2;

1.29.4.2
date	2002.05.16.19.08.05;	author cagney;	state Exp;
branches;
next	1.29.4.3;

1.29.4.3
date	2002.06.15.16.43.13;	author cagney;	state Exp;
branches;
next	1.29.4.4;

1.29.4.4
date	2002.06.15.19.32.44;	author cagney;	state Exp;
branches;
next	;


desc
@@


1.244
log
@Add support for --start option in -exec-run GDB/MI command.

gdb/ChangeLog:

        * mi/mi-main.c (run_one_inferior): Add function description.
        Make ARG a pointer to an integer whose value determines whether
        we should "run" or "start" the program.
        (mi_cmd_exec_run): Add handling of the "--start" option.
        Reject all other command-line options.
        * NEWS: Add entry for "-exec-run"'s new "--start" option.

gdb/doc/ChangeLog:

        * gdb.texinfo (GDB/MI Program Execution): Document "-exec-run"'s
        new "--start" option.

gdb/testsuite/ChangeLog:

        * gdb.mi/mi-start.c, gdb.mi/mi-start.exp: New files.
@
text
@/* MI Command Set.

   Copyright (C) 2000-2013 Free Software Foundation, Inc.

   Contributed by Cygnus Solutions (a Red Hat company).

   This file is part of GDB.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

#include "defs.h"
#include "arch-utils.h"
#include "target.h"
#include "inferior.h"
#include "gdb_string.h"
#include "exceptions.h"
#include "top.h"
#include "gdbthread.h"
#include "mi-cmds.h"
#include "mi-parse.h"
#include "mi-getopt.h"
#include "mi-console.h"
#include "ui-out.h"
#include "mi-out.h"
#include "interps.h"
#include "event-loop.h"
#include "event-top.h"
#include "gdbcore.h"		/* For write_memory().  */
#include "value.h"
#include "regcache.h"
#include "gdb.h"
#include "frame.h"
#include "mi-main.h"
#include "mi-common.h"
#include "language.h"
#include "valprint.h"
#include "inferior.h"
#include "osdata.h"
#include "splay-tree.h"
#include "tracepoint.h"
#include "ctf.h"
#include "ada-lang.h"
#include "linespec.h"
#ifdef HAVE_PYTHON
#include "python/python-internal.h"
#endif

#include <ctype.h>
#include <sys/time.h>

#if defined HAVE_SYS_RESOURCE_H
#include <sys/resource.h>
#endif

#ifdef HAVE_GETRUSAGE
struct rusage rusage;
#endif

enum
  {
    FROM_TTY = 0
  };

int mi_debug_p;

struct ui_file *raw_stdout;

/* This is used to pass the current command timestamp down to
   continuation routines.  */
static struct mi_timestamp *current_command_ts;

static int do_timings = 0;

char *current_token;
/* Few commands would like to know if options like --thread-group were
   explicitly specified.  This variable keeps the current parsed
   command including all option, and make it possible.  */
static struct mi_parse *current_context;

int running_result_record_printed = 1;

/* Flag indicating that the target has proceeded since the last
   command was issued.  */
int mi_proceeded;

extern void _initialize_mi_main (void);
static void mi_cmd_execute (struct mi_parse *parse);

static void mi_execute_cli_command (const char *cmd, int args_p,
				    const char *args);
static void mi_execute_async_cli_command (char *cli_command, 
					  char **argv, int argc);
static int register_changed_p (int regnum, struct regcache *,
			       struct regcache *);
static void output_register (struct frame_info *, int regnum, int format,
			     int skip_unavailable);

/* Command implementations.  FIXME: Is this libgdb?  No.  This is the MI
   layer that calls libgdb.  Any operation used in the below should be
   formalized.  */

static void timestamp (struct mi_timestamp *tv);

static void print_diff_now (struct mi_timestamp *start);
static void print_diff (struct mi_timestamp *start, struct mi_timestamp *end);

void
mi_cmd_gdb_exit (char *command, char **argv, int argc)
{
  /* We have to print everything right here because we never return.  */
  if (current_token)
    fputs_unfiltered (current_token, raw_stdout);
  fputs_unfiltered ("^exit\n", raw_stdout);
  mi_out_put (current_uiout, raw_stdout);
  gdb_flush (raw_stdout);
  /* FIXME: The function called is not yet a formal libgdb function.  */
  quit_force (NULL, FROM_TTY);
}

void
mi_cmd_exec_next (char *command, char **argv, int argc)
{
  /* FIXME: Should call a libgdb function, not a cli wrapper.  */
  if (argc > 0 && strcmp(argv[0], "--reverse") == 0)
    mi_execute_async_cli_command ("reverse-next", argv + 1, argc - 1);
  else
    mi_execute_async_cli_command ("next", argv, argc);
}

void
mi_cmd_exec_next_instruction (char *command, char **argv, int argc)
{
  /* FIXME: Should call a libgdb function, not a cli wrapper.  */
  if (argc > 0 && strcmp(argv[0], "--reverse") == 0)
    mi_execute_async_cli_command ("reverse-nexti", argv + 1, argc - 1);
  else
    mi_execute_async_cli_command ("nexti", argv, argc);
}

void
mi_cmd_exec_step (char *command, char **argv, int argc)
{
  /* FIXME: Should call a libgdb function, not a cli wrapper.  */
  if (argc > 0 && strcmp(argv[0], "--reverse") == 0)
    mi_execute_async_cli_command ("reverse-step", argv + 1, argc - 1);
  else
    mi_execute_async_cli_command ("step", argv, argc);
}

void
mi_cmd_exec_step_instruction (char *command, char **argv, int argc)
{
  /* FIXME: Should call a libgdb function, not a cli wrapper.  */
  if (argc > 0 && strcmp(argv[0], "--reverse") == 0)
    mi_execute_async_cli_command ("reverse-stepi", argv + 1, argc - 1);
  else
    mi_execute_async_cli_command ("stepi", argv, argc);
}

void
mi_cmd_exec_finish (char *command, char **argv, int argc)
{
  /* FIXME: Should call a libgdb function, not a cli wrapper.  */
  if (argc > 0 && strcmp(argv[0], "--reverse") == 0)
    mi_execute_async_cli_command ("reverse-finish", argv + 1, argc - 1);
  else
    mi_execute_async_cli_command ("finish", argv, argc);
}

void
mi_cmd_exec_return (char *command, char **argv, int argc)
{
  /* This command doesn't really execute the target, it just pops the
     specified number of frames.  */
  if (argc)
    /* Call return_command with from_tty argument equal to 0 so as to
       avoid being queried.  */
    return_command (*argv, 0);
  else
    /* Call return_command with from_tty argument equal to 0 so as to
       avoid being queried.  */
    return_command (NULL, 0);

  /* Because we have called return_command with from_tty = 0, we need
     to print the frame here.  */
  print_stack_frame (get_selected_frame (NULL), 1, LOC_AND_ADDRESS, 1);
}

void
mi_cmd_exec_jump (char *args, char **argv, int argc)
{
  /* FIXME: Should call a libgdb function, not a cli wrapper.  */
  mi_execute_async_cli_command ("jump", argv, argc);
}
 
static void
proceed_thread (struct thread_info *thread, int pid)
{
  if (!is_stopped (thread->ptid))
    return;

  if (pid != 0 && ptid_get_pid (thread->ptid) != pid)
    return;

  switch_to_thread (thread->ptid);
  clear_proceed_status ();
  proceed ((CORE_ADDR) -1, GDB_SIGNAL_DEFAULT, 0);
}

static int
proceed_thread_callback (struct thread_info *thread, void *arg)
{
  int pid = *(int *)arg;

  proceed_thread (thread, pid);
  return 0;
}

static void
exec_continue (char **argv, int argc)
{
  if (non_stop)
    {
      /* In non-stop mode, 'resume' always resumes a single thread.
	 Therefore, to resume all threads of the current inferior, or
	 all threads in all inferiors, we need to iterate over
	 threads.

	 See comment on infcmd.c:proceed_thread_callback for rationale.  */
      if (current_context->all || current_context->thread_group != -1)
	{
	  int pid = 0;
	  struct cleanup *back_to = make_cleanup_restore_current_thread ();

	  if (!current_context->all)
	    {
	      struct inferior *inf
		= find_inferior_id (current_context->thread_group);

	      pid = inf->pid;
	    }
	  iterate_over_threads (proceed_thread_callback, &pid);
	  do_cleanups (back_to);
	}
      else
	{
	  continue_1 (0);
	}
    }
  else
    {
      struct cleanup *back_to = make_cleanup_restore_integer (&sched_multi);

      if (current_context->all)
	{
	  sched_multi = 1;
	  continue_1 (0);
	}
      else
	{
	  /* In all-stop mode, -exec-continue traditionally resumed
	     either all threads, or one thread, depending on the
	     'scheduler-locking' variable.  Let's continue to do the
	     same.  */
	  continue_1 (1);
	}
      do_cleanups (back_to);
    }
}

static void
exec_direction_forward (void *notused)
{
  execution_direction = EXEC_FORWARD;
}

static void
exec_reverse_continue (char **argv, int argc)
{
  enum exec_direction_kind dir = execution_direction;
  struct cleanup *old_chain;

  if (dir == EXEC_REVERSE)
    error (_("Already in reverse mode."));

  if (!target_can_execute_reverse)
    error (_("Target %s does not support this command."), target_shortname);

  old_chain = make_cleanup (exec_direction_forward, NULL);
  execution_direction = EXEC_REVERSE;
  exec_continue (argv, argc);
  do_cleanups (old_chain);
}

void
mi_cmd_exec_continue (char *command, char **argv, int argc)
{
  if (argc > 0 && strcmp (argv[0], "--reverse") == 0)
    exec_reverse_continue (argv + 1, argc - 1);
  else
    exec_continue (argv, argc);
}

static int
interrupt_thread_callback (struct thread_info *thread, void *arg)
{
  int pid = *(int *)arg;

  if (!is_running (thread->ptid))
    return 0;

  if (ptid_get_pid (thread->ptid) != pid)
    return 0;

  target_stop (thread->ptid);
  return 0;
}

/* Interrupt the execution of the target.  Note how we must play
   around with the token variables, in order to display the current
   token in the result of the interrupt command, and the previous
   execution token when the target finally stops.  See comments in
   mi_cmd_execute.  */

void
mi_cmd_exec_interrupt (char *command, char **argv, int argc)
{
  /* In all-stop mode, everything stops, so we don't need to try
     anything specific.  */
  if (!non_stop)
    {
      interrupt_target_1 (0);
      return;
    }

  if (current_context->all)
    {
      /* This will interrupt all threads in all inferiors.  */
      interrupt_target_1 (1);
    }
  else if (current_context->thread_group != -1)
    {
      struct inferior *inf = find_inferior_id (current_context->thread_group);

      iterate_over_threads (interrupt_thread_callback, &inf->pid);
    }
  else
    {
      /* Interrupt just the current thread -- either explicitly
	 specified via --thread or whatever was current before
	 MI command was sent.  */
      interrupt_target_1 (0);
    }
}

/* Callback for iterate_over_inferiors which starts the execution
   of the given inferior.

   ARG is a pointer to an integer whose value, if non-zero, indicates
   that the program should be stopped when reaching the main subprogram
   (similar to what the CLI "start" command does).  */

static int
run_one_inferior (struct inferior *inf, void *arg)
{
  int start_p = *(int *) arg;
  const char *run_cmd = start_p ? "start" : "run";

  if (inf->pid != 0)
    {
      if (inf->pid != ptid_get_pid (inferior_ptid))
	{
	  struct thread_info *tp;

	  tp = any_thread_of_process (inf->pid);
	  if (!tp)
	    error (_("Inferior has no threads."));

	  switch_to_thread (tp->ptid);
	}
    }
  else
    {
      set_current_inferior (inf);
      switch_to_thread (null_ptid);
      set_current_program_space (inf->pspace);
    }
  mi_execute_cli_command (run_cmd, target_can_async_p (),
			  target_can_async_p () ? "&" : NULL);
  return 0;
}

void
mi_cmd_exec_run (char *command, char **argv, int argc)
{
  int i;
  int start_p = 0;

  /* Parse the command options.  */
  enum opt
    {
      START_OPT,
    };
  static const struct mi_opt opts[] =
    {
	{"-start", START_OPT, 0},
	{NULL, 0, 0},
    };

  int oind = 0;
  char *oarg;

  while (1)
    {
      int opt = mi_getopt ("-exec-run", argc, argv, opts, &oind, &oarg);

      if (opt < 0)
	break;
      switch ((enum opt) opt)
	{
	case START_OPT:
	  start_p = 1;
	  break;
	}
    }

  /* This command does not accept any argument.  Make sure the user
     did not provide any.  */
  if (oind != argc)
    error (_("Invalid argument: %s"), argv[oind]);

  if (current_context->all)
    {
      struct cleanup *back_to = save_current_space_and_thread ();

      iterate_over_inferiors (run_one_inferior, &start_p);
      do_cleanups (back_to);
    }
  else
    {
      const char *run_cmd = start_p ? "start" : "run";

      mi_execute_cli_command (run_cmd, target_can_async_p (),
			      target_can_async_p () ? "&" : NULL);
    }
}


static int
find_thread_of_process (struct thread_info *ti, void *p)
{
  int pid = *(int *)p;

  if (ptid_get_pid (ti->ptid) == pid && !is_exited (ti->ptid))
    return 1;

  return 0;
}

void
mi_cmd_target_detach (char *command, char **argv, int argc)
{
  if (argc != 0 && argc != 1)
    error (_("Usage: -target-detach [pid | thread-group]"));

  if (argc == 1)
    {
      struct thread_info *tp;
      char *end = argv[0];
      int pid;

      /* First see if we are dealing with a thread-group id.  */
      if (*argv[0] == 'i')
	{
	  struct inferior *inf;
	  int id = strtoul (argv[0] + 1, &end, 0);

	  if (*end != '\0')
	    error (_("Invalid syntax of thread-group id '%s'"), argv[0]);

	  inf = find_inferior_id (id);
	  if (!inf)
	    error (_("Non-existent thread-group id '%d'"), id);

	  pid = inf->pid;
	}
      else
	{
	  /* We must be dealing with a pid.  */
	  pid = strtol (argv[0], &end, 10);

	  if (*end != '\0')
	    error (_("Invalid identifier '%s'"), argv[0]);
	}

      /* Pick any thread in the desired process.  Current
	 target_detach detaches from the parent of inferior_ptid.  */
      tp = iterate_over_threads (find_thread_of_process, &pid);
      if (!tp)
	error (_("Thread group is empty"));

      switch_to_thread (tp->ptid);
    }

  detach_command (NULL, 0);
}

void
mi_cmd_thread_select (char *command, char **argv, int argc)
{
  enum gdb_rc rc;
  char *mi_error_message;

  if (argc != 1)
    error (_("-thread-select: USAGE: threadnum."));

  rc = gdb_thread_select (current_uiout, argv[0], &mi_error_message);

  if (rc == GDB_RC_FAIL)
    {
      make_cleanup (xfree, mi_error_message);
      error ("%s", mi_error_message);
    }
}

void
mi_cmd_thread_list_ids (char *command, char **argv, int argc)
{
  enum gdb_rc rc;
  char *mi_error_message;

  if (argc != 0)
    error (_("-thread-list-ids: No arguments required."));

  rc = gdb_list_thread_ids (current_uiout, &mi_error_message);

  if (rc == GDB_RC_FAIL)
    {
      make_cleanup (xfree, mi_error_message);
      error ("%s", mi_error_message);
    }
}

void
mi_cmd_thread_info (char *command, char **argv, int argc)
{
  if (argc != 0 && argc != 1)
    error (_("Invalid MI command"));

  print_thread_info (current_uiout, argv[0], -1);
}

struct collect_cores_data
{
  int pid;

  VEC (int) *cores;
};

static int
collect_cores (struct thread_info *ti, void *xdata)
{
  struct collect_cores_data *data = xdata;

  if (ptid_get_pid (ti->ptid) == data->pid)
    {
      int core = target_core_of_thread (ti->ptid);

      if (core != -1)
	VEC_safe_push (int, data->cores, core);
    }

  return 0;
}

static int *
unique (int *b, int *e)
{
  int *d = b;

  while (++b != e)
    if (*d != *b)
      *++d = *b;
  return ++d;
}

struct print_one_inferior_data
{
  int recurse;
  VEC (int) *inferiors;
};

static int
print_one_inferior (struct inferior *inferior, void *xdata)
{
  struct print_one_inferior_data *top_data = xdata;
  struct ui_out *uiout = current_uiout;

  if (VEC_empty (int, top_data->inferiors)
      || bsearch (&(inferior->pid), VEC_address (int, top_data->inferiors),
		  VEC_length (int, top_data->inferiors), sizeof (int),
		  compare_positive_ints))
    {
      struct collect_cores_data data;
      struct cleanup *back_to
	= make_cleanup_ui_out_tuple_begin_end (uiout, NULL);

      ui_out_field_fmt (uiout, "id", "i%d", inferior->num);
      ui_out_field_string (uiout, "type", "process");
      if (inferior->pid != 0)
	ui_out_field_int (uiout, "pid", inferior->pid);

      if (inferior->pspace->pspace_exec_filename != NULL)
	{
	  ui_out_field_string (uiout, "executable",
			       inferior->pspace->pspace_exec_filename);
	}

      data.cores = 0;
      if (inferior->pid != 0)
	{
	  data.pid = inferior->pid;
	  iterate_over_threads (collect_cores, &data);
	}

      if (!VEC_empty (int, data.cores))
	{
	  int *b, *e;
	  struct cleanup *back_to_2 =
	    make_cleanup_ui_out_list_begin_end (uiout, "cores");

	  qsort (VEC_address (int, data.cores),
		 VEC_length (int, data.cores), sizeof (int),
		 compare_positive_ints);

	  b = VEC_address (int, data.cores);
	  e = b + VEC_length (int, data.cores);
	  e = unique (b, e);

	  for (; b != e; ++b)
	    ui_out_field_int (uiout, NULL, *b);

	  do_cleanups (back_to_2);
	}

      if (top_data->recurse)
	print_thread_info (uiout, NULL, inferior->pid);

      do_cleanups (back_to);
    }

  return 0;
}

/* Output a field named 'cores' with a list as the value.  The
   elements of the list are obtained by splitting 'cores' on
   comma.  */

static void
output_cores (struct ui_out *uiout, const char *field_name, const char *xcores)
{
  struct cleanup *back_to = make_cleanup_ui_out_list_begin_end (uiout,
								field_name);
  char *cores = xstrdup (xcores);
  char *p = cores;

  make_cleanup (xfree, cores);

  for (p = strtok (p, ","); p;  p = strtok (NULL, ","))
    ui_out_field_string (uiout, NULL, p);

  do_cleanups (back_to);
}

static void
free_vector_of_ints (void *xvector)
{
  VEC (int) **vector = xvector;

  VEC_free (int, *vector);
}

static void
do_nothing (splay_tree_key k)
{
}

static void
free_vector_of_osdata_items (splay_tree_value xvalue)
{
  VEC (osdata_item_s) *value = (VEC (osdata_item_s) *) xvalue;

  /* We don't free the items itself, it will be done separately.  */
  VEC_free (osdata_item_s, value);
}

static int
splay_tree_int_comparator (splay_tree_key xa, splay_tree_key xb)
{
  int a = xa;
  int b = xb;

  return a - b;
}

static void
free_splay_tree (void *xt)
{
  splay_tree t = xt;
  splay_tree_delete (t);
}

static void
list_available_thread_groups (VEC (int) *ids, int recurse)
{
  struct osdata *data;
  struct osdata_item *item;
  int ix_items;
  struct ui_out *uiout = current_uiout;
  struct cleanup *cleanup;

  /* This keeps a map from integer (pid) to VEC (struct osdata_item *)*
     The vector contains information about all threads for the given pid.
     This is assigned an initial value to avoid "may be used uninitialized"
     warning from gcc.  */
  splay_tree tree = NULL;

  /* get_osdata will throw if it cannot return data.  */
  data = get_osdata ("processes");
  cleanup = make_cleanup_osdata_free (data);

  if (recurse)
    {
      struct osdata *threads = get_osdata ("threads");

      make_cleanup_osdata_free (threads);
      tree = splay_tree_new (splay_tree_int_comparator,
			     do_nothing,
			     free_vector_of_osdata_items);
      make_cleanup (free_splay_tree, tree);

      for (ix_items = 0;
	   VEC_iterate (osdata_item_s, threads->items,
			ix_items, item);
	   ix_items++)
	{
	  const char *pid = get_osdata_column (item, "pid");
	  int pid_i = strtoul (pid, NULL, 0);
	  VEC (osdata_item_s) *vec = 0;

	  splay_tree_node n = splay_tree_lookup (tree, pid_i);
	  if (!n)
	    {
	      VEC_safe_push (osdata_item_s, vec, item);
	      splay_tree_insert (tree, pid_i, (splay_tree_value)vec);
	    }
	  else
	    {
	      vec = (VEC (osdata_item_s) *) n->value;
	      VEC_safe_push (osdata_item_s, vec, item);
	      n->value = (splay_tree_value) vec;
	    }
	}
    }

  make_cleanup_ui_out_list_begin_end (uiout, "groups");

  for (ix_items = 0;
       VEC_iterate (osdata_item_s, data->items,
		    ix_items, item);
       ix_items++)
    {
      struct cleanup *back_to;

      const char *pid = get_osdata_column (item, "pid");
      const char *cmd = get_osdata_column (item, "command");
      const char *user = get_osdata_column (item, "user");
      const char *cores = get_osdata_column (item, "cores");

      int pid_i = strtoul (pid, NULL, 0);

      /* At present, the target will return all available processes
	 and if information about specific ones was required, we filter
	 undesired processes here.  */
      if (ids && bsearch (&pid_i, VEC_address (int, ids),
			  VEC_length (int, ids),
			  sizeof (int), compare_positive_ints) == NULL)
	continue;


      back_to = make_cleanup_ui_out_tuple_begin_end (uiout, NULL);

      ui_out_field_fmt (uiout, "id", "%s", pid);
      ui_out_field_string (uiout, "type", "process");
      if (cmd)
	ui_out_field_string (uiout, "description", cmd);
      if (user)
	ui_out_field_string (uiout, "user", user);
      if (cores)
	output_cores (uiout, "cores", cores);

      if (recurse)
	{
	  splay_tree_node n = splay_tree_lookup (tree, pid_i);
	  if (n)
	    {
	      VEC (osdata_item_s) *children = (VEC (osdata_item_s) *) n->value;
	      struct osdata_item *child;
	      int ix_child;

	      make_cleanup_ui_out_list_begin_end (uiout, "threads");

	      for (ix_child = 0;
		   VEC_iterate (osdata_item_s, children, ix_child, child);
		   ++ix_child)
		{
		  struct cleanup *back_to_2 =
		    make_cleanup_ui_out_tuple_begin_end (uiout, NULL);
		  const char *tid = get_osdata_column (child, "tid");
		  const char *tcore = get_osdata_column (child, "core");

		  ui_out_field_string (uiout, "id", tid);
		  if (tcore)
		    ui_out_field_string (uiout, "core", tcore);

		  do_cleanups (back_to_2);
		}
	    }
	}

      do_cleanups (back_to);
    }

  do_cleanups (cleanup);
}

void
mi_cmd_list_thread_groups (char *command, char **argv, int argc)
{
  struct ui_out *uiout = current_uiout;
  struct cleanup *back_to;
  int available = 0;
  int recurse = 0;
  VEC (int) *ids = 0;

  enum opt
  {
    AVAILABLE_OPT, RECURSE_OPT
  };
  static const struct mi_opt opts[] =
    {
      {"-available", AVAILABLE_OPT, 0},
      {"-recurse", RECURSE_OPT, 1},
      { 0, 0, 0 }
    };

  int oind = 0;
  char *oarg;

  while (1)
    {
      int opt = mi_getopt ("-list-thread-groups", argc, argv, opts,
			   &oind, &oarg);

      if (opt < 0)
	break;
      switch ((enum opt) opt)
	{
	case AVAILABLE_OPT:
	  available = 1;
	  break;
	case RECURSE_OPT:
	  if (strcmp (oarg, "0") == 0)
	    ;
	  else if (strcmp (oarg, "1") == 0)
	    recurse = 1;
	  else
	    error (_("only '0' and '1' are valid values "
		     "for the '--recurse' option"));
	  break;
	}
    }

  for (; oind < argc; ++oind)
    {
      char *end;
      int inf;

      if (*(argv[oind]) != 'i')
	error (_("invalid syntax of group id '%s'"), argv[oind]);

      inf = strtoul (argv[oind] + 1, &end, 0);

      if (*end != '\0')
	error (_("invalid syntax of group id '%s'"), argv[oind]);
      VEC_safe_push (int, ids, inf);
    }
  if (VEC_length (int, ids) > 1)
    qsort (VEC_address (int, ids),
	   VEC_length (int, ids),
	   sizeof (int), compare_positive_ints);

  back_to = make_cleanup (free_vector_of_ints, &ids);

  if (available)
    {
      list_available_thread_groups (ids, recurse);
    }
  else if (VEC_length (int, ids) == 1)
    {
      /* Local thread groups, single id.  */
      int id = *VEC_address (int, ids);
      struct inferior *inf = find_inferior_id (id);

      if (!inf)
	error (_("Non-existent thread group id '%d'"), id);
      
      print_thread_info (uiout, NULL, inf->pid);
    }
  else
    {
      struct print_one_inferior_data data;

      data.recurse = recurse;
      data.inferiors = ids;

      /* Local thread groups.  Either no explicit ids -- and we
	 print everything, or several explicit ids.  In both cases,
	 we print more than one group, and have to use 'groups'
	 as the top-level element.  */
      make_cleanup_ui_out_list_begin_end (uiout, "groups");
      update_thread_list ();
      iterate_over_inferiors (print_one_inferior, &data);
    }

  do_cleanups (back_to);
}

void
mi_cmd_data_list_register_names (char *command, char **argv, int argc)
{
  struct gdbarch *gdbarch;
  struct ui_out *uiout = current_uiout;
  int regnum, numregs;
  int i;
  struct cleanup *cleanup;

  /* Note that the test for a valid register must include checking the
     gdbarch_register_name because gdbarch_num_regs may be allocated
     for the union of the register sets within a family of related
     processors.  In this case, some entries of gdbarch_register_name
     will change depending upon the particular processor being
     debugged.  */

  gdbarch = get_current_arch ();
  numregs = gdbarch_num_regs (gdbarch) + gdbarch_num_pseudo_regs (gdbarch);

  cleanup = make_cleanup_ui_out_list_begin_end (uiout, "register-names");

  if (argc == 0)		/* No args, just do all the regs.  */
    {
      for (regnum = 0;
	   regnum < numregs;
	   regnum++)
	{
	  if (gdbarch_register_name (gdbarch, regnum) == NULL
	      || *(gdbarch_register_name (gdbarch, regnum)) == '\0')
	    ui_out_field_string (uiout, NULL, "");
	  else
	    ui_out_field_string (uiout, NULL,
				 gdbarch_register_name (gdbarch, regnum));
	}
    }

  /* Else, list of register #s, just do listed regs.  */
  for (i = 0; i < argc; i++)
    {
      regnum = atoi (argv[i]);
      if (regnum < 0 || regnum >= numregs)
	error (_("bad register number"));

      if (gdbarch_register_name (gdbarch, regnum) == NULL
	  || *(gdbarch_register_name (gdbarch, regnum)) == '\0')
	ui_out_field_string (uiout, NULL, "");
      else
	ui_out_field_string (uiout, NULL,
			     gdbarch_register_name (gdbarch, regnum));
    }
  do_cleanups (cleanup);
}

void
mi_cmd_data_list_changed_registers (char *command, char **argv, int argc)
{
  static struct regcache *this_regs = NULL;
  struct ui_out *uiout = current_uiout;
  struct regcache *prev_regs;
  struct gdbarch *gdbarch;
  int regnum, numregs, changed;
  int i;
  struct cleanup *cleanup;

  /* The last time we visited this function, the current frame's
     register contents were saved in THIS_REGS.  Move THIS_REGS over
     to PREV_REGS, and refresh THIS_REGS with the now-current register
     contents.  */

  prev_regs = this_regs;
  this_regs = frame_save_as_regcache (get_selected_frame (NULL));
  cleanup = make_cleanup_regcache_xfree (prev_regs);

  /* Note that the test for a valid register must include checking the
     gdbarch_register_name because gdbarch_num_regs may be allocated
     for the union of the register sets within a family of related
     processors.  In this case, some entries of gdbarch_register_name
     will change depending upon the particular processor being
     debugged.  */

  gdbarch = get_regcache_arch (this_regs);
  numregs = gdbarch_num_regs (gdbarch) + gdbarch_num_pseudo_regs (gdbarch);

  make_cleanup_ui_out_list_begin_end (uiout, "changed-registers");

  if (argc == 0)
    {
      /* No args, just do all the regs.  */
      for (regnum = 0;
	   regnum < numregs;
	   regnum++)
	{
	  if (gdbarch_register_name (gdbarch, regnum) == NULL
	      || *(gdbarch_register_name (gdbarch, regnum)) == '\0')
	    continue;
	  changed = register_changed_p (regnum, prev_regs, this_regs);
	  if (changed < 0)
	    error (_("-data-list-changed-registers: "
		     "Unable to read register contents."));
	  else if (changed)
	    ui_out_field_int (uiout, NULL, regnum);
	}
    }

  /* Else, list of register #s, just do listed regs.  */
  for (i = 0; i < argc; i++)
    {
      regnum = atoi (argv[i]);

      if (regnum >= 0
	  && regnum < numregs
	  && gdbarch_register_name (gdbarch, regnum) != NULL
	  && *gdbarch_register_name (gdbarch, regnum) != '\000')
	{
	  changed = register_changed_p (regnum, prev_regs, this_regs);
	  if (changed < 0)
	    error (_("-data-list-changed-registers: "
		     "Unable to read register contents."));
	  else if (changed)
	    ui_out_field_int (uiout, NULL, regnum);
	}
      else
	error (_("bad register number"));
    }
  do_cleanups (cleanup);
}

static int
register_changed_p (int regnum, struct regcache *prev_regs,
		    struct regcache *this_regs)
{
  struct gdbarch *gdbarch = get_regcache_arch (this_regs);
  gdb_byte prev_buffer[MAX_REGISTER_SIZE];
  gdb_byte this_buffer[MAX_REGISTER_SIZE];
  enum register_status prev_status;
  enum register_status this_status;

  /* First time through or after gdbarch change consider all registers
     as changed.  */
  if (!prev_regs || get_regcache_arch (prev_regs) != gdbarch)
    return 1;

  /* Get register contents and compare.  */
  prev_status = regcache_cooked_read (prev_regs, regnum, prev_buffer);
  this_status = regcache_cooked_read (this_regs, regnum, this_buffer);

  if (this_status != prev_status)
    return 1;
  else if (this_status == REG_VALID)
    return memcmp (prev_buffer, this_buffer,
		   register_size (gdbarch, regnum)) != 0;
  else
    return 0;
}

/* Return a list of register number and value pairs.  The valid
   arguments expected are: a letter indicating the format in which to
   display the registers contents.  This can be one of: x
   (hexadecimal), d (decimal), N (natural), t (binary), o (octal), r
   (raw).  After the format argument there can be a sequence of
   numbers, indicating which registers to fetch the content of.  If
   the format is the only argument, a list of all the registers with
   their values is returned.  */

void
mi_cmd_data_list_register_values (char *command, char **argv, int argc)
{
  struct ui_out *uiout = current_uiout;
  struct frame_info *frame;
  struct gdbarch *gdbarch;
  int regnum, numregs, format;
  int i;
  struct cleanup *list_cleanup;
  int skip_unavailable = 0;
  int oind = 0;
  enum opt
  {
    SKIP_UNAVAILABLE,
  };
  static const struct mi_opt opts[] =
    {
      {"-skip-unavailable", SKIP_UNAVAILABLE, 0},
      { 0, 0, 0 }
    };

  /* Note that the test for a valid register must include checking the
     gdbarch_register_name because gdbarch_num_regs may be allocated
     for the union of the register sets within a family of related
     processors.  In this case, some entries of gdbarch_register_name
     will change depending upon the particular processor being
     debugged.  */

  while (1)
    {
      char *oarg;
      int opt = mi_getopt ("-data-list-register-values", argc, argv,
			   opts, &oind, &oarg);

      if (opt < 0)
	break;
      switch ((enum opt) opt)
	{
	case SKIP_UNAVAILABLE:
	  skip_unavailable = 1;
	  break;
	}
    }

  if (argc - oind < 1)
    error (_("-data-list-register-values: Usage: "
	     "-data-list-register-values [--skip-unavailable] <format>"
	     " [<regnum1>...<regnumN>]"));

  format = (int) argv[oind][0];

  frame = get_selected_frame (NULL);
  gdbarch = get_frame_arch (frame);
  numregs = gdbarch_num_regs (gdbarch) + gdbarch_num_pseudo_regs (gdbarch);

  list_cleanup = make_cleanup_ui_out_list_begin_end (uiout, "register-values");

  if (argc - oind == 1)
    {
      /* No args, beside the format: do all the regs.  */
      for (regnum = 0;
	   regnum < numregs;
	   regnum++)
	{
	  if (gdbarch_register_name (gdbarch, regnum) == NULL
	      || *(gdbarch_register_name (gdbarch, regnum)) == '\0')
	    continue;

	  output_register (frame, regnum, format, skip_unavailable);
	}
    }

  /* Else, list of register #s, just do listed regs.  */
  for (i = 1 + oind; i < argc; i++)
    {
      regnum = atoi (argv[i]);

      if (regnum >= 0
	  && regnum < numregs
	  && gdbarch_register_name (gdbarch, regnum) != NULL
	  && *gdbarch_register_name (gdbarch, regnum) != '\000')
	output_register (frame, regnum, format, skip_unavailable);
      else
	error (_("bad register number"));
    }
  do_cleanups (list_cleanup);
}

/* Output one register REGNUM's contents in the desired FORMAT.  If
   SKIP_UNAVAILABLE is true, skip the register if it is
   unavailable.  */

static void
output_register (struct frame_info *frame, int regnum, int format,
		 int skip_unavailable)
{
  struct gdbarch *gdbarch = get_frame_arch (frame);
  struct ui_out *uiout = current_uiout;
  struct value *val = value_of_register (regnum, frame);
  struct cleanup *tuple_cleanup;
  struct value_print_options opts;
  struct ui_file *stb;

  if (skip_unavailable && !value_entirely_available (val))
    return;

  tuple_cleanup = make_cleanup_ui_out_tuple_begin_end (uiout, NULL);
  ui_out_field_int (uiout, "number", regnum);

  if (format == 'N')
    format = 0;

  if (format == 'r')
    format = 'z';

  stb = mem_fileopen ();
  make_cleanup_ui_file_delete (stb);

  get_formatted_print_options (&opts, format);
  opts.deref_ref = 1;
  val_print (value_type (val),
	     value_contents_for_printing (val),
	     value_embedded_offset (val), 0,
	     stb, 0, val, &opts, current_language);
  ui_out_field_stream (uiout, "value", stb);

  do_cleanups (tuple_cleanup);
}

/* Write given values into registers. The registers and values are
   given as pairs.  The corresponding MI command is 
   -data-write-register-values <format>
                               [<regnum1> <value1>...<regnumN> <valueN>] */
void
mi_cmd_data_write_register_values (char *command, char **argv, int argc)
{
  struct regcache *regcache;
  struct gdbarch *gdbarch;
  int numregs, i;

  /* Note that the test for a valid register must include checking the
     gdbarch_register_name because gdbarch_num_regs may be allocated
     for the union of the register sets within a family of related
     processors.  In this case, some entries of gdbarch_register_name
     will change depending upon the particular processor being
     debugged.  */

  regcache = get_current_regcache ();
  gdbarch = get_regcache_arch (regcache);
  numregs = gdbarch_num_regs (gdbarch) + gdbarch_num_pseudo_regs (gdbarch);

  if (argc == 0)
    error (_("-data-write-register-values: Usage: -data-write-register-"
	     "values <format> [<regnum1> <value1>...<regnumN> <valueN>]"));

  if (!target_has_registers)
    error (_("-data-write-register-values: No registers."));

  if (!(argc - 1))
    error (_("-data-write-register-values: No regs and values specified."));

  if ((argc - 1) % 2)
    error (_("-data-write-register-values: "
	     "Regs and vals are not in pairs."));

  for (i = 1; i < argc; i = i + 2)
    {
      int regnum = atoi (argv[i]);

      if (regnum >= 0 && regnum < numregs
	  && gdbarch_register_name (gdbarch, regnum)
	  && *gdbarch_register_name (gdbarch, regnum))
	{
	  LONGEST value;

	  /* Get the value as a number.  */
	  value = parse_and_eval_address (argv[i + 1]);

	  /* Write it down.  */
	  regcache_cooked_write_signed (regcache, regnum, value);
	}
      else
	error (_("bad register number"));
    }
}

/* Evaluate the value of the argument.  The argument is an
   expression. If the expression contains spaces it needs to be
   included in double quotes.  */

void
mi_cmd_data_evaluate_expression (char *command, char **argv, int argc)
{
  struct expression *expr;
  struct cleanup *old_chain;
  struct value *val;
  struct ui_file *stb;
  struct value_print_options opts;
  struct ui_out *uiout = current_uiout;

  stb = mem_fileopen ();
  old_chain = make_cleanup_ui_file_delete (stb);

  if (argc != 1)
    error (_("-data-evaluate-expression: "
	     "Usage: -data-evaluate-expression expression"));

  expr = parse_expression (argv[0]);

  make_cleanup (free_current_contents, &expr);

  val = evaluate_expression (expr);

  /* Print the result of the expression evaluation.  */
  get_user_print_options (&opts);
  opts.deref_ref = 0;
  common_val_print (val, stb, 0, &opts, current_language);

  ui_out_field_stream (uiout, "value", stb);

  do_cleanups (old_chain);
}

/* This is the -data-read-memory command.

   ADDR: start address of data to be dumped.
   WORD-FORMAT: a char indicating format for the ``word''.  See 
   the ``x'' command.
   WORD-SIZE: size of each ``word''; 1,2,4, or 8 bytes.
   NR_ROW: Number of rows.
   NR_COL: The number of colums (words per row).
   ASCHAR: (OPTIONAL) Append an ascii character dump to each row.  Use
   ASCHAR for unprintable characters.

   Reads SIZE*NR_ROW*NR_COL bytes starting at ADDR from memory and
   displayes them.  Returns:

   {addr="...",rowN={wordN="..." ,... [,ascii="..."]}, ...}

   Returns: 
   The number of bytes read is SIZE*ROW*COL.  */

void
mi_cmd_data_read_memory (char *command, char **argv, int argc)
{
  struct gdbarch *gdbarch = get_current_arch ();
  struct ui_out *uiout = current_uiout;
  struct cleanup *cleanups = make_cleanup (null_cleanup, NULL);
  CORE_ADDR addr;
  long total_bytes, nr_cols, nr_rows;
  char word_format;
  struct type *word_type;
  long word_size;
  char word_asize;
  char aschar;
  gdb_byte *mbuf;
  int nr_bytes;
  long offset = 0;
  int oind = 0;
  char *oarg;
  enum opt
  {
    OFFSET_OPT
  };
  static const struct mi_opt opts[] =
    {
      {"o", OFFSET_OPT, 1},
      { 0, 0, 0 }
    };

  while (1)
    {
      int opt = mi_getopt ("-data-read-memory", argc, argv, opts,
			   &oind, &oarg);

      if (opt < 0)
	break;
      switch ((enum opt) opt)
	{
	case OFFSET_OPT:
	  offset = atol (oarg);
	  break;
	}
    }
  argv += oind;
  argc -= oind;

  if (argc < 5 || argc > 6)
    error (_("-data-read-memory: Usage: "
	     "ADDR WORD-FORMAT WORD-SIZE NR-ROWS NR-COLS [ASCHAR]."));

  /* Extract all the arguments. */

  /* Start address of the memory dump.  */
  addr = parse_and_eval_address (argv[0]) + offset;
  /* The format character to use when displaying a memory word.  See
     the ``x'' command.  */
  word_format = argv[1][0];
  /* The size of the memory word.  */
  word_size = atol (argv[2]);
  switch (word_size)
    {
    case 1:
      word_type = builtin_type (gdbarch)->builtin_int8;
      word_asize = 'b';
      break;
    case 2:
      word_type = builtin_type (gdbarch)->builtin_int16;
      word_asize = 'h';
      break;
    case 4:
      word_type = builtin_type (gdbarch)->builtin_int32;
      word_asize = 'w';
      break;
    case 8:
      word_type = builtin_type (gdbarch)->builtin_int64;
      word_asize = 'g';
      break;
    default:
      word_type = builtin_type (gdbarch)->builtin_int8;
      word_asize = 'b';
    }
  /* The number of rows.  */
  nr_rows = atol (argv[3]);
  if (nr_rows <= 0)
    error (_("-data-read-memory: invalid number of rows."));

  /* Number of bytes per row.  */
  nr_cols = atol (argv[4]);
  if (nr_cols <= 0)
    error (_("-data-read-memory: invalid number of columns."));

  /* The un-printable character when printing ascii.  */
  if (argc == 6)
    aschar = *argv[5];
  else
    aschar = 0;

  /* Create a buffer and read it in.  */
  total_bytes = word_size * nr_rows * nr_cols;
  mbuf = xcalloc (total_bytes, 1);
  make_cleanup (xfree, mbuf);

  /* Dispatch memory reads to the topmost target, not the flattened
     current_target.  */
  nr_bytes = target_read (current_target.beneath,
			  TARGET_OBJECT_MEMORY, NULL, mbuf,
			  addr, total_bytes);
  if (nr_bytes <= 0)
    error (_("Unable to read memory."));

  /* Output the header information.  */
  ui_out_field_core_addr (uiout, "addr", gdbarch, addr);
  ui_out_field_int (uiout, "nr-bytes", nr_bytes);
  ui_out_field_int (uiout, "total-bytes", total_bytes);
  ui_out_field_core_addr (uiout, "next-row",
			  gdbarch, addr + word_size * nr_cols);
  ui_out_field_core_addr (uiout, "prev-row",
			  gdbarch, addr - word_size * nr_cols);
  ui_out_field_core_addr (uiout, "next-page", gdbarch, addr + total_bytes);
  ui_out_field_core_addr (uiout, "prev-page", gdbarch, addr - total_bytes);

  /* Build the result as a two dimentional table.  */
  {
    struct ui_file *stream;
    struct cleanup *cleanup_stream;
    int row;
    int row_byte;

    stream = mem_fileopen ();
    cleanup_stream = make_cleanup_ui_file_delete (stream);

    make_cleanup_ui_out_list_begin_end (uiout, "memory");
    for (row = 0, row_byte = 0;
	 row < nr_rows;
	 row++, row_byte += nr_cols * word_size)
      {
	int col;
	int col_byte;
	struct cleanup *cleanup_tuple;
	struct cleanup *cleanup_list_data;
	struct value_print_options opts;

	cleanup_tuple = make_cleanup_ui_out_tuple_begin_end (uiout, NULL);
	ui_out_field_core_addr (uiout, "addr", gdbarch, addr + row_byte);
	/* ui_out_field_core_addr_symbolic (uiout, "saddr", addr +
	   row_byte); */
	cleanup_list_data = make_cleanup_ui_out_list_begin_end (uiout, "data");
	get_formatted_print_options (&opts, word_format);
	for (col = 0, col_byte = row_byte;
	     col < nr_cols;
	     col++, col_byte += word_size)
	  {
	    if (col_byte + word_size > nr_bytes)
	      {
		ui_out_field_string (uiout, NULL, "N/A");
	      }
	    else
	      {
		ui_file_rewind (stream);
		print_scalar_formatted (mbuf + col_byte, word_type, &opts,
					word_asize, stream);
		ui_out_field_stream (uiout, NULL, stream);
	      }
	  }
	do_cleanups (cleanup_list_data);
	if (aschar)
	  {
	    int byte;

	    ui_file_rewind (stream);
	    for (byte = row_byte;
		 byte < row_byte + word_size * nr_cols; byte++)
	      {
		if (byte >= nr_bytes)
		  fputc_unfiltered ('X', stream);
		else if (mbuf[byte] < 32 || mbuf[byte] > 126)
		  fputc_unfiltered (aschar, stream);
		else
		  fputc_unfiltered (mbuf[byte], stream);
	      }
	    ui_out_field_stream (uiout, "ascii", stream);
	  }
	do_cleanups (cleanup_tuple);
      }
    do_cleanups (cleanup_stream);
  }
  do_cleanups (cleanups);
}

void
mi_cmd_data_read_memory_bytes (char *command, char **argv, int argc)
{
  struct gdbarch *gdbarch = get_current_arch ();
  struct ui_out *uiout = current_uiout;
  struct cleanup *cleanups;
  CORE_ADDR addr;
  LONGEST length;
  memory_read_result_s *read_result;
  int ix;
  VEC(memory_read_result_s) *result;
  long offset = 0;
  int oind = 0;
  char *oarg;
  enum opt
  {
    OFFSET_OPT
  };
  static const struct mi_opt opts[] =
    {
      {"o", OFFSET_OPT, 1},
      { 0, 0, 0 }
    };

  while (1)
    {
      int opt = mi_getopt ("-data-read-memory-bytes", argc, argv, opts,
			   &oind, &oarg);
      if (opt < 0)
	break;
      switch ((enum opt) opt)
	{
	case OFFSET_OPT:
	  offset = atol (oarg);
	  break;
	}
    }
  argv += oind;
  argc -= oind;

  if (argc != 2)
    error (_("Usage: [ -o OFFSET ] ADDR LENGTH."));

  addr = parse_and_eval_address (argv[0]) + offset;
  length = atol (argv[1]);

  result = read_memory_robust (current_target.beneath, addr, length);

  cleanups = make_cleanup (free_memory_read_result_vector, result);

  if (VEC_length (memory_read_result_s, result) == 0)
    error (_("Unable to read memory."));

  make_cleanup_ui_out_list_begin_end (uiout, "memory");
  for (ix = 0;
       VEC_iterate (memory_read_result_s, result, ix, read_result);
       ++ix)
    {
      struct cleanup *t = make_cleanup_ui_out_tuple_begin_end (uiout, NULL);
      char *data, *p;
      int i;

      ui_out_field_core_addr (uiout, "begin", gdbarch, read_result->begin);
      ui_out_field_core_addr (uiout, "offset", gdbarch, read_result->begin
			      - addr);
      ui_out_field_core_addr (uiout, "end", gdbarch, read_result->end);

      data = xmalloc ((read_result->end - read_result->begin) * 2 + 1);

      for (i = 0, p = data;
	   i < (read_result->end - read_result->begin);
	   ++i, p += 2)
	{
	  sprintf (p, "%02x", read_result->data[i]);
	}
      ui_out_field_string (uiout, "contents", data);
      xfree (data);
      do_cleanups (t);
    }
  do_cleanups (cleanups);
}

/* Implementation of the -data-write_memory command.

   COLUMN_OFFSET: optional argument. Must be preceded by '-o'. The
   offset from the beginning of the memory grid row where the cell to
   be written is.
   ADDR: start address of the row in the memory grid where the memory
   cell is, if OFFSET_COLUMN is specified.  Otherwise, the address of
   the location to write to.
   FORMAT: a char indicating format for the ``word''.  See 
   the ``x'' command.
   WORD_SIZE: size of each ``word''; 1,2,4, or 8 bytes
   VALUE: value to be written into the memory address.

   Writes VALUE into ADDR + (COLUMN_OFFSET * WORD_SIZE).

   Prints nothing.  */

void
mi_cmd_data_write_memory (char *command, char **argv, int argc)
{
  struct gdbarch *gdbarch = get_current_arch ();
  enum bfd_endian byte_order = gdbarch_byte_order (gdbarch);
  CORE_ADDR addr;
  long word_size;
  /* FIXME: ezannoni 2000-02-17 LONGEST could possibly not be big
     enough when using a compiler other than GCC.  */
  LONGEST value;
  void *buffer;
  struct cleanup *old_chain;
  long offset = 0;
  int oind = 0;
  char *oarg;
  enum opt
  {
    OFFSET_OPT
  };
  static const struct mi_opt opts[] =
    {
      {"o", OFFSET_OPT, 1},
      { 0, 0, 0 }
    };

  while (1)
    {
      int opt = mi_getopt ("-data-write-memory", argc, argv, opts,
			   &oind, &oarg);

      if (opt < 0)
	break;
      switch ((enum opt) opt)
	{
	case OFFSET_OPT:
	  offset = atol (oarg);
	  break;
	}
    }
  argv += oind;
  argc -= oind;

  if (argc != 4)
    error (_("-data-write-memory: Usage: "
	     "[-o COLUMN_OFFSET] ADDR FORMAT WORD-SIZE VALUE."));

  /* Extract all the arguments.  */
  /* Start address of the memory dump.  */
  addr = parse_and_eval_address (argv[0]);
  /* The size of the memory word.  */
  word_size = atol (argv[2]);

  /* Calculate the real address of the write destination.  */
  addr += (offset * word_size);

  /* Get the value as a number.  */
  value = parse_and_eval_address (argv[3]);
  /* Get the value into an array.  */
  buffer = xmalloc (word_size);
  old_chain = make_cleanup (xfree, buffer);
  store_signed_integer (buffer, word_size, byte_order, value);
  /* Write it down to memory.  */
  write_memory_with_notification (addr, buffer, word_size);
  /* Free the buffer.  */
  do_cleanups (old_chain);
}

/* Implementation of the -data-write-memory-bytes command.

   ADDR: start address
   DATA: string of bytes to write at that address
   COUNT: number of bytes to be filled (decimal integer).  */

void
mi_cmd_data_write_memory_bytes (char *command, char **argv, int argc)
{
  CORE_ADDR addr;
  char *cdata;
  gdb_byte *data;
  gdb_byte *databuf;
  size_t len, i, steps, remainder;
  long int count, j;
  struct cleanup *back_to;

  if (argc != 2 && argc != 3)
    error (_("Usage: ADDR DATA [COUNT]."));

  addr = parse_and_eval_address (argv[0]);
  cdata = argv[1];
  if (strlen (cdata) % 2)
    error (_("Hex-encoded '%s' must have an even number of characters."),
	   cdata);

  len = strlen (cdata)/2;
  if (argc == 3)
    count = strtoul (argv[2], NULL, 10);
  else
    count = len;

  databuf = xmalloc (len * sizeof (gdb_byte));
  back_to = make_cleanup (xfree, databuf);

  for (i = 0; i < len; ++i)
    {
      int x;
      if (sscanf (cdata + i * 2, "%02x", &x) != 1)
        error (_("Invalid argument"));
      databuf[i] = (gdb_byte) x;
    }

  if (len < count)
    {
      /* Pattern is made of less bytes than count: 
         repeat pattern to fill memory.  */
      data = xmalloc (count);
      make_cleanup (xfree, data);
    
      steps = count / len;
      remainder = count % len;
      for (j = 0; j < steps; j++)
        memcpy (data + j * len, databuf, len);

      if (remainder > 0)
        memcpy (data + steps * len, databuf, remainder);
    }
  else 
    {
      /* Pattern is longer than or equal to count: 
         just copy len bytes.  */
      data = databuf;
    }

  write_memory_with_notification (addr, data, count);

  do_cleanups (back_to);
}

void
mi_cmd_enable_timings (char *command, char **argv, int argc)
{
  if (argc == 0)
    do_timings = 1;
  else if (argc == 1)
    {
      if (strcmp (argv[0], "yes") == 0)
	do_timings = 1;
      else if (strcmp (argv[0], "no") == 0)
	do_timings = 0;
      else
	goto usage_error;
    }
  else
    goto usage_error;
    
  return;

 usage_error:
  error (_("-enable-timings: Usage: %s {yes|no}"), command);
}

void
mi_cmd_list_features (char *command, char **argv, int argc)
{
  if (argc == 0)
    {
      struct cleanup *cleanup = NULL;
      struct ui_out *uiout = current_uiout;

      cleanup = make_cleanup_ui_out_list_begin_end (uiout, "features");      
      ui_out_field_string (uiout, NULL, "frozen-varobjs");
      ui_out_field_string (uiout, NULL, "pending-breakpoints");
      ui_out_field_string (uiout, NULL, "thread-info");
      ui_out_field_string (uiout, NULL, "data-read-memory-bytes");
      ui_out_field_string (uiout, NULL, "breakpoint-notifications");
      ui_out_field_string (uiout, NULL, "ada-task-info");
      
#if HAVE_PYTHON
      if (gdb_python_initialized)
	ui_out_field_string (uiout, NULL, "python");
#endif
      
      do_cleanups (cleanup);
      return;
    }

  error (_("-list-features should be passed no arguments"));
}

void
mi_cmd_list_target_features (char *command, char **argv, int argc)
{
  if (argc == 0)
    {
      struct cleanup *cleanup = NULL;
      struct ui_out *uiout = current_uiout;

      cleanup = make_cleanup_ui_out_list_begin_end (uiout, "features");      
      if (target_can_async_p ())
	ui_out_field_string (uiout, NULL, "async");
      if (target_can_execute_reverse)
	ui_out_field_string (uiout, NULL, "reverse");
      
      do_cleanups (cleanup);
      return;
    }

  error (_("-list-target-features should be passed no arguments"));
}

void
mi_cmd_add_inferior (char *command, char **argv, int argc)
{
  struct inferior *inf;

  if (argc != 0)
    error (_("-add-inferior should be passed no arguments"));

  inf = add_inferior_with_spaces ();

  ui_out_field_fmt (current_uiout, "inferior", "i%d", inf->num);
}

/* Callback used to find the first inferior other than the current
   one.  */
   
static int
get_other_inferior (struct inferior *inf, void *arg)
{
  if (inf == current_inferior ())
    return 0;

  return 1;
}

void
mi_cmd_remove_inferior (char *command, char **argv, int argc)
{
  int id;
  struct inferior *inf;

  if (argc != 1)
    error (_("-remove-inferior should be passed a single argument"));

  if (sscanf (argv[0], "i%d", &id) != 1)
    error (_("the thread group id is syntactically invalid"));

  inf = find_inferior_id (id);
  if (!inf)
    error (_("the specified thread group does not exist"));

  if (inf->pid != 0)
    error (_("cannot remove an active inferior"));

  if (inf == current_inferior ())
    {
      struct thread_info *tp = 0;
      struct inferior *new_inferior 
	= iterate_over_inferiors (get_other_inferior, NULL);

      if (new_inferior == NULL)
	error (_("Cannot remove last inferior"));

      set_current_inferior (new_inferior);
      if (new_inferior->pid != 0)
	tp = any_thread_of_process (new_inferior->pid);
      switch_to_thread (tp ? tp->ptid : null_ptid);
      set_current_program_space (new_inferior->pspace);
    }

  delete_inferior_1 (inf, 1 /* silent */);
}



/* Execute a command within a safe environment.
   Return <0 for error; >=0 for ok.

   args->action will tell mi_execute_command what action
   to perfrom after the given command has executed (display/suppress
   prompt, display error).  */

static void
captured_mi_execute_command (struct ui_out *uiout, struct mi_parse *context)
{
  struct cleanup *cleanup;

  if (do_timings)
    current_command_ts = context->cmd_start;

  current_token = xstrdup (context->token);
  cleanup = make_cleanup (free_current_contents, &current_token);

  running_result_record_printed = 0;
  mi_proceeded = 0;
  switch (context->op)
    {
    case MI_COMMAND:
      /* A MI command was read from the input stream.  */
      if (mi_debug_p)
	/* FIXME: gdb_???? */
	fprintf_unfiltered (raw_stdout, " token=`%s' command=`%s' args=`%s'\n",
			    context->token, context->command, context->args);

      mi_cmd_execute (context);

      /* Print the result if there were no errors.

	 Remember that on the way out of executing a command, you have
	 to directly use the mi_interp's uiout, since the command
	 could have reset the interpreter, in which case the current
	 uiout will most likely crash in the mi_out_* routines.  */
      if (!running_result_record_printed)
	{
	  fputs_unfiltered (context->token, raw_stdout);
	  /* There's no particularly good reason why target-connect results
	     in not ^done.  Should kill ^connected for MI3.  */
	  fputs_unfiltered (strcmp (context->command, "target-select") == 0
			    ? "^connected" : "^done", raw_stdout);
	  mi_out_put (uiout, raw_stdout);
	  mi_out_rewind (uiout);
	  mi_print_timing_maybe ();
	  fputs_unfiltered ("\n", raw_stdout);
	}
      else
	/* The command does not want anything to be printed.  In that
	   case, the command probably should not have written anything
	   to uiout, but in case it has written something, discard it.  */
	mi_out_rewind (uiout);
      break;

    case CLI_COMMAND:
      {
	char *argv[2];

	/* A CLI command was read from the input stream.  */
	/* This "feature" will be removed as soon as we have a
	   complete set of mi commands.  */
	/* Echo the command on the console.  */
	fprintf_unfiltered (gdb_stdlog, "%s\n", context->command);
	/* Call the "console" interpreter.  */
	argv[0] = "console";
	argv[1] = context->command;
	mi_cmd_interpreter_exec ("-interpreter-exec", argv, 2);

	/* If we changed interpreters, DON'T print out anything.  */
	if (current_interp_named_p (INTERP_MI)
	    || current_interp_named_p (INTERP_MI1)
	    || current_interp_named_p (INTERP_MI2)
	    || current_interp_named_p (INTERP_MI3))
	  {
	    if (!running_result_record_printed)
	      {
		fputs_unfiltered (context->token, raw_stdout);
		fputs_unfiltered ("^done", raw_stdout);
		mi_out_put (uiout, raw_stdout);
		mi_out_rewind (uiout);
		mi_print_timing_maybe ();
		fputs_unfiltered ("\n", raw_stdout);		
	      }
	    else
	      mi_out_rewind (uiout);
	  }
	break;
      }
    }

  do_cleanups (cleanup);
}

/* Print a gdb exception to the MI output stream.  */

static void
mi_print_exception (const char *token, struct gdb_exception exception)
{
  fputs_unfiltered (token, raw_stdout);
  fputs_unfiltered ("^error,msg=\"", raw_stdout);
  if (exception.message == NULL)
    fputs_unfiltered ("unknown error", raw_stdout);
  else
    fputstr_unfiltered (exception.message, '"', raw_stdout);
  fputs_unfiltered ("\"\n", raw_stdout);
}

void
mi_execute_command (const char *cmd, int from_tty)
{
  char *token;
  struct mi_parse *command = NULL;
  volatile struct gdb_exception exception;

  /* This is to handle EOF (^D). We just quit gdb.  */
  /* FIXME: we should call some API function here.  */
  if (cmd == 0)
    quit_force (NULL, from_tty);

  target_log_command (cmd);

  TRY_CATCH (exception, RETURN_MASK_ALL)
    {
      command = mi_parse (cmd, &token);
    }
  if (exception.reason < 0)
    {
      mi_print_exception (token, exception);
      xfree (token);
    }
  else
    {
      volatile struct gdb_exception result;
      ptid_t previous_ptid = inferior_ptid;

      command->token = token;

      if (do_timings)
	{
	  command->cmd_start = (struct mi_timestamp *)
	    xmalloc (sizeof (struct mi_timestamp));
	  timestamp (command->cmd_start);
	}

      TRY_CATCH (result, RETURN_MASK_ALL)
	{
	  captured_mi_execute_command (current_uiout, command);
	}
      if (result.reason < 0)
	{
	  /* The command execution failed and error() was called
	     somewhere.  */
	  mi_print_exception (command->token, result);
	  mi_out_rewind (current_uiout);
	}

      bpstat_do_actions ();

      if (/* The notifications are only output when the top-level
	     interpreter (specified on the command line) is MI.  */      
	  ui_out_is_mi_like_p (interp_ui_out (top_level_interpreter ()))
	  /* Don't try report anything if there are no threads -- 
	     the program is dead.  */
	  && thread_count () != 0
	  /* -thread-select explicitly changes thread. If frontend uses that
	     internally, we don't want to emit =thread-selected, since
	     =thread-selected is supposed to indicate user's intentions.  */
	  && strcmp (command->command, "thread-select") != 0)
	{
	  struct mi_interp *mi = top_level_interpreter_data ();
	  int report_change = 0;

	  if (command->thread == -1)
	    {
	      report_change = (!ptid_equal (previous_ptid, null_ptid)
			       && !ptid_equal (inferior_ptid, previous_ptid)
			       && !ptid_equal (inferior_ptid, null_ptid));
	    }
	  else if (!ptid_equal (inferior_ptid, null_ptid))
	    {
	      struct thread_info *ti = inferior_thread ();

	      report_change = (ti->num != command->thread);
	    }

	  if (report_change)
	    {     
	      struct thread_info *ti = inferior_thread ();

	      target_terminal_ours ();
	      fprintf_unfiltered (mi->event_channel, 
				  "thread-selected,id=\"%d\"",
				  ti->num);
	      gdb_flush (mi->event_channel);
	    }
	}

      mi_parse_free (command);
    }
}

static void
mi_cmd_execute (struct mi_parse *parse)
{
  struct cleanup *cleanup;

  cleanup = prepare_execute_command ();

  if (parse->all && parse->thread_group != -1)
    error (_("Cannot specify --thread-group together with --all"));

  if (parse->all && parse->thread != -1)
    error (_("Cannot specify --thread together with --all"));

  if (parse->thread_group != -1 && parse->thread != -1)
    error (_("Cannot specify --thread together with --thread-group"));

  if (parse->frame != -1 && parse->thread == -1)
    error (_("Cannot specify --frame without --thread"));

  if (parse->thread_group != -1)
    {
      struct inferior *inf = find_inferior_id (parse->thread_group);
      struct thread_info *tp = 0;

      if (!inf)
	error (_("Invalid thread group for the --thread-group option"));

      set_current_inferior (inf);
      /* This behaviour means that if --thread-group option identifies
	 an inferior with multiple threads, then a random one will be
	 picked.  This is not a problem -- frontend should always
	 provide --thread if it wishes to operate on a specific
	 thread.  */
      if (inf->pid != 0)
	tp = any_live_thread_of_process (inf->pid);
      switch_to_thread (tp ? tp->ptid : null_ptid);
      set_current_program_space (inf->pspace);
    }

  if (parse->thread != -1)
    {
      struct thread_info *tp = find_thread_id (parse->thread);

      if (!tp)
	error (_("Invalid thread id: %d"), parse->thread);

      if (is_exited (tp->ptid))
	error (_("Thread id: %d has terminated"), parse->thread);

      switch_to_thread (tp->ptid);
    }

  if (parse->frame != -1)
    {
      struct frame_info *fid;
      int frame = parse->frame;

      fid = find_relative_frame (get_current_frame (), &frame);
      if (frame == 0)
	/* find_relative_frame was successful */
	select_frame (fid);
      else
	error (_("Invalid frame id: %d"), frame);
    }

  current_context = parse;

  if (parse->cmd->suppress_notification != NULL)
    {
      make_cleanup_restore_integer (parse->cmd->suppress_notification);
      *parse->cmd->suppress_notification = 1;
    }

  if (parse->cmd->argv_func != NULL)
    {
      parse->cmd->argv_func (parse->command, parse->argv, parse->argc);
    }
  else if (parse->cmd->cli.cmd != 0)
    {
      /* FIXME: DELETE THIS. */
      /* The operation is still implemented by a cli command.  */
      /* Must be a synchronous one.  */
      mi_execute_cli_command (parse->cmd->cli.cmd, parse->cmd->cli.args_p,
			      parse->args);
    }
  else
    {
      /* FIXME: DELETE THIS.  */
      struct ui_file *stb;

      stb = mem_fileopen ();

      fputs_unfiltered ("Undefined mi command: ", stb);
      fputstr_unfiltered (parse->command, '"', stb);
      fputs_unfiltered (" (missing implementation)", stb);

      make_cleanup_ui_file_delete (stb);
      error_stream (stb);
    }
  do_cleanups (cleanup);
}

/* FIXME: This is just a hack so we can get some extra commands going.
   We don't want to channel things through the CLI, but call libgdb directly.
   Use only for synchronous commands.  */

void
mi_execute_cli_command (const char *cmd, int args_p, const char *args)
{
  if (cmd != 0)
    {
      struct cleanup *old_cleanups;
      char *run;

      if (args_p)
	run = xstrprintf ("%s %s", cmd, args);
      else
	run = xstrdup (cmd);
      if (mi_debug_p)
	/* FIXME: gdb_???? */
	fprintf_unfiltered (gdb_stdout, "cli=%s run=%s\n",
			    cmd, run);
      old_cleanups = make_cleanup (xfree, run);
      execute_command (run, 0 /* from_tty */ );
      do_cleanups (old_cleanups);
      return;
    }
}

void
mi_execute_async_cli_command (char *cli_command, char **argv, int argc)
{
  struct cleanup *old_cleanups;
  char *run;

  if (target_can_async_p ())
    run = xstrprintf ("%s %s&", cli_command, argc ? *argv : "");
  else
    run = xstrprintf ("%s %s", cli_command, argc ? *argv : "");
  old_cleanups = make_cleanup (xfree, run);  

  execute_command (run, 0 /* from_tty */ );

  /* Do this before doing any printing.  It would appear that some
     print code leaves garbage around in the buffer.  */
  do_cleanups (old_cleanups);
}

void
mi_load_progress (const char *section_name,
		  unsigned long sent_so_far,
		  unsigned long total_section,
		  unsigned long total_sent,
		  unsigned long grand_total)
{
  struct timeval time_now, delta, update_threshold;
  static struct timeval last_update;
  static char *previous_sect_name = NULL;
  int new_section;
  struct ui_out *saved_uiout;
  struct ui_out *uiout;

  /* This function is called through deprecated_show_load_progress
     which means uiout may not be correct.  Fix it for the duration
     of this function.  */
  saved_uiout = current_uiout;

  if (current_interp_named_p (INTERP_MI)
      || current_interp_named_p (INTERP_MI2))
    current_uiout = mi_out_new (2);
  else if (current_interp_named_p (INTERP_MI1))
    current_uiout = mi_out_new (1);
  else if (current_interp_named_p (INTERP_MI3))
    current_uiout = mi_out_new (3);
  else
    return;

  uiout = current_uiout;

  update_threshold.tv_sec = 0;
  update_threshold.tv_usec = 500000;
  gettimeofday (&time_now, NULL);

  delta.tv_usec = time_now.tv_usec - last_update.tv_usec;
  delta.tv_sec = time_now.tv_sec - last_update.tv_sec;

  if (delta.tv_usec < 0)
    {
      delta.tv_sec -= 1;
      delta.tv_usec += 1000000L;
    }

  new_section = (previous_sect_name ?
		 strcmp (previous_sect_name, section_name) : 1);
  if (new_section)
    {
      struct cleanup *cleanup_tuple;

      xfree (previous_sect_name);
      previous_sect_name = xstrdup (section_name);

      if (current_token)
	fputs_unfiltered (current_token, raw_stdout);
      fputs_unfiltered ("+download", raw_stdout);
      cleanup_tuple = make_cleanup_ui_out_tuple_begin_end (uiout, NULL);
      ui_out_field_string (uiout, "section", section_name);
      ui_out_field_int (uiout, "section-size", total_section);
      ui_out_field_int (uiout, "total-size", grand_total);
      do_cleanups (cleanup_tuple);
      mi_out_put (uiout, raw_stdout);
      fputs_unfiltered ("\n", raw_stdout);
      gdb_flush (raw_stdout);
    }

  if (delta.tv_sec >= update_threshold.tv_sec &&
      delta.tv_usec >= update_threshold.tv_usec)
    {
      struct cleanup *cleanup_tuple;

      last_update.tv_sec = time_now.tv_sec;
      last_update.tv_usec = time_now.tv_usec;
      if (current_token)
	fputs_unfiltered (current_token, raw_stdout);
      fputs_unfiltered ("+download", raw_stdout);
      cleanup_tuple = make_cleanup_ui_out_tuple_begin_end (uiout, NULL);
      ui_out_field_string (uiout, "section", section_name);
      ui_out_field_int (uiout, "section-sent", sent_so_far);
      ui_out_field_int (uiout, "section-size", total_section);
      ui_out_field_int (uiout, "total-sent", total_sent);
      ui_out_field_int (uiout, "total-size", grand_total);
      do_cleanups (cleanup_tuple);
      mi_out_put (uiout, raw_stdout);
      fputs_unfiltered ("\n", raw_stdout);
      gdb_flush (raw_stdout);
    }

  xfree (uiout);
  current_uiout = saved_uiout;
}

static void 
timestamp (struct mi_timestamp *tv)
{
  gettimeofday (&tv->wallclock, NULL);
#ifdef HAVE_GETRUSAGE
  getrusage (RUSAGE_SELF, &rusage);
  tv->utime.tv_sec = rusage.ru_utime.tv_sec;
  tv->utime.tv_usec = rusage.ru_utime.tv_usec;
  tv->stime.tv_sec = rusage.ru_stime.tv_sec;
  tv->stime.tv_usec = rusage.ru_stime.tv_usec;
#else
  {
    long usec = get_run_time ();

    tv->utime.tv_sec = usec/1000000L;
    tv->utime.tv_usec = usec - 1000000L*tv->utime.tv_sec;
    tv->stime.tv_sec = 0;
    tv->stime.tv_usec = 0;
  }
#endif
}

static void 
print_diff_now (struct mi_timestamp *start)
{
  struct mi_timestamp now;

  timestamp (&now);
  print_diff (start, &now);
}

void
mi_print_timing_maybe (void)
{
  /* If the command is -enable-timing then do_timings may be true
     whilst current_command_ts is not initialized.  */
  if (do_timings && current_command_ts)
    print_diff_now (current_command_ts);
}

static long 
timeval_diff (struct timeval start, struct timeval end)
{
  return ((end.tv_sec - start.tv_sec) * 1000000L)
    + (end.tv_usec - start.tv_usec);
}

static void 
print_diff (struct mi_timestamp *start, struct mi_timestamp *end)
{
  fprintf_unfiltered
    (raw_stdout,
     ",time={wallclock=\"%0.5f\",user=\"%0.5f\",system=\"%0.5f\"}", 
     timeval_diff (start->wallclock, end->wallclock) / 1000000.0, 
     timeval_diff (start->utime, end->utime) / 1000000.0, 
     timeval_diff (start->stime, end->stime) / 1000000.0);
}

void
mi_cmd_trace_define_variable (char *command, char **argv, int argc)
{
  struct expression *expr;
  LONGEST initval = 0;
  struct trace_state_variable *tsv;
  char *name = 0;

  if (argc != 1 && argc != 2)
    error (_("Usage: -trace-define-variable VARIABLE [VALUE]"));

  name = argv[0];
  if (*name++ != '$')
    error (_("Name of trace variable should start with '$'"));

  validate_trace_state_variable_name (name);

  tsv = find_trace_state_variable (name);
  if (!tsv)
    tsv = create_trace_state_variable (name);

  if (argc == 2)
    initval = value_as_long (parse_and_eval (argv[1]));

  tsv->initial_value = initval;
}

void
mi_cmd_trace_list_variables (char *command, char **argv, int argc)
{
  if (argc != 0)
    error (_("-trace-list-variables: no arguments allowed"));

  tvariables_info_1 ();
}

void
mi_cmd_trace_find (char *command, char **argv, int argc)
{
  char *mode;

  if (argc == 0)
    error (_("trace selection mode is required"));

  mode = argv[0];

  if (strcmp (mode, "none") == 0)
    {
      tfind_1 (tfind_number, -1, 0, 0, 0);
      return;
    }

  if (current_trace_status ()->running)
    error (_("May not look at trace frames while trace is running."));

  if (strcmp (mode, "frame-number") == 0)
    {
      if (argc != 2)
	error (_("frame number is required"));
      tfind_1 (tfind_number, atoi (argv[1]), 0, 0, 0);
    }
  else if (strcmp (mode, "tracepoint-number") == 0)
    {
      if (argc != 2)
	error (_("tracepoint number is required"));
      tfind_1 (tfind_tp, atoi (argv[1]), 0, 0, 0);
    }
  else if (strcmp (mode, "pc") == 0)
    {
      if (argc != 2)
	error (_("PC is required"));
      tfind_1 (tfind_pc, 0, parse_and_eval_address (argv[1]), 0, 0);
    }
  else if (strcmp (mode, "pc-inside-range") == 0)
    {
      if (argc != 3)
	error (_("Start and end PC are required"));
      tfind_1 (tfind_range, 0, parse_and_eval_address (argv[1]),
	       parse_and_eval_address (argv[2]), 0);
    }
  else if (strcmp (mode, "pc-outside-range") == 0)
    {
      if (argc != 3)
	error (_("Start and end PC are required"));
      tfind_1 (tfind_outside, 0, parse_and_eval_address (argv[1]),
	       parse_and_eval_address (argv[2]), 0);
    }
  else if (strcmp (mode, "line") == 0)
    {
      struct symtabs_and_lines sals;
      struct symtab_and_line sal;
      static CORE_ADDR start_pc, end_pc;
      struct cleanup *back_to;

      if (argc != 2)
	error (_("Line is required"));

      sals = decode_line_with_current_source (argv[1],
					      DECODE_LINE_FUNFIRSTLINE);
      back_to = make_cleanup (xfree, sals.sals);

      sal = sals.sals[0];

      if (sal.symtab == 0)
	error (_("Could not find the specified line"));

      if (sal.line > 0 && find_line_pc_range (sal, &start_pc, &end_pc))
	tfind_1 (tfind_range, 0, start_pc, end_pc - 1, 0);
      else
	error (_("Could not find the specified line"));

      do_cleanups (back_to);
    }
  else
    error (_("Invalid mode '%s'"), mode);

  if (has_stack_frames () || get_traceframe_number () >= 0)
    print_stack_frame (get_selected_frame (NULL), 1, LOC_AND_ADDRESS, 1);
}

void
mi_cmd_trace_save (char *command, char **argv, int argc)
{
  int target_saves = 0;
  int generate_ctf = 0;
  char *filename;
  int oind = 0;
  char *oarg;

  enum opt
  {
    TARGET_SAVE_OPT, CTF_OPT
  };
  static const struct mi_opt opts[] =
    {
      {"r", TARGET_SAVE_OPT, 0},
      {"ctf", CTF_OPT, 0},
      { 0, 0, 0 }
    };

  while (1)
    {
      int opt = mi_getopt ("-trace-save", argc, argv, opts,
			   &oind, &oarg);

      if (opt < 0)
	break;
      switch ((enum opt) opt)
	{
	case TARGET_SAVE_OPT:
	  target_saves = 1;
	  break;
	case CTF_OPT:
	  generate_ctf = 1;
	  break;
	}
    }
  filename = argv[oind];

  if (generate_ctf)
    trace_save_ctf (filename, target_saves);
  else
    trace_save_tfile (filename, target_saves);
}

void
mi_cmd_trace_start (char *command, char **argv, int argc)
{
  start_tracing (NULL);
}

void
mi_cmd_trace_status (char *command, char **argv, int argc)
{
  trace_status_mi (0);
}

void
mi_cmd_trace_stop (char *command, char **argv, int argc)
{
  stop_tracing (NULL);
  trace_status_mi (1);
}

/* Implement the "-ada-task-info" command.  */

void
mi_cmd_ada_task_info (char *command, char **argv, int argc)
{
  if (argc != 0 && argc != 1)
    error (_("Invalid MI command"));

  print_ada_task_info (current_uiout, argv[0], current_inferior ());
}

/* Print EXPRESSION according to VALUES.  */

static void
print_variable_or_computed (char *expression, enum print_values values)
{
  struct expression *expr;
  struct cleanup *old_chain;
  struct value *val;
  struct ui_file *stb;
  struct value_print_options opts;
  struct type *type;
  struct ui_out *uiout = current_uiout;

  stb = mem_fileopen ();
  old_chain = make_cleanup_ui_file_delete (stb);

  expr = parse_expression (expression);

  make_cleanup (free_current_contents, &expr);

  if (values == PRINT_SIMPLE_VALUES)
    val = evaluate_type (expr);
  else
    val = evaluate_expression (expr);

  if (values != PRINT_NO_VALUES)
    make_cleanup_ui_out_tuple_begin_end (uiout, NULL);
  ui_out_field_string (uiout, "name", expression);

  switch (values)
    {
    case PRINT_SIMPLE_VALUES:
      type = check_typedef (value_type (val));
      type_print (value_type (val), "", stb, -1);
      ui_out_field_stream (uiout, "type", stb);
      if (TYPE_CODE (type) != TYPE_CODE_ARRAY
	  && TYPE_CODE (type) != TYPE_CODE_STRUCT
	  && TYPE_CODE (type) != TYPE_CODE_UNION)
	{
	  struct value_print_options opts;

	  get_no_prettyformat_print_options (&opts);
	  opts.deref_ref = 1;
	  common_val_print (val, stb, 0, &opts, current_language);
	  ui_out_field_stream (uiout, "value", stb);
	}
      break;
    case PRINT_ALL_VALUES:
      {
	struct value_print_options opts;

	get_no_prettyformat_print_options (&opts);
	opts.deref_ref = 1;
	common_val_print (val, stb, 0, &opts, current_language);
	ui_out_field_stream (uiout, "value", stb);
      }
      break;
    }

  do_cleanups (old_chain);
}

/* Implement the "-trace-frame-collected" command.  */

void
mi_cmd_trace_frame_collected (char *command, char **argv, int argc)
{
  struct cleanup *old_chain;
  struct bp_location *tloc;
  int stepping_frame;
  struct collection_list *clist;
  struct collection_list tracepoint_list, stepping_list;
  struct traceframe_info *tinfo;
  int oind = 0;
  int var_print_values = PRINT_ALL_VALUES;
  int comp_print_values = PRINT_ALL_VALUES;
  int registers_format = 'x';
  int memory_contents = 0;
  struct ui_out *uiout = current_uiout;
  enum opt
  {
    VAR_PRINT_VALUES,
    COMP_PRINT_VALUES,
    REGISTERS_FORMAT,
    MEMORY_CONTENTS,
  };
  static const struct mi_opt opts[] =
    {
      {"-var-print-values", VAR_PRINT_VALUES, 1},
      {"-comp-print-values", COMP_PRINT_VALUES, 1},
      {"-registers-format", REGISTERS_FORMAT, 1},
      {"-memory-contents", MEMORY_CONTENTS, 0},
      { 0, 0, 0 }
    };

  while (1)
    {
      char *oarg;
      int opt = mi_getopt ("-trace-frame-collected", argc, argv, opts,
			   &oind, &oarg);
      if (opt < 0)
	break;
      switch ((enum opt) opt)
	{
	case VAR_PRINT_VALUES:
	  var_print_values = mi_parse_print_values (oarg);
	  break;
	case COMP_PRINT_VALUES:
	  comp_print_values = mi_parse_print_values (oarg);
	  break;
	case REGISTERS_FORMAT:
	  registers_format = oarg[0];
	case MEMORY_CONTENTS:
	  memory_contents = 1;
	  break;
	}
    }

  if (oind != argc)
    error (_("Usage: -trace-frame-collected "
	     "[--var-print-values PRINT_VALUES] "
	     "[--comp-print-values PRINT_VALUES] "
	     "[--registers-format FORMAT]"
	     "[--memory-contents]"));

  /* This throws an error is not inspecting a trace frame.  */
  tloc = get_traceframe_location (&stepping_frame);

  /* This command only makes sense for the current frame, not the
     selected frame.  */
  old_chain = make_cleanup_restore_current_thread ();
  select_frame (get_current_frame ());

  encode_actions_and_make_cleanup (tloc, &tracepoint_list,
				   &stepping_list);

  if (stepping_frame)
    clist = &stepping_list;
  else
    clist = &tracepoint_list;

  tinfo = get_traceframe_info ();

  /* Explicitly wholly collected variables.  */
  {
    struct cleanup *list_cleanup;
    char *p;
    int i;

    list_cleanup = make_cleanup_ui_out_list_begin_end (uiout,
						       "explicit-variables");
    for (i = 0; VEC_iterate (char_ptr, clist->wholly_collected, i, p); i++)
      print_variable_or_computed (p, var_print_values);
    do_cleanups (list_cleanup);
  }

  /* Computed expressions.  */
  {
    struct cleanup *list_cleanup;
    char *p;
    int i;

    list_cleanup
      = make_cleanup_ui_out_list_begin_end (uiout,
					    "computed-expressions");
    for (i = 0; VEC_iterate (char_ptr, clist->computed, i, p); i++)
      print_variable_or_computed (p, comp_print_values);
    do_cleanups (list_cleanup);
  }

  /* Registers.  Given pseudo-registers, and that some architectures
     (like MIPS) actually hide the raw registers, we don't go through
     the trace frame info, but instead consult the register cache for
     register availability.  */
  {
    struct cleanup *list_cleanup;
    struct frame_info *frame;
    struct gdbarch *gdbarch;
    int regnum;
    int numregs;

    list_cleanup = make_cleanup_ui_out_list_begin_end (uiout, "registers");

    frame = get_selected_frame (NULL);
    gdbarch = get_frame_arch (frame);
    numregs = gdbarch_num_regs (gdbarch) + gdbarch_num_pseudo_regs (gdbarch);

    for (regnum = 0; regnum < numregs; regnum++)
      {
	if (gdbarch_register_name (gdbarch, regnum) == NULL
	    || *(gdbarch_register_name (gdbarch, regnum)) == '\0')
	  continue;

	output_register (frame, regnum, registers_format, 1);
      }

    do_cleanups (list_cleanup);
  }

  /* Trace state variables.  */
  {
    struct cleanup *list_cleanup;
    int tvar;
    char *tsvname;
    int i;

    list_cleanup = make_cleanup_ui_out_list_begin_end (uiout, "tvars");

    tsvname = NULL;
    make_cleanup (free_current_contents, &tsvname);

    for (i = 0; VEC_iterate (int, tinfo->tvars, i, tvar); i++)
      {
	struct cleanup *cleanup_child;
	struct trace_state_variable *tsv;

	tsv = find_trace_state_variable_by_number (tvar);

	cleanup_child = make_cleanup_ui_out_tuple_begin_end (uiout, NULL);

	if (tsv != NULL)
	  {
	    tsvname = xrealloc (tsvname, strlen (tsv->name) + 2);
	    tsvname[0] = '$';
	    strcpy (tsvname + 1, tsv->name);
	    ui_out_field_string (uiout, "name", tsvname);

	    tsv->value_known = target_get_trace_state_variable_value (tsv->number,
								      &tsv->value);
	    ui_out_field_int (uiout, "current", tsv->value);
	  }
	else
	  {
	    ui_out_field_skip (uiout, "name");
	    ui_out_field_skip (uiout, "current");
	  }

	do_cleanups (cleanup_child);
      }

    do_cleanups (list_cleanup);
  }

  /* Memory.  */
  {
    struct cleanup *list_cleanup;
    VEC(mem_range_s) *available_memory = NULL;
    struct mem_range *r;
    int i;

    traceframe_available_memory (&available_memory, 0, ULONGEST_MAX);
    make_cleanup (VEC_cleanup(mem_range_s), &available_memory);

    list_cleanup = make_cleanup_ui_out_list_begin_end (uiout, "memory");

    for (i = 0; VEC_iterate (mem_range_s, available_memory, i, r); i++)
      {
	struct cleanup *cleanup_child;
	gdb_byte *data;
	struct gdbarch *gdbarch = target_gdbarch ();

	cleanup_child = make_cleanup_ui_out_tuple_begin_end (uiout, NULL);

	ui_out_field_core_addr (uiout, "address", gdbarch, r->start);
	ui_out_field_int (uiout, "length", r->length);

	data = xmalloc (r->length);
	make_cleanup (xfree, data);

	if (memory_contents)
	  {
	    if (target_read_memory (r->start, data, r->length) == 0)
	      {
		int m;
		char *data_str, *p;

		data_str = xmalloc (r->length * 2 + 1);
		make_cleanup (xfree, data_str);

		for (m = 0, p = data_str; m < r->length; ++m, p += 2)
		  sprintf (p, "%02x", data[m]);
		ui_out_field_string (uiout, "contents", data_str);
	      }
	    else
	      ui_out_field_skip (uiout, "contents");
	  }
	do_cleanups (cleanup_child);
      }

    do_cleanups (list_cleanup);
  }

  do_cleanups (old_chain);
}
@


1.243
log
@Print registers not saved in the frame as "<not saved>" instead of "<optimized out>".

Currently, in some scenarios, GDB prints <optimized out> when printing
outer frame registers.  An <optimized out> register is a confusing
concept.  What this really means is that the register is
call-clobbered, or IOW, not saved by the callee.  This patch makes GDB
say that instead.

Before patch:

 (gdb) p/x $rax $1 = <optimized out>
 (gdb) info registers rax
 rax            <optimized out>

After patch:

 (gdb) p/x $rax
 $1 = <not saved>
 (gdb) info registers rax
 rax            <not saved>

However, if for some reason the debug info describes a variable as
being in such a register (**), we still want to print <optimized out>
when printing the variable.  IOW, <not saved> is reserved for
inspecting registers at the machine level.  The patch uses
lval_register+optimized_out to encode the not saved registers, and
makes it so that optimized out variables always end up in
!lval_register values.

** See <https://sourceware.org/ml/gdb-patches/2012-08/msg00787.html>.
Current/recent enough GCC doesn't mark variables/arguments as being in
call-clobbered registers in the ranges corresponding to function
calls, while older GCCs did.  Newer GCCs will just not say where the
variable is, so GDB will end up realizing the variable is optimized
out.

frame_unwind_got_optimized creates not_lval optimized out registers,
so by default, in most cases, we'll see <optimized out>.

value_of_register is the function eval.c uses for evaluating
OP_REGISTER (again, $pc, etc.), and related bits.  It isn't used for
anything else.  This function makes sure to return lval_register
values.  The patch makes "info registers" and the MI equivalent use it
too.  I think it just makes a lot of sense, as this makes it so that
when printing machine registers ($pc, etc.), we go through a central
function.

We're likely to need a different encoding at some point, if/when we
support partially saved registers.  Even then, I think
value_of_register will still be the spot to tag the intention to print
machine register values differently.

value_from_register however may also return optimized out
lval_register values, so at a couple places where we're computing a
variable's location from a dwarf expression, we convert the resulting
value away from lval_register to a regular optimized out value.

Tested on x86_64 Fedora 17

gdb/
2013-10-02  Pedro Alves  <palves@@redhat.com>

	* cp-valprint.c (cp_print_value_fields): Adjust calls to
	val_print_optimized_out.
	* jv-valprint.c (java_print_value_fields): Likewise.
	* p-valprint.c (pascal_object_print_value_fields): Likewise.
	* dwarf2loc.c (dwarf2_evaluate_loc_desc_full)
	<DWARF_VALUE_REGISTER>: If the register was not saved, return a
	new optimized out value.
	* findvar.c (address_from_register): Likewise.
	* frame.c (put_frame_register): Tweak error string to say the
	register was not saved, rather than optimized out.
	* infcmd.c (default_print_one_register_info): Adjust call to
	val_print_optimized_out.  Use value_of_register instead of
	get_frame_register_value.
	* mi/mi-main.c (output_register): Use value_of_register instead of
	get_frame_register_value.
	* valprint.c (valprint_check_validity): Likewise.
	(val_print_optimized_out): New value parameter.  If the value is
	lval_register, print <not saved> instead.
	(value_check_printable, val_print_scalar_formatted): Adjust calls
	to val_print_optimized_out.
	* valprint.h (val_print_optimized_out): New value parameter.
	* value.c (struct value) <optimized_out>: Extend comment.
	(error_value_optimized_out): New function.
	(require_not_optimized_out): Use it.  Use a different string for
	lval_register values.
	* value.h (error_value_optimized_out): New declaration.
	* NEWS: Mention <not saved>.

gdb/testsuite/
2013-10-02  Pedro Alves  <palves@@redhat.com>

	* gdb.dwarf2/dw2-reg-undefined.exp <pattern_rax_rbx_rcx_print,
	pattern_rax_rbx_rcx_info>: Set to "<not saved>".
	* gdb.mi/mi-reg-undefined.exp (opt_out_pattern): Delete.
	(not_saved_pattern): New.
	Replace use of the former with the latter.

gdb/doc/
2013-10-02  Pedro Alves  <palves@@redhat.com>

	* gdb.texinfo (Registers): Expand description of saved registers
	in frames.  Explain <not saved>.
@
text
@d367 7
d377 3
d399 1
a399 1
  mi_execute_cli_command ("run", target_can_async_p (),
d407 36
d447 1
a447 1
      iterate_over_inferiors (run_one_inferior, NULL);
d452 3
a454 1
      mi_execute_cli_command ("run", target_can_async_p (),
@


1.242
log
@	* aarch64-linux-nat.c: Replace PIDGET with ptid_get_pid.
	Replace TIDGET with ptid_get_lwp.
	Replace GET_LWP with ptid_get_lwp.
	* aix-thread.c (BUILD_THREAD, BUILD_LWP): Remove.
	Replace BUILD_THREAD with ptid_build.
	Replace BUILD_LWP with ptid_build.
	Replace PIDGET with ptid_get_pid.
	Replace TIDGET with ptid_get_lwp.
	* alphabsd-nat.c: Replace PIDGET with ptid_get_pid.
	* amd64-linux-nat.c: Replace PIDGET with ptid_get_pid.
	Replace TIDGET with ptid_get_lwp.
	* amd64bsd-nat.c: Replace PIDGET with ptid_get_pid.
	* arm-linux-nat.c: Replace PIDGET with ptid_get_pid.
	Replace TIDGET with ptid_get_lwp.
	Replace GET_LWP with ptid_get_lwp.
	* armnbsd-nat.c: Replace PIDGET with ptid_get_pid.
	* auxv.c: Likewise.
	* breakpoint.c: Likewise.
	* common/ptid.c (ptid_is_pid): Condense check for
	null_ptid and minus_one_ptid.
	(ptid_lwp_p): New function.
	(ptid_tid_p): New function.
	* common/ptid.h: Update comments for accessors.
	(ptid_lwp_p): New prototype.
	(ptid_tid_p): New prototype.
	* defs.h (PIDGET, TIDGET, MERGEPID): Do not define.
	* gcore.c: Replace PIDGET with ptid_get_pid.
	* gdbthread.h: Likewise.
	* gnu-nat.c: Likewise.
	* hppa-linux-nat.c: Replace PIDGET with ptid_get_pid.
	Replace TIDGET with ptid_get_lwp.
	* hppabsd-nat.c: Replace PIDGET with ptid_get_pid.
	* hppanbsd-nat.c: Likewise.
	* i386-linux-nat.c: Replace PIDGET with ptid_get_pid.
	Replace TIDGET with ptid_get_lwp.
	* i386bsd-nat.c: Replace PIDGET with ptid_get_pid.
	* ia64-linux-nat.c: Replace PIDGET with ptid_get_pid.
	* infcmd.c: Likewise.
	* inferior.h: Likewise.
	* inflow.c: Likewise.
	* infrun.c: Likewise.
	* linux-fork.c: Likewise.
	* linux-nat.c: Replace PIDGET with ptid_get_pid.
	Replace GET_PID with ptid_get_pid.
	Replace is_lwp with ptid_lwp_p.
	Replace GET_LWP with ptid_get_lwp.
	Replace BUILD_LWP with ptid_build.
@
text
@d1164 1
a1164 1
  struct value *val = get_frame_register_value (frame, regnum);
@


1.241
log
@PR gdb/15911: "info threads" changes the default source and line (for "break", "list")

"info threads" changes the default source for "break" and "list", to
whatever the location of the first/bottom thread in the thread list
is...

 (gdb) b start
 (gdb) c
 ...
 (gdb) list
 *lists "start"*
 (gdb) b 23
 Breakpoint 3 at 0x400614: file test.c, line 23.
 (gdb) info threads
   Id   Target Id         Frame
 * 2    Thread 0x7ffff7fcb700 (LWP 1760) "test" start (arg=0x0) at test.c:23
   1    Thread 0x7ffff7fcc740 (LWP 1748) "test" 0x000000323dc08e60 in pthread_join (threadid=140737353922304, thread_return=0x0) at pthread_join.c:93
 (gdb) b 23
 Breakpoint 4 at 0x323dc08d90: file pthread_join.c, line 23.
                                    ^^^^^^^^^^^^^^^
 (gdb) list
 93          lll_wait_tid (pd->tid);
 94
 95
 96        /* Restore cancellation mode.  */
 97        CANCEL_RESET (oldtype);
 98
 99        /* Remove the handler.  */
 100       pthread_cleanup_pop (0);
 101
 102

The issue is that print_stack_frame always sets the current sal to the
frame's sal.  print_frame_info (which print_stack_frame calls to do
most of the work) also sets the last displayed sal, but only if
print_what isn't LOCATION.  Now the call in question, from within
thread.c:print_thread_info, does pass in LOCATION as print_what, but
print_stack_frame doesn't have the same check print_frame_info has.
We could consider adding it, but setting these globals depending on
print_what isn't very clean, IMO.  What we have is two logically
distinct operations mixed in the same function(s):

  #1 - print frame, in the format specified by {print_what,
    print_level and print_args}.

  #2 - We're displaying a frame to the user, and I want the default
    sal to point here, because the program stopped here, or the user
    did some context-changing command (up, down, etc.).

So I added a new parameter to print_stack_frame & friends for point
#2, and went through all calls in the tree adjusting as necessary.

Tested on x86_64 Fedora 17.

gdb/
2013-09-17  Pedro Alves  <palves@@redhat.com>

	PR gdb/15911
	* ada-tasks.c (task_command_1): Adjust call to print_stack_frame.
	* bsd-kvm.c (bsd_kvm_open, bsd_kvm_proc_cmd, bsd_kvm_pcb_cmd):
	* corelow.c (core_open):
	* frame.h (print_stack_frame, print_frame_info): New
	'set_current_sal' parameter.
	* infcmd.c (finish_command, kill_command): Adjust call to
	print_stack_frame.
	* inferior.c (inferior_command): Likewise.
	* infrun.c (normal_stop): Likewise.
	* linux-fork.c (linux_fork_context): Likewise.
	* record-full.c (record_full_goto_entry, record_full_restore):
	Likewise.
	* remote-mips.c (common_open): Likewise.
	* stack.c (print_stack_frame): New 'set_current_sal' parameter.
	Use it.
	(print_frame_info): New 'set_current_sal' parameter.  Set the last
	displayed sal depending on the new paremeter instead of looking at
	print_what.
	(backtrace_command_1, select_and_print_frame, frame_command)
	(current_frame_command, up_command, down_command): Adjust call to
	print_stack_frame.
	* thread.c (print_thread_info, restore_selected_frame)
	(do_captured_thread_select): Adjust call to print_stack_frame.
	* tracepoint.c (tfind_1): Likewise.
	* mi/mi-cmd-stack.c (mi_cmd_stack_list_frames)
	(mi_cmd_stack_info_frame): Likewise.
	* mi/mi-interp.c (mi_on_normal_stop): Likewise.
	* mi/mi-main.c (mi_cmd_exec_return, mi_cmd_trace_find): Likewise.

	gdb/testsuite/
	* gdb.threads/info-threads-cur-sal-2.c: New file.
	* gdb.threads/info-threads-cur-sal.c: New file.
	* gdb.threads/info-threads-cur-sal.exp: New file.
@
text
@d213 1
a213 1
  if (pid != 0 && PIDGET (thread->ptid) != pid)
d323 1
a323 1
  if (PIDGET (thread->ptid) != pid)
d417 1
a417 1
  if (PIDGET (ti->ptid) == pid && !is_exited (ti->ptid))
@


1.240
log
@MI -trace-find, print frame with LOC_AND_ADDRESS instead of SRC_AND_LOC.

When I looked for print_stack_frame calls in MI, I wondered why this
one passing down SRC_AND_LOC.  print_stack_frame does:

  /* For mi, alway print location and address.  */
  if (ui_out_is_mi_like_p (current_uiout))
    print_what = LOC_AND_ADDRESS;

So it really doesn't matter which value is passed down, but, to avoid
confusion in readers, it's better to use the MI standard here.
There's another SRC_AND_LOC in mi-interp.c, but that one makes sense.

gdb/
2013-08-30  Pedro Alves  <palves@@redhat.com>

	* mi/mi-main.c (mi_cmd_trace_find): Use LOC_AND_ADDRESS instead of
	SRC_AND_LOC.
@
text
@d197 1
a197 1
  print_stack_frame (get_selected_frame (NULL), 1, LOC_AND_ADDRESS);
d2487 1
a2487 1
    print_stack_frame (get_selected_frame (NULL), 1, LOC_AND_ADDRESS);
@


1.239
log
@PR gdb/15415

gdb/
2013-08-27  Jan Kratochvil  <jan.kratochvil@@redhat.com>

	PR gdb/15415
	* corefile.c (get_exec_file): Use exec_filename.
	* defs.h (OPF_DISABLE_REALPATH): New definition.  Add new comment.
	* exec.c (exec_close): Free EXEC_FILENAME.
	(exec_file_attach): New variable canonical_pathname.  Use
	OPF_DISABLE_REALPATH.  Call gdb_realpath explicitly.  Set
	EXEC_FILENAME.
	* exec.h (exec_filename): New.
	* inferior.c (print_inferior, inferior_command): Use
	PSPACE_EXEC_FILENAME.
	* mi/mi-main.c (print_one_inferior): Likewise.
	* progspace.c (clone_program_space, print_program_space): Likewise.
	* progspace.h (struct program_space): New field pspace_exec_filename.
	* source.c (openp): Describe OPF_DISABLE_REALPATH.  New variable
	realpath_fptr, initialize it from OPF_DISABLE_REALPATH, use it.

gdb/testsuite/
2013-08-27  Jan Kratochvil  <jan.kratochvil@@redhat.com>

	PR gdb/15415
	* gdb.base/argv0-symlink.c: New file.
	* gdb.base/argv0-symlink.exp: New file.
@
text
@d2487 1
a2487 1
    print_stack_frame (get_selected_frame (NULL), 1, SRC_AND_LOC);
@


1.238
log
@Resue 'z' formatter from mi register display code.

  http://sourceware.org/ml/gdb-patches/2013-07/msg00236.html

gdb/ChangeLog

        * mi/mi-main.c (output_register): Make MI 'r' format use standard
        'z' format code.  Remove error for optimized out values, standard
        code will handle these fine.

gdb/testsuite/ChangeLog

        * gdb.mi/mi-reg-undefined.exp: New file.
        * gdb.mi/mi-reg-undefined.c: Likewise.
        * gdb.mi/mi-reg-undefined.S: Likewise.
@
text
@d576 1
a576 1
      if (inferior->pspace->ebfd)
d579 1
a579 1
			       bfd_get_filename (inferior->pspace->ebfd));
@


1.237
log
@	* defs.h (enum val_prettyformat): Renamed from val_prettyprint.
	Enum values rename as well.  All uses updated.
	* valprint.h (value_print_options): Rename member pretty to
	pretty format.  Rename member prettyprint_arrays to
	prettyformat_arrays.  Rename member prettyprint_structs to
	prettyformat_structs.  All uses updated.
	(get_no_prettyformat_print_options): Renamed from
	get_raw_print_options.
	* valprint.c (get_no_prettyformat_print_options): Renamed from
	get_raw_print_options.  All callers updated.
	(show_prettyformat_structs): Renamed from show_prettyprint_structs.
	All callers updated.
	(show_prettyformat_arrays): Renamed from show_prettyprint_arrays.
	All callers updated.
	(_initialize_valprint): Improve help text for "set print pretty" and
	"set print arrays".

	testsuite/
	* gdb.base/default.exp: Update expected output of "show print array"
	and "show print pretty".
@
text
@d1166 2
a1177 3
  if (value_optimized_out (val))
    error (_("Optimized out"));

d1179 1
a1179 11
    {
      int j;
      char *ptr, buf[1024];
      const gdb_byte *valaddr = value_contents_for_printing (val);

      strcpy (buf, "0x");
      ptr = buf + 2;
      for (j = 0; j < register_size (gdbarch, regnum); j++)
	{
	  int idx = gdbarch_byte_order (gdbarch) == BFD_ENDIAN_BIG ?
		    j : register_size (gdbarch, regnum) - 1 - j;
d1181 2
a1182 10
	  sprintf (ptr, "%02x", (unsigned char) valaddr[idx]);
	  ptr += 2;
	}
      ui_out_field_string (uiout, "value", buf);
    }
  else
    {
      struct value_print_options opts;
      struct ui_file *stb;
      struct cleanup *old_chain;
d1184 7
a1190 12
      stb = mem_fileopen ();
      old_chain = make_cleanup_ui_file_delete (stb);

      get_formatted_print_options (&opts, format);
      opts.deref_ref = 1;
      val_print (value_type (val),
		 value_contents_for_printing (val),
		 value_embedded_offset (val), 0,
		 stb, 0, val, &opts, current_language);
      ui_out_field_stream (uiout, "value", stb);
      do_cleanups (old_chain);
    }
@


1.236
log
@gdb/

2013-06-26  Pedro Alves  <pedro@@codesourcery.com>
	    Yao Qi  <yao@@codesourcery.com>

	* gdb.texinfo (GDB/MI Tracepoint Commands): Document
	-trace-frame-collected.
gdb:

2013-06-26  Pedro Alves  <pedro@@codesourcery.com>
	    Yao Qi  <yao@@codesourcery.com>

	* mi/mi-cmds.c (mi_cmds): Register -trace-frame-collected.
	* mi/mi-cmds.h (mi_cmd_trace_frame_collected): Declare.
	* mi/mi-main.c (print_variable_or_computed): New function.
	(mi_cmd_trace_frame_collected): New function.
	* tracepoint.c (find_trace_state_variable_by_number): New.
	(struct traceframe_info): Move to tracepoint.h
	(struct collection_list): Likewise.
	(do_collect_symbol): Include locals and arguments in the wholly
	collected variables list.
	(clear_collection_list): Clear wholly collected variables list
	and computed variables list.
	(append_exp): New function.
	(encode_actions_1): Include variables in the wholly
	collected variables list.  Include memory ranges and
	full-fledged expressions in the computed expressions list.
	(encode_actions): Move some code to ...
	Return the cleanup chain.
	(encode_actions_rsp): ... here.  New function.
	(get_traceframe_location, get_traceframe_info): Remove static.
	* tracepoint.h (struct memrange): Moved	from tracepoint.c.
	(struct collection_list): Moved from tracepoint.c.  Add two
	new fields 'wholly_collected' and 'computed'.
	(find_trace_state_variable_by_number): Declare.
	(encode_actions): Adjust declaration.
	(encode_actions_rsp): Declare.
	(get_traceframe_info, get_traceframe_location): Declare.

	* NEWS: Mention new MI command -trace-frame-collected.
@
text
@d2630 1
a2630 1
	  get_raw_print_options (&opts);
d2640 1
a2640 1
	get_raw_print_options (&opts);
@


1.235
log
@gdb/

2013-06-26  Pedro Alves  <pedro@@codesourcery.com>
	    Yao Qi  <yao@@codesourcery.com>

	* ctf.c (ctf_traceframe_info): Push trace state variables
	present in the trace data into the traceframe info object.
	* breakpoint.c (DEF_VEC_I): Remove.
	* common/filestuff.c (DEF_VEC_I): Likewise.
	* dwarf2loc.c (DEF_VEC_I): Likewise.
	* mi/mi-main.c (DEF_VEC_I): Likewise.
	* common/gdb_vecs.h (DEF_VEC_I): Define vector for int.
	* features/traceframe-info.dtd: Add tvar element and its
	attributes.
	* tracepoint.c (free_traceframe_info): Free vector 'tvars'.
	(build_traceframe_info): Push trace state variables present in the
	trace data into the traceframe info object.
	(traceframe_info_start_tvar): New function.
	(tvar_attributes): New.
	(traceframe_info_children): Add "tvar" element.
	* tracepoint.h (struct traceframe_info) <tvars>: New field.

	* NEWS: Mention the change in GDB and GDBserver.

gdb/doc:

2013-06-26  Pedro Alves  <pedro@@codesourcery.com>

	* gdb.texinfo (Traceframe Info Format): Document tvar element and
	its attributes.

gdb/gdbserver:

2013-06-26  Pedro Alves  <pedro@@codesourcery.com>

	* tracepoint.c (build_traceframe_info_xml): Output trace state
	variables present in the trace buffer.
@
text
@d2588 295
@


1.234
log
@Teach -data-list-register-values to not include unavailable registers

This patch adds an option --skip-unavailable to MI command
-data-list-register-values, so that unavailable registers are not
displayed (on the context of traceframes).

The old -data-list-register-values command behaves like

  -data-list-register-values x 0 8
  ^done,register-values=[{number="0",value="<unavailable>"},{number="8",value="0x80483de"}]

With this patch, an option --skip-unavailable is added,

  -data-list-register-values --skip-unavailable x 0 8
  ^done,register-values=[{number="8",value="0x80483de"}]

gdb:

2013-06-20  Pedro Alves  <pedro@@codesourcery.com>
	    Yao Qi  <yao@@codesourcery.com>

	* NEWS: Mention the new option '--skip-unavailable' of command
	-data-list-register-values.
	* mi/mi-main.c (mi_cmd_data_list_register_values): Accept the
	--skip-unavailable option.  Adjust to use output_register.
	(output_register): Add new 'skip_unavailable' parameter.
	Handle it.

gdb/doc:

2013-06-20  Pedro Alves  <pedro@@codesourcery.com>

	* gdb.texinfo (GDB/MI Data Manipulation)
	<-data-list-register-values>: Document the --skip-unavailable
	option.

gdb/testsuite:

2013-06-20  Yao Qi  <yao@@codesourcery.com>

	* gdb.trace/mi-trace-unavailable.exp: Set tracepoint on 'foo'
	and set an action.
	(test_trace_unavailable): Test command -data-list-register-values
	in the context of traceframe and with option --skip-unavailable.
	* gdb.trace/trace-unavailable.c (foo): New.
	(main): Call it.
	* gdb.mi/gdb2549.exp: Update matching pattern.
@
text
@a515 2
DEF_VEC_I(int);

@


1.233
log
@gdb/

	* mi/mi-main.c (get_register): Remove declaration.
	(output_register): Declare.
	(mi_cmd_data_list_register_values): Remove local variable
	'tuple_cleanup'.  Move some code into output_register.
	(get_register): Renamed to ...
	(output_register): ... this.  Output the register's
	"number" ui_out tuple here.
@
text
@d106 2
a107 1
static void output_register (struct frame_info *, int regnum, int format);
d1077 11
d1096 17
a1112 1
  if (argc == 0)
d1114 2
a1115 1
	     "-data-list-register-values <format> [<regnum1>...<regnumN>]"));
d1117 1
a1117 1
  format = (int) argv[0][0];
d1125 1
a1125 1
  if (argc == 1)
d1136 1
a1136 1
	  output_register (frame, regnum, format);
d1141 1
a1141 1
  for (i = 1; i < argc; i++)
d1149 1
a1149 1
	output_register (frame, regnum, format);
d1156 3
a1158 1
/* Output register REGNUM's contents in the desired FORMAT.  */
d1161 2
a1162 1
output_register (struct frame_info *frame, int regnum, int format)
d1166 1
a1166 1
  struct value *val;
d1169 3
a1177 2
  val = get_frame_register_value (frame, regnum);

@


1.232
log
@fix list_available_thread_groups

list_available_thread_groups, in mi-main.c, leaks a cleanup.
This changes it to call do_cleanups.

	* mi/mi-main.c (list_available_thread_groups): Call do_cleanups.
@
text
@d106 1
a106 1
static void get_register (struct frame_info *, int regnum, int format);
d1075 1
a1075 1
  struct cleanup *list_cleanup, *tuple_cleanup;
d1106 2
a1107 4
	  tuple_cleanup = make_cleanup_ui_out_tuple_begin_end (uiout, NULL);
	  ui_out_field_int (uiout, "number", regnum);
	  get_register (frame, regnum, format);
	  do_cleanups (tuple_cleanup);
d1120 1
a1120 6
	{
	  tuple_cleanup = make_cleanup_ui_out_tuple_begin_end (uiout, NULL);
	  ui_out_field_int (uiout, "number", regnum);
	  get_register (frame, regnum, format);
	  do_cleanups (tuple_cleanup);
	}
d1127 1
a1127 1
/* Output one register's contents in the desired format.  */
d1130 1
a1130 1
get_register (struct frame_info *frame, int regnum, int format)
d1135 4
d1184 2
@


1.231
log
@	* mi/mi-main.c: Include python-internal.h.
	(mi_cmd_list_features): Check gdb_python_initialized.
	* python/py-inferior.c (python_on_normal_stop, python_on_resume)
	(python_inferior_exit, python_new_objfile, add_thread_object)
	(delete_thread_object, py_free_inferior): Check
	gdb_python_initialized.
	* python/py-prettyprint.c (apply_val_pretty_printer): Check
	gdb_python_initialized.
	* python/py-type.c (save_objfile_types): Check
	gdb_python_initialized.
	* python/python-internal.h (gdb_python_initialized): Declare.
	* python/python.c (ensure_python_env): Throw exception if
	Python not initialized.
	(before_prompt_hook, source_python_script_for_objfile)
	(start_type_printers, apply_type_printers,
	free_type_printers): Check gdb_python_initialized.
	* varobj.c (varobj_get_display_hint)
	(dynamic_varobj_has_child_method, update_dynamic_varobj_children)
	(install_new_value_visualizer, varobj_set_visualizer)
	(value_get_print_value): Check gdb_python_initialized.
@
text
@d684 1
d694 1
a694 1
  make_cleanup_osdata_free (data);
d797 2
@


1.230
log
@gdb/
2013-03-14  Hui Zhu  <hui@@codesourcery.com>
	    Yao Qi  <yao@@codesourcery.com>

	* Makefile.in (REMOTE_OBS): Add ctf.o.
	(SFILES): Add ctf.c.
	(HFILES_NO_SRCDIR): Add ctf.h.
	* ctf.c, ctf.h: New files.
	* tracepoint.c: Include 'ctf.h'.
	(collect_pseudocommand): Remove static.
	(trace_save_command): Parse option "-ctf".
	Produce different trace file writers per option.
	Adjust output message.
	(trace_save_tfile, trace_save_ctf): New.
	* tracepoint.h (trace_save_tfile, trace_save_ctf): Declare.
	* mi/mi-main.c: Include 'ctf.h'.
	(mi_cmd_trace_save): Handle option '-ctf'.  Call either
	trace_save_tfile or trace_save_ctf.
	* NEWS: Mention these changes.

gdb/doc/
2013-03-14  Hui Zhu  <hui@@codesourcery.com>
	    Yao Qi  <yao@@codesourcery.com>

	* gdb.texinfo (Trace Files): Add "tsave -ctf".
@
text
@d55 3
d1763 2
a1764 1
      ui_out_field_string (uiout, NULL, "python");
@


1.229
log
@gdb/
	* tracepoint.c (trace_file_writer_xfree): New.
	(struct tfile_writer_data): New.
	(tfile_dtor, tfile_can_target_save, tfile_start): New.
	(tfile_write_header, tfile_write_regblock_type): New.
	(tfile_write_status, tfile_write_uploaded_tsv): New.
	(tfile_write_uploaded_tp, tfile_write_definition_end): New.
	(tfile_write_raw_data, (tfile_end): New.
	(tfile_write_ops): New global variable.
	(TRACE_WRITE_R_BLOCK): New macro.
	(TRACE_WRITE_M_BLOCK_HEADER): New macro.
	(TRACE_WRITE_M_BLOCK_MEMORY): New macro.
	(TRACE_WRITE_V_BLOCK): New macro.
	(trace_save): Add extra one parameter WRITER.  Make it static.
	Use WRITER to writer trace.
	(tfile_trace_file_writer_new): New.
	(trace_save_command): Caller update.
	(trace_save_tfile): Write trace data in TFILE format.
	* tracepoint.h (struct trace_frame_write_ops): New.
	(struct trace_file_write_ops): New.
	(struct trace_file_writer): New.
	(trace_save): Remove its declaration.
	(trace_save_tfile): Declare it.
	* mi/mi-main.c (mi_cmd_trace_save): Call trace_save_tfile
	instead of trace_save.
@
text
@d52 1
d2481 1
d2483 2
d2486 10
a2495 2
  if (argc != 1 && argc != 2)
    error (_("Usage: -trace-save [-r] filename"));
d2497 1
a2497 1
  if (argc == 2)
d2499 14
a2512 5
      filename = argv[1];
      if (strcmp (argv[0], "-r") == 0)
	target_saves = 1;
      else
	error (_("Invalid option: %s"), argv[0]);
d2514 4
d2519 1
a2519 5
    {
      filename = argv[0];
    }

  trace_save_tfile (filename, target_saves);
@


1.228
log
@	* mi/mi-cmds.h (mi_execute_command): Make "cmd" const.
	* mi/mi-interp.c (mi_interpreter_exec): Make "command" const.
	Remove temporary copy of input string.
	(mi_execute_command_wrapper): Make "cmd" const.
	* mi/mi-main.c (mi_execute_command): Make "string_ptr" const.
	* mi/mi-parse.c (mi_parse_argv): Make "args" const.
	Use const strings.
	(mi_parse): Make "cmd" const.
	Use const strings.
	* mi/mi-parse.h (mi_parse): Make "cmd" const.
@
text
@d2498 1
a2498 1
  trace_save (filename, target_saves);
@


1.228.2.1
log
@PR gdb/15415

gdb/
2013-08-27  Jan Kratochvil  <jan.kratochvil@@redhat.com>

	PR gdb/15415
	* corefile.c (get_exec_file): Use exec_filename.
	* defs.h (OPF_DISABLE_REALPATH): New definition.  Add new comment.
	* exec.c (exec_close): Free EXEC_FILENAME.
	(exec_file_attach): New variable canonical_pathname.  Use
	OPF_DISABLE_REALPATH.  Call gdb_realpath explicitly.  Set
	EXEC_FILENAME.
	* exec.h (exec_filename): New.
	* inferior.c (print_inferior, inferior_command): Use
	PSPACE_EXEC_FILENAME.
	* mi/mi-main.c (print_one_inferior): Likewise.
	* progspace.c (clone_program_space, print_program_space): Likewise.
	* progspace.h (struct program_space): New field pspace_exec_filename.
	* source.c (openp): Describe OPF_DISABLE_REALPATH.  New variable
	realpath_fptr, initialize it from OPF_DISABLE_REALPATH, use it.

gdb/testsuite/
2013-08-27  Jan Kratochvil  <jan.kratochvil@@redhat.com>

	PR gdb/15415
	* gdb.base/argv0-symlink.c: New file.
	* gdb.base/argv0-symlink.exp: New file.
@
text
@d573 1
a573 1
      if (inferior->pspace->pspace_exec_filename != NULL)
d576 1
a576 1
			       inferior->pspace->pspace_exec_filename);
@


1.227
log
@2013-02-14  Pedro Alves  <pedro@@codesourcery.com>
	    Hafiz Abid Qadeer  <abidh@@codesourcery.com>

	gdb/
	* tracepoint.h (validate_trace_state_variable_name): Declare.
	* tracepoint.c (validate_trace_state_variable_name): New.
	(trace_variable_command): Parse the trace state variable's name
	without using parse_expression.  Do several validations.
	* mi/mi-main.c (mi_cmd_trace_define_variable): Don't parse the
	trace state variable's name with parse_expression.  Validate it.

	gdb/testsuite/
	* gdb.trace/tsv.exp: Adjust tests, and add a few more.
@
text
@d1965 1
a1965 1
mi_execute_command (char *cmd, int from_tty)
@


1.226
log
@2013-01-31  Aleksandar Ristovski  <aristovski@@qnx.com>

	* charset.c (intermediate_encoding): Remove unused i.
	* completer.c (signal_completer): Remove unused i.
	* continuations.c (discard_my_continuations_1): Remove unused
	continuation_ptr.
	* corelow.c (core_close): Remove unuseD name.
	(get_core_siginfo): Remove unused pid.
	* cp-namespace.c (cp_lookup_symbol_imports_or_template): Remove unused
	i, cps.
	* dwarf2loc.c (dwarf2_compile_expr_to_ax): Remove unused base_offset.
	(loclist_describe_location): Remove unused first.
	* event-top.c (command_line_handler): Remove unused got_eof.
	* exec.c (exec_close_1): Remove unused need_symtab_cleanup.
	(resize_section_table): Remove unused old_value.
	* gdb_bfd.c (gdb_bfd_map_section): Remove unused header.
	* gnu-v3-abi.c (compute_vtable_size): Remove unused addr.
	* i386-tdep.c (i386_process_record): Remove unused rex.
	* infcmd.c (get_return_value): Remove unused uiout.
	* jv-lang.c (type_from_class): Remove unused is_array.
	* jv-valprint.c (java_val_print): Remove unused i.
	* linux-nat.c (linux_nat_stop_lwp): Remove unused ptid.
	* linux-thread-db.c (thread_db_find_new_threads_2): Remove unuseD pid.
	* m2-typeprint.c (m2_print_type): Remove unused code.
	* macroexp.c (get_character_constant): Remove unused body_start.
	(macro_stringify): Remove unused result.
	* objc-lang.c (find_methods): Remove unused gdbarch.
	* objfiles.c (filter_overlapping_sections): Remove unused abfd1, abfd2.
	* regcache.c (regcache_cooked_read): Remove unused gdbarch.
	* stack.c (print_frame_args): Remove unused summary.
	* thread.c (thread_apply_command): Remove unused p.
	* valarith.c (value_x_unop): Remove unused mangle_ptr.
	* valops.c (search_struct_method): Remove unused skip.
	* valprint.c (generic_val_print): Remove unused byte_order.
	* varobj.c (varobj_update): Remove unused changed.
	* cli/cli-cmds.c (complete_command): Remove unused next_item.
	(alias_command): Remove unused c.
	* mi/mi-cmd-catch.c (mi_catch_load_unload): Remove unused c.
	* mi/mi-main.c (mi_cmd_data_write_register_values): Remove unused
	format.
	(mi_cmd_data_write_memory): Remove unused word_format.
	(mi_cmd_data_write_memory_bytes): Remove unused r.
	* python/py-gdb-readline.c (gdbpy_readline_wrapper): Remove unused
	p_start, p_end.
	* python/python.c (_initialize_python): Remove unused cmd_name, cmd.
	* tui/tui-disasm.c (tui_set_disassem_content): Remove unused
	line_width.

Reference: http://sourceware.org/ml/gdb-patches/2013-01/msg00766.html
@
text
@a2359 1
  struct cleanup *back_to;
d2367 3
a2369 2
  expr = parse_expression (argv[0]);
  back_to = make_cleanup (xfree, expr);
d2371 1
a2371 10
  if (expr->nelts == 3 && expr->elts[0].opcode == OP_INTERNALVAR)
    {
      struct internalvar *intvar = expr->elts[1].internalvar;

      if (intvar)
	name = internalvar_name (intvar);
    }

  if (!name || *name == '\0')
    error (_("Invalid name of trace variable"));
a2380 2

  do_cleanups (back_to);
@


1.225
log
@Update years in copyright notice for the GDB files.

Two modifications:
  1. The addition of 2013 to the copyright year range for every file;
  2. The use of a single year range, instead of potentially multiple
     year ranges, as approved by the FSF.
@
text
@a1191 1
  char format;
a1207 2
  format = (int) argv[0][0];

a1587 1
  char word_format;
a1630 3
  /* The format character to use when displaying a memory word.  See
     the ``x'' command.  */
  word_format = argv[1][0];
d1662 1
a1662 1
  size_t len, r, i, steps, remainder;
@


1.224
log
@2012-11-13  Giuseppe Montalto  <giuseppe.montalto@@st.com>

	* mi/mi-main.c (mi_cmd_data_write_memory): Handle additional
	parameter COUNT, for pattern filling of memory regions.
	* NEWS: Mention it.
doc
	* gdb.texinfo (GDB/MI Data Manipulation): Document new optional
	parameter "count" of -data-write-memory-bytes, and add an example.
testsuite
	* gdb.mi/mi-fill-memory.exp: New test.
@
text
@d3 1
a3 1
   Copyright (C) 2000-2005, 2007-2012 Free Software Foundation, Inc.
@


1.223
log
@gdb/
	* mi/mi-main.c (mi_cmd_data_write_memory): Call
	write_memory_with_notification instead of write_memory.
	(mi_cmd_data_write_memory_bytes): Call write_memory_with_notification
	instead of target_write_memory.

gdb/testsuite/
	* gdb.mi/pr11022.exp: New.
	* gdb.mi/pr11022.c: New.  Copied from gdb.base/.
@
text
@d1659 2
a1660 1
   DATA: string of bytes to write at that address.  */
d1668 3
a1670 1
  int len, r, i;
d1673 2
a1674 2
  if (argc != 2)
    error (_("Usage: ADDR DATA."));
d1683 4
d1688 2
a1689 2
  data = xmalloc (len);
  back_to = make_cleanup (xfree, data);
d1694 25
a1718 2
      sscanf (cdata + i * 2, "%02x", &x);
      data[i] = (gdb_byte) x;
d1721 1
a1721 1
  write_memory_with_notification (addr, data, len);
@


1.222
log
@gdb/
	* mi/mi-main.c (mi_cmd_data_write_memory_bytes): Emit error
	when the length of content is not an even number.
@
text
@d1651 1
a1651 1
  write_memory (addr, buffer, word_size);
d1691 1
a1691 3
  r = target_write_memory (addr, data, len);
  if (r != 0)
    error (_("Could not write memory"));
@


1.221
log
@gdb/
	* mi/mi-cmds.c (mi_cmds): New macros DEF_MI_CMD_CLI
	DEF_MI_CMD_MI DEF_MI_CMD_CLI_1 and DEF_MI_CMD_CLI_1.
	Update some commands.
	* mi/mi-cmds.h (struct mi_cmd) <suppress_notification>: New field.
	* mi/mi-main.c (mi_cmd_execute): Set '*parse->cmd->suppress_notification'
	to 1.
@
text
@d1675 4
@


1.220
log
@gdb/

	* cli/cli-decode.c (set_cmd_prefix): New.
	(lookup_cmd_for_prefixlist): New.
	(add_prefix_cmd): Call set_cmd_prefix and update field 'prefix'
	of each cmd_list_element in *prefixlist.
	(add_setshow_cmd_full): set_cmd_prefix.
	(add_alias_cmd): Likewise.
	* cli/cli-decode.h (struct cmd_list_element) <prefix>: New field.
	Declare 'auto_boolean_enums'.
	* cli/cli-setshow.c: Include "observer.h".
	(notify_command_param_changed_p): New.
	(add_setshow_auto_boolean_cmd): Move auto_boolean_enums out.
	Remove 'static'.
	(do_setshow_command): Split it to ...
	(do_set_command, do_show_command): ... them.  New.
	(do_set_command): Call observer_notify_command_param_changed if
	notify_command_param_changed_p returns true.
	(cmd_show_list): Caller update.
	* auto-load.c (set_auto_load_cmd): Likewise.
	* remote.c (show_remote_cmd): Likewise.
	* cli/cli-setshow.h: Update declarations.
	* top.c (execute_command): Call do_set_command and do_show_command.

	* NEWS: Mention new MI notification.
	* mi/mi-interp.c: Declare mi_command_param_changed.
	(mi_interpreter_init): Attach mi_command_param_changed to
	observer command_param_changed.
	(mi_command_param_changed): New.
	Remove mi_suppress_breakpoint_notifications.
	Define global variable mi_suppress_notification.
	(mi_breakpoint_created): Update.
	(mi_breakpoint_deleted): Likewise.
	(mi_breakpoint_modified): Likewise.
	* mi/mi-main.c (mi_cmd_execute): Likewise.  Check command
	'gdb-set' and set mi_suppress_notification.
	* mi/mi-main.h: (mi_suppress_notification): New struct.

gdb/doc/

	* observer.texi: New observer command_param_changed.
	* gdb.texinfo (GDB/MI Async Records): Doc for '=cmd-param-changed'.

gdb/testsuite/

	* gdb.mi/mi-cmd-param-changed.exp: New.
	* gdb.mi/mi-cli.exp: Update for MI notification "=cmd-param-changed".
	* gdb.mi/mi-var-rtti.exp, gdb.mi/mi2-cli.exp: Likewise.
	* gdb.mi/mi2-prompt.exp: Likewise.
@
text
@d2100 1
a2100 1
  if (strncmp (parse->command, "break-", sizeof ("break-") - 1 ) == 0)
d2102 2
a2103 9
      make_cleanup_restore_integer (&mi_suppress_notification.breakpoint);
      mi_suppress_notification.breakpoint = 1;
    }
  else if (strncmp (parse->command, "gdb-set", sizeof ("gdb-set") - 1) == 0)
    {
      int *p = &mi_suppress_notification.cmd_param_changed;

      make_cleanup_restore_integer (p);
      mi_suppress_notification.cmd_param_changed = 1;
@


1.219
log
@	* linespec.c: #include "stack.h".
	(decode_line_with_current_source): Moved here from symtab.c and
	renamed from decode_line_spec.  All callers updated.
	(decode_line_with_last_displayed): Moved here from breakpoint.c and
	renamed from decode_line_spec_1.  All callers updated.
	* linespec.h (decode_line_with_current_source): Move declaration here
	from symtab.h and renamed from decode_line_spec.
	(decode_line_with_last_displayed): Move declaration here from symtab.h
	and renamed from decode_line_spec_1.
	* macrocmd.c: #include "linespec.h".
	* symtab.c: Remove #include "linespec.h".
@
text
@d2102 9
a2110 2
      make_cleanup_restore_integer (&mi_suppress_breakpoint_notifications);
      mi_suppress_breakpoint_notifications = 1;
@


1.218
log
@gdb/
2012-05-24  Pedro Alves  <palves@@redhat.com>

	PR gdb/7205

        Replace TARGET_SIGNAL_ with GDB_SIGNAL_ throughout.

gdb/gdbserver/
2012-05-24  Pedro Alves  <palves@@redhat.com>

	PR gdb/7205

        Replace TARGET_SIGNAL_ with GDB_SIGNAL_ throughout.

include/gdb/
2012-05-24  Pedro Alves  <palves@@redhat.com>

	PR gdb/7205

        * gdb/signals.def: Replace TARGET_SIGNAL_ with GDB_SIGNAL_
	throughout.

sim/arm/
2012-05-24  Pedro Alves  <palves@@redhat.com>

	PR gdb/7205

        Replace TARGET_SIGNAL_ with GDB_SIGNAL_ throughout.

sim/avr/
2012-05-24  Pedro Alves  <palves@@redhat.com>

	PR gdb/7205

        Replace TARGET_SIGNAL_ with GDB_SIGNAL_ throughout.

sim/common/
2012-05-24  Pedro Alves  <palves@@redhat.com>

	PR gdb/7205

        Replace TARGET_SIGNAL_ with GDB_SIGNAL_ throughout.

sim/cr16/
2012-05-24  Pedro Alves  <palves@@redhat.com>

	PR gdb/7205

        Replace TARGET_SIGNAL_ with GDB_SIGNAL_ throughout.

sim/d10v/
2012-05-24  Pedro Alves  <palves@@redhat.com>

	PR gdb/7205

        Replace TARGET_SIGNAL_ with GDB_SIGNAL_ throughout.

sim/erc32/
2012-05-24  Pedro Alves  <palves@@redhat.com>

	PR gdb/7205

        Replace TARGET_SIGNAL_ with GDB_SIGNAL_ throughout.

sim/m32c/
2012-05-24  Pedro Alves  <palves@@redhat.com>

	PR gdb/7205

        Replace TARGET_SIGNAL_ with GDB_SIGNAL_ throughout.

sim/ppc/
2012-05-24  Pedro Alves  <palves@@redhat.com>

	PR gdb/7205

        Replace TARGET_SIGNAL_ with GDB_SIGNAL_ throughout.

sim/rl78/
2012-05-24  Pedro Alves  <palves@@redhat.com>

	PR gdb/7205

        Replace TARGET_SIGNAL_ with GDB_SIGNAL_ throughout.

sim/rx/
2012-05-24  Pedro Alves  <palves@@redhat.com>

	PR gdb/7205

        Replace TARGET_SIGNAL_ with GDB_SIGNAL_ throughout.
@
text
@d2439 2
a2440 1
      sals = decode_line_spec (argv[1], DECODE_LINE_FUNFIRSTLINE);
@


1.217
log
@2012-05-18  Sergio Durigan Junior  <sergiodj@@redhat.com>

	* ada-lang.c:
	* ada-tasks.c:
	* ada-varobj.c:
	* amd64-darwin-tdep.c:
	* arm-symbian-tdep.c:
	* arm-tdep.c:
	* avr-tdep.c:
	* ax-gdb.c:
	* bfin-linux-tdep.c:
	* breakpoint.c:
	* c-valprint.c:
	* cli/cli-cmds.c:
	* coffread.c:
	* cp-support.c:
	* cris-tdep.c:
	* dwarf2-frame-tailcall.c:
	* dwarf2-frame.c:
	* dwarf2expr.c:
	* dwarf2loc.c:
	* dwarf2read.c:
	* elfread.c:
	* eval.c:
	* expprint.c:
	* f-valprint.c:
	* frv-tdep.c:
	* h8300-tdep.c:
	* hppa-hpux-tdep.c:
	* hppa-tdep.c:
	* hppanbsd-tdep.c:
	* i386-nto-tdep.c:
	* i386-tdep.c:
	* i387-tdep.c:
	* ia64-tdep.c:
	* jit.c:
	* linespec.c:
	* linux-tdep.c:
	* lm32-tdep.c:
	* m2-valprint.c:
	* m32c-tdep.c:
	* m32r-rom.c:
	* m32r-tdep.c:
	* m68k-tdep.c:
	* m68klinux-tdep.c:
	* mi/mi-main.c:
	* microblaze-tdep.c:
	* mips-linux-tdep.c:
	* mips-tdep.c:
	* mn10300-tdep.c:
	* p-valprint.c:
	* parse.c:
	* ppc-linux-tdep.c:
	* ppc-sysv-tdep.c:
	* printcmd.c:
	* python/py-finishbreakpoint.c:
	* python/py-inferior.c:
	* python/py-infthread.c:
	* python/py-type.c:
	* python/python.c:
	* remote-fileio.c:
	* remote-m32r-sdi.c:
	* remote-mips.c:
	* reverse.c:
	* rl78-tdep.c:
	* rs6000-aix-tdep.c:
	* rs6000-tdep.c:
	* s390-tdep.c:
	* score-tdep.c:
	* sh64-tdep.c:
	* skip.c:
	* solib-darwin.c:
	* solib-dsbt.c:
	* solib-frv.c:
	* sparc-tdep.c:
	* spu-multiarch.c:
	* spu-tdep.c:
	* stack.c:
	* symfile.c:
	* symtab.c:
	* tic6x-tdep.c:
	* tracepoint.c:
	* v850-tdep.c:
	* valarith.c:
	* valprint.c:
	* value.c:
	* xcoffread.c:
	* xtensa-tdep.c:
	* ada-lang.c:
	* ada-tasks.c:
	* ada-varobj.c:
	* amd64-darwin-tdep.c:
	* arm-symbian-tdep.c:
	* arm-tdep.c: Delete unused variables.
@
text
@d213 1
a213 1
  proceed ((CORE_ADDR) -1, TARGET_SIGNAL_DEFAULT, 0);
@


1.216
log
@2012-04-24  Marc Khouzam  <marc.khouzam@@ericsson.com>

 	* mi/mi-main.c (mi_cmd_execute): Choose a live thread not just
	any thread.
@
text
@a1133 2
  CORE_ADDR addr;
  enum lval_type lval;
@


1.215
log
@2012-03-27  Pedro Alves  <palves@@redhat.com>

	Eliminate struct ui_stream.

	* ui-out.h (struct ui_stream): Delete.
	(ui_out_field_stream): Adjust prototype.
	(ui_out_stream_new, ui_out_stream_delete)
	(make_cleanup_ui_out_stream_delete): Delete declarations.
	* ui-out.c (ui_out_field_stream): Change prototype to take a
	ui_file instead of a ui_stream.  Adjust.
	(ui_out_stream_new, ui_out_stream_delete, do_stream_delete)
	(make_cleanup_ui_out_stream_delete): Delete.
	* breakpoint.c (print_breakpoint_location)
	(print_one_detail_ranged_breakpoint, print_it_watchpoint): Use
	ui_file/mem_fileopen instead of ui_stream/ui_out_stream_new.
	* disasm.c (dump_insns): Ditto.
	(do_mixed_source_and_assembly, do_assembly_only): Adjust
	prototype.
	(gdb_disassembly): Use ui_file/mem_fileopen instead of
	ui_stream/ui_out_stream_new.
	* infcmd.c (print_return_value): Ditto.
	* osdata.c (info_osdata_command): Don't allocate a local
	ui_stream.
	* stack.c (print_frame_arg, print_frame_args, print_frame): Use
	ui_file/mem_fileopen instead of ui_stream/ui_out_stream_new.
	* tracepoint.c (print_one_static_tracepoint_marker): Don't
	allocate a local ui_stream.
	* mi/mi-cmd-stack.c (list_arg_or_local): Use ui_file/mem_fileopen
	instead of ui_stream/ui_out_stream_new.
	(list_args_or_locals): Don't allocate a local ui_stream.
	* mi/mi-main.c (get_register, mi_cmd_data_evaluate_expression)
	(mi_cmd_data_read_memory): Use ui_file/mem_fileopen instead of
	ui_stream/ui_out_stream_new.
	* cli/cli-setshow.c (do_setshow_command): Ditto.
@
text
@d2069 1
a2069 1
	tp = any_thread_of_process (inf->pid);
@


1.214
log
@gdb/
	Fix double prompt of 'interpreter-exec mi'.
	* mi/mi-interp.c (mi_execute_command_input_handler): New prototype.
	(mi_interpreter_resume): use it.
	(mi_execute_command_input_handler): New function.
	* mi/mi-main.c (mi_execute_command): Move prompt printing to
	mi_execute_command_input_handler.

gdb/testsuite/
	* gdb.mi/mi2-prompt.exp: New file.
@
text
@a1135 1
  struct ui_stream *stb;
a1137 2
  stb = ui_out_stream_new (uiout);

d1167 5
d1178 1
a1178 1
		 stb->stream, 0, val, &opts, current_language);
d1180 1
a1180 1
      ui_out_stream_delete (stb);
d1252 1
a1252 1
  struct cleanup *old_chain = NULL;
d1254 1
a1254 1
  struct ui_stream *stb = NULL;
d1258 2
a1259 1
  stb = ui_out_stream_new (uiout);
d1262 2
a1263 5
    {
      ui_out_stream_delete (stb);
      error (_("-data-evaluate-expression: "
	       "Usage: -data-evaluate-expression expression"));
    }
d1267 1
a1267 1
  old_chain = make_cleanup (free_current_contents, &expr);
d1274 1
a1274 1
  common_val_print (val, stb->stream, 0, &opts, current_language);
a1276 1
  ui_out_stream_delete (stb);
d1422 2
a1423 2
    struct ui_stream *stream = ui_out_stream_new (uiout);
    struct cleanup *cleanup_list_memory;
d1427 4
a1430 1
    cleanup_list_memory = make_cleanup_ui_out_list_begin_end (uiout, "memory");
d1457 1
a1457 1
		ui_file_rewind (stream->stream);
d1459 1
a1459 1
					word_asize, stream->stream);
d1468 1
a1468 1
	    ui_file_rewind (stream->stream);
d1473 1
a1473 1
		  fputc_unfiltered ('X', stream->stream);
d1475 1
a1475 1
		  fputc_unfiltered (aschar, stream->stream);
d1477 1
a1477 1
		  fputc_unfiltered (mbuf[byte], stream->stream);
d1483 1
a1483 2
    ui_out_stream_delete (stream);
    do_cleanups (cleanup_list_memory);
@


1.213
log
@gdb:

	* inferior.h (struct inferior): Remove fields any_syscall_count,
	syscalls_counts and total_syscalls_count.  Move them to new
	struct catch_syscall_inferior_data in breakpoint.c.
	* breakpoint.c: Call DEF_VEC_I(int).
	(struct catch_syscall_inferior_data): New.
	(get_catch_syscall_inferior_data): New.
	(catch_syscall_inferior_data_cleanup): New.
	(insert_catch_syscall): Update to access data in
	struct catch_syscall_inferior_data.
	(insert_catch_syscall): Likewise.
	(remove_catch_syscall): Likewise.
	(remove_catch_syscall): Likewise.
	(is_syscall_catchpoint_enabled): Likewise.
	(add_catch_command): Likewise.
	(_initialize_breakpoint): Register cleanup.
	* breakpoint.h: Removed DEF_VEC_I(int).
	* dwarf2loc.c: Call DEF_VEC_I(int).
	* mi/mi-main.c: Likewise.
@
text
@a2031 3

  fputs_unfiltered ("(gdb) \n", raw_stdout);
  gdb_flush (raw_stdout);
@


1.212
log
@	* mi/mi-cmd-break.c: Enforce coding standards, fix comments.
	* mi/mi-cmd-disas.c: Ditto.
	* mi/mi-cmd-env.c: Ditto.
	* mi/mi-cmd-file.c: Ditto.
	* mi/mi-cmd-stack.c: Ditto.
	* mi/mi-cmd-target.c: Ditto.
	* mi/mi-cmd-var.c: Ditto.
	* mi/mi-cmds.c: Ditto.
	* mi/mi-cmds.h: Ditto.
	* mi/mi-console.c: Ditto.
	* mi/mi-getopt.c: Ditto.
	* mi/mi-getopt.h: Ditto.
	* mi/mi-interp.c: Ditto.
	* mi/mi-main.c: Ditto.
	* mi/mi-out.c: Ditto.
	* mi/mi-parse.c: Ditto.
	* mi/mi-parse.h: Ditto.
	* mi/mi-symbol-cmds.c: Ditto.

	* mi/mi-getopt.h: Move mi_opt struct up.
	* mi/mi-main.c (captured_mi_execute_command): Remove redundant
	return.
	* mi/mi-out.c (_initialize_mi_out): Remove empty initialize.
@
text
@d511 2
@


1.211
log
@Copyright year update in most files of the GDB Project.

gdb/ChangeLog:

        Copyright year update in most files of the GDB Project.
@
text
@a21 2
/* Work in progress.  */

d72 1
d75 2
a76 2
/* This is used to pass the current command timestamp
   down to continuation routines.  */
d82 3
a84 3
/* Few commands would like to know if options like --thread-group
   were explicitly specified.  This variable keeps the current
   parsed command including all option, and make it possible.  */
d180 1
a180 1
     specified number of frames. */
a215 1

d230 4
a233 3
      /* In non-stop mode, 'resume' always resumes a single thread.  Therefore,
	 to resume all threads of the current inferior, or all threads in all
	 inferiors, we need to iterate over threads.
d267 4
a270 3
	  /* In all-stop mode, -exec-continue traditionally resumed either
	     all threads, or one thread, depending on the 'scheduler-locking'
	     variable.  Let's continue to do the same.  */
d325 4
a328 4
/* Interrupt the execution of the target.  Note how we must play around
   with the token variables, in order to display the current token in
   the result of the interrupt command, and the previous execution
   token when the target finally stops.  See comments in
d330 1
d613 3
a615 2
/* Output a field named 'cores' with a list as the value.  The elements of
   the list are obtained by splitting 'cores' on comma.  */
d802 4
d807 3
a809 1
      AVAILABLE_OPT, RECURSE_OPT
a810 6
  static const struct mi_opt opts[] =
  {
    {"-available", AVAILABLE_OPT, 0},
    {"-recurse", RECURSE_OPT, 1},
    { 0, 0, 0 }
  };
d866 1
a866 1
      /* Local thread groups, single id. */
d904 5
a908 4
     gdbarch_register_name because gdbarch_num_regs may be allocated for
     the union of the register sets within a family of related processors.
     In this case, some entries of gdbarch_register_name will change depending
     upon the particular processor being debugged.  */
d958 4
a961 3
  /* The last time we visited this function, the current frame's register
     contents were saved in THIS_REGS.  Move THIS_REGS over to PREV_REGS,
     and refresh THIS_REGS with the now-current register contents.  */
d968 5
a972 4
     gdbarch_register_name because gdbarch_num_regs may be allocated for
     the union of the register sets within a family of related processors.
     In this  case, some entries of gdbarch_register_name will change depending
     upon the particular processor being debugged.  */
d979 1
a979 1
  if (argc == 0)		/* No args, just do all the regs.  */
d981 1
d1051 7
a1057 5
   display the registers contents.  This can be one of: x (hexadecimal), d
   (decimal), N (natural), t (binary), o (octal), r (raw).  After the
   format argumetn there can be a sequence of numbers, indicating which
   registers to fetch the content of.  If the format is the only argument,
   a list of all the registers with their values is returned.  */
d1069 5
a1073 4
     gdbarch_register_name because gdbarch_num_regs may be allocated for
     the union of the register sets within a family of related processors.
     In this case, some entries of gdbarch_register_name will change depending
     upon the particular processor being debugged.  */
d1087 1
a1087 1
  if (argc == 1)	    /* No args, beside the format: do all the regs.  */
d1089 1
d1126 1
a1163 1
      /*fputs_filtered (buf, gdb_stdout); */
d1193 5
a1197 4
     gdbarch_register_name because gdbarch_num_regs may be allocated for
     the union of the register sets within a family of related processors.
     In this case, some entries of gdbarch_register_name will change depending
     upon the particular processor being debugged.  */
d1243 1
d1280 1
a1280 1
/* DATA-MEMORY-READ:
d1297 1
a1297 1
   The number of bytes read is SIZE*ROW*COL. */
d1306 1
a1306 3
  long total_bytes;
  long nr_cols;
  long nr_rows;
d1318 4
d1323 2
a1324 1
      OFFSET_OPT
a1325 5
  static const struct mi_opt opts[] =
  {
    {"o", OFFSET_OPT, 1},
    { 0, 0, 0 }
  };
d1353 1
a1353 1
     the ``x'' command. */
d1469 1
a1469 3
		  {
		    fputc_unfiltered ('X', stream->stream);
		  }
d1471 1
a1471 3
		  {
		    fputc_unfiltered (aschar, stream->stream);
		  }
d1500 4
d1505 2
a1506 1
      OFFSET_OPT
a1507 5
  static const struct mi_opt opts[] =
  {
    {"o", OFFSET_OPT, 1},
    { 0, 0, 0 }
  };
d1567 1
a1567 2

/* DATA-MEMORY-WRITE:
d1583 1
d1601 4
d1606 2
a1607 1
      OFFSET_OPT
a1608 5
  static const struct mi_opt opts[] =
  {
    {"o", OFFSET_OPT, 1},
    { 0, 0, 0 }
  };
d1637 1
a1637 1
  /* The size of the memory word. */
d1655 1
a1655 1
/* DATA-MEMORY-WRITE-RAW:
d1658 2
a1659 1
   DATA: string of bytes to write at that address. */
d1683 1
a1683 1
      data[i] = (gdb_byte)x;
a1692 1

d1777 2
a1778 2
/* Callback used to find the first inferior other than the
   current one. */
d1834 1
a1834 1
   prompt, display error). */
a1857 1

d1863 3
a1865 3
	 to directly use the mi_interp's uiout, since the command could 
	 have reset the interpreter, in which case the current uiout 
	 will most likely crash in the mi_out_* routines.  */
d1879 3
a1881 3
	    /* The command does not want anything to be printed.  In that
	       case, the command probably should not have written anything
	       to uiout, but in case it has written something, discard it.  */
a1918 1

a1921 2

  return;
a2032 2
  /* Print any buffered hook code.  */
  /* ..... */
d2064 4
a2067 3
	 an inferior with multiple threads, then a random one will be picked.
	 This is not a problem -- frontend should always provide --thread if
	 it wishes to operate on a specific thread.  */
d2158 1
a2158 1
      execute_command ( /*ui */ run, 0 /*from_tty */ );
d2176 1
a2176 1
  execute_command ( /*ui */ run, 0 /*from_tty */ );
d2277 2
a2278 2
  {
    gettimeofday (&tv->wallclock, NULL);
d2280 5
a2284 5
    getrusage (RUSAGE_SELF, &rusage);
    tv->utime.tv_sec = rusage.ru_utime.tv_sec;
    tv->utime.tv_usec = rusage.ru_utime.tv_usec;
    tv->stime.tv_sec = rusage.ru_stime.tv_sec;
    tv->stime.tv_usec = rusage.ru_stime.tv_usec;
d2286 2
a2287 2
    {
      long usec = get_run_time ();
d2289 5
a2293 5
      tv->utime.tv_sec = usec/1000000L;
      tv->utime.tv_usec = usec - 1000000L*tv->utime.tv_sec;
      tv->stime.tv_sec = 0;
      tv->stime.tv_usec = 0;
    }
d2295 1
a2295 1
  }
d2299 2
a2300 2
  {
    struct mi_timestamp now;
d2302 3
a2304 3
    timestamp (&now);
    print_diff (start, &now);
  }
d2309 2
a2310 2
  /* If the command is -enable-timing then do_timings may be
     true whilst current_command_ts is not initialized.  */
d2317 4
a2320 4
  {
    return ((end.tv_sec - start.tv_sec) * 1000000L)
      + (end.tv_usec - start.tv_usec);
  }
d2324 8
a2331 8
  {
    fprintf_unfiltered
      (raw_stdout,
       ",time={wallclock=\"%0.5f\",user=\"%0.5f\",system=\"%0.5f\"}", 
       timeval_diff (start->wallclock, end->wallclock) / 1000000.0, 
       timeval_diff (start->utime, end->utime) / 1000000.0, 
       timeval_diff (start->stime, end->stime) / 1000000.0);
  }
d2375 1
a2375 1
    error (_("-trace-list-variables: no arguments are allowed"));
d2460 1
a2460 3
    {
      print_stack_frame (get_selected_frame (NULL), 1, SRC_AND_LOC);
    }
a2487 1

d2507 1
a2507 1
/* Implement the "-ada-task-info" GDB/MI command.  */
@


1.210
log
@* mi/mi-main.c (mi_cmd_list_thread_groups): Rename `optind' and
`optarg' to `oind' and `oarg', respectively(-Wshadow).
(mi_cmd_data_read_memory): Ditto.
(mi_cmd_data_read_memory_bytes): Ditto.
@
text
@d3 1
a3 2
   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008, 2009, 2010,
   2011 Free Software Foundation, Inc.
@


1.209
log
@the "ambiguous linespec" series
gdb
2011-12-06  Joel Brobecker  <brobecker@@acacore.com>

        * language.h (struct language_defn): Add new component
        la_symbol_name_compare.
        * symfile.h (struct quick_symbol_functions): Update the profile
        of parameter "name_matcher" for the expand_symtabs_matching
        method.  Update the documentation accordingly.
        * ada-lang.h (ada_name_for_lookup): Add declaration.
        * ada-lang.c (ada_name_for_lookup): New function, extracted out
        from ada_iterate_over_symbols.
        (ada_iterate_over_symbols): Do not encode symbol name anymore.
        (ada_expand_partial_symbol_name): Adjust profile.
        (ada_language_defn): Add value for la_symbol_name_compare field.
        * linespec.c: #include "ada-lang.h".
        (iterate_name_matcher): Add language parameter. Replace call
        to strcmp_iw by call to language->la_symbol_name_compare.
        (decode_variable): Encode COPY if current language is Ada.
        * dwarf2read.c (dw2_expand_symtabs_matching): Adjust profile
        of name_matcher parameter.  Adjust call to name_matcher.
        * psymtab.c (expand_symtabs_matching_via_partial): Likewise.
        (expand_partial_symbol_names): Update profile of parameter "fun".
        * psymtab.h (expand_partial_symbol_names): Update profile of
        parameter "fun".
        * symtab.c (demangle_for_lookup): Update function documentation.
        (search_symbols_name_matches): Add language parameter.
        (expand_partial_symbol_name): Likewise.
        * c-lang.c (c_language_defn, cplus_language_defn)
        (asm_language_defn, minimal_language_defn): Add value for
        la_symbol_name_compare field.
        * d-lang.c (d_language_defn): Likewise.
        * f-lang.c (f_language_defn): Ditto.
        * jv-lang.c (java_language_defn): Ditto.
        * m2-lang.c (m2_language_defn): Ditto.
        * objc-lang.c (objc_language_defn): Ditto.
        * opencl-lang.c (opencl_language_defn): Ditto.
        * p-lang.c (pascal_language_defn): Ditto.
        * language.c (unknown_language_defn, auto_language_defn)
        (local_language_defn): Ditto.

2011-12-06  Tom Tromey  <tromey@@redhat.com>

	* linespec.c (iterate_over_all_matching_symtabs): Use
	LA_ITERATE_OVER_SYMBOLS.
	(lookup_prefix_sym, add_matching_symbols_to_info): Likewise.
	(find_function_symbols, decode_variable): Remove Ada special
	case.
	* language.h (struct language_defn) <la_iterate_over_symbols>: New
	field.
	(LA_ITERATE_OVER_SYMBOLS): New macro.
	* language.c (unknown_language_defn, auto_language_defn)
	(local_language_defn): Update.
	* c-lang.c (c_language_defn, cplus_language_defn)
	(asm_language_defn, minimal_language_defn): Update.
	* d-lang.c (d_language_defn): Update.
	* f-lang.c (f_language_defn): Update.
	* jv-lang.c (java_language_defn): Update.
	* m2-lang.c (m2_language_defn): Update.
	* objc-lang.c (objc_language_defn): Update.
	* opencl-lang.c (opencl_language_defn): Update.
	* p-lang.c (pascal_language_defn): Update.
	* ada-lang.c (ada_iterate_over_symbols): New function.
	(ada_language_defn): Update.

2011-12-06  Tom Tromey  <tromey@@redhat.com>
	    Joel Brobecker  <brobecker@@acacore.com>

	PR breakpoints/13105, PR objc/8341, PR objc/8343, PR objc/8366,
	PR objc/8535, PR breakpoints/11657, PR breakpoints/11970,
	PR breakpoints/12023, PR breakpoints/12334, PR breakpoints/12856,
	PR shlibs/8929, PR shlibs/7393:
	* python/py-type.c (compare_maybe_null_strings): Rename from
	compare_strings.
	(check_types_equal): Update.
	* utils.c (compare_strings): New function.
	* tui/tui-winsource.c (tui_update_breakpoint_info): Update for
	location changes.
	* tracepoint.c (scope_info): Update.
	(trace_find_line_command): Use DECODE_LINE_FUNFIRSTLINE.
	* symtab.h (iterate_over_minimal_symbols)
	(iterate_over_some_symtabs, iterate_over_symtabs)
	(find_pcs_for_symtab_line, iterate_over_symbols)
	(demangle_for_lookup): Declare.
	(expand_line_sal): Remove.
	* symtab.c (iterate_over_some_symtabs, iterate_over_symtabs)
	(lookup_symtab_callback): New functions.
	(lookup_symtab): Rewrite.
	(demangle_for_lookup): New function, extract from
	lookup_symbol_in_language.
	(lookup_symbol_in_language): Use it.
	(iterate_over_symbols): New function.
	(find_line_symtab): Update.
	(find_pcs_for_symtab_line): New functions.
	(find_line_common): Add 'start' argument.
	(decode_line_spec): Update.  Change argument to 'flags', change
	interpretation.
	(append_expanded_sal): Remove.
	(append_exact_match_to_sals): Remove.
	(expand_line_sal): Remove.
	* symfile.h (struct quick_symbol_functions) <lookup_symtab>:
	Remove.
	<map_symtabs_matching_filename>: New field.
	* stack.c (func_command): Only look in the current program space.
	Use DECODE_LINE_FUNFIRSTLINE.
	* source.c (line_info): Set pspace on sal.  Check program space in
	the loop.  Use DECODE_LINE_LIST_MODE.
	(select_source_symtab): Use DECODE_LINE_FUNFIRSTLINE.
	* solib-target.c: Remove DEF_VEC_I(CORE_ADDR).
	* python/python.c (gdbpy_decode_line): Update.
	* psymtab.c (partial_map_expand_apply): New function.
	(partial_map_symtabs_matching_filename): Rename from
	lookup_partial_symbol.  Update arguments.
	(lookup_symtab_via_partial_symtab): Remove.
	(psym_functions): Update.
	* objc-lang.h (parse_selector, parse_method): Don't declare.
	(find_imps): Update.
	* objc-lang.c (parse_selector, parse_method): Now static.
	(find_methods): Change arguments.  Fill in a vector of symbol
	names.
	(uniquify_strings): New function.
	(find_imps): Change arguments.
	* minsyms.c (iterate_over_minimal_symbols): New function.
	* linespec.h (enum decode_line_flags): New.
	(struct linespec_sals): New.
	(struct linespec_result) <canonical>: Remove.
	<pre_expanded, addr_string, sals>: New fields.
	(destroy_linespec_result, make_cleanup_destroy_linespec_result)
	(decode_line_full): Declare.
	(decode_line_1): Update.
	* linespec.c (struct address_entry, struct linespec_state, struct
	collect_info): New types.
	(add_sal_to_sals_basic, add_sal_to_sals, hash_address_entry)
	(eq_address_entry, maybe_add_address): New functions.
	(total_number_of_methods): Remove.
	(iterate_name_matcher, iterate_over_all_matching_symtabs): New
	functions.
	(find_methods): Change arguments.  Don't canonicalize input.
	Simplify logic.
	(add_matching_methods, add_constructors)
	(build_canonical_line_spec): Remove.
	(filter_results, convert_results_to_lsals): New functions.
	(decode_line_2): Change arguments.  Rewrite for new data
	structures.
	(decode_line_internal): Rename from decode_line_1.  Change
	arguments.  Add cleanups.  Update for new data structures.
	(linespec_state_constructor, linespec_state_destructor)
	(decode_line_full, decode_line_1): New functions.
	(decode_indirect): Change arguments.  Update.
	(locate_first_half): Use skip_spaces.
	(decode_objc): Change arguments.  Update for new data structures.
	Simplify logic.
	(decode_compound): Change arguments.  Add cleanups.  Remove
	fallback code, replace with error.
	(struct decode_compound_collector): New type.
	(collect_one_symbol): New function.
	(lookup_prefix_sym): Change arguments.  Update.
	(compare_symbol_name, add_all_symbol_names_from_pspace)
	(find_superclass_methods ): New functions.
	(find_method): Rewrite.
	(struct symtab_collector): New type.
	(add_symtabs_to_list, collect_symtabs_from_filename): New
	functions.
	(symtabs_from_filename): Change API.  Rename from
	symtab_from_filename.
	(collect_function_symbols): New function.
	(find_function_symbols): Change API.  Rename from
	find_function_symbol.  Rewrite.
	(decode_all_digits): Change arguments.  Rewrite.
	(decode_dollar): Change arguments.  Use decode_variable.
	(decode_label): Change arguments.  Rewrite.
	(collect_symbols): New function.
	(minsym_found): Change arguments.  Rewrite.
	(check_minsym, search_minsyms_for_name)
	(add_matching_symbols_to_info): New function.
	(decode_variable): Change arguments.  Iterate over all symbols.
	(symbol_found): Remove.
	(symbol_to_sal): New function.
	(init_linespec_result, destroy_linespec_result)
	(cleanup_linespec_result, make_cleanup_destroy_linespec_result):
	New functions.
	(decode_digits_list_mode, decode_digits_ordinary): New functions.
	* dwarf2read.c (dw2_map_expand_apply): New function.
	(dw2_map_symtabs_matching_filename): Rename from
	dw2_lookup_symtab.  Change arguments.
	(dwarf2_gdb_index_functions): Update.
	* dwarf2loc.c: Remove DEF_VEC_I(CORE_ADDR).
	* defs.h (compare_strings): Declare.
	* cli/cli-cmds.c (compare_strings): Move to utils.c.
	(edit_command, list_command): Use DECODE_LINE_LIST_MODE.  Call
	filter_sals.
	(compare_symtabs, filter_sals): New functions.
	* breakpoint.h (struct bp_location) <line_number, source_file>:
	New fields.
	(struct breakpoint) <line_number, source_file>: Remove.
	<filter>: New field.
	* breakpoint.c (print_breakpoint_location, init_raw_breakpoint)
	(momentary_breakpoint_from_master, add_location_to_breakpoint):
	Update for changes to locations.
	(init_breakpoint_sal): Add 'filter' argument.  Set 'filter' on
	breakpoint.
	(create_breakpoint_sal): Add 'filter' argument.
	(remove_sal, expand_line_sal_maybe): Remove.
	(create_breakpoints_sal): Remove 'sals' argument.  Handle
	pre-expanded sals and the filter.
	(parse_breakpoint_sals): Use decode_line_full.
	(check_fast_tracepoint_sals): Use get_sal_arch.
	(create_breakpoint): Create a linespec_sals.  Update.
	(break_range_command): Use decode_line_full.  Update.
	(until_break_command): Update.
	(clear_command): Update match conditions for linespec.c changes.
	Use DECODE_LINE_LIST_MODE.
	(say_where): Update for changes to locations.
	(bp_location_dtor): Free 'source_file'.
	(base_breakpoint_dtor): Free 'filter'.  Don't free 'source_file'.
	(update_static_tracepoint): Update for changes to locations.
	(update_breakpoint_locations): Disable ranged breakpoint if too
	many locations match.  Update.
	(addr_string_to_sals): Use decode_line_full.  Resolve all sal
	PCs.
	(breakpoint_re_set_default): Don't call expand_line_sal_maybe.
	(decode_line_spec_1): Update.  Change argument name to 'flags',
	change interpretation.
	* block.h (block_containing_function): Declare.
	* block.c (block_containing_function): New function.
	* skip.c (skip_function_command): Update.
	(skip_re_set): Update.
	* infcmd.c (jump_command): Use DECODE_LINE_FUNFIRSTLINE.
	* mi/mi-main.c (mi_cmd_trace_find): Use DECODE_LINE_FUNFIRSTLINE.
	* NEWS: Add entry.

2011-12-06  Tom Tromey  <tromey@@redhat.com>

	* elfread.c (elf_gnu_ifunc_resolver_return_stop): Allow
	breakpoint's pspace to be NULL.
	* breakpoint.h (struct breakpoint) <pspace>: Update comment.
	* breakpoint.c (init_raw_breakpoint): Conditionally set
	breakpoint's pspace.
	(init_breakpoint_sal): Don't set breakpoint's pspace.
	(prepare_re_set_context): Conditionally switch program space.
	(addr_string_to_sals): Check executing_startup on location's
	program space.

2011-12-06  Tom Tromey  <tromey@@redhat.com>

	* breakpoint.h (enum enable_state) <bp_startup_disabled>: Remove.
	* breakpoint.c (should_be_inserted): Explicitly check if program
	space is executing startup.
	(describe_other_breakpoints): Update.
	(disable_breakpoints_before_startup): Change executing_startup
	earlier.  Remove loop.
	(enable_breakpoints_after_startup): Likewise.
	(init_breakpoint_sal): Don't use bp_startup_disabled.
	(create_breakpoint): Don't use bp_startup_disabled.
	(update_global_location_list): Use should_be_inserted.
	(bkpt_re_set): Update.
gdb/testsuite
2011-12-06  Joel Brobecker  <brobecker@@acacore.com>

        * gdb.ada/fullname_bp.exp: Add tests for other valid linespecs
        involving a fully qualified function name.

2011-12-06  Tom Tromey  <tromey@@redhat.com>

	* gdb.ada/homonym.exp: Add three breakpoint tests.

2011-12-06  Tom Tromey  <tromey@@redhat.com>

	* gdb.base/solib-weak.exp (do_test): Remove kfail.
	* gdb.trace/tracecmd.exp: Disable pending breakpoints earlier.
	* gdb.objc/objcdecode.exp: Update for output changes.
	* gdb.linespec/linespec.exp: New file.
	* gdb.linespec/lspec.cc: New file.
	* gdb.linespec/lspec.h: New file.
	* gdb.linespec/body.h: New file.
	* gdb.linespec/base/two/thefile.cc: New file.
	* gdb.linespec/base/one/thefile.cc: New file.
	* gdb.linespec/Makefile.in: New file.
	* gdb.cp/templates.exp (test_template_breakpoints): Update for
	output changes.
	* gdb.cp/re-set-overloaded.exp: Remove kfail.
	* gdb.cp/ovldbreak.exp: Update for output changes.  "all" test now
	makes one breakpoint.
	* gdb.cp/method2.exp (test_break): Update for output changes.
	* gdb.cp/mb-templates.exp: Update for output changes.
	* gdb.cp/mb-inline.exp: Update for output changes.
	* gdb.cp/mb-ctor.exp: Update for output changes.
	* gdb.cp/ovsrch.exp: Use fully-qualified names.
	* gdb.base/solib-symbol.exp: Run to main later.  Breakpoint now
	has multiple matches.
	* gdb.base/sepdebug.exp: Disable pending breakpoints.  Update for
	error message change.
	* gdb.base/list.exp (test_list_filename_and_number): Update for
	error message change.
	* gdb.base/break.exp: Disable pending breakpoints.  Update for
	output changes.
	* configure.ac: Add gdb.linespec.
	* configure: Rebuild.
	* Makefile.in (ALL_SUBDIRS): Add gdb.linespec.
gdb/doc
2011-12-06  Tom Tromey  <tromey@@redhat.com>

	* gdb.texinfo (Set Breaks): Update for new behavior.
@
text
@d811 2
a812 2
  int optind = 0;
  char *optarg;
d817 1
a817 1
			   &optind, &optarg);
d827 1
a827 1
	  if (strcmp (optarg, "0") == 0)
d829 1
a829 1
	  else if (strcmp (optarg, "1") == 0)
d838 1
a838 1
  for (; optind < argc; ++optind)
d843 2
a844 2
      if (*(argv[optind]) != 'i')
	error (_("invalid syntax of group id '%s'"), argv[optind]);
d846 1
a846 1
      inf = strtoul (argv[optind] + 1, &end, 0);
d849 1
a849 1
	error (_("invalid syntax of group id '%s'"), argv[optind]);
d1306 2
a1307 2
  int optind = 0;
  char *optarg;
d1321 1
a1321 1
			   &optind, &optarg);
d1328 1
a1328 1
	  offset = atol (optarg);
d1332 2
a1333 2
  argv += optind;
  argc -= optind;
d1492 2
a1493 2
  int optind = 0;
  char *optarg;
d1507 1
a1507 1
			   &optind, &optarg);
d1513 1
a1513 1
	  offset = atol (optarg);
d1517 2
a1518 2
  argv += optind;
  argc -= optind;
d1593 2
a1594 2
  int optind = 0;
  char *optarg;
d1608 1
a1608 1
			   &optind, &optarg);
d1615 1
a1615 1
	  offset = atol (optarg);
d1619 2
a1620 2
  argv += optind;
  argc -= optind;
@


1.209.2.1
log
@Copyright year update in most files of the GDB Project.

gdb/ChangeLog:

        Copyright year update in most files of the GDB Project.
@
text
@d3 2
a4 1
   Copyright (C) 2000-2005, 2007-2012 Free Software Foundation, Inc.
@


1.209.2.2
log
@2012-04-24  Marc Khouzam  <marc.khouzam@@ericsson.com>

	* mi/mi-main.c (mi_cmd_execute): Choose a live thread not just
	any thread.
@
text
@d2068 1
a2068 1
	tp = any_live_thread_of_process (inf->pid);
@


1.208
log
@	* NEWS: Mention tracepoint additions.
	* breakpoint.h (struct tracepoint): New field traceframe_usage.
	* breakpoint.c (print_one_breakpoint_location): Identify
	tracepoints as such when reporting hit counts, report
	trace buffer usage.
	(create_tracepoint_from_upload): Copy status info.
	* tracepoint.h (struct trace_status): Rename error_desc to stop_desc,
	add fields user_name, notes, start_time, stop_time.
	(struct uploaded_tp): Add fields hit_count, traceframe_usage.
	* tracepoint.c (trace_user): New global.
	(trace_notes): New global.
	(trace_stop_notes): New global.
	(start_tracing): Add argument and trace note handling.
	(stop_tracing): Ditto.
	(trace_start_command): Add notes argument.
	(trace_stop_command): Ditto.
	(trace_status_command): Report additional status info.
	(trace_status_mi): Similarly.
	(trace_save): Update, record tracepoint status.
	(set_disconnected_tracing): Call target method directly.
	(send_disconnected_tracing_value): Remove.
	(set_trace_user): New function.
	(set_trace_notes): New function.
	(set_trace_stop_notes): New function.
	(parse_trace_status): Handle additional status.
	(parse_tracepoint_status): New function.
	(parse_tracepoint_definition): Call it.
	(tfile_get_tracepoint_status): New function.
	(init_tfile_ops): Use it.
	(_initialize_tracepoint): Add new setshows.
	* target.h (struct target_ops): New methods to_get_tracepoint_status
	and to_set_trace_notes.
	(target_get_tracepoint_status): New macro.
	(target_set_trace_notes): New macro.
	* target.c (update_current_target): Add new methods.
	* remote.c (remote_get_tracepoint_status): New function.
	(remote_set_trace_notes): New function.
	(init_remote_ops): Add them.
	* mi/mi-main.c (mi_cmd_trace_start): Add argument to call.
	(mi_cmd_trace_stop): Ditto.

	* tracepoint.c (struct tracepoint): New field traceframe_usage.
	(tracing_start_time): New global.
	(tracing_stop_time): New global.
	(tracing_user_name): New global.
	(tracing_notes): New global.
	(tracing_stop_note): New global.
	(cmd_qtstart): Set traceframe_usage, start_time.
	(stop_tracing): Set stop_time.
	(cmd_qtstatus): Report additional status.
	(cmd_qtp): New function.
	(handle_tracepoint_query): Call it.
	(cmd_qtnotes): New function.
	(handle_tracepoint_general_set): Call it.
	(get_timestamp): Rename from tsv_get_timestamp.

	* gdb.texinfo (Starting and Stopping Trace Experiments): Document
	note-related options and variables.
	(Tracepoint Packets): Document packet changes.

	* gdb.trace/tstatus.exp: New.
	* gdb.trace/actions.c: Include string.h.
@
text
@d56 1
d2441 1
a2441 1
      sals = decode_line_spec (argv[1], 1);
@


1.207
log
@[Ada] New GDB/MI command: -ada-tasks-info

This patch introduces a new GDB/MI command: -ada-tasks-info,
which is meant to be the MI equivalent of the CLI `info tasks'
command.

This new command returns an array, with each row corresponding
to one task.  For now, the columns of the array corresponds to
the columns displayed in the CLI output.

gdb/ChangeLog:

        * ada-lang.h (struct inferior): Declare.
        (print_ada_task_info): Add declaration.
        * ada-tasks.c (print_ada_task_info): Make non-static.
        * mi/mi-cmds.c (mi_cmds): Add "ada-task-info".
        * mi/mi-cmds.h (mi_cmd_ada_task_info): Add declaration.
        * mi/mi-main.c: #include "ada-lang.h".
        (mi_cmd_list_features): Add "ada-task-info" to the list
        of supported features.
        (mi_cmd_ada_task_info): New function.
@
text
@d2493 1
a2493 1
  start_tracing ();
d2505 1
a2505 1
  stop_tracing ();
@


1.206
log
@	* mi/mi-main.c (mi_load_progress): Restore saved_uiout value to
	current_uiout, not uiout.
@
text
@d55 1
d1724 1
d2508 11
@


1.205
log
@gdb/
	Code cleanup.
	* mi/mi-cmd-stack.c (list_args_or_locals): Remove stb initialization
	and the static keyword.
	* mi/mi-cmd-target.c (mi_cmd_target_file_get, mi_cmd_target_file_put):
	Make prefix an array.
	* mi/mi-cmd-target.c (mi_cmd_target_file_delete): Likewise.
	* mi/mi-main.c (get_register): Remove stb initialization and the static
	keyword.
@
text
@d2269 1
a2269 1
  uiout = saved_uiout;
@


1.204
log
@gdb/
	Code cleanup - make mi_opt const.
	* mi/mi-cmd-break.c (mi_cmd_break_insert, mi_cmd_break_watch): Make
	opts const.
	* mi/mi-cmd-disas.c (mi_cmd_disassemble): Likewise.
	* mi/mi-cmd-env.c (mi_cmd_env_path): Likewise.
	(mi_cmd_env_dir): Likewise.
	* mi/mi-cmd-target.c (mi_cmd_target_file_get): Likewise.
	(mi_cmd_target_file_put): Likewise.
	* mi/mi-cmd-target.c (mi_cmd_target_file_delete): Likewise.
	* mi/mi-cmd-var.c (mi_cmd_var_evaluate_expression): Likewise.
	* mi/mi-getopt.c (mi_getopt): Make opts and opt const.
	(mi_valid_noargs): Make opts const.
	* mi/mi-getopt.h (mi_getopt): Make opts and opt const.
	* mi/mi-main.c (mi_cmd_list_thread_groups): Make opts const.
	(mi_cmd_data_read_memory): Likewise.
	(mi_cmd_data_read_memory_bytes): Likewise.
	(mi_cmd_data_write_memory): Likewise.
@
text
@d1122 1
a1122 1
  static struct ui_stream *stb = NULL;
@


1.203
log
@2011-08-04  Pedro Alves  <pedro@@codesourcery.com>

	* ui-out.h (uiout): Rename to ...
	(current_uiout): ... this.
	* ui-out.c (uiout): Rename to ...
	(current_uiout): ... this.
	* ada-lang.c (print_it_exception, print_one_exception)
	(print_mention_exception): Adjust.
	* breakpoint.c (watchpoint_check): Adjust.
	(print_breakpoint_location, print_one_breakpoint, breakpoint_1)
	(default_collect_info, watchpoints_info, print_one_catch_fork)
	(print_one_catch_vfork, print_one_catch_syscall)
	(print_one_catch_exec, mention, print_it_ranged_breakpoint)
	(print_one_ranged_breakpoint, print_mention_ranged_breakpoint)
	(print_it_watchpoint, print_mention_watchpoint)
	(print_it_masked_watchpoint, print_mention_masked_watchpoint)
	(print_it_exception_catchpoint, print_one_exception_catchpoint)
	(print_mention_exception_catchpoint, say_where, bkpt_print_it)
	(bkpt_print_mention, momentary_bkpt_print_it)
	(tracepoint_print_mention, update_static_tracepoint)
	(tracepoints_info, save_breakpoints): Adjust.
	* cli-out.c (field_separator): Adjust.
	* cp-abi.c (list_cp_abis, show_cp_abi_cmd): Adjust.
	* exceptions.c (catch_exceptions_with_msg, catch_errors): Adjust.
	* frame.c (get_current_frame): Adjust.
	* infcmd.c (run_command_1, print_return_value): Adjust.
	* inferior.c (inferior_command, info_inferiors_command): Adjust.
	* infrun.c (print_end_stepping_range_reason): Adjust.
	(print_signal_exited_reason, print_exited_reason): Adjust.
	(print_signal_received_reason, print_no_history_reason): Adjust.
	* interps.c (interp_set): Adjust.
	* osdata.c (info_osdata_command): Adjust.
	* progspace.c (maintenance_info_program_spaces_command): Adjust.
	* remote-fileio.c (remote_fileio_request): Adjust.
	* remote.c (show_remote_cmd): Adjust.
	* solib.c (info_sharedlibrary_command): Adjust.
	* source.c (print_source_lines_base): Adjust.
	* stack.c (print_stack_frame): Adjust.
	(do_gdb_disassembly, print_frame_info, print_frame): Adjust.
	* symfile-mem.c (add_vsyscall_page): Adjust.
	* symfile.c (load_progress, generic_load)
	(print_transfer_performance): Adjust.
	* thread.c (info_threads_command, restore_selected_frame)
	(thread_command): Adjust.
	* top.c (make_cleanup_restore_ui_file): Adjust.
	* tracepoint.c (tvariables_info_1, trace_status_mi, tfind_1)
	(print_one_static_tracepoint_marker): Adjust.
	* cli/cli-cmds.c (print_disassembly): Adjust.
	* cli/cli-decode.c (print_doc_line): Adjust.
	* cli/cli-interp.c (safe_execute_command): Adjust.
	* cli/cli-logging.c (set_logging_redirect, pop_output_files)
	(handle_redirections): Adjust.
	* cli/cli-script.c (show_user_1): Adjust.
	* cli/cli-setshow.c (do_setshow_command, cmd_show_list): Adjust.
	* mi/mi-cmd-break.c (breakpoint_notify): Adjust.
	* mi/mi-cmd-disas.c (mi_cmd_disassemble): Adjust.
	* mi/mi-cmd-env.c (mi_cmd_env_pwd, mi_cmd_env_path)
	(mi_cmd_env_dir): Adjust.
	* mi/mi-cmd-file.c (mi_cmd_file_list_exec_source_file)
	(print_partial_file_name, mi_cmd_file_list_exec_source_files): Adjust.
	* mi/mi-cmd-stack.c (mi_cmd_stack_list_frames)
	(mi_cmd_stack_info_depth, mi_cmd_stack_list_args)
	(list_args_or_locals): Adjust.
	* mi/mi-cmd-var.c (print_varobj, mi_cmd_var_create)
	(mi_cmd_var_delete, mi_cmd_var_set_format, mi_cmd_var_set_frozen)
	(mi_cmd_var_show_format, mi_cmd_var_info_num_children)
	(mi_cmd_var_list_children, mi_cmd_var_info_type)
	(mi_cmd_var_info_path_expression, mi_cmd_var_info_expression)
	(mi_cmd_var_show_attributes, mi_cmd_var_evaluate_expression)
	(mi_cmd_var_assign, mi_cmd_var_update, varobj_update_one): Adjust.
	* mi/mi-interp.c (mi_on_normal_stop): Adjust.
	* mi/mi-main.c (mi_cmd_gdb_exit, mi_cmd_thread_select)
	(mi_cmd_thread_list_ids, mi_cmd_thread_info, print_one_inferior)
	(list_available_thread_groups, mi_cmd_list_thread_groups)
	(mi_cmd_data_list_register_names)
	(mi_cmd_data_list_changed_registers)
	(mi_cmd_data_list_register_values, get_register)
	(mi_cmd_data_evaluate_expression, mi_cmd_data_read_memory)
	(mi_cmd_data_read_memory_bytes, mi_cmd_list_features)
	(mi_cmd_list_target_features, mi_cmd_add_inferior)
	(mi_execute_command, mi_load_progress): Adjust.
	* mi/mi-symbol-cmds.c (mi_cmd_symbol_list_lines): Adjust.
	* python/py-auto-load.c (print_script, info_auto_load_scripts):
	Adjust.
	* python/py-breakpoint.c (bppy_get_commands): Adjust.
	* tui/tui-interp.c (tui_command_loop): Adjust.
	* tui/tui-io.c (tui_setup_io, tui_initialize_io): Adjust.
@
text
@d802 1
a802 1
  static struct mi_opt opts[] =
d1310 1
a1310 1
  static struct mi_opt opts[] =
d1496 1
a1496 1
  static struct mi_opt opts[] =
d1597 1
a1597 1
  static struct mi_opt opts[] =
@


1.202
log
@gdb/
	* ada-lang.c: Fix typos.
	* amd64-tdep.c: Likewise.
	* breakpoint.c: Likewise.
	* cli/cli-decode.c: Likewise.
	* findcmd.c: Likewise.
	* inline-frame.c: Likewise.
	* mi/mi-main.c: Likewise.
	* minsyms.c: Likewise.
	* monitor.c: Likewise.
	* monitor.h: Likewise.
	* prologue-value.c: Likewise.
	* reverse.c: Likewise.
	* s390-tdep.c: Likewise.

gdb/testsuite/
	* gdb.base/call-sc.c: Likewise.
	* gdb.base/ifelse.exp: Likewise.
	* gdb.base/structs.c: Likewise.

gdb/doc/
	* gdb.texinfo: Likewise.
@
text
@d120 1
a120 1
  mi_out_put (uiout, raw_stdout);
d473 1
a473 1
  rc = gdb_thread_select (uiout, argv[0], &mi_error_message);
d491 1
a491 1
  rc = gdb_list_thread_ids (uiout, &mi_error_message);
d506 1
a506 1
  print_thread_info (uiout, argv[0], -1);
d553 1
d674 1
d792 1
d895 1
d947 1
d1052 1
d1119 1
d1239 1
d1290 1
d1482 1
d1715 1
d1741 1
d1766 1
a1766 1
  ui_out_field_fmt (uiout, "inferior", "i%d", inf->num);
d1973 1
a1973 1
	  captured_mi_execute_command (uiout, command);
d1980 1
a1980 1
	  mi_out_rewind (uiout);
d2192 1
d2197 1
a2197 1
  saved_uiout = uiout;
d2201 1
a2201 1
    uiout = mi_out_new (2);
d2203 1
a2203 1
    uiout = mi_out_new (1);
d2205 1
a2205 1
    uiout = mi_out_new (3);
d2209 2
@


1.201
log
@gdb
2011-06-29  André Pönitz  <andre.poenitz@@nokia.com>

	* mi/mi-main.c (mi_cmd_list_features): Emit
	breakpoint-notifications.
gdb/doc
	* gdb.texinfo (GDB/MI Miscellaneous Commands): Document
	breakpoint-notifications feature.
@
text
@d1553 1
a1553 1
   COLUMN_OFFSET: optional argument. Must be preceeded by '-o'. The
@


1.200
log
@2011-05-26  Pedro Alves  <pedro@@codesourcery.com>

	gdb/
	* inferior.h (enum exec_direction_kind): Delete EXEC_ERROR.
	* infrun.c (show_exec_direction_func): Don't handle EXEC_ERROR.
	Internal error on invalid values.
	* reverse.c: Don't handle EXEC_ERROR.
	* mi/mi-main.c: Don't handle EXEC_ERROR.
@
text
@d1711 1
@


1.199
log
@2011-05-20  Pedro Alves  <pedro@@codesourcery.com>

	gdb/
	* infcmd.c: Include "inf-loop.h".
	(step_once): When stepping into an inline subroutine, pretend the
	target has run.  If the target can async, switch the inferior
	event loop to INF_EXEC_COMPLETE.
	* inferior.h (user_visible_resume_ptid): Declare.
	* infrun.c (user_visible_resume_ptid): New function, factored out
	from `resume'.
	(resume): Use it.
	* mi/mi-main.c (mi_execute_async_cli_command): Remove assertion
	that the current thread is running.  Merge async and sync
	branches.
@
text
@a287 3
  if (dir == EXEC_ERROR)
    error (_("Target %s does not support this command."), target_shortname);

@


1.198
log
@gdb/
	* mi/mi-main.c (mi_cmd_execute): Use cleanup from
	prepare_execute_command.
	* top.c (prepare_execute_command): Return cleanup.
	(execute_command): Use cleanup from prepare_execute_command.
	* top.h (prepare_execute_command): Change prototype to return
	cleanup.
	* defs.h (struct value): Add opaque declaration.
	(make_cleanup_value_free_to_mark): Add prototype.
	* utils.c (do_value_free_to_mark): New function.
	(make_cleanup_value_free_to_mark): Likewise.

gdb/testsuite/
	* gdb.python/py-function.exp: Test setting a value from a function
	which executes a command.
@
text
@d2165 3
a2167 12
  if (target_can_async_p ())
    {
      /* If we're not executing, an exception should have been throw.  */
      gdb_assert (is_running (inferior_ptid));
      do_cleanups (old_cleanups);
    }
  else
    {
      /* Do this before doing any printing.  It would appear that some
         print code leaves garbage around in the buffer.  */
      do_cleanups (old_cleanups);
    }
@


1.197
log
@	MI breakpoint notifications.

        * annotate.c (breakpoint_changed): Adjust parameter type.
        * breakpoint.c (set_breakpoint_condition): Adjust to change
        in breakpoint_modified type.
        (breakpoint_set_commands): Likewise.
        (do_map_commands_command): Likewise.
        (bpstat_check_breakpoint_conditions): Notify that breakpoint has
        changed after bumping hit count.
        (bpstat_stop_status): Likewise.
        (print_one_breakpoint_location): Don't wrap in tuple here.
        (print_one_breakpoint): Always print individual locations.
        For locations, use unnamed tuple.
        (disable_breakpoints_in_unloaded_shlib): Notify that breakpoint
        has changed.
        (create_catchpoint, create_syscall_event_catchpoint): Call
        breakpoint_created obsever.
        (mention): Don't call breakpoint_created observer.
        (create_breakpoint_sal): Call breakpoint_created observer.
        (create_breakpoint, watch_command_1): Likewise.
        (create_ada_exception_breakpoint): Likewise.
        (delete_breakpoint): Call breakpoint_deleted breakpoint.
        (locations_are_equal): New.
        (update_breakpoint_locations): If locations were changed, notify.
        (set_ignore_count, disable_breakpoint, do_enable_breakpoint):
        Call breakpoint_modified observer.

        * mi/mi-cmd-break.c (breakpoint_notify): Adjust.
        (mi_cmd_break_insert): Don't set observers for modify and delete.
        * mi/mi-interp.c (mi_suppress_breakpoint_notifications): New.
        (mi_breakpoint_created, mi_breakpoint_deleted)
        (mi_breakpoint_modified): New.
        (mi_interpreter_init): Hook the above.
        * mi/mi-main.c (mi_cmd_execute): Disable breakpoint notifications
        while -break-* commands are executing.
        * mi/mi-main.h (mi_suppress_breakpoint_notifications): New.
        * mi/mi-out.c (struct ui_out_data): New field original_buffer.
        (mi_redirect): New.
        (mi_ui_out_impl): Hook in mi_redirect.
        (mi_field_skip): True to the name, skip the field, don't output
        a field with an empty value.

        * python/py-breakpoint.c (gdbpy_breakpoint_created)
        (gdbpy_breakpoint_deleted): Adjust.
        * tui/tui-hooks.c (tui_event_create_breakpoint)
        (tui_event_delete_breakpoint, tui_event_modify_breakpoint): Adjust.
@
text
@d2028 1
a2028 3
  prepare_execute_command ();

  cleanup = make_cleanup (null_cleanup, NULL);
@


1.196
log
@	* cli/cli-interp.c (struct captured_execute_command_args):
	Remove.
	(do_captured_execute_command): Remove.
	(safe_execute_command): Use TRY_CATCH.
	* cli/cli-script.c (struct wrapped_read_command_file_args):
	Remove.
	(wrapped_read_command_file): Remove.
	(script_from_file): Use TRY_CATCH.
	* exceptions.c (catch_exception): Remove.
	* exceptions.h (catch_exception): Remove.
	(deprecated_throw_reason): Update comment.
	* mi/mi-main.c (captured_mi_execute_command): Change 'data'
	argument to 'context'.
	(mi_execute_command): Use TRY_CATCH.
	* remote.c (struct start_remote_args): Remove.
	(remote_start_remote): Update; change arguments.
	(remote_open_1): Use TRY_CATCH.
@
text
@d2091 6
d2098 3
a2100 1
    parse->cmd->argv_func (parse->command, parse->argv, parse->argc);
@


1.195
log
@	gdb/
	* mi/mi-main.c (register_changed_p): Handle REG_UNAVAILABLE, and
	simplify, using regcache_cooked_read.
@
text
@d1819 1
a1819 1
captured_mi_execute_command (struct ui_out *uiout, void *data)
a1821 1
  struct mi_parse *context = (struct mi_parse *) data;
d1949 1
a1949 1
      struct gdb_exception result;
d1961 4
a1964 2
      result = catch_exception (uiout, captured_mi_execute_command, command,
				RETURN_MASK_ALL);
@


1.194
log
@	ARI fixes: Add missing internationalization markups throughout
	C source files.
	* darwin-nat-info.c: Ditto.
	* record.c: Ditto.
	* remote.c: Ditto.
	* mi/mi-main.c: Ditto.
@
text
@d1019 2
d1022 3
a1024 8
  /* Registers not valid in this frame return count as unchanged.  */
  if (regcache_register_status (this_regs, regnum) == REG_UNKNOWN)
    return 0;

  /* First time through or after gdbarch change consider all registers as
     changed.  Same for registers not valid in the previous frame.  */
  if (!prev_regs || get_regcache_arch (prev_regs) != gdbarch
      || regcache_register_status (prev_regs, regnum) == REG_UNKNOWN)
d1028 2
a1029 2
  regcache_cooked_read (prev_regs, regnum, prev_buffer);
  regcache_cooked_read (this_regs, regnum, this_buffer);
d1031 7
a1037 2
  return memcmp (prev_buffer, this_buffer,
		 register_size (gdbarch, regnum)) != 0;
@


1.193
log
@2011-02-21  Michael Snyder  <msnyder@@vmware.com>

	* gdbthread.h (print_thread_info): Change prototype.
	* thread.c (print_thread_info): Accept char* instead of int for
	requested_threads argument.  Use new function number_is_in_list
	to determine which threads to list.
	(info_threads_command): Pass char* to print_thread_info.
	* cli/cli-utils.c (number_is_in_list): New function.
	* cli/cli-utils.h (number_is_in_list): Export.
	* mi/mi-main.c (mi_cmd_thread_info): Pass char* to
	print_thread_info.
	(print_one_inferior): Ditto.
	(mi_cmd_list_thread_groups): Ditto.

2011-02-21  Michael Snyder  <msnyder@@vmware.com>

	* gdb.threads/thread-find.exp: Update patterns for changes in
	output of "info threads" command.
@
text
@d492 1
a492 1
    error ("-thread-list-ids: No arguments required.");
d507 1
a507 1
    error ("Invalid MI command");
d830 2
a831 2
	    error ("only '0' and '1' are valid values "
		   "for the '--recurse' option");
d842 1
a842 1
	error ("invalid syntax of group id '%s'", argv[optind]);
d847 1
a847 1
	error ("invalid syntax of group id '%s'", argv[optind]);
d868 1
a868 1
	error ("Non-existent thread group id '%d'", id);
d930 1
a930 1
	error ("bad register number");
d982 2
a983 2
	    error ("-data-list-changed-registers: "
		   "Unable to read register contents.");
d1001 2
a1002 2
	    error ("-data-list-changed-registers: "
		   "Unable to read register contents.");
d1007 1
a1007 1
	error ("bad register number");
d1061 2
a1062 2
    error ("-data-list-register-values: Usage: "
	   "-data-list-register-values <format> [<regnum1>...<regnumN>]");
d1104 1
a1104 1
	error ("bad register number");
d1127 1
a1127 1
    error ("Optimized out");
d1186 2
a1187 2
    error ("-data-write-register-values: Usage: -data-write-register-"
	   "values <format> [<regnum1> <value1>...<regnumN> <valueN>]");
d1192 1
a1192 1
    error ("-data-write-register-values: No registers.");
d1195 1
a1195 1
    error ("-data-write-register-values: No regs and values specified.");
d1198 2
a1199 2
    error ("-data-write-register-values: "
	   "Regs and vals are not in pairs.");
d1218 1
a1218 1
	error ("bad register number");
d1239 2
a1240 2
      error ("-data-evaluate-expression: "
	     "Usage: -data-evaluate-expression expression");
d1326 2
a1327 2
    error ("-data-read-memory: Usage: "
	   "ADDR WORD-FORMAT WORD-SIZE NR-ROWS NR-COLS [ASCHAR].");
d1363 1
a1363 1
    error ("-data-read-memory: invalid number of rows.");
d1368 1
a1368 1
    error ("-data-read-memory: invalid number of columns.");
d1387 1
a1387 1
    error ("Unable to read memory.");
d1510 1
a1510 1
    error ("Usage: [ -o OFFSET ] ADDR LENGTH.");
d1520 1
a1520 1
    error ("Unable to read memory.");
d1612 2
a1613 2
    error ("-data-write-memory: Usage: "
	   "[-o COLUMN_OFFSET] ADDR FORMAT WORD-SIZE VALUE.");
d1653 1
a1653 1
    error ("Usage: ADDR DATA.");
d1697 1
a1697 1
  error ("-enable-timings: Usage: %s {yes|no}", command);
d1721 1
a1721 1
  error ("-list-features should be passed no arguments");
d1741 1
a1741 1
  error ("-list-target-features should be passed no arguments");
d1776 1
a1776 1
    error ("-remove-inferior should be passed a single argument");
d1779 1
a1779 1
    error ("the thread group id is syntactically invalid");
d1783 1
a1783 1
    error ("the specified thread group does not exist");
@


1.192
log
@	* mi/mi-main.c (get_register): Use get_frame_register_value rather
	than frame_register, and always pass a valid value to val_print.
@
text
@a505 2
  int thread = -1;
  
d509 1
a509 4
  if (argc == 1)
    thread = atoi (argv[0]);

  print_thread_info (uiout, thread, -1);
d605 1
a605 1
	print_thread_info (uiout, -1, inferior->pid);
d870 1
a870 1
      print_thread_info (uiout, -1, inf->pid);
@


1.191
log
@	* regcache.c (struct regcache_descr): Rename
	sizeof_raw_register_valid_p field to sizeof_raw_register_status,
	and sizeof_cooked_register_valid_p to
	sizeof_cooked_register_status.
	(init_regcache_descr): Adjust.
	(struct regcache): Rename register_valid_p field to
	register_status.
	(regcache_xmalloc_1, regcache_xfree, regcache_save)
	(do_cooked_read): Adjust.
	(regcache_valid_p): Rename to ...
	(regcache_register_status): ... this.  Adjust.
	(regcache_invalidate): Adjust.
	(regcache_raw_read, regcache_cooked_read, regcache_raw_write):
	Adjust.
	(regcache_raw_supply): Adjust.  If buf i NULL, mark the register
	as unavailable, not valid.
	(regcache_dump): Adjust.
	* regcache.h (enum register_status): New.
	(regcache_register_status): Declare.
	(regcache_invalidate): Delete declaration.
	* corelow.c (get_core_registers): Adjust.
	* tracepoint.c (tfile_fetch_registers): Adjust.
	* trad-frame.c (REG_VALUE): Rename to ...
	(TF_REG_VALUE): ... this.
	(REG_UNKNOWN): Rename to ...
	(TF_REG_UNKNOWN): ... this.
	(trad_frame_set_value, trad_frame_set_unknown): Adjust.
	* mi/mi-main.c (register_changed_p): Adjust.
@
text
@a1118 3
  gdb_byte buffer[MAX_REGISTER_SIZE];
  int optim;
  int realnum;
d1122 1
d1129 1
a1129 1
  frame_register (frame, regnum, &optim, &lval, &addr, &realnum, buffer);
d1131 1
a1131 1
  if (optim)
d1138 1
d1147 1
a1147 1
	  sprintf (ptr, "%02x", (unsigned char) buffer[idx]);
d1159 4
a1162 2
      val_print (register_type (gdbarch, regnum), buffer, 0, 0,
		 stb->stream, 0, NULL, &opts, current_language);
@


1.190
log
@gdb
	* mi/mi-symbol-cmds.c (mi_cmd_symbol_list_lines): Fix error
	messages.
	* mi/mi-main.c (mi_cmd_thread_select): Fix error messages.
	(mi_cmd_thread_list_ids): Likewise.
	(mi_cmd_data_list_changed_registers): Likewise.
	(mi_cmd_data_list_register_values): Likewise.
	(mi_cmd_data_write_register_values): Likewise.
	(mi_cmd_data_evaluate_expression): Likewise.
	(mi_cmd_data_read_memory): Likewise.
	(mi_cmd_data_read_memory_bytes): Likewise.
	(mi_cmd_data_write_memory): Likewise.
	(mi_cmd_enable_timings): Likewise.
	* mi/mi-interp.c (mi_cmd_interpreter_exec): Fix error messages.
	* mi/mi-cmd-var.c (mi_cmd_var_create): Fix error messages.
	(mi_cmd_var_delete): Likewise.
	(mi_cmd_var_set_format): Likewise.
	(mi_cmd_var_show_format): Likewise.
	(mi_cmd_var_info_num_children): Likewise.
	(mi_cmd_var_list_children): Likewise.
	(mi_cmd_var_info_type): Likewise.
	(mi_cmd_var_info_expression): Likewise.
	(mi_cmd_var_show_attributes): Likewise.
	(mi_cmd_var_assign): Likewise.
	(mi_cmd_var_update): Likewise.
	(mi_cmd_enable_pretty_printing): Likewise.
	(mi_cmd_var_set_update_range): Likewise.
	* mi/mi-cmd-target.c (mi_cmd_target_file_get): Fix error
	messages.
	(mi_cmd_target_file_put): Likewise.
	(mi_cmd_target_file_delete): Likewise.
	* mi/mi-cmd-stack.c (mi_cmd_stack_list_frames): Fix error
	messages.
	(mi_cmd_stack_info_depth): Likewise.
	(mi_cmd_stack_list_locals): Likewise.
	(mi_cmd_stack_list_args): Likewise.
	(mi_cmd_stack_select_frame): Likewise.
	(mi_cmd_stack_select_frame): Likewise.
	(mi_cmd_stack_info_frame): Likewise.
	* mi/mi-cmd-file.c (mi_cmd_file_list_exec_source_file): Fix error
	messages.
	(mi_cmd_file_list_exec_source_files): Likewise.
	* mi/mi-cmd-env.c (mi_cmd_env_pwd): Fix error messages.
	(mi_cmd_env_cd): Likewise.
	(mi_cmd_env_path): Likewise.
	(mi_cmd_env_dir): Likewise.
	(mi_cmd_inferior_tty_show): Likewise.
	* mi/mi-cmd-disas.c (mi_cmd_disassemble): Fix error messages.
	* mi/mi-cmd-break.c (mi_cmd_break_insert): Fix error messages.
	(mi_cmd_break_watch): Likewise.
gdb/testsuite
	* gdb.mi/gdb2549.exp: Update for error message changes.
	* gdb.mi/mi-cli.exp: Likewise.
	* gdb.mi/mi-disassemble.exp: Likewise.
	* gdb.mi/mi-pthreads.exp: Likewise.
	* gdb.mi/mi-regs.exp: Likewise.
	* gdb.mi/mi-stack.exp: Likewise.
	* gdb.mi/mi-var-block.exp: Likewise.
	* gdb.mi/mi-var-cmd.exp: Likewise.
	* gdb.mi/mi2-cli.exp: Likewise.
	* gdb.mi/mi2-disassemble.exp: Likewise.
	* gdb.mi/mi2-pthreads.exp: Likewise.
	* gdb.mi/mi2-regs.exp: Likewise.
	* gdb.mi/mi2-stack.exp: Likewise.
	* gdb.mi/mi2-var-block.exp: Likewise.
	* gdb.mi/mi2-var-cmd.exp: Likewise.
@
text
@d1026 1
a1026 1
  if (!regcache_valid_p (this_regs, regnum))
d1032 1
a1032 1
      || !regcache_valid_p (prev_regs, regnum))
@


1.189
log
@2011-01-11  Michael Snyder  <msnyder@@vmware.com>

	* arm-tdep.c: Internationalization.
	* c-lang.c: Ditto.
	* charset.c: Ditto.
	* fork-child.c: Ditto.
	* nto-procfs.c: Ditto.
	* ppc-sysv-tdep.c: Ditto.
	* procfs.c: Ditto.
	* remote-mips.c: Ditto.
	* remote.c: Ditto.
	* rs6000-nat.c: Ditto.
	* rs6000-tdep.c: Ditto.
	* target.c: Ditto.
	* valops.c: Ditto.
	* value.c: Ditto.
	* xml-support.c: Ditto.
	* mi/mi-cmd-break.c: Ditto.
	* mi/mi-cmd-var.c: Ditto.
	* mi/mi-interp.c: Ditto.
	* mi/mi-main.c: Ditto.
@
text
@d474 1
a474 1
    error (_("mi_cmd_thread_select: USAGE: threadnum."));
d492 1
a492 1
    error ("mi_cmd_thread_list_ids: No arguments required.");
d987 1
a987 1
	    error ("mi_cmd_data_list_changed_registers: "
d1006 1
a1006 1
	    error ("mi_cmd_data_list_register_change: "
d1066 1
a1066 1
    error ("mi_cmd_data_list_register_values: Usage: "
d1190 1
a1190 1
    error ("mi_cmd_data_write_register_values: Usage: -data-write-register-"
d1196 1
a1196 1
    error ("mi_cmd_data_write_register_values: No registers.");
d1199 1
a1199 1
    error ("mi_cmd_data_write_register_values: No regs and values specified.");
d1202 1
a1202 1
    error ("mi_cmd_data_write_register_values: "
d1243 1
a1243 1
      error ("mi_cmd_data_evaluate_expression: "
d1314 1
a1314 1
      int opt = mi_getopt ("mi_cmd_data_read_memory", argc, argv, opts,
d1330 1
a1330 1
    error ("mi_cmd_data_read_memory: Usage: "
d1367 1
a1367 1
    error ("mi_cmd_data_read_memory: invalid number of rows.");
d1372 1
a1372 1
    error ("mi_cmd_data_read_memory: invalid number of columns.");
d1499 1
a1499 1
      int opt = mi_getopt ("mi_cmd_data_read_memory_bytes", argc, argv, opts,
d1600 1
a1600 1
      int opt = mi_getopt ("mi_cmd_data_write_memory", argc, argv, opts,
d1616 1
a1616 1
    error ("mi_cmd_data_write_memory: Usage: "
d1701 1
a1701 1
  error ("mi_cmd_enable_timings: Usage: %s {yes|no}", command);
@


1.188
log
@2011-01-05  Michael Snyder  <msnyder@@vmware.com>

	* cli/cli-cmds.c: Shorten lines of >= 80 columns.
	* cli/cli-decode.c: Ditto.
	* cli/cli-dump.c: Ditto.
	* cli/cli-logging.c: Ditto.
	* cli/cli-script.c: Ditto.
	* cli/cli-setshow.c: Ditto.
	* common/signals.c: Ditto.
	* mi/mi-cmd-break.c: Ditto.
	* mi/mi-cmd-disas.c: Ditto.
	* mi/mi-cmd-stack.c: Ditto.
	* mi/mi-cmd-var.c: Ditto.
	* mi/mi-cmds.c: Ditto.
	* mi/mi-common.h: Ditto.
	* mi/mi-console.c: Ditto.
	* mi/mi-interp.c: Ditto.
	* mi/mi-main.c: Ditto.
	* osf-share/cma_attr.c: Ditto.
	* osf-share/cma_deb_core.h: Ditto.
	* osf-share/cma_debug_client.h: Ditto.
	* osf-share/cma_handle.h: Ditto.
	* osf-share/cma_mutex.h: Ditto.
	* osf-share/cma_stack_int.h: Ditto.
	* osf-share/cma_tcb_defs.h: Ditto.
	* python/py-auto-load.c: Ditto.
	* python/py-breakpoint.c: Ditto.
	* python/py-cmd.c: Ditto.
	* python/py-frame.c: Ditto.
	* python/py-objfile.c: Ditto.
	* python/py-param.c: Ditto.
	* python/py-progspace.c: Ditto.
	* python/py-symbol.c: Ditto.
	* python/py-value.c: Ditto.
	* python/python-internal.h: Ditto.
	* python/python.c: Ditto.
	* tui/tui-data.c: Ditto.
	* tui/tui-disasm.c: Ditto.
	* tui/tui-hooks.c: Ditto.
	* tui/tui-io.c: Ditto.
	* tui/tui-layout.c: Ditto.
	* tui/tui-regs.c: Ditto.
	* tui/tui-source.c: Ditto.
	* tui/tui-stack.c: Ditto.
	* tui/tui-win.c: Ditto.
	* tui/tui-windata.c: Ditto.
	* tui/tui-winsource.c: Ditto.
@
text
@d423 1
a423 1
    error ("Usage: -target-detach [pid | thread-group]");
d474 1
a474 1
    error ("mi_cmd_thread_select: USAGE: threadnum.");
@


1.187
log
@run copyright.sh for 2011.
@
text
@d99 1
a99 1
							char **argv, int argc);
d243 3
a245 1
	      struct inferior *inf = find_inferior_id (current_context->thread_group);
d835 2
a836 1
	    error ("only '0' and '1' are valid values for the '--recurse' option");
d987 2
a988 1
	    error ("mi_cmd_data_list_changed_registers: Unable to read register contents.");
d1006 2
a1007 1
	    error ("mi_cmd_data_list_register_change: Unable to read register contents.");
d1066 2
a1067 1
    error ("mi_cmd_data_list_register_values: Usage: -data-list-register-values <format> [<regnum1>...<regnumN>]");
d1169 2
a1170 1
   -data-write-register-values <format> [<regnum1> <value1>...<regnumN> <valueN>]*/
d1190 2
a1191 1
    error ("mi_cmd_data_write_register_values: Usage: -data-write-register-values <format> [<regnum1> <value1>...<regnumN> <valueN>]");
d1202 2
a1203 1
    error ("mi_cmd_data_write_register_values: Regs and vals are not in pairs.");
d1243 2
a1244 1
      error ("mi_cmd_data_evaluate_expression: Usage: -data-evaluate-expression expression");
d1330 2
a1331 1
    error ("mi_cmd_data_read_memory: Usage: ADDR WORD-FORMAT WORD-SIZE NR-ROWS NR-COLS [ASCHAR].");
d1424 2
a1425 1
	/* ui_out_field_core_addr_symbolic (uiout, "saddr", addr + row_byte); */
d1450 2
a1451 1
	    for (byte = row_byte; byte < row_byte + word_size * nr_cols; byte++)
d1616 2
a1617 1
    error ("mi_cmd_data_write_memory: Usage: [-o COLUMN_OFFSET] ADDR FORMAT WORD-SIZE VALUE.");
@


1.186
log
@Add missing _() marker in error message.

gdb/ChangeLog:

	* mi/mi-main.c (mi_cmd_remove_inferior): Use _() marker for error
	message.  Change spelling of "can not" into "cannot".
@
text
@d3 2
a4 2
   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008, 2009, 2010
   Free Software Foundation, Inc.
@


1.185
log
@	* inferior.c (remove_inferior_command): Don't remove an active inferior.
	* mi/mi-main.c (mi_cmd_remove_inferior): Ditto.
@
text
@d1776 1
a1776 1
    error ("can not remove an active inferior");
@


1.184
log
@	* mi/mi-main.c (mi_cmd_remove_inferior): Don't delete current inferior.
	(get_other_inferior): New.
@
text
@d1775 3
@


1.183
log
@gdb
	* mi/mi-parse.h (mi_parse): Update.
	* mi/mi-parse.c (mi_parse_cleanup): New function.
	(mi_parse): Add 'token' argument.  Throw exception on error.
	* mi/mi-main.c (mi_print_exception): New function.
	(mi_execute_command): Use mi_print_exception.  Catch exceptions
	from mi_parse.
gdb/testsuite
	* gdb.base/interp.exp: Add regression test.
@
text
@d1747 12
d1775 16
@


1.182
log
@2010-11-12  Marc Khouzam  <marc.khouzam@@ericsson.com>

        * mi/mi-main.c (mi_cmd_target_detach): Accept new
        thread-group id format.
@
text
@d1868 13
d1885 3
a1887 1
  struct mi_parse *command;
d1896 10
a1905 3
  command = mi_parse (cmd);

  if (command != NULL)
d1910 2
d1925 1
a1925 7
	  fputs_unfiltered (command->token, raw_stdout);
	  fputs_unfiltered ("^error,msg=\"", raw_stdout);
	  if (result.message == NULL)
	    fputs_unfiltered ("unknown error", raw_stdout);
	  else
	    fputstr_unfiltered (result.message, '"', raw_stdout);
	  fputs_unfiltered ("\"\n", raw_stdout);
@


1.181
log
@       * mi/mi-main.c (mi_cmd_list_target_features): Add `reverse'
       as a feature reported by -list-target-features.

       * gdb.texinfo (GDB/MI Miscellaneous Commands): Document new
       feature `reverse' output by -list-target-features.
@
text
@d421 1
a421 1
    error ("Usage: -target-detach [thread-group]");
d427 1
a427 1
      int pid = strtol (argv[0], &end, 10);
d429 23
a451 2
      if (*end != '\0')
	error (_("Cannot parse thread group id '%s'"), argv[0]);
d454 1
a454 1
	 target_detach deteches from the parent of inferior_ptid.  */
@


1.180
log
@	Easier and more stubborn MI memory read commands.

	* mi/mi-cmds.c (mi_cmds): Register data-read-memory-bytes
	and data-write-memory-bytes.
	* mi/mi-cmds.h (mi_cmd_data_read_memory_bytes)
	(mi_cmd_data_write_memory_bytes): New.
	* mi/mi-main.c (mi_cmd_data_read_memory): Use regular target_read.
	(mi_cmd_data_read_memory_bytes, mi_cmd_data_write_memory_bytes):
	New.
	(mi_cmd_list_features): Add "data-read-memory-bytes" feature.
	* target.c (target_read_until_error): Remove.
	(read_whatever_is_readable, free_memory_read_result_vector)
	(read_memory_robust): New.
	* target.h (target_read_until_error): Remove.
	(struct memory_read_result, free_memory_read_result_vector)
	(read_memory_robust): New.
@
text
@d1703 2
@


1.179
log
@* mi/mi-main.c (mi_cmd_remove_inferior): Properly access first argument.
@
text
@d1355 3
a1357 3
  nr_bytes = target_read_until_error (current_target.beneath,
				      TARGET_OBJECT_MEMORY, NULL, mbuf,
				      addr, total_bytes);
d1440 82
d1608 38
d1680 1
@


1.178
log
@gdb
	PR gdb/9977, PR exp/11636:
	* value.h (value_offset): Update.
	(struct lval_funcs) <check_validity>: New field.
	<copy_closure>: Make argument const.
	(value_computed_closure): Update.
	(value_contents_for_printing): Declare.
	(value_bits_valid): Likewise.
	(val_print): Likewise.
	(set_value_component_location): Update.
	(value_entirely_optimized_out): Declare.
	* value.c (value_offset): Argument now const.
	(require_not_optimized_out): New function.
	(value_contents_for_printing): New function.
	(value_contents_all): Call require_not_optimized_out.
	(value_contents): Likewise.
	(value_bits_valid): New function.
	(value_computed_closure): Argument now const.
	(set_value_component_location): Make 'whole' argument const.
	(value_entirely_optimized_out): New function.
	(value_bitsize): Argument now 'const'.
	(value_bitpos): Likewise.
	(value_type): Likewise.
	* valprint.h (val_print_array_elements): Update.
	* valprint.c (val_print): Add 'val' argument.  Use
	valprint_check_validity.
	(valprint_check_validity): New function.
	(value_check_printable): Use value_entirely_optimized_out.
	(common_val_print): Update.
	(value_print): Likewise.
	(val_print_array_elements): Add 'val' argument.
	* valops.c (value_fetch_lazy): Use value_contents_for_printing,
	value_bits_valid.  Reinit frame cache for lval_computed.
	* sh64-tdep.c (sh64_do_register): Update.
	* scm-valprint.c (scm_val_print): Add 'val' argument.
	* scm-lang.h (scm_val_print): Update.
	* python/python.h (apply_val_pretty_printer): Update.
	* python/py-prettyprint.c (apply_val_pretty_printer): Add 'val'
	argument.  Call set_value_component_location.
	* printcmd.c (print_scalar_formatted): Update.
	* p-valprint.c (pascal_val_print): Add 'val' argument.
	(pascal_object_print_value_fields): Likewise.
	(pascal_object_print_value): Likewise.
	(pascal_object_print_static_field): Update.
	* p-lang.h (pascal_val_print): Update.
	(pascal_object_print_value_fields): Update.
	* mt-tdep.c (mt_registers_info): Update.
	* mi/mi-main.c (get_register): Update.
	(mi_cmd_data_evaluate_expression): Use common_val_print.
	* m2-valprint.c (m2_print_array_contents): Add 'val' argument.
	(m2_print_unbounded_array): Likewise.
	(m2_val_print): Likewise.
	* m2-lang.h (m2_val_print): Update.
	* language.h (struct language_defn) <la_val_print>: Add 'val'
	argument.
	(LA_VAL_PRINT): Likewise.
	* language.c (unk_lang_val_print): Add 'val' argument.
	* jv-valprint.c (java_print_value_fields): Add 'val' argument.
	(java_val_print): Likewise.
	* jv-lang.h (java_val_print): Add 'val' argument.
	* infcmd.c (default_print_registers_info): Update.
	* f-valprint.c (f77_print_array_1): Add 'val' argument.
	(f77_print_array): Likewise.
	(f_val_print): Likewise.
	* f-lang.h (f_val_print): Add 'val' argument.
	* dwarf2loc.c (read_pieced_value): Use value_bitsize and
	value_bitpos.
	<DWARF_VALUE_OPTIMIZED_OUT>: Don't print warning.  Call
	set_value_optimized_out.
	(write_pieced_value): Use value_bitsize and value_bitpos.
	<default>: Don't exit loop.
	(check_pieced_value_validity): New function.
	(pieced_value_funcs): Reference check_pieced_value_validity,
	check_pieced_value_invalid.
	(copy_pieced_value_closure): Update.
	(check_pieced_value_bits): New function.
	(check_pieced_value_invalid): New function.
	* d-valprint.c (dynamic_array_type): Add 'val' argument.
	(d_val_print): Likewise.
	* d-lang.h (d_val_print): Update.
	* cp-valprint.c (cp_print_value_fields): Add 'val' argument.
	(cp_print_value_fields_rtti): Likewise.
	(cp_print_value): Likewise.
	(cp_print_static_field): Update.
	* c-valprint.c (c_val_print): Add 'val' argument.
	(c_value_print): Update.
	* c-lang.h (c_val_print): Update.
	(cp_print_value_fields): Likewise.
	(cp_print_value_fields_rtti): Likewise.
	* ada-valprint.c (struct ada_val_print_args): Remove.
	(val_print_packed_array_elements): Add 'val' argument.
	(ada_val_print): Likewise.  Rewrite.
	(ada_val_print_stub): Remove.
	(ada_val_print_array): Add 'val' argument.
	(ada_val_print_1): Likewise.
	(print_variant_part): Likewise.
	(ada_value_print): Update.
	(print_record): Add 'val' argument.
	(print_field_values): Likewise.
	* ada-lang.h (ada_val_print): Update.
gdb/testsuite
	PR gdb/9977, PR exp/11636::
	* gdb.dwarf2/pieces.exp (pieces_test_f3): Remove kfail.
	(pieces_test_f6): Update expected output.
@
text
@d1612 1
a1612 1
  if (sscanf (argv[1], "i%d", &id) != 1)
@


1.178.2.1
log
@* mi/mi-main.c (mi_cmd_remove_inferior): Properly access first argument.
@
text
@d1612 1
a1612 1
  if (sscanf (argv[0], "i%d", &id) != 1)
@


1.178.2.2
log
@       * mi/mi-main.c (mi_cmd_list_target_features): Add `reverse'
       as a feature reported by -list-target-features.

       * gdb.texinfo (GDB/MI Miscellaneous Commands): Document new
       feature `reverse' output by -list-target-features.
@
text
@a1581 2
      if (target_can_execute_reverse)
	ui_out_field_string (uiout, NULL, "reverse");
@


1.178.2.3
log
@2010-11-12  Marc Khouzam  <marc.khouzam@@ericsson.com>

        * mi/mi-main.c (mi_cmd_target_detach): Accept new
        thread-group id format.
@
text
@d421 1
a421 1
    error ("Usage: -target-detach [pid | thread-group]");
d427 1
a427 1
      int pid;
d429 2
a430 23
      /* First see if we are dealing with a thread-group id.  */
      if (*argv[0] == 'i')
	{
	  struct inferior *inf;
	  int id = strtoul (argv[0] + 1, &end, 0);

	  if (*end != '\0')
	    error (_("Invalid syntax of thread-group id '%s'"), argv[0]);

	  inf = find_inferior_id (id);
	  if (!inf)
	    error (_("Non-existent thread-group id '%d'"), id);

	  pid = inf->pid;
	}
      else
	{
	  /* We must be dealing with a pid.  */
	  pid = strtol (argv[0], &end, 10);

	  if (*end != '\0')
	    error (_("Invalid identifier '%s'"), argv[0]);
	}
d433 1
a433 1
	 target_detach detaches from the parent of inferior_ptid.  */
@


1.178.2.4
log
@gdb
	* mi/mi-parse.h (mi_parse): Update.
	* mi/mi-parse.c (mi_parse_cleanup): New function.
	(mi_parse): Add 'token' argument.  Throw exception on error.
	* mi/mi-main.c (mi_print_exception): New function.
	(mi_execute_command): Use mi_print_exception.  Catch exceptions
	from mi_parse.
gdb/testsuite
	* gdb.base/interp.exp: Add regression test.
@
text
@a1746 13
/* Print a gdb exception to the MI output stream.  */

static void
mi_print_exception (const char *token, struct gdb_exception exception)
{
  fputs_unfiltered (token, raw_stdout);
  fputs_unfiltered ("^error,msg=\"", raw_stdout);
  if (exception.message == NULL)
    fputs_unfiltered ("unknown error", raw_stdout);
  else
    fputstr_unfiltered (exception.message, '"', raw_stdout);
  fputs_unfiltered ("\"\n", raw_stdout);
}
d1751 1
a1751 3
  char *token;
  struct mi_parse *command = NULL;
  volatile struct gdb_exception exception;
d1760 3
a1762 10
  TRY_CATCH (exception, RETURN_MASK_ALL)
    {
      command = mi_parse (cmd, &token);
    }
  if (exception.reason < 0)
    {
      mi_print_exception (token, exception);
      xfree (token);
    }
  else
a1766 2
      command->token = token;

d1780 7
a1786 1
	  mi_print_exception (command->token, result);
@


1.178.2.5
log
@	* mi/mi-main.c (mi_cmd_remove_inferior): Don't delete current inferior.
	(get_other_inferior): New.
@
text
@a1625 12
/* Callback used to find the first inferior other than the
   current one. */
   
static int
get_other_inferior (struct inferior *inf, void *arg)
{
  if (inf == current_inferior ())
    return 0;

  return 1;
}

a1641 16
  if (inf == current_inferior ())
    {
      struct thread_info *tp = 0;
      struct inferior *new_inferior 
	= iterate_over_inferiors (get_other_inferior, NULL);

      if (new_inferior == NULL)
	error (_("Cannot remove last inferior"));

      set_current_inferior (new_inferior);
      if (new_inferior->pid != 0)
	tp = any_thread_of_process (new_inferior->pid);
      switch_to_thread (tp ? tp->ptid : null_ptid);
      set_current_program_space (new_inferior->pspace);
    }

@


1.178.2.6
log
@	* inferior.c (remove_inferior_command): Don't remove an active inferior.
	* mi/mi-main.c (mi_cmd_remove_inferior): Ditto.
@
text
@a1653 3
  if (inf->pid != 0)
    error ("can not remove an active inferior");

@


1.178.2.7
log
@Add missing _() marker in error message.

gdb/ChangeLog:

	* mi/mi-main.c (mi_cmd_remove_inferior): Use _() marker for error
	message.  Change spelling of "can not" into "cannot".
@
text
@d1655 1
a1655 1
    error (_("cannot remove an active inferior"));
@


1.177
log
@	* mi/mi-main.c (mi_cmd_list_thread_groups): Adjust
	for current naming of thread groups (iN, not N).
@
text
@d1134 1
a1134 1
		 stb->stream, 0, &opts, current_language);
d1225 1
a1225 3
  val_print (value_type (val), value_contents (val),
	     value_embedded_offset (val), value_address (val),
	     stb->stream, 0, &opts, current_language);
@


1.176
log
@2010-05-17  Michael Snyder  <msnyder@@vmware.com>

	* mi/mi-cmd-break.c: White space.
	* mi/mi-cmd-env.c: White space.
	* mi/mi-cmds.c: White space.
	* mi/mi-cmd-stack.c: White space.
	* mi/mi-cmd-var.c: White space.
	* mi/mi-console.c: White space.
	* mi/mi-getopt.c: White space.
	* mi/mi-interp.c: White space.
	* mi/mi-main.c: White space.
	* mi/mi-out.c: White space.
	* mi/mi-parse.c: White space.
@
text
@d820 6
a825 1
      int inf = strtoul (argv[optind], &end, 0);
d828 1
a828 1
	error ("invalid group id '%s'", argv[optind]);
d845 2
a846 1
      int pid = *VEC_address (int, ids);
d848 4
a851 3
      if (!in_inferior_list (pid))
	error ("Invalid thread group id '%d'", pid);
      print_thread_info (uiout, -1, pid);
@


1.175
log
@2010-05-05  Michael Snyder  <msnyder@@vmware.com>

	* mi/mi-out.c (mi_table_begin): Delete unused variable.
	* mi/mi-cmd-var.c (print_varobj): Delete unused variable.
	(mi_cmd_var_list_children): Delete unused variable.
	(varobj_update_one): Delete unused variable.
	* mi/mi-cmd-break.c (mi_cmd_break_insert): Delete unused variables.
	* mi/mi-cmd-stack.c (mi_cmd_stack_list_locals):
	Delete unused variable.
	(mi_cmd_stack_list_variables): Delete unused variable.
	(list_args_or_locals): Delete unused variable.
	* mi/mi-cmd-file.c (mi_cmd_file_list_exec_source_file):
	Delete unused variables.
	(mi_cmd_file_list_exec_source_files): Delete unused variable.
	* mi/mi-cmd-target.c (mi_cmd_target_file_delete):
	Delete unused variable.
	* mi/mi-interp.c (mi_interpreter_exec): Delete unused variable.
	(mi_cmd_interpreter_exec): Delete unused variable.
	(mi_on_normal_stop): Delete unused variable.
	* mi/mi-main.c (run_one_inferior): Delete unused variable.
	(print_one_inferior): Delete unused variables.
	(mi_execute_command): Delete unused variable.
	(mi_cmd_execute): Delete unused variable.
	(timestamp): Delete unused variable.
@
text
@d221 1
d257 1
d349 1
d394 1
d410 1
d428 1
d509 1
d521 1
d618 1
d631 1
d641 1
d658 1
d672 1
a673 1

a755 1

d758 1
d798 1
d821 1
d841 1
d849 1
d1113 1
d1123 1
d1280 1
d1373 1
d1410 1
d1481 1
d1550 1
a1551 1

d1573 1
a1574 1

d1680 1
d1787 1
d1794 1
d1855 1
d1869 1
d1918 1
d2008 1
d2029 1
d2077 1
d2127 1
@


1.174
log
@	Implement -trace-save.

	* mi-cmds.h (mi_cmds_trace_save): Declare.
	* mi-cmds.c (mi_cmds): Register -trace-save.
	* mi/mi-main.c (mi_cmd_trace_save): New.
	* remote.c (remote_save_trace_data): Take const parameter.
	* target.h (struct target_ops::to_save_trace_data): Take
	const parameter.
	* target.c (update_current_target): Adjust to the above.
	* tracepoint.c (trave_save): New, extracted from
	(trace_save_command): ...this.
	(tfile_trace_find): Remove message that is unnecessary now
	that 'tfind' reports found frame.
	* tracepoint.h (trace_save): Declare.
@
text
@a360 2
  struct thread_info *tp = 0;

a559 2
	  int elt;
	  int i;
a1700 1
  struct ui_out *saved_uiout = uiout;
a1790 1
  int i;
a2023 1
    long usec;
d2032 8
a2039 5
    usec = get_run_time ();
    tv->utime.tv_sec = usec/1000000L;
    tv->utime.tv_usec = usec - 1000000L*tv->utime.tv_sec;
    tv->stime.tv_sec = 0;
    tv->stime.tv_usec = 0;
@


1.173
log
@	Implement -trace-find.

	* mi/mi-cmds.c (mi_cmds): Register -trace-find.
	* mi/mi-cmds.h (mi_cmd_trace_find): Declare.
	* mi/mi-main.c (mi_cmd_trace_find): New.
	* target.h (struct target_ops): Document to_trace_find.
	* tracepoint.h (tfind_1): Declare.
	* tracepoint.c (finish_tfind_command): Rename to...
	(tfind_1): ...this.
	* remote.c (remote_trace_find): Return -1 if target say
	there's no frame.  Improve error diagnostics.
@
text
@d2214 26
@


1.172
log
@        -trace-define-variable and -trace-list-variables.

    	* tracepoint.c (create_trace_state_variable): Make
    	private copy of name, as opposed to assuming the
    	pointer lives forever.
    	(tvariables_info_1): New.
    	(tvariables_info): Use the above.
    	* tracepoint.h (create_trace_state_variable, tvariables_info_1):
    	Declare.
    	* mi/mi-cmds.c (mi_cmds): Register -trace-define-variable
    	and -trace-list-variables.
    	* mi/mi-cmds.h (mi_cmd_trace_define_variable)
    	(mi_cmd_trace_list_variables): New.
    	* mi/mi-main.c (mi_cmd_trace_define_variable)
    	(mi_cmd_trace_list_variables): New.
@
text
@d2129 85
@


1.171
log
@	-trace-start/-trace-end/-trace-status.

	* mi/mi-cmds.c (mi_cmds): Register -trace-start, -trace-status
	and -trace-stop.
	* mi/mi-cmds.h (mi_cmd_trace_start, mi_cmd_trace_status)
	(mi_cmd_trace_stop): Declare.
	* mi/mi-main.c (mi_cmd_trace_start, mi_cmd_trace_status)
	(mi_cmd_trace_stop): New.
	* tracepoint.c (start_tracing): New, extracted from...
	(trace_start_command): ...this.
	(trace_status_mi): New.
	* tracepoint.h (struct trace_status): Document
	stopping_tracepoint.
	(start_tracing, stop_tracing, trace_status_mi): Declare.
@
text
@d2083 46
@


1.170
log
@ChangeLog:

	* mi/mi-main.c (mi_cmd_list_thread_groups): Use get_current_arch
	instead of selected frame architecture.

testsuite/ChangeLog:

	* gdb.mi/gdb680.exp: Revert 2009-06-17 change.
@
text
@d54 1
d2081 19
@


1.169
log
@	* mi/mi-main.c (mi_cmd_execute): Fix typo.
@
text
@a854 1
  struct frame_info *frame;
d866 1
a866 2
  frame = get_selected_frame (NULL);
  gdbarch = get_frame_arch (frame);
@


1.168
log
@	Multiexec MI

	* breakpoint.c (clear_syscall_counts): Take struct inferior*.
	* inferior.c (add_inferior_silent): Notify inferior_added
	observer.
	(delete_inferior_1): Notify inferior_removed observer.
	(exit_inferior_1): Pass inferior, not pid, to observer.
	(inferior_appeared): Likewise.
	(add_inferior_with_spaces): New.
	(add_inferior_command): Use the above.
	* inferior.h (delete_inferior_1, add_inferior_with_spaces):
	Declare.

	* inflow.c (inflow_inferior_exit): Likewise.
	* jit.c (jit_inferior_exit_hook): Likewise.

	* mi/mi-cmds.c (mi_cmds): Register add-inferior and
	remove-inferior.
	* mi/mi-cmds.h (mi_cmd_add_inferior, mi_cmd_remove_inferior): New.
	* mi/mi-interp.c (mi_inferior_added, mi_inferior_removed): New.
	(report_initial_inferior): New.
	(mi_inferior_removed): Register the above. Make sure
	inferior_added observer is called on the first inferior.
	(mi_new_thread, mi_thread_exit): Thread group is now identified by
	inferior number, not pid.
	(mi_solib_loaded, mi_solib_unloaded): Report which inferiors are
	affected.
	* mi/mi-main.c (current_context): New.
	(proceed_thread_callback): Use typed closure.
	Proceed everything if pid is 0. Most implementation split into
	(proceed_thread): ... this.
	(run_one_inferior): New.
	(mi_cmd_exec_continue, mi_cmd_exec_interrupt, mi_cmd_exec_run):
	Adjust for multiexec behaviour.
	(mi_cmd_add_inferior, mi_cmd_remove_inferior): New.
	(mi_cmd_execute): Handle the 'thread-group' option here.
	Do some extra checks.
	* mi-parse.c (mi_parse): Handle the --all and --thread-group
	options.
	* mi-parse.h (struct mi_parse): New fields all and thread_group.
@
text
@d1821 1
a1821 1
	error (_("Invalid thread group for the --tread-group option"));
@


1.167
log
@	Make -exec-run a proper MI commands.

	* mi/mi-cmds.h (mi_cmd_exec_run): Declare.
	* mi/mi-cmds.c (mi_cmds): Adjust.
	* mi/mi-main.c (mi_cmd_exec_run): New.
@
text
@d81 5
d201 2
a202 2
static int
proceed_thread_callback (struct thread_info *thread, void *arg)
a203 2
  int pid = *(int *)arg;

d205 1
a205 1
    return 0;
d207 2
a208 2
  if (PIDGET (thread->ptid) != pid)
    return 0;
d213 8
d227 11
a237 13
  if (argc == 0)
    continue_1 (0);
  else if (argc == 1 && strcmp (argv[0], "--all") == 0)
    continue_1 (1);
  else if (argc == 2 && strcmp (argv[0], "--thread-group") == 0)
    {
      struct cleanup *old_chain;
      int pid;
      if (argv[1] == NULL || argv[1] == '\0')
	error ("Thread group id not specified");
      pid = atoi (argv[1]);
      if (!in_inferior_list (pid))
	error ("Invalid thread group id '%s'", argv[1]);
d239 12
a250 3
      old_chain = make_cleanup_restore_current_thread ();
      iterate_over_threads (proceed_thread_callback, &pid);
      do_cleanups (old_chain);            
d253 16
a268 1
    error ("Usage: -exec-continue [--reverse] [--all|--thread-group id]");
a270 3
/* continue in reverse direction:
   XXX: code duplicated from reverse.c */

d272 1
a272 1
exec_direction_default (void *notused)
a273 1
  /* Return execution direction to default state.  */
d292 1
a292 1
  old_chain = make_cleanup (exec_direction_default, NULL);
d301 1
a301 1
  if (argc > 0 && strcmp(argv[0], "--reverse") == 0)
d330 3
a332 1
  if (argc == 0)
a333 3
      if (!is_running (inferior_ptid))
	error ("Current thread is not running.");

d335 1
d337 2
a338 1
  else if (argc == 1 && strcmp (argv[0], "--all") == 0)
d340 1
a340 3
      if (!any_running ())
	error ("Inferior not running.");
      
d343 6
a348 1
  else if (argc == 2 && strcmp (argv[0], "--thread-group") == 0)
d350 21
a370 7
      struct cleanup *old_chain;
      int pid;
      if (argv[1] == NULL || argv[1] == '\0')
	error ("Thread group id not specified");
      pid = atoi (argv[1]);
      if (!in_inferior_list (pid))
	error ("Invalid thread group id '%s'", argv[1]);
d372 2
a373 3
      old_chain = make_cleanup_restore_current_thread ();
      iterate_over_threads (interrupt_thread_callback, &pid);
      do_cleanups (old_chain);
d376 8
a383 1
    error ("Usage: -exec-interrupt [--all|--thread-group id]");
d389 11
a399 2
  mi_execute_cli_command ("run", target_can_async_p (),
			  target_can_async_p () ? "&" : NULL);
d402 1
d541 1
a541 1
      ui_out_field_fmt (uiout, "id", "%d", inferior->pid);
d543 8
a550 1
      ui_out_field_int (uiout, "pid", inferior->pid);
a551 1
      data.pid = inferior->pid;
d553 5
a557 1
      iterate_over_threads (collect_cores, &data);
d1568 34
d1803 9
d1815 19
d1858 2
@


1.166
log
@2010-02-18  Harald Koenig  <H.Koenig@@science-computing.de>

	* mi/mi-main.c (mi_cmd_exec_jump): Drop unneeded `return'.
	* symfile.c (symfile_map_offsets_to_segments): Fix assertion.
@
text
@d333 7
@


1.166.2.1
log
@ChangeLog:

	* mi/mi-main.c (mi_cmd_list_thread_groups): Use get_current_arch
	instead of selected frame architecture.

testsuite/ChangeLog:

	* gdb.mi/gdb680.exp: Revert 2009-06-17 change.
@
text
@d775 1
d787 2
a788 1
  gdbarch = get_current_arch ();
@


1.165
log
@2010-02-12  Tomas Holmberg <th@@virtutech.com>

	* mi/mi-main.c: Added the --reverse flag to the following MI
	commands: exec-continue, exec-finish, exec-next, exec-step,
	exec-next-instruction, exec-step-instruction. This is to
	support reverse execution over the MI interface to gdb.
@
text
@d193 1
a193 1
  return mi_execute_async_cli_command ("jump", argv, argc);
@


1.164
log
@	Include MI command in remotelog.

	* mi/mi-main.c (mi_execute_command): Call target_log_command.
@
text
@d124 4
a127 1
  mi_execute_async_cli_command ("next", argv, argc);
d134 4
a137 1
  mi_execute_async_cli_command ("nexti", argv, argc);
d144 4
a147 1
  mi_execute_async_cli_command ("step", argv, argc);
d154 4
a157 1
  mi_execute_async_cli_command ("stepi", argv, argc);
d164 4
a167 1
  mi_execute_async_cli_command ("finish", argv, argc);
d213 2
a214 2
void
mi_cmd_exec_continue (char *command, char **argv, int argc)
d235 41
a275 1
    error ("Usage: -exec-continue [--all|--thread-group id]");
@


1.163
log
@	* mi/mi-main.c (list_available_thread_groups): Avoid "may be used
	uninitialized" warning from gcc on local `tree'.
@
text
@d1544 2
@


1.162
log
@	Implement core awareness.

	* bcache.c (compare_ints): Remove
	(print_percentage): Use compare_positive_ints.
	* defs.h (compare_positive_ints): Declare.
	* linux-nat.h (struct lin_lwp): New field core.
	(linux_nat_core_of_thread_1): Declare.
	* linux-nat.c (add_lwp): Init the 'core' field.
	(linux_nat_wait_1): Record the core.
	(linux_nat_core_of_thread_1, linux_nat_core_of_thread): New.
	(linux_nat_add_target): Register the above.
	* linux-thread-db.c (update_thread_core): New.
	(thread_db_find_new_threads): Update core information for
	every thread.
	* remote.c (struct private_thread_info): New.
	(free_private_thread_info, demand_private_info): New.
	(PACKET_qXfer_threads, use_osdata_threads): New.
	(struct thread_item, threads_parsing_context
	(start_thread, end_thread, thread_attributes)
	(thread_children, threads_children, threads_elements): New.
	(remote_threads_info): Try qXfer:threads before anything
	else.
	(remote_protocol_packets): Register qXfer:threads.
	(remote_open_1): Init use_osdata_threads.
	(struct stop_reply): New field 'core'.
	(remote_parse_stop_reply): Parse core number.
	(process_stop_reply): Record core number.
	(remote_xfer_partial): Handle qXfer:threads.
	(remote_core_of_thread): New.
	(init_remote_ops): Register remote_core_of_thread.
	(_initialize_remote): Register qXfer:read.
	* target.c (target_core_of_thread): New
	* target.h (enum target_object): New value TARGET_OBJECT_THREADS.
	(struct target_ops): New field to_core_of_threads.
	(target_core_of_thread): Declare.
	* gdbthread.h (struct thread_info): New field private_dtor.
	* thread.c (print_thread_info): Report the core.
	* ui-out.c (MAX_UI_OUT_LEVELS): Increase.
	* utils.c (compare_positive_ints): New.
	* features/threads.dtd: New.
	* mi/mi-interp.c (mi_on_normal_stop): Report the core.
	* mi/mi-main.c (struct collect_cores_data, collect_cores)
	(do_nothing, free_vector_of_osdata_items)
	(splay_tree_int_comparator, free_splay_tree): New.
	(print_one_inferior_data): Implemented printing of selected
	inferiors.  Collect and print cores.
	(output_cores): New.
	(mi_cmd_list_thread_groups): Support --recurse.  Permit specifying
	thread groups together with --available.
@
text
@d516 4
a519 3
     The vector contains information about all threads for the given
     pid.  */
  splay_tree tree;
@


1.161
log
@Update copyright year in most headers.

Automatic update by copyright.sh.
@
text
@d53 1
d364 7
d372 1
a372 1
print_one_inferior (struct inferior *inferior, void *arg)
d374 3
a376 1
  if (inferior->pid != 0)
d378 35
d420 29
d455 5
a459 2
void
mi_cmd_list_thread_groups (char *command, char **argv, int argc)
d461 12
a472 3
  struct cleanup *back_to;
  int available = 0;
  char *id = NULL;
d474 6
a479 6
  if (argc > 0 && strcmp (argv[0], "--available") == 0)
    {
      ++argv;
      --argc;
      available = 1;
    }
d481 4
a484 2
  if (argc > 0)
    id = argv[0];
d486 7
a492 1
  back_to = make_cleanup (null_cleanup, NULL);
d494 7
a500 9
  if (available && id)
    {
      error (_("Can only report top-level available thread groups"));
    }
  else if (available)
    {
      struct osdata *data;
      struct osdata_item *item;
      int ix_items;
d502 6
a507 2
      data = get_osdata ("processes");
      make_cleanup_osdata_free (data);
d509 24
a532 1
      make_cleanup_ui_out_list_begin_end (uiout, "groups");
d535 1
a535 1
	   VEC_iterate (osdata_item_s, data->items,
d539 95
a633 2
	  struct cleanup *back_to =
	    make_cleanup_ui_out_tuple_begin_end (uiout, NULL);
d635 10
a644 3
	  const char *pid = get_osdata_column (item, "pid");
	  const char *cmd = get_osdata_column (item, "command");
	  const char *user = get_osdata_column (item, "user");
d646 2
a647 6
	  ui_out_field_fmt (uiout, "id", "%s", pid);
	  ui_out_field_string (uiout, "type", "process");
	  if (cmd)
	    ui_out_field_string (uiout, "description", cmd);
	  if (user)
	    ui_out_field_string (uiout, "user", user);
d649 19
a667 1
	  do_cleanups (back_to);
d670 2
a671 1
  else if (id)
d673 21
a693 1
      int pid = atoi (id);
d695 2
a696 2
	error ("Invalid thread group id '%s'", id);
      print_thread_info (uiout, -1, pid);    
d700 8
d709 2
a710 1
      iterate_over_inferiors (print_one_inferior, NULL);
d712 1
a712 1
  
@


1.160
log
@	* mi/mi-main.c (mi_cmd_gdb_exit): Flush raw_stdout.
@
text
@d3 1
a3 1
   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008, 2009
@


1.159
log
@	Fix breakpoint commands in MI.

	* mi/mi-main.c (mi_execute_command): Run bpstat_do_actions.
	* mi/mi-cmd-break.c (mi_cmd_break_commands): Pass 1 to
	read_command_line_1 to actually parse composite commands.
@
text
@d114 1
@


1.158
log
@2009-10-19  Pedro Alves	 <pedro@@codesourcery.com>
	    Stan Shebs	<stan@@codesourcery.com>

	Add base multi-executable/process support to GDB.

	gdb/
	* Makefile.in (SFILES): Add progspace.c.
	(COMMON_OBS): Add progspace.o.
	* progspace.h: New.
	* progspace.c: New.

	* breakpoint.h (struct bp_target_info) <placed_address_space>: New
	field.
	(struct bp_location) <pspace>: New field.
	(struct breakpoint) <pspace>: New field.
	(bpstat_stop_status, breakpoint_here_p)
	(moribund_breakpoint_here_p, breakpoint_inserted_here_p)
	(regular_breakpoint_inserted_here_p)
	(software_breakpoint_inserted_here_p, breakpoint_thread_match)
	(set_default_breakpoint): Adjust prototypes.
	(remove_breakpoints_pid, breakpoint_program_space_exit): Declare.
	(insert_single_step_breakpoint, deprecated_insert_raw_breakpoint):
	Adjust prototypes.
	* breakpoint.c (executing_startup): Delete.
	(default_breakpoint_sspace): New.
	(breakpoint_restore_shadows): Skip if the address space doesn't
	match.
	(update_watchpoint): Record the frame's program space in the
	breakpoint location.
	(insert_bp_location): Record the address space in target_info.
	Adjust to pass the symbol space to solib_name_from_address.
	(breakpoint_program_space_exit): New.
	(insert_breakpoint_locations): Switch the symbol space and thread
	when inserting breakpoints.  Don't insert breakpoints in a vfork
	parent waiting for vfork done if we're not attached to the vfork
	child.
	(remove_breakpoints_pid): New.
	(reattach_breakpoints): Switch to a thread of PID.  Ignore
	breakpoints of other symbol spaces.
	(create_internal_breakpoint): Store the symbol space in the sal.
	(create_longjmp_master_breakpoint): Iterate over all symbol
	spaces.
	(update_breakpoints_after_exec): Ignore breakpoints for other
	symbol spaces.
	(remove_breakpoint): Rename to ...
	(remove_breakpoint_1): ... this.  Pass the breakpoints symbol
	space to solib_name_from_address.
	(remove_breakpoint): New.
	(mark_breakpoints_out): Ignore breakpoints from other symbol
	spaces.
	(breakpoint_init_inferior): Ditto.
	(breakpoint_here_p): Add an address space argument and adjust to
	use breakpoint_address_match.
	(moribund_breakpoint_here_p): Ditto.
	(regular_breakpoint_inserted_here_p): Ditto.
	(breakpoint_inserted_here_p): Ditto.
	(software_breakpoint_inserted_here_p): Ditto.
	(breakpoint_thread_match): Ditto.
	(bpstat_check_location): Ditto.
	(bpstat_stop_status): Ditto.
	(print_breakpoint_location): If there's a location to print,
	switch the current symbol space.
	(print_one_breakpoint_location): Add `allflag' argument.
	(print_one_breakpoint): Ditto.	Adjust.
	(do_captured_breakpoint_query): Adjust.
	(breakpoint_1): Adjust.
	(breakpoint_has_pc): Also match the symbol space.
	(describe_other_breakpoints): Add a symbol space argument and
	adjust.
	(set_default_breakpoint): Add a symbol space argument.	Set
	default_breakpoint_sspace.
	(breakpoint_address_match): New.
	(check_duplicates_for): Add an address space argument, and adjust.
	(set_raw_breakpoint): Record the symbol space in the location and
	in the breakpoint.
	(set_longjmp_breakpoint): Skip longjmp master breakpoints from
	other symbol spaces.
	(remove_thread_event_breakpoints, remove_solib_event_breakpoints)
	(disable_breakpoints_in_shlibs): Skip breakpoints from other
	symbol spaces.
	(disable_breakpoints_in_unloaded_shlib): Match symbol spaces.
	(create_catchpoint): Set the symbol space in the sal.
	(disable_breakpoints_before_startup): Skip breakpoints from other
	symbol spaces.	Set executing_startup in the current symbol space.
	(enable_breakpoints_after_startup): Clear executing_startup in the
	current symbol space.  Skip breakpoints from other symbol spaces.
	(clone_momentary_breakpoint): Also copy the symbol space.
	(add_location_to_breakpoint): Set the location's symbol space.
	(bp_loc_is_permanent): Switch thread and symbol space.
	(create_breakpoint): Adjust.
	(expand_line_sal_maybe): Expand comment to mention symbol spaces.
	Switch thread and symbol space when reading memory.
	(parse_breakpoint_sals): Set the symbol space in the sal.
	(break_command_really): Ditto.
	(skip_prologue_sal): Switch and space.
	(resolve_sal_pc): Ditto.
	(watch_command_1): Record the symbol space in the sal.
	(create_ada_exception_breakpoint): Adjust.
	(clear_command): Adjust.  Match symbol spaces.
	(update_global_location_list): Use breakpoint_address_match.
	(breakpoint_re_set_one): Switch thread and space.
	(breakpoint_re_set): Save symbol space.
	(breakpoint_re_set_thread): Also reset the symbol space.
	(deprecated_insert_raw_breakpoint): Add an address space argument.
	Adjust.
	(insert_single_step_breakpoint): Ditto.
	(single_step_breakpoint_inserted_here_p): Ditto.
	(clear_syscall_counts): New.
	(_initialize_breakpoint): Install it as inferior_exit observer.

	* exec.h: Include "progspace.h".
	(exec_bfd, exec_bfd_mtime): New defines.
	(exec_close): Declare.
	* exec.c: Include "gdbthread.h" and "progspace.h".
	(exec_bfd, exec_bfd_mtime, current_target_sections_1): Delete.
	(using_exec_ops): New.
	(exec_close_1): Rename to exec_close, and make public.
	(exec_close): Rename to exec_close_1, and adjust all callers.  Add
	description.  Remove target sections and close executables from
	all program spaces.
	(exec_file_attach): Add comment.
	(add_target_sections): Check on `using_exec_ops' to check if the
	target should be pushed.
	(remove_target_sections): Only unpush the target if there are no
	more target sections in any symbol space.
	* gdbcore.h: Include "exec.h".
	(exec_bfd, exec_bfd_mtime): Remove declarations.

	* frame.h (get_frame_program_space, get_frame_address_space)
	(frame_unwind_program_space): Declare.
	* frame.c (struct frame_info) <pspace, aspace>: New fields.
	(create_sentinel_frame): Add program space argument.  Set the
	pspace and aspace fields of the frame object.
	(get_current_frame, create_new_frame): Adjust.
	(get_frame_program_space): New.
	(frame_unwind_program_space): New.
	(get_frame_address_space): New.
	* stack.c (print_frame_info): Adjust.
	(print_frame): Use the frame's program space.

	* gdbthread.h (any_live_thread_of_process): Declare.
	* thread.c (any_live_thread_of_process): New.
	(switch_to_thread): Switch the program space as well.
	(restore_selected_frame): Don't warn if trying to restore frame
	level 0.

	* inferior.h: Include "progspace.h".
	(detach_fork): Declare.
	(struct inferior) <removable, aspace, pspace>
	<vfork_parent, vfork_child, pending_detach>
	<waiting_for_vfork_done>: New fields.
	<terminal_info>: Remove field.
	<data, num_data>: New fields.
	(register_inferior_data, register_inferior_data_with_cleanup)
	(clear_inferior_data, set_inferior_data, inferior_data): Declare.
	(exit_inferior, exit_inferior_silent, exit_inferior_num_silent)
	(inferior_appeared): Declare.
	(find_inferior_pid): Typo.
	(find_inferior_id, find_inferior_for_program_space): Declare.
	(set_current_inferior, save_current_inferior, prune_inferiors)
	(number_of_inferiors): Declare.
	(inferior_list): Declare.
	* inferior.c: Include "gdbcore.h" and "symfile.h".
	(inferior_list): Make public.
	(delete_inferior_1): Always delete thread silently.
	(find_inferior_id): Make public.
	(current_inferior_): New.
	(current_inferior): Use it.
	(set_current_inferior): New.
	(restore_inferior): New.
	(save_current_inferior): New.
	(free_inferior): Free the per-inferior data.
	(add_inferior_silent): Allocate per-inferior data.
	Call inferior_appeared.
	(delete_threads_of_inferior): New.
	(delete_inferior_1): Adjust interface to take an inferior pointer.
	(delete_inferior): Adjust.
	(delete_inferior_silent): Adjust.
	(exit_inferior_1): New.
	(exit_inferior): New.
	(exit_inferior_silent): New.
	(exit_inferior_num_silent): New.
	(detach_inferior): Adjust.
	(inferior_appeared): New.
	(discard_all_inferiors): Adjust.
	(find_inferior_id): Make public.  Assert pid is not zero.
	(find_inferior_for_program_space): New.
	(have_inferiors): Check if we have any inferior with pid not zero.
	(have_live_inferiors): Go over all pushed targets looking for
	process_stratum.
	(prune_inferiors): New.
	(number_of_inferiors): New.
	(print_inferior): Add executable column.  Print vfork parent/child
	relationships.
	(inferior_command): Adjust to cope with not running inferiors.
	(remove_inferior_command): New.
	(add_inferior_command): New.
	(clone_inferior_command): New.
	(struct inferior_data): New.
	(struct inferior_data_registration): New.
	(struct inferior_data_registry): New.
	(inferior_data_registry): New.
	(register_inferior_data_with_cleanup): New.
	(register_inferior_data): New.
	(inferior_alloc_data): New.
	(inferior_free_data): New.
	(clear_inferior_data): New.
	(set_inferior_data): New.
	(inferior_data): New.
	(initialize_inferiors): New.
	(_initialize_inferiors): Register "add-inferior",
	"remove-inferior" and "clone-inferior" commands.

	* objfiles.h: Include "progspace.h".
	(struct objfile) <pspace>: New field.
	(symfile_objfile, object_files): Don't declare.
	(ALL_PSPACE_OBJFILES): New.
	(ALL_PSPACE_OBJFILES_SAFE): New.
	(ALL_OBJFILES, ALL_OBJFILES_SAFE): Adjust.
	(ALL_PSPACE_SYMTABS): New.
	(ALL_PRIMARY_SYMTABS): Adjust.
	(ALL_PSPACE_PRIMARY_SYMTABS): New.
	(ALL_PSYMTABS): Adjust.
	(ALL_PSPACE_PSYMTABS): New.
	* objfiles.c (object_files, symfile_objfile): Delete.
	(struct objfile_sspace_info): New.
	(objfiles_pspace_data): New.
	(objfiles_pspace_data_cleanup): New.
	(get_objfile_pspace_data): New.
	(objfiles_changed_p): Delete.
	(allocate_objfile): Set the objfile's program space.  Adjust to
	reference objfiles_changed_p in pspace data.
	(free_objfile): Adjust to reference objfiles_changed_p in pspace
	data.
	(objfile_relocate): Ditto.
	(update_section_map): Add pspace argument.  Adjust to iterate over
	objfiles in the passed in pspace.
	(find_pc_section): Delete sections and num_sections statics.
	Adjust to refer to program space's objfiles_changed_p.	Adjust to
	refer to sections and num_sections store in the objfile's pspace
	data.
	(objfiles_changed): Adjust to reference objfiles_changed_p in
	pspace data.
	(_initialize_objfiles): New.
	* linespec.c (decode_all_digits, decode_dollar): Set the sal's
	program space.
	* source.c (current_source_pspace): New.
	(get_current_source_symtab_and_line): Set the sal's program space.
	(set_current_source_symtab_and_line): Set current_source_pspace.
	(select_source_symtab): Ditto.	Use ALL_OBJFILES.
	(forget_cached_source_info): Iterate over all program spaces.
	* symfile.c (clear_symtab_users): Adjust.
	* symmisc.c (print_symbol_bcache_statistics): Iterate over all
	program spaces.
	(print_objfile_statistics): Ditto.
	(maintenance_print_msymbols): Ditto.
	(maintenance_print_objfiles): Ditto.
	(maintenance_info_symtabs): Ditto.
	(maintenance_info_psymtabs): Ditto.
	* symtab.h (SYMTAB_PSPACE): New.
	(struct symtab_and_line) <pspace>: New field.
	* symtab.c (init_sal): Clear the sal's program space.
	(find_pc_sect_symtab): Set the sal's program space.  Switch thread
	and space.
	(append_expanded_sal): Add program space argument.  Iterate over
	all program spaces.
	(expand_line_sal): Iterate over all program spaces.  Switch
	program space.

	* target.h (enum target_waitkind) <TARGET_WAITKIND_VFORK_DONE>: New.
	(struct target_ops) <to_thread_address_space>: New field.
	(target_thread_address_space): Define.
	* target.c (target_detach): Only remove breakpoints from the
	inferior we're detaching.
	(target_thread_address_space): New.

	* defs.h (initialize_progspace): Declare.
	* top.c (gdb_init): Call it.

	* solist.h (struct so_list) <sspace>: New field.
	* solib.h (struct program_space): Forward declare.
	(solib_name_from_address): Adjust prototype.
	* solib.c (so_list_head): Replace with a macro referencing the
	program space.
	(update_solib_list): Set the so's program space.
	(solib_name_from_address): Add a program space argument and adjust.

	* solib-svr4.c (struct svr4_info) <pid>: Delete field.
	<interp_text_sect_low, interp_text_sect_high, interp_plt_sect_low>
	<interp_plt_sect_high>: New fields.
	(svr4_info_p, svr4_info): Delete.
	(solib_svr4_sspace_data): New.
	(get_svr4_info): Rewrite.
	(svr4_sspace_data_cleanup): New.
	(open_symbol_file_object): Adjust.
	(svr4_default_sos): Adjust.
	(svr4_fetch_objfile_link_map): Adjust.
	(interp_text_sect_low, interp_text_sect_high, interp_plt_sect_low)
	(interp_plt_sect_high): Delete.
	(svr4_in_dynsym_resolve_code): Adjust.
	(enable_break): Adjust.
	(svr4_clear_solib): Revert bit that removed the svr4_info here,
	and reinstate clearing debug_base, debug_loader_offset_p,
	debug_loader_offset and debug_loader_name.
	(_initialize_svr4_solib): Register solib_svr4_pspace_data.  Don't
	install an inferior_exit observer anymore.

	* printcmd.c (struct display) <pspace>: New field.
	(display_command): Set the display's sspace.
	(do_one_display): Match the display's sspace.
	(display_uses_solib_p): Ditto.

	* linux-fork.c (detach_fork): Moved to infrun.c.
	(_initialize_linux_fork): Moved "detach-on-fork" command to
	infrun.c.
	* infrun.c (detach_fork): Moved from linux-fork.c.
	(proceed_after_vfork_done): New.
	(handle_vfork_child_exec_or_exit): New.
	(follow_exec_mode_replace, follow_exec_mode_keep)
	(follow_exec_mode_names, follow_exec_mode_string)
	(show_follow_exec_mode_string): New.
	(follow_exec): New.  Reinstate the mark_breakpoints_out call.
	Remove shared libraries before attaching new executable.  If user
	wants to keep the inferior, keep it.
	(displaced_step_fixup): Adjust to pass an address space to the
	breakpoints module.
	(resume): Ditto.
	(clear_proceed_status): In all-stop mode, always clear the proceed
	status of all threads.
	(prepare_to_proceed): Adjust to pass an address space to the
	breakpoints module.
	(proceed): Ditto.
	(adjust_pc_after_break): Ditto.
	(handle_inferior_event): When handling a process exit, switch the
	program space to the inferior's that had exited.  Call
	handle_vfork_child_exec_or_exit.  Adjust to pass an address space
	to the breakpoints module.  In non-stop mode, when following a
	fork and detach-fork is off, also resume the other branch.  Handle
	TARGET_WAITKIND_VFORK_DONE.  Set the program space in sals.
	(normal_stop): Prune inferiors.
	(_initialize_infrun): Install the new "follow-exec-mode" command.
	"detach-on-fork" moved here.

	* regcache.h (get_regcache_aspace): Declare.
	* regcache.c (struct regcache) <aspace>: New field.
	(regcache_xmalloc): Clear the aspace.
	(get_regcache_aspace): New.
	(regcache_cpy): Copy the aspace field.
	(regcache_cpy_no_passthrough): Ditto.
	(get_thread_regcache): Fetch the thread's address space from the
	target, and store it in the regcache.

	* infcall.c (call_function_by_hand): Set the sal's pspace.

	* arch-utils.c (default_has_shared_address_space): New.
	* arch-utils.h (default_has_shared_address_space): Declare.

	* gdbarch.sh (has_shared_address_space): New.
	* gdbarch.h, gdbarch.c: Regenerate.

	* linux-tdep.c: Include auxv.h, target.h, elf/common.h.
	(linux_has_shared_address_space): New.
	(_initialize_linux_tdep): Declare.

	* arm-tdep.c (arm_software_single_step): Pass the frame's address
	space to insert_single_step_breakpoint.
	* arm-linux-tdep.c (arm_linux_software_single_step): Pass the
	frame's pspace to breakpoint functions.
	* cris-tdep.c (crisv32_single_step_through_delay): Ditto.
	(cris_software_single_step): Ditto.
	* mips-tdep.c (deal_with_atomic_sequence): Add frame argument.
	Pass the frame's pspace to breakpoint functions.
	(mips_software_single_step): Adjust.
	(mips_single_step_through_delay): Adjust.
	* rs6000-aix-tdep.c (rs6000_software_single_step): Adjust.
	* rs6000-tdep.c (ppc_deal_with_atomic_sequence): Adjust.
	* solib-irix.c (enable_break): Adjust to pass the current frame's
	address space to breakpoint functions.
	* sparc-tdep.c (sparc_software_single_step): Ditto.
	* spu-tdep.c (spu_software_single_step): Ditto.
	* alpha-tdep.c (alpha_software_single_step): Ditto.
	* record.c (record_wait): Adjust to pass an address space to the
	breakpoints module.

	* fork-child.c (fork_inferior): Set the new inferior's program and
	address spaces.
	* inf-ptrace.c (inf_ptrace_follow_fork): Copy the parent's program
	and address spaces.
	(inf_ptrace_attach): Set the inferior's program and address spaces.
	* linux-nat.c: Include "solib.h".
	(linux_child_follow_fork): Manage parent and child's program and
	address spaces.	 Clone the parent's program space if necessary.
	Don't wait for the vfork to be done here.  Refuse to resume if
	following the vfork parent while leaving the child stopped.
	(resume_callback): Don't resume a vfork parent.
	(linux_nat_resume): Also check for pending events in the
	lp->waitstatus field.
	(linux_handle_extended_wait): Report TARGET_WAITKIND_VFORK_DONE
	events to the core.
	(stop_wait_callback): Don't wait for SIGSTOP on vfork parents.
	(cancel_breakpoint): Adjust.
	* linux-thread-db.c (thread_db_wait): Don't remove thread event
	breakpoints here.
	(thread_db_mourn_inferior): Don't mark breakpoints out here.
	Remove thread event breakpoints after mourning.
	* corelow.c: Include progspace.h.
	(core_open): Set the inferior's program and address spaces.
	* remote.c (remote_add_inferior): Set the new inferior's program
	and address spaces.
	(remote_start_remote): Update address spaces.
	(extended_remote_create_inferior_1): Don't init the thread list if
	we already debugging other inferiors.
	* darwin-nat.c (darwin_attach): Set the new inferior's program and
	address spaces.
	* gnu-nat.c (gnu_attach): Ditto.
	* go32-nat.c (go32_create_inferior): Ditto.
	* inf-ttrace.c (inf_ttrace_follow_fork, inf_ttrace_attach): Ditto.
	* monitor.c (monitor_open): Ditto.
	* nto-procfs.c (procfs_attach, procfs_create_inferior): Ditto.
	* procfs.c (do_attach): Ditto.
	* windows-nat.c (do_initial_windows_stuff): Ditto.

	* inflow.c (inferior_process_group)
	(terminal_init_inferior_with_pgrp, terminal_inferior,
	(terminal_ours_1, inflow_inferior_exit, copy_terminal_info)
	(child_terminal_info, new_tty_postfork, set_sigint_trap): Adjust
	to use per-inferior data instead of inferior->terminal_info.
	(inflow_inferior_data): New.
	(inflow_new_inferior): Delete.
	(inflow_inferior_data_cleanup): New.
	(get_inflow_inferior_data): New.

	* mi/mi-interp.c (mi_new_inferior): Rename to...
	(mi_inferior_appeared): ... this.
	(mi_interpreter_init): Adjust.

	* tui/tui-disasm.c: Include "progspace.h".
	(tui_set_disassem_content): Pass an address space to
	breakpoint_here_p.

	* NEWS: Mention multi-program debugging support.  Mention new
	commands "add-inferior", "clone-inferior", "remove-inferior",
	"maint info program-spaces", and new option "set
	follow-exec-mode".

2009-10-19  Pedro Alves	 <pedro@@codesourcery.com>
	    Stan Shebs	<stan@@codesourcery.com>

	gdb/doc/
	* observer.texi (new_inferior): Rename to...
	(inferior_appeared): ... this.

2009-10-19  Pedro Alves	 <pedro@@codesourcery.com>
	    Stan Shebs	<stan@@codesourcery.com>

	gdb/testsuite/
	* gdb.base/foll-vfork.exp: Adjust to spell out "follow-fork".
	* gdb.base/foll-exec.exp: Adjust to expect a process id before
	"Executing new program".
	* gdb.base/foll-fork.exp: Adjust to spell out "follow-fork".
	* gdb.base/multi-forks.exp: Ditto.  Adjust to the inferior being
	left listed after having been killed.
	* gdb.base/attach.exp: Adjust to spell out "symbol-file".
	* gdb.base/maint.exp: Adjust test.

	* Makefile.in (ALL_SUBDIRS): Add gdb.multi.
	* gdb.multi/Makefile.in: New.
	* gdb.multi/base.exp: New.
	* gdb.multi/goodbye.c: New.
	* gdb.multi/hangout.c: New.
	* gdb.multi/hello.c: New.
	* gdb.multi/bkpt-multi-exec.c: New.
	* gdb.multi/bkpt-multi-exec.exp: New.
	* gdb.multi/crashme.c: New.

2009-10-19  Pedro Alves	 <pedro@@codesourcery.com>
	    Stan Shebs	<stan@@codesourcery.com>

	gdb/doc/
	* gdb.texinfo (Inferiors): Rename node to ...
	(Inferiors and Programs): ... this.  Mention running multiple
	programs in the same debug session.
	<info inferiors>: Mention the new 'Executable' column if "info
	inferiors".  Update examples.  Document the "add-inferior",
	"clone-inferior", "remove-inferior" and "maint info
	program-spaces" commands.
	(Process): Rename node to...
	(Forks): ... this.  Document "set|show follow-exec-mode".
@
text
@d1309 2
@


1.157
log
@	Implement TARGET_OBJECT_STACK_MEMORY.
	* NEWS: Add note on new "set stack-cache" option.
	* corefile.c (read_stack): New function.
	* dcache.c (dcache_struct): New member ptid.
	(dcache_enable_p): Mark as obsolete.
	(show_dcache_enabled_p): Flag option as deprecated.
	(dcache_invalidate): Update ptid.
	(dcache_invalidate_line): New function.
	(dcache_read_line): No longer check cacheable attribute, stack
	accesses get cached despite attribute.
	(dcache_init): Set ptid.
	(dcache_xfer_memory): Flush cache if from different ptid than before.
	Update cache after write.
	(dcache_update): New function.
	(dcache_info): Report ptid.
	(_initialize_dcache): Update text for `remotecache' to indicate it
	is obsolete.
	* dcache.h (dcache_update): Declare.
	* dwarf2loc.c (dwarf2_evaluate_loc_desc): Mark values on stack with
	set_value_stack.
	* frame-unwind.c (frame_unwind_got_memory): Ditto.
	* gdbcore.h (read_stack): Declare.
	* memattr.c (mem_enable_command): Call target_dcache_invalidate
	instead of dcache_invalidate.
	(mem_disable_command, mem_delete_command): Ditto.
	* target.c (stack_cache_enabled_p_1): New static global.
	(stack_cache_enabled_p): New static global.
	(set_stack_cache_enabled_p): New function.
	(show_stack_cache_enabled_p): New function.
	(target_dcache): Make static.
	(target_dcache_invalidate): New function.
	(target_load, target_resume): Call target_dcache_invalidate
	instead of dcache_invalidate.
	(memory_xfer_partial): New arg object, all callers updated.
	Check for existing inferior before calling dcache routines.
	When writing non-TARGET_OBJECT_STACK_MEMORY, notify dcache.
	(target_xfer_partial): Call memory_xfer_partial for
	TARGET_OBJECT_STACK_MEMORY.
	(target_read_stack): New function.
	(initialize_targets): Install new option `stack-cache'.
	* target.h: Remove #include of dcache.h.
	(enum target_object): New value TARGET_OBJECT_STACK_MEMORY.
	(target_dcache): Delete.
	(target_dcache_invalidate): Declare.
	(target_read_stack): Declare.
	* top.c (prepare_execute_command): New function.
	(execute_command): Call prepare_execute_command
	instead of free_all_values.
	* top.h (prepare_execute_command): Declare.
	* valops.c (get_value_at): New function.
	(value_at): Guts moved to get_value_at.
	(value_at_lazy): Similarly.
	(value_fetch_lazy): Call read_stack for stack values.
	* value.c (struct value): New member `stack'.
	(value_stack, set_value_stack): New functions.
	* value.h (value_stack, set_value_stack): Declare.
	* mi/mi-main.c (mi_cmd_execute): Call prepare_execute_command
	instead of free_all_values.

	doc/
	* gdb.texinfo (Caching Data of Remote Targets): Update text.
	Mark `set/show remotecache' options as obsolete.
	Document new `set/show stack-cache' option.
	Update text for `info dcache'.
@
text
@d365 11
a375 1
  struct cleanup *back_to = make_cleanup_ui_out_tuple_begin_end (uiout, NULL);
a376 5
  ui_out_field_fmt (uiout, "id", "%d", inferior->pid);
  ui_out_field_string (uiout, "type", "process");
  ui_out_field_int (uiout, "pid", inferior->pid);
  
  do_cleanups (back_to);
@


1.156
log
@	* defs.h (extract_signed_integer, extract_unsigned_integer,
	extract_long_unsigned_integer, store_signed_integer,
	store_unsigned_integer): Add BYTE_ORDER parameter.
	* findvar.c (extract_signed_integer, extract_unsigned_integer,
	extract_long_unsigned_integer, store_signed_integer,
	store_unsigned_integer): Add BYTE_ORDER parameter.  Use it
	instead of current_gdbarch.

	* gdbcore.h (read_memory_integer, safe_read_memory_integer,
	read_memory_unsigned_integer, write_memory_signed_integer,
	write_memory_unsigned_integer): Add BYTE_ORDER parameter.
	* corefile.c (struct captured_read_memory_integer_arguments): Add
	BYTE_ORDER member.
	(safe_read_memory_integer): Add BYTE_ORDER parameter.  Store it into
	struct captured_read_memory_integer_arguments.
	(do_captured_read_memory_integer): Pass it to read_memory_integer.
	(read_memory_integer): Add BYTE_ORDER parameter.  Pass it to
	extract_signed_integer.
	(read_memory_unsigned_integer): Add BYTE_ORDER parameter.  Pass it to
	extract_unsigned_integer.
	(write_memory_signed_integer): Add BYTE_ORDER parameter.  Pass it
	to store_signed_integer.
	(write_memory_unsigned_integer): Add BYTE_ORDER parameter.  Pass it
	to store_unsigned_integer.

	* target.h (get_target_memory_unsigned): Add BYTE_ORDER parameter.
	* target.c (get_target_memory_unsigned): Add BYTE_ORDER parameter.
	Pass it to extract_unsigned_integer.


	Update calls to extract_signed_integer, extract_unsigned_integer,
	extract_long_unsigned_integer, store_signed_integer,
	store_unsigned_integer, read_memory_integer,
	read_memory_unsigned_integer, safe_read_memory_integer,
	write_memory_signed_integer, write_memory_unsigned_integer, and
	get_target_memory_unsigned to pass byte order:
	* ada-lang.c (ada_value_binop): Update.
	* ada-valprint.c (char_at): Update.
	* alpha-osf1-tdep.c (alpha_osf1_sigcontext_addr): Update.
	* alpha-tdep.c (alpha_lds, alpha_sts, alpha_push_dummy_call,
	alpha_extract_return_value, alpha_read_insn,
	alpha_get_longjmp_target): Update.
	* amd64-linux-tdep.c (amd64_linux_sigcontext_addr): Update.
	* amd64obsd-tdep.c (amd64obsd_supply_uthread,
	amd64obsd_collect_uthread, amd64obsd_trapframe_cache): Update.
	* amd64-tdep.c (amd64_push_dummy_call, amd64_analyze_prologue,
	amd64_frame_cache, amd64_sigtramp_frame_cache, fixup_riprel,
	amd64_displaced_step_fixup): Update.
	* arm-linux-tdep.c (arm_linux_sigreturn_init,
	arm_linux_rt_sigreturn_init, arm_linux_supply_gregset): Update.
	* arm-tdep.c (thumb_analyze_prologue, arm_skip_prologue,
	arm_scan_prologue, arm_push_dummy_call, thumb_get_next_pc,
	arm_get_next_pc, arm_extract_return_value, arm_store_return_value,
	arm_return_value): Update.
	* arm-wince-tdep.c (arm_pe_skip_trampoline_code): Update.
	* auxv.c (default_auxv_parse): Update.
	* avr-tdep.c (avr_address_to_pointer, avr_pointer_to_address,
	avr_scan_prologue, avr_extract_return_value,
	avr_frame_prev_register, avr_push_dummy_call): Update.
	* bsd-uthread.c (bsd_uthread_check_magic, bsd_uthread_lookup_offset,
	bsd_uthread_wait, bsd_uthread_thread_alive,
	bsd_uthread_extra_thread_info): Update.
	* c-lang.c (c_printstr, print_wchar): Update.
	* cp-valprint.c (cp_print_class_member): Update.
	* cris-tdep.c (cris_sigcontext_addr, cris_sigtramp_frame_unwind_cache,
	cris_push_dummy_call, cris_scan_prologue, cris_store_return_value,
	cris_extract_return_value, find_step_target, dip_prefix,
	sixteen_bit_offset_branch_op, none_reg_mode_jump_op,
	move_mem_to_reg_movem_op, get_data_from_address): Update.
	* dwarf2expr.c (dwarf2_read_address, execute_stack_op): Update.
	* dwarf2-frame.c (execute_cfa_program): Update.
	* dwarf2loc.c (find_location_expression): Update.
	* dwarf2read.c (dwarf2_const_value): Update.
	* expprint.c (print_subexp_standard): Update.
	* findvar.c (unsigned_pointer_to_address, signed_pointer_to_address,
	unsigned_address_to_pointer, address_to_signed_pointer,
	read_var_value): Update.
	* frame.c (frame_unwind_register_signed,
	frame_unwind_register_unsigned, get_frame_memory_signed,
	get_frame_memory_unsigned): Update.
	* frame-unwind.c (frame_unwind_got_constant): Update.
	* frv-linux-tdep.c (frv_linux_pc_in_sigtramp,
	frv_linux_sigcontext_reg_addr, frv_linux_sigtramp_frame_cache):
	Update.
	* frv-tdep.c (frv_analyze_prologue, frv_skip_main_prologue,
	frv_extract_return_value, find_func_descr,
	frv_convert_from_func_ptr_addr, frv_push_dummy_call): Update.
	* f-valprint.c (f_val_print): Update.
	* gnu-v3-abi.c (gnuv3_decode_method_ptr, gnuv3_make_method_ptr):
	Update.
	* h8300-tdep.c (h8300_is_argument_spill, h8300_analyze_prologue,
	h8300_push_dummy_call, h8300_extract_return_value,
	h8300h_extract_return_value, h8300_store_return_value,
	h8300h_store_return_value): Update.
	* hppabsd-tdep.c (hppabsd_find_global_pointer): Update.
	* hppa-hpux-nat.c (hppa_hpux_fetch_register, hppa_hpux_store_register):
	Update.
	* hppa-hpux-tdep.c (hppa32_hpux_in_solib_call_trampoline,
	hppa64_hpux_in_solib_call_trampoline,
	hppa_hpux_in_solib_return_trampoline, hppa_hpux_skip_trampoline_code,
	hppa_hpux_sigtramp_frame_unwind_cache,
	hppa_hpux_sigtramp_unwind_sniffer, hppa32_hpux_find_global_pointer,
	hppa64_hpux_find_global_pointer, hppa_hpux_search_pattern,
	hppa32_hpux_search_dummy_call_sequence,
	hppa64_hpux_search_dummy_call_sequence, hppa_hpux_supply_save_state,
	hppa_hpux_unwind_adjust_stub): Update.
	* hppa-linux-tdep.c (insns_match_pattern,
	hppa_linux_find_global_pointer): Update.
	* hppa-tdep.c (hppa_in_function_epilogue_p, hppa32_push_dummy_call,
	hppa64_convert_code_addr_to_fptr, hppa64_push_dummy_call,
	skip_prologue_hard_way, hppa_frame_cache, hppa_fallback_frame_cache,
	hppa_pseudo_register_read, hppa_frame_prev_register_helper,
	hppa_match_insns): Update.
	* hpux-thread.c (hpux_thread_fetch_registers): Update.
	* i386-tdep.c (i386bsd_sigcontext_addr): Update.
	* i386-cygwin-tdep.c (core_process_module_section): Update.
	* i386-darwin-nat.c (i386_darwin_sstep_at_sigreturn,
	amd64_darwin_sstep_at_sigreturn): Update.
	* i386-darwin-tdep.c (i386_darwin_sigcontext_addr,
	amd64_darwin_sigcontext_addr): Likewise.
	* i386-linux-nat.c (i386_linux_sigcontext_addr): Update.
	* i386nbsd-tdep.c (i386nbsd_sigtramp_cache_init): Update.
	* i386-nto-tdep.c (i386nto_sigcontext_addr): Update.
	* i386obsd-nat.c (i386obsd_supply_pcb): Update.
	* i386obsd-tdep.c (i386obsd_supply_uthread, i386obsd_collect_uthread,
	i386obsd_trapframe_cache): Update.
	* i386-tdep.c (i386_displaced_step_fixup, i386_follow_jump,
	i386_analyze_frame_setup, i386_analyze_prologue,
	i386_skip_main_prologue, i386_frame_cache, i386_sigtramp_frame_cache,
	i386_get_longjmp_target, i386_push_dummy_call,
	i386_pe_skip_trampoline_code, i386_svr4_sigcontext_addr,
	i386_fetch_pointer_argument): Update.
	* i387-tdep.c (i387_supply_fsave): Update.
	* ia64-linux-tdep.c (ia64_linux_sigcontext_register_address): Update.
	* ia64-tdep.c (ia64_pseudo_register_read, ia64_pseudo_register_write,
	examine_prologue, ia64_frame_cache, ia64_frame_prev_register,
	ia64_sigtramp_frame_cache, ia64_sigtramp_frame_prev_register,
	ia64_access_reg, ia64_access_rse_reg, ia64_libunwind_frame_this_id,
	ia64_libunwind_frame_prev_register,
	ia64_libunwind_sigtramp_frame_this_id,
	ia64_libunwind_sigtramp_frame_prev_register, ia64_find_global_pointer,
	find_extant_func_descr, find_func_descr,
	ia64_convert_from_func_ptr_addr, ia64_push_dummy_call, ia64_dummy_id,
	ia64_unwind_pc): Update.
	* iq2000-tdep.c (iq2000_pointer_to_address, iq2000_address_to_pointer,
	iq2000_scan_prologue, iq2000_extract_return_value,
	iq2000_push_dummy_call): Update.
	* irix5nat.c (fill_gregset): Update.
	* jv-lang.c (evaluate_subexp_java): Update.
	* jv-valprint.c (java_value_print): Update.
	* lm32-tdep.c (lm32_analyze_prologue, lm32_push_dummy_call,
	lm32_extract_return_value, lm32_store_return_value): Update.
	* m32c-tdep.c (m32c_push_dummy_call, m32c_return_value,
	m32c_skip_trampoline_code, m32c_m16c_address_to_pointer,
	m32c_m16c_pointer_to_address): Update.
	* m32r-tdep.c (m32r_store_return_value, decode_prologue,
	m32r_skip_prologue, m32r_push_dummy_call, m32r_extract_return_value):
	Update.
	* m68hc11-tdep.c (m68hc11_pseudo_register_read,
	m68hc11_pseudo_register_write, m68hc11_analyze_instruction,
	m68hc11_push_dummy_call): Update.
	* m68linux-tdep.c (m68k_linux_pc_in_sigtramp,
	m68k_linux_get_sigtramp_info, m68k_linux_sigtramp_frame_cache):
	Update.
	* m68k-tdep.c (m68k_push_dummy_call, m68k_analyze_frame_setup,
	m68k_analyze_register_saves, m68k_analyze_prologue, m68k_frame_cache,
	m68k_get_longjmp_target): Update.
	* m88k-tdep.c (m88k_fetch_instruction): Update.
	* mep-tdep.c (mep_pseudo_cr32_read, mep_pseudo_csr_write,
	mep_pseudo_cr32_write, mep_get_insn, mep_push_dummy_call): Update.
	* mi/mi-main.c (mi_cmd_data_write_memory): Update.
	* mips-linux-tdep.c (mips_linux_get_longjmp_target, supply_32bit_reg,
	mips64_linux_get_longjmp_target, mips64_fill_gregset,
	mips64_fill_fpregset, mips_linux_in_dynsym_stub): Update.
	* mipsnbdsd-tdep.c (mipsnbsd_get_longjmp_target): Update.
	* mips-tdep.c (mips_fetch_instruction, fetch_mips_16,
	mips_eabi_push_dummy_call, mips_n32n64_push_dummy_call,
	mips_o32_push_dummy_call, mips_o64_push_dummy_call,
	mips_single_step_through_delay, mips_skip_pic_trampoline_code,
	mips_integer_to_address): Update.
	* mn10300-tdep.c (mn10300_analyze_prologue, mn10300_push_dummy_call):
	Update.
	* monitor.c (monitor_supply_register, monitor_write_memory,
	monitor_read_memory_single): Update.
	* moxie-tdep.c (moxie_store_return_value, moxie_extract_return_value,
	moxie_analyze_prologue): Update.
	* mt-tdep.c (mt_return_value, mt_skip_prologue, mt_select_coprocessor,
	mt_pseudo_register_read, mt_pseudo_register_write, mt_registers_info,
	mt_push_dummy_call): Update.
	* objc-lang.c (read_objc_method, read_objc_methlist_nmethods,
	read_objc_methlist_method, read_objc_object, read_objc_super,
	read_objc_class, find_implementation_from_class): Update.
	* ppc64-linux-tdep.c (ppc64_desc_entry_point,
	ppc64_linux_convert_from_func_ptr_addr, ppc_linux_sigtramp_cache):
	Update.
	* ppcobsd-tdep.c (ppcobsd_sigtramp_frame_sniffer,
	ppcobsd_sigtramp_frame_cache): Update.
	* ppc-sysv-tdep.c (ppc_sysv_abi_push_dummy_call,
	do_ppc_sysv_return_value, ppc64_sysv_abi_push_dummy_call,
	ppc64_sysv_abi_return_value): Update.
	* ppc-linux-nat.c (ppc_linux_auxv_parse): Update.
	* procfs.c (procfs_auxv_parse): Update.
	* p-valprint.c (pascal_val_print): Update.
	* regcache.c (regcache_raw_read_signed, regcache_raw_read_unsigned,
	regcache_raw_write_signed, regcache_raw_write_unsigned,
	regcache_cooked_read_signed, regcache_cooked_read_unsigned,
	regcache_cooked_write_signed, regcache_cooked_write_unsigned): Update.
	* remote-m32r-sdi.c (m32r_fetch_register): Update.
	* remote-mips.c (mips_wait, mips_fetch_registers, mips_xfer_memory):
	Update.
	* rs6000-aix-tdep.c (rs6000_push_dummy_call, rs6000_return_value,
	rs6000_convert_from_func_ptr_addr, branch_dest,
	rs6000_software_single_step): Update.
	* rs6000-tdep.c (rs6000_in_function_epilogue_p,
	ppc_displaced_step_fixup, ppc_deal_with_atomic_sequence,
	bl_to_blrl_insn_p, rs6000_fetch_instruction, skip_prologue,
	rs6000_skip_main_prologue, rs6000_skip_trampoline_code,
	rs6000_frame_cache): Update.
	* s390-tdep.c (s390_pseudo_register_read, s390_pseudo_register_write,
	s390x_pseudo_register_read, s390x_pseudo_register_write, s390_load,
	s390_backchain_frame_unwind_cache, s390_sigtramp_frame_unwind_cache,
	extend_simple_arg, s390_push_dummy_call, s390_return_value): Update.
	* scm-exp.c (scm_lreadr): Update.
	* scm-lang.c (scm_get_field, scm_unpack): Update.
	* scm-valprint.c (scm_val_print): Update.
	* score-tdep.c (score_breakpoint_from_pc, score_push_dummy_call,
	score_fetch_inst): Update.
	* sh64-tdep.c (look_for_args_moves, sh64_skip_prologue_hard_way,
	sh64_analyze_prologue, sh64_push_dummy_call, sh64_extract_return_value,
	sh64_pseudo_register_read, sh64_pseudo_register_write,
	sh64_frame_prev_register): Update:
	* sh-tdep.c (sh_analyze_prologue, sh_push_dummy_call_fpu,
	sh_push_dummy_call_nofpu, sh_extract_return_value_nofpu,
	sh_store_return_value_nofpu, sh_in_function_epilogue_p): Update.
	* solib-darwin.c (darwin_load_image_infos): Update.
	* solib-frv.c (fetch_loadmap, lm_base, frv_current_sos, enable_break2,
	find_canonical_descriptor_in_load_object): Update.
	* solib-irix.c (extract_mips_address, fetch_lm_info, irix_current_sos,
	irix_open_symbol_file_object): Update.
	* solib-som.c (som_solib_create_inferior_hook, link_map_start,
	som_current_sos, som_open_symbol_file_object): Update.
	* solib-sunos.c (SOLIB_EXTRACT_ADDRESS, LM_ADDR, LM_NEXT, LM_NAME):
	Update.
	* solib-svr4.c (read_program_header, scan_dyntag_auxv,
	solib_svr4_r_ldsomap): Update.
	* sparc64-linux-tdep.c (sparc64_linux_step_trap): Update.
	* sparc64obsd-tdep.c (sparc64obsd_supply_uthread,
	sparc64obsd_collect_uthread): Update.
	* sparc64-tdep.c (sparc64_pseudo_register_read,
	sparc64_pseudo_register_write, sparc64_supply_gregset,
	sparc64_collect_gregset): Update.
	* sparc-linux-tdep.c (sparc32_linux_step_trap): Update.
	* sparcobsd-tdep.c (sparc32obsd_supply_uthread,
	sparc32obsd_collect_uthread): Update.
	* sparc-tdep.c (sparc_fetch_wcookie, sparc32_push_dummy_code,
	sparc32_store_arguments, sparc32_return_value, sparc_supply_rwindow,
	sparc_collect_rwindow): Update.
	* spu-linux-nat.c (parse_spufs_run): Update.
	* spu-tdep.c (spu_pseudo_register_read_spu,
	spu_pseudo_register_write_spu, spu_pointer_to_address,
	spu_analyze_prologue, spu_in_function_epilogue_p,
	spu_frame_unwind_cache, spu_push_dummy_call, spu_software_single_step,
	spu_get_longjmp_target, spu_get_overlay_table, spu_overlay_update_osect,
	info_spu_signal_command, info_spu_mailbox_list, info_spu_dma_cmdlist,
	info_spu_dma_command, info_spu_proxydma_command): Update.
	* stack.c (print_frame_nameless_args, frame_info): Update.
	* symfile.c (read_target_long_array, simple_read_overlay_table,
	simple_read_overlay_region_table): Update.
	* target.c (debug_print_register): Update.
	* tramp-frame.c (tramp_frame_start): Update.
	* v850-tdep.c (v850_analyze_prologue, v850_push_dummy_call,
	v850_extract_return_value, v850_store_return_value,
	* valarith.c (value_binop, value_bit_index): Update.
	* valops.c (value_cast): Update.
	* valprint.c (val_print_type_code_int, val_print_string,
	read_string): Update.
	* value.c (unpack_long, unpack_double, unpack_field_as_long,
	modify_field, pack_long): Update.
	* vax-tdep.c (vax_store_arguments, vax_push_dummy_call,
	vax_skip_prologue): Update.
	* xstormy16-tdep.c (xstormy16_push_dummy_call,
	xstormy16_analyze_prologue, xstormy16_in_function_epilogue_p,
	xstormy16_resolve_jmp_table_entry, xstormy16_find_jmp_table_entry,
	xstormy16_pointer_to_address, xstormy16_address_to_pointer): Update.
	* xtensa-tdep.c (extract_call_winsize, xtensa_pseudo_register_read,
	xtensa_pseudo_register_write, xtensa_frame_cache,
	xtensa_push_dummy_call, call0_track_op, call0_frame_cache): Update.


	* dfp.h (decimal_to_string, decimal_from_string, decimal_from_integral,
	decimal_from_floating, decimal_to_doublest, decimal_is_zero): Add
	BYTE_ORDER parameter.
	(decimal_binop): Add BYTE_ORDER_X, BYTE_ORDER_Y, and BYTE_ORDER_RESULT
	parameters.
	(decimal_compare): Add BYTE_ORDER_X and BYTE_ORDER_Y parameters.
	(decimal_convert): Add BYTE_ORDER_FROM and BYTE_ORDER_TO parameters.
	* dfp.c (match_endianness): Add BYTE_ORDER parameter.  Use it
	instead of current_gdbarch.
	(decimal_to_string, decimal_from_integral, decimal_from_floating,
	decimal_to_doublest, decimal_is_zero): Add BYTE_ORDER parameter.
	Pass it to match_endianness.
	(decimal_binop): Add BYTE_ORDER_X, BYTE_ORDER_Y, and BYTE_ORDER_RESULT
	parameters.  Pass them to match_endianness.
	(decimal_compare): Add BYTE_ORDER_X and BYTE_ORDER_Y parameters.
	Pass them to match_endianness.
	(decimal_convert): Add BYTE_ORDER_FROM and BYTE_ORDER_TO parameters.
	Pass them to match_endianness.
	* valarith.c (value_args_as_decimal): Add BYTE_ORDER_X and
	BYTE_ORDER_Y output parameters.
	(value_binop): Update call to value_args_as_decimal.

	Update calls to decimal_to_string, decimal_from_string,
	decimal_from_integral, decimal_from_floating, decimal_to_doublest,
	decimal_is_zero, decimal_binop, decimal_compare and decimal_convert
	to pass/receive byte order:
	* c-exp.y (parse_number): Update.
	* printcmd.c (printf_command): Update.
	* valarith.c (value_args_as_decimal, value_binop, value_logical_not,
	value_equal, value_less): Update.
	* valops.c (value_cast, value_one): Update.
	* valprint.c (print_decimal_floating): Update.
	* value.c (unpack_long, unpack_double): Update.
	* python/python-value.c (valpy_nonzero): Update.


	* ada-valprint.c (char_at): Add BYTE_ORDER parameter.
	(printstr): Update calls to char_at.
	(ada_val_print_array): Likewise.
	* valprint.c (read_string): Add BYTE_ORDER parameter.
	(val_print_string): Update call to read_string.
	* c-lang.c (c_get_string): Likewise.
	* charset.h (target_wide_charset): Add BYTE_ORDER parameter.
	* charset.c (target_wide_charset): Add BYTE_ORDER parameter.
	Use it instead of current_gdbarch.
	* printcmd.c (printf_command): Update calls to target_wide_charset.
	* c-lang.c (charset_for_string_type): Add BYTE_ORDER parameter.
	Pass to target_wide_charset.  Use it instead of current_gdbarch.
	(classify_type): Add BYTE_ORDER parameter.  Pass to
	charset_for_string_type.  Allow NULL encoding pointer.
	(print_wchar): Add BYTE_ORDER parameter.
	(c_emit_char): Update calls to classify_type and print_wchar.
	(c_printchar, c_printstr): Likewise.


	* gdbarch.sh (in_solib_return_trampoline): Convert to type "m".
	* gdbarch.c, gdbarch.h: Regenerate.
	* arch-utils.h (generic_in_solib_return_trampoline): Add GDBARCH
	parameter.
	* arch-utils.c (generic_in_solib_return_trampoline): Likewise.
	* hppa-hpux-tdep.c (hppa_hpux_in_solib_return_trampoline): Likewise.
	* rs6000-tdep.c (rs6000_in_solib_return_trampoline): Likewise.
	(rs6000_skip_trampoline_code): Update call.

	* alpha-tdep.h (struct gdbarch_tdep): Add GDBARCH parameter to
	dynamic_sigtramp_offset and pc_in_sigtramp callbacks.
	(alpha_read_insn): Add GDBARCH parameter.
	* alpha-tdep.c (alpha_lds, alpha_sts): Add GDBARCH parameter.
	(alpha_register_to_value): Pass architecture to alpha_sts.
	(alpha_extract_return_value): Likewise.
	(alpha_value_to_register): Pass architecture to alpha_lds.
	(alpha_store_return_value): Likewise.
	(alpha_read_insn): Add GDBARCH parameter.
	(alpha_skip_prologue): Pass architecture to alpha_read_insn.
	(alpha_heuristic_proc_start): Likewise.
	(alpha_heuristic_frame_unwind_cache): Likewise.
	(alpha_next_pc): Likewise.
	(alpha_sigtramp_frame_this_id): Pass architecture to
	tdep->dynamic_sigtramp_offset callback.
	(alpha_sigtramp_frame_sniffer): Pass architecture to
	tdep->pc_in_sigtramp callback.
	* alphafbsd-tdep.c (alphafbsd_pc_in_sigtramp): Add GDBARCH parameter.
	(alphafbsd_sigtramp_offset): Likewise.
	* alpha-linux-tdep.c (alpha_linux_sigtramp_offset_1): Add GDBARCH
	parameter.  Pass to alpha_read_insn.
	(alpha_linux_sigtramp_offset): Add GDBARCH parameter.  Pass to
	alpha_linux_sigtramp_offset_1.
	(alpha_linux_pc_in_sigtramp): Add GDBARCH parameter.  Pass to
	alpha_linux_sigtramp_offset.
	(alpha_linux_sigcontext_addr): Pass architecture to alpha_read_insn
	and alpha_linux_sigtramp_offset.
	* alphanbsd-tdep.c (alphanbsd_sigtramp_offset): Add GDBARCH parameter.
	(alphanbsd_pc_in_sigtramp): Add GDBARCH parameter.  Pass to
	alphanbsd_sigtramp_offset.
	* alphaobsd-tdep.c (alphaobsd_sigtramp_offset): Add GDBARCH parameter.
	(alphaobsd_pc_in_sigtramp): Add GDBARCH parameter.  Pass to
	alpha_read_insn.
	(alphaobsd_sigcontext_addr): Pass architecture to
	alphaobsd_sigtramp_offset.
	* alpha-osf1-tdep.c (alpha_osf1_pc_in_sigtramp): Add GDBARCH
	parameter.

	* amd64-tdep.c (amd64_analyze_prologue): Add GDBARCH parameter.
	(amd64_skip_prologue): Pass architecture to amd64_analyze_prologue.
	(amd64_frame_cache): Likewise.

	* arm-tdep.c (SWAP_SHORT, SWAP_INT): Remove.
	(thumb_analyze_prologue, arm_skip_prologue, arm_scan_prologue,
	thumb_get_next_pc, arm_get_next_pc): Do not use SWAP_ macros.
	* arm-wince-tdep.c: Include "frame.h".

	* avr-tdep.c (EXTRACT_INSN): Remove.
	(avr_scan_prologue): Add GDBARCH argument, inline EXTRACT_INSN.
	(avr_skip_prologue): Pass architecture to avr_scan_prologue.
	(avr_frame_unwind_cache): Likewise.

	* cris-tdep.c (struct instruction_environment): Add BYTE_ORDER member.
	(find_step_target): Initialize it.
	(get_data_from_address): Add BYTE_ORDER parameter.
	(bdap_prefix): Pass byte order to get_data_from_address.
	(handle_prefix_assign_mode_for_aritm_op): Likewise.
	(three_operand_add_sub_cmp_and_or_op): Likewise.
	(handle_inc_and_index_mode_for_aritm_op): Likewise.

	* frv-linux-tdep.c (frv_linux_pc_in_sigtramp): Add GDBARCH parameter.
	(frv_linux_sigcontext_reg_addr): Pass architecture to
	frv_linux_pc_in_sigtramp.
	(frv_linux_sigtramp_frame_sniffer): Likewise.

	* h8300-tdep.c (h8300_is_argument_spill): Add GDBARCH parameter.
	(h8300_analyze_prologue): Add GDBARCH parameter.  Pass to
	h8300_is_argument_spill.
	(h8300_frame_cache, h8300_skip_prologue): Pass architecture
	to h8300_analyze_prologue.

	* hppa-tdep.h (struct gdbarch_tdep): Add GDBARCH parameter to
	in_solib_call_trampoline callback.
	(hppa_in_solib_call_trampoline): Add GDBARCH parameter.
	* hppa-tdep.c (hppa64_convert_code_addr_to_fptr): Add GDBARCH
	parameter.
	(hppa64_push_dummy_call): Pass architecture to
	hppa64_convert_code_addr_to_fptr.
	(hppa_match_insns): Add GDBARCH parameter.
	(hppa_match_insns_relaxed): Add GDBARCH parameter.  Pass to
	hppa_match_insns.
	(hppa_skip_trampoline_code): Pass architecture to hppa_match_insns.
	(hppa_in_solib_call_trampoline): Add GDBARCH parameter.  Pass to
	hppa_match_insns_relaxed.
	(hppa_stub_unwind_sniffer): Pass architecture to
	tdep->in_solib_call_trampoline callback.
	* hppa-hpux-tdep.c (hppa_hpux_search_pattern): Add GDBARCH parameter.
	(hppa32_hpux_search_dummy_call_sequence): Pass architecture to
	hppa_hpux_search_pattern.
	* hppa-linux-tdep.c (insns_match_pattern): Add GDBARCH parameter.
	(hppa_linux_sigtramp_find_sigcontext): Add GDBARCH parameter.
	Pass to insns_match_pattern.
	(hppa_linux_sigtramp_frame_unwind_cache): Pass architecture to
	hppa_linux_sigtramp_find_sigcontext.
	(hppa_linux_sigtramp_frame_sniffer): Likewise.
	(hppa32_hpux_in_solib_call_trampoline): Add GDBARCH parameter.
	(hppa64_hpux_in_solib_call_trampoline): Likewise.

	* i386-tdep.c (i386_follow_jump): Add GDBARCH parameter.
	(i386_analyze_frame_setup): Add GDBARCH parameter.
	(i386_analyze_prologue): Add GDBARCH parameter.  Pass to
	i386_follow_jump and i386_analyze_frame_setup.
	(i386_skip_prologue): Pass architecture to i386_analyze_prologue
	and i386_follow_jump.
	(i386_frame_cache): Pass architecture to i386_analyze_prologue.
	(i386_pe_skip_trampoline_code): Add FRAME parameter.
	* i386-tdep.h (i386_pe_skip_trampoline_code): Add FRAME parameter.
	* i386-cygwin-tdep.c (i386_cygwin_skip_trampoline_code): Pass
	frame to i386_pe_skip_trampoline_code.

	* ia64-tdep.h (struct gdbarch_tdep): Add GDBARCH parameter
	to sigcontext_register_address callback.
	* ia64-tdep.c (ia64_find_global_pointer): Add GDBARCH parameter.
	(ia64_find_unwind_table): Pass architecture to
	ia64_find_global_pointer.
	(find_extant_func_descr): Add GDBARCH parameter.
	(find_func_descr): Pass architecture to find_extant_func_descr
	and ia64_find_global_pointer.
	(ia64_sigtramp_frame_init_saved_regs): Pass architecture to
	tdep->sigcontext_register_address callback.
	* ia64-linux-tdep.c (ia64_linux_sigcontext_register_address): Add
	GDBARCH parameter.

	* iq2000-tdep.c (iq2000_scan_prologue): Add GDBARCH parameter.
	(iq2000_frame_cache): Pass architecture to iq2000_scan_prologue.

	* lm32-tdep.c (lm32_analyze_prologue): Add GDBARCH parameter.
	(lm32_skip_prologue, lm32_frame_cache): Pass architecture to
	lm32_analyze_prologue.

	* m32r-tdep.c (decode_prologue): Add GDBARCH parameter.
	(m32r_skip_prologue): Pass architecture to decode_prologue.

	* m68hc11-tdep.c (m68hc11_analyze_instruction): Add GDBARCH parameter.
	(m68hc11_scan_prologue): Pass architecture to
	m68hc11_analyze_instruction.

	* m68k-tdep.c (m68k_analyze_frame_setup): Add GDBARCH parameter.
	(m68k_analyze_prologue): Pass architecture to
	m68k_analyze_frame_setup.

	* m88k-tdep.c (m88k_fetch_instruction): Add BYTE_ORDER parameter.
	(m88k_analyze_prologue): Add GDBARCH parameter.  Pass byte order
	to m88k_fetch_instruction.
	(m88k_skip_prologue): Pass architecture to m88k_analyze_prologue.
	(m88k_frame_cache): Likewise.

	* mep-tdep.c (mep_get_insn): Add GDBARCH parameter.
	(mep_analyze_prologue): Pass architecture to mep_get_insn.

	* mips-tdep.c (mips_fetch_instruction): Add GDBARCH parameter.
	(mips32_next_pc): Pass architecture to mips_fetch_instruction.
	(deal_with_atomic_sequence): Likewise.
	(unpack_mips16): Add GDBARCH parameter, pass to mips_fetch_instruction.
	(mips16_scan_prologue): Likewise.
	(mips32_scan_prologue): Likewise.
	(mips16_in_function_epilogue_p): Likewise.
	(mips32_in_function_epilogue_p): Likewise.
	(mips_about_to_return): Likewise.
	(mips_insn16_frame_cache): Pass architecture to mips16_scan_prologue.
	(mips_insn32_frame_cache): Pass architecture to mips32_scan_prologue.
	(mips_skip_prologue): Pass architecture to mips16_scan_prologue
	and mips32_scan_prologue.
	(mips_in_function_epilogue_p): Pass architecture to
	mips16_in_function_epilogue_p and
	mips32_in_function_epilogue_p.
	(heuristic_proc_start): Pass architecture to mips_fetch_instruction
	and mips_about_to_return.
	(mips_skip_mips16_trampoline_code): Pass architecture to
	mips_fetch_instruction.
	(fetch_mips_16): Add GDBARCH parameter.
	(mips16_next_pc): Pass architecture to fetch_mips_16.
	(extended_mips16_next_pc): Pass architecture to unpack_mips16 and
	fetch_mips_16.

	* objc-lang.c (read_objc_method, read_objc_methlist_nmethods,
	read_objc_methlist_method, read_objc_object, read_objc_super,
	read_objc_class): Add GDBARCH parameter.
	(find_implementation_from_class): Add GDBARCH parameter, pass
	to read_objc_class, read_objc_methlist_nmethods, and
	read_objc_methlist_method.
	(find_implementation): Add GDBARCH parameter, pass to
	read_objc_object and find_implementation_from_class.
	(resolve_msgsend, resolve_msgsend_stret): Pass architecture
	to find_implementation.
	(resolve_msgsend_super, resolve_msgsend_super_stret): Pass
	architecture to read_objc_super and find_implementation_from_class.

	* ppc64-linux-tdep.c (ppc64_desc_entry_point): Add GDBARCH parameter.
	(ppc64_standard_linkage1_target, ppc64_standard_linkage2_target,
	ppc64_standard_linkage3_target): Pass architecture to
	ppc64_desc_entry_point.
	* rs6000-tdep.c (bl_to_blrl_insn_p): Add BYTE_ORDER parameter.
	(skip_prologue): Pass byte order to bl_to_blrl_insn_p.
	(rs6000_fetch_instruction): Add GDBARCH parameter.
	(rs6000_skip_stack_check): Add GDBARCH parameter, pass to
	rs6000_fetch_instruction.
	(skip_prologue): Pass architecture to rs6000_fetch_instruction.

	* remote-mips.c (mips_store_word): Return old_contents as host
	integer value instead of target bytes.

	* s390-tdep.c (struct s390_prologue_data): Add BYTE_ORDER member.
	(s390_analyze_prologue): Initialize it.
	(extend_simple_arg): Add GDBARCH parameter.
	(s390_push_dummy_call): Pass architecture to extend_simple_arg.

	* scm-lang.c (scm_get_field): Add BYTE_ORDER parameter.
	* scm-lang.h (scm_get_field): Add BYTE_ORDER parameter.
	(SCM_CAR, SCM_CDR): Pass SCM_BYTE_ORDER to scm_get_field.
	* scm-valprint.c (scm_scmval_print): Likewise.
	(scm_scmlist_print, scm_ipruk, scm_scmval_print): Define
	SCM_BYTE_ORDER.

	* sh64-tdep.c (look_for_args_moves): Add GDBARCH parameter.
	(sh64_skip_prologue_hard_way): Add GDBARCH parameter, pass to
	look_for_args_moves.
	(sh64_skip_prologue): Pass architecture to
	sh64_skip_prologue_hard_way.
	* sh-tdep.c (sh_analyze_prologue): Add GDBARCH parameter.
	(sh_skip_prologue): Pass architecture to sh_analyze_prologue.
	(sh_frame_cache): Likewise.

	* solib-irix.c (extract_mips_address): Add GDBARCH parameter.
	(fetch_lm_info, irix_current_sos, irix_open_symbol_file_object):
	Pass architecture to extract_mips_address.

	* sparc-tdep.h (sparc_fetch_wcookie): Add GDBARCH parameter.
	* sparc-tdep.c (sparc_fetch_wcookie): Add GDBARCH parameter.
	(sparc_supply_rwindow, sparc_collect_rwindow): Pass architecture
	to sparc_fetch_wcookie.
	(sparc32_frame_prev_register): Likewise.
	* sparc64-tdep.c (sparc64_frame_prev_register): Likewise.
	* sparc32nbsd-tdep.c (sparc32nbsd_sigcontext_saved_regs): Likewise.
	* sparc64nbsd-tdep.c (sparc64nbsd_sigcontext_saved_regs): Likewise.

	* spu-tdep.c (spu_analyze_prologue): Add GDBARCH parameter.
	(spu_skip_prologue): Pass architecture to spu_analyze_prologue.
	(spu_virtual_frame_pointer): Likewise.
	(spu_frame_unwind_cache): Likewise.
	(info_spu_mailbox_list): Add BYTE_ORER parameter.
	(info_spu_mailbox_command): Pass byte order to info_spu_mailbox_list.
	(info_spu_dma_cmdlist): Add BYTE_ORER parameter.
	(info_spu_dma_command, info_spu_proxydma_command): Pass byte order
	to info_spu_dma_cmdlist.

	* symfile.c (read_target_long_array): Add GDBARCH parameter.
	(simple_read_overlay_table, simple_read_overlay_region_table,
	simple_overlay_update_1): Pass architecture to read_target_long_array.

	* v850-tdep.c (v850_analyze_prologue): Add GDBARCH parameter.
	(v850_frame_cache): Pass architecture to v850_analyze_prologue.

	* xstormy16-tdep.c (xstormy16_analyze_prologue): Add GDBARCH
	parameter.
	(xstormy16_skip_prologue, xstormy16_frame_cache): Pass architecture
	to xstormy16_analyze_prologue.
	(xstormy16_resolve_jmp_table_entry): Add GDBARCH parameter.
	(xstormy16_find_jmp_table_entry): Likewise.
	(xstormy16_skip_trampoline_code): Pass architecture to
	xstormy16_resolve_jmp_table_entry.
	(xstormy16_pointer_to_address): Likewise.
	(xstormy16_address_to_pointer): Pass architecture to
	xstormy16_find_jmp_table_entry.

	* xtensa-tdep.c (call0_track_op): Add GDBARCH parameter.
	(call0_analyze_prologue): Add GDBARCH parameter, pass to
	call0_track_op.
	(call0_frame_cache): Pass architecture to call0_analyze_prologue.
	(xtensa_skip_prologue): Likewise.
@
text
@d1356 2
a1357 1
  free_all_values ();
@


1.155
log
@	* defs.h (strlen_paddr, paddr, paddr_nz): Remove.
	(paddress): Add GDBARCH parameter.
	* utils.c (strlen_paddr, paddr, paddr_nz): Remove.
	(paddress): Add GDBARCH parameter, use it instead of current_gdbarch.
	* ui-out.h (ui_out_field_core_addr): Add GDBARCH parameter.
	* ui-out.c (ui_out_field_core_addr): Add GDBARCH parameter,
	use it instead of current_gdbarch.

	Update calls to ui_out_field_core_addr to pass architecture:
	* ada-lang.c (print_one_exception): Update.
	* breakpoint.c (print_one_breakpoint_location,
	print_one_exception_catchpoint): Update.
	* disasm.c (dump_insns): Update.
	* darwin-nat-info.c (darwin_debug_regions_recurse): Update.
	* mi/mi-main.c (mi_cmd_data_read_memory): Update.
	* mi/mi-symbol-cmds.c: Include "objfiles.h".
	(mi_cmd_symbol_list_lines): Update.
	* stack.c (print_frame_info, print_frame): Update.

	Update callers of paddress to pass architecture:
	* ada-tasks.c (info_task): Update.
	* ada-valprint.c (ada_val_print_1): Update.
	* annotate.c (annotate_source, annotate_frame_begin): Update.
	* breakpoint.c (insert_bp_location, describe_other_breakpoints,
	mention): Update.
	* cli/cli-cmds.c (edit_command, list_command, print_disassembly):
	Update.
	* corefile.c (memory_error): Update.
	* c-valprint.c (print_function_pointer_address, c_val_print): Update.
	* disasm.c (dis_asm_print_address): Update.
	* exec.c (print_section_info): Update.
	* f-valprint.c (f_val_print): Update.
	* infcmd.c: Include "arch-utils.h".
	(jump_command, program_info): Update.
	* linux-fork.c: Include "arch-utils.h".
	(info_forks_command): Update.
	* m2-valprint.c (print_function_pointer_address,
	print_unpacked_pointer, print_variable_at_address,
	m2_val_print): Update.
	* m32r-rom.c (m32r_load_section, m32r_load, m32r_upload_command):
	Update.
	* printcmd.c (print_address, print_address_demangle, address_info):
	Update.
	* p-valprint.c (pascal_val_print): Update.
	* source.c: Include "arch-utils.h".
	(line_info): Update.
	* stack.c (frame_info, print_block_frame_labels): Update.
	* symfile.c (add_symbol_file_command, list_overlays_command): Update.
	* symmisc.c (dump_msymbols, dump_psymtab, dump_symtab_1,
	print_symbol, print_partial_symbols, maintenance_info_psymtabs,
	maintenance_check_symtabs): Update.
	* symtab.c (find_pc_sect_symtab): Update.
	* target.c (deprecated_debug_xfer_memory): Update.
	* tracepoint.c (scope_info): Update.
	* tui/tui-stack.c (tui_make_status_line): Update.
	* valprint.c (val_print_string): Update.

	Update callers of paddr_nz to use paddress instead (keeping
	user-visible output identical):
	* alpha-tdep.c (alpha_heuristic_proc_start): Update.
	* amd64-tdep.c (fixup_riprel, amd64_displaced_step_copy_insn,
	amd64_displaced_step_fixup): Update.
	* arch-utils.c (simple_displaced_step_copy_insn): Update.
	* auxv.c (fprint_target_auxv): Update.
	* breakpoint.c (insert_single_step_breakpoint): Update.
	* buildsym.c (finish_block): Update.
	* cli/cli-dump.c (restore_section_callback): Update.
	* fbsd-nat.c (fbsd_find_memory_regions): Update.
	* frame.c (frame_unwind_register_value): Update.
	* gcore.c (gcore_create_callback): Update.
	* hppa-tdep.c (hppa_frame_cache, hppa_skip_trampoline_code): Update.
	* i386-tdep.c (i386_displaced_step_fixup, i386_record_modrm,
	i386_record_lea_modrm_addr, i386_record_lea_modrm,
	i386_process_record): Update.
	* ia64-tdep.c (ia64_frame_this_id, ia64_sigtramp_frame_this_id,
	ia64_libunwind_frame_this_id, ia64_libunwind_sigtramp_frame_this_id,
	ia64_dummy_id, ia64_access_reg, ia64_access_rse_reg): Update.
	* infrun.c (displaced_step_prepare, displaced_step_fixup,
	handle_inferior_event, insert_step_resume_breakpoint_at_sal,
	insert_longjmp_resume_breakpoint): Update.
	* linux-nat.c (linux_nat_find_memory_regions): Update.
	* linux-record.c (record_linux_system_call): Update.
	* mips-tdep.c (heuristic_proc_start, mips_eabi_push_dummy_call,
	mips_n32n64_push_dummy_call, mips_o32_push_dummy_call,
	mips_o64_push_dummy_call): Update.
	* monitor.c (monitor_error, monitor_remove_breakpoint): Update.
	* record.c (record_arch_list_add_mem, record_wait,
	record_xfer_partial): Update.
	* remote-mips.c (mips_fetch_word, mips_check_lsi_error,
	mips_common_breakpoint): Update.
	* remote-sim.c (gdbsim_xfer_inferior_memory): Update.
	* rs6000-tdep.c (ppc_displaced_step_fixup): Update.
	* solib-som.c (som_current_sos): Update.
	* symfile.c (load_progress, generic_load): Update.
	* symfile-mem.c (add_vsyscall_page): Update.
	* valops.c (value_fetch_lazy): Update.
	* windows-tdep.c (windows_xfer_shared_library): Update.

	Update callers of paddr_nz to use paddress instead (changing
	user-visible output to make it more correct):
	* dwarf2loc.c (locexpr_describe_location): Update.
	* ia64-tdep.c (ia64_memory_insert_breakpoint,
	ia64_memory_remove_breakpoint): Update.
	* jv-valprint.c (java_value_print): Update.
	* m32c-tdep.c (m32c_m16c_address_to_pointer): Update.
	* monitor.c (monitor_read_memory): Update.

	Update callers of paddr to use paddress instead (changing
	user-visible output to make it more correct):
	* arm-tdep.c (arm_push_dummy_call): Update.
	* breakpoint.c (insert_bp_location, create_thread_event_breakpoint,
	create_breakpoint): Update.
	* darwin-nat-info.c (darwin_debug_regions): Update.
	* dcache.c (dcache_info): Update.
	* dsrec.c (load_srec, make_srec): Update.
	* dwarf2-frame.c (dwarf2_restore_rule, execute_cfa_program,
	dwarf2_frame_cache): Update.
	* gcore.c (gcore_copy_callback): Update.
	* gnu-nat.c (gnu_xfer_memory): Update.
	* mips-linux-nat.c (mips_show_dr): Update.
	* monitor.c (monitor_write_memory, monitor_insert_breakpoint,
	monitor_remove_breakpoint): Update.
	* remote.c (compare_sections_command): Update.
	* remote-m32r-sdi.c (m32r_xfer_memory, m32r_insert_breakpoint,
	m32r_remove_breakpoint, m32r_insert_watchpoint,
	m32r_remove_watchpoint): Update.
	* sol-thread.c (info_cb): Update.
	* symfile.c (load_progress): Update.

	Update callers of paddress or paddr_nz to use hex_string instead
	(changes output of internal/error/debug messages only):
	* dwarf2read.c (dump_die_shallow): Update.
	* frame.c (fprint_field, fprint_frame, frame_pc_unwind,
	get_frame_func, create_new_frame): Update.
	* hppa-tdep.c (find_unwind_entry, unwind_command): Update.
	* ia64-tdep.c (get_kernel_table, ia64_find_proc_info_x,
	ia64_get_dyn_info_list): Update.
	* maint.c (maintenance_translate_address): Update.
	* mi/mi-cmd-var.c (mi_cmd_var_create): Update.
	* target.c (target_flash_erase): Update.

	Update callers of paddr/paddr_nz to use phex/phex_nz instead,
	using an appropriate address size.  Remove use of strlen_paddr.
	* exec.c (exec_files_info): Update.
	* i386-nat.c (i386_show_dr): Update.
	* remote.c (remote_flash_erase): Update.
	* m32r-rom.c (m32r_load_section): Update.
	* monitor.c (monitor_vsprintf, monitor_store_register): Update.
	* remote.c (remote_check_symbols, remote_search_memory): Update.
	* remote-mips.c (mips_request, mips_common_breakpoint): Update.
	* scm-valprint.c (scm_ipruk, scm_scmval_print): Update.
	* sh64-tdep.c (sh64_show_media_regs, sh64_show_compact_regs): Update.
	* sh-tdep.c (sh_generic_show_regs, sh3_show_regs, sh2e_show_regs,
	sh2a_show_regs, sh2a_nofpu_show_regs, sh3e_show_regs,
	sh3_dsp_show_regs, sh4_show_regs, sh4_nofpu_show_regs,
	sh_dsp_show_regs): Update.
	* xcoffsolib.c (sharedlibrary_command): Update.


	* maint.c (maint_print_section_info): Add ADDR_SIZE parameter.
	Use hex_string_custom instead of paddr.
	(print_bfd_section_info): Pass address size.
	(print_objfile_section_info): Likewise.

	* annotate.h (annotate_source): Add GDBARCH parameter.
	(annotate_frame_begin): Likewise.
	* annotate.c (annotate_source): Add GDBARCH parameter.
	(annotate_frame_begin): Likewise.
	* source.c (identify_source_line): Update call to annotate_source.
	* stack.c (print_frame_info, print_frame): Update call to
	annotate_frame_begin.

	* breakpoint.c (describe_other_breakpoints): Add GDBARCH parameter.
	(create_breakpoint, create_ada_exception_breakpoint): Update call.

	* stack.c (print_block_frame_labels): Add GDBARCH parameter.
	(print_frame_label_vars): Update call.

	* symmisc.c (print_partial_symbols): Add GDBARCH parameter.
	(dump_psymtab): Update call to print_partial_symbols.
	(struct print_symbol_args): Add GDBARCH member.
	(dump_symtab_1): Set print_symbol_args architecture member.
	(print_symbol): Use it.

	* windows-tdep.h (windows_xfer_shared_library): Add GDBARCH
	parameter.
	* windows-tdep.c (windows_xfer_shared_library): Likewise.
	* i386-cygwin-tdep.c (struct cpms_data): Add GDBARCH member.
	(core_process_module_section): Pass architecture from cpms_data to
	windows_xfer_shared_library.
	(windows_core_xfer_shared_libraries): Initialize cmps_data
	architecture member.
	* windows-nat.c (windows_xfer_shared_libraries): Pass architecture
	to windows_xfer_shared_library.

	* defs.h (print_address): Add GDBARCH parameter.
	* printcmd.c (print_address): Add GDBARCH parameter.
	(print_scalar_formatted, do_examine): Update call.
	* findcmd.c (find_command): Update call.
	* tracepoint.c: Include "arch-utils.h".
	(trace_find_line_command): Update call.
	* tui/tui-disasm.c (tui_disassemble): Update call.

	* value.h (print_address_demangle): Add GDBARCH parameter.
	* printcmd.c (print_address_demangle): Add GDBARCH parameter.
	* c-valprint.c (print_function_pointer_address, c_val_print):
	Update call.
	* f-valprint.c (f_val_print): Update call.
	* gnu-v3-abi.c (gnuv3_print_method_ptr): Update call.
	* jv-valprint.c (java_val_print): Update call.
	* m2-valprint.c (print_function_pointer_address, m2_val_print):
	Update call.
	* p-valprint.c (pascal_val_print): Update call.

	* disasm.c (gdb_disassemble_info): Install architecture into
	di.application_data field.

testsuite/ChangeLog:

	* gdb.threads/tls-shared.exp: Update to locexpr_describe_location
	change to prefix TLS offset in hex with 0x.

doc/ChangeLog:

	* gdbint.texinfo (Item Output Functions): Update signature
	for ui_out_field_core_addr.
@
text
@d1033 2
d1092 1
a1092 1
  store_signed_integer (buffer, word_size, value);
@


1.154
log
@	* arch-utils.c (selected_byte_order): Return target_byte_order_user.
	(show_endian): Use target_byte_order_user if specified; otherwise
	use get_current_arch () instead of current_gdbarch.
	(show_architecture): Use set_architecture_string if specified;
	otherwise use get_current_arch () instead of current_gdbarch.
	(get_current_arch): New function.
	* arch-utils.h (get_current_arch): Add prototype.

	* osabi.c (show_osabi): Use get_current_arch () instead of
	current_gdbarch.

	* findcmd.c: Include "arch-utils.h".
	(parse_find_args): Add BIG_P argument.  Use it instead of byte order
	of current_gdbarch.
	(find_command): Use get_current_arch () instead of current_gdbarch.
	Pass byte order to parse_find_args.

	* maint.c: Include "arch-utils.h".
	(maintenance_print_architecture): Use get_current_arch () instead
	of current_gdbarch.

	* reggroups.c: Include "arch-utils.h".
	(maintenance_print_reggroups): Use get_current_arch () instead
	of current_gdbarch.

	* symfile.c: Include "arch-utils.h".
	(overlay_load_command): Use get_current_arch () instead of
	current_gdbarch.

	* value.c: Include "arch-utils.h".
	(show_convenience): Use get_current_arch () instead of
	current_gdbarch.

	* tui/tui-regs.c: Include "arch-utils.h".
	(tui_reg_next_command): Use get_current_arch () instead of
	current_gdbarch.

	* mi/mi-main.c: Include "arch-utils.h".
	(mi_cmd_data_read_memory): Use get_current_arch () instead of
	current_gdbarch.

	* parse.c: Include "arch-utils.h".
	(parse_exp_in_context): Use get_current_arch () instead of
	current_gdbarch.
@
text
@d938 1
a938 1
  ui_out_field_core_addr (uiout, "addr", addr);
d941 6
a946 4
  ui_out_field_core_addr (uiout, "next-row", addr + word_size * nr_cols);
  ui_out_field_core_addr (uiout, "prev-row", addr - word_size * nr_cols);
  ui_out_field_core_addr (uiout, "next-page", addr + total_bytes);
  ui_out_field_core_addr (uiout, "prev-page", addr - total_bytes);
d966 1
a966 1
	ui_out_field_core_addr (uiout, "addr", addr + row_byte);
@


1.153
log
@	* gdbtypes.h (builtin_type_int0, builtin_type_int8, builtin_type_uint8,
	builtin_type_int16, builtin_type_uint16, builtin_type_int32,
	builtin_type_uint32, builtin_type_int64, builtin_type_uint64,
	builtin_type_int128, builtin_type_uint128): Remove.
	(struct builtin_type): New members builtin_int0, builtin_int8,
	builtin_uint8, builtin_int16, builtin_uint16, builtin_int32,
	builtin_uint32, builtin_int64, builtin_uint64, builtin_int128,
	and builtin_uint128.
	* gdbtypes.c (builtin_type_int0, builtin_type_int8, builtin_type_uint8,
	builtin_type_int16, builtin_type_uint16, builtin_type_int32,
	builtin_type_uint32, builtin_type_int64, builtin_type_uint64,
	builtin_type_int128, builtin_type_uint128): Remove.
	(_initialize_gdbtypes): Do not initialize them.
	(gdbtypes_post_init): Initialize fixed-size integer types.

	* dwarf2expr.c (unsigned_address_type, signed_address_type): Add
	GDBARCH argument.  Return platform-specific type.
	(dwarf2_read_address, execute_stack_op): Update calls.

	* target-descriptions.c (tdesc_gdb_type): Use platform-specific types
	instead of global builtin_int_... variables.
	* mi/mi-main.c (mi_cmd_data_read_memory): Likewise.
	* printcmd.c (do_examine): Likewise.
	* jv-exp.y (parse_number): Likewise.

	* alpha-tdep.c (alpha_register_type, alpha_push_dummy_call,
	alpha_store_return_value): Likewise.
	* amd64-linux-tdep.c (amd64_linux_register_type): Likewise.
	* amd64-tdep.c (amd64_register_type): Likewise.
	* arm-tdep.c (arm_register_type): Likewise.
	* avr-tdep.c (avr_register_type): Likewise.
	* cris-tdep.c (cris_register_type, crisv32_register_type): Likewise.
	* frv-tdep.c (frv_register_type): Likewise.
	* h8300-tdep.c h8300_register_type): Likewise.
	* hppa-tdep.c (hppa64_push_dummy_call, hppa32_register_type,
	hppa64_register_type): Likewise.
	* i386-tdep.c (i386_mmx_type, i386_sse_type): Likewise.
	* iq2000-tdep.c (iq2000_register_type): Likewise.
	* lm32-tdep.c (lm32_register_type, lm32_push_dummy_call): Likewise.
	* m32r-tdep.c (m32r_register_type): Likewise.
	* m68hc11-tdep.c (m68hc11_register_type, m68hc11_pseudo_register_read,
	m68hc11_pseudo_register_write): Likewise.
	* m68k-tdep.c (m68k_register_type): Likewise.
	* m88k-tdep.c (m88k_register_type, m88k_store_arguments): Likewise.
	* mep-tdep.c (mep_register_type): Likewise.
	* mips-tdep.c (mips_register_type, mips_pseudo_register_type,
	mips_print_fp_register): Likewise.
	* moxie-tdep.c (moxie_register_type): Likewise.
	* mt-tdep.c (mt_copro_register_type, mt_register_type): Likewise.
	* rs6000-tdep.c (rs6000_builtin_type_vec64,
	rs6000_builtin_type_vec128): Likewise.
	* score-tdep.c (score_register_type): Likewise.
	* sparc-tdep.c (sparc32_register_type, sparc32_store_arguments):
	Likewise.
	* sparc64-tdep.c (sparc64_register_type, sparc64_store_arguments):
	Likewise.
	* spu-tdep.c (spu_builtin_type_vec128, spu_register_type): Likewise.
	* v850-tdep.c (v850_register_type): Likewise.
	* xstormy16-tdep.c (xstormy16_register_type): Likewise.
	* xtensa-tdep.c (xtensa_register_type): Likewise.

	* mt-tdep.c (struct gdbarch_tdep): New data structure.
	(mt_gdbarch_init): Alloc TDEP structures.
	(mt_register_type): Cache coprocessor type in TDEP instead of
	static global variable.

	* xtensa-tdep.h (struct gdbarch_tdep): Add type_entries member.
	* xtensa-tdep.c (type_entries): Remove.
	(xtensa_register_type): Cache fixed-size types in TDEP instead
	of in global variable.
@
text
@d26 1
d832 1
a832 1
  struct gdbarch *gdbarch = current_gdbarch;
@


1.152
log
@ChangeLog:

	* mi/mi-main.c (mi_cmd_data_list_register_names): Use selected
	frame architecture instead of current_gdbarch.
	(mi_cmd_data_list_changed_registers): Likewise.
	(mi_cmd_data_list_register_values): Likewise.  Pass selected
	frame to get_register.
	(get_register): Add FRAME argument, use it as frame to retrieve
	registers from (instead of selected frame).  Use frame architecture
	instead of current_gdbarch.
	(mi_cmd_data_write_register_values): Use current regcache
	architecture instead of current_gdbarch.

testsuite/ChangeLog:

	* gdb.mi/gdb680.exp: Update test for error message.
@
text
@d831 1
d888 1
a888 1
      word_type = builtin_type_int8;
d892 1
a892 1
      word_type = builtin_type_int16;
d896 1
a896 1
      word_type = builtin_type_int32;
d900 1
a900 1
      word_type = builtin_type_int64;
d904 1
a904 1
      word_type = builtin_type_int8;
@


1.151
log
@	* mi/mi-main.c (mi_cmd_data_read_memory): Dispatch
	TARGET_OJECT_MEMORY reads to the topmost target, not the the
	flattened current_target.
@
text
@d94 1
a94 1
static void get_register (int regnum, int format);
d449 2
d461 3
a463 2
  numregs = gdbarch_num_regs (current_gdbarch)
	    + gdbarch_num_pseudo_regs (current_gdbarch);
d473 2
a474 2
	  if (gdbarch_register_name (current_gdbarch, regnum) == NULL
	      || *(gdbarch_register_name (current_gdbarch, regnum)) == '\0')
d478 1
a478 2
				 gdbarch_register_name
				   (current_gdbarch, regnum));
d489 2
a490 2
      if (gdbarch_register_name (current_gdbarch, regnum) == NULL
	  || *(gdbarch_register_name (current_gdbarch, regnum)) == '\0')
d494 1
a494 1
			     gdbarch_register_name (current_gdbarch, regnum));
d504 1
d523 2
a524 2
  numregs = gdbarch_num_regs (current_gdbarch)
	    + gdbarch_num_pseudo_regs (current_gdbarch);
d534 2
a535 2
	  if (gdbarch_register_name (current_gdbarch, regnum) == NULL
	      || *(gdbarch_register_name (current_gdbarch, regnum)) == '\0')
d552 2
a553 2
	  && gdbarch_register_name (current_gdbarch, regnum) != NULL
	  && *gdbarch_register_name (current_gdbarch, regnum) != '\000')
d603 2
a614 3
  numregs = gdbarch_num_regs (current_gdbarch)
	    + gdbarch_num_pseudo_regs (current_gdbarch);

d620 4
d632 2
a633 2
	  if (gdbarch_register_name (current_gdbarch, regnum) == NULL
	      || *(gdbarch_register_name (current_gdbarch, regnum)) == '\0')
d637 1
a637 1
	  get_register (regnum, format);
d649 2
a650 2
	  && gdbarch_register_name (current_gdbarch, regnum) != NULL
	  && *gdbarch_register_name (current_gdbarch, regnum) != '\000')
d654 1
a654 1
	  get_register (regnum, format);
d665 1
a665 1
get_register (int regnum, int format)
d667 1
d680 1
a680 2
  frame_register (get_selected_frame (NULL), regnum, &optim, &lval, &addr,
		  &realnum, buffer);
d692 1
a692 1
      for (j = 0; j < register_size (current_gdbarch, regnum); j++)
d694 2
a695 2
	  int idx = gdbarch_byte_order (current_gdbarch) == BFD_ENDIAN_BIG ? j
	  : register_size (current_gdbarch, regnum) - 1 - j;
d707 1
a707 1
      val_print (register_type (current_gdbarch, regnum), buffer, 0, 0,
d720 2
d731 3
a733 2
  numregs = gdbarch_num_regs (current_gdbarch)
	    + gdbarch_num_pseudo_regs (current_gdbarch);
d754 2
a755 2
	  && gdbarch_register_name (current_gdbarch, regnum)
	  && *gdbarch_register_name (current_gdbarch, regnum))
d763 1
a763 1
	  regcache_cooked_write_signed (get_current_regcache (), regnum, value);
@


1.150
log
@	* mi/mi-main.c (mi_cmd_exec_continue)
	(mi_cmd_exec_interrupt): Adjust parsing of thread group
	ids to current reality, where they don't have any 'p' prefix.
@
text
@d918 5
a922 2
  nr_bytes = target_read_until_error (&current_target, TARGET_OBJECT_MEMORY, 
				      NULL, mbuf, addr, total_bytes);
@


1.149
log
@gdb

2009-05-27  Vladimir Prus  <vladimir@@codesourcery.com>
	    Tom Tromey  <tromey@@redhat.com>
	    Thiago Jung Bauermann  <bauerman@@br.ibm.com>

	* mi/mi-main.c (mi_cmd_list_features): List "python" feature.
	* varobj.h (varobj_set_visualizer): Declare.
	(varobj_get_display_hint): Likewise.
	(varobj_update_result_t) <children_changed, value_installed>: New
	fields.
	* mi/mi-cmds.c (mi_cmds): Add var-set-visualizer.
	* mi/mi-cmds.h (mi_cmd_var_set_visualizer,
	mi_cmd_var_set_child_range): Declare.
	* mi/mi-cmd-var.c (mi_cmd_var_set_visualizer): New function.
	(mi_cmd_var_list_children): Emit display hint.
	(varobj_update_one): Emit display hint.  Handle dynamic children.
	* python/python.c (GdbMethods): Add "default_visualizer".
	* python/python-internal.h (apply_varobj_pretty_printer,
	gdbpy_get_varobj_pretty_printer, gdbpy_get_display_hint):
	Declare.
	(gdbpy_default_visualizer): Likewise.
	* varobj.c: Include python.h, python-internal.h.
	(PyObject): New typedef.
	(struct varobj) <children_requested, pretty_printer>: New fields.
	(varobj_create): Call install_default_visualizer.
	(instantiate_pretty_printer): New function.
	(varobj_set_display_format): Update.
	(varobj_get_display_hint): New function.
	(update_dynamic_varobj_children): New function.
	(varobj_get_num_children): Handle dynamic children.
	(varobj_list_children): Likewise.
	(install_new_value): Likewise.
	(varobj_add_child): New function.
	(install_visualizer): Likewise.
	(install_default_visualizer): Likewise.
	(varobj_set_visualizer): Likewise.
	(varobj_update): Handle dynamic children.
	(create_child): Use create_child_with_value.
	(create_child_with_value): New function.
	(value_get_print_value): Call pretty printer.  Add value_formatter
	argument.
	(c_value_of_variable): Update.
	(varobj_invalidate): Always free all_rootvarobj.
	* python/python-prettyprint.c (apply_varobj_pretty_printer): New
	function.
	(gdbpy_get_varobj_pretty_printer): Likewise.
	(gdbpy_default_visualizer): Likewise.

gdb/doc

2009-05-27  Tom Tromey  <tromey@@redhat.com>

	* gdb.texinfo (GDB/MI Miscellaneous Commands): Document "python"
	feature.
	(GDB/MI Variable Objects): Document -var-set-visualizer.

gdb/testsuite

2009-05-27  Tom Tromey  <tromey@@redhat.com>
	    Thiago Jung Bauermann  <bauerman@@br.ibm.com>

	* lib/mi-support.exp (mi_varobj_update_dynamic): New proc.
	(mi_child_regexp): Likewise.
	(mi_list_varobj_children_range): Likewise.
	(mi_get_features): Likewise.
	(mi_list_varobj_children): Rewrite.
	* gdb.python/python-mi.exp: New file.
@
text
@d208 1
a208 1
      pid = atoi (argv[1] + 1);
d263 1
a263 1
      pid = atoi (argv[1] + 1);
@


1.148
log
@2009-05-27  Tom Tromey  <tromey@@redhat.com>
	    Paul Pluzhnikov  <ppluzhnikov@@google.com>

	* mi/mi-main.c (mi_cmd_data_evaluate_expression): Use
	value_address.
	* cli/cli-dump.c (dump_value_to_file): Use value_address.
	* valprint.c (common_val_print): Likewise.
	* v850-tdep.c (v850_push_dummy_call): Use value_address.
	* tracepoint.c (encode_actions): Use value_address.
	* printcmd.c (print_formatted): Use value_address.
	(x_command): Likewise.
	* p-valprint.c (pascal_object_print_static_field): Use
	value_address.
	* mn10300-tdep.c (mn10300_push_dummy_call): Use value_address.
	* mips-tdep.c (mips_eabi_push_dummy_call): Use value_address.
	* m32r-tdep.c (m32r_push_dummy_call): Use value_address.
	* jv-valprint.c (java_value_print): Use value_address.
	* infcall.c (find_function_addr): Use value_address.
	* gnu-v3-abi.c (gnuv3_rtti_type): Use value_address.
	* gnu-v2-abi.c (gnuv2_value_rtti_type): Use value_address.
	* frv-tdep.c (frv_push_dummy_call): Use value_address.
	* frame.c (frame_register_unwind): Use value_address.
	(frame_unwind_register_value): Likewise.
	* darwin-nat-info.c (info_mach_region_command): Use
	value_address.
	* cp-valprint.c (cp_print_static_field): Use value_address.
	* c-valprint.c (c_value_print): Use value_address.
	* breakpoint.c (update_watchpoint): Use value_address.
	(can_use_hardware_watchpoint): Likewise.
	* ada-valprint.c (ada_val_print_1): Use value_address.
	(ada_value_print): Likewise.
	* ada-tasks.c (read_fat_string_value): Use value_address.
	* jv-lang.c (java_link_class_type): Use set_value_address.
	(java_link_class_type): Likewise.
	(get_java_utf8_name): Use value_address.
	(type_from_class): Likewise.
	(java_link_class_type): Likewise.
	* findvar.c (value_of_register): Use set_value_address.
	(read_var_value): Likewise.
	(read_var_value): Likewise.
	* eval.c (evaluate_subexp_standard): Use set_value_address.
	(evaluate_subexp_standard): Use value_address.
	* dwarf2loc.c (dwarf2_evaluate_loc_desc): Use set_value_address.
	* ada-lang.c (coerce_unspec_val_to_type): Use set_value_address.
	(ada_value_primitive_packed_val): Likewise.
	(ensure_lval): Likewise.
	(thin_data_pntr): Use value_address.
	(desc_bounds): Likewise.
	(ada_value_primitive_packed_val): Likewise.
	(value_assign_to_component): Likewise.
	(ensure_lval): Likewise.
	(make_array_descriptor): Likewise.
	(ada_to_fixed_value): Likewise.
	(unwrap_value): Likewise.
	* value.c (deprecated_value_address_hack): Remove.
	(value_address): New function.
	(value_raw_address): Likewise.
	(set_value_address): Likewise.
	(value_fn_field): Use set_value_address.
	(value_from_contents_and_address): Likewise.
	(value_fn_field): Likewise.
	(allocate_value_lazy): Don't use VALUE_ADDRESS.
	(value_as_address): Use value_address.
	(value_static_field): Likewise.
	* valops.c (search_struct_field): Use set_value_address.
	(value_at): Likewise.
	(value_at_lazy): Likewise.
	(value_repeat): Likewise.
	(value_cast_structs): Use value_address.
	(value_cast): Likewise.
	(value_fetch_lazy): Likewise.
	(value_assign): Likewise.
	(value_repeat): Likewise.
	(address_of_variable): Likewise.
	(value_coerce_array): Likewise.
	(value_coerce_function): Likewise.
	(value_addr): Likewise.
	(search_struct_field): Likewise.
	(search_struct_method): Likewise.
	(find_method_list): Likewise.
	(value_struct_elt_for_reference): Likewise.
	(value_full_object): Likewise.
	* jv-valprint.c (java_value_print): Use set_value_address.
	* value.h (deprecated_value_address_hack): Remove.
	(VALUE_ADDRESS): Remove.
	(value_address): Declare.
	(value_raw_address): Declare.
	(set_value_address): Declare.
@
text
@d1116 4
@


1.147
log
@	Implement -exec-jump.

	* mi/mi-cmds.h (mi_cmd_exec_jump): Declare.
	* mi/mi-main.c (mi_cmd_exec_jump): New.
	* mi/mi-cmds.c (mi_cmds): Register exec-jump.
@
text
@d791 1
a791 1
	     value_embedded_offset (val), VALUE_ADDRESS (val),
@


1.146
log
@	* infrun.c (normal_stop): Use has_stack_frames instead of
	target_has_stack.
	* mi/mi-main.c (mi_execute_command): Avoid calling inferior_thread
	when there is no thread selected.
	(mi_cmd_execute): Don't special case commands that can run without
	a valid selected thread.
	* top.c (execute_command): Don't special case commands that can
	run without a valid selected thread.  Use has_stack_frames.
	* infcmd.c (ensure_valid_thread): New.
	(continue_1, step_1, jump_command, signal_command): Use it.
	(detach_command): Error out if there's no selected thread/inferior.
	* thread.c (print_thread_info): Allow having no thread selected.
	(switch_to_thread): Don't read the PC if there is no current thread.
	(do_restore_current_thread_cleanup): Don't record the current
	frame if there is no current thread.
	(make_cleanup_restore_current_thread): Don't read frame info if
	there is no selected thread.
	(_initialize_thread): Don't mark commands as
	"no_selected_thread_ok".
	* frame.c (get_current_frame): Error out if there is no valid
	selected thread.
	(has_stack_frames): Return false if there is no valid
	selected thread.
	* cli/cli-cmds.c (init_cli_cmds): Don't mark commands as
	"no_selected_thread_ok".
	* cli/cli-decode.c (set_cmd_no_selected_thread_ok)
	(get_cmd_no_selected_thread_ok): Delete.
	* cli/cli-decode.h (CMD_NO_SELECTED_THREAD_OK): Delete.
	(set_cmd_no_selected_thread_ok, get_cmd_no_selected_thread_ok):
	Delete declaration.
	* stack.c (get_selected_block): Use has_stack_frames.
@
text
@d171 7
@


1.145
log
@gdb/

	* mi/mi-interp.c (mi_interpreter_init): Attach mi_about_to_proceed
	to the about_to_proceed observer notification.
	(mi_about_to_proceed): New.
	(mi_on_resume): Only output ^running and the prompt here if the
	target was proceeded.
	* breakpoint.c (breakpoint_proceeded): New static.
	(breakpoint_about_to_proceed): New.
	(_initialize_breakpoints): Attach breakpoint_about_to_proceed to
	the about_to_proceed observer notification.
	* inferior.h (breakpoint_proceeded): Delete declaration.
	* infrun.c (clear_proceed_status): Don't set breakpoint_proceeded.
	Notify the about_to_proceed observers.
	(struct inferior_status): Delete breakpoint_proceeded member.
	(save_inferior_status): Don't save it.
	(restore_inferior_status): Don't restore it.
	* mi-main.h (mi_proceeded): Declare.
	* mi/mi-main.c (mi_cmd_execute): Clear mi_proceeded before running
	a command.

gdb/doc/

	* observer.texi (about_to_proceed): New.
@
text
@d1287 1
a1287 2
	  struct thread_info *ti = inferior_thread ();
	  int report_change;
d1291 3
a1293 2
	      report_change = !ptid_equal (previous_ptid, null_ptid)
		&& !ptid_equal (inferior_ptid, previous_ptid);
d1295 1
a1295 1
	  else
d1297 1
d1303 1
d1358 1
a1358 22
    {
      if (target_can_async_p ()
	  && target_has_execution
	  && is_exited (inferior_ptid)
	  && (strcmp (parse->command, "thread-info") != 0
	      && strcmp (parse->command, "thread-list-ids") != 0
	      && strcmp (parse->command, "thread-select") != 0
	      && strcmp (parse->command, "list-thread-groups") != 0))
	{
	  struct ui_file *stb;
	  stb = mem_fileopen ();

	  fputs_unfiltered ("Cannot execute command ", stb);
	  fputstr_unfiltered (parse->command, '"', stb);
	  fputs_unfiltered (" without a selected thread", stb);

	  make_cleanup_ui_file_delete (stb);
	  error_stream (stb);
	}

      parse->cmd->argv_func (parse->command, parse->argv, parse->argc);
    }
@


1.144
log
@	Include token in ^running notification for CLI commands.

        * mi/mi-main.c (mi_execute_command): Set current_token here.
        (mi_cmd_execute): Do not set current_token here.
@
text
@d81 4
d1154 1
@


1.143
log
@	Fix MI timings.

        * mi/mi-main.c (mi_print_timing_maybe): New.
        (captured_mi_execute_command): Simplify. Output timings to
        CLI commands, too.
        (mi_execute_async_cli_command): Do not print timings.
        * mi/mi-main.h (mi_print_timing_maybe): Declare.
        * mi/mi-interp.c (mi_on_normal_stop): Call mi_print_timing_maybe.
@
text
@d1140 1
d1146 3
d1223 2
d1319 1
d1321 1
a1321 3

  current_token = xstrdup (parse->token);
  cleanup = make_cleanup (free_current_contents, &current_token);
@


1.142
log
@	* mi/mi-main.c (mi_cmd_execute): Clean up parenthesis mess from
	previous change.
@
text
@d1142 2
a1143 1
  struct mi_timestamp cmd_finished;
a1154 2
      if (do_timings)
	current_command_ts = context->cmd_start;
a1157 3
      if (do_timings)
	timestamp (&cmd_finished);

d1173 1
a1173 4
	  /* Have to check cmd_start, since the command could be
	     -enable-timings.  */
	  if (do_timings && context->cmd_start)
	    print_diff (context->cmd_start, &cmd_finished);
d1208 2
a1209 1
		fputs_unfiltered ("\n", raw_stdout);
a1443 2
      if (do_timings)
      	print_diff_now (current_command_ts);
d1562 9
@


1.141
log
@	* mi/mi-main.c (mi_cmd_execute): Also allow -list-thread-groups
	without a live selected thread.
@
text
@d1355 1
a1355 1
	  && (is_exited (inferior_ptid))
d1358 2
a1359 2
	      && strcmp (parse->command, "thread-select") != 0)
	      && strcmp (parse->command, "list-thread-groups") != 0)
@


1.140
log
@        Updated copyright notices for most files.
@
text
@d1358 2
a1359 1
	      && strcmp (parse->command, "thread-select") != 0))
@


1.139
log
@	* target.h (target_get_osdata): Describe.
	* osdata.h (make_cleanup_osdata_free): Declare.
	* osdata.c (osdata_item_clear): Define even if HAVE_LIBEXPAT is
	not defined.
	(osdata_free_cleanup): New.
	(make_cleanup_osdata_free): New.
	(get_osdata): Fix leak.
	(info_osdata_command): Use make_cleanup_osdata_free.
	(info_processes_command): Delete.
	(_initialize_osdata): Drop undocumented "info processes" alias.
	* mi/mi-main.c (mi_cmd_list_thread_groups): Fix leak.
@
text
@d3 1
a3 1
   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008
@


1.138
log
@	Implement -list-thread-groups --available

        * Makefile.in (XMLFILES): Add osdata.dtd.
        (SFILES): Add osdata.c.
        (COMMON_OBS): Add osdata.o.
        * linux-nat.c: Include pwd.h, sys/types.h, gdb_dirent.h and xml-support.h.
        (linux_nat_xfer_osdata): New function.
        (linux_xfer_partial): Handle TARGET_OBJECT_OSDATA.
        * osdata.c: New file.
        * osdata.h: New file.
        * remote.c (PACKET_qXfer_osdata): New packet enum.
        (remote_protocol_features): Add "qXfer:osdata:read".
        (remote_read_qxfer): Handle TARGET_OBJECT_OSDATA.
        (extended_remote_can_run): New.
        (init_extended_remote_ops): Set to_can_run to
        extended_remote_can_run.
        (_initialize_remote): Add packet config command for
        "qXfer:osdata:read".
        * xml-support.c (obstack_xml_printf): New function.
        * xml-support.h (obstack_xml_printf): Declare.
        * target.c (target_get_osdata): New function.
        * target.h (enum target_object): Add TARGET_OBJECT_OSDATA.
        (target_os_data): Declare.
        * features/osdata.dtd: New file.
        * mi/mi-main.c (mi_list_thread_groups): Handle the --available
        option.
@
text
@d380 1
a380 1
  back_to = make_cleanup (&null_cleanup, NULL);
d388 1
a388 1
      struct osdata *data = get_osdata ("processes");
d392 3
d396 1
a396 1
      
d398 2
a399 2
          VEC_iterate (osdata_item_s, data->items,
                       ix_items, item);
d402 1
a402 1
	  struct cleanup *back_to = 
d415 2
a416 2
  
	  do_cleanups (back_to);	  
@


1.137
log
@	Implement =thread-selected notification.

        * mi/mi-common.h (struct mi_interp): New, moved from ...
        * mi/mi-interp.c: ...here.
        * mi/mi-main.c (mi_execute_command): If the thread changed
        as result of command, report that.
@
text
@d51 1
d382 35
a416 1
  if (id)
@


1.136
log
@	Implement continue/interrupt of thread groups.

        * mi/mi-main.c (proceed_thread_callback): New.
        (mi_cmd_exec_continue): If --thread-group is specified, resume all
        threads in that group.
        (interrupt_thread_callback): New.
        (mi_cmd_exec_interrupt): If --thread-group is specified, interrupt
        all threads in that group.
@
text
@d47 1
d1207 1
d1232 35
@


1.135
log
@	Implement '-target-detach pid'.

        * infcmd.c (detach_command): Make nonstatic.
        * inferior.h (detach_command): Declare.
        * mi/mi-cmds.c (mi_cmds): Don't route -target-detach via CLI.
        * mi/mi-cmds.h (mi_cmd_target_detach): Declare.
        * mi/mi-main.c (find_thread_of_process, mi_cmd_target_detach): New.
@
text
@d165 17
d189 14
d204 16
a219 1
    error ("Usage: -exec-continue [--all]");
d241 12
d254 3
a256 1
      interrupt_target_1 (1);
d259 1
a259 1
    error ("Usage: -exec-interrupt [--all]");
@


1.134
log
@	Implement -list-thread-groups.

        * thread.c (print_thread_info): New parameter pid, to print
        threads of specific process.
        * gdbthread.h (print_thread_info): New parameter pid.
        * mi/mi-cmds.c (mi_cmds): Register -list-thread-groups.
        * mi/mi-cmds.h (mi_cmd_list_thread_groups): New.
        * mi/mi-main.c (mi_cmd_thread_info): Adjust.
        (print_one_process, mi_cmd_list_thread_groups): New.
@
text
@d202 36
@


1.133
log
@gdb

	PR mi/2549:
	* mi/mi-main.c (get_register): Use get_formatted_print_options.

gdb/testsuite

2008-11-14  Nick Roberts  <nickrob@@snap.net.nz>

	* gdb.mi/gdb2549.exp: New file.
@
text
@d49 1
d249 49
a297 1
  print_thread_info (uiout, thread);
@


1.132
log
@gdb
	* varobj.c (value_get_print_value): Include valprint.h.
	(value_get_print_value): Use get_formatted_print_options.
	* value.h (struct value_print_options): Declare.
	(value_print, val_print, common_val_print, val_print_string):
	Update.
	* value.c: Include valprint.h.
	(show_values): Use get_user_print_options.
	(show_convenience): Likewise.
	* valprint.h (prettyprint_arrays, prettyprint_structs): Don't
	declare.
	(struct value_print_options): New type.
	(vtblprint, unionprint, addressprint, objectprint, print_max,
	inspect_it, repeat_count_threshold, output_format,
	stop_print_at_null): Don't declare.
	(user_print_options, get_user_print_options,
	get_raw_print_options, get_formatted_print_options): Declare.
	(print_array_indexes_p): Don't declare.
	(maybe_print_array_index, val_print_array_elements): Update.
	* valprint.c (print_max): Remove.
	(user_print_options): New global.
	(get_user_print_options, get_raw_print_options,
	get_formatted_print_options): New functions.
	(print_array_indexes, repeat_count_threshold, stop_print_at_null,
	prettyprint_structs, prettyprint_arrays, unionprint,
	addressprint): Remove.
	(val_print): Remove format, deref_ref, pretty arguments; add
	options.  Update.
	(common_val_print): Likewise.
	(print_array_indexes_p): Remove.
	(maybe_print_array_index): Remove format, pretty arguments; add
	options.  Update.
	(val_print_array_elements): Remove format, deref_ref, pretty
	arguments; add options.  Update.
	(val_print_string): Add options argument.  Update.
	(_initialize_valprint): Use user_print_options.
	(output_format): Remove.
	(set_output_radix_1): Use user_print_options.
	* typeprint.c: Include valprint.h.
	(objectprint): Don't declare.
	(whatis_exp): Use get_user_print_options.
	* tui/tui-regs.c: Include valprint.h.
	(tui_register_format): Use get_formatted_print_options.
	* tracepoint.c: Include valprint.h.
	(addressprint): Don't declare.
	(trace_mention): Use get_user_print_options.
	(tracepoints_info): Likewise.
	* stack.c (print_frame_args): Use get_raw_print_options.
	(print_frame_info): Use get_user_print_options.
	(print_frame): Likewise.
	* sh64-tdep.c: Include valprint.h
	(sh64_do_register): Use get_formatted_print_options.
	* scm-valprint.c (scm_inferior_print): Remove format, deref_ref,
	pretty arguments; add options.
	(scm_scmlist_print): Likewise.  Update.
	(scm_scmval_print): Likewise.
	(scm_val_print): Likewise.
	(scm_value_print): Remove format, pretty arguments; add options.
	Update.
	* scm-lang.h (scm_value_print, scm_val_print, scm_scmval_print):
	Update.
	* scm-lang.c (scm_printstr): Add options argument.
	* python/python-value.c: Include valprint.h.
	(valpy_str): Use get_user_print_options.
	* printcmd.c: Include valprint.h.
	(addressprint): Don't declare.
	(inspect_it): Remove.
	(print_formatted): Remove format option; add options.  Update.
	(print_scalar_formatted): Likewise.
	(print_address_demangle): Use get_user_print_options.
	(do_examine): Use get_formatted_print_options.
	(print_command_1): Likewise.
	(output_command): Use get_formatted_print_options.
	(do_one_display): Likewise.
	(print_variable_value): Use get_user_print_options.
	* p-valprint.c (pascal_val_print): Remove format, deref_ref,
	pretty arguments; add options.  Update.
	(pascal_value_print): Remove format, pretty arguments; add
	options.  Update.
	(vtblprint, objectprint): Don't declare.
	(pascal_static_field_print): Remove.
	(pascal_object_print_value_fields): Remove format, pretty
	arguments; add options.  Update.
	(pascal_object_print_static_field): Likewise.
	(_initialize_pascal_valprint): Use user_print_options.  Update.
	* p-lang.h (pascal_val_print, pascal_value_print,
	pascal_printstr, pascal_object_print_value_fields): Update.
	(vtblprint, static_field_print): Don't declare.
	* p-lang.c (pascal_printstr): Add options argument.  Update.
	* objc-lang.c (objc_printstr): Add options argument.  Update.
	* mt-tdep.c: Include valprint.h.
	(mt_registers_info): Use get_raw_print_options.
	* mips-tdep.c: Include valprint.h.
	(mips_print_fp_register): Use get_formatted_print_options.
	(mips_print_register): Likewise.
	* mi/mi-main.c: Include valprint.h.
	(get_register): Use get_user_print_options.
	(mi_cmd_data_evaluate_expression): Likewise.
	(mi_cmd_data_read_memory): Use get_formatted_print_options.
	* mi/mi-cmd-stack.c: Include valprint.h.
	(list_args_or_locals): Use get_raw_print_options.
	* m2-valprint.c (print_function_pointer_address): Add addressprint
	argument.
	(m2_print_long_set): Remove format, pretty arguments.
	(m2_print_unbounded_array): Remove format, deref_ref, pretty
	arguments; add options.  Update.
	(print_unpacked_pointer): Remove format argument; add options.
	Now static.  Update.
	(print_variable_at_address): Remove format, deref_ref, pretty
	arguments; add options.  Update.
	(m2_print_array_contents): Likewise.
	(m2_val_print): Likewise.
	* m2-lang.h (m2_val_print): Update.
	* m2-lang.c (m2_printstr): Add options argument. Update.
	* language.h (struct value_print_options): Declare.
	(struct language_defn) <la_printstr>: Add options argument.
	<la_val_print>: Remove format, deref_ref, pretty argument; add
	options.
	<la_value_print>: Remove format, pretty arguments; add options.
	<la_print_array_index>: Likewise.
	(LA_VAL_PRINT, LA_VALUE_PRINT, LA_PRINT_STRING,
	LA_PRINT_ARRAY_INDEX): Update.
	(default_print_array_index): Update.
	* language.c (default_print_array_index): Remove format, pretty
	arguments; add options.  Update.
	(unk_lang_printstr): Add options argument.
	(unk_lang_val_print): Remove format, deref_ref, pretty arguments;
	add options.
	(unk_lang_value_print): Remove format, pretty arguments; add
	options.
	* jv-valprint.c (java_value_print): Remove format, pretty
	arguments; add options.  Update.
	(java_print_value_fields): Likewise.
	(java_val_print): Remove format, deref_ref, pretty arguments; add
	options.  Update.
	* jv-lang.h (java_val_print, java_value_print): Declare.
	* infcmd.c: Include valprint.h.
	(print_return_value): Use get_raw_print_options.
	(default_print_registers_info): Use get_user_print_options,
	get_formatted_print_options.
	(registers_info): Use get_formatted_print_options.
	* gdbtypes.h (struct value_print_options): Declare.
	(print_scalar_formatted): Update.
	* f-valprint.c (f77_print_array_1): Remove format, deref_ref,
	pretty arguments; add options.  Update.
	(f77_print_array): Likewise.
	(f_val_print): Likewise.
	* f-lang.h (f_val_print): Update.
	* f-lang.c (f_printstr): Add options argument.  Update.
	(c_value_print): Update declaration.
	* expprint.c: Include valprint.h.
	(print_subexp_standard): Use get_raw_print_options,
	get_user_print_options.
	* eval.c: Include valprint.h.
	(objectprint): Don't declare.
	(evaluate_subexp_standard): Use get_user_print_options.
	* cp-valprint.c (vtblprint, objectprint, static_field_print):
	Remove.
	(cp_print_value_fields): Remove format, pretty arguments; add
	options.  Update.
	(cp_print_value): Likewise.
	(cp_print_static_field): Likewise.
	(_initialize_cp_valprint): Use user_print_options.  Update.
	* c-valprint.c (print_function_pointer_address): Add addressprint
	argument.
	(c_val_print): Remove format, deref_ref, pretty arguments; add
	options.  Update.
	(c_value_print): Add options argument.  Update.
	* c-lang.h (c_val_print, c_value_print, c_printstr): Update.
	(vtblprint, static_field_print): Don't declare.
	(cp_print_value_fields): Update.
	* c-lang.c (c_printstr): Add options argument.  Update.
	* breakpoint.c: Include valprint.h.
	(addressprint): Don't declare.
	(watchpoint_value_print): Use get_user_print_options.
	(print_one_breakpoint_location): Likewise.
	(breakpoint_1, print_it_catch_fork, print_it_catch_vfork, mention,
	print_exception_catchpoint): Likewise.
	* auxv.c (fprint_target_auxv): Don't declare addressprint.  Use
	get_user_print_options.
	* ada-valprint.c (struct ada_val_print_args): Remove format,
	deref_ref, and pretty; add options.
	(print_optional_low_bound): Add options argument.
	(val_print_packed_array_elements): Remove format and pretty
	arguments; add options.  Update.
	(printstr): Add options argument.  Update.
	(ada_printstr): Likewise.
	(ada_val_print): Remove format, deref_ref, pretty arguments; add
	options argument.  Update.
	(ada_val_print_stub): Update.
	(ada_val_print_array): Remove format, deref_ref, pretty arguments;
	add options.  Update.
	(ada_val_print_1): Likewise.
	(print_variant_part): Likewise.
	(ada_value_print): Remove format, pretty arguments; add options.
	Update.
	(print_record): Likewise.
	(print_field_values): Likewise.
	* ada-lang.h (ada_val_print, ada_value_print, ada_printstr):
	Update.
	* ada-lang.c (ada_print_array_index): Add options argument; remove
	format and pretty arguments.
	(print_one_exception): Use get_user_print_options.
gdb/testsuite
	* gdb.base/exprs.exp (test_expr): Add enum formatting tests.
@
text
@d504 1
a504 1
      get_user_print_options (&opts);
@


1.131
log
@	* inferior.h (context_switch_to): Delete.
	* infrun.c (context_switch): Don't save and load infrun state.
	(context_switch_to): Delete.

	* infcmd.c (proceed_thread_callback): Replace context_switch_to
	calls by switch_to_thread calls.

	* gdbthread.h (save_infrun_state, load_infrun_state): Delete.
	* thread.c (main_thread_state, main_thread_executing): Delete.
	(inferior_thread): Delete references to them.
	(add_thread_silent): Fix case where we're adding a thread with the
	same ptid as an exited thread.  Remove references to
	context-switching.
	(load_infrun_state, save_infrun_state): Delete.
	(thread_alive, is_thread_state, any_running, is_executing)
	(set_executing): Remove the special handling for targets that
	don't register any thread.
	(restore_current_thread, thread_apply_all_command)
	(do_captured_thread_select): Unconditionally call
	switch_to_thread.

	* mi/mi-main.c (mi_cmd_execute): Check for exited threads.
	Call switch_to_thread instead of context_switch_to.
@
text
@d48 1
d503 3
d507 1
a507 2
		 stb->stream, format, 1, 0, Val_pretty_default,
		 current_language);
d576 1
d593 2
d597 1
a597 1
	     stb->stream, 0, 0, 0, 0, current_language);
d752 2
d758 1
d770 1
a770 1
		print_scalar_formatted (mbuf + col_byte, word_type, word_format,
@


1.130
log
@	* target.c (target_async_permitted, target_async_permitted_1)
        (set_maintenance_target_async_permitted)
        (show_maintenance_target_async_permitted): New.
        (initialize_targets): Register 'set target-async'.
        * target.h (target_async_permitted): Declare.
        * linux-nat.c (linux_nat_async_enabled)
        (linux_nat_async_permitted, set_maintenance_linux_async_permitted)
        (show_maintenance_linux_async_permitted): Remove.
        (sigchld_handler, linux_nat_is_async_p, linux_nat_can_async_p)
        (get_pending_events, linux_nat_async): Use target_async_permitted.
        (linux_nat_set_async_mode): Remove, moving the only used bits
        into...
        (linux_nat_setup_async): This.
        (_initialize_linux_nat): Do not register 'maint set linux-async'.
        Use linux_nat_setup_async.
        * remote.c (remote_async_permitted, remote_async_permitted_set)
        (set_maintenance_remote_async_permitted)
        (show_maintenance_remote_async_permitted): Remove.
        (remote_open_1, remote_terminal_inferior, remote_can_async_p)
        (remote_is_async_p): Use target_async_permitted.
        (_initialize_remote): Don't register 'main set remote-async'.
        * mi/mi-cmds.c (mi_cmds): Register -list-target-features.
        * mi/mi-cmds.h (mi_cmd_list_target_features): New.
        * mi/mi-main.c (mi_cmd_list_target_features): New.
@
text
@d1097 1
a1097 1
  
d1103 5
a1107 5
      
      if (non_stop)
	context_switch_to (tp->ptid);
      else
	switch_to_thread (tp->ptid);
d1109 1
a1109 1
  
d1121 1
a1121 1
  
@


1.129
log
@	* mi/mi-main.c (mi_cmd_exec_next, mi_cmd_exec_next_instruction)
	(mi_cmd_exec_step, mi_cmd_exec_step_instruction)
	(mi_cmd_exec_finish): Remove "return".
@
text
@d918 19
a936 1
 
@


1.128
log
@	Enable all MI commands while inferiour is running
        * mi/mi-main.c (mi_cmd_execute): Don't check if
        inferiour is executing.
@
text
@d113 1
a113 1
  return mi_execute_async_cli_command ("next", argv, argc);
d120 1
a120 1
  return mi_execute_async_cli_command ("nexti", argv, argc);
d127 1
a127 1
  return mi_execute_async_cli_command ("step", argv, argc);
d134 1
a134 1
  return mi_execute_async_cli_command ("stepi", argv, argc);
d141 1
a141 1
  return mi_execute_async_cli_command ("finish", argv, argc);
@


1.127
log
@	* mi/mi-main.c (mi_cmd_execute): Remove unused variable.
	Fix printing of frame, when frame is wrong.
@
text
@a1123 17
      if ((!non_stop && any_running ())
	  || (non_stop && is_running (inferior_ptid)))
	{
	  if (strcmp (parse->command, "exec-interrupt"))
	    {
	      struct ui_file *stb;
	      stb = mem_fileopen ();

	      fputs_unfiltered ("Cannot execute command ", stb);
	      fputstr_unfiltered (parse->command, '"', stb);
	      fputs_unfiltered (" while target running", stb);

	      make_cleanup_ui_file_delete (stb);
	      error_stream (stb);
	    }
	}

@


1.126
log
@	Implement -exec-continue/-exec-interrupt --all.
        * infcmd.c (continue_1): New, extracted from
        (continue_command): ...here.
        (interrupt_target_1): New, extracted from
        (interrupt_target_command): ...here.
        * inferior.h (continue_1, interrupt_target_1): New.
        * mi/mi-main.c (mi_cmd_exec_continue)
        (mi_cmd_exec_interrupt): Handle --all.
@
text
@a1070 3
  char *thread_str;
  char *frame_str;
  int thread;
d1101 1
a1101 1
	error (_("Invalid frame id: %s"), frame_str);
@


1.125
log
@	Implement --thread and --frame.
	* gdbthread.h (find_thread_id): Declare.
        * thread.c (find_thread_id): Make non-static.
        * mi/mi-main.c (mi_cmd_execute): Switch to the right
        thread and frame, if necessary.
        * mi/mi-parse.c (mi_parse): Handle --thread and --frame.
        * mi/mi-parse.h (strcut mi_parse): New fields thread and frame.
@
text
@d166 6
a171 2
  /* FIXME: Should call a libgdb function, not a cli wrapper.  */
  return mi_execute_async_cli_command ("continue", argv, argc);
d182 4
a185 2
  if (!is_running (inferior_ptid))
    error ("mi_cmd_exec_interrupt: Inferior not running.");
d187 11
a197 1
  interrupt_target_command (NULL, 0);
@


1.124
log
@	Exited threads.

	* thread.c (enum thread_state): New.
	(thread_state main_thread_running): Delete, in favor of...
	(thread_state main_thread_state): ... this.  Update throughout.
	(clear_thread_inferior_resources): New, split from free_thread.
	(free_thread): Call clear_thread_inferior_resources.
	(init_thread_list): Set main thread to stopped state.
	(add_thread_silent): Take care of PTID reuses.
	(delete_thread): If deleting inferior_ptid or a thread with
	refcount > 0, mark it as exited, but still keep it in the list.
	Only notify of thread exits, if we haven't done so yet.
	(iterate_over_threads): Make it safe to delete threads while
	iterating over them.
	(do_captured_list_thread_ids): Don't account for exited threads.
	(thread_alive): Check for the THREAD_EXITED state, and don't set
	ptid to -1 on exited threads.
	(set_running): Update to account for extra possible states.
	(is_thread_state): New.
	(is_stopped, is_exited): New.
	(is_running): Implement in terms of is_thread_state.
	(any_running): Update.
	(print_thread_info): Update.  Account for exited threads.  Don't
	warn about missed frame restoring here, its done in the cleanup.
	(switch_to_thread): Don't read from a thread that has gone.
	(restore_current_thread): In non-stop mode, do a full context
	switch.
	(restore_selected_frame): Add a frame_level argument.  Rewrite.
	(struct current_thread_cleanup): Add selected_frame_level and
	was_stopped members.
	(do_restore_current_thread_cleanup): Check if thread was stopped
	and still is, and if the target has registers, stack and memory
	before restoring the selected frame.  Don't delete the cleanup
	argument here.
	(restore_current_thread_cleanup_dtor): New.
	(make_cleanup_restore_current_thread): Remove all arguments.
	Rewrite.
	(thread_apply_all_command): Update.  Prune threads.
	(thread_apply_command): Update.
	(thread_command): Account for currently selected exited thread.
	(do_captured_thread_select): Check for a running thread.  Prune
	threads.
	(_initialize_thread): Make "info threads", "thread", "thread
	apply", and "thread apply all" appliable without a selected thread.
	* gdbthread.h (struct thread_info): Replace running_ by state_.
	Add refcount.
	(is_exited, is_stopped): Declare.
	(make_cleanup_restore_current_thread): Remove all arguments.
	* infrun.c: Include "event-top.h".
	(fetch_inferior_event): In non-stop mode, restore selected thread
	and frame after handling the event and running breakpoint
	commands.  Display GDB prompt if needed.
	(normal_stop): In non-stop mode, don't print thread switching
	notice.
	* cli/cli-decode.c (set_cmd_no_selected_thread_ok)
	(get_cmd_no_selected_thread_ok): New.
	* cli/cli-decode.h (CMD_NO_SELECTED_THREAD_OK): New.
	(set_cmd_no_selected_thread_ok, get_cmd_no_selected_thread_ok):
	Declare.
	* cli/cli-cmds.c: Set "pwd", "help", "info", "show" as
	no-selected-thread ok.
	* top.c (execute_command): Check for non no-selected-thread-ok
	commands.
	* linux-nat.c (struct saved_ptids, threads_to_delete)
	(record_dead_thread, prune_lwps): Delete.
	(exit_lwp): Unconditionally delete thread.
	(linux_nat_resume): Remove prune_lwps call.
	* infcmd.c (proceed_thread_callback): Check if !is_stopped instead
	of is_running.  Adjust to make_cleanup_restore_current_thread
	interface change.
	* mi/mi-main.c (mi_cmd_execute): Only allow a few commands if the
	selected thread has exited.
	* inf-loop.c (inferior_event_handler): Don't display the prompt
	here.
	* varobj.c (c_value_of_root): Update.
	* defs.h (make_cleanup_dtor): Declare.
	* utils.c (make_cleanup_dtor): New.

	* Makefile.in (infrun.o): Depend on $(event_top_h).
@
text
@d1055 4
d1064 27
d1127 1
@


1.123
log
@	Per-thread commands.

	* gdbthread.h: Remove unneeded forward declarations.
	Include "inferior.h".
	(struct thread_info): Add continuations,
	intermediate_continuations, proceed_to_finish, step_over_calls,
	stop_step, step_multi and stop_signal members.
	(save_infrun_state): Add continuations,
	intermediate_continuations, proceed_to_finish, step_over_calls,
	stop_step, step_multi, stop_signal and stop_bpstat parameters.
	(load_infrun_state): Add continuations,
	intermediate_continuations, proceed_to_finish, step_over_calls,
	stop_step, step_multi, stop_signal and stop_bpstat parameters.

	* thread.c (load_infrun_state): In non-stop mode, load
	continuations, intermediate_continuations, proceed_to_finish,
	step_over_calls, stop_step, step_multi and stop_signal.
	(save_infrun_state): Store continuations,
	intermediate_continuations, proceed_to_finish, step_over_calls,
	stop_step, step_multi, stop_signal and stop_bpstat.
	(save_infrun_state): Store continuations,
	intermediate_continuations, proceed_to_finish, step_over_calls,
	stop_step, step_multi, stop_signal and stop_bpstat.
	(free_thread): Clear The thread's stop_bpstat.

	* inferior.h (context_switch_to): Declare.

	* infrun.c (ecss): New global.
	(context_switch): Context switch continuations,
	intermediate_continuations, proceed_to_finish, step_over_calls,
	stop_step, step_multi, stop_signal and stop_bpstat.
	(wait_for_inferior): Use global ecss.
	(async_ecss, async_ecs): Delete.
	(fetch_inferior_event): Use global ecss.
	(context_switch_to): New.

	* top.c (execute_command): In non-stop, only check if the current
	thread is running, in all-stop, check if there's any thread
	running.

	* breakpoint.c (bpstat_remove_breakpoint): New.
	(bpstat_remove_breakpoint_callback): New.
	(delete_breakpoint): Clear the stop_bpstats of all threads.

	* mi/mi-main.c (mi_cmd_execute): In non-stop, only check if the
	current thread is running, in all-stop, check if there's any
	thread running.

	* Makefile.in (gdbthread_h): Depend on $(inferior_h).
@
text
@d1062 18
@


1.122
log
@	Add "executing" property to threads.

	* inferior.h (target_executing): Delete.
	* gdbthread.h (struct thread_info): Add executing_ field.
	(set_executing, is_executing): New.
	* thread.c (main_thread_executing): New.
	(init_thread_list): Clear it and also main_thread_running.
	(is_running): Return false if target has no execution.
	(any_running, is_executing, set_executing): New.

	* top.c: Include "gdbthread.h".
	(target_executing): Delete.
	(execute_command): Replace target_executing check by any_running.
	* event-top.c: Include "gdbthread.h".
	(display_gdb_prompt, command_handler): Replace target_executing by
	is_running.
	* inf-loop.c: Include "gdbthread.h".  Don't mark as not executing
	here.  Replace target_executing by is_running.
	* infrun.c (handle_inferior_event): Mark all threads as
	not-executing.
	* linux-nat.c (linux_nat_resume): Don't mark thread as executing
	here.
	* stack.c (get_selected_block): Return null if inferior is
	executing.
	* target.c (target_resume): Mark resumed ptid as executing.
	* breakpoint.c (until_break_command): Replace target_executing
	check by is_executing.
	* remote.c (remote_async_resume): Don't mark inferior as executing
	here.
	* mi/mi-interp.c (mi_cmd_interpreter_exec): Replace target_executing
	by any_running.

	* mi/mi-main.c (mi_cmd_exec_interrupt, mi_cmd_execute)
	(mi_execute_async_cli_command): Replace target_executing by
	is_running.

	* frame.c (get_current_frame): Error out if the current thread is
	executing.
	(has_stack_frames): New.
	(get_selected_frame, deprecated_safe_get_selected_frame): Check
	has_stack_frames.

	* Makefile.in (event-top.o, frame.o, inf-loop.o, top.o): Depend on
	$(gdbthread_h).
@
text
@d1062 2
a1063 1
      if (is_running (inferior_ptid))
@


1.121
log
@	* mi/mi-cmds.c (mi_cmds): Route -exec-run, -exec-until,
	-target-download and -target-select via CLI, so that
	the quoting rules are the same as they were (unfortunately)
	in all prior gdb releases.
	* mi/mi-cmds.h (mi_cmd_exec_run, mi_cmd_exec_until)
	(mi_cmd_target_download, mi_cmd_target_select): Remove.
	* mi/mi-main.c (mi_cmd_exec_run, mi_cmd_exec_until)
	(mi_cmd_target_download, mi_cmd_target_select): Remove.
	(mi_cmd_execute): Set current_token even for commands
	routed via CLI.
@
text
@d178 2
a179 2
  if (!target_executing)
    error ("mi_cmd_exec_interrupt: Inferior not executing.");
d1062 1
a1062 1
      if (target_executing)
d1147 1
a1147 1
      gdb_assert (target_executing);
@


1.120
log
@	* mi/mi-main.c (enum captured_mi_execute_command_actions)
	(captured_mi_execute_command_args): Remove.
	(captured_mi_execute_command): Cast the closure to mi_parse
	pointer, not to captured_mi_execute_command_args, and don't
	set the action field thereof.
	(mi_execute_command): Pass struct mi_parse, not
	captured_mi_execute_command_args to captured_mi_execute_command.
	(mi_execute_command): Remove (dead) code for suppressing
	printing prompt.
@
text
@a109 7
mi_cmd_exec_run (char *command, char **argv, int argc)
{
  /* FIXME: Should call a libgdb function, not a cli wrapper.  */
  return mi_execute_async_cli_command ("run", argv, argc);
}

void
a144 7
mi_cmd_exec_until (char *command, char **argv, int argc)
{
  /* FIXME: Should call a libgdb function, not a cli wrapper.  */
  return mi_execute_async_cli_command ("until", argv, argc);
}

void
a582 50
void
mi_cmd_target_download (char *command, char **argv, int argc)
{
  char *run;
  struct cleanup *old_cleanups = NULL;

  /* There may be at most one parameter -- the name of the
     file to download.  */
  run = xstrprintf ("load %s", argc ? *argv : "");
  old_cleanups = make_cleanup (xfree, run);
  execute_command (run, 0);

  do_cleanups (old_cleanups);
}

/* Connect to the remote target.  */
void
mi_cmd_target_select (char *command, char **argv, int argc)
{
  char *run = NULL;
  struct cleanup *old_cleanups = NULL;
  int i;

  if (argc == 0)
    error ("no target type specified");
    
  for (i = 0; i < argc; ++i)
    {
      if (i == 0)
	run = concat ("target ", argv[0], NULL);
      else
	{
	  char *prev = run;
	  run = concat (run, " ", argv[i], NULL);
	  xfree (prev);
	}
    }
  
  old_cleanups = make_cleanup (xfree, run);

  /* target-select is always synchronous.  Once the call has returned
     we know that we are connected.  */
  /* NOTE: At present all targets that are connected are also
     (implicitly) talking to a halted target.  In the future this may
     change.  */
  execute_command (run, 0);

  do_cleanups (old_cleanups);
}

d1057 3
a1076 2
      current_token = xstrdup (parse->token);
      cleanup = make_cleanup (free_current_contents, &current_token);
a1077 1
      do_cleanups (cleanup);
d1101 1
@


1.119
log
@	* target.c (target_read_until_error): New.
        * target.h (target_read_until_error): Declare.
        * mi/mi-main.c (mi_cmd_data_read_memory): Use
        target_read_until_error.
@
text
@a64 20
/* Enumerations of the actions that may result from calling
   captured_mi_execute_command.  */

enum captured_mi_execute_command_actions
  {
    EXECUTE_COMMAND_DISPLAY_PROMPT,
    EXECUTE_COMMAND_SUPPRESS_PROMPT
  };

/* This structure is used to pass information from captured_mi_execute_command
   to mi_execute_command.  */
struct captured_mi_execute_command_args
{
  /* What action to perform when the call is finished (output).  */
  enum captured_mi_execute_command_actions action;

  /* The command context to be executed (input).  */
  struct mi_parse *command;
};

d977 1
a977 3
  struct captured_mi_execute_command_args *args =
    (struct captured_mi_execute_command_args *) data;
  struct mi_parse *context = args->command;
a989 5
      /* FIXME: cagney/1999-09-25: Rather than this convoluted
         condition expression, each function should return an
         indication of what action is required and then switch on
         that.  */
      args->action = EXECUTE_COMMAND_DISPLAY_PROMPT;
a1052 1
		args->action = EXECUTE_COMMAND_DISPLAY_PROMPT;
a1069 1
  struct captured_mi_execute_command_args args;
d1090 1
a1090 2
      args.command = command;
      result = catch_exception (uiout, captured_mi_execute_command, &args,
a1106 5

      if (args.action == EXECUTE_COMMAND_SUPPRESS_PROMPT)
	/* The command is executing synchronously.  Bail out early
	   suppressing the finished prompt.  */
	return;
@


1.118
log
@	Kill the return value for all MI command functions.
	* mi/mi-cmds.h (enum mi_cmd_result): Remove.
	(mi_cmd_argv_ftype): Change return type to void.

	* mi/mi-main.c: Adjust all function that implement
	MI commands to return nothing.
	(struct captured_mi_execute_command_actions):
	Remove the rc field.
	(mi_cmd_execute): Return nothing.
	(mi_execute_async_cli_command): Return nothing.
	(mi_cmd_exec_interrupt): Don't print ^done here.
	(mi_cmd_target_select): Don't print ^connected here.
	(captured_mi_execute_command): Don't check for MI_CMD_DONE.
	Special-case -target-select and output ^connected, not ^done.

	* mi/mi-cmd-break.c: Adjust.
	* mi/mi-cmd-disas.c: Adjust.
	* mi/mi-cmd-env.c: Adjust.
	* mi/mi-cmd-file.c: Adjust.
	* mi/mi-cmd-stack.c: Adjust.
	* mi/mi-cmd-target.c: Adjust.
	* mi/mi-cmd-var.c: Adjust.
	* mi/mi-interp.c: Adjust.
	* mi/mi-symbol-cmds.c: Adjust.
@
text
@d785 2
a786 2
  nr_bytes = target_read (&current_target, TARGET_OBJECT_MEMORY, NULL,
			  mbuf, addr, total_bytes);
@


1.117
log
@	Emit ^running via observer.
	* mi/mi-interp.c (mi_cmd_interpreter_exec): Do no print
        ^running here.
        (mi_on_resume): Print ^running if not previously output.
        * mi/mi-main.c (running_result_record_printed): New.
        (captured_mi_execute_command): Reset
        running_result_record_printed.  Use running_result_record_printed
        to decide if we should skip ^done.
        (mi_execute_async_cli_command): Don't print ^running here.
        * mi/mi-main.h (current_token, running_result_record_printed):
        Declare.
@
text
@a77 3
  /* This return result of the MI command (output).  */
  enum mi_cmd_result rc;

d98 1
a98 1
static enum mi_cmd_result mi_cmd_execute (struct mi_parse *parse);
d102 1
a102 1
static enum mi_cmd_result mi_execute_async_cli_command (char *cli_command, 
d117 1
a117 1
enum mi_cmd_result
a126 1
  return MI_CMD_DONE;
d129 1
a129 1
enum mi_cmd_result
d136 1
a136 1
enum mi_cmd_result
d143 1
a143 1
enum mi_cmd_result
d150 1
a150 1
enum mi_cmd_result
d157 1
a157 1
enum mi_cmd_result
d164 1
a164 1
enum mi_cmd_result
d171 1
a171 1
enum mi_cmd_result
d178 1
a178 1
enum mi_cmd_result
a194 2

  return MI_CMD_DONE;
d197 1
a197 1
enum mi_cmd_result
d209 1
a209 1
enum mi_cmd_result
a215 7
  if (current_token)
    fputs_unfiltered (current_token, raw_stdout);
  fputs_unfiltered ("^done", raw_stdout);
  mi_out_put (uiout, raw_stdout);
  mi_out_rewind (uiout);
  fputs_unfiltered ("\n", raw_stdout);
  return MI_CMD_QUIET;
d218 1
a218 1
enum mi_cmd_result
a233 2

  return MI_CMD_DONE;
d236 1
a236 1
enum mi_cmd_result
a251 2

  return MI_CMD_DONE;
d254 1
a254 1
enum mi_cmd_result
a265 1
  return MI_CMD_DONE;
d268 1
a268 1
enum mi_cmd_result
a316 1
  return MI_CMD_DONE;
d319 1
a319 1
enum mi_cmd_result
a383 1
  return MI_CMD_DONE;
d419 1
a419 1
enum mi_cmd_result
a476 1
  return MI_CMD_DONE;
d531 1
a531 1
enum mi_cmd_result
a578 1
  return MI_CMD_DONE;
d584 1
a584 1
enum mi_cmd_result
a614 2

  return MI_CMD_DONE;
d617 1
a617 1
enum mi_cmd_result
a629 1
  return MI_CMD_DONE;
d633 1
a633 1
enum mi_cmd_result
a664 9

  /* Issue the completion message here.  */
  if (current_token)
    fputs_unfiltered (current_token, raw_stdout);
  fputs_unfiltered ("^connected", raw_stdout);
  mi_out_put (uiout, raw_stdout);
  mi_out_rewind (uiout);
  fputs_unfiltered ("\n", raw_stdout);
  return MI_CMD_QUIET;
d686 1
a686 1
enum mi_cmd_result
a859 1
  return MI_CMD_DONE;
d878 1
a878 1
enum mi_cmd_result
a942 2

  return MI_CMD_DONE;
d945 1
a945 1
enum mi_cmd_result
d962 1
a962 1
  return MI_CMD_DONE;
a965 1
  return MI_CMD_DONE;
d968 1
a968 1
enum mi_cmd_result
d981 1
a981 2

      return MI_CMD_DONE;
a984 1
  return MI_CMD_DONE;
d1021 1
a1021 1
      args->rc = mi_cmd_execute (context);
d1032 1
a1032 1
      if (args->rc == MI_CMD_DONE && !running_result_record_printed)
d1035 4
a1038 1
	  fputs_unfiltered ("^done", raw_stdout);
d1065 1
a1065 1
	args->rc = mi_cmd_interpreter_exec ("-interpreter-exec", argv, 2);
d1073 1
a1073 1
	    if (args->rc == MI_CMD_DONE && !running_result_record_printed)
d1150 1
a1150 1
static enum mi_cmd_result
a1153 1
  enum mi_cmd_result r;
d1175 1
a1175 1
      r = parse->cmd->argv_func (parse->command, parse->argv, parse->argc);
a1176 1
      return r;
a1184 1
      return MI_CMD_DONE;
a1198 3

      /* unreacheable */
      return MI_CMD_DONE;
d1228 1
a1228 1
enum mi_cmd_result
d1255 1
a1255 3
      return MI_CMD_QUIET;
    }    
  return MI_CMD_DONE;
@


1.116
log
@	Use observers to report stop events in MI.
        * mi/mi-interp.c (mi_on_normal_stop): New.
        (mi_interpreter_init): Register mi_on_normal_stop.
        (mi_interpreter_exec_continuation): Remove.
        (mi_cmd_interpreter_exec): Don't register the above.
        * mi/mi-main.c (captured_mi_execute_command): Don't care
        about sync_execution.
        (mi_execute_async_cli_command): Don't install continuation.  Don't
        print *stopped.
        (mi_exec_async_cli_cmd_continuation): Remove.
@
text
@d97 2
a98 1
static char *current_token;
d1043 1
a1045 1

d1066 7
a1072 1
      if (!target_can_async_p () || !target_executing)
d1074 11
a1084 19
	  /* Print the result if there were no errors.

	     Remember that on the way out of executing a command, you have
	     to directly use the mi_interp's uiout, since the command could 
	     have reset the interpreter, in which case the current uiout 
	     will most likely crash in the mi_out_* routines.  */
	  if (args->rc == MI_CMD_DONE)
	    {
	      fputs_unfiltered (context->token, raw_stdout);
	      fputs_unfiltered ("^done", raw_stdout);
	      mi_out_put (uiout, raw_stdout);
	      mi_out_rewind (uiout);
	      /* Have to check cmd_start, since the command could be
		 -enable-timings.  */
	      if (do_timings && context->cmd_start)
		  print_diff (context->cmd_start, &cmd_finished);
	      fputs_unfiltered ("\n", raw_stdout);
	    }
	  else
d1088 1
a1088 2
	    mi_out_rewind (uiout);
	}
d1110 1
a1110 1
	    if (args->rc == MI_CMD_DONE)
a1282 23
  if (!target_can_async_p ())
    {
      /* NOTE: For synchronous targets asynchronous behavour is faked by
         printing out the GDB prompt before we even try to execute the
         command.  */
      if (current_token)
	fputs_unfiltered (current_token, raw_stdout);
      fputs_unfiltered ("^running\n", raw_stdout);
      fputs_unfiltered ("(gdb) \n", raw_stdout);
      gdb_flush (raw_stdout);
    }
  else
    {
      /* FIXME: cagney/1999-11-29: Printing this message before
         calling execute_command is wrong.  It should only be printed
         once gdb has confirmed that it really has managed to send a
         run command to the target.  */
      if (current_token)
	fputs_unfiltered (current_token, raw_stdout);
      fputs_unfiltered ("^running\n", raw_stdout);

    }

@


1.115
log
@        * valprint.c (val_print): Add new language parameter and use it
        instead of using the current_language. Update calls to val_print
        throughout.
        (common_val_print): Add new langauge parameter and pass it to
        val_print.
        * value.h (struct language_defn): Add opaque declaration.
        (val_print, common_val_print): Update declarations.
        * stack.c (print_frame_args): Update call to common_val_print
        using the appropriate language.
        * mi/mi-cmd-stack.c (list_args_or_locals): Likewise.
        * c-valprint, f-valprint.c, m2-valprint.c, mt-tdep.c, infcmd.c,
        mi/mi-main.c, jv-valprint.c, ada-valprint.c, varobj.c, p-valprint.c,
        scm-valprint.c, cp-valprint.c, sh64-tdep.c, printcmd.c:
        #include "language.h" if necessary.
        Update calls to val_print and common_val_print.
        * Makefile.in (mt-tdep.o, sh64-tdep.o, mi-cmds.o, mi-main.o):
        Update dependencies.
@
text
@a105 4

static void mi_exec_async_cli_cmd_continuation (struct continuation_arg *arg, 
						int error_p);

d1086 3
a1090 7
      else if (sync_execution)
	{
	  /* Don't print the prompt. We are executing the target in
	     synchronous mode.  */
	  args->action = EXECUTE_COMMAND_SUPPRESS_PROMPT;
	  return;
	}
a1305 6
      /* Ideally, we should be intalling continuation only when
	 the target is already running. However, this will break right now,
	 because continuation installed by the 'finish' command must be after
	 the continuation that prints *stopped.  This issue will be
	 fixed soon.  */
      add_continuation (mi_exec_async_cli_cmd_continuation, NULL);
a1320 5
      /* If the target was doing the operation synchronously we fake
         the stopped message.  */
      fputs_unfiltered ("*stopped", raw_stdout);
      mi_out_put (uiout, raw_stdout);
      mi_out_rewind (uiout);
a1322 1
      fputs_unfiltered ("\n", raw_stdout);
a1328 11
mi_exec_async_cli_cmd_continuation (struct continuation_arg *arg, int error_p)
{
  /* Assume 'error' means that target is stopped, too.  */
  fputs_unfiltered ("*stopped", raw_stdout);
  mi_out_put (uiout, raw_stdout);
  fputs_unfiltered ("\n", raw_stdout);
  fputs_unfiltered ("(gdb) \n", raw_stdout);
  gdb_flush (raw_stdout);
}

void
@


1.114
log
@	* mi/mi-cmds.h (mi_cmd_args_ftype): Remove.
	Adjust all prototypes using mi_cmd_args_ftype to use
	mi_cmd_argv_ftype.
	(struct mi_cmd): Remove the args_func field.
	* mi/mi-cmds.c: Don't provide value for the args_func field.
	* mi/mi-main.c (mi_execute_async_cli_command)
	(mi_cmd_exec_run, mi_cmd_exec_next, mi_cmd_exec_next_instruction)
	(mi_cmd_exec_step, mi_cmd_exec_step_instruction)
	(mi_cmd_exec_finish, mi_cmd_exec_until, mi_cmd_exec_return)
	(mi_cmd_exec_continue, mi_cmd_exec_interrupt)
	(mi_cmd_target_download): Adjust.
	(mi_cmd_target_select): Adjust. Pass 0 for from_tty parameter.
	(mi_cmd_execute): Do not check for args_func.
	(mi_execute_async_cli_command): Adjust.
	* mi/mi-parse.c: Don't check for args_func.
@
text
@d47 1
d545 2
a546 1
		 stb->stream, format, 1, 0, Val_pretty_default);
d634 1
a634 1
	     stb->stream, 0, 0, 0, 0);
@


1.113
log
@        * mi/mi-main.c (last_async_command): Rename to current_token.
        (previous_async_command): Remove.
        (mi_cmd_gdb_exit): Adjust.
        (mi_cmd_exec_interrupt): Don't dance with previous_async_command.
        (mi_cmd_target_select): Adjust.
        (mi_cmd_execute): Don't set previous_async_command.  Free token
        here even in async mode.
        (mi_execute_async_cli_command): Adjust.
        (mi_exec_async_cli_cmd_continuation): Adjust.  Do not free the
        token.
        (mi_load_progress): Adjust.
@
text
@d103 2
a104 1
static enum mi_cmd_result mi_execute_async_cli_command (char *mi, char *args, int from_tty);
d136 1
a136 1
mi_cmd_exec_run (char *args, int from_tty)
d139 1
a139 1
  return mi_execute_async_cli_command ("run", args, from_tty);
d143 1
a143 1
mi_cmd_exec_next (char *args, int from_tty)
d146 1
a146 1
  return mi_execute_async_cli_command ("next", args, from_tty);
d150 1
a150 1
mi_cmd_exec_next_instruction (char *args, int from_tty)
d153 1
a153 1
  return mi_execute_async_cli_command ("nexti", args, from_tty);
d157 1
a157 1
mi_cmd_exec_step (char *args, int from_tty)
d160 1
a160 1
  return mi_execute_async_cli_command ("step", args, from_tty);
d164 1
a164 1
mi_cmd_exec_step_instruction (char *args, int from_tty)
d167 1
a167 1
  return mi_execute_async_cli_command ("stepi", args, from_tty);
d171 1
a171 1
mi_cmd_exec_finish (char *args, int from_tty)
d174 1
a174 1
  return mi_execute_async_cli_command ("finish", args, from_tty);
d178 1
a178 1
mi_cmd_exec_until (char *args, int from_tty)
d181 1
a181 1
  return mi_execute_async_cli_command ("until", args, from_tty);
d185 1
a185 1
mi_cmd_exec_return (char *args, int from_tty)
d189 1
a189 1
  if (*args)
d192 1
a192 1
    return_command (args, 0);
d206 1
a206 1
mi_cmd_exec_continue (char *args, int from_tty)
d209 1
a209 1
  return mi_execute_async_cli_command ("continue", args, from_tty);
d218 1
a218 1
mi_cmd_exec_interrupt (char *args, int from_tty)
d223 1
a223 1
  interrupt_target_command (args, from_tty);
d643 1
a643 1
mi_cmd_target_download (char *args, int from_tty)
d648 3
a650 1
  run = xstrprintf ("load %s", args);
d652 1
a652 1
  execute_command (run, from_tty);
d660 1
a660 1
mi_cmd_target_select (char *args, int from_tty)
d662 1
a662 1
  char *run;
d664 1
d666 15
a680 1
  run = xstrprintf ("target %s", args);
d688 1
a688 1
  execute_command (run, from_tty);
d1202 1
a1202 2
  if (parse->cmd->argv_func != NULL
      || parse->cmd->args_func != NULL)
d1221 1
a1221 5
      /* FIXME: DELETE THIS! */
      if (parse->cmd->args_func != NULL)
	r = parse->cmd->args_func (parse->args, 0 /*from_tty */ );
      else
	r = parse->cmd->argv_func (parse->command, parse->argv, parse->argc);
d1280 1
a1280 1
mi_execute_async_cli_command (char *mi, char *args, int from_tty)
d1286 1
a1286 1
    run = xstrprintf ("%s %s&", mi, args);
d1288 1
a1288 1
    run = xstrprintf ("%s %s", mi, args);
@


1.112
log
@	exec_cleanup murder.
	* breakpoint.c (until_break_command_continuation): Add
	the 'error' parameter.  Directly delete the breakoint as
	opposed to running cleanups.
	(until_break_command): Install continuation only
	after starting the target.  Don't use exec cleanups,
	use ordinary cleanups.  Discard cleanups is successfully
	started the target in async mode.
	(make_cleanup_delete_breakpoint): Remove.
	* breakpoint.h (make_cleanup_delete_breakpoint): Remove
	declaration.
	* defs.h (do_exec_cleanups, make_exec_cleanup): Remove
	declarations.
	(struct continations): Add the 'error' parameter to the
	continuation_hook field.
	(add_continuation, do_all_continuations)
	(add_intermediate_continuation)
	(do_all_intermediate_continuations): Add the 'error' parameter.
	* exceptions.c (throw_exception): Don't call do_exec_cleanups.
	* inf-loop.c (inferior_event_handler): Instead of calling
	discard_all_continuations, use do_all_continuations with 1 as
	'error' parameter.  Pass 0 as 'error' parameter in existing uses
	of discard_all_continuations.
	* infcmd.c (step_1): Do not use exec cleanup.  For async case, discard
	cleanups.
	(step_once): Install continuation only after resuming the target.
	(step_1_continuation): Disable longjmp breakpoint on error.
	(finish_command_continuation): Add the error parameter.  Delete
	the finish breakpoint directly, do not use cleanups.
	(finish_command): Do not use exec_cleanups. Always setup
	continuation.  For sync case, immediately run them.
	(attach_command_continuation): Add the error parameter.
	* infrun.c (fetch_inferior_event): Do not use exec cleanups to
	remove step_resume_breakpoint -- adjust delete it directly.
	* interps.c (interp_set): Adjust call to do_all_continations.
	* mi/mi-interp.c (mi_interpreter_exec_continuation): Do not
	do exec cleanups.
	* mi/mi-main.c (mi_cmd_target_select): Do not do exec
	cleanups.
	(mi_cmd_execute): Do not use exec_cleanup.
	(mi_execute_async_cli_command): Simplify the string concatenation
	logic.  Do no use exec cleanup.
	(mi_exec_async_cli_cmd_continuation): New parameter error.
	Free last_async_command.
	* top.c (command_line_handler_continuation): New parameter error.
	* utils.c (exec_cleanup_chain, make_exec_cleanup)
	(do_exec_cleanups): Remove.
	(add_continuation, do_all_continations)
	(add_intermediate_continuation)
	(do_all_intermediate_continuations): New parameter error.
@
text
@d96 1
a96 3
/* The token of the last asynchronous command.  */
static char *last_async_command;
static char *previous_async_command;
d125 2
a126 2
  if (last_async_command)
    fputs_unfiltered (last_async_command, raw_stdout);
d223 2
a224 2
  if (last_async_command)
    fputs_unfiltered (last_async_command, raw_stdout);
a225 5
  xfree (last_async_command);
  if (previous_async_command)
    last_async_command = xstrdup (previous_async_command);
  xfree (previous_async_command);
  previous_async_command = NULL;
d675 2
a676 2
  if (last_async_command)
    fputs_unfiltered (last_async_command, raw_stdout);
a1186 15
      /* FIXME: We need to save the token because the command executed
         may be asynchronous and need to print the token again.
         In the future we can pass the token down to the func
         and get rid of the last_async_command.  */
      /* The problem here is to keep the token around when we launch
         the target, and we want to interrupt it later on.  The
         interrupt command will have its own token, but when the
         target stops, we must display the token corresponding to the
         last execution command given.  So we have another string where
         we copy the token (previous_async_command), if this was
         indeed the token of an execution command, and when we stop we
         print that one.  This is possible because the interrupt
         command, when over, will copy that token back into the
         default token string (last_async_command).  */

a1188 2
	  if (!previous_async_command)
	    previous_async_command = xstrdup (last_async_command);
d1202 2
a1203 2
      last_async_command = xstrdup (parse->token);
      cleanup = make_cleanup (free_current_contents, &last_async_command);
d1209 1
a1209 6
      if (target_can_async_p () && target_executing)
	/* last_async_command will be freed by continuation that
	   all execution command set.  */
	discard_cleanups (cleanup);
      else
	do_cleanups (cleanup);
d1283 2
a1284 2
      if (last_async_command)
	fputs_unfiltered (last_async_command, raw_stdout);
d1295 2
a1296 2
      if (last_async_command)
	fputs_unfiltered (last_async_command, raw_stdout);
a1321 2
      if (last_async_command)
	fputs_unfiltered (last_async_command, raw_stdout);
a1336 2
  if (last_async_command)
    fputs_unfiltered (last_async_command, raw_stdout);
a1341 5
  if (last_async_command)
    {
      free (last_async_command);
      last_async_command = NULL;
    }	
d1393 2
a1394 2
      if (last_async_command)
	fputs_unfiltered (last_async_command, raw_stdout);
d1412 2
a1413 2
      if (last_async_command)
	fputs_unfiltered (last_async_command, raw_stdout);
@


1.111
log
@gdb/
2008-04-04  Pedro Alves  <pedro@@codesourcery.com>

	* mi/mi-cmds.h (enum mi_cmd_result): Delete MI_CMD_ERROR.
	(mi_error_message): Delete declaration.
	* mi/mi-interp.c (mi_cmd_interpreter_exec): Call error instead of
	returning MI_CMD_ERROR.
	* mi/mi-main.c (mi_error_message): Delete.
	(mi_cmd_exec_interrupt):
	(mi_cmd_thread_select, mi_cmd_thread_list_ids)
	(mi_cmd_thread_info): Call error instead of returning
	MI_CMD_ERROR.
	(mi_cmd_data_list_register_values): Call error instead of
	returning MI_CMD_ERROR.  Adapt to new get_register interface.
	(get_register): Change return typo to void.  Call error instead of
	returning MI_CMD_ERROR.
	(mi_cmd_data_write_register_values): Call error instead of
	returning MI_CMD_ERROR.
	(mi_cmd_list_features): Return MI_CMD_DONE.
	(captured_mi_execute_command): Remove MI_CMD_ERROR handling.
	(mi_execute_command): Always print exceptions with -error.

gdb/testsuite/
2008-04-04  Pedro Alves  <pedro@@codesourcery.com>

	* gdb.mi/mi-disassemble.exp, gdb.mi/mi-stack.exp,
	gdb.mi/mi-syn-frame.exp, gdb.mi/mi-var-block.exp,
	gdb.mi/mi-var-cmd.exp, gdb.mi/mi-var-display.exp,
	gdb.mi/mi2-disassemble.exp, gdb.mi/mi2-stack.exp,
	gdb.mi/mi2-syn-frame.exp, gdb.mi/mi2-var-block.exp,
	gdb.mi/mi2-var-cmd.exp, gdb.mi/mi2-var-display.exp: Update to not
	expect an mi error duplicated in stderr.
@
text
@d107 2
a108 1
static void mi_exec_async_cli_cmd_continuation (struct continuation_arg *arg);
a687 1
  do_exec_cleanups (ALL_CLEANUPS);
d1187 2
d1227 1
a1227 1
      make_exec_cleanup (free_current_contents, &last_async_command);
d1230 10
a1239 2
	return parse->cmd->args_func (parse->args, 0 /*from_tty */ );
      return parse->cmd->argv_func (parse->command, parse->argv, parse->argc);
a1299 1
  char *async_args;
d1302 1
a1302 10
    {
      async_args = (char *) xmalloc (strlen (args) + 2);
      make_exec_cleanup (free, async_args);
      strcpy (async_args, args);
      strcat (async_args, "&");
      run = xstrprintf ("%s %s", mi, async_args);
      make_exec_cleanup (free, run);
      add_continuation (mi_exec_async_cli_cmd_continuation, NULL);
      old_cleanups = NULL;
    }
d1304 2
a1305 4
    {
      run = xstrprintf ("%s %s", mi, args);
      old_cleanups = make_cleanup (xfree, run);
    }
d1327 7
d1338 7
a1344 1
  if (!target_can_async_p ())
d1360 1
a1360 1
    }
d1365 1
a1365 1
mi_exec_async_cli_cmd_continuation (struct continuation_arg *arg)
d1367 1
d1375 5
a1379 1
  do_exec_cleanups (ALL_CLEANUPS);
@


1.110
log
@(enum captured_mi_execute_command_actions):
Spell suppress in EXECUTE_COMMAND_SUPPRESS_PROMPT correctly.
@
text
@a98 1
char *mi_error_message;
d111 1
a111 1
static int get_register (int regnum, int format);
d221 2
a222 4
    {
      mi_error_message = xstrprintf ("mi_cmd_exec_interrupt: Inferior not executing.");
      return MI_CMD_ERROR;
    }
d242 1
d245 5
d251 2
a252 2
      mi_error_message = xstrprintf ("mi_cmd_thread_select: USAGE: threadnum.");
      return MI_CMD_ERROR;
a253 2
  else
    rc = gdb_thread_select (uiout, argv[0], &mi_error_message);
d255 1
a255 4
  if (rc == GDB_RC_FAIL)
    return MI_CMD_ERROR;
  else
    return MI_CMD_DONE;
d262 1
d265 5
d271 2
a272 2
      mi_error_message = xstrprintf ("mi_cmd_thread_list_ids: No arguments required.");
      return MI_CMD_ERROR;
a273 2
  else
    rc = gdb_list_thread_ids (uiout, &mi_error_message);
d275 1
a275 4
  if (rc == GDB_RC_FAIL)
    return MI_CMD_ERROR;
  else
    return MI_CMD_DONE;
d284 1
a284 4
    {
      mi_error_message = xstrprintf ("Invalid MI command");
      return MI_CMD_ERROR;
    }
d332 2
a333 5
	{
	  do_cleanups (cleanup);
	  mi_error_message = xstrprintf ("bad register number");
	  return MI_CMD_ERROR;
	}
d384 1
a384 5
	    {
	      do_cleanups (cleanup);
	      mi_error_message = xstrprintf ("mi_cmd_data_list_changed_registers: Unable to read register contents.");
	      return MI_CMD_ERROR;
	    }
d402 1
a402 5
	    {
	      do_cleanups (cleanup);
	      mi_error_message = xstrprintf ("mi_cmd_data_list_register_change: Unable to read register contents.");
	      return MI_CMD_ERROR;
	    }
d407 1
a407 5
	{
	  do_cleanups (cleanup);
	  mi_error_message = xstrprintf ("bad register number");
	  return MI_CMD_ERROR;
	}
d449 1
a449 1
  int regnum, numregs, format, result;
d463 1
a463 4
    {
      mi_error_message = xstrprintf ("mi_cmd_data_list_register_values: Usage: -data-list-register-values <format> [<regnum1>...<regnumN>]");
      return MI_CMD_ERROR;
    }
d480 1
a480 6
	  result = get_register (regnum, format);
	  if (result == -1)
	    {
	      do_cleanups (list_cleanup);
	      return MI_CMD_ERROR;
	    }
d497 1
a497 6
	  result = get_register (regnum, format);
	  if (result == -1)
	    {
	      do_cleanups (list_cleanup);
	      return MI_CMD_ERROR;
	    }
d501 1
a501 5
	{
	  do_cleanups (list_cleanup);
	  mi_error_message = xstrprintf ("bad register number");
	  return MI_CMD_ERROR;
	}
d508 1
a508 1
static int
d527 1
a527 4
    {
      mi_error_message = xstrprintf ("Optimized out");
      return -1;
    }
a552 1
  return 1;
d574 1
a574 4
    {
      mi_error_message = xstrprintf ("mi_cmd_data_write_register_values: Usage: -data-write-register-values <format> [<regnum1> <value1>...<regnumN> <valueN>]");
      return MI_CMD_ERROR;
    }
d579 1
a579 4
    {
      mi_error_message = xstrprintf ("mi_cmd_data_write_register_values: No registers.");
      return MI_CMD_ERROR;
    }
d582 1
a582 4
    {
      mi_error_message = xstrprintf ("mi_cmd_data_write_register_values: No regs and values specified.");
      return MI_CMD_ERROR;
    }
d585 1
a585 4
    {
      mi_error_message = xstrprintf ("mi_cmd_data_write_register_values: Regs and vals are not in pairs.");
      return MI_CMD_ERROR;
    }
d604 1
a604 4
	{
	  mi_error_message = xstrprintf ("bad register number");
	  return MI_CMD_ERROR;
	}
a623 1
      mi_error_message = xstrprintf ("mi_cmd_data_evaluate_expression: Usage: -data-evaluate-expression expression");
d625 1
a625 1
      return MI_CMD_ERROR;
d755 1
a755 4
    {
      mi_error_message = xstrprintf ("mi_cmd_data_read_memory: Usage: ADDR WORD-FORMAT WORD-SIZE NR-ROWS NR-COLS [ASCHAR].");
      return MI_CMD_ERROR;
    }
d791 2
a792 4
    {
      mi_error_message = xstrprintf ("mi_cmd_data_read_memory: invalid number of rows.");
      return MI_CMD_ERROR;
    }
d796 2
a797 4
    {
      mi_error_message = xstrprintf ("mi_cmd_data_read_memory: invalid number of columns.");
      return MI_CMD_ERROR;
    }
d812 1
a812 5
    {
      do_cleanups (cleanups);
      mi_error_message = xstrdup ("Unable to read memory.");
      return MI_CMD_ERROR;
    }
d944 1
a944 4
    {
      mi_error_message = xstrprintf ("mi_cmd_data_write_memory: Usage: [-o COLUMN_OFFSET] ADDR FORMAT WORD-SIZE VALUE.");
      return MI_CMD_ERROR;
    }
d993 1
a993 1
  return MI_CMD_ERROR;
d1014 1
a1014 1
  return MI_CMD_ERROR;
d1054 1
a1054 1
          timestamp (&cmd_finished);
a1075 13
	  else if (args->rc == MI_CMD_ERROR)
	    {
	      if (mi_error_message)
		{
		  fputs_unfiltered (context->token, raw_stdout);
		  fputs_unfiltered ("^error,msg=\"", raw_stdout);
		  fputstr_unfiltered (mi_error_message, '"', raw_stdout);
		  xfree (mi_error_message);
		  mi_error_message = NULL;
		  fputs_unfiltered ("\"\n", raw_stdout);
		}
	      mi_out_rewind (uiout);
	    }
a1115 13
	    else if (args->rc == MI_CMD_ERROR)
	      {
		if (mi_error_message)
		  {
		    fputs_unfiltered (context->token, raw_stdout);
		    fputs_unfiltered ("^error,msg=\"", raw_stdout);
		    fputstr_unfiltered (mi_error_message, '"', raw_stdout);
		    xfree (mi_error_message);
		    mi_error_message = NULL;
		    fputs_unfiltered ("\"\n", raw_stdout);
		  }
		mi_out_rewind (uiout);
	      }
a1152 2
      /* FIXME: cagney/1999-11-04: Can this use of catch_exceptions either
         be pushed even further down or even eliminated?  */
a1155 9
      exception_print (gdb_stderr, result);

      if (args.action == EXECUTE_COMMAND_SUPPRESS_PROMPT)
	{
	  /* The command is executing synchronously.  Bail out early
	     suppressing the finished prompt.  */
	  mi_parse_free (command);
	  return;
	}
d1165 1
a1165 1
	      fputstr_unfiltered (result.message, '"', raw_stdout);
d1169 1
d1171 5
d1213 9
a1221 7
	      fputs_unfiltered (parse->token, raw_stdout);
	      fputs_unfiltered ("^error,msg=\"", raw_stdout);
	      fputs_unfiltered ("Cannot execute command ", raw_stdout);
	      fputstr_unfiltered (parse->command, '"', raw_stdout);
	      fputs_unfiltered (" while target running", raw_stdout);
	      fputs_unfiltered ("\"\n", raw_stdout);
	      return MI_CMD_ERROR;
d1243 13
a1255 7
      fputs_unfiltered (parse->token, raw_stdout);
      fputs_unfiltered ("^error,msg=\"", raw_stdout);
      fputs_unfiltered ("Undefined mi command: ", raw_stdout);
      fputstr_unfiltered (parse->command, '"', raw_stdout);
      fputs_unfiltered (" (missing implementation)", raw_stdout);
      fputs_unfiltered ("\"\n", raw_stdout);
      return MI_CMD_ERROR;
@


1.109
log
@	Implement -thread-info.
        * gdbthread.h (print_thread_info): Declare.

        * thread.c (print_thread_info): New, extracted
        from info_threads_command and adjusted to
        work for CLI and MI.
        (info_threads_command): Use print_thread_info.
	* Makefile.in: Update dependencies.

        * mi/mi-cmds.c (mi_cmds): Specify a handler
        for -thread-info.
        * mi/mi-cmds.h (mi_cmd_thread_info): Declare.
        * mi/mi-main.c (mi_cmd_thread_info): New.
        (mi_cmd_list_features): Include 'thread-info'.
@
text
@d70 1
a70 1
    EXECUTE_COMMAND_SUPRESS_PROMPT
d1091 1
a1091 1
   to perfrom after the given command has executed (display/supress
d1166 1
a1166 1
	  args->action = EXECUTE_COMMAND_SUPRESS_PROMPT;
d1256 1
a1256 1
      if (args.action == EXECUTE_COMMAND_SUPRESS_PROMPT)
@


1.108
log
@	Updated copyright notices for most files.
@
text
@d280 18
d1076 1
@


1.107
log
@	* mi/mi-main.c (mi_cmd_list_features): Announce
	the 'pending-breakpoints' feature.
@
text
@d3 1
a3 1
   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2007
@


1.106
log
@        * mi/mi-main.c: Remove code that was commented out in 1999.
@
text
@d1057 1
@


1.105
log
@	* mi/mi-main.c (captured_mi_execute_command): Clear mi_error_message
	after freeing it.
@
text
@a645 30
#if 0
/* This is commented out because we decided it was not useful.  I leave
   it, just in case.  ezannoni:1999-12-08 */

/* Assign a value to a variable.  The expression argument must be in
   the form A=2 or "A = 2" i.e. if there are spaces it needs to be
   quoted.  */
enum mi_cmd_result
mi_cmd_data_assign (char *command, char **argv, int argc)
{
  struct expression *expr;
  struct cleanup *old_chain;

  if (argc != 1)
    {
      mi_error_message = xstrprintf ("mi_cmd_data_assign: Usage: -data-assign expression");
      return MI_CMD_ERROR;
    }

  /* NOTE what follows is a clone of set_command().  FIXME: ezannoni
     01-12-1999: Need to decide what to do with this for libgdb purposes.  */

  expr = parse_expression (argv[0]);
  old_chain = make_cleanup (free_current_contents, &expr);
  evaluate_expression (expr);
  do_cleanups (old_chain);
  return MI_CMD_DONE;
}
#endif

@


1.104
log
@	* mi/mi-cmds.c (mi_cmds): Register -list-features.
	* mi/mi-cmds.h (mi_cmd_list_features): New.
	* mi/mi-main.c (mi_cmd_list_features): New.
@
text
@d1164 1
d1217 1
@


1.103
log
@	* mi-main.c (mi_load_progress): Handle MI2 and MI3 interpreters.
@
text
@d1078 19
@


1.103.2.1
log
@	* mi/mi-main.c (captured_mi_execute_command): Clear mi_error_message
	after freeing it.
@
text
@a1144 1
		  mi_error_message = NULL;
a1196 1
		    mi_error_message = NULL;
@


1.102
log
@        Switch the license of all .c files to GPLv3.
        Switch the license of all .h files to GPLv3.
        Switch the license of all .cc files to GPLv3.
@
text
@d1466 2
a1467 1
  if (current_interp_named_p (INTERP_MI))
d1471 2
@


1.101
log
@2007-08-10  Michael Snyder  <msnyder@@access-company.com>

	* mi/mi-main.c (mi_cmd_data_evaluate_expression): Resource leak.
@
text
@d12 1
a12 1
   the Free Software Foundation; either version 2 of the License, or
d21 1
a21 3
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street, Fifth Floor,
   Boston, MA 02110-1301, USA.  */
@


1.100
log
@	* regcache.c (struct regcache): Add ptid_t member.
	(regcache_xmalloc): Initialize it.
	(regcache_cpy_no_passthrough): Do not refer to current_regcache.
	(regcache_dup): Likewise.
	(regcache_dup_no_passthrough): Likewise.
	(current_regcache): Make static.
	(registers_ptid): Remove variable.
	(get_thread_regcache): New function.
	(get_current_regcache): New function.
	(registers_changed): Implement by freeing current regcache.
	(regcache_raw_read): Do not refer to current_regcache.  Set
	inferior_ptid to regcache->ptid while calling target routines.
	(regcache_raw_write): Likewise.
	(regcache_raw_supply): Do not refer to current_regcache.
	(read_pc_pid): Use thread regcache.  Do not modify inferior_ptid.
	(write_pc_pid): Likewise.
	(build_regcache): Remove.
	(_initialize_regcache): Do not call DEPRECATED_REGISTER_GDBARCH_SWAP
	or deprecated_register_gdbarch_swap.  Do not initialize
	registers_ptid.
	* regcache.h (get_current_regcache): Add prototype.
	(get_thread_regcache): Likewise.
	(current_regcache): Remove declaration.

	* corelow.c (core_open): Replace current_regcache by
	get_current_regcache ().
	* frame.c (frame_pop): Likewise.
	(put_frame_register): Likewise.
	(get_current_frame, create_new_frame): Likewise.
	* mi/mi-main.c (mi_cmd_data_write_register_values): Likewise.
	* stack.c (return_command): Likewise.
	* infcall.c (call_function_by_hand): Likewise.
	* infrun.c (resume): Likewise.
	(save_inferior_status, restore_inferior_status): Likewise.
	* linux-fork.c (fork_load_infrun_state): Likewise.
	(fork_save_infrun_state): Likewise.
	* win32-nat.c (win32_resume): Likewise.
	* i386fbsd-nat.c (i386fbsd_resume): Likewise.
	* monitor.c (monitor_wait): Likewise.
	* remote.c (remote_wait): Likewise.
	* remote-mips.c (mips_wait): Likewise.

	* bsd-kvm.c (bsd_kvm_open): Likewise
	(bsd_kvm_proc_cmd, bsd_kvm_pcb_cmd): Likewise.
	* fbsd-nat.c (fbsd_make_corefile_notes): Likewise.
	* i386-linux-nat.c (i386_linux_resume): Likewise.
	* ia64-linux-nat.c (ia64_linux_insert_watchpoint): Likewise.
	(ia64_linux_stopped_data_address): Likewise.

	* frv-tdep.c (frv_fdpic_loadmap_addresses): Likewise.
	* m32c-tdep.c (m32c_virtual_frame_pointer): Likewise.
	* mep-tdep.c (current_me_module, current_options): Likewise.
	* mips-tdep.c (deprecated_mips_set_processor_regs_hack): Likewise.

	* linux-nat.c (linux_nat_do_thread_registers): Use thread
	regcache instead of current_regcache.  Call target_fetch_registers.
	(linux_nat_corefile_thread_callback): Update call site.
	(linux_nat_do_registers): Likewise.
	* procfs.c (procfs_do_thread_registers): Use thread regcache instead
	of current_regcache.
	(procfs_make_note_section): Likewise.
	* proc-service.c (ps_lgetregs, ps_lsetregs): Likewise.
	(ps_lgetfpregs, ps_lsetfpregs): Likewise.
	* sol-thread.c (ps_lgetregs, ps_lsetregs): Likewise.
	(ps_lgetfpregs, ps_lsetfpregs): Likewise.
@
text
@d694 1
@


1.99
log
@2007-06-09  Markus Deuling  <deuling@@de.ibm.com>

	* gdbarch.sh (REGISTER_NAME): Replace by gdbarch_register_name.
	* tracepoint.c (scope_info): Likewise.
	* target.c (debug_print_register): Likewise.
	* stack.c (frame_info): Likewise.
	* sh-tdep.c (sh_register_reggroup_p): Likewise.
	* sh64-tdep.c (sh64_do_fp_register, sh64_do_register)
	(sh64_media_print_registers_info)
	(sh64_compact_print_registers_info): Likewise.
	* rs6000-tdep.c (rs6000_register_reggroup_p): Likewise.
	* remote-sim.c (gdbsim_fetch_register): Likewise.
	* remote.c (packet_reg): Likewise (comment).
	* reggroups.c (default_register_reggroup_p): Likewise.
	* regcache.c (regcache_dump): Likewise.
	* printcmd.c (address_info): Likewise.
	* ppc-linux-nat.c (fetch_register, store_register): Likewise.
	* mt-dep.c (mt_registers_info): Likewise.
	* mn10300-tdep.c (mn10300_dwarf2_reg_to_regnum): Likewise (comment).
	* mips-tdep.c (mips_register_reggroup_p, mips_read_fp_register_single)
	(mips_read_fp_register_double, mips_print_fp_register)
	(mips_print_register, print_gp_register_row, mips_print_registers_info)
	(mips_register_sim_regno): Likewise.
	* m68klinux-nat.c (regmap, fetch_register, store_register): Likewise.
	* inf-ptrace.c (inf_ptrace_fetch_register)
	(inf_ptrace_store_register): Likewise.
	* infcmd.c (default_print_registers_info): Likewise.
	* ia64-linux-nat.c (ia64_linux_fetch_register)
	(ia64_linux_store_register): Likewise.
	* i386-linux-nat.c (fetch_register, store_register): Likewise.
	* i386gnu-nat.c (gnu_fetch_registers, gnu_store_registers): Likewise.
	* hppa-linux-nat.c (fetch_register, store_register): Likewise.
	* hppa-hpux-nat.c (hppa_hpux_fetch_register)
	(hppa_hpux_store_register): Likewise.
	* findvar.c (locate_var_value): Likewise.
	* dwarf2loc.c (locexpr_describe_location): Likewise.
	* dwarf2-frame.c (execute_cfa_program): Likewise.
	* arm-tdep.c (arm_push_dummy_call): Likewise.
	* arch-utils.c (legacy_register_sim_regno): Likewise.
	* alpha-tdep.c (alpha_register_reggroup_p): Likewise.
	* alpha-nat.c (fetch_osf_core_registers): Likewise.
	* mi/mi-main.c (mi_cmd_data_list_register_names)
	(mi_cmd_data_list_changed_registers, mi_cmd_data_list_register_values)
	(mi_cmd_data_write_register_values): Likewise.
	* gdbarch.c, gdbarch.h: Regenerate.
@
text
@d637 1
a637 1
	  regcache_cooked_write_signed (current_regcache, regnum, value);
@


1.98
log
@2007-05-31  Markus Deuling  <deuling@@de.ibm.com>

	* gdbarch.sh (NUM_REGS): Replace by gdbarch_num_regs.
	* i386-tdep.c (i386_dbx_reg_to_regnum)
	(i386_svr4_reg_to_regnum): Likewise.
	* inf-ptrace.c (inf_ptrace_fetch_registers)
	(inf_ptrace_store_registers): Likewise.
	* corelow.c (get_core_registers): Likewise.
	* i386-linux-nat.c (supply_gregset, fill_gregset)
	(i386_linux_fetch_inferior_registers)
	(i386_linux_store_inferior_registers): Likewise.
	* remote.c (init_remote_state,packet_reg_from_regnum)
	(packet_reg_from_pnum,process_g_packet,remote_fetch_registers)
	(remote_prepare_to_store,store_registers_using_G)
	(remote_store_registers,remote_arch_state): Likewise.
	* tracepoint.c (encode_actions): Likewise.
	* mi/mi-main.c (mi_cmd_data_list_register_names)
	(mi_cmd_data_list_changed_registers,mi_cmd_data_list_register_values)
	(mi_cmd_data_write_register_values): Likewise.
	* tui/tui-regs.c (tui_show_register_group)
	(tui_show_register_group): Likewise.
	* xtensa-tdep.h (FP_ALIAS): Likewise.
	* xtensa-tdep.c (xtensa_register_name,xtensa_register_type)
	(xtensa_reg_to_regnum,xtensa_pseudo_register_read)
	(xtensa_pseudo_register_write,xtensa_register_reggroup_p): Likewise.
	* win32-nat.c (do_win32_fetch_inferior_registers)
	(do_win32_store_inferior_registers,fetch_elf_core_registers
	* user-regs.h: Likewise (comment).
	* user-regs.c (user_reg, user_reg_map_name_to_regnum): Likewise.
	* trad-frame.c (trad_frame_alloc_saved_regs): Likewise.
	* target-descriptions.h: Likewise (comment).
	* target-descriptions.c (tdesc_use_registers): Likewise (comment).
	* target.c (debug_print_register): Likewise.
	* stack.c (frame_info): Likewise.
	* stabsread.c (define_symbol): Likewise.
	* sh64-tdep.c (sh64_do_pseudo_register,sh64_print_register)
	(sh64_media_print_registers_info)
	(sh64_compact_print_registers_info): Likewise.
	* rs6000-tdep.c (rs6000_register_sim_regno): Likewise.
	* rs6000-nat.c (fetch_register,store_register): Likewise.
	* remote-sim.c (one2one_register_sim_regno,gdbsim_fetch_register)
	(gdbsim_fetch_register,gdbsim_store_register): Likewise.
	* remote-mips.c (mips_fetch_registers,mips_store_registers): Likewise.
	* remote-m32r-sdi.c (m32r_fetch_registers)
	(m32r_store_registers): Likewise.
	* reggroups.c (default_register_reggroup_p): Likewise.
	* regcache.c (init_regcache_descr,register_size,regcache,regcache_save)
	(regcache_restore,regcache_dump): Likewise.
	* monitor.c (monitor_fetch_registers,monitor_store_registers): Likewise.
	* mips-tdep.c (mips_xfer_register,mips_register_name)
	(mips_register_reggroup_p,mips_pseudo_register_read)
	(mips_pseudo_register_write,mips_convert_register_p,mips_register_type)
	(mips_unwind_pc,mips_unwind_sp,mips_unwind_dummy_id,set_reg_offset)
	(mips16_scan_prologue,mips_insn16_frame_cache,reset_saved_regs)
	(mips32_scan_prologue,mips_insn32_frame_cache,read_next_frame_reg)
	(mips_n32n64_return_value,mips_o32_return_value,mips_o64_return_value)
	(print_gp_register_row,mips_print_registers_info)
	(mips_stab_reg_to_regnum,mips_dwarf_dwarf2_ecoff_reg_to_regnum)
	(mips_register_sim_regno): Likewise.
	* mips-linux-tdep.c (mips_linux_o32_sigframe_init)
	(mips_linux_n32n64_sigframe_init): Likewise.
	* mips-linux-nat.c (mips_linux_register_addr)
	(mips64_linux_register_addr): Likewise.
	* findvar.c (value_of_register): Likewise.
	* infcmd.c (default_print_registers_info,registers_info)
	(print_vector_info,print_float_info): Likewise.
	* mips64obsd-tdep.c (mips64obsd_sigframe_init): Likewise.
	* inf-child.c (inf_child_fetch_inferior_registers): Likewise.
	* m68k-tdep.c (m68k_dwarf_reg_to_regnum): Likewise.
	* m68hc11-tdep.c (m68hc11_frame_unwind_cache(: Likewise.
	* m32r-tdep.c (m32r_frame_unwind_cache): Likewise.
	* ia64-linux-nat.c (ia64_register_addr,ia64_cannot_fetch_register)
	(ia64_cannot_store_register,ia64_linux_fetch_registers)
	(ia64_linux_store_registers): Likewise.
	* hpux-thread.c (hpux_thread_fetch_registers)
	(hpux_thread_store_registers): Likewise.
	* h8300-tdep.c (E_PSEUDO_CCR_REGNUM,E_PSEUDO_EXR_REGNUM)
	(h8300_init_frame_cache,h8300_frame_cache,h8300_frame_prev_register)
	(h8300_register_type): Likewise.
	* dwarf2-frame.c (dwarf2_frame_cache)
	(dwarf2_frame_state_alloc_regs): Likewise.
	* cris-tdep.c (cris_register_size,cris_cannot_fetch_register)
	(cris_cannot_store_register,crisv32_cannot_fetch_register)
	(crisv32_cannot_store_register,cris_register_name): Likewise.
	* avr-tdep.c (avr_frame_unwind_cache): Likewise.
	* arch-utils.c (legacy_register_sim_regno)
	(legacy_virtual_frame_pointer): Likewise.
	* arm-tdep.c (arm_make_prologue_cache,arm_register_sim_regno):Likewise.
	* arm-tdep.h: Likewise (comment).
	* frv-tdep.c (frv_register_sim_regno): Likewise.
	* m68klinux-nat.c (old_fetch_inferior_registers)
	(old_store_inferior_registers): Likewise.
	* m32c-tdep.c (m32c_virtual_frame_pointer): Likewise.
	* irix5-nat.c (fetch_core_registers): Likewise.
	* hppa-tdep.c (hppa_frame_cache): Likewise.
	* hppa-linux-nat.c (hppa_linux_register_addr)
	(hppa_linux_fetch_inferior_registers)
	(hppa_linux_store_inferior_registers): Likewise.
	* hppa-hpux-nat.c (hppa_hpux_fetch_inferior_registers)
	(hppa_hpux_store_inferior_registers): Likewise.
	* amd64-nat.c (amd64_native_gregset_reg_offset)
	(amd64_supply_native_gregset,amd64_collect_native_gregset): Likewise.
	* dbug-rom.c (dbug_regname): Likewise.
	* m68hc11-tdep.c (m68hc11_frame_unwind_cache)
	(HARD_PAGE_REGNUM (comment)): Likewise.
	* gdbarch.sh (NUM_PSEUDO_REGS): Replace by gdbarch_num_pseudo_regs.
	* i386-tdep.c (i386_dbx_reg_to_regnum)
	(i386_svr4_reg_to_regnum): Likewise.
	* mi/mi-main.c (mi_cmd_data_list_register_names)
	(mi_cmd_data_list_changed_registers,mi_cmd_data_list_register_values)
	(mi_cmd_data_write_register_values): Likewise.
	* gdbarch.c, gdbarch.h: Regenerate.
	* tui/tui-regs.c (tui_show_register_group): Likewise.
	* xtensa-tdep.h (FP_ALIAS): Likewise.
	* user-regs.h: Likewise (comment).
	* user-regs.c (user_reg, user_reg_map_name_to_regnum): Likewise.
	* trad-frame.c (trad_frame_alloc_saved_regs): Likewise.
	* target-descriptions.h: Likewise (comment).
	* target.c (debug_print_register): Likewise.
	* stack.c (frame_info): Likewise.
	* stabsread.c (define_symbol): Likewise.
	* sh64-tdep.c (sh64_print_register,sh64_media_print_registers_info)
	(sh64_compact_print_registers_info): Likewise.
	* rs6000-tdep.c (rs6000_register_sim_regno): Likewise.
	* regcache.c (init_regcache_descr,register_size,regcache,regcache_save
	(regcache_restore,regcache_dump): Likewise.
	* mips-tdep.c (print_gp_register_row,mips_print_registers_info)
	(mips_dwarf_dwarf2_ecoff_reg_to_regnum)
	(mips_stab_reg_to_regnum): Likewise.
	* findvar.c (value_of_register): Likewise.
	* infcmd.c (default_print_registers_info,registers_info)
	(print_vector_info,print_float_info): Likewise.
	* m68k-tdep.c (m68k_dwarf_reg_to_regnum): Likewise.
	* h8300-tdep.c (h8300_register_type): Likewise.
	* dwarf2-frame.c (dwarf2_frame_cache): Likewise.
	* frame.h (SIZEOF_FRAME_SAVED_REGS): Likewise.
	* xtensa-tdep.c (xtensa_register_type,xtensa_reg_to_regnum)
	(xtensa_pseudo_register_read,xtensa_pseudo_register_write): Likewise.
	* parse.c: Remove comment.
	* gdbarch.c, gdbarch.h: Regenerate
@
text
@d289 4
a292 4
     REGISTER_NAME because gdbarch_num_regs may be allocated for the union of
     the register sets within a family of related processors.  In this
     case, some entries of REGISTER_NAME will change depending upon
     the particular processor being debugged.  */
d305 2
a306 2
	  if (REGISTER_NAME (regnum) == NULL
	      || *(REGISTER_NAME (regnum)) == '\0')
d309 3
a311 1
	    ui_out_field_string (uiout, NULL, REGISTER_NAME (regnum));
d325 2
a326 2
      if (REGISTER_NAME (regnum) == NULL
	  || *(REGISTER_NAME (regnum)) == '\0')
d329 2
a330 1
	ui_out_field_string (uiout, NULL, REGISTER_NAME (regnum));
d354 4
a357 4
     REGISTER_NAME because gdbarch_num_regs may be allocated for the union of
     the register sets within a family of related processors.  In this
     case, some entries of REGISTER_NAME will change depending upon
     the particular processor being debugged.  */
d370 2
a371 2
	  if (REGISTER_NAME (regnum) == NULL
	      || *(REGISTER_NAME (regnum)) == '\0')
d392 2
a393 2
	  && REGISTER_NAME (regnum) != NULL
	  && *REGISTER_NAME (regnum) != '\000')
d457 4
a460 4
     REGISTER_NAME because gdbarch_num_regs may be allocated for the union of
     the register sets within a family of related processors.  In this
     case, some entries of REGISTER_NAME will change depending upon
     the particular processor being debugged.  */
d481 2
a482 2
	  if (REGISTER_NAME (regnum) == NULL
	      || *(REGISTER_NAME (regnum)) == '\0')
d503 2
a504 2
	  && REGISTER_NAME (regnum) != NULL
	  && *REGISTER_NAME (regnum) != '\000')
d589 4
a592 4
     REGISTER_NAME because gdbarch_num_regs may be allocated for the union of
     the register sets within a family of related processors.  In this
     case, some entries of REGISTER_NAME will change depending upon
     the particular processor being debugged.  */
d628 2
a629 1
	  && REGISTER_NAME (regnum) && *REGISTER_NAME (regnum))
@


1.97
log
@2007-05-31  Markus Deuling  <deuling@@de.ibm.com>

	* gdbarch.sh (TARGET_BYTE_ORDER): Replace by gdbarch_byte_order.
	* ax-gdb.c (gen_bitfield_ref): Likewise.
	* mi/mi-main.c (get_register): Likewise.
	* findvar.c (default_value_from_register, extract_signed_integer)
	(extract_unsigned_integer, extract_long_unsigned_integer)
	(store_signed_integer, store_unsigned_integer): Likewise.
	* regcache.c (regcache_dump): Likewise.
	* value.c (lookup_internalvar, value_of_internalvar)
	(set_internalvar): Likewise.
	* defs.h: Likewise.
	* valprint.c (print_binary_chars, print_octal_chars)
	(print_decimal_chars, print_hex_chars, print_char_chars): Likewise.
	* infcmd.c (default_print_registers_info): Likewise.
	* arch-utils.c (selected_byte_order, show_endian): Likewise.
	* stabsread.c (define_symbol): Likewise.
	* doublest.c (floatformat_from_length, floatformat_from_type)
	(extract_typed_floating, store_typed_floating): Likewise.
	* gdbarch.c, gdbarch.h: Regenerate.
@
text
@d289 1
a289 1
     REGISTER_NAME because NUM_REGS may be allocated for the union of
d294 2
a295 1
  numregs = NUM_REGS + NUM_PSEUDO_REGS;
d351 1
a351 1
     REGISTER_NAME because NUM_REGS may be allocated for the union of
d356 2
a357 1
  numregs = NUM_REGS + NUM_PSEUDO_REGS;
d454 1
a454 1
     REGISTER_NAME because NUM_REGS may be allocated for the union of
d459 2
a460 1
  numregs = NUM_REGS + NUM_PSEUDO_REGS;
d586 1
a586 1
     REGISTER_NAME because NUM_REGS may be allocated for the union of
d591 2
a592 1
  numregs = NUM_REGS + NUM_PSEUDO_REGS;
@


1.96
log
@	* gdbarch.sh: Remove deprecated_register_byte.
	* gdbarch.c, gdbarch.h: Regenerate.
	* arch-utils.h (generic_register_size, generic_register_byte): Remove.
	* arch-utils.c (generic_register_size, generic_register_byte): Remove.

	* regcache.h (regcache_valid_p): Make REGCACHE parameter const.
	* regcache.c (regcache_valid_p): Allow to query cooked registers in
	read-only register caches.  Make REGCACHE parameter const.
	(regcache_dump): Do not check DEPRECATED_REGISTER_BYTE.

	* mi/mi-main.c (old_regs): Remove.
	(mi_setup_architecture_data, _initialize_mi_main): Remove.
	(register_changed_p): Reimplement to compare two register caches.
	(mi_cmd_data_list_changed_registers): Update caller.
	* mi/mi-main.h (mi_setup_architecture_data): Remove.
	* mi/mi-interp.c (mi_interpreter_init): Do not call
	mi_setup_architecture_data.
@
text
@d555 1
a555 1
	  int idx = TARGET_BYTE_ORDER == BFD_ENDIAN_BIG ? j
@


1.95
log
@	* breakpoint.c (gdb_breakpoint_query): Really return an
	enum gdb_rc.
	(gdb_breakpoint): Likewise.
	* thread.c (do_captured_list_thread_ids): Likewise.
	(do_captured_thread_select): Likewise.
	* mi/mi-main.c (mi_cmd_thread_select): Expect an enum gdb_rc.
	(mi_cmd_thread_list_ids): Remove bogus initialization.
@
text
@a101 1
static char *old_regs;
d112 2
a113 1
static int register_changed_p (int regnum);
d335 2
d341 8
d357 1
a357 1
  cleanup = make_cleanup_ui_out_list_begin_end (uiout, "changed-registers");
d368 1
a368 1
	  changed = register_changed_p (regnum);
d390 1
a390 1
	  changed = register_changed_p (regnum);
d412 2
a413 1
register_changed_p (int regnum)
d415 3
a417 4
  gdb_byte raw_buffer[MAX_REGISTER_SIZE];

  if (! frame_register_read (get_selected_frame (NULL), regnum, raw_buffer))
    return -1;
d419 2
a420 2
  if (memcmp (&old_regs[DEPRECATED_REGISTER_BYTE (regnum)], raw_buffer,
	      register_size (current_gdbarch, regnum)) == 0)
d423 9
a431 4
  /* Found a changed register.  Return 1.  */

  memcpy (&old_regs[DEPRECATED_REGISTER_BYTE (regnum)], raw_buffer,
	  register_size (current_gdbarch, regnum));
d433 2
a434 1
  return 1;
a1524 14
void
mi_setup_architecture_data (void)
{
  old_regs = xmalloc ((NUM_REGS + NUM_PSEUDO_REGS) * MAX_REGISTER_SIZE + 1);
  memset (old_regs, 0, (NUM_REGS + NUM_PSEUDO_REGS) * MAX_REGISTER_SIZE + 1);
}

void
_initialize_mi_main (void)
{
  DEPRECATED_REGISTER_GDBARCH_SWAP (old_regs);
  deprecated_register_gdbarch_swap (NULL, 0, mi_setup_architecture_data);
}

@


1.94
log
@Numerous formatting changes.
(mi_cmd_data_write_register_values): Replace clause inadvertantly
removed in my previous change.
@
text
@d256 1
a256 5
  /* RC is enum gdb_rc if it is successful (>=0)
     enum return_reason if not (<0).  */
  if ((int) rc < 0 && (enum return_reason) rc == RETURN_ERROR)
    return MI_CMD_ERROR;
  else if ((int) rc >= 0 && rc == GDB_RC_FAIL)
d265 1
a265 1
  enum gdb_rc rc = MI_CMD_DONE;
@


1.93
log
@(mi_load_progress, timestamp, print_diff_now):
Use 1000000L instead of 1000000.
@
text
@d25 1
a25 1
/* Work in progress */
d43 1
a43 1
#include "gdbcore.h"		/* for write_memory() */
d67 1
a67 1
   captured_mi_execute_command */
d76 1
a76 1
   to mi_execute_command. */
d79 1
a79 1
  /* This return result of the MI command (output) */
d82 1
a82 1
  /* What action to perform when the call is finished (output) */
d85 1
a85 1
  /* The command context to be executed (input) */
d98 1
a98 1
/* The token of the last asynchronous command */
d116 1
a116 1
/* Command implementations. FIXME: Is this libgdb? No.  This is the MI
d118 1
a118 1
   formalized. */
d128 1
a128 1
  /* We have to print everything right here because we never return */
d133 1
a133 1
  /* FIXME: The function called is not yet a formal libgdb function */
d141 1
a141 1
  /* FIXME: Should call a libgdb function, not a cli wrapper */
d148 1
a148 1
  /* FIXME: Should call a libgdb function, not a cli wrapper */
d155 1
a155 1
  /* FIXME: Should call a libgdb function, not a cli wrapper */
d162 1
a162 1
  /* FIXME: Should call a libgdb function, not a cli wrapper */
d169 1
a169 1
  /* FIXME: Should call a libgdb function, not a cli wrapper */
d176 1
a176 1
  /* FIXME: Should call a libgdb function, not a cli wrapper */
d183 1
a183 1
  /* FIXME: Should call a libgdb function, not a cli wrapper */
d194 1
a194 1
       avoid being queried. */
d198 1
a198 1
       avoid being queried. */
d202 1
a202 1
     to print the frame here. */
d211 1
a211 1
  /* FIXME: Should call a libgdb function, not a cli wrapper */
d215 1
a215 1
/* Interrupt the execution of the target. Note how we must play around
d218 2
a219 2
   token when the target finally stops. See comments in
   mi_cmd_execute. */
d257 1
a257 1
     enum return_reason if not (<0). */
d302 1
a302 1
  if (argc == 0)		/* No args, just do all the regs */
d316 1
a316 1
  /* Else, list of register #s, just do listed regs */
d353 1
a353 1
  if (argc == 0)		/* No args, just do all the regs */
d374 1
a374 1
  /* Else, list of register #s, just do listed regs */
d417 1
a417 1
  /* Found a changed register. Return 1. */
d425 1
a425 1
/* Return a list of register number and value pairs. The valid
d427 1
a427 1
   display the registers contents. This can be one of: x (hexadecimal), d
d430 2
a431 2
   registers to fetch the content of. If the format is the only argument,
   a list of all the registers with their values is returned. */
d457 1
a457 1
  if (argc == 1)		/* No args, beside the format: do all the regs */
d478 1
a478 1
  /* Else, list of register #s, just do listed regs */
d509 1
a509 1
/* Output one register's contents in the desired format. */
d562 1
a562 1
   given as pairs. The corresponding MI command is 
d616 1
a616 1
	  /* Write it down */
d629 2
a630 2
/*This is commented out because we decided it was not useful. I leave
   it, just in case. ezannoni:1999-12-08 */
d632 3
a634 3
/* Assign a value to a variable. The expression argument must be in
   the form A=2 or "A = 2" (I.e. if there are spaces it needs to be
   quoted. */
d647 2
a648 2
  /* NOTE what follows is a clone of set_command(). FIXME: ezannoni
     01-12-1999: Need to decide what to do with this for libgdb purposes. */
d658 1
a658 1
/* Evaluate the value of the argument. The argument is an
d660 1
a660 1
   included in double quotes. */
d683 1
a683 1
  /* Print the result of the expression evaluation. */
d710 1
a710 1
/* Connect to the remote target. */
d720 2
a721 2
  /* target-select is always synchronous.  once the call has returned
     we know that we are connected. */
d724 1
a724 1
     change. */
d729 1
a729 1
  /* Issue the completion message here. */
d743 1
a743 1
   WORD-FORMAT: a char indicating format for the ``word''. See 
d745 1
a745 1
   WORD-SIZE: size of each ``word''; 1,2,4, or 8 bytes
d811 1
a811 1
  /* Start address of the memory dump. */
d813 1
a813 1
  /* The format character to use when displaying a memory word. See
d816 1
a816 1
  /* The size of the memory word. */
d840 1
a840 1
  /* The number of rows */
d847 1
a847 1
  /* number of bytes per row. */
d854 1
a854 1
  /* The un-printable character when printing ascii. */
d860 1
a860 1
  /* create a buffer and read it in. */
d874 1
a874 1
  /* output the header information. */
d883 1
a883 1
  /* Build the result as a two dimentional table. */
d953 1
a953 1
   cell is, if OFFSET_COLUMN is specified. Otherwise, the address of
d955 1
a955 1
   FORMAT: a char indicating format for the ``word''. See 
d962 1
a962 1
   Prints nothing. */
d970 1
a970 1
     enough when using a compiler other than GCC. */
d1009 2
a1010 2
  /* Extract all the arguments. */
  /* Start address of the memory dump. */
d1012 2
a1013 2
  /* The format character to use when displaying a memory word. See
     the ``x'' command. */
d1018 1
a1018 1
  /* Calculate the real address of the write destination. */
d1021 1
a1021 1
  /* Get the value as a number */
d1023 1
a1023 1
  /* Get the value into an array */
d1027 1
a1027 1
  /* Write it down to memory */
d1079 1
a1079 1
      /* A MI command was read from the input stream */
d1087 1
a1087 1
         that. */
d1100 1
a1100 1
	  /* print the result if there were no errors
d1136 1
a1136 1
	     synchronous mode. */
d1201 2
a1202 2
  /* This is to handle EOF (^D). We just quit gdb. */
  /* FIXME: we should call some API function here. */
d1220 1
a1220 1
         be pushed even further down or even eliminated? */
d1229 1
a1229 1
	     suppressing the finished prompt. */
d1251 1
a1251 1
  /* print any buffered hook code */
d1266 1
a1266 1
         and get rid of the last_async_command */
d1271 1
a1271 1
         last execution command given. So we have another string where
d1274 1
a1274 1
         print that one. This is possible because the interrupt
d1276 1
a1276 1
         default token string (last_async_command). */
d1303 2
a1304 2
      /* The operation is still implemented by a cli command */
      /* Must be a synchronous one */
d1311 1
a1311 1
      /* FIXME: DELETE THIS. */
d1323 2
a1324 2
   We don't want to channel things through the CLI, but call libgdb directly */
/* Use only for synchronous commands */
d1376 1
a1376 1
         command. */
d1388 1
a1388 1
         run command to the target. */
d1399 1
a1399 1
         print code leaves garbage around in the buffer. */
d1402 1
a1402 1
         the stopped message. */
@


1.92
log
@* mi/mi-main.c: Include <sys/resource.h> if present.
(rusage): Declare if HAVE_GETRUSAGE.
(current_command_ts, do_timings): New static variables.
(timestamp, print_diff_now, print_diff, timeval_diff):
New static timing functions.
(mi_cmd_enable_timings): New function for new MI command.
(captured_mi_execute_command, mi_execute_async_cli_command):
Call timing functions.

* mi/mi-cmds.c (mi_cmds): Add entry for new MI command
-enable-timings.

* mi/mi-cmds.h (mi_cmd_enable_timings): New extern.

* mi/mi-parse.h: (mi_timestamp): New structure.
(mi_parse): Add mi_timestamp* member.
@
text
@d1464 1
a1464 1
      delta.tv_usec += 1000000;
d1540 2
a1541 2
    tv->utime.tv_sec = usec/1000000;
    tv->utime.tv_usec = usec - 1000000*tv->utime.tv_sec;
d1558 1
a1558 1
    return ((end.tv_sec - start.tv_sec) * 1000000)
@


1.91
log
@(mi_cmd_execute): Call free_all_values.
@
text
@d53 8
d92 6
d120 5
d216 1
a216 1
   with the token varialbes, in order to display the current token in
d1035 24
d1073 2
d1089 4
d1095 3
d1112 4
d1211 8
d1408 2
d1526 46
@


1.90
log
@	* mi/mi-main.c: Remove obsolete comment.
@
text
@d1194 2
@


1.89
log
@Copyright updates for 2007.
@
text
@d44 1
a44 1
#include "value.h"		/* for deprecated_write_register_bytes() */
@


1.88
log
@	Warning fixes.
	* ada-lang.c (find_struct_field): Initialize *byte_offset_p.
	* breakpoint.c (do_enable_breakpoint): Ignore both mem_cnt and i.
	* c-typeprint.c (c_type_print_varspec_suffix): Don't test length
	greater than or equal to zero.
	* m2-typeprint.c (m2_array): Likewise.
	* p-typeprint.c (pascal_type_print_varspec_prefix): Likewise.
	* gdbtypes.c (copy_type_recursive): Correct == typo.
	* i386-tdep.c (i386_skip_prologue): Remove stray semicolon.
	* linux-nat.c (linux_nat_info_proc_cmd): Don't compare a pointer
	greater than zero.
	* macroscope.c (sal_macro_scope): Don't name a local variable "main".
	(default_macro_scope): Remove unused variable.
	* prologue-value.h (pv_area_find_reg): Don't name an argument
	"register".
	* remote-fileio.c (remote_fio_func_map): Add missing braces.
	* remote.c (sigint_remote_twice_token, sigint_remote_token): Change
	type.
	(cleanup_sigint_signal_handler): Remove casts.
	* valprint.c (val_print): Use a volatile local for the modified
	argument.
	* varobj.c (languages): Remove extra array dimension.
	(varobj_create): Correct access to languages array.
	* mi/mi-cmd-break.c (mi_cmd_break_insert, mi_cmd_break_watch): Add
	missing braces.
	* mi/mi-cmd-disas.c (mi_cmd_disassemble): Likewise.
	* mi/mi-cmd-env.c (mi_cmd_env_path, mi_cmd_env_dir): Likewise.
	* mi/mi-getopt.c (mi_valid_noargs): Likewise.
	* mi/mi-main.c (mi_cmd_data_read_memory): Likewise.
	(mi_cmd_data_write_memory): Likewise.
	* signals/signals.c (target_signal_to_string): Cast to int before
	comparing.
	* tui/tui-layout.c (init_and_make_win): Take and return a void *.
	Update all callers.
@
text
@d3 2
a4 2
   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005 Free Software
   Foundation, Inc.
@


1.87
log
@* mi/mi-main.c (mi_cmd_data_write_register_values): Use
regcache_cooked_write_signed instead of
deprecated_write_register_bytes.
@
text
@d765 1
a765 1
    0
d965 1
a965 1
    0
@


1.86
log
@	* utils.c (string_to_core_addr): Use error instead of
	internal_error.
	* mi/mi-main.c (mi_execute_command): Check for a NULL message.
@
text
@d548 1
a548 4
  int regnum;
  int i;
  int numregs;
  LONGEST value;
d587 1
a587 1
      regnum = atoi (argv[i]);
d589 2
a590 4
      if (regnum >= 0
	  && regnum < numregs
	  && REGISTER_NAME (regnum) != NULL
	  && *REGISTER_NAME (regnum) != '\000')
d592 1
a592 2
	  void *buffer;
	  struct cleanup *old_chain;
d594 1
a594 1
	  /* Get the value as a number */
d596 1
a596 4
	  /* Get the value into an array */
	  buffer = xmalloc (DEPRECATED_REGISTER_SIZE);
	  old_chain = make_cleanup (xfree, buffer);
	  store_signed_integer (buffer, DEPRECATED_REGISTER_SIZE, value);
d598 1
a598 3
	  deprecated_write_register_bytes (DEPRECATED_REGISTER_BYTE (regnum), buffer, register_size (current_gdbarch, regnum));
	  /* Free the buffer.  */
	  do_cleanups (old_chain);
@


1.85
log
@	PR remote/1966
	* dcache.c (dcache_write_line): Use target_write.
	(dcache_read_line): Use target_read.
	* mi/mi-main.c (mi_cmd_data_read_memory): Use target_read.
	* symfile.c (struct load_section_data): Add new per-section
	members.
	(load_progress): New function.
	(load_section_callback): Pass load_progress to the new
	target_write_with_progress.
	* target.c (current_xfer_partial, memory_xfer_partial): New.
	(target_xfer_partial): New prototype.
	(target_xfer_memory, target_xfer_partial_p, xfer_using_stratum)
	(do_xfer_memory, target_xfer_memory_partial)
	(target_read_memory_partial, target_write_memory_partial): Delete.
	(trust_readonly): Move higher in the file.
	(update_current_target): Use current_xer_partial.
	(target_xfer_partial): Use memory_xfer_partial.  Handle
	TARGET_OBJECT_RAW_MEMORY specially.
	(target_read_memory): Use target_read.
	(target_write_memory): Use target_write.
	(default_xfer_partial): Call to_xfer_partial directly.
	(target_write_with_progress): New function, based on target_write.
	(target_write): Call it.
	* target.h (enum target_object): Add TARGET_OBJECT_RAW_MEMORY.
	(target_write_with_progress): New prototype.
	(do_xfer_memory, target_read_memory_partial)
	(target_write_memory_partial): Delete prototypes.
@
text
@d1186 4
a1189 1
	  fputstr_unfiltered (result.message, '"', raw_stdout);
@


1.85.2.1
log
@	From Daniel Jacobowitz  <dan@@codesourcery.com>
	* utils.c (string_to_core_addr): Use error instead of
	internal_error.
	* mi/mi-main.c (mi_execute_command): Check for a NULL message.
@
text
@d1186 1
a1186 4
	  if (result.message == NULL)
	    fputs_unfiltered ("unknown error", raw_stdout);
	  else
	      fputstr_unfiltered (result.message, '"', raw_stdout);
@


1.84
log
@	* mi/mi-main.c (captured_mi_execute_command): Check the return
	value of -interpreter-exec.
@
text
@d856 4
a859 2
  nr_bytes = 0;
  while (nr_bytes < total_bytes)
d861 3
a863 7
      int error;
      long num = target_read_memory_partial (addr + nr_bytes, mbuf + nr_bytes,
					     total_bytes - nr_bytes,
					     &error);
      if (num <= 0)
	break;
      nr_bytes += num;
@


1.84.2.1
log
@2006-05-13    Changes based on Apple GDB (CVS repository 5th Sept 2005)

	* async-nat-inferior.c, async-nat-inferior.h,
	* async-nat-sigthread.c, async-nat-sigthread.h: New files

	* linux-nat.c: Include async-nat-inferior.h.
	(linux_nat_wait): Add extra argument.  If target_can_async_p
	do something completely different.

	* interps.h (interp_set, interp_set_quiet): New externs.

	* interps.c (interp_set): Make asynchronous.
	(interp_set_quiet): Don't make static.
	(current_interp_command_loop): Call functions with new arguments.

	* target.h (target_wait): Add extra argument.
	(gdb_override_async, gdb_set_async_override) New externs.
	(target_can_async_p): Make conditional on gdb_override_async.

	* target.c (gdb_override_async): New variable.
	(gdb_set_async_override, do_restore_target_async_mask):
	New functions.
	(debug_to_wait): Add extra argument.

	* linux-thread-db.c (thread_db_wait): Add extra argument.

	* wrapper.h (safe_execute_command): Declare structure.

	* top.c (*deprecated_target_wait_hook): Add extra argument.
	(read_command_file): Make asynchronous.

	* remote.c (remote_wait, remote_async_wait): Add extra argument.

	* infrun.c: Include event-top.h
	(wait_for_inferior, fetch_inferior_event): Add extra argument to
	target_wait.
	(proceed): Set target_executing = 0.
	(handle_inferior_event): Call async_disable_stdin if async.

	* inf-ptrace.c: Include inf-loop.h, async-nat-inferior.h.
	(inf_ptrace_him): Create a signal thread.
	(inf_ptrace_wait): Add extra argument to target_wait.

	* inf-loop.c (inferior_event_handler, complete_execution):
	Changes for asynchronous operation (copied verbatim).

	* inf-child.c: Include async-nat-inferior.h.
	(inf_child_target): Use methods async_terminal_inferior
	and async_terminal_ours.

	* i386-linux-nat.c: Include inf-loop.h, async-nat-inferior.h.
	(i386_linux_resume): Call gdb_process_events and then
	async methods.

	* exec.c: Include event-loop.h, async-nat-inferior.h.
	(async_file_handler, standard_async, standard_is_async_p)
	(standard_can_async_p): New functions.
	(init_exec_ops): Initialise above methods.

	* event-top.h (cli_command_loop): Make argument void*.

	* event-top.c (display_gdb_prompt, async_enable_stdin)
	(async_disable_stdin, handle_sigint, async_request_quit)
	(gdb_setup_readline, _initialize_event_loop):
	Changes for asynchronous operation (copied verbatim).
	(cli_command_loop): Make argument void*.

	* event-loop.h (gdb_client_data): Move typedef to defs.h.
	(gdb_create_event): Declare.
	(event_handler_func): Move typedef from event-loop.c.

	* event-loop.c (use_poll): Set to 0.
	(gdb_queue_event, gdb_create_event): New functions.
	(async_queue_event): Don't make static.
	(create_file_event): Use gdb_create_event.
	(gdb_event): Change component from int to void*.
	(process_event, handle_file_event, handle_timer_event):
	Change according to gdb_event.
	(event_handler_func): Move typedef to event-loop.c.

	* defs.h: (gdb_mi_run_status, event_loop_p): New externs.
	(gdb_client_data): Move typedef from event-loop.h.
	(*deprecated_command_loop_hook): Make argument void*.
	(*deprecated_target_wait_hook): Add argument.

	* cli-out.h (cli_quoted_out_new): Declare.

	* cli-out.c (cli_quoted_out_new): New function.
	Include mi/mi-console.h.

	* cli/cli-interp.c: Include inferior.h, mi/mi-console.h.
	(safe_execute_command): Make static.
	(cli_interpreter_resume, cli_interpreter_exec):
	Make asynchronous.
	(cli_quoted_interpreter_resume): New function.
	(_initialize_cli_interp): Add li_command_loop to procs.
	Initialize the console-quoted interpreter.

	* tui/tui-hooks.c (tui_target_wait_hook): Add extra argument.

	* mi/mi-main.h (mi_dont_register_continuation)
	(current_command_token,  mi_interp, mi_interpreter_exec_continuation)
	(mi_continuation_arg): New externs.
	(mi_setup_continuation_arg): Declare.

	* mi/mi-main.c: Include wrapper.h.
	(struct mi_continuation_arg): New structure.
	(mi_interpreter_exec_continuation): Move to mi-interp.c.
	(mi_execute_async_cli_command)
	(mi_exec_async_cli_cmd_continuation): Make asynchronous.
	(mi_setup_continuation_arg): New function.

	* mi/mi-interp.c (mi_interpreter_exec_continuation):
	Move from mi-main.c
	(mi_cmd_interpreter_exec): Switch interpreters.  Make
	asynchronous.
	(mi1_command_loop, mi2_command_loop, mi3_command_loop):
	Make argument void*.

	* Makefile.in (async_nat_inferior_h, async_nat_sigthread_h):
	New variables.
	(gdb$(EXEEXT), $(TUI)$(EXEEXT)): Link with libpthread.
	(async-nat-inferior.o, async-nat-sigthread.o): New rules.
	(COMMON_OBS): Add above object files.
	(exec.o, i386-linux-nat.o, inf-ptrace.o, linux-nat.o):
	Update dependencies.

2006-05-13  Nick Roberts  <nickrob@@snap.net.nz>

	* main.c: (event_loop_p): Re-instate variable.
	(captured_main): Re-instate async/noasync option.
	(print_gdb_help): Describe option again.

	* exec.c(init_exec_ops): Only initialise async methods with async
	option.

	* inf-ptrace.c (inf_ptrace_him): Only reate a signal thread with
	async option.

	* README.async, TODO.async, PROBLEMS.async: New files.
@
text
@a47 1
#include "wrapper.h"
a80 9
struct mi_continuation_arg
{
  char *token;
  struct mi_timestamp *timestamp;
  struct cleanup *cleanups;
};

static void free_continuation_arg (struct mi_continuation_arg *arg);

a83 15
/* A pointer to the current mi_parse's command token.  This is needed
 because we can't pass the token down to the mi command levels.  This
 will get cleaned up once captured_mi_execute_command finishes, so 
 if you need it for a continuation, dup it.  */
char *current_command_token;

/* This is used to pass the current command timestamp
   down to continuation routines. */
//struct mi_timestamp *current_command_ts;

//static int do_timings = 0;

/* Points to the current interpreter, used by the mi context callbacks.  */
struct interp *mi_interp;

a105 7
/*
static void timestamp (struct mi_timestamp *tv);
static void print_diff_now (struct mi_timestamp *start);
static void copy_timestamp (struct mi_timestamp *dst, struct mi_timestamp *src);
static void print_diff (struct mi_timestamp *start, struct mi_timestamp *end);
*/

a1149 71
void
mi_interpreter_exec_continuation (struct continuation_arg *in_arg)
{
  struct mi_continuation_arg *arg 
    = (struct mi_continuation_arg *) in_arg;

  if (!target_executing) 
    {
      /* This is a little tricky because bpstat_do_actions can restart
	 the inferior.  So first say we have stopped, and flush the
	 output so we get the reason aligned correctly, then run the
	 breakpoint actions, and if they have restarted the inferior,
	 suppress the prompt. */

      if (arg->cleanups != NULL)
	do_exec_cleanups (arg->cleanups);

      if (arg && arg->token)
	fputs_unfiltered (arg->token, raw_stdout);

      fputs_unfiltered ("*stopped", raw_stdout);
      //      if (do_timings && arg && arg->timestamp)
      //	print_diff_now (arg->timestamp);
      mi_out_put (uiout, raw_stdout);
      fputs_unfiltered ("\n", raw_stdout);
      
      /* Tricky point - we need to add this continuation 
	 before we run the actions, since one of the breakpoint commands
	 could have added a continuation, and ours would be in
	 front of theirs, and then the cleanups would be out of order. */

      if (target_can_async_p()) 
	{
	  //if (arg && arg->timestamp)
	  //  timestamp (arg->timestamp);
	  
	  add_continuation (mi_interpreter_exec_continuation, 
			  (struct continuation_arg *) arg);
	}

      bpstat_do_actions (&stop_bpstat);
      
      if (!target_executing)
	{
	  if (target_can_async_p ())
	    {
	      discard_all_continuations ();
	      free_continuation_arg (arg);
	    }
	  fputs_unfiltered ("(gdb) \n", raw_stdout);
	}
      else
	{
	  ui_out_field_string (uiout, "reason", "breakpoint-command");
	  if (arg && arg->token)
	    fputs_unfiltered (arg->token, raw_stdout);
	  fputs_unfiltered ("*started", raw_stdout);
	  //if (do_timings && arg && arg->timestamp)
	  //  print_diff_now (arg->timestamp);
	  mi_out_put (uiout, raw_stdout);
	  fputs_unfiltered ("\n", raw_stdout);
	}
      
      gdb_flush (raw_stdout);
      
    }
  else if (target_can_async_p()) 
    {
      add_continuation (mi_interpreter_exec_continuation, in_arg);
    }
}
a1291 1

d1295 1
d1299 12
a1310 1
  if (!target_can_async_p ())
d1312 1
a1312 2
      struct cleanup *old_cleanups;
      xasprintf (&run, "%s %s", mi, args);
d1314 1
d1316 2
d1321 2
a1322 2
      if (current_command_token)
	fputs_unfiltered (current_command_token, raw_stdout);
d1326 13
a1338 2
      
      execute_command ( /*ui */ run, 0 /*from_tty */ );
d1340 2
d1347 2
a1348 4
      if (current_command_token)
        {
	  fputs_unfiltered (current_command_token, raw_stdout);
        }
a1352 2
      //      if (current_command_ts)
      //	print_diff_now (current_command_ts);
a1354 46
  else
    {
      struct mi_continuation_arg *arg = NULL;
      struct cleanup *old_cleanups = NULL;
      volatile struct gdb_exception except;

      async_args = (char *) xmalloc (strlen (args) + 2);
      old_cleanups = make_cleanup (free, async_args);
      strcpy (async_args, args);
      strcat (async_args, "&");
      xasprintf (&run, "%s %s", mi, async_args);
      make_cleanup (free, run);

      /* Transfer the command token to the continuation.  That
	 will now print the results associated with this command. 
         Tricky point: have to add the continuation BEFORE running
         execute_command, or it will get run before any continuations
         that might get added by execute_command, in which case the
         cleanups will be out of order. */
      
      arg = mi_setup_continuation_arg (NULL);
      add_continuation (mi_exec_async_cli_cmd_continuation, 
			(struct continuation_arg *) arg);

      except = safe_execute_command (uiout, /*ui */ run, 0 /*from_tty */ );
      do_cleanups (old_cleanups);

      if (target_executing)
	{
	  if (current_command_token)
	    fputs_unfiltered (current_command_token, raw_stdout);
	  fputs_unfiltered ("^running\n", raw_stdout);
	  
	}
      else
	{
	  /* If we didn't manage to set the inferior going, that's
	     most likely an error... */
	  discard_all_continuations ();
	  free_continuation_arg (arg);
	  mi_error_message = "ahem" /*error_last_message () APPLE MERGE */;
	  return MI_CMD_ERROR;
	}

    }

d1359 1
a1359 1
mi_exec_async_cli_cmd_continuation (struct continuation_arg *in_arg)
d1361 8
a1368 80
  struct mi_continuation_arg *arg =
    (struct mi_continuation_arg *) in_arg;

  if (!target_executing)
    {
      if (arg && arg->token)
	{
	  fputs_unfiltered (arg->token, raw_stdout);
	}

      /* Do the cleanups.  Remember to set this to NULL, 
	 since we are passing the arg to the next continuation
	 if the target restarts, and we don't want to do these
	 cleanups again. */
      if (arg->cleanups)
	{
	  do_exec_cleanups (arg->cleanups);
	  arg->cleanups = NULL;
	}
      
      fputs_unfiltered ("*stopped", raw_stdout);
      //      if (do_timings && arg && arg->timestamp)
      //	print_diff_now (arg->timestamp);
      mi_out_put (uiout, raw_stdout);
      fputs_unfiltered ("\n", raw_stdout);
      
      /* Now run the actions for this breakpoint.  This may start
	 the target going again, but we shouldn't have to do
	 anything special about that, since the continuation
	 hooks for the commands will take care of that. */

      /* Tricky bit: we have to register the continuation before
	 calling bpstat_do_actions, or the continuations will
	 be out of order.  If we don't start, then we have to 
         discard the continuations.  N.B. We are assuming here
         that nothing that CALLED us has registered a continuation,
         if that becomes a problem, we will need to add the ability
         to discard continuations up to (and including) a given 
         continuation. */

      if (target_can_async_p ())
	{
	  /* Reset the timer, we will just accumulate times for this
	     command. */
	  //	  if (do_timings && arg && arg->timestamp)
	  //	    timestamp (arg->timestamp);
	  add_continuation (mi_exec_async_cli_cmd_continuation, 
			    (struct continuation_arg *) arg);
	}

      bpstat_do_actions (&stop_bpstat);
      
      if (!target_executing)
	{
	  /* Okay, we didn't need to use the continuation,
	     so discard it now. */
	  if (target_can_async_p ())
	    {
	      discard_all_continuations ();
	      free_continuation_arg (arg);
	    }
	  fputs_unfiltered ("(gdb) \n", raw_stdout);
	  gdb_flush (raw_stdout);
	}
      else
	{
	  if (arg && arg->token)
	    fputs_unfiltered (arg->token, raw_stdout);
	  
	  ui_out_field_string (uiout, "reason", "breakpoint-command");
	  fputs_unfiltered ("*started", raw_stdout);
	  mi_out_put (uiout, raw_stdout);
	  fputs_unfiltered ("\n", raw_stdout);
	  gdb_flush (raw_stdout);
	}	  
    }
  else if (target_can_async_p ())
    {
      add_continuation (mi_exec_async_cli_cmd_continuation, in_arg);
    }
a1467 82

int mi_dont_register_continuation = 0;

/* mi_setup_continuation_arg - sets up a continuation structure
   with the timer info and the command token, for use with
   an asyncronous mi command.  Will only cleanup the exec_cleanup
   chain back to CLEANUPS, or not at all if CLEANUPS is NULL. */

struct mi_continuation_arg *
mi_setup_continuation_arg (struct cleanup *cleanups)
{
  struct mi_continuation_arg *arg
    = (struct mi_continuation_arg *) 
    xmalloc (sizeof (struct mi_continuation_arg));

  if (current_command_token)
    {
      arg->token = xstrdup (current_command_token);
    }
  else
    arg->token = NULL;

  /* if (do_timings && current_command_ts)
    {
      arg->timestamp = (struct mi_timestamp *) 
	xmalloc (sizeof (struct mi_timestamp));
      copy_timestamp (arg->timestamp, current_command_ts);
      current_command_ts = NULL;
    }
    else */
    arg->timestamp = NULL;

  arg->cleanups = cleanups;

  return arg;
}

static void
free_continuation_arg (struct mi_continuation_arg *arg)
{
  if (arg)
    {
      if (arg->token)
	xfree (arg->token);
      if (arg->timestamp)
	xfree (arg->timestamp);
      xfree (arg);
    }
}

/* The only three called from other parts of mi-main.c will probably be
   timestamp(), print_diff_now() and copy_timestamp() */

/* 

static void 
timestamp (struct mi_timestamp *tv)
  {
    gettimeofday (&tv->wallclock, NULL);
    getrusage (RUSAGE_SELF, &tv->rusage);
  }

static void 
print_diff_now (struct mi_timestamp *start)
  {
    struct mi_timestamp now;
    timestamp (&now);
    print_diff (start, &now);
  }

static void 
print_diff (struct mi_timestamp *start, struct mi_timestamp *end)
  {
    fprintf_unfiltered (raw_stdout,
       ",time={wallclock=\"%0.5f\",user=\"%0.5f\",system=\"%0.5f\",start=\"%d.%06d\",end=\"%d.%06d\"}", 
       wallclock_diff (start, end) / 1000000.0, 
       user_diff (start, end) / 1000000.0, 
       system_diff (start, end) / 1000000.0,
       start->wallclock.tv_sec, start->wallclock.tv_usec,
       end->wallclock.tv_sec, end->wallclock.tv_usec);

*/
@


1.84.2.2
log
@Changes from nickrob-async-20060828-mergepoint.
@
text
@d888 2
a889 4

  nr_bytes = target_read (&current_target, TARGET_OBJECT_MEMORY, NULL,
			  mbuf, addr, total_bytes);
  if (nr_bytes <= 0)
d891 7
a897 3
      do_cleanups (cleanups);
      mi_error_message = xstrdup ("Unable to read memory.");
      return MI_CMD_ERROR;
@


1.84.2.3
log
@(captured_mi_execute_command): Give current_command_token a value.
@
text
@a1088 2
      current_command_token = context->token;

@


1.84.2.4
log
@Replace last_async_command with
current_command_token.  Rename previous_async_command to
previous_command_token.
(captured_mi_execute_command): Reset current_command_token to
NULL when executing a CLI command.
@
text
@d94 6
d109 3
a111 6
/* A pointer to the current mi_parse's command token.  This is needed
 because we can't pass the token down to the mi command levels.  This
 will get cleaned up once captured_mi_execute_command finishes, so 
 if you need it for a continuation, dup it.  */
char *current_command_token;
static char *previous_command_token;
d142 2
a143 2
  if (current_command_token)
    fputs_unfiltered (current_command_token, raw_stdout);
d229 1
a229 1
   with the token variables, in order to display the current token in
d242 2
a243 2
  if (current_command_token)
    fputs_unfiltered (current_command_token, raw_stdout);
d245 5
a249 5
  xfree (current_command_token);
  if (previous_command_token)
    current_command_token = xstrdup (previous_command_token);
  xfree (previous_command_token);
  previous_command_token = NULL;
d754 2
a755 2
  if (current_command_token)
    fputs_unfiltered (current_command_token, raw_stdout);
d1089 2
a1141 1
	current_command_token = NULL;
d1313 1
a1313 1
         and get rid of the current_command_token */
d1319 1
a1319 1
         we copy the token (previous_command_token), if this was
d1323 1
a1323 1
         default token string (current_command_token). */
d1327 2
a1328 2
	  if (!previous_command_token)
	    previous_command_token = xstrdup (current_command_token);
d1340 2
a1341 2
      current_command_token = xstrdup (parse->token);
      make_exec_cleanup (free_current_contents, &current_command_token);
d1616 2
a1617 2
      if (current_command_token)
	fputs_unfiltered (current_command_token, raw_stdout);
d1635 2
a1636 2
      if (current_command_token)
	fputs_unfiltered (current_command_token, raw_stdout);
@


1.84.2.5
log
@(mi_cmd_execute): Check for current_command_token.
(mi_interpreter_exec_bp_cmd): New function (from Apple).
@
text
@d1323 1
a1323 1
	  if (!previous_command_token && current_command_token)
d1391 1
a1665 8
void
mi_interpreter_exec_bp_cmd (char *command, char **argv, int argc)
{
  mi_dont_register_continuation = 1;
  mi_cmd_interpreter_exec (command, argv, argc);
  mi_dont_register_continuation = 0;
}

@


1.83
log
@* mi/mi-main.c (mi_cmd_data_read_memory): Change type of mbus into
'gdb_byte *'.
@
text
@d1110 1
a1110 1
	mi_cmd_interpreter_exec ("-interpreter-exec", argv, 2);
d1112 1
a1112 1
	/* If we changed interpreters, DON'T print out anything. */
d1118 23
a1140 9
	    /* print the result */
	    /* FIXME: Check for errors here. */
	    fputs_unfiltered (context->token, raw_stdout);
	    fputs_unfiltered ("^done", raw_stdout);
	    mi_out_put (uiout, raw_stdout);
	    mi_out_rewind (uiout);
	    fputs_unfiltered ("\n", raw_stdout);
	    args->action = EXECUTE_COMMAND_DISPLAY_PROMPT;
	    args->rc = MI_CMD_DONE;
@


1.82
log
@	* mi/mi-symbol-cmds.c:
	* mi/mi-parse.h:
	* mi/mi-parse.c:
	* mi/mi-out.h:
	* mi/mi-out.c:
	* mi/mi-main.h:
	* mi/mi-main.c:
	* mi/mi-interp.c:
	* mi/mi-getopt.h:
	* mi/mi-getopt.c:
	* mi/mi-console.h:
	* mi/mi-console.c:
	* mi/mi-common.h:
	* mi/mi-common.c:
	* mi/mi-cmds.h:
	* mi/mi-cmds.c:
	* mi/mi-cmd-var.c:
	* mi/mi-cmd-stack.c:
	* mi/mi-cmd-file.c:
	* mi/mi-cmd-env.c:
	* mi/mi-cmd-disas.c:
	* mi/mi-cmd-break.c: Add (C) after Copyright.  Update the FSF
	address.
@
text
@d764 1
a764 1
  char *mbuf;
@


1.81
log
@2005-11-18  Andrew Stubbs  <andrew.stubbs@@st.com>

	* mi/mi-main.c (mi_load_progress): Ensure the use of the correct mi
	uiout for the duration of the function.
@
text
@d3 1
a3 1
   Copyright 2000, 2001, 2002, 2003, 2004, 2005 Free Software
d22 2
a23 2
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */
@


1.80
log
@(mi_cmd_data_list_register_values): Remove test for
registers now that mi_execute_command rewinds after an error.
@
text
@d1368 1
d1370 10
a1379 2
  if (!current_interp_named_p (INTERP_MI)
      && !current_interp_named_p (INTERP_MI1))
d1436 3
@


1.80.4.1
log
@2005-11-18  Andrew Stubbs  <andrew.stubbs@@st.com>

	* mi/mi-main.c (mi_load_progress): Ensure the use of the correct mi
	uiout for the duration of the function.
@
text
@a1367 1
  struct ui_out *saved_uiout;
d1369 2
a1370 10
  /* This function is called through deprecated_show_load_progress
     which means uiout may not be correct.  Fix it for the duration
     of this function.  */
  saved_uiout = uiout;

  if (current_interp_named_p (INTERP_MI))
    uiout = mi_out_new (2);
  else if (current_interp_named_p (INTERP_MI1))
    uiout = mi_out_new (1);
  else
a1426 3

  xfree (uiout);
  uiout = saved_uiout;
@


1.79
log
@gdb/
	* mi/mi-main.c (register_changed_p, get_register): Use
	get_selected_frame.
	(mi_execute_command): Call mi_out_rewind after an error.
testsuite/
	* gdb.mi/mi-syn-frame.exp, gdb.mi/mi2-syn-frame.exp: Don't expect
	excess MI output after an error.
@
text
@a435 6
  if (!target_has_registers)
    {
      mi_error_message = xstrprintf ("mi_cmd_data_list_register_values: No registers.");
      return MI_CMD_ERROR;
    }

@


1.78
log
@2005-05-22  Andrew Cagney  <cagney@@gnu.org>

	* frame.h (frame_register_unwind, frame_unwind_register)
	(get_frame_register, frame_register, put_frame_register)
	(get_frame_memory, safe_frame_unwind_memory)
	(frame_register_read): Use gdb_byte for byte buffer parameters.
	* trad-frame.h (trad_frame_get_register)
	(frame_get_prev_register): Ditto.
	* frame-unwind.h (frame_prev_register_ftype): Ditto.
	* frame.c (frame_pop, frame_register, frame_unwind_register)
	(get_frame_register, frame_unwind_register_signed)
	(frame_unwind_register_unsigned, frame_unwind_unsigned_register)
	(frame_register_read, get_frame_memory): Update.
	* trad-frame.c (trad_frame_get_prev_register): Update.
	(trad_frame_get_register): Update.
	* gdbcore.h (deprecated_read_memory_nobpt, read_memory): Ditto.
	* breakpoint.c (deprecated_read_memory_nobpt): Update.
	* corefile.c (read_memory): Update.
	* tramp-frame.c (tramp_frame_prev_register): Update.
	* valops.c (value_assign): Update.
	* sentinel-frame.c (sentinel_frame_prev_register): Update.
	* std-regs.c (value_of_builtin_frame_fp_reg)
	(value_of_builtin_frame_pc_reg): Update.
	* infcmd.c (default_print_registers_info): Update
	* dummy-frame.c (dummy_frame_prev_register): Update.
	* findvar.c (value_of_register, value_from_register): Update.
	* tui/tui-regs.c (tui_register_format, tui_get_register): Update.
	* mi/mi-main.c (register_changed_p, get_register): Update.
@
text
@d391 1
a391 1
  if (! frame_register_read (deprecated_selected_frame, regnum, raw_buffer))
d512 1
a512 1
  frame_register (deprecated_selected_frame, regnum, &optim, &lval, &addr,
d1177 1
a1177 1
	     somewhere */
d1182 1
@


1.77
log
@2005-04-26  Andrew Cagney  <cagney@@gnu.org>

	Rename 'struct exception' to 'struct gdb_exception'.
	* wrapper.c: Update.
	* varobj.c: Update.
	* tui/tui-interp.c: Update.
	* remote.c: Update.
	* mi/mi-main.c: Update.
	* mi/mi-interp.c: Update.
	* linux-thread-db.c: Update.
	* interps.h: Update.
	* interps.c: Update.
	* exceptions.h: Update.
	* exceptions.c: Update.
	* dwarf2loc.c: Update.
	* cli/cli-interp.c: Update.
	* cli/cli-script.c: Update.
	* breakpoint.c: Update.
@
text
@d389 1
a389 1
  char raw_buffer[MAX_REGISTER_SIZE];
d500 1
a500 1
  char buffer[MAX_REGISTER_SIZE];
@


1.76
log
@2005-02-20  Andrew Cagney  <cagney@@gnu.org>

	* mi/mi-main.c (captured_mi_execute_command): Use
	mi_cmd_interpreter_exec.
@
text
@d1159 1
a1159 1
      struct exception result;
@


1.75
log
@2005-02-07  Andrew Cagney  <cagney@@gnu.org>

	* value.h (value_embedded_offset): Delete.
	(value_embedded_offset): Declare.
	* value.c (value_embedded_offset): Define.
	* valops.c, p-valprint.c, mi/mi-main.c, hpacc-abi.c: Update.
	* gnu-v3-abi.c, eval.c, c-valprint.c, cp-valprint.c: Update.
	* cp-abi.h: Update.
@
text
@d1106 30
a1135 24
      /* A CLI command was read from the input stream */
      /* This will be removed as soon as we have a complete set of
         mi commands */
      /* echo the command on the console. */
      fprintf_unfiltered (gdb_stdlog, "%s\n", context->command);
      mi_execute_cli_command (context->command, 0, NULL);

      /* If we changed interpreters, DON'T print out anything. */
      if (current_interp_named_p (INTERP_MI)
	  || current_interp_named_p (INTERP_MI1)
	  || current_interp_named_p (INTERP_MI2)
	  || current_interp_named_p (INTERP_MI3))
	{
	  /* print the result */
	  /* FIXME: Check for errors here. */
	  fputs_unfiltered (context->token, raw_stdout);
	  fputs_unfiltered ("^done", raw_stdout);
	  mi_out_put (uiout, raw_stdout);
	  mi_out_rewind (uiout);
	  fputs_unfiltered ("\n", raw_stdout);
	  args->action = EXECUTE_COMMAND_DISPLAY_PROMPT;
	  args->rc = MI_CMD_DONE;
	}
      break;
@


1.74
log
@2005-02-06  Andrew Cagney  <cagney@@gnu.org>

	* value.c (value_contents, value_contents_writeable): New
	functions.
	* value.h (VALUE_CONTENTS): Delete macro.
	(value_contents, value_contents_writeable): Declare.
	* xstormy16-tdep.c, value.c, valops.c, valarith.c: Update.
	* stack.c, sparc-tdep.c, sparc64-tdep.c, sh-tdep.c: Update.
	* sh64-tdep.c, scm-valprint.c, scm-exp.c, s390-tdep.c: Update.
	* rs6000-tdep.c, p-valprint.c, printcmd.c: Update.
	* ppc-sysv-tdep.c, mips-tdep.c, mi/mi-main.c: Update.
	* m88k-tdep.c, m68hc11-tdep.c, m32r-tdep.c: Update.
	* jv-valprint.c, ia64-tdep.c, hppa-tdep.c: Update.
	* hpacc-abi.c, f-valprint.c, frv-tdep.c, eval.c: Update.
	* c-valprint.c, cris-tdep.c, cp-valprint.c: Update.
	* cli/cli-dump.c, breakpoint.c, avr-tdep.c, arm-tdep.c: Update.
	* arm-linux-tdep.c, amd64-tdep.c, alpha-tdep.c: Update.
	* ada-valprint.c, ada-lang.c: Update.
@
text
@d683 1
a683 1
	     VALUE_EMBEDDED_OFFSET (val), VALUE_ADDRESS (val),
@


1.73
log
@2005-01-14  Andrew Cagney  <cagney@@gnu.org>

	* exceptions.h (exception_fprintf): Declare.
	(exception_print): Drop pre_print parameter.
	* mi/mi-main.c (mi_execute_command): Update exception_print call.
	* cli/cli-interp.c (safe_execute_command): Update exception_print
	call.
	* remote.c (remote_open_1): Instead of passing an error prefix to
	catch_exceptions, use catch_exceptions and exception_fprintf.
	(remote_start_remote): Change return type to void.
	* breakpoint.c (insert_bp_location): Instead of passing an error
	prefix to catch_exceptions, use catch_exceptions and
	exception_fprintf.
	(insert_catchpoint): Change return type to void.
	(break_command_1): Update exception_print call.
	* exceptions.c (exception_fprintf): New function.
	(print_exception): New function.
	(exception_print): Use print_exception.
@
text
@d3 2
a4 2
   Copyright 2000, 2001, 2002, 2003, 2004 Free Software Foundation,
   Inc.
d682 1
a682 1
  val_print (value_type (val), VALUE_CONTENTS (val),
@


1.72
log
@2005-01-13  Andrew Cagney  <cagney@@gnu.org>

	* mi/mi-main.c (mi_execute_command): Print the exception.
	* cli/cli-interp.c (safe_execute_command): Print the exception.
	* exceptions.h (exception_print): Declare.
	* exceptions.c (struct catcher): Add field print_message.
	(catcher_init): Add parameter print_message, store in the catcher
	struct.
	(print_and_throw): Only print the message when print_message.
	(catch_exceptions_with_msg, catch_errors): Pass print_message=1 to
	catcher_init.
	(catch_exception): Pass print_message=0 to catcher_init.
@
text
@d1159 1
a1159 1
      exception_print (gdb_stderr, NULL, result);
@


1.71
log
@2005-01-13  Andrew Cagney  <cagney@@gnu.org>

	* exceptions.h (struct exception): Make message const.
	* mi/mi-main.c (mi_execute_command): Pass result.message directly
	to fputstr_unfiltered.
@
text
@d1159 1
@


1.70
log
@2005-01-13  Andrew Cagney  <cagney@@gnu.org>

	* breakpoint.c (gdb_breakpoint_query): Update, use
	catch_exceptions_with_msg.
	(do_captured_breakpoint): Add uiout parameter.
	(gdb_breakpoint): Update, use catch_exceptions_with_msg.
	* mi/mi-main.c (mi_cmd_thread_select): Pass mi_error_message to
	gdb_thread_select.  Return MI_CMD_ERROR instead of
	MI_CMD_CAUGHT_ERROR.
	(mi_cmd_thread_list_ids): Ditto for gdb_list_thread_ids.
	(enum captured_mi_execute_command_actions): Delete
	EXECUTE_COMMAND_DISPLAY_ERROR.
	(captured_mi_execute_command): Delete code handling
	MI_CMD_CAUGHT_ERROR.
	(mi_execute_command): Don't check for
	EXECUTE_COMMAND_DISPLAY_ERROR.
	* mi/mi-cmd-break.c (breakpoint_notify): Update call to
	gdb_breakpoint_query.
	(mi_cmd_break_insert): Pass mi_error_message to gdb_breakpoint.
	* mi/mi-cmds.h (enum mi_cmd_result): Delete MI_CMD_CAUGHT_ERROR.
	* gdb.h (gdb_thread_select, gdb_list_thread_ids)
	(gdb_breakpoint, gdb_breakpoint_query): Add error_message
	parameter.
	* thread.c (thread_command): Update call.
	(gdb_thread_select, gdb_list_thread_ids): Update, call
	catch_exceptions_with_msg.
@
text
@a1168 2
	  char *msg = result.message;
	  struct cleanup *cleanup = make_cleanup (xfree, msg);
d1173 1
a1173 1
	  fputstr_unfiltered (msg, '"', raw_stdout);
@


1.69
log
@2005-01-13  Andrew Cagney  <cagney@@gnu.org>

	* mi/mi-main.c (mi_execute_command): Use catch_exception,
	eliminate call to error_last_message.
	(captured_mi_execute_command): Change return type to void.
@
text
@d64 1
a64 2
    EXECUTE_COMMAND_SUPRESS_PROMPT,
    EXECUTE_COMMAND_DISPLAY_ERROR
d235 1
a235 1
    rc = gdb_thread_select (uiout, argv[0]);
d240 1
a240 1
    return MI_CMD_CAUGHT_ERROR;
d258 1
a258 1
    rc = gdb_list_thread_ids (uiout);
d261 1
a261 1
    return MI_CMD_CAUGHT_ERROR;
a1092 6
	  else if (args->rc == MI_CMD_CAUGHT_ERROR)
	    {
	      mi_out_rewind (uiout);
	      args->action = EXECUTE_COMMAND_DISPLAY_ERROR;
	      return;
	    }
d1167 1
a1167 2
      if (args.action == EXECUTE_COMMAND_DISPLAY_ERROR
	  || result.reason < 0)
@


1.68
log
@2005-01-12  Andrew Cagney  <cagney@@gnu.org>

	* exceptions.h (enum return_reason, RETURN_MASK)
	(RETURN_MASK_QUIT, RETURN_MASK_ERROR, RETURN_MASK_ALL)
	(return_mask, throw_exception, catch_exceptions_ftype)
	(catch_exceptions_with_msg, catch_errors_ftype, catch_errors)
	(catch_command_errors_ftype, catch_command_errors): Move to
	exceptions.h.
	* exceptions.c, exceptions.h: New files.
	* top.c: Do not include <setjmp.h>.
	(SIGJMP_BUF, SIGSETJMP, SIGLONGJMP, catch_return)
	(throw_exception, catcher, catch_exceptions)
	(catch_exceptions_with_msg, struct catch_errors_args)
	(do_catch_errors, catch_errors, struct captured_command_args)
	(do_captured_command, catch_command_errors): Move to exceptions.c.
	* wrapper.c, wince.c, win32-nat.c, utils.c: Include "exceptions.h".
	* tui/tui-interp.c, top.c, thread.c, symmisc.c: Ditto.
	* symfile-mem.c, stack.c, solib.c, rs6000-nat.c: Ditto.
	* remote-sds.c, remote-mips.c, remote-fileio.c: Ditto.
	* remote-e7000.c, objc-lang.c, ocd.c: Ditto.
	* remote.c, nto-procfs.c, monitor.c, mi/mi-main.c: Ditto.
	* main.c, m32r-rom.c, infrun.c, inf-loop.c: Ditto.
	* hppa-hpux-tdep.c, frame.c, event-top.c, event-loop.c: Ditto.
	* corelow.c, corefile.c, cli/cli-interp.c, breakpoint.c: Ditto.
	* ada-valprint.c, ada-lang.c: Ditto.
	* Makefile.in (HFILES_NO_SRCDIR, COMMON_OBS): Add exceptions.h and
	exceptions.o.  Update all dependencies.
@
text
@d1043 1
a1043 1
static int
d1098 1
a1098 1
	      return 1;
d1108 1
a1108 1
	  return 1;
d1140 1
a1140 1
  return 1;
a1149 1
  int result;
d1160 1
d1164 2
a1165 2
      result = catch_exceptions (uiout, captured_mi_execute_command, &args, "",
				 RETURN_MASK_ALL);
d1174 2
a1175 1
      if (args.action == EXECUTE_COMMAND_DISPLAY_ERROR || result < 0)
d1177 1
a1177 1
	  char *msg = error_last_message ();
@


1.67
log
@2004-11-12  Andrew Cagney  <cagney@@gnu.org>

	* value.h (VALUE_TYPE, VALUE_NEXT, VALUE_OFFSET, VALUE_BITSIZE)
	(VALUE_BITPOS): Delete.
	(value_type, value_offset, value_bitsize, value_bitpos): Declare.
	* value.c (value_type, value_offset, value_bitpos)
	(value_bitsize): New functions.  Update references.
	* arm-tdep.c, gnu-v3-abi.c, hpacc-abi.c, gnu-v2-abi.c: Update.
	* f-valprint.c, cp-valprint.c, c-valprint.c: Update.
	* ada-valprint.c, typeprint.c, scm-valprint.c, scm-exp.c: Update.
	* p-valprint.c, jv-valprint.c, jv-lang.c, varobj.c: Update.
	* objc-lang.c, ada-lang.c, std-regs.c, stack.c: Update.
	* infcall.c, linespec.c, printcmd.c, valarith.c: Update.
	* valops.c, eval.c, findvar.c, breakpoint.c: Update.
	* tracepoint.c, ax-gdb.c, mi/mi-main.c, cli/cli-dump.c:
	* rs6000-tdep.c, ppc-sysv-tdep.c: Update.
@
text
@d31 1
@


1.66
log
@2004-10-29  Andrew Cagney  <cagney@@gnu.org>

	* frame.h (get_selected_frame): Add message parameter.
	* frame.c (get_selected_frame): Add and use message parameter.
	* stack.c (current_frame_command, return_command, locals_info)
	(catch_info, args_info, up_silently_base, down_silently_base): Use
	get_selected_frame with an explicit message.
	* thread.c, stack.c, sh-tdep.c, sh64-tdep.c: Update.
	* remote-rdp.c, remote-mips.c, remote-e7000.c: Update.
	* ocd.c, mi/mi-main.c, mi/mi-cmd-stack.c: Update.
	* infrun.c, inflow.c, infcmd.c, frame.c: Update.
	* findvar.c, eval.c, corelow.c, bsd-kvm.c: Update.
	* breakpoint.c: Update.
@
text
@d682 1
a682 1
  val_print (VALUE_TYPE (val), VALUE_CONTENTS (val),
@


1.65
log
@Index: ChangeLog
2004-09-12  Salvador E. Tropea  <set@@users.sf.net>
	    Andrew Cagney  <cagney@@gnu.org>

	* mi/mi-main.c (mi_cmd_data_list_changed_registers)
	(mi_cmd_data_list_register_values)
	(mi_cmd_data_write_register_values): Include the PSEUDO_REGS in
	the register number computation.
@
text
@d184 1
a184 1
  print_stack_frame (get_selected_frame (), 1, LOC_AND_ADDRESS);
@


1.64
log
@2004-08-02  Andrew Cagney  <cagney@@gnu.org>

	Replace DEPRECATED_REGISTER_RAW_SIZE with register_size.
	* rs6000-tdep.c (rs6000_push_dummy_call)
	(rs6000_extract_return_value): Use register_size.
	* xstormy16-tdep.c (xstormy16_get_saved_register)
	(xstormy16_extract_return_value): Ditto.
	* valops.c (value_assign): Ditto.
	* v850ice.c (v850ice_fetch_registers, v850ice_store_registers):
	* v850-tdep.c (v850_extract_return_value): Ditto.
	* tracepoint.c (collect_symbol): Ditto.
	* target.c (debug_print_register): Ditto.
	* stack.c (frame_info): Ditto.
	* rs6000-nat.c (ARCH64, fetch_register, store_register): Ditto.
	* rom68k-rom.c (rom68k_supply_one_register): Ditto.
	* remote.c (struct packet_reg, remote_wait, remote_async_wait)
	(store_register_using_P): Ditto.
	* remote-vxmips.c (vx_read_register, vx_write_register): Ditto.
	* remote-sim.c (gdbsim_fetch_register, gdbsim_store_register): Ditto.
	* remote-mips.c (mips_wait, mips_fetch_registers): Ditto.
	* remote-e7000.c (fetch_regs_from_dump, sub2_from_pc): Ditto.
	* regcache.c (deprecated_read_register_bytes)
	(deprecated_write_register_bytes, read_register)
	(write_register): Ditto.
	* ppc-linux-nat.c (fetch_altivec_register, fetch_register)
	(supply_vrregset, store_altivec_register, fill_vrregset): Ditto.
	* monitor.c (monitor_supply_register, monitor_fetch_register)
	(monitor_store_register): Ditto.
	* mn10300-tdep.c (mn10300_pop_frame_regular)
	(mn10300_print_register): Ditto.
	* mipsv4-nat.c (fill_fpregset): Ditto.
	* mips-linux-tdep.c (supply_32bit_reg, fill_fpregset)
	(mips64_fill_fpregset): Ditto.
	* mi/mi-main.c (register_changed_p, get_register)
	(mi_cmd_data_write_register_values): Ditto.
	* lynx-nat.c (fetch_inferior_registers, store_inferior_registers):
	* irix5-nat.c (fill_gregset, fetch_core_registers):
	* infrun.c (write_inferior_status_register): Ditto.
	* infptrace.c (fetch_register, store_register): Ditto.
	* infcmd.c (default_print_registers_info): Ditto.
	* ia64-linux-nat.c (COPY_REG, fill_fpregset): Ditto.
	* ia64-aix-nat.c (COPY_REG, fill_gregset): Ditto.
	* i386gnu-nat.c (gnu_store_registers, fill): Ditto.
	* hpux-thread.c (hpux_thread_fetch_registers)
	(hpux_thread_store_registers): Ditto.
	* hppah-nat.c (store_inferior_registers, fetch_register):
	* findvar.c (value_from_register): Ditto.
	* dve3900-rom.c (fetch_bitmapped_register):
	* cris-tdep.c (cris_gdbarch_init): Ditto.
	* alpha-tdep.h: Ditto.
	* aix-thread.c (pd_enable, fill_sprs64, fill_sprs32): Ditto.
@
text
@d330 1
a330 1
  numregs = NUM_REGS;
d426 1
a426 1
  numregs = NUM_REGS;
d566 1
a566 1
  numregs = NUM_REGS;
@


1.63
log
@2004-06-09  Andrew Cagney  <cagney@@gnu.org>

	* gdbarch.sh (DEPRECATED_REGISTER_CONVERT_TO_RAW)
	(DEPRECATED_REGISTER_CONVERT_TO_VIRTUAL)
	(DEPRECATED_REGISTER_CONVERTIBLE): Delete.
	* gdbarch.h, gdbarch.c: Re-generate.
	* infcmd.c (default_print_registers_info): Simplify.
	* findvar.c (value_of_register): Simplify.
	* mi/mi-main.c (get_register): Simplify.
	* arch-utils.c (legacy_convert_register_p): Always return 0.
	(legacy_register_to_value, legacy_value_to_register): Always call
	internal_error.
@
text
@d395 1
a395 1
	      DEPRECATED_REGISTER_RAW_SIZE (regnum)) == 0)
d401 1
a401 1
	  DEPRECATED_REGISTER_RAW_SIZE (regnum));
d528 1
a528 1
      for (j = 0; j < DEPRECATED_REGISTER_RAW_SIZE (regnum); j++)
d531 1
a531 1
	  : DEPRECATED_REGISTER_RAW_SIZE (regnum) - 1 - j;
d613 1
a613 1
	  deprecated_write_register_bytes (DEPRECATED_REGISTER_BYTE (regnum), buffer, DEPRECATED_REGISTER_RAW_SIZE (regnum));
@


1.62
log
@2004-06-01  Andrew Cagney  <cagney@@gnu.org>

	* mi/mi-cmd-env.c (env_execute_cli_command): Use xstrprintf
	instead of xasprintf.
	* mi/mi-main.c (mi_error_last_message, mi_cmd_exec_interrupt)
	(mi_cmd_thread_select, mi_cmd_thread_list_ids)
	(mi_cmd_data_list_register_names)
	(mi_cmd_data_list_changed_registers)
	(mi_cmd_data_list_register_values)
	(get_register, mi_cmd_data_write_register_values)
	(mi_cmd_data_write_register_values)
	(mi_cmd_data_assign, mi_cmd_data_evaluate_expression)
	(mi_cmd_target_download, mi_cmd_target_select)
	(mi_cmd_data_read_memory, mi_cmd_data_write_memory)
	(mi_execute_cli_command, mi_execute_async_cli_command)
	(mi_execute_async_cli_command): Ditto.
	* mi/mi-interp.c (mi_cmd_interpreter_exec) Ditto.
	* mi/mi-cmd-var.c (mi_cmd_var_create): Ditto.
@
text
@d500 1
a500 2
  char raw_buffer[MAX_REGISTER_SIZE];
  char virtual_buffer[MAX_REGISTER_SIZE];
d513 1
a513 1
		  &realnum, raw_buffer);
a520 12
  /* Convert raw data to virtual format if necessary.  */

  if (DEPRECATED_REGISTER_CONVERTIBLE_P ()
      && DEPRECATED_REGISTER_CONVERTIBLE (regnum))
    {
      DEPRECATED_REGISTER_CONVERT_TO_VIRTUAL (regnum,
				   register_type (current_gdbarch, regnum),
				   raw_buffer, virtual_buffer);
    }
  else
    memcpy (virtual_buffer, raw_buffer, DEPRECATED_REGISTER_VIRTUAL_SIZE (regnum));

d532 1
a532 1
	  sprintf (ptr, "%02x", (unsigned char) raw_buffer[idx]);
d540 1
a540 1
      val_print (register_type (current_gdbarch, regnum), virtual_buffer, 0, 0,
@


1.61
log
@2004-06-01  Andrew Cagney  <cagney@@gnu.org>

	* mi/mi-cmds.h (mi_error_last_message): Delete declaration.
	* mi/mi-interp.c (mi_cmd_interpreter_exec): Call
	error_last_message instead of mi_error_last_message.
	* mi/mi-main.c (mi_error_last_message): Delete function.
@
text
@d206 1
a206 2
      xasprintf (&mi_error_message,
		 "mi_cmd_exec_interrupt: Inferior not executing.");
d231 1
a231 2
      xasprintf (&mi_error_message,
		 "mi_cmd_thread_select: USAGE: threadnum.");
d254 1
a254 2
      xasprintf (&mi_error_message,
		 "mi_cmd_thread_list_ids: No arguments required.");
d304 1
a304 1
	  xasprintf (&mi_error_message, "bad register number");
d347 1
a347 2
	      xasprintf (&mi_error_message,
			 "mi_cmd_data_list_changed_registers: Unable to read register contents.");
d369 1
a369 2
	      xasprintf (&mi_error_message,
			 "mi_cmd_data_list_register_change: Unable to read register contents.");
d378 1
a378 1
	  xasprintf (&mi_error_message, "bad register number");
d430 1
a430 2
      xasprintf (&mi_error_message,
		 "mi_cmd_data_list_register_values: Usage: -data-list-register-values <format> [<regnum1>...<regnumN>]");
d438 1
a438 2
      xasprintf (&mi_error_message,
		 "mi_cmd_data_list_register_values: No registers.");
d488 1
a488 1
	  xasprintf (&mi_error_message, "bad register number");
d518 1
a518 1
      xasprintf (&mi_error_message, "Optimized out");
d583 1
a583 2
      xasprintf (&mi_error_message,
		 "mi_cmd_data_write_register_values: Usage: -data-write-register-values <format> [<regnum1> <value1>...<regnumN> <valueN>]");
d591 1
a591 2
      xasprintf (&mi_error_message,
		 "mi_cmd_data_write_register_values: No registers.");
d597 1
a597 2
      xasprintf (&mi_error_message,
		 "mi_cmd_data_write_register_values: No regs and values specified.");
d603 1
a603 2
      xasprintf (&mi_error_message,
		 "mi_cmd_data_write_register_values: Regs and vals are not in pairs.");
d632 1
a632 1
	  xasprintf (&mi_error_message, "bad register number");
d654 1
a654 2
      xasprintf (&mi_error_message,
		 "mi_cmd_data_assign: Usage: -data-assign expression");
d684 1
a684 2
      xasprintf (&mi_error_message,
		 "mi_cmd_data_evaluate_expression: Usage: -data-evaluate-expression expression");
d713 1
a713 1
  xasprintf (&run, "load %s", args);
d728 1
a728 1
  xasprintf (&run, "target %s", args);
d816 1
a816 2
      xasprintf (&mi_error_message,
		 "mi_cmd_data_read_memory: Usage: ADDR WORD-FORMAT WORD-SIZE NR-ROWS NR-COLS [ASCHAR].");
d855 1
a855 2
      xasprintf (&mi_error_message,
		 "mi_cmd_data_read_memory: invalid number of rows.");
d862 1
a862 2
      xasprintf (&mi_error_message,
		 "mi_cmd_data_read_memory: invalid number of columns.");
d1018 1
a1018 2
      xasprintf (&mi_error_message,
		 "mi_cmd_data_write_memory: Usage: [-o COLUMN_OFFSET] ADDR FORMAT WORD-SIZE VALUE.");
d1283 1
a1283 1
	xasprintf (&run, "%s %s", cmd, args);
d1310 1
a1310 1
      xasprintf (&run, "%s %s", mi, async_args);
d1317 1
a1317 1
      xasprintf (&run, "%s %s", mi, args);
@


1.60
log
@2004-06-01  Andrew Cagney  <cagney@@gnu.org>

	* mi/mi-main.c (mi_cmd_data_read_memory): Add missing return for
	"invalid number of columns" error.  Delete redundant "out of
	memory" check.
@
text
@a101 10
/* A helper function which will set mi_error_message to
   error_last_message.  */
void
mi_error_last_message (void)
{
  char *s = error_last_message ();
  xasprintf (&mi_error_message, "%s", s);
  xfree (s);
}

@


1.59
log
@2004-04-28  Andrew Cagney  <cagney@@redhat.com>

	* stack.c (print_stack_frame_stub): Delete declaration.
	(struct print_stack_frame_args, print_stack_frame)
	(print_frame_info, print_frame): Replace "source" with print what.
	Replace "print" with "print_level".  Replace "args" with
	"print_args".
	* frame.h (show_and_print_stack_frame, print_stack_frame)
	(print_frame_info): Update declarations.
	* stack.c (select_and_print_frame, frame_command)
	(current_frame_command, up_command, down_command): Update calls -
	use get_selected_frame, pass "enum print_what" for source, do not
	call frame_relative_level.
	* mi/mi-cmd-stack.c (mi_cmd_stack_list_frames): Ditto.
	* remote-rdp.c (remote_rdp_open): Ditto.
	* remote-mips.c (common_open): Ditto.
	* remote-e7000.c (e7000_start_remote): Ditto.
	* ocd.c (ocd_start_remote): Ditto.
	* mi/mi-main.c (mi_cmd_exec_return): Ditto.
	* infrun.c (normal_stop): Ditto.
	* inflow.c (kill_command): Ditto.
	* infcmd.c (finish_command): Ditto.
	* corelow.c (core_open): Ditto.
	* tracepoint.c (finish_tfind_command): Ditto.
	* thread.c (info_threads_command, info_threads_command)
	(restore_current_thread, do_captured_thread_select): Ditto.
	* ada-tasks.c (task_command): Ditto.
@
text
@d889 1
a900 6
  if (mbuf == NULL)
    {
      xasprintf (&mi_error_message,
		 "mi_cmd_data_read_memory: out of memory.");
      return MI_CMD_ERROR;
    }
@


1.58
log
@2004-02-15  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (deprecated_register_gdbarch_swap): Rename
	register_gdbarch_swap.
	(DEPRECATED_REGISTER_GDBARCH_SWAP): Rename REGISTER_GDBARCH_SWAP.
	* f-lang.c (_initialize_f_language): Update, use
	DEPRECATED_REGISTER_GDBARCH_SWAP.
	* remote.c (_initialize_remote): Ditto.
	* regcache.c (_initialize_regcache): Ditto.
	* parse.c (_initialize_parse): Ditto.
	* infrun.c (_initialize_infrun): Ditto.
	* mi/mi-main.c (_initialize_mi_main): Ditto.
	* gdbtypes.c (_initialize_gdbtypes): Ditto.
@
text
@d194 1
a194 3
  print_stack_frame (deprecated_selected_frame,
		     frame_relative_level (deprecated_selected_frame),
		     LOC_AND_ADDRESS);
@


1.58.2.1
log
@Merge mainline to intercu branch - 2004-09-15
@
text
@d102 10
d194 3
a196 1
  print_stack_frame (get_selected_frame (), 1, LOC_AND_ADDRESS);
d218 2
a219 1
      mi_error_message = xstrprintf ("mi_cmd_exec_interrupt: Inferior not executing.");
d244 2
a245 1
      mi_error_message = xstrprintf ("mi_cmd_thread_select: USAGE: threadnum.");
d268 2
a269 1
      mi_error_message = xstrprintf ("mi_cmd_thread_list_ids: No arguments required.");
d319 1
a319 1
	  mi_error_message = xstrprintf ("bad register number");
d345 1
a345 1
  numregs = NUM_REGS + NUM_PSEUDO_REGS;
d362 2
a363 1
	      mi_error_message = xstrprintf ("mi_cmd_data_list_changed_registers: Unable to read register contents.");
d385 2
a386 1
	      mi_error_message = xstrprintf ("mi_cmd_data_list_register_change: Unable to read register contents.");
d395 1
a395 1
	  mi_error_message = xstrprintf ("bad register number");
d412 1
a412 1
	      register_size (current_gdbarch, regnum)) == 0)
d418 1
a418 1
	  register_size (current_gdbarch, regnum));
d443 1
a443 1
  numregs = NUM_REGS + NUM_PSEUDO_REGS;
d447 2
a448 1
      mi_error_message = xstrprintf ("mi_cmd_data_list_register_values: Usage: -data-list-register-values <format> [<regnum1>...<regnumN>]");
d456 2
a457 1
      mi_error_message = xstrprintf ("mi_cmd_data_list_register_values: No registers.");
d507 1
a507 1
	  mi_error_message = xstrprintf ("bad register number");
d519 2
a520 1
  char buffer[MAX_REGISTER_SIZE];
d533 1
a533 1
		  &realnum, buffer);
d537 1
a537 1
      mi_error_message = xstrprintf ("Optimized out");
d541 12
d560 1
a560 1
      for (j = 0; j < register_size (current_gdbarch, regnum); j++)
d563 2
a564 2
	  : register_size (current_gdbarch, regnum) - 1 - j;
	  sprintf (ptr, "%02x", (unsigned char) buffer[idx]);
d572 1
a572 1
      val_print (register_type (current_gdbarch, regnum), buffer, 0, 0,
d598 1
a598 1
  numregs = NUM_REGS + NUM_PSEUDO_REGS;
d602 2
a603 1
      mi_error_message = xstrprintf ("mi_cmd_data_write_register_values: Usage: -data-write-register-values <format> [<regnum1> <value1>...<regnumN> <valueN>]");
d611 2
a612 1
      mi_error_message = xstrprintf ("mi_cmd_data_write_register_values: No registers.");
d618 2
a619 1
      mi_error_message = xstrprintf ("mi_cmd_data_write_register_values: No regs and values specified.");
d625 2
a626 1
      mi_error_message = xstrprintf ("mi_cmd_data_write_register_values: Regs and vals are not in pairs.");
d649 1
a649 1
	  deprecated_write_register_bytes (DEPRECATED_REGISTER_BYTE (regnum), buffer, register_size (current_gdbarch, regnum));
d655 1
a655 1
	  mi_error_message = xstrprintf ("bad register number");
d677 2
a678 1
      mi_error_message = xstrprintf ("mi_cmd_data_assign: Usage: -data-assign expression");
d708 2
a709 1
      mi_error_message = xstrprintf ("mi_cmd_data_evaluate_expression: Usage: -data-evaluate-expression expression");
d738 1
a738 1
  run = xstrprintf ("load %s", args);
d753 1
a753 1
  run = xstrprintf ("target %s", args);
d841 2
a842 1
      mi_error_message = xstrprintf ("mi_cmd_data_read_memory: Usage: ADDR WORD-FORMAT WORD-SIZE NR-ROWS NR-COLS [ASCHAR].");
d881 2
a882 1
      mi_error_message = xstrprintf ("mi_cmd_data_read_memory: invalid number of rows.");
d889 2
a890 2
      mi_error_message = xstrprintf ("mi_cmd_data_read_memory: invalid number of columns.");
      return MI_CMD_ERROR;
d902 6
d1051 2
a1052 1
      mi_error_message = xstrprintf ("mi_cmd_data_write_memory: Usage: [-o COLUMN_OFFSET] ADDR FORMAT WORD-SIZE VALUE.");
d1317 1
a1317 1
	run = xstrprintf ("%s %s", cmd, args);
d1344 1
a1344 1
      run = xstrprintf ("%s %s", mi, async_args);
d1351 1
a1351 1
      run = xstrprintf ("%s %s", mi, args);
@


1.57
log
@2004-02-14  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (DEPRECATED_REGISTER_CONVERTIBLE): Add predicate.
	* gdbarch.h, gdbarch.c: Re-generate.
	* arch-utils.c (deprecated_register_convertible_not): Delete.
	* arch-utils.h (deprecated_register_convertible_not): Delete.
	* mi/mi-main.c (get_register): Update.  Update copyright.
	* infcmd.c (default_print_registers_info): Update.
@
text
@d1492 2
a1493 2
  register_gdbarch_swap (&old_regs, sizeof (old_regs), NULL);
  register_gdbarch_swap (NULL, 0, mi_setup_architecture_data);
@


1.56
log
@2003-10-02  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (DEPRECATED_REGISTER_RAW_SIZE): Rename
	REGISTER_RAW_SIZE.
	* gdbarch.h, gdbarch.c: Re-generate.
	* aix-thread.c, alpha-tdep.h, arm-tdep.c, core-sol2.c: Update.
	* cris-tdep.c, dve3900-rom.c, findvar.c, frame.c: Update.
	* hppa-tdep.c, hppab-nat.c, hppah-nat.c, hppam3-nat.c: Update.
	* hpux-thread.c, i386gnu-nat.c, ia64-aix-nat.c: Update.
	* ia64-linux-nat.c, ia64-tdep.c, infcmd.c, infptrace.c: Update.
	* infrun.c, irix5-nat.c, lynx-nat.c, mips-linux-tdep.c: Update.
	* mips-nat.c, mips-tdep.c, mipsv4-nat.c, mn10300-tdep.c: Update.
	* monitor.c, ns32k-tdep.c, ppc-linux-nat.c, regcache.c: Update.
	* remote-e7000.c, remote-mips.c, remote-sim.c: Update.
	* remote-vxmips.c, remote-vxsparc.c, remote.c: Update.
	* rom68k-rom.c, rs6000-nat.c, rs6000-tdep.c, s390-tdep.c: Update.
	* sh64-tdep.c, sparc-nat.c, sparc-tdep.c, stack.c: Update.
	* target.c, tracepoint.c, v850-tdep.c, v850ice.c, valops.c: Update.
	* vax-tdep.c, vax-tdep.h, x86-64-tdep.c, xstormy16-tdep.c: Update.
	* config/m68k/tm-delta68.h, config/m68k/tm-vx68.h: Update.
	* config/sparc/tm-sparc.h, config/sparc/tm-sparclynx.h: Update.

2003-10-02  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Rename
	REGISTER_RAW_SIZE to DEPRECATED_REGISTER_RAW_SIZE.
	* gdb.texinfo (Packets, Stop Reply Packets): Ditto.
	* gdbint.texinfo (Target Architecture Definition): Rename

2003-10-02  Andrew Cagney  <cagney@@redhat.com>

	* mi-main.c: Rename REGISTER_RAW_SIZE to
	DEPRECATED_REGISTER_RAW_SIZE.
@
text
@d2 4
a5 1
   Copyright 2000, 2001, 2002, 2003 Free Software Foundation, Inc.
d543 2
a544 1
  if (DEPRECATED_REGISTER_CONVERTIBLE (regnum))
@


1.55
log
@2003-09-30  Andrew Cagney  <cagney@@redhat.com>

	* mi-main.c: Rename REGISTER_VIRTUAL_SIZE to
	DEPRECATED_REGISTER_VIRTUAL_SIZE.

2003-09-30  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (DEPRECATED_REGISTER_VIRTUAL_SIZE): Rename
	REGISTER_VIRTUAL_SIZE.
	* gdbarch.h, gdbarch.c: Regenerate.
	* vax-tdep.h, sparc-tdep.c, regcache.h: Update.
	* regcache.c, mn10300-tdep.c, mips-tdep.c: Update.
	* infcmd.c, frame.c, findvar.c, cris-tdep.c: Update.

2003-09-30  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Rename
	REGISTER_VIRTUAL_SIZE to DEPRECATED_REGISTER_VIRTUAL_SIZE.
	(Target Architecture Definition):
@
text
@d409 1
a409 1
	      REGISTER_RAW_SIZE (regnum)) == 0)
d415 1
a415 1
	  REGISTER_RAW_SIZE (regnum));
d556 1
a556 1
      for (j = 0; j < REGISTER_RAW_SIZE (regnum); j++)
d559 1
a559 1
	  : REGISTER_RAW_SIZE (regnum) - 1 - j;
d645 1
a645 1
	  deprecated_write_register_bytes (DEPRECATED_REGISTER_BYTE (regnum), buffer, REGISTER_RAW_SIZE (regnum));
@


1.54
log
@2003-09-20  Andrew Cagney  <cagney@@redhat.com>

	* cli/cli-script.c: Remove "register" attributes.
	* config/pa/tm-hppa.h: Ditto.
	* cli/cli-decode.c: Ditto.
	* cli/cli-cmds.c: Ditto.
@
text
@d547 1
a547 1
    memcpy (virtual_buffer, raw_buffer, REGISTER_VIRTUAL_SIZE (regnum));
@


1.53
log
@2003-09-17  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (DEPRECATED_REGISTER_BYTE): Rename REGISTER_BYTE.
	* gdbarch.h, gdbarch.c: Regenerate.
	* arm-linux-tdep.c, core-sol2.c, cris-tdep.c: Update.
	* d10v-tdep.c, frame.c: Update.
	* hppa-tdep.c, hppab-nat.c, hppah-nat.c, hppam3-nat.c: Update.
	* hpux-thread.c, i386gnu-nat.c, ia64-aix-nat.c: Update.
	* ia64-linux-nat.c, irix5-nat.c, lynx-nat.c, m68knbsd-nat.c: Update.
	* mcore-tdep.c, mips-linux-tdep.c, mips-tdep.c: Update.
	* mipsv4-nat.c, mn10300-tdep.c, ns32k-tdep.c: Update.
	* ns32knbsd-nat.c, ppc-bdm.c, regcache.c, remote-sds.c: Update.
	* remote-vx68.c, remote-vxmips.c, remote-vxsparc.c: Update.
	* remote.c, rs6000-tdep.c, s390-tdep.c, sh64-tdep.c: Update.
	* sparc-nat.c, sparc-tdep.c, sun3-nat.c, v850-tdep.c: Update.
	* v850ice.c, vax-tdep.c, xstormy16-tdep.c: Update.
	* config/m68k/tm-cisco.h, config/m68k/tm-delta68.h: Update.
	* config/pa/nm-hppah.h: Update.

2003-09-17  Andrew Cagney  <cagney@@redhat.com>

	* mi/mi-main.c: Rename REGISTER_BYTE to DEPRECATED_REGISTER_BYTE.
@
text
@d558 1
a558 1
	  register int idx = TARGET_BYTE_ORDER == BFD_ENDIAN_BIG ? j
@


1.52
log
@2003-09-10  Elena Zannoni  <ezannoni@@redhat.com>

	* mi-main.c (mi_setup_architecture_data): Don't use
	DEPRECATED_REGISTER_BYTES because some architecture don't set it
	and its default is 0.
@
text
@d408 1
a408 1
  if (memcmp (&old_regs[REGISTER_BYTE (regnum)], raw_buffer,
d414 1
a414 1
  memcpy (&old_regs[REGISTER_BYTE (regnum)], raw_buffer,
d645 1
a645 1
	  deprecated_write_register_bytes (REGISTER_BYTE (regnum), buffer, REGISTER_RAW_SIZE (regnum));
@


1.52.2.1
log
@merge mainline changes into branch
@
text
@d2 1
a2 4

   Copyright 2000, 2001, 2002, 2003, 2004 Free Software Foundation,
   Inc.

d408 2
a409 2
  if (memcmp (&old_regs[DEPRECATED_REGISTER_BYTE (regnum)], raw_buffer,
	      DEPRECATED_REGISTER_RAW_SIZE (regnum)) == 0)
d414 2
a415 2
  memcpy (&old_regs[DEPRECATED_REGISTER_BYTE (regnum)], raw_buffer,
	  DEPRECATED_REGISTER_RAW_SIZE (regnum));
d540 1
a540 2
  if (DEPRECATED_REGISTER_CONVERTIBLE_P ()
      && DEPRECATED_REGISTER_CONVERTIBLE (regnum))
d547 1
a547 1
    memcpy (virtual_buffer, raw_buffer, DEPRECATED_REGISTER_VIRTUAL_SIZE (regnum));
d556 1
a556 1
      for (j = 0; j < DEPRECATED_REGISTER_RAW_SIZE (regnum); j++)
d558 2
a559 2
	  int idx = TARGET_BYTE_ORDER == BFD_ENDIAN_BIG ? j
	  : DEPRECATED_REGISTER_RAW_SIZE (regnum) - 1 - j;
d645 1
a645 1
	  deprecated_write_register_bytes (DEPRECATED_REGISTER_BYTE (regnum), buffer, DEPRECATED_REGISTER_RAW_SIZE (regnum));
d1488 2
a1489 2
  DEPRECATED_REGISTER_GDBARCH_SWAP (old_regs);
  deprecated_register_gdbarch_swap (NULL, 0, mi_setup_architecture_data);
@


1.51
log
@2003-08-08  Andrew Cagney  <cagney@@redhat.com>

	* interps.c (interp_set): Check for a NULL "old_interp".

Index: mi/ChangeLog
2003-08-08  Andrew Cagney  <cagney@@redhat.com>

	* mi-main.c (captured_mi_execute_command): Add "mi2" and "mi3" to
	interpreters that hack around CLI.
	* mi-interp.c (mi3_command_loop): New function.
	(mi_interpreter_resume): Check for "mi3", default to "mi2".
@
text
@d1481 2
a1482 3
  /* don't trust DEPRECATED_REGISTER_BYTES to be zero. */
  old_regs = xmalloc (DEPRECATED_REGISTER_BYTES + 1);
  memset (old_regs, 0, DEPRECATED_REGISTER_BYTES + 1);
@


1.50
log
@2003-08-04  Andrew Cagney  <cagney@@redhat.com>

	* mi-cmds.h (struct mi_cli): Define.
	(struct mi_cmd): Change type of "cli" to "struct mi_cli".
	* mi-cmds.c (mi_cmds): Update table.
	* mi-parse.c (mi_parse): Update.
	* mi-main.c (mi_execute_cli_command): Add "args_p" parameter, make
	others constant.
	(mi_cmd_execute): Update call.
	(captured_mi_execute_command): Ditto.
@
text
@d1164 3
a1166 1
	  || current_interp_named_p (INTERP_MI1))
@


1.49
log
@2003-08-04  David Carlton  <carlton@@kealia.com>

	* charset.c (cached_iconv_convert): Add __FILE__ and __LINE__ args
	to internal_error call.
	* source.c (forward_search_command): Add "%s" format argument.
	(reverse_search_command): Ditto.
	* top.c (quit_confirm): Ditto.
	* cli/cli-setshow.c (do_setshow_command): Ditto.
	* cp-valprint.c (cp_print_class_method): Replace
	{f,}printf_{un,}filtered by {f,}puts_{un,}filtered.
	(cp_print_class_member): Ditto.
	* event-top.c (command_line_handler): Ditto.
	* linux-proc.c (linux_info_proc_cmd): Ditto.
	* p-typeprint.c (pascal_type_print_base): Ditto.
	* p-valprint.c (pascal_object_print_class_method): Ditto.
	(pascal_object_print_class_member): Ditto.
	* printcmd.c (print_scalar_formatted,printf_command): Ditto.
	* remote.c (remote_cisco_section_offsets): Ditto.
	* top.c (command_line_input): Ditto.
	* utils.c (vwarning,error_stream,quit): Ditto.
	* valprint.c (print_floating,print_binary_chars)
	(print_octal_chars,print_decimal_chars,print_hex_chars): Ditto.

2003-08-04  David Carlton  <carlton@@kealia.com>

	* mi-main.c (mi_error_last_message): Add "%s" second argument to
	xasprintf call.

2003-08-04  David Carlton  <carlton@@kealia.com>

	* generic/gdbtk.c (gdbtk_source_start_file): Add "%s" first
	argument to error call.
	(tk_command): Ditto.
	(view_command): Ditto.
@
text
@d90 2
a91 1
static void mi_execute_cli_command (const char *cli, char *args);
d1160 1
a1160 3
      /* FIXME: If the command string has something that looks like 
         a format spec (e.g. %s) we will get a core dump */
      mi_execute_cli_command ("%s", context->command);
d1277 1
a1277 1
  else if (parse->cmd->cli != 0)
d1282 2
a1283 1
      mi_execute_cli_command (parse->cmd->cli, parse->args);
d1304 1
a1304 1
mi_execute_cli_command (const char *cli, char *args)
d1306 1
a1306 1
  if (cli != 0)
d1310 4
a1313 1
      xasprintf (&run, cli, args);
d1317 1
a1317 1
			    cli, run);
@


1.48
log
@2003-06-11  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (DEPRECATED_REGISTER_CONVERTIBLE): Deprecate
	REGISTER_CONVERTIBLE.
	(DEPRECATED_REGISTER_CONVERT_TO_VIRTUAL): Same.
	(DEPRECATED_REGISTER_CONVERT_TO_RAW): Same, make "from" constant.
	* gdbarch.h, gdbarch.c: Re-generate.
	* arch-utils.h (deprecated_register_convertible_not): Rename
	generic_register_convertible_not.
	* arch-utils.c (deprecated_register_convertible_not): Rename
	generic_register_convertible.
	(legacy_convert_register_p, legacy_register_to_value): Update.
	* sh-tdep.c (sh64_push_arguments): Update.
	* m68klinux-tdep.c (m68k_linux_extract_return_value): Update.
	* config/m68k/tm-delta68.h (DEPRECATED_EXTRACT_RETURN_VALUE): Update.
	* m68klinux-tdep.c (m68k_linux_store_return_value): Update.
	* config/m68k/tm-delta68.h (DEPRECATED_STORE_RETURN_VALUE): Update.
	* arch-utils.c (legacy_value_to_register): Update.
	* rs6000-tdep.c (rs6000_gdbarch_init): Update.
	(rs6000_register_convert_to_raw): Make parameter "from" const.
	* mips-tdep.c (mips_gdbarch_init): Update.
	(mips_register_convert_to_raw): Make  parameter"virt_buf" const.
	* infcmd.c (default_print_registers_info): Update.
	* ia64-tdep.c (ia64_gdbarch_init): Update.
	(ia64_register_convert_to_raw): Make parameter "from" const.
	* i386-tdep.c (i386_gdbarch_init): Update.
	(i386_register_convert_to_raw): Update.
@
text
@d104 1
a104 1
  xasprintf (&mi_error_message, s);
@


1.48.4.1
log
@2003-08-08  Andrew Cagney  <cagney@@redhat.com>

	* interps.c (interp_set): Check for a NULL "old_interp".

Index: mi/ChangeLog
2003-08-08  Andrew Cagney  <cagney@@redhat.com>

	* mi-main.c (captured_mi_execute_command): Add "mi2" and "mi3" to
	interpreters that hack around CLI.
	* mi-interp.c (mi3_command_loop): New function.
	(mi_interpreter_resume): Check for "mi3", default to "mi2".
@
text
@d1165 1
a1165 3
	  || current_interp_named_p (INTERP_MI1)
	  || current_interp_named_p (INTERP_MI2)
	  || current_interp_named_p (INTERP_MI3))
@


1.48.4.2
log
@2003-09-10  Elena Zannoni  <ezannoni@@redhat.com>

	* mi-main.c (mi_setup_architecture_data): Don't use
	DEPRECATED_REGISTER_BYTES because some architecture don't set it
	and its default is 0.
@
text
@d1478 3
a1480 2
  old_regs = xmalloc ((NUM_REGS + NUM_PSEUDO_REGS) * MAX_REGISTER_SIZE + 1);
  memset (old_regs, 0, (NUM_REGS + NUM_PSEUDO_REGS) * MAX_REGISTER_SIZE + 1);
@


1.47
log
@2003-06-08  Andrew Cagney  <cagney@@redhat.com>

	* acinclude.m4 (gcc_AC_CHECK_DECL, (gcc_AC_CHECK_DECL): Stolen
	from GCC's acinclude.m4.
	* configure.in: Check for getopt's delcaration.
	* aclocal.m4, config.in, configure: Re-generate.
	* main.c (error_init): Delete declaration.
	* defs.h (error_init): Declare.
	* rs6000-tdep.c (rs6000_fetch_pointer_argument): Make static.
	(rs6000_convert_from_func_ptr_addr): Make static.
	(_initialize_rs6000_tdep): Add declaration.
	* cli/cli-cmds.c (dont_repeat): Delete declaration.
	(show_commands, set_verbose, show_history): Delete declaration.
	* top.h (set_verbose): Add declaration.
	(show_history, set_history, show_commands): Add declaration.
	(do_restore_instream_cleanup): Add declaration.
	* objc-lang.c (specialcmp): Make static.
	(print_object_command): Make static.
	(find_objc_msgsend): Make static.
	(find_objc_msgcall_submethod_helper): Make static.
	(find_objc_msgcall_submethod): Make static.
	(_initialize_objc_language): Add declaration.
	(find_implementation_from_class): Make static.
	(find_implementation): Make static.
	* objc-exp.y (yylex): Delete lookup_struct_typedef declaration.
	* objc-lang.h (lookup_struct_typedef): Add declaration.
	* cli/cli-interp.c (_initialize_cli_interp): Add declaration.
	* cli/cli-script.c (clear_hook_in_cleanup): Make static.
	(do_restore_user_call_depth): Make static.
	(do_restore_instream_cleanup): Delete declaration.
	(dont_repeat): Delete declaration.
	* cli/cli-decode.c (add_abbrev_cmd): Delete function.
	* cli/cli-dump.c (_initialize_cli_dump): Add declaration.
	* reggroups.c (_initialize_reggroup): Add declaration.
	* cp-support.c (_initialize_cp_support): Add declaration.
	* cp-abi.c (_initialize_cp_abi): Add declaration.
	* hpacc-abi.c (_initialize_hpacc_abi): Add declaration.
	* gnu-v3-abi.c (gnuv3_baseclass_offset): Make static.
	(_initialize_gnu_v3_abi): Add declaration.
	* gnu-v2-abi.c (gnuv2_value_rtti_type): Make static.
	(_initialize_gnu_v2_abi): Add declaration.
	* frame-base.c (_initialize_frame_base): Add declaration.
	* doublest.c (floatformat_from_length): Make static.
	* frame-unwind.c (_initialize_frame_unwind): Add declaration.
	* frame.c (create_sentinel_frame): Make static.
	(_initialize_frame): Add declaration.
	* top.c (do_catch_errors): Make static.
	(gdb_rl_operate_and_get_next_completion): Make static.
	* typeprint.c: Include "typeprint.h".
	* sentinel-frame.c (sentinel_frame_prev_register): Make static.
	(sentinel_frame_this_id): Make static.
	* p-valprint.c (_initialize_pascal_valprint): Add declaration.
	* ui-out.c (make_cleanup_ui_out_begin_end): Delete function.
	* dwarf2-frame.c (dwarf2_frame_cache): Make static.
	* p-exp.y (push_current_type, pop_current_type): ISO C declaration.
	* dwarf2expr.h (dwarf_expr_context): ISO C declaration.
	* maint.c (maintenance_print_architecture): Make static.
	* signals/signals.c (_initialize_signals): Add declaration.
	* std-regs.c (_initialize_frame_reg): Add declaration.
	* jv-exp.y (push_variable): ISO C definition.
	(push_qualified_expression_name): Ditto.
	* memattr.c (_initialize_mem): Add declaration.
	* remote.c (remote_check_watch_resources): Make static.
	(remote_stopped_by_watchpoint): Make static.
	(remote_stopped_data_address): Make static.
	* d10v-tdep.c (nr_dmap_regs): Make static.
	(a0_regnum): Make static.
	(d10v_frame_unwind_cache): Make static.
	(d10v_frame_p): Make static.
	* osabi.c (show_osabi): Make static.
	(_initialize_gdb_osabi): Add extern declaration.
	* gdbtypes.c (make_qualified_type): Make static.
	(safe_parse_type): Make static.
	* macrocmd.c (_initialize_macrocmd): Add extern declaration.
	* macrotab.c (macro_bcache_free): Make static.
	* interps.c (interp_set_quiet): Make static.
	(interpreter_exec_cmd): Make static.
	* stack.h (select_frame_command): New file.
	* stack.c: Include "stack.h".
	(select_frame_command_wrapper): Delete function.
	(select_frame_command): Make global.
	* infcall.c: Include "infcall.h".
	* linespec.c: Include "linespec.h".
	* symfile.c (sections_overlap): Make static.
	* cp-support.h (cp_initialize_namespace): ISO C declaration.
	* charset.c (_initialize_charset): Add missing prototype.
	* regcache.c (init_legacy_regcache_descr): Make static.
	(do_regcache_xfree): Make static.
	(regcache_xfer_part): Make static.
	(_initialize_regcache): Add missing prototype.
	* breakpoint.c (parse_breakpoint_sals): Make static.
	(breakpoint_sals_to_pc): Make static.
	* interps.h (clear_interpreter_hooks): ISO C declaration.
	* Makefile.in (stack_h): Define.
	(stack.o, typeprint.o, mi-main.o): Update dependencies.
	(mi-cmd-stack.o, infcall.o, linespec.o): Update dependencies.

Index: mi/ChangeLog
2003-06-08  Andrew Cagney  <cagney@@redhat.com>

	* mi-parse.c (_initialize_mi_parse): Delete function.
	* mi-main.c: Include "mi-main.h".
	* mi-interp.c (_initialize_mi_interp): Add declaration.
	* mi-cmd-stack.c: Include "stack.h".
	(select_frame_command_wrapper): Delete extern declaration.
	(mi_cmd_stack_select_frame): Replace select_frame_command_wrapper
	with select_frame_command.
@
text
@d539 1
a539 1
  if (REGISTER_CONVERTIBLE (regnum))
d541 1
a541 1
      REGISTER_CONVERT_TO_VIRTUAL (regnum,
@


1.46
log
@2003-05-16  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (DEPRECATED_REGISTER_BYTES): Rename REGISTER_BYTES.
	* gdbarch.h, gdbarch.c: Re-generate.
	* arm-linux-tdep.c (arm_linux_extract_return_value): Delete reference.
	* TODO (REGISTER_BYTES): Delete reference.
	* alpha-tdep.c (alpha_gdbarch_init): Update.
	* xstormy16-tdep.c (xstormy16_gdbarch_init): Update.
	* x86-64-tdep.c (x86_64_init_abi): Update.
	* vax-tdep.c (vax_gdbarch_init): Update.
	* v850-tdep.c (v850_gdbarch_init): Update.
	* sparc-tdep.c (sparc_gdbarch_init): Update.
	* sh-tdep.c (sh_gdbarch_init): Update.
	* s390-tdep.c (s390_gdbarch_init): Update.
	* rs6000-tdep.c (rs6000_gdbarch_init): Update.
	* ns32k-tdep.c (ns32k_gdbarch_init_32082): Update.
	(ns32k_gdbarch_init_32382): Update.
	* mn10300-tdep.c (mn10300_gdbarch_init): Update.
	* mcore-tdep.c (mcore_gdbarch_init): Update.
	* m68k-tdep.c (m68k_gdbarch_init): Update.
	* m68hc11-tdep.c (m68hc11_gdbarch_init): Update.
	* ia64-tdep.c (ia64_gdbarch_init): Update.
	* i386-tdep.c (i386_gdbarch_init): Update.
	* i386-linux-tdep.c (i386_linux_init_abi): Update.
	* hppa-tdep.c (hppa_gdbarch_init): Update.
	* h8300-tdep.c (h8300_gdbarch_init): Update.
	* frv-tdep.c (frv_gdbarch_init): Update.
	* cris-tdep.c (cris_gdbarch_init): Update.
	* avr-tdep.c (avr_gdbarch_init): Update.
	* arm-tdep.c (arm_gdbarch_init): Update.
	* sparc-tdep.c (sparc_pop_frame): Update.
	* rs6000-tdep.c (rs6000_pop_frame): Update.
	* remote.c (init_remote_state): Update.
	(remote_prepare_to_store): Update.
	* remote-vx.c (vx_prepare_to_store): Update.
	* remote-sds.c (sds_fetch_registers): Update.
	(sds_prepare_to_store): Update.
	* remote-array.c: Update.
	* regcache.c (init_legacy_regcache_descr): Update.
	(init_regcache_descr): Update.
	* mips-tdep.c (mips_eabi_extract_return_value): Update.
	(mips_o64_extract_return_value): Update.
	* irix5-nat.c (fetch_core_registers): Update.
	* irix4-nat.c (fetch_core_registers): Update.
	* i386-tdep.h: Update.
	* hppa-tdep.c (pa_do_registers_info): Update.
	(pa_do_strcat_registers_info): Update.
	* cris-tdep.c (cris_register_bytes_ok): Update.
	* config/nm-gnu.h (CHILD_PREPARE_TO_STORE): Update.
	* config/sparc/tm-sparc.h (DEPRECATED_REGISTER_BYTES): Update.
	* config/sparc/nm-sun4sol2.h (CHILD_PREPARE_TO_STORE): Update.
	* config/sparc/nm-sun4os4.h (CHILD_PREPARE_TO_STORE): Update.
	* config/sparc/nm-nbsd.h (CHILD_PREPARE_TO_STORE): Update.
	* config/sparc/tm-sp64.h (DEPRECATED_REGISTER_BYTES): Update.
	* config/s390/tm-s390.h (DEPRECATED_REGISTER_BYTES): Update.
	* config/pa/tm-hppa64.h (DEPRECATED_REGISTER_BYTES): Update.
	* config/mips/tm-mips.h (DEPRECATED_REGISTER_BYTES): Update.
	* config/mips/tm-irix6.h (DEPRECATED_REGISTER_BYTES): Update.
	* config/mips/tm-irix5.h (DEPRECATED_REGISTER_BYTES): Update.
	* config/m68k/tm-sun3.h (DEPRECATED_REGISTER_BYTES): Update.
	(REGISTER_BYTES_OK): Update.
	* config/m68k/nm-sun3.h (CHILD_PREPARE_TO_STORE): Update.
	* config/ia64/tm-ia64.h (DEPRECATED_REGISTER_BYTES): Update.

Index: doc/ChangeLog
2003-05-16  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Replace
	REGISTER_BYTES with DEPRECATED_REGISTER_BYTES.  Fix typo,
	DEPRECATED_REGISTER_SIZE instead of REGISTER_BYTE.

Index: mi/ChangeLog
2003-05-16  Andrew Cagney  <cagney@@redhat.com>

	* mi-main.c (mi_setup_architecture_data):
@
text
@d44 1
@


1.45
log
@2003-05-08  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh: Delete references to MAX_REGISTER_RAW_SIZE.
	* gdbarch.h: Re-generate.
	* defs.h (MAX_REGISTER_RAW_SIZE): Delete macro.
	(legacy_max_register_raw_size): Delete declaration.
	* regcache.c (legacy_max_register_raw_size): Delete function.
	* valops.c: Replace MAX_REGISTER_RAW_SIZE with MAX_REGISTER_SIZE.
	* target.c, stack.c, sparc-tdep.c, sh-tdep.c: Update.
	* rs6000-tdep.c, rs6000-nat.c, remote.c, remote-sim.c: Update.
	* remote-rdp.c, remote-array.c, regcache.c: Update.
	* ppc-linux-nat.c, monitor.c, mn10300-tdep.c: Update.
	* mips-tdep.c, mips-linux-tdep.c, m68klinux-nat.c: Update.
	* infptrace.c, ia64-tdep.c, i386-tdep.c, frame.c: Update.
	* findvar.c, dwarf2cfi.c: Update.

Index: tui/ChangeLog
2003-05-08  Andrew Cagney  <cagney@@redhat.com>

	* tuiRegs.c: Use MAX_REGISTER_SIZE instead of
	MAX_REGISTER_RAW_SIZE.

Index: mi/ChangeLog
2003-05-08  Andrew Cagney  <cagney@@redhat.com>

	* mi-main.c (register_changed_p): Use MAX_REGISTER_SIZE instead of
	MAX_REGISTER_RAW_SIZE.
@
text
@d1475 3
a1477 3
  /* don't trust REGISTER_BYTES to be zero. */
  old_regs = xmalloc (REGISTER_BYTES + 1);
  memset (old_regs, 0, REGISTER_BYTES + 1);
@


1.44
log
@2003-05-08  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh: Add comments on MAX_REGISTER_SIZE.
	* gdbarch.h: Re-generate.
	* defs.h (MAX_REGISTER_VIRTUAL_SIZE): Delete macro.
	(legacy_max_register_virtual_size): Delete declaration.
	* infcmd.c (default_print_registers_info): Use MAX_REGISTER_SIZE.
	* d10v-tdep.c (d10v_print_registers_info): Ditto.
	* tracepoint.c (memrange_sortmerge): Ditto.
	* sparc-tdep.c (sparc_print_registers): Ditto.
	* regcache.c (legacy_max_register_virtual_size): Delete function.
@
text
@d401 1
a401 1
  char *raw_buffer = alloca (MAX_REGISTER_RAW_SIZE);
@


1.43
log
@2003-05-03  Andrew Cagney  <cagney@@redhat.com>

	* gdbarch.sh (DEPRECATED_REGISTER_SIZE): Rename REGISTER_SIZE.
	(DEPRECATED_SIZEOF_CALL_DUMMY_WORDS): Rename
	SIZEOF_CALL_DUMMY_WORDS.
	(DEPRECATED_CALL_DUMMY_WORDS): Rename CALL_DUMMY_WORDS.
	(DEPRECATED_FIX_CALL_DUMMY): Rename FIX_CALL_DUMMY.
	(DEPRECATED_CALL_DUMMY_BREAKPOINT_OFFSET): Rename
	CALL_DUMMY_BREAKPOINT_OFFSET.
	(DEPRECATED_CALL_DUMMY_START_OFFSET): Rename
	CALL_DUMMY_START_OFFSET.
	(DEPRECATED_CALL_DUMMY_LENGTH): Rename CALL_DUMMY_LENGTH.
	* gdbarch.h, gdbarch.c: Re-generate.
	* alpha-tdep.c, alphafbsd-tdep.c, arm-linux-tdep.c: Update.
	* arm-tdep.c, avr-tdep.c, breakpoint.c, cris-tdep.c: Update.
	* dummy-frame.c, dummy-frame.h, frv-tdep.c, gdbarch.c: Update.
	* gdbarch.h, gdbarch.sh, h8300-tdep.c, hppa-tdep.c: Update.
	* i386-tdep.c, ia64-tdep.c, infcall.c, inferior.h: Update.
	* m68hc11-tdep.c, m68k-tdep.c, mcore-tdep.c: Update.
	* mips-tdep.c, mn10300-tdep.c, ns32k-tdep.c: Update.
	* rs6000-tdep.c, s390-tdep.c, sh-tdep.c, sol-thread.c: Update.
	* sparc-tdep.c, target.c, v850-tdep.c, valops.c: Update.
	* vax-tdep.c, x86-64-tdep.c, xstormy16-tdep.c: Update.
	* config/ia64/tm-ia64.h, config/m68k/tm-vx68.h: Update.
	* config/mips/tm-mips.h, config/pa/nm-hppah.h: Update.
	* config/pa/tm-hppa.h, config/pa/tm-hppa64.h: Update.
	* config/s390/tm-s390.h, config/sparc/tm-sp64.h: Update.
	* config/sparc/tm-sparc.h: Update.

Index: doc/ChangeLog
2003-05-03  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Make
	CALL_DUMMY_WORDS, SIZEOF_CALL_DUMMY_WORDS, CALL_DUMMY_LENGTH,
	FIX_CALL_DUMMY, CALL_DUMMY_BREAKPOINT_OFFSET and
	CALL_DUMMY_BREAKPOINT_OFFSET deprecated.

Index: mi/ChangeLog
2003-05-03  Andrew Cagney  <cagney@@redhat.com>

	* mi-main.c (mi_cmd_data_write_register_values): Replace
	REGISTER_SIZE with DEPRECATED_REGISTER_SIZE.

Index: testsuite/ChangeLog
2003-05-03  Andrew Cagney  <cagney@@redhat.com>

	* gdb.base/watchpoint.exp: Rename CALL_DUMMY_BREAKPOINT_OFFSET to
	DEPRECATED_CALL_DUMMY_BREAKPOINT_OFFSET in comments.
@
text
@d514 2
a515 2
  char *raw_buffer = alloca (MAX_REGISTER_RAW_SIZE);
  char *virtual_buffer = alloca (MAX_REGISTER_VIRTUAL_SIZE);
@


1.42
log
@2003-03-12  Andrew Cagney  <cagney@@redhat.com>

	* frame.c (get_saved_register): Delete function.
	* xstormy16-tdep.c: Update comment.
	* regcache.h: Update comments.
	* sparc-tdep.c (sparc_init_extra_frame_info): Instead of
	get_saved_register and extract_address, use
	frame_read_unsigned_register.
	(sparc_frame_saved_pc): Ditto.
	(sparc_get_saved_register): Instead of get_saved_register, use
	frame_register.
	(sparc_pop_frame): Ditto.
	* frame.h (get_saved_register): Delete declaration.
	* findvar.c: Update comments.
	(value_of_register): Call frame_register instead of
	get_saved_register.
	(value_from_register): Ditto.
	* config/sparc/tm-sparc.h: Update comment.
	* breakpoint.c: Update comment.

Index: doc/ChangeLog
2003-03-12  Andrew Cagney  <cagney@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Delete
	references to get_saved_register.
@
text
@d639 1
a639 1
	  buffer = xmalloc (REGISTER_SIZE);
d641 1
a641 1
	  store_signed_integer (buffer, REGISTER_SIZE, value);
@


1.42.10.1
log
@2003-05-18  Mark Kettenis  <kettenis@@gnu.org>

	Merge from mainline.
	* i386-tdep.h (I386_SIZEOF_GREGS, I386_SIZEOF_FREGS,
	I386_SIZEOF_XREGS): Remove defenitions.
	(IS_FP_REGNUM, IS_SSE_REGNUM): Remove definitions.
	* i386-tdep.c (i386_gdbarch_init): Don't set register_bytes,
	register_size, call_dummy_words and sizeof_call_dummy.
	* i386-linux-tdep.c (i386_linux_init_abi): Don't set register_bytes.
	* x86-64-tdep.c (x86_64_init_abi): Don't set register_bytes and
	register_size.
	(x86_64_register_bytes): Remove variable.
	(_initialize_x86_64_tdep): Remove function.

	* i386-linux-tdep.c (i386_linux_sigcontext_addr): Call read_memory
	with correct arguments.
	* config/i386/x86-64linux.mt (TDEPFILES): Add i386-linux-tdep.o.
@
text
@d401 1
a401 1
  char raw_buffer[MAX_REGISTER_SIZE];
d514 2
a515 2
  char raw_buffer[MAX_REGISTER_SIZE];
  char virtual_buffer[MAX_REGISTER_SIZE];
d639 1
a639 1
	  buffer = xmalloc (DEPRECATED_REGISTER_SIZE);
d641 1
a641 1
	  store_signed_integer (buffer, DEPRECATED_REGISTER_SIZE, value);
d1475 3
a1477 3
  /* don't trust DEPRECATED_REGISTER_BYTES to be zero. */
  old_regs = xmalloc (DEPRECATED_REGISTER_BYTES + 1);
  memset (old_regs, 0, DEPRECATED_REGISTER_BYTES + 1);
@


1.41
log
@2003-03-01  Andrew Cagney  <cagney@@redhat.com>

	* Makefile.in (ax-gdb.o): Update dependencies.
	* ax-gdb.c: Include "regcache.h".
	(gen_expr): Use register_type instead of REGISTER_VIRTUAL_TYPE.
	* findvar.c (value_of_register): Ditto.
	* infcmd.c (default_print_registers_info): Ditto.

Index: mi/ChangeLog
2003-03-01  Andrew Cagney  <cagney@@redhat.com>

	* mi-main.c (get_register): Use register_type instead of
	REGISTER_VIRTUAL_TYPE.
@
text
@d517 3
d527 3
a529 3
  get_saved_register (raw_buffer, &optim, (CORE_ADDR *) NULL,
		      deprecated_selected_frame,
		      regnum, (enum lval_type *) NULL);
@


1.41.4.1
log
@2003-03-16  Mark Kettenis  <kettenis@@gnu.org>

	Merge with mainline.  Tag is kettenis-i386newframe-20030316-mergepoint.
@
text
@a516 3
  int realnum;
  CORE_ADDR addr;
  enum lval_type lval;
d524 3
a526 3
  frame_register (deprecated_selected_frame, regnum, &optim, &lval, &addr,
		  &realnum, raw_buffer);

@


1.40
log
@2003-02-05  Jim Ingham <jingham@@apple.com>
            Keith Seitz  <keiths@@redhat.com>
            Elena Zannoni  <ezannoni@@redhat.com>
            Andrew Cagney  <ac131313@@redhat.com>

	* Makefile.in (SUBDIR_CLI_OBS): Add "cli-interp.o".
	(SUBDIR_CLI_SRCS): Add "cli/cli-interp.c".
	(SUBDIR_MI_OBS): Add "mi-interp.o".
	(SUBDIR_MI_SRCS): Add "mi/mi-interp.c".
	(SFILES): Add "interps.c".
	(COMMON_OBS): Add "interps.o".
	(interps_h, mi_main_h): Define.
	(interps.o, cli-interp.o, mi-interp.o): Add dependencies.
	(mi-main.o, main.o, event-top.o): Update dependencies.
	* cli/cli-interp.c: New file.
	* interps.h, interps.c: New files.
	* top.c: (gdb_init): Don't install the default interpreter, handed
	by captured_main.
	* main.c: Include "interps.h".
	(interpreter_p): Note that it should malloc'ed.
	(captured_command_loop): Call current_interp_command_loop.
	(captured_main): Initialize interpreter_p to INTERP_CONSOLE.  Use
	xfree and xstrdup when updating interpreter_p.  Install the
	default interpreter.  Add hack to stop mi1's copyright notice
	being encoded.
	* event-top.h (gdb_setup_readline): Declare.
	(gdb_disable_readline): Declare.
	* event-top.c: Include "interps.h".
	(display_gdb_prompt): Call current_interp_display_prompt_p.
	(gdb_setup_readline): Initialize gdb_stdout, gdb_stderr,
	gdb_stdlog, and gdb_stdtarg.
	(_initialize_event_loop): Don't call gdb_setup_readline.
	* cli-out.c (cli_out_set_stream): New function.
	* cli-out.h (cli_out_set_stream): Declare.
@
text
@d537 2
a538 1
      REGISTER_CONVERT_TO_VIRTUAL (regnum, REGISTER_VIRTUAL_TYPE (regnum),
d563 1
a563 1
      val_print (REGISTER_VIRTUAL_TYPE (regnum), virtual_buffer, 0, 0,
@


1.39
log
@2003-01-13  Elena Zannoni  <ezannoni@@redhat.com>

	* stack.c (print_frame_info, print_stack_frame_base_stub,
	print_stack_frame_base, show_and_print_stack_frame_stub,
	show_and_print_stack_frame, print_only_stack_frame_stub,
	print_only_stack_frame): Delete functions.
	(print_stack_frame_stub): Call print_frame_info instead of
	print_frame_info_base.
	(print_frame_info_base): Rename to print_frame_info.
	(backtrace_command_1): Call print_frame_info, instead of
	print_frame_info_base.
	(current_frame_command): Call print_stack_frame, instead of
	print_only_stack_frame.
	(frame_command): Call print_stack_frame, instead of
	show_and_print_stack_frame.
	(up_command): Ditto.
	(down_command): Ditto.
	* frame.h (print_only_stack_frame): Delete prototype.
	* infrun.c (normal_stop): Call print_stack_frame, instead of
	show_and_print_stack_frame.
	* thread.c (info_threads_command): Call print_stack_frame, instead
	of print_only_stack_frame.

2003-01-13  Elena Zannoni  <ezannoni@@redhat.com>

	* mi-main.c (mi_cmd_exec_return): Use print_stack_frame instead of
	show_and_print_stack_frame.
@
text
@d36 1
d83 1
a83 1
static char *mi_error_message;
a86 2
static char *mi_input (char *);
static void mi_execute_command (char *cmd, int from_tty);
a90 1
static void mi_execute_command_wrapper (char *cmd);
d92 1
a92 1
void mi_exec_async_cli_cmd_continuation (struct continuation_arg *arg);
d96 10
a105 5
static void mi_load_progress (const char *section_name,
			      unsigned long sent_so_far,
			      unsigned long total_section,
			      unsigned long total_sent,
			      unsigned long grand_total);
d1104 6
a1109 1
	  /* print the result if there were no errors */
d1157 15
a1171 9
      /* print the result */
      /* FIXME: Check for errors here. */
      fputs_unfiltered (context->token, raw_stdout);
      fputs_unfiltered ("^done", raw_stdout);
      mi_out_put (uiout, raw_stdout);
      mi_out_rewind (uiout);
      fputs_unfiltered ("\n", raw_stdout);
      args->action = EXECUTE_COMMAND_DISPLAY_PROMPT;
      args->rc = MI_CMD_DONE;
d1186 1
a1186 1
  int result, rc;
a1293 6
static void
mi_execute_command_wrapper (char *cmd)
{
  mi_execute_command (cmd, stdin == instream);
}

d1396 1
a1396 7
static char *
mi_input (char *buf)
{
  return gdb_readline (NULL);
}

static void
d1408 2
a1409 1
  if (!interpreter_p || strncmp (interpreter_p, "mi", 2) != 0)
d1468 2
a1469 75
static void
mi_command_loop (int mi_version)
{
  if (mi_version <= 1)
    {
      /* HACK: Force stdout/stderr to point at the console.  This avoids
         any potential side effects caused by legacy code that is still
         using the TUI / fputs_unfiltered_hook */
      raw_stdout = stdio_fileopen (stdout);
      /* Route normal output through the MIx */
      gdb_stdout = mi_console_file_new (raw_stdout, "~");
    }

  /* Route error and log output through the MI */
  gdb_stderr = mi_console_file_new (raw_stdout, "&");
  gdb_stdlog = gdb_stderr;
  /* Route target output through the MI. */
  gdb_stdtarg = mi_console_file_new (raw_stdout, "@@");

  /* HACK: Poke the ui_out table directly.  Should we be creating a
     mi_out object wired up to the above gdb_stdout / gdb_stderr? */
  uiout = mi_out_new (mi_version);

  /* HACK: Override any other interpreter hooks.  We need to create a
     real event table and pass in that. */
  init_ui_hook = 0;
  /* command_loop_hook = 0; */
  print_frame_info_listing_hook = 0;
  query_hook = 0;
  warning_hook = 0;
  create_breakpoint_hook = 0;
  delete_breakpoint_hook = 0;
  modify_breakpoint_hook = 0;
  interactive_hook = 0;
  registers_changed_hook = 0;
  readline_begin_hook = 0;
  readline_hook = 0;
  readline_end_hook = 0;
  register_changed_hook = 0;
  memory_changed_hook = 0;
  context_hook = 0;
  target_wait_hook = 0;
  call_command_hook = 0;
  error_hook = 0;
  error_begin_hook = 0;
  show_load_progress = mi_load_progress;

  /* Turn off 8 bit strings in quoted output.  Any character with the
     high bit set is printed using C's octal format. */
  sevenbit_strings = 1;

  /* Tell the world that we're alive */
  fputs_unfiltered ("(gdb) \n", raw_stdout);
  gdb_flush (raw_stdout);

  if (!event_loop_p)
    simplified_command_loop (mi_input, mi_execute_command);
  else
    start_event_loop ();
}

static void
mi1_command_loop (void)
{
  mi_command_loop (1);
}

static void
mi2_command_loop (void)
{
  mi_command_loop (2);
}

static void
setup_architecture_data (void)
a1475 15
static void
mi_init_ui (char *arg0)
{
  if (strlen (interpreter_p) <= 2 ||
      interpreter_p[2] > '1')
    {
      /* HACK: Force stdout/stderr to point at the console.  This avoids
         any potential side effects caused by legacy code that is still
         using the TUI / fputs_unfiltered_hook */
      raw_stdout = stdio_fileopen (stdout);
      /* Route normal output through the MIx */
      gdb_stdout = mi_console_file_new (raw_stdout, "~");
    }
}

a1478 15
  if (interpreter_p == NULL)
    return;

  /* If we're _the_ interpreter, take control. */
  if (strcmp (interpreter_p, "mi") == 0)
    command_loop_hook = mi2_command_loop;
  else if (strcmp (interpreter_p, "mi1") == 0)
    command_loop_hook = mi1_command_loop;
  else if (strcmp (interpreter_p, "mi2") == 0)
    command_loop_hook = mi2_command_loop;
  else
    return;

  init_ui_hook = mi_init_ui;
  setup_architecture_data ();
d1480 1
a1480 12
  register_gdbarch_swap (NULL, 0, setup_architecture_data);
  if (event_loop_p)
    {
      /* These overwrite some of the initialization done in
	 _intialize_event_loop. */
      call_readline = gdb_readline2;
      input_handler = mi_execute_command_wrapper;
      add_file_handler (input_fd, stdin_event_handler, 0);
      async_command_editing_p = 0;
    }
  /* FIXME: Should we notify main that we are here as a possible
     interpreter? */
@


1.39.2.1
log
@Merge kseitz_interps-20020528-branch.
@
text
@a35 1
#include "interps.h"
d82 1
a82 1
char *mi_error_message;
d86 2
a87 1
void mi_execute_command (char *cmd, int from_tty);
d92 1
d98 5
a102 14
void mi_load_progress (const char *section_name,
		       unsigned long sent_so_far,
		       unsigned long total_section,
		       unsigned long total_sent,
		       unsigned long grand_total);

/* A helper function which will set mi_error_message to error_last_message. */
void
mi_error_last_message (void)
{
  char *s = error_last_message ();
  xasprintf (&mi_error_message, s);
  xfree (s);
}
d1101 1
a1101 6
	  /* print the result if there were no errors

	     Remember that on the way out of executing a command, you have
	     to directly use the mi_interp's uiout, since the command could 
	     have reset the interpreter, in which case the current uiout 
	     will most likely crash in the mi_out_* routines.  */
d1149 9
a1157 16

      /* If we changed interpreters, DON'T print out anything. */
      if (gdb_interpreter_current_is_named_p (GDB_INTERPRETER_MI)
	  || gdb_interpreter_current_is_named_p (GDB_INTERPRETER_MI2)
	  || gdb_interpreter_current_is_named_p (GDB_INTERPRETER_MI1))
	{
	  /* print the result */
	  /* FIXME: Check for errors here. */
	  fputs_unfiltered (context->token, raw_stdout);
	  fputs_unfiltered ("^done", raw_stdout);
	  mi_out_put (uiout, raw_stdout);
	  mi_out_rewind (uiout);
	  fputs_unfiltered ("\n", raw_stdout);
	  args->action = EXECUTE_COMMAND_DISPLAY_PROMPT;
	  args->rc = MI_CMD_DONE;
	}
d1172 1
a1172 1
  int result;
d1280 6
d1388 7
a1394 1
void
d1406 1
a1406 3
  if (!gdb_interpreter_current_is_named_p (GDB_INTERPRETER_MI)
      && !gdb_interpreter_current_is_named_p (GDB_INTERPRETER_MI2)
      && !gdb_interpreter_current_is_named_p (GDB_INTERPRETER_MI1))
d1465 75
a1539 2
void
mi_setup_architecture_data (void)
d1546 15
d1562 1
a1562 1
mi_register_gdbarch_swap (void)
d1564 15
d1580 12
a1591 1
  register_gdbarch_swap (NULL, 0, mi_setup_architecture_data);
@


1.39.2.2
log
@Clean up.
@
text
@d1164 3
a1166 3
      if (current_interp_named_p (INTERP_MI)
	  || current_interp_named_p (INTERP_MI2)
	  || current_interp_named_p (INTERP_MI1))
d1414 3
a1416 3
  if (!current_interp_named_p (INTERP_MI)
      && !current_interp_named_p (INTERP_MI2)
      && !current_interp_named_p (INTERP_MI1))
@


1.39.2.3
log
@More cleanups.  Add `current_interp_command_loop()'.
@
text
@d1165 1
@


1.39.2.4
log
@Overhaul changelog entries.
@
text
@d87 1
d93 1
a93 1
static void mi_exec_async_cli_cmd_continuation (struct continuation_arg *arg);
d97 5
d103 1
a103 2
/* A helper function which will set mi_error_message to
   error_last_message.  */
d1414 1
d1483 1
a1483 1
_initialize_mi_main (void)
@


1.38
log
@2002-11-29  Andrew Cagney  <ac131313@@redhat.com>

	* stack.c (selected_frame, select_frame): Move from here ...
	* frame.c (selected_frame, select_frame): ... to here.  Include
	"language.h".
	* Makefile.in (frame.o): Update dependencies.
	* frame.c (get_selected_frame): New function.
	* frame.h (get_selected_frame): Declare.
	(deprecated_selected_frame): Rename selected_frame.
	* ada-lang.c, ada-tasks.c, breakpoint.c, corelow.c: Update.
	* eval.c, f-valprint.c, findvar.c, frame.c, frame.h: Update.
	* h8300-tdep.c, h8500-tdep.c, hppa-tdep.c, infcmd.c: Update.
	* inflow.c, infrun.c, macroscope.c, mips-tdep.c: Update.
	* mn10300-tdep.c, ocd.c, regcache.h, remote-e7000.c: Update.
	* remote-mips.c, remote-rdp.c, sh-tdep.c, sparc-tdep.c: Update.
	* stack.c, thread.c, tracepoint.c, valops.c, varobj.c: Update.
	* z8k-tdep.c, cli/cli-cmds.c: Update.

Index: mi/ChangeLog
2002-11-29  Andrew Cagney  <ac131313@@redhat.com>

	* mi/mi-cmd-stack.c, mi/mi-main.c: Update to use
	deprecated_selected_frame.

Index: tui/ChangeLog
2002-11-29  Andrew Cagney  <ac131313@@redhat.com>

	* tui/tui-hooks.c: Update to use deprecated_selected_frame.
	* tui/tui.c, tui/tuiDisassem.c, tui/tuiRegs.c: Ditto.
	* tui/tuiSource.c, tui/tuiSourceWin.c, tui/tuiWin.c: Ditto.
@
text
@d2 1
a2 1
   Copyright 2000, 2001, 2002 Free Software Foundation, Inc.
d186 3
a188 3
  show_and_print_stack_frame (deprecated_selected_frame,
			      frame_relative_level (deprecated_selected_frame),
			      LOC_AND_ADDRESS);
@


1.38.2.1
log
@Merge branch with mainline:
POP_FRAME_P;
frame-unwind.h.
@
text
@d2 1
a2 1
   Copyright 2000, 2001, 2002, 2003 Free Software Foundation, Inc.
d186 3
a188 3
  print_stack_frame (deprecated_selected_frame,
		     frame_relative_level (deprecated_selected_frame),
		     LOC_AND_ADDRESS);
@


1.37
log
@2002-11-13  Andrew Cagney  <cagney@@redhat.com>

	* regcache.h (deprecated_read_register_bytes): Rename
	read_register_bytes.
	(deprecated_write_register_bytes): Rename write_register_bytes.
	* alpha-tdep.c, arm-tdep.c, cris-tdep.c, d10v-tdep.c: Update.
	* dwarf2cfi.c, frv-tdep.c, hppa-tdep.c, ia64-tdep.c: Update.
	* m68k-tdep.c, mcore-tdep.c, mips-tdep.c, mn10300-tdep.c: Update.
	* ns32k-tdep.c, regcache.c, remote-sds.c, remote-vx.c: Update.
	* remote.c, rs6000-tdep.c, s390-tdep.c, sh-tdep.c: Update.
	* sparc-tdep.c, v850-tdep.c, vax-tdep.c, x86-64-tdep.c: Update.
	* xstormy16-tdep.c, z8k-tdep.c, config/nm-gnu.h: Update.
	* config/nm-m3.h, config/h8500/tm-h8500.h: Update.
	* config/i386/nm-ptx4.h, config/i386/nm-symmetry.h: Update.
	* config/m32r/tm-m32r.h, config/m68k/nm-sun3.h: Update.
	* config/m68k/tm-delta68.h, config/m68k/tm-linux.h: Update.
	* config/mn10200/tm-mn10200.h, config/pa/tm-hppa64.h: Update.
	* config/sparc/nm-nbsd.h, config/sparc/nm-sun4os4.h: Update.
	* config/sparc/nm-sun4sol2.h, config/sparc/tm-sparclet.h: Update.

2002-11-13  Andrew Cagney  <ac131313@@redhat.com>

	* mi-main.c (mi_cmd_data_write_register_values): Use
	deprecated_write_register_bytes instead of write_register_bytes.
@
text
@d186 2
a187 2
  show_and_print_stack_frame (selected_frame,
			      frame_relative_level (selected_frame),
d400 1
a400 1
  if (! frame_register_read (selected_frame, regnum, raw_buffer))
d521 2
a522 1
  get_saved_register (raw_buffer, &optim, (CORE_ADDR *) NULL, selected_frame,
@


1.36
log
@
2002-11-08  Jeff Johnston  <jjohnstn@@redhat.com>

        * mi-main.c (mi_command_loop): Initialize raw_stdout and gdb_stdout
        only if mi version is <= 1.
        (mi_init_ui): Initialize raw_stdout and gdb_stdout if mi version
        is > 1 so startup message is treated as console output.  This is
        part of fix for PR gdb/604.
@
text
@d39 1
a39 1
#include "value.h"		/* for write_register_bytes() */
d635 1
a635 1
	  write_register_bytes (REGISTER_BYTE (regnum), buffer, REGISTER_RAW_SIZE (regnum));
@


1.35
log
@
2002-10-23  Jeff Johnston  <jjohnstn@@redhat.com>

        * mi-cmd-var.c: Change all remaining occurrences of ui_out_tuple_begin
        to make_cleanup_ui_out_tuple_begin_end.  Change all remaining
        occurrences of ui_out_list_begin to make_cleanup_ui_out_list_begin_end.         Use do_cleanups instead of ui_out_list_end or ui_out_tuple_end.  This
        is a fix for PR gdb/680.
        * mi-cmd-stack.c: Ditto.
        * mi-main.c: Ditto.
@
text
@d1467 10
a1476 6
  /* HACK: Force stdout/stderr to point at the console.  This avoids
     any potential side effects caused by legacy code that is still
     using the TUI / fputs_unfiltered_hook */
  raw_stdout = stdio_fileopen (stdout);
  /* Route normal output through the MIx */
  gdb_stdout = mi_console_file_new (raw_stdout, "~");
d1548 10
a1557 2
  /* Eventually this will contain code that takes control of the
     console. */
@


1.34
log
@        * mi-main.c (mi_cmd_thread_select): Only return MI_CMD_CAUGHT_ERROR
        when we really did catch an error(). If we got GDB_RC_FAIL, return
        MI_CMD_ERROR instead.
@
text
@d918 1
d921 1
a921 1
    ui_out_list_begin (uiout, "memory");
d928 3
a930 1
	ui_out_tuple_begin (uiout, NULL);
d933 1
a933 1
	ui_out_list_begin (uiout, "data");
d950 1
a950 1
	ui_out_list_end (uiout);
d970 1
a970 1
	ui_out_tuple_end (uiout);
d973 1
a973 1
    ui_out_list_end (uiout);
d1425 1
d1432 1
a1432 1
      ui_out_tuple_begin (uiout, NULL);
d1436 1
a1436 1
      ui_out_tuple_end (uiout);
d1445 1
d1451 1
a1451 1
      ui_out_tuple_begin (uiout, NULL);
d1457 1
a1457 1
      ui_out_tuple_end (uiout);
@


1.33
log
@2002-10-02  Elena Zannoni  <ezannoni@@redhat.com>

        * inferior.h (registers_info, stepi_command, nexti_command,
        continue_command, interrupt_target_command): Export from infcmd.c.
        * frame.h (args_info, selected_frame_level_changed_hook,
        return_command): Export from stack.c.
        * v850ice.c (stepi_command, nexti_command, continue_command): use
        prototypes from inferior.h.
        * tracepoint.c (registers_info, args_info, locals_info): Use
        prototypes from frame.h and inferior.h.
        * Makefile.in (mi-main.o): Add dependency on frame.h.

2002-10-02  Elena Zannoni  <ezannoni@@redhat.com>

        * mi-main.c (mi_cmd_exec_return): Don't use
        return_command_wrapper, use return_command instead.
        (mi_cmd_exec_interrupt): Don't use
        interrupt_target_command_wrapper, use interrupt_target_command
        instead.
        (return_command_wrapper, interrupt_target_command_wrapper):
        Delete.
        Include frame.h.

2002-10-02  Elena Zannoni  <ezannoni@@redhat.com>

        * tui-hooks.c (selected_frame_level_changed_hook): Use the one
        exported from frame.h.
@
text
@d243 3
a245 1
  if (rc == GDB_RC_FAIL)
d247 2
@


1.33.2.1
log
@Merge drow-cplus-merge-20021025 to drow-cplus-branch.
@
text
@d243 1
a243 3
  /* RC is enum gdb_rc if it is successful (>=0)
     enum return_reason if not (<0). */
  if ((int) rc < 0 && (enum return_reason) rc == RETURN_ERROR)
a244 2
  else if ((int) rc >= 0 && rc == GDB_RC_FAIL)
    return MI_CMD_ERROR;
a913 1
    struct cleanup *cleanup_list_memory;
d916 1
a916 1
    cleanup_list_memory = make_cleanup_ui_out_list_begin_end (uiout, "memory");
d923 1
a923 3
	struct cleanup *cleanup_tuple;
	struct cleanup *cleanup_list_data;
	cleanup_tuple = make_cleanup_ui_out_tuple_begin_end (uiout, NULL);
d926 1
a926 1
	cleanup_list_data = make_cleanup_ui_out_list_begin_end (uiout, "data");
d943 1
a943 1
	do_cleanups (cleanup_list_data);
d963 1
a963 1
	do_cleanups (cleanup_tuple);
d966 1
a966 1
    do_cleanups (cleanup_list_memory);
a1417 1
      struct cleanup *cleanup_tuple;
d1424 1
a1424 1
      cleanup_tuple = make_cleanup_ui_out_tuple_begin_end (uiout, NULL);
d1428 1
a1428 1
      do_cleanups (cleanup_tuple);
a1436 1
      struct cleanup *cleanup_tuple;
d1442 1
a1442 1
      cleanup_tuple = make_cleanup_ui_out_tuple_begin_end (uiout, NULL);
d1448 1
a1448 1
      do_cleanups (cleanup_tuple);
@


1.33.2.2
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@d2 1
a2 1
   Copyright 2000, 2001, 2002, 2003 Free Software Foundation, Inc.
a35 1
#include "interps.h"
d39 1
a39 1
#include "value.h"		/* for deprecated_write_register_bytes() */
a42 1
#include "mi-main.h"
d82 1
a82 1
char *mi_error_message;
d86 2
d90 1
a90 2
static void mi_execute_cli_command (const char *cmd, int args_p,
				    const char *args);
d92 1
d94 1
a94 1
static void mi_exec_async_cli_cmd_continuation (struct continuation_arg *arg);
d98 5
a102 10

/* A helper function which will set mi_error_message to
   error_last_message.  */
void
mi_error_last_message (void)
{
  char *s = error_last_message ();
  xasprintf (&mi_error_message, "%s", s);
  xfree (s);
}
d186 3
a188 3
  print_stack_frame (deprecated_selected_frame,
		     frame_relative_level (deprecated_selected_frame),
		     LOC_AND_ADDRESS);
d398 1
a398 1
  char raw_buffer[MAX_REGISTER_SIZE];
d400 1
a400 1
  if (! frame_register_read (deprecated_selected_frame, regnum, raw_buffer))
d403 2
a404 2
  if (memcmp (&old_regs[DEPRECATED_REGISTER_BYTE (regnum)], raw_buffer,
	      DEPRECATED_REGISTER_RAW_SIZE (regnum)) == 0)
d409 2
a410 2
  memcpy (&old_regs[DEPRECATED_REGISTER_BYTE (regnum)], raw_buffer,
	  DEPRECATED_REGISTER_RAW_SIZE (regnum));
d511 2
a512 2
  char raw_buffer[MAX_REGISTER_SIZE];
  char virtual_buffer[MAX_REGISTER_SIZE];
a513 3
  int realnum;
  CORE_ADDR addr;
  enum lval_type lval;
d521 2
a522 3
  frame_register (deprecated_selected_frame, regnum, &optim, &lval, &addr,
		  &realnum, raw_buffer);

d531 1
a531 1
  if (DEPRECATED_REGISTER_CONVERTIBLE (regnum))
d533 1
a533 2
      DEPRECATED_REGISTER_CONVERT_TO_VIRTUAL (regnum,
				   register_type (current_gdbarch, regnum),
d537 1
a537 1
    memcpy (virtual_buffer, raw_buffer, DEPRECATED_REGISTER_VIRTUAL_SIZE (regnum));
d546 1
a546 1
      for (j = 0; j < DEPRECATED_REGISTER_RAW_SIZE (regnum); j++)
d548 2
a549 2
	  int idx = TARGET_BYTE_ORDER == BFD_ENDIAN_BIG ? j
	  : DEPRECATED_REGISTER_RAW_SIZE (regnum) - 1 - j;
d558 1
a558 1
      val_print (register_type (current_gdbarch, regnum), virtual_buffer, 0, 0,
d631 1
a631 1
	  buffer = xmalloc (DEPRECATED_REGISTER_SIZE);
d633 1
a633 1
	  store_signed_integer (buffer, DEPRECATED_REGISTER_SIZE, value);
d635 1
a635 1
	  deprecated_write_register_bytes (DEPRECATED_REGISTER_BYTE (regnum), buffer, DEPRECATED_REGISTER_RAW_SIZE (regnum));
d1100 1
a1100 6
	  /* print the result if there were no errors

	     Remember that on the way out of executing a command, you have
	     to directly use the mi_interp's uiout, since the command could 
	     have reset the interpreter, in which case the current uiout 
	     will most likely crash in the mi_out_* routines.  */
d1145 12
a1156 18
      mi_execute_cli_command (context->command, 0, NULL);

      /* If we changed interpreters, DON'T print out anything. */
      if (current_interp_named_p (INTERP_MI)
	  || current_interp_named_p (INTERP_MI1)
	  || current_interp_named_p (INTERP_MI2)
	  || current_interp_named_p (INTERP_MI3))
	{
	  /* print the result */
	  /* FIXME: Check for errors here. */
	  fputs_unfiltered (context->token, raw_stdout);
	  fputs_unfiltered ("^done", raw_stdout);
	  mi_out_put (uiout, raw_stdout);
	  mi_out_rewind (uiout);
	  fputs_unfiltered ("\n", raw_stdout);
	  args->action = EXECUTE_COMMAND_DISPLAY_PROMPT;
	  args->rc = MI_CMD_DONE;
	}
d1171 1
a1171 1
  int result;
d1258 1
a1258 1
  else if (parse->cmd->cli.cmd != 0)
d1263 1
a1263 2
      mi_execute_cli_command (parse->cmd->cli.cmd, parse->cmd->cli.args_p,
			      parse->args);
d1279 6
d1290 1
a1290 1
mi_execute_cli_command (const char *cmd, int args_p, const char *args)
d1292 1
a1292 1
  if (cmd != 0)
d1296 1
a1296 4
      if (args_p)
	xasprintf (&run, "%s %s", cmd, args);
      else
	run = xstrdup (cmd);
d1300 1
a1300 1
			    cmd, run);
d1387 7
a1393 1
void
d1405 1
a1405 2
  if (!current_interp_named_p (INTERP_MI)
      && !current_interp_named_p (INTERP_MI1))
d1464 79
a1542 2
void
mi_setup_architecture_data (void)
d1544 2
a1545 2
  old_regs = xmalloc ((NUM_REGS + NUM_PSEUDO_REGS) * MAX_REGISTER_SIZE + 1);
  memset (old_regs, 0, (NUM_REGS + NUM_PSEUDO_REGS) * MAX_REGISTER_SIZE + 1);
d1551 15
d1567 12
a1578 1
  register_gdbarch_swap (NULL, 0, mi_setup_architecture_data);
@


1.32
log
@2002-10-01  Andrew Cagney  <ac131313@@redhat.com>

        * NEWS: Mention that MI syntax, selected by "mi" changed to "mi2"
        and that "mi0" syntax has been removed.

2002-10-01  Andrew Cagney  <ac131313@@redhat.com>

        * gdb.texinfo (Mode Options): Update --interpreter option.  "mi2"
        and "mi1" instead of "mi1" and "mi0".

2002-10-01  Andrew Cagney  <ac131313@@redhat.com>

        * mi-main.c (mi2_command_loop): New function.
        (mi0_command_loop): Delete function.
        (_initialize_mi_main): Recognize, and default to, "mi2".  Do not
        recognize "mi0".
        * mi-out.c (mi_table_begin): Remove mi0 code.
        (mi_table_body, mi_table_end): Ditto.
        (mi_table_header, mi_open, mi_close): Ditto.
@
text
@d42 2
a103 6
/* FIXME: these should go in some .h file, but infcmd.c doesn't have a
   corresponding .h file. These wrappers will be obsolete anyway, once
   we pull the plug on the sanitization. */
extern void interrupt_target_command_wrapper (char *, int);
extern void return_command_wrapper (char *, int);

d178 1
a178 1
    return_command_wrapper (args, 0);
d182 1
a182 1
    return_command_wrapper (NULL, 0);
d214 1
a214 1
  interrupt_target_command_wrapper (args, from_tty);
@


1.31
log
@        * mi-main.c (mi_cmd_data_list_register_names): Use cleanups
        for the uiout list. Do the cleanups when returning an error.
        (mi_cmd_data_list_changed_registers): Ditto.
        (mi_cmd_data_list_register_values): Use cleanups for the uiout list
        and tuples. Do the cleanups when returning errors.
@
text
@d1517 1
a1517 1
mi0_command_loop (void)
d1519 1
a1519 1
  mi_command_loop (0);
d1523 1
a1523 1
mi1_command_loop (void)
d1525 1
a1525 1
  mi_command_loop (1);
d1550 3
a1552 4
  if (strcmp (interpreter_p, "mi0") == 0)
    command_loop_hook = mi0_command_loop;
  else if (strcmp (interpreter_p, "mi") == 0
	   || strcmp (interpreter_p, "mi1") == 0)
d1554 2
@


1.31.2.1
log
@Merge with mainline; merge tag carlton_dictionary-20021011-merge.
@
text
@a41 2
#include "frame.h"

d102 6
d182 1
a182 1
    return_command (args, 0);
d186 1
a186 1
    return_command (NULL, 0);
d218 1
a218 1
  interrupt_target_command (args, from_tty);
d1517 1
a1517 1
mi1_command_loop (void)
d1519 1
a1519 1
  mi_command_loop (1);
d1523 1
a1523 1
mi2_command_loop (void)
d1525 1
a1525 1
  mi_command_loop (2);
d1550 4
a1553 3
  if (strcmp (interpreter_p, "mi") == 0)
    command_loop_hook = mi2_command_loop;
  else if (strcmp (interpreter_p, "mi1") == 0)
a1554 2
  else if (strcmp (interpreter_p, "mi2") == 0)
    command_loop_hook = mi2_command_loop;
@


1.31.2.2
log
@2002-10-25  David Carlton  <carlton@@math.stanford.edu>

	* symtab.c (lookup_symbol_aux_block): New function.
	(lookup_symbol_aux_local): Call lookup_symbol_aux_block.
	(lookup_symbol_aux): Ditto.

	* Merge from mainline; tag is carlton_dictionary-20021025-merge.

2002-10-25  David Carlton  <carlton@@math.stanford.edu>

	* cp-support.c: Add comment to demangled name pitfalls.
	* symtab.c (lookup_transparent_type): Add FIXME comment at
	beginning.

2002-10-23  David Carlton  <carlton@@math.stanford.edu>

	* symtab.c: Delete cplusplus_hint.
	Delete prototype for find_template_name_end.
	* dwarf2read.c (scan_partial_symbols): Add in a gdb_assert from a
	later version of my namespace_minimal patch.

2002-10-25  David Carlton  <carlton@@math.stanford.edu>

	* gdb.c++/namespace.exp: Change all of the setup_xfail tests that
	I added into setup_kfails.
@
text
@d243 1
a243 3
  /* RC is enum gdb_rc if it is successful (>=0)
     enum return_reason if not (<0). */
  if ((int) rc < 0 && (enum return_reason) rc == RETURN_ERROR)
a244 2
  else if ((int) rc >= 0 && rc == GDB_RC_FAIL)
    return MI_CMD_ERROR;
a913 1
    struct cleanup *cleanup_list_memory;
d916 1
a916 1
    cleanup_list_memory = make_cleanup_ui_out_list_begin_end (uiout, "memory");
d923 1
a923 3
	struct cleanup *cleanup_tuple;
	struct cleanup *cleanup_list_data;
	cleanup_tuple = make_cleanup_ui_out_tuple_begin_end (uiout, NULL);
d926 1
a926 1
	cleanup_list_data = make_cleanup_ui_out_list_begin_end (uiout, "data");
d943 1
a943 1
	do_cleanups (cleanup_list_data);
d963 1
a963 1
	do_cleanups (cleanup_tuple);
d966 1
a966 1
    do_cleanups (cleanup_list_memory);
a1417 1
      struct cleanup *cleanup_tuple;
d1424 1
a1424 1
      cleanup_tuple = make_cleanup_ui_out_tuple_begin_end (uiout, NULL);
d1428 1
a1428 1
      do_cleanups (cleanup_tuple);
a1436 1
      struct cleanup *cleanup_tuple;
d1442 1
a1442 1
      cleanup_tuple = make_cleanup_ui_out_tuple_begin_end (uiout, NULL);
d1448 1
a1448 1
      do_cleanups (cleanup_tuple);
@


1.31.2.3
log
@2002-11-15  David Carlton  <carlton@@math.stanford.edu>

	* Merge from mainline; tag is carlton_dictionary-20021115-merge.
@
text
@d39 1
a39 1
#include "value.h"		/* for deprecated_write_register_bytes() */
d635 1
a635 1
	  deprecated_write_register_bytes (REGISTER_BYTE (regnum), buffer, REGISTER_RAW_SIZE (regnum));
d1467 6
a1472 10
  if (mi_version <= 1)
    {
      /* HACK: Force stdout/stderr to point at the console.  This avoids
         any potential side effects caused by legacy code that is still
         using the TUI / fputs_unfiltered_hook */
      raw_stdout = stdio_fileopen (stdout);
      /* Route normal output through the MIx */
      gdb_stdout = mi_console_file_new (raw_stdout, "~");
    }

d1544 2
a1545 10
  if (strlen (interpreter_p) <= 2 ||
      interpreter_p[2] > '1')
    {
      /* HACK: Force stdout/stderr to point at the console.  This avoids
         any potential side effects caused by legacy code that is still
         using the TUI / fputs_unfiltered_hook */
      raw_stdout = stdio_fileopen (stdout);
      /* Route normal output through the MIx */
      gdb_stdout = mi_console_file_new (raw_stdout, "~");
    }
@


1.31.2.4
log
@2002-12-23  David Carlton  <carlton@@math.stanford.edu>

	* Merge from mainline; tag is carlton_dictionary-20021223-merge.
@
text
@d186 2
a187 2
  show_and_print_stack_frame (deprecated_selected_frame,
			      frame_relative_level (deprecated_selected_frame),
d400 1
a400 1
  if (! frame_register_read (deprecated_selected_frame, regnum, raw_buffer))
d521 1
a521 2
  get_saved_register (raw_buffer, &optim, (CORE_ADDR *) NULL,
		      deprecated_selected_frame,
@


1.31.2.5
log
@2003-02-07  David Carlton  <carlton@@math.stanford.edu>

	* Merge with mainline; tag is carlton_dictionary-20030207-merge.
@
text
@d2 1
a2 1
   Copyright 2000, 2001, 2002, 2003 Free Software Foundation, Inc.
a35 1
#include "interps.h"
d82 1
a82 1
char *mi_error_message;
d86 2
d92 1
d94 1
a94 1
static void mi_exec_async_cli_cmd_continuation (struct continuation_arg *arg);
d98 5
a102 10

/* A helper function which will set mi_error_message to
   error_last_message.  */
void
mi_error_last_message (void)
{
  char *s = error_last_message ();
  xasprintf (&mi_error_message, s);
  xfree (s);
}
d186 3
a188 3
  print_stack_frame (deprecated_selected_frame,
		     frame_relative_level (deprecated_selected_frame),
		     LOC_AND_ADDRESS);
d1101 1
a1101 6
	  /* print the result if there were no errors

	     Remember that on the way out of executing a command, you have
	     to directly use the mi_interp's uiout, since the command could 
	     have reset the interpreter, in which case the current uiout 
	     will most likely crash in the mi_out_* routines.  */
d1149 9
a1157 15

      /* If we changed interpreters, DON'T print out anything. */
      if (current_interp_named_p (INTERP_MI)
	  || current_interp_named_p (INTERP_MI1))
	{
	  /* print the result */
	  /* FIXME: Check for errors here. */
	  fputs_unfiltered (context->token, raw_stdout);
	  fputs_unfiltered ("^done", raw_stdout);
	  mi_out_put (uiout, raw_stdout);
	  mi_out_rewind (uiout);
	  fputs_unfiltered ("\n", raw_stdout);
	  args->action = EXECUTE_COMMAND_DISPLAY_PROMPT;
	  args->rc = MI_CMD_DONE;
	}
d1172 1
a1172 1
  int result;
d1280 6
d1388 7
a1394 1
void
d1406 1
a1406 2
  if (!current_interp_named_p (INTERP_MI)
      && !current_interp_named_p (INTERP_MI1))
d1465 75
a1539 2
void
mi_setup_architecture_data (void)
d1546 15
d1564 15
d1580 12
a1591 1
  register_gdbarch_swap (NULL, 0, mi_setup_architecture_data);
@


1.31.2.6
log
@2003-03-05  David Carlton  <carlton@@math.stanford.edu>

	* Merge with mainline.  Tag is carlton_dictionary-20030305-merge.
@
text
@d537 1
a537 2
      REGISTER_CONVERT_TO_VIRTUAL (regnum,
				   register_type (current_gdbarch, regnum),
d562 1
a562 1
      val_print (register_type (current_gdbarch, regnum), virtual_buffer, 0, 0,
@


1.31.2.7
log
@2003-04-16  David Carlton  <carlton@@bactrian.org>

	* Merge with mainline; tag is carlton_dictionary-20030416-merge.
@
text
@a516 3
  int realnum;
  CORE_ADDR addr;
  enum lval_type lval;
d524 3
a526 3
  frame_register (deprecated_selected_frame, regnum, &optim, &lval, &addr,
		  &realnum, raw_buffer);

@


1.31.2.8
log
@2003-05-23  David Carlton  <carlton@@bactrian.org>

	* Merge with mainline; tag is carlton_dictionary-20030523-merge.
@
text
@d401 1
a401 1
  char raw_buffer[MAX_REGISTER_SIZE];
d514 2
a515 2
  char raw_buffer[MAX_REGISTER_SIZE];
  char virtual_buffer[MAX_REGISTER_SIZE];
d639 1
a639 1
	  buffer = xmalloc (DEPRECATED_REGISTER_SIZE);
d641 1
a641 1
	  store_signed_integer (buffer, DEPRECATED_REGISTER_SIZE, value);
d1475 3
a1477 3
  /* don't trust DEPRECATED_REGISTER_BYTES to be zero. */
  old_regs = xmalloc (DEPRECATED_REGISTER_BYTES + 1);
  memset (old_regs, 0, DEPRECATED_REGISTER_BYTES + 1);
@


1.31.2.9
log
@2003-06-27  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton_dictionary-20030627-merge.
@
text
@a43 1
#include "mi-main.h"
d538 1
a538 1
  if (DEPRECATED_REGISTER_CONVERTIBLE (regnum))
d540 1
a540 1
      DEPRECATED_REGISTER_CONVERT_TO_VIRTUAL (regnum,
@


1.31.2.10
log
@2003-08-05  David Carlton  <carlton@@kealia.com>

	* configure.in (build_warnings): Delete -Wformat-nonliteral.
	* configure (build_warnings): Ditto.

	* Merge with mainline; tag is carlton_dictionary-20030805-merge.
@
text
@d90 1
a90 2
static void mi_execute_cli_command (const char *cmd, int args_p,
				    const char *args);
d104 1
a104 1
  xasprintf (&mi_error_message, "%s", s);
d1159 3
a1161 1
      mi_execute_cli_command (context->command, 0, NULL);
d1278 1
a1278 1
  else if (parse->cmd->cli.cmd != 0)
d1283 1
a1283 2
      mi_execute_cli_command (parse->cmd->cli.cmd, parse->cmd->cli.args_p,
			      parse->args);
d1304 1
a1304 1
mi_execute_cli_command (const char *cmd, int args_p, const char *args)
d1306 1
a1306 1
  if (cmd != 0)
d1310 1
a1310 4
      if (args_p)
	xasprintf (&run, "%s %s", cmd, args);
      else
	run = xstrdup (cmd);
d1314 1
a1314 1
			    cmd, run);
@


1.31.2.11
log
@2003-09-17  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton_dictionary-20030917-merge.
@
text
@d408 1
a408 1
  if (memcmp (&old_regs[DEPRECATED_REGISTER_BYTE (regnum)], raw_buffer,
d414 1
a414 1
  memcpy (&old_regs[DEPRECATED_REGISTER_BYTE (regnum)], raw_buffer,
d645 1
a645 1
	  deprecated_write_register_bytes (DEPRECATED_REGISTER_BYTE (regnum), buffer, REGISTER_RAW_SIZE (regnum));
d1164 1
a1164 3
	  || current_interp_named_p (INTERP_MI1)
	  || current_interp_named_p (INTERP_MI2)
	  || current_interp_named_p (INTERP_MI3))
d1479 3
a1481 2
  old_regs = xmalloc ((NUM_REGS + NUM_PSEUDO_REGS) * MAX_REGISTER_SIZE + 1);
  memset (old_regs, 0, (NUM_REGS + NUM_PSEUDO_REGS) * MAX_REGISTER_SIZE + 1);
@


1.31.2.12
log
@2003-11-11  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton-dictionary-20031111-merge.
@
text
@d409 1
a409 1
	      DEPRECATED_REGISTER_RAW_SIZE (regnum)) == 0)
d415 1
a415 1
	  DEPRECATED_REGISTER_RAW_SIZE (regnum));
d547 1
a547 1
    memcpy (virtual_buffer, raw_buffer, DEPRECATED_REGISTER_VIRTUAL_SIZE (regnum));
d556 1
a556 1
      for (j = 0; j < DEPRECATED_REGISTER_RAW_SIZE (regnum); j++)
d558 2
a559 2
	  int idx = TARGET_BYTE_ORDER == BFD_ENDIAN_BIG ? j
	  : DEPRECATED_REGISTER_RAW_SIZE (regnum) - 1 - j;
d645 1
a645 1
	  deprecated_write_register_bytes (DEPRECATED_REGISTER_BYTE (regnum), buffer, DEPRECATED_REGISTER_RAW_SIZE (regnum));
@


1.30
log
@        * mi-main.c (captured_mi_execute_command): Add uiout parameter.
        "data" is now a structure which is used to pass data to/from this
        function to mi_execute_command.
        Modify function to comply with requirements from catch_exceptions.
        Store real return result and command's return result in data.
        (mi_execute_command): Use catch_exceptions.
        Use enum to handle actions to be performed instead of overloading
        catch_errors return result and the mi return result.
@
text
@d278 1
d288 1
a288 1
  ui_out_list_begin (uiout, "register-names");
d310 1
d320 1
a320 1
  ui_out_list_end (uiout);
d329 1
d339 1
a339 1
  ui_out_list_begin (uiout, "changed-registers");
d353 1
d376 1
d386 1
d391 1
a391 1
  ui_out_list_end (uiout);
d427 1
d453 1
a453 1
  ui_out_list_begin (uiout, "register-values");
d464 1
a464 1
	  ui_out_tuple_begin (uiout, NULL);
d468 5
a472 2
	    return MI_CMD_ERROR;
	  ui_out_tuple_end (uiout);
d486 1
a486 1
	  ui_out_tuple_begin (uiout, NULL);
d490 5
a494 2
	    return MI_CMD_ERROR;
	  ui_out_tuple_end (uiout);
d498 1
d503 1
a503 1
  ui_out_list_end (uiout);
@


1.30.2.1
log
@Initial check-in of interpreter support from Apple. (Slightly massaged and
modified by me.)
@
text
@a35 1
#include "interps.h"
d80 1
a80 1
char *mi_error_message;
d84 2
a85 1
void mi_execute_command (char *cmd, int from_tty);
d90 1
d96 5
a100 5
void mi_load_progress (const char *section_name,
		       unsigned long sent_so_far,
		       unsigned long total_section,
		       unsigned long total_sent,
		       unsigned long grand_total);
d1083 1
a1083 6
	  /* print the result if there were no errors

	     Remember that on the way out of executing a command, you have
	     to directly use the mi_interp's uiout, since the command could 
	     have reset the interpreter, in which case the current uiout 
	     will most likely crash in the mi_out_* routines.  */
d1131 9
a1139 15

      /* If we changed interpreters, DON'T print out anything. */
      if (gdb_current_interpreter_is_named (GDB_INTERPRETER_MI)
	  || gdb_current_interpreter_is_named (GDB_INTERPRETER_MI0))
	{
	  /* print the result */
	  /* FIXME: Check for errors here. */
	  fputs_unfiltered (context->token, raw_stdout);
	  fputs_unfiltered ("^done", raw_stdout);
	  mi_out_put (uiout, raw_stdout);
	  mi_out_rewind (uiout);
	  fputs_unfiltered ("\n", raw_stdout);
	  args->action = EXECUTE_COMMAND_DISPLAY_PROMPT;
	  args->rc = MI_CMD_DONE;
	}
d1154 1
a1154 1
  int result;
d1192 4
a1195 7
  if (args.rc != MI_CMD_QUIET)
    {
      fputs_unfiltered ("(gdb) \n", raw_stdout);
      gdb_flush (raw_stdout);
      /* print any buffered hook code */
      /* ..... */
    }
d1262 6
d1370 7
a1376 1
void
d1388 1
a1388 2
  if (!gdb_current_interpreter_is_named (GDB_INTERPRETER_MI)
      && !gdb_current_interpreter_is_named (GDB_INTERPRETER_MI0))
d1445 71
a1515 2
void
mi_setup_architecture_data (void)
d1522 7
d1530 1
a1530 1
mi_register_gdbarch_swap (void)
d1532 14
d1547 12
a1558 1
  register_gdbarch_swap (NULL, 0, mi_setup_architecture_data);
@


1.30.2.2
log
@        * mi-cmd-break.c (breakpoint_notify): Only query the breakpoint
        for user breakpoints.
        (mi_cmd_break_insert): Only reset event handlers for MI0 and MI1
        interpreters.
        (mi_cmd_break_watch): Reset uiout output to clear watchpoint
        query. This is only used for MI0 and MI1.

        * mi-console.h (mi_console_file_new): Add "quote" parameter.
        * mi_console.c (struct mi_console_file): Add "quote".
        (mi_console_file_new): Add "quote" parameter.
        (mi_console_raw_packet): Use the quote character specified in
        mi_console_file_new, instead of assuming it is '"'.

        * mi-interp.c (mi_event_channel): New channel for event notifications.
        (mi_interpreter_init): Make static.
        Set event handlers.
        (mi_interpreter_resume): Make static.
        Deal with MI version bump.
        (mi_interpreter_suspend): Make static.
        (mi_interpreter_delete): Ditto.
        (mi_do_one_event): Ditto.
        (mi_cmd_exec_continuation): Ditto.
        (mi_interp_query_hook): Ditto.
        (mi_interp_read_one_line_hook): Ditto.
        (_initialize_mi_interp): Create explicit mi1 interp.

        * mi-events.c (notify_event): New helper function.
        (mi_create_breakpoint, mi_modify_breakpoint, mi_delete_breakpoint,
        mi_create_tracepoint, mi_modify_tracepoint, mi_delete_tracepoint,
        mi_architecture_changed): New functions.

        * mi.h: Add declarations for mi_create_breakpoint, mi_modify_breakpoint,
        mi_delete_breakpoint, mi_create_tracepoint, mi_modify_tracepoint,
        mi_delete_tracepoint, mi_architecture_changed, mi_stdout, mi_stderr,
        mi_stdtarg, mi_stdlog, and mi_eventchannel.

        * mi-main.c (captured_mi_execute_command): Deal with mi version
        bump.
        (mi_load_progress): Ditto.

        * gdbmi.texinfo: Expand notify-async-output to include GDB events.
        Update all examples to show breakpoint events and
        remove redundant breakpoint info on "-break-insert" and "-break-watch".
        The event now supplies everything that is needed.
@
text
@d1138 1
a1138 2
	  || gdb_current_interpreter_is_named (GDB_INTERPRETER_MI0)
	  || gdb_current_interpreter_is_named (GDB_INTERPRETER_MI1))
d1202 7
a1208 4
  fputs_unfiltered ("(gdb) \n", raw_stdout);
  gdb_flush (raw_stdout);
  /* print any buffered hook code */
  /* ..... */
d1390 1
a1390 2
      && !gdb_current_interpreter_is_named (GDB_INTERPRETER_MI0)
      && !gdb_current_interpreter_is_named (GDB_INTERPRETER_MI1))
@


1.30.2.3
log
@        * mi-cmds.h (mi_execute_command): Add "extern".
        (mi_error_last_message): New function.
        * mi-main.c (mi_error_last_message): New function.
        * mi-interp.c (mi_event_handlers): New static global.
        (mi_interpreter_init): Don't install mi event handlers here.
        (mi_interpreter_resume): Install mi event handlers here.
        (mi_interpreter_exec): Don't actually switch interpreters.
        Update error messages.
        exec_proc will return <0 if an error occurs.
@
text
@a106 9
/* A helper function which will set mi_error_message to error_last_message. */
void
mi_error_last_message (void)
{
  char *s = error_last_message ();
  xasprintf (&mi_error_message, s);
  xfree (s);
}

@


1.30.2.4
log
@        * mi-main.c (mi_cmd_data_list_register_names): Add "-numbers"
        option.
@
text
@d285 1
a285 1
  int i, numbers;
a293 20
  numbers = 0;

  if (!gdb_current_interpreter_is_named (GDB_INTERPRETER_MI0)
      && !gdb_current_interpreter_is_named (GDB_INTERPRETER_MI1)
      && argc > 0 && *argv[0] == '-')
    {
      if (strncmp (argv[0], "-numbers", strlen (argv[0])) == 0)
	{
	  numbers = 1;
	  --argc;
	  ++argv;
	}
      else
	{
	  xasprintf (&mi_error_message,
		     "mi_cmd_data_list_register_names: invalid option \"%s\"",
		     argv[0]);
	  return MI_CMD_ERROR;
	}
    }
d307 1
a307 11
	    {
	      if (numbers)
		{
		  ui_out_tuple_begin (uiout, NULL);
		  ui_out_field_int (uiout, "number", regnum);
		  ui_out_field_string (uiout, "name", REGISTER_NAME (regnum));
		  ui_out_tuple_end (uiout);
		}
	      else
		ui_out_field_string (uiout, NULL, REGISTER_NAME (regnum));
	    }
d322 1
a322 11
	{
	  if (numbers)
	    {
	      ui_out_tuple_begin (uiout, NULL);
	      ui_out_field_int (uiout, "number", regnum);
	      ui_out_field_string (uiout, "name", "");
	      ui_out_tuple_end (uiout);
	    }
	  else
	    ui_out_field_string (uiout, NULL, "");
	}
d324 1
a324 11
	{
	  if (numbers)
	    {
	      ui_out_tuple_begin (uiout, NULL);
	      ui_out_field_int (uiout, "number", regnum);
	      ui_out_field_string (uiout, NULL, REGISTER_NAME (regnum));
	      ui_out_tuple_end (uiout);
	    }
	  else
	    ui_out_field_string (uiout, NULL, REGISTER_NAME (regnum));
	}
@


1.30.2.5
log
@Merge with kseitz_interps-20020930-merge.
@
text
@d285 1
a285 2
  int i;
  struct cleanup *cleanup;
d294 20
d315 1
a315 1
  cleanup = make_cleanup_ui_out_list_begin_end (uiout, "register-names");
d327 11
a337 1
	    ui_out_field_string (uiout, NULL, REGISTER_NAME (regnum));
a346 1
	  do_cleanups (cleanup);
d352 11
a362 1
	ui_out_field_string (uiout, NULL, "");
d364 11
a374 1
	ui_out_field_string (uiout, NULL, REGISTER_NAME (regnum));
d376 1
a376 1
  do_cleanups (cleanup);
a384 1
  struct cleanup *cleanup;
d394 1
a394 1
  cleanup = make_cleanup_ui_out_list_begin_end (uiout, "changed-registers");
a407 1
	      do_cleanups (cleanup);
a429 1
	      do_cleanups (cleanup);
a438 1
	  do_cleanups (cleanup);
d443 1
a443 1
  do_cleanups (cleanup);
a478 1
  struct cleanup *list_cleanup, *tuple_cleanup;
d504 1
a504 1
  list_cleanup = make_cleanup_ui_out_list_begin_end (uiout, "register-values");
d515 1
a515 1
	  tuple_cleanup = make_cleanup_ui_out_tuple_begin_end (uiout, NULL);
d519 2
a520 5
	    {
	      do_cleanups (list_cleanup);
	      return MI_CMD_ERROR;
	    }
	  do_cleanups (tuple_cleanup);
d534 1
a534 1
	  tuple_cleanup = make_cleanup_ui_out_tuple_begin_end (uiout, NULL);
d538 2
a539 5
	    {
	      do_cleanups (list_cleanup);
	      return MI_CMD_ERROR;
	    }
	  do_cleanups (tuple_cleanup);
a542 1
	  do_cleanups (list_cleanup);
d547 1
a547 1
  do_cleanups (list_cleanup);
@


1.30.2.6
log
@merge from mainline
@
text
@a42 2
#include "frame.h"

d101 6
d190 1
a190 1
    return_command (args, 0);
d194 1
a194 1
    return_command (NULL, 0);
d226 1
a226 1
  interrupt_target_command (args, from_tty);
d255 1
a255 3
  /* RC is enum gdb_rc if it is successful (>=0)
     enum return_reason if not (<0). */
  if ((int) rc < 0 && (enum return_reason) rc == RETURN_ERROR)
a256 2
  else if ((int) rc >= 0 && rc == GDB_RC_FAIL)
    return MI_CMD_ERROR;
a925 1
    struct cleanup *cleanup_list_memory;
d928 1
a928 1
    cleanup_list_memory = make_cleanup_ui_out_list_begin_end (uiout, "memory");
d935 1
a935 3
	struct cleanup *cleanup_tuple;
	struct cleanup *cleanup_list_data;
	cleanup_tuple = make_cleanup_ui_out_tuple_begin_end (uiout, NULL);
d938 1
a938 1
	cleanup_list_data = make_cleanup_ui_out_list_begin_end (uiout, "data");
d955 1
a955 1
	do_cleanups (cleanup_list_data);
d975 1
a975 1
	do_cleanups (cleanup_tuple);
d978 1
a978 1
    do_cleanups (cleanup_list_memory);
a1431 1
      struct cleanup *cleanup_tuple;
d1438 1
a1438 1
      cleanup_tuple = make_cleanup_ui_out_tuple_begin_end (uiout, NULL);
d1442 1
a1442 1
      do_cleanups (cleanup_tuple);
a1450 1
      struct cleanup *cleanup_tuple;
d1456 1
a1456 1
      cleanup_tuple = make_cleanup_ui_out_tuple_begin_end (uiout, NULL);
d1462 1
a1462 1
      do_cleanups (cleanup_tuple);
d1469 2
a1470 71
static void
mi_command_loop (int mi_version)
{
  /* HACK: Force stdout/stderr to point at the console.  This avoids
     any potential side effects caused by legacy code that is still
     using the TUI / fputs_unfiltered_hook */
  raw_stdout = stdio_fileopen (stdout);
  /* Route normal output through the MIx */
  gdb_stdout = mi_console_file_new (raw_stdout, "~");
  /* Route error and log output through the MI */
  gdb_stderr = mi_console_file_new (raw_stdout, "&");
  gdb_stdlog = gdb_stderr;
  /* Route target output through the MI. */
  gdb_stdtarg = mi_console_file_new (raw_stdout, "@@");

  /* HACK: Poke the ui_out table directly.  Should we be creating a
     mi_out object wired up to the above gdb_stdout / gdb_stderr? */
  uiout = mi_out_new (mi_version);

  /* HACK: Override any other interpreter hooks.  We need to create a
     real event table and pass in that. */
  init_ui_hook = 0;
  /* command_loop_hook = 0; */
  print_frame_info_listing_hook = 0;
  query_hook = 0;
  warning_hook = 0;
  create_breakpoint_hook = 0;
  delete_breakpoint_hook = 0;
  modify_breakpoint_hook = 0;
  interactive_hook = 0;
  registers_changed_hook = 0;
  readline_begin_hook = 0;
  readline_hook = 0;
  readline_end_hook = 0;
  register_changed_hook = 0;
  memory_changed_hook = 0;
  context_hook = 0;
  target_wait_hook = 0;
  call_command_hook = 0;
  error_hook = 0;
  error_begin_hook = 0;
  show_load_progress = mi_load_progress;

  /* Turn off 8 bit strings in quoted output.  Any character with the
     high bit set is printed using C's octal format. */
  sevenbit_strings = 1;

  /* Tell the world that we're alive */
  fputs_unfiltered ("(gdb) \n", raw_stdout);
  gdb_flush (raw_stdout);

  if (!event_loop_p)
    simplified_command_loop (mi_input, mi_execute_command);
  else
    start_event_loop ();
}

static void
mi1_command_loop (void)
{
  mi_command_loop (1);
}

static void
mi2_command_loop (void)
{
  mi_command_loop (2);
}

static void
setup_architecture_data (void)
a1479 15
  if (interpreter_p == NULL)
    return;

  /* If we're _the_ interpreter, take control. */
  if (strcmp (interpreter_p, "mi") == 0)
    command_loop_hook = mi2_command_loop;
  else if (strcmp (interpreter_p, "mi1") == 0)
    command_loop_hook = mi1_command_loop;
  else if (strcmp (interpreter_p, "mi2") == 0)
    command_loop_hook = mi2_command_loop;
  else
    return;

  init_ui_hook = mi_init_ui;
  setup_architecture_data ();
@


1.30.2.7
log
@2002-11-04  Elena Zannoni  <ezannoni@@redhat.com>

	* interps.h (GDB_INTERPRETER_MI2): Define.
	(GDB_INTERPRETER_MI0): Remove.

2002-11-04  Elena Zannoni  <ezannoni@@redhat.com>

	* mi-interp.c: Increment mi version numbers: 0->1, 1->2,
	and 2->3. Remove MI0 references.
	* mi-events.c: Ditto.
	* mi-main.c: Ditto. Remove erroneously merged code.
	* mi.h: Ditto.
@
text
@d1164 2
a1165 2
	  || gdb_current_interpreter_is_named (GDB_INTERPRETER_MI1)
	  || gdb_current_interpreter_is_named (GDB_INTERPRETER_MI2))
d1414 2
a1415 2
      && !gdb_current_interpreter_is_named (GDB_INTERPRETER_MI1)
      && !gdb_current_interpreter_is_named (GDB_INTERPRETER_MI2))
d1474 71
a1544 2
void
mi_setup_architecture_data (void)
d1554 15
@


1.30.2.8
log
@2002-11-04  Elena Zannoni  <ezannoni@@redhat.com>

	* cli/cli-interp.c (_initialize_cli_interp): Call
	gdb_interpreter_new and gdb_interpreter_add.
	* top.c (gdb_init): Call gdb_interpreter_lookup.
	(gdb_init): Call gdb_interpreter_set.
	* interps.c (gdb_interpreter_new): Renamed from
	gdb_new_interpreter.
	(gdb_interpreter_add): Renamed from gdb_add_interpreter.
	(gdb_interpreter_set): Renamed from gdb_set_interpreter.
	(gdb_interpreter_lookup): Renamed from gdb_lookup_interpreter.
	(gdb_interpreter_current): Renamed from gdb_current_interpreter.
	Update all callers.
	* interps.h: Ditto.

2002-11-04  Elena Zannoni  <ezannoni@@redhat.com>

	* mi-interp.c (mi_interpreter_resume): Ditto.
	(mi_cmd_interpreter_exec): Use gdb_interpreter_lookup.
	(_initialize_mi_interp): Use gdb_interpreter_new,
	gdb_interpreter_add.
	* mi-cmd-break.c (mi_cmd_break_insert): Use
	gdb_interpreter_current_is_named_p.
	(mi_cmd_break_watch): Ditto.
	* mi-events.c (mi_interp_stack_changed_hook): Ditto.
	(event_notify): Ditto.
	* mi-main.c (captured_mi_execute_command): Use
	gdb_interpreter_current_is_named_p.
	(mi_load_progress): Ditto.
@
text
@d1163 3
a1165 3
      if (gdb_interpreter_current_is_named_p (GDB_INTERPRETER_MI)
	  || gdb_interpreter_current_is_named_p (GDB_INTERPRETER_MI2)
	  || gdb_interpreter_current_is_named_p (GDB_INTERPRETER_MI1))
d1413 3
a1415 3
  if (!gdb_interpreter_current_is_named_p (GDB_INTERPRETER_MI)
      && !gdb_interpreter_current_is_named_p (GDB_INTERPRETER_MI2)
      && !gdb_interpreter_current_is_named_p (GDB_INTERPRETER_MI1))
@


1.29
log
@* frame.h (selected_frame_level): Document as deprecated.
(frame_relative_level): Declare.
* stack.c (frame_relative_level): New function.
(selected_frame_level): Document as deprecated.
(select_frame): Do not set the selected_frame_level.

* stack.c (frame_info, record_selected_frame): Update.
(frame_command, current_frame_command): Update.
(up_silently_base, up_command, down_silently_base): Update.
(down_command): Update.
* inflow.c (kill_command): Update.
* tracepoint.c (finish_tfind_command): Update.
* corelow.c (core_open): Update.
* thread.c (info_threads_command): Update.
(do_captured_thread_select): Update.
* infcmd.c (finish_command): Update.
* breakpoint.c (insert_breakpoints, do_enable_breakpoint): Update.
@
text
@d50 23
d1051 6
a1056 3
/* Execute a command within a safe environment.  Return >0 for
   ok. Return <0 for supress prompt.  Return 0 to have the error
   extracted from error_last_message(). */
d1059 1
a1059 1
captured_mi_execute_command (void *data)
d1061 3
a1063 2
  struct mi_parse *context = data;
  enum mi_cmd_result rc;
d1078 3
a1080 1
      rc = mi_cmd_execute (context);
d1084 1
a1084 1
	  if (rc == MI_CMD_DONE)
d1092 1
a1092 1
	  else if (rc == MI_CMD_ERROR)
d1104 1
a1104 1
	  else if (rc == MI_CMD_CAUGHT_ERROR)
d1107 2
a1108 1
	      return 0;
d1114 6
a1119 3
	/* Don't print the prompt. We are executing the target in
	   synchronous mode. */
	return -1;
d1138 2
d1143 1
d1152 3
d1165 1
a1165 1
      /* FIXME: cagney/1999-11-04: Can this use of catch_errors either
d1167 5
a1171 3
      int rc = catch_errors (captured_mi_execute_command, command, "",
			     RETURN_MASK_ALL);
      if (rc < 0)
d1178 1
a1178 1
      if (rc == 0)
@


1.29.4.1
log
@regbuf
@
text
@a43 1
#include "regbuf.h"
d58 1
a58 1
static struct regbuf *old_regs;
a369 1
  char *old_buffer = alloca (MAX_REGISTER_RAW_SIZE);
d373 3
a375 2
  regbuf_read (old_regs, regnum, old_buffer);
  if (memcmp (old_buffer, raw_buffer, REGISTER_RAW_SIZE (regnum)) == 0)
d378 5
a382 2
  /* Found a changed register.  Update the buffer and return 1.  */
  regbuf_write (old_regs, regnum, raw_buffer);
d1476 3
a1478 1
  old_regs = regbuf_xmalloc (current_gdbarch);
@


1.29.4.2
log
@regbuf->regcache
@
text
@d59 1
a59 1
static struct regcache *old_regs;
d375 1
a375 1
  regcache_read (old_regs, regnum, old_buffer);
d380 1
a380 1
  regcache_write (old_regs, regnum, raw_buffer);
d1474 1
a1474 1
  old_regs = regcache_xmalloc (current_gdbarch);
d1500 1
@


1.29.4.3
log
@merge from trunk
@
text
@a50 23
/* Enumerations of the actions that may result from calling
   captured_mi_execute_command */

enum captured_mi_execute_command_actions
  {
    EXECUTE_COMMAND_DISPLAY_PROMPT,
    EXECUTE_COMMAND_SUPRESS_PROMPT,
    EXECUTE_COMMAND_DISPLAY_ERROR
  };

/* This structure is used to pass information from captured_mi_execute_command
   to mi_execute_command. */
struct captured_mi_execute_command_args
{
  /* This return result of the MI command (output) */
  enum mi_cmd_result rc;

  /* What action to perform when the call is finished (output) */
  enum captured_mi_execute_command_actions action;

  /* The command context to be executed (input) */
  struct mi_parse *command;
};
d1026 3
a1028 6
/* Execute a command within a safe environment.
   Return <0 for error; >=0 for ok.

   args->action will tell mi_execute_command what action
   to perfrom after the given command has executed (display/supress
   prompt, display error). */
d1031 1
a1031 1
captured_mi_execute_command (struct ui_out *uiout, void *data)
d1033 2
a1034 3
  struct captured_mi_execute_command_args *args =
    (struct captured_mi_execute_command_args *) data;
  struct mi_parse *context = args->command;
d1049 1
a1049 3
      args->action = EXECUTE_COMMAND_DISPLAY_PROMPT;
      args->rc = mi_cmd_execute (context);

d1053 1
a1053 1
	  if (args->rc == MI_CMD_DONE)
d1061 1
a1061 1
	  else if (args->rc == MI_CMD_ERROR)
d1073 1
a1073 1
	  else if (args->rc == MI_CMD_CAUGHT_ERROR)
d1076 1
a1076 2
	      args->action = EXECUTE_COMMAND_DISPLAY_ERROR;
	      return 1;
d1082 3
a1084 6
	{
	  /* Don't print the prompt. We are executing the target in
	     synchronous mode. */
	  args->action = EXECUTE_COMMAND_SUPRESS_PROMPT;
	  return 1;
	}
a1102 2
      args->action = EXECUTE_COMMAND_DISPLAY_PROMPT;
      args->rc = MI_CMD_DONE;
a1105 1

a1113 3
  struct captured_mi_execute_command_args args;
  struct ui_out *saved_uiout = uiout;
  int result, rc;
d1124 1
a1124 1
      /* FIXME: cagney/1999-11-04: Can this use of catch_exceptions either
d1126 3
a1128 5
      args.command = command;
      result = catch_exceptions (uiout, captured_mi_execute_command, &args, "",
				 RETURN_MASK_ALL);

      if (args.action == EXECUTE_COMMAND_SUPRESS_PROMPT)
d1135 1
a1135 1
      if (args.action == EXECUTE_COMMAND_DISPLAY_ERROR || result < 0)
@


1.29.4.4
log
@fixes for HEAD->branch merge.
@
text
@d44 1
@


1.28
log
@* defs.h (read_relative_register_raw_bytes): Delete declaration.
* frame.c (frame_register_read): New function.  Return non-zero on
success.
(read_relative_register_raw_bytes_for_frame): Delete.
(read_relative_register_raw_bytes): Delete.
* frame.h (frame_register_read): Declare.
* d30v-tdep.c: Update Copyright.  Use frame_register_read.
* sh-tdep.c: Ditto.
* infcmd.c (do_registers_info): Ditto.
* hppa-tdep.c: Ditto.
* rs6000-tdep.c: Ditto.
* h8500-tdep.c: Ditto.
* mips-tdep.c: Ditto.
* h8300-tdep.c: Ditto.
* z8k-tdep.c: Ditto.
@
text
@d168 1
a168 1
			      selected_frame_level,
@


1.27
log
@* defs.h (XMALLOC): Define.
* gdb-events.sh (XMALLOC): Delete macro.
* gdb-events.c, gdb-events.h: Regenerate.
* gdbarch.sh (XMALLOC): Delete macro.
* gdbarch.c: Regenerate.
* serial.c (XMALLOC): Delete macro.
* ui-file.c (XMALLOC): Ditto.
* ser-unix.h (XMALLOC): Ditto.
* sh-tdep.c (XMALLOC): Ditto.
* ui-out.c (XMALLOC): Ditto.
* utils.c (XMALLOC): Ditto.
* i386-tdep.c (XMALLOC): Ditto.
* gdb-events.c (XMALLOC): Ditto.
* d10v-tdep.c (XMALLOC): Ditto.
* cli-out.c (XMALLOC): Ditto.

* cli-out.c, d10v-tdep.c, gdb-events.c: Update copyright.
* gdb-events.sh, i386-tdep.c, ser-unix.h, serial.c: Ditto.
* ui-file.c, ui-out.c: Ditto.
@
text
@d371 1
a371 1
  if (read_relative_register_raw_bytes (regnum, raw_buffer))
a483 4
  /* read_relative_register_raw_bytes returns a virtual frame pointer
     (FRAME_FP (selected_frame)) if regnum == FP_REGNUM instead
     of the real contents of the register. To get around this,
     use get_saved_register instead. */
@


1.26
log
@Remove else clause to #if UI_OUT.
@
text
@a44 5
/* Convenience macro for allocting typesafe memory. */

#undef XMALLOC
#define XMALLOC(TYPE) (TYPE*) xmalloc (sizeof (TYPE))

@


1.25
log
@s/BIG_ENDIAN/BFD_ENDIAN_BIG/
@
text
@d2 1
a2 1
   Copyright 2000, 2001 Free Software Foundation, Inc.
a83 1
#ifdef UI_OUT
a88 1
#endif
a158 1
#ifdef UI_OUT
a174 1
#endif
a193 1
#ifdef UI_OUT
a211 1
#endif
a246 1
#ifdef UI_OUT
a247 1
#endif
@


1.24
log
@Add ui_out parameter to libgdb functions.
@
text
@d528 1
a528 1
	  register int idx = TARGET_BYTE_ORDER == BIG_ENDIAN ? j
@


1.23
log
@Move libgdb library functions to gdb.h (new file).
Update everything related to this.
@
text
@d233 1
a233 1
    rc = gdb_thread_select (argv[0]);
d254 1
a254 1
    rc = gdb_list_thread_ids ();
@


1.22
log
@* mi-main.c (mi_execute_command): Flush output after ``(gdb)''
prompt.  Bug reported by David Whedon.
(mi_execute_async_cli_command): Ditto.
(mi_exec_async_cli_cmd_continuation): Ditto.
(mi_command_loop): Ditto.
@
text
@d41 1
@


1.21
log
@Fix memory leak and compilation problems using AIX 5 native compiler.
@
text
@d1167 1
a1168 1
  fputs_unfiltered ("(gdb) \n", raw_stdout);
d1299 1
d1341 1
d1469 1
@


1.20
log
@* mi-main.c (mi_cmd_data_evaluate_expression): Replace value_ptr
with `struct value *'.
@
text
@d381 1
a381 1
  char raw_buffer[MAX_REGISTER_RAW_SIZE];
d486 2
a487 2
  char raw_buffer[MAX_REGISTER_RAW_SIZE];
  char virtual_buffer[MAX_REGISTER_VIRTUAL_SIZE];
a553 1
  char *buffer;
d604 3
d610 2
a611 1
	  buffer = (unsigned char *) xmalloc (REGISTER_SIZE);
d615 2
a616 1
	  /* write_register_bytes (REGISTER_BYTE (regnum), buffer, REGISTER_SIZE); */
d980 2
a981 1
  unsigned char *buffer;
d1033 2
a1034 1
  buffer = (unsigned char *) xmalloc (word_size);
d1038 2
@


1.19
log
@Update data-read-memory so that it outputs lists.
@
text
@d662 1
a662 1
  value_ptr val;
@


1.18
log
@For data-list-register-values output a list of register values.
@
text
@d895 1
a895 1
    ui_out_tuple_begin (uiout, "memory");
d905 1
a905 1
	ui_out_tuple_begin (uiout, "data");
d922 1
a922 1
	ui_out_tuple_end (uiout);
d945 1
a945 1
    ui_out_tuple_end (uiout);
@


1.17
log
@Output register-names as a list.
@
text
@d435 1
a435 1
  ui_out_tuple_begin (uiout, "register-values");
d478 1
a478 1
  ui_out_tuple_end (uiout);
@


1.16
log
@data-list-changed-registers outputs a list of registers.
@
text
@d274 1
a274 1
  numregs = NUM_REGS;
d276 1
a276 1
  ui_out_tuple_begin (uiout, "register-names");
d286 3
a288 3
	    continue;

	  ui_out_field_string (uiout, NULL, REGISTER_NAME (regnum));
d296 1
a296 7

      if (regnum >= 0
	  && regnum < numregs
	  && REGISTER_NAME (regnum) != NULL
	  && *REGISTER_NAME (regnum) != '\000')
	ui_out_field_string (uiout, NULL, REGISTER_NAME (regnum));
      else
d301 5
d307 1
a307 1
  ui_out_tuple_end (uiout);
@


1.15
log
@Recognize -i=mi0, -i=mi1 and -i=mi.
@
text
@d326 1
a326 1
  ui_out_tuple_begin (uiout, "changed-registers");
d375 1
a375 1
  ui_out_tuple_end (uiout);
@


1.14
log
@s/ui_out_list/ui_out_tupple/
@
text
@d1354 1
a1354 1
  if (!interpreter_p || strcmp (interpreter_p, "mi") != 0)
d1412 1
a1412 1
mi_command_loop (void)
d1428 1
a1428 1
  uiout = mi_out_new ();
d1468 12
d1497 3
d1501 13
a1513 2
  if (interpreter_p
      && strcmp (interpreter_p, "mi") == 0)
d1515 6
a1520 14
      init_ui_hook = mi_init_ui;
      command_loop_hook = mi_command_loop;
      setup_architecture_data ();
      register_gdbarch_swap (&old_regs, sizeof (old_regs), NULL);
      register_gdbarch_swap (NULL, 0, setup_architecture_data);
      if (event_loop_p)
	{
	  /* These overwrite some of the initialization done in
	     _intialize_event_loop. */
	  call_readline = gdb_readline2;
	  input_handler = mi_execute_command_wrapper;
	  add_file_handler (input_fd, stdin_event_handler, 0);
	  async_command_editing_p = 0;
	}
@


1.13
log
@Fix -Werror problem with mi-main.c.
@
text
@d276 1
a276 1
  ui_out_list_begin (uiout, "register-names");
d308 1
a308 1
  ui_out_list_end (uiout);
d326 1
a326 1
  ui_out_list_begin (uiout, "changed-registers");
d375 1
a375 1
  ui_out_list_end (uiout);
d436 1
a436 1
  ui_out_list_begin (uiout, "register-values");
d447 1
a447 1
	  ui_out_list_begin (uiout, NULL);
d452 1
a452 1
	  ui_out_list_end (uiout);
d466 1
a466 1
	  ui_out_list_begin (uiout, NULL);
d471 1
a471 1
	  ui_out_list_end (uiout);
d479 1
a479 1
  ui_out_list_end (uiout);
d896 1
a896 1
    ui_out_list_begin (uiout, "memory");
d903 1
a903 1
	ui_out_list_begin (uiout, NULL);
d906 1
a906 1
	ui_out_list_begin (uiout, "data");
d923 1
a923 1
	ui_out_list_end (uiout);
d943 1
a943 1
	ui_out_list_end (uiout);
d946 1
a946 1
    ui_out_list_end (uiout);
d1380 1
a1380 1
      ui_out_list_begin (uiout, NULL);
d1384 1
a1384 1
      ui_out_list_end (uiout);
d1398 1
a1398 1
      ui_out_list_begin (uiout, NULL);
d1404 1
a1404 1
      ui_out_list_end (uiout);
@


1.12
log
@* config/pa/xm-hppah.h (malloc): Really delete declaration
(MALLOC_INCOMPATIBLE): Really delete macro.
* cli/cli-cmds.c (apropos_command): Use xcalloc.
@
text
@d1275 1
@


1.11
log
@Eliminate ARCH_NUM_REGS.
@
text
@d862 1
a862 1
  mbuf = calloc (total_bytes, 1);
@


1.10
log
@Create new file regcache.h.  Update all uses.
@
text
@d274 1
a274 1
  numregs = ARCH_NUM_REGS;
d324 1
a324 1
  numregs = ARCH_NUM_REGS;
d418 1
a418 1
  numregs = ARCH_NUM_REGS;
d565 1
a565 1
  numregs = ARCH_NUM_REGS;
@


1.9
log
@Replace free() with xfree().
@
text
@d2 1
a2 1
   Copyright (C) 2000, Free Software Foundation, Inc.
d40 1
@


1.8
log
@Replace asprintf() / vasprintf() with xasprintf() xvasprintf().
@
text
@d207 1
a207 1
  free (last_async_command);
d210 1
a210 1
  free (previous_async_command);
d700 1
a700 1
  old_cleanups = make_cleanup (free, run);
d715 1
a715 1
  old_cleanups = make_cleanup (free, run);
d862 1
a862 1
  make_cleanup (free, mbuf);
d1078 1
a1078 1
		  free (mi_error_message);
d1148 1
a1148 1
	  struct cleanup *cleanup = make_cleanup (free, msg);
d1251 1
a1251 1
      old_cleanups = make_cleanup (free, run);
d1278 1
a1278 1
      old_cleanups = make_cleanup (free, run);
d1372 1
a1372 1
      free (previous_sect_name);
@


1.7
log
@Protoization.
@
text
@d199 2
a200 1
      asprintf (&mi_error_message, "mi_cmd_exec_interrupt: Inferior not executing.");
d226 2
a227 2
      asprintf (&mi_error_message,
		"mi_cmd_thread_select: USAGE: threadnum.");
d246 2
a247 2
      asprintf (&mi_error_message,
		"mi_cmd_thread_list_ids: No arguments required.");
d303 1
a303 1
	  asprintf (&mi_error_message, "bad register number");
d339 2
a340 2
	      asprintf (&mi_error_message,
			"mi_cmd_data_list_changed_registers: Unable to read register contents.");
d361 2
a362 2
	      asprintf (&mi_error_message,
			"mi_cmd_data_list_register_change: Unable to read register contents.");
d370 1
a370 1
	  asprintf (&mi_error_message, "bad register number");
d421 2
a422 2
      asprintf (&mi_error_message,
		"mi_cmd_data_list_register_values: Usage: -data-list-register-values <format> [<regnum1>...<regnumN>]");
d430 2
a431 1
      asprintf (&mi_error_message, "mi_cmd_data_list_register_values: No registers.");
d474 1
a474 1
	  asprintf (&mi_error_message, "bad register number");
d504 1
a504 1
      asprintf (&mi_error_message, "Optimized out");
d568 2
a569 2
      asprintf (&mi_error_message,
		"mi_cmd_data_write_register_values: Usage: -data-write-register-values <format> [<regnum1> <value1>...<regnumN> <valueN>]");
d577 2
a578 1
      asprintf (&mi_error_message, "mi_cmd_data_write_register_values: No registers.");
d584 2
a585 1
      asprintf (&mi_error_message, "mi_cmd_data_write_register_values: No regs and values specified.");
d591 2
a592 1
      asprintf (&mi_error_message, "mi_cmd_data_write_register_values: Regs and vals are not in pairs.");
d616 1
a616 1
	  asprintf (&mi_error_message, "bad register number");
d638 2
a639 2
      asprintf (&mi_error_message,
		"mi_cmd_data_assign: Usage: -data-assign expression");
d669 2
a670 2
      asprintf (&mi_error_message,
		"mi_cmd_data_evaluate_expression: Usage: -data-evaluate-expression expression");
d699 1
a699 3
  asprintf (&run, "load %s", args);
  if (run == 0)
    internal_error ("mi_cmd_target_download: no memory");
d714 1
a714 3
  asprintf (&run, "target %s", args);
  if (run == 0)
    internal_error ("mi_cmd_target_select: no memory");
d802 2
a803 2
      asprintf (&mi_error_message,
		"mi_cmd_data_read_memory: Usage: ADDR WORD-FORMAT WORD-SIZE NR-ROWS NR-COLS [ASCHAR].");
d842 2
a843 2
      asprintf (&mi_error_message,
		"mi_cmd_data_read_memory: invalid number of rows.");
d850 2
a851 2
      asprintf (&mi_error_message,
		"mi_cmd_data_read_memory: invalid number of columns.");
d865 2
a866 2
      asprintf (&mi_error_message,
		"mi_cmd_data_read_memory: out of memory.");
d1008 2
a1009 2
      asprintf (&mi_error_message,
		"mi_cmd_data_write_memory: Usage: [-o COLUMN_OFFSET] ADDR FORMAT WORD-SIZE VALUE.");
d1246 1
a1246 1
      asprintf (&run, cli, args);
a1250 2
      if (run == 0)
	abort ();
d1271 1
a1271 3
      asprintf (&run, "%s %s", mi, async_args);
      if (run == 0)
	internal_error ("mi_execute_async_cli_command: no memory");
d1277 1
a1277 3
      asprintf (&run, "%s %s", mi, args);
      if (run == 0)
	internal_error ("mi_execute_async_cli_command: no memory");
@


1.6
log
@Rename mi/ChangeLog-mi -> mi/ChangeLog
@
text
@d1415 1
a1415 1
mi_command_loop ()
d1471 1
a1471 1
setup_architecture_data ()
d1479 1
a1479 2
mi_init_ui (arg0)
     char *arg0;
d1486 1
a1486 1
_initialize_mi_main ()
@


1.5
log
@Make free_current_contents more robust. Use in MI.
@
text
@a1510 4

/* Local variables: */
/* change-log-default-name: "ChangeLog-mi" */
/* End: */
@


1.4
log
@Cleanup cleanups - delete use of make_cleanup_func as cast.
@
text
@a72 1
static void free_and_reset (char **arg);
d1201 1
a1201 1
      make_exec_cleanup ((make_cleanup_func) free_and_reset, &last_async_command);
a1225 7
}

void
free_and_reset (char **arg)
{
  free (*arg);
  *arg = NULL;
@


1.3
log
@2000-03-06  Elena Zannoni  <ezannoni@@kwikemart.cygnus.com>

	* mi-cmds.h: Export mi_cmd_data_write_register_values.

	* mi-cmds.c (mi_cmds): Implement data-write-register-values with
 	mi_cmd_data_write_register_values.

	* mi-main.c (mi_cmd_data_write_register_values): New
 	function. Write a value into a register.
@
text
@d643 1
a643 1
  old_chain = make_cleanup ((make_cleanup_func) free_current_contents, &expr);
d672 1
a672 1
  old_chain = make_cleanup ((make_cleanup_func) free_current_contents, &expr);
@


1.2
log
@Fix copyright - Cygnus is a Red Hat company.
@
text
@d39 1
d544 75
d1229 1
a1229 1
void 
@


1.1
log
@Add mi/ and testsuite/gdb.mi/ subdirectories.
Add --enable-gdbmi option to configury.
Add mi rules to Makefile.in
Add mi conditional output to event-top.c infrun.c main.c top.c.
Add -i=mi option.
@
text
@d3 1
a3 1
   Contributed by Cygnus Solutions.
@

