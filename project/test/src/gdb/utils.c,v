head	1.310;
access;
symbols
	gdb_7_6_1-2013-08-30-release:1.294.2.1
	gdb_7_6-2013-04-26-release:1.294.2.1
	gdb_7_6-branch:1.294.0.2
	gdb_7_6-2013-03-12-branchpoint:1.294
	gdb_7_5_1-2012-11-29-release:1.280
	gdb_7_5-2012-08-17-release:1.280
	gdb_7_5-branch:1.280.0.2
	gdb_7_5-2012-07-18-branchpoint:1.280
	gdb_7_4_1-2012-04-26-release:1.268.2.1
	gdb_7_4-2012-01-24-release:1.268.2.1
	gdb_7_4-branch:1.268.0.2
	gdb_7_4-2011-12-13-branchpoint:1.268
	gdb_7_3_1-2011-09-04-release:1.250.2.1
	gdb_7_3-2011-07-26-release:1.250.2.1
	gdb_7_3-branch:1.250.0.2
	gdb_7_3-2011-04-01-branchpoint:1.250
	gdb_7_2-2010-09-02-release:1.236.2.2
	gdb_7_2-branch:1.236.0.2
	gdb_7_2-2010-07-07-branchpoint:1.236
	gdb_7_1-2010-03-18-release:1.224
	gdb_7_1-branch:1.224.0.2
	gdb_7_1-2010-02-18-branchpoint:1.224
	gdb_7_0_1-2009-12-22-release:1.219
	gdb_7_0-2009-10-06-release:1.219
	gdb_7_0-branch:1.219.0.2
	gdb_7_0-2009-09-16-branchpoint:1.219
	arc-sim-20090309:1.184
	msnyder-checkpoint-072509-branch:1.215.0.2
	msnyder-checkpoint-072509-branchpoint:1.215
	arc-insight_6_8-branch:1.184.0.6
	arc-insight_6_8-branchpoint:1.184
	insight_6_8-branch:1.184.0.4
	insight_6_8-branchpoint:1.184
	reverse-20081226-branch:1.200.0.4
	reverse-20081226-branchpoint:1.200
	multiprocess-20081120-branch:1.200.0.2
	multiprocess-20081120-branchpoint:1.200
	reverse-20080930-branch:1.195.0.2
	reverse-20080930-branchpoint:1.195
	reverse-20080717-branch:1.193.0.2
	reverse-20080717-branchpoint:1.193
	msnyder-reverse-20080609-branch:1.188.0.2
	msnyder-reverse-20080609-branchpoint:1.188
	drow-reverse-20070409-branch:1.176.0.2
	drow-reverse-20070409-branchpoint:1.176
	gdb_6_8-2008-03-27-release:1.184
	gdb_6_8-branch:1.184.0.2
	gdb_6_8-2008-02-26-branchpoint:1.184
	gdb_6_7_1-2007-10-29-release:1.181
	gdb_6_7-2007-10-10-release:1.181
	gdb_6_7-branch:1.181.0.2
	gdb_6_7-2007-09-07-branchpoint:1.181
	insight_6_6-20070208-release:1.170.2.2
	gdb_6_6-2006-12-18-release:1.170.2.2
	gdb_6_6-branch:1.170.0.2
	gdb_6_6-2006-11-15-branchpoint:1.170
	insight_6_5-20061003-release:1.167
	gdb-csl-symbian-6_4_50_20060226-12:1.166.6.1
	gdb-csl-sourcerygxx-3_4_4-25:1.162
	nickrob-async-20060828-mergepoint:1.168
	gdb-csl-symbian-6_4_50_20060226-11:1.166
	gdb-csl-sourcerygxx-4_1-17:1.166
	gdb-csl-20060226-branch-local-2:1.166
	gdb-csl-sourcerygxx-4_1-14:1.166
	gdb-csl-sourcerygxx-4_1-13:1.166
	gdb-csl-sourcerygxx-4_1-12:1.166
	gdb-csl-sourcerygxx-3_4_4-21:1.166
	gdb_6_5-20060621-release:1.167
	gdb-csl-sourcerygxx-4_1-9:1.166
	gdb-csl-sourcerygxx-4_1-8:1.166
	gdb-csl-sourcerygxx-4_1-7:1.166
	gdb-csl-arm-2006q1-6:1.166
	gdb-csl-sourcerygxx-4_1-6:1.166
	gdb-csl-symbian-6_4_50_20060226-10:1.166
	gdb-csl-symbian-6_4_50_20060226-9:1.166
	gdb-csl-symbian-6_4_50_20060226-8:1.166
	gdb-csl-coldfire-4_1-11:1.166
	gdb-csl-sourcerygxx-3_4_4-19:1.166
	gdb-csl-coldfire-4_1-10:1.166
	gdb_6_5-branch:1.167.0.10
	gdb_6_5-2006-05-14-branchpoint:1.167
	gdb-csl-sourcerygxx-4_1-5:1.166
	nickrob-async-20060513-branch:1.167.0.8
	nickrob-async-20060513-branchpoint:1.167
	gdb-csl-sourcerygxx-4_1-4:1.166
	msnyder-reverse-20060502-branch:1.167.0.6
	msnyder-reverse-20060502-branchpoint:1.167
	gdb-csl-morpho-4_1-4:1.166
	gdb-csl-sourcerygxx-3_4_4-17:1.166
	readline_5_1-import-branch:1.167.0.4
	readline_5_1-import-branchpoint:1.167
	gdb-csl-20060226-branch-merge-to-csl-symbian-1:1.166
	gdb-csl-symbian-20060226-branch:1.166.0.6
	gdb-csl-symbian-20060226-branchpoint:1.166
	gdb-csl-20060226-branch-merge-to-csl-local-1:1.166
	msnyder-reverse-20060331-branch:1.167.0.2
	msnyder-reverse-20060331-branchpoint:1.167
	gdb-csl-available-20060303-branch:1.166.0.4
	gdb-csl-available-20060303-branchpoint:1.166
	gdb-csl-20060226-branch:1.166.0.2
	gdb-csl-20060226-branchpoint:1.166
	gdb_6_4-20051202-release:1.162
	msnyder-fork-checkpoint-branch:1.162.0.8
	msnyder-fork-checkpoint-branchpoint:1.162
	gdb-csl-gxxpro-6_3-branch:1.162.0.6
	gdb-csl-gxxpro-6_3-branchpoint:1.162
	gdb_6_4-branch:1.162.0.4
	gdb_6_4-2005-11-01-branchpoint:1.162
	gdb-csl-arm-20051020-branch:1.162.0.2
	gdb-csl-arm-20051020-branchpoint:1.162
	msnyder-tracepoint-checkpoint-branch:1.160.0.4
	msnyder-tracepoint-checkpoint-branchpoint:1.160
	gdb-csl-arm-20050325-2005-q1b:1.160.2.1
	gdb-csl-arm-20050325-2005-q1a:1.160.2.1
	csl-arm-20050325-branch:1.160.0.2
	csl-arm-20050325-branchpoint:1.160
	gdb-post-i18n-errorwarning-20050211:1.150
	gdb-pre-i18n-errorwarning-20050211:1.149
	gdb_6_3-20041109-release:1.137
	gdb_6_3-branch:1.137.0.2
	gdb_6_3-20041019-branchpoint:1.137
	drow_intercu-merge-20040921:1.136
	drow_intercu-merge-20040915:1.136
	jimb-gdb_6_2-e500-branch:1.123.2.1.0.4
	jimb-gdb_6_2-e500-branchpoint:1.123.2.1
	gdb_6_2-20040730-release:1.123.2.1
	gdb_6_2-branch:1.123.0.2
	gdb_6_2-2004-07-10-gmt-branchpoint:1.123
	gdb_6_1_1-20040616-release:1.118.2.1
	gdb_6_1-2004-04-05-release:1.118
	drow_intercu-merge-20040402:1.119
	drow_intercu-merge-20040327:1.118
	ezannoni_pie-20040323-branch:1.118.0.6
	ezannoni_pie-20040323-branchpoint:1.118
	cagney_tramp-20040321-mergepoint:1.118
	cagney_tramp-20040309-branch:1.118.0.4
	cagney_tramp-20040309-branchpoint:1.118
	gdb_6_1-branch:1.118.0.2
	gdb_6_1-2004-03-01-gmt-branchpoint:1.118
	drow_intercu-20040221-branch:1.116.0.2
	drow_intercu-20040221-branchpoint:1.116
	cagney_bfdfile-20040213-branch:1.115.0.2
	cagney_bfdfile-20040213-branchpoint:1.115
	drow-cplus-merge-20040208:1.114
	carlton_dictionary-20040126-merge:1.114
	cagney_bigcore-20040122-branch:1.114.0.2
	cagney_bigcore-20040122-branchpoint:1.114
	drow-cplus-merge-20040113:1.111
	drow-cplus-merge-20031224:1.110
	drow-cplus-merge-20031220:1.110
	carlton_dictionary-20031215-merge:1.110
	drow-cplus-merge-20031214:1.110
	carlton-dictionary-20031111-merge:1.110
	gdb_6_0-2003-10-04-release:1.101.16.2
	kettenis_sparc-20030918-branch:1.108.0.4
	kettenis_sparc-20030918-branchpoint:1.108
	carlton_dictionary-20030917-merge:1.108
	ezannoni_pie-20030916-branchpoint:1.108
	ezannoni_pie-20030916-branch:1.108.0.2
	cagney_x86i386-20030821-branch:1.105.0.2
	cagney_x86i386-20030821-branchpoint:1.105
	carlton_dictionary-20030805-merge:1.104
	carlton_dictionary-20030627-merge:1.102
	gdb_6_0-branch:1.101.0.16
	gdb_6_0-2003-06-23-branchpoint:1.101
	jimb-ppc64-linux-20030613-branch:1.101.0.14
	jimb-ppc64-linux-20030613-branchpoint:1.101
	cagney_convert-20030606-branch:1.101.0.12
	cagney_convert-20030606-branchpoint:1.101
	cagney_writestrings-20030508-branch:1.101.0.10
	cagney_writestrings-20030508-branchpoint:1.101
	jimb-ppc64-linux-20030528-branch:1.101.0.8
	jimb-ppc64-linux-20030528-branchpoint:1.101
	carlton_dictionary-20030523-merge:1.101
	cagney_fileio-20030521-branch:1.101.0.6
	cagney_fileio-20030521-branchpoint:1.101
	kettenis_i386newframe-20030517-mergepoint:1.101
	jimb-ppc64-linux-20030509-branch:1.101.0.4
	jimb-ppc64-linux-20030509-branchpoint:1.101
	kettenis_i386newframe-20030504-mergepoint:1.101
	carlton_dictionary-20030430-merge:1.101
	kettenis_i386newframe-20030419-branch:1.101.0.2
	kettenis_i386newframe-20030419-branchpoint:1.101
	carlton_dictionary-20030416-merge:1.101
	cagney_frameaddr-20030409-mergepoint:1.100
	kettenis_i386newframe-20030406-branch:1.99.0.4
	kettenis_i386newframe-20030406-branchpoint:1.99
	cagney_frameaddr-20030403-branchpoint:1.99
	cagney_frameaddr-20030403-branch:1.99.0.2
	cagney_framebase-20030330-mergepoint:1.98
	cagney_framebase-20030326-branch:1.98.0.10
	cagney_framebase-20030326-branchpoint:1.98
	cagney_lazyid-20030317-branch:1.98.0.8
	cagney_lazyid-20030317-branchpoint:1.98
	kettenis-i386newframe-20030316-mergepoint:1.98
	offbyone-20030313-branch:1.98.0.6
	offbyone-20030313-branchpoint:1.98
	kettenis-i386newframe-20030308-branch:1.98.0.4
	kettenis-i386newframe-20030308-branchpoint:1.98
	carlton_dictionary-20030305-merge:1.98
	cagney_offbyone-20030303-branch:1.98.0.2
	cagney_offbyone-20030303-branchpoint:1.98
	carlton_dictionary-20030207-merge:1.96
	interps-20030203-mergepoint:1.93
	interps-20030202-branch:1.93.0.2
	interps-20030202-branchpoint:1.93
	cagney-unwind-20030108-branch:1.88.0.2
	cagney-unwind-20030108-branchpoint:1.88
	carlton_dictionary-20021223-merge:1.87
	gdb_5_3-2002-12-12-release:1.76.6.2
	jimb-separate-debug-021125-branch:1.85.0.2
	carlton_dictionary-20021115-merge:1.86
	kseitz_interps-20021105-merge:1.83
	kseitz_interps-20021103-merge:1.83
	drow-cplus-merge-20021020:1.82
	drow-cplus-merge-20021025:1.83
	carlton_dictionary-20021025-merge:1.83
	carlton_dictionary-20021011-merge:1.81
	drow-cplus-branch:1.80.0.4
	drow-cplus-branchpoint:1.80
	kseitz_interps-20020930-merge:1.80
	carlton_dictionary-20020927-merge:1.80
	carlton_dictionary-branch:1.80.0.2
	carlton_dictionary-20020920-branchpoint:1.80
	gdb_5_3-branch:1.76.0.6
	gdb_5_3-2002-09-04-branchpoint:1.76
	kseitz_interps-20020829-merge:1.76
	cagney_sysregs-20020825-branch:1.76.0.4
	cagney_sysregs-20020825-branchpoint:1.76
	readline_4_3-import-branch:1.76.0.2
	readline_4_3-import-branchpoint:1.76
	gdb_5_2_1-2002-07-23-release:1.68.2.1
	kseitz_interps-20020528-branch:1.72.0.6
	kseitz_interps-20020528-branchpoint:1.72
	cagney_regbuf-20020515-branch:1.72.0.4
	cagney_regbuf-20020515-branchpoint:1.72
	jimb-macro-020506-branch:1.72.0.2
	jimb-macro-020506-branchpoint:1.72
	gdb_5_2-2002-04-29-release:1.68.2.1
	gdb_5_2-branch:1.68.0.2
	gdb_5_2-2002-03-03-branchpoint:1.68
	gdb_5_1_1-2002-01-24-release:1.46.2.1
	gdb_5_1_0_1-2002-01-03-release:1.46.2.1
	cygnus_cvs_20020108_pre:1.54
	gdb_5_1_0_1-2002-01-03-branchpoint:1.46.2.1
	gdb_5_1_0_1-2002-01-03-branch:1.46.2.1.0.2
	gdb_5_1-2001-11-21-release:1.46.2.1
	gdb_s390-2001-09-26-branch:1.46.0.4
	gdb_s390-2001-09-26-branchpoint:1.46
	gdb_5_1-2001-07-29-branch:1.46.0.2
	gdb_5_1-2001-07-29-branchpoint:1.46
	dberlin-typesystem-branch:1.41.0.2
	dberlin-typesystem-branchpoint:1.41
	gdb-post-ptid_t-2001-05-03:1.40
	gdb-pre-ptid_t-2001-05-03:1.40
	insight-precleanup-2001-01-01:1.25
	gdb-post-protoization-2000-07-29:1.19
	gdb-pre-protoization-2000-07-29:1.18
	gdb-premipsmulti-2000-06-06-branch:1.17.0.2
	gdb-premipsmulti-2000-06-06-branchpoint:1.17
	gdb-post-params-removal-2000-06-04:1.15
	gdb-pre-params-removal-2000-06-04:1.14
	gdb-post-params-removal-2000-05-28:1.14
	gdb-pre-params-removal-2000-05-28:1.13
	gdb_5_0-2000-05-19-release:1.6.2.1
	gdb_4_18_2-2000-05-18-release:1.6.2.1
	gdb_4_95_1-2000-05-11-snapshot:1.6.2.1
	gdb_4_95_0-2000-04-27-snapshot:1.6.2.1
	gdb_5_0-2000-04-10-branch:1.6.0.2
	gdb_5_0-2000-04-10-branchpoint:1.6
	repo-unification-2000-02-06:1.1.1.26
	insight-2000-02-04:1.1.1.26
	gdb-2000-02-04:1.1.1.26
	gdb-2000-02-02:1.1.1.26
	gdb-2000-02-01:1.1.1.26
	gdb-2000-01-31:1.1.1.25
	gdb-2000-01-26:1.1.1.24
	gdb-2000-01-24:1.1.1.24
	gdb-2000-01-17:1.1.1.23
	gdb-2000-01-10:1.1.1.23
	gdb-2000-01-05:1.1.1.23
	gdb-1999-12-21:1.1.1.23
	gdb-1999-12-13:1.1.1.22
	gdb-1999-12-07:1.1.1.22
	gdb-1999-12-06:1.1.1.22
	gdb-1999-11-16:1.1.1.21
	gdb-1999-11-08:1.1.1.20
	gdb-1999-11-01:1.1.1.19
	gdb-1999-10-25:1.1.1.19
	gdb-1999-10-18:1.1.1.18
	gdb-1999-10-11:1.1.1.17
	gdb-1999-10-04:1.1.1.17
	gdb-1999-09-28:1.1.1.16
	gdb-1999-09-21:1.1.1.15
	gdb-1999-09-13:1.1.1.14
	gdb-1999-09-08:1.1.1.14
	gdb-1999-08-30:1.1.1.13
	gdb-1999-08-23:1.1.1.12
	gdb-1999-08-16:1.1.1.12
	gdb-1999-08-09:1.1.1.11
	gdb-1999-08-02:1.1.1.10
	gdb-1999-07-26:1.1.1.10
	gdb-1999-07-19:1.1.1.10
	gdb-1999-07-12:1.1.1.10
	gdb-post-reformat-19990707:1.1.1.9
	gdb-1999-07-07-post-reformat-snapshot:1.1.1.9
	gdb-pre-reformat-19990707:1.1.1.8
	gdb-1999-07-07:1.1.1.8
	gdb-1999-07-05:1.1.1.7
	gdb-1999-06-28:1.1.1.6
	gdb-1999-06-21:1.1.1.5
	gdb-1999-06-14:1.1.1.5
	gdb-1999-06-07:1.1.1.4
	gdb-1999-06-01:1.1.1.4
	gdb-4_18-branch:1.1.1.1.0.2
	gdb-4_18-release:1.1.1.1
	gdb-1999-05-25:1.1.1.3
	gdb-1999-05-19:1.1.1.2
	gdb-1999-05-10:1.1.1.2
	gdb-19990504:1.1.1.2
	gdb-19990422:1.1.1.2
	SNAPSHOT:1.1.1
	gdb-4_18:1.1.1.1
	GDB_4_18:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.310
date	2013.10.13.16.11.08;	author jkratoch;	state Exp;
branches;
next	1.309;

1.309
date	2013.10.11.08.23.10;	author brobecke;	state Exp;
branches;
next	1.308;

1.308
date	2013.10.11.08.20.10;	author brobecke;	state Exp;
branches;
next	1.307;

1.307
date	2013.10.02.00.46.06;	author kseitz;	state Exp;
branches;
next	1.306;

1.306
date	2013.08.13.08.31.20;	author muller;	state Exp;
branches;
next	1.305;

1.305
date	2013.08.01.09.09.58;	author aburgess;	state Exp;
branches;
next	1.304;

1.304
date	2013.07.31.10.51.42;	author aburgess;	state Exp;
branches;
next	1.303;

1.303
date	2013.07.01.11.28.30;	author palves;	state Exp;
branches;
next	1.302;

1.302
date	2013.07.01.11.15.39;	author palves;	state Exp;
branches;
next	1.301;

1.301
date	2013.06.18.18.11.19;	author tromey;	state Exp;
branches;
next	1.300;

1.300
date	2013.05.30.17.39.34;	author tromey;	state Exp;
branches;
next	1.299;

1.299
date	2013.05.30.17.01.16;	author tromey;	state Exp;
branches;
next	1.298;

1.298
date	2013.04.15.18.13.00;	author tromey;	state Exp;
branches;
next	1.297;

1.297
date	2013.04.10.15.11.11;	author palves;	state Exp;
branches;
next	1.296;

1.296
date	2013.03.22.20.39.28;	author jkratoch;	state Exp;
branches;
next	1.295;

1.295
date	2013.03.21.17.37.29;	author devans;	state Exp;
branches;
next	1.294;

1.294
date	2013.03.07.19.24.32;	author palves;	state Exp;
branches
	1.294.2.1;
next	1.293;

1.293
date	2013.03.07.12.26.05;	author eliz;	state Exp;
branches;
next	1.292;

1.292
date	2013.02.14.17.11.41;	author palves;	state Exp;
branches;
next	1.291;

1.291
date	2013.02.14.17.09.00;	author palves;	state Exp;
branches;
next	1.290;

1.290
date	2013.02.03.15.54.17;	author jkratoch;	state Exp;
branches;
next	1.289;

1.289
date	2013.01.30.20.38.04;	author tromey;	state Exp;
branches;
next	1.288;

1.288
date	2013.01.13.18.57.01;	author jkratoch;	state Exp;
branches;
next	1.287;

1.287
date	2013.01.01.06.41.29;	author brobecke;	state Exp;
branches;
next	1.286;

1.286
date	2012.08.22.17.48.55;	author tromey;	state Exp;
branches;
next	1.285;

1.285
date	2012.08.22.17.31.44;	author tromey;	state Exp;
branches;
next	1.284;

1.284
date	2012.08.08.21.55.01;	author devans;	state Exp;
branches;
next	1.283;

1.283
date	2012.07.18.23.37.58;	author devans;	state Exp;
branches;
next	1.282;

1.282
date	2012.07.18.19.42.26;	author tromey;	state Exp;
branches;
next	1.281;

1.281
date	2012.07.18.19.33.34;	author tromey;	state Exp;
branches;
next	1.280;

1.280
date	2012.07.02.10.57.33;	author jkratoch;	state Exp;
branches;
next	1.279;

1.279
date	2012.05.20.20.35.19;	author jkratoch;	state Exp;
branches;
next	1.278;

1.278
date	2012.05.11.18.13.24;	author jkratoch;	state Exp;
branches;
next	1.277;

1.277
date	2012.04.17.21.13.20;	author devans;	state Exp;
branches;
next	1.276;

1.276
date	2012.04.17.20.48.20;	author devans;	state Exp;
branches;
next	1.275;

1.275
date	2012.04.17.15.47.09;	author jkratoch;	state Exp;
branches;
next	1.274;

1.274
date	2012.02.07.04.48.22;	author devans;	state Exp;
branches;
next	1.273;

1.273
date	2012.01.28.18.08.21;	author jkratoch;	state Exp;
branches;
next	1.272;

1.272
date	2012.01.23.17.12.30;	author palves;	state Exp;
branches;
next	1.271;

1.271
date	2012.01.04.08.27.57;	author brobecke;	state Exp;
branches;
next	1.270;

1.270
date	2011.12.27.04.03.58;	author brobecke;	state Exp;
branches;
next	1.269;

1.269
date	2011.12.14.20.53.57;	author devans;	state Exp;
branches;
next	1.268;

1.268
date	2011.12.06.18.54.39;	author tromey;	state Exp;
branches
	1.268.2.1;
next	1.267;

1.267
date	2011.11.16.18.14.52;	author davem;	state Exp;
branches;
next	1.266;

1.266
date	2011.11.10.20.21.28;	author devans;	state Exp;
branches;
next	1.265;

1.265
date	2011.11.04.16.45.12;	author devans;	state Exp;
branches;
next	1.264;

1.264
date	2011.10.14.07.55.26;	author jkratoch;	state Exp;
branches;
next	1.263;

1.263
date	2011.10.09.22.21.42;	author devans;	state Exp;
branches;
next	1.262;

1.262
date	2011.10.09.19.21.38;	author jkratoch;	state Exp;
branches;
next	1.261;

1.261
date	2011.09.09.19.41.14;	author jkratoch;	state Exp;
branches;
next	1.260;

1.260
date	2011.09.08.15.27.46;	author jkratoch;	state Exp;
branches;
next	1.259;

1.259
date	2011.08.26.21.45.23;	author jkratoch;	state Exp;
branches;
next	1.258;

1.258
date	2011.07.21.23.46.09;	author kcy;	state Exp;
branches;
next	1.257;

1.257
date	2011.05.27.14.00.25;	author palves;	state Exp;
branches;
next	1.256;

1.256
date	2011.05.13.15.44.49;	author tromey;	state Exp;
branches;
next	1.255;

1.255
date	2011.05.13.04.34.20;	author bauermann;	state Exp;
branches;
next	1.254;

1.254
date	2011.04.27.20.03.03;	author jkratoch;	state Exp;
branches;
next	1.253;

1.253
date	2011.04.27.19.52.22;	author jkratoch;	state Exp;
branches;
next	1.252;

1.252
date	2011.04.19.18.04.07;	author tromey;	state Exp;
branches;
next	1.251;

1.251
date	2011.04.01.17.20.42;	author tromey;	state Exp;
branches;
next	1.250;

1.250
date	2011.03.31.14.32.48;	author bauermann;	state Exp;
branches
	1.250.2.1;
next	1.249;

1.249
date	2011.03.05.22.02.47;	author msnyder;	state Exp;
branches;
next	1.248;

1.248
date	2011.03.03.03.51.30;	author brobecke;	state Exp;
branches;
next	1.247;

1.247
date	2011.03.02.22.11.27;	author msnyder;	state Exp;
branches;
next	1.246;

1.246
date	2011.02.28.22.20.05;	author msnyder;	state Exp;
branches;
next	1.245;

1.245
date	2011.01.17.16.50.42;	author tromey;	state Exp;
branches;
next	1.244;

1.244
date	2011.01.12.01.23.28;	author msnyder;	state Exp;
branches;
next	1.243;

1.243
date	2011.01.05.22.22.53;	author msnyder;	state Exp;
branches;
next	1.242;

1.242
date	2011.01.01.15.33.18;	author brobecke;	state Exp;
branches;
next	1.241;

1.241
date	2010.12.18.00.11.46;	author msnyder;	state Exp;
branches;
next	1.240;

1.240
date	2010.09.11.16.00.25;	author jkratoch;	state Exp;
branches;
next	1.239;

1.239
date	2010.08.07.15.00.37;	author jkratoch;	state Exp;
branches;
next	1.238;

1.238
date	2010.07.27.19.11.51;	author jkratoch;	state Exp;
branches;
next	1.237;

1.237
date	2010.07.19.17.51.23;	author jkratoch;	state Exp;
branches;
next	1.236;

1.236
date	2010.06.26.06.44.47;	author hilfingr;	state Exp;
branches
	1.236.2.1;
next	1.235;

1.235
date	2010.05.17.01.15.20;	author msnyder;	state Exp;
branches;
next	1.234;

1.234
date	2010.05.10.20.58.00;	author msnyder;	state Exp;
branches;
next	1.233;

1.233
date	2010.05.10.17.26.36;	author msnyder;	state Exp;
branches;
next	1.232;

1.232
date	2010.05.07.00.47.37;	author msnyder;	state Exp;
branches;
next	1.231;

1.231
date	2010.05.04.21.09.25;	author kettenis;	state Exp;
branches;
next	1.230;

1.230
date	2010.05.02.23.52.14;	author jkratoch;	state Exp;
branches;
next	1.229;

1.229
date	2010.05.02.21.14.59;	author jkratoch;	state Exp;
branches;
next	1.228;

1.228
date	2010.03.08.19.20.38;	author tromey;	state Exp;
branches;
next	1.227;

1.227
date	2010.03.05.20.18.14;	author tromey;	state Exp;
branches;
next	1.226;

1.226
date	2010.03.04.14.58.40;	author palves;	state Exp;
branches;
next	1.225;

1.225
date	2010.03.04.01.06.28;	author palves;	state Exp;
branches;
next	1.224;

1.224
date	2010.02.15.17.35.49;	author jkratoch;	state Exp;
branches;
next	1.223;

1.223
date	2010.02.05.02.22.39;	author teawater;	state Exp;
branches;
next	1.222;

1.222
date	2010.01.15.00.34.37;	author jkratoch;	state Exp;
branches;
next	1.221;

1.221
date	2010.01.12.21.40.24;	author vprus;	state Exp;
branches;
next	1.220;

1.220
date	2010.01.01.07.31.43;	author brobecke;	state Exp;
branches;
next	1.219;

1.219
date	2009.08.18.16.17.16;	author tromey;	state Exp;
branches;
next	1.218;

1.218
date	2009.08.14.00.32.32;	author palves;	state Exp;
branches;
next	1.217;

1.217
date	2009.08.13.22.35.29;	author devans;	state Exp;
branches;
next	1.216;

1.216
date	2009.08.06.08.19.58;	author nickrob;	state Exp;
branches;
next	1.215;

1.215
date	2009.07.21.18.21.02;	author ppluzhnikov;	state Exp;
branches;
next	1.214;

1.214
date	2009.07.21.03.31.18;	author marckhouzam;	state Exp;
branches;
next	1.213;

1.213
date	2009.07.02.17.21.07;	author uweigand;	state Exp;
branches;
next	1.212;

1.212
date	2009.06.17.18.49.36;	author uweigand;	state Exp;
branches;
next	1.211;

1.211
date	2009.05.06.22.54.58;	author brobecke;	state Exp;
branches;
next	1.210;

1.210
date	2009.04.24.22.10.03;	author muller;	state Exp;
branches;
next	1.209;

1.209
date	2009.04.15.20.40.51;	author eliz;	state Exp;
branches;
next	1.208;

1.208
date	2009.03.20.23.04.34;	author tromey;	state Exp;
branches;
next	1.207;

1.207
date	2009.03.19.17.39.31;	author tromey;	state Exp;
branches;
next	1.206;

1.206
date	2009.02.21.16.14.49;	author palves;	state Exp;
branches;
next	1.205;

1.205
date	2009.01.26.16.24.27;	author palves;	state Exp;
branches;
next	1.204;

1.204
date	2009.01.13.12.06.59;	author brobecke;	state Exp;
branches;
next	1.203;

1.203
date	2009.01.07.12.11.07;	author brobecke;	state Exp;
branches;
next	1.202;

1.202
date	2009.01.06.18.31.59;	author jimb;	state Exp;
branches;
next	1.201;

1.201
date	2009.01.03.05.57.53;	author brobecke;	state Exp;
branches;
next	1.200;

1.200
date	2008.11.19.14.45.09;	author palves;	state Exp;
branches
	1.200.2.1;
next	1.199;

1.199
date	2008.11.05.20.23.07;	author palves;	state Exp;
branches;
next	1.198;

1.198
date	2008.10.30.20.33.51;	author tromey;	state Exp;
branches;
next	1.197;

1.197
date	2008.10.28.15.22.13;	author tromey;	state Exp;
branches;
next	1.196;

1.196
date	2008.10.03.16.36.10;	author ppluzhnikov;	state Exp;
branches;
next	1.195;

1.195
date	2008.09.08.21.57.42;	author palves;	state Exp;
branches;
next	1.194;

1.194
date	2008.09.04.22.49.30;	author devans;	state Exp;
branches;
next	1.193;

1.193
date	2008.07.13.11.28.31;	author palves;	state Exp;
branches;
next	1.192;

1.192
date	2008.07.12.19.25.42;	author palves;	state Exp;
branches;
next	1.191;

1.191
date	2008.07.12.19.07.38;	author palves;	state Exp;
branches;
next	1.190;

1.190
date	2008.07.11.11.07.39;	author palves;	state Exp;
branches;
next	1.189;

1.189
date	2008.06.10.09.29.15;	author vprus;	state Exp;
branches;
next	1.188;

1.188
date	2008.05.24.16.32.01;	author cseo;	state Exp;
branches;
next	1.187;

1.187
date	2008.04.24.11.13.44;	author vprus;	state Exp;
branches;
next	1.186;

1.186
date	2008.03.14.19.55.51;	author vprus;	state Exp;
branches;
next	1.185;

1.185
date	2008.02.27.20.50.49;	author drow;	state Exp;
branches;
next	1.184;

1.184
date	2008.01.01.22.53.13;	author drow;	state Exp;
branches;
next	1.183;

1.183
date	2007.12.17.17.49.29;	author macro;	state Exp;
branches;
next	1.182;

1.182
date	2007.11.15.06.24.17;	author vprus;	state Exp;
branches;
next	1.181;

1.181
date	2007.08.23.18.08.46;	author brobecke;	state Exp;
branches;
next	1.180;

1.180
date	2007.06.13.17.59.50;	author uweigand;	state Exp;
branches;
next	1.179;

1.179
date	2007.06.13.17.08.34;	author drow;	state Exp;
branches;
next	1.178;

1.178
date	2007.06.06.15.23.06;	author uweigand;	state Exp;
branches;
next	1.177;

1.177
date	2007.06.04.12.34.11;	author drow;	state Exp;
branches;
next	1.176;

1.176
date	2007.03.30.09.31.31;	author macro;	state Exp;
branches;
next	1.175;

1.175
date	2007.03.22.09.58.53;	author denis;	state Exp;
branches;
next	1.174;

1.174
date	2007.02.08.16.18.56;	author fnf;	state Exp;
branches;
next	1.173;

1.173
date	2007.01.09.17.58.59;	author drow;	state Exp;
branches;
next	1.172;

1.172
date	2006.12.06.16.49.57;	author ams;	state Exp;
branches;
next	1.171;

1.171
date	2006.11.17.19.30.41;	author drow;	state Exp;
branches;
next	1.170;

1.170
date	2006.10.18.22.16.52;	author drow;	state Exp;
branches
	1.170.2.1;
next	1.169;

1.169
date	2006.09.21.13.50.51;	author drow;	state Exp;
branches;
next	1.168;

1.168
date	2006.07.12.18.50.18;	author drow;	state Exp;
branches;
next	1.167;

1.167
date	2006.03.29.22.53.33;	author drow;	state Exp;
branches
	1.167.8.1;
next	1.166;

1.166
date	2006.02.10.21.53.51;	author drow;	state Exp;
branches
	1.166.6.1;
next	1.165;

1.165
date	2006.02.02.02.26.48;	author drow;	state Exp;
branches;
next	1.164;

1.164
date	2006.02.01.23.14.10;	author drow;	state Exp;
branches;
next	1.163;

1.163
date	2005.12.17.22.34.03;	author eliz;	state Exp;
branches;
next	1.162;

1.162
date	2005.07.31.20.56.26;	author drow;	state Exp;
branches;
next	1.161;

1.161
date	2005.07.04.13.29.13;	author kettenis;	state Exp;
branches;
next	1.160;

1.160
date	2005.03.18.20.46.38;	author kettenis;	state Exp;
branches
	1.160.2.1;
next	1.159;

1.159
date	2005.03.17.22.11.09;	author kettenis;	state Exp;
branches;
next	1.158;

1.158
date	2005.03.16.15.58.41;	author mmitchel;	state Exp;
branches;
next	1.157;

1.157
date	2005.02.24.13.51.35;	author cagney;	state Exp;
branches;
next	1.156;

1.156
date	2005.02.18.19.49.52;	author cagney;	state Exp;
branches;
next	1.155;

1.155
date	2005.02.18.15.25.29;	author cagney;	state Exp;
branches;
next	1.154;

1.154
date	2005.02.15.15.49.23;	author cagney;	state Exp;
branches;
next	1.153;

1.153
date	2005.02.14.14.37.38;	author cagney;	state Exp;
branches;
next	1.152;

1.152
date	2005.02.12.00.39.21;	author cagney;	state Exp;
branches;
next	1.151;

1.151
date	2005.02.11.18.13.54;	author cagney;	state Exp;
branches;
next	1.150;

1.150
date	2005.02.11.04.06.08;	author cagney;	state Exp;
branches;
next	1.149;

1.149
date	2005.02.06.16.22.14;	author cagney;	state Exp;
branches;
next	1.148;

1.148
date	2005.01.21.13.14.01;	author kettenis;	state Exp;
branches;
next	1.147;

1.147
date	2005.01.19.22.54.56;	author cagney;	state Exp;
branches;
next	1.146;

1.146
date	2005.01.19.21.15.44;	author cagney;	state Exp;
branches;
next	1.145;

1.145
date	2005.01.14.21.34.36;	author cagney;	state Exp;
branches;
next	1.144;

1.144
date	2005.01.14.20.24.20;	author cagney;	state Exp;
branches;
next	1.143;

1.143
date	2005.01.14.04.01.37;	author msnyder;	state Exp;
branches;
next	1.142;

1.142
date	2005.01.14.01.20.36;	author cagney;	state Exp;
branches;
next	1.141;

1.141
date	2005.01.13.00.12.50;	author cagney;	state Exp;
branches;
next	1.140;

1.140
date	2005.01.12.18.31.34;	author cagney;	state Exp;
branches;
next	1.139;

1.139
date	2004.11.09.00.59.03;	author danglin;	state Exp;
branches;
next	1.138;

1.138
date	2004.11.05.20.32.04;	author jjohnstn;	state Exp;
branches;
next	1.137;

1.137
date	2004.09.30.19.57.54;	author kettenis;	state Exp;
branches;
next	1.136;

1.136
date	2004.09.13.18.26.31;	author cagney;	state Exp;
branches;
next	1.135;

1.135
date	2004.09.11.15.04.16;	author cagney;	state Exp;
branches;
next	1.134;

1.134
date	2004.09.11.10.24.51;	author hilfingr;	state Exp;
branches;
next	1.133;

1.133
date	2004.09.08.21.58.19;	author jimb;	state Exp;
branches;
next	1.132;

1.132
date	2004.09.07.21.55.11;	author cagney;	state Exp;
branches;
next	1.131;

1.131
date	2004.08.10.22.36.39;	author cagney;	state Exp;
branches;
next	1.130;

1.130
date	2004.08.10.21.52.05;	author cagney;	state Exp;
branches;
next	1.129;

1.129
date	2004.08.10.21.16.13;	author cagney;	state Exp;
branches;
next	1.128;

1.128
date	2004.08.10.20.03.32;	author cagney;	state Exp;
branches;
next	1.127;

1.127
date	2004.08.10.19.37.47;	author cagney;	state Exp;
branches;
next	1.126;

1.126
date	2004.07.26.14.53.05;	author cagney;	state Exp;
branches;
next	1.125;

1.125
date	2004.07.17.14.42.01;	author cagney;	state Exp;
branches;
next	1.124;

1.124
date	2004.07.14.16.47.46;	author cagney;	state Exp;
branches;
next	1.123;

1.123
date	2004.06.29.14.57.39;	author cagney;	state Exp;
branches
	1.123.2.1;
next	1.122;

1.122
date	2004.06.28.23.59.28;	author cagney;	state Exp;
branches;
next	1.121;

1.121
date	2004.05.11.19.19.34;	author nickrob;	state Exp;
branches;
next	1.120;

1.120
date	2004.04.21.23.52.21;	author cagney;	state Exp;
branches;
next	1.119;

1.119
date	2004.03.30.15.44.16;	author jimb;	state Exp;
branches;
next	1.118;

1.118
date	2004.02.28.18.04.37;	author cagney;	state Exp;
branches
	1.118.2.1;
next	1.117;

1.117
date	2004.02.23.19.26.14;	author jjohnstn;	state Exp;
branches;
next	1.116;

1.116
date	2004.02.19.16.48.43;	author ezannoni;	state Exp;
branches
	1.116.2.1;
next	1.115;

1.115
date	2004.02.10.19.08.13;	author cagney;	state Exp;
branches;
next	1.114;

1.114
date	2004.01.21.18.46.22;	author eliz;	state Exp;
branches;
next	1.113;

1.113
date	2004.01.20.09.29.16;	author chastain;	state Exp;
branches;
next	1.112;

1.112
date	2004.01.20.02.04.19;	author jjohnstn;	state Exp;
branches;
next	1.111;

1.111
date	2004.01.02.17.35.01;	author cagney;	state Exp;
branches;
next	1.110;

1.110
date	2003.09.21.01.26.45;	author cagney;	state Exp;
branches;
next	1.109;

1.109
date	2003.09.19.16.22.39;	author cagney;	state Exp;
branches;
next	1.108;

1.108
date	2003.09.16.18.56.35;	author cagney;	state Exp;
branches;
next	1.107;

1.107
date	2003.09.14.16.32.14;	author cagney;	state Exp;
branches;
next	1.106;

1.106
date	2003.08.22.20.23.15;	author kettenis;	state Exp;
branches;
next	1.105;

1.105
date	2003.08.09.14.57.30;	author cagney;	state Exp;
branches;
next	1.104;

1.104
date	2003.08.04.17.08.23;	author carlton;	state Exp;
branches;
next	1.103;

1.103
date	2003.06.30.21.40.05;	author schwab;	state Exp;
branches;
next	1.102;

1.102
date	2003.06.26.17.25.25;	author cagney;	state Exp;
branches;
next	1.101;

1.101
date	2003.04.16.14.43.03;	author cagney;	state Exp;
branches
	1.101.10.1
	1.101.16.1;
next	1.100;

1.100
date	2003.04.10.02.18.40;	author cagney;	state Exp;
branches;
next	1.99;

1.99
date	2003.04.02.03.02.46;	author fedor;	state Exp;
branches
	1.99.2.1;
next	1.98;

1.98
date	2003.02.26.14.35.19;	author drow;	state Exp;
branches;
next	1.97;

1.97
date	2003.02.24.23.37.02;	author carlton;	state Exp;
branches;
next	1.96;

1.96
date	2003.02.07.00.27.30;	author cagney;	state Exp;
branches;
next	1.95;

1.95
date	2003.02.04.23.59.26;	author cagney;	state Exp;
branches;
next	1.94;

1.94
date	2003.02.04.18.07.01;	author drow;	state Exp;
branches;
next	1.93;

1.93
date	2003.02.01.23.34.05;	author cagney;	state Exp;
branches;
next	1.92;

1.92
date	2003.01.31.23.22.07;	author cagney;	state Exp;
branches;
next	1.91;

1.91
date	2003.01.31.22.45.22;	author cagney;	state Exp;
branches;
next	1.90;

1.90
date	2003.01.23.23.03.32;	author jimb;	state Exp;
branches;
next	1.89;

1.89
date	2003.01.14.00.49.04;	author cagney;	state Exp;
branches;
next	1.88;

1.88
date	2003.01.02.14.27.27;	author cagney;	state Exp;
branches;
next	1.87;

1.87
date	2002.11.30.16.33.55;	author cagney;	state Exp;
branches;
next	1.86;

1.86
date	2002.11.14.00.50.04;	author cagney;	state Exp;
branches;
next	1.85;

1.85
date	2002.11.12.20.26.05;	author cagney;	state Exp;
branches
	1.85.2.1;
next	1.84;

1.84
date	2002.11.12.17.19.06;	author cagney;	state Exp;
branches;
next	1.83;

1.83
date	2002.10.24.23.46.09;	author hunt;	state Exp;
branches;
next	1.82;

1.82
date	2002.10.15.02.16.51;	author fedor;	state Exp;
branches;
next	1.81;

1.81
date	2002.10.11.17.50.10;	author hunt;	state Exp;
branches;
next	1.80;

1.80
date	2002.09.20.00.24.01;	author kevinb;	state Exp;
branches
	1.80.2.1
	1.80.4.1;
next	1.79;

1.79
date	2002.09.19.03.58.41;	author cagney;	state Exp;
branches;
next	1.78;

1.78
date	2002.09.19.01.34.51;	author msnyder;	state Exp;
branches;
next	1.77;

1.77
date	2002.09.18.23.53.51;	author cagney;	state Exp;
branches;
next	1.76;

1.76
date	2002.08.01.17.18.33;	author cagney;	state Exp;
branches
	1.76.6.1;
next	1.75;

1.75
date	2002.07.31.17.01.01;	author kevinb;	state Exp;
branches;
next	1.74;

1.74
date	2002.07.27.02.03.45;	author kevinb;	state Exp;
branches;
next	1.73;

1.73
date	2002.07.24.17.58.46;	author tromey;	state Exp;
branches;
next	1.72;

1.72
date	2002.04.05.16.39.11;	author brobecke;	state Exp;
branches
	1.72.6.1;
next	1.71;

1.71
date	2002.03.28.03.43.37;	author cagney;	state Exp;
branches;
next	1.70;

1.70
date	2002.03.19.02.51.07;	author cagney;	state Exp;
branches;
next	1.69;

1.69
date	2002.03.15.00.44.49;	author rth;	state Exp;
branches;
next	1.68;

1.68
date	2002.03.01.06.19.24;	author cagney;	state Exp;
branches
	1.68.2.1;
next	1.67;

1.67
date	2002.02.27.12.29.43;	author rdbrown;	state Exp;
branches;
next	1.66;

1.66
date	2002.02.26.03.29.55;	author cagney;	state Exp;
branches;
next	1.65;

1.65
date	2002.02.23.21.54.25;	author cagney;	state Exp;
branches;
next	1.64;

1.64
date	2002.02.13.06.06.26;	author kseitz;	state Exp;
branches;
next	1.63;

1.63
date	2002.02.10.04.08.42;	author cagney;	state Exp;
branches;
next	1.62;

1.62
date	2002.02.08.15.54.30;	author drow;	state Exp;
branches;
next	1.61;

1.61
date	2002.02.05.04.37.22;	author cagney;	state Exp;
branches;
next	1.60;

1.60
date	2002.02.02.15.39.33;	author cagney;	state Exp;
branches;
next	1.59;

1.59
date	2002.02.02.03.42.59;	author cagney;	state Exp;
branches;
next	1.58;

1.58
date	2002.01.31.04.10.51;	author cagney;	state Exp;
branches;
next	1.57;

1.57
date	2002.01.20.04.23.27;	author cagney;	state Exp;
branches;
next	1.56;

1.56
date	2002.01.20.00.44.47;	author cagney;	state Exp;
branches;
next	1.55;

1.55
date	2002.01.17.23.33.38;	author cagney;	state Exp;
branches;
next	1.54;

1.54
date	2002.01.05.05.54.30;	author cagney;	state Exp;
branches;
next	1.53;

1.53
date	2001.12.21.22.32.37;	author tromey;	state Exp;
branches;
next	1.52;

1.52
date	2001.12.06.20.59.11;	author cagney;	state Exp;
branches;
next	1.51;

1.51
date	2001.11.15.18.35.05;	author cagney;	state Exp;
branches;
next	1.50;

1.50
date	2001.11.15.18.24.17;	author cagney;	state Exp;
branches;
next	1.49;

1.49
date	2001.11.02.21.46.52;	author cagney;	state Exp;
branches;
next	1.48;

1.48
date	2001.10.17.20.35.31;	author cagney;	state Exp;
branches;
next	1.47;

1.47
date	2001.08.01.18.39.23;	author cagney;	state Exp;
branches;
next	1.46;

1.46
date	2001.07.21.22.31.14;	author ciceron;	state Exp;
branches
	1.46.2.1;
next	1.45;

1.45
date	2001.07.15.20.34.14;	author cagney;	state Exp;
branches;
next	1.44;

1.44
date	2001.07.14.18.59.06;	author ciceron;	state Exp;
branches;
next	1.43;

1.43
date	2001.07.11.17.52.32;	author cagney;	state Exp;
branches;
next	1.42;

1.42
date	2001.07.08.20.42.15;	author cagney;	state Exp;
branches;
next	1.41;

1.41
date	2001.06.10.16.25.51;	author cgf;	state Exp;
branches
	1.41.2.1;
next	1.40;

1.40
date	2001.04.19.23.56.13;	author cagney;	state Exp;
branches;
next	1.39;

1.39
date	2001.03.23.23.39.57;	author cagney;	state Exp;
branches;
next	1.38;

1.38
date	2001.03.20.01.37.09;	author cagney;	state Exp;
branches;
next	1.37;

1.37
date	2001.03.20.00.54.42;	author cagney;	state Exp;
branches;
next	1.36;

1.36
date	2001.03.20.00.28.23;	author cagney;	state Exp;
branches;
next	1.35;

1.35
date	2001.03.10.01.22.11;	author kevinb;	state Exp;
branches;
next	1.34;

1.34
date	2001.03.07.16.09.03;	author kettenis;	state Exp;
branches;
next	1.33;

1.33
date	2001.03.07.02.57.08;	author jtc;	state Exp;
branches;
next	1.32;

1.32
date	2001.03.06.08.21.18;	author kevinb;	state Exp;
branches;
next	1.31;

1.31
date	2001.02.25.04.45.11;	author kevinb;	state Exp;
branches;
next	1.30;

1.30
date	2001.02.08.06.03.54;	author cagney;	state Exp;
branches;
next	1.29;

1.29
date	2001.02.07.03.44.24;	author cagney;	state Exp;
branches;
next	1.28;

1.28
date	2001.02.06.04.17.03;	author jtc;	state Exp;
branches;
next	1.27;

1.27
date	2001.01.31.03.46.23;	author cagney;	state Exp;
branches;
next	1.26;

1.26
date	2001.01.31.01.24.03;	author cagney;	state Exp;
branches;
next	1.25;

1.25
date	2000.12.15.01.01.50;	author kevinb;	state Exp;
branches;
next	1.24;

1.24
date	2000.12.05.03.15.31;	author msnyder;	state Exp;
branches;
next	1.23;

1.23
date	2000.11.20.02.06.19;	author cagney;	state Exp;
branches;
next	1.22;

1.22
date	2000.11.15.14.33.50;	author taylor;	state Exp;
branches;
next	1.21;

1.21
date	2000.11.04.00.46.46;	author kevinb;	state Exp;
branches;
next	1.20;

1.20
date	2000.10.23.22.49.28;	author davea;	state Exp;
branches;
next	1.19;

1.19
date	2000.07.30.01.48.27;	author kevinb;	state Exp;
branches;
next	1.18;

1.18
date	2000.06.15.20.40.29;	author msnyder;	state Exp;
branches;
next	1.17;

1.17
date	2000.06.04.13.46.37;	author cagney;	state Exp;
branches;
next	1.16;

1.16
date	2000.06.04.01.58.49;	author cagney;	state Exp;
branches;
next	1.15;

1.15
date	2000.06.04.00.41.09;	author kevinb;	state Exp;
branches;
next	1.14;

1.14
date	2000.05.28.01.12.33;	author kevinb;	state Exp;
branches;
next	1.13;

1.13
date	2000.05.23.14.48.13;	author cagney;	state Exp;
branches;
next	1.12;

1.12
date	2000.05.22.02.07.19;	author cagney;	state Exp;
branches;
next	1.11;

1.11
date	2000.05.16.04.57.49;	author cagney;	state Exp;
branches;
next	1.10;

1.10
date	2000.05.16.02.43.39;	author cagney;	state Exp;
branches;
next	1.9;

1.9
date	2000.05.15.03.56.30;	author cagney;	state Exp;
branches;
next	1.8;

1.8
date	2000.04.27.00.15.14;	author msnyder;	state Exp;
branches;
next	1.7;

1.7
date	2000.04.21.04.10.18;	author cagney;	state Exp;
branches;
next	1.6;

1.6
date	2000.03.30.18.54.28;	author msnyder;	state Exp;
branches
	1.6.2.1;
next	1.5;

1.5
date	2000.03.20.22.15.58;	author kevinb;	state Exp;
branches;
next	1.4;

1.4
date	2000.03.04.02.23.06;	author cagney;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.04.00.40.40;	author cagney;	state Exp;
branches;
next	1.2;

1.2
date	2000.02.29.07.45.13;	author cagney;	state Exp;
branches;
next	1.1;

1.1
date	99.04.16.01.34.07;	author shebs;	state Exp;
branches
	1.1.1.1;
next	;

1.294.2.1
date	2013.03.22.20.41.45;	author jkratoch;	state Exp;
branches;
next	;

1.268.2.1
date	2012.01.06.04.54.31;	author brobecke;	state Exp;
branches;
next	;

1.250.2.1
date	2011.05.17.21.26.28;	author brobecke;	state Exp;
branches;
next	;

1.236.2.1
date	2010.07.27.19.13.11;	author jkratoch;	state Exp;
branches;
next	1.236.2.2;

1.236.2.2
date	2010.08.09.19.22.58;	author jkratoch;	state Exp;
branches;
next	;

1.200.2.1
date	2008.11.21.02.31.58;	author shebs;	state Exp;
branches;
next	;

1.170.2.1
date	2006.12.02.17.54.45;	author brobecke;	state Exp;
branches;
next	1.170.2.2;

1.170.2.2
date	2006.12.06.16.54.13;	author ams;	state Exp;
branches;
next	;

1.167.8.1
date	2006.08.28.07.48.47;	author nickrob;	state Exp;
branches;
next	;

1.166.6.1
date	2006.09.28.20.18.16;	author drow;	state Exp;
branches;
next	;

1.160.2.1
date	2005.03.28.18.46.22;	author mmitchel;	state Exp;
branches;
next	;

1.123.2.1
date	2004.07.17.14.42.29;	author cagney;	state Exp;
branches;
next	;

1.118.2.1
date	2004.05.11.23.09.20;	author nickrob;	state Exp;
branches;
next	;

1.116.2.1
date	2004.03.27.17.37.55;	author drow;	state Exp;
branches;
next	1.116.2.2;

1.116.2.2
date	2004.04.02.16.47.49;	author drow;	state Exp;
branches;
next	1.116.2.3;

1.116.2.3
date	2004.09.16.17.01.24;	author drow;	state Exp;
branches;
next	;

1.101.10.1
date	2003.06.03.20.54.40;	author cagney;	state Exp;
branches;
next	;

1.101.16.1
date	2003.06.26.17.26.47;	author cagney;	state Exp;
branches;
next	1.101.16.2;

1.101.16.2
date	2003.06.30.21.38.35;	author schwab;	state Exp;
branches;
next	;

1.99.2.1
date	2003.04.10.21.33.50;	author cagney;	state Exp;
branches;
next	;

1.85.2.1
date	2002.11.26.04.50.34;	author jimb;	state Exp;
branches;
next	1.85.2.2;

1.85.2.2
date	2002.12.17.04.18.13;	author jimb;	state Exp;
branches;
next	;

1.80.2.1
date	2002.10.11.22.22.56;	author carlton;	state Exp;
branches;
next	1.80.2.2;

1.80.2.2
date	2002.10.25.23.49.55;	author carlton;	state Exp;
branches;
next	1.80.2.3;

1.80.2.3
date	2002.11.15.19.19.00;	author carlton;	state Exp;
branches;
next	1.80.2.4;

1.80.2.4
date	2002.11.28.00.53.24;	author carlton;	state Exp;
branches;
next	1.80.2.5;

1.80.2.5
date	2002.12.23.19.38.47;	author carlton;	state Exp;
branches;
next	1.80.2.6;

1.80.2.6
date	2003.02.07.19.17.54;	author carlton;	state Exp;
branches;
next	1.80.2.7;

1.80.2.7
date	2003.02.12.00.38.07;	author carlton;	state Exp;
branches;
next	1.80.2.8;

1.80.2.8
date	2003.03.06.00.56.33;	author carlton;	state Exp;
branches;
next	1.80.2.9;

1.80.2.9
date	2003.04.16.19.56.56;	author carlton;	state Exp;
branches;
next	1.80.2.10;

1.80.2.10
date	2003.06.27.21.50.13;	author carlton;	state Exp;
branches;
next	1.80.2.11;

1.80.2.11
date	2003.08.05.17.13.15;	author carlton;	state Exp;
branches;
next	1.80.2.12;

1.80.2.12
date	2003.09.17.21.28.35;	author carlton;	state Exp;
branches;
next	1.80.2.13;

1.80.2.13
date	2003.11.11.23.50.58;	author carlton;	state Exp;
branches;
next	1.80.2.14;

1.80.2.14
date	2004.01.26.19.11.34;	author carlton;	state Exp;
branches;
next	;

1.80.4.1
date	2002.10.26.17.12.09;	author drow;	state Exp;
branches;
next	1.80.4.2;

1.80.4.2
date	2003.12.14.20.27.33;	author drow;	state Exp;
branches;
next	1.80.4.3;

1.80.4.3
date	2004.01.13.16.12.02;	author drow;	state Exp;
branches;
next	1.80.4.4;

1.80.4.4
date	2004.02.09.19.43.49;	author drow;	state Exp;
branches;
next	;

1.76.6.1
date	2002.11.12.17.18.18;	author cagney;	state Exp;
branches;
next	1.76.6.2;

1.76.6.2
date	2002.11.20.00.09.47;	author cagney;	state Exp;
branches;
next	;

1.72.6.1
date	2002.08.09.18.34.27;	author kseitz;	state Exp;
branches;
next	1.72.6.2;

1.72.6.2
date	2002.10.01.00.46.15;	author kseitz;	state Exp;
branches;
next	1.72.6.3;

1.72.6.3
date	2002.11.04.00.17.33;	author ezannoni;	state Exp;
branches;
next	;

1.68.2.1
date	2002.03.28.04.28.01;	author cagney;	state Exp;
branches;
next	;

1.46.2.1
date	2001.11.02.22.06.29;	author cagney;	state Exp;
branches;
next	;

1.41.2.1
date	2001.07.06.19.17.04;	author dberlin;	state Exp;
branches;
next	;

1.6.2.1
date	2000.04.21.04.10.46;	author cagney;	state Exp;
branches;
next	;

1.1.1.1
date	99.04.16.01.34.07;	author shebs;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.04.26.18.25.44;	author shebs;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	99.05.25.18.03.45;	author jsm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	99.06.01.15.40.53;	author jsm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	99.06.14.18.08.08;	author jsm;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	99.06.28.16.01.07;	author jsm;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	99.07.05.17.54.15;	author jsm;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	99.07.07.17.23.33;	author jsm;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	99.07.07.20.10.58;	author jsm;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	99.07.12.11.07.11;	author jsm;	state Exp;
branches;
next	1.1.1.11;

1.1.1.11
date	99.08.09.21.33.59;	author jsm;	state Exp;
branches;
next	1.1.1.12;

1.1.1.12
date	99.08.16.19.54.13;	author jsm;	state Exp;
branches;
next	1.1.1.13;

1.1.1.13
date	99.08.31.01.06.15;	author jsm;	state Exp;
branches;
next	1.1.1.14;

1.1.1.14
date	99.09.08.23.59.37;	author shebs;	state Exp;
branches;
next	1.1.1.15;

1.1.1.15
date	99.09.22.03.25.11;	author jsm;	state Exp;
branches;
next	1.1.1.16;

1.1.1.16
date	99.09.28.21.52.37;	author jsm;	state Exp;
branches;
next	1.1.1.17;

1.1.1.17
date	99.10.05.23.09.00;	author jsm;	state Exp;
branches;
next	1.1.1.18;

1.1.1.18
date	99.10.19.02.46.40;	author jsm;	state Exp;
branches;
next	1.1.1.19;

1.1.1.19
date	99.10.26.03.43.16;	author jsm;	state Exp;
branches;
next	1.1.1.20;

1.1.1.20
date	99.11.09.01.23.08;	author jsm;	state Exp;
branches;
next	1.1.1.21;

1.1.1.21
date	99.11.17.02.30.30;	author jsm;	state Exp;
branches;
next	1.1.1.22;

1.1.1.22
date	99.12.07.03.56.07;	author jsm;	state Exp;
branches;
next	1.1.1.23;

1.1.1.23
date	99.12.22.21.45.10;	author jsm;	state Exp;
branches;
next	1.1.1.24;

1.1.1.24
date	2000.01.25.02.39.56;	author jsm;	state Exp;
branches;
next	1.1.1.25;

1.1.1.25
date	2000.02.01.03.19.12;	author jsm;	state Exp;
branches;
next	1.1.1.26;

1.1.1.26
date	2000.02.02.00.21.11;	author jsm;	state Exp;
branches;
next	;


desc
@@


1.310
log
@Improve Executable displayed path (PR 15415 regression kind #2)

gdb/
2013-10-13  Jan Kratochvil  <jan.kratochvil@@redhat.com>

	Canonicalize directories for EXEC_FILENAME.
	* exec.c (exec_file_attach): Use gdb_realpath_keepfile for
	exec_filename.
	* utils.c (gdb_realpath_keepfile): New function.
	* utils.h (gdb_realpath_keepfile): New declaration.

gdb/testsuite/
2013-10-13  Jan Kratochvil  <jan.kratochvil@@redhat.com>

	Canonicalize directories for EXEC_FILENAME.
	* gdb.base/argv0-symlink.exp
	(kept file symbolic link name for info inferiors): New.
	(kept directory symbolic link name): Setup kfail.
	(kept directory symbolic link name for info inferiors): New.
@
text
@/* General utility routines for GDB, the GNU debugger.

   Copyright (C) 1986-2013 Free Software Foundation, Inc.

   This file is part of GDB.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

#include "defs.h"
#include "dyn-string.h"
#include "gdb_assert.h"
#include <ctype.h>
#include "gdb_string.h"
#include "gdb_wait.h"
#include "event-top.h"
#include "exceptions.h"
#include "gdbthread.h"
#include "fnmatch.h"
#include "gdb_bfd.h"
#ifdef HAVE_SYS_RESOURCE_H
#include <sys/resource.h>
#endif /* HAVE_SYS_RESOURCE_H */

#ifdef TUI
#include "tui/tui.h"		/* For tui_get_command_dimension.   */
#endif

#ifdef __GO32__
#include <pc.h>
#endif

/* SunOS's curses.h has a '#define reg register' in it.  Thank you Sun.  */
#ifdef reg
#undef reg
#endif

#include <signal.h>
#include "timeval-utils.h"
#include "gdbcmd.h"
#include "serial.h"
#include "bfd.h"
#include "target.h"
#include "gdb-demangle.h"
#include "expression.h"
#include "language.h"
#include "charset.h"
#include "annotate.h"
#include "filenames.h"
#include "symfile.h"
#include "gdb_obstack.h"
#include "gdbcore.h"
#include "top.h"
#include "main.h"
#include "solist.h"

#include "inferior.h"		/* for signed_pointer_to_address */

#include "gdb_curses.h"

#include "readline/readline.h"

#include <sys/time.h>
#include <time.h>

#include "gdb_usleep.h"
#include "interps.h"
#include "gdb_regex.h"

#if !HAVE_DECL_MALLOC
extern PTR malloc ();		/* ARI: PTR */
#endif
#if !HAVE_DECL_REALLOC
extern PTR realloc ();		/* ARI: PTR */
#endif
#if !HAVE_DECL_FREE
extern void free ();
#endif

void (*deprecated_error_begin_hook) (void);

/* Prototypes for local functions */

static void vfprintf_maybe_filtered (struct ui_file *, const char *,
				     va_list, int) ATTRIBUTE_PRINTF (2, 0);

static void fputs_maybe_filtered (const char *, struct ui_file *, int);

static void prompt_for_continue (void);

static void set_screen_size (void);
static void set_width (void);

/* Time spent in prompt_for_continue in the currently executing command
   waiting for user to respond.
   Initialized in make_command_stats_cleanup.
   Modified in prompt_for_continue and defaulted_query.
   Used in report_command_stats.  */

static struct timeval prompt_for_continue_wait_time;

/* A flag indicating whether to timestamp debugging messages.  */

static int debug_timestamp = 0;

/* Nonzero if we have job control.  */

int job_control;

#ifndef HAVE_PYTHON
/* Nonzero means a quit has been requested.  */

int quit_flag;
#endif /* HAVE_PYTHON */

/* Nonzero means quit immediately if Control-C is typed now, rather
   than waiting until QUIT is executed.  Be careful in setting this;
   code which executes with immediate_quit set has to be very careful
   about being able to deal with being interrupted at any time.  It is
   almost always better to use QUIT; the only exception I can think of
   is being able to quit out of a system call (using EINTR loses if
   the SIGINT happens between the previous QUIT and the system call).
   To immediately quit in the case in which a SIGINT happens between
   the previous QUIT and setting immediate_quit (desirable anytime we
   expect to block), call QUIT after setting immediate_quit.  */

int immediate_quit;

#ifndef HAVE_PYTHON

/* Clear the quit flag.  */

void
clear_quit_flag (void)
{
  quit_flag = 0;
}

/* Set the quit flag.  */

void
set_quit_flag (void)
{
  quit_flag = 1;
}

/* Return true if the quit flag has been set, false otherwise.  */

int
check_quit_flag (void)
{
  /* This is written in a particular way to avoid races.  */
  if (quit_flag)
    {
      quit_flag = 0;
      return 1;
    }

  return 0;
}

#endif /* HAVE_PYTHON */

/* Nonzero means that strings with character values >0x7F should be printed
   as octal escapes.  Zero means just print the value (e.g. it's an
   international character, and the terminal or window can cope.)  */

int sevenbit_strings = 0;
static void
show_sevenbit_strings (struct ui_file *file, int from_tty,
		       struct cmd_list_element *c, const char *value)
{
  fprintf_filtered (file, _("Printing of 8-bit characters "
			    "in strings as \\nnn is %s.\n"),
		    value);
}

/* String to be printed before warning messages, if any.  */

char *warning_pre_print = "\nwarning: ";

int pagination_enabled = 1;
static void
show_pagination_enabled (struct ui_file *file, int from_tty,
			 struct cmd_list_element *c, const char *value)
{
  fprintf_filtered (file, _("State of pagination is %s.\n"), value);
}


/* Cleanup utilities.

   These are not defined in cleanups.c (nor declared in cleanups.h)
   because while they use the "cleanup API" they are not part of the
   "cleanup API".  */

static void
do_freeargv (void *arg)
{
  freeargv ((char **) arg);
}

struct cleanup *
make_cleanup_freeargv (char **arg)
{
  return make_cleanup (do_freeargv, arg);
}

static void
do_dyn_string_delete (void *arg)
{
  dyn_string_delete ((dyn_string_t) arg);
}

struct cleanup *
make_cleanup_dyn_string_delete (dyn_string_t arg)
{
  return make_cleanup (do_dyn_string_delete, arg);
}

static void
do_bfd_close_cleanup (void *arg)
{
  gdb_bfd_unref (arg);
}

struct cleanup *
make_cleanup_bfd_unref (bfd *abfd)
{
  return make_cleanup (do_bfd_close_cleanup, abfd);
}

static void
do_close_cleanup (void *arg)
{
  int *fd = arg;

  close (*fd);
}

struct cleanup *
make_cleanup_close (int fd)
{
  int *saved_fd = xmalloc (sizeof (fd));

  *saved_fd = fd;
  return make_cleanup_dtor (do_close_cleanup, saved_fd, xfree);
}

/* Helper function which does the work for make_cleanup_fclose.  */

static void
do_fclose_cleanup (void *arg)
{
  FILE *file = arg;

  fclose (file);
}

/* Return a new cleanup that closes FILE.  */

struct cleanup *
make_cleanup_fclose (FILE *file)
{
  return make_cleanup (do_fclose_cleanup, file);
}

/* Helper function which does the work for make_cleanup_obstack_free.  */

static void
do_obstack_free (void *arg)
{
  struct obstack *ob = arg;

  obstack_free (ob, NULL);
}

/* Return a new cleanup that frees OBSTACK.  */

struct cleanup *
make_cleanup_obstack_free (struct obstack *obstack)
{
  return make_cleanup (do_obstack_free, obstack);
}

static void
do_ui_file_delete (void *arg)
{
  ui_file_delete (arg);
}

struct cleanup *
make_cleanup_ui_file_delete (struct ui_file *arg)
{
  return make_cleanup (do_ui_file_delete, arg);
}

/* Helper function for make_cleanup_ui_out_redirect_pop.  */

static void
do_ui_out_redirect_pop (void *arg)
{
  struct ui_out *uiout = arg;

  if (ui_out_redirect (uiout, NULL) < 0)
    warning (_("Cannot restore redirection of the current output protocol"));
}

/* Return a new cleanup that pops the last redirection by ui_out_redirect
   with NULL parameter.  */

struct cleanup *
make_cleanup_ui_out_redirect_pop (struct ui_out *uiout)
{
  return make_cleanup (do_ui_out_redirect_pop, uiout);
}

static void
do_free_section_addr_info (void *arg)
{
  free_section_addr_info (arg);
}

struct cleanup *
make_cleanup_free_section_addr_info (struct section_addr_info *addrs)
{
  return make_cleanup (do_free_section_addr_info, addrs);
}

struct restore_integer_closure
{
  int *variable;
  int value;
};

static void
restore_integer (void *p)
{
  struct restore_integer_closure *closure = p;

  *(closure->variable) = closure->value;
}

/* Remember the current value of *VARIABLE and make it restored when
   the cleanup is run.  */

struct cleanup *
make_cleanup_restore_integer (int *variable)
{
  struct restore_integer_closure *c =
    xmalloc (sizeof (struct restore_integer_closure));

  c->variable = variable;
  c->value = *variable;

  return make_cleanup_dtor (restore_integer, (void *) c, xfree);
}

/* Remember the current value of *VARIABLE and make it restored when
   the cleanup is run.  */

struct cleanup *
make_cleanup_restore_uinteger (unsigned int *variable)
{
  return make_cleanup_restore_integer ((int *) variable);
}

/* Helper for make_cleanup_unpush_target.  */

static void
do_unpush_target (void *arg)
{
  struct target_ops *ops = arg;

  unpush_target (ops);
}

/* Return a new cleanup that unpushes OPS.  */

struct cleanup *
make_cleanup_unpush_target (struct target_ops *ops)
{
  return make_cleanup (do_unpush_target, ops);
}

/* Helper for make_cleanup_htab_delete compile time checking the types.  */

static void
do_htab_delete_cleanup (void *htab_voidp)
{
  htab_t htab = htab_voidp;

  htab_delete (htab);
}

/* Return a new cleanup that deletes HTAB.  */

struct cleanup *
make_cleanup_htab_delete (htab_t htab)
{
  return make_cleanup (do_htab_delete_cleanup, htab);
}

struct restore_ui_file_closure
{
  struct ui_file **variable;
  struct ui_file *value;
};

static void
do_restore_ui_file (void *p)
{
  struct restore_ui_file_closure *closure = p;

  *(closure->variable) = closure->value;
}

/* Remember the current value of *VARIABLE and make it restored when
   the cleanup is run.  */

struct cleanup *
make_cleanup_restore_ui_file (struct ui_file **variable)
{
  struct restore_ui_file_closure *c = XNEW (struct restore_ui_file_closure);

  c->variable = variable;
  c->value = *variable;

  return make_cleanup_dtor (do_restore_ui_file, (void *) c, xfree);
}

/* Helper for make_cleanup_value_free_to_mark.  */

static void
do_value_free_to_mark (void *value)
{
  value_free_to_mark ((struct value *) value);
}

/* Free all values allocated since MARK was obtained by value_mark
   (except for those released) when the cleanup is run.  */

struct cleanup *
make_cleanup_value_free_to_mark (struct value *mark)
{
  return make_cleanup (do_value_free_to_mark, mark);
}

/* Helper for make_cleanup_value_free.  */

static void
do_value_free (void *value)
{
  value_free (value);
}

/* Free VALUE.  */

struct cleanup *
make_cleanup_value_free (struct value *value)
{
  return make_cleanup (do_value_free, value);
}

/* Helper for make_cleanup_free_so.  */

static void
do_free_so (void *arg)
{
  struct so_list *so = arg;

  free_so (so);
}

/* Make cleanup handler calling free_so for SO.  */

struct cleanup *
make_cleanup_free_so (struct so_list *so)
{
  return make_cleanup (do_free_so, so);
}

/* Helper for make_cleanup_restore_current_language.  */

static void
do_restore_current_language (void *p)
{
  enum language saved_lang = (uintptr_t) p;

  set_language (saved_lang);
}

/* Remember the current value of CURRENT_LANGUAGE and make it restored when
   the cleanup is run.  */

struct cleanup *
make_cleanup_restore_current_language (void)
{
  enum language saved_lang = current_language->la_language;

  return make_cleanup (do_restore_current_language,
		       (void *) (uintptr_t) saved_lang);
}

/* This function is useful for cleanups.
   Do

   foo = xmalloc (...);
   old_chain = make_cleanup (free_current_contents, &foo);

   to arrange to free the object thus allocated.  */

void
free_current_contents (void *ptr)
{
  void **location = ptr;

  if (location == NULL)
    internal_error (__FILE__, __LINE__,
		    _("free_current_contents: NULL pointer"));
  if (*location != NULL)
    {
      xfree (*location);
      *location = NULL;
    }
}



/* Print a warning message.  The first argument STRING is the warning
   message, used as an fprintf format string, the second is the
   va_list of arguments for that string.  A warning is unfiltered (not
   paginated) so that the user does not need to page through each
   screen full of warnings when there are lots of them.  */

void
vwarning (const char *string, va_list args)
{
  if (deprecated_warning_hook)
    (*deprecated_warning_hook) (string, args);
  else
    {
      target_terminal_ours ();
      wrap_here ("");		/* Force out any buffered output.  */
      gdb_flush (gdb_stdout);
      if (warning_pre_print)
	fputs_unfiltered (warning_pre_print, gdb_stderr);
      vfprintf_unfiltered (gdb_stderr, string, args);
      fprintf_unfiltered (gdb_stderr, "\n");
      va_end (args);
    }
}

/* Print a warning message.
   The first argument STRING is the warning message, used as a fprintf string,
   and the remaining args are passed as arguments to it.
   The primary difference between warnings and errors is that a warning
   does not force the return to command level.  */

void
warning (const char *string, ...)
{
  va_list args;

  va_start (args, string);
  vwarning (string, args);
  va_end (args);
}

/* Print an error message and return to command level.
   The first argument STRING is the error message, used as a fprintf string,
   and the remaining args are passed as arguments to it.  */

void
verror (const char *string, va_list args)
{
  throw_verror (GENERIC_ERROR, string, args);
}

void
error (const char *string, ...)
{
  va_list args;

  va_start (args, string);
  throw_verror (GENERIC_ERROR, string, args);
  va_end (args);
}

/* Print an error message and quit.
   The first argument STRING is the error message, used as a fprintf string,
   and the remaining args are passed as arguments to it.  */

void
vfatal (const char *string, va_list args)
{
  throw_vfatal (string, args);
}

void
fatal (const char *string, ...)
{
  va_list args;

  va_start (args, string);
  throw_vfatal (string, args);
  va_end (args);
}

void
error_stream (struct ui_file *stream)
{
  char *message = ui_file_xstrdup (stream, NULL);

  make_cleanup (xfree, message);
  error (("%s"), message);
}

/* Dump core trying to increase the core soft limit to hard limit first.  */

static void
dump_core (void)
{
#ifdef HAVE_SETRLIMIT
  struct rlimit rlim = { RLIM_INFINITY, RLIM_INFINITY };

  setrlimit (RLIMIT_CORE, &rlim);
#endif /* HAVE_SETRLIMIT */

  abort ();		/* NOTE: GDB has only three calls to abort().  */
}

/* Check whether GDB will be able to dump core using the dump_core
   function.  */

static int
can_dump_core (const char *reason)
{
#ifdef HAVE_GETRLIMIT
  struct rlimit rlim;

  /* Be quiet and assume we can dump if an error is returned.  */
  if (getrlimit (RLIMIT_CORE, &rlim) != 0)
    return 1;

  if (rlim.rlim_max == 0)
    {
      fprintf_unfiltered (gdb_stderr,
			  _("%s\nUnable to dump core, use `ulimit -c"
			    " unlimited' before executing GDB next time.\n"),
			  reason);
      return 0;
    }
#endif /* HAVE_GETRLIMIT */

  return 1;
}

/* Allow the user to configure the debugger behavior with respect to
   what to do when an internal problem is detected.  */

const char internal_problem_ask[] = "ask";
const char internal_problem_yes[] = "yes";
const char internal_problem_no[] = "no";
static const char *const internal_problem_modes[] =
{
  internal_problem_ask,
  internal_problem_yes,
  internal_problem_no,
  NULL
};

/* Print a message reporting an internal error/warning.  Ask the user
   if they want to continue, dump core, or just exit.  Return
   something to indicate a quit.  */

struct internal_problem
{
  const char *name;
  const char *should_quit;
  const char *should_dump_core;
};

/* Report a problem, internal to GDB, to the user.  Once the problem
   has been reported, and assuming GDB didn't quit, the caller can
   either allow execution to resume or throw an error.  */

static void ATTRIBUTE_PRINTF (4, 0)
internal_vproblem (struct internal_problem *problem,
		   const char *file, int line, const char *fmt, va_list ap)
{
  static int dejavu;
  int quit_p;
  int dump_core_p;
  char *reason;
  struct cleanup *cleanup = make_cleanup (null_cleanup, NULL);

  /* Don't allow infinite error/warning recursion.  */
  {
    static char msg[] = "Recursive internal problem.\n";

    switch (dejavu)
      {
      case 0:
	dejavu = 1;
	break;
      case 1:
	dejavu = 2;
	fputs_unfiltered (msg, gdb_stderr);
	abort ();	/* NOTE: GDB has only three calls to abort().  */
      default:
	dejavu = 3;
        /* Newer GLIBC versions put the warn_unused_result attribute
           on write, but this is one of those rare cases where
           ignoring the return value is correct.  Casting to (void)
           does not fix this problem.  This is the solution suggested
           at http://gcc.gnu.org/bugzilla/show_bug.cgi?id=25509.  */
	if (write (STDERR_FILENO, msg, sizeof (msg)) != sizeof (msg))
          abort (); /* NOTE: GDB has only three calls to abort().  */
	exit (1);
      }
  }

  /* Try to get the message out and at the start of a new line.  */
  target_terminal_ours ();
  begin_line ();

  /* Create a string containing the full error/warning message.  Need
     to call query with this full string, as otherwize the reason
     (error/warning) and question become separated.  Format using a
     style similar to a compiler error message.  Include extra detail
     so that the user knows that they are living on the edge.  */
  {
    char *msg;

    msg = xstrvprintf (fmt, ap);
    reason = xstrprintf ("%s:%d: %s: %s\n"
			 "A problem internal to GDB has been detected,\n"
			 "further debugging may prove unreliable.",
			 file, line, problem->name, msg);
    xfree (msg);
    make_cleanup (xfree, reason);
  }

  if (problem->should_quit == internal_problem_ask)
    {
      /* Default (yes/batch case) is to quit GDB.  When in batch mode
	 this lessens the likelihood of GDB going into an infinite
	 loop.  */
      if (!confirm)
        {
          /* Emit the message and quit.  */
          fputs_unfiltered (reason, gdb_stderr);
          fputs_unfiltered ("\n", gdb_stderr);
          quit_p = 1;
        }
      else
        quit_p = query (_("%s\nQuit this debugging session? "), reason);
    }
  else if (problem->should_quit == internal_problem_yes)
    quit_p = 1;
  else if (problem->should_quit == internal_problem_no)
    quit_p = 0;
  else
    internal_error (__FILE__, __LINE__, _("bad switch"));

  if (problem->should_dump_core == internal_problem_ask)
    {
      if (!can_dump_core (reason))
	dump_core_p = 0;
      else
	{
	  /* Default (yes/batch case) is to dump core.  This leaves a GDB
	     `dropping' so that it is easier to see that something went
	     wrong in GDB.  */
	  dump_core_p = query (_("%s\nCreate a core file of GDB? "), reason);
	}
    }
  else if (problem->should_dump_core == internal_problem_yes)
    dump_core_p = can_dump_core (reason);
  else if (problem->should_dump_core == internal_problem_no)
    dump_core_p = 0;
  else
    internal_error (__FILE__, __LINE__, _("bad switch"));

  if (quit_p)
    {
      if (dump_core_p)
	dump_core ();
      else
	exit (1);
    }
  else
    {
      if (dump_core_p)
	{
#ifdef HAVE_WORKING_FORK
	  if (fork () == 0)
	    dump_core ();
#endif
	}
    }

  dejavu = 0;
  do_cleanups (cleanup);
}

static struct internal_problem internal_error_problem = {
  "internal-error", internal_problem_ask, internal_problem_ask
};

void
internal_verror (const char *file, int line, const char *fmt, va_list ap)
{
  internal_vproblem (&internal_error_problem, file, line, fmt, ap);
  fatal (_("Command aborted."));
}

void
internal_error (const char *file, int line, const char *string, ...)
{
  va_list ap;

  va_start (ap, string);
  internal_verror (file, line, string, ap);
  va_end (ap);
}

static struct internal_problem internal_warning_problem = {
  "internal-warning", internal_problem_ask, internal_problem_ask
};

void
internal_vwarning (const char *file, int line, const char *fmt, va_list ap)
{
  internal_vproblem (&internal_warning_problem, file, line, fmt, ap);
}

void
internal_warning (const char *file, int line, const char *string, ...)
{
  va_list ap;

  va_start (ap, string);
  internal_vwarning (file, line, string, ap);
  va_end (ap);
}

/* Dummy functions to keep add_prefix_cmd happy.  */

static void
set_internal_problem_cmd (char *args, int from_tty)
{
}

static void
show_internal_problem_cmd (char *args, int from_tty)
{
}

/* When GDB reports an internal problem (error or warning) it gives
   the user the opportunity to quit GDB and/or create a core file of
   the current debug session.  This function registers a few commands
   that make it possible to specify that GDB should always or never
   quit or create a core file, without asking.  The commands look
   like:

   maint set PROBLEM-NAME quit ask|yes|no
   maint show PROBLEM-NAME quit
   maint set PROBLEM-NAME corefile ask|yes|no
   maint show PROBLEM-NAME corefile

   Where PROBLEM-NAME is currently "internal-error" or
   "internal-warning".  */

static void
add_internal_problem_command (struct internal_problem *problem)
{
  struct cmd_list_element **set_cmd_list;
  struct cmd_list_element **show_cmd_list;
  char *set_doc;
  char *show_doc;

  set_cmd_list = xmalloc (sizeof (*set_cmd_list));
  show_cmd_list = xmalloc (sizeof (*set_cmd_list));
  *set_cmd_list = NULL;
  *show_cmd_list = NULL;

  set_doc = xstrprintf (_("Configure what GDB does when %s is detected."),
			problem->name);

  show_doc = xstrprintf (_("Show what GDB does when %s is detected."),
			 problem->name);

  add_prefix_cmd ((char*) problem->name,
		  class_maintenance, set_internal_problem_cmd, set_doc,
		  set_cmd_list,
		  concat ("maintenance set ", problem->name, " ",
			  (char *) NULL),
		  0/*allow-unknown*/, &maintenance_set_cmdlist);

  add_prefix_cmd ((char*) problem->name,
		  class_maintenance, show_internal_problem_cmd, show_doc,
		  show_cmd_list,
		  concat ("maintenance show ", problem->name, " ",
			  (char *) NULL),
		  0/*allow-unknown*/, &maintenance_show_cmdlist);

  set_doc = xstrprintf (_("Set whether GDB should quit "
			  "when an %s is detected"),
			problem->name);
  show_doc = xstrprintf (_("Show whether GDB will quit "
			   "when an %s is detected"),
			 problem->name);
  add_setshow_enum_cmd ("quit", class_maintenance,
			internal_problem_modes,
			&problem->should_quit,
			set_doc,
			show_doc,
			NULL, /* help_doc */
			NULL, /* setfunc */
			NULL, /* showfunc */
			set_cmd_list,
			show_cmd_list);

  xfree (set_doc);
  xfree (show_doc);

  set_doc = xstrprintf (_("Set whether GDB should create a core "
			  "file of GDB when %s is detected"),
			problem->name);
  show_doc = xstrprintf (_("Show whether GDB will create a core "
			   "file of GDB when %s is detected"),
			 problem->name);
  add_setshow_enum_cmd ("corefile", class_maintenance,
			internal_problem_modes,
			&problem->should_dump_core,
			set_doc,
			show_doc,
			NULL, /* help_doc */
			NULL, /* setfunc */
			NULL, /* showfunc */
			set_cmd_list,
			show_cmd_list);

  xfree (set_doc);
  xfree (show_doc);
}

/* Return a newly allocated string, containing the PREFIX followed
   by the system error message for errno (separated by a colon).

   The result must be deallocated after use.  */

static char *
perror_string (const char *prefix)
{
  char *err;
  char *combined;

  err = safe_strerror (errno);
  combined = (char *) xmalloc (strlen (err) + strlen (prefix) + 3);
  strcpy (combined, prefix);
  strcat (combined, ": ");
  strcat (combined, err);

  return combined;
}

/* Print the system error message for errno, and also mention STRING
   as the file name for which the error was encountered.  Use ERRCODE
   for the thrown exception.  Then return to command level.  */

void
throw_perror_with_name (enum errors errcode, const char *string)
{
  char *combined;

  combined = perror_string (string);
  make_cleanup (xfree, combined);

  /* I understand setting these is a matter of taste.  Still, some people
     may clear errno but not know about bfd_error.  Doing this here is not
     unreasonable.  */
  bfd_set_error (bfd_error_no_error);
  errno = 0;

  throw_error (errcode, _("%s."), combined);
}

/* See throw_perror_with_name, ERRCODE defaults here to GENERIC_ERROR.  */

void
perror_with_name (const char *string)
{
  throw_perror_with_name (GENERIC_ERROR, string);
}

/* Same as perror_with_name except that it prints a warning instead
   of throwing an error.  */

void
perror_warning_with_name (const char *string)
{
  char *combined;

  combined = perror_string (string);
  warning (_("%s"), combined);
  xfree (combined);
}

/* Print the system error message for ERRCODE, and also mention STRING
   as the file name for which the error was encountered.  */

void
print_sys_errmsg (const char *string, int errcode)
{
  char *err;
  char *combined;

  err = safe_strerror (errcode);
  combined = (char *) alloca (strlen (err) + strlen (string) + 3);
  strcpy (combined, string);
  strcat (combined, ": ");
  strcat (combined, err);

  /* We want anything which was printed on stdout to come out first, before
     this message.  */
  gdb_flush (gdb_stdout);
  fprintf_unfiltered (gdb_stderr, "%s.\n", combined);
}

/* Control C eventually causes this to be called, at a convenient time.  */

void
quit (void)
{
#ifdef __MSDOS__
  /* No steenking SIGINT will ever be coming our way when the
     program is resumed.  Don't lie.  */
  fatal ("Quit");
#else
  if (job_control
      /* If there is no terminal switching for this target, then we can't
         possibly get screwed by the lack of job control.  */
      || current_target.to_terminal_ours == NULL)
    fatal ("Quit");
  else
    fatal ("Quit (expect signal SIGINT when the program is resumed)");
#endif
}


/* Called when a memory allocation fails, with the number of bytes of
   memory requested in SIZE.  */

void
malloc_failure (long size)
{
  if (size > 0)
    {
      internal_error (__FILE__, __LINE__,
		      _("virtual memory exhausted: can't allocate %ld bytes."),
		      size);
    }
  else
    {
      internal_error (__FILE__, __LINE__, _("virtual memory exhausted."));
    }
}

/* My replacement for the read system call.
   Used like `read' but keeps going if `read' returns too soon.  */

int
myread (int desc, char *addr, int len)
{
  int val;
  int orglen = len;

  while (len > 0)
    {
      val = read (desc, addr, len);
      if (val < 0)
	return val;
      if (val == 0)
	return orglen - len;
      len -= val;
      addr += val;
    }
  return orglen;
}

void
print_spaces (int n, struct ui_file *file)
{
  fputs_unfiltered (n_spaces (n), file);
}

/* Print a host address.  */

void
gdb_print_host_address (const void *addr, struct ui_file *stream)
{
  fprintf_filtered (stream, "%s", host_address_to_string (addr));
}


/* A cleanup function that calls regfree.  */

static void
do_regfree_cleanup (void *r)
{
  regfree (r);
}

/* Create a new cleanup that frees the compiled regular expression R.  */

struct cleanup *
make_regfree_cleanup (regex_t *r)
{
  return make_cleanup (do_regfree_cleanup, r);
}

/* Return an xmalloc'd error message resulting from a regular
   expression compilation failure.  */

char *
get_regcomp_error (int code, regex_t *rx)
{
  size_t length = regerror (code, rx, NULL, 0);
  char *result = xmalloc (length);

  regerror (code, rx, result, length);
  return result;
}

/* Compile a regexp and throw an exception on error.  This returns a
   cleanup to free the resulting pattern on success.  RX must not be
   NULL.  */

struct cleanup *
compile_rx_or_error (regex_t *pattern, const char *rx, const char *message)
{
  int code;

  gdb_assert (rx != NULL);

  code = regcomp (pattern, rx, REG_NOSUB);
  if (code != 0)
    {
      char *err = get_regcomp_error (code, pattern);

      make_cleanup (xfree, err);
      error (("%s: %s"), message, err);
    }

  return make_regfree_cleanup (pattern);
}



/* This function supports the query, nquery, and yquery functions.
   Ask user a y-or-n question and return 0 if answer is no, 1 if
   answer is yes, or default the answer to the specified default
   (for yquery or nquery).  DEFCHAR may be 'y' or 'n' to provide a
   default answer, or '\0' for no default.
   CTLSTR is the control string and should end in "? ".  It should
   not say how to answer, because we do that.
   ARGS are the arguments passed along with the CTLSTR argument to
   printf.  */

static int ATTRIBUTE_PRINTF (1, 0)
defaulted_query (const char *ctlstr, const char defchar, va_list args)
{
  int answer;
  int ans2;
  int retval;
  int def_value;
  char def_answer, not_def_answer;
  char *y_string, *n_string, *question;
  /* Used to add duration we waited for user to respond to
     prompt_for_continue_wait_time.  */
  struct timeval prompt_started, prompt_ended, prompt_delta;

  /* Set up according to which answer is the default.  */
  if (defchar == '\0')
    {
      def_value = 1;
      def_answer = 'Y';
      not_def_answer = 'N';
      y_string = "y";
      n_string = "n";
    }
  else if (defchar == 'y')
    {
      def_value = 1;
      def_answer = 'Y';
      not_def_answer = 'N';
      y_string = "[y]";
      n_string = "n";
    }
  else
    {
      def_value = 0;
      def_answer = 'N';
      not_def_answer = 'Y';
      y_string = "y";
      n_string = "[n]";
    }

  /* Automatically answer the default value if the user did not want
     prompts or the command was issued with the server prefix.  */
  if (!confirm || server_command)
    return def_value;

  /* If input isn't coming from the user directly, just say what
     question we're asking, and then answer the default automatically.  This
     way, important error messages don't get lost when talking to GDB
     over a pipe.  */
  if (! input_from_terminal_p ())
    {
      wrap_here ("");
      vfprintf_filtered (gdb_stdout, ctlstr, args);

      printf_filtered (_("(%s or %s) [answered %c; "
			 "input not from terminal]\n"),
		       y_string, n_string, def_answer);
      gdb_flush (gdb_stdout);

      return def_value;
    }

  if (deprecated_query_hook)
    {
      return deprecated_query_hook (ctlstr, args);
    }

  /* Format the question outside of the loop, to avoid reusing args.  */
  question = xstrvprintf (ctlstr, args);

  /* Used for calculating time spend waiting for user.  */
  gettimeofday (&prompt_started, NULL);

  while (1)
    {
      wrap_here ("");		/* Flush any buffered output.  */
      gdb_flush (gdb_stdout);

      if (annotation_level > 1)
	printf_filtered (("\n\032\032pre-query\n"));

      fputs_filtered (question, gdb_stdout);
      printf_filtered (_("(%s or %s) "), y_string, n_string);

      if (annotation_level > 1)
	printf_filtered (("\n\032\032query\n"));

      wrap_here ("");
      gdb_flush (gdb_stdout);

      answer = fgetc (stdin);

      /* We expect fgetc to block until a character is read.  But
         this may not be the case if the terminal was opened with
         the NONBLOCK flag.  In that case, if there is nothing to
         read on stdin, fgetc returns EOF, but also sets the error
         condition flag on stdin and errno to EAGAIN.  With a true
         EOF, stdin's error condition flag is not set.

         A situation where this behavior was observed is a pseudo
         terminal on AIX.  */
      while (answer == EOF && ferror (stdin) && errno == EAGAIN)
        {
          /* Not a real EOF.  Wait a little while and try again until
             we read something.  */
          clearerr (stdin);
          gdb_usleep (10000);
          answer = fgetc (stdin);
        }

      clearerr (stdin);		/* in case of C-d */
      if (answer == EOF)	/* C-d */
	{
	  printf_filtered ("EOF [assumed %c]\n", def_answer);
	  retval = def_value;
	  break;
	}
      /* Eat rest of input line, to EOF or newline.  */
      if (answer != '\n')
	do
	  {
	    ans2 = fgetc (stdin);
	    clearerr (stdin);
	  }
	while (ans2 != EOF && ans2 != '\n' && ans2 != '\r');

      if (answer >= 'a')
	answer -= 040;
      /* Check answer.  For the non-default, the user must specify
         the non-default explicitly.  */
      if (answer == not_def_answer)
	{
	  retval = !def_value;
	  break;
	}
      /* Otherwise, if a default was specified, the user may either
         specify the required input or have it default by entering
         nothing.  */
      if (answer == def_answer
	  || (defchar != '\0' &&
	      (answer == '\n' || answer == '\r' || answer == EOF)))
	{
	  retval = def_value;
	  break;
	}
      /* Invalid entries are not defaulted and require another selection.  */
      printf_filtered (_("Please answer %s or %s.\n"),
		       y_string, n_string);
    }

  /* Add time spend in this routine to prompt_for_continue_wait_time.  */
  gettimeofday (&prompt_ended, NULL);
  timeval_sub (&prompt_delta, &prompt_ended, &prompt_started);
  timeval_add (&prompt_for_continue_wait_time,
               &prompt_for_continue_wait_time, &prompt_delta);

  xfree (question);
  if (annotation_level > 1)
    printf_filtered (("\n\032\032post-query\n"));
  return retval;
}


/* Ask user a y-or-n question and return 0 if answer is no, 1 if
   answer is yes, or 0 if answer is defaulted.
   Takes three args which are given to printf to print the question.
   The first, a control string, should end in "? ".
   It should not say how to answer, because we do that.  */

int
nquery (const char *ctlstr, ...)
{
  va_list args;
  int ret;

  va_start (args, ctlstr);
  ret = defaulted_query (ctlstr, 'n', args);
  va_end (args);
  return ret;
}

/* Ask user a y-or-n question and return 0 if answer is no, 1 if
   answer is yes, or 1 if answer is defaulted.
   Takes three args which are given to printf to print the question.
   The first, a control string, should end in "? ".
   It should not say how to answer, because we do that.  */

int
yquery (const char *ctlstr, ...)
{
  va_list args;
  int ret;

  va_start (args, ctlstr);
  ret = defaulted_query (ctlstr, 'y', args);
  va_end (args);
  return ret;
}

/* Ask user a y-or-n question and return 1 iff answer is yes.
   Takes three args which are given to printf to print the question.
   The first, a control string, should end in "? ".
   It should not say how to answer, because we do that.  */

int
query (const char *ctlstr, ...)
{
  va_list args;
  int ret;

  va_start (args, ctlstr);
  ret = defaulted_query (ctlstr, '\0', args);
  va_end (args);
  return ret;
}

/* A helper for parse_escape that converts a host character to a
   target character.  C is the host character.  If conversion is
   possible, then the target character is stored in *TARGET_C and the
   function returns 1.  Otherwise, the function returns 0.  */

static int
host_char_to_target (struct gdbarch *gdbarch, int c, int *target_c)
{
  struct obstack host_data;
  char the_char = c;
  struct cleanup *cleanups;
  int result = 0;

  obstack_init (&host_data);
  cleanups = make_cleanup_obstack_free (&host_data);

  convert_between_encodings (target_charset (gdbarch), host_charset (),
			     (gdb_byte *) &the_char, 1, 1,
			     &host_data, translit_none);

  if (obstack_object_size (&host_data) == 1)
    {
      result = 1;
      *target_c = *(char *) obstack_base (&host_data);
    }

  do_cleanups (cleanups);
  return result;
}

/* Parse a C escape sequence.  STRING_PTR points to a variable
   containing a pointer to the string to parse.  That pointer
   should point to the character after the \.  That pointer
   is updated past the characters we use.  The value of the
   escape sequence is returned.

   A negative value means the sequence \ newline was seen,
   which is supposed to be equivalent to nothing at all.

   If \ is followed by a null character, we return a negative
   value and leave the string pointer pointing at the null character.

   If \ is followed by 000, we return 0 and leave the string pointer
   after the zeros.  A value of 0 does not mean end of string.  */

int
parse_escape (struct gdbarch *gdbarch, const char **string_ptr)
{
  int target_char = -2;	/* Initialize to avoid GCC warnings.  */
  int c = *(*string_ptr)++;

  switch (c)
    {
      case '\n':
	return -2;
      case 0:
	(*string_ptr)--;
	return 0;

      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
	{
	  int i = host_hex_value (c);
	  int count = 0;
	  while (++count < 3)
	    {
	      c = (**string_ptr);
	      if (isdigit (c) && c != '8' && c != '9')
		{
		  (*string_ptr)++;
		  i *= 8;
		  i += host_hex_value (c);
		}
	      else
		{
		  break;
		}
	    }
	  return i;
	}

    case 'a':
      c = '\a';
      break;
    case 'b':
      c = '\b';
      break;
    case 'f':
      c = '\f';
      break;
    case 'n':
      c = '\n';
      break;
    case 'r':
      c = '\r';
      break;
    case 't':
      c = '\t';
      break;
    case 'v':
      c = '\v';
      break;

    default:
      break;
    }

  if (!host_char_to_target (gdbarch, c, &target_char))
    error (_("The escape sequence `\\%c' is equivalent to plain `%c',"
	     " which has no equivalent\nin the `%s' character set."),
	   c, c, target_charset (gdbarch));
  return target_char;
}

/* Print the character C on STREAM as part of the contents of a literal
   string whose delimiter is QUOTER.  Note that this routine should only
   be call for printing things which are independent of the language
   of the program being debugged.  */

static void
printchar (int c, void (*do_fputs) (const char *, struct ui_file *),
	   void (*do_fprintf) (struct ui_file *, const char *, ...)
	   ATTRIBUTE_FPTR_PRINTF_2, struct ui_file *stream, int quoter)
{
  c &= 0xFF;			/* Avoid sign bit follies */

  if (c < 0x20 ||		/* Low control chars */
      (c >= 0x7F && c < 0xA0) ||	/* DEL, High controls */
      (sevenbit_strings && c >= 0x80))
    {				/* high order bit set */
      switch (c)
	{
	case '\n':
	  do_fputs ("\\n", stream);
	  break;
	case '\b':
	  do_fputs ("\\b", stream);
	  break;
	case '\t':
	  do_fputs ("\\t", stream);
	  break;
	case '\f':
	  do_fputs ("\\f", stream);
	  break;
	case '\r':
	  do_fputs ("\\r", stream);
	  break;
	case '\033':
	  do_fputs ("\\e", stream);
	  break;
	case '\007':
	  do_fputs ("\\a", stream);
	  break;
	default:
	  do_fprintf (stream, "\\%.3o", (unsigned int) c);
	  break;
	}
    }
  else
    {
      if (c == '\\' || c == quoter)
	do_fputs ("\\", stream);
      do_fprintf (stream, "%c", c);
    }
}

/* Print the character C on STREAM as part of the contents of a
   literal string whose delimiter is QUOTER.  Note that these routines
   should only be call for printing things which are independent of
   the language of the program being debugged.  */

void
fputstr_filtered (const char *str, int quoter, struct ui_file *stream)
{
  while (*str)
    printchar (*str++, fputs_filtered, fprintf_filtered, stream, quoter);
}

void
fputstr_unfiltered (const char *str, int quoter, struct ui_file *stream)
{
  while (*str)
    printchar (*str++, fputs_unfiltered, fprintf_unfiltered, stream, quoter);
}

void
fputstrn_filtered (const char *str, int n, int quoter,
		   struct ui_file *stream)
{
  int i;

  for (i = 0; i < n; i++)
    printchar (str[i], fputs_filtered, fprintf_filtered, stream, quoter);
}

void
fputstrn_unfiltered (const char *str, int n, int quoter,
		     struct ui_file *stream)
{
  int i;

  for (i = 0; i < n; i++)
    printchar (str[i], fputs_unfiltered, fprintf_unfiltered, stream, quoter);
}


/* Number of lines per page or UINT_MAX if paging is disabled.  */
static unsigned int lines_per_page;
static void
show_lines_per_page (struct ui_file *file, int from_tty,
		     struct cmd_list_element *c, const char *value)
{
  fprintf_filtered (file,
		    _("Number of lines gdb thinks are in a page is %s.\n"),
		    value);
}

/* Number of chars per line or UINT_MAX if line folding is disabled.  */
static unsigned int chars_per_line;
static void
show_chars_per_line (struct ui_file *file, int from_tty,
		     struct cmd_list_element *c, const char *value)
{
  fprintf_filtered (file,
		    _("Number of characters gdb thinks "
		      "are in a line is %s.\n"),
		    value);
}

/* Current count of lines printed on this page, chars on this line.  */
static unsigned int lines_printed, chars_printed;

/* Buffer and start column of buffered text, for doing smarter word-
   wrapping.  When someone calls wrap_here(), we start buffering output
   that comes through fputs_filtered().  If we see a newline, we just
   spit it out and forget about the wrap_here().  If we see another
   wrap_here(), we spit it out and remember the newer one.  If we see
   the end of the line, we spit out a newline, the indent, and then
   the buffered output.  */

/* Malloc'd buffer with chars_per_line+2 bytes.  Contains characters which
   are waiting to be output (they have already been counted in chars_printed).
   When wrap_buffer[0] is null, the buffer is empty.  */
static char *wrap_buffer;

/* Pointer in wrap_buffer to the next character to fill.  */
static char *wrap_pointer;

/* String to indent by if the wrap occurs.  Must not be NULL if wrap_column
   is non-zero.  */
static char *wrap_indent;

/* Column number on the screen where wrap_buffer begins, or 0 if wrapping
   is not in effect.  */
static int wrap_column;


/* Inialize the number of lines per page and chars per line.  */

void
init_page_info (void)
{
  if (batch_flag)
    {
      lines_per_page = UINT_MAX;
      chars_per_line = UINT_MAX;
    }
  else
#if defined(TUI)
  if (!tui_get_command_dimension (&chars_per_line, &lines_per_page))
#endif
    {
      int rows, cols;

#if defined(__GO32__)
      rows = ScreenRows ();
      cols = ScreenCols ();
      lines_per_page = rows;
      chars_per_line = cols;
#else
      /* Make sure Readline has initialized its terminal settings.  */
      rl_reset_terminal (NULL);

      /* Get the screen size from Readline.  */
      rl_get_screen_size (&rows, &cols);
      lines_per_page = rows;
      chars_per_line = cols;

      /* Readline should have fetched the termcap entry for us.
         Only try to use tgetnum function if rl_get_screen_size
         did not return a useful value. */
      if (((rows <= 0) && (tgetnum ("li") < 0))
	/* Also disable paging if inside EMACS.  */
	  || getenv ("EMACS"))
	{
	  /* The number of lines per page is not mentioned in the terminal
	     description or EMACS evironment variable is set.  This probably
	     means that paging is not useful, so disable paging.  */
	  lines_per_page = UINT_MAX;
	}

      /* If the output is not a terminal, don't paginate it.  */
      if (!ui_file_isatty (gdb_stdout))
	lines_per_page = UINT_MAX;
#endif
    }

  set_screen_size ();
  set_width ();
}

/* Helper for make_cleanup_restore_page_info.  */

static void
do_restore_page_info_cleanup (void *arg)
{
  set_screen_size ();
  set_width ();
}

/* Provide cleanup for restoring the terminal size.  */

struct cleanup *
make_cleanup_restore_page_info (void)
{
  struct cleanup *back_to;

  back_to = make_cleanup (do_restore_page_info_cleanup, NULL);
  make_cleanup_restore_uinteger (&lines_per_page);
  make_cleanup_restore_uinteger (&chars_per_line);

  return back_to;
}

/* Temporarily set BATCH_FLAG and the associated unlimited terminal size.
   Provide cleanup for restoring the original state.  */

struct cleanup *
set_batch_flag_and_make_cleanup_restore_page_info (void)
{
  struct cleanup *back_to = make_cleanup_restore_page_info ();
  
  make_cleanup_restore_integer (&batch_flag);
  batch_flag = 1;
  init_page_info ();

  return back_to;
}

/* Set the screen size based on LINES_PER_PAGE and CHARS_PER_LINE.  */

static void
set_screen_size (void)
{
  int rows = lines_per_page;
  int cols = chars_per_line;

  if (rows <= 0)
    rows = INT_MAX;

  if (cols <= 0)
    cols = INT_MAX;

  /* Update Readline's idea of the terminal size.  */
  rl_set_screen_size (rows, cols);
}

/* Reinitialize WRAP_BUFFER according to the current value of
   CHARS_PER_LINE.  */

static void
set_width (void)
{
  if (chars_per_line == 0)
    init_page_info ();

  if (!wrap_buffer)
    {
      wrap_buffer = (char *) xmalloc (chars_per_line + 2);
      wrap_buffer[0] = '\0';
    }
  else
    wrap_buffer = (char *) xrealloc (wrap_buffer, chars_per_line + 2);
  wrap_pointer = wrap_buffer;	/* Start it at the beginning.  */
}

static void
set_width_command (char *args, int from_tty, struct cmd_list_element *c)
{
  set_screen_size ();
  set_width ();
}

static void
set_height_command (char *args, int from_tty, struct cmd_list_element *c)
{
  set_screen_size ();
}

/* Wait, so the user can read what's on the screen.  Prompt the user
   to continue by pressing RETURN.  */

static void
prompt_for_continue (void)
{
  char *ignore;
  char cont_prompt[120];
  /* Used to add duration we waited for user to respond to
     prompt_for_continue_wait_time.  */
  struct timeval prompt_started, prompt_ended, prompt_delta;

  gettimeofday (&prompt_started, NULL);

  if (annotation_level > 1)
    printf_unfiltered (("\n\032\032pre-prompt-for-continue\n"));

  strcpy (cont_prompt,
	  "---Type <return> to continue, or q <return> to quit---");
  if (annotation_level > 1)
    strcat (cont_prompt, "\n\032\032prompt-for-continue\n");

  /* We must do this *before* we call gdb_readline, else it will eventually
     call us -- thinking that we're trying to print beyond the end of the 
     screen.  */
  reinitialize_more_filter ();

  immediate_quit++;
  QUIT;
  /* On a real operating system, the user can quit with SIGINT.
     But not on GO32.

     'q' is provided on all systems so users don't have to change habits
     from system to system, and because telling them what to do in
     the prompt is more user-friendly than expecting them to think of
     SIGINT.  */
  /* Call readline, not gdb_readline, because GO32 readline handles control-C
     whereas control-C to gdb_readline will cause the user to get dumped
     out to DOS.  */
  ignore = gdb_readline_wrapper (cont_prompt);

  /* Add time spend in this routine to prompt_for_continue_wait_time.  */
  gettimeofday (&prompt_ended, NULL);
  timeval_sub (&prompt_delta, &prompt_ended, &prompt_started);
  timeval_add (&prompt_for_continue_wait_time,
               &prompt_for_continue_wait_time, &prompt_delta);

  if (annotation_level > 1)
    printf_unfiltered (("\n\032\032post-prompt-for-continue\n"));

  if (ignore)
    {
      char *p = ignore;

      while (*p == ' ' || *p == '\t')
	++p;
      if (p[0] == 'q')
	quit ();
      xfree (ignore);
    }
  immediate_quit--;

  /* Now we have to do this again, so that GDB will know that it doesn't
     need to save the ---Type <return>--- line at the top of the screen.  */
  reinitialize_more_filter ();

  dont_repeat ();		/* Forget prev cmd -- CR won't repeat it.  */
}

/* Initalize timer to keep track of how long we waited for the user.  */

void
reset_prompt_for_continue_wait_time (void)
{
  static const struct timeval zero_timeval = { 0 };

  prompt_for_continue_wait_time = zero_timeval;
}

/* Fetch the cumulative time spent in prompt_for_continue.  */

struct timeval
get_prompt_for_continue_wait_time (void)
{
  return prompt_for_continue_wait_time;
}

/* Reinitialize filter; ie. tell it to reset to original values.  */

void
reinitialize_more_filter (void)
{
  lines_printed = 0;
  chars_printed = 0;
}

/* Indicate that if the next sequence of characters overflows the line,
   a newline should be inserted here rather than when it hits the end.
   If INDENT is non-null, it is a string to be printed to indent the
   wrapped part on the next line.  INDENT must remain accessible until
   the next call to wrap_here() or until a newline is printed through
   fputs_filtered().

   If the line is already overfull, we immediately print a newline and
   the indentation, and disable further wrapping.

   If we don't know the width of lines, but we know the page height,
   we must not wrap words, but should still keep track of newlines
   that were explicitly printed.

   INDENT should not contain tabs, as that will mess up the char count
   on the next line.  FIXME.

   This routine is guaranteed to force out any output which has been
   squirreled away in the wrap_buffer, so wrap_here ((char *)0) can be
   used to force out output from the wrap_buffer.  */

void
wrap_here (char *indent)
{
  /* This should have been allocated, but be paranoid anyway.  */
  if (!wrap_buffer)
    internal_error (__FILE__, __LINE__,
		    _("failed internal consistency check"));

  if (wrap_buffer[0])
    {
      *wrap_pointer = '\0';
      fputs_unfiltered (wrap_buffer, gdb_stdout);
    }
  wrap_pointer = wrap_buffer;
  wrap_buffer[0] = '\0';
  if (chars_per_line == UINT_MAX)	/* No line overflow checking.  */
    {
      wrap_column = 0;
    }
  else if (chars_printed >= chars_per_line)
    {
      puts_filtered ("\n");
      if (indent != NULL)
	puts_filtered (indent);
      wrap_column = 0;
    }
  else
    {
      wrap_column = chars_printed;
      if (indent == NULL)
	wrap_indent = "";
      else
	wrap_indent = indent;
    }
}

/* Print input string to gdb_stdout, filtered, with wrap, 
   arranging strings in columns of n chars.  String can be
   right or left justified in the column.  Never prints 
   trailing spaces.  String should never be longer than
   width.  FIXME: this could be useful for the EXAMINE 
   command, which currently doesn't tabulate very well.  */

void
puts_filtered_tabular (char *string, int width, int right)
{
  int spaces = 0;
  int stringlen;
  char *spacebuf;

  gdb_assert (chars_per_line > 0);
  if (chars_per_line == UINT_MAX)
    {
      fputs_filtered (string, gdb_stdout);
      fputs_filtered ("\n", gdb_stdout);
      return;
    }

  if (((chars_printed - 1) / width + 2) * width >= chars_per_line)
    fputs_filtered ("\n", gdb_stdout);

  if (width >= chars_per_line)
    width = chars_per_line - 1;

  stringlen = strlen (string);

  if (chars_printed > 0)
    spaces = width - (chars_printed - 1) % width - 1;
  if (right)
    spaces += width - stringlen;

  spacebuf = alloca (spaces + 1);
  spacebuf[spaces] = '\0';
  while (spaces--)
    spacebuf[spaces] = ' ';

  fputs_filtered (spacebuf, gdb_stdout);
  fputs_filtered (string, gdb_stdout);
}


/* Ensure that whatever gets printed next, using the filtered output
   commands, starts at the beginning of the line.  I.e. if there is
   any pending output for the current line, flush it and start a new
   line.  Otherwise do nothing.  */

void
begin_line (void)
{
  if (chars_printed > 0)
    {
      puts_filtered ("\n");
    }
}


/* Like fputs but if FILTER is true, pause after every screenful.

   Regardless of FILTER can wrap at points other than the final
   character of a line.

   Unlike fputs, fputs_maybe_filtered does not return a value.
   It is OK for LINEBUFFER to be NULL, in which case just don't print
   anything.

   Note that a longjmp to top level may occur in this routine (only if
   FILTER is true) (since prompt_for_continue may do so) so this
   routine should not be called when cleanups are not in place.  */

static void
fputs_maybe_filtered (const char *linebuffer, struct ui_file *stream,
		      int filter)
{
  const char *lineptr;

  if (linebuffer == 0)
    return;

  /* Don't do any filtering if it is disabled.  */
  if (stream != gdb_stdout
      || !pagination_enabled
      || batch_flag
      || (lines_per_page == UINT_MAX && chars_per_line == UINT_MAX)
      || top_level_interpreter () == NULL
      || ui_out_is_mi_like_p (interp_ui_out (top_level_interpreter ())))
    {
      fputs_unfiltered (linebuffer, stream);
      return;
    }

  /* Go through and output each character.  Show line extension
     when this is necessary; prompt user for new page when this is
     necessary.  */

  lineptr = linebuffer;
  while (*lineptr)
    {
      /* Possible new page.  */
      if (filter && (lines_printed >= lines_per_page - 1))
	prompt_for_continue ();

      while (*lineptr && *lineptr != '\n')
	{
	  /* Print a single line.  */
	  if (*lineptr == '\t')
	    {
	      if (wrap_column)
		*wrap_pointer++ = '\t';
	      else
		fputc_unfiltered ('\t', stream);
	      /* Shifting right by 3 produces the number of tab stops
	         we have already passed, and then adding one and
	         shifting left 3 advances to the next tab stop.  */
	      chars_printed = ((chars_printed >> 3) + 1) << 3;
	      lineptr++;
	    }
	  else
	    {
	      if (wrap_column)
		*wrap_pointer++ = *lineptr;
	      else
		fputc_unfiltered (*lineptr, stream);
	      chars_printed++;
	      lineptr++;
	    }

	  if (chars_printed >= chars_per_line)
	    {
	      unsigned int save_chars = chars_printed;

	      chars_printed = 0;
	      lines_printed++;
	      /* If we aren't actually wrapping, don't output newline --
	         if chars_per_line is right, we probably just overflowed
	         anyway; if it's wrong, let us keep going.  */
	      if (wrap_column)
		fputc_unfiltered ('\n', stream);

	      /* Possible new page.  */
	      if (lines_printed >= lines_per_page - 1)
		prompt_for_continue ();

	      /* Now output indentation and wrapped string.  */
	      if (wrap_column)
		{
		  fputs_unfiltered (wrap_indent, stream);
		  *wrap_pointer = '\0';	/* Null-terminate saved stuff, */
		  fputs_unfiltered (wrap_buffer, stream); /* and eject it.  */
		  /* FIXME, this strlen is what prevents wrap_indent from
		     containing tabs.  However, if we recurse to print it
		     and count its chars, we risk trouble if wrap_indent is
		     longer than (the user settable) chars_per_line.
		     Note also that this can set chars_printed > chars_per_line
		     if we are printing a long string.  */
		  chars_printed = strlen (wrap_indent)
		    + (save_chars - wrap_column);
		  wrap_pointer = wrap_buffer;	/* Reset buffer */
		  wrap_buffer[0] = '\0';
		  wrap_column = 0;	/* And disable fancy wrap */
		}
	    }
	}

      if (*lineptr == '\n')
	{
	  chars_printed = 0;
	  wrap_here ((char *) 0);	/* Spit out chars, cancel
					   further wraps.  */
	  lines_printed++;
	  fputc_unfiltered ('\n', stream);
	  lineptr++;
	}
    }
}

void
fputs_filtered (const char *linebuffer, struct ui_file *stream)
{
  fputs_maybe_filtered (linebuffer, stream, 1);
}

int
putchar_unfiltered (int c)
{
  char buf = c;

  ui_file_write (gdb_stdout, &buf, 1);
  return c;
}

/* Write character C to gdb_stdout using GDB's paging mechanism and return C.
   May return nonlocally.  */

int
putchar_filtered (int c)
{
  return fputc_filtered (c, gdb_stdout);
}

int
fputc_unfiltered (int c, struct ui_file *stream)
{
  char buf = c;

  ui_file_write (stream, &buf, 1);
  return c;
}

int
fputc_filtered (int c, struct ui_file *stream)
{
  char buf[2];

  buf[0] = c;
  buf[1] = 0;
  fputs_filtered (buf, stream);
  return c;
}

/* puts_debug is like fputs_unfiltered, except it prints special
   characters in printable fashion.  */

void
puts_debug (char *prefix, char *string, char *suffix)
{
  int ch;

  /* Print prefix and suffix after each line.  */
  static int new_line = 1;
  static int return_p = 0;
  static char *prev_prefix = "";
  static char *prev_suffix = "";

  if (*string == '\n')
    return_p = 0;

  /* If the prefix is changing, print the previous suffix, a new line,
     and the new prefix.  */
  if ((return_p || (strcmp (prev_prefix, prefix) != 0)) && !new_line)
    {
      fputs_unfiltered (prev_suffix, gdb_stdlog);
      fputs_unfiltered ("\n", gdb_stdlog);
      fputs_unfiltered (prefix, gdb_stdlog);
    }

  /* Print prefix if we printed a newline during the previous call.  */
  if (new_line)
    {
      new_line = 0;
      fputs_unfiltered (prefix, gdb_stdlog);
    }

  prev_prefix = prefix;
  prev_suffix = suffix;

  /* Output characters in a printable format.  */
  while ((ch = *string++) != '\0')
    {
      switch (ch)
	{
	default:
	  if (isprint (ch))
	    fputc_unfiltered (ch, gdb_stdlog);

	  else
	    fprintf_unfiltered (gdb_stdlog, "\\x%02x", ch & 0xff);
	  break;

	case '\\':
	  fputs_unfiltered ("\\\\", gdb_stdlog);
	  break;
	case '\b':
	  fputs_unfiltered ("\\b", gdb_stdlog);
	  break;
	case '\f':
	  fputs_unfiltered ("\\f", gdb_stdlog);
	  break;
	case '\n':
	  new_line = 1;
	  fputs_unfiltered ("\\n", gdb_stdlog);
	  break;
	case '\r':
	  fputs_unfiltered ("\\r", gdb_stdlog);
	  break;
	case '\t':
	  fputs_unfiltered ("\\t", gdb_stdlog);
	  break;
	case '\v':
	  fputs_unfiltered ("\\v", gdb_stdlog);
	  break;
	}

      return_p = ch == '\r';
    }

  /* Print suffix if we printed a newline.  */
  if (new_line)
    {
      fputs_unfiltered (suffix, gdb_stdlog);
      fputs_unfiltered ("\n", gdb_stdlog);
    }
}


/* Print a variable number of ARGS using format FORMAT.  If this
   information is going to put the amount written (since the last call
   to REINITIALIZE_MORE_FILTER or the last page break) over the page size,
   call prompt_for_continue to get the users permision to continue.

   Unlike fprintf, this function does not return a value.

   We implement three variants, vfprintf (takes a vararg list and stream),
   fprintf (takes a stream to write on), and printf (the usual).

   Note also that a longjmp to top level may occur in this routine
   (since prompt_for_continue may do so) so this routine should not be
   called when cleanups are not in place.  */

static void
vfprintf_maybe_filtered (struct ui_file *stream, const char *format,
			 va_list args, int filter)
{
  char *linebuffer;
  struct cleanup *old_cleanups;

  linebuffer = xstrvprintf (format, args);
  old_cleanups = make_cleanup (xfree, linebuffer);
  fputs_maybe_filtered (linebuffer, stream, filter);
  do_cleanups (old_cleanups);
}


void
vfprintf_filtered (struct ui_file *stream, const char *format, va_list args)
{
  vfprintf_maybe_filtered (stream, format, args, 1);
}

void
vfprintf_unfiltered (struct ui_file *stream, const char *format, va_list args)
{
  char *linebuffer;
  struct cleanup *old_cleanups;

  linebuffer = xstrvprintf (format, args);
  old_cleanups = make_cleanup (xfree, linebuffer);
  if (debug_timestamp && stream == gdb_stdlog)
    {
      struct timeval tm;
      char *timestamp;
      int len, need_nl;

      gettimeofday (&tm, NULL);

      len = strlen (linebuffer);
      need_nl = (len > 0 && linebuffer[len - 1] != '\n');

      timestamp = xstrprintf ("%ld:%ld %s%s",
			      (long) tm.tv_sec, (long) tm.tv_usec,
			      linebuffer,
			      need_nl ? "\n": "");
      make_cleanup (xfree, timestamp);
      fputs_unfiltered (timestamp, stream);
    }
  else
    fputs_unfiltered (linebuffer, stream);
  do_cleanups (old_cleanups);
}

void
vprintf_filtered (const char *format, va_list args)
{
  vfprintf_maybe_filtered (gdb_stdout, format, args, 1);
}

void
vprintf_unfiltered (const char *format, va_list args)
{
  vfprintf_unfiltered (gdb_stdout, format, args);
}

void
fprintf_filtered (struct ui_file *stream, const char *format, ...)
{
  va_list args;

  va_start (args, format);
  vfprintf_filtered (stream, format, args);
  va_end (args);
}

void
fprintf_unfiltered (struct ui_file *stream, const char *format, ...)
{
  va_list args;

  va_start (args, format);
  vfprintf_unfiltered (stream, format, args);
  va_end (args);
}

/* Like fprintf_filtered, but prints its result indented.
   Called as fprintfi_filtered (spaces, stream, format, ...);  */

void
fprintfi_filtered (int spaces, struct ui_file *stream, const char *format,
		   ...)
{
  va_list args;

  va_start (args, format);
  print_spaces_filtered (spaces, stream);

  vfprintf_filtered (stream, format, args);
  va_end (args);
}


void
printf_filtered (const char *format, ...)
{
  va_list args;

  va_start (args, format);
  vfprintf_filtered (gdb_stdout, format, args);
  va_end (args);
}


void
printf_unfiltered (const char *format, ...)
{
  va_list args;

  va_start (args, format);
  vfprintf_unfiltered (gdb_stdout, format, args);
  va_end (args);
}

/* Like printf_filtered, but prints it's result indented.
   Called as printfi_filtered (spaces, format, ...);  */

void
printfi_filtered (int spaces, const char *format, ...)
{
  va_list args;

  va_start (args, format);
  print_spaces_filtered (spaces, gdb_stdout);
  vfprintf_filtered (gdb_stdout, format, args);
  va_end (args);
}

/* Easy -- but watch out!

   This routine is *not* a replacement for puts()!  puts() appends a newline.
   This one doesn't, and had better not!  */

void
puts_filtered (const char *string)
{
  fputs_filtered (string, gdb_stdout);
}

void
puts_unfiltered (const char *string)
{
  fputs_unfiltered (string, gdb_stdout);
}

/* Return a pointer to N spaces and a null.  The pointer is good
   until the next call to here.  */
char *
n_spaces (int n)
{
  char *t;
  static char *spaces = 0;
  static int max_spaces = -1;

  if (n > max_spaces)
    {
      if (spaces)
	xfree (spaces);
      spaces = (char *) xmalloc (n + 1);
      for (t = spaces + n; t != spaces;)
	*--t = ' ';
      spaces[n] = '\0';
      max_spaces = n;
    }

  return spaces + max_spaces - n;
}

/* Print N spaces.  */
void
print_spaces_filtered (int n, struct ui_file *stream)
{
  fputs_filtered (n_spaces (n), stream);
}

/* C++/ObjC demangler stuff.  */

/* fprintf_symbol_filtered attempts to demangle NAME, a symbol in language
   LANG, using demangling args ARG_MODE, and print it filtered to STREAM.
   If the name is not mangled, or the language for the name is unknown, or
   demangling is off, the name is printed in its "raw" form.  */

void
fprintf_symbol_filtered (struct ui_file *stream, const char *name,
			 enum language lang, int arg_mode)
{
  char *demangled;

  if (name != NULL)
    {
      /* If user wants to see raw output, no problem.  */
      if (!demangle)
	{
	  fputs_filtered (name, stream);
	}
      else
	{
	  demangled = language_demangle (language_def (lang), name, arg_mode);
	  fputs_filtered (demangled ? demangled : name, stream);
	  if (demangled != NULL)
	    {
	      xfree (demangled);
	    }
	}
    }
}

/* Do a strcmp() type operation on STRING1 and STRING2, ignoring any
   differences in whitespace.  Returns 0 if they match, non-zero if they
   don't (slightly different than strcmp()'s range of return values).

   As an extra hack, string1=="FOO(ARGS)" matches string2=="FOO".
   This "feature" is useful when searching for matching C++ function names
   (such as if the user types 'break FOO', where FOO is a mangled C++
   function).  */

int
strcmp_iw (const char *string1, const char *string2)
{
  while ((*string1 != '\0') && (*string2 != '\0'))
    {
      while (isspace (*string1))
	{
	  string1++;
	}
      while (isspace (*string2))
	{
	  string2++;
	}
      if (case_sensitivity == case_sensitive_on && *string1 != *string2)
	break;
      if (case_sensitivity == case_sensitive_off
	  && (tolower ((unsigned char) *string1)
	      != tolower ((unsigned char) *string2)))
	break;
      if (*string1 != '\0')
	{
	  string1++;
	  string2++;
	}
    }
  return (*string1 != '\0' && *string1 != '(') || (*string2 != '\0');
}

/* This is like strcmp except that it ignores whitespace and treats
   '(' as the first non-NULL character in terms of ordering.  Like
   strcmp (and unlike strcmp_iw), it returns negative if STRING1 <
   STRING2, 0 if STRING2 = STRING2, and positive if STRING1 > STRING2
   according to that ordering.

   If a list is sorted according to this function and if you want to
   find names in the list that match some fixed NAME according to
   strcmp_iw(LIST_ELT, NAME), then the place to start looking is right
   where this function would put NAME.

   This function must be neutral to the CASE_SENSITIVITY setting as the user
   may choose it during later lookup.  Therefore this function always sorts
   primarily case-insensitively and secondarily case-sensitively.

   Here are some examples of why using strcmp to sort is a bad idea:

   Whitespace example:

   Say your partial symtab contains: "foo<char *>", "goo".  Then, if
   we try to do a search for "foo<char*>", strcmp will locate this
   after "foo<char *>" and before "goo".  Then lookup_partial_symbol
   will start looking at strings beginning with "goo", and will never
   see the correct match of "foo<char *>".

   Parenthesis example:

   In practice, this is less like to be an issue, but I'll give it a
   shot.  Let's assume that '$' is a legitimate character to occur in
   symbols.  (Which may well even be the case on some systems.)  Then
   say that the partial symbol table contains "foo$" and "foo(int)".
   strcmp will put them in this order, since '$' < '('.  Now, if the
   user searches for "foo", then strcmp will sort "foo" before "foo$".
   Then lookup_partial_symbol will notice that strcmp_iw("foo$",
   "foo") is false, so it won't proceed to the actual match of
   "foo(int)" with "foo".  */

int
strcmp_iw_ordered (const char *string1, const char *string2)
{
  const char *saved_string1 = string1, *saved_string2 = string2;
  enum case_sensitivity case_pass = case_sensitive_off;

  for (;;)
    {
      /* C1 and C2 are valid only if *string1 != '\0' && *string2 != '\0'.
	 Provide stub characters if we are already at the end of one of the
	 strings.  */
      char c1 = 'X', c2 = 'X';

      while (*string1 != '\0' && *string2 != '\0')
	{
	  while (isspace (*string1))
	    string1++;
	  while (isspace (*string2))
	    string2++;

	  switch (case_pass)
	  {
	    case case_sensitive_off:
	      c1 = tolower ((unsigned char) *string1);
	      c2 = tolower ((unsigned char) *string2);
	      break;
	    case case_sensitive_on:
	      c1 = *string1;
	      c2 = *string2;
	      break;
	  }
	  if (c1 != c2)
	    break;

	  if (*string1 != '\0')
	    {
	      string1++;
	      string2++;
	    }
	}

      switch (*string1)
	{
	  /* Characters are non-equal unless they're both '\0'; we want to
	     make sure we get the comparison right according to our
	     comparison in the cases where one of them is '\0' or '('.  */
	case '\0':
	  if (*string2 == '\0')
	    break;
	  else
	    return -1;
	case '(':
	  if (*string2 == '\0')
	    return 1;
	  else
	    return -1;
	default:
	  if (*string2 == '\0' || *string2 == '(')
	    return 1;
	  else if (c1 > c2)
	    return 1;
	  else if (c1 < c2)
	    return -1;
	  /* PASSTHRU */
	}

      if (case_pass == case_sensitive_on)
	return 0;
      
      /* Otherwise the strings were equal in case insensitive way, make
	 a more fine grained comparison in a case sensitive way.  */

      case_pass = case_sensitive_on;
      string1 = saved_string1;
      string2 = saved_string2;
    }
}

/* A simple comparison function with opposite semantics to strcmp.  */

int
streq (const char *lhs, const char *rhs)
{
  return !strcmp (lhs, rhs);
}


/*
   ** subset_compare()
   **    Answer whether string_to_compare is a full or partial match to
   **    template_string.  The partial match must be in sequence starting
   **    at index 0.
 */
int
subset_compare (char *string_to_compare, char *template_string)
{
  int match;

  if (template_string != (char *) NULL && string_to_compare != (char *) NULL
      && strlen (string_to_compare) <= strlen (template_string))
    match =
      (strncmp
       (template_string, string_to_compare, strlen (string_to_compare)) == 0);
  else
    match = 0;
  return match;
}

static void
pagination_on_command (char *arg, int from_tty)
{
  pagination_enabled = 1;
}

static void
pagination_off_command (char *arg, int from_tty)
{
  pagination_enabled = 0;
}

static void
show_debug_timestamp (struct ui_file *file, int from_tty,
		      struct cmd_list_element *c, const char *value)
{
  fprintf_filtered (file, _("Timestamping debugging messages is %s.\n"),
		    value);
}


void
initialize_utils (void)
{
  add_setshow_uinteger_cmd ("width", class_support, &chars_per_line, _("\
Set number of characters where GDB should wrap lines of its output."), _("\
Show number of characters where GDB should wrap lines of its output."), _("\
This affects where GDB wraps its output to fit the screen width.\n\
Setting this to \"unlimited\" or zero prevents GDB from wrapping its output."),
			    set_width_command,
			    show_chars_per_line,
			    &setlist, &showlist);

  add_setshow_uinteger_cmd ("height", class_support, &lines_per_page, _("\
Set number of lines in a page for GDB output pagination."), _("\
Show number of lines in a page for GDB output pagination."), _("\
This affects the number of lines after which GDB will pause\n\
its output and ask you whether to continue.\n\
Setting this to \"unlimited\" or zero causes GDB never pause during output."),
			    set_height_command,
			    show_lines_per_page,
			    &setlist, &showlist);

  init_page_info ();

  add_setshow_boolean_cmd ("pagination", class_support,
			   &pagination_enabled, _("\
Set state of GDB output pagination."), _("\
Show state of GDB output pagination."), _("\
When pagination is ON, GDB pauses at end of each screenful of\n\
its output and asks you whether to continue.\n\
Turning pagination off is an alternative to \"set height unlimited\"."),
			   NULL,
			   show_pagination_enabled,
			   &setlist, &showlist);

  if (xdb_commands)
    {
      add_com ("am", class_support, pagination_on_command,
	       _("Enable pagination"));
      add_com ("sm", class_support, pagination_off_command,
	       _("Disable pagination"));
    }

  add_setshow_boolean_cmd ("sevenbit-strings", class_support,
			   &sevenbit_strings, _("\
Set printing of 8-bit characters in strings as \\nnn."), _("\
Show printing of 8-bit characters in strings as \\nnn."), NULL,
			   NULL,
			   show_sevenbit_strings,
			   &setprintlist, &showprintlist);

  add_setshow_boolean_cmd ("timestamp", class_maintenance,
			    &debug_timestamp, _("\
Set timestamping of debugging messages."), _("\
Show timestamping of debugging messages."), _("\
When set, debugging messages will be marked with seconds and microseconds."),
			   NULL,
			   show_debug_timestamp,
			   &setdebuglist, &showdebuglist);
}

/* Print routines to handle variable size regs, etc.  */
/* Temporary storage using circular buffer.  */
#define NUMCELLS 16
#define CELLSIZE 50
static char *
get_cell (void)
{
  static char buf[NUMCELLS][CELLSIZE];
  static int cell = 0;

  if (++cell >= NUMCELLS)
    cell = 0;
  return buf[cell];
}

const char *
paddress (struct gdbarch *gdbarch, CORE_ADDR addr)
{
  /* Truncate address to the size of a target address, avoiding shifts
     larger or equal than the width of a CORE_ADDR.  The local
     variable ADDR_BIT stops the compiler reporting a shift overflow
     when it won't occur.  */
  /* NOTE: This assumes that the significant address information is
     kept in the least significant bits of ADDR - the upper bits were
     either zero or sign extended.  Should gdbarch_address_to_pointer or
     some ADDRESS_TO_PRINTABLE() be used to do the conversion?  */

  int addr_bit = gdbarch_addr_bit (gdbarch);

  if (addr_bit < (sizeof (CORE_ADDR) * HOST_CHAR_BIT))
    addr &= ((CORE_ADDR) 1 << addr_bit) - 1;
  return hex_string (addr);
}

/* This function is described in "defs.h".  */

const char *
print_core_address (struct gdbarch *gdbarch, CORE_ADDR address)
{
  int addr_bit = gdbarch_addr_bit (gdbarch);

  if (addr_bit < (sizeof (CORE_ADDR) * HOST_CHAR_BIT))
    address &= ((CORE_ADDR) 1 << addr_bit) - 1;

  /* FIXME: cagney/2002-05-03: Need local_address_string() function
     that returns the language localized string formatted to a width
     based on gdbarch_addr_bit.  */
  if (addr_bit <= 32)
    return hex_string_custom (address, 8);
  else
    return hex_string_custom (address, 16);
}

/* Callback hash_f for htab_create_alloc or htab_create_alloc_ex.  */

hashval_t
core_addr_hash (const void *ap)
{
  const CORE_ADDR *addrp = ap;

  return *addrp;
}

/* Callback eq_f for htab_create_alloc or htab_create_alloc_ex.  */

int
core_addr_eq (const void *ap, const void *bp)
{
  const CORE_ADDR *addr_ap = ap;
  const CORE_ADDR *addr_bp = bp;

  return *addr_ap == *addr_bp;
}

static char *
decimal2str (char *sign, ULONGEST addr, int width)
{
  /* Steal code from valprint.c:print_decimal().  Should this worry
     about the real size of addr as the above does?  */
  unsigned long temp[3];
  char *str = get_cell ();
  int i = 0;

  do
    {
      temp[i] = addr % (1000 * 1000 * 1000);
      addr /= (1000 * 1000 * 1000);
      i++;
      width -= 9;
    }
  while (addr != 0 && i < (sizeof (temp) / sizeof (temp[0])));

  width += 9;
  if (width < 0)
    width = 0;

  switch (i)
    {
    case 1:
      xsnprintf (str, CELLSIZE, "%s%0*lu", sign, width, temp[0]);
      break;
    case 2:
      xsnprintf (str, CELLSIZE, "%s%0*lu%09lu", sign, width,
		 temp[1], temp[0]);
      break;
    case 3:
      xsnprintf (str, CELLSIZE, "%s%0*lu%09lu%09lu", sign, width,
		 temp[2], temp[1], temp[0]);
      break;
    default:
      internal_error (__FILE__, __LINE__,
		      _("failed internal consistency check"));
    }

  return str;
}

static char *
octal2str (ULONGEST addr, int width)
{
  unsigned long temp[3];
  char *str = get_cell ();
  int i = 0;

  do
    {
      temp[i] = addr % (0100000 * 0100000);
      addr /= (0100000 * 0100000);
      i++;
      width -= 10;
    }
  while (addr != 0 && i < (sizeof (temp) / sizeof (temp[0])));

  width += 10;
  if (width < 0)
    width = 0;

  switch (i)
    {
    case 1:
      if (temp[0] == 0)
	xsnprintf (str, CELLSIZE, "%*o", width, 0);
      else
	xsnprintf (str, CELLSIZE, "0%0*lo", width, temp[0]);
      break;
    case 2:
      xsnprintf (str, CELLSIZE, "0%0*lo%010lo", width, temp[1], temp[0]);
      break;
    case 3:
      xsnprintf (str, CELLSIZE, "0%0*lo%010lo%010lo", width,
		 temp[2], temp[1], temp[0]);
      break;
    default:
      internal_error (__FILE__, __LINE__,
		      _("failed internal consistency check"));
    }

  return str;
}

char *
pulongest (ULONGEST u)
{
  return decimal2str ("", u, 0);
}

char *
plongest (LONGEST l)
{
  if (l < 0)
    return decimal2str ("-", -l, 0);
  else
    return decimal2str ("", l, 0);
}

/* Eliminate warning from compiler on 32-bit systems.  */
static int thirty_two = 32;

char *
phex (ULONGEST l, int sizeof_l)
{
  char *str;

  switch (sizeof_l)
    {
    case 8:
      str = get_cell ();
      xsnprintf (str, CELLSIZE, "%08lx%08lx",
		 (unsigned long) (l >> thirty_two),
		 (unsigned long) (l & 0xffffffff));
      break;
    case 4:
      str = get_cell ();
      xsnprintf (str, CELLSIZE, "%08lx", (unsigned long) l);
      break;
    case 2:
      str = get_cell ();
      xsnprintf (str, CELLSIZE, "%04x", (unsigned short) (l & 0xffff));
      break;
    default:
      str = phex (l, sizeof (l));
      break;
    }

  return str;
}

char *
phex_nz (ULONGEST l, int sizeof_l)
{
  char *str;

  switch (sizeof_l)
    {
    case 8:
      {
	unsigned long high = (unsigned long) (l >> thirty_two);

	str = get_cell ();
	if (high == 0)
	  xsnprintf (str, CELLSIZE, "%lx",
		     (unsigned long) (l & 0xffffffff));
	else
	  xsnprintf (str, CELLSIZE, "%lx%08lx", high,
		     (unsigned long) (l & 0xffffffff));
	break;
      }
    case 4:
      str = get_cell ();
      xsnprintf (str, CELLSIZE, "%lx", (unsigned long) l);
      break;
    case 2:
      str = get_cell ();
      xsnprintf (str, CELLSIZE, "%x", (unsigned short) (l & 0xffff));
      break;
    default:
      str = phex_nz (l, sizeof (l));
      break;
    }

  return str;
}

/* Converts a LONGEST to a C-format hexadecimal literal and stores it
   in a static string.  Returns a pointer to this string.  */
char *
hex_string (LONGEST num)
{
  char *result = get_cell ();

  xsnprintf (result, CELLSIZE, "0x%s", phex_nz (num, sizeof (num)));
  return result;
}

/* Converts a LONGEST number to a C-format hexadecimal literal and
   stores it in a static string.  Returns a pointer to this string
   that is valid until the next call.  The number is padded on the
   left with 0s to at least WIDTH characters.  */
char *
hex_string_custom (LONGEST num, int width)
{
  char *result = get_cell ();
  char *result_end = result + CELLSIZE - 1;
  const char *hex = phex_nz (num, sizeof (num));
  int hex_len = strlen (hex);

  if (hex_len > width)
    width = hex_len;
  if (width + 2 >= CELLSIZE)
    internal_error (__FILE__, __LINE__, _("\
hex_string_custom: insufficient space to store result"));

  strcpy (result_end - width - 2, "0x");
  memset (result_end - width, '0', width);
  strcpy (result_end - hex_len, hex);
  return result_end - width - 2;
}

/* Convert VAL to a numeral in the given radix.  For
 * radix 10, IS_SIGNED may be true, indicating a signed quantity;
 * otherwise VAL is interpreted as unsigned.  If WIDTH is supplied, 
 * it is the minimum width (0-padded if needed).  USE_C_FORMAT means
 * to use C format in all cases.  If it is false, then 'x' 
 * and 'o' formats do not include a prefix (0x or leading 0).  */

char *
int_string (LONGEST val, int radix, int is_signed, int width, 
	    int use_c_format)
{
  switch (radix) 
    {
    case 16:
      {
	char *result;

	if (width == 0)
	  result = hex_string (val);
	else
	  result = hex_string_custom (val, width);
	if (! use_c_format)
	  result += 2;
	return result;
      }
    case 10:
      {
	if (is_signed && val < 0)
	  return decimal2str ("-", -val, width);
	else
	  return decimal2str ("", val, width);
      }
    case 8:
      {
	char *result = octal2str (val, width);

	if (use_c_format || val == 0)
	  return result;
	else
	  return result + 1;
      }
    default:
      internal_error (__FILE__, __LINE__,
		      _("failed internal consistency check"));
    }
}	

/* Convert a CORE_ADDR into a string.  */
const char *
core_addr_to_string (const CORE_ADDR addr)
{
  char *str = get_cell ();

  strcpy (str, "0x");
  strcat (str, phex (addr, sizeof (addr)));
  return str;
}

const char *
core_addr_to_string_nz (const CORE_ADDR addr)
{
  char *str = get_cell ();

  strcpy (str, "0x");
  strcat (str, phex_nz (addr, sizeof (addr)));
  return str;
}

/* Convert a string back into a CORE_ADDR.  */
CORE_ADDR
string_to_core_addr (const char *my_string)
{
  CORE_ADDR addr = 0;

  if (my_string[0] == '0' && tolower (my_string[1]) == 'x')
    {
      /* Assume that it is in hex.  */
      int i;

      for (i = 2; my_string[i] != '\0'; i++)
	{
	  if (isdigit (my_string[i]))
	    addr = (my_string[i] - '0') + (addr * 16);
	  else if (isxdigit (my_string[i]))
	    addr = (tolower (my_string[i]) - 'a' + 0xa) + (addr * 16);
	  else
	    error (_("invalid hex \"%s\""), my_string);
	}
    }
  else
    {
      /* Assume that it is in decimal.  */
      int i;

      for (i = 0; my_string[i] != '\0'; i++)
	{
	  if (isdigit (my_string[i]))
	    addr = (my_string[i] - '0') + (addr * 10);
	  else
	    error (_("invalid decimal \"%s\""), my_string);
	}
    }

  return addr;
}

const char *
host_address_to_string (const void *addr)
{
  char *str = get_cell ();

  xsnprintf (str, CELLSIZE, "0x%s", phex_nz ((uintptr_t) addr, sizeof (addr)));
  return str;
}

char *
gdb_realpath (const char *filename)
{
  /* Method 1: The system has a compile time upper bound on a filename
     path.  Use that and realpath() to canonicalize the name.  This is
     the most common case.  Note that, if there isn't a compile time
     upper bound, you want to avoid realpath() at all costs.  */
#if defined (HAVE_REALPATH) && defined (PATH_MAX)
  {
    char buf[PATH_MAX];
    const char *rp = realpath (filename, buf);

    if (rp == NULL)
      rp = filename;
    return xstrdup (rp);
  }
#endif /* HAVE_REALPATH */

  /* Method 2: The host system (i.e., GNU) has the function
     canonicalize_file_name() which malloc's a chunk of memory and
     returns that, use that.  */
#if defined(HAVE_CANONICALIZE_FILE_NAME)
  {
    char *rp = canonicalize_file_name (filename);

    if (rp == NULL)
      return xstrdup (filename);
    else
      return rp;
  }
#endif

  /* FIXME: cagney/2002-11-13:

     Method 2a: Use realpath() with a NULL buffer.  Some systems, due
     to the problems described in method 3, have modified their
     realpath() implementation so that it will allocate a buffer when
     NULL is passed in.  Before this can be used, though, some sort of
     configure time test would need to be added.  Otherwize the code
     will likely core dump.  */

  /* Method 3: Now we're getting desperate!  The system doesn't have a
     compile time buffer size and no alternative function.  Query the
     OS, using pathconf(), for the buffer limit.  Care is needed
     though, some systems do not limit PATH_MAX (return -1 for
     pathconf()) making it impossible to pass a correctly sized buffer
     to realpath() (it could always overflow).  On those systems, we
     skip this.  */
#if defined (HAVE_REALPATH) && defined (_PC_PATH_MAX) && defined(HAVE_ALLOCA)
  {
    /* Find out the max path size.  */
    long path_max = pathconf ("/", _PC_PATH_MAX);

    if (path_max > 0)
      {
	/* PATH_MAX is bounded.  */
	char *buf = alloca (path_max);
	char *rp = realpath (filename, buf);

	return xstrdup (rp ? rp : filename);
      }
  }
#endif

  /* The MS Windows method.  If we don't have realpath, we assume we
     don't have symlinks and just canonicalize to a Windows absolute
     path.  GetFullPath converts ../ and ./ in relative paths to
     absolute paths, filling in current drive if one is not given
     or using the current directory of a specified drive (eg, "E:foo").
     It also converts all forward slashes to back slashes.  */
  /* The file system is case-insensitive but case-preserving.
     So we do not lowercase the path.  Otherwise, we might not
     be able to display the original casing in a given path.  */
#if defined (_WIN32)
  {
    char buf[MAX_PATH];
    DWORD len = GetFullPathName (filename, MAX_PATH, buf, NULL);

    if (len > 0 && len < MAX_PATH)
      return xstrdup (buf);
  }
#endif

  /* This system is a lost cause, just dup the buffer.  */
  return xstrdup (filename);
}

/* Return a copy of FILENAME, with its directory prefix canonicalized
   by gdb_realpath.  */

char *
gdb_realpath_keepfile (const char *filename)
{
  const char *base_name = lbasename (filename);
  char *dir_name;
  char *real_path;
  char *result;

  /* Extract the basename of filename, and return immediately 
     a copy of filename if it does not contain any directory prefix.  */
  if (base_name == filename)
    return xstrdup (filename);

  dir_name = alloca ((size_t) (base_name - filename + 2));
  /* Allocate enough space to store the dir_name + plus one extra
     character sometimes needed under Windows (see below), and
     then the closing \000 character.  */
  strncpy (dir_name, filename, base_name - filename);
  dir_name[base_name - filename] = '\000';

#ifdef HAVE_DOS_BASED_FILE_SYSTEM
  /* We need to be careful when filename is of the form 'd:foo', which
     is equivalent of d:./foo, which is totally different from d:/foo.  */
  if (strlen (dir_name) == 2 && isalpha (dir_name[0]) && dir_name[1] == ':')
    {
      dir_name[2] = '.';
      dir_name[3] = '\000';
    }
#endif

  /* Canonicalize the directory prefix, and build the resulting
     filename.  If the dirname realpath already contains an ending
     directory separator, avoid doubling it.  */
  real_path = gdb_realpath (dir_name);
  if (IS_DIR_SEPARATOR (real_path[strlen (real_path) - 1]))
    result = concat (real_path, base_name, (char *) NULL);
  else
    result = concat (real_path, SLASH_STRING, base_name, (char *) NULL);

  xfree (real_path);
  return result;
}

ULONGEST
align_up (ULONGEST v, int n)
{
  /* Check that N is really a power of two.  */
  gdb_assert (n && (n & (n-1)) == 0);
  return (v + n - 1) & -n;
}

ULONGEST
align_down (ULONGEST v, int n)
{
  /* Check that N is really a power of two.  */
  gdb_assert (n && (n & (n-1)) == 0);
  return (v & -n);
}

/* See utils.h.  */

LONGEST
gdb_sign_extend (LONGEST value, int bit)
{
  gdb_assert (bit >= 1 && bit <= 8 * sizeof (LONGEST));

  if (((value >> (bit - 1)) & 1) != 0)
    {
      LONGEST signbit = ((LONGEST) 1) << (bit - 1);

      value = (value ^ signbit) - signbit;
    }

  return value;
}

/* Allocation function for the libiberty hash table which uses an
   obstack.  The obstack is passed as DATA.  */

void *
hashtab_obstack_allocate (void *data, size_t size, size_t count)
{
  unsigned int total = size * count;
  void *ptr = obstack_alloc ((struct obstack *) data, total);

  memset (ptr, 0, total);
  return ptr;
}

/* Trivial deallocation function for the libiberty splay tree and hash
   table - don't deallocate anything.  Rely on later deletion of the
   obstack.  DATA will be the obstack, although it is not needed
   here.  */

void
dummy_obstack_deallocate (void *object, void *data)
{
  return;
}

/* The bit offset of the highest byte in a ULONGEST, for overflow
   checking.  */

#define HIGH_BYTE_POSN ((sizeof (ULONGEST) - 1) * HOST_CHAR_BIT)

/* True (non-zero) iff DIGIT is a valid digit in radix BASE,
   where 2 <= BASE <= 36.  */

static int
is_digit_in_base (unsigned char digit, int base)
{
  if (!isalnum (digit))
    return 0;
  if (base <= 10)
    return (isdigit (digit) && digit < base + '0');
  else
    return (isdigit (digit) || tolower (digit) < base - 10 + 'a');
}

static int
digit_to_int (unsigned char c)
{
  if (isdigit (c))
    return c - '0';
  else
    return tolower (c) - 'a' + 10;
}

/* As for strtoul, but for ULONGEST results.  */

ULONGEST
strtoulst (const char *num, const char **trailer, int base)
{
  unsigned int high_part;
  ULONGEST result;
  int minus = 0;
  int i = 0;

  /* Skip leading whitespace.  */
  while (isspace (num[i]))
    i++;

  /* Handle prefixes.  */
  if (num[i] == '+')
    i++;
  else if (num[i] == '-')
    {
      minus = 1;
      i++;
    }

  if (base == 0 || base == 16)
    {
      if (num[i] == '0' && (num[i + 1] == 'x' || num[i + 1] == 'X'))
	{
	  i += 2;
	  if (base == 0)
	    base = 16;
	}
    }

  if (base == 0 && num[i] == '0')
    base = 8;

  if (base == 0)
    base = 10;

  if (base < 2 || base > 36)
    {
      errno = EINVAL;
      return 0;
    }

  result = high_part = 0;
  for (; is_digit_in_base (num[i], base); i += 1)
    {
      result = result * base + digit_to_int (num[i]);
      high_part = high_part * base + (unsigned int) (result >> HIGH_BYTE_POSN);
      result &= ((ULONGEST) 1 << HIGH_BYTE_POSN) - 1;
      if (high_part > 0xff)
	{
	  errno = ERANGE;
	  result = ~ (ULONGEST) 0;
	  high_part = 0;
	  minus = 0;
	  break;
	}
    }

  if (trailer != NULL)
    *trailer = &num[i];

  result = result + ((ULONGEST) high_part << HIGH_BYTE_POSN);
  if (minus)
    return -result;
  else
    return result;
}

/* Simple, portable version of dirname that does not modify its
   argument.  */

char *
ldirname (const char *filename)
{
  const char *base = lbasename (filename);
  char *dirname;

  while (base > filename && IS_DIR_SEPARATOR (base[-1]))
    --base;

  if (base == filename)
    return NULL;

  dirname = xmalloc (base - filename + 2);
  memcpy (dirname, filename, base - filename);

  /* On DOS based file systems, convert "d:foo" to "d:.", so that we
     create "d:./bar" later instead of the (different) "d:/bar".  */
  if (base - filename == 2 && IS_ABSOLUTE_PATH (base)
      && !IS_DIR_SEPARATOR (filename[0]))
    dirname[base++ - filename] = '.';

  dirname[base - filename] = '\0';
  return dirname;
}

/* Call libiberty's buildargv, and return the result.
   If buildargv fails due to out-of-memory, call nomem.
   Therefore, the returned value is guaranteed to be non-NULL,
   unless the parameter itself is NULL.  */

char **
gdb_buildargv (const char *s)
{
  char **argv = buildargv (s);

  if (s != NULL && argv == NULL)
    malloc_failure (0);
  return argv;
}

int
compare_positive_ints (const void *ap, const void *bp)
{
  /* Because we know we're comparing two ints which are positive,
     there's no danger of overflow here.  */
  return * (int *) ap - * (int *) bp;
}

/* String compare function for qsort.  */

int
compare_strings (const void *arg1, const void *arg2)
{
  const char **s1 = (const char **) arg1;
  const char **s2 = (const char **) arg2;

  return strcmp (*s1, *s2);
}

#define AMBIGUOUS_MESS1	".\nMatching formats:"
#define AMBIGUOUS_MESS2	\
  ".\nUse \"set gnutarget format-name\" to specify the format."

const char *
gdb_bfd_errmsg (bfd_error_type error_tag, char **matching)
{
  char *ret, *retp;
  int ret_len;
  char **p;

  /* Check if errmsg just need simple return.  */
  if (error_tag != bfd_error_file_ambiguously_recognized || matching == NULL)
    return bfd_errmsg (error_tag);

  ret_len = strlen (bfd_errmsg (error_tag)) + strlen (AMBIGUOUS_MESS1)
            + strlen (AMBIGUOUS_MESS2);
  for (p = matching; *p; p++)
    ret_len += strlen (*p) + 1;
  ret = xmalloc (ret_len + 1);
  retp = ret;
  make_cleanup (xfree, ret);

  strcpy (retp, bfd_errmsg (error_tag));
  retp += strlen (retp);

  strcpy (retp, AMBIGUOUS_MESS1);
  retp += strlen (retp);

  for (p = matching; *p; p++)
    {
      sprintf (retp, " %s", *p);
      retp += strlen (retp);
    }
  xfree (matching);

  strcpy (retp, AMBIGUOUS_MESS2);

  return ret;
}

/* Return ARGS parsed as a valid pid, or throw an error.  */

int
parse_pid_to_attach (char *args)
{
  unsigned long pid;
  char *dummy;

  if (!args)
    error_no_arg (_("process-id to attach"));

  dummy = args;
  pid = strtoul (args, &dummy, 0);
  /* Some targets don't set errno on errors, grrr!  */
  if ((pid == 0 && dummy == args) || dummy != &args[strlen (args)])
    error (_("Illegal process-id: %s."), args);

  return pid;
}

/* Helper for make_bpstat_clear_actions_cleanup.  */

static void
do_bpstat_clear_actions_cleanup (void *unused)
{
  bpstat_clear_actions ();
}

/* Call bpstat_clear_actions for the case an exception is throw.  You should
   discard_cleanups if no exception is caught.  */

struct cleanup *
make_bpstat_clear_actions_cleanup (void)
{
  return make_cleanup (do_bpstat_clear_actions_cleanup, NULL);
}

/* Check for GCC >= 4.x according to the symtab->producer string.  Return minor
   version (x) of 4.x in such case.  If it is not GCC or it is GCC older than
   4.x return -1.  If it is GCC 5.x or higher return INT_MAX.  */

int
producer_is_gcc_ge_4 (const char *producer)
{
  const char *cs;
  int major, minor;

  if (producer == NULL)
    {
      /* For unknown compilers expect their behavior is not compliant.  For GCC
	 this case can also happen for -gdwarf-4 type units supported since
	 gcc-4.5.  */

      return -1;
    }

  /* Skip any identifier after "GNU " - such as "C++" or "Java".  */

  if (strncmp (producer, "GNU ", strlen ("GNU ")) != 0)
    {
      /* For non-GCC compilers expect their behavior is not compliant.  */

      return -1;
    }
  cs = &producer[strlen ("GNU ")];
  while (*cs && !isdigit (*cs))
    cs++;
  if (sscanf (cs, "%d.%d", &major, &minor) != 2)
    {
      /* Not recognized as GCC.  */

      return -1;
    }

  if (major < 4)
    return -1;
  if (major > 4)
    return INT_MAX;
  return minor;
}

/* Helper for make_cleanup_free_char_ptr_vec.  */

static void
do_free_char_ptr_vec (void *arg)
{
  VEC (char_ptr) *char_ptr_vec = arg;

  free_char_ptr_vec (char_ptr_vec);
}

/* Make cleanup handler calling xfree for each element of CHAR_PTR_VEC and
   final VEC_free for CHAR_PTR_VEC itself.

   You must not modify CHAR_PTR_VEC after this cleanup registration as the
   CHAR_PTR_VEC base address may change on its updates.  Contrary to VEC_free
   this function does not (cannot) clear the pointer.  */

struct cleanup *
make_cleanup_free_char_ptr_vec (VEC (char_ptr) *char_ptr_vec)
{
  return make_cleanup (do_free_char_ptr_vec, char_ptr_vec);
}

/* Substitute all occurences of string FROM by string TO in *STRINGP.  *STRINGP
   must come from xrealloc-compatible allocator and it may be updated.  FROM
   needs to be delimited by IS_DIR_SEPARATOR or DIRNAME_SEPARATOR (or be
   located at the start or end of *STRINGP.  */

void
substitute_path_component (char **stringp, const char *from, const char *to)
{
  char *string = *stringp, *s;
  const size_t from_len = strlen (from);
  const size_t to_len = strlen (to);

  for (s = string;;)
    {
      s = strstr (s, from);
      if (s == NULL)
	break;

      if ((s == string || IS_DIR_SEPARATOR (s[-1])
	   || s[-1] == DIRNAME_SEPARATOR)
          && (s[from_len] == '\0' || IS_DIR_SEPARATOR (s[from_len])
	      || s[from_len] == DIRNAME_SEPARATOR))
	{
	  char *string_new;

	  string_new = xrealloc (string, (strlen (string) + to_len + 1));

	  /* Relocate the current S pointer.  */
	  s = s - string + string_new;
	  string = string_new;

	  /* Replace from by to.  */
	  memmove (&s[to_len], &s[from_len], strlen (&s[from_len]) + 1);
	  memcpy (s, to, to_len);

	  s += to_len;
	}
      else
	s++;
    }

  *stringp = string;
}

#ifdef HAVE_WAITPID

#ifdef SIGALRM

/* SIGALRM handler for waitpid_with_timeout.  */

static void
sigalrm_handler (int signo)
{
  /* Nothing to do.  */
}

#endif

/* Wrapper to wait for child PID to die with TIMEOUT.
   TIMEOUT is the time to stop waiting in seconds.
   If TIMEOUT is zero, pass WNOHANG to waitpid.
   Returns PID if it was successfully waited for, otherwise -1.

   Timeouts are currently implemented with alarm and SIGALRM.
   If the host does not support them, this waits "forever".
   It would be odd though for a host to have waitpid and not SIGALRM.  */

pid_t
wait_to_die_with_timeout (pid_t pid, int *status, int timeout)
{
  pid_t waitpid_result;

  gdb_assert (pid > 0);
  gdb_assert (timeout >= 0);

  if (timeout > 0)
    {
#ifdef SIGALRM
#if defined (HAVE_SIGACTION) && defined (SA_RESTART)
      struct sigaction sa, old_sa;

      sa.sa_handler = sigalrm_handler;
      sigemptyset (&sa.sa_mask);
      sa.sa_flags = 0;
      sigaction (SIGALRM, &sa, &old_sa);
#else
      void (*ofunc) ();

      ofunc = (void (*)()) signal (SIGALRM, sigalrm_handler);
#endif

      alarm (timeout);
#endif

      waitpid_result = waitpid (pid, status, 0);

#ifdef SIGALRM
      alarm (0);
#if defined (HAVE_SIGACTION) && defined (SA_RESTART)
      sigaction (SIGALRM, &old_sa, NULL);
#else
      signal (SIGALRM, ofunc);
#endif
#endif
    }
  else
    waitpid_result = waitpid (pid, status, WNOHANG);

  if (waitpid_result == pid)
    return pid;
  else
    return -1;
}

#endif /* HAVE_WAITPID */

/* Provide fnmatch compatible function for FNM_FILE_NAME matching of host files.
   Both FNM_FILE_NAME and FNM_NOESCAPE must be set in FLAGS.

   It handles correctly HAVE_DOS_BASED_FILE_SYSTEM and
   HAVE_CASE_INSENSITIVE_FILE_SYSTEM.  */

int
gdb_filename_fnmatch (const char *pattern, const char *string, int flags)
{
  gdb_assert ((flags & FNM_FILE_NAME) != 0);

  /* It is unclear how '\' escaping vs. directory separator should coexist.  */
  gdb_assert ((flags & FNM_NOESCAPE) != 0);

#ifdef HAVE_DOS_BASED_FILE_SYSTEM
  {
    char *pattern_slash, *string_slash;

    /* Replace '\' by '/' in both strings.  */

    pattern_slash = alloca (strlen (pattern) + 1);
    strcpy (pattern_slash, pattern);
    pattern = pattern_slash;
    for (; *pattern_slash != 0; pattern_slash++)
      if (IS_DIR_SEPARATOR (*pattern_slash))
	*pattern_slash = '/';

    string_slash = alloca (strlen (string) + 1);
    strcpy (string_slash, string);
    string = string_slash;
    for (; *string_slash != 0; string_slash++)
      if (IS_DIR_SEPARATOR (*string_slash))
	*string_slash = '/';
  }
#endif /* HAVE_DOS_BASED_FILE_SYSTEM */

#ifdef HAVE_CASE_INSENSITIVE_FILE_SYSTEM
  flags |= FNM_CASEFOLD;
#endif /* HAVE_CASE_INSENSITIVE_FILE_SYSTEM */

  return fnmatch (pattern, string, flags);
}

/* Provide a prototype to silence -Wmissing-prototypes.  */
extern initialize_file_ftype _initialize_utils;

void
_initialize_utils (void)
{
  add_internal_problem_command (&internal_error_problem);
  add_internal_problem_command (&internal_warning_problem);
}
@


1.309
log
@warn if "source" fails to open the file when from_tty == 0

Consider the following example:

    % gdb -q -batch -ex 'source nonexistant-file'
    [nothing]

One would have at least expected the debugger to warn about
not finding the file, similar to the error shown when using
a more interactive mode. Eg:

    (gdb) source nonexistant-file
    nonexistant-file: No such file or directory.

Not raising an error appears to be intentional, presumably in order
to prevent this situation from stoping the execution of a GDB script.
But the lack of at least a warning makes it harder for a user to
diagnose any issue, if the file was expected to be there and readable.

This patch adds a warning in that case:

    % gdb -q -batch -ex 'source nonexistant-file'
    warning: nonexistant-file: No such file or directory.

gdb/ChangeLog:

        * utils.h (perror_warning_with_name): Add declaration.
        * utils.c (perror_warning_with_name): New function.
        * cli/cli-cmds.c (source_script_with_search): Add call to
        perror_warning_with_name if from_tty is nul.

gdb/testsuite/ChangeLog:

        * gdb.base/source-nofile.gdb: New file.
        * gdb.base/source.exp: Add two tests verifying the behavior when
        the "source" command is given a non-existant filename.
@
text
@d3236 46
@


1.308
log
@new function perror_string extracted out of throw_perror_with_name.

The main purpose of this patch is to extract the part of
throw_perror_with_name that computes a string providing the system
error message combined with a prefix string.  This will become useful
later on to provide a routine which prints a warning using that
perror_string, rather than throwing an error.

gdb/ChangeLog:

        * utils.c (perror_string): New function, extracted out of
        throw_perror_with_name.
        (throw_perror_with_name): Rework to use perror_string.
@
text
@d1009 13
@


1.307
log
@Constification of parse_linespec and fallout:
https://sourceware.org/ml/gdb-patches/2013-09/msg01017.html
https://sourceware.org/ml/gdb-patches/2013-09/msg01018.html
https://sourceware.org/ml/gdb-patches/2013-09/msg01019.html
https://sourceware.org/ml/gdb-patches/2013-09/msg01020.html
@
text
@d960 20
a986 1
  char *err;
d989 2
a990 5
  err = safe_strerror (errno);
  combined = (char *) alloca (strlen (err) + strlen (string) + 3);
  strcpy (combined, string);
  strcat (combined, ": ");
  strcat (combined, err);
@


1.306
log
@	* src/gdb/utils.c (init_page_info): Only call tgetnum function
	if rl_get_screen_size did not return useful values.
@
text
@d1415 1
a1415 1
parse_escape (struct gdbarch *gdbarch, char **string_ptr)
@


1.305
log
@Remove error_pre_print and quit_pre_print.

  http://sourceware.org/ml/gdb-patches/2013-07/msg00844.html

gdb/ChangeLog

        * cli/cli-script.c (script_from_file): Remove use of
        error_pre_print.
        * main.c (captured_main): Remove use of error_pre_print and
        quit_pre_print.
        * utils.c (error_pre_print, quit_pre_print): Remove.
        * utils.h (error_pre_print, quit_pre_print): Likewise.
@
text
@d1663 6
a1668 2
      /* Readline should have fetched the termcap entry for us.  */
      if (tgetnum ("li") < 0 || getenv ("EMACS"))
d1670 3
a1672 3
	  /* The number of lines per page is not mentioned in the
	     terminal description.  This probably means that paging is
	     not useful (e.g. emacs shell window), so disable paging.  */
@


1.304
log
@Remove deprecated_throw_reason from internal_verror.

  http://sourceware.org/ml/gdb-patches/2013-07/msg00776.html

gdb/ChangeLog

        * utils.c (internal_verror): Replace use of deprecated_throw_reason
        with call to fatal.
@
text
@a187 8
/* String to be printed before error messages, if any.  */

char *error_pre_print;

/* String to be printed before quit messages, if any.  */

char *quit_pre_print;

@


1.303
log
@Normalize on PATH_MAX instead of MAXPATHLEN throughout.

With the pathmax gnulib module in place, we can use PATH_MAX
consistently throughout, instead of the current mixbag of PATH_MAX and
MAXPATHLEN uses.  It's no longer necessary to include sys/param.h
(supposedly, I can't check all ports touched here) for MAXPATHLEN.

Don't remove sys/param.h from GDB's configure.ac, as later tests in
the file use HAVE_SYS_PARAM_H checks.

Tested on x86_64 Fedora 17.

Also cross-built for --host=i686-w64-mingw32, and --host=i586-pc-msdosdjgpp.

gdb/
2013-07-01  Pedro Alves  <palves@@redhat.com>

	* defs.h: Include "pathmax.h".
	* utils.c: Don't include sys/param.h.
	(gdb_realpath): Remove code that checks for MAXPATHLEN.
	* solib-ia64-hpux.c (ia64_hpux_handle_load_event): Use PATH_MAX
	instead of MAXPATHLEN.
	* solib-sunos.c: Don't include sys/param.h.
	* xcoffread.c: Don't include sys/param.h.
	* bsd-kvm.c: Don't include sys/param.h.
	* darwin-nat.c: Don't include sys/param.h.
	(darwin_pid_to_exec_file): Use PATH_MAX instead of MAXPATHLEN.
	* darwin-nat-info.c: Don't include sys/param.h.
	* fbsd-nat.c (fbsd_pid_to_exec_file): Use PATH_MAX instead of
	MAXPATHLEN.
	* i386obsd-nat.c: Don't include sys/param.h.
	* inf-child.c: Don't include sys/param.h.
	(inf_child_fileio_readlink): Use PATH_MAX instead of MAXPATHLEN.
	* linux-fork.c: Don't include sys/param.h.
	(fork_save_infrun_state): Use PATH_MAX instead of MAXPATHLEN.
	* linux-nat.c: Don't include sys/param.h.
	(linux_child_pid_to_exec_file, linux_proc_pending_signals)
	(linux_proc_pending_signals): Use PATH_MAX instead of MAXPATHLEN.
	* m68klinux-nat.c: Don't include sys/param.h.
	* nbsd-nat.c: Don't include sys/param.h.
	(nbsd_pid_to_exec_file): Use PATH_MAX instead of MAXPATHLEN.
	* ppc-linux-nat.c: Don't include sys/param.h.
	* rs6000-nat.c: Don't include sys/param.h.
	* spu-linux-nat.c. Don't include sys/param.h.
	* windows-nat.c: Don't include sys/param.h.
	* xtensa-linux-nat.c: Don't include sys/param.h.
	* config/i386/nm-fbsd.h: Don't include sys/param.h.

gdb/gdbserver/
2013-07-01  Pedro Alves  <palves@@redhat.com>

	* server.h: Include "pathmax.h".
	* linux-low.c: Don't include sys/param.h.
	(linux_pid_exe_is_elf_64_file): Use PATH_MAX instead of
	MAXPATHLEN.
	* win32-low.c: Don't include sys/param.h.
	(win32_create_inferior): Use PATH_MAX instead of MAXPATHLEN.
@
text
@d834 1
a834 1
  deprecated_throw_reason (RETURN_ERROR);
@


1.302
log
@utils.c: pathconf call, check for _PC_PATH_MAX instead of HAVE_UNISTD_H.

This check in utils.c for HAVE_UNISTD_H is being used as proxy for
"HAVE_PATHCONF", as pathconf is supposed to be declared in unistd.h.

It's possible that there are systems out there that have realpath,
unistd.h and alloca, but not pathconf+_PC_PATH_MAX.  I don't know of
any by heart, but if we import gnulib's unistd module (which a
following patch will do), then unistd.h ends up always available, so
the check ends up incorrect.  As pathconf is being called with
_PC_PATH_MAX, check for that instead.

gdb/
2013-07-01  Pedro Alves  <palves@@redhat.com>

	* utils.c <pathconf/_PC_PATH_MAX use>: Check if _PC_PATH_MAX is
	defined instead of checking HAVE_UNISTD_H.
@
text
@a68 2
#include <sys/param.h>		/* For MAXPATHLEN */

d3131 1
a3131 1
#if defined(HAVE_REALPATH)
a3132 1
# if defined (PATH_MAX)
a3133 6
#  define USE_REALPATH
# elif defined (MAXPATHLEN)
    char buf[MAXPATHLEN];
#  define USE_REALPATH
# endif
# if defined (USE_REALPATH)
a3138 1
# endif
@


1.301
log
@Fix PR symtab/15391

PR symtab/15391 is a failure with the DW_OP_GNU_implicit_pointer
feature.

I tracked it down to a logic error in read_pieced_value.  The code
truncates this_size_bits according to the type size and offset too
early -- it should do it after taking bits_to_skip into account.

This patch fixes the bug.

While testing this, I also tripped across a latent bug because
indirect_pieced_value does not sign-extend where needed.  This patch
fixes this bug as well.

Finally, Pedro pointed out that a previous version implemented sign
extension incorrectly.  This version introduces a new gdb_sign_extend
function for this.  A couple of notes on this function:

* It has the gdb_ prefix to avoid clashes with various libraries that
  felt free to avoid proper namespacing.  There is a "sign_extend"
  function in a Tile GX header, in an SOM-related BFD header (and in
  sh64-tdep.c and as a macro in arm-wince-tdep.c, but those are
  ours...)

* I looked at all the sign extensions in gdb and didn't see ones that
  I felt comfortable converting to use this function; in large part
  because I don't have a good way to test the conversion.

Built and regtested on x86-64 Fedora 18.  New test cases included;
this required a minor addition to the DWARF assembler.  Note that the
DWARF CU made by implptrpiece.exp uses a funny pointer size in order
to show the sign-extension bug on all platforms.

	* dwarf2loc.c (read_pieced_value): Truncate this_size_bits
	after taking bits_to_skip into account.  Sign extend byte_offset.
	* utils.h (gdb_sign_extend): Declare.
	* utils.c (gdb_sign_extend): New function.

	* gdb.dwarf2/implptrpiece.exp: New file.
	* gdb.dwarf2/implptrconst.exp (d): New variable.
	Print d.
	* lib/dwarf2.exp (Dwarf::_location): Handle DW_OP_piece.
@
text
@d3182 1
a3182 1
#if defined (HAVE_REALPATH) && defined (HAVE_UNISTD_H) && defined(HAVE_ALLOCA)
@


1.300
log
@fix compile_rx_or_error

compile_rx_or_error looks like a constructor, but it can return NULL.
This patch changes it to remove the NULL return, making it work
like any other cleanup constructor.

This is a stylistic patch but I think it is also better for code to
follow the normal conventions.

	* probe.c (collect_probes): Check arguments for NULL before
	calling compile_rx_or_error.
	* utils.c (compile_rx_or_error): Require 'rx' to be non-NULL.
	Remove NULL return.
@
text
@d3237 17
@


1.299
log
@fix up cleanup handling in internal_vproblem

internal_vproblem can return, so this introduces proper cleanup
handling there.  Otherwise it may make a cleanup that is leaked.

	* utils.c (internal_vproblem): Call do_cleanups.
@
text
@d1130 2
a1131 2
   cleanup to free the resulting pattern on success.  If RX is NULL,
   this does nothing and returns NULL.  */
d1138 1
a1138 2
  if (!rx)
    return NULL;
@


1.298
log
@	PR c++/13588:
	* NEWS: Update.
	* break-catch-throw.c (struct exception_catchpoint)
	<exception_rx, pattern>: New fields.
	(fetch_probe_arguments, dtor_exception_catchpoint)
	(check_status_exception_catchpoint)
	(print_one_detail_exception_catchpoint): New functions.
	(handle_gnu_v3_exceptions): Add "except_rx" argument.
	Compile regular expression if needed.
	(extract_exception_regexp): New function.
	(catch_exception_command_1): Use extract_exception_regexp.
	(compute_exception): Use fetch_probe_arguments.
	(initialize_throw_catchpoint_ops): Set dtor, print_one_detail,
	and check_status fields.
	* cp-abi.c (cplus_typename_from_type_info): New function.
	* cp-abi.h (cplus_typename_from_type_info): Declare.
	(struct cp_abi_ops) <get_typename_from_type_info>: New field.
	* gdb_regex.h (compile_rx_or_error): Declare.
	* gnu-v3-abi.c (gnuv3_get_typename_from_type_info): Update
	comment.
	(init_gnuv3_ops): Set get_type_from_type_info field.
	* probe.c (compile_rx_or_error): Move...
	* utils.c (compile_rx_or_error): ... here.
gdb/doc
	* gdb.texinfo (Set Catchpoints): Document regexp syntax for
	exception catchpoints.
gdb/testsuite
	* gdb.cp/exceptprint.exp: Add regexp catchpoint tests.
@
text
@d716 1
d825 1
@


1.297
log
@Accept "set foo unlimited" in integer/uinteger/zuinteger_unlimited commands.

Currently, several commands take "0" or "-1" to mean "unlimited".

"show" knows when to print "unlimited":

 (gdb) show height
 Number of lines gdb thinks are in a page is 45.
 (gdb) set height 0
 (gdb) show height
 Number of lines gdb thinks are in a page is unlimited.

However, the user can't herself specify "unlimited" directly:

 (gdb) set height unlimited
 No symbol table is loaded.  Use the "file" command.
 (gdb)

This patch addresses that, by adjusting the set handler for all
integer/uinteger/zuinteger_unlimited commands to accept literal
"unlimited".  It also installs a completer.  Presently, we complete on
symbols by default, and at
<http://sourceware.org/ml/gdb-patches/2013-03/msg00864.html> I've
shown a WIP prototype that tried to keep that half working in these
commands.  In the end, it turned out to be more complicated than
justifiable, IMO.  It's super rare to want to pass the value of a
variable/symbol in the program to a GDB set/show knob.  That'll still
work, it's just that we won't assist with completion anymore.  This
patch just sticks with the simple, and completes on "unlimited", and
nothing else.  This simplification means that

  "set he<tab><tab>"

is all it takes to get to:

  "set height unlimited"

The patch then goes through all integer/uinteger/zuinteger_unlimited
commands in the tree, and updates both the online help and the manual
to mention that "unlimited" is accepted in addition to 0/-1.  In the
cases where the command had no online help text at all, this adds it.
I've tried to make the texts read in a way that "unlimited" is
suggested before "0" or "-1" is.

Tested on x86_64 Fedora 17.

gdb/
2013-04-10  Pedro Alves  <palves@@redhat.com>

	* cli/cli-decode.c (integer_unlimited_completer): New function.
	(add_setshow_integer_cmd, add_setshow_uinteger_cmd)
	(add_setshow_zuinteger_unlimited_cmd): Install the "unlimited"
	completer.
	* cli/cli-setshow.c: Include "cli/cli-utils.h".
	(is_unlimited_literal): New function.
	(do_set_command): Handle literal "unlimited" arguments.
	* frame.c (_initialize_frame) <set backtrace limit>: Document
	"unlimited".
	* printcmd.c (_initialize_printcmd) <set print
	max-symbolic-offset>: Add help text.
	* record-full.c (_initialize_record_full) <set record full
	insn-number-max>: Likewise.
	* record.c (_initialize_record) <set record
	instruction-history-size, set record function-call-history-size>:
	Add help text.
	* ser-tcp.c (_initialize_ser_tcp) <set tcp connect-timeout>: Add
	help text.
	* tracepoint.c (_initialize_tracepoint) <set trace-buffer-size>:
	Likewise.
	* source.c (_initialize_source) <set listsize>: Add help text.
	* utils.c (initialize_utils) <set height, set width>: Likewise.
	<set pagination>: Mention "set height unlimited".
	* valprint.c (_initialize_valprint) <set print elements, set print
	repeats>: Document "unlimited".

gdb/doc/
2013-04-10  Pedro Alves  <palves@@redhat.com>

	* gdb.texinfo (Process Record and Replay): Document that "set
	record full insn-number-max", "set record
	instruction-history-size" and "set record
	function-call-history-size" accept "unlimited".
	(Backtrace): Document that "set backtrace limit" accepts
	"unlimited".
	(List): Document that "set listsize" accepts "unlimited".
	(Print Settings)" Document that "set print max-symbolic-offset",
	"set print elements" and "set print repeats" accept "unlimited".
	(Starting and Stopping Trace Experiments): Document that "set
	trace-buffer-size" accepts "unlimited".
	(Remote Configuration): Document that "set tcp connect-timeout"
	accepts "unlimited".
	(Command History): Document that "set history size" accepts
	"unlimited".
	(Screen Size): Document that "set height" and "set width" accepts
	"unlimited".  Adjust "set pagination"'s description to suggest
	"set height unlimited" instead of "set height 0".

gdb/testsuite/
2013-04-10  Pedro Alves  <palves@@redhat.com>

	* gdb.base/completion.exp: Test "set height", "set listsize" and
	"set trace-buffer-size" completion.
	* gdb.base/setshow.exp: Test "set height unlimited".
	* gdb.trace/trace-buffer-size.exp: Test "set trace-buffer-size
	unlimited".
@
text
@d1127 24
@


1.296
log
@gdb/
	* exceptions.h (enum errors): New entry TARGET_CLOSE_ERROR.
	* remote.c (trace_error): Remove the special handling of '2'.
	(readchar) <SERIAL_EOF>
	(readchar) <SERIAL_ERROR>
	(getpkt_or_notif_sane_1): Use TARGET_CLOSE_ERROR for them.
	(remote_get_trace_status): Call throw_exception if EX is
	TARGET_CLOSE_ERROR.
	* utils.c (perror_with_name): Rename to ...
	(throw_perror_with_name): ... here.  New parameter errcode, describe it
	in the function comment.
	(perror_with_name): New function wrapper.
	* utils.h (enum errors): New stub declaration.
	(throw_perror_with_name): New declaration.

gdb/testsuite/
	* gdb.server/server-kill.c: New file.
	* gdb.server/server-kill.exp: New file.
@
text
@d2654 1
a2654 1
Setting this to zero prevents GDB from wrapping its output."),
d2664 1
a2664 1
Setting this to zero causes GDB never pause during output."),
d2677 1
a2677 1
Turning pagination off is an alternative to \"set height 0\"."),
@


1.295
log
@	New commands "mt set per-command {space,time,symtab} {on,off}".
	* NEWS: Add entry.
	* event-top.c: #include "maint.h".
	* main.c: #include "maint.h".
	* maint.c: #include <sys/time.h>, <time.h>, block.h, top.h,
	timeval-utils.h, maint.h, cli/cli-setshow.h.
	(per_command_time, per_command_space): New static globals.
	(per_command_symtab): New static global.
	(per_command_setlist, per_command_showlist): New static globals.
	(struct cmd_stats): Move here from utils.c.
	(set_per_command_time): Renamed from set_display_time in utils.c
	and moved here.  All callers updated.
	(set_per_command_space): Renamed from set_display_space in utils.c
	and moved here.  All callers updated.
	(count_symtabs_and_blocks): New function.
	(report_command_stats): Moved here from utils.c.  Add support for
	printing symtab stats.  Only print data if enabled before command
	executed.
	(make_command_stats_cleanup): Ditto.
	(sert_per_command_cmd, show_per_command_cmd): New functions.
	(_initialize_maint_cmds): Add new commands
	mt set per-command {space,time,symtab} {on,off}.
	* maint.h: New file.
	* top.c: #include "maint.h".
	* utils.c (reset_prompt_for_continue_wait_time): New function.
	(get_prompt_for_continue_wait_time): New function.
	* utils.h (reset_prompt_for_continue_wait_time): Declare
	(get_prompt_for_continue_wait_time): Declare.
	(make_command_stats_cleanup): Moved to maint.h.
	(set_display_time, set_display_space): Moved to maint.h and renamed
	to set_per_command_time, set_per_command_space.
	* cli/cli-setshow.c (parse_cli_boolean_value): Renamed from
	parse_binary_operation and made non-static.  Don't call error,
	just return an error marker.  All callers updated.
	* cli/cli-setshow.h (parse_cli_boolean_value): Declare.

	doc/
	* gdb.texinfo (Maintenance Commands): Add docs for
	"mt set per-command {space,time,symtab} {on,off}".

	testsuite/
	* gdb.base/maint.exp: Update tests for per-command stats.
@
text
@d969 2
a970 2
   as the file name for which the error was encountered.
   Then return to command level.  */
d973 1
a973 1
perror_with_name (const char *string)
d990 9
a998 1
  error (_("%s."), combined);
@


1.294
log
@Fix -Wpointer-sign around strings/encoding conversions.

Trimmed for brevity:

$ make WERROR_CFLAGS="-Wpointer-sign -Werror" c-lang.o expprint.o utils.o valprint.o varobj.o -k 2>&1 1>/dev/null
../../src/gdb/c-lang.c: In function ‘parse_one_string’:
../../src/gdb/c-lang.c:540:8: error: pointer targets in passing argument 3 of ‘convert_between_encodings’ differ in signedness [-Werror=pointer-sign]
In file included from ../../src/gdb/c-lang.c:30:0:
../../src/gdb/charset.h:64:6: note: expected ‘const gdb_byte *’ but argument is of type ‘char *’

../../src/gdb/expprint.c: In function ‘print_subexp_standard’:
../../src/gdb/expprint.c:205:2: error: pointer targets in passing argument 3 of ‘current_language->la_printstr’ differ in signedness [-Werror=pointer-sign]
../../src/gdb/expprint.c:205:2: note: expected ‘const gdb_byte *’ but argument is of type ‘char *’

cc1: all warnings being treated as errors
make: *** [expprint.o] Error 1
../../src/gdb/utils.c: In function ‘host_char_to_target’:
../../src/gdb/utils.c:1474:9: error: pointer targets in passing argument 3 of ‘convert_between_encodings’ differ in signedness [-Werror=pointer-sign]

../../src/gdb/varobj.c: In function ‘value_get_print_value’:
../../src/gdb/varobj.c:2934:8: error: pointer targets in return differ in signedness [-Werror=pointer-sign]
../../src/gdb/varobj.c:2968:12: error: pointer targets in assignment differ in signedness [-Werror=pointer-sign]
../../src/gdb/varobj.c:2971:3: error: pointer targets in return differ in signedness [-Werror=pointer-sign]
cc1: all warnings being treated as errors
make: *** [varobj.o] Error 1

As with the previous patch, the encoding conversion code works with
gdb_byte arrays as the generic buffers that hold strings of any
encoding/width.  This patch adds casts where appropriate.

gdb/
2013-03-07  Pedro Alves  <palves@@redhat.com>

	* c-lang.c (parse_one_string): Cast argument to gdb_byte *.
	* expprint.c (print_subexp_standard): Likewise.
	* utils.c (host_char_to_target): Likewise.
	* valprint.c (generic_emit_char, generic_printstr): Likewise.
	* varobj.c (value_get_print_value): Change type of local to char*.
	Cast it gdb_byte * in call to language printer.
@
text
@a546 111

/* If nonzero, display time usage both at startup and for each command.  */

static int display_time;

/* If nonzero, display space usage both at startup and for each command.  */

static int display_space;

/* Records a run time and space usage to be used as a base for
   reporting elapsed time or change in space.  In addition,
   the msg_type field indicates whether the saved time is from the
   beginning of GDB execution (0) or the beginning of an individual 
   command execution (1).  */
struct cmd_stats 
{
  int msg_type;
  long start_cpu_time;
  struct timeval start_wall_time;
  long start_space;
};

/* Set whether to display time statistics to NEW_VALUE (non-zero 
   means true).  */
void
set_display_time (int new_value)
{
  display_time = new_value;
}

/* Set whether to display space statistics to NEW_VALUE (non-zero
   means true).  */
void
set_display_space (int new_value)
{
  display_space = new_value;
}

/* As indicated by display_time and display_space, report GDB's elapsed time
   and space usage from the base time and space provided in ARG, which
   must be a pointer to a struct cmd_stat.  This function is intended
   to be called as a cleanup.  */
static void
report_command_stats (void *arg)
{
  struct cmd_stats *start_stats = (struct cmd_stats *) arg;
  int msg_type = start_stats->msg_type;

  if (display_time)
    {
      long cmd_time = get_run_time () - start_stats->start_cpu_time;
      struct timeval now_wall_time, delta_wall_time;

      gettimeofday (&now_wall_time, NULL);
      timeval_sub (&delta_wall_time,
		   &now_wall_time, &start_stats->start_wall_time);

      /* Subtract time spend in prompt_for_continue from walltime.  */
      timeval_sub (&delta_wall_time,
                   &delta_wall_time, &prompt_for_continue_wait_time);

      printf_unfiltered (msg_type == 0
			 ? _("Startup time: %ld.%06ld (cpu), %ld.%06ld (wall)\n")
			 : _("Command execution time: %ld.%06ld (cpu), %ld.%06ld (wall)\n"),
			 cmd_time / 1000000, cmd_time % 1000000,
			 (long) delta_wall_time.tv_sec,
			 (long) delta_wall_time.tv_usec);
    }

  if (display_space)
    {
#ifdef HAVE_SBRK
      char *lim = (char *) sbrk (0);

      long space_now = lim - lim_at_start;
      long space_diff = space_now - start_stats->start_space;

      printf_unfiltered (msg_type == 0
			 ? _("Space used: %ld (%s%ld during startup)\n")
			 : _("Space used: %ld (%s%ld for this command)\n"),
			 space_now,
			 (space_diff >= 0 ? "+" : ""),
			 space_diff);
#endif
    }
}

/* Create a cleanup that reports time and space used since its
   creation.  Precise messages depend on MSG_TYPE:
      0:  Initial time/space
      1:  Individual command time/space.  */
struct cleanup *
make_command_stats_cleanup (int msg_type)
{
  static const struct timeval zero_timeval = { 0 };
  struct cmd_stats *new_stat = XMALLOC (struct cmd_stats);
  
#ifdef HAVE_SBRK
  char *lim = (char *) sbrk (0);
  new_stat->start_space = lim - lim_at_start;
#endif

  new_stat->msg_type = msg_type;
  new_stat->start_cpu_time = get_run_time ();
  gettimeofday (&new_stat->start_wall_time, NULL);

  /* Initalize timer to keep track of how long we waited for the user.  */
  prompt_for_continue_wait_time = zero_timeval;

  return make_cleanup_dtor (report_command_stats, new_stat, xfree);
}
d1816 18
@


1.294.2.1
log
@gdb/
	* exceptions.h (enum errors): New entry TARGET_CLOSE_ERROR.
	* remote.c (trace_error): Remove the special handling of '2'.
	(readchar) <SERIAL_EOF>
	(readchar) <SERIAL_ERROR>
	(getpkt_or_notif_sane_1): Use TARGET_CLOSE_ERROR for them.
	(remote_get_trace_status): Call throw_exception if EX is
	TARGET_CLOSE_ERROR.
	* utils.c (perror_with_name): Rename to ...
	(throw_perror_with_name): ... here.  New parameter errcode, describe it
	in the function comment.
	(perror_with_name): New function wrapper.
	* utils.h (enum errors): New stub declaration.
	(throw_perror_with_name): New declaration.

gdb/testsuite/
	* gdb.server/server-kill.c: New file.
	* gdb.server/server-kill.exp: New file.
@
text
@d1080 2
a1081 2
   as the file name for which the error was encountered.  Use ERRCODE
   for the thrown exception.  Then return to command level.  */
d1084 1
a1084 1
throw_perror_with_name (enum errors errcode, const char *string)
d1101 1
a1101 9
  throw_error (errcode, _("%s."), combined);
}

/* See throw_perror_with_name, ERRCODE defaults here to GENERIC_ERROR.  */

void
perror_with_name (const char *string)
{
  throw_perror_with_name (GENERIC_ERROR, string);
@


1.293
log
@	* utils.c (initialize_utils): Improve doc strings of "set/show
	width", "set/show height", and "set/show pagination".
@
text
@d1474 2
a1475 1
			     &the_char, 1, 1, &host_data, translit_none);
@


1.292
log
@Move savestring to common/common-utils.c, make gdbserver use it.

This makes gdbserver share gdb's savestring, instead of baking its own.

Tested on x86_64 Fedora 17.

gdb/
2013-02-14  Pedro Alves  <palves@@redhat.com>

	* utils.c (savestring): Don't #undef it.  Move function to
	common/common-utils.c.
	* common/common-utils.c: Include gdb_string.h.
	(savestring): Move here from utils.c.
	* common/common-utils.h (savestring): Declare.

gdb/gdbserver/
2013-02-14  Pedro Alves  <palves@@redhat.com>

	* tracepoint.c (save_string): Delete.
	(add_tracepoint_action): Use savestring instead of save_string.
@
text
@d2735 4
a2738 2
Set number of characters gdb thinks are in a line."), _("\
Show number of characters gdb thinks are in a line."), NULL,
d2744 5
a2748 2
Set number of lines gdb thinks are in a page."), _("\
Show number of lines gdb thinks are in a page."), NULL,
d2757 5
a2761 2
Set state of pagination."), _("\
Show state of pagination."), NULL,
@


1.291
log
@savestring: Rename parameter 'size' to 'len'.

It's better to avoid needless confusion, and call string length,
length, instead of size, which is usually used to refer to sizeof of
the string (len+1):

	size_t len = strlen (str);
	size_t size = sizeof (str);

Tested on x86_64 Fedora 17.

2013-02-14  Pedro Alves  <palves@@redhat.com>

	* utils.c (savestring): Rename parameter 'size' to 'len'.
@
text
@a91 3
/* readline defines this.  */
#undef savestring

a1185 14
/* Make a copy of the string at PTR with LEN characters
   (and add a null character at the end in the copy).
   Uses malloc to get the space.  Returns the address of the copy.  */

char *
savestring (const char *ptr, size_t len)
{
  char *p = (char *) xmalloc (len + 1);

  memcpy (p, ptr, len);
  p[len] = 0;
  return p;
}

@


1.290
log
@gdb/
	Replace xfullpath calls by gdb_realpath calls.
	* cli/cli-cmds.c (find_and_open_script): Remove xfullpath from the
	function comment.
	* dwarf2read.c (dw2_map_expand_apply): Remove parameter full_path.
	Remove it from the iterate_over_some_symtabs call.
	(dw2_map_symtabs_matching_filename): Remove parameter full_path.
	Remove it from the dw2_map_expand_apply calls, remove a block handling
	it.
	* psymtab.c (partial_map_expand_apply): Remove parameter full_path.
	Remove it from the iterate_over_some_symtabs call.
	(partial_map_symtabs_matching_filename): Remove parameter full_path.
	Remove it from the partial_map_expand_apply calls, remove a block
	handling it.  Drop gdb_realpath call and cleanups from the real_path
	handling.
	* source.c (openp): Drop the comment part about xfullpath.  Replace
	xfullpath calls by gdb_realpath calls.
	(find_and_open_source): Replace xfullpath call by gdb_realpath call.
	* symfile.h (struct quick_symbol_functions): Remove parameter full_path
	from method map_symtabs_matching_filename and its comment.
	* symmisc.c (maintenance_print_msymbols): Replace xfullpath call by
	gdb_realpath call.
	* symtab.c (iterate_over_some_symtabs): Remove parameter full_path,
	remove it also from the function comment, remove a block handling it.
	Drop gdb_realpath call and cleanups from the real_path handling.
	(iterate_over_symtabs): Drop variable full_path and its use.
	* symtab.h (iterate_over_some_symtabs): Remove parameter full_path.
	* utils.c (xfullpath): Remove.
	* utils.h (xfullpath): Remove.

gdb/testsuite/
	* gdb.gdb/xfullpath.exp: Replace xfullpath calls by gdb_realpath calls.
@
text
@d1189 1
a1189 1
/* Make a copy of the string at PTR with SIZE characters
d1194 1
a1194 1
savestring (const char *ptr, size_t size)
d1196 1
a1196 1
  char *p = (char *) xmalloc (size + 1);
d1198 2
a1199 2
  memcpy (p, ptr, size);
  p[size] = 0;
@


1.289
log
@	* symfile.c (get_file_crc): Use bfd_calc_gnu_debuglink_crc32.
	* utils.c (gnu_debuglink_crc32): Remove.
	* utils.h (gnu_debuglink_crc32): Don't declare.
@
text
@a3288 46
/* Return a copy of FILENAME, with its directory prefix canonicalized
   by gdb_realpath.  */

char *
xfullpath (const char *filename)
{
  const char *base_name = lbasename (filename);
  char *dir_name;
  char *real_path;
  char *result;

  /* Extract the basename of filename, and return immediately 
     a copy of filename if it does not contain any directory prefix.  */
  if (base_name == filename)
    return xstrdup (filename);

  dir_name = alloca ((size_t) (base_name - filename + 2));
  /* Allocate enough space to store the dir_name + plus one extra
     character sometimes needed under Windows (see below), and
     then the closing \000 character.  */
  strncpy (dir_name, filename, base_name - filename);
  dir_name[base_name - filename] = '\000';

#ifdef HAVE_DOS_BASED_FILE_SYSTEM
  /* We need to be careful when filename is of the form 'd:foo', which
     is equivalent of d:./foo, which is totally different from d:/foo.  */
  if (strlen (dir_name) == 2 && isalpha (dir_name[0]) && dir_name[1] == ':')
    {
      dir_name[2] = '.';
      dir_name[3] = '\000';
    }
#endif

  /* Canonicalize the directory prefix, and build the resulting
     filename.  If the dirname realpath already contains an ending
     directory separator, avoid doubling it.  */
  real_path = gdb_realpath (dir_name);
  if (IS_DIR_SEPARATOR (real_path[strlen (real_path) - 1]))
    result = concat (real_path, base_name, (char *) NULL);
  else
    result = concat (real_path, SLASH_STRING, base_name, (char *) NULL);

  xfree (real_path);
  return result;
}

@


1.288
log
@gdb/
	* parse.c (parse_exp_in_context): New variable inner_chain.  Call
	make_cleanup_restore_current_language.  Call set_language.  Move
	OLD_CHAIN and INNER_CHAIN cleanups.
	* utils.c (do_restore_current_language)
	(make_cleanup_restore_current_language): New functions.
	* utils.h (make_cleanup_restore_current_language): New declaration.

gdb/testsuite/
	* gdb.cp/parse-lang.cc: New file.
	* gdb.cp/parse-lang.exp: New file.
@
text
@a3334 71

/* This is the 32-bit CRC function used by the GNU separate debug
   facility.  An executable may contain a section named
   .gnu_debuglink, which holds the name of a separate executable file
   containing its debug info, and a checksum of that file's contents,
   computed using this function.  */
unsigned long
gnu_debuglink_crc32 (unsigned long crc, unsigned char *buf, size_t len)
{
  static const unsigned int crc32_table[256] = {
    0x00000000, 0x77073096, 0xee0e612c, 0x990951ba, 0x076dc419,
    0x706af48f, 0xe963a535, 0x9e6495a3, 0x0edb8832, 0x79dcb8a4,
    0xe0d5e91e, 0x97d2d988, 0x09b64c2b, 0x7eb17cbd, 0xe7b82d07,
    0x90bf1d91, 0x1db71064, 0x6ab020f2, 0xf3b97148, 0x84be41de,
    0x1adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7, 0x136c9856,
    0x646ba8c0, 0xfd62f97a, 0x8a65c9ec, 0x14015c4f, 0x63066cd9,
    0xfa0f3d63, 0x8d080df5, 0x3b6e20c8, 0x4c69105e, 0xd56041e4,
    0xa2677172, 0x3c03e4d1, 0x4b04d447, 0xd20d85fd, 0xa50ab56b,
    0x35b5a8fa, 0x42b2986c, 0xdbbbc9d6, 0xacbcf940, 0x32d86ce3,
    0x45df5c75, 0xdcd60dcf, 0xabd13d59, 0x26d930ac, 0x51de003a,
    0xc8d75180, 0xbfd06116, 0x21b4f4b5, 0x56b3c423, 0xcfba9599,
    0xb8bda50f, 0x2802b89e, 0x5f058808, 0xc60cd9b2, 0xb10be924,
    0x2f6f7c87, 0x58684c11, 0xc1611dab, 0xb6662d3d, 0x76dc4190,
    0x01db7106, 0x98d220bc, 0xefd5102a, 0x71b18589, 0x06b6b51f,
    0x9fbfe4a5, 0xe8b8d433, 0x7807c9a2, 0x0f00f934, 0x9609a88e,
    0xe10e9818, 0x7f6a0dbb, 0x086d3d2d, 0x91646c97, 0xe6635c01,
    0x6b6b51f4, 0x1c6c6162, 0x856530d8, 0xf262004e, 0x6c0695ed,
    0x1b01a57b, 0x8208f4c1, 0xf50fc457, 0x65b0d9c6, 0x12b7e950,
    0x8bbeb8ea, 0xfcb9887c, 0x62dd1ddf, 0x15da2d49, 0x8cd37cf3,
    0xfbd44c65, 0x4db26158, 0x3ab551ce, 0xa3bc0074, 0xd4bb30e2,
    0x4adfa541, 0x3dd895d7, 0xa4d1c46d, 0xd3d6f4fb, 0x4369e96a,
    0x346ed9fc, 0xad678846, 0xda60b8d0, 0x44042d73, 0x33031de5,
    0xaa0a4c5f, 0xdd0d7cc9, 0x5005713c, 0x270241aa, 0xbe0b1010,
    0xc90c2086, 0x5768b525, 0x206f85b3, 0xb966d409, 0xce61e49f,
    0x5edef90e, 0x29d9c998, 0xb0d09822, 0xc7d7a8b4, 0x59b33d17,
    0x2eb40d81, 0xb7bd5c3b, 0xc0ba6cad, 0xedb88320, 0x9abfb3b6,
    0x03b6e20c, 0x74b1d29a, 0xead54739, 0x9dd277af, 0x04db2615,
    0x73dc1683, 0xe3630b12, 0x94643b84, 0x0d6d6a3e, 0x7a6a5aa8,
    0xe40ecf0b, 0x9309ff9d, 0x0a00ae27, 0x7d079eb1, 0xf00f9344,
    0x8708a3d2, 0x1e01f268, 0x6906c2fe, 0xf762575d, 0x806567cb,
    0x196c3671, 0x6e6b06e7, 0xfed41b76, 0x89d32be0, 0x10da7a5a,
    0x67dd4acc, 0xf9b9df6f, 0x8ebeeff9, 0x17b7be43, 0x60b08ed5,
    0xd6d6a3e8, 0xa1d1937e, 0x38d8c2c4, 0x4fdff252, 0xd1bb67f1,
    0xa6bc5767, 0x3fb506dd, 0x48b2364b, 0xd80d2bda, 0xaf0a1b4c,
    0x36034af6, 0x41047a60, 0xdf60efc3, 0xa867df55, 0x316e8eef,
    0x4669be79, 0xcb61b38c, 0xbc66831a, 0x256fd2a0, 0x5268e236,
    0xcc0c7795, 0xbb0b4703, 0x220216b9, 0x5505262f, 0xc5ba3bbe,
    0xb2bd0b28, 0x2bb45a92, 0x5cb36a04, 0xc2d7ffa7, 0xb5d0cf31,
    0x2cd99e8b, 0x5bdeae1d, 0x9b64c2b0, 0xec63f226, 0x756aa39c,
    0x026d930a, 0x9c0906a9, 0xeb0e363f, 0x72076785, 0x05005713,
    0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0x0cb61b38, 0x92d28e9b,
    0xe5d5be0d, 0x7cdcefb7, 0x0bdbdf21, 0x86d3d2d4, 0xf1d4e242,
    0x68ddb3f8, 0x1fda836e, 0x81be16cd, 0xf6b9265b, 0x6fb077e1,
    0x18b74777, 0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c,
    0x8f659eff, 0xf862ae69, 0x616bffd3, 0x166ccf45, 0xa00ae278,
    0xd70dd2ee, 0x4e048354, 0x3903b3c2, 0xa7672661, 0xd06016f7,
    0x4969474d, 0x3e6e77db, 0xaed16a4a, 0xd9d65adc, 0x40df0b66,
    0x37d83bf0, 0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9,
    0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6, 0xbad03605,
    0xcdd70693, 0x54de5729, 0x23d967bf, 0xb3667a2e, 0xc4614ab8,
    0x5d681b02, 0x2a6f2b94, 0xb40bbe37, 0xc30c8ea1, 0x5a05df1b,
    0x2d02ef8d
  };
  unsigned char *end;

  crc = ~crc & 0xffffffff;
  for (end = buf + len; buf < end; ++buf)
    crc = crc32_table[(crc ^ *buf) & 0xff] ^ (crc >> 8);
  return ~crc & 0xffffffff;
}

@


1.287
log
@Update years in copyright notice for the GDB files.

Two modifications:
  1. The addition of 2013 to the copyright year range for every file;
  2. The use of a single year range, instead of potentially multiple
     year ranges, as approved by the FSF.
@
text
@d506 22
@


1.286
log
@	* defs.h (quit_flag): Don't declare.
	(clear_quit_flag, check_quit_flag, set_quit_flag): Declare.
	(QUIT): Use new functions.
	* event-top.c (command_handler): Use clear_quit_flag.
	(handle_sigint): Use set_quit_flag.
	(async_request_quit): Use check_quit_flag.  Don't check
	immediate_quit.
	* exceptions.c (throw_exception): Use clear_quit_flag.
	* main.c (captured_main): Use clear_quit_flag.
	* python/python.c (clear_quit_flag, set_quit_flag)
	(check_quit_flag): New functions.
	* remote-sim.c (gdb_os_poll_quit): Use check_quit_flag,
	clear_quit_flag.
	* remote.c (remote_wait_as): Use check_quit_flag,
	clear_quit_flag.
	(remote_start_remote): Call QUIT.
	* symfile.c (load_progress): Use check_quit_flag.
	* top.c (command_loop): Use clear_quit_flag.
	(command_line_input): Call QUIT.
	* utils.c (quit_flag): Conditionally define.
	(clear_quit_flag, check_quit_flag, set_quit_flag): New
	functions.
	(prompt_for_continue): Call QUIT.  Use quit, not
	async_request_quit.
	* remote-mips.c (mips_expect_timeout): Call QUIT.
	* monitor.c (monitor_expect): Call QUIT.
@
text
@d3 1
a3 1
   Copyright (C) 1986, 1988-2012 Free Software Foundation, Inc.
@


1.285
log
@	* event-top.c (sigwinch_token, handle_sigwinch): Remove.
	(async_init_signals): Update.
	* utils.c (init_page_info): Don't use SIGWINCH_HANDLER.
	(SIGWINCH_HANDLER_BODY): Remove.
gdb/doc
	* gdbint.texinfo (Host Definition): Remove documentation for
	SIGWINCH_HANDLER and SIGWINCH_HANDLER_BODY.
@
text
@d125 1
d129 1
d144 35
d1880 1
d1909 1
a1909 1
	async_request_quit (0);
@


1.284
log
@	* utils.c (prompt_for_continue_wait_time): New static global.
	(make_command_stats_cleanup): Initialize it.
	(report_command_stats): Subtract time waiting for user.
	(prompt_for_continue): Track time waiting for user.
	(defaulted_query): Track time waiting for user.
@
text
@a1716 5
      /* FIXME: Get rid of this junk.  */
#if defined(SIGWINCH) && defined(SIGWINCH_HANDLER)
      SIGWINCH_HANDLER (SIGWINCH);
#endif

a2740 5
/* Machine specific function to handle SIGWINCH signal.  */

#ifdef  SIGWINCH_HANDLER_BODY
SIGWINCH_HANDLER_BODY
#endif
@


1.283
log
@	* common/gdb_vecs.h: Moved here from ./gdb_vecs.h.
	* common/gdb_vecs.c: New file, contents from utils.c.
	* common/host-defs.h: New file, contents from defs.h.
	* utils.h: New file, contents from defs.h.
	* defs.h: Move all declarations of objects defined in utils.c
	to utils.h (except QUIT() and related).
	#include "utils.h", "host-defs.h".
	* probe.h (probe_p): Move here from gdb_vecs.h.
	* symfile.c: #include "probe.h" instead of "gdb_vecs.h".
	* utils.c (free_char_ptr_vec): Moved to common/gdb_vecs.c.
	(dirnames_to_char_ptr_vec_append, dirnames_to_char_ptr_vec): Ditto.
	* Makefile.in (SFILES): Add common/gdb_vecs.c.
	(HFILES_NO_SRCDIR): Add common/gdb_vecs.h, common/host-defs.h, utils.h.
	(COMMON_OBS): Add gdb_vecs.o.
	(gdb_vecs.o): New rule.
@
text
@d109 8
d548 4
d585 1
d597 3
d1209 3
d1269 3
d1349 6
d1828 5
d1860 6
@


1.282
log
@	* utils.c (make_cleanup_bfd_unref): Rename from
	make_cleanup_bfd_close.
	* defs.h (make_cleanup_bfd_unref): Rename from
	make_cleanup_bfd_close.
	* cli/cli-dump.c (bfd_openr_with_cleanup): Update.
	(bfd_openw_with_cleanup): Update.
	* corelow.c (core_open): Update.
	* dsrec.c (load_srec): Update.
	* m32r-rom.c (m32r_load, m32r_upload_command): Update.
	* remote-m32r-sdi.c (m32r_load): Update.
	* remote-mips.c (mips_load_srec): Update.
	(pmon_load_fast): Update.
	* solib-darwin.c (darwin_solib_get_all_image_info_addr_at_init):
	Update.
	(darwin_bfd_open): Update.
	* solib.c (solib_bfd_fopen): Update.
	* symfile-mem.c (symbol_file_add_from_memory): Update.
	* symfile.c (symbol_file_add_with_addrs_or_offsets): Update.
	(symfile_bfd_open): Update.
	(generic_load): Update.
@
text
@a3639 18
/* Call xfree for each element of CHAR_PTR_VEC and final VEC_free for
   CHAR_PTR_VEC itself.

   You must not modify CHAR_PTR_VEC after it got registered with this function
   by make_cleanup as the CHAR_PTR_VEC base address may change on its updates.
   Contrary to VEC_free this function does not (cannot) clear the pointer.  */

void
free_char_ptr_vec (VEC (char_ptr) *char_ptr_vec)
{
  int ix;
  char *name;

  for (ix = 0; VEC_iterate (char_ptr, char_ptr_vec, ix, name); ++ix)
    xfree (name);
  VEC_free (char_ptr, char_ptr_vec);
}

a3662 48
/* Extended version of dirnames_to_char_ptr_vec - additionally if *VECP is
   non-NULL the new list elements from DIRNAMES are appended to the existing
   *VECP list of entries.  *VECP address will be updated by this call.  */

void
dirnames_to_char_ptr_vec_append (VEC (char_ptr) **vecp, const char *dirnames)
{
  do
    {
      size_t this_len;
      char *next_dir, *this_dir;

      next_dir = strchr (dirnames, DIRNAME_SEPARATOR);
      if (next_dir == NULL)
	this_len = strlen (dirnames);
      else
	{
	  this_len = next_dir - dirnames;
	  next_dir++;
	}

      this_dir = xmalloc (this_len + 1);
      memcpy (this_dir, dirnames, this_len);
      this_dir[this_len] = '\0';
      VEC_safe_push (char_ptr, *vecp, this_dir);

      dirnames = next_dir;
    }
  while (dirnames != NULL);
}

/* Split DIRNAMES by DIRNAME_SEPARATOR delimiter and return a list of all the
   elements in their original order.  For empty string ("") DIRNAMES return
   list of one empty string ("") element.
   
   You may modify the returned strings.
   Read free_char_ptr_vec for its cleanup.  */

VEC (char_ptr) *
dirnames_to_char_ptr_vec (const char *dirnames)
{
  VEC (char_ptr) *retval = NULL;
  
  dirnames_to_char_ptr_vec_append (&retval, dirnames);

  return retval;
}

@


1.281
log
@	* dwarf2read.c (try_open_dwo_file): Use gdb_bfd_ref and
	gdb_bfd_unref.
	(free_dwo_file): Use gdb_bfd_unref.
	* cli/cli-dump.c: Include gdb_bfd.h.
	(bfd_openw_with_cleanup): Use gdb_bfd_ref.
	(bfd_openr_with_cleanup): Likewise.
	* windows-nat.c (windows_make_so): Use gdb_bfd_ref,
	gdb_bfd_unref.
	* utils.c: Include gdb_bfd.h.
	(do_bfd_close_cleanup): Use gdb_bfd_unref.
	* symfile.c: Include gdb_bfd.h.
	(separate_debug_file_exists): Use gdb_bfd_unref.
	(bfd_open_maybe_remote): Use gdb_bfd_ref.
	(symfile_bfd_open): Use gdb_bfd_ref, gdb_bfd_unref.
	(generic_load): Use gdb_bfd_ref.
	(reread_symbols): Use gdb_bfd_unref.
	* symfile-mem.c: Include gdb_bfd.h.
	(symbol_file_add_from_memory): Use make_cleanup_bfd_close.
	* spu-linux-nat.c (spu_bfd_open): Use gdb_bfd_ref, gdb_bfd_unref.
	* solib.c: Include gdb_bfd.h.
	(solib_bfd_fopen): Use gdb_bfd_ref.
	(solib_bfd_open): Use gdb_bfd_unref.
	(free_so_symbols): Use gdb_bfd_unref.
	(reload_shared_libraries_1): Use gdb_bfd_unref.
	* solib-spu.c: Include gdb_bfd.h.
	(spu_bfd_fopen): Use gdb_bfd_ref, gdb_bfd_unref.
	* solib-pa64.c (pa64_solib_create_inferior_hook): Use gdb_bfd_ref,
	gdb_bfd_unref.
	* solib-frv.c: Include gdb_bfd.h.
	(enable_break2): Use gdb_bfd_unref.
	* solib-dsbt.c: Include gdb_bfd.h.
	(enable_break2): Use gdb_bfd_unref.
	* solib-darwin.c: Include gdb_bfd.h.
	(darwin_solib_get_all_image_info_addr_at_init): Use gdb_bfd_ref,
	gdb_bfd_unref.
	(darwin_bfd_open): Use gdb_bfd_unref.
	* rs6000-nat.c (add_vmap): Use gdb_bfd_ref, gdb_bfd_unref.
	* remote-mips.c: Include gdb_bfd.h.
	(mips_load_srec): Use gdb_bfd_ref.
	(pmon_load_fast): Use gdb_bfd_ref.
	* remote-m32r-sdi.c: Include gdb_bfd.h.
	(m32r_load): Use gdb_bfd_ref.
	* record.c: Include gdb_bfd.h.
	(record_save_cleanups): Use gdb_bfd_unref.
	(cmd_record_save): Use gdb_bfd_unref.
	* procfs.c (insert_dbx_link_bpt_in_file): Use gdb_bfd_ref,
	gdb_bfd_unref.
	* objfiles.h (gdb_bfd_close_or_warn): Remove.
	(gdb_bfd_ref, gdb_bfd_unref): Move to gdb_bfd.h.
	* objfiles.c: Include gdb_bfd.h.
	(free_objfile): Use gdb_bfd_unref.
	(gdb_bfd_close_or_warn, gdb_bfd_ref, gdb_bfd_unref): Move to
	gdb_bfd.c.
	* machoread.c (macho_add_oso_symfile): Use gdb_bfd_unref.
	(macho_symfile_read_all_oso): Use gdb_bfd_ref, gdb_bfd_unref.
	(macho_check_dsym): Likewise.
	* m32r-rom.c: Include gdb_bfd.h.
	(m32r_load): Use gdb_bfd_ref.
	(m32r_upload_command): Use gdb_bfd_ref.
	* jit.c: Include gdb_bfd.h.
	(jit_bfd_try_read_symtab): Use gdb_bfd_ref, gdb_bfd_unref.
	* gdb_bfd.h: New file.
	* gdb_bfd.c: New file.
	* gcore.c: Include gdb_bfd.h.
	(create_gcore_bfd): Use gdb_bfd_ref.
	(do_bfd_delete_cleanup): Use gdb_bfd_unref.
	(gcore_command): Use gdb_bfd_unref.
	* exec.c: Include gdb_bfd.h.
	(exec_close): Use gdb_bfd_unref.
	(exec_close_1): Use gdb_bfd_unref.
	(exec_file_attach): Use gdb_bfd_ref.
	* elfread.c: Include gdb_bfd.h.
	(build_id_verify): Use gdb_bfd_unref.
	* dsrec.c: Include gdb_bfd.h.
	(load_srec): Use gdb_bfd_ref.
	* corelow.c: Include gdb_bfd.h.
	(core_close): Use gdb_bfd_unref.
	(core_open): Use gdb_bfd_ref.
	* bfd-target.c: Include gdb_bfd.h.
	(target_bfd_xclose): Use gdb_bfd_unref.
	(target_bfd_reopen): Use gdb_bfd_ref.
	* Makefile.in (SFILES): Add gdb_bfd.c.
	(HFILES_NO_SRCDIR): Add gdb_bfd.h.
	(COMMON_OBS): Add gdb_bfd.o.
@
text
@d206 1
a206 1
make_cleanup_bfd_close (bfd *abfd)
@


1.280
log
@gdb/
	Support shell wildcards for 'set auto-load safe-path'.
	* auto-load.c: Include fnmatch.h.
	(filename_is_in_dir): Rename to ...
	(filename_is_in_pattern_1, filename_is_in_pattern): ... here and split
	it.  Update function comment.  Rename dir_len to pattern_len.  New
	variables filename_len, pattern and filename.  Add more DEBUG_AUTO_LOAD
	messages.  Use gdb_filename_fnmatch.
	(filename_is_in_auto_load_safe_path_vec): Rename variable dir to
	pattern.
	(_initialize_auto_load): Extend the "set auto-load safe-path" help text.
	* defs.h (gdb_filename_fnmatch): New declaration.
	* utils.c: Include fnmatch.h.
	(gdb_filename_fnmatch): New function.

gdb/doc/
	* gdb.texinfo (Auto-loading safe path): Note the shell wildcard
	possibility.
@
text
@d30 1
d202 1
a202 1
  bfd_close (arg);
@


1.279
log
@gdb/
	* NEWS (--with-auto-load-dir): Prepend $debugdir to the default path.
	Describe it.
	* auto-load.c (auto_load_expand_dir_vars): New function.
	(auto_load_safe_path_vec_update): Use it, remove the
	substitute_path_component call thanks to it.
	(auto_load_objfile_script): Remove the debug_file_directory processing.
	Use auto_load_expand_dir_vars, remove the substitute_path_component
	call thanks to it.
	* configure: Regenerate.
	* configure.ac (--with-auto-load-dir): Prepend $debugdir to the default
	path.  Escape $ also for $debugdir.
	(--with_auto_load_safe_path): Escape $ also for $debugdir.
	* utils.c (substitute_path_component): Accept also DIRNAME_SEPARATOR.

gdb/doc/
	* gdb.texinfo (Separate Debug Files): New anchor debug-file-directory.
	Mention also --with-separate-debug-dir.
	(Auto-loading): Prepend $debugdir in the sample output.
	(Auto-loading safe path): Likewise.  Mention also $debugdir for the
	auto-load safe-path variable.
	(objfile-gdb.py file): Remove the extra debug-file-directory paragraph.
	Mention also $debugdir for 'set auto-load scripts-directory'.
@
text
@d29 1
d3844 43
@


1.278
log
@gdb/
	Provide $ddir substitution for --with-auto-load-safe-path.
	* NEWS (--with-auto-load-safe-path, --without-auto-load-safe-path): New
	entries.
	* auto-load.c: Include observer.h.
	(auto_load_safe_path_vec_update): Call substitute_path_component for
	each component.  New variable ddir_subst.
	(auto_load_gdb_datadir_changed): New function.
	(set_auto_load_safe_path): Rename DEFAULT_AUTO_LOAD_SAFE_PATH to
	AUTO_LOAD_SAFE_PATH.  New comment.
	(_initialize_auto_load): Rename DEFAULT_AUTO_LOAD_SAFE_PATH to
	AUTO_LOAD_SAFE_PATH.  Install auto_load_gdb_datadir_changed.
	* config.in: Regenerate.
	* configure: Regenerate.
	* configure.ac (--auto-load-safe-path): Rename
	DEFAULT_AUTO_LOAD_SAFE_PATH to AUTO_LOAD_SAFE_PATH.  Default to
	GDB_DATADIR/auto-load.
	* defs.h (substitute_path_component): New declaration.
	* top.c: Include observer.h.
	(set_gdb_datadir): New function.
	(init_main): Install it for "set data-directory".
	* utils.c (substitute_path_component): New function.

gdb/doc/
	Provide $ddir substitution for --with-auto-load-safe-path.
	* gdb.texinfo (Auto-loading): Replace /usr/local by $ddir/auto-load.
	(Auto-loading safe path): Likewise.  Mention the default value,
	$ddir substitution, --with-auto-load-safe-path and
	--without-auto-load-safe-path.
	* observer.texi (gdb_datadir_changed): New.
@
text
@d3729 2
a3730 2
   needs to be delimited by IS_DIR_SEPARATOR (or be located at the start or
   end of *STRINGP.  */
d3745 4
a3748 2
      if ((s == string || IS_DIR_SEPARATOR (s[-1]))
          && (s[from_len] == '\0' || IS_DIR_SEPARATOR (s[from_len])))
@


1.277
log
@	* cleanups.h: New file.
	* cleanups.c: New file.
	* Makefile.in (SFILES): Add cleanups.c.
	(HFILES_NO_SRCDIR): Add cleanups.h.
	(COMMON_OBS): Add cleanups.o.
	* defs.h (struct cleanup): Moved to cleanups.h.
	(do_cleanups,do_final_cleanups): Ditto.
	(discard_cleanups,discard_final_cleanups): Ditto
	(make_cleanup,make_cleanup_dtor,make_final_cleanup): Ditto.
	(save_cleanups,save_final_cleanups): Ditto.
	(restore_cleanups,restore_final_cleanups): Ditto.
	(null_cleanup): Ditto.
	(make_my_cleanup,make_my_cleanup2): Ditto.
	(discard_my_cleanups,save_my_cleanups,restore_my_cleanups): Ditto.
	* utils.c (cleanup_chain,final_cleanup_chain): Moved to cleanups.c.
	(do_cleanups,do_final_cleanups): Ditto.
	(discard_cleanups,discard_final_cleanups): Ditto
	(make_cleanup,make_cleanup_dtor,make_final_cleanup): Ditto.
	(save_cleanups,save_final_cleanups): Ditto.
	(restore_cleanups,restore_final_cleanups): Ditto.
	(null_cleanup): Ditto.
	(make_my_cleanup,make_my_cleanup2): Ditto.
	(discard_my_cleanups,save_my_cleanups,restore_my_cleanups): Ditto.
@
text
@d3727 42
@


1.276
log
@	* utils.c (make_cleanup_freeargv): Use make_cleanup instead of
	make_my_cleanup.
	(make_cleanup_dyn_string_delete): Ditto.
	(make_cleanup_ui_file_delete): Ditto.
	(make_cleanup_ui_out_redirect_pop): Ditto.
	(make_cleanup_free_section_addr_info): Ditto.
	(make_cleanup_restore_integer): Ditto.
	(make_cleanup_unpush_target): Ditto.
	(make_cleanup_value_free_to_mark): Ditto.
	(make_cleanup_value_free): Ditto.
	(make_cleanup_free_so): Ditto.
@
text
@a101 2
static void do_my_cleanups (struct cleanup **, struct cleanup *);

a110 6
/* Chain of cleanup actions established with make_cleanup,
   to be executed if an error happens.  */

static struct cleanup *cleanup_chain;	/* cleaned up after a failed command */
static struct cleanup *final_cleanup_chain;	/* cleaned up when gdb exits */

d167 1
d169 3
a171 24
/* Add a new cleanup to the cleanup_chain,
   and return the previous chain pointer
   to be passed later to do_cleanups or discard_cleanups.
   Args are FUNCTION to clean up with, and ARG to pass to it.  */

struct cleanup *
make_cleanup (make_cleanup_ftype *function, void *arg)
{
  return make_my_cleanup (&cleanup_chain, function, arg);
}

struct cleanup *
make_cleanup_dtor (make_cleanup_ftype *function, void *arg,
		   void (*dtor) (void *))
{
  return make_my_cleanup2 (&cleanup_chain,
			   function, arg, dtor);
}

struct cleanup *
make_final_cleanup (make_cleanup_ftype *function, void *arg)
{
  return make_my_cleanup (&final_cleanup_chain, function, arg);
}
a458 126
struct cleanup *
make_my_cleanup2 (struct cleanup **pmy_chain, make_cleanup_ftype *function,
		  void *arg,  void (*free_arg) (void *))
{
  struct cleanup *new
    = (struct cleanup *) xmalloc (sizeof (struct cleanup));
  struct cleanup *old_chain = *pmy_chain;

  new->next = *pmy_chain;
  new->function = function;
  new->free_arg = free_arg;
  new->arg = arg;
  *pmy_chain = new;

  return old_chain;
}

struct cleanup *
make_my_cleanup (struct cleanup **pmy_chain, make_cleanup_ftype *function,
		 void *arg)
{
  return make_my_cleanup2 (pmy_chain, function, arg, NULL);
}

/* Discard cleanups and do the actions they describe
   until we get back to the point OLD_CHAIN in the cleanup_chain.  */

void
do_cleanups (struct cleanup *old_chain)
{
  do_my_cleanups (&cleanup_chain, old_chain);
}

void
do_final_cleanups (struct cleanup *old_chain)
{
  do_my_cleanups (&final_cleanup_chain, old_chain);
}

static void
do_my_cleanups (struct cleanup **pmy_chain,
		struct cleanup *old_chain)
{
  struct cleanup *ptr;

  while ((ptr = *pmy_chain) != old_chain)
    {
      *pmy_chain = ptr->next;	/* Do this first in case of recursion.  */
      (*ptr->function) (ptr->arg);
      if (ptr->free_arg)
	(*ptr->free_arg) (ptr->arg);
      xfree (ptr);
    }
}

/* Discard cleanups, not doing the actions they describe,
   until we get back to the point OLD_CHAIN in the cleanup_chain.  */

void
discard_cleanups (struct cleanup *old_chain)
{
  discard_my_cleanups (&cleanup_chain, old_chain);
}

void
discard_final_cleanups (struct cleanup *old_chain)
{
  discard_my_cleanups (&final_cleanup_chain, old_chain);
}

void
discard_my_cleanups (struct cleanup **pmy_chain,
		     struct cleanup *old_chain)
{
  struct cleanup *ptr;

  while ((ptr = *pmy_chain) != old_chain)
    {
      *pmy_chain = ptr->next;
      if (ptr->free_arg)
	(*ptr->free_arg) (ptr->arg);
      xfree (ptr);
    }
}

/* Set the cleanup_chain to 0, and return the old cleanup chain.  */
struct cleanup *
save_cleanups (void)
{
  return save_my_cleanups (&cleanup_chain);
}

struct cleanup *
save_final_cleanups (void)
{
  return save_my_cleanups (&final_cleanup_chain);
}

struct cleanup *
save_my_cleanups (struct cleanup **pmy_chain)
{
  struct cleanup *old_chain = *pmy_chain;

  *pmy_chain = 0;
  return old_chain;
}

/* Restore the cleanup chain from a previously saved chain.  */
void
restore_cleanups (struct cleanup *chain)
{
  restore_my_cleanups (&cleanup_chain, chain);
}

void
restore_final_cleanups (struct cleanup *chain)
{
  restore_my_cleanups (&final_cleanup_chain, chain);
}

void
restore_my_cleanups (struct cleanup **pmy_chain, struct cleanup *chain)
{
  *pmy_chain = chain;
}

a481 12
/* Provide a known function that does nothing, to use as a base for
   a possibly long chain of cleanups.  This is useful where we
   use the cleanup chain for handling normal cleanups as well as dealing
   with cleanups that need to be done as a result of a call to error().
   In such cases, we may not be certain where the first cleanup is, unless
   we have a do-nothing one to always use as the base.  */

void
null_cleanup (void *arg)
{
}

@


1.275
log
@gdb/
	Code cleanup.
	* charset.c (find_charset_names): Remove variables ix and elt.
	Use free_char_ptr_vec.
	* elfread.c (build_id_to_debug_filename): New variables debugdir_vec,
	back_to and ix.  Use dirnames_to_char_ptr_vec.  Remove variable
	debugdir_end.  New variable debugdir_len.
	* gdb_vecs.h (free_char_ptr_vec, make_cleanup_free_char_ptr_vec)
	(dirnames_to_char_ptr_vec_append, dirnames_to_char_ptr_vec): New
	declarations.
	* progspace.c (clear_program_space_solib_cache): Remove variables ix
	and elt.  Use free_char_ptr_vec.
	* source.c (add_path): Remove variables argv, arg and argv_index.
	New variables dir_vec, back_to, ix and name.
	Use dirnames_to_char_ptr_vec_append.  Use freeargv instead of
	make_cleanup_freeargv.  Remove variable separator.  Simplify the code
	no longer expecting DIRNAME_SEPARATOR.
	(openp): Remove variable p, p1 and len.  New variables dir_vec,
	back_to, ix and dir.  Use dirnames_to_char_ptr_vec.  Simplify the code
	no longer expecting DIRNAME_SEPARATOR.
	* symfile.c (find_separate_debug_file): New variables debugdir_vec,
	back_to and ix.  Use dirnames_to_char_ptr_vec.  Remove variable
	debugdir_end.
	* utils.c (free_char_ptr_vec, do_free_char_ptr_vec)
	(make_cleanup_free_char_ptr_vec, dirnames_to_char_ptr_vec_append)
	(dirnames_to_char_ptr_vec): New functions.
@
text
@d210 1
a210 1
  return make_my_cleanup (&cleanup_chain, do_freeargv, arg);
d222 1
a222 1
  return make_my_cleanup (&cleanup_chain, do_dyn_string_delete, arg);
d299 1
a299 1
  return make_my_cleanup (&cleanup_chain, do_ui_file_delete, arg);
d319 1
a319 1
  return make_my_cleanup (&cleanup_chain, do_ui_out_redirect_pop, uiout);
d331 1
a331 1
  return make_my_cleanup (&cleanup_chain, do_free_section_addr_info, addrs);
d360 1
a360 2
  return make_my_cleanup2 (&cleanup_chain, restore_integer, (void *)c,
			   xfree);
d387 1
a387 1
  return make_my_cleanup (&cleanup_chain, do_unpush_target, ops);
d450 1
a450 1
  return make_my_cleanup (&cleanup_chain, do_value_free_to_mark, mark);
d466 1
a466 1
  return make_my_cleanup (&cleanup_chain, do_value_free, value);
d484 1
a484 1
  return make_my_cleanup (&cleanup_chain, do_free_so, so);
@


1.274
log
@	* gdbtypes.h (struct main_type): Change type of name,tag_name,
	and fields.name members from char * to const char *.  All uses updated.
	(struct cplus_struct_type): Change type of fn_fieldlists.name member
	from char * to const char *.  All uses updated.
	(type_name_no_tag): Update.
	(lookup_unsigned_typename, lookup_signed_typename): Update.
	* gdbtypes.c (type_name_no_tag): Change result type
	from char * to const char *.  All callers updated.
	(lookup_unsigned_typename, lookup_signed_typename): Change type of
	name parameter from char * to const char *.
	* symtab.h (struct cplus_specific): Change type of demangled_name
	member from char * to const char *.  All uses updated.
	(struct general_symbol_info): Change type of name and
	mangled_lang.demangled_name members from char * to const char *.
	All uses updated.
	(symbol_get_demangled_name, symbol_natural_name): Update.
	(symbol_demangled_name, symbol_search_name): Update.
	* symtab.c (symbol_get_demangled_name): Change result type
	from char * to const char *.  All callers updated.
	(symbol_natural_name, symbol_demangled_name): Ditto.
	(symbol_search_name): Ditto.
	(completion_list_add_name): Change type of symname,sym_text,
	text,word parameters from char * to const char *.
	(completion_list_objc_symbol): Change type of sym_text,
	text,word parameters from char * to const char *.
	* ada-lang.c (find_struct_field): Change type of name parameter
	from char * to const char *.
	(encoded_ordered_before): Similarly for N0,N1 parameters.
	(old_renaming_is_invisible): Similarly for function_name parameter.
	(ada_type_name): Change result type from char * to const char *.
	All callers updated.
	* ada-lang.h (ada_type_name): Update.
	* buildsym.c (hashname): Change type of name parameter
	from char * to const char *.
	* buildsym.h (hashname): Update.
	* dbxread.c (end_psymtab): Change type of include_list parameter
	from char ** to const char **.
	* dwarf2read.c (determine_prefix): Change result type
	from char * to const char *.  All callers updated.
	* f-lang.c (find_common_for_function): Change type of name, funcname
	parameters from char * to const char *.
	* f-lang.c (find_common_for_function): Update.
	* f-valprint.c (list_all_visible_commons): Change type of funcname
	parameters from char * to const char *.
	* gdbarch.sh (static_transform_name): Change type of name parameter
	and result from char * to const char *.
	* gdbarch.c: Regenerate.
	* gdbarch.h: Regenerate.
	* i386-sol2-tdep.c (i386_sol2_static_transform_name): Change type
	of name parameter from char * to const char *.
	* jv-lang.c (java_primitive_type_from_name): Ditto.
	(java_demangled_signature_length): Similarly for signature parameter.
	(java_demangled_signature_copy): Ditto.
	(java_demangle_type_signature): Ditto.
	* jv-lang.h (java_primitive_type_from_name): Update.
	(java_demangle_type_signature): Update.
	* objc-lang.c (specialcmp): Change type of a,b parameters
	from char * to const char *.
	* p-lang.c (is_pascal_string_type): Change type of arrayname parameter
	from char * to const char *.  All callers updated.
	* p-lang.h (is_pascal_string_type): Update.
	* solib-frv.c (find_canonical_descriptor_in_load_object): Change type
	of name parameter from char * to const char *.
	* sparc-sol2-tdep.c (sparc_sol2_static_transform_name): Ditto.
	* utils.c (fprintf_symbol_filtered): Ditto.
	* defs.h (fprintf_symbol_filtered): Update.
	* sparc-tdep.h (sparc_sol2_static_transform_name): Update.
	* stabsread.h (end_psymtab): Update.
	* stack.c (find_frame_funname): Change type of funname parameter
	from char ** to const char **.
	* stack.h (find_frame_funname): Update.
	* typeprint.c (type_print): Change type of varstring parameter
	from char * to const char *.
	* value.h (type_print): Update.
	* xcoffread.c (xcoff_start_psymtab): Change type of filename parameter
	from char * to const char *.  All callers updated.
	(xcoff_end_psymtab): Change type of include_list parameter
	from char ** to const char **.  All callers updated.
	(swap_sym): Similarly for name parameter.  All callers updated.
	* coffread.c (patch_type): Add (char*) cast to xfree parameter.
	Use xstrdup.
	(process_coff_symbol): Use xstrdup.
	* stabsread.c (stabs_method_name_from_physname): Renamed from
	update_method_name_from_physname.  Change result type from void
	to char *.  All callers updated.
	(read_member_functions): In has_destructor case, store name in objfile
	obstack instead of malloc space.  In !has_stub case, fix mem leak.
@
text
@d3805 89
@


1.273
log
@gdb/
	Code cleanup: Make 1440 bytes of data segment read-only.
	* arch-utils.c (endian_enum): Make it const char *const [].
	* arm-tdep.c (fp_model_strings, arm_abi_strings, arm_mode_strings):
	Likewise.
	* breakpoint.c (always_inserted_enums): Likewise.
	* cli/cli-cmds.c (script_ext_enums): Likewise.
	* cli/cli-decode.c (add_setshow_enum_cmd, complete_on_enum): Make the
	enumlist parameter const char *const *.
	* cli/cli-decode.h (struct cmd_list_element): Make the enums field
	const char *const *.
	* command.h (complete_on_enum, add_setshow_enum_cmd): Make the enumlist
	parameter const char *const *.
	* cris-tdep.c (cris_modes): Make it const char *const [].
	* filesystem.c (target_file_system_kinds): Likewise.
	* i386-tdep.c (valid_flavors, valid_conventions): Likewise.
	* infrun.c (follow_fork_mode_kind_names, follow_exec_mode_names)
	(can_use_displaced_stepping_enum, scheduler_enums)
	(exec_direction_names): Likewise.
	* language.c (_initialize_language): Make the type_or_range_names and
	case_sensitive_names variables const char *const [].
	* mips-tdep.c (mips_abi_strings): Make it const char *const [].
	* python/python.c (python_excp_enums): Likewise.
	* remote.c (interrupt_sequence_modes): Likewise.
	* rs6000-tdep.c (powerpc_vector_strings): Likewise.
	* serial.c (logbase_enums): Likewise.
	* sh-tdep.c (sh_cc_enum): Likewise.
	* stack.c (print_frame_arguments_choices, print_entry_values_choices):
	Likewise.
	* symtab.c (multiple_symbols_modes): Likewise.
	* tui/tui-win.c (tui_border_kind_enums, tui_border_mode_enums):
	Likewise.
	* utils.c (internal_problem_modes): Likewise.
@
text
@d2592 1
a2592 1
fprintf_symbol_filtered (struct ui_file *stream, char *name,
@


1.272
log
@2012-01-23  Pedro Alves  <palves@@redhat.com>

	* top.c (caution): Rename to ...
	(confirm): ... this.
	(show_caution): Rename to ...
	(show_confirm): ... this.
	(quit_cover): Adjust.
	(init_main): Adjust.
	* top.h (caution): Rename to ...
	(confirm): ... this.
	* utils.c (internal_vproblem, defaulted_query): Adjust.
@
text
@d889 1
a889 1
static const char *internal_problem_modes[] =
@


1.271
log
@Copyright year update in most files of the GDB Project.

gdb/ChangeLog:

        Copyright year update in most files of the GDB Project.
@
text
@d973 1
a973 1
      if (caution == 0)
d1387 1
a1387 1
  if (! caution || server_command)
@


1.270
log
@Improve gdb_realpath for Windows hosts

On Windows hosts, gdb_realpath is just an xstrdup. This makes filename
comparisons on Windows very chancy. Normally, we would normalize both
paths, and then compare.  But since the normalization doesn't do
anything, two equivalent names on Windows might not match.  This can
happen when trying to insert a breakpoint using the fullpath of a file.
For instance, if the compiler generated debug info that says that
the compilation directory is: `c:\\some\\double\\slashes\\dir', then
trying to insert a breakpoint on `c:/some/double/slashes/dir/foo.c:4'
does not work:

    (gdb) b c:/some/double/slashes/dir/foo.c:4
    No source file named c:/some/double/slashes/dir/foo.c:4.
    (gdb) b c:\some\double\slashes\dir\foo.c:4
    No source file named c:\some\double\slashes\dir\foo.c:4.

This fixes the problem by enhancing gdb_realpath on Windows hosts.
The code is inspired from libiberty's lrealpath.

gdb/ChangeLog:

        * utils.c (gdb_realpath): Add better support for Windows hosts.
@
text
@d3 1
a3 3
   Copyright (C) 1986, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996,
   1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,
   2009, 2010, 2011 Free Software Foundation, Inc.
@


1.269
log
@	* defs.h (wait_to_die_with_timeout): Declare.
	* utils.c: #include "gdb_wait.h".
	(sigalrm_handler, wait_to_die_with_timeout): New functions.
	* ser-pipe.c: Don't #include "gdb_wait.h".
	(pipe_close): Give child a chance to die on its own after closing
	its stdin before SIGTERM'ing it.
@
text
@d3344 19
@


1.268
log
@the "ambiguous linespec" series
gdb
2011-12-06  Joel Brobecker  <brobecker@@acacore.com>

        * language.h (struct language_defn): Add new component
        la_symbol_name_compare.
        * symfile.h (struct quick_symbol_functions): Update the profile
        of parameter "name_matcher" for the expand_symtabs_matching
        method.  Update the documentation accordingly.
        * ada-lang.h (ada_name_for_lookup): Add declaration.
        * ada-lang.c (ada_name_for_lookup): New function, extracted out
        from ada_iterate_over_symbols.
        (ada_iterate_over_symbols): Do not encode symbol name anymore.
        (ada_expand_partial_symbol_name): Adjust profile.
        (ada_language_defn): Add value for la_symbol_name_compare field.
        * linespec.c: #include "ada-lang.h".
        (iterate_name_matcher): Add language parameter. Replace call
        to strcmp_iw by call to language->la_symbol_name_compare.
        (decode_variable): Encode COPY if current language is Ada.
        * dwarf2read.c (dw2_expand_symtabs_matching): Adjust profile
        of name_matcher parameter.  Adjust call to name_matcher.
        * psymtab.c (expand_symtabs_matching_via_partial): Likewise.
        (expand_partial_symbol_names): Update profile of parameter "fun".
        * psymtab.h (expand_partial_symbol_names): Update profile of
        parameter "fun".
        * symtab.c (demangle_for_lookup): Update function documentation.
        (search_symbols_name_matches): Add language parameter.
        (expand_partial_symbol_name): Likewise.
        * c-lang.c (c_language_defn, cplus_language_defn)
        (asm_language_defn, minimal_language_defn): Add value for
        la_symbol_name_compare field.
        * d-lang.c (d_language_defn): Likewise.
        * f-lang.c (f_language_defn): Ditto.
        * jv-lang.c (java_language_defn): Ditto.
        * m2-lang.c (m2_language_defn): Ditto.
        * objc-lang.c (objc_language_defn): Ditto.
        * opencl-lang.c (opencl_language_defn): Ditto.
        * p-lang.c (pascal_language_defn): Ditto.
        * language.c (unknown_language_defn, auto_language_defn)
        (local_language_defn): Ditto.

2011-12-06  Tom Tromey  <tromey@@redhat.com>

	* linespec.c (iterate_over_all_matching_symtabs): Use
	LA_ITERATE_OVER_SYMBOLS.
	(lookup_prefix_sym, add_matching_symbols_to_info): Likewise.
	(find_function_symbols, decode_variable): Remove Ada special
	case.
	* language.h (struct language_defn) <la_iterate_over_symbols>: New
	field.
	(LA_ITERATE_OVER_SYMBOLS): New macro.
	* language.c (unknown_language_defn, auto_language_defn)
	(local_language_defn): Update.
	* c-lang.c (c_language_defn, cplus_language_defn)
	(asm_language_defn, minimal_language_defn): Update.
	* d-lang.c (d_language_defn): Update.
	* f-lang.c (f_language_defn): Update.
	* jv-lang.c (java_language_defn): Update.
	* m2-lang.c (m2_language_defn): Update.
	* objc-lang.c (objc_language_defn): Update.
	* opencl-lang.c (opencl_language_defn): Update.
	* p-lang.c (pascal_language_defn): Update.
	* ada-lang.c (ada_iterate_over_symbols): New function.
	(ada_language_defn): Update.

2011-12-06  Tom Tromey  <tromey@@redhat.com>
	    Joel Brobecker  <brobecker@@acacore.com>

	PR breakpoints/13105, PR objc/8341, PR objc/8343, PR objc/8366,
	PR objc/8535, PR breakpoints/11657, PR breakpoints/11970,
	PR breakpoints/12023, PR breakpoints/12334, PR breakpoints/12856,
	PR shlibs/8929, PR shlibs/7393:
	* python/py-type.c (compare_maybe_null_strings): Rename from
	compare_strings.
	(check_types_equal): Update.
	* utils.c (compare_strings): New function.
	* tui/tui-winsource.c (tui_update_breakpoint_info): Update for
	location changes.
	* tracepoint.c (scope_info): Update.
	(trace_find_line_command): Use DECODE_LINE_FUNFIRSTLINE.
	* symtab.h (iterate_over_minimal_symbols)
	(iterate_over_some_symtabs, iterate_over_symtabs)
	(find_pcs_for_symtab_line, iterate_over_symbols)
	(demangle_for_lookup): Declare.
	(expand_line_sal): Remove.
	* symtab.c (iterate_over_some_symtabs, iterate_over_symtabs)
	(lookup_symtab_callback): New functions.
	(lookup_symtab): Rewrite.
	(demangle_for_lookup): New function, extract from
	lookup_symbol_in_language.
	(lookup_symbol_in_language): Use it.
	(iterate_over_symbols): New function.
	(find_line_symtab): Update.
	(find_pcs_for_symtab_line): New functions.
	(find_line_common): Add 'start' argument.
	(decode_line_spec): Update.  Change argument to 'flags', change
	interpretation.
	(append_expanded_sal): Remove.
	(append_exact_match_to_sals): Remove.
	(expand_line_sal): Remove.
	* symfile.h (struct quick_symbol_functions) <lookup_symtab>:
	Remove.
	<map_symtabs_matching_filename>: New field.
	* stack.c (func_command): Only look in the current program space.
	Use DECODE_LINE_FUNFIRSTLINE.
	* source.c (line_info): Set pspace on sal.  Check program space in
	the loop.  Use DECODE_LINE_LIST_MODE.
	(select_source_symtab): Use DECODE_LINE_FUNFIRSTLINE.
	* solib-target.c: Remove DEF_VEC_I(CORE_ADDR).
	* python/python.c (gdbpy_decode_line): Update.
	* psymtab.c (partial_map_expand_apply): New function.
	(partial_map_symtabs_matching_filename): Rename from
	lookup_partial_symbol.  Update arguments.
	(lookup_symtab_via_partial_symtab): Remove.
	(psym_functions): Update.
	* objc-lang.h (parse_selector, parse_method): Don't declare.
	(find_imps): Update.
	* objc-lang.c (parse_selector, parse_method): Now static.
	(find_methods): Change arguments.  Fill in a vector of symbol
	names.
	(uniquify_strings): New function.
	(find_imps): Change arguments.
	* minsyms.c (iterate_over_minimal_symbols): New function.
	* linespec.h (enum decode_line_flags): New.
	(struct linespec_sals): New.
	(struct linespec_result) <canonical>: Remove.
	<pre_expanded, addr_string, sals>: New fields.
	(destroy_linespec_result, make_cleanup_destroy_linespec_result)
	(decode_line_full): Declare.
	(decode_line_1): Update.
	* linespec.c (struct address_entry, struct linespec_state, struct
	collect_info): New types.
	(add_sal_to_sals_basic, add_sal_to_sals, hash_address_entry)
	(eq_address_entry, maybe_add_address): New functions.
	(total_number_of_methods): Remove.
	(iterate_name_matcher, iterate_over_all_matching_symtabs): New
	functions.
	(find_methods): Change arguments.  Don't canonicalize input.
	Simplify logic.
	(add_matching_methods, add_constructors)
	(build_canonical_line_spec): Remove.
	(filter_results, convert_results_to_lsals): New functions.
	(decode_line_2): Change arguments.  Rewrite for new data
	structures.
	(decode_line_internal): Rename from decode_line_1.  Change
	arguments.  Add cleanups.  Update for new data structures.
	(linespec_state_constructor, linespec_state_destructor)
	(decode_line_full, decode_line_1): New functions.
	(decode_indirect): Change arguments.  Update.
	(locate_first_half): Use skip_spaces.
	(decode_objc): Change arguments.  Update for new data structures.
	Simplify logic.
	(decode_compound): Change arguments.  Add cleanups.  Remove
	fallback code, replace with error.
	(struct decode_compound_collector): New type.
	(collect_one_symbol): New function.
	(lookup_prefix_sym): Change arguments.  Update.
	(compare_symbol_name, add_all_symbol_names_from_pspace)
	(find_superclass_methods ): New functions.
	(find_method): Rewrite.
	(struct symtab_collector): New type.
	(add_symtabs_to_list, collect_symtabs_from_filename): New
	functions.
	(symtabs_from_filename): Change API.  Rename from
	symtab_from_filename.
	(collect_function_symbols): New function.
	(find_function_symbols): Change API.  Rename from
	find_function_symbol.  Rewrite.
	(decode_all_digits): Change arguments.  Rewrite.
	(decode_dollar): Change arguments.  Use decode_variable.
	(decode_label): Change arguments.  Rewrite.
	(collect_symbols): New function.
	(minsym_found): Change arguments.  Rewrite.
	(check_minsym, search_minsyms_for_name)
	(add_matching_symbols_to_info): New function.
	(decode_variable): Change arguments.  Iterate over all symbols.
	(symbol_found): Remove.
	(symbol_to_sal): New function.
	(init_linespec_result, destroy_linespec_result)
	(cleanup_linespec_result, make_cleanup_destroy_linespec_result):
	New functions.
	(decode_digits_list_mode, decode_digits_ordinary): New functions.
	* dwarf2read.c (dw2_map_expand_apply): New function.
	(dw2_map_symtabs_matching_filename): Rename from
	dw2_lookup_symtab.  Change arguments.
	(dwarf2_gdb_index_functions): Update.
	* dwarf2loc.c: Remove DEF_VEC_I(CORE_ADDR).
	* defs.h (compare_strings): Declare.
	* cli/cli-cmds.c (compare_strings): Move to utils.c.
	(edit_command, list_command): Use DECODE_LINE_LIST_MODE.  Call
	filter_sals.
	(compare_symtabs, filter_sals): New functions.
	* breakpoint.h (struct bp_location) <line_number, source_file>:
	New fields.
	(struct breakpoint) <line_number, source_file>: Remove.
	<filter>: New field.
	* breakpoint.c (print_breakpoint_location, init_raw_breakpoint)
	(momentary_breakpoint_from_master, add_location_to_breakpoint):
	Update for changes to locations.
	(init_breakpoint_sal): Add 'filter' argument.  Set 'filter' on
	breakpoint.
	(create_breakpoint_sal): Add 'filter' argument.
	(remove_sal, expand_line_sal_maybe): Remove.
	(create_breakpoints_sal): Remove 'sals' argument.  Handle
	pre-expanded sals and the filter.
	(parse_breakpoint_sals): Use decode_line_full.
	(check_fast_tracepoint_sals): Use get_sal_arch.
	(create_breakpoint): Create a linespec_sals.  Update.
	(break_range_command): Use decode_line_full.  Update.
	(until_break_command): Update.
	(clear_command): Update match conditions for linespec.c changes.
	Use DECODE_LINE_LIST_MODE.
	(say_where): Update for changes to locations.
	(bp_location_dtor): Free 'source_file'.
	(base_breakpoint_dtor): Free 'filter'.  Don't free 'source_file'.
	(update_static_tracepoint): Update for changes to locations.
	(update_breakpoint_locations): Disable ranged breakpoint if too
	many locations match.  Update.
	(addr_string_to_sals): Use decode_line_full.  Resolve all sal
	PCs.
	(breakpoint_re_set_default): Don't call expand_line_sal_maybe.
	(decode_line_spec_1): Update.  Change argument name to 'flags',
	change interpretation.
	* block.h (block_containing_function): Declare.
	* block.c (block_containing_function): New function.
	* skip.c (skip_function_command): Update.
	(skip_re_set): Update.
	* infcmd.c (jump_command): Use DECODE_LINE_FUNFIRSTLINE.
	* mi/mi-main.c (mi_cmd_trace_find): Use DECODE_LINE_FUNFIRSTLINE.
	* NEWS: Add entry.

2011-12-06  Tom Tromey  <tromey@@redhat.com>

	* elfread.c (elf_gnu_ifunc_resolver_return_stop): Allow
	breakpoint's pspace to be NULL.
	* breakpoint.h (struct breakpoint) <pspace>: Update comment.
	* breakpoint.c (init_raw_breakpoint): Conditionally set
	breakpoint's pspace.
	(init_breakpoint_sal): Don't set breakpoint's pspace.
	(prepare_re_set_context): Conditionally switch program space.
	(addr_string_to_sals): Check executing_startup on location's
	program space.

2011-12-06  Tom Tromey  <tromey@@redhat.com>

	* breakpoint.h (enum enable_state) <bp_startup_disabled>: Remove.
	* breakpoint.c (should_be_inserted): Explicitly check if program
	space is executing startup.
	(describe_other_breakpoints): Update.
	(disable_breakpoints_before_startup): Change executing_startup
	earlier.  Remove loop.
	(enable_breakpoints_after_startup): Likewise.
	(init_breakpoint_sal): Don't use bp_startup_disabled.
	(create_breakpoint): Don't use bp_startup_disabled.
	(update_global_location_list): Use should_be_inserted.
	(bkpt_re_set): Update.
gdb/testsuite
2011-12-06  Joel Brobecker  <brobecker@@acacore.com>

        * gdb.ada/fullname_bp.exp: Add tests for other valid linespecs
        involving a fully qualified function name.

2011-12-06  Tom Tromey  <tromey@@redhat.com>

	* gdb.ada/homonym.exp: Add three breakpoint tests.

2011-12-06  Tom Tromey  <tromey@@redhat.com>

	* gdb.base/solib-weak.exp (do_test): Remove kfail.
	* gdb.trace/tracecmd.exp: Disable pending breakpoints earlier.
	* gdb.objc/objcdecode.exp: Update for output changes.
	* gdb.linespec/linespec.exp: New file.
	* gdb.linespec/lspec.cc: New file.
	* gdb.linespec/lspec.h: New file.
	* gdb.linespec/body.h: New file.
	* gdb.linespec/base/two/thefile.cc: New file.
	* gdb.linespec/base/one/thefile.cc: New file.
	* gdb.linespec/Makefile.in: New file.
	* gdb.cp/templates.exp (test_template_breakpoints): Update for
	output changes.
	* gdb.cp/re-set-overloaded.exp: Remove kfail.
	* gdb.cp/ovldbreak.exp: Update for output changes.  "all" test now
	makes one breakpoint.
	* gdb.cp/method2.exp (test_break): Update for output changes.
	* gdb.cp/mb-templates.exp: Update for output changes.
	* gdb.cp/mb-inline.exp: Update for output changes.
	* gdb.cp/mb-ctor.exp: Update for output changes.
	* gdb.cp/ovsrch.exp: Use fully-qualified names.
	* gdb.base/solib-symbol.exp: Run to main later.  Breakpoint now
	has multiple matches.
	* gdb.base/sepdebug.exp: Disable pending breakpoints.  Update for
	error message change.
	* gdb.base/list.exp (test_list_filename_and_number): Update for
	error message change.
	* gdb.base/break.exp: Disable pending breakpoints.  Update for
	output changes.
	* configure.ac: Add gdb.linespec.
	* configure: Rebuild.
	* Makefile.in (ALL_SUBDIRS): Add gdb.linespec.
gdb/doc
2011-12-06  Tom Tromey  <tromey@@redhat.com>

	* gdb.texinfo (Set Breaks): Update for new behavior.
@
text
@d27 1
d3788 72
@


1.268.2.1
log
@Copyright year update in most files of the GDB Project.

gdb/ChangeLog:

        Copyright year update in most files of the GDB Project.
@
text
@d3 3
a5 1
   Copyright (C) 1986, 1988-2012 Free Software Foundation, Inc.
@


1.267
log
@	* utils.c (report_command_stats): Cast delta_wall_time 'tv_sec' and
	'tv_usec' to long for printf since these fields have a type which
	varies.
@
text
@d3654 11
@


1.266
log
@	* defs.h (is_cplus_marker, set_demangling_style): Moved to ...
	* gdb-demangle.h: ... here.  New file.
	* demangle.c: #include "gdb-demangle.h".
	(_initialize_demangler): Use initialize_file_ftype for prototype.
	Move "set demangle" and "set asm-demangle" parameters here from utils.c
	(demangle, show_demangle, asm_demangle, show_asm_demangle): Move here
	from utils.c
	* utils.c: Update. #include "gdb-demangle.h".
	* symtab.h (asm_demangle): Delete.
	(demangle): Move declaration next to use.
	* breakpoint.c: #include "gdb-demangle.h" instead of "demangle.h".
	* dwarf2read.c: #include "gdb-demangle.h".
	* gnu-v2-abi.c: Ditto.
	* jv-typeprint.c: Ditto.
	* mdebugread.c: Ditto.
	* p-typeprint.c: Ditto.
	* stabsread.c: Ditto.
	* printcmd.c: Ditto.
	(asm_demangle): Delete declaration.
	* tui/tui-stack.c: #include "gdb-demangle.h".
@
text
@d710 2
a711 1
			 delta_wall_time.tv_sec, delta_wall_time.tv_usec);
@


1.265
log
@	* utils.c: #include "timeval-utils.h".
	(cmd_stats): Rename start_time to start_cpu_time.
	New member start_wall_time.
	(report_command_stats): Report wall time.
	(make_command_stats_cleanup): Record start wall time.

	doc/
	* gdb.texinfo (Maintenance Commands): Update docs of "maint time".
@
text
@d53 1
a53 1
#include "demangle.h"
a140 29
/* Nonzero means that encoded C++/ObjC names should be printed out in their
   C++/ObjC form rather than raw.  */

int demangle = 1;
static void
show_demangle (struct ui_file *file, int from_tty,
	       struct cmd_list_element *c, const char *value)
{
  fprintf_filtered (file,
		    _("Demangling of encoded C++/ObjC names "
		      "when displaying symbols is %s.\n"),
		    value);
}

/* Nonzero means that encoded C++/ObjC names should be printed out in their
   C++/ObjC form even in assembler language displays.  If this is set, but
   DEMANGLE is zero, names are printed raw, i.e. DEMANGLE controls.  */

int asm_demangle = 0;
static void
show_asm_demangle (struct ui_file *file, int from_tty,
		   struct cmd_list_element *c, const char *value)
{
  fprintf_filtered (file,
		    _("Demangling of C++/ObjC names in "
		      "disassembly listings is %s.\n"),
		    value);
}

a2837 7
  add_setshow_boolean_cmd ("demangle", class_support, &demangle, _("\
Set demangling of encoded C++/ObjC names when displaying symbols."), _("\
Show demangling of encoded C++/ObjC names when displaying symbols."), NULL,
			   NULL,
			   show_demangle,
			   &setprintlist, &showprintlist);

a2861 7
  add_setshow_boolean_cmd ("asm-demangle", class_support, &asm_demangle, _("\
Set demangling of C++/ObjC names in disassembly listings."), _("\
Show demangling of C++/ObjC names in disassembly listings."), NULL,
			   NULL,
			   show_asm_demangle,
			   &setprintlist, &showprintlist);

@


1.264
log
@gdb/
	* defs.h (struct so_list): New forward declaration.
	(make_cleanup_free_so): New declaration.
	* solib-svr4.c (ignore_first_link_map_entry): Remove.
	(svr4_free_so): Move the function here from downwards.  Handle NULL
	so->lm_info.
	(svr4_free_library_list): New.
	(svr4_read_so_list): New, moved here code from svr4_current_sos.
	Use more cleanups.  Use new parameter ignore_first instead of
	ignore_first_link_map_entry.
	(svr4_current_sos): New variable ignore_first, initialize it.  New
	variable back_to, use it for svr4_free_library_list protection.
	(svr4_free_so): Remove - move upwards.
	* utils.c: Include solist.h.
	(do_free_so, make_cleanup_free_so): New functions.
@
text
@d48 1
d695 2
a696 1
  long start_time;
d728 6
a733 1
      long cmd_time = get_run_time () - start_stats->start_time;
d736 4
a739 3
			 ? _("Startup time: %ld.%06ld\n")
			 : _("Command execution time: %ld.%06ld\n"),
			 cmd_time / 1000000, cmd_time % 1000000);
d775 2
a776 1
  new_stat->start_time = get_run_time ();
@


1.263
log
@	Add new "alias" command.
	* NEWS: Mention new command.
	* command.h (valid_user_defined_cmd_name_p): Declare.
	* defs.h (make_cleanup_dyn_string_delete): Declare.
	* utils.c: #include "dyn-string.h".
	(do_dyn_string_delete, make_cleanup_dyn_string_delete): New functions.
	* cli/cli-cmds.c: #include "dyn-string.h".
	(argv_to_dyn_string, valid_command_p, alias_command): New functions.
	(init_cli_cmds): Add new command.
	* cli/cli-decode.c (valid_user_defined_cmd_name_p): New function.

	doc/
	* gdb.texinfo (Extending GDB): Document alias command.

	testsuite/
	* gdb.base/alias.exp: Add tests for alias command.
@
text
@d63 1
d499 18
@


1.262
log
@gdb/
	Implement basic support for DW_TAG_GNU_call_site.
	* block.c: Include gdbtypes.h and exceptions.h.
	(call_site_for_pc): New function.
	* block.h (call_site_for_pc): New declaration.
	* defs.h: Include hashtab.h.
	(make_cleanup_htab_delete, core_addr_hash, core_addr_eq): New
	declarations.
	* dwarf2-frame.c (dwarf2_frame_ctx_funcs): Install
	ctx_no_push_dwarf_reg_entry_value.
	* dwarf2expr.c (read_uleb128, read_sleb128): Support R as NULL.
	(dwarf_block_to_dwarf_reg): New function.
	(execute_stack_op) <DW_OP_GNU_entry_value>: Implement it.
	(ctx_no_push_dwarf_reg_entry_value): New function.
	* dwarf2expr.h (struct dwarf_expr_context_funcs): New field
	push_dwarf_reg_entry_value.
	(ctx_no_push_dwarf_reg_entry_value, dwarf_block_to_dwarf_reg): New
	declarations.
	* dwarf2loc.c: Include gdbcmd.h.
	(dwarf_expr_ctx_funcs): New forward declaration.
	(entry_values_debug, show_entry_values_debug, call_site_to_target_addr)
	(dwarf_expr_reg_to_entry_parameter)
	(dwarf_expr_push_dwarf_reg_entry_value): New.
	(dwarf_expr_ctx_funcs): Install dwarf_expr_push_dwarf_reg_entry_value.
	(dwarf2_evaluate_loc_desc_full): Handle NO_ENTRY_VALUE_ERROR.
	(needs_dwarf_reg_entry_value): New function.
	(needs_frame_ctx_funcs): Install it.
	(_initialize_dwarf2loc): New function.
	* dwarf2loc.h (entry_values_debug): New declaration.
	* dwarf2read.c (struct dwarf2_cu): New field call_site_htab.
	(read_call_site_scope): New forward declaration.
	(process_full_comp_unit): Copy call_site_htab.
	(process_die): Support DW_TAG_GNU_call_site.
	(read_call_site_scope): New function.
	(dwarf2_get_pc_bounds): Support NULL HIGHPC.
	(dwarf_tag_name): Support DW_TAG_GNU_call_site.
	(cleanup_htab): Delete.
	(write_psymtabs_to_index): Use make_cleanup_htab_delete instead of it.
	* exceptions.h (enum errors): New NO_ENTRY_VALUE_ERROR.
	* gdb-gdb.py (StructMainTypePrettyPrinter): Support
	FIELD_LOC_KIND_DWARF_BLOCK.
	* gdbtypes.h (enum field_loc_kind): New entry
	FIELD_LOC_KIND_DWARF_BLOCK.
	(struct main_type): New loc entry dwarf_block.
	(struct call_site, FIELD_DWARF_BLOCK, SET_FIELD_DWARF_BLOCK)
	(TYPE_FIELD_DWARF_BLOCK): New.
	* python/py-type.c: Include dwarf2loc.h.
	(check_types_equal): Support FIELD_LOC_KIND_DWARF_BLOCK.  New
	internal_error call on unknown FIELD_LOC_KIND.
	* symtab.h (struct symtab): New field call_site_htab.
	* utils.c (do_htab_delete_cleanup, make_cleanup_htab_delete)
	(core_addr_hash, core_addr_eq): New functions.

gdb/testsuite/
	Implement basic support for DW_TAG_GNU_call_site.
	* gdb.arch/Makefile.in (EXECUTABLES): Add amd64-entry-value.
	* gdb.arch/amd64-entry-value.cc: New file.
	* gdb.arch/amd64-entry-value.exp: New file.
@
text
@d23 1
d242 12
@


1.261
log
@gdb/
	Code cleanup.
	* amd64-tdep.c (amd64_skip_prologue): Move the XMM code to ...
	(amd64_skip_xmm_prologue): ... this new function.  Describe its
	parameters.  No longer use amd64_prologue_line_bug.
	* defs.h (producer_is_gcc_ge_4): New declaration.
	* dwarf2read.c (producer_is_gcc_ge_4): Move to utils.c.
	(process_full_comp_unit): Update its caller.  Remove
	amd64_prologue_line_bug initialization.
	* symtab.h (struct symtab): Remove field amd64_prologue_line_bug.
	* utils.c (producer_is_gcc_ge_4): Moved here from dwarf2read.c.
@
text
@d406 18
d2932 21
@


1.260
log
@gdb/
	Fix TUI screen corruption.
	* utils.c (fputs_maybe_filtered): Replace !input_from_terminal_p by
	batch_flag.
@
text
@d3694 44
@


1.259
log
@gdb/
	* breakpoint.c (bpstat_do_actions): New variable cleanup_if_error, call
	make_bpstat_clear_actions_cleanup and discard_cleanups for it.
	* defs.h (make_bpstat_clear_actions_cleanup): New declaration.
	* exceptions.c (throw_exception): Remove the bpstat_clear_actions call.
	* inf-loop.c (inferior_event_handler): New variable cleanup_if_error,
	call make_bpstat_clear_actions_cleanup and discard_cleanups for it.
	Call bpstat_clear_actions for failed fetch_inferior_event_wrapper.
	* infrun.c (fetch_inferior_event): Call
	make_bpstat_clear_actions_cleanup.
	* top.c (execute_command): New variable cleanup_if_error, call
	make_bpstat_clear_actions_cleanup and discard_cleanups for it.
	* utils.c (do_bpstat_clear_actions_cleanup)
	(make_bpstat_clear_actions_cleanup): New functions.

gdb/testsuite/
	* gdb.base/commands.exp (error_clears_commands_left): New function.
	(): Call it.
@
text
@d2134 2
a2135 2
      || ! pagination_enabled
      || ! input_from_terminal_p ()
@


1.258
log
@2011-07-22  Kwok Cheung Yeung  <kcy@@codesourcery.com>

gdb/
	* defs.h: Add guard against inclusion in gdbserver.
	(struct ptid, ptid_t): Move to common/ptid.h.
	(xfree, xzalloc, xasprintf, xvasprintf, xstrprintf, xstrvprintf,
	xsnprintf, internal_error): Move to common/common-utils.h.
	(nomem): Delete.
	* gdb_assert.h: Move into common/ sub-directory.
	* gdb_locale.h: Ditto.
	* gdb_dirent.h: Ditto.
	* inferior.h (minus_one_ptid, null_ptid, ptid_build, pid_to_ptid,
	ptid_get_pid, ptid_get_lwp, ptid_get_tid, ptid_equal, ptid_is_pid):
	Move into common/ptid.h.
	* xml-support.c (xml_escape_text): Move into common/xml-utils.c.
	(gdb_xml_create_parser_and_cleanup_1, xml_fetch_context_from_file):
	Change nomem to malloc_failure.
	* xml-support.h (xml_escape_text): Move into common/xml-utils.h.
	* utils.c (nomem): Rename to malloc_failure.
	(xmalloc, xzalloc, xrealloc, xcalloc, xfree, xstrprintf, xasprintf,
	xvasprintf, xstrvprintf, xsnprintf): Move to common/common-utils.c.
	(gdb_buildargv): Change nomem to malloc_failure.
	* infrun.c (null_ptid, minus_one_ptid, ptid_build, pid_to_ptid,
	ptid_get_pid, ptid_get_lwp, ptid_get_tid, ptid_equal,
	ptid_is_pid): Move into common/ptid.c.
	(initialize_infrun): Delete initialization of null_ptid and
	minus_one_ptid.
	* linux-nat.c (linux_nat_xfer_osdata): Defer to
	linux_common_xfer_osdata.
	* Makefile.in (SFILES): Add common/common-utils.c, common/xml-utils.c,
	common/ptid.c and common/buffer.c.
	(HFILES_NO_SRCDIR): Add common/common-utils.h, common/xml-utils.h,
	common/ptid.h, common/buffer.h and common/linux-osdata.h.
	(COMMON_OBS): Add xml-utils.o, common-utils.o, buffer.o and ptid.o.
	(common-utils.o, xml-utils.o, ptid.o, buffer.o, linux-osdata.o): New
	rules.
	* common/gdb_assert.h: New.
	* common/gdb_dirent.h: New.
	* common/gdb_locale.h: New.
	* common/buffer.c: New.
	* common/buffer.h: New.
	* common/ptid.c: New.
	* common/ptid.h: New.
	* common/xml-utils.c: New.
	* common/xml-utils.h: New.
	* common/common-utils.c: New.
	* common/common-utils.h: New.
	* common/linux-osdata.c: New.
	* common/linux-osdata.h: New.
	* config/alpha/alpha-linux.mh (NATDEPFILES): Add linux-osdata.o.
	* config/arm/linux.mh (NATDEPFILES): Ditto.
	* config/i386/linux.mh (NATDEPFILES): Ditto.
	* config/i386/linux64.mh (NATDEPFILES): Ditto.
	* config/ia64/linux.mh (NATDEPFILES): Ditto.
	* config/m32r/linux.mh (NATDEPFILES): Ditto.
	* config/m68k/linux.mh (NATDEPFILES): Ditto.
	* config/mips/linux.mh (NATDEPFILES): Ditto.
	* config/pa/linux.mh (NATDEPFILES): Ditto.
	* config/powerpc/linux.mh (NATDEPFILES): Ditto.
	* config/powerpc/ppc64-linux.mh (NATDEPFILES): Ditto.
	* config/s390/s390.mh (NATDEPFILES): Ditto.
	* config/sparc/linux.mh (NATDEPFILES): Ditto.
	* config/sparc/linux64.mh (NATDEPFILES): Ditto.
	* config/xtensa/linux.mh (NATDEPFILES): Ditto.

gdbserver/
	* linux-low.c (compare_ints, unique, list_threads, show_process,
	linux_core_of_thread): Delete.
	(linux_target_ops): Change linux_core_of_thread to
	linux_common_core_of_thread.
	(linux_qxfer_osdata): Defer to linux_common_xfer_osdata.
	* utils.c (malloc_failure): Change type of argument.
	(xmalloc, xrealloc, xcalloc, xsnprintf): Delete.
	* Makefile.in (SFILES): Add common/common-utils.c, common/xml-utils.c,
	common/linux-osdata.c, common/ptid.c and common/buffer.c.
	(OBS): Add xml-utils.o, common-utils.o, ptid.o and buffer.o.
	(IPA_OBJS): Add common-utils-ipa.o.
	(ptid_h, linux_osdata_h): New macros.
	(server_h): Add common/common-utils.h, common/xml-utils.h,
	common/buffer.h, common/gdb_assert.h, common/gdb_locale.h and
	common/ptid.h.
	(common-utils-ipa.o, common-utils.o, xml-utils.o, linux-osdata.o,
	ptid.o, buffer.o): New rules.
	(linux-low.o): Add common/linux-osdata.h as a dependency.
	* configure.srv (srv_tgtobj): Add linux-osdata.o to Linux targets.
	* configure.ac: Add AC_HEADER_DIRENT check.
	* config.in: Regenerate.
	* configure: Regenerate.
	* remote-utils.c (xml_escape_text): Delete.
	(buffer_grow, buffer_free, buffer_init, buffer_finish,
	buffer_xml_printf): Move to common/buffer.c.
	* server.c (main): Remove call to initialize_inferiors.
	* server.h (struct ptid, ptid_t, minus_one_ptid, null_ptid,
	ptid_build, pid_to_ptid, ptid_get_pid, ptid_get_lwp, ptid_get_tid,
	ptid_equal, ptid_is_pid, initialize_inferiors, xml_escape_text,
	internal_error, gdb_assert, gdb_assert_fail): Delete.
	(struct buffer, buffer_grow, buffer_free, buffer_init, buffer_finish,
	buffer_xml_printf, buffer_grow_str, buffer_grow_str0): Move to
	common/buffer.h.
	* inferiors.c (null_ptid, minus_one_ptid, ptid_build, pid_to_ptid,
	ptid_get_pid, ptid_get_lwp, ptid_get_tid, ptid_equal, ptid_is_pid,
	initialize_inferiors): Delete.
@
text
@d3677 17
@


1.257
log
@2011-05-27  Pedro Alves  <pedro@@codesourcery.com>

	gdb/
	* utils.c (struct continuation, add_continuation)
	(add_inferior_continuation)
	(do_all_inferior_continuations, discard_all_inferior_continuations)
	(restore_thread_cleanup, do_all_continuations_ptid)
	(do_all_continuations_thread_callback)
	(do_all_continuations_thread, do_all_continuations)
	(discard_all_continuations_thread_callback)
	(discard_all_continuations_thread, discard_all_continuations)
	(add_intermediate_continuation)
	(do_all_intermediate_continuations_thread_callback)
	(do_all_intermediate_continuations_thread)
	(do_all_intermediate_continuations)
	(discard_all_intermediate_continuations_thread_callback)
	(discard_all_intermediate_continuations_thread)
	(discard_all_intermediate_continuations): Move to ...
	* continuations.c: ... this new file, and adjust to no longer
	implement continuations on top of cleanups.
	* Makefile.in (SFILES): Add continuations.c.
	(COMMON_OBS): Add continuations.o.
@
text
@d1213 1
a1213 1
nomem (long size)
a1226 140
/* The xmalloc() (libiberty.h) family of memory management routines.

   These are like the ISO-C malloc() family except that they implement
   consistent semantics and guard against typical memory management
   problems.  */

/* NOTE: These are declared using PTR to ensure consistency with
   "libiberty.h".  xfree() is GDB local.  */

PTR				/* ARI: PTR */
xmalloc (size_t size)
{
  void *val;

  /* See libiberty/xmalloc.c.  This function need's to match that's
     semantics.  It never returns NULL.  */
  if (size == 0)
    size = 1;

  val = malloc (size);		/* ARI: malloc */
  if (val == NULL)
    nomem (size);

  return (val);
}

void *
xzalloc (size_t size)
{
  return xcalloc (1, size);
}

PTR				/* ARI: PTR */
xrealloc (PTR ptr, size_t size)	/* ARI: PTR */
{
  void *val;

  /* See libiberty/xmalloc.c.  This function need's to match that's
     semantics.  It never returns NULL.  */
  if (size == 0)
    size = 1;

  if (ptr != NULL)
    val = realloc (ptr, size);	/* ARI: realloc */
  else
    val = malloc (size);		/* ARI: malloc */
  if (val == NULL)
    nomem (size);

  return (val);
}

PTR				/* ARI: PTR */
xcalloc (size_t number, size_t size)
{
  void *mem;

  /* See libiberty/xmalloc.c.  This function need's to match that's
     semantics.  It never returns NULL.  */
  if (number == 0 || size == 0)
    {
      number = 1;
      size = 1;
    }

  mem = calloc (number, size);		/* ARI: xcalloc */
  if (mem == NULL)
    nomem (number * size);

  return mem;
}

void
xfree (void *ptr)
{
  if (ptr != NULL)
    free (ptr);		/* ARI: free */
}


/* Like asprintf/vasprintf but get an internal_error if the call
   fails.  */

char *
xstrprintf (const char *format, ...)
{
  char *ret;
  va_list args;

  va_start (args, format);
  ret = xstrvprintf (format, args);
  va_end (args);
  return ret;
}

void
xasprintf (char **ret, const char *format, ...)
{
  va_list args;

  va_start (args, format);
  (*ret) = xstrvprintf (format, args);
  va_end (args);
}

void
xvasprintf (char **ret, const char *format, va_list ap)
{
  (*ret) = xstrvprintf (format, ap);
}

char *
xstrvprintf (const char *format, va_list ap)
{
  char *ret = NULL;
  int status = vasprintf (&ret, format, ap);

  /* NULL is returned when there was a memory allocation problem, or
     any other error (for instance, a bad format string).  A negative
     status (the printed length) with a non-NULL buffer should never
     happen, but just to be sure.  */
  if (ret == NULL || status < 0)
    internal_error (__FILE__, __LINE__, _("vasprintf call failed"));
  return ret;
}

int
xsnprintf (char *str, size_t size, const char *format, ...)
{
  va_list args;
  int ret;

  va_start (args, format);
  ret = vsnprintf (str, size, format, args);
  gdb_assert (ret < size);
  va_end (args);

  return ret;
}

d1248 1
a1248 1

d3604 1
a3604 1
    nomem (0);
@


1.256
log
@	* utils.c (do_value_free): New function.
	(make_cleanup_value_free): Likewise.
	* dwarf2loc.c (dwarf2_evaluate_loc_desc_full): Handle value
	freeing correctly.
	(dwarf2_loc_desc_needs_frame): Call
	make_cleanup_value_free_to_mark.
	* dwarf2expr.h (struct dwarf_expr_context) <mark>: Remove field.
	* dwarf2expr.c (free_dwarf_expr_context): Don't call
	value_free_to_mark.
	(new_dwarf_expr_context): Don't call value_mark.
	* dwarf2-frame.c (execute_stack_op): Call
	make_cleanup_value_free_to_mark.
	* defs.h (make_cleanup_value_free): Declare.
@
text
@a720 262

/* Continuations are implemented as cleanups internally.  Inherit from
   cleanups.  */
struct continuation
{
  struct cleanup base;
};

/* Add a continuation to the continuation list of THREAD.  The new
   continuation will be added at the front.  */
void
add_continuation (struct thread_info *thread,
		  void (*continuation_hook) (void *), void *args,
		  void (*continuation_free_args) (void *))
{
  struct cleanup *as_cleanup = &thread->continuations->base;
  make_cleanup_ftype *continuation_hook_fn = continuation_hook;

  make_my_cleanup2 (&as_cleanup,
		    continuation_hook_fn,
		    args,
		    continuation_free_args);

  thread->continuations = (struct continuation *) as_cleanup;
}

/* Add a continuation to the continuation list of INFERIOR.  The new
   continuation will be added at the front.  */

void
add_inferior_continuation (void (*continuation_hook) (void *), void *args,
			   void (*continuation_free_args) (void *))
{
  struct inferior *inf = current_inferior ();
  struct cleanup *as_cleanup = &inf->continuations->base;
  make_cleanup_ftype *continuation_hook_fn = continuation_hook;

  make_my_cleanup2 (&as_cleanup,
		    continuation_hook_fn,
		    args,
		    continuation_free_args);

  inf->continuations = (struct continuation *) as_cleanup;
}

/* Do all continuations of the current inferior.  */

void
do_all_inferior_continuations (void)
{
  struct cleanup *as_cleanup;
  struct inferior *inf = current_inferior ();

  if (inf->continuations == NULL)
    return;

  /* Copy the list header into another pointer, and set the global
     list header to null, so that the global list can change as a side
     effect of invoking the continuations and the processing of the
     preexisting continuations will not be affected.  */

  as_cleanup = &inf->continuations->base;
  inf->continuations = NULL;

  /* Work now on the list we have set aside.  */
  do_my_cleanups (&as_cleanup, NULL);
}

/* Get rid of all the inferior-wide continuations of INF.  */

void
discard_all_inferior_continuations (struct inferior *inf)
{
  struct cleanup *continuation_ptr = &inf->continuations->base;

  discard_my_cleanups (&continuation_ptr, NULL);
  inf->continuations = NULL;
}

static void
restore_thread_cleanup (void *arg)
{
  ptid_t *ptid_p = arg;

  switch_to_thread (*ptid_p);
}

/* Walk down the continuation list of PTID, and execute all the
   continuations.  There is a problem though.  In some cases new
   continuations may be added while we are in the middle of this loop.
   If this happens they will be added in the front, and done before we
   have a chance of exhausting those that were already there.  We need
   to then save the beginning of the list in a pointer and do the
   continuations from there on, instead of using the global beginning
   of list as our iteration pointer.  */
static void
do_all_continuations_ptid (ptid_t ptid,
			   struct continuation **continuations_p)
{
  struct cleanup *old_chain;
  ptid_t current_thread;
  struct cleanup *as_cleanup;

  if (*continuations_p == NULL)
    return;

  current_thread = inferior_ptid;

  /* Restore selected thread on exit.  Don't try to restore the frame
     as well, because:

    - When running continuations, the selected frame is always #0.

    - The continuations may trigger symbol file loads, which may
      change the frame layout (frame ids change), which would trigger
      a warning if we used make_cleanup_restore_current_thread.  */

  old_chain = make_cleanup (restore_thread_cleanup, &current_thread);

  /* Let the continuation see this thread as selected.  */
  switch_to_thread (ptid);

  /* Copy the list header into another pointer, and set the global
     list header to null, so that the global list can change as a side
     effect of invoking the continuations and the processing of the
     preexisting continuations will not be affected.  */

  as_cleanup = &(*continuations_p)->base;
  *continuations_p = NULL;

  /* Work now on the list we have set aside.  */
  do_my_cleanups (&as_cleanup, NULL);

  do_cleanups (old_chain);
}

/* Callback for iterate over threads.  */
static int
do_all_continuations_thread_callback (struct thread_info *thread, void *data)
{
  do_all_continuations_ptid (thread->ptid, &thread->continuations);
  return 0;
}

/* Do all continuations of thread THREAD.  */
void
do_all_continuations_thread (struct thread_info *thread)
{
  do_all_continuations_thread_callback (thread, NULL);
}

/* Do all continuations of all threads.  */
void
do_all_continuations (void)
{
  iterate_over_threads (do_all_continuations_thread_callback, NULL);
}

/* Callback for iterate over threads.  */
static int
discard_all_continuations_thread_callback (struct thread_info *thread,
					   void *data)
{
  struct cleanup *continuation_ptr = &thread->continuations->base;

  discard_my_cleanups (&continuation_ptr, NULL);
  thread->continuations = NULL;
  return 0;
}

/* Get rid of all the continuations of THREAD.  */
void
discard_all_continuations_thread (struct thread_info *thread)
{
  discard_all_continuations_thread_callback (thread, NULL);
}

/* Get rid of all the continuations of all threads.  */
void
discard_all_continuations (void)
{
  iterate_over_threads (discard_all_continuations_thread_callback, NULL);
}


/* Add a continuation to the intermediate continuation list of THREAD.
   The new continuation will be added at the front.  */
void
add_intermediate_continuation (struct thread_info *thread,
			       void (*continuation_hook)
			       (void *), void *args,
			       void (*continuation_free_args) (void *))
{
  struct cleanup *as_cleanup = &thread->intermediate_continuations->base;
  make_cleanup_ftype *continuation_hook_fn = continuation_hook;

  make_my_cleanup2 (&as_cleanup,
		    continuation_hook_fn,
		    args,
		    continuation_free_args);

  thread->intermediate_continuations = (struct continuation *) as_cleanup;
}

/* Walk down the cmd_continuation list, and execute all the
   continuations.  There is a problem though.  In some cases new
   continuations may be added while we are in the middle of this
   loop.  If this happens they will be added in the front, and done
   before we have a chance of exhausting those that were already
   there.  We need to then save the beginning of the list in a pointer
   and do the continuations from there on, instead of using the
   global beginning of list as our iteration pointer.  */
static int
do_all_intermediate_continuations_thread_callback (struct thread_info *thread,
						   void *data)
{
  do_all_continuations_ptid (thread->ptid,
			     &thread->intermediate_continuations);
  return 0;
}

/* Do all intermediate continuations of thread THREAD.  */
void
do_all_intermediate_continuations_thread (struct thread_info *thread)
{
  do_all_intermediate_continuations_thread_callback (thread, NULL);
}

/* Do all intermediate continuations of all threads.  */
void
do_all_intermediate_continuations (void)
{
  iterate_over_threads (do_all_intermediate_continuations_thread_callback,
			NULL);
}

/* Callback for iterate over threads.  */
static int
discard_all_intermediate_continuations_thread_callback (struct thread_info *thread,
							void *data)
{
  struct cleanup *continuation_ptr = &thread->intermediate_continuations->base;

  discard_my_cleanups (&continuation_ptr, NULL);
  thread->intermediate_continuations = NULL;
  return 0;
}

/* Get rid of all the intermediate continuations of THREAD.  */
void
discard_all_intermediate_continuations_thread (struct thread_info *thread)
{
  discard_all_intermediate_continuations_thread_callback (thread, NULL);
}

/* Get rid of all the intermediate continuations of all threads.  */
void
discard_all_intermediate_continuations (void)
{
  iterate_over_threads (discard_all_intermediate_continuations_thread_callback,
			NULL);
}
@


1.255
log
@gdb/
	* mi/mi-main.c (mi_cmd_execute): Use cleanup from
	prepare_execute_command.
	* top.c (prepare_execute_command): Return cleanup.
	(execute_command): Use cleanup from prepare_execute_command.
	* top.h (prepare_execute_command): Change prototype to return
	cleanup.
	* defs.h (struct value): Add opaque declaration.
	(make_cleanup_value_free_to_mark): Add prototype.
	* utils.c (do_value_free_to_mark): New function.
	(make_cleanup_value_free_to_mark): Likewise.

gdb/testsuite/
	* gdb.python/py-function.exp: Test setting a value from a function
	which executes a command.
@
text
@d451 16
@


1.254
log
@gdb/doc/
	* gdb.texinfo (Index Section Format): Change the version to 5.
	Describe the different formula.

gdb/
	Case insensitive lookups implementation.
	* dwarf2read.c: Include ctype.h.
	(struct mapped_index): New field version.
	(mapped_index_string_hash): New parameter index_version.  New comment
	for it.  Call tolower appropriately.
	(find_slot_in_mapped_hash): New variable cmp, initialize it, use it.
	Choose the right index version for mapped_index_string_hash.
	(dwarf2_read_index): Support also the index version 5.  Initialize the
	new struct mapped_index field version.
	(hash_strtab_entry): Pass INT_MAX for the new parameter, explain why.
	(find_slot): Explain the version needs.  Pass INT_MAX for the new
	parameter.
	(write_psymtabs_to_index): Produce version 5.
	* minsyms.c (lookup_minimal_symbol): New variable cmp, initialize it,
	use it.  New comment for SYMBOL_MATCHES_SEARCH_NAME.
	* psymtab.c (lookup_partial_symbol): Find the
	SYMBOL_MATCHES_SEARCH_NAME start of the found block of matching
	entries.
	* symtab.c (lookup_symbol_in_language): Remove the case_sensitive_off
	NAME lowercasing.
	(search_symbols): Pass REG_ICASE to regcomp for case_sensitive_off.
	(completion_list_add_name): New variable ncmp, initialize it, use it.
	* symtab.h (SYMBOL_HASH_NEXT): Always call tolower.
	* utils.c (strcmp_iw): Support case_sensitive_off.
	(strcmp_iw_ordered): Sort in a way compatible with case_sensitive_off.
	New function comment part.  New variables saved_string1,
	saved_string2 and case_pass.  Add a proper second pass.

gdb/testsuite/
	* gdb.base/fortran-sym-case.c: New file.
	* gdb.base/fortran-sym-case.exp: New file.
	* gdb.dwarf2/dw2-case-insensitive-debug.S: New file.
	* gdb.dwarf2/dw2-case-insensitive.c: New file.
	* gdb.dwarf2/dw2-case-insensitive.exp: New file.
@
text
@d434 17
@


1.253
log
@gdb/
	Format the code for the next patch.
	* dwarf2read.c (struct mapped_index): Include delimiting newlines.
	* utils.c (strcmp_iw_ordered): Reformat the code for the next patch.
	New variables c1 and c2.
@
text
@d2977 6
a2982 4
      if (*string1 != *string2)
	{
	  break;
	}
d3003 4
d3032 4
a3035 2
  /* Formatting stub.  */
  if (1)
d3049 7
d3058 2
d3077 1
a3077 1
	    return 0;
d3088 5
a3092 2
	  else
	    return c1 - c2;
d3094 10
@


1.252
log
@gdb
	* windows-tdep.c (windows_xfer_shared_library):
	* windows-nat.c (get_module_name, windows_make_so):
	* v850-tdep.c (v850_handle_pushm):
	* utils.c (null_cleanup, gdb_realpath):
	* ui-out.c (get_next_header):
	* tracepoint.c (clear_traceframe_info):
	* symtab.c (lookup_symtab):
	* serial.h (struct serial_ops):
	* mipsread.c (read_alphacoff_dynamic_symtab):
	* infcmd.c (print_return_value):
	* ia64-linux-tdep.c (ia64_linux_sigcontext_register_address):
	* f-exp.y (parse_number):
	* exceptions.c (catch_exceptions):
	* dummy-frame.c (dummy_frame_this_id):
	* defs.h (struct cleanup):
	* breakpoint.c (disable_breakpoints_in_unloaded_shlib):
	* arm-tdep.c (arm_push_dummy_call):
	* amd64-tdep.h (amd64_collect_xsave):
	* amd64-tdep.c (amd64_collect_xsave):
	* alpha-tdep.c (alpha_heuristic_frame_unwind_cache):
	* README (typing): Remove duplicate words.
	* cli/cli-decode.c (lookup_cmd_composition): Add comma.
	* infrun.c (siginfo_value_read): Fix typo.
	* solib-frv.c (frv_fdpic_find_global_pointer): Likewise.
	* top.c (source_line_number): Add comma.
gdb/doc
	* gdbint.texinfo (Register Information Functions): Remove
	duplicate "the".
	* gdb.texinfo (Emacs): Remove duplicate "to".
	(GDB/MI Variable Objects): Remove duplicate "the".
	(General Query Packets): Likewise.
gdb/testsuite
	* gdb.mi/mi-nsmoribund.exp:
	* gdb.hp/gdb.objdbg/objdbg01.exp:
	* gdb.base/structs.exp (test_struct_returns):
	* gdb.base/call-sc.exp (test_scalar_returns):
	* gdb.base/bigcore.exp: Remove duplicate words.
gdb/gdbserver
	* win32-low.c (handle_load_dll): Remove duplicate "the".
@
text
@d3026 2
a3027 1
  while ((*string1 != '\0') && (*string2 != '\0'))
d3029 6
a3034 1
      while (isspace (*string1))
d3036 15
a3050 1
	  string1++;
d3052 2
a3053 1
      while (isspace (*string2))
d3055 18
a3072 1
	  string2++;
a3073 31
      if (*string1 != *string2)
	{
	  break;
	}
      if (*string1 != '\0')
	{
	  string1++;
	  string2++;
	}
    }

  switch (*string1)
    {
      /* Characters are non-equal unless they're both '\0'; we want to
	 make sure we get the comparison right according to our
	 comparison in the cases where one of them is '\0' or '('.  */
    case '\0':
      if (*string2 == '\0')
	return 0;
      else
	return -1;
    case '(':
      if (*string2 == '\0')
	return 1;
      else
	return -1;
    default:
      if (*string2 == '(')
	return 1;
      else
	return *string1 - *string2;
@


1.251
log
@	* utils.c (report_command_stats): Don't print `-' for negative
	number.
@
text
@d584 1
a584 1
   for a possibly long chain of cleanups.  This is useful where we
d3608 1
a3608 1
     to the problems described in in method 3, have modified their
@


1.250
log
@2011-03-31  Thiago Jung Bauermann  <bauerman@@br.ibm.com>
	    Sergio Durigan Junior  <sergiodj@@linux.vnet.ibm.com>

	Implement support for PowerPC BookE ranged breakpoints.

gdb/
	* NEWS: Mention support for ranged breakpoints on embedded PowerPC.
	* breakpoint.h (struct bp_target_info) <length>: New member
	variable.
	(struct breakpoint_ops) <breakpoint_hit>: Take struct bp_location
	instead of struct breakpoint as argument, and also add ASPACE
	and BP_ADDR arguments.  Update all callers.
	(struct breakpoint_ops) <print_one_detail>: New method.
	(struct breakpoint) <addr_string_range_end>: New member variable.
	* breakpoint.c (breakpoint_location_address_match): Add function
	prototype.
	(insert_bp_location): Set bl->target_info.length.
	(breakpoint_here_p): Call breakpoint_location_address_match.
	(moribund_breakpoint_here_p): Likewise.
	(regular_breakpoint_inserted_here_p): Likewise.
	(breakpoint_thread_match): Likewise.
	(bpstat_stop_status): Likewise.
	(bpstat_check_location): Move call to
	breakpoint_ops.breakpoint_hit to the top.
	(print_one_breakpoint_location): Call
	breakpoint_ops.print_one_detail if available.
	(breakpoint_address_match_range): New function.
	(breakpoint_location_address_match): Likewise.
	(breakpoint_locations_match): Compare the length field of the
	locations too.
	(hw_breakpoint_used_count): Count resources used by all locations
	in a breakpoint, and use breakpoint_ops.resources_needed if
	available.
	(breakpoint_hit_ranged_breakpoint): New function.
	(resources_needed_ranged_breakpoint): Likewise.
	(print_it_ranged_breakpoint): Likewise.
	(print_one_ranged_breakpoint): Likewise.
	(print_one_detail_ranged_breakpoint): Likewise.
	(print_mention_ranged_breakpoint): Likewise.
	(print_recreate_ranged_breakpoint): Likewise.
	(ranged_breakpoint_ops): New structure.
	(find_breakpoint_range_end): New function.
	(break_range_command): Likewise.
	(delete_breakpoint): Free addr_string_range_end.
	(update_breakpoint_locations): Add SALS_END argument.  Update
	all callers.  Calculate breakpoint length if a non-zero SALS_END
	is given.  Call breakpoint_locations_match instead of
	breakpoint_address_match.
	(reset_breakpoint): Find SaL of the end of the range if B is a
	ranged breakpoint.
	(_initialize_breakpoint): Register break-range command.
	* defs.h (print_core_address): Add function prototype.
	* ppc-linux-nat.c (ppc_linux_ranged_break_num_registers): New
	function.
	(ppc_linux_insert_hw_breakpoint): Support ranged breakpoints.
	(ppc_linux_remove_hw_breakpoint): Likewise.
	(_initialize_ppc_linux_nat): Initialize
	to_ranged_break_num_registers.
	* target.c (update_current_target): Add comment about
	to_ranged_break_num_registers.
	(target_ranged_break_num_registers): New function.
	* target.h (struct target_ops) <to_ranged_break_num_registers>:
	New method.
	(target_ranged_break_num_registers): Add function prototype.
	* ui-out.c (ui_out_field_core_addr): Move address-printing logic to ...
	* utils.c (print_core_address): ... here.

gdb/doc/
	* gdb.texinfo (PowerPC Embedded): Document ranged breakpoints.
@
text
@d660 2
a661 2
			 ? _("Space used: %ld (%c%ld during startup)\n")
			 : _("Space used: %ld (%c%ld for this command)\n"),
d663 1
a663 1
			 (space_diff >= 0 ? '+' : '-'),
@


1.250.2.1
log
@	* utils.c (report_command_stats): Don't print `-' for negative
	number.
@
text
@d660 2
a661 2
			 ? _("Space used: %ld (%s%ld during startup)\n")
			 : _("Space used: %ld (%s%ld for this command)\n"),
d663 1
a663 1
			 (space_diff >= 0 ? "+" : ""),
@


1.249
log
@2011-03-05  Michael Snyder  <msnyder@@vmware.com>

	* dwarf2expr.c (execute_stack_op): Delete superfluous semicolon.
	* mdebugread.c (parse_symbol): Ditto.
	* parse.c (parse_exp_in_context): Ditto.
	* source.c (add_path): Ditto.
	* utils.c (gnu_debuglink_crc32): Ditto.
	* varobj.c (variable_language): Ditto.
@
text
@d3227 19
@


1.248
log
@add i18n markup in error message (utils.c:parse_escape)

gdb/ChangeLog:

       * utils.c (parse_escape): Add i18n markup in error message.
@
text
@d3736 1
a3736 1
  return ~crc & 0xffffffff;;
@


1.247
log
@2011-03-02  Michael Snyder  <msnyder@@vmware.com>

	* utils.c (parse_escape): Escape the escape char.
@
text
@d2004 2
a2005 2
    error ("The escape sequence `\\%c' is equivalent to plain `%c',"
	   " which has no equivalent\nin the `%s' character set.",
@


1.246
log
@2011-02-28  Michael Snyder  <msnyder@@vmware.com>

	* utils.c (nquery): Call va_end before return;
	(yquery): Ditto.
	(query): Ditto.
@
text
@d2004 3
a2006 4
    error
      ("The escape sequence `\%c' is equivalent to plain `%c', which"
       " has no equivalent\n" "in the `%s' character set.", c, c,
       target_charset (gdbarch));
@


1.245
log
@	* cli/cli-cmds.c (apropos_command): Free the compiled regex.  Use
	get_regcomp_error.
	* utils.c: Include gdb_regex.h.
	(do_regfree_cleanup): New function.
	(make_regfree_cleanup): Likewise.
	(get_regcomp_error): Likewise.
	* gdb_regex.h (make_regfree_cleanup, get_regcomp_error): Declare.
@
text
@d1848 1
d1851 1
a1851 1
  return defaulted_query (ctlstr, 'n', args);
d1853 1
d1866 1
d1869 1
a1869 1
  return defaulted_query (ctlstr, 'y', args);
d1871 1
d1883 1
d1886 1
a1886 1
  return defaulted_query (ctlstr, '\0', args);
d1888 1
@


1.244
log
@2011-01-11  Michael Snyder  <msnyder@@vmware.com>

	* ui-file.c: Comment cleanup, mostly periods and spaces.
	* ui-file.h: Ditto.
	* ui-out.c: Ditto.
	* ui-out.h: Ditto.
	* utils.c: Ditto.
	* v850-tdep.c: Ditto.
	* valarith.c: Ditto.
	* valops.c: Ditto.
	* valprint.c: Ditto.
	* valprint.h: Ditto.
	* value.c: Ditto.
	* value.h: Ditto.
	* varobj.c: Ditto.
	* varobj.h: Ditto.
	* vax-tdep.c: Ditto.
	* vec.c: Ditto.
	* vec.h: Ditto.
	* version.h: Ditto.
	* windows-nat.c: Ditto.
	* windows-tdep.c: Ditto.
	* xcoffread.c: Ditto.
	* xcoffsolib.c: Ditto.
	* xml-support.c: Ditto.
	* xstormy16-tdep.c: Ditto.
	* xtensa-tdep.c: Ditto.
	* xtensa-tdep.h: Ditto.
@
text
@d76 1
d1647 31
@


1.243
log
@2011-01-05  Michael Snyder  <msnyder@@vmware.com>

	* addrmap.c: Shorten lines of >= 80 columns.
	* arch-utils.c: Ditto.
	* arch-utils.h: Ditto.
	* ax-gdb.c: Ditto.
	* ax-general.c: Ditto.
	* bcache.c: Ditto.
	* blockframe.c: Ditto.
	* breakpoint.c: Ditto.
	* buildsym.c: Ditto.
	* c-lang.c: Ditto.
	* c-typeprint.c: Ditto.
	* charset.c: Ditto.
	* coffread.c: Ditto.
	* command.h: Ditto.
	* corelow.c: Ditto.
	* cp-abi.c: Ditto.
	* cp-namespace.c: Ditto.
	* cp-support.c: Ditto.
	* dbug-rom.c: Ditto.
	* dbxread.c: Ditto.
	* defs.h: Ditto.
	* dfp.c: Ditto.
	* dfp.h: Ditto.
	* dictionary.c: Ditto.
	* disasm.c: Ditto.
	* doublest.c: Ditto.
	* dwarf2-frame.c: Ditto.
	* dwarf2expr.c: Ditto.
	* dwarf2loc.c: Ditto.
	* dwarf2read.c: Ditto.
	* elfread.c: Ditto.
	* eval.c: Ditto.
	* event-loop.c: Ditto.
	* event-loop.h: Ditto.
	* exceptions.h: Ditto.
	* exec.c: Ditto.
	* expprint.c: Ditto.
	* expression.h: Ditto.
	* f-lang.c: Ditto.
	* f-valprint.c: Ditto.
	* findcmd.c: Ditto.
	* frame-base.c: Ditto.
	* frame-unwind.c: Ditto.
	* frame-unwind.h: Ditto.
	* frame.c: Ditto.
	* frame.h: Ditto.
	* gcore.c: Ditto.
	* gdb-stabs.h: Ditto.
	* gdb_assert.h: Ditto.
	* gdb_dirent.h: Ditto.
	* gdb_obstack.h: Ditto.
	* gdbcore.h: Ditto.
	* gdbtypes.c: Ditto.
	* gdbtypes.h: Ditto.
	* inf-ttrace.c: Ditto.
	* infcall.c: Ditto.
	* infcmd.c: Ditto.
	* inflow.c: Ditto.
	* infrun.c: Ditto.
	* inline-frame.h: Ditto.
	* language.c: Ditto.
	* language.h: Ditto.
	* libunwind-frame.c: Ditto.
	* libunwind-frame.h: Ditto.
	* linespec.c: Ditto.
	* linux-nat.c: Ditto.
	* linux-nat.h: Ditto.
	* linux-thread-db.c: Ditto.
	* machoread.c: Ditto.
	* macroexp.c: Ditto.
	* macrotab.c: Ditto.
	* main.c: Ditto.
	* maint.c: Ditto.
	* mdebugread.c: Ditto.
	* memattr.c: Ditto.
	* minsyms.c: Ditto.
	* monitor.c: Ditto.
	* monitor.h: Ditto.
	* objfiles.c: Ditto.
	* objfiles.h: Ditto.
	* osabi.c: Ditto.
	* p-typeprint.c: Ditto.
	* p-valprint.c: Ditto.
	* parse.c: Ditto.
	* printcmd.c: Ditto.
	* proc-events.c: Ditto.
	* procfs.c: Ditto.
	* progspace.c: Ditto.
	* progspace.h: Ditto.
	* psympriv.h: Ditto.
	* psymtab.c: Ditto.
	* record.c: Ditto.
	* regcache.c: Ditto.
	* regcache.h: Ditto.
	* remote-fileio.c: Ditto.
	* remote.c: Ditto.
	* ser-mingw.c: Ditto.
	* ser-tcp.c: Ditto.
	* ser-unix.c: Ditto.
	* serial.c: Ditto.
	* serial.h: Ditto.
	* solib-frv.c: Ditto.
	* solib-irix.c: Ditto.
	* solib-osf.c: Ditto.
	* solib-pa64.c: Ditto.
	* solib-som.c: Ditto.
	* solib-sunos.c: Ditto.
	* solib-svr4.c: Ditto.
	* solib-target.c: Ditto.
	* solib.c: Ditto.
	* somread.c: Ditto.
	* source.c: Ditto.
	* stabsread.c: Ditto.
	* stabsread.c: Ditto.
	* stack.c: Ditto.
	* stack.h: Ditto.
	* symfile-mem.c: Ditto.
	* symfile.c: Ditto.
	* symfile.h: Ditto.
	* symmisc.c: Ditto.
	* symtab.c: Ditto.
	* symtab.h: Ditto.
	* target-descriptions.c: Ditto.
	* target-memory.c: Ditto.
	* target.c: Ditto.
	* target.h: Ditto.
	* terminal.h: Ditto.
	* thread.c: Ditto.
	* top.c: Ditto.
	* tracepoint.c: Ditto.
	* tracepoint.h: Ditto.
	* ui-file.c: Ditto.
	* ui-file.h: Ditto.
	* ui-out.h: Ditto.
	* user-regs.c: Ditto.
	* user-regs.h: Ditto.
	* utils.c: Ditto.
	* valarith.c: Ditto.
	* valops.c: Ditto.
	* valprint.c: Ditto.
	* valprint.h: Ditto.
	* value.c: Ditto.
	* varobj.c: Ditto.
	* varobj.h: Ditto.
	* vec.h: Ditto.
	* xcoffread.c: Ditto.
	* xcoffsolib.c: Ditto.
	* xcoffsolib.h: Ditto.
	* xml-syscall.c: Ditto.
	* xml-tdesc.c: Ditto.
@
text
@d41 1
a41 1
/* SunOS's curses.h has a '#define reg register' in it.  Thank you Sun. */
d116 1
a116 1
/* Nonzero if we have job control. */
d587 1
a587 1
   we have a do-nothing one to always use as the base. */
d632 2
a633 2
   must be a pointer to a struct cmd_stat. This function is intended
   to be called as a cleanup. */
d892 1
a892 1
   continuations. There is a problem though. In some cases new
d894 1
a894 1
   loop. If this happens they will be added in the front, and done
d896 1
a896 1
   there. We need to then save the beginning of the list in a pointer
d898 1
a898 1
   global beginning of list as our iteration pointer.*/
d966 1
a966 1
      wrap_here ("");		/* Force out any buffered output */
d1095 1
a1095 1
/* Print a message reporting an internal error/warning. Ask the user
d1388 1
a1388 1
     unreasonable. */
d1438 1
a1438 1
   memory requested in SIZE. */
d1536 1
a1536 1
   fails. */
d1724 1
a1724 1
      wrap_here ("");		/* Flush any buffered output */
d1766 1
a1766 1
      /* Eat rest of input line, to EOF or newline */
d1900 1
a1900 1
  int target_char = -2;	/* initialize to avoid GCC warnings */
d1976 1
a1976 1
   of the program being debugged. */
d2028 1
a2028 1
   the language of the program being debugged. */
d2313 1
a2313 1
  dont_repeat ();		/* Forget prev cmd -- CR won't repeat it. */
d2326 1
a2326 1
   a newline should be inserted here rather than when it hits the end. 
d2349 1
a2349 1
  /* This should have been allocated, but be paranoid anyway. */
d2383 1
a2383 1
   arranging strings in columns of n chars. String can be
d2387 1
a2387 1
   command, which currently doesn't tabulate very well */
d2428 1
a2428 1
   commands, starts at the beginning of the line.  I.E. if there is
d2430 1
a2430 1
   line.  Otherwise do nothing. */
d2528 1
a2528 1
	      /* Now output indentation and wrapped string */
d2532 2
a2533 2
		  *wrap_pointer = '\0';	/* Null-terminate saved stuff */
		  fputs_unfiltered (wrap_buffer, stream);   /* and eject it */
d2537 1
a2537 1
		     longer than (the user settable) chars_per_line. 
d2891 1
a2891 1
   demangling is off, the name is printed in its "raw" form. */
d2925 1
a2925 1
   function). */
d3151 1
a3151 1
/* Machine specific function to handle SIGWINCH signal. */
d3156 2
a3157 2
/* print routines to handle variable size regs, etc. */
/* temporary storage using circular buffer */
d3177 1
a3177 1
     when it won't occur. */
d3194 1
a3194 1
     about the real size of addr as the above does? */
d3399 1
a3399 1
 * and 'o' formats do not include a prefix (0x or leading 0). */
d3597 1
a3597 1
     a copy of filename if it does not contain any directory prefix. */
d3604 1
a3604 1
     then the closing \000 character */
d3619 1
a3619 1
     filename. If the dirname realpath already contains an ending
@


1.242
log
@run copyright.sh for 2011.
@
text
@d145 3
a147 2
  fprintf_filtered (file, _("\
Demangling of encoded C++/ObjC names when displaying symbols is %s.\n"),
d160 3
a162 2
  fprintf_filtered (file, _("\
Demangling of C++/ObjC names in disassembly listings is %s.\n"),
d175 2
a176 2
  fprintf_filtered (file, _("\
Printing of 8-bit characters in strings as \\nnn is %s.\n"),
d362 2
a363 2
/* Remember the current value of *VARIABLE and make it restored when the cleanup
   is run.  */
d378 2
a379 2
/* Remember the current value of *VARIABLE and make it restored when the cleanup
   is run.  */
d919 2
a920 1
  iterate_over_threads (do_all_intermediate_continuations_thread_callback, NULL);
d946 2
a947 1
  iterate_over_threads (discard_all_intermediate_continuations_thread_callback, NULL);
d1055 2
a1056 1
/* Check whether GDB will be able to dump core using the dump_core function.  */
d1071 3
a1073 2
			  _("%s\nUnable to dump core, use `ulimit -c unlimited'"
			    " before executing GDB next time.\n"), reason);
d1158 4
a1161 4
    reason = xstrprintf ("\
%s:%d: %s: %s\n\
A problem internal to GDB has been detected,\n\
further debugging may prove unreliable.", file, line, problem->name, msg);
d1329 2
a1330 2
  set_doc = xstrprintf (_("\
Set whether GDB should quit when an %s is detected"),
d1332 2
a1333 2
  show_doc = xstrprintf (_("\
Show whether GDB will quit when an %s is detected"),
d1349 2
a1350 2
  set_doc = xstrprintf (_("\
Set whether GDB should create a core file of GDB when %s is detected"),
d1352 2
a1353 2
  show_doc = xstrprintf (_("\
Show whether GDB will create a core file of GDB when %s is detected"),
d1706 2
a1707 1
      printf_filtered (_("(%s or %s) [answered %c; input not from terminal]\n"),
d2071 2
a2072 2
  fprintf_filtered (file, _("\
Number of lines gdb thinks are in a page is %s.\n"),
d2082 3
a2084 2
  fprintf_filtered (file, _("\
Number of characters gdb thinks are in a line is %s.\n"),
d2351 2
a2352 1
    internal_error (__FILE__, __LINE__, _("failed internal consistency check"));
d2361 1
a2361 1
  if (chars_per_line == UINT_MAX)	/* No line overflow checking */
d2533 1
a2533 1
		  fputs_unfiltered (wrap_buffer, stream);	/* and eject it */
d2552 2
a2553 1
	  wrap_here ((char *) 0);	/* Spit out chars, cancel further wraps */
d3079 2
a3080 1
  fprintf_filtered (file, _("Timestamping debugging messages is %s.\n"), value);
d3385 2
a3386 2
    internal_error (__FILE__, __LINE__,
		    _("hex_string_custom: insufficient space to store result"));
d3893 2
a3894 1
#define AMBIGUOUS_MESS2	".\nUse \"set gnutarget format-name\" to specify the format."
@


1.241
log
@2010-12-17  Michael Snyder  <msnyder@@vmware.com>

	* utils.c (do_my_cleanups): Comment fix-up.
@
text
@d5 1
a5 1
   2009, 2010 Free Software Foundation, Inc.
@


1.240
log
@gdb/
	Redirect also uiout and stdtarg{,err} in execute_command_to_string.
	* cli-logging.c (struct saved_output_files) <targerr>: New.
	(set_logging_redirect, pop_output_files, handle_redirections):
	Redirect also gdb_stdtargerr.
	* defs.h (struct ui_out, make_cleanup_ui_out_redirect_pop): New
	declarations.
	* event-top.c (gdb_setup_readline, gdb_disable_readline): Redirect
	also gdb_stdtargerr.
	* top.c (execute_command_to_string): Move make_cleanup_ui_file_delete
	to the top.  Redirect also gdb_stdlog, gdb_stdtarg and gdb_stdtargerr.
	Use ui_out_redirect, register make_cleanup_ui_out_redirect_pop.
	* tui/tui-io.c (tui_setup_io): Redirect also gdb_stdtargerr.
	* utils.c (do_ui_out_redirect_pop, make_cleanup_ui_out_redirect_pop):
	New functions.

gdb/testsuite/
	* gdb.python/python.exp (set height 0, collect help from uiout)
	(verify help to uiout): New tests.
@
text
@d478 1
a478 1
      *pmy_chain = ptr->next;	/* Do this first incase recursion */
@


1.239
log
@gdb/
	* defs.h (make_cleanup_restore_uinteger, make_cleanup_restore_ui_file)
	(make_cleanup_restore_page_info)
	(set_batch_flag_and_make_cleanup_restore_page_info): New declarations.
	* gdbcmd.h (execute_command_to_string): New declaration.
	* python/python.c (struct restore_ui_file_closure, restore_ui_file)
	(make_cleanup_restore_ui_file): Move to utils.c
	(execute_gdb_command) <to_string>: Move ...
	* top.c (execute_command_to_string): ... here.  Call
	set_batch_flag_and_make_cleanup_restore_page_info.
	* utils.c (make_cleanup_restore_integer): New source file blank line.
	(make_cleanup_restore_uinteger): New.
	(struct restore_ui_file_closure, do_restore_ui_file)
	(make_cleanup_restore_ui_file): Move here from python/python.c.
	(init_page_info) <batch_flag>
	(do_restore_page_info_cleanup, make_cleanup_restore_page_info)
	(set_batch_flag_and_make_cleanup_restore_page_info): New.

gdb/testsuite/
	* gdb.python/python.exp (show height, set height 10)
	(verify pagination beforehand, verify pagination beforehand: q)
	(gdb.execute does not page, verify pagination afterwards)
	(verify pagination afterwards: q): New.

gdb/doc/
	* gdb.texinfo (Mode Options) <-batch>
	(Basic Python) <gdb.execute>: Describe setting width and height.
@
text
@d314 20
@


1.238
log
@gdb/
	* top.c (input_from_terminal_p): Return 0 on BATCH_FLAG.
	* utils.c (defaulted_query): Do not explicitly check for BATCH_FLAG.
	(fputs_maybe_filtered): Do not do filtering also on
	! INPUT_FROM_TERMINAL_P.
@
text
@d342 1
d356 9
d383 28
d2093 6
d2143 38
@


1.237
log
@gdb/
	Make core files the process_stratum.
	* corefile.c (core_target): New variable.
	(core_file_command): Remove variable t, use core_target.
	* corelow.c (core_ops): Make it static.
	(init_core_ops): Change to process_stratum.  Initialize CORE_TARGET.
	* defs.h (make_cleanup_unpush_target): New prototype.
	* gdbarch.h: Regenerate.
	* gdbarch.sh (core_pid_to_str): Remove core_stratum from its comment.
	* gdbcore.h (core_target): New declaration.
	* inf-ptrace.c (inf_ptrace_create_inferior, inf_ptrace_attach): New
	variables ops_already_pushed and back_to.  Use push_target,
	make_cleanup_unpush_target and discard_cleanups calls.
	* record.c (record_open): Replace core_stratum by a core_bfd check.
	* target.c (target_is_pushed): New function.
	(find_core_target): Remove.
	* target.h (enum strata) <core_stratum>: Remove.
	(target_is_pushed): New declaration.
	(find_core_target): Remove declaration.
	* tracepoint.c (init_tfile_ops) <to_stratum>: Remove comment.
	* utils.c (do_unpush_target, make_cleanup_unpush_target): New functions.

gdb/doc/
	Make core files the process_stratum.
	* gdb.texinfo (Active Targets): Remove core_stratum.  Include
	record_stratum example.

gdb/testsuite/
	Make core files the process_stratum.
	* gdb.base/corefile.exp (run: load core again)
	(run: sanity check we see the core file, run: with core)
	(run: core file is cleared, attach: load core again)
	(attach: sanity check we see the core file, attach: with core)
	(attach: core file is cleared): New tests.
	* gdb.base/coremaker.c (main): New parameters.  Implement "sleep" argv.
@
text
@d1637 1
a1637 1
  if (batch_flag || ! input_from_terminal_p ())
d2355 2
a2356 1
      || !pagination_enabled
@


1.236
log
@Refactor 'maint time' command statistics.

Consolidate code for displaying per-command time and space statistics to avoid
duplication.  Piggyback on cleanups so that statistics get printed even when
commands terminate as a result of an error.

Changelog

    * gdb/defs.h (make_command_stats_cleanup): Declare.
    (set_display_time): Declare.
    (set_display_space): Declare.
    * gdb/event-top.c (command_handler): Use make_command_stats_cleanup.
    * gdb/main.c (display_time, display_space): Move definitions to utils.c.
    (captured_main): Use make_command_stats_cleanup to get start-up
    statistics.
    Use set_display_time and set_display_space for processing OPT_STATISTICS
    case.
    * gdb/maint.c (maintenance_time_display): Use set_display_time.
    (maintenance_space_display): Use set_display_space.
    * gdb/top.c (execute_command): Remove obsolete 'maint time' code.
    (command_loop): Use make_command_stats_cleanup.
    * gdb/utils.c (struct cmd_stats): Structure for storing initial time
    and space usage.
    (display_time, display_space): Move definitions here from utils.c.
    (set_display_time): New function.
    (set_display_space): New function.
    (make_command_stats_cleanup): New function.
    (report_command_stats): New auxiliary function for
    make_command_stats_cleanup.
    * gdb/testsuite/gdb.gdb/selftest.exp: Adjust expected message for
    capturing start-up runtime.
@
text
@d355 18
@


1.236.2.1
log
@gdb/
	* top.c (input_from_terminal_p): Return 0 on BATCH_FLAG.
	* utils.c (defaulted_query): Do not explicitly check for BATCH_FLAG.
	(fputs_maybe_filtered): Do not do filtering also on
	! INPUT_FROM_TERMINAL_P.
@
text
@d1619 1
a1619 1
  if (! input_from_terminal_p ())
d2337 1
a2337 2
      || ! pagination_enabled
      || ! input_from_terminal_p ()
@


1.236.2.2
log
@gdb/
	* defs.h (make_cleanup_restore_uinteger, make_cleanup_restore_ui_file)
	(make_cleanup_restore_page_info)
	(set_batch_flag_and_make_cleanup_restore_page_info): New declarations.
	* gdbcmd.h (execute_command_to_string): New declaration.
	* python/python.c (struct restore_ui_file_closure, restore_ui_file)
	(make_cleanup_restore_ui_file): Move to utils.c
	(execute_gdb_command) <to_string>: Move ...
	* top.c (execute_command_to_string): ... here.  Call
	set_batch_flag_and_make_cleanup_restore_page_info.
	* utils.c (make_cleanup_restore_integer): New source file blank line.
	(make_cleanup_restore_uinteger): New.
	(struct restore_ui_file_closure, do_restore_ui_file)
	(make_cleanup_restore_ui_file): Move here from python/python.c.
	(init_page_info) <batch_flag>
	(do_restore_page_info_cleanup, make_cleanup_restore_page_info)
	(set_batch_flag_and_make_cleanup_restore_page_info): New.

gdb/testsuite/
	* gdb.python/python.exp (show height, set height 10)
	(verify pagination beforehand, verify pagination beforehand: q)
	(gdb.execute does not page, verify pagination afterwards)
	(verify pagination afterwards: q): New.

gdb/doc/
	* gdb.texinfo (Mode Options) <-batch>
	(Basic Python) <gdb.execute>: Describe setting width and height.
@
text
@a341 1

a354 37
/* Remember the current value of *VARIABLE and make it restored when the cleanup
   is run.  */

struct cleanup *
make_cleanup_restore_uinteger (unsigned int *variable)
{
  return make_cleanup_restore_integer ((int *) variable);
}

struct restore_ui_file_closure
{
  struct ui_file **variable;
  struct ui_file *value;
};

static void
do_restore_ui_file (void *p)
{
  struct restore_ui_file_closure *closure = p;

  *(closure->variable) = closure->value;
}

/* Remember the current value of *VARIABLE and make it restored when
   the cleanup is run.  */

struct cleanup *
make_cleanup_restore_ui_file (struct ui_file **variable)
{
  struct restore_ui_file_closure *c = XNEW (struct restore_ui_file_closure);

  c->variable = variable;
  c->value = *variable;

  return make_cleanup_dtor (do_restore_ui_file, (void *) c, xfree);
}

a2036 6
  if (batch_flag)
    {
      lines_per_page = UINT_MAX;
      chars_per_line = UINT_MAX;
    }
  else
a2080 38
/* Helper for make_cleanup_restore_page_info.  */

static void
do_restore_page_info_cleanup (void *arg)
{
  set_screen_size ();
  set_width ();
}

/* Provide cleanup for restoring the terminal size.  */

struct cleanup *
make_cleanup_restore_page_info (void)
{
  struct cleanup *back_to;

  back_to = make_cleanup (do_restore_page_info_cleanup, NULL);
  make_cleanup_restore_uinteger (&lines_per_page);
  make_cleanup_restore_uinteger (&chars_per_line);

  return back_to;
}

/* Temporarily set BATCH_FLAG and the associated unlimited terminal size.
   Provide cleanup for restoring the original state.  */

struct cleanup *
set_batch_flag_and_make_cleanup_restore_page_info (void)
{
  struct cleanup *back_to = make_cleanup_restore_page_info ();
  
  make_cleanup_restore_integer (&batch_flag);
  batch_flag = 1;
  init_page_info ();

  return back_to;
}

@


1.235
log
@2010-05-16  Michael Snyder  <msnyder@@vmware.com>

	* target.c: White space.
	* target-descriptions.c: White space.
	* target-memory.c: White space.
	* thread.c: White space.
	* top.c: White space.
	* tracepoint.c: White space.
	* trad-frame.c: White space.
	* tramp-frame.c: White space.
	* ui-file.c: White space.
	* ui-out.c: White space.
	* user-regs.c: White space.
	* utils.c: White space.
@
text
@d516 94
@


1.234
log
@2010-05-10  Michael Snyder  <msnyder@@vmware.com>

	* utils.c: White space cleanup.
@
text
@d946 1
d980 1
a1805 1

d1882 1
d2078 1
d2971 1
a2972 1
  int i = 0;
d3012 1
a3013 1
  int i = 0;
d3107 1
d3184 1
d3203 1
d3246 1
d3261 1
d3301 1
d3315 1
d3343 1
d3349 1
@


1.233
log
@2010-05-10  Michael Snyder  <msnyder@@vmware.com>

	* utils.c (do_fclose_cleanup) Restore local variable.
@
text
@d253 1
d261 1
d272 1
d290 1
d336 1
d347 1
d399 1
d430 1
d493 1
d589 1
d598 1
d679 1
d756 1
d812 1
d832 1
d852 1
d862 1
d1065 1
d1085 1
d1365 1
d1376 1
d1393 1
d1447 1
d1723 1
d1871 1
d2343 1
d2361 1
d2543 1
d2553 1
d2567 1
d2580 1
d2591 1
d2604 1
d2824 1
d2936 1
d3135 1
d3214 1
d3224 1
d3488 1
d3640 1
@


1.232
log
@2010-05-06  Michael Snyder  <msnyder@@vmware.com>

	* serial.c (serial_for_fd): Delete unused variable.
	* mdebugread.c (psymtab_to_symtab_1): Delete unused variable.
	* top.c (execute_command): Delete unused variable.
	(init_main): Delete unused variable.
	* utils.c (do_fclose_cleanup): Delete unused variable.
	(do_all_inferior_continuations): Delete unused variable.
	(initialize_utils): Delete unused variable.
	(internal_problem_mode): Delete unused global.
	* frame.c (get_prev_frame): Delete unused global.
	(get_frame_locals_address): Delete unused global.
	(get_frame_args_address): Delete unused global.
@
text
@d269 2
a270 1
  fclose (arg);
@


1.231
log
@* remote.c (register_remote_support_xml)
(remote_query_supported_append, remote_query_supported): Add cast
to NULL used as sentinel.
* tracepoint.c (tvariables_info_1): Likewise.
* utils.c (add_internal_problem_command): Likewise.
@
text
@a268 1
  FILE *file = arg;
a554 1
  struct cleanup *old_chain;
a899 1
static const char *internal_problem_mode = internal_problem_ask;
a2822 2
  struct cmd_list_element *c;

@


1.230
log
@gdb/
	* cli/cli-cmds.h (error_no_arg): Remove.  Move the comment ...
	* command.h (error_no_arg): ... here.  Remove NORETURN, change
	ATTR_NORETURN to ATTRIBUTE_NORETURN.
	* defs.h (NORETURN, ATTR_NORETURN): Remove.
	(perror_with_name, verror, error, error_stream, vfatal, fatal)
	(internal_verror, internal_error, nomem): Remove NORETURN, change
	ATTR_NORETURN to ATTRIBUTE_NORETURN.
	* exceptions.c (throw_exception, deprecated_throw_reason, throw_verror)
	(throw_vfatal, throw_error): Remove NORETURN.
	(throw_it): Remove NORETURN, change ATTR_NORETURN to ATTRIBUTE_NORETURN.
	* exceptions.h (throw_exception, throw_verror, throw_vfatal)
	(throw_error, deprecated_throw_reason): Remove NORETURN, change
	ATTR_NORETURN to ATTRIBUTE_NORETURN.
	* linespec.c (cplusplus_error): Remove NORETURN, change ATTR_NORETURN
	to ATTRIBUTE_NORETURN for prototype, for the definition only remove
	NORETURN.
	* remote-mips.c (mips_error): Change NORETURN to ATTRIBUTE_NORETURN.
	* remote-sim.c (gdb_os_error): Change ATTR_NORETURN to
	ATTRIBUTE_NORETURN.
	* target.c (tcomplain): Likewise.
	* target.h (noprocess): Remove NORETURN, change ATTR_NORETURN to
	ATTRIBUTE_NORETURN.
	* utils.c (verror, error, vfatal, fatal, error_stream, internal_verror)
	(internal_error, perror_with_name, nomem): Remove NORETURN.
	* xml-support.h (gdb_xml_error): Change ATTR_NORETURN to
	ATTRIBUTE_NORETURN.

gdb/doc/
	* gdbint.texinfo (Host Definition): Remove items NORETURN and
	ATTR_NORETURN.
@
text
@d1123 2
a1124 1
		  concat ("maintenance set ", problem->name, " ", NULL),
d1130 2
a1131 1
		  concat ("maintenance show ", problem->name, " ", NULL),
d3351 1
a3351 1
    result = concat (real_path, base_name, (char *)NULL);
d3353 1
a3353 1
    result = concat (real_path, SLASH_STRING, base_name, (char *)NULL);
@


1.229
log
@gdb/
	* ada-lang.c (lim_warning): Change ATTR_FORMAT to ATTRIBUTE_PRINTF.
	* amd64-tdep.c (amd64_insn_length_fprintf): Likewise.
	* cli-out.c (cli_field_fmt): New ATTRIBUTE_PRINTF.
	(cli_message, out_field_fmt): Change ATTR_FORMAT to ATTRIBUTE_PRINTF.
	* complaints.c (find_complaint): New ATTRIBUTE_PRINTF.
	(vcomplaint): Change ATTR_FORMAT to ATTRIBUTE_PRINTF.
	* complaints.h (complaint, internal_complaint): Likewise.
	* defs.h: Change ATTR_FORMAT to ATTRIBUTE_PRINTF in the top comment.
	(ATTR_FORMAT): Remove.
	(query, nquery, yquery, vprintf_filtered, vfprintf_filtered)
	(fprintf_filtered, fprintfi_filtered, printf_filtered, printfi_filtered)
	(vprintf_unfiltered, vfprintf_unfiltered, fprintf_unfiltered)
	(printf_unfiltered, xasprintf, xvasprintf, xstrprintf, xstrvprintf)
	(xsnprintf, verror, error, vfatal, fatal, internal_verror)
	(internal_error, internal_vwarning, internal_warning, warning)
	(vwarning): Change ATTR_FORMAT to ATTRIBUTE_PRINTF.
	* disasm.c (fprintf_disasm): Likewise.
	* exceptions.c (throw_it): Likewise.
	* exceptions.h (exception_fprintf, throw_verror, throw_vfatal)
	(throw_error): Likewise.
	* language.h (type_error, range_error): Likewise.
	* linespec.c (cplusplus_error): Likewise.
	* mi/mi-interp.c (mi_interp_query_hook): Likewise.
	* mi/mi-out.c (mi_field_fmt, mi_message): Likewise.
	* monitor.c (monitor_debug): Likewise.
	* parser-defs.h (parser_fprintf): Likewise.
	* serial.h (serial_printf): Likewise.
	* tui/tui-hooks.c (tui_query_hook): Likewise.
	* ui-out.c (default_field_fmt, default_message, uo_field_fmt)
	(uo_message): Likewise.
	* ui-out.h (ui_out_field_fmt, ui_out_message): Likewise.
	* utils.c (vfprintf_maybe_filtered, internal_vproblem, defaulted_query):
	Likewise.
	* xml-support.h (gdb_xml_debug, gdb_xml_error): Likewise.
@
text
@d809 1
a809 1
NORETURN void
d815 1
a815 1
NORETURN void
d828 1
a828 1
NORETURN void
d834 1
a834 1
NORETURN void
d843 1
a843 1
NORETURN void
d1039 1
a1039 1
NORETURN void
d1046 1
a1046 1
NORETURN void
d1177 1
a1177 1
NORETURN void
d1243 1
a1243 1
NORETURN void
@


1.228
log
@gdb
	PR cli/9591:
	* NEWS: Update.
	* utils.c: Include main.h.
	(fputs_maybe_filtered): Don't paginate if `batch_flag'.
	(defaulted_query): Use default answer if `batch_flag'.
	* main.h (batch_flag): Declare.
	* main.c (batch_flag): New global.
	(captured_main): Remove 'batch'.  Update.
gdb/doc
	PR cli/9591:
	* gdb.texinfo (Mode Options): Mention lack of pagination and
	confirmation with --batch.
	(Screen Size): Mention --batch.
	(Messages/Warnings): Likewise.
@
text
@d95 1
a95 1
				     va_list, int) ATTR_FORMAT (printf, 2, 0);
d919 1
a919 1
static void ATTR_FORMAT (printf, 4, 0)
d1455 1
a1455 1
static int ATTR_FORMAT (printf, 1, 0)
@


1.227
log
@gdb
2010-03-05  Corinna Vinschen  <vinschen@@redhat.com>
	    Tom Tromey  <tromey@@redhat.com>

	* utils.c (host_char_to_target): Add 'gdbarch' argument.
	(parse_escape): Likewise.
	* python/py-utils.c (unicode_to_target_string): Update.
	(unicode_to_target_python_string): Update.
	(target_string_to_unicode): Update.
	* printcmd.c (printf_command): Update.
	* p-exp.y (yylex): Update.
	* objc-exp.y (yylex): Update.
	* mi/mi-parse.c: Include charset.h.
	(mi_parse_escape): New function.
	(mi_parse_argv): Use it.
	* jv-exp.y (yylex): Update.
	* i386-cygwin-tdep.c (i386_cygwin_auto_wide_charset): New
	function.
	(i386_cygwin_init_abi): Call set_gdbarch_auto_wide_charset.
	* gdbarch.sh (auto_charset, auto_wide_charset): New.
	* gdbarch.c: Rebuild.
	* gdbarch.h: Rebuild.
	* defs.h (parse_escape): Update.
	* cli/cli-setshow.c: Include arch-utils.h.
	(do_setshow_command): Update.
	* cli/cli-cmds.c (echo_command): Update.
	* charset.h (target_charset, target_wide_charset): Update.
	* charset.c: Include arch-utils.h.
	(target_charset_name): Default to "auto".
	(target_wide_charset_name): Likewise.
	(show_target_charset_name): Handle "auto".
	(show_target_wide_charset_name): Likewise.
	(be_le_arch): New global.
	(set_be_le_names): Add 'gdbarch' argument.
	(validate): Likewise.  Don't call set_be_le_names.
	(set_charset_sfunc, set_host_charset_sfunc)
	(set_target_charset_sfunc, set_target_wide_charset_sfunc):
	Update.
	(target_charset): Add 'gdbarch' argument.
	(target_wide_charset): Likewise.  Remove 'byte_order' argument.
	(auto_target_charset_name): New global.
	(default_auto_charset, default_auto_wide_charset): New functions.
	(_initialize_charset): Set auto_target_charset_name.  Allow "auto"
	for target charsets.  Copy result of nl_langinfo.  Use GetACP if
	USE_WIN32API.
	* c-lang.c (charset_for_string_type): Add 'gdbarch' argument,
	remove 'byte_order' argument.  Update.
	(classify_type): Likewise.
	(c_emit_char): Update.
	(c_printchar): Update.
	(c_printstr): Update.
	(c_get_string): Update.
	(evaluate_subexp_c): Update.
	* arch-utils.h (default_auto_charset, default_auto_wide_charset):
	Declare.
	* python/python.c (gdbpy_target_charset): New function.
	(gdbpy_target_wide_charset): Likewise.
	(GdbMethods): Update.
	* NEWS: Update.
gdb/doc
	* gdb.texinfo (Basic Python): Document target_charset and
	target_wide_charset.
gdb/testsuite
	* gdb.python/py-prettyprint.py (pp_nullstr.to_string): Use
	gdb.target_charset.
	(pp_ns.to_string): Likewise.
@
text
@d61 1
d1500 1
a1500 1
  if (! input_from_terminal_p ())
@


1.226
log
@	* utils.c (fputs_maybe_filtered): Check if there's already a top
	level interpreter before dereferencing it.  If there isn't one,
	don't paginate either.
@
text
@d1656 1
a1656 1
host_char_to_target (int c, int *target_c)
d1666 1
a1666 1
  convert_between_encodings (target_charset (), host_charset (),
d1695 1
a1695 1
parse_escape (char **string_ptr)
d1761 1
a1761 1
  if (!host_char_to_target (c, &target_char))
d1765 1
a1765 1
       target_charset ());
@


1.225
log
@	* utils.c (fputs_maybe_filtered): Always disable pagination if the
	top level interpreter is MI.
@
text
@d2216 1
@


1.224
log
@gdb/
	* defs.h (parse_pid_to_attach): New.
	* utils.c (parse_pid_to_attach): New.
	* darwin-nat.c (darwin_attach): Replace ARGS parsing by parse_pid.
	* gnu-nat.c (gnu_attach): Likewise.
	* nto-procfs.c (procfs_attach): Likewise.
	* procfs.c (procfs_attach): Likewise.
	* windows-nat.c (windows_attach): Likewise.
	* inf-ptrace.c (inf_ptrace_attach): Likewise.  Remove variable dummy.
	* inf-ttrace.c (inf_ttrace_attach): Likewise.
	* remote.c (extended_remote_attach_1): Likewise.  New comment on getpid
	check.

gdb/testsuite/
	* gdb.base/attach.exp (attach to nonsense is prohibited): Make the
	"Illegal process-id" expect string more exact.
	(attach to digits-starting nonsense is prohibited): New.
@
text
@d74 1
d2213 4
a2216 2
  if ((stream != gdb_stdout) || !pagination_enabled
      || (lines_per_page == UINT_MAX && chars_per_line == UINT_MAX))
@


1.223
log
@2010-02-05  Hui Zhu  <teawater@@gmail.com>

	* defs.h (gdb_bfd_errmsg): New extern.
	* exec.c (exec_file_attach): Change bfd_errmsg to
	gdb_bfd_errmsg.
	* utils.c (AMBIGUOUS_MESS1): New macro.
	(AMBIGUOUS_MESS2): New macro.
	(gdb_bfd_errmsg): New function.
@
text
@d3651 20
@


1.222
log
@gdb/
	* configure.ac (AC_CHECK_FUNCS): Check for setrlimit and getrlimit.
	* configure: Regenerate.
	* config.in: Regenerate.
	* utils.c: Include sys/resource.h.
	(dump_core, can_dump_core): New.
	(internal_vproblem): Update the comment.  Check can_dump_core while
	setting dump_core_p.  Replace two abort calls by dump_core calls.
@
text
@d3611 40
@


1.221
log
@	Implement core awareness.

	* bcache.c (compare_ints): Remove
	(print_percentage): Use compare_positive_ints.
	* defs.h (compare_positive_ints): Declare.
	* linux-nat.h (struct lin_lwp): New field core.
	(linux_nat_core_of_thread_1): Declare.
	* linux-nat.c (add_lwp): Init the 'core' field.
	(linux_nat_wait_1): Record the core.
	(linux_nat_core_of_thread_1, linux_nat_core_of_thread): New.
	(linux_nat_add_target): Register the above.
	* linux-thread-db.c (update_thread_core): New.
	(thread_db_find_new_threads): Update core information for
	every thread.
	* remote.c (struct private_thread_info): New.
	(free_private_thread_info, demand_private_info): New.
	(PACKET_qXfer_threads, use_osdata_threads): New.
	(struct thread_item, threads_parsing_context
	(start_thread, end_thread, thread_attributes)
	(thread_children, threads_children, threads_elements): New.
	(remote_threads_info): Try qXfer:threads before anything
	else.
	(remote_protocol_packets): Register qXfer:threads.
	(remote_open_1): Init use_osdata_threads.
	(struct stop_reply): New field 'core'.
	(remote_parse_stop_reply): Parse core number.
	(process_stop_reply): Record core number.
	(remote_xfer_partial): Handle qXfer:threads.
	(remote_core_of_thread): New.
	(init_remote_ops): Register remote_core_of_thread.
	(_initialize_remote): Register qXfer:read.
	* target.c (target_core_of_thread): New
	* target.h (enum target_object): New value TARGET_OBJECT_THREADS.
	(struct target_ops): New field to_core_of_threads.
	(target_core_of_thread): Declare.
	* gdbthread.h (struct thread_info): New field private_dtor.
	* thread.c (print_thread_info): Report the core.
	* ui-out.c (MAX_UI_OUT_LEVELS): Increase.
	* utils.c (compare_positive_ints): New.
	* features/threads.dtd: New.
	* mi/mi-interp.c (mi_on_normal_stop): Report the core.
	* mi/mi-main.c (struct collect_cores_data, collect_cores)
	(do_nothing, free_vector_of_osdata_items)
	(splay_tree_int_comparator, free_splay_tree): New.
	(print_one_inferior_data): Implemented printing of selected
	inferiors.  Collect and print cores.
	(output_cores): New.
	(mi_cmd_list_thread_groups): Support --recurse.  Permit specifying
	thread groups together with --available.
@
text
@d29 3
d849 38
d937 1
a937 1
	abort ();	/* NOTE: GDB has only four calls to abort().  */
d946 1
a946 1
          abort (); /* NOTE: GDB has only four calls to abort().  */
d995 9
a1003 4
      /* Default (yes/batch case) is to dump core.  This leaves a GDB
         `dropping' so that it is easier to see that something went
         wrong in GDB.  */
      dump_core_p = query (_("%s\nCreate a core file of GDB? "), reason);
d1006 1
a1006 1
    dump_core_p = 1;
d1015 1
a1015 1
	abort ();		/* NOTE: GDB has only four calls to abort().  */
d1025 1
a1025 1
	    abort ();		/* NOTE: GDB has only four calls to abort().  */
@


1.220
log
@Update copyright year in most headers.

Automatic update by copyright.sh.
@
text
@d3557 8
@


1.219
log
@	* utils.c (add_internal_problem_command): Free set_doc and
	show_doc.
	* remote.c (add_packet_config_cmd): Free set_doc and show_doc.
	* language.c (add_language): Free language_set_doc.
@
text
@d5 1
a5 1
   2009 Free Software Foundation, Inc.
@


1.218
log
@	* ui-file.h (ui_file_xstrdup): Mention that the length argument
	may be NULL.
	* ui-file.c (ui_file_xstrdup): Don't dereference LENGTH if it is
	NULL.
	* aix-thread.c (aix_thread_extra_thread_info): Pass NULL as length
	parameter to ui_file_xstrdup.
	* arm-tdep.c (_initialize_arm_tdep): Ditto.
	* infrun.c (print_target_wait_results): Ditto.
	* language.c (add_language): Ditto.
	* linespec.c (cplusplus_error): Ditto.
	* remote.c (escape_buffer): Ditto.
	* typeprint.c (type_to_string): Ditto.
	* utils.c (error_stream): Ditto.
	* varobj.c (value_get_print_value): Ditto.
	* xtensa-tdep.c (xtensa_verify_config): Replace `dummy' local with
	`length' local.  Pass it to ui_file_xstrdup, and avoid an strlen
	call.
	* gdbarch.sh (verify_gdbarch): Ditto.
	* gdbarch.c: Regenerate.
	* cli/cli-setshow.c (do_setshow_command): Pass NULL as length
	parameter to ui_file_xstrdup.
	* python/python-frame.c (frapy_str): Ditto.
	* python/python-type.c (typy_str): Use the length local instead of
	calling strlen.
	* python/python-value.c (valpy_str): Pass NULL as length parameter
	to ui_file_xstrdup.
@
text
@d1101 3
d1120 3
@


1.217
log
@	* utils.c (gnu_debuglink_crc32): Store crc32_table as unsigned int
	instead of unsigned long.
@
text
@d841 1
a841 2
  long len;
  char *message = ui_file_xstrdup (stream, &len);
@


1.216
log
@(defaulted_query): Don't ask for confirmation if server
prefix is used.
@
text
@d3310 1
a3310 1
  static const unsigned long crc32_table[256] = {
@


1.215
log
@2009-07-21  Paul Pluzhnikov  <ppluzhnikov@@google.com>

	* util.c (internal_vproblem): Always print failure message.
@
text
@d1439 2
a1440 2
     prompts.  */
  if (! caution)
@


1.214
log
@2009-07-20  Marc Khouzam  <marc.khouzam@@ericsson.com>

    * utils.c (defaulted_query): Update comment and remove dead code.
@
text
@d936 9
a944 1
      quit_p = query (_("%s\nQuit this debugging session? "), reason);
@


1.213
log
@	* defs.h (strlen_paddr, paddr, paddr_nz): Remove.
	(paddress): Add GDBARCH parameter.
	* utils.c (strlen_paddr, paddr, paddr_nz): Remove.
	(paddress): Add GDBARCH parameter, use it instead of current_gdbarch.
	* ui-out.h (ui_out_field_core_addr): Add GDBARCH parameter.
	* ui-out.c (ui_out_field_core_addr): Add GDBARCH parameter,
	use it instead of current_gdbarch.

	Update calls to ui_out_field_core_addr to pass architecture:
	* ada-lang.c (print_one_exception): Update.
	* breakpoint.c (print_one_breakpoint_location,
	print_one_exception_catchpoint): Update.
	* disasm.c (dump_insns): Update.
	* darwin-nat-info.c (darwin_debug_regions_recurse): Update.
	* mi/mi-main.c (mi_cmd_data_read_memory): Update.
	* mi/mi-symbol-cmds.c: Include "objfiles.h".
	(mi_cmd_symbol_list_lines): Update.
	* stack.c (print_frame_info, print_frame): Update.

	Update callers of paddress to pass architecture:
	* ada-tasks.c (info_task): Update.
	* ada-valprint.c (ada_val_print_1): Update.
	* annotate.c (annotate_source, annotate_frame_begin): Update.
	* breakpoint.c (insert_bp_location, describe_other_breakpoints,
	mention): Update.
	* cli/cli-cmds.c (edit_command, list_command, print_disassembly):
	Update.
	* corefile.c (memory_error): Update.
	* c-valprint.c (print_function_pointer_address, c_val_print): Update.
	* disasm.c (dis_asm_print_address): Update.
	* exec.c (print_section_info): Update.
	* f-valprint.c (f_val_print): Update.
	* infcmd.c: Include "arch-utils.h".
	(jump_command, program_info): Update.
	* linux-fork.c: Include "arch-utils.h".
	(info_forks_command): Update.
	* m2-valprint.c (print_function_pointer_address,
	print_unpacked_pointer, print_variable_at_address,
	m2_val_print): Update.
	* m32r-rom.c (m32r_load_section, m32r_load, m32r_upload_command):
	Update.
	* printcmd.c (print_address, print_address_demangle, address_info):
	Update.
	* p-valprint.c (pascal_val_print): Update.
	* source.c: Include "arch-utils.h".
	(line_info): Update.
	* stack.c (frame_info, print_block_frame_labels): Update.
	* symfile.c (add_symbol_file_command, list_overlays_command): Update.
	* symmisc.c (dump_msymbols, dump_psymtab, dump_symtab_1,
	print_symbol, print_partial_symbols, maintenance_info_psymtabs,
	maintenance_check_symtabs): Update.
	* symtab.c (find_pc_sect_symtab): Update.
	* target.c (deprecated_debug_xfer_memory): Update.
	* tracepoint.c (scope_info): Update.
	* tui/tui-stack.c (tui_make_status_line): Update.
	* valprint.c (val_print_string): Update.

	Update callers of paddr_nz to use paddress instead (keeping
	user-visible output identical):
	* alpha-tdep.c (alpha_heuristic_proc_start): Update.
	* amd64-tdep.c (fixup_riprel, amd64_displaced_step_copy_insn,
	amd64_displaced_step_fixup): Update.
	* arch-utils.c (simple_displaced_step_copy_insn): Update.
	* auxv.c (fprint_target_auxv): Update.
	* breakpoint.c (insert_single_step_breakpoint): Update.
	* buildsym.c (finish_block): Update.
	* cli/cli-dump.c (restore_section_callback): Update.
	* fbsd-nat.c (fbsd_find_memory_regions): Update.
	* frame.c (frame_unwind_register_value): Update.
	* gcore.c (gcore_create_callback): Update.
	* hppa-tdep.c (hppa_frame_cache, hppa_skip_trampoline_code): Update.
	* i386-tdep.c (i386_displaced_step_fixup, i386_record_modrm,
	i386_record_lea_modrm_addr, i386_record_lea_modrm,
	i386_process_record): Update.
	* ia64-tdep.c (ia64_frame_this_id, ia64_sigtramp_frame_this_id,
	ia64_libunwind_frame_this_id, ia64_libunwind_sigtramp_frame_this_id,
	ia64_dummy_id, ia64_access_reg, ia64_access_rse_reg): Update.
	* infrun.c (displaced_step_prepare, displaced_step_fixup,
	handle_inferior_event, insert_step_resume_breakpoint_at_sal,
	insert_longjmp_resume_breakpoint): Update.
	* linux-nat.c (linux_nat_find_memory_regions): Update.
	* linux-record.c (record_linux_system_call): Update.
	* mips-tdep.c (heuristic_proc_start, mips_eabi_push_dummy_call,
	mips_n32n64_push_dummy_call, mips_o32_push_dummy_call,
	mips_o64_push_dummy_call): Update.
	* monitor.c (monitor_error, monitor_remove_breakpoint): Update.
	* record.c (record_arch_list_add_mem, record_wait,
	record_xfer_partial): Update.
	* remote-mips.c (mips_fetch_word, mips_check_lsi_error,
	mips_common_breakpoint): Update.
	* remote-sim.c (gdbsim_xfer_inferior_memory): Update.
	* rs6000-tdep.c (ppc_displaced_step_fixup): Update.
	* solib-som.c (som_current_sos): Update.
	* symfile.c (load_progress, generic_load): Update.
	* symfile-mem.c (add_vsyscall_page): Update.
	* valops.c (value_fetch_lazy): Update.
	* windows-tdep.c (windows_xfer_shared_library): Update.

	Update callers of paddr_nz to use paddress instead (changing
	user-visible output to make it more correct):
	* dwarf2loc.c (locexpr_describe_location): Update.
	* ia64-tdep.c (ia64_memory_insert_breakpoint,
	ia64_memory_remove_breakpoint): Update.
	* jv-valprint.c (java_value_print): Update.
	* m32c-tdep.c (m32c_m16c_address_to_pointer): Update.
	* monitor.c (monitor_read_memory): Update.

	Update callers of paddr to use paddress instead (changing
	user-visible output to make it more correct):
	* arm-tdep.c (arm_push_dummy_call): Update.
	* breakpoint.c (insert_bp_location, create_thread_event_breakpoint,
	create_breakpoint): Update.
	* darwin-nat-info.c (darwin_debug_regions): Update.
	* dcache.c (dcache_info): Update.
	* dsrec.c (load_srec, make_srec): Update.
	* dwarf2-frame.c (dwarf2_restore_rule, execute_cfa_program,
	dwarf2_frame_cache): Update.
	* gcore.c (gcore_copy_callback): Update.
	* gnu-nat.c (gnu_xfer_memory): Update.
	* mips-linux-nat.c (mips_show_dr): Update.
	* monitor.c (monitor_write_memory, monitor_insert_breakpoint,
	monitor_remove_breakpoint): Update.
	* remote.c (compare_sections_command): Update.
	* remote-m32r-sdi.c (m32r_xfer_memory, m32r_insert_breakpoint,
	m32r_remove_breakpoint, m32r_insert_watchpoint,
	m32r_remove_watchpoint): Update.
	* sol-thread.c (info_cb): Update.
	* symfile.c (load_progress): Update.

	Update callers of paddress or paddr_nz to use hex_string instead
	(changes output of internal/error/debug messages only):
	* dwarf2read.c (dump_die_shallow): Update.
	* frame.c (fprint_field, fprint_frame, frame_pc_unwind,
	get_frame_func, create_new_frame): Update.
	* hppa-tdep.c (find_unwind_entry, unwind_command): Update.
	* ia64-tdep.c (get_kernel_table, ia64_find_proc_info_x,
	ia64_get_dyn_info_list): Update.
	* maint.c (maintenance_translate_address): Update.
	* mi/mi-cmd-var.c (mi_cmd_var_create): Update.
	* target.c (target_flash_erase): Update.

	Update callers of paddr/paddr_nz to use phex/phex_nz instead,
	using an appropriate address size.  Remove use of strlen_paddr.
	* exec.c (exec_files_info): Update.
	* i386-nat.c (i386_show_dr): Update.
	* remote.c (remote_flash_erase): Update.
	* m32r-rom.c (m32r_load_section): Update.
	* monitor.c (monitor_vsprintf, monitor_store_register): Update.
	* remote.c (remote_check_symbols, remote_search_memory): Update.
	* remote-mips.c (mips_request, mips_common_breakpoint): Update.
	* scm-valprint.c (scm_ipruk, scm_scmval_print): Update.
	* sh64-tdep.c (sh64_show_media_regs, sh64_show_compact_regs): Update.
	* sh-tdep.c (sh_generic_show_regs, sh3_show_regs, sh2e_show_regs,
	sh2a_show_regs, sh2a_nofpu_show_regs, sh3e_show_regs,
	sh3_dsp_show_regs, sh4_show_regs, sh4_nofpu_show_regs,
	sh_dsp_show_regs): Update.
	* xcoffsolib.c (sharedlibrary_command): Update.


	* maint.c (maint_print_section_info): Add ADDR_SIZE parameter.
	Use hex_string_custom instead of paddr.
	(print_bfd_section_info): Pass address size.
	(print_objfile_section_info): Likewise.

	* annotate.h (annotate_source): Add GDBARCH parameter.
	(annotate_frame_begin): Likewise.
	* annotate.c (annotate_source): Add GDBARCH parameter.
	(annotate_frame_begin): Likewise.
	* source.c (identify_source_line): Update call to annotate_source.
	* stack.c (print_frame_info, print_frame): Update call to
	annotate_frame_begin.

	* breakpoint.c (describe_other_breakpoints): Add GDBARCH parameter.
	(create_breakpoint, create_ada_exception_breakpoint): Update call.

	* stack.c (print_block_frame_labels): Add GDBARCH parameter.
	(print_frame_label_vars): Update call.

	* symmisc.c (print_partial_symbols): Add GDBARCH parameter.
	(dump_psymtab): Update call to print_partial_symbols.
	(struct print_symbol_args): Add GDBARCH member.
	(dump_symtab_1): Set print_symbol_args architecture member.
	(print_symbol): Use it.

	* windows-tdep.h (windows_xfer_shared_library): Add GDBARCH
	parameter.
	* windows-tdep.c (windows_xfer_shared_library): Likewise.
	* i386-cygwin-tdep.c (struct cpms_data): Add GDBARCH member.
	(core_process_module_section): Pass architecture from cpms_data to
	windows_xfer_shared_library.
	(windows_core_xfer_shared_libraries): Initialize cmps_data
	architecture member.
	* windows-nat.c (windows_xfer_shared_libraries): Pass architecture
	to windows_xfer_shared_library.

	* defs.h (print_address): Add GDBARCH parameter.
	* printcmd.c (print_address): Add GDBARCH parameter.
	(print_scalar_formatted, do_examine): Update call.
	* findcmd.c (find_command): Update call.
	* tracepoint.c: Include "arch-utils.h".
	(trace_find_line_command): Update call.
	* tui/tui-disasm.c (tui_disassemble): Update call.

	* value.h (print_address_demangle): Add GDBARCH parameter.
	* printcmd.c (print_address_demangle): Add GDBARCH parameter.
	* c-valprint.c (print_function_pointer_address, c_val_print):
	Update call.
	* f-valprint.c (f_val_print): Update call.
	* gnu-v3-abi.c (gnuv3_print_method_ptr): Update call.
	* jv-valprint.c (java_val_print): Update call.
	* m2-valprint.c (print_function_pointer_address, m2_val_print):
	Update call.
	* p-valprint.c (pascal_val_print): Update call.

	* disasm.c (gdb_disassemble_info): Install architecture into
	di.application_data field.

testsuite/ChangeLog:

	* gdb.threads/tls-shared.exp: Update to locexpr_describe_location
	change to prefix TLS offset in hex with 0x.

doc/ChangeLog:

	* gdbint.texinfo (Item Output Functions): Update signature
	for ui_out_field_core_addr.
@
text
@d1436 1
a1436 1
     question we're asking, and then answer "yes" automatically.  This
a1450 5
  /* Automatically answer the default value if input is not from the user
     directly, or if the user did not want prompts.  */
  if (!input_from_terminal_p () || !caution)
    return def_value;

@


1.212
log
@ChangeLog:

	* printcmd.c (print_scalar_formatted): Always truncate
	unsigned data types.

	* cli-dump.c (struct callback_data): Change type of load_offset
	to CORE_ADDR.
	(restore_binary_file): Update type casts.
	(restore_command): Parse load_offset as address, not long.

	* utils.c (string_to_core_addr): Do not sign-extend value.
	* varobj.c (find_frame_addr_in_frame_chain): Truncate frame_base
	before comparing against requested frame address.

testsuite/ChangeLog:

	* gdb.base/dump.exp: Handle SPU like 64-bit platforms.
@
text
@a2849 18
int
strlen_paddr (void)
{
  return (gdbarch_addr_bit (current_gdbarch) / 8 * 2);
}

char *
paddr (CORE_ADDR addr)
{
  return phex (addr, gdbarch_addr_bit (current_gdbarch) / 8);
}

char *
paddr_nz (CORE_ADDR addr)
{
  return phex_nz (addr, gdbarch_addr_bit (current_gdbarch) / 8);
}

d2851 1
a2851 1
paddress (CORE_ADDR addr)
d2862 1
a2862 1
  int addr_bit = gdbarch_addr_bit (current_gdbarch);
@


1.211
log
@        * utils.c: Add include of gdb_usleep.h.
        (defaulted_query): Detect false EOF conditions that happen
        on terminals opened with the O_NONBLOCK flag when there is
        nothing to read.
@
text
@a3156 1
  int addr_bit = gdbarch_addr_bit (current_gdbarch);
a3171 11

      /* Not very modular, but if the executable format expects
         addresses to be sign-extended, then do so if the address was
         specified with only 32 significant bits.  Really this should
         be determined by the target architecture, not by the object
         file.  */
      if (i - 2 == addr_bit / 4
	  && exec_bfd
	  && bfd_get_sign_extend_vma (exec_bfd))
	addr = (addr ^ ((CORE_ADDR) 1 << (addr_bit - 1)))
	       - ((CORE_ADDR) 1 << (addr_bit - 1));
@


1.210
log
@	ARI change: Use "/* ARI: rule */" pattern.
	* utils.c: Update ARI patterns.
	* gdb_dirent.h: Likewise.
@
text
@d70 2
d1482 19
@


1.209
log
@
	* utils.c (parse_escape): Initialize target_char to pacify GCC.
@
text
@d71 1
a71 1
extern PTR malloc ();		/* OK: PTR */
d74 1
a74 1
extern PTR realloc ();		/* OK: PTR */
d1204 1
a1204 1
PTR				/* OK: PTR */
d1214 1
a1214 1
  val = malloc (size);		/* OK: malloc */
d1227 2
a1228 2
PTR				/* OK: PTR */
xrealloc (PTR ptr, size_t size)	/* OK: PTR */
d1238 1
a1238 1
    val = realloc (ptr, size);	/* OK: realloc */
d1240 1
a1240 1
    val = malloc (size);		/* OK: malloc */
d1247 1
a1247 1
PTR				/* OK: PTR */
d1260 1
a1260 1
  mem = calloc (number, size);		/* OK: xcalloc */
d1271 1
a1271 1
    free (ptr);		/* OK: free */
@


1.208
log
@gdb:
2009-03-19  Tom Tromey  <tromey@@redhat.com>
	    Julian Brown  <julian@@codesourcery.com>

	PR i18n/7220, PR i18n/7821, PR exp/8815, PR exp/9103,
	PR i18n/9401, PR exp/9613:
	* NEWS: Update
	* value.h (value_typed_string): Declare.
	(val_print_string): Update.
	* valprint.h (print_char_chars): Update.
	* valprint.c (print_char_chars): Add type argument.  Update.
	(val_print_string): Likewise.
	* valops.c (value_typed_string): New function.
	* utils.c (host_char_to_target): New function.
	(parse_escape): Use host_char_to_target, host_hex_value.  Update.
	Remove '^' case.
	(no_control_char_error): Remove.
	* typeprint.c (print_type_scalar): Update.
	* scm-valprint.c (scm_scmval_print): Update.
	* scm-lang.h (scm_printchar, scm_printstr): Update.
	* scm-lang.c (scm_printchar): Add type argument.
	(scm_printstr): Likewise.
	* printcmd.c (print_formatted): Update.
	(print_scalar_formatted): Update.
	(printf_command) <wide_string_arg, wide_char_arg>: New constants.
	Handle '%lc' and '%ls'.
	* parser-defs.h (struct typed_stoken): New type.
	(struct stoken_vector): Likewise.
	(write_exp_string_vector): Declare.
	* parse.c (write_exp_string_vector): New function.
	* p-valprint.c (pascal_val_print): Update.
	* p-lang.h (is_pascal_string_type, pascal_printchar,
	pascal_printstr): Update.
	* p-lang.c (is_pascal_string_type): Remove 'char_size' argument.
	Add 'char_type' argument.
	(pascal_emit_char): Add type argument.
	(pascal_printchar): Likewise.
	(pascal_printstr): Likewise.
	* objc-lang.c (objc_emit_char): Add type argument.
	(objc_printchar): Likewise.
	(objc_printstr): Likewise.
	* macroexp.c (get_character_constant): Handle unicode characters.
	Use c_parse_escape.
	(get_string_literal): Handle unicode strings.  Use
	c_parse_escape.
	* m2-valprint.c (print_unpacked_pointer): Update.
	(m2_print_array_contents): Update.
	(m2_val_print): Update.
	* m2-lang.c (m2_emit_char): Add type argument.
	(m2_printchar): Likewise.
	(m2_printstr): Likewise.
	* language.h (struct language_defn) <la_printchar>: Add type
	argument.
	<la_printstr, la_emitchar>: Likewise.
	(LA_PRINT_CHAR): Likewise.
	(LA_PRINT_STRING): Likewise.
	(LA_EMIT_CHAR): Likewise.
	* language.c (unk_lang_emit_char): Add type argument.
	(unk_lang_printchar): Likewise.
	(unk_lang_printstr): Likewise.
	* jv-valprint.c (java_val_print): Update.
	* jv-lang.c (java_emit_char): Add type argument.
	* f-valprint.c (f_val_print): Update.
	* f-lang.c (f_emit_char): Add type argument.
	(f_printchar): Likewise.
	(f_printstr): Likewise.
	* expprint.c (print_subexp_standard): Update.
	* charset.h (target_wide_charset): Declare.
	(c_target_char_has_backslash_escape, c_parse_backslash,
	host_char_print_literally, host_char_to_target,
	target_char_to_host, target_char_to_control_char): Remove.
	(enum transliterations): New type.
	(convert_between_encodings): Declare.
	(HOST_ESCAPE_CHAR): New define.
	(host_letter_to_control_character, host_hex_value): Declare.
	(enum wchar_iterate_result): New enum.
	(struct wchar_iterator): Declare.
	(make_wchar_iterator, make_cleanup_wchar_iterator, wchar_iterator,
	wchar_push_back): Declare.
	* charset-list.h: New file.
	* c-valprint.c (textual_name): New function.
	(textual_element_type): Handle wide character types.
	(c_val_print): Pass original type to textual_element_type.  Handle
	wide character types.
	(c_value_print): Use textual_element_type.  Pass original type of
	value to val_print.
	* c-lang.h (enum c_string_type): New type.
	(c_printchar, c_printstr): Update.
	* c-lang.c (classify_type): New function.
	(print_wchar): Likewise.
	(c_emit_char): Add type argument.  Handle wide characters.
	(c_printchar): Likewise.
	(c_printstr): Add type argument.  Handle wide and multibyte
	character sets.
	(convert_ucn): New function.
	(emit_numeric_character): Likewise.
	(convert_octal): Likewise.
	(convert_hex): Likewise.
	(ADVANCE): New macro.
	(convert_escape): New function.
	(parse_one_string): Likewise.
	(evaluate_subexp_c): Likewise.
	(exp_descriptor_c): New global.
	(c_language_defn): Use exp_descriptor_c.
	(cplus_language_defn): Likewise.
	(asm_language_defn): Likewise.
	(minimal_language_defn): Likewise.
	(charset_for_string_type): New function.
	* c-exp.y (%union): Add 'svec' and 'tsval'.
	(CHAR): New token.
	(exp): Add CHAR production.
	(string_exp): Rewrite.
	(exp) <string_exp>: Rewrite.
	(tempbuf): Now global.
	(tempbuf_init): New global.
	(parse_string_or_char): New function.
	(yylex) <tempbuf>: Now global.
	<tokptr, tempbufindex, tempbufsize, token_string, class_prefix>:
	Remove.
	Handle 'u', 'U', and 'L' prefixes.  Call parse_string_or_char.
	(c_parse_escape): New function.
	* auxv.c (fprint_target_auxv): Update.
	* ada-valprint.c (ada_emit_char): Add type argument.
	(ada_printchar): Likewise.
	(ada_print_scalar): Update.
	(printstr): Add type argument.  Update calls to ada_emit_char.
	(ada_printstr): Add type argument.
	(ada_val_print_array): Update.
	(ada_val_print_1): Likewise.
	* ada-lang.c (emit_char): Add type argument.
	* ada-lang.h (ada_emit_char, ada_printchar, ada_printstr): Add
	type arguments.
	* gdb_locale.h: Include langinfo.h.
	* charset.c (_initialize_charset): Set default host charset from
	the locale.  Don't register charsets.  Add target-wide-charset
	commands.  Call find_charset_names.
	(struct charset, struct translation): Remove.
	(GDB_DEFAULT_HOST_CHARSET): Remove.
	(GDB_DEFAULT_TARGET_WIDE_CHARSET): New define.
	(target_wide_charset_name): New global.
	(show_host_charset_name): Handle "auto".
	(show_target_wide_charset_name): New function.
	(host_charset_enum, target_charset_enum): Remove.
	(charset_enum): New global.
	(all_charsets, register_charset, lookup_charset, all_translations,
	register_translation, lookup_translation): Remove.
	(simple_charset, ascii_print_literally, ascii_to_control): Remove.
	(iso_8859_print_literally, iso_8859_to_control,
	iso_8859_family_charset): Remove.
	(ebcdic_print_literally, ebcdic_to_control,
	ebcdic_family_charset): Remove.
	(struct cached_iconv, check_iconv_cache, cached_iconv_convert,
	register_iconv_charsets): Remove.
	(target_wide_charset_be_name, target_wide_charset_le_name): New
	globals.
	(identity_either_char_to_other): Remove.
	(set_be_le_names, validate): New functions.
	(backslashable, backslashed, represented): Remove.
	(default_c_target_char_has_backslash_escape): Remove.
	(default_c_parse_backslash, iconv_convert): Remove.
	(ascii_to_iso_8859_1_table, ascii_to_ebcdic_us_table,
	ascii_to_ibm1047_table, iso_8859_1_to_ascii_table,
	iso_8859_1_to_ebcdic_us_table, iso_8859_1_to_ibm1047_table,
	ebcdic_us_to_ascii_table, ebcdic_us_to_iso_8859_1_table,
	ebcdic_us_to_ibm1047_table, ibm1047_to_ascii_table,
	ibm1047_to_iso_8859_1_table, ibm1047_to_ebcdic_us_table): Remove.
	(table_convert_char, table_translation, simple_table_translation):
	Remove.
	(current_host_charset, current_target_charset,
	c_target_char_has_backslash_escape_func,
	c_target_char_has_backslash_escape_baton): Remove.
	(c_parse_backslash_func, c_parse_backslash_baton): Remove.
	(host_char_to_target_func, host_char_to_target_baton): Remove.
	(target_char_to_host_func, target_char_to_host_baton): Remove.
	(cached_iconv_host_to_target, cached_iconv_target_to_host):
	Remove.
	(lookup_charset_or_error, check_valid_host_charset): Remove.
	(set_host_and_target_charsets): Remove.
	(set_host_charset, set_target_charset): Remove.
	(set_host_charset_sfunc, set_target_charset_sfunc): Rewrite.
	(set_target_wide_charset_sfunc): New function.
	(show_charset): Print target wide character set.
	(host_charset, target_charset): Rewrite.
	(target_wide_charset): New function.
	(c_target_char_has_backslash_escape): Remove.
	(c_parse_backslash): Remove.
	(host_letter_to_control_character): New function.
	(host_char_print_literally): Remove.
	(host_hex_value): New function.
	(target_char_to_control_char): Remove.
	(cleanup_iconv): New function.
	(convert_between_encodings): New function.
	(target_char_to_host): Remove.
	(struct wchar_iterator): Define.
	(make_wchar_iterator, make_cleanup_wchar_iterator, wchar_iterator,
	wchar_push_back): New functions.
	(do_cleanup_iterator): New function.
	(char_ptr): New typedef.
	(charsets): New global.
	(add_one, find_charset_names): New functions.
	(default_charset_names): New global.
	(auto_host_charset_name): Likewise.
	* aclocal.m4, config.in, configure: Rebuild.
	* configure.ac: Call AM_LANGINFO_CODESET.
	(GDB_DEFAULT_HOST_CHARSET): Default to UTF-8.
	(AM_ICONV): Invoke earlier.
	* acinclude.m4: Include codeset.m4.  Subst LIBICONV_INCLUDE and
	LIBICONV_LIBDIR.  Check for libiconv in build tree.
	* Makefile.in (LIBICONV_LIBDIR, LIBICONV_INCLUDE): New macros.
	(INTERNAL_CFLAGS_BASE): Add LIBICONV_INCLUDE.
	(INTERNAL_LDFLAGS): Add LIBICONV_LIBDIR.
	* gdb_obstack.h (obstack_grow_wstr): New define.
        * gdb_wchar.h: New file.
        * defs.h: Include it.
gdb/testsuite:
	* gdb.base/store.exp: Update for change to escape output.
	* gdb.base/callfuncs.exp (fetch_all_registers): Update for change
	to escape output.
	* gdb.base/pointers.exp: Update for change to escape output.
	* gdb.base/long_long.exp (gdb_test_long_long): Update for change
	to escape output.
	* gdb.base/constvars.exp (do_constvar_tests): Update for change to
	escape output.
	* gdb.base/call-rt-st.exp (print_struct_call): Update for change
	to escape output.
	* gdb.cp/ref-types.exp (gdb_start_again): Update for change to
	escape output.
	* gdb.base/setvar.exp: Update for change to escape output.
	* lib/gdb.exp (default_gdb_start): Set LC_CTYPE to C.
	* gdb.base/printcmds.exp (test_print_all_chars): Update for change
	to escape output.
	(test_print_string_constants): Likewise.
	* gdb.base/charset.exp (valid_host_charset): Check size of
	wchar_t.  Handle UCS-2 and UCS-4.  Add tests for wide and unicode
	cases.  Handle "auto"-related output.
	* gdb.base/charset.c (char16_t, char32_t): New typedefs.
	(uvar, Uvar): New globals.
gdb/doc:
	* gdb.texinfo (Character Sets): Remove obsolete text.  Document
	set target-wide-charset.
	(Requirements): Mention iconv.
@
text
@d1621 1
a1621 1
  int target_char;
@


1.207
log
@	* utils.c (do_obstack_free): New function.
	(make_cleanup_obstack_free): Likewise.
	* defs.h (make_cleanup_obstack_free): Declare.
@
text
@d1574 7
a1580 6
/* Print an error message saying that we couldn't make sense of a
   \^mumble sequence in a string or character constant.  START and END
   indicate a substring of some larger string that contains the
   erroneous backslash sequence, missing the initial backslash.  */
static NORETURN int
no_control_char_error (const char *start, const char *end)
d1582 7
a1588 2
  int len = end - start;
  char *copy = alloca (end - start + 1);
d1590 8
a1597 2
  memcpy (copy, start, len);
  copy[len] = '\0';
d1599 2
a1600 2
  error (_("There is no control character `\\%s' in the `%s' character set."),
	 copy, target_charset ());
d1623 2
a1624 5
  if (c_parse_backslash (c, &target_char))
    return target_char;
  else
    switch (c)
      {
a1629 37
      case '^':
	{
	  /* Remember where this escape sequence started, for reporting
	     errors.  */
	  char *sequence_start_pos = *string_ptr - 1;

	  c = *(*string_ptr)++;

	  if (c == '?')
	    {
	      /* XXXCHARSET: What is `delete' in the host character set?  */
	      c = 0177;

	      if (!host_char_to_target (c, &target_char))
		error (_("There is no character corresponding to `Delete' "
		       "in the target character set `%s'."), host_charset ());

	      return target_char;
	    }
	  else if (c == '\\')
	    target_char = parse_escape (string_ptr);
	  else
	    {
	      if (!host_char_to_target (c, &target_char))
		no_control_char_error (sequence_start_pos, *string_ptr);
	    }

	  /* Now target_char is something like `c', and we want to find
	     its control-character equivalent.  */
	  if (!target_char_to_control_char (target_char, &target_char))
	    no_control_char_error (sequence_start_pos, *string_ptr);

	  return target_char;
	}

	/* XXXCHARSET: we need to use isdigit and value-of-digit
	   methods of the host character set here.  */
d1640 1
a1640 1
	  int i = c - '0';
d1645 1
a1645 1
	      if (c >= '0' && c <= '7')
d1649 1
a1649 1
		  i += c - '0';
d1658 33
a1690 8
      default:
	if (!host_char_to_target (c, &target_char))
	  error
	    ("The escape sequence `\%c' is equivalent to plain `%c', which"
	     " has no equivalent\n" "in the `%s' character set.", c, c,
	     target_charset ());
	return target_char;
      }
@


1.206
log
@2008-02-21  Pedro Alves  <pedro@@codesorcery.com>

	Silence a few -Wmissing-prototypes warnings.

	PR build/9877:
	* amd64-nat.c: Include "amd64-nat.h".
	* fork-child.c (_initialize_fork_child): Ditto.
	* gcore.c (_initialize_gcore): Ditto.
	* inf-ptrace.c: Include "inf-ptrace.h".
	(inf_ptrace_store_registers): Make it static.
	* linux-nat.c (linux_nat_terminal_ours): Make it static.
	(_initialize_linux_nat): Declare before definition.
	* linux-tdep.c: Include "linux-tdep.h".
	* linux-thread-db.c (_initialize_thread_db): Declare before
	definition.
	* proc-service.c (_initialize_proc_service): Ditto.
	* remote.c (remote_send_printf): Make it static.
	* solib.c: Include "solib.h".
	* symfile-mem.c (_initialize_symfile_mem): Declare before
	definition.
	* ada-lang.c (ada_la_decode, ada_match_name)
	(ada_suppress_symbol_printing, ada_is_array_type)
	(ada_value_ptr_subscript, ada_array_length)
	(ada_to_static_fixed_value): Make them static.
	(_initialize_ada_language): Declare before definition.
	* ada-tasks.c (ada_get_task_number, ada_get_environment_task)
	(ada_task_list_changed, ada_new_objfile_observer): Make them
	static.
	(_initialize_tasks): Declare before definition.
	* addrmap.c (_initialize_addrmap): Declare before definition.
	* auxv.c (default_auxv_parse): Make it static.
	* bfd-target.c (target_bfd_xfer_partial, target_bfd_xclose): Make
	them static.
	* breakpoint.c (remove_sal): Add line break.
	(expand_line_sal_maybe): Make it static.
	* cp-name-parser.y: Include "cp-support.h".
	* cp-valprint.c (cp_find_class_member): Make it static.
	* eval.c (value_f90_subarray): Ditto.
	* exceptions.c (print_any_exception): Ditto.
	* findcmd.c (_initialize_mem_search): Declare before definition.
	* frame.c (frame_observer_target_changed): Make it static.
	* gnu-v3-abi.c (gnuv3_find_method_in): Make it static.
	* inf-child.c: Include "inf-child.h".
	* inferior.h (valid_inferior_id): Rename to ...
	(valid_gdb_inferior_id): ... this.
	* infrun.c (infrun_thread_stop_requested, siginfo_make_value):
	Make them static.
	* jv-lang.c (java_language_arch_info): Make it static.
	* m2-typeprint.c (m2_get_discrete_bounds): Ditto.
	* osdata.c (info_osdata_command): Make it static.
	* regcache.c (regcache_observer_target_changed): Make it static.
	* reverse.c (_initialize_reverse): Declare before definition.
	* stabsread.c (cleanup_undefined_types_noname)
	(cleanup_undefined_types_1): Make them static.
	* symfile.c (place_section): Make it static.
	* symtab.c (find_pc_sect_psymtab_closer): Make it static.
	* target-descriptions.c (_initialize_target_descriptions): Declare
	before definition.
	* target.c (default_get_ada_task_ptid, find_default_can_async_p)
	(find_default_is_async_p, find_default_supports_non_stop): Make
	them static.
	(target_supports_non_stop): Add prototype.
	(dummy_pid_to_str): Make it static.
	* utils.c (_initialize_utils): Declare before definition.
	* ada-exp.y (_initialize_ada_exp): Declare before definition.
	* solib-svr4.c (HAS_LM_DYNAMIC_FROM_LINK_MAP): Add a prototype.
	* target.h (struct target_ops): Add a prototype to the
	to_can_execute_reverse callback.
	* macroscope.c (_initialize_macroscope): Declare before definition.
	* cp-namespace.c (_initialize_cp_namespace): Declare before definition.
	* python/python.c (_initialize_python): Declare before definition.
	* tui/tui-command.c: Include "tui/tui-command.h".
	* tui/tui-data.c (init_content_element, init_win_info): Make them
	static.
	* tui/tui-disasm.c: Include "tui/tui-disasm.h".
	* tui/tui-interp.c (_initialize_tui_interp): Declare before
	definition.
	* tui/tui-layout.c: Include "tui/tui-layout.h".
	(_initialize_tui_layout): Declare before definition.
	* tui/tui-regs.c: Include "tui/tui-regs.h".
	(tui_display_reg_element_at_line): Make it static.
	(_initialize_tui_regs): Declare before definition.
	* tui/tui-stack.c (_initialize_tui_stack): Declare before
	definition.
	* tui/tui-win.c: Include "tui/tui-win.h".
	(_initialize_tui_win): Declare before definition.
	(tui_sigwinch_handler): Make it static.  Wrap in ifdef SIGWINCH.
	* tui/tui-win.h (tui_sigwinch_handler): Delete declaration.
	(tui_get_cmd_list): Add a prototype.
	* tui/tui-windata.c: Include tui-windata.h.
	* tui/tui-wingeneral.c (box_win): Make it static.
	* cli/cli-logging.c (show_logging_command): Make it static.
	(_initialize_cli_logging): Declare before definition.
	* mi/mi-common.c (_initialize_gdb_mi_common): Declare before
	definition.
@
text
@d274 17
@


1.205
log
@gdb/
	Add "maint set|show internal-error|internal-warning quit|corefile
	ask|yes|no" commands.

	PR gdb/7580:
	* utils.c (internal_problem_ask, internal_problem_yes)
	(internal_problem_no, internal_problem_modes): New.
	(struct internal_problem): Remove FIXME.  Make should_quit and
	should_dump_core types to char *.
	(internal_vproblem, internal_error_problem)
	(internal_warning_problem): Adjust.
	(set_internal_problem_cmd, show_internal_problem_cmd): New dummy
	functions.
	(add_internal_problem_command): New.
	(_initialize_utils): New.

gdb/doc/
	PR gdb/7580:
	* gdb.texinfo (Maintenance Commands): Document "maint set|show
	internal-error|internal-warning quit|corefile ask|yes|no".
@
text
@d3544 3
@


1.204
log
@        * utils.c (host_address_to_string): Reimplement in a way that
        avoids the cast of the address to long.
@
text
@d828 15
d850 2
a851 4
  /* FIXME: cagney/2002-08-15: There should be ``maint set/show''
     commands available for controlling these variables.  */
  enum auto_boolean should_quit;
  enum auto_boolean should_dump_core;
d912 1
a912 1
  switch (problem->should_quit)
a913 1
    case AUTO_BOOLEAN_AUTO:
d915 2
a916 2
         this lessens the likelhood of GDB going into an infinate
         loop.  */
a917 9
      break;
    case AUTO_BOOLEAN_TRUE:
      quit_p = 1;
      break;
    case AUTO_BOOLEAN_FALSE:
      quit_p = 0;
      break;
    default:
      internal_error (__FILE__, __LINE__, _("bad switch"));
d919 6
d926 1
a926 1
  switch (problem->should_dump_core)
a927 1
    case AUTO_BOOLEAN_AUTO:
a931 10
      break;
      break;
    case AUTO_BOOLEAN_TRUE:
      dump_core_p = 1;
      break;
    case AUTO_BOOLEAN_FALSE:
      dump_core_p = 0;
      break;
    default:
      internal_error (__FILE__, __LINE__, _("bad switch"));
d933 6
d962 1
a962 1
  "internal-error", AUTO_BOOLEAN_AUTO, AUTO_BOOLEAN_AUTO
d982 1
a982 1
  "internal-warning", AUTO_BOOLEAN_AUTO, AUTO_BOOLEAN_AUTO
d1000 93
d3543 7
@


1.203
log
@        * utils.c (gdb_print_host_address): Adjust implementation to
        reuse host_address_to_string. Move comment explaining the conversion
        from host address to string from here...
        (host_address_to_string): ... to there.
@
text
@d3074 1
a3074 4
  /* We could use the %p conversion specifier to sprintf if we had any
     way of knowing whether this host supports it.  But the following
     should work on the Alpha and on 32 bit machines.  */
  sprintf (str, "0x%lx", (unsigned long) addr);
@


1.202
log
@Check return values of functions declared with warn_unused_result
attribute in GLIBC 2.8.
* cli/cli-cmds.c (pwd_command): Check return value from getcwd.
* inflow.c (check_syscall): New function.
(new_tty): Use check_syscall to check return values from open and dup.
* linux-nat.c (linux_nat_info_proc_cmd): Check return value from fgets.
* main.c (captured_main): Call cwd after setting up gdb_stderr;
check for errors from getcwd.
* mi/mi-cmd-env.c (mi_cmd_env_pwd): Check return value from getcwd.
* ui-file.c (stdio_file_write): Ignore return value from fwrite.
(stdio_file_fputs): Same.
* utils.c (internal_vproblem): abort if last-ditch error message
write fails.
@
text
@d1264 1
a1264 6

  /* We could use the %p conversion specifier to fprintf if we had any
     way of knowing whether this host supports it.  But the following
     should work on the Alpha and on 32 bit machines.  */

  fprintf_filtered (stream, "0x%lx", (unsigned long) addr);
d3073 4
@


1.201
log
@        Updated copyright notices for most files.
@
text
@d865 1
a865 1
	abort ();	/* NOTE: GDB has only three calls to abort().  */
d868 7
a874 1
	write (STDERR_FILENO, msg, sizeof (msg));
d939 1
a939 1
	abort ();		/* NOTE: GDB has only three calls to abort().  */
d949 1
a949 1
	    abort ();		/* NOTE: GDB has only three calls to abort().  */
@


1.200
log
@	* remote.c (escape_buffer): New.
	(putpkt_binary, read_frame, getpkt_or_notif_sane_1): Use it.  Make
	sure debug output printing a packet buffer goes through a single
	fprintf_unfiltered call.
	* utils.c (vfprintf_unfiltered): If outputting timestamps, end
	output with a newline if it wasn't going to already.
@
text
@d4 2
a5 2
   1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008
   Free Software Foundation, Inc.
@


1.200.2.1
log
@2008-11-20  Stan Shebs  <stan@@codesourcery.com>

	Multi-process (primarily multi-exec) support.

	2008-10-14  Stan Shebs  <stan@@codesourcery.com>

	* blockframe.c (get_frame_block): Get inferior from frame.
	* block.c (block_for_pc_inf): New function.
	* block.h (block_for_pc_inf): Declare.
	* symfile.c (find_pc_inf_sect): New function.
	* symfile.h (find_pc_inf_sect): Declare.
	* symtab.c (find_pc_inf_line): New function.
	* symtab.h (find_pc_inf_line): Declare.
	* frame.c (struct frame_info) New field inferior.
	(fprint_frame_id): Display inferior.
	(get_frame_id): Set inferior_num from inferior.
	(frame_id_eq): Compare inferiors.
	(create_sentinel_frame): Set inferior.
	(create_new_frame): Copy inferior from sentinel.
	(get_prev_frame_raw): Copy inferior from next frame.
	(find_frame_sal): Use find_pc_inf_line.
	(get_frame_inferior): New function.
	* frame.h (struct frame_id): New field inferior_num.

	* breakpoint.c (expand_sals_by_inferiors): Copy section from input
	sal to expanded sals.
	* symtab.c (expand_line_sal): Ditto.

	2008-10-10  Stan Shebs  <stan@@codesourcery.com>

	* remote.c (discard_pending_stop_replies): Initialize prev.
	* infrun.c (infrun_thread_stop_requested): Ditto.

	2008-10-08  Stan Shebs  <stan@@codesourcery.com>

	* inferior.h (struct inferior): Rename environ field to inf_environ.
	* inferior.c (print_inferior): Ditto.

	2008-10-01  Stan Shebs  <stan@@codesourcery.com>

	* inferior.h (detach_fork): Declare here...
	* linux-fork.h (detach_fork): ...instead of here.
	* linux-fork.c (detach_fork): Move to...
	* infrun.c (detach_fork): ...here.
	* remote.c (detach_fork): Remove decl.

	2008-09-30  Stan Shebs  <stan@@codesourcery.com>

	* linespec.c (decode_line_1): Better default for one-exec case.
	* remote (remote_start_remote): Use the exec in the one-exec case.

	2008-09-29  Stan Shebs  <stan@@codesourcery.com>

	* infcmd.c (attach_command): If only one exec, assume it is the
	attached inferior's exec.
	(attach_command_post_wait): Set inferior's exec from
	the one that was found.
	* inf-ptrace.c (inf_ptrace_attach): Only report exec file if
	if there is just one present.
	(inf_ptrace_detach): Use inferior to get correct exec name.

	2008-09-29  Stan Shebs  <stan@@codesourcery.com>

	* inferior.c (print_inferior): Use exec short names, and drop
	unused address space display.

	2008-09-26  Stan Shebs  <stan@@codesourcery.com>

	* breakpoint.c (should_be_inserted): Test for no inferior.
	(clone_breakpoint_location): New function, broken out from...
	(update_breakpoint_inferiors): ...here, also tweak conditions
	for adding a location.
	(insert_breakpoint_location): Don't count non-running inferiors.
	(remove_breakpoint): Set tmp_inf.
	(print_one_breakpoint_location): Add allflag arg, use to always
	show inf.
	(print_one_breakpoint): Add allflag arg.
	(do_captured_breakpoint_query): Fix caller.
	(breakpoint_1): Ditto.
	* exec.c (create_exec): Save full pathname as exec name.
	(find_exec_by_name): Use find_exec_by_substr.
	* fork-child.c (fork_inferior): Warn if exec not found for new
	inferior.

	2008-09-25  Stan Shebs  <stan@@codesourcery.com>

	* breakpoint.c (should_be_inserted): Don't insert in inferiors
	that are not running.
	(update_breakpoint_inferiors): New function.
	(insert_breakpoints): Call it.
	(insert_breakpoint_locations): Don't insert in inferiors that are
	not running.
	(set_raw_breakpoint_without_location): Set trigger set from
	current itset here...
	(set_raw_breakpoint): Instead of here. Also add default fillins
	for the location's inferior.
	(add_location_to_breakpoint): Similarly.
	(expand_sals_by_inferiors): New function.
	(breakpoint_re_set_one): Call it.
	(resolve_sal_pc): Don't set sal inferior.
	* breakpoint.h (struct breakpoint): Remove exec field, never used.
	* inferior.h (inferior_list): Declare.
	* inferior.c (inferior_list): Make public.
	(add_inferior_to_itset): Auto-add inferiors after exec's inferior.
	(first_inferior_in_set): Check for zero-length vector.
	* exec.c (xfer_memory): Use tmp_inf as inferior if set.
	* infcmd.c (focus_command): Improve user feedback.
	* linespec.c (build_canonical_line_spec): Record exec name as part
	of canonical spec.
	(symbol_found): Canonicalize specs more.
	(decode_indirect): Revert rewrite from 2008-09-14.
	(decode_sharp): Use find_exec_by_substr, better error messages.
	* minsyms.c (lookup_minimal_symbol_in_exec): New function.
	(lookup_minimal_symbol_in_exec_1): New function, body of
	lookup_minimal_symbol.
	* symtab.h (lookup_minimal_symbol_in_exec): Declare.
	* symtab.c (find_function_start_sal): Set inferior to use.
	(append_expanded_sal): Return pointer to the new sal.
	* remote.c (remote_xfer_memory): Better parms to ptid_build, remove
	debug print.
	(remote_xfer_partial): Ditto.

	2008-09-22  Pedro Alves  <pedro@@codesourcery.com>

	* inferior.c (itset_member): Fix typo.

	2008-09-22  Stan Shebs  <stan@@codesourcery.com>

	* inferior.h (current_inf): Remove declaration.
	(tmp_inf): Declare.
	* inferior.c (current_inf): Remove.
	(tmp_inf): New global, hack to bypass passing inferior throughout
	target stack.
	(print_inferior): Don't report current_inf.
	(add_inferior_command): Don't use current_inf.
	(name_inferior_command): Use first inferior of current_itset.
	(update_itset): Handle NULL case.
	(add_inferior_itset): Recursively add all inferiors derived from
	an exec if the exec's own inferior is present.
	(first_inferior_in_set): New function.
	(free_inferior): Comment out until references cleared reliably.
	* infcmd.c (focus_command): Don't set current_inf.
	(get_inferior_args): Use first_inferior_in_set instead of
	current_inf.
	(set_inferior_args): Ditto.
	(set_inferior_args_vector): Ditto.
	(notice_args_set): Ditto.
	* breakpoint.c (insert_breakpoint_locations): Remove insertion test
	using current_inf, set tmp_inf.
	(reattach_breakpoints): Set tmp_inf.
	(bpstat_check_breakpoint_conditions): Test trigger set here...
	(bpstat_stop_status): ... instead of here.
	(bpstat_check_trigger_set): Add special case for exec's own
	inferior.
	(print_one_breakpoint_location): Also test for multiple inferiors
	before displaying location's inferior, flag trigger set with "i/t"
	instead of "focus".
	(check_duplicates): Pass location's inferior to...
	(check_duplicates_for): Add inferior arg and use.
	(set_raw_breakpoint): Override sal inferior with one from the
	trigger set.
	(add_location_to_breakpoint): Ditto.
	* remote.c (remote_xfer_memory): Switch inferiors if tmp_inf is
	set to something different from inferior_ptid.
	(remote_xfer_partial): Ditto.
	* top.c (execute_command): Always update the current itset.

	2008-09-19  Stan Shebs  <stan@@codesourcery.com>

	* inferior.c (set_inferior_exec): New function.
	(set_inferior_exec_command): New command.
	* inferior.h: Declare set_inferior_exec.
	* fork-child.c (fork_inferior): Set the inferior's exec.
	* remote.c (extended_remote_create_inferior_1): Ditto.
	gdb/doc/
	* gdb.texinfo (Debugging Multiple Programs): Describe set-exec.

	2008-09-18  Stan Shebs  <stan@@codesourcery.com>

	* target.c (target_resize_to_sections): Adjust execs' section
	tables too.

	2008-09-17  Stan Shebs  <stan@@codesourcery.com>

	gdb/doc/
	* gdb.texinfo (Invoking GDB): Describe multiple program args.
	(File Options): Describe multi-program effects.
	(Multiple Programs): New section, multi-program debugging.
	(Forks): Rename section from "Processes".
	(Specify Location): Describe the #-syntax.
	(Variables): Describe the #-syntax.
	(Files): Describe add-file and add-exec-file.
	(Maintenance Commands): Describe maint print execs.

	2008-09-15  Stan Shebs  <stan@@codesourcery.com>

	* exec.c (addr_space_info_command): Don't try to display host address.

	2008-09-14  Stan Shebs  <stan@@codesourcery.com>

	* c-exp.y: (yylex): Accept '#' in identifiers.
	* linespec.c (decode_sharp): New function.
	(decode_line_1): Use it for #-syntax.
	(decode_indirect): Rewrite to accept exec arg and iterate over
	inferiors.
	(struct d_i_data): New struct for inferior iteration.
	(decode_indirect_callback): New function.
	(decode_variable): Pass in exec, use in symbol lookup.

	2008-09-14  Stan Shebs  <stan@@codesourcery.com>

	* breakpoint.h (struct bp_location): Add inferior field instead
	of address space field.
	* breakpoint.c (insert_breakpoint_locations): Only insert in
	appropriate inferior.
	(bpstat_check_trigger_set): New function.
	(bpstat_stop_status): Call it, check location's inferior also.
	(print_one_breakpoint_location): Report location's inferior.
	(set_raw_breakpoint): Set location inferior, clear an experiment.
	(add_location_to_breakpoint): Ditto.
	(expand_line_sal_maybe): Check for non-NULL original function.
	(resolve_sal_pc): Set sal inferior.
	(clear_command): Be careful to not clear anything twice.
	* symtab.h: Update declarations of symbol lookups.
	(struct symtab_and_line): Change address space to inferior field.
	* symtab.c (init_sal): Clear inferior field.
	(append_expanded_sal): Set inferior.
	(lookup_symbol_in_language_1): New function.
	(lookup_symbol_in_language): Call it.
	(lookup_symbol_in_exec_in_language): New function.
	(lookup_symbol): Detect #-syntax and find exec to use.
	(lookup_symbol_aux): Add exec argument and use it.
	(lookup_symbol_aux_symtabs): Ditto.
	(lookup_symbol_aux_psymtabs): Ditto.
	(basic_lookup_symbol_nonlocal): Ditto.
	(lookup_symbol_static): Ditto.
	(lookup_symbol_global): Ditto.
	* ada-lang.c (cp_lookup_symbol_nonlocal): Ditto.
	* cp-support.h (cp_lookup_symbol_nonlocal): Ditto.
	* cp-namespace.c (cp_lookup_symbol_nonlocal): Ditto.
	* language.h (struct language_defn): Ditto.
	* scm-valprint.c (scm_inferior_print): Add exec arg to
	lookup_symbol_global.
	* source.c (select_source_symtab): Use current_exec.
	* addrspace.h (struct addr_space): New field num.
	* exec.h (struct exec): New fields sections and sections_end.
	* exec.c (exec_file_attach_1): Set them from exec_ops, set
	inferior's address space name from exec.
	(find_exec_by_substr): New function.
	(build_section_table): Don't free old table.
	(print_section_info): Use exec's section table.
	(next_address_space_num): New global, numbering for address spaces.
	(new_address_space): Use it.
	(addr_space_info_command): Display it.
	* infcmd.c (set_current_exec): Set exec_ops section table.
	* inferior.h (update_itset): Declare.
	* inferior.c (add_inferior_silent): Set address space.
	(print_inferior): Display it.
	(number_of_inferiors): New function.
	(itset_member): New function.

	2008-09-04  Stan Shebs  <stan@@codesourcery.com>

	* corefile.c (close_exec_file): Remove #if 0 block.
	(validate_files): Use first_exec instead of exec_bfd.
	(get_exec_file): Ditto.
	* corelow.c (core_open): Ditto.
	* utils.c (string_to_core_addr): Ditto.
	* arch-utils.c (gdbarch_update_p): Ditto.
	* linux-thread-db.c (enable_thread_event): Ditto.
	(thread_db_get_thread_local_address ): Ditto.
	* exec.c (find_exec_by_name): Test short name also.
	(file_command): Set current exec.

	2008-09-03  Stan Shebs  <stan@@codesourcery.com>

	* inferior.c (add_threads_to_itset): Default to including all
	of an inferior's threads.

	2008-08-31  Stan Shebs  <stan@@codesourcery.com>

	Parsing for i/t sets.
	* inferior.h (struct itset_entry): New struct.
	(struct itset): Make thread lists be per-inferior, add parse state
	variables.
	* inferior.c: (add_inferior_command): Add error checking and
	confirmation.
	(remove_inferior_command): Update for itset restructuring.
	(new_itset): Don't pass in dynamic-ness, call parse_itset_spec.
	(update_itset): Similarly.
	(parse_itset_spec): New, parsing of itset spec.
	(parse_itset_list, parse_itset_range, etc): New.
	(make_itset_from_spec): Rewrite.
	(dump_itset): Rewrite to reflect itset structure.
	* infcmd.c (focus_command): Similarly.

	2008-08-25  Stan Shebs  <stan@@codesourcery.com>

	First part of multiprocess support.
	* Makefile.in (COMMON_OBS): Add inferior.o.
	* addrspace.h: New file.
	* breakpoints.h (struct bp_location): Add address space field.
	(struct breakpoint): Add trigger set and exec fields.
	* breakpoints.c (print_one_breakpoint_location): Display trigger
	set.
	(set_raw_breakpoint): Set trigger set from current itset.
	* corefile.c (reopen_exec_file): Rewrite for multiple execs.
	(get_exec_file): Add case for current_exec.
	* corelow.c (is_core_file): New function.
	(core_files_info): Pass additional arg to print_section_info.
	* exec.h (struct exec): New struct.
	* exec.c (execs): New global.
	(exec_bfd_mtime): Remove.
	(last_exec_created, current_exec, first_exec): New globals.
	(exec_close): Clear all exec objects.
	(exec_file_clear): Tweak user message.
	(exec_file_add): New function.
	(exec_file_attach_1): New function, body of exec_file_attach,
	plus new code to handle multiple execs.
	(exec_file_attach): Call it.
	(exec_file_update): New function.
	(create_exec, find_exec_by_name, number_of_execs): New functions.
	(exec_file_command): Rephrase query, set current exec.
	(add_exec_file_command): New command.
	(add_file_command): New command.
	(print_section_info): Add exec argument.
	(exec_files_info): Rewrite for multiple execs.
	(maintenance_print_execs): New function.
	(new_address_space): New function.
	(addr_space_info_command): New command.
	* gdbcore.h (exec_bfd_mtime): Remove decl.
	(exec_file_add): Declare.
	* infcmd.c: Include exec.h.
	(current_itset): New global.
	(set_current_exec): New function.
	(focus_command): New command.
	(get_inferior_args): Maybe get from the current inferior.
	(set_inferior_args): Also set in current inferior.
	(set_inferior_args_vector): Similarly.
	(notice_args_set): Similarly.
	(attach_command): Rephrase query.
	* inferior.h (struct inferior): New struct.
	(struct itset): New struct.
	* inferior.c: New file, management of multiple inferiors.
	* main.c (captured_main): Rewrite to allow multiple executables,
	pids, and corefiles on the command line.
	* maint.c (maintenance_info_sections): Rewrite for multiple execs.
	* objfiles.h (struct objfile): New field for exec.
	(ALL_OBJFILES_FOR_EXEC, ALL_PRIMARY_SYMTABS_FOR_EXEC,
	ALL_PSYMTABS_FOR_EXEC): New macros.
	* objfiles.c (allocate_objfile): Clear exec field.
	* solib.c (clear_solib): Use first_exec instead of exec_bfd.
	* source.c (select_source_symtab): Use ALL_OBJFILES_FOR_EXEC.
	(find_source_lines): Use mtime from exec.
	* symfile.c (syms_from_objfile): Don't clear objfile if multiple
	execs.
	(new_symfile_objfile): Get objfile's exec from last_exec_created.
	(symbol_file_clear): Rephrase messages.
	(reread_symbols): Update objfile's exec if necessary.
	* symmisc.c (dump_objfile): Dump objfile's exec also.
	(maintenance_print_objfiles): Report symfile_objfile.
	* symtab.h (struct symtab_and_line): Add address space field.
	* symtab.c (find_pc_sect_psymtab): Look for a plausible exec, and
	then use it.
	(lookup_symbol_aux_symtabs): Use current exec.
	(lookup_symbol_aux_symtabs): Ditto.
	(basic_lookup_transparent_type): Ditto.
	(find_pc_sect_symtab): Ditto.
	* target.h (print_section_info): Add arg to decl.
	* tui/tui-win.c: Rename "focus" command to "ffocus".

gdb/testsuite:

2008-11-20  Stan Shebs  <stan@@codesourcery.com>

	2008-09-14  Stan Shebs  <stan@@codesourcery.com>

	* gdb.gdb/selftest.exp: Update to reflect current sources.
	* Makefile.in (ALL_SUBDIRS): Add gdb.multi.
	* configure.ac (AC_OUTPUT): Add gdb.multi/Makefile.
	* configure: Regenerate.

	* gdb.multi/Makefile.in: New.
	* gdb.multi/hello.c, hangout.c, goodbye.c: New source files.
	* gdb.multi/base.exp: New file, basic multiprocess tests.

	2008-08-25  Stan Shebs  <stan@@codesourcery.com>

	* config/monitor.exp: Match on rephrased message.
	* gdb.base/attach.exp: Ditto.
	* gdb.base/default.exp: Ditto.
	* lib/gdb.exp: Ditto.
@
text
@a53 1
#include "exec.h"
d3047 2
a3048 2
	  && first_exec
	  && bfd_get_sign_extend_vma (first_exec->ebfd))
@


1.199
log
@	* defs.h (add_inferior_continuation)
	(do_all_inferior_continuations)
	(discard_all_inferior_continuations): Declare.
	* utils.c (add_inferior_continuation)
	(do_all_inferior_continuations)
	(discard_all_inferior_continuations): New.
	* inferior.h (struct inferior) <continuations>: New field.
	* inferior.c (free_inferior): Discard all the inferior
	continuations.
	* inf-loop.c (inferior_event_handler): Do all current inferior
	continuations.
	* infcmd.c (attach_command): Register an inferior continuation
	instead of a thread continuation.
	* infrun.c (handle_inferior_event): If stop_soon is
	STOP_QUIETLY_NO_SIGSTOP, also expect a TARGET_SIGNAL_0.
@
text
@d2289 1
d2292 8
a2299 1
      timestamp = xstrprintf ("%ld:%ld ", (long) tm.tv_sec, (long) tm.tv_usec);
d2303 2
a2304 1
  fputs_unfiltered (linebuffer, stream);
@


1.198
log
@	* utils.c (make_cleanup_close): Use make_cleanup_dtor.
	(do_close_cleanup): Don't free 'fd'.
@
text
@d508 53
@


1.197
log
@	* cli/cli-script.c (do_fclose_cleanup): Remove.
	(script_from_file): Use make_cleanup_fclose.
	* xml-tdesc.c (do_cleanup_fclose): Remove.
	(fetch_xml_from_file): Use make_cleanup_fclose.
	* tracepoint.c (tracepoint_save_command): Use
	make_cleanup_fclose.  Always free pathname.
	* source.c (print_source_lines_base): Use make_cleanup_fclose.
	* remote.c (fclose_cleanup): Remove.
	(remote_file_put): Use make_cleanup_fclose.
	(remote_file_get): Likewise.
	* linux-nat.c (linux_nat_find_memory_regions): Use
	make_cleanup_fclose.
	(linux_nat_info_proc_cmd): Likewise.
	(linux_proc_pending_signals): Likewise.
	* fbsd-nat.c (fbsd_find_memory_regions): Use make_cleanup_fclose.
	Free file name.
	* cli/cli-dump.c (do_fclose_cleanup): Remove.
	(make_cleanup_fclose): Remove.
	* defs.h (make_cleanup_fclose): Declare.
	* utils.c (do_fclose_cleanup): New function.
	(make_cleanup_fclose): Likewise.
@
text
@a246 1
  xfree (fd);
d254 1
a254 1
  return make_cleanup (do_close_cleanup, saved_fd);
@


1.196
log
@2008-10-03  Paul Pluzhnikov  <ppluzhnikov@@google.com>

	* utils.c, defs.h (gdb_buildargv): New fn. Wrap buildargv
	and check for out-of-memory condition.
	* exec.c (exec_file_command): Call it.
	* infrun.c (handle_command, xdb_handle_command): Likewise.
	* interps.c (interpreter_exec_cmd): Likewise.
	* linux-nat.c (linux_nat_info_proc_cmd): Likewise.
	* procfs.c (info_proc_cmd): Likewise.
	* remote-mips.c (common_open): Likewise.
	* remote-sim.c (gdbsim_kill, gdbsim_create_inferior)
	(gdbsim_open): Likewise.
	* remote.c (extended_remote_run, remote_put_command)
	(remote_get_command, remote_delete_command): Likewise.
	* ser-mingw.c (pipe_windows_open): Likesise.
	* source.c (add_path, show_substitute_path_command)
	(unset_substitute_path_command, set_substitute_path_command):
	Likewise.
	* stack.c (backtrace_command): Likewise.
	* symfile.c (symbol_file_command, generic_load)
	(add_symbol_file_command): Likesise.
	* symmisc.c (maintenance_print_symbols, maintenance_print_psymbols)
	(maintenance_print_msymbols): Likewise.
@
text
@d258 17
@


1.195
log
@	Remove global continuations in favour of a per-thread
	continuations.

	* gdbthread.h (struct thread_info): Add comments around
	continuations and intermediate_continuations.
	(save_infrun_state, load_infrun_state): Delete continuations and
	intermediate_continuations arguments.
	* infrun.c (fetch_inferior_event): Only call normal_stop if
	stop_soon is NO_STOP_QUIETLY.
	(context_switch): Don't context-switch the continuations.
	* thread.c (clear_thread_inferior_resources): Discard all
	continuations of the thread we're clearing.
	(save_infrun_state, load_infrun_state): Delete continuations and
	intermediate_continuations arguments, and the code referencing
	them.
	* utils.c: Include "gdbthread.h".
	(cmd_continuation, intermediate_continuation): Delete.
	(add_continuation): Add thread_info* argument.  Install the
	continuation on it.
	(restore_thread_cleanup): New.
	(do_all_continuations_ptid, do_all_continuations_thread_callback):
	New.
	(do_all_continuations): Reimplement.
	(discard_all_continuations_thread_callback,
	discard_all_continuations_thread): New.
	(discard_all_continuations): Reimplement.
	(add_intermediate_continuation): Add thread_info* argument.
	Install the continuation on it.
	(do_all_intermediate_continuations_thread_callback)
	(do_all_intermediate_continuations_thread): New.
	(do_all_intermediate_continuations): Reimplement.
	(discard_all_intermediate_continuations_thread_callback): New.
	(discard_all_intermediate_continuations_thread): New.
	(discard_all_intermediate_continuations): Reimplement.

	* breakpoint.c (until_break_command): Install the continuation on
	the current thread.

	* defs.h (cmd_continuation, intermediate_continuation): Delete.
	(struct thread_info): Forward declare.
	(add_continuation, add_intermediate_continuation): Add
	thread_info* argument.
	(do_all_continuations_thread, discard_all_continuations_thread)
	(do_all_intermediate_continuations_thread)
	(discard_all_intermediate_continuations_thread): Declare.
	* inf-loop.c (inferior_event_handler): In non-stop only run
	continuations on the thread that stopped.  In all-stop, run
	continuations on all threads.
	* infcmd.c (step_once, finish_command): Adjust.
@
text
@d3352 14
@


1.194
log
@	* defs.h (plongest,pulongest): Renamed from paddr_u,paddr_d.
	Change argument of pulongest from CORE_ADDR to ULONGEST.
	All callers updated.
	* utils.c (plongest): Renamed from paddr_d.
	(pulongest): Renamed from paddr_u, change arg type to ULONGEST.
	* remote-mips.c (send_srec): Use paddr_nz instead of paddr_u in
	`CORE_ADDR addr' arg of error message.
@
text
@d28 1
a108 7
/* Pointer to what is left to do for an execution command after the
   target stops. Used only in asynchronous mode, by targets that
   support async execution.  The finish and until commands use it. So
   does the target extended-remote command. */
struct continuation *cmd_continuation;
struct continuation *intermediate_continuation;

d474 2
a475 3
/* Add a continuation to the continuation list, the global list
   cmd_continuation. The new continuation will be added at the
   front.  */
d477 2
a478 1
add_continuation (void (*continuation_hook) (void *), void *args,
d481 1
a481 1
  struct cleanup *as_cleanup = &cmd_continuation->base;
d489 8
a496 1
  cmd_continuation = (struct continuation *) as_cleanup;
d499 11
a509 10
/* Walk down the cmd_continuation list, and execute all the
   continuations. There is a problem though. In some cases new
   continuations may be added while we are in the middle of this
   loop. If this happens they will be added in the front, and done
   before we have a chance of exhausting those that were already
   there. We need to then save the beginning of the list in a pointer
   and do the continuations from there on, instead of using the
   global beginning of list as our iteration pointer.  */
void
do_all_continuations (void)
d511 22
a532 1
  struct cleanup *continuation_ptr;
d539 2
a540 2
  continuation_ptr = &cmd_continuation->base;
  cmd_continuation = NULL;
d543 43
a585 1
  do_my_cleanups (&continuation_ptr, NULL);
d588 1
a588 2
/* Walk down the cmd_continuation list, and get rid of all the
   continuations. */
d592 1
a592 3
  struct cleanup *continuation_ptr = &cmd_continuation->base;
  discard_my_cleanups (&continuation_ptr, NULL);
  cmd_continuation = NULL;
d595 3
a597 3
/* Add a continuation to the continuation list, the global list
   intermediate_continuation.  The new continuation will be added at
   the front.  */
d599 2
a600 1
add_intermediate_continuation (void (*continuation_hook)
d604 1
a604 1
  struct cleanup *as_cleanup = &intermediate_continuation->base;
d612 1
a612 1
  intermediate_continuation = (struct continuation *) as_cleanup;
d623 17
d643 2
a644 1
  struct cleanup *continuation_ptr;
d646 10
a655 4
  /* Copy the list header into another pointer, and set the global
     list header to null, so that the global list can change as a side
     effect of invoking the continuations and the processing of the
     preexisting continuations will not be affected.  */
d657 5
a661 5
  continuation_ptr = &intermediate_continuation->base;
  intermediate_continuation = NULL;

  /* Work now on the list we have set aside.  */
  do_my_cleanups (&continuation_ptr, NULL);
d664 1
a664 2
/* Walk down the cmd_continuation list, and get rid of all the
   continuations. */
d668 1
a668 3
  struct cleanup *continuation_ptr = &intermediate_continuation->base;
  discard_my_cleanups (&continuation_ptr, NULL);
  continuation_ptr = NULL;
@


1.193
log
@	* utils.c (struct continuation): Define as inheriting struct
	cleanup.
	(add_continuation, do_all_continuations)
	(discard_all_continuations, add_intermediate_continuation)
	(do_all_intermediate_continuations)
	(discard_all_intermediate_continuations): Adjust.
@
text
@d2679 1
a2679 1
paddr_u (CORE_ADDR addr)
d2681 1
a2681 1
  return decimal2str ("", addr, 0);
d2685 1
a2685 1
paddr_d (LONGEST addr)
d2687 2
a2688 2
  if (addr < 0)
    return decimal2str ("-", -addr, 0);
d2690 1
a2690 1
    return decimal2str ("", addr, 0);
@


1.192
log
@2008-07-12  Pedro Alves  <pedro@@codesourcery.com>

	Rewrite continuations internals on top of cleanups and plug
	continuation arguments leaks.

	* defs.h (struct continuation): Make it opaque.
	(add_continuation, add_intermediate_continuation): Drop the int
	argument of the continuation hook argument.  Add
	continuation_free_args argument.
	(do_all_continuations, do_all_intermediate_continuations): Drop
	the error_p argument.

	* utils.c (add_continuation): Drop the int argument of the
	continuation hook argument.  Add continuation_free_args argument.
	Reimplement on top of cleanups.
	(do_all_continuations): Drop error argument.  Reimplement on top
	of cleanups.
	(discard_all_continuations): Reimplement on top of cleanups.
	(add_intermediate_continuation): Drop the int argument of the
	continuation hook argument.  Add continuation_free_args argument.
	Reimplement on top of cleanups.
	(do_all_intermediate_continuations): Drop error argument.
	Reimplement on top of cleanups.
	(discard_all_intermediate_continuations): Reimplement on top of
	cleanups.

	* breakpoint.c (until_break_command_continuation): Drop error
	argument.  Add xfree as continuation argument deleter.

	* inf-loop.c (inferior_event_handler): On error, discard all
	continuations.  Adjust to new do_all_intermediate_continuations
	and do_all_continuations interfaces.

	* infcmd.c (step_1_continuation): Drop error_p argument.  Adjust.
	Pass xfree as continuation argument deleter.
	(finish_command_continuation): Drop error_p argument.  Adjust.
	(finish_command_continuation_free_arg): New.
	(finish_command): Pass finish_command_continuation_free_arg as
	continuation argument deleter.  Adjust to new do_all_continuations
	interfaces.
	(attach_command_continuation): Drop error_p argument.
	(attach_command_continuation_free_args): New.
	(attach_command): Pass attach_command_continuation_free_args as
	continuation argument deleter.

	* interps.c (interp_set): Adjust to new do_all_continuations
	interfaces.

	* event-top.c (stdin_event_handler): In error, also discard the
	intermediate continuations.
@
text
@d473 7
d481 2
a482 1
   cmd_continuation. The new continuation will be added at the front.*/
d487 1
a487 1
  struct cleanup **as_cleanup_p = (struct cleanup **) &cmd_continuation;
d490 1
a490 1
  make_my_cleanup2 (as_cleanup_p,
d494 2
d516 1
a516 1
  continuation_ptr = (struct cleanup *) cmd_continuation;
d528 3
a530 2
  struct cleanup **continuation_ptr = (struct cleanup **) &cmd_continuation;
  discard_my_cleanups (continuation_ptr, NULL);
d541 1
a541 1
  struct cleanup **as_cleanup_p = (struct cleanup **) &intermediate_continuation;
d544 1
a544 1
  make_my_cleanup2 (as_cleanup_p,
d548 2
d570 1
a570 1
  continuation_ptr = (struct cleanup *) intermediate_continuation;
d582 3
a584 3
  struct cleanup **continuation_ptr
    = (struct cleanup **) &intermediate_continuation;
  discard_my_cleanups (continuation_ptr, NULL);
@


1.191
log
@	Replace struct continuation_args by void* and per command structs.

	* top.c (execute_command): Remove unused arg1 and arg2 locals.

	* breakpoint.c (struct until_break_command_continuation_args):
	New.
	(until_break_command_continuation): Take a void* instead of a
	continuations_arg.  Adjust.
	(until_break_command): Adjust to use struct
	until_break_command_continuation_args instead of struct
	continuation_arg.

	* infcmd.c (struct step_1_continuation_args): New.
	(step_1_continuation): Take a void* instead of a
	continuations_arg.  Adjust to use struct step_1_continuation_args.
	(step_once): Adjust to use struct step_1_continuation_args.

	(struct finish_command_continuation_args): New.
	(finish_command_continuation): Take a void* instead of a
	continuations_arg.  Adjust to use struct
	finish_command_continuation_args.
	(finish_command): Adjust to use struct
	finish_command_continuation_args.
	(struct attach_command_continuation_args): New.
	(attach_command_continuation): Take a void* instead of a
	continuations_arg.  Adjust to use struct
	attach_command_continuation_args.
	(attach_command): Adjust to use struct
	attach_command_continuation_args.

	* defs.h (struct continuation_arg): Delete.
	(struct continuation): Replace the struct continuation_arg*
	parameter of continuation_hook by a void*.  Replace "arg_list"
	member by a new "args" member with void* type.
	(add_continuation, add_intermediate_continuation): Replace struct
	continuation_arg type usages by void* usages.

	* utils.c (add_continuation, do_all_continuations)
	(add_intermediate_continuation)
	(do_all_intermediate_continuations): Replace struct
	continuation_arg type usages by void* usages.  Pass "args" instead
	of "arg_list".
@
text
@d476 2
a477 1
add_continuation (void (*continuation_hook) (void *, int), void *args)
d479 2
a480 1
  struct continuation *continuation_ptr;
d482 4
a485 6
  continuation_ptr =
    (struct continuation *) xmalloc (sizeof (struct continuation));
  continuation_ptr->continuation_hook = continuation_hook;
  continuation_ptr->args = args;
  continuation_ptr->next = cmd_continuation;
  cmd_continuation = continuation_ptr;
d497 1
a497 1
do_all_continuations (int error)
d499 1
a499 2
  struct continuation *continuation_ptr;
  struct continuation *saved_continuation;
d503 4
a506 3
     effect of invoking the continuations and the processing of
     the preexisting continuations will not be affected. */
  continuation_ptr = cmd_continuation;
d510 1
a510 7
  while (continuation_ptr)
    {
      (continuation_ptr->continuation_hook) (continuation_ptr->args, error);
      saved_continuation = continuation_ptr;
      continuation_ptr = continuation_ptr->next;
      xfree (saved_continuation);
    }
d518 2
a519 8
  struct continuation *continuation_ptr;

  while (cmd_continuation)
    {
      continuation_ptr = cmd_continuation;
      cmd_continuation = continuation_ptr->next;
      xfree (continuation_ptr);
    }
d527 2
a528 1
			       (void *, int), void *args)
d530 2
a531 1
  struct continuation *continuation_ptr;
d533 4
a536 6
  continuation_ptr =
    (struct continuation *) xmalloc (sizeof (struct continuation));
  continuation_ptr->continuation_hook = continuation_hook;
  continuation_ptr->args = args;
  continuation_ptr->next = intermediate_continuation;
  intermediate_continuation = continuation_ptr;
d548 1
a548 1
do_all_intermediate_continuations (int error)
d550 1
a550 2
  struct continuation *continuation_ptr;
  struct continuation *saved_continuation;
d554 4
a557 3
     effect of invoking the continuations and the processing of
     the preexisting continuations will not be affected. */
  continuation_ptr = intermediate_continuation;
d561 1
a561 7
  while (continuation_ptr)
    {
      (continuation_ptr->continuation_hook) (continuation_ptr->args, error);
      saved_continuation = continuation_ptr;
      continuation_ptr = continuation_ptr->next;
      xfree (saved_continuation);
    }
d569 3
a571 8
  struct continuation *continuation_ptr;

  while (intermediate_continuation)
    {
      continuation_ptr = intermediate_continuation;
      intermediate_continuation = continuation_ptr->next;
      xfree (continuation_ptr);
    }
@


1.190
log
@	Exited threads.

	* thread.c (enum thread_state): New.
	(thread_state main_thread_running): Delete, in favor of...
	(thread_state main_thread_state): ... this.  Update throughout.
	(clear_thread_inferior_resources): New, split from free_thread.
	(free_thread): Call clear_thread_inferior_resources.
	(init_thread_list): Set main thread to stopped state.
	(add_thread_silent): Take care of PTID reuses.
	(delete_thread): If deleting inferior_ptid or a thread with
	refcount > 0, mark it as exited, but still keep it in the list.
	Only notify of thread exits, if we haven't done so yet.
	(iterate_over_threads): Make it safe to delete threads while
	iterating over them.
	(do_captured_list_thread_ids): Don't account for exited threads.
	(thread_alive): Check for the THREAD_EXITED state, and don't set
	ptid to -1 on exited threads.
	(set_running): Update to account for extra possible states.
	(is_thread_state): New.
	(is_stopped, is_exited): New.
	(is_running): Implement in terms of is_thread_state.
	(any_running): Update.
	(print_thread_info): Update.  Account for exited threads.  Don't
	warn about missed frame restoring here, its done in the cleanup.
	(switch_to_thread): Don't read from a thread that has gone.
	(restore_current_thread): In non-stop mode, do a full context
	switch.
	(restore_selected_frame): Add a frame_level argument.  Rewrite.
	(struct current_thread_cleanup): Add selected_frame_level and
	was_stopped members.
	(do_restore_current_thread_cleanup): Check if thread was stopped
	and still is, and if the target has registers, stack and memory
	before restoring the selected frame.  Don't delete the cleanup
	argument here.
	(restore_current_thread_cleanup_dtor): New.
	(make_cleanup_restore_current_thread): Remove all arguments.
	Rewrite.
	(thread_apply_all_command): Update.  Prune threads.
	(thread_apply_command): Update.
	(thread_command): Account for currently selected exited thread.
	(do_captured_thread_select): Check for a running thread.  Prune
	threads.
	(_initialize_thread): Make "info threads", "thread", "thread
	apply", and "thread apply all" appliable without a selected thread.
	* gdbthread.h (struct thread_info): Replace running_ by state_.
	Add refcount.
	(is_exited, is_stopped): Declare.
	(make_cleanup_restore_current_thread): Remove all arguments.
	* infrun.c: Include "event-top.h".
	(fetch_inferior_event): In non-stop mode, restore selected thread
	and frame after handling the event and running breakpoint
	commands.  Display GDB prompt if needed.
	(normal_stop): In non-stop mode, don't print thread switching
	notice.
	* cli/cli-decode.c (set_cmd_no_selected_thread_ok)
	(get_cmd_no_selected_thread_ok): New.
	* cli/cli-decode.h (CMD_NO_SELECTED_THREAD_OK): New.
	(set_cmd_no_selected_thread_ok, get_cmd_no_selected_thread_ok):
	Declare.
	* cli/cli-cmds.c: Set "pwd", "help", "info", "show" as
	no-selected-thread ok.
	* top.c (execute_command): Check for non no-selected-thread-ok
	commands.
	* linux-nat.c (struct saved_ptids, threads_to_delete)
	(record_dead_thread, prune_lwps): Delete.
	(exit_lwp): Unconditionally delete thread.
	(linux_nat_resume): Remove prune_lwps call.
	* infcmd.c (proceed_thread_callback): Check if !is_stopped instead
	of is_running.  Adjust to make_cleanup_restore_current_thread
	interface change.
	* mi/mi-main.c (mi_cmd_execute): Only allow a few commands if the
	selected thread has exited.
	* inf-loop.c (inferior_event_handler): Don't display the prompt
	here.
	* varobj.c (c_value_of_root): Update.
	* defs.h (make_cleanup_dtor): Declare.
	* utils.c (make_cleanup_dtor): New.

	* Makefile.in (infrun.o): Depend on $(event_top_h).
@
text
@d476 1
a476 2
add_continuation (void (*continuation_hook) (struct continuation_arg *, int),
		  struct continuation_arg *arg_list)
d483 1
a483 1
  continuation_ptr->arg_list = arg_list;
d512 1
a512 1
      (continuation_ptr->continuation_hook) (continuation_ptr->arg_list, error);
d539 1
a539 2
			       (struct continuation_arg *, int),
			       struct continuation_arg *arg_list)
d546 1
a546 1
  continuation_ptr->arg_list = arg_list;
d575 1
a575 1
      (continuation_ptr->continuation_hook) (continuation_ptr->arg_list, error);
@


1.189
log
@	Introduce common cleanup for restoring integers.
        * defs.h (make_cleanup_restore_integer): New declaration.
        (struct cleanup): New field free_arg.
        (make_my_cleanup_2): New.
        * utils.c (restore_integer_closure, restore_integer)
        (make_cleanup_restore_integer): New.
        (make_my_cleanup): Initialize the free_arg field and
        renamed to make_my_cleanup_2.
        (do_my_cleanups): Call free_arg.
        (discard_cleanups): Call free_arg.
        * breakpoint.c (restore_always_inserted_mode): Remove.
        (update_breakpoints_after_exec): Use make_cleanup_restore_integer.
@
text
@d211 8
@


1.188
log
@
	* gdbarch.sh: Added new gdbarch struct
	core_regset_sections.
	* gdbarch.c: Refreshed.
	* gdbarch.h: Refreshed.
	* regset.h (core_regset_section): Declared.
	* linux-nat.c (linux_nat_do_thread_registers): Added
	support for the new gdbarch struct core_regset_sections.
	* utils.c (host_address_to_string): New function.
	* defs.h (host_address_to_string): New prototype.
	* i386-linux-tdep.c (i386_regset_rections): New register
	sections list for i386.
	  (i386_linux_init_abi): Initialized new gdbarch struct
	  core_regset_sections.
	* Makefile.in: Updated to reflect dependency changes.
	* ppc-linux-tdep.c (ppc_regset_sections): Register
	sections list for ppc.
	  (ppc_linux_init_abi): Initialized new gdbarch struct
	  core_regset_sections
@
text
@d280 12
d293 2
d296 14
a309 2
make_my_cleanup (struct cleanup **pmy_chain, make_cleanup_ftype *function,
		 void *arg)
d317 1
d324 7
d355 2
d384 2
@


1.187
log
@	exec_cleanup murder.
	* breakpoint.c (until_break_command_continuation): Add
	the 'error' parameter.  Directly delete the breakoint as
	opposed to running cleanups.
	(until_break_command): Install continuation only
	after starting the target.  Don't use exec cleanups,
	use ordinary cleanups.  Discard cleanups is successfully
	started the target in async mode.
	(make_cleanup_delete_breakpoint): Remove.
	* breakpoint.h (make_cleanup_delete_breakpoint): Remove
	declaration.
	* defs.h (do_exec_cleanups, make_exec_cleanup): Remove
	declarations.
	(struct continations): Add the 'error' parameter to the
	continuation_hook field.
	(add_continuation, do_all_continuations)
	(add_intermediate_continuation)
	(do_all_intermediate_continuations): Add the 'error' parameter.
	* exceptions.c (throw_exception): Don't call do_exec_cleanups.
	* inf-loop.c (inferior_event_handler): Instead of calling
	discard_all_continuations, use do_all_continuations with 1 as
	'error' parameter.  Pass 0 as 'error' parameter in existing uses
	of discard_all_continuations.
	* infcmd.c (step_1): Do not use exec cleanup.  For async case, discard
	cleanups.
	(step_once): Install continuation only after resuming the target.
	(step_1_continuation): Disable longjmp breakpoint on error.
	(finish_command_continuation): Add the error parameter.  Delete
	the finish breakpoint directly, do not use cleanups.
	(finish_command): Do not use exec_cleanups. Always setup
	continuation.  For sync case, immediately run them.
	(attach_command_continuation): Add the error parameter.
	* infrun.c (fetch_inferior_event): Do not use exec cleanups to
	remove step_resume_breakpoint -- adjust delete it directly.
	* interps.c (interp_set): Adjust call to do_all_continations.
	* mi/mi-interp.c (mi_interpreter_exec_continuation): Do not
	do exec cleanups.
	* mi/mi-main.c (mi_cmd_target_select): Do not do exec
	cleanups.
	(mi_cmd_execute): Do not use exec_cleanup.
	(mi_execute_async_cli_command): Simplify the string concatenation
	logic.  Do no use exec cleanup.
	(mi_exec_async_cli_cmd_continuation): New parameter error.
	Free last_async_command.
	* top.c (command_line_handler_continuation): New parameter error.
	* utils.c (exec_cleanup_chain, make_exec_cleanup)
	(do_exec_cleanups): Remove.
	(add_continuation, do_all_continations)
	(add_intermediate_continuation)
	(do_all_intermediate_continuations): New parameter error.
@
text
@d2872 8
@


1.186
log
@	* defs.h (do_exec_error_cleanups, discard_exec_error_cleanups)
	(make_exec_error_cleanup): Remove declarations.
	* utils.c (exec_error_cleanup_chain): Remove.
	(do_exec_error_cleanups, discard_exec_error_cleanups)
	(make_exec_error_cleanup): Remove.
	* event-loop.c (start_event_loop): Adjust call to
	async_enable_stdin.
	* event-top.c (async_enable_stdin): Remove the paramater dummy.
	(async_disable_stdin): Don't register async_enable_stdin via
	cleanup.
	* inf-loop.c (inferior_event_handler): Don't
	call do_exec_error_cleanups.  Call async_enable_stdin instead.
	* event-loop.c (start_event_loop): Adjust call to
	async_enable_stdin.
	* tui/tui-interp.c (tui_command_loop): Adjust call to
	async_enable_stdin.
@
text
@a106 1
static struct cleanup *exec_cleanup_chain;	/* cleaned up on each execution command */
a215 6
struct cleanup *
make_exec_cleanup (make_cleanup_ftype *function, void *arg)
{
  return make_my_cleanup (&exec_cleanup_chain, function, arg);
}

a311 6
void
do_exec_cleanups (struct cleanup *old_chain)
{
  do_my_cleanups (&exec_cleanup_chain, old_chain);
}

d430 1
a430 1
add_continuation (void (*continuation_hook) (struct continuation_arg *),
d452 1
a452 1
do_all_continuations (void)
d467 1
a467 1
      (continuation_ptr->continuation_hook) (continuation_ptr->arg_list);
d494 1
a494 1
			       (struct continuation_arg *),
d516 1
a516 1
do_all_intermediate_continuations (void)
d531 1
a531 1
      (continuation_ptr->continuation_hook) (continuation_ptr->arg_list);
@


1.185
log
@	* utils.c (debug_timestamp): New.
	(vfprintf_unfiltered): Print timestamps if requested.
	(show_debug_timestamp): New.
	(initialize_utils): Register "set debug timestamp".
	* NEWS: Mention "set debug timestamp".  Add GDB 6.8 section.

	* gdb.texinfo (Debugging Output): Document "set debug timestamp".
@
text
@a107 2
/* cleaned up on each error from within an execution command */
static struct cleanup *exec_error_cleanup_chain;
a222 6
struct cleanup *
make_exec_error_cleanup (make_cleanup_ftype *function, void *arg)
{
  return make_my_cleanup (&exec_error_cleanup_chain, function, arg);
}

a324 6
void
do_exec_error_cleanups (struct cleanup *old_chain)
{
  do_my_cleanups (&exec_error_cleanup_chain, old_chain);
}

a353 6
discard_exec_error_cleanups (struct cleanup *old_chain)
{
  discard_my_cleanups (&exec_error_cleanup_chain, old_chain);
}

void
@


1.184
log
@	Updated copyright notices for most files.
@
text
@d66 3
d98 4
d2131 10
d2457 7
d2524 9
@


1.183
log
@* utils.c (string_to_core_addr): If the executable format
indicates that addresses should be sign-extended and there are
only 8 hex digits in the address, then do so.
* Makefile.in (utils.o): Depend on $(gdbcore_h).
@
text
@d4 1
a4 1
   1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007
@


1.182
log
@	Remove 'run_cleanup'.
	* defs.h (do_run_cleanups, make_run_cleanup): Remove
	declarations.
	* infcmd.c (run_command_1): Call clear_solib instead
	of do_run_cleanups.
	* jv-lang.c (java_rerun_cleanup): Remove, for lack of
	any use.
	* solib.c (solib_cleanup_queued, do_clear_solib): Remove.
	(update_solib_lib): Don't setup run cleanup.
	(no_shared_libraries): Call clear_solib, not do_clear_solib.
	* utils.c (run_cleanup_chain, make_run_cleanup)
	(do_run_cleanups): Remove.
@
text
@d55 1
d2828 1
d2830 1
d2844 11
d2868 1
@


1.181
log
@        Switch the license of all .c files to GPLv3.
        Switch the license of all .h files to GPLv3.
        Switch the license of all .cc files to GPLv3.
@
text
@a98 1
static struct cleanup *run_cleanup_chain;	/* cleaned up on each 'run' */
a211 6
make_run_cleanup (make_cleanup_ftype *function, void *arg)
{
  return make_my_cleanup (&run_cleanup_chain, function, arg);
}

struct cleanup *
a319 6
do_run_cleanups (struct cleanup *old_chain)
{
  do_my_cleanups (&run_cleanup_chain, old_chain);
}

void
@


1.180
log
@2007-06-13  Markus Deuling  <deuling@@de.ibm.com>

	* gdbarch.sh (TARGET_ADDR_BIT): Replace by gdbarch_addr_bit.
	* valops.c (value_cast): Likewise.
	* utils.c (strlen_paddr, paddr, paddr_nz, paddress): Likewise.
	* ui-out.c (ui_out_field_core_addr): Likewise.
	* tracepoint.c (tracepoints_info): Likewise.
	* symtab.c (print_msymbol_info): Likewise.
	* solib-irix.c (irix_current_sos)
	(irix_open_symbol_file_object): Likewise.
	* remote.c (build_remote_gdbarch_data): Likewise.
	* prologue-value.c (make_pv_area): Likewise.
	* procfs.c (info_mappings_callback): Likewise.
	* printcmd.c (print_scalar_formatted)
	(deprecated_print_address_numeric): Likewise.
	* memattr.c (mem_info_command): Likewise.
	* linux-nat.c (linux_nat_info_proc_cmd): Likewise.
	* gdbtypes.c (build_flt, gdbtypes_post_init): Likewise.
	* exec.c (print_section_info): Likewise.
	* dwarf2read.c (read_subrange_type): Likewise.
	* dwarf2loc.c (find_location_expression): Likewise.
	* dwarf2expr.c (dwarf2_read_address, unsigned_address_type)
	(signed_address_type, execute_stack_op): Likewise.
	* breakpoint.c (print_one_breakpoint, breakpoint_1): Likewise.
	* gdbarch.c, gdbarch.h: Regenerate.
@
text
@d11 1
a11 1
   the Free Software Foundation; either version 2 of the License, or
d20 1
a20 3
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street, Fifth Floor,
   Boston, MA 02110-1301, USA.  */
@


1.179
log
@	* utils.c (set_screen_size): Use INT_MAX for default columns.
@
text
@d2538 1
a2538 1
  return (TARGET_ADDR_BIT / 8 * 2);
d2544 1
a2544 1
  return phex (addr, TARGET_ADDR_BIT / 8);
d2550 1
a2550 1
  return phex_nz (addr, TARGET_ADDR_BIT / 8);
d2565 1
a2565 1
  int addr_bit = TARGET_ADDR_BIT;
@


1.178
log
@2007-06-06  Markus Deuling  <deuling@@de.ibm.com>

	* gdbarch.sh (ADDRESS_TO_POINTER): Replace by
	gdbarch_address_to_pointer.
	* findvar.c (store_typed_address): Likewise.
	* gdbtypes.c (make_pointer_type): Likewise (comment).
	* procfs.c (procfs_address_to_host_pointer): Likewise.
	* std-regs.c (value_of_builtin_frame_reg): Likewise.
	(value_of_builtin_frame_fp_reg): Likewise.
	(value_of_builtin_frame_pc_reg): Likewise.
	* utils.c (paddress): Likewise (comment).
	* gdbarch.sh (POINTER_TO_ADDRESS): Replace by
	gdbarch_pointer_to_address.
	* findvar.c (extract_typed_address): Likewise.
	* gdbtypes.c (make_pointer_type): Likewise (comment).
	* valops.c (value_cast): Likewise (comment).
	* gdbarch.c, gdbarch.h: Regenerate.
@
text
@d1636 1
a1636 1
    rl_get_screen_size (NULL, &cols);
@


1.177
log
@	* defs.h (ldirname): New prototype.
	* dwarf2read.c (read_file_scope): Use DW_AT_name if DW_AT_comp_dir is
	missing.
	* utils.c (ldirname): New function.
	* xml-tdesc.c (file_read_description_xml): Use ldirname.
@
text
@d2562 1
a2562 1
     either zero or sign extended.  Should ADDRESS_TO_POINTER() or
@


1.176
log
@* utils.c (string_to_core_addr): Comment typo.
@
text
@d3198 28
@


1.175
log
@2007-03-22  Denis Pilat  <denis.pilat@@st.com>

	* utils.c (pagination_on_command, pagination_off_command):
	Remove useless prototypes.
@
text
@d2845 1
a2845 1
      /* Assume that it is in decimal.  */
@


1.174
log
@Reviewed and approved by Daniel Jacobowitz <drow@@false.org>

	2007-02-08  Fred Fish  <fnf@@specifix.com>
	* defs.h (request_quit): Remove declaration.
	* utils.c (request_quit): Remove definition.
@
text
@a2442 2

static void pagination_on_command (char *arg, int from_tty);
a2448 1
static void pagination_on_command (char *arg, int from_tty);
@


1.173
log
@Copyright updates for 2007.
@
text
@a908 12
/* Control C comes here */
void
request_quit (int signo)
{
  quit_flag = 1;
  /* Restore the signal handler.  Harmless with BSD-style signals,
     needed for System V-style signals.  */
  signal (signo, request_quit);

  if (immediate_quit)
    quit ();
}
@


1.172
log
@2006-12-06  Andrew Stubbs  <andrew.stubbs@@st.com>

	* event-top.c (command_handler): On EOF, print 'quit' and run quit
	command via execute_command such that hooks and trace work.
	* utils.c (defaulted_query): On EOF, print default answer and newline.
@
text
@d3 2
a4 2
   Copyright (C) 1986, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995,
   1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006
@


1.171
log
@	* utils.c (string_to_core_addr): Use error instead of
	internal_error.
	* mi/mi-main.c (mi_execute_command): Check for a NULL message.
@
text
@d1233 1
@


1.170
log
@	* utils.c (query): Use defaulted_query.
	(defaulted_query): Handle having no default answer.  Print out
	messages even if we have no terminal.  Prevent memory corruption.
@
text
@d2868 1
a2868 1
	    internal_error (__FILE__, __LINE__, _("invalid hex"));
d2880 1
a2880 1
	    internal_error (__FILE__, __LINE__, _("invalid decimal"));
@


1.170.2.1
log
@	From Daniel Jacobowitz  <dan@@codesourcery.com>
	* utils.c (string_to_core_addr): Use error instead of
	internal_error.
	* mi/mi-main.c (mi_execute_command): Check for a NULL message.
@
text
@d2868 1
a2868 1
	    error (_("invalid hex \"%s\""), my_string);
d2880 1
a2880 1
	    error (_("invalid decimal \"%s\""), my_string);
@


1.170.2.2
log
@2006-12-06  Andrew Stubbs  <andrew.stubbs@@st.com>

	* event-top.c (command_handler): On EOF, print 'quit' and run quit
	command via execute_command such that hooks and trace work.
	* utils.c (defaulted_query): On EOF, print default answer and newline.
@
text
@a1232 1
	  printf_filtered ("EOF [assumed %c]\n", def_answer);
@


1.169
log
@	* ada-lex.l (HIGH_BYTE_POSN, is_digit_in_base, digit_to_int)
	(strtoulst): Moved to ...
	* utils.c (HIGH_BYTE_POSN, is_digit_in_base, digit_to_int)
	(strtoulst): ... here.  Enhanced to behave more similarly
	to strtoul.
	* defs.h (strtoulst): New prototype.
@
text
@a1129 80

/* Ask user a y-or-n question and return 1 iff answer is yes.
   Takes three args which are given to printf to print the question.
   The first, a control string, should end in "? ".
   It should not say how to answer, because we do that.  */

/* VARARGS */
int
query (const char *ctlstr, ...)
{
  va_list args;
  int answer;
  int ans2;
  int retval;

  /* Automatically answer "yes" if input is not from the user
     directly, or if the user did not want prompts.  */
  if (!input_from_terminal_p () || !caution)
    return 1;

  if (deprecated_query_hook)
    {
      va_start (args, ctlstr);
      return deprecated_query_hook (ctlstr, args);
    }

  while (1)
    {
      wrap_here ("");		/* Flush any buffered output */
      gdb_flush (gdb_stdout);

      if (annotation_level > 1)
	printf_filtered (("\n\032\032pre-query\n"));

      va_start (args, ctlstr);
      vfprintf_filtered (gdb_stdout, ctlstr, args);
      va_end (args);
      printf_filtered (_("(y or n) "));

      if (annotation_level > 1)
	printf_filtered (("\n\032\032query\n"));

      wrap_here ("");
      gdb_flush (gdb_stdout);

      answer = fgetc (stdin);
      clearerr (stdin);		/* in case of C-d */
      if (answer == EOF)	/* C-d */
	{
	  retval = 1;
	  break;
	}
      /* Eat rest of input line, to EOF or newline */
      if (answer != '\n')
	do
	  {
	    ans2 = fgetc (stdin);
	    clearerr (stdin);
	  }
	while (ans2 != EOF && ans2 != '\n' && ans2 != '\r');

      if (answer >= 'a')
	answer -= 040;
      if (answer == 'Y')
	{
	  retval = 1;
	  break;
	}
      if (answer == 'N')
	{
	  retval = 0;
	  break;
	}
      printf_filtered (_("Please answer y or n.\n"));
    }

  if (annotation_level > 1)
    printf_filtered (("\n\032\032post-query\n"));
  return retval;
}
d1132 1
a1132 1
/* This function supports the nquery() and yquery() functions.
d1134 3
a1136 2
   answer is yes, or default the answer to the specified default.
   DEFCHAR is either 'y' or 'n' and refers to the default answer.
d1150 1
a1150 1
  char *y_string, *n_string;
d1153 9
a1161 1
  if (defchar == 'y')
d1178 21
d1209 3
d1220 1
a1220 1
      vfprintf_filtered (gdb_stdout, ctlstr, args);
d1254 6
a1259 4
      /* Otherwise, for the default, the user may either specify
         the required input or have it default by entering nothing.  */
      if (answer == def_answer || answer == '\n' || 
	  answer == '\r' || answer == EOF)
d1269 1
d1308 15
@


1.168
log
@gdb/
	* remote.c (PACKET_qXfer_auxv): New, renamed from PACKET_qPart_auxv.
	(remote_supported_packet): Remove #if 0.
	(remote_protocol_features): Add qPart:auxv:read.
	(remote_unescape_input): New function.
	(readchar): Don't mask off the high bit.
	(read_frame): Use fputstrn_filtered for packet data.
	(getpkt_sane): Return the number of bytes read or -1.  Use
	fputstrn_unfiltered.
	(remote_read_qxfer): New.
	(remote_xfer_partial): Use it for TARGET_OBJECT_AUXV.
	(_initialize_remote): Update packet registration.
	* defs.h (fputstrn_filtered): New prototype.
	* utils.c (fputstrn_filtered): New.
	* NEWS: Mention qXfer.
gdb/doc/
	* gdb.texinfo (OS Information): Update qPart reference to
	qXfer.
	(Remote configuration): Likewise.
	(Overview): Move @@cindex to the start of a paragraph.  Talk
	about binary data encoding.
	(Packets): Refer to the overview for the details of the X
	packet encoding.
	(General Query Packets): Remove qPart description.  Add qXfer
	description.  Add an anchor to qSupported.  Correct feature
	table title.  Add a new feature for qXfer:auxv:read.
	(Interrupts): Add a missing parenthesis.
gdb/gdbserver/
	* server.c (decode_xfer_read, write_qxfer_response): New.
	(handle_query): Take a packet length argument.  Handle
	qXfer:auxv:read instead of qPart:auxv:read.  Mention it in
	the qSupported response.
	(main): Update call to handle_query.
@
text
@d3142 99
@


1.167
log
@	* Makefile.in (utils.o): Update.
	* top.c (in_user_command): New.
	(command_line_input): Use input_from_terminal_p.
	(input_from_terminal_p): Don't check caution.  Handle
	stdin == NULL for Insight.
	* top.h (in_user_command, caution): New declarations.
	* utils.c: Include "top.h".
	(query, defaulted_query): Check caution here.  Move the call
	to input_from_terminal_p higher.
	* cli/cli-script.c (do_restore_user_call_depth): Only decrement
	the depth.  Update in_user_command if necessary.
	(execute_user_command): Don't clobber old_chain.  Set
	in_user_command.  Let do_restore_user_call_depth handle
	user_call_depth.
	(read_command_lines): Check whether to prompt before calling
	Insight hooks.
	* tui/tui-hooks.c (tui_query_hook): Remove newly unnecessary
	input_from_terminal_p check.
@
text
@d1547 9
@


1.167.8.1
log
@Changes from nickrob-async-20060828-mergepoint.
@
text
@a1546 9
fputstrn_filtered (const char *str, int n, int quoter,
		   struct ui_file *stream)
{
  int i;
  for (i = 0; i < n; i++)
    printchar (str[i], fputs_filtered, fprintf_filtered, stream, quoter);
}

void
@


1.166
log
@	* Makefile.in (mingw-hdep.o, posix-hdep.o): New dependencies.
	(ALLDEPFILES): Add mingw-hdep.c and posix-hdep.c.
	* configure.ac: Add gdb_host_obs to CONFIG_OBS.  Set gdb_host_obs
	to posix-hdep.o by default.
	* configure: Regenerated.
	* configure.host: Document gdb_host_obs.  Add an entry for
	i[34567]86-*-mingw32*.
	* mingw-hdep.c, posix-hdep.c: New files.
	* utils.c (safe_strerror): Remove, moved to posix-hdep.o.
@
text
@d57 1
d1145 5
a1155 4
  /* Automatically answer "yes" if input is not from a terminal.  */
  if (!input_from_terminal_p ())
    return 1;

d1249 5
a1258 4
  /* Automatically answer default value if input is not from a terminal.  */
  if (!input_from_terminal_p ())
    return def_value;

@


1.166.6.1
log
@        gdb/
        * buildsym.c, symtab.c: Add local hack for FILENAME_CMP testing.
        * utils.c (cygwin_filename_cmp): New.

        Backport:
        2006-04-21  Frederic Riss  <frederic.riss@@st.com>
        * dwarf2read.c (dwarf2_start_subfile): Change prototype to accept
        compilation directory as last argument.
        Always pass comp_dir as second argument to start_subfile and prepend
        dirname to the filename when necessary.
        Remove now superfluous search for pre-existing subfile.
        (dwarf_decode_lines): Pass the compilation directory to
        dwarf2_start_subfile.

        gdb/testsuite/
        * config/symbian.exp (gdb_target_symbian): Handle a running target.
        (gdb_load): Add return value.

        * gdb.base/completion.exp: Test arg rather than a.  Handle
        very small lists of symbols.

        * gdb.base/list.exp: Differentiate run behavior based on
        use_gdb_stub.

        * gdb.base/maint.exp: Accept local symbols.  Accept missing .data.

        * gdb.base/remote.exp: Update packet limits.

        * gdb.base/varargs.exp: Don't pass an empty list item.

        * lib/gdb.exp (fullname_syntax): Recognize forward slashes in DOS
        paths.

        Backport:
        2006-06-22  Daniel Jacobowitz  <dan@@codesourcery.com>
        * gdb.base/gdb1555.exp: Use gdb_compile_shlib.  Skip if not
        native.

        2006-06-22  Daniel Jacobowitz  <dan@@codesourcery.com>
        * gdb.stabs/exclfwd.exp: Skip the test if configure did not
        enable stabs testing.

        2006-05-06  Ulrich Weigand  <Ulrich.Weigand@@de.ibm.com>
        * gdb.mi/mi-basics.exp: Add missing serial number to
        expected output in some mi_gdb_test statements.
        * gdb.mi/mi2-basics.exp: Likewise.
@
text
@a3129 16

int
cygwin_filename_cmp (const char *lhs, const char *rhs)
{
  for (; *lhs || *rhs; lhs++, rhs++)
    {
      if (tolower (*lhs) == tolower (*rhs))
	continue;
      if (*lhs == '/' && *rhs == '\\')
	continue;
      if (*lhs == '\\' && *rhs == '/')
	continue;
      return (int) *lhs - (int) *rhs;
    }
  return 0;
}
@


1.165
log
@	* printcmd.c (printf_command): Make format string checking
	stricter.  Add separate cases for long_arg, ptr_arg, and
	long_double_arg.
	* utils.c (xstrvprintf): Improve the error message issued
	for a bad format string.
	* Makefile.in (GDB_WARN_CFLAGS_NO_FORMAT, INTERNAL_CFLAGS_BASE):
	New variables.
	(gnu-v3-abi.o, monitor.o, procfs.o, linux-thread-db.o): Remove
	$(NO_WERROR_CFLAGS).
	(printcmd.o): Likewise.  Use $(GDB_WARN_CFLAGS_NO_FORMAT) and
	enable -Werror.
@
text
@a841 19
/* The strerror() function can return NULL for errno values that are
   out of range.  Provide a "safe" version that always returns a
   printable string. */

char *
safe_strerror (int errnum)
{
  char *msg;

  msg = strerror (errnum);
  if (msg == NULL)
    {
      static char buf[32];
      xsnprintf (buf, sizeof buf, "(undocumented errno %d)", errnum);
      msg = buf;
    }
  return (msg);
}

@


1.164
log
@gdb/
	* Makefile.in (gdbtypes_h, gdbtypes.o, utils.o): Update.
	* defs.h (hashtab_obstack_allocate, dummy_obstack_deallocate): Add
	prototypes.
	* dwarf2read.c (read_subroutine_type): Use TYPE_ZALLOC.
	(hashtab_obstack_allocate, dummy_obstack_deallocate): Moved to...
	* utils.c (hashtab_obstack_allocate, dummy_obstack_deallocate):
	...here.
	* gdbtypes.c: Include "hashtab.h".
	(build_gdbtypes): Remove extra prototype.
	(struct type_pair, type_pair_hash, type_pair_eq)
	(create_copied_types_hash, copy_type_recursive): New.
	* gdbtypes.h: Include "hashtab.h".
	(TYPE_ZALLOC): New.
	(create_copied_types_hash, copy_type_recursive): New prototypes.
	* objfiles.c (free_objfile): Call preserve_values.
	* symfile.c (reread_symbols): Likewise.
	(clear_symtab_users): Remove calls to clear_value_history and
	clear_internalvars.
	* value.c (clear_value_history, clear_internalvars): Removed.
	(preserve_one_value, preserve_values): New functions.
	* value.h (clear_value_history, clear_internalvars): Removed.
	(preserve_values): New prototype.

	* tracepoint.c (_initialize_tracepoint): Do not initialize convenience
	variables here.
gdb/doc/
	* gdb.texinfo (Files): Remove obsolete bits from the description
	of "symbol-file".
@
text
@d4 2
a5 2
   1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005 Free
   Software Foundation, Inc.
d1072 6
a1077 8
  /* NULL is returned when there was a memory allocation problem.  */
  if (ret == NULL)
    nomem (0);
  /* A negative status (the printed length) with a non-NULL buffer
     should never happen, but just to be sure.  */
  if (status < 0)
    internal_error (__FILE__, __LINE__,
		    _("vasprintf call failed (errno %d)"), errno);
@


1.163
log
@
	* breakpoint.c:
	* arm-tdep.c:
	* ia64-tdep.c:
	* i386-tdep.c:
	* hpread.c:
	* hppa-tdep.c:
	* hppa-hpux-tdep.c:
	* gnu-nat.c:
	* gdbtypes.c:
	* gdbarch.h:
	* gdbarch.c:
	* eval.c:
	* dwarf2read.c:
	* dbxread.c:
	* copying:
	* symfile.c:
	* stabsread.c:
	* sh64-tdep.c:
	* sh-tdep.c:
	* s390-tdep.c:
	* rs6000-tdep.c:
	* remote.c:
	* remote-mips.c:
	* mips-tdep.c:
	* mdebugread.c:
	* linux-nat.c:
	* infrun.c:
	* xcoffread.c:
	* win32-nat.c:
	* valops.c:
	* utils.c:
	* tracepoint.c:
	* target.c:
	* symtab.c:
	* c-exp.y:
	* ada-valprint.c:
	* ada-typeprint.c:
	* ada-lex.l:
	* ada-lang.h:
	* ada-lang.c:
	* ada-exp.y:
	* alphafbsd-tdep.c:
	* alphabsd-tdep.h:
	* alphabsd-tdep.c:
	* alphabsd-nat.c:
	* alpha-tdep.h:
	* alpha-tdep.c:
	* alpha-osf1-tdep.c:
	* alpha-nat.c:
	* alpha-mdebug-tdep.c:
	* alpha-linux-tdep.c:
	* alpha-linux-nat.c:
	* aix-thread.c:
	* abug-rom.c:
	* arch-utils.c:
	* annotate.h:
	* annotate.c:
	* amd64obsd-tdep.c:
	* amd64obsd-nat.c:
	* amd64nbsd-tdep.c:
	* amd64nbsd-nat.c:
	* amd64fbsd-tdep.c:
	* amd64fbsd-nat.c:
	* amd64bsd-nat.c:
	* amd64-tdep.h:
	* amd64-tdep.c:
	* amd64-sol2-tdep.c:
	* amd64-nat.h:
	* amd64-nat.c:
	* amd64-linux-tdep.c:
	* amd64-linux-nat.c:
	* alphanbsd-tdep.c:
	* block.h:
	* block.c:
	* bfd-target.h:
	* bfd-target.c:
	* bcache.h:
	* bcache.c:
	* ax.h:
	* ax-general.c:
	* ax-gdb.h:
	* ax-gdb.c:
	* avr-tdep.c:
	* auxv.h:
	* auxv.c:
	* armnbsd-tdep.c:
	* armnbsd-nat.c:
	* arm-tdep.h:
	* arm-linux-nat.c:
	* arch-utils.h:
	* charset.c:
	* call-cmds.h:
	* c-valprint.c:
	* c-typeprint.c:
	* c-lang.h:
	* c-lang.c:
	* buildsym.h:
	* buildsym.c:
	* bsd-uthread.h:
	* bsd-uthread.c:
	* bsd-kvm.h:
	* bsd-kvm.c:
	* breakpoint.h:
	* core-regset.c:
	* core-aout.c:
	* completer.h:
	* completer.c:
	* complaints.h:
	* complaints.c:
	* command.h:
	* coffread.c:
	* coff-solib.h:
	* coff-solib.c:
	* coff-pe-read.h:
	* coff-pe-read.c:
	* cli-out.h:
	* cli-out.c:
	* charset.h:
	* dink32-rom.c:
	* dictionary.h:
	* dictionary.c:
	* demangle.c:
	* defs.h:
	* dcache.h:
	* dcache.c:
	* d10v-tdep.c:
	* cpu32bug-rom.c:
	* cp-valprint.c:
	* cp-support.h:
	* cp-support.c:
	* cp-namespace.c:
	* cp-abi.h:
	* cp-abi.c:
	* corelow.c:
	* corefile.c:
	* environ.c:
	* elfread.c:
	* dwarfread.c:
	* dwarf2loc.c:
	* dwarf2expr.h:
	* dwarf2expr.c:
	* dwarf2-frame.h:
	* dwarf2-frame.c:
	* dve3900-rom.c:
	* dummy-frame.h:
	* dummy-frame.c:
	* dsrec.c:
	* doublest.h:
	* doublest.c:
	* disasm.h:
	* disasm.c:
	* fork-child.c:
	* findvar.c:
	* fbsd-nat.h:
	* fbsd-nat.c:
	* f-valprint.c:
	* f-typeprint.c:
	* f-lang.h:
	* f-lang.c:
	* expression.h:
	* expprint.c:
	* exec.h:
	* exec.c:
	* exceptions.h:
	* exceptions.c:
	* event-top.h:
	* event-top.c:
	* event-loop.h:
	* event-loop.c:
	* gdb.c:
	* gdb-stabs.h:
	* gdb-events.h:
	* gdb-events.c:
	* gcore.c:
	* frv-tdep.h:
	* frv-tdep.c:
	* frv-linux-tdep.c:
	* frame.h:
	* frame.c:
	* frame-unwind.h:
	* frame-unwind.c:
	* frame-base.h:
	* frame-base.c:
	* gdb_vfork.h:
	* gdb_thread_db.h:
	* gdb_string.h:
	* gdb_stat.h:
	* gdb_regex.h:
	* gdb_ptrace.h:
	* gdb_proc_service.h:
	* gdb_obstack.h:
	* gdb_locale.h:
	* gdb_dirent.h:
	* gdb_curses.h:
	* gdb_assert.h:
	* gdbarch.sh:
	* gdb.h:
	* hpux-thread.c:
	* hppabsd-nat.c:
	* hppa-tdep.h:
	* hpacc-abi.c:
	* h8300-tdep.c:
	* gregset.h:
	* go32-nat.c:
	* gnu-v3-abi.c:
	* gnu-v2-abi.h:
	* gnu-v2-abi.c:
	* gnu-nat.h:
	* glibc-tdep.c:
	* gdbtypes.h:
	* gdbcore.h:
	* gdbcmd.h:
	* i386nbsd-tdep.c:
	* i386nbsd-nat.c:
	* i386gnu-tdep.c:
	* i386gnu-nat.c:
	* i386fbsd-tdep.c:
	* i386fbsd-nat.c:
	* i386bsd-tdep.c:
	* i386bsd-nat.h:
	* i386bsd-nat.c:
	* i386-tdep.h:
	* i386-sol2-nat.c:
	* i386-nto-tdep.c:
	* i386-nat.c:
	* i386-linux-tdep.h:
	* i386-linux-tdep.c:
	* i386-linux-nat.c:
	* i386-cygwin-tdep.c:
	* inf-ttrace.c:
	* inf-ptrace.h:
	* inf-ptrace.c:
	* inf-loop.h:
	* inf-loop.c:
	* inf-child.h:
	* inf-child.c:
	* ia64-tdep.h:
	* ia64-linux-nat.c:
	* i387-tdep.h:
	* i387-tdep.c:
	* i386v4-nat.c:
	* i386v-nat.c:
	* i386obsd-tdep.c:
	* i386obsd-nat.c:
	* kod.c:
	* jv-valprint.c:
	* jv-typeprint.c:
	* jv-lang.h:
	* jv-lang.c:
	* irix5-nat.c:
	* iq2000-tdep.c:
	* interps.h:
	* interps.c:
	* inftarg.c:
	* inflow.h:
	* inflow.c:
	* inferior.h:
	* infcmd.c:
	* infcall.h:
	* infcall.c:
	* inf-ttrace.h:
	* m32r-tdep.h:
	* m32r-tdep.c:
	* m32r-rom.c:
	* m32r-linux-tdep.c:
	* m32r-linux-nat.c:
	* m2-valprint.c:
	* m2-typeprint.c:
	* m2-lang.h:
	* m2-lang.c:
	* lynx-nat.c:
	* linux-thread-db.c:
	* linux-nat.h:
	* linespec.c:
	* libunwind-frame.h:
	* libunwind-frame.c:
	* language.h:
	* language.c:
	* macroexp.c:
	* macrocmd.c:
	* m88kbsd-nat.c:
	* m88k-tdep.h:
	* m88k-tdep.c:
	* m68klinux-tdep.c:
	* m68klinux-nat.c:
	* m68kbsd-tdep.c:
	* m68kbsd-nat.c:
	* m68k-tdep.h:
	* m68k-tdep.c:
	* mips-linux-nat.c:
	* mips-irix-tdep.c:
	* minsyms.c:
	* memattr.h:
	* memattr.c:
	* mem-break.c:
	* mdebugread.h:
	* main.h:
	* main.c:
	* macrotab.h:
	* macrotab.c:
	* macroscope.h:
	* macroscope.c:
	* macroexp.h:
	* nbsd-tdep.c:
	* mt-tdep.c:
	* monitor.h:
	* monitor.c:
	* mn10300-tdep.h:
	* mn10300-tdep.c:
	* mn10300-linux-tdep.c:
	* mipsv4-nat.c:
	* mipsread.c:
	* mipsnbsd-tdep.h:
	* mipsnbsd-tdep.c:
	* mipsnbsd-nat.c:
	* mips64obsd-tdep.c:
	* mips64obsd-nat.c:
	* mips-tdep.h:
	* mips-mdebug-tdep.c:
	* mips-linux-tdep.c:
	* osabi.h:
	* osabi.c:
	* ocd.h:
	* ocd.c:
	* observer.c:
	* objfiles.h:
	* objfiles.c:
	* objc-lang.h:
	* objc-lang.c:
	* objc-exp.y:
	* nto-tdep.h:
	* nto-tdep.c:
	* nto-procfs.c:
	* nlmread.c:
	* nbsd-tdep.h:
	* ppcobsd-tdep.c:
	* ppcobsd-nat.c:
	* ppcnbsd-tdep.h:
	* ppcnbsd-tdep.c:
	* ppcnbsd-nat.c:
	* ppcbug-rom.c:
	* ppc-tdep.h:
	* ppc-sysv-tdep.c:
	* ppc-linux-tdep.c:
	* ppc-linux-nat.c:
	* ppc-bdm.c:
	* parser-defs.h:
	* parse.c:
	* p-valprint.c:
	* p-typeprint.c:
	* p-lang.h:
	* p-lang.c:
	* remote-fileio.h:
	* remote-fileio.c:
	* remote-est.c:
	* remote-e7000.c:
	* regset.h:
	* regset.c:
	* reggroups.h:
	* reggroups.c:
	* regcache.h:
	* regcache.c:
	* proc-why.c:
	* proc-service.c:
	* proc-events.c:
	* printcmd.c:
	* ppcobsd-tdep.h:
	* sentinel-frame.h:
	* sentinel-frame.c:
	* scm-valprint.c:
	* scm-tags.h:
	* scm-lang.h:
	* scm-lang.c:
	* scm-exp.c:
	* s390-tdep.h:
	* rom68k-rom.c:
	* remote.h:
	* remote-utils.c:
	* remote-st.c:
	* remote-sim.c:
	* remote-sds.c:
	* remote-rdp.c:
	* remote-rdi.c:
	* remote-hms.c:
	* sim-regno.h:
	* shnbsd-tdep.h:
	* shnbsd-tdep.c:
	* shnbsd-nat.c:
	* sh-tdep.h:
	* serial.h:
	* serial.c:
	* ser-unix.h:
	* ser-unix.c:
	* ser-tcp.c:
	* ser-pipe.c:
	* ser-go32.c:
	* ser-e7kpc.c:
	* ser-base.h:
	* ser-base.c:
	* solib.c:
	* solib-svr4.h:
	* solib-svr4.c:
	* solib-sunos.c:
	* solib-som.h:
	* solib-som.c:
	* solib-pa64.h:
	* solib-pa64.c:
	* solib-osf.c:
	* solib-null.c:
	* solib-legacy.c:
	* solib-irix.c:
	* solib-frv.c:
	* solib-aix5.c:
	* sol-thread.c:
	* sparc64-linux-tdep.c:
	* sparc64-linux-nat.c:
	* sparc-tdep.h:
	* sparc-tdep.c:
	* sparc-sol2-tdep.c:
	* sparc-sol2-nat.c:
	* sparc-nat.h:
	* sparc-nat.c:
	* sparc-linux-tdep.c:
	* sparc-linux-nat.c:
	* source.h:
	* source.c:
	* somread.c:
	* solist.h:
	* solib.h:
	* std-regs.c:
	* stack.h:
	* stack.c:
	* stabsread.h:
	* sparcobsd-tdep.c:
	* sparcnbsd-tdep.c:
	* sparcnbsd-nat.c:
	* sparc64obsd-tdep.c:
	* sparc64nbsd-tdep.c:
	* sparc64nbsd-nat.c:
	* sparc64fbsd-tdep.c:
	* sparc64fbsd-nat.c:
	* sparc64-tdep.h:
	* sparc64-tdep.c:
	* sparc64-sol2-tdep.c:
	* sparc64-nat.c:
	* ui-file.c:
	* typeprint.h:
	* typeprint.c:
	* tramp-frame.h:
	* tramp-frame.c:
	* trad-frame.h:
	* trad-frame.c:
	* tracepoint.h:
	* top.c:
	* tobs.inc:
	* thread.c:
	* terminal.h:
	* target.h:
	* symfile.h:
	* stop-gdb.c:
	* vaxbsd-nat.c:
	* vax-tdep.h:
	* vax-tdep.c:
	* vax-nat.c:
	* varobj.h:
	* varobj.c:
	* value.h:
	* value.c:
	* valprint.h:
	* valprint.c:
	* v850-tdep.c:
	* uw-thread.c:
	* user-regs.c:
	* ui-out.h:
	* ui-out.c:
	* ui-file.h:
	* xcoffsolib.h:
	* xcoffsolib.c:
	* wrapper.c:
	* wince.c:
	* wince-stub.h:
	* wince-stub.c:
	* vaxobsd-tdep.c:
	* vaxnbsd-tdep.c:
	* gdb_gcore.sh:
	* copying.c:
	* configure.ac:
	* aclocal.m4:
	* acinclude.m4:
	* reply_mig_hack.awk:
	* observer.sh:
	* gdb_mbuild.sh:
	* arm-linux-tdep.c:
	* blockframe.c:
	* dbug-rom.c:
	* environ.h:
	* dwarf2loc.h:
	* gdb-events.sh:
	* glibc-tdep.h:
	* gdb_wait.h:
	* gdbthread.h:
	* i386-sol2-tdep.c:
	* hppabsd-tdep.c:
	* hppa-linux-nat.c:
	* hppa-hpux-nat.c:
	* ia64-linux-tdep.c:
	* infptrace.c:
	* linespec.h:
	* maint.c:
	* mips-mdebug-tdep.h:
	* remote-m32r-sdi.c:
	* s390-nat.c:
	* rs6000-nat.c:
	* remote-utils.h:
	* sh3-rom.c:
	* sh-linux-tdep.c:
	* top.h:
	* symtab.h:
	* symmisc.c:
	* symfile-mem.c:
	* srec.h:
	* user-regs.h:
	* version.h:
	* valarith.c:
	* xstormy16-tdep.c:
	* wrapper.h:
	* Makefile.in:
	* f-exp.y:
	* cris-tdep.c:
	* cp-name-parser.y:
	* procfs.c:
	* proc-utils.h:
	* proc-flags.c:
	* proc-api.c:
	* p-exp.y:
	* m68hc11-tdep.c:
	* m2-exp.y:
	* kod.h:
	* kod-cisco.c:
	* jv-exp.y:
	* hppa-linux-tdep.c: Add (c) after Copyright.  Update the FSF
	address.
@
text
@d56 1
d3128 23
@


1.162
log
@From  Kaveh R. Ghazi  <ghazi@@caip.rutgers.edu>:
gdb/
	* cli-out.c (cli_field_fmt, cli_message, out_field_fmt): Add
	ATTR_FORMAT or ATTRIBUTE_FPTR_PRINTF.
	* complaints.c (vcomplaint): Likewise.
	* defs.h (xvasprintf, xstrvprintf, verror, vfatal)
	(internal_verror, internal_vwarning, vwarning)
	(deprecated_query_hook, deprecated_warning_hook)
	(deprecated_readline_begin_hook): Likewise.
	* disasm.c (fprintf_disasm): Likewise.
	* exceptions.c (throw_it): Likewise.
	* exceptions.h (throw_verror, throw_vfatal): Likewise.
	* mi/mi-interp.c (mi_interp_query_hook): Likewise.
	* mi/mi-out.c (mi_field_fmt, mi_message): Likewise.
	* tui/tui-hooks.c (tui_query_hook): Likewise.
	* tui/tui-out.c (tui_field_fmt, tui_message, out_field_fmt):
	Likewise.
	* ui-out.c (default_field_fmt, default_message, uo_field_fmt)
	(uo_message): Likewise.
	* ui-out.h (ui_out_field_fmt, ui_out_message, field_fmt_ftype)
	(message_ftype): Likewise.
	* utils.c (vfprintf_maybe_filtered, internal_vproblem)
	(defaulted_query, printchar): Likewise.
gdb/gdbserver/
	* server.h (error, fatal, warning): Add ATTR_FORMAT.
@
text
@d3 1
a3 1
   Copyright 1986, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995,
d21 2
a22 2
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */
@


1.161
log
@* bsd-kvm.c (bsd_kvm_open): Properly cast sentinel in concat call.
* coffread.c (patch_type, process_coff_symbol): Likewise.
* corelow.c (core_open): Likewise.
* dwarf2read.c (dwarf_decode_lines, dwarf2_start_subfile):
* language.c (set_lang_str, set_type_str, set_range_str)
(set_case_str): Likewise.
* source.c (add_path, openp): Likewise.
* stabsread.c: Likewise.
* top.c (init_history): Likewise.
* utils.c (xfullpath): Likewise.
* value.c (lookup_internalvar): Likewise.
* cli/cli-cmds.c (cd_command): Likewise.
* cli/cli-dump.c (add_dump_command): Likewise.
@
text
@d83 1
a83 1
				     va_list, int);
d696 1
a696 1
static void
d1239 1
a1239 1
static int
d1498 2
a1499 2
	   void (*do_fprintf) (struct ui_file *, const char *, ...),
	   struct ui_file *stream, int quoter)
@


1.160
log
@* utils.c (safe_strerror): Use xsnprintf instead of sprintf.
(decimal2str, octal2str): Change to return a string allocated by
get_cell.  Use xsnprint instead of snprintf.
(paddr_u, paddr_d): Adjust for changed calling convention of
decimal2str.
(phex, phex_nz, hex_string): Use xsnprintf instead of snprintf.
(int_string): Likewise.  Adjust for changed calling convention of
decimal2str and octal2str.
@
text
@d3033 1
a3033 1
    result = concat (real_path, base_name, NULL);
d3035 1
a3035 1
    result = concat (real_path, SLASH_STRING, base_name, NULL);
@


1.160.2.1
log
@	* gdb/configure.ac: Link with -lws2_32 on mingw.
	* gdb/configure: Regenerated.
	* gdb/defs.h (WINAPI): Define, conditionally.
	* gdb/ser-base.c (winsock2.h): Include it.
	(fd_event): Use read_prim.
	(ser_base_wait_for): Moved here from ser-unix.c.
	(do_ser_base_readchar): Likewise.
	(generic_readchar): Likewise.
	(ser_base_readchar): Likewise.
	* gdb/ser-base.h (generic_readchar): Declare.
	(ser_base_readchar): Likewise.
	* gdb/ser-pipe.c (_initialize_ser_pipe): Adjust for name changes.
	* gdb/ser-tcp.c (winsock2.h): Include it.
	(ETIMEDOUT): Define on Windows.
	(closesocket): Define on UNIX.
	(ioctlsocket): Likewise.
	(net_open): Adjust for differences in socket functions between
	Windows and UNIX.
	(_initialize_ser_tcp): Adjust for name changes.
	(net_read_prim): New function.
	(net_write_prim): Likewise.
	* gdb/ser-unix.c (generic_readchar): Remove.
	(ser_unix_wait_for): Likewise.
	(do_unix_readchar): Likewise.
	(ser_unix_readchar): Likewise.
	(_initialize_ser_hardwire): Adjust for name changes.
	(ser_unix_read_prim): New function.
	(ser_unix_write_prim): New function.
	* gdb/ser-unix.h (ser_unix_readchar): Remove.
	(ser_unix_read_prim): Declare.
	(ser_unix_write_prim): Declare.
	* gdb/serial.h (struct serial_ops): Add read_prim and write_prim.
	* gdb/utils.c (winerror.h): Include it.
	(safe_strerror): Handle winsock errors.
@
text
@a60 4
#ifdef WINAPI
#include <winerror.h>
#endif

a848 1
  static char buf[32];
d850 2
a851 5
#ifdef WINAPI
  /* The strerror function only works for functions that set errno.
     In the case of Windows sockets, we can get error numbers that
     strerror cannot handle.  */
  if (errnum > WSABASEERR)
d853 2
a854 1
      xsnprintf (buf, sizeof buf, "(winsock error %d)", errnum);
a856 11
  else
#endif
    {
      msg = strerror (errnum);
    
      if (msg == NULL)
	{
	  xsnprintf (buf, sizeof buf, "(undocumented errno %d)", errnum);
	  msg = buf;
	}
    }
@


1.159
log
@* defs.h (xsnprintf): New prototype.
* utils.c (xsnprintf): New function.
@
text
@a848 1
  static char buf[32];
d853 2
a854 1
      sprintf (buf, "(undocumented errno %d)", errnum);
d2623 2
a2624 2
static void
decimal2str (char *paddr_str, char *sign, ULONGEST addr, int width)
d2626 1
a2626 1
  /* steal code from valprint.c:print_decimal().  Should this worry
d2629 2
d2640 1
d2644 1
d2648 1
a2648 1
      sprintf (paddr_str, "%s%0*lu", sign, width, temp[0]);
d2651 2
a2652 1
      sprintf (paddr_str, "%s%0*lu%09lu", sign, width, temp[1], temp[0]);
d2655 2
a2656 2
      sprintf (paddr_str, "%s%0*lu%09lu%09lu", sign, width,
	       temp[2], temp[1], temp[0]);
d2662 2
d2666 2
a2667 2
static void
octal2str (char *paddr_str, ULONGEST addr, int width)
d2670 2
d2681 1
d2685 1
d2690 1
a2690 1
	sprintf (paddr_str, "%*o", width, 0);
d2692 1
a2692 1
	sprintf (paddr_str, "0%0*lo", width, temp[0]);
d2695 1
a2695 1
      sprintf (paddr_str, "0%0*lo%010lo", width, temp[1], temp[0]);
d2698 2
a2699 2
      sprintf (paddr_str, "0%0*lo%010lo%010lo", width,
	       temp[2], temp[1], temp[0]);
d2705 2
d2712 1
a2712 3
  char *paddr_str = get_cell ();
  decimal2str (paddr_str, "", addr, 0);
  return paddr_str;
a2717 1
  char *paddr_str = get_cell ();
d2719 1
a2719 1
    decimal2str (paddr_str, "-", -addr, 0);
d2721 1
a2721 2
    decimal2str (paddr_str, "", addr, 0);
  return paddr_str;
d2724 1
a2724 1
/* eliminate warning from compiler on 32-bit systems */
d2731 1
d2736 3
a2738 3
      sprintf (str, "%08lx%08lx",
	       (unsigned long) (l >> thirty_two),
	       (unsigned long) (l & 0xffffffff));
d2742 1
a2742 1
      sprintf (str, "%08lx", (unsigned long) l);
d2746 1
a2746 1
      sprintf (str, "%04x", (unsigned short) (l & 0xffff));
d2752 1
d2760 1
d2768 2
a2769 1
	  sprintf (str, "%lx", (unsigned long) (l & 0xffffffff));
d2771 2
a2772 1
	  sprintf (str, "%lx%08lx", high, (unsigned long) (l & 0xffffffff));
d2777 1
a2777 1
      sprintf (str, "%lx", (unsigned long) l);
d2781 1
a2781 1
      sprintf (str, "%x", (unsigned short) (l & 0xffff));
d2787 1
d2797 1
a2797 1
  snprintf (result, CELLSIZE, "0x%s", phex_nz (num, sizeof (num)));
a2850 1
	char *result = get_cell ();
d2852 1
a2852 1
	  decimal2str (result, "-", -val, width);
d2854 1
a2854 2
	  decimal2str (result, "", val, width);
	return result;
d2858 1
a2858 2
	char *result = get_cell ();
	octal2str (result, val, width);
@


1.158
log
@	* utils.c (internal_vproblem): Guard call to fork with
	HAVE_WORKING_FORK.
	* cli/cli-cmds.c (shell_escape): Guard call to vfork with
	HAVE_WORKING_VFORK and HAVE_WORKING_FORK.

	* remote-fileo.c (remote_fileio_mode_to_host): Accomodate lack of
	S_IRGRP and related macros.
	(remote_fileio_mode_to_target): Likewise.
@
text
@d1082 14
@


1.157
log
@2005-02-24  Andrew Cagney  <cagney@@gnu.org>

	Add show_VARIABLE functions, update add_setshow call.
	* varobj.c (_initialize_varobj, show_varobjdebug): Add and update.
	* valprint.c (_initialize_valprint, show_print_max)
	(show_stop_print_at_null, show_repeat_count_threshold)
	(show_prettyprint_structs, show_unionprint)
	(show_prettyprint_arrays, show_addressprint, show_input_radix)
	(show_output_radix): Ditto.
	* valops.c (_initialize_valops, show_overload_resolution): Ditto.
	* utils.c (initialize_utils, show_chars_per_line)
	(show_lines_per_page, show_demangle, show_pagination_enabled)
	(show_sevenbit_strings, show_asm_demangle): Ditto
	* tui/tui-win.c (_initialize_tui_win, show_tui_border_kind)
	(show_tui_border_mode, show_tui_active_border_mode): Ditto.
	* top.c (init_main, show_new_async_prompt)
	(show_async_command_editing_p, show_write_history_p)
	(show_history_size, show_history_filename, show_caution)
	(show_annotation_level, init_main): Ditto.
	* target.c (initialize_targets, show_targetdebug)
	(show_trust_readonly): Ditto.
	* symfile.c (_initialize_symfile, show_symbol_reloading)
	(show_ext_args, show_download_write_size)
	(show_debug_file_directory): Ditto.
	* source.c (_initialize_source, show_lines_to_list): Ditto.
	* solib.c (_initialize_solib, show_auto_solib_add)
	(show_solib_search_path): Ditto.
	* p-valprint.c (_initialize_pascal_valprint)
	(show_pascal_static_field_print): Ditto.
	* printcmd.c (_initialize_printcmd, show_max_symbolic_offset)
	(show_print_symbol_filename): Add and update.
	* parse.c (_initialize_parse, show_expressiondebug): Dito.
	* observer.c (_initialize_observer, show_observer_debug): Dito.
	* maint.c (_initialize_maint_cmds, show_watchdog)
	(show_maintenance_profile_p): Dito.
	* linux-nat.c (_initialize_linux_nat, show_debug_linux_nat): Dito.
	* infrun.c (_initialize_infrun, show_debug_infrun)
	(show_stop_on_solib_events, show_follow_fork_mode_string)
	(show_scheduler_mode, show_step_stop_if_no_debug): Ditto.
	* infcall.c (_initialize_infcall, show_coerce_float_to_double_p)
	(show_unwind_on_signal_p): Ditto.
	* gdbtypes.c (build_gdbtypes, show_opaque_type_resolution)
	(_initialize_gdbtypes, show_overload_debug): Ditto.
	* gdb-events.c, gdb-events.sh (_initialize_gdb_events)
	(show_gdb_events_debug): Ditto.
	* gdbarch.c, gdbarch.sh (show_gdbarch_debug)
	(_initialize_gdbarch): Ditto.
	* frame.c (_initialize_frame, show_backtrace_past_main)
	(show_backtrace_past_entry, show_backtrace_limit)
	(show_frame_debug): Ditto.
	* exec.c (_initialize_exec, show_write_files): Ditto.
	* dwarf2read.c (_initialize_dwarf2_read)
	(show_dwarf2_max_cache_age): Ditto.
	* demangle.c (_initialize_demangler)
	(show_demangling_style_names): Ditto.
	* dcache.c (_initialize_dcache, show_dcache_enabled_p): Ditto.
	* cp-valprint.c (show_static_field_print)
	(_initialize_cp_valprint, show_vtblprint, show_objectprint): Ditto.
	* corefile.c (_initialize_core, show_gnutarget_string): Ditto.
	* cli/cli-logging.c (_initialize_cli_logging)
	(show_logging_overwrite, show_logging_redirect)
	(show_logging_filename): Ditto.
	* cli/cli-cmds.c (show_info_verbose, show_history_expansion_p)
	(init_cli_cmds, show_baud_rate, show_remote_debug)
	(show_remote_timeout, show_max_user_call_depth): Ditto.
	* charset.c (show_host_charset_name, show_target_charset_name)
	(initialize_charset): Ditto.
	* breakpoint.c (show_can_use_hw_watchpoints)
	(show_pending_break_support, _initialize_breakpoint): Ditto.
@
text
@d792 1
d795 1
@


1.156
log
@2005-02-18  Andrew Cagney  <cagney@@gnu.org>

	Use add_setshow_uinteger_cmd through out.
	* printcmd.c, source.c, utils.c, valprint.c: Update.
@
text
@d136 8
d150 8
d164 8
d186 7
d1559 8
d1570 8
d2500 1
a2500 1
			    NULL, /* FIXME: i18n: */
d2507 1
a2507 1
			    NULL, /* FIXME: i18n: */
d2516 1
a2516 1
			   NULL, /* FIXME: i18n: */
d2524 1
a2524 1
			   NULL, /* FIXME: i18n: */
d2540 1
a2540 1
			   NULL, /* FIXME: i18n: */
d2547 1
a2547 1
			   NULL, /* FIXME: i18n: */
@


1.155
log
@2005-02-18  Andrew Cagney  <cagney@@gnu.org>

	Use add_setshow_boolean_command through out.  Delete #ifdef 0'ed
	code adding set/show boolean commands.
	* cp-valprint.c, dcache.c, exec.c, gdbtypes.c, infrun.c: Update.
	* monitor.c, p-valprint.c, pa64solib.c, printcmd.c: Update.
	* proc-api.c, remote-mips.c, remote.c, solib.c: Update.
	* somsolib.c, symfile.c, top.c, utils.c, valops.c: Update.
	* valprint.c, win32-nat.c, wince.c, xcoffsolib.c: Update.
	* cli/cli-cmds.c: Update.
@
text
@d2449 13
a2461 10
  c = add_set_cmd ("width", class_support, var_uinteger, &chars_per_line,
		   "Set number of characters gdb thinks are in a line.",
		   &setlist);
  deprecated_add_show_from_set (c, &showlist);
  set_cmd_sfunc (c, set_width_command);

  c = add_set_cmd ("height", class_support, var_uinteger, &lines_per_page,
		   "Set number of lines gdb thinks are in a page.", &setlist);
  deprecated_add_show_from_set (c, &showlist);
  set_cmd_sfunc (c, set_height_command);
@


1.154
log
@2005-02-15  Andrew Cagney  <cagney@@gnu.org>

	Mark up add_com, add_info and add_prefix_cmd.
	* breakpoint.c, cp-support.c, dcache.c, dwarf2read.c: Update.
	* exec.c, f-valprint.c, frame.c, gcore.c, gnu-nat.c: Update.
	* go32-nat.c, infcmd.c, inflow.c, infptrace.c, infrun.c: Update.
	* kod.c, language.c, linux-nat.c, m32r-rom.c, macrocmd.c: Update.
	* maint.c, memattr.c, mips-tdep.c, nto-procfs.c, objc-lang.c: Update.
	* ocd.c, pa64solib.c, printcmd.c, procfs.c, regcache.c: Update.
	* remote-e7000.c, remote-m32r-sdi.c, remote-mips.c: Update.
	* remote-sds.c, remote-sim.c, remote-st.c, remote-utils.c: Update.
	* remote.c, rs6000-tdep.c, ser-go32.c, serial.c: Update.
	* sh-tdep.c, solib.c, somsolib.c, source.c, stack.c: Update.
	* symfile.c, symtab.c, target.c, thread.c, top.c: Update.
	* tracepoint.c, typeprint.c, utils.c, valprint.c: Update.
	* win32-nat.c, xcoffsolib.c, cli/cli-cmds.c, cli/cli-dump.c: Update.
	* cli/cli-logging.c, tui/tui-layout.c, tui/tui-regs.c: Update.
	* tui/tui-stack.c, tui/tui-win.c: Update.
@
text
@d2462 14
a2475 10
  deprecated_add_show_from_set
    (add_set_cmd ("demangle", class_support, var_boolean,
		  (char *) &demangle,
		  "Set demangling of encoded C++/ObjC names when displaying symbols.",
		  &setprintlist), &showprintlist);

  deprecated_add_show_from_set
    (add_set_cmd ("pagination", class_support,
		  var_boolean, (char *) &pagination_enabled,
		  "Set state of pagination.", &setlist), &showlist);
d2485 14
a2498 11
  deprecated_add_show_from_set
    (add_set_cmd ("sevenbit-strings", class_support, var_boolean,
		  (char *) &sevenbit_strings,
		  "Set printing of 8-bit characters in strings as \\nnn.",
		  &setprintlist), &showprintlist);

  deprecated_add_show_from_set
    (add_set_cmd ("asm-demangle", class_support, var_boolean,
		  (char *) &asm_demangle,
		  "Set demangling of C++/ObjC names in disassembly listings.",
		  &setprintlist), &showprintlist);
@


1.153
log
@2005-02-14  Andrew Cagney  <cagney@@gnu.org>

	* utils.c (paddress): New function.
	* defs.h (paddress): Declare.
	* printcmd.c (deprecated_print_address_numeric): Rename
	print_address_numeric, call paddress.
	* valprint.c, ui-out.c, tui/tui-stack.c, tracepoint.c: Update.
	* symmisc.c, symfile.c stack.c, p-valprint.c, printcmd.c: Update.
	* maint.c, m32r-rom.c, infcmd.c, f-valprint.c, exec.c: Update.
	* dwarf2read.c, dve3900-rom.c, defs.h, c-valprint.c: Update.
	* corefile.c, cli/cli-cmds.c, breakpoint.c, annotate.c: Update.
	* ada-valprint.c: Update.
@
text
@d2476 1
a2476 1
	       "Enable pagination");
d2478 1
a2478 1
	       "Disable pagination");
@


1.152
log
@2005-02-11  Andrew Cagney  <cagney@@gnu.org>

	Mark up some of printf_filtered and printf_unfiltered.
	* ada-lang.c, annotate.c, arch-utils.c, breakpoint.c: Update.
	* corelow.c, cp-namespace.c, cp-support.c, dcache.c: Update.
	* demangle.c, dsrec.c, dwarf2read.c, dwarfread.c: Update.
	* event-loop.c, event-top.c, exec.c, f-valprint.c: Update.
	* gdbtypes.c, inf-loop.c, inf-ptrace.c, inf-ttrace.c: Update.
	* infcmd.c, inflow.c, infrun.c, inftarg.c, language.c: Update.
	* linespec.c, linux-nat.c, linux-thread-db.c, maint.c: Update.
	* mdebugread.c, memattr.c, monitor.c, objc-lang.c: Update.
	* ocd.c, osabi.c, printcmd.c, procfs.c, regcache.c: Update.
	* remote.c, solib-som.c, solib.c, somsolib.c, source.c: Update.
	* stack.c, symfile.c, symmisc.c, target.c, thread.c: Update.
	* top.c, utils.c, valprint.c, value.c, cli/cli-cmds.c: Update.
	* cli/cli-dump.c, cli/cli-logging.c, tui/tui-hooks.c: Update.
	* tui/tui-regs.c, tui/tui-win.c: Update.
@
text
@d2531 19
@


1.151
log
@2005-02-11  Andrew Cagney  <cagney@@gnu.org>

	Mark up error_no_arg, query, perror_with_name, complaint, and
	internal_error.
	* breakpoint.c, cp-abi.c, cp-namespace.c, cp-support.c: Update.
	* cris-tdep.c, dbxread.c, dictionary.c, dsrec.c: Update.
	* dummy-frame.c, dve3900-rom.c, dwarf2-frame.c, dwarf2expr.c: Update.
	* dwarf2read.c, dwarfread.c, elfread.c, event-loop.c: Update.
	* exceptions.c, exec.c, f-lang.c, findvar.c, fork-child.c: Update.
	* frame-unwind.c, frame.c, frv-linux-tdep.c, frv-tdep.c: Update.
	* gdb_assert.h, gdbarch.c, gdbtypes.c, gnu-nat.c: Update.
	* go32-nat.c, hppa-tdep.c, hppabsd-nat.c, hpread.c: Update.
	* i386-linux-nat.c, i386-nat.c, i386-tdep.c, i386bsd-nat.c: Update.
	* i386fbsd-nat.c, inf-ptrace.c, inf-ttrace.c, infcall.c: Update.
	* infcmd.c, inflow.c, infptrace.c, infrun.c, inftarg.c: Update.
	* interps.c, language.c, linespec.c, linux-nat.c: Update.
	* m32r-linux-nat.c, m68k-tdep.c, m68kbsd-nat.c: Update.
	* m68klinux-nat.c, m88kbsd-nat.c, macroexp.c, macroscope.c: Update.
	* macrotab.c, maint.c, mdebugread.c, memattr.c: Update.
	* mips-linux-tdep.c, mips-tdep.c, mips64obsd-nat.c: Update.
	* mipsnbsd-nat.c, mn10300-tdep.c, monitor.c, nto-procfs.c: Update.
	* objc-lang.c, objfiles.c, objfiles.h, ocd.c, osabi.c: Update.
	* parse.c, ppc-bdm.c, ppc-linux-nat.c, ppc-sysv-tdep.c: Update.
	* ppcnbsd-nat.c, ppcobsd-nat.c, printcmd.c, procfs.c: Update.
	* regcache.c, reggroups.c, remote-e7000.c, remote-mips.c: Update.
	* remote-rdp.c, remote-sds.c, remote-sim.c, remote-st.c: Update.
	* remote-utils.c, remote.c, rs6000-nat.c, rs6000-tdep.c: Update.
	* s390-nat.c, s390-tdep.c, sentinel-frame.c, serial.c: Update.
	* sh-tdep.c, sh3-rom.c, sh64-tdep.c, shnbsd-nat.c: Update.
	* solib-aix5.c, solib-svr4.c, solib.c, source.c: Update.
	* sparc-nat.c, stabsread.c, stack.c, symfile.c, symtab.c: Update.
	* symtab.h, target.c, tracepoint.c, ui-file.c, ui-out.c: Update.
	* utils.c, valops.c, valprint.c, vax-nat.c, vaxbsd-nat.c: Update.
	* win32-nat.c, xcoffread.c, xstormy16-tdep.c: Update.
	* cli/cli-cmds.c, cli/cli-logging.c, cli/cli-script.c: Update.
	* cli/cli-setshow.c, mi/mi-cmd-break.c, mi/mi-cmds.c: Update.
	* mi/mi-console.c, mi/mi-getopt.c, mi/mi-out.c: Update.
	* tui/tui-file.c, tui/tui-interp.c: Update.
@
text
@d1133 1
a1133 1
	printf_filtered ("\n\032\032pre-query\n");
d1138 1
a1138 1
      printf_filtered ("(y or n) ");
d1141 1
a1141 1
	printf_filtered ("\n\032\032query\n");
d1174 1
a1174 1
      printf_filtered ("Please answer y or n.\n");
d1178 1
a1178 1
    printf_filtered ("\n\032\032post-query\n");
d1235 1
a1235 1
	printf_filtered ("\n\032\032pre-query\n");
d1238 1
a1238 1
      printf_filtered ("(%s or %s) ", y_string, n_string);
d1241 1
a1241 1
	printf_filtered ("\n\032\032query\n");
d1280 1
a1280 1
      printf_filtered ("Please answer %s or %s.\n",
d1285 1
a1285 1
    printf_filtered ("\n\032\032post-query\n");
d1669 1
a1669 1
    printf_unfiltered ("\n\032\032pre-prompt-for-continue\n");
d1695 1
a1695 1
    printf_unfiltered ("\n\032\032post-prompt-for-continue\n");
@


1.150
log
@2005-02-10  Andrew Cagney  <cagney@@gnu.org>

	Mark up all error and warning messages.
	* ada-lang.c, amd64-tdep.c, arch-utils.c, breakpoint.c: Update.
	* bsd-kvm.c, bsd-uthread.c, coff-solib.h, coffread.c: Update.
	* core-aout.c, core-regset.c, corefile.c, corelow.c: Update.
	* cp-abi.c, cp-support.c, cp-valprint.c, cris-tdep.c: Update.
	* dbxread.c, demangle.c, doublest.c, dsrec.c: Update.
	* dve3900-rom.c, dwarf2expr.c, dwarf2loc.c: Update.
	* dwarf2read.c, dwarfread.c, elfread.c, eval.c: Update.
	* event-top.c, exec.c, expprint.c, f-lang.c: Update.
	* f-typeprint.c, f-valprint.c, fbsd-nat.c, findvar.c: Update.
	* frame.c, frv-linux-tdep.c, gcore.c, gdbtypes.c: Update.
	* gnu-nat.c, gnu-v2-abi.c, gnu-v3-abi.c, go32-nat.c: Update.
	* hpacc-abi.c, hppa-hpux-nat.c, hppa-hpux-tdep.c: Update.
	* hppa-linux-nat.c, hppa-linux-tdep.c, hppa-tdep.c: Update.
	* hpread.c, hpux-thread.c, i386-linux-nat.c: Update.
	* i386-linux-tdep.c, i386-tdep.c, i386bsd-nat.c: Update.
	* i386gnu-nat.c, i387-tdep.c, ia64-linux-nat.c: Update.
	* ia64-tdep.c, inf-child.c, inf-ptrace.c, inf-ttrace.c: Update.
	* infcall.c, infcmd.c, inflow.c, infptrace.c, infrun.c: Update.
	* inftarg.c, interps.c, irix5-nat.c, jv-lang.c: Update.
	* kod-cisco.c, kod.c, language.c, libunwind-frame.c: Update.
	* linespec.c, linux-nat.c, linux-thread-db.c, m2-lang.c: Update.
	* m32r-rom.c, m68hc11-tdep.c, m68k-tdep.c: Update.
	* m68klinux-nat.c, macrocmd.c, macroexp.c, main.c: Update.
	* maint.c, mdebugread.c, mem-break.c, memattr.c: Update.
	* mips-linux-tdep.c, mips-tdep.c, mipsread.c, monitor.c: Update.
	* nlmread.c, nto-procfs.c, objc-lang.c, objfiles.c: Update.
	* observer.c, ocd.c, p-lang.c, p-typeprint.c: Update.
	* p-valprint.c, pa64solib.c, parse.c, ppc-linux-tdep.c: Update.
	* ppcnbsd-tdep.c, printcmd.c, procfs.c, remote-e7000.c: Update.
	* remote-fileio.c, remote-m32r-sdi.c, remote-rdi.c: Update.
	* remote-rdp.c, remote-sim.c, remote-st.c: Update.
	* remote-utils.c, remote-utils.h, remote.c: Update.
	* rom68k-rom.c, rs6000-nat.c, s390-tdep.c, scm-lang.c: Update.
	* ser-e7kpc.c, ser-tcp.c, ser-unix.c, sh-tdep.c: Update.
	* sh3-rom.c, shnbsd-tdep.c, sol-thread.c, solib-aix5.c: Update.
	* solib-frv.c, solib-irix.c, solib-osf.c, solib-pa64.c: Update.
	* solib-som.c, solib-sunos.c, solib-svr4.c, solib.c: Update.
	* somread.c, somsolib.c, source.c, stabsread.c: Update.
	* stack.c, std-regs.c, symfile-mem.c, symfile.c: Update.
	* symmisc.c, symtab.c, target.c, thread.c, top.c: Update.
	* tracepoint.c, trad-frame.c, typeprint.c, utils.c: Update.
	* uw-thread.c, valarith.c, valops.c, valprint.c: Update.
	* value.c, varobj.c, version.in, win32-nat.c, wince.c: Update.
	* xcoffread.c, xcoffsolib.c, cli/cli-cmds.c: Update.
	* cli/cli-decode.c, cli/cli-dump.c, cli/cli-logging.c: Update.
	* cli/cli-script.c, cli/cli-setshow.c, mi/mi-cmd-break.c: Update.
	* mi/mi-cmd-disas.c, mi/mi-cmd-env.c, mi/mi-cmd-file.c: Update.
	* mi/mi-cmd-stack.c, mi/mi-cmd-var.c, mi/mi-getopt.c: Update.
	* mi/mi-symbol-cmds.c, tui/tui-layout.c, tui/tui-stack.c: Update.
	* tui/tui-win.c: Update.
@
text
@d414 1
a414 1
		    "free_current_contents: NULL pointer");
d719 1
a719 1
      quit_p = query ("%s\nQuit this debugging session? ", reason);
d728 1
a728 1
      internal_error (__FILE__, __LINE__, "bad switch");
d737 1
a737 1
      dump_core_p = query ("%s\nCreate a core file of GDB? ", reason);
d747 1
a747 1
      internal_error (__FILE__, __LINE__, "bad switch");
d915 1
a915 1
		      "virtual memory exhausted: can't allocate %ld bytes.",
d920 1
a920 1
      internal_error (__FILE__, __LINE__, "virtual memory exhausted.");
d1045 1
a1045 1
		    "vasprintf call failed (errno %d)", errno);
d1750 1
a1750 1
    internal_error (__FILE__, __LINE__, "failed internal consistency check");
d2563 1
a2563 1
		      "failed internal consistency check");
d2600 1
a2600 1
		      "failed internal consistency check");
d2710 1
a2710 1
		    "hex_string_custom: insufficient space to store result");
d2762 1
a2762 1
		      "failed internal consistency check");
d2801 1
a2801 1
	    internal_error (__FILE__, __LINE__, "invalid hex");
d2813 1
a2813 1
	    internal_error (__FILE__, __LINE__, "invalid decimal");
@


1.149
log
@2005-02-03  Andrew Cagney  <cagney@@gnu.org>

	* utils.c (xzalloc): New function.
	* defs.h (XZALLOC): Use xzalloc.
	(xzalloc): Declare.
	* value.c (allocate_value): Allocate a zeroed buffer.
	* mdebugread.c (xzalloc): Delete.
@
text
@d645 1
a645 1
  error ("%s", message);
d849 1
a849 1
  error ("%s.", combined);
d1335 1
a1335 1
  error ("There is no control character `\\%s' in the `%s' character set.",
d1383 2
a1384 2
		error ("There is no character corresponding to `Delete' "
		       "in the target character set `%s'.", host_charset ());
@


1.148
log
@* configure.ac: Use AC_CHECK_DECLS instead of gcc_AC_CHECK_DECLS
and BFD_NEED_DECLARATION.  Don't check if a declaration of strdup
is necessary.
* configure, config.in: Regenerate.
* utils.c: Adjust for usage of AC_CHECK_DECLS instead of
BFD_NEED_DECLARATION.  Never provide a prototype for
caninicalize_file_name.
* gdb_string.h: Adjust for usage of AC_CHECK_DECLS instead of
BFD_NEED_DECLARATION.
@
text
@d950 6
@


1.147
log
@2005-01-19  Andrew Cagney  <cagney@@gnu.org>

	* utils.c (quit): Simplify, call fatal.
	* exceptions.c: Include "serial.h"
	(print_flush): Mimic flush code found in utils.c:quit.
	* Makefile.in: Update dependencies.
@
text
@d65 1
a65 1
#ifdef NEED_DECLARATION_MALLOC
d68 1
a68 1
#ifdef NEED_DECLARATION_REALLOC
d71 1
a71 1
#ifdef NEED_DECLARATION_FREE
a73 5
/* Actually, we'll never have the decl, since we don't define _GNU_SOURCE.  */
#if defined(HAVE_CANONICALIZE_FILE_NAME) \
    && defined(NEED_DECLARATION_CANONICALIZE_FILE_NAME)
extern char *canonicalize_file_name (const char *);
#endif
@


1.146
log
@2005-01-19  Andrew Cagney  <cagney@@gnu.org>

	* exceptions.h (deprecated_throw_reason): Rename throw_reason.
	* exceptions.c (deprecated_throw_reason): Rename throw_reason.
	* utils.c (internal_verror, quit): Update.
	* remote-sds.c (interrupt_query): Update.
	* remote-mips.c (mips_error, mips_kill): Update.
	* remote-fileio.c (remote_fileio_ctrl_c_signal_handler): Update.
	* remote.c (interrupt_query): Update.
	* ocd.c (interrupt_query): Update.
	* nto-procfs.c (interrupt_query): Update.
	* monitor.c (monitor_interrupt_query): Update.
	* breakpoint.c (break_command_1): Update.
@
text
@a882 26
  struct serial *gdb_stdout_serial = serial_fdopen (1);

  target_terminal_ours ();

  /* We want all output to appear now, before we print "Quit".  We
     have 3 levels of buffering we have to flush (it's possible that
     some of these should be changed to flush the lower-level ones
     too):  */

  /* 1.  The _filtered buffer.  */
  wrap_here ((char *) 0);

  /* 2.  The stdio buffer.  */
  gdb_flush (gdb_stdout);
  gdb_flush (gdb_stderr);

  /* 3.  The system-level buffer.  */
  serial_drain_output (gdb_stdout_serial);
  serial_un_fdopen (gdb_stdout_serial);

  annotate_error_begin ();

  /* Don't use *_filtered; we don't want to prompt the user to continue.  */
  if (quit_pre_print)
    fputs_unfiltered (quit_pre_print, gdb_stderr);

d886 1
a886 1
  fprintf_unfiltered (gdb_stderr, "Quit\n");
d892 1
a892 1
    fprintf_unfiltered (gdb_stderr, "Quit\n");
d894 1
a894 2
    fprintf_unfiltered (gdb_stderr,
			"Quit (expect signal SIGINT when the program is resumed)\n");
a895 1
  deprecated_throw_reason (RETURN_QUIT);
@


1.145
log
@2005-01-14  Andrew Cagney  <cagney@@gnu.org>

	* utils.c (error_output_message): Delete function.
	* defs.h (error_output_message): Delete declaration.
@
text
@d782 1
a782 1
  throw_reason (RETURN_ERROR);
d923 1
a923 1
  throw_reason (RETURN_QUIT);
@


1.144
log
@2005-01-14  Andrew Cagney  <cagney@@gnu.org>

	* linespec.c (symtab_from_filename, decode_variable): Use
	throw_error instead of error_silent.
	* breakpoint.c (do_captured_parse_breakpoint): Change return type
	to void.
	(break_command_1): Use catch_exception and check the error return
	status.
	* exceptions.c (throw_error): New function.
	(throw_vsilent): Delete function.
	* exceptions.h (throw_error): Declare.
	(throw_vsilent): Delete declaration.
	* utils.c (error_silent): Delete function.
	* defs.h (error_silent): Delete declaration.
@
text
@a643 14
/* Output an error message including any pre-print text to gdb_stderr.  */
void
error_output_message (char *pre_print, char *msg)
{
  target_terminal_ours ();
  wrap_here ("");		/* Force out any buffered output */
  gdb_flush (gdb_stdout);
  annotate_error_begin ();
  if (pre_print)
    fputs_filtered (pre_print, gdb_stderr);
  fputs_filtered (msg, gdb_stderr);
  fprintf_filtered (gdb_stderr, "\n");
}

@


1.143
log
@2005-01-13  Michael Snyder  <msnyder@@redhat.com>

	* utils.c: Whitespace tweaks.
@
text
@d4 2
a5 2
   1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004 Free Software
   Foundation, Inc.
a643 11
/* Cause a silent error to occur.  Any error message is recorded
   though it is not issued.  */
NORETURN void
error_silent (const char *string, ...)
{
  va_list args;
  va_start (args, string);
  throw_vsilent (string, args);
  va_end (args);
}

@


1.142
log
@2005-01-13  Andrew Cagney  <cagney@@gnu.org>

	* defs.h (error_last_message, error_init): Delete declaration.
	* utils.c (fatal, vfatal): Call throw_vfatal.
	(error, verror): Call throw_verror;
	(do_write, error_stream_1): Delete function.
	(error_stream): Simplify, call error.
	(error_last_message, error_init, gdb_lasterr): Delete.
	(error_silent): Simplify, call throw_vsilent.
	* mi/mi-interp.c (mi_cmd_interpreter_exec): Dup the message.
	* main.c (captured_main): Delete call to error_init.
	* exceptions.c (throw_verror, throw_verror)
	(throw_vsilent): New functions.
	(do_write, print_and_throw): New functions.
	(last_message): New global.
	(throw_reason): Replace error_last_message with last_message.
	(catch_exceptions_with_msg): Dup the message.
	* exceptions.h (throw_verror, throw_vfatal, throw_vsilent):
	Declare.
@
text
@d462 1
a462 1
   global beginning of list as our iteration pointer.*/
d476 1
a476 1
  /* Work now on the list we have set aside. */
d502 2
a503 1
   intermediate_continuation. The new continuation will be added at the front.*/
d540 1
a540 1
  /* Work now on the list we have set aside. */
@


1.141
log
@2005-01-12  Andrew Cagney  <cagney@@gnu.org>

	* exceptions.h (throw_reason): Rename throw_exception.
	(enum errors, struct exception): Define.
	(catch_exception_ftype): Define.
	(catch_exception, throw_exception): Declare.
	* exceptions.c (throw_exception): Rewrite.
	(throw_reason): New function.
	(struct catcher, catcher_state_machine): Replace "reason" with
	"exception", delete "gdberrmsg".
	(catch_exception): New function.
	(catcher_init): Replace "gdberrmsg" parameter with "exception".
	(catch_errors, catch_exceptions_with_msg): Re-implement passing
	exception to catcher_init.
	* utils.c (error_silent, error_stream_1): Use throw_reason.
	(internal_verror, quit): Ditto.
	* breakpoint.c (insert_catchpoint, break_command_1): Ditto.
	* remote-fileio.c (remote_fileio_ctrl_c_signal_handler): Ditto.
	* remote.c (remote_open_1, interrupt_query): Ditto.
@
text
@a84 4
/* Holds the last error message issued by gdb */

static struct ui_file *gdb_lasterr;

a98 3
static NORETURN void error_stream_1 (struct ui_file *stream, 
				     enum return_reason reason) ATTR_NORETURN;

d612 1
a612 4
  struct ui_file *tmp_stream = mem_fileopen ();
  make_cleanup_ui_file_delete (tmp_stream);
  vfprintf_unfiltered (tmp_stream, string, args);
  error_stream_1 (tmp_stream, RETURN_ERROR);
d620 1
a620 1
  verror (string, args);
d631 1
a631 4
  struct ui_file *tmp_stream = mem_fileopen ();
  make_cleanup_ui_file_delete (tmp_stream);
  vfprintf_unfiltered (tmp_stream, string, args);
  error_stream_1 (tmp_stream, RETURN_QUIT);
d639 1
a639 1
  vfatal (string, args);
a642 6
static void
do_write (void *data, const char *buffer, long length_buffer)
{
  ui_file_write (data, buffer, length_buffer);
}

a648 1
  struct ui_file *tmp_stream = mem_fileopen ();
d650 1
a650 5
  make_cleanup_ui_file_delete (tmp_stream);
  vfprintf_unfiltered (tmp_stream, string, args);
  /* Copy the stream into the GDB_LASTERR buffer.  */
  ui_file_rewind (gdb_lasterr);
  ui_file_put (tmp_stream, do_write, gdb_lasterr);
a651 2

  throw_reason (RETURN_ERROR);
a667 23
static NORETURN void
error_stream_1 (struct ui_file *stream, enum return_reason reason)
{
  if (deprecated_error_begin_hook)
    deprecated_error_begin_hook ();

  /* Copy the stream into the GDB_LASTERR buffer.  */
  ui_file_rewind (gdb_lasterr);
  ui_file_put (stream, do_write, gdb_lasterr);

  /* Write the message plus any error_pre_print to gdb_stderr.  */
  target_terminal_ours ();
  wrap_here ("");		/* Force out any buffered output */
  gdb_flush (gdb_stdout);
  annotate_error_begin ();
  if (error_pre_print)
    fputs_filtered (error_pre_print, gdb_stderr);
  ui_file_put (stream, do_write, gdb_stderr);
  fprintf_filtered (gdb_stderr, "\n");

  throw_reason (reason);
}

a670 8
  error_stream_1 (stream, RETURN_ERROR);
}

/* Get the last error message issued by gdb */

char *
error_last_message (void)
{
d672 3
a674 9
  return ui_file_xstrdup (gdb_lasterr, &len);
}

/* This is to be called by main() at the very beginning */

void
error_init (void)
{
  gdb_lasterr = mem_fileopen ();
@


1.140
log
@2005-01-12  Andrew Cagney  <cagney@@gnu.org>

	* exceptions.h (enum return_reason, RETURN_MASK)
	(RETURN_MASK_QUIT, RETURN_MASK_ERROR, RETURN_MASK_ALL)
	(return_mask, throw_exception, catch_exceptions_ftype)
	(catch_exceptions_with_msg, catch_errors_ftype, catch_errors)
	(catch_command_errors_ftype, catch_command_errors): Move to
	exceptions.h.
	* exceptions.c, exceptions.h: New files.
	* top.c: Do not include <setjmp.h>.
	(SIGJMP_BUF, SIGSETJMP, SIGLONGJMP, catch_return)
	(throw_exception, catcher, catch_exceptions)
	(catch_exceptions_with_msg, struct catch_errors_args)
	(do_catch_errors, catch_errors, struct captured_command_args)
	(do_captured_command, catch_command_errors): Move to exceptions.c.
	* wrapper.c, wince.c, win32-nat.c, utils.c: Include "exceptions.h".
	* tui/tui-interp.c, top.c, thread.c, symmisc.c: Ditto.
	* symfile-mem.c, stack.c, solib.c, rs6000-nat.c: Ditto.
	* remote-sds.c, remote-mips.c, remote-fileio.c: Ditto.
	* remote-e7000.c, objc-lang.c, ocd.c: Ditto.
	* remote.c, nto-procfs.c, monitor.c, mi/mi-main.c: Ditto.
	* main.c, m32r-rom.c, infrun.c, inf-loop.c: Ditto.
	* hppa-hpux-tdep.c, frame.c, event-top.c, event-loop.c: Ditto.
	* corelow.c, corefile.c, cli/cli-interp.c, breakpoint.c: Ditto.
	* ada-valprint.c, ada-lang.c: Ditto.
	* Makefile.in (HFILES_NO_SRCDIR, COMMON_OBS): Add exceptions.h and
	exceptions.o.  Update all dependencies.
@
text
@d677 1
a677 1
  throw_exception (RETURN_ERROR);
d714 1
a714 1
  throw_exception (reason);
d869 1
a869 1
  throw_exception (RETURN_ERROR);
d1010 1
a1010 1
  throw_exception (RETURN_QUIT);
@


1.139
log
@	* configure.in: Check for ncurses/term.h.
	* gdb_curses.h: Include term.h here, prefering ncurses/term.h.
	* utils.c: Include gdb_curses.h instead of curses.h and term.h.
	* tui/tui.c: Don't include term.h.
	* configure, config.in: Rebuilt.
@
text
@d29 1
@


1.138
log
@
2004-11-05  Jeff Johnston  <jjohnstn@@redhat.com>

        * defs.h (fatal, vfatal): New function prototypes.
        * stack.c (backtrace_command_stub): Stub to call backtrace_command_1
        via catch_errors.
        (backtrace_command): Change to call backtrace_command_stub via
        catch_errors instead of calling backtrace_command_1 directly.
        (backtrace_full_command): Ditto.
        * utils.c (error_stream_1): New static function.
        (verror): Change to call error_stream_1 instead of error_stream.
        (error_stream): Call error_stream_1 with RETURN_ERROR argument.
        (vfatal, fatal): New functions.
@
text
@d60 1
a60 6
#ifdef HAVE_CURSES_H
#include <curses.h>
#endif
#ifdef HAVE_TERM_H
#include <term.h>
#endif
@


1.137
log
@* defs.h (msavestring, mstrsave): Remove prototypes.
* utils.c (msavestring, mstrsave): Remove functions.
* objfiles.c (allocate_objfile): Use xstrdup instead of mstrsave.
* solib-sunos.c (allocate_rt_common_objfile): Use xstrdup instead
of mstrsave.
* source.c (find_and_open_source): Use xstrdup instead of
mstrsave.
@
text
@d107 3
d626 1
a626 1
  error_stream (tmp_stream);
d638 22
d698 2
a699 2
NORETURN void
error_stream (struct ui_file *stream)
d718 7
a724 1
  throw_exception (RETURN_ERROR);
@


1.136
log
@2004-09-13  Andrew Cagney  <cagney@@gnu.org>

	Eliminate event_loop_p, always has the value 1.
	* defs.h (event_loop_p): Delete macro.
	* breakpoint.c (until_break_command): Simplify.
	* utils.c (prompt_for_continue): Simplify.
	* tracepoint.c (read_actions): Simplify.
	* top.c (throw_exception, execute_command, gdb_readline_wrapper)
	(gdb_rl_operate_and_get_next, command_line_input, get_prompt)
	(set_prompt, init_main): Simplify.
	(init_signals, disconnect): Delete, unused.
	* remote.c (remote_async_resume)
	(extended_remote_async_create_inferior): Simplify.
	* mi/mi-interp.c (mi_input): Delete, unused.
	(mi_interpreter_resume, mi_command_loop): Simplify.
	* interps.c (current_interp_command_loop): Simplify.
	* infrun.c (proceed): Simplify.
	* infcmd.c (run_command, continue_command, step_1, jump_command)
	(until_command, advance_command, finish_command)
	(interrupt_target_command): Simplify.
	* event-top.c (gdb_setup_readline, gdb_disable_readline): Simplify.
@
text
@a1170 15
char *
msavestring (void *md, const char *ptr, size_t size)
{
  char *p = (char *) xmalloc (size + 1);
  memcpy (p, ptr, size);
  p[size] = 0;
  return p;
}

char *
mstrsave (void *md, const char *ptr)
{
  return (msavestring (md, ptr, strlen (ptr)));
}

@


1.135
log
@2004-09-11  Andrew Cagney  <cagney@@gnu.org>

	* language.c (hex_string, hex_string_custom): Move from here ...
	* utils.c (hex_string, hex_string_custom): ... to here, rewrite.
	(CELLSIZE): Increase to 50.
	* language.h (hex_string, hex_string_custom): Move from here ...
	* defs.h: ... to here.
	* Makefile.in: Update all dependencies.
@
text
@d1805 1
a1805 6
	{
	  if (!event_loop_p)
	    request_quit (SIGINT);
	  else
	    async_request_quit (0);
	}
@


1.134
log
@* language.c (local_hex_format_custom): Remove.
(local_hex_string): Rename to hex_string, use C format, and move to
utils.c
(local_hex_string_custom): Rename to hex_string_custom and change
interface.  Now uses C format.  Move to utils.c
(local_octal_format_custom): Remove.
(local_decimal_format_custom): Remove.
(unknown_language_defn): Remove language-specific number
formatting entries.
(auto_language_defn): Ditto.
(local_language_defn): Ditto.
* language.h (struct language_format_info): Delete declaration.
(struct language_defn): Remove language_format_info fields
la_binary_format, la_octal_format, la_decimal_format, la_hex_format.
(local_binary_format): Remove macro.
(local_binary_format_prefix): Remove macro.
(local_binary_format_specifier): Remove macro.
(local_binary_format_suffix): Remove macro.
(local_octal_format): Remove macro.
(local_octal_format_prefix): Remove macro.
(local_octal_format_specifier): Remove macro.
(local_octal_format_suffix): Remove macro.
(local_decimal_format): Remove macro.
(local_decimal_format_prefix): Remove macro.
(local_decimal_format_specifier): Remove macro.
(local_decimal_format_suffix): Remove macro.
(local_hex_format): Remove macro.
(local_hex_format_prefix): Remove macro.
(local_hex_format_specifier): Remove macro.
(local_hex_format_suffix): Remove macro.
(local_decimal_format_custom): Remove.
(local_octal_format_custom): Remove.
(local_hex_format_custom): Remove.
(local_hex_string): Rename to hex_string and move to defs.h.
(local_hex_string_custom): Rename to hex_string_custom, change
interface, and move to defs.h.
* utils.c: (int_string): New function.
(hex_string): New function (from language.c).
(hex_string_custom): New function (from language.c).
(octal2str): New function.
(decimal2str): Add width parameter.
(paddr_u): Use new decimal2str interface.
(paddr_d): Ditto.
* defs.h (hex_string): Declare.
(hex_string_custom): Declare.
(int_string): Declare.
* printcmd.c (print_scalar_formatted): Remove localized binary
formatting.
* valprint.c (print_longest): Use int_string.
(print_floating): Use C hex format.
(print_hex_chars): Ditto.
(print_binary_chars): Remove language-specific formatting.
(print_octal_chars): Use C octal format.
(print_decimal_chars): Delocalize format.
(print_decimal): Remove.
* ada-lang.c (ada_language_defn): Remove language-specific number
formatting entries.
* p-lang.c (pascal_language_defn): Ditto.
* c-lang.c (c_language_defn): Ditto.
(cplus_language_defn): Ditto.
(asm_language_defn): Ditto.
(minimal_language_defn): Ditto.
* f-lang.c (f_language_defn): Ditto.
* jv-lang.c (java_language_defn): Ditto.
* m2-lang.c (m2_language_defn): Ditto.
* scm-lang.c (scm_language_defn): Ditto.
* objc-lang.c (objc_language_defn): Ditto.
* memattr.c (mem_info_command): Use renamed hex_string_custom with
new interface.
* pa64solib.c (pa64_sharedlibrary_info_command): Ditto.
* ui-out.c (ui_out_field_core_addr): Ditto.
* breakpoint.c (breakpoint_adjustment_warning): Ditto.
* exec.c (print_section_info): Ditto.
* i387-tdep.c (print_i387_status_word): Ditto.
(print_i387_control_word): Ditto.
(i387_print_float_info): Ditto.
* maint.c (maint_print_section_info): Ditto.
* solib.c (info_sharedlibrary_command): Ditto.
* somsolib.c (som_sharedlibrary_info_command): Ditto.
* symtab.c (print_msymbol_info): Ditto.
* tracepoint.c (tracepoints_info): Ditto.
* solib-frv.c (lm_base): Ditto.
(frv_current_sos): Ditto.
(enable_break2): Ditto.
(enable_break): Ditto.
* dbxread.c (read_dbx_symtab): Use renamed hex_string.
(process_one_symbol): Ditto.
* infcmd.c (program_info): Ditto.
* mdebugread.c (parse_partial_symbols): Ditto.
* symfile.c (add_symbol_file_command): Ditto.
* cli/cli-cmds.c (edit_command): Ditto.
(list_command): Ditto.
* infcall.c (call_function_by_hand): Ditto.
* remote-vx.c (vx_run_files_info): Ditto.
(vx_wait): Ditto.
(vx_attach): Ditto.
(vx_detach): Ditto.
(vx_kill): Ditto.
* aix-thread.c (pdc_symbol_addrs): Ditto.
(pdc_read_regs): Ditto.
(pdc_write_regs): Ditto.
(pdc_read_data): Ditto.
(pdc_write_data): Ditto.
* d10v-tdep.c (display_trace): Ditto.
* rs6000-nat.c (find_toc_address): Ditto.
* aix-thread.c: Don't include language.h.
* buildsym.c: Ditto.
* dbxread.c: Ditto.
* mdebugread.c: Ditto.
* rs6000-nat.c: Ditto.
* buildsym.c (make_blockvector): Use renamed hex_string.
@
text
@d2609 1
a2609 1
#define CELLSIZE 32
d2791 33
@


1.133
log
@Fix bug reported and analyzed by Olivier Crete:
* symfile.c (copy_section_addr_info): New function.
(symbol_file_add_with_addrs_or_offsets): Use it to save the
original set of address arguments, instead of handwritten code
that uses one length to allocate and a different length to
initialize.  Use make_cleanup_free_section_addr_info.
* symfile.h (copy_section_addr_info): New declaration.
* utils.c: #include "symfile.h".
(do_free_section_addr_info, make_cleanup_free_section_addr_info):
New functions.
* defs.h (make_cleanup_free_section_addr_info): New declaration.
* Makefile.in (utils.o): Update dependencies.
@
text
@d2639 1
a2639 1
decimal2str (char *paddr_str, char *sign, ULONGEST addr)
d2650 1
d2653 3
d2659 1
a2659 1
      sprintf (paddr_str, "%s%lu", sign, temp[0]);
d2662 1
a2662 1
      sprintf (paddr_str, "%s%lu%09lu", sign, temp[1], temp[0]);
d2665 39
a2703 1
      sprintf (paddr_str, "%s%lu%09lu%09lu", sign, temp[2], temp[1], temp[0]);
d2715 1
a2715 1
  decimal2str (paddr_str, "", addr);
d2724 1
a2724 1
    decimal2str (paddr_str, "-", -addr);
d2726 1
a2726 1
    decimal2str (paddr_str, "", addr);
d2792 48
@


1.132
log
@2004-09-07  Andrew Cagney  <cagney@@gnu.org>

	* vx-share/wait.h: Delete #ifdef USG.
	* utils.c (request_quit): Ditto.
	* tui/tui.c (tui_reset): Ditto.
	* remote.c: Ditto.
	* remote-sds.c: Ditto.
	* remote-rdi.c: Ditto.
	* mdebugread.c: Ditto.
	* m68klinux-nat.c: Ditto.
	* infttrace.c: Ditto.
	* infptrace.c: Ditto.
	* i386v-nat.c: Ditto.
	* exec.c: Ditto.
	* dbxread.c: Ditto.
	* core-aout.c: Ditto.
@
text
@d54 1
d264 13
@


1.131
log
@2004-08-10  Andrew Cagney  <cagney@@gnu.org>

	* main.c (captured_main): Delete call to init_malloc.
	* defs.h (init_malloc): Delete declaration.
	* utils.c (mmalloc, mrealloc, mcalloc, mfree)
	(init_malloc): Delete functions.

Index: testsuite/ChangeLog
2004-08-10  Andrew Cagney  <cagney@@gnu.org>

	* gdb.gdb/selftest.exp (do_steps_and_nexts): Remove code to skip
	init_malloc call.
@
text
@d977 2
a978 3
  /* Restore the signal handler.  Harmless with BSD-style signals, needed
     for System V-style signals.  So just always do it, rather than worrying
     about USG defines and stuff like that.  */
@


1.130
log
@2004-08-10  Andrew Cagney  <cagney@@gnu.org>

	* defs.h (xmfree): Delete.
	* utils.c (xmfree): Delete function.
	(xfree): Inline calls to xmfree and mfree.
	* symmisc.c (free_symtab_block, free_symtab): Use xfree.
	* symfile.c (reread_symbols, init_psymbol_list): Ditto.
	* source.c (forget_cached_source_info, find_and_open_source): Ditto.
	* somread.c (som_symfile_finish): Ditto.
	* objfiles.c (allocate_objfile, free_objfile):
	* nlmread.c (nlm_symfile_finish): Ditto.
	* hpread.c (hpread_symfile_finish): Ditto.
	* elfread.c (free_elfinfo, elf_symfile_finish): Ditto.
	* dbxread.c (dbx_symfile_finish, free_bincl_list): Ditto.
	* coffread.c (coff_symfile_finish): Ditto.
@
text
@a985 36
/* Memory management stuff (malloc friends).  */

static void *
mmalloc (void *md, size_t size)
{
  return malloc (size);		/* NOTE: GDB's only call to malloc() */
}

static void *
mrealloc (void *md, void *ptr, size_t size)
{
  if (ptr == 0)			/* Guard against old realloc's */
    return mmalloc (md, size);
  else
    return realloc (ptr, size);	/* NOTE: GDB's only call to ralloc() */
}

static void *
mcalloc (void *md, size_t number, size_t size)
{
  return calloc (number, size);	/* NOTE: GDB's only call to calloc() */
}

static void
mfree (void *md, void *ptr)
{
  free (ptr);			/* NOTE: GDB's only call to free() */
}

/* This used to do something interesting with USE_MMALLOC.
 * It can be retired any time.  -- chastain 2004-01-19.  */
void
init_malloc (void *md)
{
}

@


1.129
log
@2004-08-10  Andrew Cagney  <cagney@@gnu.org>

	* defs.h (xmcalloc): Delete declaration.
	* utils.c (xmcalloc): Delete.
	(xcalloc): Inline calls to xmcalloc and mcalloc.
	* ada-lang.c (_initialize_ada_language): Use htab_create_alloc,
	xcalloc and xfree.
	* symtab.c (create_demangled_names_hash): Ditto.
@
text
@a1039 7
void
xmfree (void *md, void *ptr)
{
  if (ptr != NULL)
    mfree (md, ptr);
}

d1109 2
a1110 1
  xmfree (NULL, ptr);
@


1.128
log
@2004-08-10  Andrew Cagney  <cagney@@gnu.org>

	* defs.h (xmrealloc): Delete.
	* utils.c (xmrealloc): Delete.
	(xrealloc): Inline calls to xmrealloc, mmalloc and mrealloc.
	* symmisc.c (extend_psymbol_list): Use xrealloc.
	* source.c (find_source_lines): Ditto.
	* hpread.c (hpread_lookup_type): Ditto.
	* dbxread.c (add_bincl_to_list): Ditto.
@
text
@a1039 20
void *
xmcalloc (void *md, size_t number, size_t size)
{
  void *mem;

  /* See libiberty/xmalloc.c.  This function need's to match that's
     semantics.  It never returns NULL.  */
  if (number == 0 || size == 0)
    {
      number = 1;
      size = 1;
    }

  mem = mcalloc (md, number, size);
  if (mem == NULL)
    nomem (number * size);

  return mem;
}

d1096 15
a1110 1
  return xmcalloc (NULL, number, size);
@


1.127
log
@2004-08-10  Andrew Cagney  <cagney@@gnu.org>

	* utils.c (xmmalloc): Delete.
	(xmalloc): Inline xmmalloc and mmalloc calls.
	(msavestring): Use xmalloc.
	* defs.h (xmmalloc): Delete declaration.
	* xcoffread.c (xcoff_symfile_init): Use xmalloc instead of
	xmmalloc.
	* symmisc.c (extend_psymbol_list): Ditto.
	* symfile.c (init_psymbol_list): Ditto.
	* source.c (find_source_lines): Ditto.
	* hpread.c (hpread_symfile_init, hpread_lookup_type): Ditto.
	* elfread.c (elf_symtab_read): Ditto.
	* dbxread.c (dbx_symfile_init, init_bincl_list): Ditto.
	* coffread.c (coff_symfile_init): Ditto.
@
text
@a1040 20
xmrealloc (void *md, void *ptr, size_t size)
{
  void *val;

  /* See libiberty/xmalloc.c.  This function need's to match that's
     semantics.  It never returns NULL.  */
  if (size == 0)
    size = 1;

  if (ptr != NULL)
    val = mrealloc (md, ptr, size);
  else
    val = mmalloc (md, size);
  if (val == NULL)
    nomem (size);

  return (val);
}

void *
d1096 15
a1110 1
  return xmrealloc (NULL, ptr, size);
@


1.126
log
@2004-07-26  Andrew Cagney  <cagney@@gnu.org>

	* cli/cli-decode.c (deprecated_add_show_from_set): Deprecate.
	* xcoffsolib.c (_initialize_xcoffsolib): Update.
	* wince.c (_initialize_wince): Update.
	* win32-nat.c (_initialize_win32_nat): Update.
	* varobj.c (_initialize_varobj): Update.
	* valops.c (_initialize_valops): Update.
	* utils.c (initialize_utils, initialize_utils): Update.
	* tui/tui-win.c (_initialize_tui_win): Update.
	* top.c (init_main): Update.
	* symfile.c (_initialize_symfile): Update.
	* source.c (_initialize_source): Update.
	* somsolib.c (_initialize_som_solib): Update.
	* solib.c (_initialize_solib): Update.
	* solib-frv.c (_initialize_frv_solib): Update.
	* serial.c (_initialize_serial): Update.
	* ser-go32.c (_initialize_ser_dos, _initialize_ser_dos): Update.
	* remote.c (_initialize_remote, _initialize_remote): Update.
	* remote-vx.c (_initialize_vx): Update.
	* remote-utils.c (_initialize_sr_support): Update.
	* remote-sds.c (_initialize_remote_sds): Update.
	* remote-mips.c (_initialize_remote_mips): Update.
	* remote-e7000.c (_initialize_remote_e7000): Update.
	* proc-api.c (_initialize_proc_api): Update.
	* printcmd.c: Update.
	* parse.c (_initialize_parse): Update.
	* pa64solib.c (_initialize_pa64_solib): Update.
	* p-valprint.c (_initialize_pascal_valprint): Update.
	* monitor.c (_initialize_remote_monitors): Update.
	* mips-tdep.c (_initialize_mips_tdep): Update.
	* mcore-tdep.c (_initialize_mcore_tdep): Update.
	* maint.c (_initialize_maint_cmds): Update.
	* lin-lwp.c (_initialize_lin_lwp): Update.
	* language.c (_initialize_language): Update.
	* kod.c (_initialize_kod): Update.
	* infrun.c (set_schedlock_func, _initialize_infrun): Update.
	* i386-tdep.c (_initialize_i386_tdep): Update.
	* gdbtypes.c (build_gdbtypes, _initialize_gdbtypes): Update.
	* gdbarch.sh: Update.
	* gdbarch.c: Re-generate.
	* gdb-events.sh: Update.
	* gdb-events.c: Re-generate.
	* frame.c (_initialize_frame): Update.
	* exec.c: Update.
	* demangle.c (_initialize_demangler): Update.
	* dcache.c (_initialize_dcache): Update.
	* cris-tdep.c (_initialize_cris_tdep, cris_version_update): Update.
	* cp-valprint.c (_initialize_cp_valprint): Update.
	* corefile.c (_initialize_core): Update.
	* command.h: Update.
	* cli/cli-decode.h: Update.
	* cli/cli-cmds.c (init_cli_cmds): Update.
	* charset.c (_initialize_charset): Update.
	* breakpoint.c (_initialize_breakpoint): Update.
	* arm-tdep.c (_initialize_arm_tdep_initialize_arm_tdep): Update.
	* alpha-tdep.c (_initialize_alpha_tdep): Update.
	* aix-thread.c (_initialize_aix_thread): Update.
@
text
@a1039 27
/* The xmmalloc() family of memory management routines.

   These are are like the mmalloc() family except that they implement
   consistent semantics and guard against typical memory management
   problems: if a malloc fails, an internal error is thrown; if
   free(NULL) is called, it is ignored; if *alloc(0) is called, NULL
   is returned.

   All these routines are implemented using the mmalloc() family. */

void *
xmmalloc (void *md, size_t size)
{
  void *val;

  /* See libiberty/xmalloc.c.  This function need's to match that's
     semantics.  It never returns NULL.  */
  if (size == 0)
    size = 1;

  val = mmalloc (md, size);
  if (val == NULL)
    nomem (size);

  return (val);
}

d1091 1
a1091 3
   problems.  See xmmalloc() above for further information.

   All these routines are wrappers to the xmmalloc() family. */
d1099 12
a1110 1
  return xmmalloc (NULL, size);
d1215 1
a1215 1
  char *p = (char *) xmmalloc (md, size + 1);
@


1.125
log
@2004-07-17  Andrew Cagney  <cagney@@gnu.org>

	* utils.c (xvasprintf): Call xstrvprintf.
@
text
@d2618 1
a2618 1
  add_show_from_set (c, &showlist);
d2623 1
a2623 1
  add_show_from_set (c, &showlist);
d2628 1
a2628 1
  add_show_from_set
d2634 1
a2634 1
  add_show_from_set
d2647 1
a2647 1
  add_show_from_set
d2653 1
a2653 1
  add_show_from_set
@


1.124
log
@2004-07-14  Andrew Cagney  <cagney@@gnu.org>

	* utils.c (internal_warning_problem): Fix typo, "internal-warning"
	instead of "internal-error".
@
text
@d1176 1
a1176 11
  int status = vasprintf (ret, format, ap);
  /* NULL could be returned due to a memory allocation problem; a
     badly format string; or something else. */
  if ((*ret) == NULL)
    internal_error (__FILE__, __LINE__,
		    "vasprintf returned NULL buffer (errno %d)", errno);
  /* A negative status with a non-NULL buffer shouldn't never
     happen. But to be sure. */
  if (status < 0)
    internal_error (__FILE__, __LINE__,
		    "vasprintf call failed (errno %d)", errno);
@


1.123
log
@2004-06-28  Andrew Cagney  <cagney@@gnu.org>

	* defs.h (xstrvprintf): Declare.
	* utils.c (xstrvprintf): New function.
	(internal_vproblem, xstrprintf, xasprintf)
	(vfprintf_maybe_filtered, vfprintf_unfiltered): Use xstrvprintf.
	* serial.c (serial_printf): Ditto.
	* complaints.c (vcomplaint): Ditto.
@
text
@d841 1
a841 1
  "internal-error", AUTO_BOOLEAN_AUTO, AUTO_BOOLEAN_AUTO
@


1.123.2.1
log
@2004-07-17  Andrew Cagney  <cagney@@gnu.org>

	* utils.c (xvasprintf): Call xstrvprintf.
@
text
@d1176 11
a1186 1
  (*ret) = xstrvprintf (format, ap);
@


1.122
log
@2004-06-26  Andrew Cagney  <cagney@@gnu.org>

	* xcoffsolib.c (xcoff_solib_address): Replace xasprintf with
	xstrprintf.
	* varobj.c (varobj_gen_name, create_child, c_name_of_child)
	(c_value_of_variable): Ditto.
	* utils.c (internal_vproblem): Ditto.
	* solib-aix5.c (build_so_list_from_mapfile): Ditto.
	* remote.c (add_packet_config_cmd): Ditto.
	* remote-rdp.c (rdp_set_command_line): Ditto.
	* regcache.c (regcache_dump): Ditto.
	* frv-tdep.c (new_variant, new_variant): Ditto.
	* fbsd-proc.c (child_pid_to_exec_file): Ditto.
	(fbsd_find_memory_regions): Ditto.
	* breakpoint.c (create_thread_event_breakpoint)
	(create_breakpoints): Ditto.
	* aix-thread.c (aix_thread_pid_to_str): Ditto.
	* ada-lang.c (is_package_name): Ditto.  Also delete xmalloc call.

Index: doc/ChangeLog
2004-06-26  Andrew Cagney  <cagney@@gnu.org>

	* gdbint.texinfo (Coding): Replace xasprintf with xstrprintf.
@
text
@d755 1
a755 1
    xvasprintf (&msg, fmt, ap);
d1159 1
a1159 1
  xvasprintf (&ret, format, args);
d1169 1
a1169 1
  xvasprintf (ret, format, args);
d1189 15
d2278 1
a2278 1
  xvasprintf (&linebuffer, format, args);
d2297 1
a2297 1
  xvasprintf (&linebuffer, format, args);
@


1.121
log
@(defaulted_query): Just use the normal query input type when printing the
annotations.
@
text
@d756 1
a756 1
    xasprintf (&reason, "\
@


1.120
log
@2004-04-21  Andrew Cagney  <cagney@@redhat.com>

	* annotate.h (deprecated_annotate_starting_hook)
	(deprecated_annotate_stopped_hook)
	(deprecated_annotate_exited_hook)
	(deprecated_annotate_signal_hook)
	(deprecated_annotate_signalled_hook): Deprecate.
	* tracepoint.h (deprecated_create_tracepoint_hook)
	(deprecated_delete_tracepoint_hook)
	(deprecated_modify_tracepoint_hook)
	(deprecated_trace_find_hook)
	(deprecated_trace_start_stop_hook): Deprecate.
	* target.h (deprecated_target_new_objfile_hook): Deprecate.
	* remote.h (deprecated_target_resume_hook)
	(deprecated_target_wait_loop_hook): Deprecate.
	* gdbcore.h (deprecated_exec_file_display_hook)
	(deprecated_file_changed_hook): Deprecate.
	* frame.h (deprecated_selected_frame_level_changed_hook): Deprecate.
	* defs.h (deprecated_modify_breakpoint_hook)
	(deprecated_command_loop_hook, deprecated_show_load_progress)
	(deprecated_print_frame_info_listing_hook)
	(deprecated_query_hook, deprecated_warning_hook)
	(deprecated_flush_hook, deprecated_create_breakpoint_hook)
	(deprecated_delete_breakpoint_hook)
	(deprecated_interactive_hook, deprecated_registers_changed_hook)
	(deprecated_readline_begin_hook, deprecated_readline_hook)
	(deprecated_readline_end_hook, deprecated_register_changed_hook)
	(deprecated_memory_changed_hook, deprecated_init_ui_hook)
	(deprecated_context_hook, deprecated_target_wait_hook)
	(deprecated_attach_hook, deprecated_detach_hook)
	(deprecated_call_command_hook, deprecated_set_hook)
	(deprecated_error_hook, deprecated_error_begin_hook)
	(deprecated_ui_load_progress_hook): Deprecate.
	* valops.c, uw-thread.c, utils.c, tui/tui-io.c: Update.
	* tui/tui-hooks.c, tracepoint.c, top.c, thread-db.c: Update.
	* target.c, symfile.c, stack.c, sol-thread.c, rs6000-nat.c: Update.
	* remote.c, remote-mips.c, regcache.c, mi/mi-interp.c: Update.
	* main.c, interps.c, infcmd.c, hpux-thread.c, frame.c: Update.
	* exec.c, dsrec.c, d10v-tdep.c, corefile.c, complaints.c: Update.
	* cli/cli-script.c, cli/cli-setshow.c, breakpoint.c: Update.
	* annotate.c, aix-thread.c: Update.
@
text
@d1391 1
a1391 1
	printf_filtered ("\n\032\032pre-%cquery\n", defchar);
d1397 1
a1397 1
	printf_filtered ("\n\032\032%cquery\n", defchar);
d1441 1
a1441 1
    printf_filtered ("\n\032\032post-%cquery\n", defchar);
@


1.119
log
@From Ulrich Weigand:
* utils.c (query): Do not use a va_list variable multiple times.
@
text
@d86 1
a86 1
void (*error_begin_hook) (void);
d569 2
a570 2
  if (warning_hook)
    (*warning_hook) (string, args);
d662 2
a663 2
  if (error_begin_hook)
    error_begin_hook ();
d1273 1
a1273 1
  if (query_hook)
d1276 1
a1276 1
      return query_hook (ctlstr, args);
d1376 1
a1376 1
  if (query_hook)
d1378 1
a1378 1
      return query_hook (ctlstr, args);
@


1.118
log
@2004-02-28  Andrew Cagney  <cagney@@redhat.com>

	* utils.c: Use "", instead of <>, to include readline.
	tui/tui-win.c, tui/tui.c, tui/tui-hooks.c: Ditto.
	* tracepoint.c, top.c, symmisc.c, symfile.c: Ditto.
	* source.c, solib.c, exec.c, event-top.c: Ditto.
	* corelow.c, completer.c, cli/cli-setshow.c: Ditto.
	* cli/cli-dump.c, cli/cli-cmds.c: Ditto.
	* Makefile.in: Update all dependencies.
	(readline_tilde_h, readline_history_h): Define.
	(readline_headers): Delete.
@
text
@a1272 2
  va_start (args, ctlstr);

d1275 1
d1291 1
d1293 1
@


1.118.2.1
log
@(defaulted_query): Just use the normal query input type when printing the
annotations.
@
text
@d1390 1
a1390 1
	printf_filtered ("\n\032\032pre-query\n");
d1396 1
a1396 1
	printf_filtered ("\n\032\032query\n");
d1440 1
a1440 1
    printf_filtered ("\n\032\032post-query\n");
@


1.117
log
@
2004-02-23  Jeff Johnston  <jjohnstn@@redhat.com>

        * defs.h (nquery, yquery): New prototypes.
        * breakpoint.c (break_command_1): Use new nquery interface.
        * utils.c (defaulted_query, nquery, yquery): New functions.
@
text
@d66 1
a66 1
#include <readline/readline.h>
@


1.116
log
@2004-02-19  Elena Zannoni  <ezannoni@@redhat.com>

       * event-top.c (async_request_quit): Remove uses of REQUEST_QUIT
       macro, which was part of the now removed Mach 3 port.
       * utils.c (request_quit): Ditto.
@
text
@d1338 139
@


1.116.2.1
log
@Merge mainline to intercu branch.
@
text
@d66 1
a66 1
#include "readline/readline.h"
a1336 139

/* This function supports the nquery() and yquery() functions.
   Ask user a y-or-n question and return 0 if answer is no, 1 if
   answer is yes, or default the answer to the specified default.
   DEFCHAR is either 'y' or 'n' and refers to the default answer.
   CTLSTR is the control string and should end in "? ".  It should
   not say how to answer, because we do that.
   ARGS are the arguments passed along with the CTLSTR argument to
   printf.  */

static int
defaulted_query (const char *ctlstr, const char defchar, va_list args)
{
  int answer;
  int ans2;
  int retval;
  int def_value;
  char def_answer, not_def_answer;
  char *y_string, *n_string;

  /* Set up according to which answer is the default.  */
  if (defchar == 'y')
    {
      def_value = 1;
      def_answer = 'Y';
      not_def_answer = 'N';
      y_string = "[y]";
      n_string = "n";
    }
  else
    {
      def_value = 0;
      def_answer = 'N';
      not_def_answer = 'Y';
      y_string = "y";
      n_string = "[n]";
    }

  if (query_hook)
    {
      return query_hook (ctlstr, args);
    }

  /* Automatically answer default value if input is not from a terminal.  */
  if (!input_from_terminal_p ())
    return def_value;

  while (1)
    {
      wrap_here ("");		/* Flush any buffered output */
      gdb_flush (gdb_stdout);

      if (annotation_level > 1)
	printf_filtered ("\n\032\032pre-%cquery\n", defchar);

      vfprintf_filtered (gdb_stdout, ctlstr, args);
      printf_filtered ("(%s or %s) ", y_string, n_string);

      if (annotation_level > 1)
	printf_filtered ("\n\032\032%cquery\n", defchar);

      wrap_here ("");
      gdb_flush (gdb_stdout);

      answer = fgetc (stdin);
      clearerr (stdin);		/* in case of C-d */
      if (answer == EOF)	/* C-d */
	{
	  retval = def_value;
	  break;
	}
      /* Eat rest of input line, to EOF or newline */
      if (answer != '\n')
	do
	  {
	    ans2 = fgetc (stdin);
	    clearerr (stdin);
	  }
	while (ans2 != EOF && ans2 != '\n' && ans2 != '\r');

      if (answer >= 'a')
	answer -= 040;
      /* Check answer.  For the non-default, the user must specify
         the non-default explicitly.  */
      if (answer == not_def_answer)
	{
	  retval = !def_value;
	  break;
	}
      /* Otherwise, for the default, the user may either specify
         the required input or have it default by entering nothing.  */
      if (answer == def_answer || answer == '\n' || 
	  answer == '\r' || answer == EOF)
	{
	  retval = def_value;
	  break;
	}
      /* Invalid entries are not defaulted and require another selection.  */
      printf_filtered ("Please answer %s or %s.\n",
		       y_string, n_string);
    }

  if (annotation_level > 1)
    printf_filtered ("\n\032\032post-%cquery\n", defchar);
  return retval;
}


/* Ask user a y-or-n question and return 0 if answer is no, 1 if
   answer is yes, or 0 if answer is defaulted.
   Takes three args which are given to printf to print the question.
   The first, a control string, should end in "? ".
   It should not say how to answer, because we do that.  */

int
nquery (const char *ctlstr, ...)
{
  va_list args;

  va_start (args, ctlstr);
  return defaulted_query (ctlstr, 'n', args);
  va_end (args);
}

/* Ask user a y-or-n question and return 0 if answer is no, 1 if
   answer is yes, or 1 if answer is defaulted.
   Takes three args which are given to printf to print the question.
   The first, a control string, should end in "? ".
   It should not say how to answer, because we do that.  */

int
yquery (const char *ctlstr, ...)
{
  va_list args;

  va_start (args, ctlstr);
  return defaulted_query (ctlstr, 'y', args);
  va_end (args);
}
@


1.116.2.2
log
@Merge GDB mainline of 20040402 to intercu branch.
@
text
@d1273 2
a1276 1
      va_start (args, ctlstr);
a1291 1
      va_start (args, ctlstr);
a1292 1
      va_end (args);
@


1.116.2.3
log
@Merge mainline to intercu branch - 2004-09-15
@
text
@a53 1
#include "symfile.h"
d86 1
a86 1
void (*deprecated_error_begin_hook) (void);
a262 13
static void
do_free_section_addr_info (void *arg)
{
  free_section_addr_info (arg);
}

struct cleanup *
make_cleanup_free_section_addr_info (struct section_addr_info *addrs)
{
  return make_my_cleanup (&cleanup_chain, do_free_section_addr_info, addrs);
}


d569 2
a570 2
  if (deprecated_warning_hook)
    (*deprecated_warning_hook) (string, args);
d662 2
a663 2
  if (deprecated_error_begin_hook)
    deprecated_error_begin_hook ();
d755 2
a756 2
    msg = xstrvprintf (fmt, ap);
    reason = xstrprintf ("\
d841 1
a841 1
  "internal-warning", AUTO_BOOLEAN_AUTO, AUTO_BOOLEAN_AUTO
d977 3
a979 2
  /* Restore the signal handler.  Harmless with BSD-style signals,
     needed for System V-style signals.  */
d986 36
d1040 1
a1040 1
/* The xmalloc() (libiberty.h) family of memory management routines.
d1042 1
a1042 1
   These are like the ISO-C malloc() family except that they implement
d1044 3
a1046 1
   problems.  */
d1048 1
a1048 2
/* NOTE: These are declared using PTR to ensure consistency with
   "libiberty.h".  xfree() is GDB local.  */
d1050 2
a1051 2
PTR				/* OK: PTR */
xmalloc (size_t size)
d1060 1
a1060 1
  val = malloc (size);		/* OK: malloc */
d1067 2
a1068 2
PTR				/* OK: PTR */
xrealloc (PTR ptr, size_t size)	/* OK: PTR */
d1078 1
a1078 1
    val = realloc (ptr, size);	/* OK: realloc */
d1080 1
a1080 1
    val = malloc (size);		/* OK: malloc */
d1087 2
a1088 2
PTR				/* OK: PTR */
xcalloc (size_t number, size_t size)
d1100 1
a1100 1
  mem = calloc (number, size);		/* OK: xcalloc */
d1108 36
d1146 1
a1146 2
  if (ptr != NULL)
    free (ptr);		/* OK: free */
d1159 1
a1159 1
  ret = xstrvprintf (format, args);
d1169 1
a1169 1
  (*ret) = xstrvprintf (format, args);
d1176 8
a1183 13
  (*ret) = xstrvprintf (format, ap);
}

char *
xstrvprintf (const char *format, va_list ap)
{
  char *ret = NULL;
  int status = vasprintf (&ret, format, ap);
  /* NULL is returned when there was a memory allocation problem.  */
  if (ret == NULL)
    nomem (0);
  /* A negative status (the printed length) with a non-NULL buffer
     should never happen, but just to be sure.  */
a1186 1
  return ret;
d1189 1
d1228 1
a1228 1
  char *p = (char *) xmalloc (size + 1);
d1273 1
a1273 1
  if (deprecated_query_hook)
d1276 1
a1276 1
      return deprecated_query_hook (ctlstr, args);
d1376 1
a1376 1
  if (deprecated_query_hook)
d1378 1
a1378 1
      return deprecated_query_hook (ctlstr, args);
d1391 1
a1391 1
	printf_filtered ("\n\032\032pre-query\n");
d1397 1
a1397 1
	printf_filtered ("\n\032\032query\n");
d1441 1
a1441 1
    printf_filtered ("\n\032\032post-query\n");
d1859 6
a1864 1
	async_request_quit (0);
d2263 1
a2263 1
  linebuffer = xstrvprintf (format, args);
d2282 1
a2282 1
  linebuffer = xstrvprintf (format, args);
d2613 1
a2613 1
  deprecated_add_show_from_set (c, &showlist);
d2618 1
a2618 1
  deprecated_add_show_from_set (c, &showlist);
d2623 1
a2623 1
  deprecated_add_show_from_set
d2629 1
a2629 1
  deprecated_add_show_from_set
d2642 1
a2642 1
  deprecated_add_show_from_set
d2648 1
a2648 1
  deprecated_add_show_from_set
d2663 1
a2663 1
#define CELLSIZE 50
d2693 1
a2693 1
decimal2str (char *paddr_str, char *sign, ULONGEST addr, int width)
a2703 35
      width -= 9;
    }
  while (addr != 0 && i < (sizeof (temp) / sizeof (temp[0])));
  width += 9;
  if (width < 0)
    width = 0;
  switch (i)
    {
    case 1:
      sprintf (paddr_str, "%s%0*lu", sign, width, temp[0]);
      break;
    case 2:
      sprintf (paddr_str, "%s%0*lu%09lu", sign, width, temp[1], temp[0]);
      break;
    case 3:
      sprintf (paddr_str, "%s%0*lu%09lu%09lu", sign, width,
	       temp[2], temp[1], temp[0]);
      break;
    default:
      internal_error (__FILE__, __LINE__,
		      "failed internal consistency check");
    }
}

static void
octal2str (char *paddr_str, ULONGEST addr, int width)
{
  unsigned long temp[3];
  int i = 0;
  do
    {
      temp[i] = addr % (0100000 * 0100000);
      addr /= (0100000 * 0100000);
      i++;
      width -= 10;
a2705 3
  width += 10;
  if (width < 0)
    width = 0;
d2709 1
a2709 4
      if (temp[0] == 0)
	sprintf (paddr_str, "%*o", width, 0);
      else
	sprintf (paddr_str, "0%0*lo", width, temp[0]);
d2712 1
a2712 1
      sprintf (paddr_str, "0%0*lo%010lo", width, temp[1], temp[0]);
d2715 1
a2715 2
      sprintf (paddr_str, "0%0*lo%010lo%010lo", width,
	       temp[2], temp[1], temp[0]);
d2727 1
a2727 1
  decimal2str (paddr_str, "", addr, 0);
d2736 1
a2736 1
    decimal2str (paddr_str, "-", -addr, 0);
d2738 1
a2738 1
    decimal2str (paddr_str, "", addr, 0);
a2802 81
/* Converts a LONGEST to a C-format hexadecimal literal and stores it
   in a static string.  Returns a pointer to this string.  */
char *
hex_string (LONGEST num)
{
  char *result = get_cell ();
  snprintf (result, CELLSIZE, "0x%s", phex_nz (num, sizeof (num)));
  return result;
}

/* Converts a LONGEST number to a C-format hexadecimal literal and
   stores it in a static string.  Returns a pointer to this string
   that is valid until the next call.  The number is padded on the
   left with 0s to at least WIDTH characters.  */
char *
hex_string_custom (LONGEST num, int width)
{
  char *result = get_cell ();
  char *result_end = result + CELLSIZE - 1;
  const char *hex = phex_nz (num, sizeof (num));
  int hex_len = strlen (hex);

  if (hex_len > width)
    width = hex_len;
  if (width + 2 >= CELLSIZE)
    internal_error (__FILE__, __LINE__,
		    "hex_string_custom: insufficient space to store result");

  strcpy (result_end - width - 2, "0x");
  memset (result_end - width, '0', width);
  strcpy (result_end - hex_len, hex);
  return result_end - width - 2;
}

/* Convert VAL to a numeral in the given radix.  For
 * radix 10, IS_SIGNED may be true, indicating a signed quantity;
 * otherwise VAL is interpreted as unsigned.  If WIDTH is supplied, 
 * it is the minimum width (0-padded if needed).  USE_C_FORMAT means
 * to use C format in all cases.  If it is false, then 'x' 
 * and 'o' formats do not include a prefix (0x or leading 0). */

char *
int_string (LONGEST val, int radix, int is_signed, int width, 
	    int use_c_format)
{
  switch (radix) 
    {
    case 16:
      {
	char *result;
	if (width == 0)
	  result = hex_string (val);
	else
	  result = hex_string_custom (val, width);
	if (! use_c_format)
	  result += 2;
	return result;
      }
    case 10:
      {
	char *result = get_cell ();
	if (is_signed && val < 0)
	  decimal2str (result, "-", -val, width);
	else
	  decimal2str (result, "", val, width);
	return result;
      }
    case 8:
      {
	char *result = get_cell ();
	octal2str (result, val, width);
	if (use_c_format || val == 0)
	  return result;
	else
	  return result + 1;
      }
    default:
      internal_error (__FILE__, __LINE__,
		      "failed internal consistency check");
    }
}	
@


1.115
log
@2004-02-10  Andrew Cagney  <cagney@@redhat.com>

	* defs.h: Do not include "tui.h".
	* gdb_curses.h: New file.
	* tui/tui-hooks.h: New file.
	* tui/tui.h (tui_update_all_exec_infos): Delete declaration.
	(tui_install_hooks, tui_remove_hooks): Delete declarations.
	(tui_initialize_io): Delete declaration.
	(tui_initialize_readline: Delete redundant declaration.
	(struct tui_point): Delete definition.
	* tui/tui-data.h (struct tui_point): Define.
	* cli/cli-decode.c [TUI]: Include "tui/tui.h".
	* utils.c: Include "tui/tui.h".
	* tui/tui-data.h: Include "tui/tui.h" and "gdb_curses.h".
	* printcmd.c [TUI]: Include "tui/tui.h".
	* cli/cli-cmds.c [TUI]: Include "tui/tui.h".
	* tui/tui-command.c: Include "gdb_curses.h".
	* tui/tui.c, tui/tui-winsource.c, tui/tui-wingeneral.c: Ditto.
	* tui/tui-windata.c, tui/tui-win.c, tui/tui-stack.c: Ditto.
	* tui/tui-source.c, tui/tui-regs.c, tui/tui-layout.c: Ditto.
	* tui/tui-io.c, tui/tui-disasm.c, tui/tui-data.c: : Ditto.
	* tui/tui-hooks.c: Include "tui-hooks.h" and "gdb_curses.h".
	* Makefile.in: Update all dependencies.
	(tui_hooks_h, gdb_curses_h): Define.
	(SUBDIR_TUI_CFLAGS): Remove -I${srcdir}/tui.
@
text
@a981 3
#ifdef REQUEST_QUIT
  REQUEST_QUIT;
#else
a983 1
#endif
@


1.114
log
@	* utils.c (init_page_info): Move declarations of `rows' and
	`cols' before the __GO32__-specific code.  Move the closing brace
	outside the #ifdef __GO32__..#endif block.
	[__GO32__]: Use `rows' and `cols' to avoid compiler warnings.
@
text
@d30 4
@


1.113
log
@2004-01-19  Michael Chastain  <mec.gnu@@mindspring.com>

	* MAINTAINERS: Delete mmalloc.
	* Makefile.in: Delete MMALLOC, MMALLOC_CFLAGS, -lmmalloc, mmalloc_h.
	* NEWS: Mention removal of --with-malloc.
	* acconfig.h: Delete USE_MMALLOC, MMCHECK_FORCE.
	* config.in: Regenerate.
	* configure: Regenerate.
	* configure.in: Delete MMALLOC_CFLAGS, MMALLOC, --with-mmalloc, USE_MMALLOC, MMCHECK_FORCE.
	* gdbinit.in: Remove mmalloc.
	* utils.c: Delete USE_MMALLOC, NO_MMCHECK, MMCHECK_FORCE, malloc_botch.
	* config/alpha/alpha-linux.mh: Delete MMALLOC, MMALLOC_CFLAGS.
	* config/i386/go32.mh: Likewise.
	* config/i386/interix.mh: Likewise.
	* config/powerpc/xm-linux.h: Delete MMAP_BASE_ADDRESS, MMAP_INCREMENT.

2004-01-19  Michael Chastain  <mec.gnu@@mindspring.com>

	* gdbint.texinfo: Delete USE_MMALLOC, NO_MMCHECK, MMCHECK_FORCE,
	MMAP_BASE_ADDRESS, MMAP_INCREMENT.
@
text
@d1585 2
d1588 4
a1591 2
      lines_per_page = ScreenRows ();
      chars_per_line = ScreenCols ();
a1592 2
      int rows, cols;

d1618 1
a1619 1
#endif
@


1.112
log
@
2004-01-19  Jeff Johnston  <jjohnstn@@redhat.com>

        * linespec.c (decode_variable, symtab_from_filename):  Call
        error_silent with error message instead of throwing an exception
        directly.
        * defs.h (error_silent, error_output_message): Add prototypes.
        (catch_exceptions_with_msg): Ditto.
        * utils.c (error_silent, error_output_message): New functions.
        * top.c (catch_exceptions_with_msg): New function.
@
text
@a63 4
#ifdef USE_MMALLOC
#include "mmalloc.h"
#endif

a96 4
#if defined (USE_MMALLOC) && !defined (NO_MMCHECK)
static void malloc_botch (void);
#endif

a987 2
#if !defined (USE_MMALLOC)

d1015 2
a1016 4
#endif /* USE_MMALLOC */

#if !defined (USE_MMALLOC) || defined (NO_MMCHECK)

a1020 48

#else /* Have mmalloc and want corruption checking */

static void
malloc_botch (void)
{
  fprintf_unfiltered (gdb_stderr, "Memory corruption\n");
  internal_error (__FILE__, __LINE__, "failed internal consistency check");
}

/* Attempt to install hooks in mmalloc/mrealloc/mfree for the heap specified
   by MD, to detect memory corruption.  Note that MD may be NULL to specify
   the default heap that grows via sbrk.

   Note that for freshly created regions, we must call mmcheckf prior to any
   mallocs in the region.  Otherwise, any region which was allocated prior to
   installing the checking hooks, which is later reallocated or freed, will
   fail the checks!  The mmcheck function only allows initial hooks to be
   installed before the first mmalloc.  However, anytime after we have called
   mmcheck the first time to install the checking hooks, we can call it again
   to update the function pointer to the memory corruption handler.

   Returns zero on failure, non-zero on success. */

#ifndef MMCHECK_FORCE
#define MMCHECK_FORCE 0
#endif

void
init_malloc (void *md)
{
  if (!mmcheckf (md, malloc_botch, MMCHECK_FORCE))
    {
      /* Don't use warning(), which relies on current_target being set
         to something other than dummy_target, until after
         initialize_all_files(). */

      fprintf_unfiltered
	(gdb_stderr,
	 "warning: failed to install memory consistency checks; ");
      fprintf_unfiltered (gdb_stderr,
			  "configuration should define NO_MMCHECK or MMCHECK_FORCE\n");
    }

  mmtrace ();
}

#endif /* Have mmalloc and want corruption checking  */
@


1.111
log
@2004-01-02  Andrew Cagney  <cagney@@redhat.com>

	* utils.c (do_my_cleanups): Make static, add forward declaration.
	* defs.h (do_my_cleanups): Delete declaration.
@
text
@d4 1
a4 1
   1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003 Free Software
d629 32
@


1.110
log
@2003-09-20  Andrew Cagney  <cagney@@redhat.com>

	* breakpoint.c: Eliminate ARGSUSED.
	* buildsym.c, cli/cli-cmds.c, cli/cli-script.c: Ditto.
	* coffread.c, corelow.c, dwarf2read.c, event-top.c: Ditto.
	* exec.c, gcore.c, hpux-thread.c, infcmd.c, inflow.c: Ditto.
	* infrun.c, inftarg.c, maint.c, ocd.c, printcmd.c: Ditto.
	* procfs.c, regcache.c, remote-rdi.c, remote-sds.c: Ditto.
	* remote.c, sol-thread.c, source.c, stabsread.c: Ditto.
	* stack.c, symfile.c, target.c, top.c, typeprint.c: Ditto.
	* utils.c, v850ice.c, valprint.c, values.c, win32-nat.c: Ditto.
	* wince.c, remote-vx.c: Ditto.
@
text
@d99 2
d316 1
a316 1
void
@


1.109
log
@2003-09-19  Andrew Cagney  <cagney@@redhat.com>

	* utils.c (align_up, align_down): New functions.
	* defs.h (align_up, align_down): Declare.
	* ppc-sysv-tdep.c (align_up, align_down): Delete functions.
	* s390-tdep.c: Replace "round_up" and "round_down" with "align_up"
	and "align_down".
	(round_up, round_down): Delete functions.
	* mips-tdep.c: Replace ROUND_UP and ROUND_DOWN with "align_up" and
	"align_down".
	(ROUND_DOWN, ROUND_UP): Delete macros.
	(mips_dump_tdep): Do not print "ROUND_UP" or "ROUND_DOWN".
	* h8300-tdep.c: Replace "round_up" and "round_down" with
	"align_up" and "align_down".
	(round_up, round_down): Delete macros.
	* frv-tdep.c: Replace ROUND_UP and ROUND_DOWN with "align_up" and
	"align_down".
	(ROUND_UP, ROUND_DOWN): Delete macros.
@
text
@a429 1
/* ARGSUSED */
a1685 1
/* ARGSUSED */
a1692 1
/* ARGSUSED */
@


1.108
log
@2003-09-16  Andrew Cagney  <cagney@@redhat.com>

	* buildsym.c: Remove more occurances of "register".
	* coffread.c, dbxread.c, dcache.c, dwarf2read.c: Ditto.
	* environ.c, eval.c, f-valprint.c, findvar.c: Ditto.
	* gdbtypes.c, gnu-v2-abi.c, h8300-tdep.c, hppa-tdep.c: Ditto.
	* infcmd.c, mdebugread.c, minsyms.c, mips-tdep.c: Ditto.
	* printcmd.c, remote-vx.c, sh-stub.c, sh-tdep.c: Ditto.
	* sh64-tdep.c, source.c, stabsread.c, stack.c: Ditto.
	* standalone.c, symfile.c, symmisc.c, symtab.c: Ditto.
	* utils.c, valops.c, values.c, xcoffread.c: Ditto.
@
text
@d2932 16
@


1.107
log
@2003-09-14  Andrew Cagney  <cagney@@redhat.com>

	* alpha-nat.c: Remove some occurances of "register".
	* alpha-tdep.c, arm-tdep.c, blockframe.c, breakpoint.c: Ditto.
	* buildsym.c, c-typeprint.c, c-valprint.c, coffread.c: Ditto.
	* corefile.c, cp-support.c, cp-valprint.c, cris-tdep.c: Ditto.
	* dbxread.c, dcache.c, dwarf2read.c, elfread.c: Ditto.
	* environ.c, eval.c, event-top.c, f-typeprint.c: Ditto.
	* f-valprint.c, findvar.c, frame.c, gdbtypes.c: Ditto.
	* h8300-tdep.c, hppa-tdep.c, hppab-nat.c, hppah-nat.c: Ditto.
	* hppam3-nat.c, hpread.c, ia64-aix-nat.c, ia64-linux-nat.c: Ditto.
	* infcall.c, infcmd.c, inflow.c, infptrace.c, infrun.c: Ditto.
	* infttrace.c, irix5-nat.c, jv-typeprint.c: Ditto.
	* jv-valprint.c, m68k-tdep.c, m68klinux-nat.c, main.c: Ditto.
	* mdebugread.c, minsyms.c, mips-linux-tdep.c: Ditto.
	* mips-nat.c, mips-tdep.c, mipsread.c, mipsv4-nat.c: Ditto.
	* ns32k-tdep.c, objfiles.c, p-typeprint.c: Ditto.
	* p-valprint.c, ppc-linux-nat.c, printcmd.c: Ditto.
	* remote-mips.c, remote-vx.c, rs6000-nat.c: Ditto.
	* rs6000-tdep.c, scm-exp.c, sh-tdep.c, sh64-tdep.c: Ditto.
	* solib.c, somread.c, source.c, sparc-tdep.c: Ditto.
	* stabsread.c, stack.c, standalone.c, symfile.c: Ditto.
	* symmisc.c, symtab.c, top.c, tracepoint.c: Ditto.
	* typeprint.c, utils.c, valarith.c, valops.c: Ditto.
	* values.c, vax-tdep.c, xcoffread.c: Ditto.
@
text
@d285 1
a285 1
do_cleanups (register struct cleanup *old_chain)
d291 1
a291 1
do_final_cleanups (register struct cleanup *old_chain)
d297 1
a297 1
do_run_cleanups (register struct cleanup *old_chain)
d303 1
a303 1
do_exec_cleanups (register struct cleanup *old_chain)
d309 1
a309 1
do_exec_error_cleanups (register struct cleanup *old_chain)
d315 2
a316 2
do_my_cleanups (register struct cleanup **pmy_chain,
		register struct cleanup *old_chain)
d331 1
a331 1
discard_cleanups (register struct cleanup *old_chain)
d337 1
a337 1
discard_final_cleanups (register struct cleanup *old_chain)
d343 1
a343 1
discard_exec_error_cleanups (register struct cleanup *old_chain)
d349 2
a350 2
discard_my_cleanups (register struct cleanup **pmy_chain,
		     register struct cleanup *old_chain)
d1268 1
a1268 1
print_spaces (register int n, register struct ui_file *file)
d1459 2
a1460 2
	  register int i = c - '0';
	  register int count = 0;
@


1.106
log
@* utils.c (set_width_command): Remove prototypes.
(set_screen_size): New prototype.
(init_page_info): Simplify by fetching the screen size from
Readline.  Call set_screen_size.
(set_screen_size): New function.
(set_width): Add missing whitespace in comment.
(set_width_command): Call set_screen_size.
(set_height_command): New function.
(initialize_utils): Fix formatting.  Make "set height" command
call set_height_command.  Remove redundant code that turns off
pagination if output isn't a terminal.  Remove redundant call to
set_width_command.
@
text
@d269 1
a269 1
  register struct cleanup *new
d271 1
a271 1
  register struct cleanup *old_chain = *pmy_chain;
d318 1
a318 1
  register struct cleanup *ptr;
d352 1
a352 1
  register struct cleanup *ptr;
d1223 1
a1223 1
  register int val;
d1246 1
a1246 1
  register char *p = (char *) xmalloc (size + 1);
d1255 1
a1255 1
  register char *p = (char *) xmmalloc (md, size + 1);
d1296 2
a1297 2
  register int answer;
  register int ans2;
d1401 1
a1401 1
  register int c = *(*string_ptr)++;
@


1.105
log
@2003-08-09  Andrew Cagney  <cagney@@redhat.com>

	* defs.h (xstrprintf): Declare.
	* utils.c (xstrprintf): New function.
	* breakpoint.c (insert_breakpoints): Replace sprintf and
	non-literal format strings, with xstrprintf and cleanups.
	(delete_breakpoint,breakpoint_re_set): Ditto.
	(commands_command, insert_breakpoints): Ditto.
	(bpstat_stop_status, break_at_finish_at_depth_command_1): Ditto.
	(break_at_finish_command_1): Ditto.
@
text
@d105 1
a105 2
static void set_width_command (char *, int, struct cmd_list_element *);

a1568 1

d1571 1
d1574 1
d1603 2
a1604 1
/* Inialize the lines and chars per page */
a1611 2
      /* These defaults will be used if we are unable to get the correct
         values from termcap.  */
d1616 1
a1616 2
      lines_per_page = 24;
      chars_per_line = 80;
d1618 2
a1619 4
#if !defined (_WIN32)
      /* Initialize the screen height and width from termcap.  */
      {
	char *termtype = getenv ("TERM");
d1621 4
a1624 2
	/* Positive means success, nonpositive means failure.  */
	int status;
d1626 8
a1633 29
	/* 2048 is large enough for all known terminals, according to the
	   GNU termcap manual.  */
	char term_buffer[2048];

	if (termtype)
	  {
	    status = tgetent (term_buffer, termtype);
	    if (status > 0)
	      {
		int val;
		int running_in_emacs = getenv ("EMACS") != NULL;

		val = tgetnum ("li");
		if (val >= 0 && !running_in_emacs)
		  lines_per_page = val;
		else
		  /* The number of lines per page is not mentioned
		     in the terminal description.  This probably means
		     that paging is not useful (e.g. emacs shell window),
		     so disable paging.  */
		  lines_per_page = UINT_MAX;

		val = tgetnum ("co");
		if (val >= 0)
		  chars_per_line = val;
	      }
	  }
      }
#endif
d1635 1
a1636 2

      /* If there is a better way to determine the window size, use it. */
d1639 1
a1639 1
#endif
d1643 4
a1646 1
    }				/* the command_line_version */
d1650 21
d1684 1
a1684 1
  wrap_pointer = wrap_buffer;	/* Start it at the beginning */
d1691 1
d1695 7
d2497 1
a2497 2
  c = add_set_cmd ("width", class_support, var_uinteger,
		   (char *) &chars_per_line,
d2503 4
a2506 5
  add_show_from_set
    (add_set_cmd ("height", class_support,
		  var_uinteger, (char *) &lines_per_page,
		  "Set number of lines gdb thinks are in a page.", &setlist),
     &showlist);
a2508 6

  /* If the output is not a terminal, don't paginate it.  */
  if (!ui_file_isatty (gdb_stdout))
    lines_per_page = UINT_MAX;

  set_width_command ((char *) NULL, 0, c);
@


1.104
log
@2003-08-04  David Carlton  <carlton@@kealia.com>

	* charset.c (cached_iconv_convert): Add __FILE__ and __LINE__ args
	to internal_error call.
	* source.c (forward_search_command): Add "%s" format argument.
	(reverse_search_command): Ditto.
	* top.c (quit_confirm): Ditto.
	* cli/cli-setshow.c (do_setshow_command): Ditto.
	* cp-valprint.c (cp_print_class_method): Replace
	{f,}printf_{un,}filtered by {f,}puts_{un,}filtered.
	(cp_print_class_member): Ditto.
	* event-top.c (command_line_handler): Ditto.
	* linux-proc.c (linux_info_proc_cmd): Ditto.
	* p-typeprint.c (pascal_type_print_base): Ditto.
	* p-valprint.c (pascal_object_print_class_method): Ditto.
	(pascal_object_print_class_member): Ditto.
	* printcmd.c (print_scalar_formatted,printf_command): Ditto.
	* remote.c (remote_cisco_section_offsets): Ditto.
	* top.c (command_line_input): Ditto.
	* utils.c (vwarning,error_stream,quit): Ditto.
	* valprint.c (print_floating,print_binary_chars)
	(print_octal_chars,print_decimal_chars,print_hex_chars): Ditto.

2003-08-04  David Carlton  <carlton@@kealia.com>

	* mi-main.c (mi_error_last_message): Add "%s" second argument to
	xasprintf call.

2003-08-04  David Carlton  <carlton@@kealia.com>

	* generic/gdbtk.c (gdbtk_source_start_file): Add "%s" first
	argument to error call.
	(tk_command): Ditto.
	(view_command): Ditto.
@
text
@d1181 11
@


1.103
log
@	* utils.c (internal_vproblem): Use xvasprintf, not xasprintf, to
	format error message.
@
text
@d581 1
a581 1
	fprintf_unfiltered (gdb_stderr, warning_pre_print);
d647 1
a647 1
    fprintf_filtered (gdb_stderr, error_pre_print);
d925 1
a925 1
    fprintf_unfiltered (gdb_stderr, quit_pre_print);
@


1.102
log
@2003-06-26  Andrew Cagney  <cagney@@redhat.com>

	* utils.c (internal_vproblem): Print the problem to a reason
	buffer and then pass to query.  Make the msg variable more local.

VS: ----------------------------------------------------------------------
@
text
@d727 1
a727 1
    xasprintf (&msg, fmt, ap);
@


1.101
log
@2003-04-16  Andrew Cagney  <cagney@@redhat.com>

	* utils.c (xmmalloc): Always allocate something, matches
	libiberty/xmalloc's semantics.
	(xmrealloc, xmcalloc): Ditto.
@
text
@a691 1
  static char msg[] = "Recursive internal problem.\n";
d695 1
d698 17
a714 14
  switch (dejavu)
    {
    case 0:
      dejavu = 1;
      break;
    case 1:
      dejavu = 2;
      fputs_unfiltered (msg, gdb_stderr);
      abort ();			/* NOTE: GDB has only three calls to abort().  */
    default:
      dejavu = 3;
      write (STDERR_FILENO, msg, sizeof (msg));
      exit (1);
    }
d720 15
a734 11
  /* The error/warning message.  Format using a style similar to a
     compiler error message.  */
  fprintf_unfiltered (gdb_stderr, "%s:%d: %s: ", file, line, problem->name);
  vfprintf_unfiltered (gdb_stderr, fmt, ap);
  fputs_unfiltered ("\n", gdb_stderr);

  /* Provide more details so that the user knows that they are living
     on the edge.  */
  fprintf_unfiltered (gdb_stderr, "\
A problem internal to GDB has been detected.  Further\n\
debugging may prove unreliable.\n");
d742 1
a742 1
      quit_p = query ("Quit this debugging session? ");
d760 1
a760 1
      dump_core_p = query ("Create a core file of GDB? ");
@


1.101.16.1
log
@2003-06-26  Andrew Cagney  <cagney@@redhat.com>

	* utils.c (internal_vproblem): Print the problem to a reason
	buffer and then pass to query.  Make the msg variable more local.
@
text
@d692 1
a695 1
  char *reason;
d698 14
a711 17
  {
    static char msg[] = "Recursive internal problem.\n";
    switch (dejavu)
      {
      case 0:
	dejavu = 1;
	break;
      case 1:
	dejavu = 2;
	fputs_unfiltered (msg, gdb_stderr);
	abort ();	/* NOTE: GDB has only three calls to abort().  */
      default:
	dejavu = 3;
	write (STDERR_FILENO, msg, sizeof (msg));
	exit (1);
      }
  }
d717 11
a727 15
  /* Create a string containing the full error/warning message.  Need
     to call query with this full string, as otherwize the reason
     (error/warning) and question become separated.  Format using a
     style similar to a compiler error message.  Include extra detail
     so that the user knows that they are living on the edge.  */
  {
    char *msg;
    xasprintf (&msg, fmt, ap);
    xasprintf (&reason, "\
%s:%d: %s: %s\n\
A problem internal to GDB has been detected,\n\
further debugging may prove unreliable.", file, line, problem->name, msg);
    xfree (msg);
    make_cleanup (xfree, reason);
  }
d735 1
a735 1
      quit_p = query ("%s\nQuit this debugging session? ", reason);
d753 1
a753 1
      dump_core_p = query ("%s\nCreate a core file of GDB? ", reason);
@


1.101.16.2
log
@	* utils.c (internal_vproblem): Use xvasprintf, not xasprintf, to
	format error message.
@
text
@d727 1
a727 1
    xvasprintf (&msg, fmt, ap);
@


1.101.10.1
log
@Snap const char * mess.
@
text
@d105 1
a105 1
static void set_width_command (const char *, int, struct cmd_list_element *);
d166 1
a166 1
const char *error_pre_print;
d170 1
a170 1
const char *quit_pre_print;
d174 1
a174 1
const char *warning_pre_print = "\nwarning: ";
d1578 1
a1578 1
static const char *wrap_indent;
d1671 1
a1671 1
set_width_command (const char *args, int from_tty, struct cmd_list_element *c)
d1768 1
a1768 1
wrap_here (const char *indent)
d2282 1
a2282 1
fprintf_symbol_filtered (struct ui_file *stream, const char *name,
d2451 1
a2451 1
static void pagination_on_command (const char *arg, int from_tty);
d2453 1
a2453 1
pagination_on_command (const char *arg, int from_tty)
d2458 1
a2458 1
static void pagination_on_command (const char *arg, int from_tty);
d2460 1
a2460 1
pagination_off_command (const char *arg, int from_tty)
@


1.100
log
@2003-04-09  Andrew Cagney  <cagney@@redhat.com>

	* defs.h (gdb_print_host_address): Make "addr" parameter a
	pointer constant.
	* utils.c (gdb_print_host_address): Update.
@
text
@d1076 2
d1079 6
a1084 9
    {
      val = NULL;
    }
  else
    {
      val = mmalloc (md, size);
      if (val == NULL)
	nomem (size);
    }
d1093 2
d1096 4
a1099 5
    {
      if (ptr != NULL)
	mfree (md, ptr);
      val = NULL;
    }
d1101 4
a1104 14
    {
      if (ptr != NULL)
	{
	  val = mrealloc (md, ptr, size);
	}
      else
	{
	  val = mmalloc (md, size);
	}
      if (val == NULL)
	{
	  nomem (size);
	}
    }
d1112 3
a1115 2
    mem = NULL;
  else
d1117 2
a1118 3
      mem = mcalloc (md, number, size);
      if (mem == NULL)
	nomem (number * size);
d1120 5
@


1.99
log
@* Makefile.in (c_lang.o, jv_lang.o, language.o): Add $(demangle_h).
* language.h (struct language_defn): Add la_demangle.
(language_demangle): Declare.
* language.c (language_demangle): New function.
(unk_lang_demangle): Likewise.
(unknown_language_defn, auto_language_defn, local_language_defn):
Add ukn_lang_demangle.
* ada-lang.c (ada_language_defn): Add NULL for la_demangle element.
* f-lang.c, m2-lang.c, p-lang.c, scm-lang.c: Likewise.
* c-lang.c (c_language_defn, asm_language_defn): Likewise.
(cplus_language_defn): Add cplus_demangle for la_demangle element.
* jv-lang.c (java_demangle): New function
(java_language_defn): Use it for la_demangle element.
* objc-lang.c (objc_demangle): Add options argument
(objc_language_defn): Use objc_demangle for la_demangle element.
* maint.c (maintenance_demangle): Replace switch with
call to language_demangle.
* utils.c (fprintf_symbol_filtered): Likewise.
@
text
@d1264 1
a1264 1
gdb_print_host_address (void *addr, struct ui_file *stream)
@


1.99.2.1
log
@Merge with mainline.
@
text
@d1264 1
a1264 1
gdb_print_host_address (const void *addr, struct ui_file *stream)
@


1.98
log
@	Fix PR build/1097.
	* utils.c (gdb_realpath): Move closing brace outwards one #endif.
@
text
@d2301 1
a2301 16
	  switch (lang)
	    {
	    case language_cplus:
	      demangled = cplus_demangle (name, arg_mode);
	      break;
	    case language_java:
	      demangled = cplus_demangle (name, arg_mode | DMGL_JAVA);
	      break;
	    case language_objc:
	      /* Commented out until ObjC handling is enabled.  */
	      /*demangled = objc_demangle (name); */
	      /*break; */
	    default:
	      demangled = NULL;
	      break;
	    }
@


1.97
log
@2003-02-24  David Carlton  <carlton@@math.stanford.edu>

	* symtab.c (lookup_partial_symbol): Use strcmp_iw_ordered to
	do the comparison, not strcmp.
	* symfile.c (compare_psymbols): Ditto.
	* defs.h: Declare strcmp_iw_ordered.
	* utils.c (strcmp_iw_ordered): New function.
@
text
@d2767 1
a2768 1
# endif
@


1.96
log
@2003-02-06  Andrew Cagney  <ac131313@@redhat.com>

	* linux-proc.c: Include "gdb_stat.h" instead of <sys/stat.h>.
	* cp-valprint.c (cp_print_value_fields): Eliminate STREQN.
	* jv-typeprint.c (java_type_print_base): Ditto.
	* typeprint.c (typedef_print): Eliminate STREQ.
	* cli/cli-script.c (define_command, define_command): Ditto.
	* main.c (captured_main): Ditto.
	* values.c (lookup_internalvar): Ditto.
	* utils.c (safe_strerror, parse_escape): Eliminate assignment
	within `if' conditional.
	* linespec.c (decode_line_2): Ditto.
	* cli/cli-dump.c (bfd_openr_with_cleanup): Ditto.
	(bfd_openw_with_cleanup): Ditto.

Index: mi/ChangeLog
2003-02-06  Andrew Cagney  <ac131313@@redhat.com>

	* mi-cmd-env.c: Include "gdb_stat.h" instead of <sys/stat.h>.
@
text
@d2361 80
@


1.95
log
@2003-02-04  Andrew Cagney  <ac131313@@redhat.com>

	* values.c: Delete code conditional on IS_TRAPPED_INTERNALVAR.
	* TODO: Delete reference to IS_TRAPPED_INTERNALVAR.
	* utils.c (init_page_info): Delete reference to MPW in comments.
	* main.c (captured_main): Delete #ifdef MPW.

Index: doc/ChangeLog
2003-02-04  Andrew Cagney  <ac131313@@redhat.com>

	* gdbint.texinfo (Target Architecture Definition): Delete
	descrption of IS_TRAPPED_INTERNALVAR.
@
text
@d834 2
a835 1
  if ((msg = strerror (errnum)) == NULL)
d1451 2
a1452 1
	      if ((c = *(*string_ptr)++) >= '0' && c <= '7')
d1454 1
a1459 1
		  (*string_ptr)--;
@


1.94
log
@	* defs.h (streq): Add prototype.
	* utils.c (streq): New function.

	* dwarf2read.c (new_symbol): Use SYMBOL_SET_NAMES instead of
	SYMBOL_NAME and SYMBOL_INIT_DEMANGLED_NAME.
	* mdebugread.c (new_symbol): Likewise.
	* stabsread.c (define_symbol): Likewise.
	* coffread.c (process_coff_symbol): Likewise.
	* dwarfread.c (new_symbol): Likewise.

	* minsyms.c (prim_record_minimal_symbol_and_info): Use
	SYMBOL_SET_NAMES instead of setting SYMBOL_NAME.  Set the language
	here.
	(install_minimal_symbols): Don't set SYMBOL_LANGUAGE or call
	SYMBOL_INIT_DEMANGLED_NAME.
	* objfiles.c: Include "hashtab.h".
	(allocate_objfile): Call htab_set_functions_ex for the
	demangled_names_hash.
	(free_objfile): Call htab_delete for the demangled_names_hash.
	* objfiles.h (struct htab): Add declaration.
	(struct objfile): Add demangled_names_hash.
	* symfile.c: Include "hashtab.h".
	(reread_symbols): Call htab_delete for the demangled_names_hash.
	(add_psymbol_to_list): Use SYMBOL_SET_NAMES instead of putting
	SYMBOL_NAME in the bcache.
	* symtab.c: Include "hashtab.h".  Update comments.
	(create_demangled_names_hash, symbol_set_names): New functions.
	(symbol_find_demangled_name): New function, broken out from
	symbol_init_demangled_names.
	(symbol_init_demangled_names): Use it.
	* symtab.h (SYMBOL_INIT_DEMANGLED_NAME): Add missing parentheses.
	(SYMBOL_SET_NAMES): New macro.
	(symbol_set_names): Add prototype.
@
text
@a1605 2
      /* No termcap under MPW, although might be cool to do something
         by looking at worksheet or console window sizes. */
d1641 1
a1641 1
#endif /* MPW */
@


1.93
log
@2003-02-01  Andrew Cagney  <ac131313@@redhat.com>

	* defs.h (host_pointer_to_address): Delete declaration.
	(address_to_host_pointer): Delete declaration.
	* utils.c (host_pointer_to_address): Delete function.
	(address_to_host_pointer): Delete function.
	* procfs.c (procfs_address_to_host_pointer): New function.
	* procfs.c (proc_set_watchpoint): Use.
	(procfs_can_use_hw_breakpoint): Update comments.
	* somsolib.c (hpux_address_to_host_pointer_hack): New function.
	(som_solib_add): Use.
	* hppa-tdep.c (hppa_pointer_to_address_hack): New function.
	* hppa-tdep.c (unwind_command): Use.
@
text
@d2360 8
@


1.92
log
@2003-01-31  Andrew Cagney  <ac131313@@redhat.com>

	* objc-exp.y, c-exp.y, f-exp.y: Remove PTR casts.
	* utils.c: Update comments documenting legitimate uses of PTR.
@
text
@a2604 19
/* Convert to / from the hosts pointer to GDB's internal CORE_ADDR
   using the target's conversion routines. */
CORE_ADDR
host_pointer_to_address (void *ptr)
{
  gdb_assert (sizeof (ptr) == TYPE_LENGTH (builtin_type_void_data_ptr));
  return POINTER_TO_ADDRESS (builtin_type_void_data_ptr, &ptr);
}

void *
address_to_host_pointer (CORE_ADDR addr)
{
  void *ptr;

  gdb_assert (sizeof (ptr) == TYPE_LENGTH (builtin_type_void_data_ptr));
  ADDRESS_TO_POINTER (builtin_type_void_data_ptr, &ptr, addr);
  return ptr;
}

@


1.91
log
@Re-indent utils.c.
@
text
@d69 1
a69 1
extern PTR malloc ();
d72 1
a72 1
extern PTR realloc ();
a957 3
/* NOTE: These must use PTR so that their definition matches the
   declaration found in "mmalloc.h". */

d1150 1
a1150 1
PTR
d1156 2
a1157 2
PTR
xrealloc (PTR ptr, size_t size)
d1162 1
a1162 1
PTR
@


1.90
log
@gdb/ChangeLog:
2003-01-23  Alexander Larsson <alexl@@redhat.com>
	    Jim Blandy  <jimb@@redhat.com>

	Add support for executables whose debug info has been separated
	out into a separate file, leaving only a link behind.
	* objfiles.h (struct objfile): New fields: separate_debug_objfile
	and separate_debug_objfile_backlink.
	(put_objfile_before): New declaration.
	* symfile.c: #include "filenames.h".
	(symbol_file_add_with_addrs_or_offsets): If this objfile has its
	debug info in a separate file, read that, too. Save the addrs
	argument, so we can use it again to read the separated debug info;
	syms_from_objfile modifies the table we pass it.
	(reread_symbols): After re-reading an objfile, call
	reread_separate_symbols to refresh its separate debug info
	objfile, if it has one.
	(reread_separate_symbols, find_separate_debug_file,
	get_debug_link_info, separate_debug_file_exists): New functions.
	(debug_file_directory): New global var.
	(_initialize_symfile): Initialize debug_file_directory, and
	provide the new `set debug-file-directory' command to let the user
	change it.
	* objfiles.c (free_objfile): If this objfile has its debug info in
	a separate objfile, free that one too.  If this is itself a
	separate debug info objfile, clear our parent's backlink.
	(put_objfile_before): New function.
	* utils.c (gnu_debuglink_crc32): New function.
	* defs.h (gnu_debuglink_crc32): New declaration.
	* Makefile.in (symfile.o): Note dependency on "filenames.h".
	* configure.in: Handle --with-separate-debug-dir config option.
	* acinclude.m4 (AC_DEFINE_DIR): New macro.
	* acconfig.h (DEBUGDIR): New macro.
	* configure, aclocal.m4, config.in: Regenerated.

gdb/doc/ChangeLog:
2003-01-23  Jim Blandy  <jimb@@redhat.com>

	* gdb.texinfo (Separate Debug Files): New section.
@
text
@d51 1
a51 1
#include "inferior.h" /* for signed_pointer_to_address */
d117 1
a117 1
static struct cleanup *exec_error_cleanup_chain; 
d271 1
a271 1
  = (struct cleanup *) xmalloc (sizeof (struct cleanup));
d445 2
a446 1
  continuation_ptr = (struct continuation *) xmalloc (sizeof (struct continuation));
d476 6
a481 6
     {
       (continuation_ptr->continuation_hook) (continuation_ptr->arg_list);
       saved_continuation = continuation_ptr;
       continuation_ptr = continuation_ptr->next;
       xfree (saved_continuation);
     }
d508 2
a509 1
  continuation_ptr = (struct continuation *) xmalloc (sizeof (struct continuation));
d539 6
a544 6
     {
       (continuation_ptr->continuation_hook) (continuation_ptr->arg_list);
       saved_continuation = continuation_ptr;
       continuation_ptr = continuation_ptr->next;
       xfree (saved_continuation);
     }
d561 1
a562 1

d595 1
a595 1
warning (const char *string,...)
d617 1
a617 1
error (const char *string,...)
d662 1
a662 1
  
d690 1
a690 2
const char *file, int line,
		  const char *fmt, va_list ap)
d706 1
a706 1
      abort (); /* NOTE: GDB has only three calls to abort().  */
d733 2
a734 2
	 this lessens the likelhood of GDB going into an infinate
	 loop.  */
d751 2
a752 2
	 `dropping' so that it is easier to see that something went
	 wrong in GDB.  */
d769 1
a769 1
	abort (); /* NOTE: GDB has only three calls to abort().  */
d778 1
a778 1
	    abort (); /* NOTE: GDB has only three calls to abort().  */
d790 1
a790 2
internal_verror (const char *file, int line,
		 const char *fmt, va_list ap)
d810 1
a810 2
internal_vwarning (const char *file, int line,
		   const char *fmt, va_list ap)
d925 2
a926 2
  /* If there is no terminal switching for this target, then we can't
     possibly get screwed by the lack of job control.  */
d931 1
a931 1
	       "Quit (expect signal SIGINT when the program is resumed)\n");
d964 1
a964 1
  return malloc (size); /* NOTE: GDB's only call to malloc() */
d973 1
a973 1
    return realloc (ptr, size); /* NOTE: GDB's only call to ralloc() */
d979 1
a979 1
  return calloc (number, size); /* NOTE: GDB's only call to calloc() */
d985 1
a985 1
  free (ptr); /* NOTE: GDB's only call to free() */
d1034 4
a1037 3
	(gdb_stderr, "warning: failed to install memory consistency checks; ");
      fprintf_unfiltered
	(gdb_stderr, "configuration should define NO_MMCHECK or MMCHECK_FORCE\n");
d1054 2
a1055 1
		      "virtual memory exhausted: can't allocate %ld bytes.", size);
d1059 1
a1059 2
      internal_error (__FILE__, __LINE__,
		      "virtual memory exhausted.");
d1198 1
a1198 2
		    "vasprintf returned NULL buffer (errno %d)",
		    errno);
d1203 1
a1203 2
		    "vasprintf call failed (errno %d)",
		    errno);
d1283 1
a1283 1
query (const char *ctlstr,...)
d1329 1
a1329 1
            ans2 = fgetc (stdin);
d1369 1
a1369 1
         copy, target_charset ());
d1394 2
a1395 8
  else switch (c)
    {
    case '\n':
      return -2;
    case 0:
      (*string_ptr)--;
      return 0;
    case '^':
d1397 10
a1406 30
        /* Remember where this escape sequence started, for reporting
           errors.  */
        char *sequence_start_pos = *string_ptr - 1;

        c = *(*string_ptr)++;

        if (c == '?')
          {
            /* XXXCHARSET: What is `delete' in the host character set?  */
            c = 0177;

            if (! host_char_to_target (c, &target_char))
              error ("There is no character corresponding to `Delete' "
                     "in the target character set `%s'.",
                     host_charset ());

            return target_char;
          }
        else if (c == '\\')
          target_char = parse_escape (string_ptr);
        else
          {
            if (! host_char_to_target (c, &target_char))
              no_control_char_error (sequence_start_pos, *string_ptr);
          }          

        /* Now target_char is something like `c', and we want to find
           its control-character equivalent.  */
        if (! target_char_to_control_char (target_char, &target_char))
          no_control_char_error (sequence_start_pos, *string_ptr);
d1408 28
a1435 2
        return target_char;
      }
d1437 2
a1438 2
      /* XXXCHARSET: we need to use isdigit and value-of-digit
         methods of the host character set here.  */
d1440 33
a1472 25
    case '0':
    case '1':
    case '2':
    case '3':
    case '4':
    case '5':
    case '6':
    case '7':
      {
	register int i = c - '0';
	register int count = 0;
	while (++count < 3)
	  {
	    if ((c = *(*string_ptr)++) >= '0' && c <= '7')
	      {
		i *= 8;
		i += c - '0';
	      }
	    else
	      {
		(*string_ptr)--;
		break;
	      }
	  }
	return i;
a1473 8
    default:
      if (! host_char_to_target (c, &target_char))
        error ("The escape sequence `\%c' is equivalent to plain `%c', which"
               " has no equivalent\n"
               "in the `%s' character set.",
               c, c, target_charset ());
      return target_char;
    }
d1549 2
a1550 1
fputstrn_unfiltered (const char *str, int n, int quoter, struct ui_file *stream)
d1556 1
a1557 1

d1908 1
a1908 2
      if (filter &&
	  (lines_printed >= lines_per_page - 1))
d1956 1
a1956 1
		  *wrap_pointer = '\0';		/* Null-terminate saved stuff */
d2170 1
a2170 1
fprintf_filtered (struct ui_file * stream, const char *format,...)
d2179 1
a2179 1
fprintf_unfiltered (struct ui_file * stream, const char *format,...)
d2191 2
a2192 1
fprintfi_filtered (int spaces, struct ui_file * stream, const char *format,...)
d2204 1
a2204 1
printf_filtered (const char *format,...)
d2214 1
a2214 1
printf_unfiltered (const char *format,...)
d2226 1
a2226 1
printfi_filtered (int spaces, const char *format,...)
d2290 2
a2291 2
fprintf_symbol_filtered (struct ui_file *stream, char *name, enum language lang,
			 int arg_mode)
d2314 2
a2315 2
	      /*demangled = objc_demangle (name);*/
	      /*break;*/
d2375 5
a2379 5
  if (template_string != (char *) NULL && string_to_compare != (char *) NULL &&
      strlen (string_to_compare) <= strlen (template_string))
    match = (strncmp (template_string,
		      string_to_compare,
		      strlen (string_to_compare)) == 0);
d2430 2
a2431 3
	     "Set demangling of encoded C++/ObjC names when displaying symbols.",
		  &setprintlist),
     &showprintlist);
d2436 1
a2436 2
		  "Set state of pagination.", &setlist),
     &showlist);
d2450 1
a2450 2
		  &setprintlist),
     &showprintlist);
d2456 1
a2456 2
		  &setprintlist),
     &showprintlist);
a2463 1

a2464 1

d2513 1
a2513 2
      sprintf (paddr_str, "%s%lu",
	       sign, temp[0]);
d2516 1
a2516 2
      sprintf (paddr_str, "%s%lu%09lu",
	       sign, temp[1], temp[0]);
d2519 1
a2519 2
      sprintf (paddr_str, "%s%lu%09lu%09lu",
	       sign, temp[2], temp[1], temp[0]);
d2522 2
a2523 1
      internal_error (__FILE__, __LINE__, "failed internal consistency check");
d2589 1
a2589 2
	  sprintf (str, "%lx%08lx",
		   high, (unsigned long) (l & 0xffffffff));
d2659 1
a2659 1
	  else if (isxdigit (my_string[i])) 
d2778 1
a2778 2
  if (strlen (dir_name) == 2 &&
      isalpha (dir_name[0]) && dir_name[1] == ':')
d2807 54
a2860 55
  static const unsigned long crc32_table[256] =
    {
      0x00000000, 0x77073096, 0xee0e612c, 0x990951ba, 0x076dc419,
      0x706af48f, 0xe963a535, 0x9e6495a3, 0x0edb8832, 0x79dcb8a4,
      0xe0d5e91e, 0x97d2d988, 0x09b64c2b, 0x7eb17cbd, 0xe7b82d07,
      0x90bf1d91, 0x1db71064, 0x6ab020f2, 0xf3b97148, 0x84be41de,
      0x1adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7, 0x136c9856,
      0x646ba8c0, 0xfd62f97a, 0x8a65c9ec, 0x14015c4f, 0x63066cd9,
      0xfa0f3d63, 0x8d080df5, 0x3b6e20c8, 0x4c69105e, 0xd56041e4,
      0xa2677172, 0x3c03e4d1, 0x4b04d447, 0xd20d85fd, 0xa50ab56b,
      0x35b5a8fa, 0x42b2986c, 0xdbbbc9d6, 0xacbcf940, 0x32d86ce3,
      0x45df5c75, 0xdcd60dcf, 0xabd13d59, 0x26d930ac, 0x51de003a,
      0xc8d75180, 0xbfd06116, 0x21b4f4b5, 0x56b3c423, 0xcfba9599,
      0xb8bda50f, 0x2802b89e, 0x5f058808, 0xc60cd9b2, 0xb10be924,
      0x2f6f7c87, 0x58684c11, 0xc1611dab, 0xb6662d3d, 0x76dc4190,
      0x01db7106, 0x98d220bc, 0xefd5102a, 0x71b18589, 0x06b6b51f,
      0x9fbfe4a5, 0xe8b8d433, 0x7807c9a2, 0x0f00f934, 0x9609a88e,
      0xe10e9818, 0x7f6a0dbb, 0x086d3d2d, 0x91646c97, 0xe6635c01,
      0x6b6b51f4, 0x1c6c6162, 0x856530d8, 0xf262004e, 0x6c0695ed,
      0x1b01a57b, 0x8208f4c1, 0xf50fc457, 0x65b0d9c6, 0x12b7e950,
      0x8bbeb8ea, 0xfcb9887c, 0x62dd1ddf, 0x15da2d49, 0x8cd37cf3,
      0xfbd44c65, 0x4db26158, 0x3ab551ce, 0xa3bc0074, 0xd4bb30e2,
      0x4adfa541, 0x3dd895d7, 0xa4d1c46d, 0xd3d6f4fb, 0x4369e96a,
      0x346ed9fc, 0xad678846, 0xda60b8d0, 0x44042d73, 0x33031de5,
      0xaa0a4c5f, 0xdd0d7cc9, 0x5005713c, 0x270241aa, 0xbe0b1010,
      0xc90c2086, 0x5768b525, 0x206f85b3, 0xb966d409, 0xce61e49f,
      0x5edef90e, 0x29d9c998, 0xb0d09822, 0xc7d7a8b4, 0x59b33d17,
      0x2eb40d81, 0xb7bd5c3b, 0xc0ba6cad, 0xedb88320, 0x9abfb3b6,
      0x03b6e20c, 0x74b1d29a, 0xead54739, 0x9dd277af, 0x04db2615,
      0x73dc1683, 0xe3630b12, 0x94643b84, 0x0d6d6a3e, 0x7a6a5aa8,
      0xe40ecf0b, 0x9309ff9d, 0x0a00ae27, 0x7d079eb1, 0xf00f9344,
      0x8708a3d2, 0x1e01f268, 0x6906c2fe, 0xf762575d, 0x806567cb,
      0x196c3671, 0x6e6b06e7, 0xfed41b76, 0x89d32be0, 0x10da7a5a,
      0x67dd4acc, 0xf9b9df6f, 0x8ebeeff9, 0x17b7be43, 0x60b08ed5,
      0xd6d6a3e8, 0xa1d1937e, 0x38d8c2c4, 0x4fdff252, 0xd1bb67f1,
      0xa6bc5767, 0x3fb506dd, 0x48b2364b, 0xd80d2bda, 0xaf0a1b4c,
      0x36034af6, 0x41047a60, 0xdf60efc3, 0xa867df55, 0x316e8eef,
      0x4669be79, 0xcb61b38c, 0xbc66831a, 0x256fd2a0, 0x5268e236,
      0xcc0c7795, 0xbb0b4703, 0x220216b9, 0x5505262f, 0xc5ba3bbe,
      0xb2bd0b28, 0x2bb45a92, 0x5cb36a04, 0xc2d7ffa7, 0xb5d0cf31,
      0x2cd99e8b, 0x5bdeae1d, 0x9b64c2b0, 0xec63f226, 0x756aa39c,
      0x026d930a, 0x9c0906a9, 0xeb0e363f, 0x72076785, 0x05005713,
      0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0x0cb61b38, 0x92d28e9b,
      0xe5d5be0d, 0x7cdcefb7, 0x0bdbdf21, 0x86d3d2d4, 0xf1d4e242,
      0x68ddb3f8, 0x1fda836e, 0x81be16cd, 0xf6b9265b, 0x6fb077e1,
      0x18b74777, 0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c,
      0x8f659eff, 0xf862ae69, 0x616bffd3, 0x166ccf45, 0xa00ae278,
      0xd70dd2ee, 0x4e048354, 0x3903b3c2, 0xa7672661, 0xd06016f7,
      0x4969474d, 0x3e6e77db, 0xaed16a4a, 0xd9d65adc, 0x40df0b66,
      0x37d83bf0, 0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9,
      0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6, 0xbad03605,
      0xcdd70693, 0x54de5729, 0x23d967bf, 0xb3667a2e, 0xc4614ab8,
      0x5d681b02, 0x2a6f2b94, 0xb40bbe37, 0xc30c8ea1, 0x5a05df1b,
      0x2d02ef8d
    };
@


1.89
log
@2003-01-13  Andrew Cagney  <ac131313@@redhat.com>

	* ax-gdb.c, c-valprint.c, charset.c, corefile.c: Update copyright.
	* demangle.c, disasm.c, dwarf2cfi.c, dwarfread.c: Update copyright.
	* elfread.c, eval.c, expprint.c, expression.h: Update copyright.
	* f-typeprint.c, findvar.c, gcore.c, gdb_mbuild.sh: Update copyright.
	* gdbtypes.h, gnu-v2-abi.c, inferior.h, inftarg.c: Update copyright.
	* language.c, language.h, m32r-tdep.c: Update copyright.
	* mn10200-tdep.c, scm-lang.c, scm-lang.h: Update copyright.
	* somsolib.c, somsolib.h, symfile.c, symtab.h: Update copyright.
	* thread-db.c, typeprint.c, utils.c, valarith.c: Update copyright.
	* values.c, win32-nat.c, x86-64-linux-nat.c: Update copyright.
	* x86-64-linux-tdep.c, z8k-tdep.c: Update copyright.
	* cli/cli-decode.h, config/h8500/tm-h8500.h: Update copyright.

Index: mi/ChangeLog
2003-01-13  Andrew Cagney  <ac131313@@redhat.com>

	* mi-cmd-env.c: Update copyright.
@
text
@d2808 72
@


1.88
log
@2003-01-02  Andrew Cagney  <ac131313@@redhat.com>

	* valarith.c (value_binop): Delete obsolete code and comments.
	* configure.host: Ditto.
	* buildsym.h (make_blockvector): Ditto.
	* buildsym.c (make_blockvector): Ditto.
	* defs.h (enum language): Ditto.
	(chill_demangle): Ditto.
	* elfread.c (elf_symtab_read): Ditto.
	* dwarfread.c (CHILL_PRODUCER): Ditto.
	(set_cu_language): Ditto.
	(handle_producer): Ditto.
	* expprint.c (print_subexp): Ditto.
	* gdbtypes.c (chill_varying_type): Ditto.
	* gdbtypes.h (builtin_type_chill_bool): Ditto.
	(builtin_type_chill_char, builtin_type_chill_long): Ditto.
	(builtin_type_chill_ulong, builtin_type_chill_real): Ditto.
	(chill_varying_type): Ditto.
	* language.h (_LANG_chill): Ditto.
	* language.c (binop_result_type, integral_type): Ditto.
	(character_type, string_type, structured_type): Ditto.
	(lang_bool_type, binop_type_check): Ditto.
	* stabsread.h (os9k_stabs): Ditto.
	* stabsread.c (os9k_type_vector, dbx_lookup_type): Ditto.
	(define_symbol, read_type, read_struct_fields): Ditto.
	(read_array_type, read_enum_type, read_huge_number): Ditto.
	(read_range_type, start_stabs): Ditto.
	* symfile.c (init_filename_language_table): Ditto.
	(add_psymbol_with_dem_name_to_list): Ditto.
	* symtab.c (symbol_init_language_specific): Ditto.
	(symbol_init_demangled_name, symbol_demangled_name): Ditto.
	* symtab.h (struct general_symbol_info): Ditto.
	(SYMBOL_CHILL_DEMANGLED_NAME): Ditto.
	* typeprint.c (typedef_print): Ditto.
	* utils.c (fprintf_symbol_filtered): Ditto.
	* valops.c (value_cast, search_struct_field, value_slice): Delete
	obsolete code.
	(varying_to_slice): Delete function.
	* value.h (COERCE_VARYING_ARRAY): Delete obsolete macro contents.
	(varying_to_slice): Delete declaration.
	* MAINTAINERS: Update.
@
text
@d2 1
d4 2
a5 2
   1996, 1997, 1998, 1999, 2000, 2001, 2002
   Free Software Foundation, Inc.
@


1.87
log
@2002-11-30  Andrew Cagney  <cagney@@redhat.com>

	* exec.c (xfer_memory): Replace boolean with int.
	* p-exp.y: Use 0 instead of false.
	* corelow.c (gdb_check_format): Change return type to int from
	boolean.
	* utils.c: Don't include <curses.h> or <term.h> first.
@
text
@a2315 5
#if 0
	      /* OBSOLETE case language_chill: */
	      /* OBSOLETE   demangled = chill_demangle (name); */
	      /* OBSOLETE   break; */
#endif
@


1.86
log
@Wed Nov 13 19:51:05 2002  Andrew Cagney  <cagney@@redhat.com>

	* utils.c (gdb_realpath): Add comment mentioning realpath with a
 	NULL buffer.
@
text
@a22 17
/* FIXME: cagney/2002-02-28: The GDB coding standard indicates that
   "defs.h" should be included first.  Unfortunatly some systems
   (currently Debian GNU/Linux) include the <stdbool.h> via <curses.h>
   and they clash with "bfd.h"'s definiton of true/false.  The correct
   fix is to remove true/false from "bfd.h", however, until that
   happens, hack around it by including "config.h" and <curses.h>
   first.  */

#include "config.h"

#ifdef HAVE_CURSES_H
#include <curses.h>
#endif
#ifdef HAVE_TERM_H
#include <term.h>
#endif

d53 7
@


1.85
log
@2002-11-12  Andrew Cagney  <ac131313@@redhat.com>

	* utils.c (gdb_realpath): Make rp a constant pointer.
@
text
@d2742 9
@


1.85.2.1
log
@Add support for executables whose debug info has been separated
out into a separate file, leaving only a link behind.
* objfiles.h (struct objfile): New fields: separate_debug_objfile
and separate_debug_objfile_backlink.
(put_objfile_before): New declaration.
* symfile.c (symbol_file_add_with_addrs_or_offsets): If this
objfile has its debug info in a separate file, read that,
too. Save the addrs argument, so we can use it again to read the
separated debug info; syms_from_objfile modifies the table we pass
it.
(reread_symbols): After re-reading an objfile, call
reread_separate_symbols to refresh its separate debug info
objfile, if it has one.
(reread_separate_symbols, find_separate_debug_file,
get_debug_link_info, separate_debug_file_exists): New functions.
(debug_file_directory): New global var.
(_initialize_symfile): Initialize debug_file_directory, and
provide the new `set debug-file-directory' command to let the user
change it.
* objfiles.c (free_objfile): If this objfile has its debug info in
a separate objfile, free that one too.  If this is itself a
separate debug info objfile, clear our parent's backlink.
(put_objfile_before): New function.
* utils.c (calc_crc32): New function.
* defs.h (calc_crc32): New declaration.
* configure.in: Handle --with-separate-debug-dir config option.
* acinclude.m4 (AC_DEFINE_DIR): New macro.
* acconfig.h (DEBUGDIR): New macro.
* configure, aclocal.m4, config.in: Regenerated.
@
text
@a2812 66

unsigned long
calc_crc32 (unsigned long crc, unsigned char *buf, size_t len)
{
  static const unsigned long crc32_table[256] =
    {
      0x00000000, 0x77073096, 0xee0e612c, 0x990951ba, 0x076dc419,
      0x706af48f, 0xe963a535, 0x9e6495a3, 0x0edb8832, 0x79dcb8a4,
      0xe0d5e91e, 0x97d2d988, 0x09b64c2b, 0x7eb17cbd, 0xe7b82d07,
      0x90bf1d91, 0x1db71064, 0x6ab020f2, 0xf3b97148, 0x84be41de,
      0x1adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7, 0x136c9856,
      0x646ba8c0, 0xfd62f97a, 0x8a65c9ec, 0x14015c4f, 0x63066cd9,
      0xfa0f3d63, 0x8d080df5, 0x3b6e20c8, 0x4c69105e, 0xd56041e4,
      0xa2677172, 0x3c03e4d1, 0x4b04d447, 0xd20d85fd, 0xa50ab56b,
      0x35b5a8fa, 0x42b2986c, 0xdbbbc9d6, 0xacbcf940, 0x32d86ce3,
      0x45df5c75, 0xdcd60dcf, 0xabd13d59, 0x26d930ac, 0x51de003a,
      0xc8d75180, 0xbfd06116, 0x21b4f4b5, 0x56b3c423, 0xcfba9599,
      0xb8bda50f, 0x2802b89e, 0x5f058808, 0xc60cd9b2, 0xb10be924,
      0x2f6f7c87, 0x58684c11, 0xc1611dab, 0xb6662d3d, 0x76dc4190,
      0x01db7106, 0x98d220bc, 0xefd5102a, 0x71b18589, 0x06b6b51f,
      0x9fbfe4a5, 0xe8b8d433, 0x7807c9a2, 0x0f00f934, 0x9609a88e,
      0xe10e9818, 0x7f6a0dbb, 0x086d3d2d, 0x91646c97, 0xe6635c01,
      0x6b6b51f4, 0x1c6c6162, 0x856530d8, 0xf262004e, 0x6c0695ed,
      0x1b01a57b, 0x8208f4c1, 0xf50fc457, 0x65b0d9c6, 0x12b7e950,
      0x8bbeb8ea, 0xfcb9887c, 0x62dd1ddf, 0x15da2d49, 0x8cd37cf3,
      0xfbd44c65, 0x4db26158, 0x3ab551ce, 0xa3bc0074, 0xd4bb30e2,
      0x4adfa541, 0x3dd895d7, 0xa4d1c46d, 0xd3d6f4fb, 0x4369e96a,
      0x346ed9fc, 0xad678846, 0xda60b8d0, 0x44042d73, 0x33031de5,
      0xaa0a4c5f, 0xdd0d7cc9, 0x5005713c, 0x270241aa, 0xbe0b1010,
      0xc90c2086, 0x5768b525, 0x206f85b3, 0xb966d409, 0xce61e49f,
      0x5edef90e, 0x29d9c998, 0xb0d09822, 0xc7d7a8b4, 0x59b33d17,
      0x2eb40d81, 0xb7bd5c3b, 0xc0ba6cad, 0xedb88320, 0x9abfb3b6,
      0x03b6e20c, 0x74b1d29a, 0xead54739, 0x9dd277af, 0x04db2615,
      0x73dc1683, 0xe3630b12, 0x94643b84, 0x0d6d6a3e, 0x7a6a5aa8,
      0xe40ecf0b, 0x9309ff9d, 0x0a00ae27, 0x7d079eb1, 0xf00f9344,
      0x8708a3d2, 0x1e01f268, 0x6906c2fe, 0xf762575d, 0x806567cb,
      0x196c3671, 0x6e6b06e7, 0xfed41b76, 0x89d32be0, 0x10da7a5a,
      0x67dd4acc, 0xf9b9df6f, 0x8ebeeff9, 0x17b7be43, 0x60b08ed5,
      0xd6d6a3e8, 0xa1d1937e, 0x38d8c2c4, 0x4fdff252, 0xd1bb67f1,
      0xa6bc5767, 0x3fb506dd, 0x48b2364b, 0xd80d2bda, 0xaf0a1b4c,
      0x36034af6, 0x41047a60, 0xdf60efc3, 0xa867df55, 0x316e8eef,
      0x4669be79, 0xcb61b38c, 0xbc66831a, 0x256fd2a0, 0x5268e236,
      0xcc0c7795, 0xbb0b4703, 0x220216b9, 0x5505262f, 0xc5ba3bbe,
      0xb2bd0b28, 0x2bb45a92, 0x5cb36a04, 0xc2d7ffa7, 0xb5d0cf31,
      0x2cd99e8b, 0x5bdeae1d, 0x9b64c2b0, 0xec63f226, 0x756aa39c,
      0x026d930a, 0x9c0906a9, 0xeb0e363f, 0x72076785, 0x05005713,
      0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0x0cb61b38, 0x92d28e9b,
      0xe5d5be0d, 0x7cdcefb7, 0x0bdbdf21, 0x86d3d2d4, 0xf1d4e242,
      0x68ddb3f8, 0x1fda836e, 0x81be16cd, 0xf6b9265b, 0x6fb077e1,
      0x18b74777, 0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c,
      0x8f659eff, 0xf862ae69, 0x616bffd3, 0x166ccf45, 0xa00ae278,
      0xd70dd2ee, 0x4e048354, 0x3903b3c2, 0xa7672661, 0xd06016f7,
      0x4969474d, 0x3e6e77db, 0xaed16a4a, 0xd9d65adc, 0x40df0b66,
      0x37d83bf0, 0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9,
      0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6, 0xbad03605,
      0xcdd70693, 0x54de5729, 0x23d967bf, 0xb3667a2e, 0xc4614ab8,
      0x5d681b02, 0x2a6f2b94, 0xb40bbe37, 0xc30c8ea1, 0x5a05df1b,
      0x2d02ef8d
    };
  unsigned char *end;

  crc = ~crc & 0xffffffff;
  for (end = buf + len; buf < end; ++buf)
    crc = crc32_table[(crc ^ *buf) & 0xff] ^ (crc >> 8);
  return ~crc & 0xffffffff;;
}
@


1.85.2.2
log
@Back initial version of Alex Larsson's change off the branch, so we
can revise it.
@
text
@d2813 66
@


1.84
log
@2002-11-12  Andrew Cagney  <ac131313@@redhat.com>

	* utils.c (gdb_realpath): Rewrite.  Try, in order: realpath() with
	a constant buffer; cannonicalize_file_name(); realpath() with a
	pathconf() defined buffer, xstrdup().
@
text
@d2721 1
a2721 1
    char *rp = realpath (filename, buf);
@


1.83
log
@2002-10-24  Martin M. Hunt  <hunt@@redhat.com>

	* utils.c (string_to_core_addr): Revert patch from 11 Oct.
@
text
@d2707 4
d2712 1
d2714 1
a2714 1
  char buf[PATH_MAX];
d2717 1
a2717 4
  char buf[MAXPATHLEN];
#  define USE_REALPATH
# elif defined (HAVE_UNISTD_H) && defined(HAVE_ALLOCA)
  char *buf = alloca ((size_t)pathconf ("/", _PC_PATH_MAX));
d2719 7
d2729 35
a2763 10
#if defined(USE_REALPATH)
  char *rp = realpath (filename, buf);
  return xstrdup (rp ? rp : filename);
#elif defined(HAVE_CANONICALIZE_FILE_NAME)
  char *rp = canonicalize_file_name (filename);
  if (rp == NULL)
    return xstrdup (filename);
  else
    return rp;
#else
a2764 1
#endif
@


1.82
log
@utils.c (puts_filtered_tabular): New function.
(fprintf_symbol_filtered): Get ObjC demangled name.
defs.h (puts_filtered_tabular): Declared.
@
text
@a2700 2
  if (INTEGER_TO_ADDRESS_P ())
    addr = INTEGER_TO_ADDRESS (builtin_type_void_data_ptr, &addr); 
@


1.81
log
@2002-10-11  Martin M. Hunt  <hunt@@redhat.com>

	* utils.c (string_to_core_addr): After turning string into
	a number, convert to a CORE_ADDR using INTEGER_TO_ADDRESS
	which will do necessary sign-extension, etc.
@
text
@d156 2
a157 2
/* Nonzero means that encoded C++ names should be printed out in their
   C++ form rather than raw.  */
d161 2
a162 2
/* Nonzero means that encoded C++ names should be printed out in their
   C++ form even in assembler language displays.  If this is set, but
d1820 45
d2292 1
a2292 1
/* C++ demangler stuff.  */
d2322 4
d2445 1
a2445 1
	     "Set demangling of encoded C++ names when displaying symbols.",
d2473 1
a2473 1
		  "Set demangling of C++ names in disassembly listings.",
@


1.80
log
@Add support for distinct host and target character sets.
@
text
@d2652 2
@


1.80.4.1
log
@Merge drow-cplus-merge-20021025 to drow-cplus-branch.
@
text
@d156 2
a157 2
/* Nonzero means that encoded C++/ObjC names should be printed out in their
   C++/ObjC form rather than raw.  */
d161 2
a162 2
/* Nonzero means that encoded C++/ObjC names should be printed out in their
   C++/ObjC form even in assembler language displays.  If this is set, but
a1819 45
/* Print input string to gdb_stdout, filtered, with wrap, 
   arranging strings in columns of n chars. String can be
   right or left justified in the column.  Never prints 
   trailing spaces.  String should never be longer than
   width.  FIXME: this could be useful for the EXAMINE 
   command, which currently doesn't tabulate very well */

void
puts_filtered_tabular (char *string, int width, int right)
{
  int spaces = 0;
  int stringlen;
  char *spacebuf;

  gdb_assert (chars_per_line > 0);
  if (chars_per_line == UINT_MAX)
    {
      fputs_filtered (string, gdb_stdout);
      fputs_filtered ("\n", gdb_stdout);
      return;
    }

  if (((chars_printed - 1) / width + 2) * width >= chars_per_line)
    fputs_filtered ("\n", gdb_stdout);

  if (width >= chars_per_line)
    width = chars_per_line - 1;

  stringlen = strlen (string);

  if (chars_printed > 0)
    spaces = width - (chars_printed - 1) % width - 1;
  if (right)
    spaces += width - stringlen;

  spacebuf = alloca (spaces + 1);
  spacebuf[spaces] = '\0';
  while (spaces--)
    spacebuf[spaces] = ' ';

  fputs_filtered (spacebuf, gdb_stdout);
  fputs_filtered (string, gdb_stdout);
}


d2247 1
a2247 1
/* C++/ObjC demangler stuff.  */
a2276 4
	    case language_objc:
	      /* Commented out until ObjC handling is enabled.  */
	      /*demangled = objc_demangle (name);*/
	      /*break;*/
d2396 1
a2396 1
	     "Set demangling of encoded C++/ObjC names when displaying symbols.",
d2424 1
a2424 1
		  "Set demangling of C++/ObjC names in disassembly listings.",
@


1.80.4.2
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@a1 1

d3 2
a4 2
   1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003 Free Software
   Foundation, Inc.
d23 17
d67 1
a67 1
#include "inferior.h"		/* for signed_pointer_to_address */
a70 7
#ifdef HAVE_CURSES_H
#include <curses.h>
#endif
#ifdef HAVE_TERM_H
#include <term.h>
#endif

d78 1
a78 1
extern PTR malloc ();		/* OK: PTR */
d81 1
a81 1
extern PTR realloc ();		/* OK: PTR */
d114 2
a115 1
static void set_screen_size (void);
d126 1
a126 1
static struct cleanup *exec_error_cleanup_chain;
d279 3
a281 3
  struct cleanup *new
    = (struct cleanup *) xmalloc (sizeof (struct cleanup));
  struct cleanup *old_chain = *pmy_chain;
d295 1
a295 1
do_cleanups (struct cleanup *old_chain)
d301 1
a301 1
do_final_cleanups (struct cleanup *old_chain)
d307 1
a307 1
do_run_cleanups (struct cleanup *old_chain)
d313 1
a313 1
do_exec_cleanups (struct cleanup *old_chain)
d319 1
a319 1
do_exec_error_cleanups (struct cleanup *old_chain)
d325 2
a326 2
do_my_cleanups (struct cleanup **pmy_chain,
		struct cleanup *old_chain)
d328 1
a328 1
  struct cleanup *ptr;
d341 1
a341 1
discard_cleanups (struct cleanup *old_chain)
d347 1
a347 1
discard_final_cleanups (struct cleanup *old_chain)
d353 1
a353 1
discard_exec_error_cleanups (struct cleanup *old_chain)
d359 2
a360 2
discard_my_cleanups (struct cleanup **pmy_chain,
		     struct cleanup *old_chain)
d362 1
a362 1
  struct cleanup *ptr;
d440 1
d454 1
a454 2
  continuation_ptr =
    (struct continuation *) xmalloc (sizeof (struct continuation));
d484 6
a489 6
    {
      (continuation_ptr->continuation_hook) (continuation_ptr->arg_list);
      saved_continuation = continuation_ptr;
      continuation_ptr = continuation_ptr->next;
      xfree (saved_continuation);
    }
d516 1
a516 2
  continuation_ptr =
    (struct continuation *) xmalloc (sizeof (struct continuation));
d546 6
a551 6
    {
      (continuation_ptr->continuation_hook) (continuation_ptr->arg_list);
      saved_continuation = continuation_ptr;
      continuation_ptr = continuation_ptr->next;
      xfree (saved_continuation);
    }
d568 1
a570 1

d588 1
a588 1
	fputs_unfiltered (warning_pre_print, gdb_stderr);
d602 1
a602 1
warning (const char *string, ...)
d624 1
a624 1
error (const char *string, ...)
d654 1
a654 1
    fputs_filtered (error_pre_print, gdb_stderr);
d669 1
a669 1

d697 2
a698 1
		   const char *file, int line, const char *fmt, va_list ap)
d700 1
a703 1
  char *reason;
d706 14
a719 17
  {
    static char msg[] = "Recursive internal problem.\n";
    switch (dejavu)
      {
      case 0:
	dejavu = 1;
	break;
      case 1:
	dejavu = 2;
	fputs_unfiltered (msg, gdb_stderr);
	abort ();	/* NOTE: GDB has only three calls to abort().  */
      default:
	dejavu = 3;
	write (STDERR_FILENO, msg, sizeof (msg));
	exit (1);
      }
  }
d725 11
a735 15
  /* Create a string containing the full error/warning message.  Need
     to call query with this full string, as otherwize the reason
     (error/warning) and question become separated.  Format using a
     style similar to a compiler error message.  Include extra detail
     so that the user knows that they are living on the edge.  */
  {
    char *msg;
    xvasprintf (&msg, fmt, ap);
    xasprintf (&reason, "\
%s:%d: %s: %s\n\
A problem internal to GDB has been detected,\n\
further debugging may prove unreliable.", file, line, problem->name, msg);
    xfree (msg);
    make_cleanup (xfree, reason);
  }
d741 3
a743 3
         this lessens the likelhood of GDB going into an infinate
         loop.  */
      quit_p = query ("%s\nQuit this debugging session? ", reason);
d759 3
a761 3
         `dropping' so that it is easier to see that something went
         wrong in GDB.  */
      dump_core_p = query ("%s\nCreate a core file of GDB? ", reason);
d777 1
a777 1
	abort ();		/* NOTE: GDB has only three calls to abort().  */
d786 1
a786 1
	    abort ();		/* NOTE: GDB has only three calls to abort().  */
d798 2
a799 1
internal_verror (const char *file, int line, const char *fmt, va_list ap)
d819 2
a820 1
internal_vwarning (const char *file, int line, const char *fmt, va_list ap)
d844 1
a844 2
  msg = strerror (errnum);
  if (msg == NULL)
d927 1
a927 1
    fputs_unfiltered (quit_pre_print, gdb_stderr);
d935 2
a936 2
      /* If there is no terminal switching for this target, then we can't
         possibly get screwed by the lack of job control.  */
d941 1
a941 1
			"Quit (expect signal SIGINT when the program is resumed)\n");
d968 3
d974 1
a974 1
  return malloc (size);		/* NOTE: GDB's only call to malloc() */
d983 1
a983 1
    return realloc (ptr, size);	/* NOTE: GDB's only call to ralloc() */
d989 1
a989 1
  return calloc (number, size);	/* NOTE: GDB's only call to calloc() */
d995 1
a995 1
  free (ptr);			/* NOTE: GDB's only call to free() */
d1044 3
a1046 4
	(gdb_stderr,
	 "warning: failed to install memory consistency checks; ");
      fprintf_unfiltered (gdb_stderr,
			  "configuration should define NO_MMCHECK or MMCHECK_FORCE\n");
d1063 1
a1063 2
		      "virtual memory exhausted: can't allocate %ld bytes.",
		      size);
d1067 2
a1068 1
      internal_error (__FILE__, __LINE__, "virtual memory exhausted.");
a1086 2
  /* See libiberty/xmalloc.c.  This function need's to match that's
     semantics.  It never returns NULL.  */
d1088 9
a1096 6
    size = 1;

  val = mmalloc (md, size);
  if (val == NULL)
    nomem (size);

a1104 2
  /* See libiberty/xmalloc.c.  This function need's to match that's
     semantics.  It never returns NULL.  */
d1106 5
a1110 4
    size = 1;

  if (ptr != NULL)
    val = mrealloc (md, ptr, size);
d1112 14
a1125 4
    val = mmalloc (md, size);
  if (val == NULL)
    nomem (size);

a1132 3

  /* See libiberty/xmalloc.c.  This function need's to match that's
     semantics.  It never returns NULL.  */
d1134 2
d1137 3
a1139 2
      number = 1;
      size = 1;
a1140 5

  mem = mcalloc (md, number, size);
  if (mem == NULL)
    nomem (number * size);

d1162 1
a1162 1
PTR				/* OK: PTR */
d1168 2
a1169 2
PTR				/* OK: PTR */
xrealloc (PTR ptr, size_t size)	/* OK: PTR */
d1174 1
a1174 1
PTR				/* OK: PTR */
a1189 11
char *
xstrprintf (const char *format, ...)
{
  char *ret;
  va_list args;
  va_start (args, format);
  xvasprintf (&ret, format, args);
  va_end (args);
  return ret;
}

d1207 2
a1208 1
		    "vasprintf returned NULL buffer (errno %d)", errno);
d1213 2
a1214 1
		    "vasprintf call failed (errno %d)", errno);
d1224 1
a1224 1
  int val;
d1247 1
a1247 1
  char *p = (char *) xmalloc (size + 1);
d1256 1
a1256 1
  char *p = (char *) xmmalloc (md, size + 1);
d1269 1
a1269 1
print_spaces (int n, struct ui_file *file)
d1277 1
a1277 1
gdb_print_host_address (const void *addr, struct ui_file *stream)
d1294 1
a1294 1
query (const char *ctlstr, ...)
d1297 2
a1298 2
  int answer;
  int ans2;
d1340 1
a1340 1
	    ans2 = fgetc (stdin);
d1380 1
a1380 1
	 copy, target_charset ());
d1402 1
a1402 1
  int c = *(*string_ptr)++;
d1405 8
a1412 2
  else
    switch (c)
d1414 30
a1443 10
      case '\n':
	return -2;
      case 0:
	(*string_ptr)--;
	return 0;
      case '^':
	{
	  /* Remember where this escape sequence started, for reporting
	     errors.  */
	  char *sequence_start_pos = *string_ptr - 1;
d1445 2
a1446 1
	  c = *(*string_ptr)++;
d1448 2
a1449 4
	  if (c == '?')
	    {
	      /* XXXCHARSET: What is `delete' in the host character set?  */
	      c = 0177;
d1451 25
a1475 59
	      if (!host_char_to_target (c, &target_char))
		error ("There is no character corresponding to `Delete' "
		       "in the target character set `%s'.", host_charset ());

	      return target_char;
	    }
	  else if (c == '\\')
	    target_char = parse_escape (string_ptr);
	  else
	    {
	      if (!host_char_to_target (c, &target_char))
		no_control_char_error (sequence_start_pos, *string_ptr);
	    }

	  /* Now target_char is something like `c', and we want to find
	     its control-character equivalent.  */
	  if (!target_char_to_control_char (target_char, &target_char))
	    no_control_char_error (sequence_start_pos, *string_ptr);

	  return target_char;
	}

	/* XXXCHARSET: we need to use isdigit and value-of-digit
	   methods of the host character set here.  */

      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
	{
	  int i = c - '0';
	  int count = 0;
	  while (++count < 3)
	    {
	      c = (**string_ptr);
	      if (c >= '0' && c <= '7')
		{
		  (*string_ptr)++;
		  i *= 8;
		  i += c - '0';
		}
	      else
		{
		  break;
		}
	    }
	  return i;
	}
      default:
	if (!host_char_to_target (c, &target_char))
	  error
	    ("The escape sequence `\%c' is equivalent to plain `%c', which"
	     " has no equivalent\n" "in the `%s' character set.", c, c,
	     target_charset ());
	return target_char;
d1477 8
d1560 1
a1560 2
fputstrn_unfiltered (const char *str, int n, int quoter,
		     struct ui_file *stream)
d1566 1
a1570 1

a1572 1

d1601 1
a1601 2
/* Inialize the number of lines per page and chars per line.  */

d1609 2
d1615 9
a1623 1
      int rows, cols;
d1625 2
a1626 2
      /* Make sure Readline has initialized its terminal settings.  */
      rl_reset_terminal (NULL);
d1628 3
a1630 4
      /* Get the screen size from Readline.  */
      rl_get_screen_size (&rows, &cols);
      lines_per_page = rows;
      chars_per_line = cols;
d1632 25
a1656 8
      /* Readline should have fetched the termcap entry for us.  */
      if (tgetnum ("li") < 0 || getenv ("EMACS"))
	{
	  /* The number of lines per page is not mentioned in the
	     terminal description.  This probably means that paging is
	     not useful (e.g. emacs shell window), so disable paging.  */
	  lines_per_page = UINT_MAX;
	}
a1657 1
      /* FIXME: Get rid of this junk.  */
d1659 2
d1663 1
a1663 1

d1667 1
a1667 4
    }
#endif

  set_screen_size ();
a1670 21
/* Set the screen size based on LINES_PER_PAGE and CHARS_PER_LINE.  */

static void
set_screen_size (void)
{
  int rows = lines_per_page;
  int cols = chars_per_line;

  if (rows <= 0)
    rows = INT_MAX;

  if (cols <= 0)
    rl_get_screen_size (NULL, &cols);

  /* Update Readline's idea of the terminal size.  */
  rl_set_screen_size (rows, cols);
}

/* Reinitialize WRAP_BUFFER according to the current value of
   CHARS_PER_LINE.  */

d1684 1
a1684 1
  wrap_pointer = wrap_buffer;	/* Start it at the beginning.  */
d1687 1
a1690 1
  set_screen_size ();
a1693 6
static void
set_height_command (char *args, int from_tty, struct cmd_list_element *c)
{
  set_screen_size ();
}

d1918 2
a1919 1
      if (filter && (lines_printed >= lines_per_page - 1))
d1967 1
a1967 1
		  *wrap_pointer = '\0';	/* Null-terminate saved stuff */
d2181 1
a2181 1
fprintf_filtered (struct ui_file *stream, const char *format, ...)
d2190 1
a2190 1
fprintf_unfiltered (struct ui_file *stream, const char *format, ...)
d2202 1
a2202 2
fprintfi_filtered (int spaces, struct ui_file *stream, const char *format,
		   ...)
d2214 1
a2214 1
printf_filtered (const char *format, ...)
d2224 1
a2224 1
printf_unfiltered (const char *format, ...)
d2236 1
a2236 1
printfi_filtered (int spaces, const char *format, ...)
d2300 2
a2301 2
fprintf_symbol_filtered (struct ui_file *stream, char *name,
			 enum language lang, int arg_mode)
d2314 21
a2334 1
	  demangled = language_demangle (language_def (lang), name, arg_mode);
a2377 88

/* This is like strcmp except that it ignores whitespace and treats
   '(' as the first non-NULL character in terms of ordering.  Like
   strcmp (and unlike strcmp_iw), it returns negative if STRING1 <
   STRING2, 0 if STRING2 = STRING2, and positive if STRING1 > STRING2
   according to that ordering.

   If a list is sorted according to this function and if you want to
   find names in the list that match some fixed NAME according to
   strcmp_iw(LIST_ELT, NAME), then the place to start looking is right
   where this function would put NAME.

   Here are some examples of why using strcmp to sort is a bad idea:

   Whitespace example:

   Say your partial symtab contains: "foo<char *>", "goo".  Then, if
   we try to do a search for "foo<char*>", strcmp will locate this
   after "foo<char *>" and before "goo".  Then lookup_partial_symbol
   will start looking at strings beginning with "goo", and will never
   see the correct match of "foo<char *>".

   Parenthesis example:

   In practice, this is less like to be an issue, but I'll give it a
   shot.  Let's assume that '$' is a legitimate character to occur in
   symbols.  (Which may well even be the case on some systems.)  Then
   say that the partial symbol table contains "foo$" and "foo(int)".
   strcmp will put them in this order, since '$' < '('.  Now, if the
   user searches for "foo", then strcmp will sort "foo" before "foo$".
   Then lookup_partial_symbol will notice that strcmp_iw("foo$",
   "foo") is false, so it won't proceed to the actual match of
   "foo(int)" with "foo".  */

int
strcmp_iw_ordered (const char *string1, const char *string2)
{
  while ((*string1 != '\0') && (*string2 != '\0'))
    {
      while (isspace (*string1))
	{
	  string1++;
	}
      while (isspace (*string2))
	{
	  string2++;
	}
      if (*string1 != *string2)
	{
	  break;
	}
      if (*string1 != '\0')
	{
	  string1++;
	  string2++;
	}
    }

  switch (*string1)
    {
      /* Characters are non-equal unless they're both '\0'; we want to
	 make sure we get the comparison right according to our
	 comparison in the cases where one of them is '\0' or '('.  */
    case '\0':
      if (*string2 == '\0')
	return 0;
      else
	return -1;
    case '(':
      if (*string2 == '\0')
	return 1;
      else
	return -1;
    default:
      if (*string2 == '(')
	return 1;
      else
	return *string1 - *string2;
    }
}

/* A simple comparison function with opposite semantics to strcmp.  */

int
streq (const char *lhs, const char *rhs)
{
  return !strcmp (lhs, rhs);
}
d2390 5
a2394 5
  if (template_string != (char *) NULL && string_to_compare != (char *) NULL
      && strlen (string_to_compare) <= strlen (template_string))
    match =
      (strncmp
       (template_string, string_to_compare, strlen (string_to_compare)) == 0);
d2421 2
a2422 1
  c = add_set_cmd ("width", class_support, var_uinteger, &chars_per_line,
d2428 5
a2432 4
  c = add_set_cmd ("height", class_support, var_uinteger, &lines_per_page,
		   "Set number of lines gdb thinks are in a page.", &setlist);
  add_show_from_set (c, &showlist);
  set_cmd_sfunc (c, set_height_command);
d2436 6
d2445 3
a2447 2
		  "Set demangling of encoded C++/ObjC names when displaying symbols.",
		  &setprintlist), &showprintlist);
d2452 2
a2453 1
		  "Set state of pagination.", &setlist), &showlist);
d2467 2
a2468 1
		  &setprintlist), &showprintlist);
d2474 2
a2475 1
		  &setprintlist), &showprintlist);
d2483 1
d2485 1
d2534 2
a2535 1
      sprintf (paddr_str, "%s%lu", sign, temp[0]);
d2538 2
a2539 1
      sprintf (paddr_str, "%s%lu%09lu", sign, temp[1], temp[0]);
d2542 2
a2543 1
      sprintf (paddr_str, "%s%lu%09lu%09lu", sign, temp[2], temp[1], temp[0]);
d2546 1
a2546 2
      internal_error (__FILE__, __LINE__,
		      "failed internal consistency check");
d2612 2
a2613 1
	  sprintf (str, "%lx%08lx", high, (unsigned long) (l & 0xffffffff));
d2632 19
d2683 1
a2683 1
	  else if (isxdigit (my_string[i]))
a2706 4
  /* Method 1: The system has a compile time upper bound on a filename
     path.  Use that and realpath() to canonicalize the name.  This is
     the most common case.  Note that, if there isn't a compile time
     upper bound, you want to avoid realpath() at all costs.  */
a2707 1
  {
d2709 1
a2709 1
    char buf[PATH_MAX];
d2712 4
a2715 1
    char buf[MAXPATHLEN];
a2717 7
# if defined (USE_REALPATH)
    const char *rp = realpath (filename, buf);
    if (rp == NULL)
      rp = filename;
    return xstrdup (rp);
# endif
  }
d2720 11
a2730 41
  /* Method 2: The host system (i.e., GNU) has the function
     canonicalize_file_name() which malloc's a chunk of memory and
     returns that, use that.  */
#if defined(HAVE_CANONICALIZE_FILE_NAME)
  {
    char *rp = canonicalize_file_name (filename);
    if (rp == NULL)
      return xstrdup (filename);
    else
      return rp;
  }
#endif

  /* FIXME: cagney/2002-11-13:

     Method 2a: Use realpath() with a NULL buffer.  Some systems, due
     to the problems described in in method 3, have modified their
     realpath() implementation so that it will allocate a buffer when
     NULL is passed in.  Before this can be used, though, some sort of
     configure time test would need to be added.  Otherwize the code
     will likely core dump.  */

  /* Method 3: Now we're getting desperate!  The system doesn't have a
     compile time buffer size and no alternative function.  Query the
     OS, using pathconf(), for the buffer limit.  Care is needed
     though, some systems do not limit PATH_MAX (return -1 for
     pathconf()) making it impossible to pass a correctly sized buffer
     to realpath() (it could always overflow).  On those systems, we
     skip this.  */
#if defined (HAVE_REALPATH) && defined (HAVE_UNISTD_H) && defined(HAVE_ALLOCA)
  {
    /* Find out the max path size.  */
    long path_max = pathconf ("/", _PC_PATH_MAX);
    if (path_max > 0)
      {
	/* PATH_MAX is bounded.  */
	char *buf = alloca (path_max);
	char *rp = realpath (filename, buf);
	return xstrdup (rp ? rp : filename);
      }
  }
a2731 3

  /* This system is a lost cause, just dup the buffer.  */
  return xstrdup (filename);
d2760 2
a2761 1
  if (strlen (dir_name) == 2 && isalpha (dir_name[0]) && dir_name[1] == ':')
a2778 87
}


/* This is the 32-bit CRC function used by the GNU separate debug
   facility.  An executable may contain a section named
   .gnu_debuglink, which holds the name of a separate executable file
   containing its debug info, and a checksum of that file's contents,
   computed using this function.  */
unsigned long
gnu_debuglink_crc32 (unsigned long crc, unsigned char *buf, size_t len)
{
  static const unsigned long crc32_table[256] = {
    0x00000000, 0x77073096, 0xee0e612c, 0x990951ba, 0x076dc419,
    0x706af48f, 0xe963a535, 0x9e6495a3, 0x0edb8832, 0x79dcb8a4,
    0xe0d5e91e, 0x97d2d988, 0x09b64c2b, 0x7eb17cbd, 0xe7b82d07,
    0x90bf1d91, 0x1db71064, 0x6ab020f2, 0xf3b97148, 0x84be41de,
    0x1adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7, 0x136c9856,
    0x646ba8c0, 0xfd62f97a, 0x8a65c9ec, 0x14015c4f, 0x63066cd9,
    0xfa0f3d63, 0x8d080df5, 0x3b6e20c8, 0x4c69105e, 0xd56041e4,
    0xa2677172, 0x3c03e4d1, 0x4b04d447, 0xd20d85fd, 0xa50ab56b,
    0x35b5a8fa, 0x42b2986c, 0xdbbbc9d6, 0xacbcf940, 0x32d86ce3,
    0x45df5c75, 0xdcd60dcf, 0xabd13d59, 0x26d930ac, 0x51de003a,
    0xc8d75180, 0xbfd06116, 0x21b4f4b5, 0x56b3c423, 0xcfba9599,
    0xb8bda50f, 0x2802b89e, 0x5f058808, 0xc60cd9b2, 0xb10be924,
    0x2f6f7c87, 0x58684c11, 0xc1611dab, 0xb6662d3d, 0x76dc4190,
    0x01db7106, 0x98d220bc, 0xefd5102a, 0x71b18589, 0x06b6b51f,
    0x9fbfe4a5, 0xe8b8d433, 0x7807c9a2, 0x0f00f934, 0x9609a88e,
    0xe10e9818, 0x7f6a0dbb, 0x086d3d2d, 0x91646c97, 0xe6635c01,
    0x6b6b51f4, 0x1c6c6162, 0x856530d8, 0xf262004e, 0x6c0695ed,
    0x1b01a57b, 0x8208f4c1, 0xf50fc457, 0x65b0d9c6, 0x12b7e950,
    0x8bbeb8ea, 0xfcb9887c, 0x62dd1ddf, 0x15da2d49, 0x8cd37cf3,
    0xfbd44c65, 0x4db26158, 0x3ab551ce, 0xa3bc0074, 0xd4bb30e2,
    0x4adfa541, 0x3dd895d7, 0xa4d1c46d, 0xd3d6f4fb, 0x4369e96a,
    0x346ed9fc, 0xad678846, 0xda60b8d0, 0x44042d73, 0x33031de5,
    0xaa0a4c5f, 0xdd0d7cc9, 0x5005713c, 0x270241aa, 0xbe0b1010,
    0xc90c2086, 0x5768b525, 0x206f85b3, 0xb966d409, 0xce61e49f,
    0x5edef90e, 0x29d9c998, 0xb0d09822, 0xc7d7a8b4, 0x59b33d17,
    0x2eb40d81, 0xb7bd5c3b, 0xc0ba6cad, 0xedb88320, 0x9abfb3b6,
    0x03b6e20c, 0x74b1d29a, 0xead54739, 0x9dd277af, 0x04db2615,
    0x73dc1683, 0xe3630b12, 0x94643b84, 0x0d6d6a3e, 0x7a6a5aa8,
    0xe40ecf0b, 0x9309ff9d, 0x0a00ae27, 0x7d079eb1, 0xf00f9344,
    0x8708a3d2, 0x1e01f268, 0x6906c2fe, 0xf762575d, 0x806567cb,
    0x196c3671, 0x6e6b06e7, 0xfed41b76, 0x89d32be0, 0x10da7a5a,
    0x67dd4acc, 0xf9b9df6f, 0x8ebeeff9, 0x17b7be43, 0x60b08ed5,
    0xd6d6a3e8, 0xa1d1937e, 0x38d8c2c4, 0x4fdff252, 0xd1bb67f1,
    0xa6bc5767, 0x3fb506dd, 0x48b2364b, 0xd80d2bda, 0xaf0a1b4c,
    0x36034af6, 0x41047a60, 0xdf60efc3, 0xa867df55, 0x316e8eef,
    0x4669be79, 0xcb61b38c, 0xbc66831a, 0x256fd2a0, 0x5268e236,
    0xcc0c7795, 0xbb0b4703, 0x220216b9, 0x5505262f, 0xc5ba3bbe,
    0xb2bd0b28, 0x2bb45a92, 0x5cb36a04, 0xc2d7ffa7, 0xb5d0cf31,
    0x2cd99e8b, 0x5bdeae1d, 0x9b64c2b0, 0xec63f226, 0x756aa39c,
    0x026d930a, 0x9c0906a9, 0xeb0e363f, 0x72076785, 0x05005713,
    0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0x0cb61b38, 0x92d28e9b,
    0xe5d5be0d, 0x7cdcefb7, 0x0bdbdf21, 0x86d3d2d4, 0xf1d4e242,
    0x68ddb3f8, 0x1fda836e, 0x81be16cd, 0xf6b9265b, 0x6fb077e1,
    0x18b74777, 0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c,
    0x8f659eff, 0xf862ae69, 0x616bffd3, 0x166ccf45, 0xa00ae278,
    0xd70dd2ee, 0x4e048354, 0x3903b3c2, 0xa7672661, 0xd06016f7,
    0x4969474d, 0x3e6e77db, 0xaed16a4a, 0xd9d65adc, 0x40df0b66,
    0x37d83bf0, 0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9,
    0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6, 0xbad03605,
    0xcdd70693, 0x54de5729, 0x23d967bf, 0xb3667a2e, 0xc4614ab8,
    0x5d681b02, 0x2a6f2b94, 0xb40bbe37, 0xc30c8ea1, 0x5a05df1b,
    0x2d02ef8d
  };
  unsigned char *end;

  crc = ~crc & 0xffffffff;
  for (end = buf + len; buf < end; ++buf)
    crc = crc32_table[(crc ^ *buf) & 0xff] ^ (crc >> 8);
  return ~crc & 0xffffffff;;
}

ULONGEST
align_up (ULONGEST v, int n)
{
  /* Check that N is really a power of two.  */
  gdb_assert (n && (n & (n-1)) == 0);
  return (v + n - 1) & -n;
}

ULONGEST
align_down (ULONGEST v, int n)
{
  /* Check that N is really a power of two.  */
  gdb_assert (n && (n & (n-1)) == 0);
  return (v & -n);
@


1.80.4.3
log
@Merge mainline to branch.  GDB is broken until I update cp-names.y.
@
text
@a98 2
static void do_my_cleanups (struct cleanup **, struct cleanup *);

d314 1
a314 1
static void
@


1.80.4.4
log
@Merge drow-cplus-merge-20040208 to drow-cplus-branch.
@
text
@d4 1
a4 1
   1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004 Free Software
d64 4
d101 4
a630 32
/* Cause a silent error to occur.  Any error message is recorded
   though it is not issued.  */
NORETURN void
error_silent (const char *string, ...)
{
  va_list args;
  struct ui_file *tmp_stream = mem_fileopen ();
  va_start (args, string);
  make_cleanup_ui_file_delete (tmp_stream);
  vfprintf_unfiltered (tmp_stream, string, args);
  /* Copy the stream into the GDB_LASTERR buffer.  */
  ui_file_rewind (gdb_lasterr);
  ui_file_put (tmp_stream, do_write, gdb_lasterr);
  va_end (args);

  throw_exception (RETURN_ERROR);
}

/* Output an error message including any pre-print text to gdb_stderr.  */
void
error_output_message (char *pre_print, char *msg)
{
  target_terminal_ours ();
  wrap_here ("");		/* Force out any buffered output */
  gdb_flush (gdb_stdout);
  annotate_error_begin ();
  if (pre_print)
    fputs_filtered (pre_print, gdb_stderr);
  fputs_filtered (msg, gdb_stderr);
  fprintf_filtered (gdb_stderr, "\n");
}

d964 2
d993 36
a1028 2
/* This used to do something interesting with USE_MMALLOC.
 * It can be retired any time.  -- chastain 2004-01-19.  */
d1032 14
d1048 2
d1613 4
a1618 6
#if defined(__GO32__)
      rows = ScreenRows ();
      cols = ScreenCols ();
      lines_per_page = rows;
      chars_per_line = cols;
#else
d1644 1
a1645 1
    }
@


1.80.2.1
log
@Merge with mainline; merge tag carlton_dictionary-20021011-merge.
@
text
@a2651 2
  if (INTEGER_TO_ADDRESS_P ())
    addr = INTEGER_TO_ADDRESS (builtin_type_void_data_ptr, &addr); 
@


1.80.2.2
log
@2002-10-25  David Carlton  <carlton@@math.stanford.edu>

	* symtab.c (lookup_symbol_aux_block): New function.
	(lookup_symbol_aux_local): Call lookup_symbol_aux_block.
	(lookup_symbol_aux): Ditto.

	* Merge from mainline; tag is carlton_dictionary-20021025-merge.

2002-10-25  David Carlton  <carlton@@math.stanford.edu>

	* cp-support.c: Add comment to demangled name pitfalls.
	* symtab.c (lookup_transparent_type): Add FIXME comment at
	beginning.

2002-10-23  David Carlton  <carlton@@math.stanford.edu>

	* symtab.c: Delete cplusplus_hint.
	Delete prototype for find_template_name_end.
	* dwarf2read.c (scan_partial_symbols): Add in a gdb_assert from a
	later version of my namespace_minimal patch.

2002-10-25  David Carlton  <carlton@@math.stanford.edu>

	* gdb.c++/namespace.exp: Change all of the setup_xfail tests that
	I added into setup_kfails.
@
text
@d156 2
a157 2
/* Nonzero means that encoded C++/ObjC names should be printed out in their
   C++/ObjC form rather than raw.  */
d161 2
a162 2
/* Nonzero means that encoded C++/ObjC names should be printed out in their
   C++/ObjC form even in assembler language displays.  If this is set, but
a1819 45
/* Print input string to gdb_stdout, filtered, with wrap, 
   arranging strings in columns of n chars. String can be
   right or left justified in the column.  Never prints 
   trailing spaces.  String should never be longer than
   width.  FIXME: this could be useful for the EXAMINE 
   command, which currently doesn't tabulate very well */

void
puts_filtered_tabular (char *string, int width, int right)
{
  int spaces = 0;
  int stringlen;
  char *spacebuf;

  gdb_assert (chars_per_line > 0);
  if (chars_per_line == UINT_MAX)
    {
      fputs_filtered (string, gdb_stdout);
      fputs_filtered ("\n", gdb_stdout);
      return;
    }

  if (((chars_printed - 1) / width + 2) * width >= chars_per_line)
    fputs_filtered ("\n", gdb_stdout);

  if (width >= chars_per_line)
    width = chars_per_line - 1;

  stringlen = strlen (string);

  if (chars_printed > 0)
    spaces = width - (chars_printed - 1) % width - 1;
  if (right)
    spaces += width - stringlen;

  spacebuf = alloca (spaces + 1);
  spacebuf[spaces] = '\0';
  while (spaces--)
    spacebuf[spaces] = ' ';

  fputs_filtered (spacebuf, gdb_stdout);
  fputs_filtered (string, gdb_stdout);
}


d2247 1
a2247 1
/* C++/ObjC demangler stuff.  */
a2276 4
	    case language_objc:
	      /* Commented out until ObjC handling is enabled.  */
	      /*demangled = objc_demangle (name);*/
	      /*break;*/
d2396 1
a2396 1
	     "Set demangling of encoded C++/ObjC names when displaying symbols.",
d2424 1
a2424 1
		  "Set demangling of C++/ObjC names in disassembly listings.",
d2652 2
@


1.80.2.3
log
@2002-11-15  David Carlton  <carlton@@math.stanford.edu>

	* Merge from mainline; tag is carlton_dictionary-20021115-merge.
@
text
@a2706 4
  /* Method 1: The system has a compile time upper bound on a filename
     path.  Use that and realpath() to canonicalize the name.  This is
     the most common case.  Note that, if there isn't a compile time
     upper bound, you want to avoid realpath() at all costs.  */
a2707 1
  {
d2709 1
a2709 1
    char buf[PATH_MAX];
d2712 4
a2715 1
    char buf[MAXPATHLEN];
a2717 7
# if defined (USE_REALPATH)
    const char *rp = realpath (filename, buf);
    if (rp == NULL)
      rp = filename;
    return xstrdup (rp);
  }
# endif
d2720 11
a2730 11
  /* Method 2: The host system (i.e., GNU) has the function
     canonicalize_file_name() which malloc's a chunk of memory and
     returns that, use that.  */
#if defined(HAVE_CANONICALIZE_FILE_NAME)
  {
    char *rp = canonicalize_file_name (filename);
    if (rp == NULL)
      return xstrdup (filename);
    else
      return rp;
  }
a2731 33

  /* FIXME: cagney/2002-11-13:

     Method 2a: Use realpath() with a NULL buffer.  Some systems, due
     to the problems described in in method 3, have modified their
     realpath() implementation so that it will allocate a buffer when
     NULL is passed in.  Before this can be used, though, some sort of
     configure time test would need to be added.  Otherwize the code
     will likely core dump.  */

  /* Method 3: Now we're getting desperate!  The system doesn't have a
     compile time buffer size and no alternative function.  Query the
     OS, using pathconf(), for the buffer limit.  Care is needed
     though, some systems do not limit PATH_MAX (return -1 for
     pathconf()) making it impossible to pass a correctly sized buffer
     to realpath() (it could always overflow).  On those systems, we
     skip this.  */
#if defined (HAVE_REALPATH) && defined (HAVE_UNISTD_H) && defined(HAVE_ALLOCA)
  {
    /* Find out the max path size.  */
    long path_max = pathconf ("/", _PC_PATH_MAX);
    if (path_max > 0)
      {
	/* PATH_MAX is bounded.  */
	char *buf = alloca (path_max);
	char *rp = realpath (filename, buf);
	return xstrdup (rp ? rp : filename);
      }
  }
#endif

  /* This system is a lost cause, just dup the buffer.  */
  return xstrdup (filename);
@


1.80.2.4
log
@2002-11-27  David Carlton  <carlton@@math.stanford.edu>

	* dwarf2read.c (add_partial_enumeration): New function.
	(scan_partial_symbols): Call add_partial_enumeration.
	(locate_pdi_sibling): New function.
	(scan_partial_symbols): Call locate_pdi_sibling.  Get rid of
	nesting_level.
	(pdi_needs_namespace): New function.
	(add_partial_symbol): Add 'namespace' arg; calculate full name
	when appropriate.
	(scan_partial_symbols): Update calls to add_partial_symbol.
	(add_partial_enumeration): Ditto.
	(read_enumeration): Add processing_current_prefix to name when
	appropriate.
	(new_symbol): Set names of enumerators and typedefs appropriately
	if processing_has_namespace_info.
	* symtab.c (lookup_symbol_namespace): Rename 'namespace' argument
	to 'namespace_name'.
	* symtab.h: Ditto.
	* symtab.c (lookup_symbol_namespace): Delete FIXME comments; add a
	new one.
	(lookup_symbol_aux_file): New function.
	(lookup_symbol_aux): Delete FIXME comment.
	(lookup_symbol_aux): Don't search static block explicitly; delete
	FIXME comments.
	* valops.c (value_namespace_elt): Update call to
	lookup_symbol_namespace.
	* symtab.h: Update declaration for lookup_symbol_namespace.
	* symtab.c (lookup_symbol_namespace): Delete 'using' argument and
	add 'block' argument; get using directives via iterators.
	(lookup_symbol_aux_using_loop): Delete 'using' argument and add
	'block' argument.
	(lookup_symbol_aux_using): Don't calculate using directives.
	* block.c (block_using_iterator_first): New function.
	(block_using_iterator_next): Ditto.
	* block.h: Add comment.
	(struct block_using_iterator): New struct.
	Declare block_using_iterator_first, block_using_iterator_next.

2002-11-26  David Carlton  <carlton@@math.stanford.edu>

	* dwarf2read.c (read_structure_scope): Set type name and
	processing_current_prefix appropriately.
	(new_symbol): Make sure that, in symbols associated to class
	types, the name includes appropriate namespaces.
	* buildsym.h: Rename processing_current_namespace to
	processing_current_prefix.
	* buildsym.c (finish_block): Ditto.
	* dwarf2read.c (psymtab_to_symtab_1): Ditto.
	(read_namespace): Ditto.  Also rename previous_namespace to
	previous_prefix.

	Now come a thousand and one const correctness fixes:
	* p-typeprint.c (pascal_print_type): Const.
	(pascal_type_print_method_args): Const.
	* p-lang.h: Const.
	* m2-typeprint.c (m2_print_type): Const.
	* valops.c (hand_function_call): Const.
	* jv-lang.c (java_primitive_type_from_name): Const.
	* jv-lang.h: Const.
	* jv-typeprint.c (java_print_type): Const.
	* language.c: (unk_lang_print_type): Const.
	* stack.c (frame_info): Const.
	* linespec.c (find_methods): Const.
	(find_method_name): Const
	* f-lang.h: Const.
	* f-typeprint.c (f_print_type): Const.
	* c-typeprint.c (c_print_type): Const.
	* c-lang.h: Const.
	* gdbtypes.h: Const.
	* gdbtypes.c (lookup_primitive_typename): Const.
	* stack.c (print_frame): Const.
	(func_command): Delete pointless cast.
	* linespec.c (find_method_name): Const.
	* language.h: Const.
	* symfile.c (compare_psymbols): Const.
	* symtab.c (completion_list_add_name): Const.
	* breakpoint.c (break_at_finish_at_depth_command_1): Remove
	useless cast.
	(break_at_finish_command_1): Ditto.
	* typeprint.c (type_print): Const.
	* symtab.h: Const.
	* symtab.c (gdb_mangle_name): Const.
	(symbol_init_demangled_name): Const.
	(symbol_demangled_name): Const.
	* defs.h: Const.
	* printcmd.c (build_address_symbolic): Const.
	* valops.c (search_struct_method): Const.
	* cp-valprint.c (cp_is_vtbl_ptr_type): Const.
	(cp_print_value): Const.
	(cp_print_class_member): Const.
	* c-typeprint.c (cp_type_print_derivation_info): Const.
	(c_type_print_varspec_prefix): Const.
	(c_type_print_base): Const.
	* p-valprint.c (pascal_object_is_vtbl_ptr_type): Const.
	(pascal_object_print_value): Const.
	(pascal_object_print_class_member): Const.
	* p-typeprint.c (pascal_type_print_derivation_info): Const.
	(pascal_type_print_varspec_prefix): Const.
	(pascal_type_print_base): Const.
	* jv-typeprint.c (java_type_print_base): Const.
	* jv-lang.h (java_demangle_type_signature): Const.
	* jv-lang.c (java_demangle_type_signature): Const.
	(java_demangled_signature_length): Const.
	(java_demangled_signature_copy): Const.
	* jv-typeprint.c (java_type_print_derivation_info): Const.
	* jv-valprint.c (java_value_print): Const.
	(java_print_value_fields): Const.
	* jv-lang.c (is_object_type): Const.
	(evaluate_subexp_java): Const.
	* stabsread.c (read_cpp_abbrev): Const.
	(complain_about_struct_wipeout): Const.
	(cleanup_undefined_types): Const.
	* gdbtypes.h: Const.
	* gdbtypes.c (add_name): Second arg const.
	(lookup_typename): Const.
	(lookup_unsigned_typename): Const.
	(lookup_signed_typename): Const.
	* linespec.c (find_methods): const char *class_name.
	* symtab.c (gdb_mangle_name): const char *newname.
	* valops.c (destructor_name_p): const char *dname.
	(search_struct_field): First arg const.
	* gdbtypes.c (check_typedef): const char *name (multiple places).
	(cfront_mangle_name): const char *newname.
	* gdbtypes.c (add_mangled_type): const char *tname.
	* valops.c (find_overload_match): const char *obj_type_name.
	* utils.c (gdb_print_host_address): Make first arg const.
	* defs.h: Declare first arg of gdb_print_host_address to be
	const.
	* valarith.c (find_size_for_pointer_math): const char *name.

2002-11-27  David Carlton  <carlton@@math.stanford.edu>

	* gdb.c++/m-data.cc (main): Add marker comment.
	* gdb.c++/m-data.exp: Use marker comment instead of line numbers.
	* gdb.c++/m-data.cc: Delete superfluous namespace.
	* gdb.c++/m-static.cc: Ditto.
	* gdb.c++/m-static1.cc: Ditto.
	* carlton_runtest: Compare based on gdb.sum, not based on output.
	* carlton_runnamespace: Ditto.

2002-11-26  David Carlton  <carlton@@math.stanford.edu>

	* gdb.c++/namespace.exp: Put tests for CClass.
	* gdb.c++/namespace.cc (C): Add CClass.
@
text
@d1277 1
a1277 1
gdb_print_host_address (const void *addr, struct ui_file *stream)
d2300 1
a2300 2
fprintf_symbol_filtered (struct ui_file *stream, const char *name,
			 enum language lang,
@


1.80.2.5
log
@2002-12-23  David Carlton  <carlton@@math.stanford.edu>

	* Merge from mainline; tag is carlton_dictionary-20021223-merge.
@
text
@d23 17
a69 7

#ifdef HAVE_CURSES_H
#include <curses.h>
#endif
#ifdef HAVE_TERM_H
#include <term.h>
#endif
@


1.80.2.6
log
@2003-02-07  David Carlton  <carlton@@math.stanford.edu>

	* Merge with mainline; tag is carlton_dictionary-20030207-merge.
@
text
@a1 1

d3 2
a4 2
   1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003 Free Software
   Foundation, Inc.
d50 1
a50 1
#include "inferior.h"		/* for signed_pointer_to_address */
d68 1
a68 1
extern PTR malloc ();		/* OK: PTR */
d71 1
a71 1
extern PTR realloc ();		/* OK: PTR */
d116 1
a116 1
static struct cleanup *exec_error_cleanup_chain;
d270 1
a270 1
    = (struct cleanup *) xmalloc (sizeof (struct cleanup));
d444 1
a444 2
  continuation_ptr =
    (struct continuation *) xmalloc (sizeof (struct continuation));
d474 6
a479 6
    {
      (continuation_ptr->continuation_hook) (continuation_ptr->arg_list);
      saved_continuation = continuation_ptr;
      continuation_ptr = continuation_ptr->next;
      xfree (saved_continuation);
    }
d506 1
a506 2
  continuation_ptr =
    (struct continuation *) xmalloc (sizeof (struct continuation));
d536 6
a541 6
    {
      (continuation_ptr->continuation_hook) (continuation_ptr->arg_list);
      saved_continuation = continuation_ptr;
      continuation_ptr = continuation_ptr->next;
      xfree (saved_continuation);
    }
d558 1
a560 1

d592 1
a592 1
warning (const char *string, ...)
d614 1
a614 1
error (const char *string, ...)
d659 1
a659 1

d687 2
a688 1
		   const char *file, int line, const char *fmt, va_list ap)
d704 1
a704 1
      abort ();			/* NOTE: GDB has only three calls to abort().  */
d731 2
a732 2
         this lessens the likelhood of GDB going into an infinate
         loop.  */
d749 2
a750 2
         `dropping' so that it is easier to see that something went
         wrong in GDB.  */
d767 1
a767 1
	abort ();		/* NOTE: GDB has only three calls to abort().  */
d776 1
a776 1
	    abort ();		/* NOTE: GDB has only three calls to abort().  */
d788 2
a789 1
internal_verror (const char *file, int line, const char *fmt, va_list ap)
d809 2
a810 1
internal_vwarning (const char *file, int line, const char *fmt, va_list ap)
d834 1
a834 2
  msg = strerror (errnum);
  if (msg == NULL)
d925 2
a926 2
      /* If there is no terminal switching for this target, then we can't
         possibly get screwed by the lack of job control.  */
d931 1
a931 1
			"Quit (expect signal SIGINT when the program is resumed)\n");
d958 3
d964 1
a964 1
  return malloc (size);		/* NOTE: GDB's only call to malloc() */
d973 1
a973 1
    return realloc (ptr, size);	/* NOTE: GDB's only call to ralloc() */
d979 1
a979 1
  return calloc (number, size);	/* NOTE: GDB's only call to calloc() */
d985 1
a985 1
  free (ptr);			/* NOTE: GDB's only call to free() */
d1034 3
a1036 4
	(gdb_stderr,
	 "warning: failed to install memory consistency checks; ");
      fprintf_unfiltered (gdb_stderr,
			  "configuration should define NO_MMCHECK or MMCHECK_FORCE\n");
d1053 1
a1053 2
		      "virtual memory exhausted: can't allocate %ld bytes.",
		      size);
d1057 2
a1058 1
      internal_error (__FILE__, __LINE__, "virtual memory exhausted.");
d1152 1
a1152 1
PTR				/* OK: PTR */
d1158 2
a1159 2
PTR				/* OK: PTR */
xrealloc (PTR ptr, size_t size)	/* OK: PTR */
d1164 1
a1164 1
PTR				/* OK: PTR */
d1197 2
a1198 1
		    "vasprintf returned NULL buffer (errno %d)", errno);
d1203 2
a1204 1
		    "vasprintf call failed (errno %d)", errno);
d1284 1
a1284 1
query (const char *ctlstr, ...)
d1330 1
a1330 1
	    ans2 = fgetc (stdin);
d1370 1
a1370 1
	 copy, target_charset ());
d1395 8
a1402 2
  else
    switch (c)
d1404 30
a1433 10
      case '\n':
	return -2;
      case 0:
	(*string_ptr)--;
	return 0;
      case '^':
	{
	  /* Remember where this escape sequence started, for reporting
	     errors.  */
	  char *sequence_start_pos = *string_ptr - 1;
d1435 2
a1436 1
	  c = *(*string_ptr)++;
d1438 2
a1439 4
	  if (c == '?')
	    {
	      /* XXXCHARSET: What is `delete' in the host character set?  */
	      c = 0177;
d1441 25
a1465 59
	      if (!host_char_to_target (c, &target_char))
		error ("There is no character corresponding to `Delete' "
		       "in the target character set `%s'.", host_charset ());

	      return target_char;
	    }
	  else if (c == '\\')
	    target_char = parse_escape (string_ptr);
	  else
	    {
	      if (!host_char_to_target (c, &target_char))
		no_control_char_error (sequence_start_pos, *string_ptr);
	    }

	  /* Now target_char is something like `c', and we want to find
	     its control-character equivalent.  */
	  if (!target_char_to_control_char (target_char, &target_char))
	    no_control_char_error (sequence_start_pos, *string_ptr);

	  return target_char;
	}

	/* XXXCHARSET: we need to use isdigit and value-of-digit
	   methods of the host character set here.  */

      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
	{
	  register int i = c - '0';
	  register int count = 0;
	  while (++count < 3)
	    {
	      c = (**string_ptr);
	      if (c >= '0' && c <= '7')
		{
		  (*string_ptr)++;
		  i *= 8;
		  i += c - '0';
		}
	      else
		{
		  break;
		}
	    }
	  return i;
	}
      default:
	if (!host_char_to_target (c, &target_char))
	  error
	    ("The escape sequence `\%c' is equivalent to plain `%c', which"
	     " has no equivalent\n" "in the `%s' character set.", c, c,
	     target_charset ());
	return target_char;
d1467 8
d1550 1
a1550 2
fputstrn_unfiltered (const char *str, int n, int quoter,
		     struct ui_file *stream)
d1556 1
a1558 1

d1609 2
d1646 1
a1646 1
#endif
d1908 2
a1909 1
      if (filter && (lines_printed >= lines_per_page - 1))
d1957 1
a1957 1
		  *wrap_pointer = '\0';	/* Null-terminate saved stuff */
d2171 1
a2171 1
fprintf_filtered (struct ui_file *stream, const char *format, ...)
d2180 1
a2180 1
fprintf_unfiltered (struct ui_file *stream, const char *format, ...)
d2192 1
a2192 2
fprintfi_filtered (int spaces, struct ui_file *stream, const char *format,
		   ...)
d2204 1
a2204 1
printf_filtered (const char *format, ...)
d2214 1
a2214 1
printf_unfiltered (const char *format, ...)
d2226 1
a2226 1
printfi_filtered (int spaces, const char *format, ...)
d2315 7
a2321 2
	      /*demangled = objc_demangle (name); */
	      /*break; */
a2368 8

/* A simple comparison function with opposite semantics to strcmp.  */

int
streq (const char *lhs, const char *rhs)
{
  return !strcmp (lhs, rhs);
}
d2381 5
a2385 5
  if (template_string != (char *) NULL && string_to_compare != (char *) NULL
      && strlen (string_to_compare) <= strlen (template_string))
    match =
      (strncmp
       (template_string, string_to_compare, strlen (string_to_compare)) == 0);
d2436 3
a2438 2
		  "Set demangling of encoded C++/ObjC names when displaying symbols.",
		  &setprintlist), &showprintlist);
d2443 2
a2444 1
		  "Set state of pagination.", &setlist), &showlist);
d2458 2
a2459 1
		  &setprintlist), &showprintlist);
d2465 2
a2466 1
		  &setprintlist), &showprintlist);
d2474 1
d2476 1
d2525 2
a2526 1
      sprintf (paddr_str, "%s%lu", sign, temp[0]);
d2529 2
a2530 1
      sprintf (paddr_str, "%s%lu%09lu", sign, temp[1], temp[0]);
d2533 2
a2534 1
      sprintf (paddr_str, "%s%lu%09lu%09lu", sign, temp[2], temp[1], temp[0]);
d2537 1
a2537 2
      internal_error (__FILE__, __LINE__,
		      "failed internal consistency check");
d2603 2
a2604 1
	  sprintf (str, "%lx%08lx", high, (unsigned long) (l & 0xffffffff));
d2623 19
d2674 1
a2674 1
	  else if (isxdigit (my_string[i]))
d2793 2
a2794 1
  if (strlen (dir_name) == 2 && isalpha (dir_name[0]) && dir_name[1] == ':')
a2811 71
}


/* This is the 32-bit CRC function used by the GNU separate debug
   facility.  An executable may contain a section named
   .gnu_debuglink, which holds the name of a separate executable file
   containing its debug info, and a checksum of that file's contents,
   computed using this function.  */
unsigned long
gnu_debuglink_crc32 (unsigned long crc, unsigned char *buf, size_t len)
{
  static const unsigned long crc32_table[256] = {
    0x00000000, 0x77073096, 0xee0e612c, 0x990951ba, 0x076dc419,
    0x706af48f, 0xe963a535, 0x9e6495a3, 0x0edb8832, 0x79dcb8a4,
    0xe0d5e91e, 0x97d2d988, 0x09b64c2b, 0x7eb17cbd, 0xe7b82d07,
    0x90bf1d91, 0x1db71064, 0x6ab020f2, 0xf3b97148, 0x84be41de,
    0x1adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7, 0x136c9856,
    0x646ba8c0, 0xfd62f97a, 0x8a65c9ec, 0x14015c4f, 0x63066cd9,
    0xfa0f3d63, 0x8d080df5, 0x3b6e20c8, 0x4c69105e, 0xd56041e4,
    0xa2677172, 0x3c03e4d1, 0x4b04d447, 0xd20d85fd, 0xa50ab56b,
    0x35b5a8fa, 0x42b2986c, 0xdbbbc9d6, 0xacbcf940, 0x32d86ce3,
    0x45df5c75, 0xdcd60dcf, 0xabd13d59, 0x26d930ac, 0x51de003a,
    0xc8d75180, 0xbfd06116, 0x21b4f4b5, 0x56b3c423, 0xcfba9599,
    0xb8bda50f, 0x2802b89e, 0x5f058808, 0xc60cd9b2, 0xb10be924,
    0x2f6f7c87, 0x58684c11, 0xc1611dab, 0xb6662d3d, 0x76dc4190,
    0x01db7106, 0x98d220bc, 0xefd5102a, 0x71b18589, 0x06b6b51f,
    0x9fbfe4a5, 0xe8b8d433, 0x7807c9a2, 0x0f00f934, 0x9609a88e,
    0xe10e9818, 0x7f6a0dbb, 0x086d3d2d, 0x91646c97, 0xe6635c01,
    0x6b6b51f4, 0x1c6c6162, 0x856530d8, 0xf262004e, 0x6c0695ed,
    0x1b01a57b, 0x8208f4c1, 0xf50fc457, 0x65b0d9c6, 0x12b7e950,
    0x8bbeb8ea, 0xfcb9887c, 0x62dd1ddf, 0x15da2d49, 0x8cd37cf3,
    0xfbd44c65, 0x4db26158, 0x3ab551ce, 0xa3bc0074, 0xd4bb30e2,
    0x4adfa541, 0x3dd895d7, 0xa4d1c46d, 0xd3d6f4fb, 0x4369e96a,
    0x346ed9fc, 0xad678846, 0xda60b8d0, 0x44042d73, 0x33031de5,
    0xaa0a4c5f, 0xdd0d7cc9, 0x5005713c, 0x270241aa, 0xbe0b1010,
    0xc90c2086, 0x5768b525, 0x206f85b3, 0xb966d409, 0xce61e49f,
    0x5edef90e, 0x29d9c998, 0xb0d09822, 0xc7d7a8b4, 0x59b33d17,
    0x2eb40d81, 0xb7bd5c3b, 0xc0ba6cad, 0xedb88320, 0x9abfb3b6,
    0x03b6e20c, 0x74b1d29a, 0xead54739, 0x9dd277af, 0x04db2615,
    0x73dc1683, 0xe3630b12, 0x94643b84, 0x0d6d6a3e, 0x7a6a5aa8,
    0xe40ecf0b, 0x9309ff9d, 0x0a00ae27, 0x7d079eb1, 0xf00f9344,
    0x8708a3d2, 0x1e01f268, 0x6906c2fe, 0xf762575d, 0x806567cb,
    0x196c3671, 0x6e6b06e7, 0xfed41b76, 0x89d32be0, 0x10da7a5a,
    0x67dd4acc, 0xf9b9df6f, 0x8ebeeff9, 0x17b7be43, 0x60b08ed5,
    0xd6d6a3e8, 0xa1d1937e, 0x38d8c2c4, 0x4fdff252, 0xd1bb67f1,
    0xa6bc5767, 0x3fb506dd, 0x48b2364b, 0xd80d2bda, 0xaf0a1b4c,
    0x36034af6, 0x41047a60, 0xdf60efc3, 0xa867df55, 0x316e8eef,
    0x4669be79, 0xcb61b38c, 0xbc66831a, 0x256fd2a0, 0x5268e236,
    0xcc0c7795, 0xbb0b4703, 0x220216b9, 0x5505262f, 0xc5ba3bbe,
    0xb2bd0b28, 0x2bb45a92, 0x5cb36a04, 0xc2d7ffa7, 0xb5d0cf31,
    0x2cd99e8b, 0x5bdeae1d, 0x9b64c2b0, 0xec63f226, 0x756aa39c,
    0x026d930a, 0x9c0906a9, 0xeb0e363f, 0x72076785, 0x05005713,
    0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0x0cb61b38, 0x92d28e9b,
    0xe5d5be0d, 0x7cdcefb7, 0x0bdbdf21, 0x86d3d2d4, 0xf1d4e242,
    0x68ddb3f8, 0x1fda836e, 0x81be16cd, 0xf6b9265b, 0x6fb077e1,
    0x18b74777, 0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c,
    0x8f659eff, 0xf862ae69, 0x616bffd3, 0x166ccf45, 0xa00ae278,
    0xd70dd2ee, 0x4e048354, 0x3903b3c2, 0xa7672661, 0xd06016f7,
    0x4969474d, 0x3e6e77db, 0xaed16a4a, 0xd9d65adc, 0x40df0b66,
    0x37d83bf0, 0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9,
    0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6, 0xbad03605,
    0xcdd70693, 0x54de5729, 0x23d967bf, 0xb3667a2e, 0xc4614ab8,
    0x5d681b02, 0x2a6f2b94, 0xb40bbe37, 0xc30c8ea1, 0x5a05df1b,
    0x2d02ef8d
  };
  unsigned char *end;

  crc = ~crc & 0xffffffff;
  for (end = buf + len; buf < end; ++buf)
    crc = crc32_table[(crc ^ *buf) & 0xff] ^ (crc >> 8);
  return ~crc & 0xffffffff;;
@


1.80.2.7
log
@2003-02-11  David Carlton  <carlton@@math.stanford.edu>

	* valops.c (find_oload_champ): Add comment.
	(find_oload_champ_namespace_loop): Fix memory management.
	(find_oload_champ_namespace): Add comment.
	(find_overload_match): Free oload_syms, oload_champ_bv.
	* gdbtypes.c (rank_function): Add comment.
	* valops.c (find_oload_champ_namespace_loop): Allow num_fns to be
	zero.
	* symtab.c (lookup_partial_symbol): Use strcmp_iw_ordered.
	(lookup_block_symbol): Delete comment.
	* symfile.c (compare_psymbols): Use strcmp_iw_ordered.
	* defs.h: Declare strcmp_iw_ordered.
	* utils.c (strcmp_iw_ordered): New function.
@
text
@a2361 58
/* This is like strcmp except that it ignores whitespace and treats
   '(' as the first non-NULL character in terms of ordering.  Like
   strcmp (and unlike strcmp_iw), it returns negative if STRING1 <
   STRING2, 0 if STRING2 = STRING2, and positive if STRING1 > STRING2
   according to that ordering.

   If a list is sorted according to this function and if you want to
   find names in the list that match some fixed NAME according to
   strcmp_iw(LIST_ELT, NAME), then the place to start looking is right
   where this function would put NAME.  */

int
strcmp_iw_ordered (const char *string1, const char *string2)
{
  while ((*string1 != '\0') && (*string2 != '\0'))
    {
      while (isspace (*string1))
	{
	  string1++;
	}
      while (isspace (*string2))
	{
	  string2++;
	}
      if (*string1 != *string2)
	{
	  break;
	}
      if (*string1 != '\0')
	{
	  string1++;
	  string2++;
	}
    }

  switch (*string1)
    {
      /* Characters are non-equal unless they're both '\0'; we want to
	 make sure we get the comparison right according to our
	 comparison in the cases where one of them is '\0' or '('.  */
    case '\0':
      if (*string2 == '\0')
	return 0;
      else
	return -1;
    case '(':
      if (*string2 == '\0')
	return 1;
      else
	return -1;
    default:
      if (*string2 == '(')
	return 1;
      else
	return *string1 - *string2;
    }
}

@


1.80.2.8
log
@2003-03-05  David Carlton  <carlton@@math.stanford.edu>

	* Merge with mainline.  Tag is carlton_dictionary-20030305-merge.
@
text
@d2371 1
a2371 23
   where this function would put NAME.

   Here are some examples of why using strcmp to sort is a bad idea:

   Whitespace example:

   Say your partial symtab contains: "foo<char *>", "goo".  Then, if
   we try to do a search for "foo<char*>", strcmp will locate this
   after "foo<char *>" and before "goo".  Then lookup_partial_symbol
   will start looking at strings beginning with "goo", and will never
   see the correct match of "foo<char *>".

   Parenthesis example:

   In practice, this is less like to be an issue, but I'll give it a
   shot.  Let's assume that '$' is a legitimate character to occur in
   symbols.  (Which may well even be the case on some systems.)  Then
   say that the partial symbol table contains "foo$" and "foo(int)".
   strcmp will put them in this order, since '$' < '('.  Now, if the
   user searches for "foo", then strcmp will sort "foo" before "foo$".
   Then lookup_partial_symbol will notice that strcmp_iw("foo$",
   "foo") is false, so it won't proceed to the actual match of
   "foo(int)" with "foo".  */
d2746 1
a2747 1
  }
@


1.80.2.9
log
@2003-04-16  David Carlton  <carlton@@bactrian.org>

	* Merge with mainline; tag is carlton_dictionary-20030416-merge.
@
text
@a1075 2
  /* See libiberty/xmalloc.c.  This function need's to match that's
     semantics.  It never returns NULL.  */
d1077 9
a1085 6
    size = 1;

  val = mmalloc (md, size);
  if (val == NULL)
    nomem (size);

a1093 2
  /* See libiberty/xmalloc.c.  This function need's to match that's
     semantics.  It never returns NULL.  */
d1095 5
a1099 4
    size = 1;

  if (ptr != NULL)
    val = mrealloc (md, ptr, size);
d1101 14
a1114 4
    val = mmalloc (md, size);
  if (val == NULL)
    nomem (size);

a1121 3

  /* See libiberty/xmalloc.c.  This function need's to match that's
     semantics.  It never returns NULL.  */
d1123 2
d1126 3
a1128 2
      number = 1;
      size = 1;
a1129 5

  mem = mcalloc (md, number, size);
  if (mem == NULL)
    nomem (number * size);

d2302 16
a2317 1
	  demangled = language_demangle (language_def (lang), name, arg_mode);
@


1.80.2.10
log
@2003-06-27  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton_dictionary-20030627-merge.
@
text
@d692 1
a695 1
  char *reason;
d698 14
a711 17
  {
    static char msg[] = "Recursive internal problem.\n";
    switch (dejavu)
      {
      case 0:
	dejavu = 1;
	break;
      case 1:
	dejavu = 2;
	fputs_unfiltered (msg, gdb_stderr);
	abort ();	/* NOTE: GDB has only three calls to abort().  */
      default:
	dejavu = 3;
	write (STDERR_FILENO, msg, sizeof (msg));
	exit (1);
      }
  }
d717 11
a727 15
  /* Create a string containing the full error/warning message.  Need
     to call query with this full string, as otherwize the reason
     (error/warning) and question become separated.  Format using a
     style similar to a compiler error message.  Include extra detail
     so that the user knows that they are living on the edge.  */
  {
    char *msg;
    xasprintf (&msg, fmt, ap);
    xasprintf (&reason, "\
%s:%d: %s: %s\n\
A problem internal to GDB has been detected,\n\
further debugging may prove unreliable.", file, line, problem->name, msg);
    xfree (msg);
    make_cleanup (xfree, reason);
  }
d735 1
a735 1
      quit_p = query ("%s\nQuit this debugging session? ", reason);
d753 1
a753 1
      dump_core_p = query ("%s\nCreate a core file of GDB? ", reason);
@


1.80.2.11
log
@2003-08-05  David Carlton  <carlton@@kealia.com>

	* configure.in (build_warnings): Delete -Wformat-nonliteral.
	* configure (build_warnings): Ditto.

	* Merge with mainline; tag is carlton_dictionary-20030805-merge.
@
text
@d581 1
a581 1
	fputs_unfiltered (warning_pre_print, gdb_stderr);
d647 1
a647 1
    fputs_filtered (error_pre_print, gdb_stderr);
d727 1
a727 1
    xvasprintf (&msg, fmt, ap);
d925 1
a925 1
    fputs_unfiltered (quit_pre_print, gdb_stderr);
@


1.80.2.12
log
@2003-09-17  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton_dictionary-20030917-merge.
@
text
@d105 2
a106 1
static void set_screen_size (void);
d270 1
a270 1
  struct cleanup *new
d272 1
a272 1
  struct cleanup *old_chain = *pmy_chain;
d286 1
a286 1
do_cleanups (struct cleanup *old_chain)
d292 1
a292 1
do_final_cleanups (struct cleanup *old_chain)
d298 1
a298 1
do_run_cleanups (struct cleanup *old_chain)
d304 1
a304 1
do_exec_cleanups (struct cleanup *old_chain)
d310 1
a310 1
do_exec_error_cleanups (struct cleanup *old_chain)
d316 2
a317 2
do_my_cleanups (struct cleanup **pmy_chain,
		struct cleanup *old_chain)
d319 1
a319 1
  struct cleanup *ptr;
d332 1
a332 1
discard_cleanups (struct cleanup *old_chain)
d338 1
a338 1
discard_final_cleanups (struct cleanup *old_chain)
d344 1
a344 1
discard_exec_error_cleanups (struct cleanup *old_chain)
d350 2
a351 2
discard_my_cleanups (struct cleanup **pmy_chain,
		     struct cleanup *old_chain)
d353 1
a353 1
  struct cleanup *ptr;
a1180 11
char *
xstrprintf (const char *format, ...)
{
  char *ret;
  va_list args;
  va_start (args, format);
  xvasprintf (&ret, format, args);
  va_end (args);
  return ret;
}

d1213 1
a1213 1
  int val;
d1236 1
a1236 1
  char *p = (char *) xmalloc (size + 1);
d1245 1
a1245 1
  char *p = (char *) xmmalloc (md, size + 1);
d1258 1
a1258 1
print_spaces (int n, struct ui_file *file)
d1286 2
a1287 2
  int answer;
  int ans2;
d1391 1
a1391 1
  int c = *(*string_ptr)++;
d1449 2
a1450 2
	  int i = c - '0';
	  int count = 0;
d1559 1
a1561 1

a1563 1

d1592 1
a1592 2
/* Inialize the number of lines per page and chars per line.  */

d1600 2
d1606 7
a1612 1
      int rows, cols;
d1614 2
a1615 2
      /* Make sure Readline has initialized its terminal settings.  */
      rl_reset_terminal (NULL);
d1617 3
a1619 4
      /* Get the screen size from Readline.  */
      rl_get_screen_size (&rows, &cols);
      lines_per_page = rows;
      chars_per_line = cols;
d1621 25
a1645 8
      /* Readline should have fetched the termcap entry for us.  */
      if (tgetnum ("li") < 0 || getenv ("EMACS"))
	{
	  /* The number of lines per page is not mentioned in the
	     terminal description.  This probably means that paging is
	     not useful (e.g. emacs shell window), so disable paging.  */
	  lines_per_page = UINT_MAX;
	}
a1646 1
      /* FIXME: Get rid of this junk.  */
d1648 2
d1652 1
a1652 1

d1656 1
a1656 4
    }
#endif

  set_screen_size ();
a1659 21
/* Set the screen size based on LINES_PER_PAGE and CHARS_PER_LINE.  */

static void
set_screen_size (void)
{
  int rows = lines_per_page;
  int cols = chars_per_line;

  if (rows <= 0)
    rows = INT_MAX;

  if (cols <= 0)
    rl_get_screen_size (NULL, &cols);

  /* Update Readline's idea of the terminal size.  */
  rl_set_screen_size (rows, cols);
}

/* Reinitialize WRAP_BUFFER according to the current value of
   CHARS_PER_LINE.  */

d1673 1
a1673 1
  wrap_pointer = wrap_buffer;	/* Start it at the beginning.  */
a1679 1
  set_screen_size ();
a1682 7
/* ARGSUSED */
static void
set_height_command (char *args, int from_tty, struct cmd_list_element *c)
{
  set_screen_size ();
}

d2479 2
a2480 1
  c = add_set_cmd ("width", class_support, var_uinteger, &chars_per_line,
d2486 5
a2490 4
  c = add_set_cmd ("height", class_support, var_uinteger, &lines_per_page,
		   "Set number of lines gdb thinks are in a page.", &setlist);
  add_show_from_set (c, &showlist);
  set_cmd_sfunc (c, set_height_command);
d2493 6
@


1.80.2.13
log
@2003-11-11  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton-dictionary-20031111-merge.
@
text
@d430 1
d1687 1
d1695 1
a2931 16
}

ULONGEST
align_up (ULONGEST v, int n)
{
  /* Check that N is really a power of two.  */
  gdb_assert (n && (n & (n-1)) == 0);
  return (v + n - 1) & -n;
}

ULONGEST
align_down (ULONGEST v, int n)
{
  /* Check that N is really a power of two.  */
  gdb_assert (n && (n & (n-1)) == 0);
  return (v & -n);
@


1.80.2.14
log
@2004-01-26  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton_dictionary-20040126-merge.
@
text
@d4 1
a4 1
   1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004 Free Software
d64 4
d99 3
a101 1
static void do_my_cleanups (struct cleanup **, struct cleanup *);
d314 1
a314 1
static void
a628 32
/* Cause a silent error to occur.  Any error message is recorded
   though it is not issued.  */
NORETURN void
error_silent (const char *string, ...)
{
  va_list args;
  struct ui_file *tmp_stream = mem_fileopen ();
  va_start (args, string);
  make_cleanup_ui_file_delete (tmp_stream);
  vfprintf_unfiltered (tmp_stream, string, args);
  /* Copy the stream into the GDB_LASTERR buffer.  */
  ui_file_rewind (gdb_lasterr);
  ui_file_put (tmp_stream, do_write, gdb_lasterr);
  va_end (args);

  throw_exception (RETURN_ERROR);
}

/* Output an error message including any pre-print text to gdb_stderr.  */
void
error_output_message (char *pre_print, char *msg)
{
  target_terminal_ours ();
  wrap_here ("");		/* Force out any buffered output */
  gdb_flush (gdb_stdout);
  annotate_error_begin ();
  if (pre_print)
    fputs_filtered (pre_print, gdb_stderr);
  fputs_filtered (msg, gdb_stderr);
  fprintf_filtered (gdb_stderr, "\n");
}

d962 2
d991 4
a994 2
/* This used to do something interesting with USE_MMALLOC.
 * It can be retired any time.  -- chastain 2004-01-19.  */
d1000 48
d1611 4
a1616 6
#if defined(__GO32__)
      rows = ScreenRows ();
      cols = ScreenCols ();
      lines_per_page = rows;
      chars_per_line = cols;
#else
d1642 1
a1643 1
    }
@


1.79
log
@Revert previous change.  Not obvious.
@
text
@d63 1
d1366 17
d1401 1
d1403 3
a1405 1
  switch (c)
a1406 16
    case 'a':
      return 007;		/* Bell (alert) char */
    case 'b':
      return '\b';
    case 'e':			/* Escape character */
      return 033;
    case 'f':
      return '\f';
    case 'n':
      return '\n';
    case 'r':
      return '\r';
    case 't':
      return '\t';
    case 'v':
      return '\v';
d1413 37
a1449 6
      c = *(*string_ptr)++;
      if (c == '\\')
	c = parse_escape (string_ptr);
      if (c == '?')
	return 0177;
      return (c & 0200) | (c & 037);
d1478 6
a1483 1
      return c;
@


1.78
log
@2002-09-18  Michael Snyder  <msnyder@@redhat.com>

	Preliminary support for Objective-C:
	* defs.h (language_objc): New enum value.
	(puts_filtered_tabular): Declaration only, exported from utils.c.
	(skip_quoted): Delete, declared in completer.h.
	* c-exp.y: Include completer.h.
	* p-exp.y: Ditto.
	* jv-exp.y: Ditto.
	* expression.h (OP_MSGCALL, OP_SELECTOR, OP_SELF, OP_NSSTRING):
	New operator enum values.
	* language.h (CAST_IS_CONVERSION): Test for language_objc.
	* language.c (binop_result_type): Handle language_objc case.
	(integral_type, character_type, string_type, boolean_type,
	structured_type, binop_type_check): Ditto.
	* symtab.h (SYMBOL_OBJC_DEMANGLED_NAME): Define.
	(struct objc_specific): Add to general_symbol_info.
	(SYMBOL_INIT_LANGUAGE_SPECIFIC): Add objc initialization.
	(SYMBOL_DEMANGLED_NAME): Handle objc case.
	* parser-defs.h (struct objc_class_str): New struct type.
	(start_msglist, end_msglist, add_msglist): Declaration only,
	exported from objc-lang.c.
	* value.h (value_of_local, value_nsstring,
	call_function_by_hand_expecting_type): Exported from valops.c.
	* valops.c (find_function_addr): Export.
	(call_function_by_hand_expecting_type): New function.
	(value_of_local): New function.
	* symfile.c (init_filename_language_table): Add ".m" extension
	for Objective-C.
	* utils.c (puts_filtered_tabular): New function.
	(fprintf_symbol_filtered): Add objc demangling support (disabled).
	(set/show demangle): Extend help-string to refer to ObjC.
	* elfread.c (elf_symtab_read): Skip Objective-C special symbols.
	* stabsread.c (symbol_reference_defined): Objective-C symbols
	may contain colons: make allowances when scanning stabs strings
	for colons.
	(objc_find_colon): New function.
	* printcmd.c (address_info): If language == objc then print
	"self" instead of "this".
	* parse.c (length_of_subexp): Handle new operators OP_MSGCALL,
	OP_NSSTRING, and OP_SELF.
	(prefixify_subexp): Ditto.
	* source.c (print_source_lines): Mention objc in comment.
	* breakpoint.c (parse_breakpoint_sals): Recognize Objective-C
	method names.
@
text
@d155 2
a156 2
/* Nonzero means that encoded C++/ObjC names should be printed out in their
   C++/ObjC form rather than raw.  */
d160 2
a161 2
/* Nonzero means that encoded C++/ObjC names should be printed out in their
   C++/ObjC form even in assembler language displays.  If this is set, but
d279 1
a279 1
    = (struct cleanup *) xmalloc (sizeof (struct cleanup));
a1778 45
/* Print input string to gdb_stdout, filtered, with wrap, 
   arranging strings in columns of n chars. String can be
   right or left justified in the column.  Never prints 
   trailing spaces.  String should never be longer than
   width.  FIXME: this could be useful for the EXAMINE 
   command, which currently doesn't tabulate very well.  */

void
puts_filtered_tabular (char *string, int width, int right)
{
  int spaces = 0;
  int stringlen;
  char *spacebuf;

  gdb_assert (chars_per_line > 0);
  if (chars_per_line == UINT_MAX)
    {
      fputs_filtered (string, gdb_stdout);
      fputs_filtered ("\n", gdb_stdout);
      return;
    }

  if (((chars_printed - 1) / width + 2) * width >= chars_per_line)
    fputs_filtered ("\n", gdb_stdout);

  if (width >= chars_per_line)
    width = chars_per_line - 1;

  stringlen = strlen (string);

  if (chars_printed > 0)
    spaces = width - (chars_printed - 1) % width - 1;
  if (right)
    spaces += width - stringlen;

  spacebuf = alloca (spaces + 1);
  spacebuf[spaces] = '\0';
  while (spaces--)
    spacebuf[spaces] = ' ';

  fputs_filtered (spacebuf, gdb_stdout);
  fputs_filtered (string, gdb_stdout);
}


d2206 1
a2206 1
/* C++/ObjC demangler stuff.  */
d2208 4
a2211 5
/* fprintf_symbol_filtered attempts to demangle NAME, a symbol in
   language LANG, using demangling args ARG_MODE, and print it
   filtered to STREAM.  If the name is not mangled, or the language
   for the name is unknown, or demangling is off, the name is printed
   in its "raw" form.  */
d2214 1
a2214 3
fprintf_symbol_filtered (struct ui_file *stream, 
			 char *name, 
			 enum language lang,
a2235 5
#if 0 /* Enable once objective-c support is turned on.  */
	    case language_objc:
	      demangled = objc_demangle (name);
	      break;
#endif
d2355 1
a2355 1
	     "Set demangling of encoded C++/ObjC names when displaying symbols.",
d2383 1
a2383 1
		  "Set demangling of C++/ObjC names in disassembly listings.",
@


1.77
log
@2002-09-18  Andrew Cagney  <ac131313@@redhat.com>

	* maint.c (maintenance_internal_error): Print the parameter as the
	error message.
	(maintenance_internal_warning): New function.
	(_initialize_maint_cmds): Add command `maint internal-warning'.

	* defs.h (internal_warning, internal_vwarning): Declare.
	* utils.c (struct internal_problem): Define.
	(internal_vproblem): New function.
	(internal_warning): New function.
	(internal_vwarning): New function.
	(internal_warning_problem, internal_error_problem): New variables.
	(internal_verror): Just call internal_vproblem.

Index: testsuite/ChangeLog
2002-09-18  Andrew Cagney  <ac131313@@redhat.com>

	* gdb.base/maint.exp: Check `help maint internal-warning'.
@
text
@d155 2
a156 2
/* Nonzero means that encoded C++ names should be printed out in their
   C++ form rather than raw.  */
d160 2
a161 2
/* Nonzero means that encoded C++ names should be printed out in their
   C++ form even in assembler language displays.  If this is set, but
d279 1
a279 1
  = (struct cleanup *) xmalloc (sizeof (struct cleanup));
d1779 45
d2251 1
a2251 1
/* C++ demangler stuff.  */
d2253 5
a2257 4
/* fprintf_symbol_filtered attempts to demangle NAME, a symbol in language
   LANG, using demangling args ARG_MODE, and print it filtered to STREAM.
   If the name is not mangled, or the language for the name is unknown, or
   demangling is off, the name is printed in its "raw" form. */
d2260 3
a2262 1
fprintf_symbol_filtered (struct ui_file *stream, char *name, enum language lang,
d2284 5
d2408 1
a2408 1
	     "Set demangling of encoded C++ names when displaying symbols.",
d2436 1
a2436 1
		  "Set demangling of C++ names in disassembly listings.",
@


1.76
log
@2002-08-01  Andrew Cagney  <cagney@@redhat.com>

* NEWS: Menion that CHILL has been made obsolete.

* gdbtypes.c (chill_varying_type): Make chill references obsolete.
* gdbserver/Makefile.in: Ditto.
* stabsread.c (read_range_type): Ditto.
* gdbtypes.h: Ditto.
* language.c (binop_type_check): Ditto.
(binop_result_type): Ditto.
(integral_type): Ditto.
(character_type): Ditto.
(string_type): Ditto.
(boolean_type): Ditto.
(structured_type): Ditto.
(lang_bool_type): Ditto.
(binop_type_check): Ditto.
* language.h (_LANG_chill): Ditto.
* dwarfread.c (set_cu_language): Ditto.
* dwarfread.c (CHILL_PRODUCER): Ditto.
* dwarfread.c (handle_producer): Ditto.
* expression.h (enum exp_opcode): Ditto.
* eval.c: Ditto for comments.
* typeprint.c (typedef_print) [_LANG_chill]: Ditto.
* expprint.c (print_subexp): Ditto.
(print_subexp): Ditto.
* valops.c (value_cast): Ditto.
(search_struct_field): Ditto.
* value.h (COERCE_VARYING_ARRAY): Ditto.
* symfile.c (init_filename_language_table): Ditto.
(add_psymbol_with_dem_name_to_list): Ditto.
* valarith.c (value_binop): Ditto.
(value_neg): Ditto.
* valops.c (value_slice): Ditto.
* symtab.h (union language_specific): Ditto.
(SYMBOL_INIT_LANGUAGE_SPECIFIC): Ditto.
(SYMBOL_DEMANGLED_NAME): Ditto.
(SYMBOL_CHILL_DEMANGLED_NAME): Ditto.
* defs.h (enum language): Ditto.
* symtab.c (got_symtab): Ditto.
* utils.c (fprintf_symbol_filtered): Ditto.

* ch-typeprint.c: Make file obsolete.
* ch-valprint.c: Make file obsolete.
* ch-lang.h: Make file obsolete.
* ch-exp.c: Make file obsolete.
* ch-lang.c: Make file obsolete.

* Makefile.in (FLAGS_TO_PASS): Do not pass CHILL or CHILLFLAGS or
CHILL_LIB.
(TARGET_FLAGS_TO_PASS): Ditto.
(CHILLFLAGS): Obsolete.
(CHILL): Obsolete.
(CHILL_FOR_TARGET): Obsolete.
(CHILL_LIB): Obsolete.
(SFILES): Remove ch-exp.c, ch-lang.c, ch-typeprint.c and
ch-valprint.c.
(HFILES_NO_SRCDIR): Remove ch-lang.h.
(COMMON_OBS): Remove ch-valprint.o, ch-typeprint.o, ch-exp.o and
ch-lang.o.
(ch-exp.o, ch-lang.o, ch-typeprint.o, ch-valprint.o): Delete
targets.

2002-08-01  Andrew Cagney  <cagney@@redhat.com>

* stabs.texinfo, gdb.texinfo, gdbint.texinfo: Obsolete references
to CHILL.

2002-08-01  Andrew Cagney  <cagney@@redhat.com>

* Makefile.in (TARGET_FLAGS_TO_PASS): Remove CHILLFLAGS, CHILL,
CHILL_FOR_TARGET and CHILL_LIB.
* configure.in (configdirs): Remove gdb.chill.
* configure: Regenerate.
* lib/gdb.exp: Obsolete references to chill.
* gdb.fortran/types.exp: Ditto.
* gdb.fortran/exprs.exp: Ditto.
@
text
@d677 3
a679 2
/* Print a message reporting an internal error. Ask the user if they
   want to continue, dump core, or just exit. */
d681 17
a697 3
NORETURN void
internal_verror (const char *file, int line,
		 const char *fmt, va_list ap)
d699 2
a700 2
  static char msg[] = "Internal GDB error: recursive internal error.\n";
  static int dejavu = 0;
d704 1
a704 1
  /* don't allow infinite error recursion. */
d720 1
a720 1
  /* Try to get the message out */
d722 5
a726 1
  fprintf_unfiltered (gdb_stderr, "%s:%d: gdb-internal-error: ", file, line);
d730 42
a771 11
  /* Default (yes/batch case) is to quit GDB.  When in batch mode this
     lessens the likelhood of GDB going into an infinate loop. */
  quit_p = query ("\
An internal GDB error was detected.  This may make further\n\
debugging unreliable.  Quit this debugging session? ");

  /* Default (yes/batch case) is to dump core.  This leaves a GDB
     dropping so that it is easier to see that something went wrong to
     GDB. */
  dump_core_p = query ("\
Create a core file containing the current state of GDB? ");
d790 11
d809 14
d824 6
a829 1
  internal_verror (file, line, string, ap);
@


1.76.6.1
log
@2002-11-12  Andrew Cagney  <ac131313@@redhat.com>

	* utils.c (gdb_realpath): Rewrite.  Try, in order: realpath() with
	a constant buffer; cannonicalize_file_name(); realpath() with a
	pathconf() defined buffer, xstrdup().
@
text
@a2536 4
  /* Method 1: The system has a compile time upper bound on a filename
     path.  Use that and realpath() to canonicalize the name.  This is
     the most common case.  Note that, if there isn't a compile time
     upper bound, you want to avoid realpath() at all costs.  */
a2537 1
  {
d2539 1
a2539 1
    char buf[PATH_MAX];
d2542 4
a2545 1
    char buf[MAXPATHLEN];
a2547 7
# if defined (USE_REALPATH)
    char *rp = realpath (filename, buf);
    if (rp == NULL)
      rp = filename;
    return xstrdup (rp);
  }
# endif
d2550 11
a2560 11
  /* Method 2: The host system (i.e., GNU) has the function
     canonicalize_file_name() which malloc's a chunk of memory and
     returns that, use that.  */
#if defined(HAVE_CANONICALIZE_FILE_NAME)
  {
    char *rp = canonicalize_file_name (filename);
    if (rp == NULL)
      return xstrdup (filename);
    else
      return rp;
  }
a2561 24

  /* Method 3: Now we're getting desperate!  The system doesn't have a
     compile time buffer size and no alternative function.  Query the
     OS, using pathconf(), for the buffer limit.  Care is needed
     though, some systems do not limit PATH_MAX (return -1 for
     pathconf()) making it impossible to pass a correctly sized buffer
     to realpath() (it could always overflow).  On those systems, we
     skip this.  */
#if defined (HAVE_REALPATH) && defined (HAVE_UNISTD_H) && defined(HAVE_ALLOCA)
  {
    /* Find out the max path size.  */
    long path_max = pathconf ("/", _PC_PATH_MAX);
    if (path_max > 0)
      {
	/* PATH_MAX is bounded.  */
	char *buf = alloca (path_max);
	char *rp = realpath (filename, buf);
	return xstrdup (rp ? rp : filename);
      }
  }
#endif

  /* This system is a lost cause, just dup the buffer.  */
  return xstrdup (filename);
@


1.76.6.2
log
@2002-11-19  Andrew Cagney  <ac131313@@redhat.com>

	From mainline:
	2002-11-12  Andrew Cagney  <ac131313@@redhat.com>
	* utils.c (gdb_realpath): Make rp a constant pointer.
@
text
@d2551 1
a2551 1
    const char *rp = realpath (filename, buf);
@


1.75
log
@	* utils.c (host_pointer_to_address, address_to_host_pointer):
	Use gdb_assert() instead of explicit call to internal_error().
@
text
@d2156 5
a2160 3
	    case language_chill:
	      demangled = chill_demangle (name);
	      break;
@


1.74
log
@	* utils.c (host_pointer_to_address, address_to_host_pointer):
	Change internal_error() message to indicate function responsible
	for the error.
@
text
@d2465 1
a2465 3
  if (sizeof (ptr) != TYPE_LENGTH (builtin_type_void_data_ptr))
    internal_error (__FILE__, __LINE__,
		    "host_pointer_to_address: bad cast");
d2473 2
a2474 3
  if (sizeof (ptr) != TYPE_LENGTH (builtin_type_void_data_ptr))
    internal_error (__FILE__, __LINE__,
		    "address_to_host_pointer: bad cast");
@


1.73
log
@	* defs.h (gdb_readline_wrapper): Declare.
	* utils.c (prompt_for_continue): Use gdb_readline_wrapper.
	* tracepoint.c (read_actions): Use gdb_readline_wrapper.
	* top.c (gdb_readline_wrapper): New function.
	(command_line_input): Use it.
@
text
@d2467 1
a2467 1
		    "core_addr_to_void_ptr: bad cast");
d2477 1
a2477 1
		    "core_addr_to_void_ptr: bad cast");
@


1.72
log
@(xfullpath): New function.
@
text
@d1606 1
a1606 1
  ignore = readline (cont_prompt);
@


1.72.6.1
log
@Merge with kseitz_interps-20020809-merge of CVS head.
@
text
@d1606 1
a1606 1
  ignore = gdb_readline_wrapper (cont_prompt);
d2156 3
a2158 5
#if 0
	      /* OBSOLETE case language_chill: */
	      /* OBSOLETE   demangled = chill_demangle (name); */
	      /* OBSOLETE   break; */
#endif
d2465 3
a2467 1
  gdb_assert (sizeof (ptr) == TYPE_LENGTH (builtin_type_void_data_ptr));
d2475 3
a2477 2

  gdb_assert (sizeof (ptr) == TYPE_LENGTH (builtin_type_void_data_ptr));
@


1.72.6.2
log
@Merge with kseitz_interps-20020930-merge.
@
text
@a62 1
#include "charset.h"
d677 2
a678 16
/* Print a message reporting an internal error/warning. Ask the user
   if they want to continue, dump core, or just exit.  Return
   something to indicate a quit.  */

struct internal_problem
{
  const char *name;
  /* FIXME: cagney/2002-08-15: There should be ``maint set/show''
     commands available for controlling these variables.  */
  enum auto_boolean should_quit;
  enum auto_boolean should_dump_core;
};

/* Report a problem, internal to GDB, to the user.  Once the problem
   has been reported, and assuming GDB didn't quit, the caller can
   either allow execution to resume or throw an error.  */
d680 3
a682 4
static void
internal_vproblem (struct internal_problem *problem,
const char *file, int line,
		  const char *fmt, va_list ap)
d684 2
a685 2
  static char msg[] = "Recursive internal problem.\n";
  static int dejavu;
d689 1
a689 1
  /* Don't allow infinite error/warning recursion.  */
d705 1
a705 1
  /* Try to get the message out and at the start of a new line.  */
d707 1
a707 5
  begin_line ();

  /* The error/warning message.  Format using a style similar to a
     compiler error message.  */
  fprintf_unfiltered (gdb_stderr, "%s:%d: %s: ", file, line, problem->name);
d711 11
a721 42
  /* Provide more details so that the user knows that they are living
     on the edge.  */
  fprintf_unfiltered (gdb_stderr, "\
A problem internal to GDB has been detected.  Further\n\
debugging may prove unreliable.\n");

  switch (problem->should_quit)
    {
    case AUTO_BOOLEAN_AUTO:
      /* Default (yes/batch case) is to quit GDB.  When in batch mode
	 this lessens the likelhood of GDB going into an infinate
	 loop.  */
      quit_p = query ("Quit this debugging session? ");
      break;
    case AUTO_BOOLEAN_TRUE:
      quit_p = 1;
      break;
    case AUTO_BOOLEAN_FALSE:
      quit_p = 0;
      break;
    default:
      internal_error (__FILE__, __LINE__, "bad switch");
    }

  switch (problem->should_dump_core)
    {
    case AUTO_BOOLEAN_AUTO:
      /* Default (yes/batch case) is to dump core.  This leaves a GDB
	 `dropping' so that it is easier to see that something went
	 wrong in GDB.  */
      dump_core_p = query ("Create a core file of GDB? ");
      break;
      break;
    case AUTO_BOOLEAN_TRUE:
      dump_core_p = 1;
      break;
    case AUTO_BOOLEAN_FALSE:
      dump_core_p = 0;
      break;
    default:
      internal_error (__FILE__, __LINE__, "bad switch");
    }
a739 11
}

static struct internal_problem internal_error_problem = {
  "internal-error", AUTO_BOOLEAN_AUTO, AUTO_BOOLEAN_AUTO
};

NORETURN void
internal_verror (const char *file, int line,
		 const char *fmt, va_list ap)
{
  internal_vproblem (&internal_error_problem, file, line, fmt, ap);
d748 1
a752 20
static struct internal_problem internal_warning_problem = {
  "internal-error", AUTO_BOOLEAN_AUTO, AUTO_BOOLEAN_AUTO
};

void
internal_vwarning (const char *file, int line,
		   const char *fmt, va_list ap)
{
  internal_vproblem (&internal_warning_problem, file, line, fmt, ap);
}

void
internal_warning (const char *file, int line, const char *string, ...)
{
  va_list ap;
  va_start (ap, string);
  internal_vwarning (file, line, string, ap);
  va_end (ap);
}

a1284 17
/* Print an error message saying that we couldn't make sense of a
   \^mumble sequence in a string or character constant.  START and END
   indicate a substring of some larger string that contains the
   erroneous backslash sequence, missing the initial backslash.  */
static NORETURN int
no_control_char_error (const char *start, const char *end)
{
  int len = end - start;
  char *copy = alloca (end - start + 1);

  memcpy (copy, start, len);
  copy[len] = '\0';

  error ("There is no control character `\\%s' in the `%s' character set.",
         copy, target_charset ());
}

a1302 1
  int target_char;
d1304 1
a1304 3
  if (c_parse_backslash (c, &target_char))
    return target_char;
  else switch (c)
d1306 16
d1328 6
a1333 37
      {
        /* Remember where this escape sequence started, for reporting
           errors.  */
        char *sequence_start_pos = *string_ptr - 1;

        c = *(*string_ptr)++;

        if (c == '?')
          {
            /* XXXCHARSET: What is `delete' in the host character set?  */
            c = 0177;

            if (! host_char_to_target (c, &target_char))
              error ("There is no character corresponding to `Delete' "
                     "in the target character set `%s'.",
                     host_charset ());

            return target_char;
          }
        else if (c == '\\')
          target_char = parse_escape (string_ptr);
        else
          {
            if (! host_char_to_target (c, &target_char))
              no_control_char_error (sequence_start_pos, *string_ptr);
          }          

        /* Now target_char is something like `c', and we want to find
           its control-character equivalent.  */
        if (! target_char_to_control_char (target_char, &target_char))
          no_control_char_error (sequence_start_pos, *string_ptr);

        return target_char;
      }

      /* XXXCHARSET: we need to use isdigit and value-of-digit
         methods of the host character set here.  */
d1362 1
a1362 6
      if (! host_char_to_target (c, &target_char))
        error ("The escape sequence `\%c' is equivalent to plain `%c', which"
               " has no equivalent\n"
               "in the `%s' character set.",
               c, c, target_charset ());
      return target_char;
@


1.72.6.3
log
@merge from mainline
@
text
@d156 2
a157 2
/* Nonzero means that encoded C++/ObjC names should be printed out in their
   C++/ObjC form rather than raw.  */
d161 2
a162 2
/* Nonzero means that encoded C++/ObjC names should be printed out in their
   C++/ObjC form even in assembler language displays.  If this is set, but
a1819 45
/* Print input string to gdb_stdout, filtered, with wrap, 
   arranging strings in columns of n chars. String can be
   right or left justified in the column.  Never prints 
   trailing spaces.  String should never be longer than
   width.  FIXME: this could be useful for the EXAMINE 
   command, which currently doesn't tabulate very well */

void
puts_filtered_tabular (char *string, int width, int right)
{
  int spaces = 0;
  int stringlen;
  char *spacebuf;

  gdb_assert (chars_per_line > 0);
  if (chars_per_line == UINT_MAX)
    {
      fputs_filtered (string, gdb_stdout);
      fputs_filtered ("\n", gdb_stdout);
      return;
    }

  if (((chars_printed - 1) / width + 2) * width >= chars_per_line)
    fputs_filtered ("\n", gdb_stdout);

  if (width >= chars_per_line)
    width = chars_per_line - 1;

  stringlen = strlen (string);

  if (chars_printed > 0)
    spaces = width - (chars_printed - 1) % width - 1;
  if (right)
    spaces += width - stringlen;

  spacebuf = alloca (spaces + 1);
  spacebuf[spaces] = '\0';
  while (spaces--)
    spacebuf[spaces] = ' ';

  fputs_filtered (spacebuf, gdb_stdout);
  fputs_filtered (string, gdb_stdout);
}


d2247 1
a2247 1
/* C++/ObjC demangler stuff.  */
a2276 4
	    case language_objc:
	      /* Commented out until ObjC handling is enabled.  */
	      /*demangled = objc_demangle (name);*/
	      /*break;*/
d2396 1
a2396 1
	     "Set demangling of encoded C++/ObjC names when displaying symbols.",
d2424 1
a2424 1
		  "Set demangling of C++/ObjC names in disassembly listings.",
@


1.71
log
@From veksler at il.ibm.com:
* utils.c (gdb_realpath): If canonicalize_file_name fails, return
the xstrduped original path.
Fix PR gdb/417.
@
text
@d64 1
d2563 47
@


1.70
log
@* defs.h (XMALLOC): Define.
* gdb-events.sh (XMALLOC): Delete macro.
* gdb-events.c, gdb-events.h: Regenerate.
* gdbarch.sh (XMALLOC): Delete macro.
* gdbarch.c: Regenerate.
* serial.c (XMALLOC): Delete macro.
* ui-file.c (XMALLOC): Ditto.
* ser-unix.h (XMALLOC): Ditto.
* sh-tdep.c (XMALLOC): Ditto.
* ui-out.c (XMALLOC): Ditto.
* utils.c (XMALLOC): Ditto.
* i386-tdep.c (XMALLOC): Ditto.
* gdb-events.c (XMALLOC): Ditto.
* d10v-tdep.c (XMALLOC): Ditto.
* cli-out.c (XMALLOC): Ditto.

* cli-out.c, d10v-tdep.c, gdb-events.c: Update copyright.
* gdb-events.sh, i386-tdep.c, ser-unix.h, serial.c: Ditto.
* ui-file.c, ui-out.c: Ditto.
@
text
@d2554 5
a2558 1
  return canonicalize_file_name (filename);
@


1.69
log
@        * configure.in: Detect declaration for canonicalize_file_name.
        * utils.c (canonicalize_file_name): Declare, if needed.
        (gdb_realpath): Prefer realpath if available and usable.
        * config.in, configure: Rebuild.
@
text
@a89 3
#undef XMALLOC
#define XMALLOC(TYPE) ((TYPE*) xmalloc (sizeof (TYPE)))

@


1.68
log
@Add FIXME explaining include problem.
@
text
@d84 5
d2540 2
a2541 4
#ifdef HAVE_CANONICALIZE_FILE_NAME
  return canonicalize_file_name (filename);
#elif defined (HAVE_REALPATH)
#if defined (PATH_MAX)
d2543 2
a2544 1
#elif defined (MAXPATHLEN)
d2546 2
a2547 1
#elif defined (HAVE_UNISTD_H) && defined(HAVE_ALLOCA)
d2549 5
a2553 3
#else
#error "Neither PATH_MAX nor MAXPATHLEN defined"
#endif
d2556 2
@


1.68.2.1
log
@From veksler at il.ibm.com:
* utils.c (gdb_realpath): If canonicalize_file_name fails, return
the xstrduped original path.
Fix PR gdb/417.

From 2002-03-14 Richard Henderson <rth@@redhat.com>
* configure.in: Detect declaration for canonicalize_file_name.
* utils.c (canonicalize_file_name): Declare, if needed.
(gdb_realpath): Prefer realpath if available and usable.
* config.in, configure: Rebuild.
@
text
@a83 5
/* Actually, we'll never have the decl, since we don't define _GNU_SOURCE.  */
#if defined(HAVE_CANONICALIZE_FILE_NAME) \
    && defined(NEED_DECLARATION_CANONICALIZE_FILE_NAME)
extern char *canonicalize_file_name (const char *);
#endif
d2535 4
a2538 2
#if defined(HAVE_REALPATH)
# if defined (PATH_MAX)
d2540 1
a2540 2
#  define USE_REALPATH
# elif defined (MAXPATHLEN)
d2542 1
a2542 2
#  define USE_REALPATH
# elif defined (HAVE_UNISTD_H) && defined(HAVE_ALLOCA)
d2544 3
a2546 5
#  define USE_REALPATH
# endif
#endif /* HAVE_REALPATH */

#if defined(USE_REALPATH)
a2548 6
#elif defined(HAVE_CANONICALIZE_FILE_NAME)
  char *rp = canonicalize_file_name (filename);
  if (rp == NULL)
    return xstrdup (filename);
  else
    return rp;
@


1.67
log
@2002-02-27  Rodney Brown  <rbrown64@@csc.com.au>

      * utils.c (gdb_realpath): Add pathconf fallback for sco3.2v5.
@
text
@d23 8
a32 2
/* Include before "bfd.h" so that we get stdbool.h in time, if <curses.h>
   brings it in.  */
@


1.66
log
@* utils.c (perror_with_name): Make string parameter constant.
(print_sys_errmsg): Ditto.
(query): Ditto.
* defs.h (perror_with_name): Update.
(print_sys_errmsg): Update.
(query): Update.
@
text
@d2536 2
@


1.65
log
@* configure.in: (AC_CHECK_FUNCS) Added test for
canonicalize_file_name Regenerated.
* config.in, configure: Regenerated.
* utils.c: (gdb_realpath) If HAVE_CANONICALIZE_FILE_NAME is
defined use canonicalize_file_name.
@
text
@d767 1
a767 1
perror_with_name (char *string)
d791 1
a791 1
print_sys_errmsg (char *string, int errcode)
d1204 1
a1204 1
query (char *ctlstr,...)
@


1.64
log
@	* defs.h (core_addr_to_string_nz): New function.
	* utils.c (core_addr_to_string): Use phex instead of phex_nz.
	(core_addr_to_string_nz): New function.
@
text
@d2529 3
a2531 1
#ifdef HAVE_REALPATH
@


1.63
log
@* defs.h (throw_exception): Rename return_to_top_level.  Update
comments.
* utils.c (error_stream, internal_verror, quit): Ditto.
* top.c (throw_exception, catcher): Ditto.
* sparclet-rom.c (sparclet_load): Ditto.
* remote.c (interrupt_query, minitelnet): Ditto.
* remote-sds.c (interrupt_query): Ditto.
* remote-mips.c (mips_error, mips_kill): Ditto.
* ocd.c (interrupt_query): Ditto.
* monitor.c (monitor_interrupt_query): Ditto.
* m3-nat.c (suspend_all_threads, thread_resume_command): Ditto.
* target.h: Update comment.

* m3-nat.c, ocd.c, sparclet-rom.c: Update copyright.
@
text
@d2479 9
@


1.62
log
@2002-02-08  Daniel Jacobowitz  <drow@@mvista.com>

        * utils.c: Include <curses.h> before "bfd.h".
        * tui/tui-hooks.c: Likewise.
        * tui/tui.c: Likewise.
        * tui/tuiCommand.c: Likewise.
        * tui/tuiData.c: Likewise.
        * tui/tuiDataWin.c: Likewise.
        * tui/tuiDisassem.c: Likewise.
        * tui/tuiGeneralWin.c: Likewise.
        * tui/tuiIO.c: Likewise.
        * tui/tuiLayout.c: Likewise.
        * tui/tuiRegs.c: Likewise.
        * tui/tuiSource.c: Likewise.
        * tui/tuiSourceWin.c: Likewise.
        * tui/tuiStack.c: Likewise.
        * tui/tuiWin.c: Likewise.
@
text
@d648 1
a648 1
  return_to_top_level (RETURN_ERROR);
d731 1
a731 1
  return_to_top_level (RETURN_ERROR);
d853 1
a853 1
  return_to_top_level (RETURN_QUIT);
@


1.61
log
@* cli/cli-decode.c (do_cfunc, set_cmd_cfunc): New functions.
(do_sfunc, set_cmd_sfunc): New functions.

* command.h (struct cmd_list_element): Add field func.
* cli/cli-decode.h (struct cmd_list_element): Ditto.
* command.h (set_cmd_sfunc, set_cmd_cfunc): Declare.
* cli/cli-decode.h: Ditto.

* cli/cli-decode.c (help_cmd): Test for func not cfunc/sfunc.
(help_all, help_cmd_list): Ditto.
(find_cmd, complete_on_cmdlist): Ditto.
* top.c (execute_command): Ditto.

* cli/cli-setshow.c (do_setshow_command): Call func instead of
function.sfunc.

* infcmd.c (notice_args_read): Fix function signature.

* cli/cli-cmds.c (init_cli_cmds): Use set_cmd_sfunc.
* cli/cli-decode.c (add_set_cmd): Ditto.
* utils.c (initialize_utils): Ditto.
* maint.c (_initialize_maint_cmds): Ditto.
* infrun.c (_initialize_infrun): Ditto.
* demangle.c (_initialize_demangler): Ditto.
* remote.c (add_packet_config_cmd): Ditto.
* mips-tdep.c (_initialize_mips_tdep): Ditto.
* cris-tdep.c (_initialize_cris_tdep): Ditto.
* proc-api.c (_initialize_proc_api): Ditto.
* kod.c (_initialize_kod): Ditto.
* valprint.c (_initialize_valprint): Ditto.
* top.c (init_main): Ditto.
* infcmd.c (_initialize_infcmd): Ditto.
* corefile.c (_initialize_core): Ditto.
* arm-tdep.c (_initialize_arm_tdep): Ditto.
* arch-utils.c (initialize_current_architecture): Ditto.
(_initialize_gdbarch_utils): Ditto.
* alpha-tdep.c (_initialize_alpha_tdep): Ditto.

* cli/cli-decode.c (add_cmd): Use set_cmd_cfunc.
* wince.c (_initialize_inftarg): Ditto.
* symfile.c (_initialize_symfile): Ditto.
* mips-tdep.c (_initialize_mips_tdep): Ditto.
* language.c (_initialize_language): Ditto.
* arc-tdep.c (_initialize_arc_tdep): Ditto.
@
text
@d23 1
a23 5
#include "defs.h"
#include "gdb_assert.h"
#include <ctype.h>
#include "gdb_string.h"
#include "event-top.h"
d25 2
d33 6
@


1.60
log
@* utils.c (do_write): New function.
(error_stream): Rewrite combining the code from error_begin and
verror.
(verror): Rewrite using error_stream.
(error_begin): Delete function.
@
text
@d2241 1
a2241 1
  c->function.sfunc = set_width_command;
@


1.59
log
@* utils.c (error_begin): Make static.
* defs.h (error_begin): Delete declaration.

* linespec.c (cplusplus_error): Replace cplusplus_hint.
(decode_line_1): Use cplusplus_error instead of error_begin,
cplusplus_hint and return_to_top_level.
* coffread.c (coff_symfile_read): Use error instead of error_begin
and return_to_top_level.
* infrun.c (default_skip_permanent_breakpoint): Ditto.
@
text
@a595 23
/* Start the printing of an error message.  Way to use this is to call
   this, output the error message (use filtered output to gdb_stderr
   (FIXME: Some callers, like memory_error, use gdb_stdout)), ending
   in a newline, and then call return_to_top_level (RETURN_ERROR).
   error() provides a convenient way to do this for the special case
   that the error message can be formatted with a single printf call,
   but this is more general.  */
static void
error_begin (void)
{
  if (error_begin_hook)
    error_begin_hook ();

  target_terminal_ours ();
  wrap_here ("");		/* Force out any buffered output */
  gdb_flush (gdb_stdout);

  annotate_error_begin ();

  if (error_pre_print)
    fprintf_filtered (gdb_stderr, error_pre_print);
}

d603 4
a606 23
  char *err_string;
  struct cleanup *err_string_cleanup;
  /* FIXME: cagney/1999-11-10: All error calls should come here.
     Unfortunately some code uses the sequence: error_begin(); print
     error message; return_to_top_level.  That code should be
     flushed. */
  error_begin ();
  /* NOTE: It's tempting to just do the following...
	vfprintf_filtered (gdb_stderr, string, args);
     and then follow with a similar looking statement to cause the message
     to also go to gdb_lasterr.  But if we do this, we'll be traversing the
     va_list twice which works on some platforms and fails miserably on
     others. */
  /* Save it as the last error */
  ui_file_rewind (gdb_lasterr);
  vfprintf_filtered (gdb_lasterr, string, args);
  /* Retrieve the last error and print it to gdb_stderr */
  err_string = error_last_message ();
  err_string_cleanup = make_cleanup (xfree, err_string);
  fputs_filtered (err_string, gdb_stderr);
  fprintf_filtered (gdb_stderr, "\n");
  do_cleanups (err_string_cleanup);
  return_to_top_level (RETURN_ERROR);
d618 6
d627 18
a644 4
  long size;
  char *msg = ui_file_xstrdup (stream, &size);
  make_cleanup (xfree, msg);
  error ("%s", msg);
@


1.58
log
@* defs.h (vwarning): Declare.
(warning_begin): Delete declaration.
* utils.c (vwarning): New function.
(warning): Call vwarning.
(warning_begin): Delete function.

* rs6000-nat.c (vmap_ldinfo): Use the function warning to print
the warning message.
* d10v-tdep.c (d10v_address_to_pointer) [0]: Delete call to
warning_begin.
@
text
@d603 1
a603 1
void
@


1.57
log
@Eliminate MALLOC_INCOMPATIBLE.
@
text
@d557 5
a561 8
/* Print a warning message.  Way to use this is to call warning_begin,
   output the warning message (use unfiltered output to gdb_stderr),
   ending in a newline.  There is not currently a warning_end that you
   call afterwards, but such a thing might be added if it is useful
   for a GUI to separate warning messages from other output.

   FIXME: Why do warnings use unfiltered output and errors filtered?
   Is this anything other than a historical accident?  */
d564 1
a564 1
warning_begin (void)
d566 13
a578 5
  target_terminal_ours ();
  wrap_here ("");		/* Force out any buffered output */
  gdb_flush (gdb_stdout);
  if (warning_pre_print)
    fprintf_unfiltered (gdb_stderr, warning_pre_print);
d592 2
a593 9
  if (warning_hook)
    (*warning_hook) (string, args);
  else
    {
      warning_begin ();
      vfprintf_unfiltered (gdb_stderr, string, args);
      fprintf_unfiltered (gdb_stderr, "\n");
      va_end (args);
    }
@


1.56
log
@Use MAXPATHLEN when no PATH_MAX.
@
text
@a64 1
#ifndef MALLOC_INCOMPATIBLE
a72 1
#endif
@


1.55
log
@Change behavour of internal-error to quit and dump core by default.
@
text
@d57 2
d2543 1
d2545 5
@


1.54
log
@Remove obsolete MacOS support.
@
text
@d697 1
a697 1
  int continue_p;
d722 1
a722 1
  /* Default (no case) is to quit GDB.  When in batch mode this
d724 1
a724 1
  continue_p = query ("\
d726 1
a726 1
debugging unreliable.  Continue this debugging session? ");
d728 3
a730 2
  /* Default (no case) is to not dump core.  Lessen the chance of GDB
     leaving random core files around. */
d734 8
a741 1
  if (continue_p)
a747 7
    }
  else
    {
      if (dump_core_p)
	abort (); /* NOTE: GDB has only three calls to abort().  */
      else
	exit (1);
@


1.53
log
@	* configure, config.in: Rebuilt.
	* configure.in: Check for realpath.
	* defs.h (gdb_realpath): Declare.
	* symtab.h (partial_symtab): Added fullname field.
	* source.c (openp): Use gdb_realpath.
	(forget_cached_source_info): Clear full name of each partial
	symtab.
	* utils.c (gdb_realpath): New function.
	* symtab.c (lookup_symtab): Removed.
	(lookup_symtab_1): Renamed to lookup_symtab.
	(lookup_symtab): Look for real path.
	(lookup_partial_symtab): Likewise.
@
text
@d2 2
a3 2
   Copyright 1986, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996,
   1997, 1998, 1999, 2000, 2001
a1239 5
  /* OBSOLETE #ifdef MPW */
  /* OBSOLETE    *//* FIXME Automatically answer "yes" if called from MacGDB.  */
  /* OBSOLETE   if (mac_app) */
  /* OBSOLETE     return 1; */
  /* OBSOLETE #endif  *//* MPW */
a1253 7

      /* OBSOLETE #ifdef MPW */
      /* OBSOLETE        *//* If not in MacGDB, move to a new line so the entered line doesn't */
      /* OBSOLETE          have a prompt on the front of it. */
      /* OBSOLETE       if (!mac_app) */
      /* OBSOLETE 	fputs_unfiltered ("\n", gdb_stdout); */
      /* OBSOLETE #endif  *//* MPW */
@


1.52
log
@Eliminate global #include of "mmalloc.h".
@
text
@d2547 12
@


1.51
log
@Correctly handle phex(*,0) and phex_nz(*,0).
@
text
@d59 4
d900 2
a901 2
PTR
mmalloc (PTR md, size_t size)
d906 2
a907 2
PTR
mrealloc (PTR md, PTR ptr, size_t size)
d915 2
a916 2
PTR
mcalloc (PTR md, size_t number, size_t size)
d921 2
a922 2
void
mfree (PTR md, PTR ptr)
@


1.50
log
@* utils.c (phex_nz): For default case, set str to phex_nz return
value.
@
text
@d2421 1
a2421 1
  char *str = get_cell ();
d2425 1
d2431 1
d2435 1
d2439 1
a2439 1
      phex (l, sizeof (l));
@


1.49
log
@* utils.c (internal_verror): Restore calls to abort().
Fix PR gdb/219.
@
text
@d2445 1
a2445 1
  char *str = get_cell ();
d2451 1
d2460 1
d2464 1
d2468 1
a2468 1
      phex_nz (l, sizeof (l));
@


1.48
log
@Functions to convert to/from CORE_ADDR and a string.  Use in Insight.
@
text
@d705 1
a705 1
      internal_error (__FILE__, __LINE__, "failed internal consistency check");
d734 1
a734 1
	    internal_error (__FILE__, __LINE__, "failed internal consistency check");
d740 1
a740 1
	internal_error (__FILE__, __LINE__, "failed internal consistency check");
@


1.47
log
@* defs.h (HOST_FLOAT_FORMAT, HOST_DOUBLE_FORMAT)
(HOST_FLOAT_FORMAT, HOST_DOUBLE_FORMAT)
(HOST_LONG_DOUBLE_FORMAT, DOUBLEST)
(floatformat_to_doublest, floatformat_from_doublest)
(floatformat_is_negative, floatformat_is_nan)
(floatformat_mantissa, store_floating)
(extract_floating): Move declaration from here.
* doublest.h: To here.  New file.
* utils.c (get_field, floatformat_to_doublest, put_field)
(ldfrexp, floatformat_from_doublest, floatformat_is_negative)
(floatformat_is_nan, floatformat_mantissa)
(FLOATFORMAT_CHAR_BIT): Move from here.
* doublest.c: To here.  New file.
* findvar.c (store_floating, extract_floating): Move from here.
* doublest.c: To here.
* Makefile.in (SFILES): Add doublest.c.
(COMMON_OBS): Add doublest.o.
(doublest.o): Specify dependencies.
(doublest_h): Define.

* config/m88k/tm-m88k.h: Include "doublest.h".
* config/i960/tm-i960.h: Ditto.
* config/i386/tm-symmetry.h: Ditto.
* rs6000-tdep.c, valarith.c: Ditto.
* valprint.c, stabsread.c, sh-tdep.c: Ditto.
* ia64-tdep.c, i387-tdep.c, i386-tdep.c: Ditto.
* values.c, arm-tdep.c, arm-linux-tdep.c: Ditto.
* alpha-tdep.c, ax.h, expression.h: Ditto.
* sh-tdep.c, parse.c, top.c, value.h: Ditto.

* Makefile.in (arm-tdep.o): Add $(doublest_h).
(i386-tdep.o, i387-tdep.o, ia64-tdep.o): Ditto.
(rs6000-tdep.o, stabsread.o, valarith.o): Ditto.
(values.o, valprint.o, arm-linux-tdep.o): Ditto.
(alpha-tdep.o, ax_h, parse.o, top.o, value_h): Ditto.
(parser_defs_h): Ditto.
(expression_h): Add $(doublest_h) and $(symtab_h).
@
text
@d2493 44
@


1.46
log
@	* utils.c (init_page_info): Use tui_get_command_dimension.
	* printcmd.c (disassemble_command): Simplify tui specific code,
	use tui_is_window_visible, tui_show_assembly.
@
text
@a2328 505

/* Support for converting target fp numbers into host DOUBLEST format.  */

/* XXX - This code should really be in libiberty/floatformat.c, however
   configuration issues with libiberty made this very difficult to do in the
   available time.  */

#include "floatformat.h"
#include <math.h>		/* ldexp */

/* The odds that CHAR_BIT will be anything but 8 are low enough that I'm not
   going to bother with trying to muck around with whether it is defined in
   a system header, what we do if not, etc.  */
#define FLOATFORMAT_CHAR_BIT 8

static unsigned long get_field (unsigned char *,
				enum floatformat_byteorders,
				unsigned int, unsigned int, unsigned int);

/* Extract a field which starts at START and is LEN bytes long.  DATA and
   TOTAL_LEN are the thing we are extracting it from, in byteorder ORDER.  */
static unsigned long
get_field (unsigned char *data, enum floatformat_byteorders order,
	   unsigned int total_len, unsigned int start, unsigned int len)
{
  unsigned long result;
  unsigned int cur_byte;
  int cur_bitshift;

  /* Start at the least significant part of the field.  */
  if (order == floatformat_little || order == floatformat_littlebyte_bigword)
    {
      /* We start counting from the other end (i.e, from the high bytes
	 rather than the low bytes).  As such, we need to be concerned
	 with what happens if bit 0 doesn't start on a byte boundary. 
	 I.e, we need to properly handle the case where total_len is
	 not evenly divisible by 8.  So we compute ``excess'' which
	 represents the number of bits from the end of our starting
	 byte needed to get to bit 0. */
      int excess = FLOATFORMAT_CHAR_BIT - (total_len % FLOATFORMAT_CHAR_BIT);
      cur_byte = (total_len / FLOATFORMAT_CHAR_BIT) 
                 - ((start + len + excess) / FLOATFORMAT_CHAR_BIT);
      cur_bitshift = ((start + len + excess) % FLOATFORMAT_CHAR_BIT) 
                     - FLOATFORMAT_CHAR_BIT;
    }
  else
    {
      cur_byte = (start + len) / FLOATFORMAT_CHAR_BIT;
      cur_bitshift =
	((start + len) % FLOATFORMAT_CHAR_BIT) - FLOATFORMAT_CHAR_BIT;
    }
  if (cur_bitshift > -FLOATFORMAT_CHAR_BIT)
    result = *(data + cur_byte) >> (-cur_bitshift);
  else
    result = 0;
  cur_bitshift += FLOATFORMAT_CHAR_BIT;
  if (order == floatformat_little || order == floatformat_littlebyte_bigword)
    ++cur_byte;
  else
    --cur_byte;

  /* Move towards the most significant part of the field.  */
  while (cur_bitshift < len)
    {
      result |= (unsigned long)*(data + cur_byte) << cur_bitshift;
      cur_bitshift += FLOATFORMAT_CHAR_BIT;
      if (order == floatformat_little || order == floatformat_littlebyte_bigword)
	++cur_byte;
      else
	--cur_byte;
    }
  if (len < sizeof(result) * FLOATFORMAT_CHAR_BIT)
    /* Mask out bits which are not part of the field */
    result &= ((1UL << len) - 1);
  return result;
}

/* Convert from FMT to a DOUBLEST.
   FROM is the address of the extended float.
   Store the DOUBLEST in *TO.  */

void
floatformat_to_doublest (const struct floatformat *fmt, char *from,
			 DOUBLEST *to)
{
  unsigned char *ufrom = (unsigned char *) from;
  DOUBLEST dto;
  long exponent;
  unsigned long mant;
  unsigned int mant_bits, mant_off;
  int mant_bits_left;
  int special_exponent;		/* It's a NaN, denorm or zero */

  /* If the mantissa bits are not contiguous from one end of the
     mantissa to the other, we need to make a private copy of the
     source bytes that is in the right order since the unpacking
     algorithm assumes that the bits are contiguous.

     Swap the bytes individually rather than accessing them through
     "long *" since we have no guarantee that they start on a long
     alignment, and also sizeof(long) for the host could be different
     than sizeof(long) for the target.  FIXME: Assumes sizeof(long)
     for the target is 4. */

  if (fmt->byteorder == floatformat_littlebyte_bigword)
    {
      static unsigned char *newfrom;
      unsigned char *swapin, *swapout;
      int longswaps;

      longswaps = fmt->totalsize / FLOATFORMAT_CHAR_BIT;
      longswaps >>= 3;

      if (newfrom == NULL)
	{
	  newfrom = (unsigned char *) xmalloc (fmt->totalsize);
	}
      swapout = newfrom;
      swapin = ufrom;
      ufrom = newfrom;
      while (longswaps-- > 0)
	{
	  /* This is ugly, but efficient */
	  *swapout++ = swapin[4];
	  *swapout++ = swapin[5];
	  *swapout++ = swapin[6];
	  *swapout++ = swapin[7];
	  *swapout++ = swapin[0];
	  *swapout++ = swapin[1];
	  *swapout++ = swapin[2];
	  *swapout++ = swapin[3];
	  swapin += 8;
	}
    }

  exponent = get_field (ufrom, fmt->byteorder, fmt->totalsize,
			fmt->exp_start, fmt->exp_len);
  /* Note that if exponent indicates a NaN, we can't really do anything useful
     (not knowing if the host has NaN's, or how to build one).  So it will
     end up as an infinity or something close; that is OK.  */

  mant_bits_left = fmt->man_len;
  mant_off = fmt->man_start;
  dto = 0.0;

  special_exponent = exponent == 0 || exponent == fmt->exp_nan;

/* Don't bias NaNs. Use minimum exponent for denorms. For simplicity,
   we don't check for zero as the exponent doesn't matter. */
  if (!special_exponent)
    exponent -= fmt->exp_bias;
  else if (exponent == 0)
    exponent = 1 - fmt->exp_bias;

  /* Build the result algebraically.  Might go infinite, underflow, etc;
     who cares. */

/* If this format uses a hidden bit, explicitly add it in now.  Otherwise,
   increment the exponent by one to account for the integer bit.  */

  if (!special_exponent)
    {
      if (fmt->intbit == floatformat_intbit_no)
	dto = ldexp (1.0, exponent);
      else
	exponent++;
    }

  while (mant_bits_left > 0)
    {
      mant_bits = min (mant_bits_left, 32);

      mant = get_field (ufrom, fmt->byteorder, fmt->totalsize,
			mant_off, mant_bits);

      dto += ldexp ((double) mant, exponent - mant_bits);
      exponent -= mant_bits;
      mant_off += mant_bits;
      mant_bits_left -= mant_bits;
    }

  /* Negate it if negative.  */
  if (get_field (ufrom, fmt->byteorder, fmt->totalsize, fmt->sign_start, 1))
    dto = -dto;
  *to = dto;
}

static void put_field (unsigned char *, enum floatformat_byteorders,
		       unsigned int,
		       unsigned int, unsigned int, unsigned long);

/* Set a field which starts at START and is LEN bytes long.  DATA and
   TOTAL_LEN are the thing we are extracting it from, in byteorder ORDER.  */
static void
put_field (unsigned char *data, enum floatformat_byteorders order,
	   unsigned int total_len, unsigned int start, unsigned int len,
	   unsigned long stuff_to_put)
{
  unsigned int cur_byte;
  int cur_bitshift;

  /* Start at the least significant part of the field.  */
  if (order == floatformat_little || order == floatformat_littlebyte_bigword)
    {
      int excess = FLOATFORMAT_CHAR_BIT - (total_len % FLOATFORMAT_CHAR_BIT);
      cur_byte = (total_len / FLOATFORMAT_CHAR_BIT) 
                 - ((start + len + excess) / FLOATFORMAT_CHAR_BIT);
      cur_bitshift = ((start + len + excess) % FLOATFORMAT_CHAR_BIT) 
                     - FLOATFORMAT_CHAR_BIT;
    }
  else
    {
      cur_byte = (start + len) / FLOATFORMAT_CHAR_BIT;
      cur_bitshift =
	((start + len) % FLOATFORMAT_CHAR_BIT) - FLOATFORMAT_CHAR_BIT;
    }
  if (cur_bitshift > -FLOATFORMAT_CHAR_BIT)
    {
      *(data + cur_byte) &=
	~(((1 << ((start + len) % FLOATFORMAT_CHAR_BIT)) - 1)
	  << (-cur_bitshift));
      *(data + cur_byte) |=
	(stuff_to_put & ((1 << FLOATFORMAT_CHAR_BIT) - 1)) << (-cur_bitshift);
    }
  cur_bitshift += FLOATFORMAT_CHAR_BIT;
  if (order == floatformat_little || order == floatformat_littlebyte_bigword)
    ++cur_byte;
  else
    --cur_byte;

  /* Move towards the most significant part of the field.  */
  while (cur_bitshift < len)
    {
      if (len - cur_bitshift < FLOATFORMAT_CHAR_BIT)
	{
	  /* This is the last byte.  */
	  *(data + cur_byte) &=
	    ~((1 << (len - cur_bitshift)) - 1);
	  *(data + cur_byte) |= (stuff_to_put >> cur_bitshift);
	}
      else
	*(data + cur_byte) = ((stuff_to_put >> cur_bitshift)
			      & ((1 << FLOATFORMAT_CHAR_BIT) - 1));
      cur_bitshift += FLOATFORMAT_CHAR_BIT;
      if (order == floatformat_little || order == floatformat_littlebyte_bigword)
	++cur_byte;
      else
	--cur_byte;
    }
}

#ifdef HAVE_LONG_DOUBLE
/* Return the fractional part of VALUE, and put the exponent of VALUE in *EPTR.
   The range of the returned value is >= 0.5 and < 1.0.  This is equivalent to
   frexp, but operates on the long double data type.  */

static long double ldfrexp (long double value, int *eptr);

static long double
ldfrexp (long double value, int *eptr)
{
  long double tmp;
  int exp;

  /* Unfortunately, there are no portable functions for extracting the exponent
     of a long double, so we have to do it iteratively by multiplying or dividing
     by two until the fraction is between 0.5 and 1.0.  */

  if (value < 0.0l)
    value = -value;

  tmp = 1.0l;
  exp = 0;

  if (value >= tmp)		/* Value >= 1.0 */
    while (value >= tmp)
      {
	tmp *= 2.0l;
	exp++;
      }
  else if (value != 0.0l)	/* Value < 1.0  and > 0.0 */
    {
      while (value < tmp)
	{
	  tmp /= 2.0l;
	  exp--;
	}
      tmp *= 2.0l;
      exp++;
    }

  *eptr = exp;
  return value / tmp;
}
#endif /* HAVE_LONG_DOUBLE */


/* The converse: convert the DOUBLEST *FROM to an extended float
   and store where TO points.  Neither FROM nor TO have any alignment
   restrictions.  */

void
floatformat_from_doublest (CONST struct floatformat *fmt, DOUBLEST *from,
			   char *to)
{
  DOUBLEST dfrom;
  int exponent;
  DOUBLEST mant;
  unsigned int mant_bits, mant_off;
  int mant_bits_left;
  unsigned char *uto = (unsigned char *) to;

  memcpy (&dfrom, from, sizeof (dfrom));
  memset (uto, 0, (fmt->totalsize + FLOATFORMAT_CHAR_BIT - 1) 
                    / FLOATFORMAT_CHAR_BIT);
  if (dfrom == 0)
    return;			/* Result is zero */
  if (dfrom != dfrom)		/* Result is NaN */
    {
      /* From is NaN */
      put_field (uto, fmt->byteorder, fmt->totalsize, fmt->exp_start,
		 fmt->exp_len, fmt->exp_nan);
      /* Be sure it's not infinity, but NaN value is irrel */
      put_field (uto, fmt->byteorder, fmt->totalsize, fmt->man_start,
		 32, 1);
      return;
    }

  /* If negative, set the sign bit.  */
  if (dfrom < 0)
    {
      put_field (uto, fmt->byteorder, fmt->totalsize, fmt->sign_start, 1, 1);
      dfrom = -dfrom;
    }

  if (dfrom + dfrom == dfrom && dfrom != 0.0)	/* Result is Infinity */
    {
      /* Infinity exponent is same as NaN's.  */
      put_field (uto, fmt->byteorder, fmt->totalsize, fmt->exp_start,
		 fmt->exp_len, fmt->exp_nan);
      /* Infinity mantissa is all zeroes.  */
      put_field (uto, fmt->byteorder, fmt->totalsize, fmt->man_start,
		 fmt->man_len, 0);
      return;
    }

#ifdef HAVE_LONG_DOUBLE
  mant = ldfrexp (dfrom, &exponent);
#else
  mant = frexp (dfrom, &exponent);
#endif

  put_field (uto, fmt->byteorder, fmt->totalsize, fmt->exp_start, fmt->exp_len,
	     exponent + fmt->exp_bias - 1);

  mant_bits_left = fmt->man_len;
  mant_off = fmt->man_start;
  while (mant_bits_left > 0)
    {
      unsigned long mant_long;
      mant_bits = mant_bits_left < 32 ? mant_bits_left : 32;

      mant *= 4294967296.0;
      mant_long = ((unsigned long) mant) & 0xffffffffL;
      mant -= mant_long;

      /* If the integer bit is implicit, then we need to discard it.
         If we are discarding a zero, we should be (but are not) creating
         a denormalized number which means adjusting the exponent
         (I think).  */
      if (mant_bits_left == fmt->man_len
	  && fmt->intbit == floatformat_intbit_no)
	{
	  mant_long <<= 1;
	  mant_long &= 0xffffffffL;
	  mant_bits -= 1;
	}

      if (mant_bits < 32)
	{
	  /* The bits we want are in the most significant MANT_BITS bits of
	     mant_long.  Move them to the least significant.  */
	  mant_long >>= 32 - mant_bits;
	}

      put_field (uto, fmt->byteorder, fmt->totalsize,
		 mant_off, mant_bits, mant_long);
      mant_off += mant_bits;
      mant_bits_left -= mant_bits;
    }
  if (fmt->byteorder == floatformat_littlebyte_bigword)
    {
      int count;
      unsigned char *swaplow = uto;
      unsigned char *swaphigh = uto + 4;
      unsigned char tmp;

      for (count = 0; count < 4; count++)
	{
	  tmp = *swaplow;
	  *swaplow++ = *swaphigh;
	  *swaphigh++ = tmp;
	}
    }
}

/* Check if VAL (which is assumed to be a floating point number whose
   format is described by FMT) is negative.  */

int
floatformat_is_negative (const struct floatformat *fmt, char *val)
{
  unsigned char *uval = (unsigned char *) val;

  return get_field (uval, fmt->byteorder, fmt->totalsize, fmt->sign_start, 1);
}

/* Check if VAL is "not a number" (NaN) for FMT.  */

int
floatformat_is_nan (const struct floatformat *fmt, char *val)
{
  unsigned char *uval = (unsigned char *) val;
  long exponent;
  unsigned long mant;
  unsigned int mant_bits, mant_off;
  int mant_bits_left;

  if (! fmt->exp_nan)
    return 0;

  exponent = get_field (uval, fmt->byteorder, fmt->totalsize,
			fmt->exp_start, fmt->exp_len);

  if (exponent != fmt->exp_nan)
    return 0;

  mant_bits_left = fmt->man_len;
  mant_off = fmt->man_start;

  while (mant_bits_left > 0)
    {
      mant_bits = min (mant_bits_left, 32);

      mant = get_field (uval, fmt->byteorder, fmt->totalsize,
			mant_off, mant_bits);

      /* If there is an explicit integer bit, mask it off.  */
      if (mant_off == fmt->man_start
	  && fmt->intbit == floatformat_intbit_yes)
	mant &= ~(1 << (mant_bits - 1));

      if (mant)
	return 1;

      mant_off += mant_bits;
      mant_bits_left -= mant_bits;
    }

  return 0;
}

/* Convert the mantissa of VAL (which is assumed to be a floating
   point number whose format is described by FMT) into a hexadecimal
   and store it in a static string.  Return a pointer to that string.  */

char *
floatformat_mantissa (const struct floatformat *fmt, char *val)
{
  unsigned char *uval = (unsigned char *) val;
  unsigned long mant;
  unsigned int mant_bits, mant_off;
  int mant_bits_left;
  static char res[50];
  char buf[9];

  /* Make sure we have enough room to store the mantissa.  */
  gdb_assert (sizeof res > ((fmt->man_len + 7) / 8) * 2);

  mant_off = fmt->man_start;
  mant_bits_left = fmt->man_len;
  mant_bits = (mant_bits_left % 32) > 0 ? mant_bits_left % 32 : 32;

  mant = get_field (uval, fmt->byteorder, fmt->totalsize,
		    mant_off, mant_bits);

  sprintf (res, "%lx", mant);

  mant_off += mant_bits;
  mant_bits_left -= mant_bits;
  
  while (mant_bits_left > 0)
    {
      mant = get_field (uval, fmt->byteorder, fmt->totalsize,
			mant_off, 32);

      sprintf (buf, "%08lx", mant);
      strcat (res, buf);

      mant_off += 32;
      mant_bits_left -= 32;
    }

  return res;
}
@


1.46.2.1
log
@* utils.c (internal_verror): Restore calls to abort().
Fix PR gdb/219.
@
text
@d705 1
a705 1
      abort (); /* NOTE: GDB has only three calls to abort().  */
d734 1
a734 1
	    abort (); /* NOTE: GDB has only three calls to abort().  */
d740 1
a740 1
	abort (); /* NOTE: GDB has only three calls to abort().  */
@


1.45
log
@* serial.h (SERIAL_ASYNC): Delete.
(DEPRECATED_SERIAL_FD): Delete.
(SERIAL_DEBUG): Delete.
(SERIAL_DEBUG_P): Delete.
(SERIAL_DRAIN_OUTPUT): Delete.
(SERIAL_FLUSH_OUTPUT): Delete.
(SERIAL_FLUSH_INPUT): Delete.
(SERIAL_SEND_BREAK): Delete.
(SERIAL_RAW): Delete.
(SERIAL_GET_TTY_STATE): Delete.
(SERIAL_SET_TTY_STATE): Delete.
(SERIAL_PRINT_TTY_STATE): Delete.
(SERIAL_NOFLUSH_SET_TTY_STATE): Delete.
(SERIAL_SETBAUDRATE): Delete.
(SERIAL_SETSTOPBITS): Delete.
(SERIAL_CAN_ASYNC_P): Delete.
(SERIAL_IS_ASYNC_P): Delete.
(SERIAL_UN_FDOPEN): Delete.
(SERIAL_READCHAR): Delete.
(SERIAL_CLOSE): Delete.
(SERIAL_FDOPEN): Delete.
(SERIAL_OPEN): Delete.
@
text
@d1503 1
a1503 6
  if (tui_version && m_winPtrNotNull (cmdWin))
    {
      lines_per_page = cmdWin->generic.height;
      chars_per_line = cmdWin->generic.width;
    }
  else
@


1.44
log
@	* utils.c (query): Remove tui hacks; tui must use the query_hook.
	* top.c (command_loop): Remove tui insert_mode hacks; don't call
	tuiCleanUp because this must be made with atexit by tui.
	* symfile.c (symbol_file_command): Remove call to TUIDO
	* stack.c (show_and_print_stack_frame_stub): Remove tui check;
	not necessary when using the selected frame hooks.
	(print_stack_frame_stub): Likewise.
	(print_frame_info_base): Likewise.
	(print_frame_info): Likewise.
	(up_silently_command): Likewise.
	(down_silently_command): Likewise.
	(show_stack_frame): Likewise for TUIDO.
	(select_frame): Likewise.
	(select_and_print_frame): Likewise.
	(stack_publish_stopped_with_no_frame): Remove.
	(select_and_maybe_print_frame): Remove.
	* main.c (captured_main): Remove tui_fileopen and tuiInit; tui
	must use the initialize ui hook.
	* infrun.c (normal_stop): Remove call to TUIDO; tui must use the
	selected frame hooks.
	* event-top.c (command_handler): Remove tui insert_mode hack.
	* defs.h: Remove TUIDO; Only include tui.h.
	* breakpoint.c (mention): Remove calls to TUIDO.
	(delete_breakpoint): Remove tui hacks; tui must install
	the breakpoint hooks.
@
text
@d845 2
a846 2
  SERIAL_DRAIN_OUTPUT (gdb_stdout_serial);
  SERIAL_UN_FDOPEN (gdb_stdout_serial);
@


1.43
log
@s/typedef serial_t/struct serial */
@
text
@d1266 1
a1266 9
#if defined(TUI)
      if (!tui_version || cmdWin == tuiWinWithFocus ())
#endif
	answer = fgetc (stdin);
#if defined(TUI)
      else
	answer = (unsigned char) tuiBufferGetc ();

#endif
d1274 1
a1274 1
      if ((answer != '\n') || (tui_version && answer != '\r'))
d1277 1
a1277 8
#if defined(TUI)
	    if (!tui_version || cmdWin == tuiWinWithFocus ())
#endif
	      ans2 = fgetc (stdin);
#if defined(TUI)
	    else
	      ans2 = (unsigned char) tuiBufferGetc ();
#endif
a1280 1
      TUIDO (((TuiOpaqueFuncPtr) tui_vStartNewLines, 1));
@


1.42
log
@* gdbtypes.h (builtin_type_void_data_ptr): Rename
builtin_type_ptr.
* gdbtypes.c (builtin_type_void_data_ptr): Update.
(build_gdbtypes): Update.
(_initialize_gdbtypes): Update.
* values.c (value_as_pointer): Update.
* utils.c (host_pointer_to_address): Update.
(address_to_host_pointer): Update.
@
text
@d828 1
a828 1
  serial_t gdb_stdout_serial = serial_fdopen (1);
@


1.41
log
@* gnu-regex.c: Eliminate obsolete check for _MSC_VER.
* utils.c (notice_quit): Remove dummy function only used for _MSC_VER.
* values.c (unpack_double): Remove obsolete check for _MSC_VER.
* defs.h: Ditto.
* m32r-rom.c: Ditto.
* p-exp.y: Ditto.
* ser-e7kpc.c: Ditto.  Define WIN32_LEAN_AND_MEAN under _WIN32, for faster
compilation.
(get_ds_base): Remove _MSC_VER version of this function.
* nindy-share/ttyflush.c: Ditto.  X
* rdi-share/host.h: Ditto.  X
* ser-go32.c (dos_readchar): Remove call to obsolete function.
* remote-sim.c (gdb_os_poll_quit): Ditto.
* remote-e7000.c (expect): Remove obsolete #if 0'ed code.
* main.c (captured_main): Eliminate special Cygwin checks.
* ser-tcp.c: Remove unneeded __CYGWIN__ guard against system include.
@
text
@d3003 1
a3003 1
  if (sizeof (ptr) != TYPE_LENGTH (builtin_type_ptr))
d3006 1
a3006 1
  return POINTER_TO_ADDRESS (builtin_type_ptr, &ptr);
d3013 1
a3013 1
  if (sizeof (ptr) != TYPE_LENGTH (builtin_type_ptr))
d3016 1
a3016 1
  ADDRESS_TO_POINTER (builtin_type_ptr, &ptr, addr);
@


1.41.2.1
log
@Typesystem work initial import.
Note that this currently isn't building, i'm in the middle of converting make_function_type/lookup_function_type
@
text
@d28 1
d663 1
a663 2
  struct cleanup *err_msg_cleanup;
  err_msg_cleanup = make_cleanup (xfree, msg);
a664 1
  do_cleanups (err_msg_cleanup);
d893 2
d926 1
@


1.40
log
@Obsolete MPW as host.
@
text
@a870 29

#if defined(_MSC_VER)		/* should test for wingdb instead? */

/*
 * Windows translates all keyboard and mouse events 
 * into a message which is appended to the message 
 * queue for the process.
 */

void
notice_quit (void)
{
  int k = win32pollquit ();
  if (k == 1)
    quit_flag = 1;
  else if (k == 2)
    immediate_quit = 1;
}

#else /* !defined(_MSC_VER) */

void
notice_quit (void)
{
  /* Done by signals */
}

#endif /* !defined(_MSC_VER) */

@


1.39
log
@* defs.h (xfree, mcalloc, mmalloc, mrealloc, mfree, xmmalloc,
xmrealloc): Move existing declarations to the one place and
re-order to be consistent.
(xmcalloc, xmfree): Declare.
(xmmalloc, xmrealoc): Assume ISO-C - use size_t and void* in
declaration.

* utils.c (size_t): Delete #ifdef defining size_t.
(mmalloc, mrealloc, mcalloc, mfree): Re-order.
(mmalloc, mrealloc, mcalloc): Document as only calls in GDB
corresponding malloc, realloc, calloc.
(mfree): Call free directly.
(xmmalloc, xmrealloc): Clean up. Assume ISO-C.
(xmcalloc, xmfree): New functions. Copy old xcalloc and xfree
function bodies to here.
(xcalloc, xfree): Call xmcalloc and xmfree respectfully.
@
text
@d1265 5
a1269 5
#ifdef MPW
  /* FIXME Automatically answer "yes" if called from MacGDB.  */
  if (mac_app)
    return 1;
#endif /* MPW */
d1285 6
a1290 6
#ifdef MPW
      /* If not in MacGDB, move to a new line so the entered line doesn't
         have a prompt on the front of it. */
      if (!mac_app)
	fputs_unfiltered ("\n", gdb_stdout);
#endif /* MPW */
d1565 1
a1565 1
#if !defined (MPW) && !defined (_WIN32)
@


1.38
log
@malloc() -> xmalloc.
Move malloc() decl to utils.c
@
text
@a919 8
/* Make a substitute size_t for non-ANSI compilers. */

#ifndef HAVE_STDDEF_H
#ifndef size_t
#define size_t unsigned int
#endif
#endif

d922 2
a923 5
PTR
mcalloc (PTR md, size_t number, size_t size)
{
  return calloc (number, size);
}
d928 1
a928 1
  return malloc (size);
d935 1
a935 1
    return malloc (size);
d937 7
a943 1
    return realloc (ptr, size);
d949 1
a949 1
  xfree (ptr);
d1026 9
a1034 4
/* Like mmalloc but get error if no storage available, and protect against
   the caller wanting to allocate zero bytes.  Whether to return NULL for
   a zero byte request, or translate the request into a request for one
   byte of zero'd storage, is a religious issue. */
d1036 2
a1037 2
PTR
xmmalloc (PTR md, long size)
d1039 1
a1039 1
  register PTR val;
d1045 1
a1045 1
  else if ((val = mmalloc (md, size)) == NULL)
d1047 3
a1049 1
      nomem (size);
d1054 2
a1055 4
/* Like mrealloc but get error if no storage available.  */

PTR
xmrealloc (PTR md, PTR ptr, long size)
d1057 1
a1057 1
  register PTR val;
d1083 2
a1084 13
/* Like malloc but get error if no storage available, and protect against
   the caller wanting to allocate zero bytes.  */

PTR
xmalloc (size_t size)
{
  return (xmmalloc ((PTR) NULL, size));
}

/* Like calloc but get error if no storage available */

PTR
xcalloc (size_t number, size_t size)
a1086 1

d1091 1
a1091 1
      mem = mcalloc (NULL, number, size);
d1098 23
a1120 1
/* Like mrealloc but get error if no storage available.  */
d1125 1
a1125 1
  return (xmrealloc ((PTR) NULL, ptr, size));
d1128 5
a1132 2
/* Free up space allocated by one of xmalloc(), xcalloc(), or
   xrealloc().  */
d1137 1
a1137 2
  if (ptr != NULL)
    free (ptr); /* NOTE: GDB's only call to free() */
@


1.37
log
@Move realoc() decl to utils.c.  s/realloc()/xrealloc()/.
@
text
@d60 3
@


1.36
log
@Move free() decl to utils.c.
@
text
@d60 3
@


1.35
log
@Committed.
@
text
@d59 6
d1119 1
a1119 1
    free (ptr);
@


1.34
log
@* defs.h: Provide prototypes for floatformat_is_negative,
floatformat_is_nan and floatformat_mantissa.
* utils.c: Include "gdb_assert.h".
(floatformat_is_negative): New function.
(floatformat_is_nan): New function.
(floatformat_mantissa): New function.
* valprint.c: Include "floatformat.h".
(print_floating): Get rid of the Linux-specific
TARGET_ANALYZE_FLOATING macro and rewrite NaN detection with the
help these new functions.  Print NaN's in a format conforming to
ISO C99.
@
text
@d1047 1
a1047 1
  if (ptr != NULL)
d1049 3
a1051 1
      val = mrealloc (md, ptr, size);
d1055 12
a1066 5
      val = mmalloc (md, size);
    }
  if (val == NULL)
    {
      nomem (size);
d1085 10
a1094 3
  void *mem = mcalloc (NULL, number, size);
  if (mem == NULL)
    nomem (number * size);
@


1.33
log
@2001-03-06  J.T. Conklin  <jtc@@redback.com>

        * symtab.h (decode_line_1): Removed declaration.

        * symfile.c (#include <assert.h>): Removed.

        * arch-utils.c (#include <ctype.h>): Removed.
        * c-typeprint.c: Likewise.
        * dbxread.c: Likewise.
        * gdbtypes.c: Likewise.
        * target.c: Likewise.
        * os9kread.c: Likewise.

        * c-valprint.c (#include "demangle.h"): Removed.
        * ch-typeprint.c: Likewise.
        * eval.c: Likewise.
        * f-typeprint.c: Likewise.
        * f-valprint.c: Likewise.
        * m2-typeprint.c: Likewise.
        * typeprint.c: Likewise.
        * p-typeprint.c: Likewise.
        * valarith.c: Likewise.
        * valprint.c: Likewise.

        * m2-typeprint.c (#include "gdb_string.h"): Removed.
        * nlmread.c: Likewise.

        * mdebugread.c (#include "gdb-stabs.h"): Removed.
        * minsyms.c: Likewise.
        * mipsread.c: Likewise.
        * nlmread.c: Likewise.

        * m2-typeprint.c (#include "obstack.h"): Removed.
        * m2-valprint.c: Likewise.

        * event-loop.c (#include <setjmp.h>): Removed.
@
text
@d24 1
d2743 100
@


1.32
log
@Update/correct copyright notices.
@
text
@d1158 1
a1158 1
savestring (const char *ptr, int size)
d1167 1
a1167 1
msavestring (void *md, const char *ptr, int size)
@


1.31
log
@Replace calls to abort() with calls to internal_error().
@
text
@d2 2
a3 1
   Copyright 1986, 1989, 1990-1992, 1995, 1996, 1998, 2000, 2001
@


1.30
log
@Add __FILE__ and __LINE__ parameter to internal_error() /
internal_verror().
@
text
@d691 1
a691 1
      abort ();
d720 1
a720 1
	    abort ();
d726 1
a726 1
	abort ();
d958 1
a958 1
  abort ();
d1695 1
a1695 1
    abort ();
d2805 1
a2805 1
      abort ();
@


1.29
log
@* sol-thread.c (restore_inferior_pid): Save the PID in a freshly
allocated buffer.
(save_inferior_pid): Restore the PID from that tempoary
buffer. Delete the buffer.
* utils.c (make_cleanup_close, do_close_cleanup): Ditto for FD.
@
text
@d392 2
a393 1
    internal_error ("free_current_contents: NULL pointer");
d674 2
a675 1
internal_verror (const char *fmt, va_list ap)
d700 1
a700 1
  fputs_unfiltered ("gdb-internal-error: ", gdb_stderr);
d736 1
a736 1
internal_error (char *string, ...)
d741 1
a741 1
  internal_verror (string, ap);
d1007 2
a1008 1
      internal_error ("virtual memory exhausted: can't allocate %ld bytes.", size);
d1012 2
a1013 1
      internal_error ("virtual memory exhausted.");
d1118 3
a1120 2
    internal_error ("%s:%d: vasprintf returned NULL buffer (errno %d)",
		    __FILE__, __LINE__, errno);
d1124 3
a1126 2
    internal_error ("%s:%d: vasprintf call failed (errno %d)",
		    __FILE__, __LINE__, errno);
d2891 2
a2892 1
    internal_error ("core_addr_to_void_ptr: bad cast");
d2901 2
a2902 1
    internal_error ("core_addr_to_void_ptr: bad cast");
@


1.28
log
@* signals.h: Removed.
* event-top.c (#include <signal.h>): Changed from signals.h.
* inflow.c: Likewise.
* mac-xdep.c: Likewise.
* ser-pipe.c: Likewise.
* ser-tcp.c: Likewise.
* standalone.c: Likewise.
* top.c: Likewise.
* utils.c: Likewise.
* Makefile.in: Removed signals.h from dependencies.
@
text
@d218 3
a220 1
  close ((int) arg);
d226 3
a228 2
  /* int into void*. Outch!! */
  return make_cleanup (do_close_cleanup, (void *) fd);
@


1.27
log
@Move putchar_filtered() to utils.c.
@
text
@d43 1
a43 1
#include "signals.h"
@


1.26
log
@Replace strsave() with xstrdup().
@
text
@d1860 9
@


1.25
log
@Replace free() with xfree().
@
text
@d2 1
a2 1
   Copyright 1986, 1989, 1990-1992, 1995, 1996, 1998, 2000
a1162 9
}

/* The "const" is so it compiles under DGUX (which prototypes strsave
   in <string.h>.  FIXME: This should be named "xstrsave", shouldn't it?
   Doesn't real strsave return NULL if out of memory?  */
char *
strsave (const char *ptr)
{
  return savestring (ptr, strlen (ptr));
@


1.24
log
@2000-12-04  Michael Snyder  <msnyder@@cleaver.cygnus.com>

        * utils.c (internal_verror): Fix typo in error msg.
@
text
@d298 1
a298 1
      free (ptr);
d331 1
a331 1
      free (ptr);
d392 1
a392 1
      free (*location);
d452 1
a452 1
       free (saved_continuation);
d467 1
a467 1
      free (continuation_ptr);
d514 1
a514 1
       free (saved_continuation);
d529 1
a529 1
      free (continuation_ptr);
d624 1
a624 1
  err_string_cleanup = make_cleanup (free, err_string);
d645 1
a645 1
  make_cleanup (free, msg);
d935 1
a935 1
  free (ptr);
d1080 10
d1649 1
a1649 1
      free (ignore);
d1995 1
a1995 1
  old_cleanups = make_cleanup (free, linebuffer);
d2014 1
a2014 1
  old_cleanups = make_cleanup (free, linebuffer);
d2125 1
a2125 1
	free (spaces);
d2183 1
a2183 1
	      free (demangled);
@


1.23
log
@Replace asprintf() / vasprintf() with xasprintf() xvasprintf().
@
text
@d702 1
a702 1
An internal GDB error was detected.  This may make make further\n\
@


1.22
log
@	* utils.c (strlen_paddr, paddr, paddr_nz): Use TARGET_ADDR_BIT,
	not TARGET_PTR_BIT, since we are dealing with addresses, not
	pointers.
@
text
@d1082 29
d1984 1
a1984 6
  vasprintf (&linebuffer, format, args);
  if (linebuffer == NULL)
    {
      fputs_unfiltered ("\ngdb: virtual memory exhausted.\n", gdb_stderr);
      exit (1);
    }
d2003 1
a2003 6
  vasprintf (&linebuffer, format, args);
  if (linebuffer == NULL)
    {
      fputs_unfiltered ("\ngdb: virtual memory exhausted.\n", gdb_stderr);
      exit (1);
    }
@


1.21
log
@Protoization.
@
text
@d2723 1
a2723 1
  return (TARGET_PTR_BIT / 8 * 2);
d2729 1
a2729 1
  return phex (addr, TARGET_PTR_BIT / 8);
d2735 1
a2735 1
  return phex_nz (addr, TARGET_PTR_BIT / 8);
@


1.20
log
@
Corrected spelling errors in comments
@
text
@d410 1
a410 1
/* Add a continuation to the continuation list, the gloabl list
d413 2
a414 3
add_continuation (continuation_hook, arg_list)
     void (*continuation_hook) (struct continuation_arg *);
     struct continuation_arg *arg_list;
d474 3
a476 3
add_intermediate_continuation (continuation_hook, arg_list)
     void (*continuation_hook) (struct continuation_arg *);
     struct continuation_arg *arg_list;
a1352 2
static void printchar (int c, void (*do_fputs) (const char *, struct ui_file*), void (*do_fprintf) (struct ui_file*, const char *, ...), struct ui_file *stream, int quoter);

d1354 3
a1356 6
printchar (c, do_fputs, do_fprintf, stream, quoter)
     int c;
     void (*do_fputs) (const char *, struct ui_file *);
     void (*do_fprintf) (struct ui_file *, const char *, ...);
     struct ui_file *stream;
     int quoter;
@


1.19
log
@Protoization.
@
text
@d610 1
a610 1
     Unfortunatly some code uses the sequence: error_begin(); print
@


1.18
log
@2000-06-15  Michael Snyder  <msnyder@@cygnus.com>

        * utils.c: Fix comment typo.
@
text
@d192 1
a192 2
do_freeargv (arg)
     void *arg;
d198 1
a198 2
make_cleanup_freeargv (arg)
     char **arg;
d260 1
a260 2
do_cleanups (old_chain)
     register struct cleanup *old_chain;
d266 1
a266 2
do_final_cleanups (old_chain)
     register struct cleanup *old_chain;
d272 1
a272 2
do_run_cleanups (old_chain)
     register struct cleanup *old_chain;
d278 1
a278 2
do_exec_cleanups (old_chain)
     register struct cleanup *old_chain;
d284 1
a284 2
do_exec_error_cleanups (old_chain)
     register struct cleanup *old_chain;
d290 2
a291 3
do_my_cleanups (pmy_chain, old_chain)
     register struct cleanup **pmy_chain;
     register struct cleanup *old_chain;
d306 1
a306 2
discard_cleanups (old_chain)
     register struct cleanup *old_chain;
d312 1
a312 2
discard_final_cleanups (old_chain)
     register struct cleanup *old_chain;
d318 1
a318 2
discard_exec_error_cleanups (old_chain)
     register struct cleanup *old_chain;
d324 2
a325 3
discard_my_cleanups (pmy_chain, old_chain)
     register struct cleanup **pmy_chain;
     register struct cleanup *old_chain;
d337 1
a337 1
save_cleanups ()
d343 1
a343 1
save_final_cleanups ()
d349 1
a349 2
save_my_cleanups (pmy_chain)
     struct cleanup **pmy_chain;
d359 1
a359 2
restore_cleanups (chain)
     struct cleanup *chain;
d365 1
a365 2
restore_final_cleanups (chain)
     struct cleanup *chain;
d371 1
a371 3
restore_my_cleanups (pmy_chain, chain)
     struct cleanup **pmy_chain;
     struct cleanup *chain;
d435 1
a435 1
do_all_continuations ()
d460 1
a460 1
discard_all_continuations ()
d497 1
a497 1
do_all_intermediate_continuations ()
d522 1
a522 1
discard_all_intermediate_continuations ()
d546 1
a546 1
warning_begin ()
d585 1
a585 1
error_begin ()
d746 1
a746 2
safe_strerror (errnum)
     int errnum;
d764 1
a764 2
perror_with_name (string)
     char *string;
d788 1
a788 3
print_sys_errmsg (string, errcode)
     char *string;
     int errcode;
d808 1
a808 1
quit ()
d863 1
a863 1
notice_quit ()
d875 1
a875 1
notice_quit ()
d884 1
a884 2
request_quit (signo)
     int signo;
d919 1
a919 3
mmalloc (md, size)
     PTR md;
     size_t size;
d925 1
a925 4
mrealloc (md, ptr, size)
     PTR md;
     PTR ptr;
     size_t size;
d934 1
a934 3
mfree (md, ptr)
     PTR md;
     PTR ptr;
d951 1
a951 1
malloc_botch ()
d999 1
a999 2
nomem (size)
     long size;
d1017 1
a1017 3
xmmalloc (md, size)
     PTR md;
     long size;
d1035 1
a1035 4
xmrealloc (md, ptr, size)
     PTR md;
     PTR ptr;
     long size;
d1058 1
a1058 2
xmalloc (size)
     size_t size;
d1077 1
a1077 3
xrealloc (ptr, size)
     PTR ptr;
     size_t size;
d1087 1
a1087 4
myread (desc, addr, len)
     int desc;
     char *addr;
     int len;
d1110 1
a1110 3
savestring (ptr, size)
     const char *ptr;
     int size;
d1131 1
a1131 2
strsave (ptr)
     const char *ptr;
d1143 1
a1143 3
print_spaces (n, file)
     register int n;
     register struct ui_file *file;
d1284 1
a1284 2
parse_escape (string_ptr)
     char **string_ptr;
d1413 1
a1413 4
fputstr_filtered (str, quoter, stream)
     const char *str;
     int quoter;
     struct ui_file *stream;
d1420 1
a1420 4
fputstr_unfiltered (str, quoter, stream)
     const char *str;
     int quoter;
     struct ui_file *stream;
d1427 1
a1427 5
fputstrn_unfiltered (str, n, quoter, stream)
     const char *str;
     int n;
     int quoter;
     struct ui_file *stream;
d1470 1
a1470 1
init_page_info ()
d1544 1
a1544 1
set_width ()
d1561 1
a1561 4
set_width_command (args, from_tty, c)
     char *args;
     int from_tty;
     struct cmd_list_element *c;
d1570 1
a1570 1
prompt_for_continue ()
d1630 1
a1630 1
reinitialize_more_filter ()
d1658 1
a1658 2
wrap_here (indent)
     char *indent;
d1698 1
a1698 1
begin_line ()
d1721 2
a1722 4
fputs_maybe_filtered (linebuffer, stream, filter)
     const char *linebuffer;
     struct ui_file *stream;
     int filter;
d1823 1
a1823 3
fputs_filtered (linebuffer, stream)
     const char *linebuffer;
     struct ui_file *stream;
d1829 1
a1829 2
putchar_unfiltered (c)
     int c;
d1837 1
a1837 3
fputc_unfiltered (c, stream)
     int c;
     struct ui_file *stream;
d1845 1
a1845 3
fputc_filtered (c, stream)
     int c;
     struct ui_file *stream;
d1859 1
a1859 4
puts_debug (prefix, string, suffix)
     char *prefix;
     char *string;
     char *suffix;
d1955 2
a1956 5
vfprintf_maybe_filtered (stream, format, args, filter)
     struct ui_file *stream;
     const char *format;
     va_list args;
     int filter;
d1974 1
a1974 4
vfprintf_filtered (stream, format, args)
     struct ui_file *stream;
     const char *format;
     va_list args;
d1980 1
a1980 4
vfprintf_unfiltered (stream, format, args)
     struct ui_file *stream;
     const char *format;
     va_list args;
d1997 1
a1997 3
vprintf_filtered (format, args)
     const char *format;
     va_list args;
d2003 1
a2003 3
vprintf_unfiltered (format, args)
     const char *format;
     va_list args;
d2079 1
a2079 2
puts_filtered (string)
     const char *string;
d2085 1
a2085 2
puts_unfiltered (string)
     const char *string;
d2093 1
a2093 2
n_spaces (n)
     int n;
d2115 1
a2115 3
print_spaces_filtered (n, stream)
     int n;
     struct ui_file *stream;
d2128 2
a2129 5
fprintf_symbol_filtered (stream, name, lang, arg_mode)
     struct ui_file *stream;
     char *name;
     enum language lang;
     int arg_mode;
d2176 1
a2176 3
strcmp_iw (string1, string2)
     const char *string1;
     const char *string2;
d2209 1
a2209 3
subset_compare (string_to_compare, template_string)
     char *string_to_compare;
     char *template_string;
d2225 1
a2225 3
pagination_on_command (arg, from_tty)
     char *arg;
     int from_tty;
d2232 1
a2232 3
pagination_off_command (arg, from_tty)
     char *arg;
     int from_tty;
d2239 1
a2239 1
initialize_utils ()
d2327 2
a2328 6
get_field (data, order, total_len, start, len)
     unsigned char *data;
     enum floatformat_byteorders order;
     unsigned int total_len;
     unsigned int start;
     unsigned int len;
d2387 2
a2388 4
floatformat_to_doublest (fmt, from, to)
     const struct floatformat *fmt;
     char *from;
     DOUBLEST *to;
d2499 3
a2501 7
put_field (data, order, total_len, start, len, stuff_to_put)
     unsigned char *data;
     enum floatformat_byteorders order;
     unsigned int total_len;
     unsigned int start;
     unsigned int len;
     unsigned long stuff_to_put;
d2564 1
a2564 3
ldfrexp (value, eptr)
     long double value;
     int *eptr;
d2607 2
a2608 4
floatformat_from_doublest (fmt, from, to)
     CONST struct floatformat *fmt;
     DOUBLEST *from;
     char *to;
d2717 1
a2717 1
get_cell ()
@


1.17
log
@Add host_pointer_to_address() and address_to_host_pointer().  Add
signed_pointer_to_address() etc.  Rename generic_pointer_to_address()
to unsigned_pointer_to_address() etc.
@
text
@d1495 1
a1495 1
/* Number of chars per line or UNIT_MAX if line folding is disabled.  */
@


1.16
log
@Eliminate safe_strsignal().
@
text
@d53 2
d2966 21
@


1.15
log
@Eliminate PARAMS from function pointer declarations.
@
text
@a774 20
/* The strsignal() function can return NULL for signal values that are
   out of range.  Provide a "safe" version that always returns a
   printable string. */

char *
safe_strsignal (signo)
     int signo;
{
  char *msg;
  static char buf[32];

  if ((msg = strsignal (signo)) == NULL)
    {
      sprintf (buf, "(undocumented signal %d)", signo);
      msg = buf;
    }
  return (msg);
}


@


1.14
log
@PARAMS removal.
@
text
@d61 1
a61 1
void (*error_begin_hook) PARAMS ((void));
d429 1
a429 1
     void (*continuation_hook) PARAMS ((struct continuation_arg *));
d491 1
a491 1
     void (*continuation_hook) PARAMS ((struct continuation_arg *));
d1424 2
a1425 2
     void (*do_fputs) PARAMS ((const char *, struct ui_file*));
     void (*do_fprintf) PARAMS ((struct ui_file*, const char *, ...));
@


1.13
log
@Add make_cleanup_close() function.
@
text
@d75 1
a75 1
static void malloc_botch PARAMS ((void));
d78 1
a78 2
static void
prompt_for_continue PARAMS ((void));
d80 1
a80 2
static void
set_width_command PARAMS ((char *, int, struct cmd_list_element *));
d82 1
a82 2
static void
set_width PARAMS ((void));
d2339 1
a2339 1
static void pagination_on_command PARAMS ((char *arg, int from_tty));
d2348 1
a2348 1
static void pagination_on_command PARAMS ((char *arg, int from_tty));
d2440 3
a2442 5
static unsigned long get_field PARAMS ((unsigned char *,
					enum floatformat_byteorders,
					unsigned int,
					unsigned int,
					unsigned int));
d2618 3
a2620 5
static void put_field PARAMS ((unsigned char *, enum floatformat_byteorders,
			       unsigned int,
			       unsigned int,
			       unsigned int,
			       unsigned long));
d2691 1
a2691 1
static long double ldfrexp PARAMS ((long double value, int *eptr));
@


1.12
log
@Replace preg() with phex().  Cleanup monitor.c.
@
text
@d219 13
@


1.11
log
@Make free_current_contents more robust. Use in MI.
@
text
@d2839 2
a2853 15
/* print routines to handle variable size regs, etc.

   FIXME: Note that t_addr is a bfd_vma, which is currently either an
   unsigned long or unsigned long long, determined at configure time.
   If t_addr is an unsigned long long and sizeof (unsigned long long)
   is greater than sizeof (unsigned long), then I believe this code will
   probably lose, at least for little endian machines.  I believe that
   it would also be better to eliminate the switch on the absolute size
   of t_addr and replace it with a sequence of if statements that compare
   sizeof t_addr with sizeof the various types and do the right thing,
   which includes knowing whether or not the host supports long long.
   -fnf

 */

a2859 4

/* eliminate warning from compiler on 32-bit systems */
static int thirty_two = 32;

d2863 1
a2863 17
  char *paddr_str = get_cell ();
  switch (TARGET_PTR_BIT / 8)
    {
    case 8:
      sprintf (paddr_str, "%08lx%08lx",
	       (unsigned long) (addr >> thirty_two), (unsigned long) (addr & 0xffffffff));
      break;
    case 4:
      sprintf (paddr_str, "%08lx", (unsigned long) addr);
      break;
    case 2:
      sprintf (paddr_str, "%04x", (unsigned short) (addr & 0xffff));
      break;
    default:
      sprintf (paddr_str, "%lx", (unsigned long) addr);
    }
  return paddr_str;
d2869 1
a2869 23
  char *paddr_str = get_cell ();
  switch (TARGET_PTR_BIT / 8)
    {
    case 8:
      {
	unsigned long high = (unsigned long) (addr >> thirty_two);
	if (high == 0)
	  sprintf (paddr_str, "%lx", (unsigned long) (addr & 0xffffffff));
	else
	  sprintf (paddr_str, "%lx%08lx",
		   high, (unsigned long) (addr & 0xffffffff));
	break;
      }
    case 4:
      sprintf (paddr_str, "%lx", (unsigned long) addr);
      break;
    case 2:
      sprintf (paddr_str, "%x", (unsigned short) (addr & 0xffff));
      break;
    default:
      sprintf (paddr_str, "%lx", (unsigned long) addr);
    }
  return paddr_str;
d2924 3
d2928 1
a2928 2
preg (reg)
     t_reg reg;
d2930 2
a2931 2
  char *preg_str = get_cell ();
  switch (sizeof (t_reg))
d2934 3
a2936 2
      sprintf (preg_str, "%08lx%08lx",
	       (unsigned long) (reg >> thirty_two), (unsigned long) (reg & 0xffffffff));
d2939 1
a2939 1
      sprintf (preg_str, "%08lx", (unsigned long) reg);
d2942 1
a2942 1
      sprintf (preg_str, "%04x", (unsigned short) (reg & 0xffff));
d2945 2
a2946 1
      sprintf (preg_str, "%lx", (unsigned long) reg);
d2948 1
a2948 1
  return preg_str;
d2952 1
a2952 2
preg_nz (reg)
     t_reg reg;
d2954 2
a2955 2
  char *preg_str = get_cell ();
  switch (sizeof (t_reg))
d2959 1
a2959 1
	unsigned long high = (unsigned long) (reg >> thirty_two);
d2961 1
a2961 1
	  sprintf (preg_str, "%lx", (unsigned long) (reg & 0xffffffff));
d2963 2
a2964 2
	  sprintf (preg_str, "%lx%08lx",
		   high, (unsigned long) (reg & 0xffffffff));
d2968 1
a2968 1
      sprintf (preg_str, "%lx", (unsigned long) reg);
d2971 1
a2971 1
      sprintf (preg_str, "%x", (unsigned short) (reg & 0xffff));
d2974 2
a2975 1
      sprintf (preg_str, "%lx", (unsigned long) reg);
d2977 1
a2977 1
  return preg_str;
@


1.10
log
@Cleanup bfd_close() cleanups.
@
text
@d393 2
d396 4
a399 1
    free (*location);
@


1.9
log
@Move core_addr_lessthan and core_addr_greaterthan to arch-utils.
@
text
@d207 12
@


1.8
log
@2000-04-26  Michael Snyder  <msnyder@@seadog.cygnus.com>

        * utils.c (internal_verror): Call target_terminal_ours.
@
text
@a3012 17

/* Helper functions for INNER_THAN */
int
core_addr_lessthan (lhs, rhs)
     CORE_ADDR lhs;
     CORE_ADDR rhs;
{
  return (lhs < rhs);
}

int
core_addr_greaterthan (lhs, rhs)
     CORE_ADDR lhs;
     CORE_ADDR rhs;
{
  return (lhs > rhs);
}
@


1.7
log
@* defs.h, utils.c (free_current_contents): Change parameter to
void*.

From Philippe De Muyter  <phdm@@macqel.be>:
* printcmd.c (print_address_symbolic): Call `make_cleanup' with
`(free_current_contents, &x)', not `(free, x)'.
* utils.c (free_current_contents): Do not `free (NULL)'.

* printcmd.c (print_address_symbolic): Cleanup after a failed
call to build_address_symbolic.
@
text
@d683 1
d724 1
d2369 1
@


1.6
log
@2000-03-30  Michael Snyder  <msnyder@@cleaver.cygnus.com>

        * defs.h (struct continuation_arg): make 'data' a union, to avoid
        casting problems when int and pointer are not the  same size.
        * event-top.c (command_handler): use data as a union.
        (command_line_handler_continuation): ditto.
        * infcmd.c (step_1_continuation): use data as a union.  Re-indent.
        (step_once): ditto.  (finish_command_continuation): ditto.
        (finish_command): ditto.
        * breakpoint.c (until_break_command): use data as a union.
        (until_break_command_continuation): ditto.
        * utils.c (add_intermediate_continuation): fix typo in comment.
@
text
@d378 1
a378 2
free_current_contents (location)
     char **location;
d380 3
a382 1
  free (*location);
@


1.6.2.1
log
@* defs.h, utils.c (free_current_contents): Change parameter to
void*.

From Philippe De Muyter  <phdm@@macqel.be>:
* printcmd.c (print_address_symbolic): Call `make_cleanup' with
`(free_current_contents, &x)', not `(free, x)'.
* utils.c (free_current_contents): Do not `free (NULL)'.

* printcmd.c (print_address_symbolic): Cleanup after a failed
call to build_address_symbolic.
@
text
@d378 2
a379 1
free_current_contents (void *ptr)
d381 1
a381 3
  void **location = ptr;
  if (*location != NULL)
    free (*location);
@


1.5
log
@Fixes for floatformat_from_doublest().
@
text
@d459 1
a459 1
/* Add a continuation to the continuation list, the gloabl list
@


1.4
log
@Make mmalloc functions consistent. Some need ISO-C others need PTR :-(.
@
text
@d2725 2
a2726 1
  memset (uto, 0, fmt->totalsize / FLOATFORMAT_CHAR_BIT);
d2775 1
a2775 1
      mant_long = (unsigned long) mant;
d2786 1
@


1.3
log
@Convert make_cleanup functions to ISO-C.
@
text
@d922 2
a923 2
void *
mcalloc (void *md, size_t number, size_t size)
d961 1
a961 2
init_malloc (md)
     PTR md;
d993 1
a993 2
init_malloc (md)
     PTR md;
d1150 1
a1150 4
msavestring (md, ptr, size)
     PTR md;
     const char *ptr;
     int size;
d1169 1
a1169 3
mstrsave (md, ptr)
     PTR md;
     const char *ptr;
@


1.2
log
@From Eli. Warning fixes.
@
text
@d163 1
a163 3
make_cleanup (function, arg)
     void (*function) PARAMS ((PTR));
     PTR arg;
d169 1
a169 3
make_final_cleanup (function, arg)
     void (*function) PARAMS ((PTR));
     PTR arg;
d175 1
a175 3
make_run_cleanup (function, arg)
     void (*function) PARAMS ((PTR));
     PTR arg;
d181 1
a181 3
make_exec_cleanup (function, arg)
     void (*function) PARAMS ((PTR));
     PTR arg;
d187 1
a187 3
make_exec_error_cleanup (function, arg)
     void (*function) PARAMS ((PTR));
     PTR arg;
d219 2
a220 4
make_my_cleanup (pmy_chain, function, arg)
     struct cleanup **pmy_chain;
     void (*function) PARAMS ((PTR));
     PTR arg;
d319 1
a319 1
      free ((PTR) ptr);
d393 1
a393 2
null_cleanup (arg)
     PTR arg;
@


1.1
log
@Initial revision
@
text
@d2 2
a3 1
   Copyright 1986, 89, 90, 91, 92, 95, 96, 1998 Free Software Foundation, Inc.
d5 1
a5 1
This file is part of GDB.
d7 14
a20 13
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
d25 1
a25 3
#ifdef HAVE_UNISTD_H
#include <unistd.h>
#endif
d34 4
d55 3
d63 4
d69 2
a70 2
static void vfprintf_maybe_filtered PARAMS ((GDB_FILE *, const char *,
					     va_list, int));
d72 1
a72 1
static void fputs_maybe_filtered PARAMS ((const char *, GDB_FILE *, int));
d79 1
a79 1
fatal_dump_core PARAMS((char *, ...));
a81 3
prompt_for_continue PARAMS ((void));

static void 
a86 10
/* If this definition isn't overridden by the header files, assume
   that isatty and fileno exist on this system.  */
#ifndef ISATTY
#define ISATTY(FP)	(isatty (fileno (FP)))
#endif

#ifndef GDB_FILE_ISATTY
#define GDB_FILE_ISATTY(GDB_FILE_PTR)   (gdb_file_isatty(GDB_FILE_PTR))   
#endif

d90 13
a102 3
static struct cleanup *cleanup_chain; /* cleaned up after a failed command */
static struct cleanup *final_cleanup_chain; /* cleaned up when gdb exits */
static struct cleanup *run_cleanup_chain; /* cleaned up on each 'run' */
d155 1
a156 1

d167 1
a167 1
    return make_my_cleanup (&cleanup_chain, function, arg);
d175 1
a175 1
    return make_my_cleanup (&final_cleanup_chain, function, arg);
d177 1
d183 31
a213 1
    return make_my_cleanup (&run_cleanup_chain, function, arg);
d215 13
d235 1
a235 1
    = (struct cleanup *) xmalloc (sizeof (struct cleanup));
d253 1
a253 1
    do_my_cleanups (&cleanup_chain, old_chain);
d260 1
a260 1
    do_my_cleanups (&final_cleanup_chain, old_chain);
d267 15
a281 1
    do_my_cleanups (&run_cleanup_chain, old_chain);
d305 1
a305 1
    discard_my_cleanups (&cleanup_chain, old_chain);
d312 8
a319 1
    discard_my_cleanups (&final_cleanup_chain, old_chain);
d331 1
a331 1
      free ((PTR)ptr);
d339 1
a339 1
    return save_my_cleanups (&cleanup_chain);
d345 1
a345 1
    return save_my_cleanups (&final_cleanup_chain);
d350 1
a350 1
    struct cleanup **pmy_chain;
d363 1
a363 1
    restore_my_cleanups (&cleanup_chain, chain);
d370 1
a370 1
    restore_my_cleanups (&final_cleanup_chain, chain);
d384 2
a385 2
     foo = xmalloc (...);
     old_chain = make_cleanup (free_current_contents, &foo);
d406 117
a522 1
    PTR arg;
d524 8
d535 1
d549 1
a549 1
  wrap_here("");			/* Force out any buffered output */
a560 1
/* VARARGS */
d562 1
a562 6
#ifdef ANSI_PROTOTYPES
warning (const char *string, ...)
#else
warning (va_alist)
     va_dcl
#endif
a564 1
#ifdef ANSI_PROTOTYPES
a565 6
#else
  char *string;

  va_start (args);
  string = va_arg (args, char *);
#endif
d569 6
a574 6
  {
    warning_begin ();
    vfprintf_unfiltered (gdb_stderr, string, args);
    fprintf_unfiltered (gdb_stderr, "\n");
    va_end (args);
  }
d591 1
a591 1
  wrap_here ("");			/* Force out any buffered output */
a603 1
/* VARARGS */
d605 29
a633 6
#ifdef ANSI_PROTOTYPES
error (const char *string, ...)
#else
error (va_alist)
     va_dcl
#endif
a635 1
#ifdef ANSI_PROTOTYPES
d637 3
a639 13
#else
  va_start (args);
#endif
  if (error_hook)
    (*error_hook) ();
  else 
    {
      error_begin ();
#ifdef ANSI_PROTOTYPES
      vfprintf_filtered (gdb_stderr, string, args);
#else
      {
	char *string1;
d641 7
a647 8
	string1 = va_arg (args, char *);
	vfprintf_filtered (gdb_stderr, string1, args);
      }
#endif
      fprintf_filtered (gdb_stderr, "\n");
      va_end (args);
      return_to_top_level (RETURN_ERROR);
    }
d650 1
d652 14
a665 3
/* Print an error message and exit reporting failure.
   This is for a error that we cannot continue from.
   The arguments are printed a la printf.
d667 2
a668 2
   This function cannot be declared volatile (NORETURN) in an
   ANSI environment because exit() is not declared volatile. */
a669 1
/* VARARGS */
d671 1
a671 6
#ifdef ANSI_PROTOTYPES
fatal (char *string, ...)
#else
fatal (va_alist)
     va_dcl
#endif
d673 20
a692 14
  va_list args;
#ifdef ANSI_PROTOTYPES
  va_start (args, string);
#else
  char *string;
  va_start (args);
  string = va_arg (args, char *);
#endif
  fprintf_unfiltered (gdb_stderr, "\ngdb: ");
  vfprintf_unfiltered (gdb_stderr, string, args);
  fprintf_unfiltered (gdb_stderr, "\n");
  va_end (args);
  exit (1);
}
d694 15
a708 2
/* Print an error message and exit, dumping core.
   The arguments are printed a la printf ().  */
d710 15
a724 14
/* VARARGS */
static void
#ifdef ANSI_PROTOTYPES
fatal_dump_core (char *string, ...)
#else
fatal_dump_core (va_alist)
     va_dcl
#endif
{
  va_list args;
#ifdef ANSI_PROTOTYPES
  va_start (args, string);
#else
  char *string;
d726 3
a728 9
  va_start (args);
  string = va_arg (args, char *);
#endif
  /* "internal error" is always correct, since GDB should never dump
     core, no matter what the input.  */
  fprintf_unfiltered (gdb_stderr, "\ngdb internal error: ");
  vfprintf_unfiltered (gdb_stderr, string, args);
  fprintf_unfiltered (gdb_stderr, "\n");
  va_end (args);
d730 7
a736 4
  signal (SIGQUIT, SIG_DFL);
  kill (getpid (), SIGQUIT);
  /* We should never get here, but just in case...  */
  exit (1);
d801 1
a801 1
  error ("%s.", combined); 
d842 1
a842 1
  wrap_here ((char *)0);
d858 5
d864 2
a865 2
      /* If there is no terminal switching for this target, then we can't
	 possibly get screwed by the lack of job control.  */
d870 2
a871 1
	     "Quit (expect signal SIGINT when the program is resumed)\n");
d876 1
a876 26
#if defined(__GO32__)

/* In the absence of signals, poll keyboard for a quit.
   Called from #define QUIT pollquit() in xm-go32.h. */

void
notice_quit()
{
  if (kbhit ())
    switch (getkey ())
      {
      case 1:
	quit_flag = 1;
	break;
      case 2:
	immediate_quit = 2;
	break;
      default:
	/* We just ignore it */
	/* FIXME!! Don't think this actually works! */
	fprintf_unfiltered (gdb_stderr, "CTRL-A to quit, CTRL-B to quit harder\n");
	break;
      }
}

#elif defined(_MSC_VER) /* should test for wingdb instead? */
d884 2
a885 1
void notice_quit()
d887 1
a887 1
  int k = win32pollquit();
d894 1
a894 1
#else /* !defined(__GO32__) && !defined(_MSC_VER) */
d896 2
a897 1
void notice_quit()
d902 1
a902 9
#endif /* !defined(__GO32__) && !defined(_MSC_VER) */

void
pollquit()
{
  notice_quit ();
  if (quit_flag || immediate_quit)
    quit ();
}
a904 1

d918 1
a918 1
  if (immediate_quit) 
a921 1

d935 6
d955 1
a955 1
  if (ptr == 0)		/* Guard against old realloc's */
d969 1
a969 1
#endif	/* USE_MMALLOC */
d984 2
a985 1
  fatal_dump_core ("Memory corruption");
d1013 2
a1014 2
	 to something other than dummy_target, until after
	 initialize_all_files(). */
d1036 1
a1036 1
      fatal ("virtual memory exhausted: can't allocate %ld bytes.", size);
d1040 1
a1040 1
      fatal ("virtual memory exhausted.");
d1102 11
d1122 1
a1123 1

d1197 1
a1197 1
     register GDB_FILE *file;
d1199 1
a1199 15
  if (file->ts_streamtype == astring)
    {
      char *p;

      gdb_file_adjust_strbuf (n, file);
      p = file->ts_strbuf + strlen (file->ts_strbuf);

      memset (p, ' ', n);
      p[n] = '\000';
    }
  else
    {
      while (n-- > 0)
	fputc (' ', file->ts_filestream);
    }
d1205 1
a1205 3
gdb_print_address (addr, stream)
     PTR addr;
     GDB_FILE *stream;
d1212 1
a1212 1
  fprintf_filtered (stream, "0x%lx", (unsigned long)addr);
d1222 1
a1222 6
#ifdef ANSI_PROTOTYPES
query (char *ctlstr, ...)
#else
query (va_alist)
     va_dcl
#endif
a1228 1
#ifdef ANSI_PROTOTYPES
a1229 5
#else
  char *ctlstr;
  va_start (args);
  ctlstr = va_arg (args, char *);
#endif
d1261 1
a1261 1
	 have a prompt on the front of it. */
d1266 1
a1266 1
      wrap_here("");
d1270 1
a1270 1
      if (!tui_version || cmdWin == tuiWinWithFocus())
d1275 1
a1275 2

        answer = (unsigned char)tuiBufferGetc();
d1280 1
a1280 1
        {
d1286 1
a1286 1
	do 
d1289 1
a1289 1
	    if (!tui_version || cmdWin == tuiWinWithFocus())
d1294 1
a1294 2

              ans2 = (unsigned char)tuiBufferGetc(); 
d1298 2
a1299 2
        while (ans2 != EOF && ans2 != '\n' && ans2 != '\r');
      TUIDO(((TuiOpaqueFuncPtr)tui_vStartNewLines, 1));
d1320 1
a1321 1

d1372 1
a1372 1
      
d1409 8
a1416 4
void
gdb_printchar (c, stream, quoter)
     register int c;
     GDB_FILE *stream;
d1422 38
a1459 35
  if (              c < 0x20  ||		/* Low control chars */	
      (c >= 0x7F && c < 0xA0) ||		/* DEL, High controls */
      (sevenbit_strings && c >= 0x80)) {	/* high order bit set */
    switch (c)
      {
      case '\n':
	fputs_filtered ("\\n", stream);
	break;
      case '\b':
	fputs_filtered ("\\b", stream);
	break;
      case '\t':
	fputs_filtered ("\\t", stream);
	break;
      case '\f':
	fputs_filtered ("\\f", stream);
	break;
      case '\r':
	fputs_filtered ("\\r", stream);
	break;
      case '\033':
	fputs_filtered ("\\e", stream);
	break;
      case '\007':
	fputs_filtered ("\\a", stream);
	break;
      default:
	fprintf_filtered (stream, "\\%.3o", (unsigned int) c);
	break;
      }
  } else {
    if (c == '\\' || c == quoter)
      fputs_filtered ("\\", stream);
    fprintf_filtered (stream, "%c", c);
  }
d1462 4
d1467 9
d1477 9
d1487 6
a1492 6
static char * hexlate = "0123456789abcdef" ;
int fmthex(inbuf,outbuff,length,linelength)
     unsigned char * inbuf ;
     unsigned char * outbuff;
     int length;
     int linelength;
d1494 3
a1496 18
  unsigned char byte , nib ;
  int outlength = 0 ;

  while (length)
    {
      if (outlength >= linelength) break ;
      byte = *inbuf ;
      inbuf++ ;
      nib = byte >> 4 ;
      *outbuff++ = hexlate[nib] ;
      nib = byte &0x0f ;
      *outbuff++ = hexlate[nib] ;
      *outbuff++ = ' ' ;
      length-- ;
      outlength += 3 ;
    }
  *outbuff = '\0' ; /* null terminate our output line */
  return outlength ;
d1500 1
d1503 1
a1503 1
/* Number of chars per line or UNIT_MAX is line folding is disabled.  */
d1531 1
a1532 1

d1535 1
a1535 1
init_page_info()
d1538 1
a1538 1
  if (tui_version && m_winPtrNotNull(cmdWin))
d1549 3
a1551 3
      lines_per_page = ScreenRows();
      chars_per_line = ScreenCols();
#else  
d1560 1
a1560 1
        char *termtype = getenv ("TERM");
d1562 2
a1563 2
        /* Positive means success, nonpositive means failure.  */
        int status;
d1565 3
a1567 3
        /* 2048 is large enough for all known terminals, according to the
           GNU termcap manual.  */
        char term_buffer[2048];
d1569 2
a1570 2
        if (termtype)
          {
d1574 1
a1574 1
	        int val;
d1576 6
a1581 6
	    
	        val = tgetnum ("li");
	        if (val >= 0 && !running_in_emacs)
	          lines_per_page = val;
	        else
	          /* The number of lines per page is not mentioned
d1585 5
a1589 5
	          lines_per_page = UINT_MAX;
	    
	        val = tgetnum ("co");
	        if (val >= 0)
	          chars_per_line = val;
d1591 1
a1591 1
          }
d1602 4
a1605 4
      if (!GDB_FILE_ISATTY (gdb_stdout))
        lines_per_page = UINT_MAX;
  } /* the command_line_version */
  set_width();
d1609 1
a1609 1
set_width()
d1612 1
a1612 1
    init_page_info();
d1621 1
a1621 1
  wrap_pointer = wrap_buffer;   /* Start it at the beginning */
d1625 1
a1625 1
static void 
d1678 6
a1683 1
	request_quit (SIGINT);
d1726 1
a1726 1
wrap_here(indent)
d1740 1
a1740 1
  if (chars_per_line == UINT_MAX)		/* No line overflow checking */
a1774 116
int 
gdb_file_isatty (stream)
    GDB_FILE *stream;
{

  if (stream->ts_streamtype == afile)
     return (isatty(fileno(stream->ts_filestream)));
  else return 0;
}

GDB_FILE *
gdb_file_init_astring (n)
    int n;
{
  GDB_FILE *tmpstream;

  tmpstream = xmalloc (sizeof(GDB_FILE));
  tmpstream->ts_streamtype = astring;
  tmpstream->ts_filestream = NULL;
  if (n > 0)
    {
      tmpstream->ts_strbuf = xmalloc ((n + 1)*sizeof(char));
      tmpstream->ts_strbuf[0] = '\0';
    }
  else
     tmpstream->ts_strbuf = NULL;
  tmpstream->ts_buflen = n;

  return tmpstream;
}

void
gdb_file_deallocate (streamptr)
    GDB_FILE **streamptr;
{
  GDB_FILE *tmpstream;

  tmpstream = *streamptr;
  if ((tmpstream->ts_streamtype == astring) &&
      (tmpstream->ts_strbuf != NULL)) 
    {
      free (tmpstream->ts_strbuf);
    }

  free (tmpstream);
  *streamptr = NULL;
}
 
char *
gdb_file_get_strbuf (stream)
     GDB_FILE *stream;
{
  return (stream->ts_strbuf);
}

/* adjust the length of the buffer by the amount necessary
   to accomodate appending a string of length N to the buffer contents */
void
gdb_file_adjust_strbuf (n, stream)
     int n;
     GDB_FILE *stream;
{
  int non_null_chars;
  
  non_null_chars = strlen(stream->ts_strbuf);
 
  if (n > (stream->ts_buflen - non_null_chars - 1)) 
    {
      stream->ts_buflen = n + non_null_chars + 1;
      stream->ts_strbuf = xrealloc (stream->ts_strbuf, stream->ts_buflen);
    }  
} 

GDB_FILE *
gdb_fopen (name, mode)
     char * name;
     char * mode;
{
  int       gdb_file_size;
  GDB_FILE *tmp;

  gdb_file_size = sizeof(GDB_FILE);
  tmp = (GDB_FILE *) xmalloc (gdb_file_size);
  tmp->ts_streamtype = afile;
  tmp->ts_filestream = fopen (name, mode);
  tmp->ts_strbuf = NULL;
  tmp->ts_buflen = 0;
  
  return tmp;
}

void
gdb_flush (stream)
     GDB_FILE *stream;
{
  if (flush_hook
      && (stream == gdb_stdout
	  || stream == gdb_stderr))
    {
      flush_hook (stream);
      return;
    }

  fflush (stream->ts_filestream);
}

void
gdb_fclose(streamptr)
     GDB_FILE **streamptr;
{
  GDB_FILE *tmpstream;

  tmpstream = *streamptr;
  fclose (tmpstream->ts_filestream);
  gdb_file_deallocate (streamptr);
}
d1792 1
a1792 1
     GDB_FILE *stream;
d1801 2
a1802 2
  if (stream != gdb_stdout
   || (lines_per_page == UINT_MAX && chars_per_line == UINT_MAX))
d1811 1
a1811 1
  
d1831 1
a1831 1
		 shifting left 3 advances to the next tab stop.  */
d1840 1
a1840 1
	        fputc_unfiltered (*lineptr, stream);
d1844 1
a1844 1
      
d1852 2
a1853 2
		 if chars_per_line is right, we probably just overflowed
		 anyway; if it's wrong, let us keep going.  */
d1865 2
a1866 2
		  *wrap_pointer = '\0';	/* Null-terminate saved stuff */
		  fputs_unfiltered (wrap_buffer, stream); /* and eject it */
d1874 1
a1874 1
				+ (save_chars - wrap_column);
d1877 2
a1878 2
		  wrap_column = 0;		/* And disable fancy wrap */
 		}
d1885 1
a1885 1
	  wrap_here ((char *)0);  /* Spit out chars, cancel further wraps */
d1896 1
a1896 1
     GDB_FILE *stream;
d1905 2
a1906 5
  char buf[2];

  buf[0] = c;
  buf[1] = 0;
  fputs_unfiltered (buf, gdb_stdout);
d1913 1
a1913 1
     GDB_FILE * stream;
d1915 2
a1916 5
  char buf[2];

  buf[0] = c;
  buf[1] = 0;
  fputs_unfiltered (buf, stream);
d1923 1
a1923 1
     GDB_FILE * stream;
d1955 1
a1955 1
  if ((return_p || (strcmp(prev_prefix, prefix) != 0)) && !new_line)
d1957 3
a1959 3
      fputs_unfiltered (prev_suffix, gdb_stderr);
      fputs_unfiltered ("\n", gdb_stderr);
      fputs_unfiltered (prefix, gdb_stderr);
d1966 1
a1966 1
      fputs_unfiltered (prefix, gdb_stderr);
d1976 1
a1976 1
        {
d1979 1
a1979 1
	    fputc_unfiltered (ch, gdb_stderr);
d1982 1
a1982 1
	    fprintf_unfiltered (gdb_stderr, "\\x%02x", ch & 0xff);
d1985 23
a2007 9
	case '\\': fputs_unfiltered ("\\\\",  gdb_stderr);	break;
	case '\b': fputs_unfiltered ("\\b",   gdb_stderr);	break;
	case '\f': fputs_unfiltered ("\\f",   gdb_stderr);	break;
	case '\n': new_line = 1;
		   fputs_unfiltered ("\\n",   gdb_stderr);	break;
	case '\r': fputs_unfiltered ("\\r",   gdb_stderr);	break;
	case '\t': fputs_unfiltered ("\\t",   gdb_stderr);	break;
	case '\v': fputs_unfiltered ("\\v",   gdb_stderr);	break;
        }
d2015 2
a2016 2
      fputs_unfiltered (suffix, gdb_stderr);
      fputs_unfiltered ("\n", gdb_stderr);
d2037 1
a2037 1
     GDB_FILE *stream;
d2059 1
a2059 1
     GDB_FILE *stream;
d2068 1
a2068 1
     GDB_FILE *stream;
a2101 1
/* VARARGS */
d2103 1
a2103 6
#ifdef ANSI_PROTOTYPES
fprintf_filtered (GDB_FILE *stream, const char *format, ...)
#else
fprintf_filtered (va_alist)
     va_dcl
#endif
a2105 1
#ifdef ANSI_PROTOTYPES
a2106 8
#else
  GDB_FILE *stream;
  char *format;

  va_start (args);
  stream = va_arg (args, GDB_FILE *);
  format = va_arg (args, char *);
#endif
a2110 1
/* VARARGS */
d2112 1
a2112 6
#ifdef ANSI_PROTOTYPES
fprintf_unfiltered (GDB_FILE *stream, const char *format, ...)
#else
fprintf_unfiltered (va_alist)
     va_dcl
#endif
a2114 1
#ifdef ANSI_PROTOTYPES
a2115 8
#else
  GDB_FILE *stream;
  char *format;

  va_start (args);
  stream = va_arg (args, GDB_FILE *);
  format = va_arg (args, char *);
#endif
a2122 1
/* VARARGS */
d2124 1
a2124 6
#ifdef ANSI_PROTOTYPES
fprintfi_filtered (int spaces, GDB_FILE *stream, const char *format, ...)
#else
fprintfi_filtered (va_alist)
     va_dcl
#endif
a2126 1
#ifdef ANSI_PROTOTYPES
a2127 10
#else
  int spaces;
  GDB_FILE *stream;
  char *format;

  va_start (args);
  spaces = va_arg (args, int);
  stream = va_arg (args, GDB_FILE *);
  format = va_arg (args, char *);
#endif
a2134 1
/* VARARGS */
d2136 1
a2136 6
#ifdef ANSI_PROTOTYPES
printf_filtered (const char *format, ...)
#else
printf_filtered (va_alist)
     va_dcl
#endif
a2138 1
#ifdef ANSI_PROTOTYPES
a2139 6
#else
  char *format;

  va_start (args);
  format = va_arg (args, char *);
#endif
a2144 1
/* VARARGS */
d2146 1
a2146 6
#ifdef ANSI_PROTOTYPES
printf_unfiltered (const char *format, ...)
#else
printf_unfiltered (va_alist)
     va_dcl
#endif
a2148 1
#ifdef ANSI_PROTOTYPES
a2149 6
#else
  char *format;

  va_start (args);
  format = va_arg (args, char *);
#endif
a2156 1
/* VARARGS */
d2158 1
a2158 6
#ifdef ANSI_PROTOTYPES
printfi_filtered (int spaces, const char *format, ...)
#else
printfi_filtered (va_alist)
     va_dcl
#endif
a2160 1
#ifdef ANSI_PROTOTYPES
a2161 8
#else
  int spaces;
  char *format;

  va_start (args);
  spaces = va_arg (args, int);
  format = va_arg (args, char *);
#endif
d2192 3
a2194 3
  register char *t;
  static char *spaces;
  static int max_spaces;
d2200 2
a2201 2
      spaces = (char *) xmalloc (n+1);
      for (t = spaces+n; t != spaces;)
d2214 1
a2214 1
     GDB_FILE *stream;
d2228 1
a2228 1
     GDB_FILE *stream;
d2271 1
a2271 1
   
d2304 1
a2305 1

d2307 5
a2311 5
** subsetCompare()
**    Answer whether stringToCompare is a full or partial match to
**    templateString.  The partial match must be in sequence starting
**    at index 0.
*/
d2313 14
a2326 11
#ifdef _STDC__
subsetCompare(
    char *stringToCompare,
    char *templateString)
#else
subsetCompare(stringToCompare, templateString)
    char *stringToCompare;
    char *templateString;
#endif
{
    int    match = 0;
a2327 5
    if (templateString != (char *)NULL && stringToCompare != (char *)NULL &&
	strlen(stringToCompare) <= strlen(templateString))
      match = (strncmp(templateString,
		       stringToCompare,
		       strlen(stringToCompare)) == 0);
d2329 5
a2333 7
    return match;
} /* subsetCompare */


void pagination_on_command(arg, from_tty)
  char *arg;
  int from_tty;
d2338 5
a2342 3
void pagination_off_command(arg, from_tty)
  char *arg;
  int from_tty;
d2346 1
a2347 1

d2353 4
a2356 4
  c = add_set_cmd ("width", class_support, var_uinteger, 
		  (char *)&chars_per_line,
		  "Set number of characters gdb thinks are in a line.",
		  &setlist);
d2362 1
a2362 1
		  var_uinteger, (char *)&lines_per_page,
d2365 1
a2365 1
  
d2369 1
a2369 1
  if (!GDB_FILE_ISATTY (gdb_stdout))
d2372 1
a2372 1
  set_width_command ((char *)NULL, 0, c);
d2375 3
a2377 3
    (add_set_cmd ("demangle", class_support, var_boolean, 
		  (char *)&demangle,
		"Set demangling of encoded C++ names when displaying symbols.",
d2383 1
a2383 1
		  var_boolean, (char *)&pagination_enabled,
d2388 4
a2391 4
      add_com("am", class_support, pagination_on_command, 
              "Enable pagination");
      add_com("sm", class_support, pagination_off_command, 
              "Disable pagination");
d2395 3
a2397 3
    (add_set_cmd ("sevenbit-strings", class_support, var_boolean, 
		  (char *)&sevenbit_strings,
   "Set printing of 8-bit characters in strings as \\nnn.",
d2402 3
a2404 3
    (add_set_cmd ("asm-demangle", class_support, var_boolean, 
		  (char *)&asm_demangle,
	"Set demangling of C++ names in disassembly listings.",
d2412 1
a2412 1
        SIGWINCH_HANDLER_BODY
a2449 1
  cur_byte = (start + len) / FLOATFORMAT_CHAR_BIT;
d2451 24
a2474 4
    cur_byte = (total_len / FLOATFORMAT_CHAR_BIT) - cur_byte - 1;
  cur_bitshift =
    ((start + len) % FLOATFORMAT_CHAR_BIT) - FLOATFORMAT_CHAR_BIT;
  result = *(data + cur_byte) >> (-cur_bitshift);
d2484 1
a2484 8
      if (len - cur_bitshift < FLOATFORMAT_CHAR_BIT)
	/* This is the last byte; zero out the bits which are not part of
	   this field.  */
	result |=
	  (*(data + cur_byte) & ((1 << (len - cur_bitshift)) - 1))
	    << cur_bitshift;
      else
	result |= *(data + cur_byte) << cur_bitshift;
d2491 3
d2496 1
a2496 1
  
d2507 1
a2507 1
  unsigned char *ufrom = (unsigned char *)from;
d2526 1
a2526 1
  if (fmt -> byteorder == floatformat_littlebyte_bigword)
d2532 1
a2532 1
      longswaps = fmt -> totalsize / FLOATFORMAT_CHAR_BIT;
d2534 1
a2534 1
      
d2537 1
a2537 1
	  newfrom = (unsigned char *) xmalloc (fmt -> totalsize);
d2569 2
a2570 1
/* Don't bias zero's, denorms or NaNs.  */
d2573 2
d2583 6
a2588 4
    if (fmt->intbit == floatformat_intbit_no)
      dto = ldexp (1.0, exponent);
    else
      exponent++;
d2595 1
a2595 1
			 mant_off, mant_bits);
d2597 1
a2597 1
      dto += ldexp ((double)mant, exponent - mant_bits);
a2629 1
  cur_byte = (start + len) / FLOATFORMAT_CHAR_BIT;
d2631 21
a2651 7
    cur_byte = (total_len / FLOATFORMAT_CHAR_BIT) - cur_byte - 1;
  cur_bitshift =
    ((start + len) % FLOATFORMAT_CHAR_BIT) - FLOATFORMAT_CHAR_BIT;
  *(data + cur_byte) &=
    ~(((1 << ((start + len) % FLOATFORMAT_CHAR_BIT)) - 1) << (-cur_bitshift));
  *(data + cur_byte) |=
    (stuff_to_put & ((1 << FLOATFORMAT_CHAR_BIT) - 1)) << (-cur_bitshift);
d2722 1
a2722 1
  return value/tmp;
d2742 1
a2742 1
  unsigned char *uto = (unsigned char *)to;
d2794 1
a2794 1
      mant_long = (unsigned long)mant;
d2798 3
a2800 3
	 If we are discarding a zero, we should be (but are not) creating
	 a denormalized	number which means adjusting the exponent
	 (I think).  */
d2820 1
a2820 1
  if (fmt -> byteorder == floatformat_littlebyte_bigword)
d2839 2
a2840 2
static char*
get_cell()
d2843 3
a2845 2
  static int cell=0;
  if (++cell>=NUMCELLS) cell=0;
d2864 6
a2869 1
static int thirty_two = 32;	/* eliminate warning from compiler on 32-bit systems */
d2871 21
a2891 19
char* 
paddr(addr)
  t_addr addr;
{
  char *paddr_str=get_cell();
  switch (sizeof(t_addr))
    {
      case 8:
        sprintf (paddr_str, "%08lx%08lx",
		(unsigned long) (addr >> thirty_two), (unsigned long) (addr & 0xffffffff));
	break;
      case 4:
        sprintf (paddr_str, "%08lx", (unsigned long) addr);
	break;
      case 2:
        sprintf (paddr_str, "%04x", (unsigned short) (addr & 0xffff));
	break;
      default:
        sprintf (paddr_str, "%lx", (unsigned long) addr);
d2896 14
a2909 10
char* 
preg(reg)
  t_reg reg;
{
  char *preg_str=get_cell();
  switch (sizeof(t_reg))
    {
      case 8:
        sprintf (preg_str, "%08lx%08lx",
		(unsigned long) (reg >> thirty_two), (unsigned long) (reg & 0xffffffff));
d2911 9
a2919 8
      case 4:
        sprintf (preg_str, "%08lx", (unsigned long) reg);
	break;
      case 2:
        sprintf (preg_str, "%04x", (unsigned short) (reg & 0xffff));
	break;
      default:
        sprintf (preg_str, "%lx", (unsigned long) reg);
d2921 1
a2921 1
  return preg_str;
d2924 30
a2953 25
char*
paddr_nz(addr)
  t_addr addr;
{
  char *paddr_str=get_cell();
  switch (sizeof(t_addr))
    {
      case 8:
	{
	  unsigned long high = (unsigned long) (addr >> thirty_two);
	  if (high == 0)
	    sprintf (paddr_str, "%lx", (unsigned long) (addr & 0xffffffff));
	  else
	    sprintf (paddr_str, "%lx%08lx",
		    high, (unsigned long) (addr & 0xffffffff));
	  break;
	}
      case 4:
        sprintf (paddr_str, "%lx", (unsigned long) addr);
	break;
      case 2:
        sprintf (paddr_str, "%x", (unsigned short) (addr & 0xffff));
	break;
      default:
        sprintf (paddr_str,"%lx", (unsigned long) addr);
d2955 7
d2965 49
a3013 19
char*
preg_nz(reg)
  t_reg reg;
{
  char *preg_str=get_cell();
  switch (sizeof(t_reg))
    {
      case 8:
	{
	  unsigned long high = (unsigned long) (reg >> thirty_two);
	  if (high == 0)
	    sprintf (preg_str, "%lx", (unsigned long) (reg & 0xffffffff));
	  else
	    sprintf (preg_str, "%lx%08lx",
		    high, (unsigned long) (reg & 0xffffffff));
	  break;
	}
      case 4:
        sprintf (preg_str, "%lx", (unsigned long) reg);
d3015 9
a3023 5
      case 2:
        sprintf (preg_str, "%x", (unsigned short) (reg & 0xffff));
	break;
      default:
        sprintf (preg_str, "%lx", (unsigned long) reg);
d3026 17
@


1.1.1.1
log
@Initial creation of sourceware repository
@
text
@@


1.1.1.2
log
@import gdb-19990422 snapshot
@
text
@a168 1

a175 15

static void
do_freeargv (arg)
     void *arg;
{
  freeargv ((char**) arg);
}

struct cleanup *
make_cleanup_freeargv (arg)
     char **arg;
{
  return make_my_cleanup (&cleanup_chain, do_freeargv, arg);
}

d1717 1
a1717 1
  if ((stream != gdb_stdout) || !pagination_enabled
d2303 3
a2305 3
** subset_compare()
**    Answer whether string_to_compare is a full or partial match to
**    template_string.  The partial match must be in sequence starting
d2309 20
a2328 14
subset_compare (string_to_compare, template_string)
    char *string_to_compare;
    char *template_string;
{
  int match;
  if (template_string != (char *)NULL && string_to_compare != (char *)NULL &&
      strlen(string_to_compare) <= strlen(template_string))
    match = (strncmp(template_string,
		     string_to_compare,
		     strlen(string_to_compare)) == 0);
  else
    match = 0;
  return match;
}
d2331 1
a2331 3
static void pagination_on_command PARAMS ((char *arg, int from_tty));
static void
pagination_on_command (arg, from_tty)
d2338 1
a2338 3
static void pagination_on_command PARAMS ((char *arg, int from_tty));
static void
pagination_off_command (arg, from_tty)
d2563 4
a2566 6
    {
      if (fmt->intbit == floatformat_intbit_no)
	dto = ldexp (1.0, exponent);
      else
	exponent++;
    }
@


1.1.1.3
log
@import gdb-1999-05-25 snapshot
@
text
@d719 8
d1006 15
a1020 1
  fputs_unfiltered (n_spaces (n), file);
d1291 30
a1653 3

  if (stream->ts_streamtype != astring)
    return;
d1655 3
a1657 1
  if (stream->ts_strbuf)
d1659 2
a1660 8
      /* There is already a buffer allocated */
      non_null_chars = strlen(stream->ts_strbuf);
 
      if (n > (stream->ts_buflen - non_null_chars - 1)) 
        {
          stream->ts_buflen = n + non_null_chars + 1;
          stream->ts_strbuf = xrealloc (stream->ts_strbuf, stream->ts_buflen);
        }  
a1661 3
  else
    /* No buffer yet, so allocate one of the desired size */
    stream->ts_strbuf = xmalloc ((n + 1) * sizeof (char));
d2204 3
a2206 3
  char *t;
  static char *spaces = 0;
  static int max_spaces = -1;
a2948 19

/* Helper functions for INNER_THAN */
int
core_addr_lessthan (lhs, rhs)
     CORE_ADDR lhs;
     CORE_ADDR rhs;
{
  return (lhs < rhs);
}

int
core_addr_greaterthan (lhs, rhs)
     CORE_ADDR lhs;
     CORE_ADDR rhs;
{
  return (lhs > rhs);
}


@


1.1.1.4
log
@import gdb-1999-06-01 snapshot
@
text
@d1539 3
a1541 103

/* ``struct gdb_file'' implementation that maps directly onto
   <stdio.h>'s FILE. */

static gdb_file_fputs_ftype stdio_file_fputs;
static gdb_file_isatty_ftype stdio_file_isatty;
static gdb_file_delete_ftype stdio_file_delete;
static struct gdb_file *stdio_file_new PARAMS ((FILE *file, int close_p));
static gdb_file_flush_ftype stdio_file_flush;

static int stdio_file_magic;

struct stdio_file
{
  int *magic;
  FILE *file;
  int close_p;
};

static struct gdb_file *
stdio_file_new (file, close_p)
     FILE *file;
     int close_p;
{
  struct gdb_file *gdb_file = gdb_file_new ();
  struct stdio_file *stdio = xmalloc (sizeof (struct stdio_file));
  stdio->magic = &stdio_file_magic;
  stdio->file = file;
  stdio->close_p = close_p;
  set_gdb_file_data (gdb_file, stdio, stdio_file_delete);
  set_gdb_file_flush (gdb_file, stdio_file_flush);
  set_gdb_file_fputs (gdb_file, stdio_file_fputs);
  set_gdb_file_isatty (gdb_file, stdio_file_isatty);
  return gdb_file;
}

static void
stdio_file_delete (file)
     struct gdb_file *file;
{
  struct stdio_file *stdio = gdb_file_data (file);
  if (stdio->magic != &stdio_file_magic)
    error ("Internal error: bad magic number");
  if (stdio->close_p)
    {
      fclose (stdio->file);
    }
  free (stdio);
}

static void
stdio_file_flush (file)
     struct gdb_file *file;
{
  struct stdio_file *stdio = gdb_file_data (file);
  if (stdio->magic != &stdio_file_magic)
    error ("Internal error: bad magic number");
  fflush (stdio->file);
}

static void
stdio_file_fputs (linebuffer, file)
     const char *linebuffer;
     struct gdb_file *file;
{
  struct stdio_file *stdio = gdb_file_data (file);
  if (stdio->magic != &stdio_file_magic)
    error ("Internal error: bad magic number");
  fputs (linebuffer, stdio->file);
}

static int
stdio_file_isatty (file)
     struct gdb_file *file;
{
  struct stdio_file *stdio = gdb_file_data (file);
  if (stdio->magic != &stdio_file_magic)
    error ("Internal error: bad magic number");
  return (isatty (fileno (stdio->file)));
}

/* Like fdopen().  Create a gdb_file from a previously opened FILE. */

struct gdb_file *
stdio_fileopen (file)
     FILE *file;
{
  return stdio_file_new (file, 0);
}


/* A ``struct gdb_file'' that is compatible with all the legacy
   code. */

static gdb_file_flush_ftype tui_file_flush;
extern gdb_file_fputs_ftype tui_file_fputs;
static gdb_file_isatty_ftype tui_file_isatty;
static gdb_file_delete_ftype tui_file_delete;
static struct gdb_file *tui_file_new PARAMS ((void));
static int tui_file_magic;

static struct gdb_file *
tui_file_new ()
a1542 24
  struct tui_stream *tui = xmalloc (sizeof (struct tui_stream));
  struct gdb_file *file = gdb_file_new ();
  set_gdb_file_data (file, tui, tui_file_delete);
  set_gdb_file_flush (file, tui_file_flush);
  set_gdb_file_fputs (file, tui_file_fputs);
  set_gdb_file_isatty (file, tui_file_isatty);
  tui->ts_magic = &tui_file_magic;
  return file;
}

static void
tui_file_delete (file)
     struct gdb_file *file;
{
  struct tui_stream *tmpstream = gdb_file_data (file);
  if (tmpstream->ts_magic != &tui_file_magic)
    error ("Internal error: bad magic number");
  if ((tmpstream->ts_streamtype == astring) &&
      (tmpstream->ts_strbuf != NULL)) 
    {
      free (tmpstream->ts_strbuf);
    }
  free (tmpstream);
}
a1543 20
struct gdb_file *
tui_fileopen (stream)
     FILE *stream;
{
  struct gdb_file *file = tui_file_new ();
  struct tui_stream *tmpstream = gdb_file_data (file);
  tmpstream->ts_streamtype = afile;
  tmpstream->ts_filestream = stream;
  tmpstream->ts_strbuf = NULL;
  tmpstream->ts_buflen = 0;
  return file;
}

static int 
tui_file_isatty (file)
    struct gdb_file *file;
{
  struct tui_stream *stream = gdb_file_data (file);
  if (stream->ts_magic != &tui_file_magic)
    error ("Internal error: bad magic number");
d1553 1
a1553 4
  struct gdb_file *file = tui_file_new ();
  struct tui_stream *tmpstream = gdb_file_data (file);
  if (tmpstream->ts_magic != &tui_file_magic)
    error ("Internal error: bad magic number");
d1555 1
d1567 1
a1567 1
  return file;
d1574 10
a1583 1
  gdb_file_delete (*streamptr);
d1588 2
a1589 2
gdb_file_get_strbuf (file)
     GDB_FILE *file;
a1590 3
  struct tui_stream *stream = gdb_file_data (file);
  if (stream->ts_magic != &tui_file_magic)
    error ("Internal error: bad magic number");
d1597 1
a1597 1
gdb_file_adjust_strbuf (n, file)
d1599 1
a1599 1
     GDB_FILE *file;
a1600 1
  struct tui_stream *stream = gdb_file_data (file);
a1601 2
  if (stream->ts_magic != &tui_file_magic)
    error ("Internal error: bad magic number");
d1627 11
a1637 4
  FILE *f = fopen (name, mode);
  if (f == NULL)
    return NULL;
  return stdio_file_new (f, 1);
d1640 3
a1642 3
static void
tui_file_flush (file)
     GDB_FILE *file;
a1643 3
  struct tui_stream *stream = gdb_file_data (file);
  if (stream->ts_magic != &tui_file_magic)
    error ("Internal error: bad magic number");
d1645 2
a1646 2
      && (file == gdb_stdout
	  || file == gdb_stderr))
d1648 1
a1648 1
      flush_hook (file);
d1659 1
a1659 89
  gdb_file_delete (*streamptr);
  *streamptr = NULL;
}


/* Implement the ``struct gdb_file'' object. */

static gdb_file_isatty_ftype null_file_isatty;
static gdb_file_fputs_ftype null_file_fputs;
static gdb_file_flush_ftype null_file_flush;
static gdb_file_delete_ftype null_file_delete;

struct gdb_file
{
  gdb_file_flush_ftype *to_flush;
  gdb_file_fputs_ftype *to_fputs;
  gdb_file_delete_ftype *to_delete;
  gdb_file_isatty_ftype *to_isatty;
  void *to_data;
};

struct gdb_file *
gdb_file_new ()
{
  struct gdb_file *file = xmalloc (sizeof (struct gdb_file));
  set_gdb_file_data (file, NULL, null_file_delete);
  set_gdb_file_flush (file, null_file_flush);
  set_gdb_file_fputs (file, null_file_fputs);
  set_gdb_file_isatty (file, null_file_isatty);
  return file;
}

void
gdb_file_delete (file)
     struct gdb_file *file;
{
  file->to_delete (file);
  free (file);
}

static int
null_file_isatty (file)
     struct gdb_file *file;
{
  return 0;
}

static void
null_file_flush (file)
     struct gdb_file *file;
{
  return;
}

static void
null_file_fputs (buf, file)
     const char *buf;
     struct gdb_file *file;
{
  return;
}

static void
null_file_delete (file)
     struct gdb_file *file;
{
  return;
}

void *
gdb_file_data (file)
     struct gdb_file *file;
{
  return file->to_data;
}

void
gdb_flush (file)
     struct gdb_file *file;
{
  file->to_flush (file);
}

int
gdb_file_isatty (file)
     struct gdb_file *file;
{
  return file->to_isatty (file);
}
d1661 3
a1663 40
void
fputs_unfiltered (buf, file)
     const char *buf;
     struct gdb_file *file;
{
  file->to_fputs (buf, file);
}

void
set_gdb_file_flush (file, flush)
     struct gdb_file *file;
     gdb_file_flush_ftype *flush;
{
  file->to_flush = flush;
}

void
set_gdb_file_isatty (file, isatty)
     struct gdb_file *file;
     gdb_file_isatty_ftype *isatty;
{
  file->to_isatty = isatty;
}

void
set_gdb_file_fputs (file, fputs)
     struct gdb_file *file;
     gdb_file_fputs_ftype *fputs;
{
  file->to_fputs = fputs;
}

void
set_gdb_file_data (file, data, delete)
     struct gdb_file *file;
     void *data;
     gdb_file_delete_ftype *delete;
{
  file->to_data = data;
  file->to_delete = delete;
@


1.1.1.5
log
@import gdb-1999-06-14 snapshot
@
text
@d720 1
d738 1
d1447 1
a1447 6
	{
	  if (!async_p)
	    request_quit (SIGINT);
	  else
	    async_request_quit (0); 
	}
a1635 2
static gdb_file_rewind_ftype tui_file_rewind;
static gdb_file_put_ftype tui_file_put;
a1648 2
  set_gdb_file_rewind (file, tui_file_rewind);
  set_gdb_file_put (file, tui_file_put);
a1692 24
static void
tui_file_rewind (file)
    struct gdb_file *file;
{
  struct tui_stream *stream = gdb_file_data (file);
  if (stream->ts_magic != &tui_file_magic)
    error ("Internal error: bad magic number");
  stream->ts_strbuf[0] = '\0';
}

static void
tui_file_put (file, dest)
    struct gdb_file *file;
    struct gdb_file *dest;
{
  struct tui_stream *stream = gdb_file_data (file);
  if (stream->ts_magic != &tui_file_magic)
    error ("Internal error: bad magic number");
  if (stream->ts_streamtype == astring)
    {
      fputs_unfiltered (stream->ts_strbuf, dest);
    }
}

a1808 2
static gdb_file_rewind_ftype null_file_rewind;
static gdb_file_put_ftype null_file_put;
a1815 2
  gdb_file_rewind_ftype *to_rewind;
  gdb_file_put_ftype *to_put;
a1826 2
  set_gdb_file_rewind (file, null_file_rewind);
  set_gdb_file_put (file, null_file_put);
a1845 15
null_file_rewind (file)
     struct gdb_file *file;
{
  return;
}

static void
null_file_put (file, src)
     struct gdb_file *file;
     struct gdb_file *src;
{
  return;
}

static void
a1888 15
gdb_file_rewind (file)
     struct gdb_file *file;
{
  return file->to_rewind (file);
}

void
gdb_file_put (file, dest)
     struct gdb_file *file;
     struct gdb_file *dest;
{
  return file->to_put (file, dest);
}

void
a1909 16
}

void
set_gdb_file_rewind (file, rewind)
     struct gdb_file *file;
     gdb_file_rewind_ftype *rewind;
{
  file->to_rewind = rewind;
}

void
set_gdb_file_put (file, put)
     struct gdb_file *file;
     gdb_file_put_ftype *put;
{
  file->to_put = put;
@


1.1.1.6
log
@import gdb-1999-06-28 snapshot
@
text
@d1944 1
a1944 1
  file->to_rewind (file);
d1952 1
a1952 1
  file->to_put (file, dest);
@


1.1.1.7
log
@import gdb-1999-07-05 snapshot
@
text
@a94 7
static struct cleanup *exec_cleanup_chain; /* cleaned up on each execution command */

/* Pointer to what is left to do for an execution command after the
   target stops. Used only in asynchronous mode, by targets that
   support async execution.  The finish and until commands use it. So
   does the target extended-remote command. */
struct continuation *cmd_continuation;
a177 8
struct cleanup *
make_exec_cleanup (function, arg)
     void (*function) PARAMS ((PTR));
     PTR arg;
{
    return make_my_cleanup (&exec_cleanup_chain, function, arg);
}

a234 7
do_exec_cleanups (old_chain)
     register struct cleanup *old_chain;
{
    do_my_cleanups (&exec_cleanup_chain, old_chain);
}

void
a350 32
}

/* Add a continuation to the continuation list, the gloabl list
   cmd_continuation. */
void
add_continuation (continuation_hook, arg_list)
  void (*continuation_hook) PARAMS ((struct continuation_arg *));
  struct continuation_arg *arg_list;
{
 struct continuation *continuation_ptr;

 continuation_ptr = (struct continuation *) xmalloc (sizeof (struct continuation));
 continuation_ptr->continuation_hook = continuation_hook;
 continuation_ptr->arg_list = arg_list;
 continuation_ptr->next = cmd_continuation;
 cmd_continuation = continuation_ptr;
}

/* Walk down the cmd_continuation list, and execute all the
   continuations. */
void 
do_all_continuations ()
{
 struct continuation *continuation_ptr;

 while (cmd_continuation)
   {
     (cmd_continuation->continuation_hook) (cmd_continuation->arg_list);
     continuation_ptr = cmd_continuation;
     cmd_continuation = continuation_ptr->next;
     free (continuation_ptr);
   }
@


1.1.1.8
log
@import gdb-1999-07-07 pre reformat
@
text
@d2254 3
a2256 3
      fputs_unfiltered (prev_suffix, gdb_stdlog);
      fputs_unfiltered ("\n", gdb_stdlog);
      fputs_unfiltered (prefix, gdb_stdlog);
d2263 1
a2263 1
      fputs_unfiltered (prefix, gdb_stdlog);
d2276 1
a2276 1
	    fputc_unfiltered (ch, gdb_stdlog);
d2279 1
a2279 1
	    fprintf_unfiltered (gdb_stdlog, "\\x%02x", ch & 0xff);
d2282 3
a2284 3
	case '\\': fputs_unfiltered ("\\\\",  gdb_stdlog);	break;
	case '\b': fputs_unfiltered ("\\b",   gdb_stdlog);	break;
	case '\f': fputs_unfiltered ("\\f",   gdb_stdlog);	break;
d2286 4
a2289 4
		   fputs_unfiltered ("\\n",   gdb_stdlog);	break;
	case '\r': fputs_unfiltered ("\\r",   gdb_stdlog);	break;
	case '\t': fputs_unfiltered ("\\t",   gdb_stdlog);	break;
	case '\v': fputs_unfiltered ("\\v",   gdb_stdlog);	break;
d2298 2
a2299 2
      fputs_unfiltered (suffix, gdb_stdlog);
      fputs_unfiltered ("\n", gdb_stdlog);
@


1.1.1.9
log
@import gdb-1999-07-07 post reformat
@
text
@d4 1
a4 1
   This file is part of GDB.
d6 13
a18 14
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */
d68 1
a68 1
fatal_dump_core PARAMS ((char *,...));
d73 1
a73 1
static void
d86 1
a86 1
#define GDB_FILE_ISATTY(GDB_FILE_PTR)   (gdb_file_isatty(GDB_FILE_PTR))
d92 4
a95 4
static struct cleanup *cleanup_chain;	/* cleaned up after a failed command */
static struct cleanup *final_cleanup_chain;	/* cleaned up when gdb exits */
static struct cleanup *run_cleanup_chain;	/* cleaned up on each 'run' */
static struct cleanup *exec_cleanup_chain;	/* cleaned up on each execution command */
d154 1
a155 1

d166 1
a166 1
  return make_my_cleanup (&cleanup_chain, function, arg);
d174 1
a174 1
  return make_my_cleanup (&final_cleanup_chain, function, arg);
d182 1
a182 1
  return make_my_cleanup (&run_cleanup_chain, function, arg);
d190 1
a190 1
  return make_my_cleanup (&exec_cleanup_chain, function, arg);
d197 1
a197 1
  freeargv ((char **) arg);
d214 1
a214 1
  = (struct cleanup *) xmalloc (sizeof (struct cleanup));
d232 1
a232 1
  do_my_cleanups (&cleanup_chain, old_chain);
d239 1
a239 1
  do_my_cleanups (&final_cleanup_chain, old_chain);
d246 1
a246 1
  do_my_cleanups (&run_cleanup_chain, old_chain);
d253 1
a253 1
  do_my_cleanups (&exec_cleanup_chain, old_chain);
d277 1
a277 1
  discard_my_cleanups (&cleanup_chain, old_chain);
d284 1
a284 1
  discard_my_cleanups (&final_cleanup_chain, old_chain);
d296 1
a296 1
      free ((PTR) ptr);
d304 1
a304 1
  return save_my_cleanups (&cleanup_chain);
d310 1
a310 1
  return save_my_cleanups (&final_cleanup_chain);
d315 1
a315 1
     struct cleanup **pmy_chain;
d328 1
a328 1
  restore_my_cleanups (&cleanup_chain, chain);
d335 1
a335 1
  restore_my_cleanups (&final_cleanup_chain, chain);
d349 2
a350 2
   foo = xmalloc (...);
   old_chain = make_cleanup (free_current_contents, &foo);
d371 1
a371 1
     PTR arg;
d379 2
a380 2
     void (*continuation_hook) PARAMS ((struct continuation_arg *));
     struct continuation_arg *arg_list;
d382 1
a382 1
  struct continuation *continuation_ptr;
d384 5
a388 5
  continuation_ptr = (struct continuation *) xmalloc (sizeof (struct continuation));
  continuation_ptr->continuation_hook = continuation_hook;
  continuation_ptr->arg_list = arg_list;
  continuation_ptr->next = cmd_continuation;
  cmd_continuation = continuation_ptr;
d393 1
a393 1
void
d396 1
a396 1
  struct continuation *continuation_ptr;
d398 7
a404 7
  while (cmd_continuation)
    {
      (cmd_continuation->continuation_hook) (cmd_continuation->arg_list);
      continuation_ptr = cmd_continuation;
      cmd_continuation = continuation_ptr->next;
      free (continuation_ptr);
    }
d406 1
a407 1

d421 1
a421 1
  wrap_here ("");		/* Force out any buffered output */
d436 1
a436 1
warning (const char *string,...)
d454 6
a459 6
    {
      warning_begin ();
      vfprintf_unfiltered (gdb_stderr, string, args);
      fprintf_unfiltered (gdb_stderr, "\n");
      va_end (args);
    }
d476 1
a476 1
  wrap_here ("");		/* Force out any buffered output */
d492 1
a492 1
error (const char *string,...)
d506 1
a506 1
  else
d536 1
a536 1
fatal (char *string,...)
d563 1
a563 1
fatal_dump_core (char *string,...)
d653 1
a653 1
  error ("%s.", combined);
d694 1
a694 1
  wrap_here ((char *) 0);
d711 2
a712 2
  /* If there is no terminal switching for this target, then we can't
     possibly get screwed by the lack of job control.  */
d717 1
a717 1
	       "Quit (expect signal SIGINT when the program is resumed)\n");
d728 1
a728 1
notice_quit ()
d747 1
a747 1
#elif defined(_MSC_VER)		/* should test for wingdb instead? */
d755 1
a755 2
void
notice_quit ()
d757 1
a757 1
  int k = win32pollquit ();
d766 1
a766 2
void
notice_quit ()
d787 1
a787 1
  if (immediate_quit)
d818 1
a818 1
  if (ptr == 0)			/* Guard against old realloc's */
d832 1
a832 1
#endif /* USE_MMALLOC */
d875 2
a876 2
         to something other than dummy_target, until after
         initialize_all_files(). */
d973 1
a974 1

d1065 1
a1065 1
  fprintf_filtered (stream, "0x%lx", (unsigned long) addr);
d1076 1
a1076 1
query (char *ctlstr,...)
d1125 1
a1125 1
         have a prompt on the front of it. */
d1130 1
a1130 1
      wrap_here ("");
d1134 1
a1134 1
      if (!tui_version || cmdWin == tuiWinWithFocus ())
d1139 2
a1140 1
	answer = (unsigned char) tuiBufferGetc ();
d1145 1
a1145 1
	{
d1151 1
a1151 1
	do
d1154 1
a1154 1
	    if (!tui_version || cmdWin == tuiWinWithFocus ())
d1159 2
a1160 1
	      ans2 = (unsigned char) tuiBufferGetc ();
d1164 2
a1165 2
	while (ans2 != EOF && ans2 != '\n' && ans2 != '\r');
      TUIDO (((TuiOpaqueFuncPtr) tui_vStartNewLines, 1));
d1186 1
a1187 1

d1238 1
a1238 1

d1284 35
a1318 38
  if (c < 0x20 ||		/* Low control chars */
      (c >= 0x7F && c < 0xA0) ||	/* DEL, High controls */
      (sevenbit_strings && c >= 0x80))
    {				/* high order bit set */
      switch (c)
	{
	case '\n':
	  fputs_filtered ("\\n", stream);
	  break;
	case '\b':
	  fputs_filtered ("\\b", stream);
	  break;
	case '\t':
	  fputs_filtered ("\\t", stream);
	  break;
	case '\f':
	  fputs_filtered ("\\f", stream);
	  break;
	case '\r':
	  fputs_filtered ("\\r", stream);
	  break;
	case '\033':
	  fputs_filtered ("\\e", stream);
	  break;
	case '\007':
	  fputs_filtered ("\\a", stream);
	  break;
	default:
	  fprintf_filtered (stream, "\\%.3o", (unsigned int) c);
	  break;
	}
    }
  else
    {
      if (c == '\\' || c == quoter)
	fputs_filtered ("\\", stream);
      fprintf_filtered (stream, "%c", c);
    }
d1320 1
a1321 1

d1352 1
a1353 1

d1356 1
a1356 1
init_page_info ()
d1359 1
a1359 1
  if (tui_version && m_winPtrNotNull (cmdWin))
d1370 3
a1372 3
      lines_per_page = ScreenRows ();
      chars_per_line = ScreenCols ();
#else
d1381 1
a1381 1
	char *termtype = getenv ("TERM");
d1383 2
a1384 2
	/* Positive means success, nonpositive means failure.  */
	int status;
d1386 3
a1388 3
	/* 2048 is large enough for all known terminals, according to the
	   GNU termcap manual.  */
	char term_buffer[2048];
d1390 2
a1391 2
	if (termtype)
	  {
d1395 1
a1395 1
		int val;
d1397 6
a1402 6

		val = tgetnum ("li");
		if (val >= 0 && !running_in_emacs)
		  lines_per_page = val;
		else
		  /* The number of lines per page is not mentioned
d1406 5
a1410 5
		  lines_per_page = UINT_MAX;

		val = tgetnum ("co");
		if (val >= 0)
		  chars_per_line = val;
d1412 1
a1412 1
	  }
d1424 3
a1426 3
	lines_per_page = UINT_MAX;
    }				/* the command_line_version */
  set_width ();
d1430 1
a1430 1
set_width ()
d1433 1
a1433 1
    init_page_info ();
d1442 1
a1442 1
  wrap_pointer = wrap_buffer;	/* Start it at the beginning */
d1446 1
a1446 1
static void
d1503 1
a1503 1
	    async_request_quit (0);
d1547 1
a1547 1
wrap_here (indent)
d1561 1
a1561 1
  if (chars_per_line == UINT_MAX)	/* No line overflow checking */
d1603 1
a1603 1
static struct gdb_file *stdio_file_new PARAMS ((FILE * file, int close_p));
d1609 5
a1613 5
  {
    int *magic;
    FILE *file;
    int close_p;
  };
d1722 1
a1722 1
      (tmpstream->ts_strbuf != NULL))
d1742 1
a1742 1
static int
d1744 1
a1744 1
     struct gdb_file *file;
d1750 2
a1751 3
    return (isatty (fileno (stream->ts_filestream)));
  else
    return 0;
d1756 1
a1756 1
     struct gdb_file *file;
d1766 2
a1767 2
     struct gdb_file *file;
     struct gdb_file *dest;
d1780 1
a1780 1
     int n;
d1791 1
a1791 1
      tmpstream->ts_strbuf = xmalloc ((n + 1) * sizeof (char));
d1795 1
a1795 1
    tmpstream->ts_strbuf = NULL;
d1803 1
a1803 1
     GDB_FILE **streamptr;
d1808 1
a1808 1

d1833 1
a1833 1

d1837 8
a1844 8
      non_null_chars = strlen (stream->ts_strbuf);

      if (n > (stream->ts_buflen - non_null_chars - 1))
	{
	  stream->ts_buflen = n + non_null_chars + 1;
	  stream->ts_strbuf = xrealloc (stream->ts_strbuf, stream->ts_buflen);
	}
    }
d1848 1
a1848 1
}
d1852 2
a1853 2
     char *name;
     char *mode;
d1880 1
a1880 1
gdb_fclose (streamptr)
d1898 9
a1906 9
  {
    gdb_file_flush_ftype *to_flush;
    gdb_file_fputs_ftype *to_fputs;
    gdb_file_delete_ftype *to_delete;
    gdb_file_isatty_ftype *to_isatty;
    gdb_file_rewind_ftype *to_rewind;
    gdb_file_put_ftype *to_put;
    void *to_data;
  };
d2093 1
a2093 1
      || (lines_per_page == UINT_MAX && chars_per_line == UINT_MAX))
d2102 1
a2102 1

d2122 1
a2122 1
	         shifting left 3 advances to the next tab stop.  */
d2131 1
a2131 1
		fputc_unfiltered (*lineptr, stream);
d2135 1
a2135 1

d2143 2
a2144 2
	         if chars_per_line is right, we probably just overflowed
	         anyway; if it's wrong, let us keep going.  */
d2156 2
a2157 2
		  *wrap_pointer = '\0';		/* Null-terminate saved stuff */
		  fputs_unfiltered (wrap_buffer, stream);	/* and eject it */
d2165 1
a2165 1
		    + (save_chars - wrap_column);
d2168 2
a2169 2
		  wrap_column = 0;	/* And disable fancy wrap */
		}
d2176 1
a2176 1
	  wrap_here ((char *) 0);	/* Spit out chars, cancel further wraps */
d2207 1
a2207 1
     GDB_FILE *stream;
d2220 1
a2220 1
     GDB_FILE *stream;
d2252 1
a2252 1
  if ((return_p || (strcmp (prev_prefix, prefix) != 0)) && !new_line)
d2273 1
a2273 1
	{
d2282 9
a2290 23
	case '\\':
	  fputs_unfiltered ("\\\\", gdb_stdlog);
	  break;
	case '\b':
	  fputs_unfiltered ("\\b", gdb_stdlog);
	  break;
	case '\f':
	  fputs_unfiltered ("\\f", gdb_stdlog);
	  break;
	case '\n':
	  new_line = 1;
	  fputs_unfiltered ("\\n", gdb_stdlog);
	  break;
	case '\r':
	  fputs_unfiltered ("\\r", gdb_stdlog);
	  break;
	case '\t':
	  fputs_unfiltered ("\\t", gdb_stdlog);
	  break;
	case '\v':
	  fputs_unfiltered ("\\v", gdb_stdlog);
	  break;
	}
d2388 1
a2388 1
fprintf_filtered (GDB_FILE * stream, const char *format,...)
d2412 1
a2412 1
fprintf_unfiltered (GDB_FILE * stream, const char *format,...)
d2439 1
a2439 1
fprintfi_filtered (int spaces, GDB_FILE * stream, const char *format,...)
d2468 1
a2468 1
printf_filtered (const char *format,...)
d2491 1
a2491 1
printf_unfiltered (const char *format,...)
d2516 1
a2516 1
printfi_filtered (int spaces, const char *format,...)
d2571 2
a2572 2
      spaces = (char *) xmalloc (n + 1);
      for (t = spaces + n; t != spaces;)
d2642 1
a2642 1

d2675 1
a2676 1

d2678 5
a2682 5
   ** subset_compare()
   **    Answer whether string_to_compare is a full or partial match to
   **    template_string.  The partial match must be in sequence starting
   **    at index 0.
 */
d2685 2
a2686 2
     char *string_to_compare;
     char *template_string;
d2689 5
a2693 5
  if (template_string != (char *) NULL && string_to_compare != (char *) NULL &&
      strlen (string_to_compare) <= strlen (template_string))
    match = (strncmp (template_string,
		      string_to_compare,
		      strlen (string_to_compare)) == 0);
d2703 2
a2704 2
     char *arg;
     int from_tty;
d2712 2
a2713 2
     char *arg;
     int from_tty;
d2717 1
a2718 1

d2724 4
a2727 4
  c = add_set_cmd ("width", class_support, var_uinteger,
		   (char *) &chars_per_line,
		   "Set number of characters gdb thinks are in a line.",
		   &setlist);
d2733 1
a2733 1
		  var_uinteger, (char *) &lines_per_page,
d2736 1
a2736 1

d2743 1
a2743 1
  set_width_command ((char *) NULL, 0, c);
d2746 3
a2748 3
    (add_set_cmd ("demangle", class_support, var_boolean,
		  (char *) &demangle,
	     "Set demangling of encoded C++ names when displaying symbols.",
d2754 1
a2754 1
		  var_boolean, (char *) &pagination_enabled,
d2759 4
a2762 4
      add_com ("am", class_support, pagination_on_command,
	       "Enable pagination");
      add_com ("sm", class_support, pagination_off_command,
	       "Disable pagination");
d2766 3
a2768 3
    (add_set_cmd ("sevenbit-strings", class_support, var_boolean,
		  (char *) &sevenbit_strings,
		  "Set printing of 8-bit characters in strings as \\nnn.",
d2773 3
a2775 3
    (add_set_cmd ("asm-demangle", class_support, var_boolean,
		  (char *) &asm_demangle,
		  "Set demangling of C++ names in disassembly listings.",
d2783 1
a2783 1
SIGWINCH_HANDLER_BODY
d2841 1
a2841 1
	  << cur_bitshift;
d2852 1
a2852 1

d2863 1
a2863 1
  unsigned char *ufrom = (unsigned char *) from;
d2882 1
a2882 1
  if (fmt->byteorder == floatformat_littlebyte_bigword)
d2888 1
a2888 1
      longswaps = fmt->totalsize / FLOATFORMAT_CHAR_BIT;
d2890 1
a2890 1

d2893 1
a2893 1
	  newfrom = (unsigned char *) xmalloc (fmt->totalsize);
d2948 1
a2948 1
			mant_off, mant_bits);
d2950 1
a2950 1
      dto += ldexp ((double) mant, exponent - mant_bits);
d3062 1
a3062 1
  return value / tmp;
d3082 1
a3082 1
  unsigned char *uto = (unsigned char *) to;
d3134 1
a3134 1
      mant_long = (unsigned long) mant;
d3138 3
a3140 3
         If we are discarding a zero, we should be (but are not) creating
         a denormalized number which means adjusting the exponent
         (I think).  */
d3160 1
a3160 1
  if (fmt->byteorder == floatformat_littlebyte_bigword)
d3179 2
a3180 2
static char *
get_cell ()
d3183 2
a3184 3
  static int cell = 0;
  if (++cell >= NUMCELLS)
    cell = 0;
d3205 19
a3223 19
char *
paddr (addr)
     t_addr addr;
{
  char *paddr_str = get_cell ();
  switch (sizeof (t_addr))
    {
    case 8:
      sprintf (paddr_str, "%08lx%08lx",
	       (unsigned long) (addr >> thirty_two), (unsigned long) (addr & 0xffffffff));
      break;
    case 4:
      sprintf (paddr_str, "%08lx", (unsigned long) addr);
      break;
    case 2:
      sprintf (paddr_str, "%04x", (unsigned short) (addr & 0xffff));
      break;
    default:
      sprintf (paddr_str, "%lx", (unsigned long) addr);
d3228 19
a3246 19
char *
preg (reg)
     t_reg reg;
{
  char *preg_str = get_cell ();
  switch (sizeof (t_reg))
    {
    case 8:
      sprintf (preg_str, "%08lx%08lx",
	       (unsigned long) (reg >> thirty_two), (unsigned long) (reg & 0xffffffff));
      break;
    case 4:
      sprintf (preg_str, "%08lx", (unsigned long) reg);
      break;
    case 2:
      sprintf (preg_str, "%04x", (unsigned short) (reg & 0xffff));
      break;
    default:
      sprintf (preg_str, "%lx", (unsigned long) reg);
d3251 22
a3272 15
char *
paddr_nz (addr)
     t_addr addr;
{
  char *paddr_str = get_cell ();
  switch (sizeof (t_addr))
    {
    case 8:
      {
	unsigned long high = (unsigned long) (addr >> thirty_two);
	if (high == 0)
	  sprintf (paddr_str, "%lx", (unsigned long) (addr & 0xffffffff));
	else
	  sprintf (paddr_str, "%lx%08lx",
		   high, (unsigned long) (addr & 0xffffffff));
d3274 2
a3275 9
      }
    case 4:
      sprintf (paddr_str, "%lx", (unsigned long) addr);
      break;
    case 2:
      sprintf (paddr_str, "%x", (unsigned short) (addr & 0xffff));
      break;
    default:
      sprintf (paddr_str, "%lx", (unsigned long) addr);
d3280 22
a3301 15
char *
preg_nz (reg)
     t_reg reg;
{
  char *preg_str = get_cell ();
  switch (sizeof (t_reg))
    {
    case 8:
      {
	unsigned long high = (unsigned long) (reg >> thirty_two);
	if (high == 0)
	  sprintf (preg_str, "%lx", (unsigned long) (reg & 0xffffffff));
	else
	  sprintf (preg_str, "%lx%08lx",
		   high, (unsigned long) (reg & 0xffffffff));
d3303 2
a3304 9
      }
    case 4:
      sprintf (preg_str, "%lx", (unsigned long) reg);
      break;
    case 2:
      sprintf (preg_str, "%x", (unsigned short) (reg & 0xffff));
      break;
    default:
      sprintf (preg_str, "%lx", (unsigned long) reg);
d3325 2
@


1.1.1.10
log
@import gdb-1999-07-12 snapshot
@
text
@d1276 3
a1278 7
static void printchar PARAMS ((int c, void (*do_fputs) (const char *, GDB_FILE*), void (*do_fprintf) (GDB_FILE*, const char *, ...), GDB_FILE *stream, int quoter));

static void
printchar (c, do_fputs, do_fprintf, stream, quoter)
     int c;
     void (*do_fputs) PARAMS ((const char *, GDB_FILE*));
     void (*do_fprintf) PARAMS ((GDB_FILE*, const char *, ...));
d1292 1
a1292 1
	  do_fputs ("\\n", stream);
d1295 1
a1295 1
	  do_fputs ("\\b", stream);
d1298 1
a1298 1
	  do_fputs ("\\t", stream);
d1301 1
a1301 1
	  do_fputs ("\\f", stream);
d1304 1
a1304 1
	  do_fputs ("\\r", stream);
d1307 1
a1307 1
	  do_fputs ("\\e", stream);
d1310 1
a1310 1
	  do_fputs ("\\a", stream);
d1313 1
a1313 1
	  do_fprintf (stream, "\\%.3o", (unsigned int) c);
d1320 2
a1321 2
	do_fputs ("\\", stream);
      do_fprintf (stream, "%c", c);
a1323 38

/* Print the character C on STREAM as part of the contents of a
   literal string whose delimiter is QUOTER.  Note that these routines
   should only be call for printing things which are independent of
   the language of the program being debugged. */

void
fputstr_filtered (str, quoter, stream)
     const char *str;
     int quoter;
     GDB_FILE *stream;
{
  while (*str)
    printchar (*str++, fputs_filtered, fprintf_filtered, stream, quoter);
}

void
fputstr_unfiltered (str, quoter, stream)
     const char *str;
     int quoter;
     GDB_FILE *stream;
{
  while (*str)
    printchar (*str++, fputs_unfiltered, fprintf_unfiltered, stream, quoter);
}

void
fputstrn_unfiltered (str, n, quoter, stream)
     const char *str;
     int n;
     int quoter;
     GDB_FILE *stream;
{
  int i;
  for (i = 0; i < n; i++)
    printchar (str[i], fputs_unfiltered, fprintf_unfiltered, stream, quoter);
}

@


1.1.1.11
log
@import gdb-1999-08-09 snapshot
@
text
@d69 3
d434 1
d436 1
d438 4
d444 1
d446 6
d490 1
d492 1
d494 4
d500 1
d502 3
d510 1
d512 8
d527 6
a532 2
/* Print a message reporting an internal error. Ask the user if they
   want to continue, dump core, or just exit. */
d534 1
d536 6
a541 1
internal_error (char *string, ...)
a542 2
  static char msg[] = "Internal GDB error: recursive internal error.\n";
  static int dejavu = 0;
d544 13
d558 2
a559 15
  /* don't allow infinite error recursion. */
  switch (dejavu)
    {
    case 0:
      dejavu = 1;
      break;
    case 1:
      dejavu = 2;
      fputs_unfiltered (msg, gdb_stderr);
      abort ();
    default:
      dejavu = 3;
      write (STDERR_FILENO, msg, sizeof (msg));
      exit (1);
    }
d561 11
a571 2
  /* Try to get the message out */
  fputs_unfiltered ("\nGDB-INTERNAL-ERROR: ", gdb_stderr);
d573 9
d583 1
a584 1
  fputs_unfiltered ("\n", gdb_stderr);
d586 4
a589 7
  if (query ("\
An internal GDB error has been detected.\n\
Do you want to quit GDB (dumping core)? "))
    abort ();

  dejavu = 0;
  return_to_top_level (RETURN_ERROR);
d850 1
a850 2
  fprintf_unfiltered (gdb_stderr, "Memory corruption\n");
  abort ();
d901 1
a901 1
      internal_error ("virtual memory exhausted: can't allocate %ld bytes.", size);
d905 1
a905 1
      internal_error ("virtual memory exhausted.");
d1078 1
d1080 4
d1090 1
d1092 5
d2446 1
d2448 1
d2450 4
d2456 1
d2458 8
d2470 1
d2472 1
d2474 4
d2480 1
d2482 8
d2497 1
d2499 1
d2501 4
d2507 1
d2509 10
d2526 1
d2528 1
d2530 4
d2536 1
d2538 6
d2549 1
d2551 1
d2553 4
d2559 1
d2561 6
d2574 1
d2576 1
d2578 4
d2584 1
d2586 8
@


1.1.1.12
log
@import gdb-1999-08-16 snapshot
@
text
@a500 2
  int continue_p;
  int dump_core_p;
d519 1
a519 1
  fputs_unfiltered ("gdb-internal-error: ", gdb_stderr);
d525 4
a528 26
  /* Default (no case) is to quit GDB.  When in batch mode this
     lessens the likelhood of GDB going into an infinate loop. */
  continue_p = query ("\
An internal GDB error was detected.  This may make make further\n\
debugging unreliable.  Continue this debugging session? ");

  /* Default (no case) is to not dump core.  Lessen the chance of GDB
     leaving random core files around. */
  dump_core_p = query ("\
Create a core file containing the current state of GDB? ");

  if (continue_p)
    {
      if (dump_core_p)
	{
	  if (fork () == 0)
	    abort ();
	}
    }
  else
    {
      if (dump_core_p)
	abort ();
      else
	exit (1);
    }
a652 5
#ifdef __MSDOS__
  /* No steenking SIGINT will ever be coming our way when the
     program is resumed.  Don't lie.  */
  fprintf_unfiltered (gdb_stderr, "Quit\n");
#else
a660 1
#endif
d665 26
a690 1
#if defined(_MSC_VER)		/* should test for wingdb instead? */
@


1.1.1.13
log
@import gdb-1999-08-30 snapshot
@
text
@d24 3
a26 1
#include "event-loop.h"
d77 6
a1672 17
/* new */
enum streamtype
{
  afile,
  astring
};

/* new */
struct tui_stream
{
  int *ts_magic;
  enum streamtype ts_streamtype;
  FILE *ts_filestream;
  char *ts_strbuf;
  int ts_buflen;
};

a1761 80
/* All TUI I/O sent to the *_filtered and *_unfiltered functions
   eventually ends up here.  The fputs_unfiltered_hook is primarily
   used by GUIs to collect all output and send it to the GUI, instead
   of the controlling terminal.  Only output to gdb_stdout and
   gdb_stderr are sent to the hook.  Everything else is sent on to
   fputs to allow file I/O to be handled appropriately.  */

/* FIXME: Should be broken up and moved to a TUI specific file. */

void
tui_file_fputs (linebuffer, file)
     const char *linebuffer;
     GDB_FILE *file;
{
  struct tui_stream *stream = gdb_file_data (file);
#if defined(TUI)
  extern int tui_owns_terminal;
#endif
  /* If anything (GUI, TUI) wants to capture GDB output, this is
   * the place... the way to do it is to set up 
   * fputs_unfiltered_hook.
   * Our TUI ("gdb -tui") used to hook output, but in the
   * new (XDB style) scheme, we do not do that anymore... - RT
   */
  if (fputs_unfiltered_hook
      && (file == gdb_stdout
	  || file == gdb_stderr))
    fputs_unfiltered_hook (linebuffer, file);
  else
    {
#if defined(TUI)
      if (tui_version && tui_owns_terminal)
	{
	  /* If we get here somehow while updating the TUI (from
	   * within a tuiDo(), then we need to temporarily 
	   * set up the terminal for GDB output. This probably just
	   * happens on error output.
	   */

	  if (stream->ts_streamtype == astring)
	    {
	      gdb_file_adjust_strbuf (strlen (linebuffer), stream);
	      strcat (stream->ts_strbuf, linebuffer);
	    }
	  else
	    {
	      tuiTermUnsetup (0, (tui_version) ? cmdWin->detail.commandInfo.curch : 0);
	      fputs (linebuffer, stream->ts_filestream);
	      tuiTermSetup (0);
	      if (linebuffer[strlen (linebuffer) - 1] == '\n')
		tuiClearCommandCharCount ();
	      else
		tuiIncrCommandCharCountBy (strlen (linebuffer));
	    }
	}
      else
	{
	  /* The normal case - just do a fputs() */
	  if (stream->ts_streamtype == astring)
	    {
	      gdb_file_adjust_strbuf (strlen (linebuffer), stream);
	      strcat (stream->ts_strbuf, linebuffer);
	    }
	  else
	    fputs (linebuffer, stream->ts_filestream);
	}


#else
      if (stream->ts_streamtype == astring)
	{
	  gdb_file_adjust_strbuf (strlen (linebuffer), file);
	  strcat (stream->ts_strbuf, linebuffer);
	}
      else
	fputs (linebuffer, stream->ts_filestream);
#endif
    }
}

d3114 1
a3114 2
/* eliminate warning from compiler on 32-bit systems */
static int thirty_two = 32;
d3117 2
a3118 1
paddr (CORE_ADDR addr)
d3121 1
a3121 1
  switch (TARGET_PTR_BIT / 8)
d3140 25
a3164 1
paddr_nz (CORE_ADDR addr)
d3167 1
a3167 1
  switch (TARGET_PTR_BIT / 8)
a3188 75
}

static void
decimal2str (char *paddr_str, char *sign, ULONGEST addr)
{
  /* steal code from valprint.c:print_decimal().  Should this worry
     about the real size of addr as the above does? */
  unsigned long temp[3];
  int i = 0;
  do
    {
      temp[i] = addr % (1000 * 1000 * 1000);
      addr /= (1000 * 1000 * 1000);
      i++;
    }
  while (addr != 0 && i < (sizeof (temp) / sizeof (temp[0])));
  switch (i)
    {
    case 1:
      sprintf (paddr_str, "%s%lu",
	       sign, temp[0]);
      break;
    case 2:
      sprintf (paddr_str, "%s%lu%09lu",
	       sign, temp[1], temp[0]);
      break;
    case 3:
      sprintf (paddr_str, "%s%lu%09lu%09lu",
	       sign, temp[2], temp[1], temp[0]);
      break;
    default:
      abort ();
    }
}

char *
paddr_u (CORE_ADDR addr)
{
  char *paddr_str = get_cell ();
  decimal2str (paddr_str, "", addr);
  return paddr_str;
}

char *
paddr_d (LONGEST addr)
{
  char *paddr_str = get_cell ();
  if (addr < 0)
    decimal2str (paddr_str, "-", -addr);
  else
    decimal2str (paddr_str, "", addr);
  return paddr_str;
}

char *
preg (reg)
     t_reg reg;
{
  char *preg_str = get_cell ();
  switch (sizeof (t_reg))
    {
    case 8:
      sprintf (preg_str, "%08lx%08lx",
	       (unsigned long) (reg >> thirty_two), (unsigned long) (reg & 0xffffffff));
      break;
    case 4:
      sprintf (preg_str, "%08lx", (unsigned long) reg);
      break;
    case 2:
      sprintf (preg_str, "%04x", (unsigned short) (reg & 0xffff));
      break;
    default:
      sprintf (preg_str, "%lx", (unsigned long) reg);
    }
  return preg_str;
@


1.1.1.14
log
@import gdb-1999-09-08 snapshot
@
text
@d999 3
a1001 1
gdb_print_host_address (void *addr, struct gdb_file *stream)
a3201 7

int
strlen_paddr (void)
{
  return (TARGET_PTR_BIT / 8 * 2);
}

@


1.1.1.15
log
@import gdb-1999-09-21
@
text
@a24 1
#include "event-top.h"
a395 16

/* Walk down the cmd_continuation list, and get rid of all the
   continuations. */
void
discard_all_continuations ()
{
  struct continuation *continuation_ptr;

  while (cmd_continuation)
    {
      continuation_ptr = cmd_continuation;
      cmd_continuation = continuation_ptr->next;
      free (continuation_ptr);
    }
}

@


1.1.1.16
log
@import gdb-1999-09-28 snapshot
@
text
@a86 2
/* cleaned up on each error from within an execution command */
static struct cleanup *exec_error_cleanup_chain; 
a183 8
struct cleanup *
make_exec_error_cleanup (function, arg)
     void (*function) PARAMS ((PTR));
     PTR arg;
{
  return make_my_cleanup (&exec_error_cleanup_chain, function, arg);
}

a247 7
do_exec_error_cleanups (old_chain)
     register struct cleanup *old_chain;
{
  do_my_cleanups (&exec_error_cleanup_chain, old_chain);
}

void
a278 7
discard_exec_error_cleanups (old_chain)
     register struct cleanup *old_chain;
{
  discard_my_cleanups (&exec_error_cleanup_chain, old_chain);
}

void
d1490 1
a1490 1
	  if (!event_loop_p)
@


1.1.1.17
log
@import gdb-1999-10-04 snapshot
@
text
@d24 1
a55 4
/* Holds the last error message issued by gdb */

static GDB_FILE *gdb_lasterr;

a518 3
      /* Save it as the last error as well (no newline) */
      gdb_file_rewind (gdb_lasterr);
      vfprintf_filtered (gdb_lasterr, string, args);
a523 23
/* Allows the error message to be passed on a stream buffer */

NORETURN void
error_stream (GDB_FILE *stream)
{
  error (gdb_file_get_strbuf (stream));
}

/* Get the last error message issued by gdb */

char *
error_last_message (void)
{
  return (gdb_file_get_strbuf (gdb_lasterr));
}

/* This is to be called by main() at the very beginning */

void
error_init (void)
{
  gdb_lasterr = tui_sfileopen (132);
}
a1772 21
struct gdb_file *
tui_sfileopen (n)
     int n;
{
  struct gdb_file *file = tui_file_new ();
  struct tui_stream *tmpstream = gdb_file_data (file);
  tmpstream->ts_streamtype = astring;
  tmpstream->ts_filestream = NULL;
  if (n > 0)
    {
      tmpstream->ts_strbuf = xmalloc ((n + 1) * sizeof (char));
      tmpstream->ts_strbuf[0] = '\0';
    }
  else
    /* Do not allocate the buffer now.  The first time something is printed
       one will be allocated by gdb_file_adjust_strbuf()  */
    tmpstream->ts_strbuf = NULL;
  tmpstream->ts_buflen = n;
  return file;
}

a1888 2

/* DEPRECATED: Use tui_sfileopen() instead */
@


1.1.1.18
log
@import gdb-1999-10-18 snapshot
@
text
@a49 3
#undef XMALLOC
#define XMALLOC(TYPE) ((TYPE*) xmalloc (sizeof (TYPE)))

a1729 102
/* A pure memory based ``struct gdb_file'' that can be used an output
   collector. It's input is available through gdb_file_put(). */

struct mem_file
  {
    int *magic;
    char *buffer;
    int sizeof_buffer;
    int strlen_buffer;
  };

extern gdb_file_fputs_ftype mem_file_fputs;
static gdb_file_rewind_ftype mem_file_rewind;
static gdb_file_put_ftype mem_file_put;
static gdb_file_delete_ftype mem_file_delete;
static struct gdb_file *mem_file_new PARAMS ((void));
static int mem_file_magic;

static struct gdb_file *
mem_file_new (void)
{
  struct mem_file *stream = XMALLOC (struct mem_file);
  struct gdb_file *file = gdb_file_new ();
  set_gdb_file_data (file, stream, mem_file_delete);
  set_gdb_file_fputs (file, mem_file_fputs);
  set_gdb_file_rewind (file, mem_file_rewind);
  set_gdb_file_put (file, mem_file_put);
  stream->magic = &mem_file_magic;
  stream->buffer = NULL;
  stream->sizeof_buffer = 0;
  return file;
}

static void
mem_file_delete (struct gdb_file *file)
{
  struct mem_file *stream = gdb_file_data (file);
  if (stream->magic != &mem_file_magic)
    internal_error ("mem_file_delete: bad magic number");
  if (stream->buffer != NULL)
    free (stream->buffer);
  free (stream);
}

struct gdb_file *
mem_fileopen (void)
{
  return mem_file_new ();
}

static void
mem_file_rewind (struct gdb_file *file)
{
  struct mem_file *stream = gdb_file_data (file);
  if (stream->magic != &mem_file_magic)
    internal_error ("mem_file_rewind: bad magic number");
  if (stream->buffer != NULL)
    {
      stream->buffer[0] = '\0';
      stream->strlen_buffer = 0;
    }
}

static void
mem_file_put (struct gdb_file *file, struct gdb_file *dest)
{
  struct mem_file *stream = gdb_file_data (file);
  if (stream->magic != &mem_file_magic)
    internal_error ("mem_file_put: bad magic number");
  if (stream->buffer != NULL)
    fputs_unfiltered (stream->buffer, dest);
}

void
mem_file_fputs (const char *linebuffer, struct gdb_file *file)
{
  struct mem_file *stream = gdb_file_data (file);
  if (stream->magic != &mem_file_magic)
    internal_error ("mem_file_fputs: bad magic number");
  if (stream->buffer == NULL)
    {
      stream->strlen_buffer = strlen (linebuffer);
      stream->sizeof_buffer = stream->strlen_buffer + 1;
      stream->buffer = xmalloc (stream->sizeof_buffer);
      strcpy (stream->buffer, linebuffer);
    }
  else
    {
      int len = strlen (linebuffer);
      int new_strlen = stream->strlen_buffer + len;
      int new_sizeof = new_strlen + 1;
      if (new_sizeof >= stream->sizeof_buffer)
	{
	  stream->sizeof_buffer = new_sizeof;
	  stream->buffer = xrealloc (stream->buffer, stream->sizeof_buffer);
	}
      strcpy (stream->buffer + stream->strlen_buffer, linebuffer);
      stream->strlen_buffer = new_strlen;
    }
}


d1878 6
a1883 4
  /* NOTE: cagney/1999-10-13: The use of fputs_unfiltered_hook is
     seriously discouraged.  Those wanting to hook output should
     instead implement their own gdb_file object and install that. See
     also tui_file_flush(). */
d2031 4
a2034 10
    internal_error ("tui_file_flush: bad magic number");

  /* NOTE: cagney/1999-10-12: If we've been linked with code that uses
     fputs_unfiltered_hook then we assume that it doesn't need to know
     about flushes.  Code that does need to know about flushes can
     implement a proper gdb_file object. */
  if (fputs_unfiltered_hook)
    return;

  switch (stream->ts_streamtype)
d2036 2
a2037 5
    case astring:
      break;
    case afile:
      fflush (stream->ts_filestream);
      break;
d2039 2
@


1.1.1.19
log
@import gdb-1999-10-25 snapshot
@
text
@d1370 1
a1370 1
/* Number of chars per line or UNIT_MAX if line folding is disabled.  */
@


1.1.1.20
log
@import gdb-1999-11-08 snapshot
@
text
@a213 12
static void
do_gdb_file_delete (void *arg)
{
  gdb_file_delete (arg);
}

struct cleanup *
make_cleanup_gdb_file_delete (struct gdb_file *arg)
{
  return make_my_cleanup (&cleanup_chain, do_gdb_file_delete, arg);
}

d538 1
a538 1
  error (tui_file_get_strbuf (stream));
d546 1
a546 1
  return (tui_file_get_strbuf (gdb_lasterr));
a1645 1
static gdb_file_write_ftype stdio_file_write;
a1672 1
  set_gdb_file_write (gdb_file, stdio_file_write);
d1684 1
a1684 1
    internal_error ("stdio_file_delete: bad magic number");
d1698 1
a1698 1
    internal_error ("stdio_file_flush: bad magic number");
a1702 9
stdio_file_write (struct gdb_file *file, const char *buf, long length_buf)
{
  struct stdio_file *stdio = gdb_file_data (file);
  if (stdio->magic != &stdio_file_magic)
    internal_error ("stdio_file_write: bad magic number");
  fwrite (buf, length_buf, 1, stdio->file);
}

static void
d1709 1
a1709 1
    internal_error ("stdio_file_fputs: bad magic number");
d1719 1
a1719 1
    internal_error ("stdio_file_isatty: bad magic number");
d1885 1
a1885 1
    internal_error ("tui_file_delete: bad magic number");
d1922 1
a1922 1
       one will be allocated by tui_file_adjust_strbuf()  */
d1934 1
a1934 1
    internal_error ("tui_file_isatty: bad magic number");
d1947 1
a1947 1
    internal_error ("tui_file_rewind: bad magic number");
d1958 1
a1958 1
    internal_error ("tui_file_put: bad magic number");
d2004 1
a2004 1
	      tui_file_adjust_strbuf (strlen (linebuffer), stream);
d2023 1
a2023 1
	      tui_file_adjust_strbuf (strlen (linebuffer), stream);
d2034 1
a2034 1
	  tui_file_adjust_strbuf (strlen (linebuffer), file);
d2043 33
d2077 2
a2078 1
tui_file_get_strbuf (struct gdb_file *file)
d2082 1
a2082 1
    internal_error ("tui_file_get_strbuf: bad magic number");
d2089 3
a2091 1
tui_file_adjust_strbuf (int n, struct gdb_file *file)
d2096 1
a2096 1
    internal_error ("tui_file_adjust_strbuf: bad magic number");
d2153 9
a2164 1
static gdb_file_write_ftype null_file_write;
a2173 1
    gdb_file_write_ftype *to_write;
a2187 1
  set_gdb_file_write (file, null_file_write);
a2232 28
null_file_write (struct gdb_file *file,
		 const char *buf,
		 long sizeof_buf)
{
  if (file->to_fputs == null_file_fputs)
    /* Both the write and fputs methods are null. Discard the
       request. */
    return;
  else
    {
      /* The fputs method isn't null, slowly pass the write request
         onto that.  FYI, this isn't as bad as it may look - the
         current (as of 1999-11-07) printf_* function calls fputc and
         fputc does exactly the below.  By having a write function it
         is possible to clean up that code.  */
      int i;
      char b[2];
      b[1] = '\0';
      for (i = 0; i < sizeof_buf; i++)
	{
	  b[0] = buf[i];
	  file->to_fputs (b, file);
	}
      return;
    }
}

static void
d2237 1
a2237 9
  if (file->to_write == null_file_write)
    /* Both the write and fputs methods are null. Discard the
       request. */
    return;
  else
    {
      /* The write method was implemented, use that. */
      file->to_write (file, buf, strlen (buf));
    }
a2283 8
gdb_file_write (struct gdb_file *file,
		const char *buf,
		long length_buf)
{
  file->to_write (file, buf, length_buf);
}

void
a2323 7
set_gdb_file_write (struct gdb_file *file,
		    gdb_file_write_ftype *write)
{
  file->to_write = write;
}

void
d2470 5
a2474 2
  char buf = c;
  gdb_file_write (gdb_stdout, &buf, 1);
d2483 5
a2487 2
  char buf = c;
  gdb_file_write (stream, &buf, 1);
d3125 1
a3125 2
/* Don't bias NaNs. Use minimum exponent for denorms. For simplicity,
   we don't check for zero as the exponent doesn't matter. */
a3127 2
  else if (exponent == 0)
    exponent = 1 - fmt->exp_bias;
@


1.1.1.21
log
@import gdb-1999-11-16 snapshot
@
text
@a525 17
verror (const char *string, va_list args)
{
  /* FIXME: cagney/1999-11-10: All error calls should come here.
     Unfortunatly some code uses the sequence: error_begin(); print
     error message; return_to_top_level.  That code should be
     flushed. */
  error_begin ();
  vfprintf_filtered (gdb_stderr, string, args);
  fprintf_filtered (gdb_stderr, "\n");
  /* Save it as the last error as well (no newline) */
  gdb_file_rewind (gdb_lasterr);
  vfprintf_filtered (gdb_lasterr, string, args);
  va_end (args);
  return_to_top_level (RETURN_ERROR);
}

NORETURN void
d530 13
a542 2
  verror (string, args);
  va_end (args);
d545 2
d550 1
a550 4
  long size;
  char *msg = gdb_file_xstrdup (stream, &size);
  make_cleanup (free, msg);
  error ("%s", msg);
d558 1
a558 2
  long len;
  return gdb_file_xstrdup (gdb_lasterr, &len);
d560 1
a560 1
  
d566 1
a566 1
  gdb_lasterr = mem_fileopen ();
d573 1
a573 1
internal_verror (const char *fmt, va_list ap)
d577 1
d599 3
a601 1
  vfprintf_unfiltered (gdb_stderr, fmt, ap);
a634 9
NORETURN void
internal_error (char *string, ...)
{
  va_list ap;
  va_start (ap, string);
  internal_verror (string, ap);
  va_end (ap);
}

d790 1
a790 1
#else /* !defined(_MSC_VER) */
d798 1
a798 1
#endif /* !defined(_MSC_VER) */
d1757 1
a1757 2
   buffer. The buffers accumulated contents are available via
   gdb_file_put(). */
d1764 1
a1764 1
    int length_buffer;
d1767 1
a1769 1
static gdb_file_write_ftype mem_file_write;
d1780 1
a1782 1
  set_gdb_file_write (file, mem_file_write);
a1785 1
  stream->length_buffer = 0;
d1812 5
a1816 1
  stream->length_buffer = 0;
d1820 1
a1820 3
mem_file_put (struct gdb_file *file,
	      gdb_file_put_method_ftype *write,
	      void *dest)
d1825 2
a1826 2
  if (stream->length_buffer > 0)
    write (dest, stream->buffer, stream->length_buffer);
d1830 1
a1830 3
mem_file_write (struct gdb_file *file,
		const char *buffer,
		long length_buffer)
d1834 1
a1834 1
    internal_error ("mem_file_write: bad magic number");
d1837 2
a1838 2
      stream->length_buffer = length_buffer;
      stream->sizeof_buffer = length_buffer;
d1840 1
a1840 1
      memcpy (stream->buffer, buffer, length_buffer);
d1844 4
a1847 2
      int new_length = stream->length_buffer + length_buffer;
      if (new_length >= stream->sizeof_buffer)
d1849 1
a1849 1
	  stream->sizeof_buffer = new_length;
d1852 2
a1853 2
      memcpy (stream->buffer + stream->length_buffer, buffer, length_buffer);
      stream->length_buffer = new_length;
d1857 1
d1975 3
a1977 3
tui_file_put (struct gdb_file *file,
	      gdb_file_put_method_ftype *write,
	      void *dest)
d1983 3
a1985 1
    write (dest, stream->ts_strbuf, strlen (stream->ts_strbuf));
a2151 1
    int *magic;
a2160 1
int gdb_file_magic;
a2165 1
  file->magic = &gdb_file_magic;
d2199 3
a2201 3
null_file_put (struct gdb_file *file,
	       gdb_file_put_method_ftype *write,
	       void *dest)
a2267 2
  if (file->magic != &gdb_file_magic)
    internal_error ("gdb_file_data: bad magic number");
d2293 3
a2295 3
gdb_file_put (struct gdb_file *file,
	      gdb_file_put_method_ftype *write,
	      void *dest)
d2297 1
a2297 1
  file->to_put (file, write, dest);
a2371 37

/* gdb_file utility function for converting a ``struct gdb_file'' into
   a memory buffer''. */

struct accumulated_gdb_file
{
  char *buffer;
  long length;
};

static void
do_gdb_file_xstrdup (void *context, const char *buffer, long length)
{
  struct accumulated_gdb_file *acc = context;
  if (acc->buffer == NULL)
    acc->buffer = xmalloc (length + 1);
  else
    acc->buffer = xrealloc (acc->buffer, acc->length + length + 1);
  memcpy (acc->buffer + acc->length, buffer, length);
  acc->length += length;
  acc->buffer[acc->length] = '\0';
}

char *
gdb_file_xstrdup (struct gdb_file *file,
		  long *length)
{
  struct accumulated_gdb_file acc;
  acc.buffer = NULL;
  acc.length = 0;
  gdb_file_put (file, do_gdb_file_xstrdup, &acc);
  if (acc.buffer == NULL)
    acc.buffer = xstrdup ("");
  *length = acc.length;
  return acc.buffer;
}

@


1.1.1.22
log
@import gdb-1999-12-06 snapshot
@
text
@a100 1
struct continuation *intermediate_continuation;
d409 1
a409 1
   cmd_continuation. The new continuation will be added at the front.*/
d425 1
a425 7
   continuations. There is a problem though. In some cases new
   continuations may be added while we are in the middle of this
   loop. If this happens they will be added in the front, and done
   before we have a chance of exhausting those that were already
   there. We need to then save the beginning of the list in a pointer
   and do the continuations from there on, instead of using the
   global beginning of list as our iteration pointer.*/
a429 25
  struct continuation *saved_continuation;

  /* Copy the list header into another pointer, and set the global
     list header to null, so that the global list can change as a side
     effect of invoking the continuations and the processing of
     the preexisting continuations will not be affected. */
  continuation_ptr = cmd_continuation;
  cmd_continuation = NULL;

  /* Work now on the list we have set aside. */
  while (continuation_ptr)
     {
       (continuation_ptr->continuation_hook) (continuation_ptr->arg_list);
       saved_continuation = continuation_ptr;
       continuation_ptr = continuation_ptr->next;
       free (saved_continuation);
     }
}

/* Walk down the cmd_continuation list, and get rid of all the
   continuations. */
void
discard_all_continuations ()
{
  struct continuation *continuation_ptr;
d433 1
a439 47
/* Add a continuation to the continuation list, the gloabl list
   intermediate_continuation. The new continuation will be added at the front.*/
void
add_intermediate_continuation (continuation_hook, arg_list)
     void (*continuation_hook) PARAMS ((struct continuation_arg *));
     struct continuation_arg *arg_list;
{
  struct continuation *continuation_ptr;

  continuation_ptr = (struct continuation *) xmalloc (sizeof (struct continuation));
  continuation_ptr->continuation_hook = continuation_hook;
  continuation_ptr->arg_list = arg_list;
  continuation_ptr->next = intermediate_continuation;
  intermediate_continuation = continuation_ptr;
}

/* Walk down the cmd_continuation list, and execute all the
   continuations. There is a problem though. In some cases new
   continuations may be added while we are in the middle of this
   loop. If this happens they will be added in the front, and done
   before we have a chance of exhausting those that were already
   there. We need to then save the beginning of the list in a pointer
   and do the continuations from there on, instead of using the
   global beginning of list as our iteration pointer.*/
void
do_all_intermediate_continuations ()
{
  struct continuation *continuation_ptr;
  struct continuation *saved_continuation;

  /* Copy the list header into another pointer, and set the global
     list header to null, so that the global list can change as a side
     effect of invoking the continuations and the processing of
     the preexisting continuations will not be affected. */
  continuation_ptr = intermediate_continuation;
  intermediate_continuation = NULL;

  /* Work now on the list we have set aside. */
  while (continuation_ptr)
     {
       (continuation_ptr->continuation_hook) (continuation_ptr->arg_list);
       saved_continuation = continuation_ptr;
       continuation_ptr = continuation_ptr->next;
       free (saved_continuation);
     }
}

d443 1
a443 1
discard_all_intermediate_continuations ()
d447 1
a447 1
  while (intermediate_continuation)
d449 2
a450 2
      continuation_ptr = intermediate_continuation;
      intermediate_continuation = continuation_ptr->next;
a527 2
  char *err_string;
  struct cleanup *err_string_cleanup;
d533 3
a535 7
  /* NOTE: It's tempting to just do the following...
	vfprintf_filtered (gdb_stderr, string, args);
     and then follow with a similar looking statement to cause the message
     to also go to gdb_lasterr.  But if we do this, we'll be traversing the
     va_list twice which works on some platforms and fails miserably on
     others. */
  /* Save it as the last error */
d538 1
a538 6
  /* Retrieve the last error and print it to gdb_stderr */
  err_string = error_last_message ();
  err_string_cleanup = make_cleanup (free, err_string);
  fputs_filtered (err_string, gdb_stderr);
  fprintf_filtered (gdb_stderr, "\n");
  do_cleanups (err_string_cleanup);
@


1.1.1.23
log
@import gdb-1999-12-21 snapshot
@
text
@a933 6
void *
mcalloc (void *md, size_t number, size_t size)
{
  return calloc (number, size);
}

a1092 11
}

/* Like calloc but get error if no storage available */

PTR
xcalloc (size_t number, size_t size)
{
  void *mem = mcalloc (NULL, number, size);
  if (mem == NULL)
    nomem (number * size);
  return mem;
@


1.1.1.24
log
@import gdb-2000-01-24 snapshot
@
text
@d3206 1
d3208 4
a3211 24
    {
      /* We start counting from the other end (i.e, from the high bytes
	 rather than the low bytes).  As such, we need to be concerned
	 with what happens if bit 0 doesn't start on a byte boundary. 
	 I.e, we need to properly handle the case where total_len is
	 not evenly divisible by 8.  So we compute ``excess'' which
	 represents the number of bits from the end of our starting
	 byte needed to get to bit 0. */
      int excess = FLOATFORMAT_CHAR_BIT - (total_len % FLOATFORMAT_CHAR_BIT);
      cur_byte = (total_len / FLOATFORMAT_CHAR_BIT) 
                 - ((start + len + excess) / FLOATFORMAT_CHAR_BIT);
      cur_bitshift = ((start + len + excess) % FLOATFORMAT_CHAR_BIT) 
                     - FLOATFORMAT_CHAR_BIT;
    }
  else
    {
      cur_byte = (start + len) / FLOATFORMAT_CHAR_BIT;
      cur_bitshift =
	((start + len) % FLOATFORMAT_CHAR_BIT) - FLOATFORMAT_CHAR_BIT;
    }
  if (cur_bitshift > -FLOATFORMAT_CHAR_BIT)
    result = *(data + cur_byte) >> (-cur_bitshift);
  else
    result = 0;
d3221 8
a3228 1
      result |= (unsigned long)*(data + cur_byte) << cur_bitshift;
a3234 3
  if (len < sizeof(result) * FLOATFORMAT_CHAR_BIT)
    /* Mask out bits which are not part of the field */
    result &= ((1UL << len) - 1);
d3371 1
d3373 7
a3379 21
    {
      int excess = FLOATFORMAT_CHAR_BIT - (total_len % FLOATFORMAT_CHAR_BIT);
      cur_byte = (total_len / FLOATFORMAT_CHAR_BIT) 
                 - ((start + len + excess) / FLOATFORMAT_CHAR_BIT);
      cur_bitshift = ((start + len + excess) % FLOATFORMAT_CHAR_BIT) 
                     - FLOATFORMAT_CHAR_BIT;
    }
  else
    {
      cur_byte = (start + len) / FLOATFORMAT_CHAR_BIT;
      cur_bitshift =
	((start + len) % FLOATFORMAT_CHAR_BIT) - FLOATFORMAT_CHAR_BIT;
    }
  if (cur_bitshift > -FLOATFORMAT_CHAR_BIT)
    {
      *(data + cur_byte) &=
	~(((1 << ((start + len) % FLOATFORMAT_CHAR_BIT)) - 1)
	  << (-cur_bitshift));
      *(data + cur_byte) |=
	(stuff_to_put & ((1 << FLOATFORMAT_CHAR_BIT) - 1)) << (-cur_bitshift);
    }
@


1.1.1.25
log
@import gdb-2000-01-31 snapshot
@
text
@d1775 757
@


1.1.1.26
log
@import gdb-2000-02-01 snapshot
@
text
@d2 1
a2 2
   Copyright 1986, 1989, 1990-1992, 1995, 1996, 1998, 2000
   Free Software Foundation, Inc.
d60 1
a60 1
static struct ui_file *gdb_lasterr;
d64 2
a65 2
static void vfprintf_maybe_filtered (struct ui_file *, const char *,
				     va_list, int);
d67 1
a67 1
static void fputs_maybe_filtered (const char *, struct ui_file *, int);
d82 4
d216 1
a216 1
do_ui_file_delete (void *arg)
d218 1
a218 1
  ui_file_delete (arg);
d222 1
a222 1
make_cleanup_ui_file_delete (struct ui_file *arg)
d224 1
a224 1
  return make_my_cleanup (&cleanup_chain, do_ui_file_delete, arg);
d620 1
a620 1
  ui_file_rewind (gdb_lasterr);
d641 1
a641 1
error_stream (struct ui_file *stream)
d644 1
a644 1
  char *msg = ui_file_xstrdup (stream, &size);
d655 1
a655 1
  return ui_file_xstrdup (gdb_lasterr, &len);
d1196 1
a1196 1
     register struct ui_file *file;
d1204 1
a1204 1
gdb_print_host_address (void *addr, struct ui_file *stream)
d1408 1
a1408 1
static void printchar (int c, void (*do_fputs) (const char *, struct ui_file*), void (*do_fprintf) (struct ui_file*, const char *, ...), struct ui_file *stream, int quoter);
d1413 3
a1415 3
     void (*do_fputs) PARAMS ((const char *, struct ui_file*));
     void (*do_fprintf) PARAMS ((struct ui_file*, const char *, ...));
     struct ui_file *stream;
d1470 1
a1470 1
     struct ui_file *stream;
d1480 1
a1480 1
     struct ui_file *stream;
d1491 1
a1491 1
     struct ui_file *stream;
d1601 1
a1601 1
      if (!ui_file_isatty (gdb_stdout))
d1791 1
a1791 1
     struct ui_file *stream;
d1895 1
a1895 1
     struct ui_file *stream;
d1905 1
a1905 1
  ui_file_write (gdb_stdout, &buf, 1);
d1912 1
a1912 1
     struct ui_file *stream;
d1915 1
a1915 1
  ui_file_write (stream, &buf, 1);
d1922 1
a1922 1
     struct ui_file *stream;
d2036 1
a2036 1
     struct ui_file *stream;
d2058 1
a2058 1
     struct ui_file *stream;
d2067 1
a2067 1
     struct ui_file *stream;
d2102 1
a2102 1
fprintf_filtered (struct ui_file * stream, const char *format,...)
d2111 1
a2111 1
fprintf_unfiltered (struct ui_file * stream, const char *format,...)
d2123 1
a2123 1
fprintfi_filtered (int spaces, struct ui_file * stream, const char *format,...)
d2213 1
a2213 1
     struct ui_file *stream;
d2227 1
a2227 1
     struct ui_file *stream;
d2368 1
a2368 1
  if (!ui_file_isatty (gdb_stdout))
@


