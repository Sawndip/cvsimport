head	1.33;
access;
symbols
	gdb_7_6_1-2013-08-30-release:1.33
	gdb_7_6-2013-04-26-release:1.33
	gdb_7_6-branch:1.33.0.2
	gdb_7_6-2013-03-12-branchpoint:1.33
	gdb_7_5_1-2012-11-29-release:1.27
	gdb_7_5-2012-08-17-release:1.27
	gdb_7_5-branch:1.27.0.2
	gdb_7_5-2012-07-18-branchpoint:1.27
	gdb_7_4_1-2012-04-26-release:1.26.2.1
	gdb_7_4-2012-01-24-release:1.26.2.1
	gdb_7_4-branch:1.26.0.2
	gdb_7_4-2011-12-13-branchpoint:1.26
	gdb_7_3_1-2011-09-04-release:1.24
	gdb_7_3-2011-07-26-release:1.24
	gdb_7_3-branch:1.24.0.2
	gdb_7_3-2011-04-01-branchpoint:1.24
	gdb_7_2-2010-09-02-release:1.22
	gdb_7_2-branch:1.22.0.4
	gdb_7_2-2010-07-07-branchpoint:1.22
	gdb_7_1-2010-03-18-release:1.22
	gdb_7_1-branch:1.22.0.2
	gdb_7_1-2010-02-18-branchpoint:1.22
	gdb_7_0_1-2009-12-22-release:1.21
	gdb_7_0-2009-10-06-release:1.21
	gdb_7_0-branch:1.21.0.4
	gdb_7_0-2009-09-16-branchpoint:1.21
	arc-sim-20090309:1.15
	msnyder-checkpoint-072509-branch:1.21.0.2
	msnyder-checkpoint-072509-branchpoint:1.21
	arc-insight_6_8-branch:1.15.0.6
	arc-insight_6_8-branchpoint:1.15
	insight_6_8-branch:1.15.0.4
	insight_6_8-branchpoint:1.15
	reverse-20081226-branch:1.19.0.6
	reverse-20081226-branchpoint:1.19
	multiprocess-20081120-branch:1.19.0.4
	multiprocess-20081120-branchpoint:1.19
	reverse-20080930-branch:1.19.0.2
	reverse-20080930-branchpoint:1.19
	reverse-20080717-branch:1.18.0.4
	reverse-20080717-branchpoint:1.18
	msnyder-reverse-20080609-branch:1.18.0.2
	msnyder-reverse-20080609-branchpoint:1.18
	drow-reverse-20070409-branch:1.13.0.2
	drow-reverse-20070409-branchpoint:1.13
	gdb_6_8-2008-03-27-release:1.15
	gdb_6_8-branch:1.15.0.2
	gdb_6_8-2008-02-26-branchpoint:1.15
	gdb_6_7_1-2007-10-29-release:1.14
	gdb_6_7-2007-10-10-release:1.14
	gdb_6_7-branch:1.14.0.2
	gdb_6_7-2007-09-07-branchpoint:1.14
	insight_6_6-20070208-release:1.12
	gdb_6_6-2006-12-18-release:1.12
	gdb_6_6-branch:1.12.0.2
	gdb_6_6-2006-11-15-branchpoint:1.12
	insight_6_5-20061003-release:1.11
	gdb-csl-symbian-6_4_50_20060226-12:1.11
	gdb-csl-sourcerygxx-3_4_4-25:1.10
	nickrob-async-20060828-mergepoint:1.12
	gdb-csl-symbian-6_4_50_20060226-11:1.11
	gdb-csl-sourcerygxx-4_1-17:1.11
	gdb-csl-20060226-branch-local-2:1.11
	gdb-csl-sourcerygxx-4_1-14:1.11
	gdb-csl-sourcerygxx-4_1-13:1.11
	gdb-csl-sourcerygxx-4_1-12:1.11
	gdb-csl-sourcerygxx-3_4_4-21:1.11
	gdb_6_5-20060621-release:1.11
	gdb-csl-sourcerygxx-4_1-9:1.11
	gdb-csl-sourcerygxx-4_1-8:1.11
	gdb-csl-sourcerygxx-4_1-7:1.11
	gdb-csl-arm-2006q1-6:1.11
	gdb-csl-sourcerygxx-4_1-6:1.11
	gdb-csl-symbian-6_4_50_20060226-10:1.11
	gdb-csl-symbian-6_4_50_20060226-9:1.11
	gdb-csl-symbian-6_4_50_20060226-8:1.11
	gdb-csl-coldfire-4_1-11:1.11
	gdb-csl-sourcerygxx-3_4_4-19:1.11
	gdb-csl-coldfire-4_1-10:1.11
	gdb_6_5-branch:1.11.0.16
	gdb_6_5-2006-05-14-branchpoint:1.11
	gdb-csl-sourcerygxx-4_1-5:1.11
	nickrob-async-20060513-branch:1.11.0.14
	nickrob-async-20060513-branchpoint:1.11
	gdb-csl-sourcerygxx-4_1-4:1.11
	msnyder-reverse-20060502-branch:1.11.0.12
	msnyder-reverse-20060502-branchpoint:1.11
	gdb-csl-morpho-4_1-4:1.11
	gdb-csl-sourcerygxx-3_4_4-17:1.11
	readline_5_1-import-branch:1.11.0.10
	readline_5_1-import-branchpoint:1.11
	gdb-csl-20060226-branch-merge-to-csl-symbian-1:1.11
	gdb-csl-symbian-20060226-branch:1.11.0.8
	gdb-csl-symbian-20060226-branchpoint:1.11
	gdb-csl-20060226-branch-merge-to-csl-local-1:1.11
	msnyder-reverse-20060331-branch:1.11.0.6
	msnyder-reverse-20060331-branchpoint:1.11
	gdb-csl-available-20060303-branch:1.11.0.4
	gdb-csl-available-20060303-branchpoint:1.11
	gdb-csl-20060226-branch:1.11.0.2
	gdb-csl-20060226-branchpoint:1.11
	gdb_6_4-20051202-release:1.10
	msnyder-fork-checkpoint-branch:1.10.0.8
	msnyder-fork-checkpoint-branchpoint:1.10
	gdb-csl-gxxpro-6_3-branch:1.10.0.6
	gdb-csl-gxxpro-6_3-branchpoint:1.10
	gdb_6_4-branch:1.10.0.4
	gdb_6_4-2005-11-01-branchpoint:1.10
	gdb-csl-arm-20051020-branch:1.10.0.2
	gdb-csl-arm-20051020-branchpoint:1.10
	msnyder-tracepoint-checkpoint-branch:1.9.0.4
	msnyder-tracepoint-checkpoint-branchpoint:1.9
	gdb-csl-arm-20050325-2005-q1b:1.9
	gdb-csl-arm-20050325-2005-q1a:1.9
	csl-arm-20050325-branch:1.9.0.2
	csl-arm-20050325-branchpoint:1.9
	gdb-post-i18n-errorwarning-20050211:1.7
	gdb-pre-i18n-errorwarning-20050211:1.7
	gdb_6_3-20041109-release:1.7
	gdb_6_3-branch:1.7.0.4
	gdb_6_3-20041019-branchpoint:1.7
	drow_intercu-merge-20040921:1.7
	drow_intercu-merge-20040915:1.7
	jimb-gdb_6_2-e500-branch:1.7.0.6
	jimb-gdb_6_2-e500-branchpoint:1.7
	gdb_6_2-20040730-release:1.7
	gdb_6_2-branch:1.7.0.2
	gdb_6_2-2004-07-10-gmt-branchpoint:1.7
	gdb_6_1_1-20040616-release:1.6
	gdb_6_1-2004-04-05-release:1.6
	drow_intercu-merge-20040402:1.6
	drow_intercu-merge-20040327:1.6
	ezannoni_pie-20040323-branch:1.6.0.18
	ezannoni_pie-20040323-branchpoint:1.6
	cagney_tramp-20040321-mergepoint:1.6
	cagney_tramp-20040309-branch:1.6.0.16
	cagney_tramp-20040309-branchpoint:1.6
	gdb_6_1-branch:1.6.0.14
	gdb_6_1-2004-03-01-gmt-branchpoint:1.6
	drow_intercu-20040221-branch:1.6.0.12
	drow_intercu-20040221-branchpoint:1.6
	cagney_bfdfile-20040213-branch:1.6.0.10
	cagney_bfdfile-20040213-branchpoint:1.6
	drow-cplus-merge-20040208:1.6
	carlton_dictionary-20040126-merge:1.6
	cagney_bigcore-20040122-branch:1.6.0.8
	cagney_bigcore-20040122-branchpoint:1.6
	drow-cplus-merge-20040113:1.6
	drow-cplus-merge-20031224:1.6
	drow-cplus-merge-20031220:1.6
	carlton_dictionary-20031215-merge:1.6
	drow-cplus-merge-20031214:1.6
	carlton-dictionary-20031111-merge:1.6
	gdb_6_0-2003-10-04-release:1.5.60.1
	kettenis_sparc-20030918-branch:1.6.0.6
	kettenis_sparc-20030918-branchpoint:1.6
	carlton_dictionary-20030917-merge:1.6
	ezannoni_pie-20030916-branchpoint:1.6
	ezannoni_pie-20030916-branch:1.6.0.4
	cagney_x86i386-20030821-branch:1.6.0.2
	cagney_x86i386-20030821-branchpoint:1.6
	carlton_dictionary-20030805-merge:1.6
	carlton_dictionary-20030627-merge:1.5
	gdb_6_0-branch:1.5.0.60
	gdb_6_0-2003-06-23-branchpoint:1.5
	jimb-ppc64-linux-20030613-branch:1.5.0.58
	jimb-ppc64-linux-20030613-branchpoint:1.5
	cagney_convert-20030606-branch:1.5.0.56
	cagney_convert-20030606-branchpoint:1.5
	cagney_writestrings-20030508-branch:1.5.0.54
	cagney_writestrings-20030508-branchpoint:1.5
	jimb-ppc64-linux-20030528-branch:1.5.0.52
	jimb-ppc64-linux-20030528-branchpoint:1.5
	carlton_dictionary-20030523-merge:1.5
	cagney_fileio-20030521-branch:1.5.0.50
	cagney_fileio-20030521-branchpoint:1.5
	kettenis_i386newframe-20030517-mergepoint:1.5
	jimb-ppc64-linux-20030509-branch:1.5.0.48
	jimb-ppc64-linux-20030509-branchpoint:1.5
	kettenis_i386newframe-20030504-mergepoint:1.5
	carlton_dictionary-20030430-merge:1.5
	kettenis_i386newframe-20030419-branch:1.5.0.46
	kettenis_i386newframe-20030419-branchpoint:1.5
	carlton_dictionary-20030416-merge:1.5
	cagney_frameaddr-20030409-mergepoint:1.5
	kettenis_i386newframe-20030406-branch:1.5.0.44
	kettenis_i386newframe-20030406-branchpoint:1.5
	cagney_frameaddr-20030403-branchpoint:1.5
	cagney_frameaddr-20030403-branch:1.5.0.42
	cagney_framebase-20030330-mergepoint:1.5
	cagney_framebase-20030326-branch:1.5.0.40
	cagney_framebase-20030326-branchpoint:1.5
	cagney_lazyid-20030317-branch:1.5.0.38
	cagney_lazyid-20030317-branchpoint:1.5
	kettenis-i386newframe-20030316-mergepoint:1.5
	offbyone-20030313-branch:1.5.0.36
	offbyone-20030313-branchpoint:1.5
	kettenis-i386newframe-20030308-branch:1.5.0.34
	kettenis-i386newframe-20030308-branchpoint:1.5
	carlton_dictionary-20030305-merge:1.5
	cagney_offbyone-20030303-branch:1.5.0.32
	cagney_offbyone-20030303-branchpoint:1.5
	carlton_dictionary-20030207-merge:1.5
	interps-20030203-mergepoint:1.5
	interps-20030202-branch:1.5.0.30
	interps-20030202-branchpoint:1.5
	cagney-unwind-20030108-branch:1.5.0.28
	cagney-unwind-20030108-branchpoint:1.5
	carlton_dictionary-20021223-merge:1.5
	gdb_5_3-2002-12-12-release:1.5
	carlton_dictionary-20021115-merge:1.5
	kseitz_interps-20021105-merge:1.5
	kseitz_interps-20021103-merge:1.5
	drow-cplus-merge-20021020:1.5
	drow-cplus-merge-20021025:1.5
	carlton_dictionary-20021025-merge:1.5
	carlton_dictionary-20021011-merge:1.5
	drow-cplus-branch:1.5.0.26
	drow-cplus-branchpoint:1.5
	kseitz_interps-20020930-merge:1.5
	carlton_dictionary-20020927-merge:1.5
	carlton_dictionary-branch:1.5.0.24
	carlton_dictionary-20020920-branchpoint:1.5
	gdb_5_3-branch:1.5.0.22
	gdb_5_3-2002-09-04-branchpoint:1.5
	kseitz_interps-20020829-merge:1.5
	cagney_sysregs-20020825-branch:1.5.0.20
	cagney_sysregs-20020825-branchpoint:1.5
	readline_4_3-import-branch:1.5.0.18
	readline_4_3-import-branchpoint:1.5
	gdb_5_2_1-2002-07-23-release:1.5
	kseitz_interps-20020528-branch:1.5.0.16
	kseitz_interps-20020528-branchpoint:1.5
	cagney_regbuf-20020515-branch:1.5.0.14
	cagney_regbuf-20020515-branchpoint:1.5
	jimb-macro-020506-branch:1.5.0.12
	jimb-macro-020506-branchpoint:1.5
	gdb_5_2-2002-04-29-release:1.5
	gdb_5_2-branch:1.5.0.10
	gdb_5_2-2002-03-03-branchpoint:1.5
	gdb_5_1_1-2002-01-24-release:1.5
	gdb_5_1_0_1-2002-01-03-release:1.5
	cygnus_cvs_20020108_pre:1.5
	gdb_5_1_0_1-2002-01-03-branchpoint:1.5
	gdb_5_1_0_1-2002-01-03-branch:1.5.0.8
	gdb_5_1-2001-11-21-release:1.5
	gdb_s390-2001-09-26-branch:1.5.0.6
	gdb_s390-2001-09-26-branchpoint:1.5
	gdb_5_1-2001-07-29-branch:1.5.0.4
	gdb_5_1-2001-07-29-branchpoint:1.5
	dberlin-typesystem-branch:1.5.0.2
	dberlin-typesystem-branchpoint:1.5
	gdb-post-ptid_t-2001-05-03:1.5
	gdb-pre-ptid_t-2001-05-03:1.5
	insight-precleanup-2001-01-01:1.4
	gdb-post-protoization-2000-07-29:1.4
	gdb-pre-protoization-2000-07-29:1.3
	gdb-premipsmulti-2000-06-06-branch:1.3.0.2
	gdb-premipsmulti-2000-06-06-branchpoint:1.3
	gdb-post-params-removal-2000-06-04:1.3
	gdb-pre-params-removal-2000-06-04:1.2
	gdb-post-params-removal-2000-05-28:1.2
	gdb-pre-params-removal-2000-05-28:1.1.1.5
	gdb_5_0-2000-05-19-release:1.1.1.5
	gdb_4_18_2-2000-05-18-release:1.1.1.5
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.5
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.5
	gdb_5_0-2000-04-10-branch:1.1.1.5.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1.1.5
	repo-unification-2000-02-06:1.1.1.5
	insight-2000-02-04:1.1.1.5
	gdb-2000-02-04:1.1.1.5
	gdb-2000-02-02:1.1.1.5
	gdb-2000-02-01:1.1.1.5
	gdb-2000-01-31:1.1.1.5
	gdb-2000-01-26:1.1.1.5
	gdb-2000-01-24:1.1.1.5
	gdb-2000-01-17:1.1.1.5
	gdb-2000-01-10:1.1.1.5
	gdb-2000-01-05:1.1.1.5
	gdb-1999-12-21:1.1.1.5
	gdb-1999-12-13:1.1.1.5
	gdb-1999-12-07:1.1.1.5
	gdb-1999-12-06:1.1.1.5
	gdb-1999-11-16:1.1.1.5
	gdb-1999-11-08:1.1.1.5
	gdb-1999-11-01:1.1.1.5
	gdb-1999-10-25:1.1.1.4
	gdb-1999-10-18:1.1.1.4
	gdb-1999-10-11:1.1.1.4
	gdb-1999-10-04:1.1.1.4
	gdb-1999-09-28:1.1.1.4
	gdb-1999-09-21:1.1.1.4
	gdb-1999-09-13:1.1.1.4
	gdb-1999-09-08:1.1.1.4
	gdb-1999-08-30:1.1.1.4
	gdb-1999-08-23:1.1.1.4
	gdb-1999-08-16:1.1.1.4
	gdb-1999-08-09:1.1.1.4
	gdb-1999-08-02:1.1.1.4
	gdb-1999-07-26:1.1.1.4
	gdb-1999-07-19:1.1.1.4
	gdb-1999-07-12:1.1.1.4
	gdb-post-reformat-19990707:1.1.1.4
	gdb-1999-07-07-post-reformat-snapshot:1.1.1.4
	gdb-pre-reformat-19990707:1.1.1.3
	gdb-1999-07-07:1.1.1.3
	gdb-1999-07-05:1.1.1.3
	gdb-1999-06-28:1.1.1.3
	gdb-1999-06-21:1.1.1.3
	gdb-1999-06-14:1.1.1.3
	gdb-1999-06-07:1.1.1.3
	gdb-1999-06-01:1.1.1.3
	gdb-4_18-branch:1.1.1.1.0.2
	gdb-4_18-release:1.1.1.1
	gdb-1999-05-25:1.1.1.3
	gdb-1999-05-19:1.1.1.2
	gdb-1999-05-10:1.1.1.2
	gdb-19990504:1.1.1.2
	gdb-19990422:1.1.1.2
	SNAPSHOT:1.1.1
	gdb-4_18:1.1.1.1
	GDB_4_18:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.33
date	2013.01.22.20.22.38;	author palves;	state Exp;
branches;
next	1.32;

1.32
date	2013.01.22.20.19.38;	author palves;	state Exp;
branches;
next	1.31;

1.31
date	2013.01.22.20.17.10;	author palves;	state Exp;
branches;
next	1.30;

1.30
date	2013.01.22.20.08.28;	author palves;	state Exp;
branches;
next	1.29;

1.29
date	2013.01.01.06.32.37;	author brobecke;	state Exp;
branches;
next	1.28;

1.28
date	2012.11.20.17.49.02;	author palves;	state Exp;
branches;
next	1.27;

1.27
date	2012.01.04.08.16.56;	author brobecke;	state Exp;
branches;
next	1.26;

1.26
date	2011.12.11.02.44.15;	author ndreys;	state Exp;
branches
	1.26.2.1;
next	1.25;

1.25
date	2011.04.27.10.17.36;	author vprus;	state Exp;
branches;
next	1.24;

1.24
date	2011.01.01.15.32.57;	author brobecke;	state Exp;
branches;
next	1.23;

1.23
date	2010.12.31.19.16.37;	author msnyder;	state Exp;
branches;
next	1.22;

1.22
date	2010.01.01.07.31.29;	author brobecke;	state Exp;
branches;
next	1.21;

1.21
date	2009.07.02.17.21.05;	author uweigand;	state Exp;
branches;
next	1.20;

1.20
date	2009.01.03.05.57.50;	author brobecke;	state Exp;
branches;
next	1.19;

1.19
date	2008.07.28.17.53.52;	author tromey;	state Exp;
branches;
next	1.18;

1.18
date	2008.06.06.00.31.41;	author nickrob;	state Exp;
branches;
next	1.17;

1.17
date	2008.05.23.04.31.40;	author deuling;	state Exp;
branches;
next	1.16;

1.16
date	2008.05.20.21.03.34;	author nickrob;	state Exp;
branches;
next	1.15;

1.15
date	2008.01.01.22.53.09;	author drow;	state Exp;
branches;
next	1.14;

1.14
date	2007.08.23.18.08.26;	author brobecke;	state Exp;
branches;
next	1.13;

1.13
date	2007.01.09.17.58.49;	author drow;	state Exp;
branches;
next	1.12;

1.12
date	2006.07.13.07.43.44;	author nickrob;	state Exp;
branches;
next	1.11;

1.11
date	2005.12.17.22.33.59;	author eliz;	state Exp;
branches
	1.11.14.1;
next	1.10;

1.10
date	2005.09.28.23.44.02;	author nickrob;	state Exp;
branches;
next	1.9;

1.9
date	2005.02.14.14.37.37;	author cagney;	state Exp;
branches;
next	1.8;

1.8
date	2005.02.12.00.39.17;	author cagney;	state Exp;
branches;
next	1.7;

1.7
date	2004.04.21.23.52.19;	author cagney;	state Exp;
branches;
next	1.6;

1.6
date	2003.07.29.03.17.08;	author cagney;	state Exp;
branches
	1.6.12.1;
next	1.5;

1.5
date	2001.03.06.08.21.05;	author kevinb;	state Exp;
branches
	1.5.24.1
	1.5.26.1
	1.5.60.1;
next	1.4;

1.4
date	2000.07.30.01.48.24;	author kevinb;	state Exp;
branches;
next	1.3;

1.3
date	2000.06.04.00.41.09;	author kevinb;	state Exp;
branches;
next	1.2;

1.2
date	2000.05.28.01.12.26;	author kevinb;	state Exp;
branches;
next	1.1;

1.1
date	99.04.16.01.33.58;	author shebs;	state Exp;
branches
	1.1.1.1;
next	;

1.26.2.1
date	2012.01.06.04.43.04;	author brobecke;	state Exp;
branches;
next	;

1.11.14.1
date	2006.08.28.07.48.50;	author nickrob;	state Exp;
branches;
next	;

1.6.12.1
date	2004.09.16.17.00.53;	author drow;	state Exp;
branches;
next	;

1.5.24.1
date	2003.08.05.17.13.04;	author carlton;	state Exp;
branches;
next	;

1.5.26.1
date	2003.12.14.20.27.05;	author drow;	state Exp;
branches;
next	;

1.5.60.1
date	2003.07.29.03.18.46;	author cagney;	state Exp;
branches;
next	;

1.1.1.1
date	99.04.16.01.33.58;	author shebs;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.04.26.18.23.29;	author shebs;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	99.05.25.18.00.52;	author jsm;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	99.07.07.20.04.09;	author jsm;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	99.11.02.04.44.13;	author jsm;	state Exp;
branches;
next	;


desc
@@


1.33
log
@If a breakpoint is not user visible, then there's no point in
bothering the frontend about it...  This is the exact same check MI
does.

I also smoke tested Emacs 23 in gud-gdb mode, both annotations=2
and annotations=3.  I didn't notice anything break.

gdb/
2013-01-22  Pedro Alves  <palves@@redhat.com>

	* annotate.c (breakpoint_changed): Skip if breakpoint is not
	user-visible.

gdb/testsuite/
2013-01-22  Pedro Alves  <palves@@redhat.com>

	* gdb.base/annota1.exp (signal sent): No longer expect
	breakpoints-invalid.
	* gdb.cp/annota2.exp (continue until exit)
	(watch triggered on a.x): Ditto.
@
text
@/* Annotation routines for GDB.
   Copyright (C) 1986-2013 Free Software Foundation, Inc.

   This file is part of GDB.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

#include "defs.h"
#include "annotate.h"
#include "value.h"
#include "target.h"
#include "gdbtypes.h"
#include "breakpoint.h"
#include "observer.h"
#include "inferior.h"


/* Prototypes for local functions.  */

extern void _initialize_annotate (void);

static void print_value_flags (struct type *);

static void breakpoint_changed (struct breakpoint *b);


void (*deprecated_annotate_signalled_hook) (void);
void (*deprecated_annotate_signal_hook) (void);

/* Booleans indicating whether we've emitted certain notifications.
   Used to suppress useless repeated notifications until the next time
   we're ready to accept more commands.  Reset whenever a prompt is
   displayed.  */
static int frames_invalid_emitted;
static int breakpoints_invalid_emitted;

/* True if the target can async, and a synchronous execution command
   is not in progress.  If true, input is accepted, so don't suppress
   annotations.  */

static int
async_background_execution_p (void)
{
  return (target_can_async_p () && !sync_execution);
}

static void
print_value_flags (struct type *t)
{
  if (can_dereference (t))
    printf_filtered (("*"));
  else
    printf_filtered (("-"));
}

static void
annotate_breakpoints_invalid (void)
{
  if (annotation_level == 2
      && (!breakpoints_invalid_emitted
	  || async_background_execution_p ()))
    {
      target_terminal_ours ();
      printf_unfiltered (("\n\032\032breakpoints-invalid\n"));
      breakpoints_invalid_emitted = 1;
    }
}

void
annotate_breakpoint (int num)
{
  if (annotation_level > 1)
    printf_filtered (("\n\032\032breakpoint %d\n"), num);
}

void
annotate_catchpoint (int num)
{
  if (annotation_level > 1)
    printf_filtered (("\n\032\032catchpoint %d\n"), num);
}

void
annotate_watchpoint (int num)
{
  if (annotation_level > 1)
    printf_filtered (("\n\032\032watchpoint %d\n"), num);
}

void
annotate_starting (void)
{
  if (annotation_level > 1)
    printf_filtered (("\n\032\032starting\n"));
}

void
annotate_stopped (void)
{
  if (annotation_level > 1)
    printf_filtered (("\n\032\032stopped\n"));
}

void
annotate_exited (int exitstatus)
{
  if (annotation_level > 1)
    printf_filtered (("\n\032\032exited %d\n"), exitstatus);
}

void
annotate_signalled (void)
{
  if (deprecated_annotate_signalled_hook)
    deprecated_annotate_signalled_hook ();

  if (annotation_level > 1)
    printf_filtered (("\n\032\032signalled\n"));
}

void
annotate_signal_name (void)
{
  if (annotation_level == 2)
    printf_filtered (("\n\032\032signal-name\n"));
}

void
annotate_signal_name_end (void)
{
  if (annotation_level == 2)
    printf_filtered (("\n\032\032signal-name-end\n"));
}

void
annotate_signal_string (void)
{
  if (annotation_level == 2)
    printf_filtered (("\n\032\032signal-string\n"));
}

void
annotate_signal_string_end (void)
{
  if (annotation_level == 2)
    printf_filtered (("\n\032\032signal-string-end\n"));
}

void
annotate_signal (void)
{
  if (deprecated_annotate_signal_hook)
    deprecated_annotate_signal_hook ();

  if (annotation_level > 1)
    printf_filtered (("\n\032\032signal\n"));
}

void
annotate_breakpoints_headers (void)
{
  if (annotation_level == 2)
    printf_filtered (("\n\032\032breakpoints-headers\n"));
}

void
annotate_field (int num)
{
  if (annotation_level == 2)
    printf_filtered (("\n\032\032field %d\n"), num);
}

void
annotate_breakpoints_table (void)
{
  if (annotation_level == 2)
    printf_filtered (("\n\032\032breakpoints-table\n"));
}

void
annotate_record (void)
{
  if (annotation_level == 2)
    printf_filtered (("\n\032\032record\n"));
}

void
annotate_breakpoints_table_end (void)
{
  if (annotation_level == 2)
    printf_filtered (("\n\032\032breakpoints-table-end\n"));
}

void
annotate_frames_invalid (void)
{
  if (annotation_level == 2
      && (!frames_invalid_emitted
	  || async_background_execution_p ()))
    {
      target_terminal_ours ();
      printf_unfiltered (("\n\032\032frames-invalid\n"));
      frames_invalid_emitted = 1;
    }
}

void
annotate_new_thread (void)
{
  if (annotation_level > 1)
    {
      printf_unfiltered (("\n\032\032new-thread\n"));
    }
}

void
annotate_thread_changed (void)
{
  if (annotation_level > 1)
    {
      printf_unfiltered (("\n\032\032thread-changed\n"));
    }
}

void
annotate_field_begin (struct type *type)
{
  if (annotation_level == 2)
    {
      printf_filtered (("\n\032\032field-begin "));
      print_value_flags (type);
      printf_filtered (("\n"));
    }
}

void
annotate_field_name_end (void)
{
  if (annotation_level == 2)
    printf_filtered (("\n\032\032field-name-end\n"));
}

void
annotate_field_value (void)
{
  if (annotation_level == 2)
    printf_filtered (("\n\032\032field-value\n"));
}

void
annotate_field_end (void)
{
  if (annotation_level == 2)
    printf_filtered (("\n\032\032field-end\n"));
}

void
annotate_quit (void)
{
  if (annotation_level > 1)
    printf_filtered (("\n\032\032quit\n"));
}

void
annotate_error (void)
{
  if (annotation_level > 1)
    printf_filtered (("\n\032\032error\n"));
}

void
annotate_error_begin (void)
{
  if (annotation_level > 1)
    fprintf_filtered (gdb_stderr, "\n\032\032error-begin\n");
}

void
annotate_value_history_begin (int histindex, struct type *type)
{
  if (annotation_level == 2)
    {
      printf_filtered (("\n\032\032value-history-begin %d "), histindex);
      print_value_flags (type);
      printf_filtered (("\n"));
    }
}

void
annotate_value_begin (struct type *type)
{
  if (annotation_level == 2)
    {
      printf_filtered (("\n\032\032value-begin "));
      print_value_flags (type);
      printf_filtered (("\n"));
    }
}

void
annotate_value_history_value (void)
{
  if (annotation_level == 2)
    printf_filtered (("\n\032\032value-history-value\n"));
}

void
annotate_value_history_end (void)
{
  if (annotation_level == 2)
    printf_filtered (("\n\032\032value-history-end\n"));
}

void
annotate_value_end (void)
{
  if (annotation_level == 2)
    printf_filtered (("\n\032\032value-end\n"));
}

void
annotate_display_begin (void)
{
  if (annotation_level == 2)
    printf_filtered (("\n\032\032display-begin\n"));
}

void
annotate_display_number_end (void)
{
  if (annotation_level == 2)
    printf_filtered (("\n\032\032display-number-end\n"));
}

void
annotate_display_format (void)
{
  if (annotation_level == 2)
    printf_filtered (("\n\032\032display-format\n"));
}

void
annotate_display_expression (void)
{
  if (annotation_level == 2)
    printf_filtered (("\n\032\032display-expression\n"));
}

void
annotate_display_expression_end (void)
{
  if (annotation_level == 2)
    printf_filtered (("\n\032\032display-expression-end\n"));
}

void
annotate_display_value (void)
{
  if (annotation_level == 2)
    printf_filtered (("\n\032\032display-value\n"));
}

void
annotate_display_end (void)
{
  if (annotation_level == 2)
    printf_filtered (("\n\032\032display-end\n"));
}

void
annotate_arg_begin (void)
{
  if (annotation_level == 2)
    printf_filtered (("\n\032\032arg-begin\n"));
}

void
annotate_arg_name_end (void)
{
  if (annotation_level == 2)
    printf_filtered (("\n\032\032arg-name-end\n"));
}

void
annotate_arg_value (struct type *type)
{
  if (annotation_level == 2)
    {
      printf_filtered (("\n\032\032arg-value "));
      print_value_flags (type);
      printf_filtered (("\n"));
    }
}

void
annotate_arg_end (void)
{
  if (annotation_level == 2)
    printf_filtered (("\n\032\032arg-end\n"));
}

void
annotate_source (char *filename, int line, int character, int mid,
		 struct gdbarch *gdbarch, CORE_ADDR pc)
{
  if (annotation_level > 1)
    printf_filtered (("\n\032\032source "));
  else
    printf_filtered (("\032\032"));

  printf_filtered (("%s:%d:%d:%s:%s\n"), filename, line, character,
		   mid ? "middle" : "beg", paddress (gdbarch, pc));
}

void
annotate_frame_begin (int level, struct gdbarch *gdbarch, CORE_ADDR pc)
{
  if (annotation_level > 1)
    printf_filtered (("\n\032\032frame-begin %d %s\n"),
		     level, paddress (gdbarch, pc));
}

void
annotate_function_call (void)
{
  if (annotation_level == 2)
    printf_filtered (("\n\032\032function-call\n"));
}

void
annotate_signal_handler_caller (void)
{
  if (annotation_level == 2)
    printf_filtered (("\n\032\032signal-handler-caller\n"));
}

void
annotate_frame_address (void)
{
  if (annotation_level == 2)
    printf_filtered (("\n\032\032frame-address\n"));
}

void
annotate_frame_address_end (void)
{
  if (annotation_level == 2)
    printf_filtered (("\n\032\032frame-address-end\n"));
}

void
annotate_frame_function_name (void)
{
  if (annotation_level == 2)
    printf_filtered (("\n\032\032frame-function-name\n"));
}

void
annotate_frame_args (void)
{
  if (annotation_level == 2)
    printf_filtered (("\n\032\032frame-args\n"));
}

void
annotate_frame_source_begin (void)
{
  if (annotation_level == 2)
    printf_filtered (("\n\032\032frame-source-begin\n"));
}

void
annotate_frame_source_file (void)
{
  if (annotation_level == 2)
    printf_filtered (("\n\032\032frame-source-file\n"));
}

void
annotate_frame_source_file_end (void)
{
  if (annotation_level == 2)
    printf_filtered (("\n\032\032frame-source-file-end\n"));
}

void
annotate_frame_source_line (void)
{
  if (annotation_level == 2)
    printf_filtered (("\n\032\032frame-source-line\n"));
}

void
annotate_frame_source_end (void)
{
  if (annotation_level == 2)
    printf_filtered (("\n\032\032frame-source-end\n"));
}

void
annotate_frame_where (void)
{
  if (annotation_level == 2)
    printf_filtered (("\n\032\032frame-where\n"));
}

void
annotate_frame_end (void)
{
  if (annotation_level == 2)
    printf_filtered (("\n\032\032frame-end\n"));
}

void
annotate_array_section_begin (int idx, struct type *elttype)
{
  if (annotation_level == 2)
    {
      printf_filtered (("\n\032\032array-section-begin %d "), idx);
      print_value_flags (elttype);
      printf_filtered (("\n"));
    }
}

void
annotate_elt_rep (unsigned int repcount)
{
  if (annotation_level == 2)
    printf_filtered (("\n\032\032elt-rep %u\n"), repcount);
}

void
annotate_elt_rep_end (void)
{
  if (annotation_level == 2)
    printf_filtered (("\n\032\032elt-rep-end\n"));
}

void
annotate_elt (void)
{
  if (annotation_level == 2)
    printf_filtered (("\n\032\032elt\n"));
}

void
annotate_array_section_end (void)
{
  if (annotation_level == 2)
    printf_filtered (("\n\032\032array-section-end\n"));
}

/* Called when GDB is about to display the prompt.  Used to reset
   annotation suppression whenever we're ready to accept new
   frontend/user commands.  */

void
annotate_display_prompt (void)
{
  frames_invalid_emitted = 0;
  breakpoints_invalid_emitted = 0;
}

static void
breakpoint_changed (struct breakpoint *b)
{
  if (b->number <= 0)
    return;

  annotate_breakpoints_invalid ();
}

void
_initialize_annotate (void)
{
  observer_attach_breakpoint_created (breakpoint_changed);
  observer_attach_breakpoint_deleted (breakpoint_changed);
  observer_attach_breakpoint_modified (breakpoint_changed);
}
@


1.32
log
@All annotate_breakpoints_changed calls are along-side
observer_notify_breakpoints_changed calls.  All, except the
init_raw_breakpoint one.  But that one is actually wrong.  The
breakpoint is being constructed at that point, and hasn't been placed
on the breakpoint chain yet.  It would be better placed in
install_breakpoint, and I actually started out that way.  But once the
annotate_breakpoints_changed are parallel to the observer calls, we
can fully move annotations to observers too.

One issue is that this changes the order of annotations a bit.
Before, we'd emit the annotation, and after call "mention()" on the
breakpoint (which prints the breakpoint number, etc.).  But, we call
the observers _after_ mention is called, so the annotation output will
change a little:

void
install_breakpoint (int internal, struct breakpoint *b, int update_gll)
{
  add_to_breakpoint_chain (b);
  set_breakpoint_number (internal, b);
  if (is_tracepoint (b))
    set_tracepoint_count (breakpoint_count);
  if (!internal)
    mention (b);
  observer_notify_breakpoint_created (b);

  if (update_gll)
    update_global_location_list (1);
}

I believe this order doesn't really matter (the frontend needs to wait
for the prompt anyway), so I just adjust the expected output in the
tests.  Emacs in annotations mode doesn't seem to complain.  Couple
that with the previous patch that suppressed duplicated annotations,
and, the fact that some annotations calls were actually missing (were
we do have observer calls), more changes to the tests are needed
anyway.

Tested on x86_64 Fedora 17.

gdb/
2013-01-22  Pedro Alves  <palves@@redhat.com>

	* annotate.c (annotate_breakpoints_changed): Rename to ...
	(annotate_breakpoints_invalid): ... this.  Make static.
	(breakpoint_changed): Adjust.
	(_initialize_annotate): Always install the observers.  Install a
	"breakpoint_created" observer.
	* annotate.h (annotate_breakpoints_changed): Delete declaration.
	* breakpoint.c (set_breakpoint_condition)
	(breakpoint_set_commands, do_map_commands_command)
	(init_raw_breakpoint, clear_command, set_ignore_count)
	(enable_breakpoint_disp): No longer call
	annotate_breakpoints_changed.

gdb/testsuite/
2013-01-22  Pedro Alves  <palves@@redhat.com>

	* gdb.base/annota1.exp (breakpoints_invalid): New variable.
	Adjust tests to breakpoints-invalid changes.
	* gdb.cp/annota2.exp (breakpoints_invalid, frames_invalid): New
	variables.
	Adjust tests to breakpoints-invalid changes.
@
text
@d578 3
@


1.31
log
@With some changes to how software single-step (SSS) breakpoints are
handled, one of those being to place SSS breakpoints on the breakpoint
chain as all other breakpoints, annota1.exp times out with lots and
lots of breakpoint-invalid and frame-changed annotations.  All those
extra annotations are actually unnecessary.  For one, SSS breakpoints
are internal breakpoints, so the frontend shouldn't care if they were
added, removed or changed.  Then, there's really no point in emitting
"breakpoints-invalid" or "frames-invalid" more than once between times
the frontend/user can actually issues GDB commands; the frontend will
have to wait for the GDB prompt to refresh its state, so emitting
those annotations at most once between prompts is enough.  Non-stop or
async would complicate this, but no frontend will be using annotations
in those modes (one of goes of emacs switching to MI was non-stop mode
support, AFAIK).  The previous patch reveals there has been an
intention in the past to suppress multiple breakpoints-invalid
annotations caused by ignore count changes.  As the previous patch
shows, that's always been broken, but in any case, this patch actually
makes it work.  The next patch will remove several annotation-specific
calls in breakpoint.c in favor of always using the breakpoint modified
& friends observers, and that causes yet more of these annotations,
because several calls to the corresponding annotate_* functions in
breakpoint.c are missing, particularly in newer code.

So all in all, here's a simple mechanism that avoids sending the same
annotation to the frontend more than once until gdb is ready to accept
further commands.

Tested on x86_64 Fedora 17.

2013-01-22  Pedro Alves  <palves@@redhat.com>

	* annotate.c: Include "inferior.h".
	(frames_invalid_emitted)
	(breakpoints_invalid_emitted): New globals.
	(async_background_execution_p): New function.
	(annotate_breakpoints_changed, annotate_frames_invalid): Skip
	emitting the annotation if it has already been emitted.
	(annotate_display_prompt): New function.
	* annotate.h (annotate_display_prompt): New declaration.
	* event-top.c: Include annotate.h.
	(display_gdb_prompt): Call annotate_display_prompt.
@
text
@d66 3
a68 3

void
annotate_breakpoints_changed (void)
d578 1
a578 1
  annotate_breakpoints_changed ();
d584 3
a586 5
  if (annotation_level == 2)
    {
      observer_attach_breakpoint_deleted (breakpoint_changed);
      observer_attach_breakpoint_modified (breakpoint_changed);
    }
@


1.30
log
@There's code in annotate.c and breakpoint.c that is supposed to
suppress multiple breakpoints-invalid annotations when the ignore
count of a breakpoint changes, up until the target actually stops.

But, the code is bogus:

void
annotate_breakpoints_changed (void)
{
  if (annotation_level == 2)
    {
      target_terminal_ours ();
      printf_unfiltered (("\n\032\032breakpoints-invalid\n"));
      if (ignore_count_changed)
	ignore_count_changed = 0;   /* Avoid multiple break annotations.  */
    }
}

The "ignore_count_changed" flag isn't actually guarding the output of
the annotation at all.  It would have been better written something
like:

void
annotate_breakpoints_changed (void)
{
  if (annotation_level == 2 && !ignore_count_changed)
    {
      target_terminal_ours ();
      printf_unfiltered (("\n\032\032breakpoints-invalid\n"));
      ignore_count_changed = 0;   /* Avoid multiple break annotations.  */
    }
}

but, it wasn't.  AFAICS, that goes all the way back to the original
patch'es submission and check in, at
<http://sourceware.org/ml/gdb-patches/1999-q4/msg00106.html>.  I
looked a tar of HP's wdb from 1999, and even though that contains
local changes in the annotate code, this suppression seems borked
there too to me.

The original patch added a test to supposedly exercise this
suppression, but, it actually doesn't.  It merely tests that
"breakpoints-invalid" is output after "stopped", but doesn't check
whether the duplicates supression actually works (IOW, check that only
_one_ annotation is seen).  I was going to simply delete the tests
too, but a following patch will eliminate the duplicates in a
different way (which I needed for a different reason), so instead, I'm
making the tests actually fail if a duplicate annotation is seen.

Worry not, the test doesn't actually fail!  The reason is that
breakpoint.c does:

      else if (b->ignore_count > 0)
	{
	  b->ignore_count--;
	  annotate_ignore_count_change ();
	  bs->stop = 0;
	  /* Increase the hit count even though we don't stop.  */
	  ++(b->hit_count);
	  observer_notify_breakpoint_modified (b);
	}

where the annotate_ignore_count_change call is meant to inform the
"breakpoint_modified" annotation observer to ignore the notification.
All sounds good.  But, the trouble is that nowadays annotate.c only
installs the observers if GDB is started with annotations enabled with
a command line option (gdb --annotate=2):

void
_initialize_annotate (void)
{
  if (annotation_level == 2)
    {
      observer_attach_breakpoint_deleted (breakpoint_changed);
      observer_attach_breakpoint_modified (breakpoint_changed);
    }
}

and annota1.exp, to enable annotations, starts GDB normally, and
afterwards does "set annotate 2", so the observers aren't installed
when annota1.exp is run, and therefore changing the ignore count isn't
triggering any annotation at all...

gdb/
2013-01-22  Pedro Alves  <palves@@redhat.com>

	* annotate.c (ignore_count_changed): Delete.
	(annotate_breakpoints_changed): Don't clear ignore_count_changed.
	(annotate_ignore_count_change): Delete.
	(annotate_stopped): Don't emit a delayed breakpoints-changed
	annotation.
	* annotate.h (annotate_ignore_count_change): Delete.
	* breakpoint.c (bpstat_check_breakpoint_conditions): Don't call
	annotate_ignore_count_change.

gdb/testsuite/
2013-01-22  Pedro Alves  <palves@@redhat.com>

	* gdb.base/annota1.exp (annotate ignore count change): Add
	expected output for failure case.
@
text
@d26 1
d41 17
d70 3
a72 1
  if (annotation_level == 2)
d76 1
d208 3
a210 1
  if (annotation_level == 2)
d214 1
d564 11
@


1.29
log
@Update years in copyright notice for the GDB files.

Two modifications:
  1. The addition of 2013 to the copyright year range for every file;
  2. The use of a single year range, instead of potentially multiple
     year ranges, as approved by the FSF.
@
text
@a39 2
static int ignore_count_changed = 0;

a55 2
      if (ignore_count_changed)
	ignore_count_changed = 0;   /* Avoid multiple break annotations.  */
a58 13
/* The GUI needs to be informed of ignore_count changes, but we don't
   want to provide successive multiple breakpoints-invalid messages
   that are all caused by the fact that the ignore count is changing
   (which could keep the GUI very busy).  One is enough, after the
   target actually "stops".  */

void
annotate_ignore_count_change (void)
{
  if (annotation_level > 1)
    ignore_count_changed = 1;
}

a91 5
  if (annotation_level > 1 && ignore_count_changed)
    {
      ignore_count_changed = 0;
      annotate_breakpoints_changed ();
    }
@


1.28
log
@2012-11-20  Pedro Alves  <palves@@redhat.com>

	* annotate.c (breakpoints_changed): Rename to ...
	(annotate_breakpoints_changed): ... this.
	(annotate_stopped, breakpoint_changed): Adjust caller.
	* annotate.h (breakpoints_changed): Rename to ...
	(annotate_breakpoints_changed): ... this.
	* breakpoint.c (set_breakpoint_condition, breakpoint_set_commands)
	(do_map_commands_command, init_raw_breakpoint, clear_command)
	(set_ignore_count, enable_breakpoint_disp): Adjust callers.
@
text
@d2 1
a2 2
   Copyright (C) 1986, 1989-1992, 1994-1996, 1998-2000, 2007-2012 Free
   Software Foundation, Inc.
@


1.27
log
@Copyright year update in most files of the GDB Project.

gdb/ChangeLog:

        Copyright year update in most files of the GDB Project.
@
text
@d53 1
a53 1
breakpoints_changed (void)
d113 1
a113 1
      breakpoints_changed ();
d566 1
a566 1
  breakpoints_changed ();
@


1.26
log
@* annotate.c (annotate_array_section_begin): Rename `index' to
`idx'(-Wshadow).
@
text
@d2 2
a3 2
   Copyright (C) 1986, 1989, 1990, 1991, 1992, 1994, 1995, 1996, 1998, 1999,
   2000, 2007, 2008, 2009, 2010, 2011 Free Software Foundation, Inc.
@


1.26.2.1
log
@Copyright year update in most files of the GDB Project.

gdb/ChangeLog:

        Copyright year update in most files of the GDB Project.
@
text
@d2 2
a3 2
   Copyright (C) 1986, 1989-1992, 1994-1996, 1998-2000, 2007-2012 Free
   Software Foundation, Inc.
@


1.25
log
@	MI breakpoint notifications.

        * annotate.c (breakpoint_changed): Adjust parameter type.
        * breakpoint.c (set_breakpoint_condition): Adjust to change
        in breakpoint_modified type.
        (breakpoint_set_commands): Likewise.
        (do_map_commands_command): Likewise.
        (bpstat_check_breakpoint_conditions): Notify that breakpoint has
        changed after bumping hit count.
        (bpstat_stop_status): Likewise.
        (print_one_breakpoint_location): Don't wrap in tuple here.
        (print_one_breakpoint): Always print individual locations.
        For locations, use unnamed tuple.
        (disable_breakpoints_in_unloaded_shlib): Notify that breakpoint
        has changed.
        (create_catchpoint, create_syscall_event_catchpoint): Call
        breakpoint_created obsever.
        (mention): Don't call breakpoint_created observer.
        (create_breakpoint_sal): Call breakpoint_created observer.
        (create_breakpoint, watch_command_1): Likewise.
        (create_ada_exception_breakpoint): Likewise.
        (delete_breakpoint): Call breakpoint_deleted breakpoint.
        (locations_are_equal): New.
        (update_breakpoint_locations): If locations were changed, notify.
        (set_ignore_count, disable_breakpoint, do_enable_breakpoint):
        Call breakpoint_modified observer.

        * mi/mi-cmd-break.c (breakpoint_notify): Adjust.
        (mi_cmd_break_insert): Don't set observers for modify and delete.
        * mi/mi-interp.c (mi_suppress_breakpoint_notifications): New.
        (mi_breakpoint_created, mi_breakpoint_deleted)
        (mi_breakpoint_modified): New.
        (mi_interpreter_init): Hook the above.
        * mi/mi-main.c (mi_cmd_execute): Disable breakpoint notifications
        while -break-* commands are executing.
        * mi/mi-main.h (mi_suppress_breakpoint_notifications): New.
        * mi/mi-out.c (struct ui_out_data): New field original_buffer.
        (mi_redirect): New.
        (mi_ui_out_impl): Hook in mi_redirect.
        (mi_field_skip): True to the name, skip the field, don't output
        a field with an empty value.

        * python/py-breakpoint.c (gdbpy_breakpoint_created)
        (gdbpy_breakpoint_deleted): Adjust.
        * tui/tui-hooks.c (tui_event_create_breakpoint)
        (tui_event_delete_breakpoint, tui_event_modify_breakpoint): Adjust.
@
text
@d525 1
a525 1
annotate_array_section_begin (int index, struct type *elttype)
d529 1
a529 1
      printf_filtered (("\n\032\032array-section-begin %d "), index);
@


1.24
log
@run copyright.sh for 2011.
@
text
@d35 1
a35 1
static void breakpoint_changed (int);
d564 1
a564 1
breakpoint_changed (int bpno)
@


1.23
log
@2010-12-31  Michael Snyder  <msnyder@@vmware.com>

	* annotate.c: Comment cleanup, shorten long lines.
	* arch-utils.c: Ditto.
	* arch-utils.h: Ditto.
	* auxv.c: Ditto.
	* auxv.h: Ditto.
	* ax-gdb.c: Ditto.
	* ax-gdb.h: Ditto.
	* ax-general.c: Ditto.
	* breakpoint.h: Ditto.
	* buildsym.h: Ditto.
@
text
@d3 1
a3 1
   2000, 2007, 2008, 2009, 2010 Free Software Foundation, Inc.
@


1.22
log
@Update copyright year in most headers.

Automatic update by copyright.sh.
@
text
@d29 1
a29 1
/* Prototypes for local functions. */
d60 1
a60 1
	ignore_count_changed = 0;	/* Avoid multiple break annotations. */
d68 1
a68 1
   target actually "stops". */
@


1.21
log
@	* defs.h (strlen_paddr, paddr, paddr_nz): Remove.
	(paddress): Add GDBARCH parameter.
	* utils.c (strlen_paddr, paddr, paddr_nz): Remove.
	(paddress): Add GDBARCH parameter, use it instead of current_gdbarch.
	* ui-out.h (ui_out_field_core_addr): Add GDBARCH parameter.
	* ui-out.c (ui_out_field_core_addr): Add GDBARCH parameter,
	use it instead of current_gdbarch.

	Update calls to ui_out_field_core_addr to pass architecture:
	* ada-lang.c (print_one_exception): Update.
	* breakpoint.c (print_one_breakpoint_location,
	print_one_exception_catchpoint): Update.
	* disasm.c (dump_insns): Update.
	* darwin-nat-info.c (darwin_debug_regions_recurse): Update.
	* mi/mi-main.c (mi_cmd_data_read_memory): Update.
	* mi/mi-symbol-cmds.c: Include "objfiles.h".
	(mi_cmd_symbol_list_lines): Update.
	* stack.c (print_frame_info, print_frame): Update.

	Update callers of paddress to pass architecture:
	* ada-tasks.c (info_task): Update.
	* ada-valprint.c (ada_val_print_1): Update.
	* annotate.c (annotate_source, annotate_frame_begin): Update.
	* breakpoint.c (insert_bp_location, describe_other_breakpoints,
	mention): Update.
	* cli/cli-cmds.c (edit_command, list_command, print_disassembly):
	Update.
	* corefile.c (memory_error): Update.
	* c-valprint.c (print_function_pointer_address, c_val_print): Update.
	* disasm.c (dis_asm_print_address): Update.
	* exec.c (print_section_info): Update.
	* f-valprint.c (f_val_print): Update.
	* infcmd.c: Include "arch-utils.h".
	(jump_command, program_info): Update.
	* linux-fork.c: Include "arch-utils.h".
	(info_forks_command): Update.
	* m2-valprint.c (print_function_pointer_address,
	print_unpacked_pointer, print_variable_at_address,
	m2_val_print): Update.
	* m32r-rom.c (m32r_load_section, m32r_load, m32r_upload_command):
	Update.
	* printcmd.c (print_address, print_address_demangle, address_info):
	Update.
	* p-valprint.c (pascal_val_print): Update.
	* source.c: Include "arch-utils.h".
	(line_info): Update.
	* stack.c (frame_info, print_block_frame_labels): Update.
	* symfile.c (add_symbol_file_command, list_overlays_command): Update.
	* symmisc.c (dump_msymbols, dump_psymtab, dump_symtab_1,
	print_symbol, print_partial_symbols, maintenance_info_psymtabs,
	maintenance_check_symtabs): Update.
	* symtab.c (find_pc_sect_symtab): Update.
	* target.c (deprecated_debug_xfer_memory): Update.
	* tracepoint.c (scope_info): Update.
	* tui/tui-stack.c (tui_make_status_line): Update.
	* valprint.c (val_print_string): Update.

	Update callers of paddr_nz to use paddress instead (keeping
	user-visible output identical):
	* alpha-tdep.c (alpha_heuristic_proc_start): Update.
	* amd64-tdep.c (fixup_riprel, amd64_displaced_step_copy_insn,
	amd64_displaced_step_fixup): Update.
	* arch-utils.c (simple_displaced_step_copy_insn): Update.
	* auxv.c (fprint_target_auxv): Update.
	* breakpoint.c (insert_single_step_breakpoint): Update.
	* buildsym.c (finish_block): Update.
	* cli/cli-dump.c (restore_section_callback): Update.
	* fbsd-nat.c (fbsd_find_memory_regions): Update.
	* frame.c (frame_unwind_register_value): Update.
	* gcore.c (gcore_create_callback): Update.
	* hppa-tdep.c (hppa_frame_cache, hppa_skip_trampoline_code): Update.
	* i386-tdep.c (i386_displaced_step_fixup, i386_record_modrm,
	i386_record_lea_modrm_addr, i386_record_lea_modrm,
	i386_process_record): Update.
	* ia64-tdep.c (ia64_frame_this_id, ia64_sigtramp_frame_this_id,
	ia64_libunwind_frame_this_id, ia64_libunwind_sigtramp_frame_this_id,
	ia64_dummy_id, ia64_access_reg, ia64_access_rse_reg): Update.
	* infrun.c (displaced_step_prepare, displaced_step_fixup,
	handle_inferior_event, insert_step_resume_breakpoint_at_sal,
	insert_longjmp_resume_breakpoint): Update.
	* linux-nat.c (linux_nat_find_memory_regions): Update.
	* linux-record.c (record_linux_system_call): Update.
	* mips-tdep.c (heuristic_proc_start, mips_eabi_push_dummy_call,
	mips_n32n64_push_dummy_call, mips_o32_push_dummy_call,
	mips_o64_push_dummy_call): Update.
	* monitor.c (monitor_error, monitor_remove_breakpoint): Update.
	* record.c (record_arch_list_add_mem, record_wait,
	record_xfer_partial): Update.
	* remote-mips.c (mips_fetch_word, mips_check_lsi_error,
	mips_common_breakpoint): Update.
	* remote-sim.c (gdbsim_xfer_inferior_memory): Update.
	* rs6000-tdep.c (ppc_displaced_step_fixup): Update.
	* solib-som.c (som_current_sos): Update.
	* symfile.c (load_progress, generic_load): Update.
	* symfile-mem.c (add_vsyscall_page): Update.
	* valops.c (value_fetch_lazy): Update.
	* windows-tdep.c (windows_xfer_shared_library): Update.

	Update callers of paddr_nz to use paddress instead (changing
	user-visible output to make it more correct):
	* dwarf2loc.c (locexpr_describe_location): Update.
	* ia64-tdep.c (ia64_memory_insert_breakpoint,
	ia64_memory_remove_breakpoint): Update.
	* jv-valprint.c (java_value_print): Update.
	* m32c-tdep.c (m32c_m16c_address_to_pointer): Update.
	* monitor.c (monitor_read_memory): Update.

	Update callers of paddr to use paddress instead (changing
	user-visible output to make it more correct):
	* arm-tdep.c (arm_push_dummy_call): Update.
	* breakpoint.c (insert_bp_location, create_thread_event_breakpoint,
	create_breakpoint): Update.
	* darwin-nat-info.c (darwin_debug_regions): Update.
	* dcache.c (dcache_info): Update.
	* dsrec.c (load_srec, make_srec): Update.
	* dwarf2-frame.c (dwarf2_restore_rule, execute_cfa_program,
	dwarf2_frame_cache): Update.
	* gcore.c (gcore_copy_callback): Update.
	* gnu-nat.c (gnu_xfer_memory): Update.
	* mips-linux-nat.c (mips_show_dr): Update.
	* monitor.c (monitor_write_memory, monitor_insert_breakpoint,
	monitor_remove_breakpoint): Update.
	* remote.c (compare_sections_command): Update.
	* remote-m32r-sdi.c (m32r_xfer_memory, m32r_insert_breakpoint,
	m32r_remove_breakpoint, m32r_insert_watchpoint,
	m32r_remove_watchpoint): Update.
	* sol-thread.c (info_cb): Update.
	* symfile.c (load_progress): Update.

	Update callers of paddress or paddr_nz to use hex_string instead
	(changes output of internal/error/debug messages only):
	* dwarf2read.c (dump_die_shallow): Update.
	* frame.c (fprint_field, fprint_frame, frame_pc_unwind,
	get_frame_func, create_new_frame): Update.
	* hppa-tdep.c (find_unwind_entry, unwind_command): Update.
	* ia64-tdep.c (get_kernel_table, ia64_find_proc_info_x,
	ia64_get_dyn_info_list): Update.
	* maint.c (maintenance_translate_address): Update.
	* mi/mi-cmd-var.c (mi_cmd_var_create): Update.
	* target.c (target_flash_erase): Update.

	Update callers of paddr/paddr_nz to use phex/phex_nz instead,
	using an appropriate address size.  Remove use of strlen_paddr.
	* exec.c (exec_files_info): Update.
	* i386-nat.c (i386_show_dr): Update.
	* remote.c (remote_flash_erase): Update.
	* m32r-rom.c (m32r_load_section): Update.
	* monitor.c (monitor_vsprintf, monitor_store_register): Update.
	* remote.c (remote_check_symbols, remote_search_memory): Update.
	* remote-mips.c (mips_request, mips_common_breakpoint): Update.
	* scm-valprint.c (scm_ipruk, scm_scmval_print): Update.
	* sh64-tdep.c (sh64_show_media_regs, sh64_show_compact_regs): Update.
	* sh-tdep.c (sh_generic_show_regs, sh3_show_regs, sh2e_show_regs,
	sh2a_show_regs, sh2a_nofpu_show_regs, sh3e_show_regs,
	sh3_dsp_show_regs, sh4_show_regs, sh4_nofpu_show_regs,
	sh_dsp_show_regs): Update.
	* xcoffsolib.c (sharedlibrary_command): Update.


	* maint.c (maint_print_section_info): Add ADDR_SIZE parameter.
	Use hex_string_custom instead of paddr.
	(print_bfd_section_info): Pass address size.
	(print_objfile_section_info): Likewise.

	* annotate.h (annotate_source): Add GDBARCH parameter.
	(annotate_frame_begin): Likewise.
	* annotate.c (annotate_source): Add GDBARCH parameter.
	(annotate_frame_begin): Likewise.
	* source.c (identify_source_line): Update call to annotate_source.
	* stack.c (print_frame_info, print_frame): Update call to
	annotate_frame_begin.

	* breakpoint.c (describe_other_breakpoints): Add GDBARCH parameter.
	(create_breakpoint, create_ada_exception_breakpoint): Update call.

	* stack.c (print_block_frame_labels): Add GDBARCH parameter.
	(print_frame_label_vars): Update call.

	* symmisc.c (print_partial_symbols): Add GDBARCH parameter.
	(dump_psymtab): Update call to print_partial_symbols.
	(struct print_symbol_args): Add GDBARCH member.
	(dump_symtab_1): Set print_symbol_args architecture member.
	(print_symbol): Use it.

	* windows-tdep.h (windows_xfer_shared_library): Add GDBARCH
	parameter.
	* windows-tdep.c (windows_xfer_shared_library): Likewise.
	* i386-cygwin-tdep.c (struct cpms_data): Add GDBARCH member.
	(core_process_module_section): Pass architecture from cpms_data to
	windows_xfer_shared_library.
	(windows_core_xfer_shared_libraries): Initialize cmps_data
	architecture member.
	* windows-nat.c (windows_xfer_shared_libraries): Pass architecture
	to windows_xfer_shared_library.

	* defs.h (print_address): Add GDBARCH parameter.
	* printcmd.c (print_address): Add GDBARCH parameter.
	(print_scalar_formatted, do_examine): Update call.
	* findcmd.c (find_command): Update call.
	* tracepoint.c: Include "arch-utils.h".
	(trace_find_line_command): Update call.
	* tui/tui-disasm.c (tui_disassemble): Update call.

	* value.h (print_address_demangle): Add GDBARCH parameter.
	* printcmd.c (print_address_demangle): Add GDBARCH parameter.
	* c-valprint.c (print_function_pointer_address, c_val_print):
	Update call.
	* f-valprint.c (f_val_print): Update call.
	* gnu-v3-abi.c (gnuv3_print_method_ptr): Update call.
	* jv-valprint.c (java_val_print): Update call.
	* m2-valprint.c (print_function_pointer_address, m2_val_print):
	Update call.
	* p-valprint.c (pascal_val_print): Update call.

	* disasm.c (gdb_disassemble_info): Install architecture into
	di.application_data field.

testsuite/ChangeLog:

	* gdb.threads/tls-shared.exp: Update to locexpr_describe_location
	change to prefix TLS offset in hex with 0x.

doc/ChangeLog:

	* gdbint.texinfo (Item Output Functions): Update signature
	for ui_out_field_core_addr.
@
text
@d3 1
a3 1
   2000, 2007, 2008, 2009 Free Software Foundation, Inc.
@


1.20
log
@        Updated copyright notices for most files.
@
text
@d413 2
a414 1
annotate_source (char *filename, int line, int character, int mid, CORE_ADDR pc)
d422 1
a422 1
		   mid ? "middle" : "beg", paddress (pc));
d426 1
a426 1
annotate_frame_begin (int level, CORE_ADDR pc)
d429 2
a430 1
    printf_filtered (("\n\032\032frame-begin %d %s\n"), level, paddress (pc));
@


1.19
log
@	* annotate.h (deprecated_annotate_starting_hook): Remove.
	(deprecated_annotate_stopped_hook): Remove.
	(deprecated_annotate_exited_hook): Remove.
	* Makefile.in (annotate.o): Depend on observer_h.
	* top.c (deprecated_delete_breakpoint_hook): Remove.
	(deprecated_create_breakpoint_hook): Likewise.
	(deprecated_modify_breakpoint_hook): Likewise.
	* interps.c (clear_interpreter_hooks): Update for removed hooks.
	* breakpoint.c (mention): Don't call removed hook.
	(delete_breakpoint): Likewise.
	(disable_breakpoint): Likewise.
	(do_enable_breakpoint): Likewise.
	* annotate.c: Include observer.h.
	(breakpoint_changed): Change type of argument.
	(_initialize_annotate): Register observers.
	(deprecated_annotate_starting_hook): Remove.
	(deprecated_annotate_stopped_hook): Remove.
	(deprecated_annotate_exited_hook): Remove.
	(annotate_starting): Update for hook removal.
	(annotate_stopped): Likewise.
	(annotate_exited): Likewise.
	* defs.h (deprecated_delete_breakpoint_hook): Remove.
	(deprecated_create_breakpoint_hook): Likewise.
	(deprecated_modify_breakpoint_hook): Likewise.
@
text
@d3 1
a3 1
   2000, 2007, 2008 Free Software Foundation, Inc.
@


1.18
log
@* annotate.c (annotate_thread_changed): New function.
* thread.c (thread_command) : Use it.
* infrun.c (normal_stop): Use it.
@
text
@d26 1
d35 2
a36 1
static void breakpoint_changed (struct breakpoint *);
a37 2
void (*deprecated_annotate_starting_hook) (void);
void (*deprecated_annotate_stopped_hook) (void);
a39 1
void (*deprecated_annotate_exited_hook) (void);
d101 2
a102 10

  if (deprecated_annotate_starting_hook)
    deprecated_annotate_starting_hook ();
  else
    {
      if (annotation_level > 1)
	{
	  printf_filtered (("\n\032\032starting\n"));
	}
    }
d108 2
a109 7
  if (deprecated_annotate_stopped_hook)
    deprecated_annotate_stopped_hook ();
  else
    {
      if (annotation_level > 1)
	printf_filtered (("\n\032\032stopped\n"));
    }
d120 2
a121 7
  if (deprecated_annotate_exited_hook)
    deprecated_annotate_exited_hook ();
  else
    {
      if (annotation_level > 1)
	printf_filtered (("\n\032\032exited %d\n"), exitstatus);
    }
d562 1
a562 1
breakpoint_changed (struct breakpoint *b)
d572 2
a573 2
      deprecated_delete_breakpoint_hook = breakpoint_changed;
      deprecated_modify_breakpoint_hook = breakpoint_changed;
@


1.17
log
@
	* annotate.c (annotate_source, annotate_frame_begin): Replace
	deprecated_print_address_numeric with paddress.
	* cli/cli-cmds.c (list_command, edit_command): Likewise.
	* tui/tui-stack.c (tui_make_status_line): Likewise.

	* defs.h (deprecated_print_address_numeric): Remove.
	* printcmd.c (deprecated_print_address_numeric): Remove.
	* maint.c (maint_print_section_info): Fix comment.
@
text
@d246 9
@


1.16
log
@(annotate_new_thread): New function for new-thread
annotation.
@
text
@d430 2
a431 5
  printf_filtered (("%s:%d:%d:%s:0x"), filename,
		   line, character,
		   mid ? "middle" : "beg");
  deprecated_print_address_numeric (pc, 0, gdb_stdout);
  printf_filtered (("\n"));
d438 1
a438 5
    {
      printf_filtered (("\n\032\032frame-begin %d 0x"), level);
      deprecated_print_address_numeric (pc, 0, gdb_stdout);
      printf_filtered (("\n"));
    }
@


1.15
log
@	Updated copyright notices for most files.
@
text
@d237 9
@


1.14
log
@        Switch the license of all .c files to GPLv3.
        Switch the license of all .h files to GPLv3.
        Switch the license of all .cc files to GPLv3.
@
text
@d3 1
a3 1
   2000, 2007 Free Software Foundation, Inc.
@


1.13
log
@Copyright updates for 2007.
@
text
@d9 1
a9 1
   the Free Software Foundation; either version 2 of the License, or
d18 1
a18 3
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street, Fifth Floor,
   Boston, MA 02110-1301, USA.  */
@


1.12
log
@(annotate_frame_begin): Re-instate frame-begin annotation for level 3
annotations.
@
text
@d3 1
a3 1
   2000 Free Software Foundation, Inc.
@


1.11
log
@
	* breakpoint.c:
	* arm-tdep.c:
	* ia64-tdep.c:
	* i386-tdep.c:
	* hpread.c:
	* hppa-tdep.c:
	* hppa-hpux-tdep.c:
	* gnu-nat.c:
	* gdbtypes.c:
	* gdbarch.h:
	* gdbarch.c:
	* eval.c:
	* dwarf2read.c:
	* dbxread.c:
	* copying:
	* symfile.c:
	* stabsread.c:
	* sh64-tdep.c:
	* sh-tdep.c:
	* s390-tdep.c:
	* rs6000-tdep.c:
	* remote.c:
	* remote-mips.c:
	* mips-tdep.c:
	* mdebugread.c:
	* linux-nat.c:
	* infrun.c:
	* xcoffread.c:
	* win32-nat.c:
	* valops.c:
	* utils.c:
	* tracepoint.c:
	* target.c:
	* symtab.c:
	* c-exp.y:
	* ada-valprint.c:
	* ada-typeprint.c:
	* ada-lex.l:
	* ada-lang.h:
	* ada-lang.c:
	* ada-exp.y:
	* alphafbsd-tdep.c:
	* alphabsd-tdep.h:
	* alphabsd-tdep.c:
	* alphabsd-nat.c:
	* alpha-tdep.h:
	* alpha-tdep.c:
	* alpha-osf1-tdep.c:
	* alpha-nat.c:
	* alpha-mdebug-tdep.c:
	* alpha-linux-tdep.c:
	* alpha-linux-nat.c:
	* aix-thread.c:
	* abug-rom.c:
	* arch-utils.c:
	* annotate.h:
	* annotate.c:
	* amd64obsd-tdep.c:
	* amd64obsd-nat.c:
	* amd64nbsd-tdep.c:
	* amd64nbsd-nat.c:
	* amd64fbsd-tdep.c:
	* amd64fbsd-nat.c:
	* amd64bsd-nat.c:
	* amd64-tdep.h:
	* amd64-tdep.c:
	* amd64-sol2-tdep.c:
	* amd64-nat.h:
	* amd64-nat.c:
	* amd64-linux-tdep.c:
	* amd64-linux-nat.c:
	* alphanbsd-tdep.c:
	* block.h:
	* block.c:
	* bfd-target.h:
	* bfd-target.c:
	* bcache.h:
	* bcache.c:
	* ax.h:
	* ax-general.c:
	* ax-gdb.h:
	* ax-gdb.c:
	* avr-tdep.c:
	* auxv.h:
	* auxv.c:
	* armnbsd-tdep.c:
	* armnbsd-nat.c:
	* arm-tdep.h:
	* arm-linux-nat.c:
	* arch-utils.h:
	* charset.c:
	* call-cmds.h:
	* c-valprint.c:
	* c-typeprint.c:
	* c-lang.h:
	* c-lang.c:
	* buildsym.h:
	* buildsym.c:
	* bsd-uthread.h:
	* bsd-uthread.c:
	* bsd-kvm.h:
	* bsd-kvm.c:
	* breakpoint.h:
	* core-regset.c:
	* core-aout.c:
	* completer.h:
	* completer.c:
	* complaints.h:
	* complaints.c:
	* command.h:
	* coffread.c:
	* coff-solib.h:
	* coff-solib.c:
	* coff-pe-read.h:
	* coff-pe-read.c:
	* cli-out.h:
	* cli-out.c:
	* charset.h:
	* dink32-rom.c:
	* dictionary.h:
	* dictionary.c:
	* demangle.c:
	* defs.h:
	* dcache.h:
	* dcache.c:
	* d10v-tdep.c:
	* cpu32bug-rom.c:
	* cp-valprint.c:
	* cp-support.h:
	* cp-support.c:
	* cp-namespace.c:
	* cp-abi.h:
	* cp-abi.c:
	* corelow.c:
	* corefile.c:
	* environ.c:
	* elfread.c:
	* dwarfread.c:
	* dwarf2loc.c:
	* dwarf2expr.h:
	* dwarf2expr.c:
	* dwarf2-frame.h:
	* dwarf2-frame.c:
	* dve3900-rom.c:
	* dummy-frame.h:
	* dummy-frame.c:
	* dsrec.c:
	* doublest.h:
	* doublest.c:
	* disasm.h:
	* disasm.c:
	* fork-child.c:
	* findvar.c:
	* fbsd-nat.h:
	* fbsd-nat.c:
	* f-valprint.c:
	* f-typeprint.c:
	* f-lang.h:
	* f-lang.c:
	* expression.h:
	* expprint.c:
	* exec.h:
	* exec.c:
	* exceptions.h:
	* exceptions.c:
	* event-top.h:
	* event-top.c:
	* event-loop.h:
	* event-loop.c:
	* gdb.c:
	* gdb-stabs.h:
	* gdb-events.h:
	* gdb-events.c:
	* gcore.c:
	* frv-tdep.h:
	* frv-tdep.c:
	* frv-linux-tdep.c:
	* frame.h:
	* frame.c:
	* frame-unwind.h:
	* frame-unwind.c:
	* frame-base.h:
	* frame-base.c:
	* gdb_vfork.h:
	* gdb_thread_db.h:
	* gdb_string.h:
	* gdb_stat.h:
	* gdb_regex.h:
	* gdb_ptrace.h:
	* gdb_proc_service.h:
	* gdb_obstack.h:
	* gdb_locale.h:
	* gdb_dirent.h:
	* gdb_curses.h:
	* gdb_assert.h:
	* gdbarch.sh:
	* gdb.h:
	* hpux-thread.c:
	* hppabsd-nat.c:
	* hppa-tdep.h:
	* hpacc-abi.c:
	* h8300-tdep.c:
	* gregset.h:
	* go32-nat.c:
	* gnu-v3-abi.c:
	* gnu-v2-abi.h:
	* gnu-v2-abi.c:
	* gnu-nat.h:
	* glibc-tdep.c:
	* gdbtypes.h:
	* gdbcore.h:
	* gdbcmd.h:
	* i386nbsd-tdep.c:
	* i386nbsd-nat.c:
	* i386gnu-tdep.c:
	* i386gnu-nat.c:
	* i386fbsd-tdep.c:
	* i386fbsd-nat.c:
	* i386bsd-tdep.c:
	* i386bsd-nat.h:
	* i386bsd-nat.c:
	* i386-tdep.h:
	* i386-sol2-nat.c:
	* i386-nto-tdep.c:
	* i386-nat.c:
	* i386-linux-tdep.h:
	* i386-linux-tdep.c:
	* i386-linux-nat.c:
	* i386-cygwin-tdep.c:
	* inf-ttrace.c:
	* inf-ptrace.h:
	* inf-ptrace.c:
	* inf-loop.h:
	* inf-loop.c:
	* inf-child.h:
	* inf-child.c:
	* ia64-tdep.h:
	* ia64-linux-nat.c:
	* i387-tdep.h:
	* i387-tdep.c:
	* i386v4-nat.c:
	* i386v-nat.c:
	* i386obsd-tdep.c:
	* i386obsd-nat.c:
	* kod.c:
	* jv-valprint.c:
	* jv-typeprint.c:
	* jv-lang.h:
	* jv-lang.c:
	* irix5-nat.c:
	* iq2000-tdep.c:
	* interps.h:
	* interps.c:
	* inftarg.c:
	* inflow.h:
	* inflow.c:
	* inferior.h:
	* infcmd.c:
	* infcall.h:
	* infcall.c:
	* inf-ttrace.h:
	* m32r-tdep.h:
	* m32r-tdep.c:
	* m32r-rom.c:
	* m32r-linux-tdep.c:
	* m32r-linux-nat.c:
	* m2-valprint.c:
	* m2-typeprint.c:
	* m2-lang.h:
	* m2-lang.c:
	* lynx-nat.c:
	* linux-thread-db.c:
	* linux-nat.h:
	* linespec.c:
	* libunwind-frame.h:
	* libunwind-frame.c:
	* language.h:
	* language.c:
	* macroexp.c:
	* macrocmd.c:
	* m88kbsd-nat.c:
	* m88k-tdep.h:
	* m88k-tdep.c:
	* m68klinux-tdep.c:
	* m68klinux-nat.c:
	* m68kbsd-tdep.c:
	* m68kbsd-nat.c:
	* m68k-tdep.h:
	* m68k-tdep.c:
	* mips-linux-nat.c:
	* mips-irix-tdep.c:
	* minsyms.c:
	* memattr.h:
	* memattr.c:
	* mem-break.c:
	* mdebugread.h:
	* main.h:
	* main.c:
	* macrotab.h:
	* macrotab.c:
	* macroscope.h:
	* macroscope.c:
	* macroexp.h:
	* nbsd-tdep.c:
	* mt-tdep.c:
	* monitor.h:
	* monitor.c:
	* mn10300-tdep.h:
	* mn10300-tdep.c:
	* mn10300-linux-tdep.c:
	* mipsv4-nat.c:
	* mipsread.c:
	* mipsnbsd-tdep.h:
	* mipsnbsd-tdep.c:
	* mipsnbsd-nat.c:
	* mips64obsd-tdep.c:
	* mips64obsd-nat.c:
	* mips-tdep.h:
	* mips-mdebug-tdep.c:
	* mips-linux-tdep.c:
	* osabi.h:
	* osabi.c:
	* ocd.h:
	* ocd.c:
	* observer.c:
	* objfiles.h:
	* objfiles.c:
	* objc-lang.h:
	* objc-lang.c:
	* objc-exp.y:
	* nto-tdep.h:
	* nto-tdep.c:
	* nto-procfs.c:
	* nlmread.c:
	* nbsd-tdep.h:
	* ppcobsd-tdep.c:
	* ppcobsd-nat.c:
	* ppcnbsd-tdep.h:
	* ppcnbsd-tdep.c:
	* ppcnbsd-nat.c:
	* ppcbug-rom.c:
	* ppc-tdep.h:
	* ppc-sysv-tdep.c:
	* ppc-linux-tdep.c:
	* ppc-linux-nat.c:
	* ppc-bdm.c:
	* parser-defs.h:
	* parse.c:
	* p-valprint.c:
	* p-typeprint.c:
	* p-lang.h:
	* p-lang.c:
	* remote-fileio.h:
	* remote-fileio.c:
	* remote-est.c:
	* remote-e7000.c:
	* regset.h:
	* regset.c:
	* reggroups.h:
	* reggroups.c:
	* regcache.h:
	* regcache.c:
	* proc-why.c:
	* proc-service.c:
	* proc-events.c:
	* printcmd.c:
	* ppcobsd-tdep.h:
	* sentinel-frame.h:
	* sentinel-frame.c:
	* scm-valprint.c:
	* scm-tags.h:
	* scm-lang.h:
	* scm-lang.c:
	* scm-exp.c:
	* s390-tdep.h:
	* rom68k-rom.c:
	* remote.h:
	* remote-utils.c:
	* remote-st.c:
	* remote-sim.c:
	* remote-sds.c:
	* remote-rdp.c:
	* remote-rdi.c:
	* remote-hms.c:
	* sim-regno.h:
	* shnbsd-tdep.h:
	* shnbsd-tdep.c:
	* shnbsd-nat.c:
	* sh-tdep.h:
	* serial.h:
	* serial.c:
	* ser-unix.h:
	* ser-unix.c:
	* ser-tcp.c:
	* ser-pipe.c:
	* ser-go32.c:
	* ser-e7kpc.c:
	* ser-base.h:
	* ser-base.c:
	* solib.c:
	* solib-svr4.h:
	* solib-svr4.c:
	* solib-sunos.c:
	* solib-som.h:
	* solib-som.c:
	* solib-pa64.h:
	* solib-pa64.c:
	* solib-osf.c:
	* solib-null.c:
	* solib-legacy.c:
	* solib-irix.c:
	* solib-frv.c:
	* solib-aix5.c:
	* sol-thread.c:
	* sparc64-linux-tdep.c:
	* sparc64-linux-nat.c:
	* sparc-tdep.h:
	* sparc-tdep.c:
	* sparc-sol2-tdep.c:
	* sparc-sol2-nat.c:
	* sparc-nat.h:
	* sparc-nat.c:
	* sparc-linux-tdep.c:
	* sparc-linux-nat.c:
	* source.h:
	* source.c:
	* somread.c:
	* solist.h:
	* solib.h:
	* std-regs.c:
	* stack.h:
	* stack.c:
	* stabsread.h:
	* sparcobsd-tdep.c:
	* sparcnbsd-tdep.c:
	* sparcnbsd-nat.c:
	* sparc64obsd-tdep.c:
	* sparc64nbsd-tdep.c:
	* sparc64nbsd-nat.c:
	* sparc64fbsd-tdep.c:
	* sparc64fbsd-nat.c:
	* sparc64-tdep.h:
	* sparc64-tdep.c:
	* sparc64-sol2-tdep.c:
	* sparc64-nat.c:
	* ui-file.c:
	* typeprint.h:
	* typeprint.c:
	* tramp-frame.h:
	* tramp-frame.c:
	* trad-frame.h:
	* trad-frame.c:
	* tracepoint.h:
	* top.c:
	* tobs.inc:
	* thread.c:
	* terminal.h:
	* target.h:
	* symfile.h:
	* stop-gdb.c:
	* vaxbsd-nat.c:
	* vax-tdep.h:
	* vax-tdep.c:
	* vax-nat.c:
	* varobj.h:
	* varobj.c:
	* value.h:
	* value.c:
	* valprint.h:
	* valprint.c:
	* v850-tdep.c:
	* uw-thread.c:
	* user-regs.c:
	* ui-out.h:
	* ui-out.c:
	* ui-file.h:
	* xcoffsolib.h:
	* xcoffsolib.c:
	* wrapper.c:
	* wince.c:
	* wince-stub.h:
	* wince-stub.c:
	* vaxobsd-tdep.c:
	* vaxnbsd-tdep.c:
	* gdb_gcore.sh:
	* copying.c:
	* configure.ac:
	* aclocal.m4:
	* acinclude.m4:
	* reply_mig_hack.awk:
	* observer.sh:
	* gdb_mbuild.sh:
	* arm-linux-tdep.c:
	* blockframe.c:
	* dbug-rom.c:
	* environ.h:
	* dwarf2loc.h:
	* gdb-events.sh:
	* glibc-tdep.h:
	* gdb_wait.h:
	* gdbthread.h:
	* i386-sol2-tdep.c:
	* hppabsd-tdep.c:
	* hppa-linux-nat.c:
	* hppa-hpux-nat.c:
	* ia64-linux-tdep.c:
	* infptrace.c:
	* linespec.h:
	* maint.c:
	* mips-mdebug-tdep.h:
	* remote-m32r-sdi.c:
	* s390-nat.c:
	* rs6000-nat.c:
	* remote-utils.h:
	* sh3-rom.c:
	* sh-linux-tdep.c:
	* top.h:
	* symtab.h:
	* symmisc.c:
	* symfile-mem.c:
	* srec.h:
	* user-regs.h:
	* version.h:
	* valarith.c:
	* xstormy16-tdep.c:
	* wrapper.h:
	* Makefile.in:
	* f-exp.y:
	* cris-tdep.c:
	* cp-name-parser.y:
	* procfs.c:
	* proc-utils.h:
	* proc-flags.c:
	* proc-api.c:
	* p-exp.y:
	* m68hc11-tdep.c:
	* m2-exp.y:
	* kod.h:
	* kod-cisco.c:
	* jv-exp.y:
	* hppa-linux-tdep.c: Add (c) after Copyright.  Update the FSF
	address.
@
text
@d433 1
a433 1
  if (annotation_level == 2)
@


1.11.14.1
log
@Changes from nickrob-async-20060828-mergepoint.
@
text
@d433 1
a433 1
  if (annotation_level > 1)
@


1.10
log
@* annotate.c (breakpoints_changed, annotate_frames_invalid)
(_initialize_annotate): Print breakpoints-invalid and
frames-invalid for level 2 annotations only.

* gdb.base/annota3.exp, gdb.cp/annota3.exp: The annotations
frames-invalid and breakpoints-invalid are no longer generated
with level 3 so don't expect them in the output.
@
text
@d2 1
a2 1
   Copyright 1986, 1989, 1990, 1991, 1992, 1994, 1995, 1996, 1998, 1999,
d19 2
a20 2
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */
@


1.9
log
@2005-02-14  Andrew Cagney  <cagney@@gnu.org>

	* utils.c (paddress): New function.
	* defs.h (paddress): Declare.
	* printcmd.c (deprecated_print_address_numeric): Rename
	print_address_numeric, call paddress.
	* valprint.c, ui-out.c, tui/tui-stack.c, tracepoint.c: Update.
	* symmisc.c, symfile.c stack.c, p-valprint.c, printcmd.c: Update.
	* maint.c, m32r-rom.c, infcmd.c, f-valprint.c, exec.c: Update.
	* dwarf2read.c, dve3900-rom.c, defs.h, c-valprint.c: Update.
	* corefile.c, cli/cli-cmds.c, breakpoint.c, annotate.c: Update.
	* ada-valprint.c: Update.
@
text
@d58 1
a58 1
  if (annotation_level > 1)
d231 1
a231 1
  if (annotation_level > 1)
d580 1
a580 1
  if (annotation_level > 1)
@


1.8
log
@2005-02-11  Andrew Cagney  <cagney@@gnu.org>

	Mark up some of printf_filtered and printf_unfiltered.
	* ada-lang.c, annotate.c, arch-utils.c, breakpoint.c: Update.
	* corelow.c, cp-namespace.c, cp-support.c, dcache.c: Update.
	* demangle.c, dsrec.c, dwarf2read.c, dwarfread.c: Update.
	* event-loop.c, event-top.c, exec.c, f-valprint.c: Update.
	* gdbtypes.c, inf-loop.c, inf-ptrace.c, inf-ttrace.c: Update.
	* infcmd.c, inflow.c, infrun.c, inftarg.c, language.c: Update.
	* linespec.c, linux-nat.c, linux-thread-db.c, maint.c: Update.
	* mdebugread.c, memattr.c, monitor.c, objc-lang.c: Update.
	* ocd.c, osabi.c, printcmd.c, procfs.c, regcache.c: Update.
	* remote.c, solib-som.c, solib.c, somsolib.c, source.c: Update.
	* stack.c, symfile.c, symmisc.c, target.c, thread.c: Update.
	* top.c, utils.c, valprint.c, value.c, cli/cli-cmds.c: Update.
	* cli/cli-dump.c, cli/cli-logging.c, tui/tui-hooks.c: Update.
	* tui/tui-regs.c, tui/tui-win.c: Update.
@
text
@d426 1
a426 1
  print_address_numeric (pc, 0, gdb_stdout);
d436 1
a436 1
      print_address_numeric (pc, 0, gdb_stdout);
@


1.7
log
@2004-04-21  Andrew Cagney  <cagney@@redhat.com>

	* annotate.h (deprecated_annotate_starting_hook)
	(deprecated_annotate_stopped_hook)
	(deprecated_annotate_exited_hook)
	(deprecated_annotate_signal_hook)
	(deprecated_annotate_signalled_hook): Deprecate.
	* tracepoint.h (deprecated_create_tracepoint_hook)
	(deprecated_delete_tracepoint_hook)
	(deprecated_modify_tracepoint_hook)
	(deprecated_trace_find_hook)
	(deprecated_trace_start_stop_hook): Deprecate.
	* target.h (deprecated_target_new_objfile_hook): Deprecate.
	* remote.h (deprecated_target_resume_hook)
	(deprecated_target_wait_loop_hook): Deprecate.
	* gdbcore.h (deprecated_exec_file_display_hook)
	(deprecated_file_changed_hook): Deprecate.
	* frame.h (deprecated_selected_frame_level_changed_hook): Deprecate.
	* defs.h (deprecated_modify_breakpoint_hook)
	(deprecated_command_loop_hook, deprecated_show_load_progress)
	(deprecated_print_frame_info_listing_hook)
	(deprecated_query_hook, deprecated_warning_hook)
	(deprecated_flush_hook, deprecated_create_breakpoint_hook)
	(deprecated_delete_breakpoint_hook)
	(deprecated_interactive_hook, deprecated_registers_changed_hook)
	(deprecated_readline_begin_hook, deprecated_readline_hook)
	(deprecated_readline_end_hook, deprecated_register_changed_hook)
	(deprecated_memory_changed_hook, deprecated_init_ui_hook)
	(deprecated_context_hook, deprecated_target_wait_hook)
	(deprecated_attach_hook, deprecated_detach_hook)
	(deprecated_call_command_hook, deprecated_set_hook)
	(deprecated_error_hook, deprecated_error_begin_hook)
	(deprecated_ui_load_progress_hook): Deprecate.
	* valops.c, uw-thread.c, utils.c, tui/tui-io.c: Update.
	* tui/tui-hooks.c, tracepoint.c, top.c, thread-db.c: Update.
	* target.c, symfile.c, stack.c, sol-thread.c, rs6000-nat.c: Update.
	* remote.c, remote-mips.c, regcache.c, mi/mi-interp.c: Update.
	* main.c, interps.c, infcmd.c, hpux-thread.c, frame.c: Update.
	* exec.c, dsrec.c, d10v-tdep.c, corefile.c, complaints.c: Update.
	* cli/cli-script.c, cli/cli-setshow.c, breakpoint.c: Update.
	* annotate.c, aix-thread.c: Update.
@
text
@d50 1
a50 1
    printf_filtered ("*");
d52 1
a52 1
    printf_filtered ("-");
d61 1
a61 1
      printf_unfiltered ("\n\032\032breakpoints-invalid\n");
d84 1
a84 1
    printf_filtered ("\n\032\032breakpoint %d\n", num);
d91 1
a91 1
    printf_filtered ("\n\032\032catchpoint %d\n", num);
d98 1
a98 1
    printf_filtered ("\n\032\032watchpoint %d\n", num);
d111 1
a111 1
	  printf_filtered ("\n\032\032starting\n");
d124 1
a124 1
	printf_filtered ("\n\032\032stopped\n");
d141 1
a141 1
	printf_filtered ("\n\032\032exited %d\n", exitstatus);
d152 1
a152 1
    printf_filtered ("\n\032\032signalled\n");
d159 1
a159 1
    printf_filtered ("\n\032\032signal-name\n");
d166 1
a166 1
    printf_filtered ("\n\032\032signal-name-end\n");
d173 1
a173 1
    printf_filtered ("\n\032\032signal-string\n");
d180 1
a180 1
    printf_filtered ("\n\032\032signal-string-end\n");
d190 1
a190 1
    printf_filtered ("\n\032\032signal\n");
d197 1
a197 1
    printf_filtered ("\n\032\032breakpoints-headers\n");
d204 1
a204 1
    printf_filtered ("\n\032\032field %d\n", num);
d211 1
a211 1
    printf_filtered ("\n\032\032breakpoints-table\n");
d218 1
a218 1
    printf_filtered ("\n\032\032record\n");
d225 1
a225 1
    printf_filtered ("\n\032\032breakpoints-table-end\n");
d234 1
a234 1
      printf_unfiltered ("\n\032\032frames-invalid\n");
d243 1
a243 1
      printf_filtered ("\n\032\032field-begin ");
d245 1
a245 1
      printf_filtered ("\n");
d253 1
a253 1
    printf_filtered ("\n\032\032field-name-end\n");
d260 1
a260 1
    printf_filtered ("\n\032\032field-value\n");
d267 1
a267 1
    printf_filtered ("\n\032\032field-end\n");
d274 1
a274 1
    printf_filtered ("\n\032\032quit\n");
d281 1
a281 1
    printf_filtered ("\n\032\032error\n");
d296 1
a296 1
      printf_filtered ("\n\032\032value-history-begin %d ", histindex);
d298 1
a298 1
      printf_filtered ("\n");
d307 1
a307 1
      printf_filtered ("\n\032\032value-begin ");
d309 1
a309 1
      printf_filtered ("\n");
d317 1
a317 1
    printf_filtered ("\n\032\032value-history-value\n");
d324 1
a324 1
    printf_filtered ("\n\032\032value-history-end\n");
d331 1
a331 1
    printf_filtered ("\n\032\032value-end\n");
d338 1
a338 1
    printf_filtered ("\n\032\032display-begin\n");
d345 1
a345 1
    printf_filtered ("\n\032\032display-number-end\n");
d352 1
a352 1
    printf_filtered ("\n\032\032display-format\n");
d359 1
a359 1
    printf_filtered ("\n\032\032display-expression\n");
d366 1
a366 1
    printf_filtered ("\n\032\032display-expression-end\n");
d373 1
a373 1
    printf_filtered ("\n\032\032display-value\n");
d380 1
a380 1
    printf_filtered ("\n\032\032display-end\n");
d387 1
a387 1
    printf_filtered ("\n\032\032arg-begin\n");
d394 1
a394 1
    printf_filtered ("\n\032\032arg-name-end\n");
d402 1
a402 1
      printf_filtered ("\n\032\032arg-value ");
d404 1
a404 1
      printf_filtered ("\n");
d412 1
a412 1
    printf_filtered ("\n\032\032arg-end\n");
d419 1
a419 1
    printf_filtered ("\n\032\032source ");
d421 1
a421 1
    printf_filtered ("\032\032");
d423 1
a423 1
  printf_filtered ("%s:%d:%d:%s:0x", filename,
d427 1
a427 1
  printf_filtered ("\n");
d435 1
a435 1
      printf_filtered ("\n\032\032frame-begin %d 0x", level);
d437 1
a437 1
      printf_filtered ("\n");
d445 1
a445 1
    printf_filtered ("\n\032\032function-call\n");
d452 1
a452 1
    printf_filtered ("\n\032\032signal-handler-caller\n");
d459 1
a459 1
    printf_filtered ("\n\032\032frame-address\n");
d466 1
a466 1
    printf_filtered ("\n\032\032frame-address-end\n");
d473 1
a473 1
    printf_filtered ("\n\032\032frame-function-name\n");
d480 1
a480 1
    printf_filtered ("\n\032\032frame-args\n");
d487 1
a487 1
    printf_filtered ("\n\032\032frame-source-begin\n");
d494 1
a494 1
    printf_filtered ("\n\032\032frame-source-file\n");
d501 1
a501 1
    printf_filtered ("\n\032\032frame-source-file-end\n");
d508 1
a508 1
    printf_filtered ("\n\032\032frame-source-line\n");
d515 1
a515 1
    printf_filtered ("\n\032\032frame-source-end\n");
d522 1
a522 1
    printf_filtered ("\n\032\032frame-where\n");
d529 1
a529 1
    printf_filtered ("\n\032\032frame-end\n");
d537 1
a537 1
      printf_filtered ("\n\032\032array-section-begin %d ", index);
d539 1
a539 1
      printf_filtered ("\n");
d547 1
a547 1
    printf_filtered ("\n\032\032elt-rep %u\n", repcount);
d554 1
a554 1
    printf_filtered ("\n\032\032elt-rep-end\n");
d561 1
a561 1
    printf_filtered ("\n\032\032elt\n");
d568 1
a568 1
    printf_filtered ("\n\032\032array-section-end\n");
@


1.6
log
@2003-07-28  Andrew Cagney  <cagney@@redhat.com>

	* annotate.c (annotate_breakpoints_headers): Restrict annotation
	to level 2.
	(annotate_breakpoints_table, annotate_record): Ditto.
	(annotate_breakpoints_table_end, annotate_field_begin): Ditto.
	(annotate_field_name_end, annotate_field_value): Ditto.
	(annotate_field_end, annotate_frame_source_begin): Ditto.
	(annotate_frame_source_file, annotate_frame_source_file_end): Ditto.
	(annotate_frame_source_line, annotate_frame_source_end): Ditto.
	(annotate_frame_begin, annotate_frame_function_name): Ditto.
	(annotate_frame_address_end, annotate_frame_address): Ditto.
	(annotate_frame_args, annotate_frame_end): Ditto.
	(annotate_frame_where, annotate_arg_begin): Ditto.
	(annotate_arg_name_end, annotate_arg_value): Ditto.
	(annotate_arg_end, annotate_signal_handler_caller): Ditto.
	(annotate_function_call, annotate_signal_name): Ditto.
	(annotate_signal_string, annotate_signal_name_end): Ditto.
	(annotate_signal_string_end, annotate_value_history_begin): Ditto.
	(annotate_value_begin, annotate_value_history_value): Ditto.
	(annotate_value_history_end, annotate_value_end): Ditto.
	(annotate_display_begin, annotate_display_number_end): Ditto.
	(annotate_display_format, annotate_display_expression): Ditto.
	(annotate_display_expression_end, annotate_display_value): Ditto.
	(annotate_display_end, annotate_array_section_begin): Ditto.
	(annotate_elt_rep, annotate_elt_rep_end): Ditto.
	(annotate_elt, annotate_array_section_end): Ditto.
@
text
@d38 5
a42 5
void (*annotate_starting_hook) (void);
void (*annotate_stopped_hook) (void);
void (*annotate_signalled_hook) (void);
void (*annotate_signal_hook) (void);
void (*annotate_exited_hook) (void);
d105 2
a106 2
  if (annotate_starting_hook)
    annotate_starting_hook ();
d119 2
a120 2
  if (annotate_stopped_hook)
    annotate_stopped_hook ();
d136 2
a137 2
  if (annotate_exited_hook)
    annotate_exited_hook ();
d148 2
a149 2
  if (annotate_signalled_hook)
    annotate_signalled_hook ();
d186 2
a187 2
  if (annotate_signal_hook)
    annotate_signal_hook ();
d582 2
a583 2
      delete_breakpoint_hook = breakpoint_changed;
      modify_breakpoint_hook = breakpoint_changed;
@


1.6.12.1
log
@Merge mainline to intercu branch - 2004-09-15
@
text
@d38 5
a42 5
void (*deprecated_annotate_starting_hook) (void);
void (*deprecated_annotate_stopped_hook) (void);
void (*deprecated_annotate_signalled_hook) (void);
void (*deprecated_annotate_signal_hook) (void);
void (*deprecated_annotate_exited_hook) (void);
d105 2
a106 2
  if (deprecated_annotate_starting_hook)
    deprecated_annotate_starting_hook ();
d119 2
a120 2
  if (deprecated_annotate_stopped_hook)
    deprecated_annotate_stopped_hook ();
d136 2
a137 2
  if (deprecated_annotate_exited_hook)
    deprecated_annotate_exited_hook ();
d148 2
a149 2
  if (deprecated_annotate_signalled_hook)
    deprecated_annotate_signalled_hook ();
d186 2
a187 2
  if (deprecated_annotate_signal_hook)
    deprecated_annotate_signal_hook ();
d582 2
a583 2
      deprecated_delete_breakpoint_hook = breakpoint_changed;
      deprecated_modify_breakpoint_hook = breakpoint_changed;
@


1.5
log
@Update/correct copyright notices.
@
text
@d158 1
a158 1
  if (annotation_level > 1)
d165 1
a165 1
  if (annotation_level > 1)
d172 1
a172 1
  if (annotation_level > 1)
d179 1
a179 1
  if (annotation_level > 1)
d196 1
a196 1
  if (annotation_level > 1)
d203 1
a203 1
  if (annotation_level > 1)
d210 1
a210 1
  if (annotation_level > 1)
d217 1
a217 1
  if (annotation_level > 1)
d224 1
a224 1
  if (annotation_level > 1)
d241 1
a241 1
  if (annotation_level > 1)
d252 1
a252 1
  if (annotation_level > 1)
d259 1
a259 1
  if (annotation_level > 1)
d266 1
a266 1
  if (annotation_level > 1)
d294 1
a294 1
  if (annotation_level > 1)
d305 1
a305 1
  if (annotation_level > 1)
d316 1
a316 1
  if (annotation_level > 1)
d323 1
a323 1
  if (annotation_level > 1)
d330 1
a330 1
  if (annotation_level > 1)
d337 1
a337 1
  if (annotation_level > 1)
d344 1
a344 1
  if (annotation_level > 1)
d351 1
a351 1
  if (annotation_level > 1)
d358 1
a358 1
  if (annotation_level > 1)
d365 1
a365 1
  if (annotation_level > 1)
d372 1
a372 1
  if (annotation_level > 1)
d379 1
a379 1
  if (annotation_level > 1)
d386 1
a386 1
  if (annotation_level > 1)
d393 1
a393 1
  if (annotation_level > 1)
d400 1
a400 1
  if (annotation_level > 1)
d411 1
a411 1
  if (annotation_level > 1)
d433 1
a433 1
  if (annotation_level > 1)
d444 1
a444 1
  if (annotation_level > 1)
d451 1
a451 1
  if (annotation_level > 1)
d458 1
a458 1
  if (annotation_level > 1)
d465 1
a465 1
  if (annotation_level > 1)
d472 1
a472 1
  if (annotation_level > 1)
d479 1
a479 1
  if (annotation_level > 1)
d486 1
a486 1
  if (annotation_level > 1)
d493 1
a493 1
  if (annotation_level > 1)
d500 1
a500 1
  if (annotation_level > 1)
d507 1
a507 1
  if (annotation_level > 1)
d514 1
a514 1
  if (annotation_level > 1)
d521 1
a521 1
  if (annotation_level > 1)
d528 1
a528 1
  if (annotation_level > 1)
d535 1
a535 1
  if (annotation_level > 1)
d546 1
a546 1
  if (annotation_level > 1)
d553 1
a553 1
  if (annotation_level > 1)
d560 1
a560 1
  if (annotation_level > 1)
d567 1
a567 1
  if (annotation_level > 1)
@


1.5.26.1
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@d158 1
a158 1
  if (annotation_level == 2)
d165 1
a165 1
  if (annotation_level == 2)
d172 1
a172 1
  if (annotation_level == 2)
d179 1
a179 1
  if (annotation_level == 2)
d196 1
a196 1
  if (annotation_level == 2)
d203 1
a203 1
  if (annotation_level == 2)
d210 1
a210 1
  if (annotation_level == 2)
d217 1
a217 1
  if (annotation_level == 2)
d224 1
a224 1
  if (annotation_level == 2)
d241 1
a241 1
  if (annotation_level == 2)
d252 1
a252 1
  if (annotation_level == 2)
d259 1
a259 1
  if (annotation_level == 2)
d266 1
a266 1
  if (annotation_level == 2)
d294 1
a294 1
  if (annotation_level == 2)
d305 1
a305 1
  if (annotation_level == 2)
d316 1
a316 1
  if (annotation_level == 2)
d323 1
a323 1
  if (annotation_level == 2)
d330 1
a330 1
  if (annotation_level == 2)
d337 1
a337 1
  if (annotation_level == 2)
d344 1
a344 1
  if (annotation_level == 2)
d351 1
a351 1
  if (annotation_level == 2)
d358 1
a358 1
  if (annotation_level == 2)
d365 1
a365 1
  if (annotation_level == 2)
d372 1
a372 1
  if (annotation_level == 2)
d379 1
a379 1
  if (annotation_level == 2)
d386 1
a386 1
  if (annotation_level == 2)
d393 1
a393 1
  if (annotation_level == 2)
d400 1
a400 1
  if (annotation_level == 2)
d411 1
a411 1
  if (annotation_level == 2)
d433 1
a433 1
  if (annotation_level == 2)
d444 1
a444 1
  if (annotation_level == 2)
d451 1
a451 1
  if (annotation_level == 2)
d458 1
a458 1
  if (annotation_level == 2)
d465 1
a465 1
  if (annotation_level == 2)
d472 1
a472 1
  if (annotation_level == 2)
d479 1
a479 1
  if (annotation_level == 2)
d486 1
a486 1
  if (annotation_level == 2)
d493 1
a493 1
  if (annotation_level == 2)
d500 1
a500 1
  if (annotation_level == 2)
d507 1
a507 1
  if (annotation_level == 2)
d514 1
a514 1
  if (annotation_level == 2)
d521 1
a521 1
  if (annotation_level == 2)
d528 1
a528 1
  if (annotation_level == 2)
d535 1
a535 1
  if (annotation_level == 2)
d546 1
a546 1
  if (annotation_level == 2)
d553 1
a553 1
  if (annotation_level == 2)
d560 1
a560 1
  if (annotation_level == 2)
d567 1
a567 1
  if (annotation_level == 2)
@


1.5.24.1
log
@2003-08-05  David Carlton  <carlton@@kealia.com>

	* configure.in (build_warnings): Delete -Wformat-nonliteral.
	* configure (build_warnings): Ditto.

	* Merge with mainline; tag is carlton_dictionary-20030805-merge.
@
text
@d158 1
a158 1
  if (annotation_level == 2)
d165 1
a165 1
  if (annotation_level == 2)
d172 1
a172 1
  if (annotation_level == 2)
d179 1
a179 1
  if (annotation_level == 2)
d196 1
a196 1
  if (annotation_level == 2)
d203 1
a203 1
  if (annotation_level == 2)
d210 1
a210 1
  if (annotation_level == 2)
d217 1
a217 1
  if (annotation_level == 2)
d224 1
a224 1
  if (annotation_level == 2)
d241 1
a241 1
  if (annotation_level == 2)
d252 1
a252 1
  if (annotation_level == 2)
d259 1
a259 1
  if (annotation_level == 2)
d266 1
a266 1
  if (annotation_level == 2)
d294 1
a294 1
  if (annotation_level == 2)
d305 1
a305 1
  if (annotation_level == 2)
d316 1
a316 1
  if (annotation_level == 2)
d323 1
a323 1
  if (annotation_level == 2)
d330 1
a330 1
  if (annotation_level == 2)
d337 1
a337 1
  if (annotation_level == 2)
d344 1
a344 1
  if (annotation_level == 2)
d351 1
a351 1
  if (annotation_level == 2)
d358 1
a358 1
  if (annotation_level == 2)
d365 1
a365 1
  if (annotation_level == 2)
d372 1
a372 1
  if (annotation_level == 2)
d379 1
a379 1
  if (annotation_level == 2)
d386 1
a386 1
  if (annotation_level == 2)
d393 1
a393 1
  if (annotation_level == 2)
d400 1
a400 1
  if (annotation_level == 2)
d411 1
a411 1
  if (annotation_level == 2)
d433 1
a433 1
  if (annotation_level == 2)
d444 1
a444 1
  if (annotation_level == 2)
d451 1
a451 1
  if (annotation_level == 2)
d458 1
a458 1
  if (annotation_level == 2)
d465 1
a465 1
  if (annotation_level == 2)
d472 1
a472 1
  if (annotation_level == 2)
d479 1
a479 1
  if (annotation_level == 2)
d486 1
a486 1
  if (annotation_level == 2)
d493 1
a493 1
  if (annotation_level == 2)
d500 1
a500 1
  if (annotation_level == 2)
d507 1
a507 1
  if (annotation_level == 2)
d514 1
a514 1
  if (annotation_level == 2)
d521 1
a521 1
  if (annotation_level == 2)
d528 1
a528 1
  if (annotation_level == 2)
d535 1
a535 1
  if (annotation_level == 2)
d546 1
a546 1
  if (annotation_level == 2)
d553 1
a553 1
  if (annotation_level == 2)
d560 1
a560 1
  if (annotation_level == 2)
d567 1
a567 1
  if (annotation_level == 2)
@


1.5.60.1
log
@2003-07-28  Andrew Cagney  <cagney@@redhat.com>

	* annotate.c (annotate_breakpoints_headers): Restrict annotation
	to level 2.
	(annotate_breakpoints_table, annotate_record): Ditto.
	(annotate_breakpoints_table_end, annotate_field_begin): Ditto.
	(annotate_field_name_end, annotate_field_value): Ditto.
	(annotate_field_end, annotate_frame_source_begin): Ditto.
	(annotate_frame_source_file, annotate_frame_source_file_end): Ditto.
	(annotate_frame_source_line, annotate_frame_source_end): Ditto.
	(annotate_frame_begin, annotate_frame_function_name): Ditto.
	(annotate_frame_address_end, annotate_frame_address): Ditto.
	(annotate_frame_args, annotate_frame_end): Ditto.
	(annotate_frame_where, annotate_arg_begin): Ditto.
	(annotate_arg_name_end, annotate_arg_value): Ditto.
	(annotate_arg_end, annotate_signal_handler_caller): Ditto.
	(annotate_function_call, annotate_signal_name): Ditto.
	(annotate_signal_string, annotate_signal_name_end): Ditto.
	(annotate_signal_string_end, annotate_value_history_begin): Ditto.
	(annotate_value_begin, annotate_value_history_value): Ditto.
	(annotate_value_history_end, annotate_value_end): Ditto.
	(annotate_display_begin, annotate_display_number_end): Ditto.
	(annotate_display_format, annotate_display_expression): Ditto.
	(annotate_display_expression_end, annotate_display_value): Ditto.
	(annotate_display_end, annotate_array_section_begin): Ditto.
	(annotate_elt_rep, annotate_elt_rep_end): Ditto.
	(annotate_elt, annotate_array_section_end): Ditto.
@
text
@d158 1
a158 1
  if (annotation_level == 2)
d165 1
a165 1
  if (annotation_level == 2)
d172 1
a172 1
  if (annotation_level == 2)
d179 1
a179 1
  if (annotation_level == 2)
d196 1
a196 1
  if (annotation_level == 2)
d203 1
a203 1
  if (annotation_level == 2)
d210 1
a210 1
  if (annotation_level == 2)
d217 1
a217 1
  if (annotation_level == 2)
d224 1
a224 1
  if (annotation_level == 2)
d241 1
a241 1
  if (annotation_level == 2)
d252 1
a252 1
  if (annotation_level == 2)
d259 1
a259 1
  if (annotation_level == 2)
d266 1
a266 1
  if (annotation_level == 2)
d294 1
a294 1
  if (annotation_level == 2)
d305 1
a305 1
  if (annotation_level == 2)
d316 1
a316 1
  if (annotation_level == 2)
d323 1
a323 1
  if (annotation_level == 2)
d330 1
a330 1
  if (annotation_level == 2)
d337 1
a337 1
  if (annotation_level == 2)
d344 1
a344 1
  if (annotation_level == 2)
d351 1
a351 1
  if (annotation_level == 2)
d358 1
a358 1
  if (annotation_level == 2)
d365 1
a365 1
  if (annotation_level == 2)
d372 1
a372 1
  if (annotation_level == 2)
d379 1
a379 1
  if (annotation_level == 2)
d386 1
a386 1
  if (annotation_level == 2)
d393 1
a393 1
  if (annotation_level == 2)
d400 1
a400 1
  if (annotation_level == 2)
d411 1
a411 1
  if (annotation_level == 2)
d433 1
a433 1
  if (annotation_level == 2)
d444 1
a444 1
  if (annotation_level == 2)
d451 1
a451 1
  if (annotation_level == 2)
d458 1
a458 1
  if (annotation_level == 2)
d465 1
a465 1
  if (annotation_level == 2)
d472 1
a472 1
  if (annotation_level == 2)
d479 1
a479 1
  if (annotation_level == 2)
d486 1
a486 1
  if (annotation_level == 2)
d493 1
a493 1
  if (annotation_level == 2)
d500 1
a500 1
  if (annotation_level == 2)
d507 1
a507 1
  if (annotation_level == 2)
d514 1
a514 1
  if (annotation_level == 2)
d521 1
a521 1
  if (annotation_level == 2)
d528 1
a528 1
  if (annotation_level == 2)
d535 1
a535 1
  if (annotation_level == 2)
d546 1
a546 1
  if (annotation_level == 2)
d553 1
a553 1
  if (annotation_level == 2)
d560 1
a560 1
  if (annotation_level == 2)
d567 1
a567 1
  if (annotation_level == 2)
@


1.4
log
@Protoization.
@
text
@d2 2
a3 1
   Copyright 1986, 89, 90, 91, 92, 95, 98, 1999 Free Software Foundation, Inc.
@


1.3
log
@Eliminate PARAMS from function pointer declarations.
@
text
@d46 1
a46 2
print_value_flags (t)
     struct type *t;
d55 1
a55 1
breakpoints_changed ()
d80 1
a80 2
annotate_breakpoint (num)
     int num;
d87 1
a87 2
annotate_catchpoint (num)
     int num;
d94 1
a94 2
annotate_watchpoint (num)
     int num;
d101 1
a101 1
annotate_starting ()
d116 1
a116 1
annotate_stopped ()
d133 1
a133 2
annotate_exited (exitstatus)
     int exitstatus;
d145 1
a145 1
annotate_signalled ()
d155 1
a155 1
annotate_signal_name ()
d162 1
a162 1
annotate_signal_name_end ()
d169 1
a169 1
annotate_signal_string ()
d176 1
a176 1
annotate_signal_string_end ()
d183 1
a183 1
annotate_signal ()
d193 1
a193 1
annotate_breakpoints_headers ()
d200 1
a200 2
annotate_field (num)
     int num;
d207 1
a207 1
annotate_breakpoints_table ()
d214 1
a214 1
annotate_record ()
d221 1
a221 1
annotate_breakpoints_table_end ()
d228 1
a228 1
annotate_frames_invalid ()
d238 1
a238 2
annotate_field_begin (type)
     struct type *type;
d249 1
a249 1
annotate_field_name_end ()
d256 1
a256 1
annotate_field_value ()
d263 1
a263 1
annotate_field_end ()
d270 1
a270 1
annotate_quit ()
d277 1
a277 1
annotate_error ()
d284 1
a284 1
annotate_error_begin ()
d291 1
a291 3
annotate_value_history_begin (histindex, type)
     int histindex;
     struct type *type;
d302 1
a302 2
annotate_value_begin (type)
     struct type *type;
d313 1
a313 1
annotate_value_history_value ()
d320 1
a320 1
annotate_value_history_end ()
d327 1
a327 1
annotate_value_end ()
d334 1
a334 1
annotate_display_begin ()
d341 1
a341 1
annotate_display_number_end ()
d348 1
a348 1
annotate_display_format ()
d355 1
a355 1
annotate_display_expression ()
d362 1
a362 1
annotate_display_expression_end ()
d369 1
a369 1
annotate_display_value ()
d376 1
a376 1
annotate_display_end ()
d383 1
a383 1
annotate_arg_begin ()
d390 1
a390 1
annotate_arg_name_end ()
d397 1
a397 2
annotate_arg_value (type)
     struct type *type;
d408 1
a408 1
annotate_arg_end ()
d415 1
a415 6
annotate_source (filename, line, character, mid, pc)
     char *filename;
     int line;
     int character;
     int mid;
     CORE_ADDR pc;
d430 1
a430 3
annotate_frame_begin (level, pc)
     int level;
     CORE_ADDR pc;
d441 1
a441 1
annotate_function_call ()
d448 1
a448 1
annotate_signal_handler_caller ()
d455 1
a455 1
annotate_frame_address ()
d462 1
a462 1
annotate_frame_address_end ()
d469 1
a469 1
annotate_frame_function_name ()
d476 1
a476 1
annotate_frame_args ()
d483 1
a483 1
annotate_frame_source_begin ()
d490 1
a490 1
annotate_frame_source_file ()
d497 1
a497 1
annotate_frame_source_file_end ()
d504 1
a504 1
annotate_frame_source_line ()
d511 1
a511 1
annotate_frame_source_end ()
d518 1
a518 1
annotate_frame_where ()
d525 1
a525 1
annotate_frame_end ()
d532 1
a532 3
annotate_array_section_begin (index, elttype)
     int index;
     struct type *elttype;
d543 1
a543 2
annotate_elt_rep (repcount)
     unsigned int repcount;
d550 1
a550 1
annotate_elt_rep_end ()
d557 1
a557 1
annotate_elt ()
d564 1
a564 1
annotate_array_section_end ()
d571 1
a571 2
breakpoint_changed (b)
     struct breakpoint *b;
d577 1
a577 1
_initialize_annotate ()
@


1.2
log
@PARAMS removal.
@
text
@d37 5
a41 5
void (*annotate_starting_hook) PARAMS ((void));
void (*annotate_stopped_hook) PARAMS ((void));
void (*annotate_signalled_hook) PARAMS ((void));
void (*annotate_signal_hook) PARAMS ((void));
void (*annotate_exited_hook) PARAMS ((void));
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
   Copyright 1986, 89, 90, 91, 92, 95, 1998 Free Software Foundation, Inc.
d4 1
a4 1
This file is part of GDB.
d6 14
a19 13
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
d31 1
a31 1
static void print_value_flags PARAMS ((struct type *));
d33 3
a35 1
static void breakpoint_changed PARAMS ((struct breakpoint *));
d40 1
d43 2
d62 2
d67 13
d113 3
a115 3
        {
          printf_filtered ("\n\032\032starting\n");
        }
d127 6
a132 1
        printf_filtered ("\n\032\032stopped\n");
d145 1
a145 1
        printf_filtered ("\n\032\032exited %d\n", exitstatus);
d190 3
@


1.1.1.1
log
@Initial creation of sourceware repository
@
text
@@


1.1.1.2
log
@import gdb-19990422 snapshot
@
text
@d2 1
a2 1
   Copyright 1986, 89, 90, 91, 92, 95, 98, 1999 Free Software Foundation, Inc.
a36 1
void (*annotate_signal_hook) PARAMS ((void));
a163 3
  if (annotate_signal_hook)
    annotate_signal_hook ();

@


1.1.1.3
log
@import gdb-1999-05-25 snapshot
@
text
@a29 2
extern void _initialize_annotate PARAMS ((void));

@


1.1.1.4
log
@import gdb-1999-07-07 post reformat
@
text
@d4 1
a4 1
   This file is part of GDB.
d6 13
a18 14
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */
d95 3
a97 3
	{
	  printf_filtered ("\n\032\032starting\n");
	}
d109 1
a109 1
	printf_filtered ("\n\032\032stopped\n");
d122 1
a122 1
	printf_filtered ("\n\032\032exited %d\n", exitstatus);
@


1.1.1.5
log
@import gdb-1999-11-01 snapshot
@
text
@a42 2
static int ignore_count_changed = 0;

a59 2
      if (ignore_count_changed)
	ignore_count_changed = 0;	/* Avoid multiple break annotations. */
a62 13
/* The GUI needs to be informed of ignore_count changes, but we don't
   want to provide successive multiple breakpoints-invalid messages
   that are all caused by the fact that the ignore count is changing
   (which could keep the GUI very busy).  One is enough, after the
   target actually "stops". */

void
annotate_ignore_count_change (void)
{
  if (annotation_level > 1)
    ignore_count_changed = 1;
}

a110 5
    }
  if (annotation_level > 1 && ignore_count_changed)
    {
      ignore_count_changed = 0;
      breakpoints_changed ();
@


