head	1.40;
access;
symbols
	sid-snapshot-20180601:1.40
	sid-snapshot-20180501:1.40
	sid-snapshot-20180401:1.40
	sid-snapshot-20180301:1.40
	sid-snapshot-20180201:1.40
	sid-snapshot-20180101:1.40
	sid-snapshot-20171201:1.40
	sid-snapshot-20171101:1.40
	sid-snapshot-20171001:1.40
	sid-snapshot-20170901:1.40
	sid-snapshot-20170801:1.40
	sid-snapshot-20170701:1.40
	sid-snapshot-20170601:1.40
	sid-snapshot-20170501:1.40
	sid-snapshot-20170401:1.40
	sid-snapshot-20170301:1.40
	sid-snapshot-20170201:1.40
	sid-snapshot-20170101:1.40
	sid-snapshot-20161201:1.40
	sid-snapshot-20161101:1.40
	sid-snapshot-20160901:1.40
	sid-snapshot-20160801:1.40
	sid-snapshot-20160701:1.40
	sid-snapshot-20160601:1.40
	sid-snapshot-20160501:1.40
	sid-snapshot-20160401:1.40
	sid-snapshot-20160301:1.40
	sid-snapshot-20160201:1.40
	sid-snapshot-20160101:1.40
	sid-snapshot-20151201:1.40
	sid-snapshot-20151101:1.40
	sid-snapshot-20151001:1.40
	sid-snapshot-20150901:1.40
	sid-snapshot-20150801:1.40
	sid-snapshot-20150701:1.40
	sid-snapshot-20150601:1.40
	sid-snapshot-20150501:1.40
	sid-snapshot-20150401:1.40
	sid-snapshot-20150301:1.40
	sid-snapshot-20150201:1.40
	sid-snapshot-20150101:1.40
	sid-snapshot-20141201:1.40
	sid-snapshot-20141101:1.40
	sid-snapshot-20141001:1.40
	sid-snapshot-20140901:1.40
	sid-snapshot-20140801:1.40
	sid-snapshot-20140701:1.40
	sid-snapshot-20140601:1.40
	sid-snapshot-20140501:1.40
	sid-snapshot-20140401:1.40
	sid-snapshot-20140301:1.40
	sid-snapshot-20140201:1.40
	sid-snapshot-20140101:1.40
	sid-snapshot-20131201:1.40
	sid-snapshot-20131101:1.40
	sid-snapshot-20131001:1.40
	binutils-2_24-branch:1.40.0.2
	binutils-2_24-branchpoint:1.40
	binutils-2_21_1:1.37
	sid-snapshot-20130901:1.40
	gdb_7_6_1-2013-08-30-release:1.38
	sid-snapshot-20130801:1.40
	sid-snapshot-20130701:1.40
	sid-snapshot-20130601:1.40
	sid-snapshot-20130501:1.39
	gdb_7_6-2013-04-26-release:1.38
	sid-snapshot-20130401:1.38
	binutils-2_23_2:1.38
	gdb_7_6-branch:1.38.0.14
	gdb_7_6-2013-03-12-branchpoint:1.38
	sid-snapshot-20130301:1.38
	sid-snapshot-20130201:1.38
	sid-snapshot-20130101:1.38
	sid-snapshot-20121201:1.38
	gdb_7_5_1-2012-11-29-release:1.38
	binutils-2_23_1:1.38
	sid-snapshot-20121101:1.38
	binutils-2_23:1.38
	sid-snapshot-20121001:1.38
	sid-snapshot-20120901:1.38
	gdb_7_5-2012-08-17-release:1.38
	sid-snapshot-20120801:1.38
	binutils-2_23-branch:1.38.0.12
	binutils-2_23-branchpoint:1.38
	gdb_7_5-branch:1.38.0.10
	gdb_7_5-2012-07-18-branchpoint:1.38
	sid-snapshot-20120701:1.38
	sid-snapshot-20120601:1.38
	sid-snapshot-20120501:1.38
	binutils-2_22_branch:1.38.0.8
	gdb_7_4_1-2012-04-26-release:1.38
	sid-snapshot-20120401:1.38
	sid-snapshot-20120301:1.38
	sid-snapshot-20120201:1.38
	gdb_7_4-2012-01-24-release:1.38
	sid-snapshot-20120101:1.38
	gdb_7_4-branch:1.38.0.6
	gdb_7_4-2011-12-13-branchpoint:1.38
	sid-snapshot-20111201:1.38
	binutils-2_22:1.38
	sid-snapshot-20111101:1.38
	sid-snapshot-20111001:1.38
	binutils-2_22-branch:1.38.0.4
	binutils-2_22-branchpoint:1.38
	gdb_7_3_1-2011-09-04-release:1.38
	sid-snapshot-20110901:1.38
	sid-snapshot-20110801:1.38
	gdb_7_3-2011-07-26-release:1.38
	sid-snapshot-20110701:1.38
	sid-snapshot-20110601:1.38
	sid-snapshot-20110501:1.38
	gdb_7_3-branch:1.38.0.2
	gdb_7_3-2011-04-01-branchpoint:1.38
	sid-snapshot-20110401:1.38
	sid-snapshot-20110301:1.38
	cygwin-1_7_8-release:1.38
	sid-snapshot-20110201:1.37
	sid-snapshot-20110101:1.37
	binutils-2_21:1.37
	sid-snapshot-20101201:1.37
	binutils-2_21-branch:1.37.0.4
	binutils-2_21-branchpoint:1.37
	sid-snapshot-20101101:1.37
	sid-snapshot-20101001:1.37
	binutils-2_20_1:1.35.2.1
	gdb_7_2-2010-09-02-release:1.37
	sid-snapshot-20100901:1.37
	cygwin-1_7_7-release:1.37
	sid-snapshot-20100801:1.37
	gdb_7_2-branch:1.37.0.2
	gdb_7_2-2010-07-07-branchpoint:1.37
	sid-snapshot-20100701:1.37
	sid-snapshot-20100601:1.36
	sid-snapshot-20100501:1.36
	sid-snapshot-20100401:1.36
	gdb_7_1-2010-03-18-release:1.36
	sid-snapshot-20100301:1.36
	gdb_7_1-branch:1.36.0.4
	gdb_7_1-2010-02-18-branchpoint:1.36
	sid-snapshot-20100201:1.36
	sid-snapshot-20100101:1.36
	gdb_7_0_1-2009-12-22-release:1.36
	sid-snapshot-20091201:1.36
	sid-snapshot-20091101:1.36
	binutils-2_20:1.35.2.1
	gdb_7_0-2009-10-06-release:1.36
	sid-snapshot-20091001:1.36
	gdb_7_0-branch:1.36.0.2
	gdb_7_0-2009-09-16-branchpoint:1.36
	arc-sim-20090309:1.33
	binutils-arc-20081103-branch:1.33.0.30
	binutils-arc-20081103-branchpoint:1.33
	binutils-2_20-branch:1.35.0.2
	binutils-2_20-branchpoint:1.35
	sid-snapshot-20090901:1.34
	sid-snapshot-20090801:1.34
	msnyder-checkpoint-072509-branch:1.34.0.4
	msnyder-checkpoint-072509-branchpoint:1.34
	sid-snapshot-20090701:1.34
	dje-cgen-play1-branch:1.34.0.2
	dje-cgen-play1-branchpoint:1.34
	sid-snapshot-20090601:1.33
	sid-snapshot-20090501:1.33
	sid-snapshot-20090401:1.33
	arc-20081103-branch:1.33.0.28
	arc-20081103-branchpoint:1.33
	arc-insight_6_8-branch:1.33.0.26
	arc-insight_6_8-branchpoint:1.33
	insight_6_8-branch:1.33.0.24
	insight_6_8-branchpoint:1.33
	sid-snapshot-20090301:1.33
	binutils-2_19_1:1.33
	sid-snapshot-20090201:1.33
	sid-snapshot-20090101:1.33
	reverse-20081226-branch:1.33.0.22
	reverse-20081226-branchpoint:1.33
	sid-snapshot-20081201:1.33
	multiprocess-20081120-branch:1.33.0.20
	multiprocess-20081120-branchpoint:1.33
	sid-snapshot-20081101:1.33
	binutils-2_19:1.33
	sid-snapshot-20081001:1.33
	reverse-20080930-branch:1.33.0.18
	reverse-20080930-branchpoint:1.33
	binutils-2_19-branch:1.33.0.16
	binutils-2_19-branchpoint:1.33
	sid-snapshot-20080901:1.33
	sid-snapshot-20080801:1.33
	reverse-20080717-branch:1.33.0.14
	reverse-20080717-branchpoint:1.33
	sid-snapshot-20080701:1.33
	msnyder-reverse-20080609-branch:1.33.0.12
	msnyder-reverse-20080609-branchpoint:1.33
	drow-reverse-20070409-branch:1.33.0.10
	drow-reverse-20070409-branchpoint:1.33
	sid-snapshot-20080601:1.33
	sid-snapshot-20080501:1.33
	sid-snapshot-20080403:1.33
	sid-snapshot-20080401:1.33
	gdb_6_8-2008-03-27-release:1.33
	sid-snapshot-20080301:1.33
	gdb_6_8-branch:1.33.0.8
	gdb_6_8-2008-02-26-branchpoint:1.33
	sid-snapshot-20080201:1.33
	sid-snapshot-20080101:1.33
	sid-snapshot-20071201:1.33
	sid-snapshot-20071101:1.33
	gdb_6_7_1-2007-10-29-release:1.33
	gdb_6_7-2007-10-10-release:1.33
	sid-snapshot-20071001:1.33
	gdb_6_7-branch:1.33.0.6
	gdb_6_7-2007-09-07-branchpoint:1.33
	binutils-2_18:1.33
	binutils-2_18-branch:1.33.0.4
	binutils-2_18-branchpoint:1.33
	insight_6_6-20070208-release:1.33
	binutils-csl-coldfire-4_1-32:1.32
	binutils-csl-sourcerygxx-4_1-32:1.32
	gdb_6_6-2006-12-18-release:1.33
	binutils-csl-innovasic-fido-3_4_4-33:1.32
	binutils-csl-sourcerygxx-3_4_4-32:1.28
	binutils-csl-coldfire-4_1-30:1.32
	binutils-csl-sourcerygxx-4_1-30:1.32
	binutils-csl-coldfire-4_1-28:1.32
	binutils-csl-sourcerygxx-4_1-29:1.32
	binutils-csl-sourcerygxx-4_1-28:1.32
	gdb_6_6-branch:1.33.0.2
	gdb_6_6-2006-11-15-branchpoint:1.33
	binutils-csl-arm-2006q3-27:1.32
	binutils-csl-sourcerygxx-4_1-27:1.32
	binutils-csl-arm-2006q3-26:1.32
	binutils-csl-sourcerygxx-4_1-26:1.32
	binutils-csl-sourcerygxx-4_1-25:1.32
	binutils-csl-sourcerygxx-4_1-24:1.32
	binutils-csl-sourcerygxx-4_1-23:1.32
	insight_6_5-20061003-release:1.32
	gdb-csl-symbian-6_4_50_20060226-12:1.32
	binutils-csl-sourcerygxx-4_1-21:1.32
	binutils-csl-arm-2006q3-21:1.32
	binutils-csl-sourcerygxx-4_1-22:1.32
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.32
	binutils-csl-sourcerygxx-4_1-20:1.32
	binutils-csl-arm-2006q3-19:1.32
	binutils-csl-sourcerygxx-4_1-19:1.32
	binutils-csl-sourcerygxx-4_1-18:1.32
	binutils-csl-renesas-4_1-9:1.32
	gdb-csl-sourcerygxx-3_4_4-25:1.32
	binutils-csl-sourcerygxx-3_4_4-25:1.28
	nickrob-async-20060828-mergepoint:1.33
	gdb-csl-symbian-6_4_50_20060226-11:1.32
	binutils-csl-renesas-4_1-8:1.32
	binutils-csl-renesas-4_1-7:1.32
	binutils-csl-renesas-4_1-6:1.32
	gdb-csl-sourcerygxx-4_1-17:1.32
	binutils-csl-sourcerygxx-4_1-17:1.32
	gdb-csl-20060226-branch-local-2:1.32
	cr-0x5f1:1.32.0.30
	gdb-csl-sourcerygxx-4_1-14:1.32
	binutils-csl-sourcerygxx-4_1-14:1.32
	binutils-csl-sourcerygxx-4_1-15:1.32
	gdb-csl-sourcerygxx-4_1-13:1.32
	binutils-csl-sourcerygxx-4_1-13:1.32
	binutils-2_17:1.32
	gdb-csl-sourcerygxx-4_1-12:1.32
	binutils-csl-sourcerygxx-4_1-12:1.32
	gdb-csl-sourcerygxx-3_4_4-21:1.32
	binutils-csl-sourcerygxx-3_4_4-21:1.32
	gdb_6_5-20060621-release:1.32
	binutils-csl-wrs-linux-3_4_4-24:1.28
	binutils-csl-wrs-linux-3_4_4-23:1.28
	gdb-csl-sourcerygxx-4_1-9:1.32
	binutils-csl-sourcerygxx-4_1-9:1.32
	gdb-csl-sourcerygxx-4_1-8:1.32
	binutils-csl-sourcerygxx-4_1-8:1.32
	gdb-csl-sourcerygxx-4_1-7:1.32
	binutils-csl-sourcerygxx-4_1-7:1.32
	gdb-csl-arm-2006q1-6:1.32
	binutils-csl-arm-2006q1-6:1.32
	gdb-csl-sourcerygxx-4_1-6:1.32
	binutils-csl-sourcerygxx-4_1-6:1.32
	binutils-csl-wrs-linux-3_4_4-22:1.28
	gdb-csl-symbian-6_4_50_20060226-10:1.32
	gdb-csl-symbian-6_4_50_20060226-9:1.32
	gdb-csl-symbian-6_4_50_20060226-8:1.32
	gdb-csl-coldfire-4_1-11:1.32
	binutils-csl-coldfire-4_1-11:1.32
	gdb-csl-sourcerygxx-3_4_4-19:1.32
	binutils-csl-sourcerygxx-3_4_4-19:1.32
	gdb-csl-coldfire-4_1-10:1.32
	gdb_6_5-branch:1.32.0.28
	gdb_6_5-2006-05-14-branchpoint:1.32
	binutils-csl-coldfire-4_1-10:1.32
	gdb-csl-sourcerygxx-4_1-5:1.32
	binutils-csl-sourcerygxx-4_1-5:1.32
	nickrob-async-20060513-branch:1.32.0.26
	nickrob-async-20060513-branchpoint:1.32
	gdb-csl-sourcerygxx-4_1-4:1.32
	binutils-csl-sourcerygxx-4_1-4:1.32
	msnyder-reverse-20060502-branch:1.32.0.24
	msnyder-reverse-20060502-branchpoint:1.32
	binutils-csl-wrs-linux-3_4_4-21:1.28
	gdb-csl-morpho-4_1-4:1.32
	binutils-csl-morpho-4_1-4:1.32
	gdb-csl-sourcerygxx-3_4_4-17:1.32
	binutils-csl-sourcerygxx-3_4_4-17:1.32
	binutils-csl-wrs-linux-3_4_4-20:1.28
	readline_5_1-import-branch:1.32.0.22
	readline_5_1-import-branchpoint:1.32
	gdb-csl-20060226-branch-merge-to-csl-symbian-1:1.32
	binutils-2_17-branch:1.32.0.20
	binutils-2_17-branchpoint:1.32
	gdb-csl-symbian-20060226-branch:1.32.0.18
	gdb-csl-symbian-20060226-branchpoint:1.32
	gdb-csl-20060226-branch-merge-to-csl-local-1:1.32
	msnyder-reverse-20060331-branch:1.32.0.16
	msnyder-reverse-20060331-branchpoint:1.32
	binutils-csl-2_17-branch:1.32.0.14
	binutils-csl-2_17-branchpoint:1.32
	gdb-csl-available-20060303-branch:1.32.0.12
	gdb-csl-available-20060303-branchpoint:1.32
	gdb-csl-20060226-branch:1.32.0.10
	gdb-csl-20060226-branchpoint:1.32
	gdb_6_4-20051202-release:1.32
	msnyder-fork-checkpoint-branch:1.32.0.8
	msnyder-fork-checkpoint-branchpoint:1.32
	gdb-csl-gxxpro-6_3-branch:1.32.0.6
	gdb-csl-gxxpro-6_3-branchpoint:1.32
	gdb_6_4-branch:1.32.0.4
	gdb_6_4-2005-11-01-branchpoint:1.32
	gdb-csl-arm-20051020-branch:1.32.0.2
	gdb-csl-arm-20051020-branchpoint:1.32
	binutils-csl-gxxpro-3_4-branch:1.28.0.8
	binutils-csl-gxxpro-3_4-branchpoint:1.28
	binutils-2_16_1:1.28
	msnyder-tracepoint-checkpoint-branch:1.31.0.2
	msnyder-tracepoint-checkpoint-branchpoint:1.31
	gdb-csl-arm-20050325-2005-q1b:1.28
	binutils-csl-arm-2005q1b:1.28
	binutils-2_16:1.28
	gdb-csl-arm-20050325-2005-q1a:1.28
	binutils-csl-arm-2005q1a:1.28
	csl-arm-20050325-branch:1.28.0.6
	csl-arm-20050325-branchpoint:1.28
	binutils-csl-arm-2005q1-branch:1.28.0.4
	binutils-csl-arm-2005q1-branchpoint:1.28
	binutils-2_16-branch:1.28.0.2
	binutils-2_16-branchpoint:1.28
	csl-arm-2004-q3d:1.27
	gdb_6_3-20041109-release:1.27
	gdb_6_3-branch:1.27.0.4
	gdb_6_3-20041019-branchpoint:1.27
	csl-arm-2004-q3:1.27
	drow_intercu-merge-20040921:1.27
	drow_intercu-merge-20040915:1.27
	jimb-gdb_6_2-e500-branch:1.27.0.6
	jimb-gdb_6_2-e500-branchpoint:1.27
	gdb_6_2-20040730-release:1.27
	gdb_6_2-branch:1.27.0.2
	gdb_6_2-2004-07-10-gmt-branchpoint:1.27
	gdb_6_1_1-20040616-release:1.24
	binutils-2_15:1.24
	binutils-2_15-branchpoint:1.24
	csl-arm-2004-q1a:1.27
	csl-arm-2004-q1:1.25
	gdb_6_1-2004-04-05-release:1.24
	drow_intercu-merge-20040402:1.25
	drow_intercu-merge-20040327:1.24
	ezannoni_pie-20040323-branch:1.24.0.14
	ezannoni_pie-20040323-branchpoint:1.24
	cagney_tramp-20040321-mergepoint:1.24
	cagney_tramp-20040309-branch:1.24.0.12
	cagney_tramp-20040309-branchpoint:1.24
	gdb_6_1-branch:1.24.0.10
	gdb_6_1-2004-03-01-gmt-branchpoint:1.24
	drow_intercu-20040221-branch:1.24.0.8
	drow_intercu-20040221-branchpoint:1.24
	binutils-2_15-branch:1.24.0.6
	cagney_bfdfile-20040213-branch:1.24.0.4
	cagney_bfdfile-20040213-branchpoint:1.24
	drow-cplus-merge-20040208:1.24
	carlton_dictionary-20040126-merge:1.24
	cagney_bigcore-20040122-branch:1.24.0.2
	cagney_bigcore-20040122-branchpoint:1.24
	drow-cplus-merge-20040113:1.24
	csl-arm-2003-q4:1.24
	drow-cplus-merge-20031224:1.24
	drow-cplus-merge-20031220:1.24
	carlton_dictionary-20031215-merge:1.24
	drow-cplus-merge-20031214:1.24
	carlton-dictionary-20031111-merge:1.24
	gdb_6_0-2003-10-04-release:1.23
	kettenis_sparc-20030918-branch:1.23.0.8
	kettenis_sparc-20030918-branchpoint:1.23
	carlton_dictionary-20030917-merge:1.23
	ezannoni_pie-20030916-branchpoint:1.23
	ezannoni_pie-20030916-branch:1.23.0.6
	cagney_x86i386-20030821-branch:1.23.0.4
	cagney_x86i386-20030821-branchpoint:1.23
	carlton_dictionary-20030805-merge:1.23
	carlton_dictionary-20030627-merge:1.23
	gdb_6_0-branch:1.23.0.2
	gdb_6_0-2003-06-23-branchpoint:1.23
	jimb-ppc64-linux-20030613-branch:1.22.0.12
	jimb-ppc64-linux-20030613-branchpoint:1.22
	binutils-2_14:1.20
	cagney_convert-20030606-branch:1.22.0.10
	cagney_convert-20030606-branchpoint:1.22
	cagney_writestrings-20030508-branch:1.22.0.8
	cagney_writestrings-20030508-branchpoint:1.22
	jimb-ppc64-linux-20030528-branch:1.22.0.6
	jimb-ppc64-linux-20030528-branchpoint:1.22
	carlton_dictionary-20030523-merge:1.22
	cagney_fileio-20030521-branch:1.22.0.4
	cagney_fileio-20030521-branchpoint:1.22
	kettenis_i386newframe-20030517-mergepoint:1.22
	jimb-ppc64-linux-20030509-branch:1.22.0.2
	jimb-ppc64-linux-20030509-branchpoint:1.22
	kettenis_i386newframe-20030504-mergepoint:1.20
	carlton_dictionary-20030430-merge:1.20
	binutils-2_14-branch:1.20.0.4
	binutils-2_14-branchpoint:1.20
	kettenis_i386newframe-20030419-branch:1.20.0.2
	kettenis_i386newframe-20030419-branchpoint:1.20
	carlton_dictionary-20030416-merge:1.20
	cagney_frameaddr-20030409-mergepoint:1.19
	kettenis_i386newframe-20030406-branch:1.19.0.6
	kettenis_i386newframe-20030406-branchpoint:1.19
	cagney_frameaddr-20030403-branchpoint:1.19
	cagney_frameaddr-20030403-branch:1.19.0.4
	cagney_framebase-20030330-mergepoint:1.19
	cagney_framebase-20030326-branch:1.19.0.2
	cagney_framebase-20030326-branchpoint:1.19
	cagney_lazyid-20030317-branch:1.18.0.4
	cagney_lazyid-20030317-branchpoint:1.18
	kettenis-i386newframe-20030316-mergepoint:1.18
	offbyone-20030313-branch:1.18.0.2
	offbyone-20030313-branchpoint:1.18
	kettenis-i386newframe-20030308-branch:1.16.0.6
	kettenis-i386newframe-20030308-branchpoint:1.16
	carlton_dictionary-20030305-merge:1.16
	cagney_offbyone-20030303-branch:1.16.0.4
	cagney_offbyone-20030303-branchpoint:1.16
	w32api-2_2:1.16
	mingw-runtime-2_4:1.16
	carlton_dictionary-20030207-merge:1.16
	interps-20030202-branch:1.16.0.2
	interps-20030202-branchpoint:1.16
	cagney-unwind-20030108-branch:1.14.0.16
	cagney-unwind-20030108-branchpoint:1.14
	binutils-2_13_2_1:1.14
	binutils-2_13_2:1.14
	carlton_dictionary-20021223-merge:1.14
	gdb_5_3-2002-12-12-release:1.14
	carlton_dictionary-20021115-merge:1.14
	binutils-2_13_1:1.14
	kseitz_interps-20021105-merge:1.14
	kseitz_interps-20021103-merge:1.14
	drow-cplus-merge-20021020:1.14
	drow-cplus-merge-20021025:1.14
	carlton_dictionary-20021025-merge:1.14
	carlton_dictionary-20021011-merge:1.14
	drow-cplus-branch:1.14.0.14
	drow-cplus-branchpoint:1.14
	kseitz_interps-20020930-merge:1.14
	carlton_dictionary-20020927-merge:1.14
	carlton_dictionary-branch:1.14.0.12
	carlton_dictionary-20020920-branchpoint:1.14
	sid-20020905-branchpoint:1.14
	sid-20020905-branch:1.14.0.10
	gdb_5_3-branch:1.14.0.8
	gdb_5_3-2002-09-04-branchpoint:1.14
	kseitz_interps-20020829-merge:1.14
	cagney_sysregs-20020825-branch:1.14.0.6
	cagney_sysregs-20020825-branchpoint:1.14
	readline_4_3-import-branch:1.14.0.4
	readline_4_3-import-branchpoint:1.14
	binutils-2_13:1.14
	gdb_5_2_1-2002-07-23-release:1.12
	binutils-2_13-branchpoint:1.14
	binutils-2_13-branch:1.14.0.2
	kseitz_interps-20020528-branch:1.13.0.6
	kseitz_interps-20020528-branchpoint:1.13
	cagney_regbuf-20020515-branch:1.13.0.4
	cagney_regbuf-20020515-branchpoint:1.13
	binutils-2_12_1:1.12
	jimb-macro-020506-branch:1.13.0.2
	jimb-macro-020506-branchpoint:1.13
	gdb_5_2-2002-04-29-release:1.12
	binutils-2_12:1.12
	gdb_5_2-branch:1.12.0.4
	gdb_5_2-2002-03-03-branchpoint:1.12
	binutils-2_12-branch:1.12.0.2
	binutils-2_12-branchpoint:1.12
	gdb_5_1_1-2002-01-24-release:1.9
	gdb_5_1_0_1-2002-01-03-release:1.9
	cygnus_cvs_20020108_pre:1.12
	gdb_5_1_0_1-2002-01-03-branch:1.9.0.6
	gdb_5_1_0_1-2002-01-03-branchpoint:1.9
	gdb_5_1-2001-11-21-release:1.9
	gdb_s390-2001-09-26-branch:1.9.0.4
	gdb_s390-2001-09-26-branchpoint:1.9
	gdb_5_1-2001-07-29-branch:1.9.0.2
	gdb_5_1-2001-07-29-branchpoint:1.9
	binutils-2_11_2:1.7
	binutils-2_11_1:1.7
	binutils-2_11:1.7
	x86_64versiong3:1.7
	binutils-2_11-branch:1.7.0.2
	insight-precleanup-2001-01-01:1.7
	binutils-2_10_1:1.2
	binutils-2_10:1.2
	gdb-premipsmulti-2000-06-06-branch:1.3.0.2
	gdb-premipsmulti-2000-06-06-branchpoint:1.3
	gdb_5_0-2000-05-19-release:1.2
	gdb_4_18_2-2000-05-18-release:1.2
	cygwin-1_1_1:1.2
	gdb_4_95_1-2000-05-11-snapshot:1.2
	gdb_4_95_0-2000-04-27-snapshot:1.2
	gdb_5_0-2000-04-10-branch:1.2.0.4
	gdb_5_0-2000-04-10-branchpoint:1.2
	binutils-2_10-branch:1.2.0.2
	binutils-2_10-branchpoint:1.2
	binutils_latest_snapshot:1.40
	egcs_20000222:1.1.1.1
	cygnus:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.40
date	2013.05.10.03.03.04;	author dj;	state Exp;
branches;
next	1.39;

1.39
date	2013.04.23.04.05.04;	author dj;	state Exp;
branches;
next	1.38;

1.38
date	2011.02.03.07.23.59;	author rwild;	state Exp;
branches;
next	1.37;

1.37
date	2010.06.10.18.30.24;	author dj;	state Exp;
branches;
next	1.36;

1.36
date	2009.09.16.17.57.24;	author dj;	state Exp;
branches;
next	1.35;

1.35
date	2009.09.03.16.46.55;	author hjl;	state Exp;
branches
	1.35.2.1;
next	1.34;

1.34
date	2009.06.21.17.13.08;	author dj;	state Exp;
branches;
next	1.33;

1.33
date	2006.07.27.18.05.31;	author dj;	state Exp;
branches;
next	1.32;

1.32
date	2005.06.30.23.03.37;	author dj;	state Exp;
branches;
next	1.31;

1.31
date	2005.05.24.21.01.31;	author dj;	state Exp;
branches;
next	1.30;

1.30
date	2005.05.10.15.33.33;	author nickc;	state Exp;
branches;
next	1.29;

1.29
date	2005.03.28.02.09.01;	author dj;	state Exp;
branches;
next	1.28;

1.28
date	2005.03.01.02.22.06;	author dj;	state Exp;
branches;
next	1.27;

1.27
date	2004.04.22.18.39.03;	author dj;	state Exp;
branches;
next	1.26;

1.26
date	2004.04.13.15.23.19;	author dj;	state Exp;
branches;
next	1.25;

1.25
date	2004.04.01.02.00.55;	author dj;	state Exp;
branches;
next	1.24;

1.24
date	2003.10.30.18.39.13;	author dj;	state Exp;
branches
	1.24.8.1;
next	1.23;

1.23
date	2003.06.19.20.05.36;	author dj;	state Exp;
branches;
next	1.22;

1.22
date	2003.05.07.20.30.13;	author jason;	state Exp;
branches;
next	1.21;

1.21
date	2003.05.07.18.06.23;	author jason;	state Exp;
branches;
next	1.20;

1.20
date	2003.04.15.21.29.34;	author dj;	state Exp;
branches
	1.20.2.1;
next	1.19;

1.19
date	2003.03.17.18.01.07;	author dj;	state Exp;
branches;
next	1.18;

1.18
date	2003.03.12.17.28.10;	author dj;	state Exp;
branches;
next	1.17;

1.17
date	2003.03.12.15.08.02;	author dj;	state Exp;
branches;
next	1.16;

1.16
date	2003.01.26.07.33.28;	author drow;	state Exp;
branches
	1.16.6.1;
next	1.15;

1.15
date	2003.01.20.19.03.56;	author dj;	state Exp;
branches;
next	1.14;

1.14
date	2002.06.06.12.55.24;	author dj;	state Exp;
branches
	1.14.12.1
	1.14.14.1;
next	1.13;

1.13
date	2002.04.10.00.43.27;	author rth;	state Exp;
branches
	1.13.4.1
	1.13.6.1;
next	1.12;

1.12
date	2001.10.07.17.24.36;	author dj;	state Exp;
branches;
next	1.11;

1.11
date	2001.08.17.21.14.20;	author dj;	state Exp;
branches;
next	1.10;

1.10
date	2001.08.17.06.33.05;	author dj;	state Exp;
branches;
next	1.9;

1.9
date	2001.03.15.22.02.06;	author dj;	state Exp;
branches;
next	1.8;

1.8
date	2001.03.15.21.07.01;	author dj;	state Exp;
branches;
next	1.7;

1.7
date	2000.11.29.19.19.10;	author dj;	state Exp;
branches;
next	1.6;

1.6
date	2000.11.04.07.54.27;	author hp;	state Exp;
branches;
next	1.5;

1.5
date	2000.11.03.20.55.25;	author hp;	state Exp;
branches;
next	1.4;

1.4
date	2000.06.15.20.56.25;	author hjl;	state Exp;
branches;
next	1.3;

1.3
date	2000.05.29.20.45.32;	author zack;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.24.21.31.22;	author jason;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.22.15.59.20;	author ian;	state Exp;
branches
	1.1.1.1;
next	;

1.35.2.1
date	2009.09.30.13.23.29;	author gingold;	state Exp;
branches;
next	;

1.24.8.1
date	2004.04.02.16.47.52;	author drow;	state Exp;
branches;
next	1.24.8.2;

1.24.8.2
date	2004.09.16.17.01.56;	author drow;	state Exp;
branches;
next	;

1.20.2.1
date	2003.05.18.09.44.40;	author kettenis;	state Exp;
branches;
next	;

1.16.6.1
date	2003.03.16.14.01.55;	author kettenis;	state Exp;
branches;
next	;

1.14.12.1
date	2003.02.07.19.18.02;	author carlton;	state Exp;
branches;
next	1.14.12.2;

1.14.12.2
date	2003.04.16.19.57.04;	author carlton;	state Exp;
branches;
next	1.14.12.3;

1.14.12.3
date	2003.05.23.18.40.55;	author carlton;	state Exp;
branches;
next	1.14.12.4;

1.14.12.4
date	2003.06.27.21.50.23;	author carlton;	state Exp;
branches;
next	1.14.12.5;

1.14.12.5
date	2003.11.11.23.51.15;	author carlton;	state Exp;
branches;
next	;

1.14.14.1
date	2003.12.14.20.28.03;	author drow;	state Exp;
branches;
next	;

1.13.4.1
date	2002.06.15.16.43.19;	author cagney;	state Exp;
branches;
next	;

1.13.6.1
date	2002.06.20.01.37.58;	author kseitz;	state Exp;
branches;
next	;

1.1.1.1
date	2000.02.22.15.59.20;	author ian;	state Exp;
branches;
next	;


desc
@@


1.40
log
@merge from gcc
@
text
@/* An expandable hash tables datatype.  
   Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2009, 2010
   Free Software Foundation, Inc.
   Contributed by Vladimir Makarov (vmakarov@@cygnus.com).

This file is part of the libiberty library.
Libiberty is free software; you can redistribute it and/or
modify it under the terms of the GNU Library General Public
License as published by the Free Software Foundation; either
version 2 of the License, or (at your option) any later version.

Libiberty is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Library General Public License for more details.

You should have received a copy of the GNU Library General Public
License along with libiberty; see the file COPYING.LIB.  If
not, write to the Free Software Foundation, Inc., 51 Franklin Street - Fifth Floor,
Boston, MA 02110-1301, USA.  */

/* This package implements basic hash table functionality.  It is possible
   to search for an entry, create an entry and destroy an entry.

   Elements in the table are generic pointers.

   The size of the table is not fixed; if the occupancy of the table
   grows too high the hash table will be expanded.

   The abstract data implementation is based on generalized Algorithm D
   from Knuth's book "The art of computer programming".  Hash table is
   expanded by creation of new hash table and transferring elements from
   the old table to the new table. */

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <sys/types.h>

#ifdef HAVE_STDLIB_H
#include <stdlib.h>
#endif
#ifdef HAVE_STRING_H
#include <string.h>
#endif
#ifdef HAVE_MALLOC_H
#include <malloc.h>
#endif
#ifdef HAVE_LIMITS_H
#include <limits.h>
#endif
#ifdef HAVE_INTTYPES_H
#include <inttypes.h>
#endif
#ifdef HAVE_STDINT_H
#include <stdint.h>
#endif

#include <stdio.h>

#include "libiberty.h"
#include "ansidecl.h"
#include "hashtab.h"

#ifndef CHAR_BIT
#define CHAR_BIT 8
#endif

static unsigned int higher_prime_index (unsigned long);
static hashval_t htab_mod_1 (hashval_t, hashval_t, hashval_t, int);
static hashval_t htab_mod (hashval_t, htab_t);
static hashval_t htab_mod_m2 (hashval_t, htab_t);
static hashval_t hash_pointer (const void *);
static int eq_pointer (const void *, const void *);
static int htab_expand (htab_t);
static PTR *find_empty_slot_for_expand (htab_t, hashval_t);

/* At some point, we could make these be NULL, and modify the
   hash-table routines to handle NULL specially; that would avoid
   function-call overhead for the common case of hashing pointers.  */
htab_hash htab_hash_pointer = hash_pointer;
htab_eq htab_eq_pointer = eq_pointer;

/* Table of primes and multiplicative inverses.

   Note that these are not minimally reduced inverses.  Unlike when generating
   code to divide by a constant, we want to be able to use the same algorithm
   all the time.  All of these inverses (are implied to) have bit 32 set.

   For the record, here's the function that computed the table; it's a 
   vastly simplified version of the function of the same name from gcc.  */

#if 0
unsigned int
ceil_log2 (unsigned int x)
{
  int i;
  for (i = 31; i >= 0 ; --i)
    if (x > (1u << i))
      return i+1;
  abort ();
}

unsigned int
choose_multiplier (unsigned int d, unsigned int *mlp, unsigned char *shiftp)
{
  unsigned long long mhigh;
  double nx;
  int lgup, post_shift;
  int pow, pow2;
  int n = 32, precision = 32;

  lgup = ceil_log2 (d);
  pow = n + lgup;
  pow2 = n + lgup - precision;

  nx = ldexp (1.0, pow) + ldexp (1.0, pow2);
  mhigh = nx / d;

  *shiftp = lgup - 1;
  *mlp = mhigh;
  return mhigh >> 32;
}
#endif

struct prime_ent
{
  hashval_t prime;
  hashval_t inv;
  hashval_t inv_m2;	/* inverse of prime-2 */
  hashval_t shift;
};

static struct prime_ent const prime_tab[] = {
  {          7, 0x24924925, 0x9999999b, 2 },
  {         13, 0x3b13b13c, 0x745d1747, 3 },
  {         31, 0x08421085, 0x1a7b9612, 4 },
  {         61, 0x0c9714fc, 0x15b1e5f8, 5 },
  {        127, 0x02040811, 0x0624dd30, 6 },
  {        251, 0x05197f7e, 0x073260a5, 7 },
  {        509, 0x01824366, 0x02864fc8, 8 },
  {       1021, 0x00c0906d, 0x014191f7, 9 },
  {       2039, 0x0121456f, 0x0161e69e, 10 },
  {       4093, 0x00300902, 0x00501908, 11 },
  {       8191, 0x00080041, 0x00180241, 12 },
  {      16381, 0x000c0091, 0x00140191, 13 },
  {      32749, 0x002605a5, 0x002a06e6, 14 },
  {      65521, 0x000f00e2, 0x00110122, 15 },
  {     131071, 0x00008001, 0x00018003, 16 },
  {     262139, 0x00014002, 0x0001c004, 17 },
  {     524287, 0x00002001, 0x00006001, 18 },
  {    1048573, 0x00003001, 0x00005001, 19 },
  {    2097143, 0x00004801, 0x00005801, 20 },
  {    4194301, 0x00000c01, 0x00001401, 21 },
  {    8388593, 0x00001e01, 0x00002201, 22 },
  {   16777213, 0x00000301, 0x00000501, 23 },
  {   33554393, 0x00001381, 0x00001481, 24 },
  {   67108859, 0x00000141, 0x000001c1, 25 },
  {  134217689, 0x000004e1, 0x00000521, 26 },
  {  268435399, 0x00000391, 0x000003b1, 27 },
  {  536870909, 0x00000019, 0x00000029, 28 },
  { 1073741789, 0x0000008d, 0x00000095, 29 },
  { 2147483647, 0x00000003, 0x00000007, 30 },
  /* Avoid "decimal constant so large it is unsigned" for 4294967291.  */
  { 0xfffffffb, 0x00000006, 0x00000008, 31 }
};

/* The following function returns an index into the above table of the
   nearest prime number which is greater than N, and near a power of two. */

static unsigned int
higher_prime_index (unsigned long n)
{
  unsigned int low = 0;
  unsigned int high = sizeof(prime_tab) / sizeof(prime_tab[0]);

  while (low != high)
    {
      unsigned int mid = low + (high - low) / 2;
      if (n > prime_tab[mid].prime)
	low = mid + 1;
      else
	high = mid;
    }

  /* If we've run out of primes, abort.  */
  if (n > prime_tab[low].prime)
    {
      fprintf (stderr, "Cannot find prime bigger than %lu\n", n);
      abort ();
    }

  return low;
}

/* Returns non-zero if P1 and P2 are equal.  */

static int
eq_pointer (const PTR p1, const PTR p2)
{
  return p1 == p2;
}


/* The parens around the function names in the next two definitions
   are essential in order to prevent macro expansions of the name.
   The bodies, however, are expanded as expected, so they are not
   recursive definitions.  */

/* Return the current size of given hash table.  */

#define htab_size(htab)  ((htab)->size)

size_t
(htab_size) (htab_t htab)
{
  return htab_size (htab);
}

/* Return the current number of elements in given hash table. */

#define htab_elements(htab)  ((htab)->n_elements - (htab)->n_deleted)

size_t
(htab_elements) (htab_t htab)
{
  return htab_elements (htab);
}

/* Return X % Y.  */

static inline hashval_t
htab_mod_1 (hashval_t x, hashval_t y, hashval_t inv, int shift)
{
  /* The multiplicative inverses computed above are for 32-bit types, and
     requires that we be able to compute a highpart multiply.  */
#ifdef UNSIGNED_64BIT_TYPE
  __extension__ typedef UNSIGNED_64BIT_TYPE ull;
  if (sizeof (hashval_t) * CHAR_BIT <= 32)
    {
      hashval_t t1, t2, t3, t4, q, r;

      t1 = ((ull)x * inv) >> 32;
      t2 = x - t1;
      t3 = t2 >> 1;
      t4 = t1 + t3;
      q  = t4 >> shift;
      r  = x - (q * y);

      return r;
    }
#endif

  /* Otherwise just use the native division routines.  */
  return x % y;
}

/* Compute the primary hash for HASH given HTAB's current size.  */

static inline hashval_t
htab_mod (hashval_t hash, htab_t htab)
{
  const struct prime_ent *p = &prime_tab[htab->size_prime_index];
  return htab_mod_1 (hash, p->prime, p->inv, p->shift);
}

/* Compute the secondary hash for HASH given HTAB's current size.  */

static inline hashval_t
htab_mod_m2 (hashval_t hash, htab_t htab)
{
  const struct prime_ent *p = &prime_tab[htab->size_prime_index];
  return 1 + htab_mod_1 (hash, p->prime - 2, p->inv_m2, p->shift);
}

/* This function creates table with length slightly longer than given
   source length.  Created hash table is initiated as empty (all the
   hash table entries are HTAB_EMPTY_ENTRY).  The function returns the
   created hash table, or NULL if memory allocation fails.  */

htab_t
htab_create_alloc (size_t size, htab_hash hash_f, htab_eq eq_f,
                   htab_del del_f, htab_alloc alloc_f, htab_free free_f)
{
  return htab_create_typed_alloc (size, hash_f, eq_f, del_f, alloc_f, alloc_f,
				  free_f);
}

/* As above, but uses the variants of ALLOC_F and FREE_F which accept
   an extra argument.  */

htab_t
htab_create_alloc_ex (size_t size, htab_hash hash_f, htab_eq eq_f,
		      htab_del del_f, void *alloc_arg,
		      htab_alloc_with_arg alloc_f,
		      htab_free_with_arg free_f)
{
  htab_t result;
  unsigned int size_prime_index;

  size_prime_index = higher_prime_index (size);
  size = prime_tab[size_prime_index].prime;

  result = (htab_t) (*alloc_f) (alloc_arg, 1, sizeof (struct htab));
  if (result == NULL)
    return NULL;
  result->entries = (PTR *) (*alloc_f) (alloc_arg, size, sizeof (PTR));
  if (result->entries == NULL)
    {
      if (free_f != NULL)
	(*free_f) (alloc_arg, result);
      return NULL;
    }
  result->size = size;
  result->size_prime_index = size_prime_index;
  result->hash_f = hash_f;
  result->eq_f = eq_f;
  result->del_f = del_f;
  result->alloc_arg = alloc_arg;
  result->alloc_with_arg_f = alloc_f;
  result->free_with_arg_f = free_f;
  return result;
}

/*

@@deftypefn Supplemental htab_t htab_create_typed_alloc (size_t @@var{size}, @@
htab_hash @@var{hash_f}, htab_eq @@var{eq_f}, htab_del @@var{del_f}, @@
htab_alloc @@var{alloc_tab_f}, htab_alloc @@var{alloc_f}, @@
htab_free @@var{free_f})

This function creates a hash table that uses two different allocators
@@var{alloc_tab_f} and @@var{alloc_f} to use for allocating the table itself
and its entries respectively.  This is useful when variables of different
types need to be allocated with different allocators.

The created hash table is slightly larger than @@var{size} and it is
initially empty (all the hash table entries are @@code{HTAB_EMPTY_ENTRY}).
The function returns the created hash table, or @@code{NULL} if memory
allocation fails.

@@end deftypefn

*/

htab_t
htab_create_typed_alloc (size_t size, htab_hash hash_f, htab_eq eq_f,
			 htab_del del_f, htab_alloc alloc_tab_f,
			 htab_alloc alloc_f, htab_free free_f)
{
  htab_t result;
  unsigned int size_prime_index;

  size_prime_index = higher_prime_index (size);
  size = prime_tab[size_prime_index].prime;

  result = (htab_t) (*alloc_tab_f) (1, sizeof (struct htab));
  if (result == NULL)
    return NULL;
  result->entries = (PTR *) (*alloc_f) (size, sizeof (PTR));
  if (result->entries == NULL)
    {
      if (free_f != NULL)
	(*free_f) (result);
      return NULL;
    }
  result->size = size;
  result->size_prime_index = size_prime_index;
  result->hash_f = hash_f;
  result->eq_f = eq_f;
  result->del_f = del_f;
  result->alloc_f = alloc_f;
  result->free_f = free_f;
  return result;
}


/* Update the function pointers and allocation parameter in the htab_t.  */

void
htab_set_functions_ex (htab_t htab, htab_hash hash_f, htab_eq eq_f,
                       htab_del del_f, PTR alloc_arg,
                       htab_alloc_with_arg alloc_f, htab_free_with_arg free_f)
{
  htab->hash_f = hash_f;
  htab->eq_f = eq_f;
  htab->del_f = del_f;
  htab->alloc_arg = alloc_arg;
  htab->alloc_with_arg_f = alloc_f;
  htab->free_with_arg_f = free_f;
}

/* These functions exist solely for backward compatibility.  */

#undef htab_create
htab_t
htab_create (size_t size, htab_hash hash_f, htab_eq eq_f, htab_del del_f)
{
  return htab_create_alloc (size, hash_f, eq_f, del_f, xcalloc, free);
}

htab_t
htab_try_create (size_t size, htab_hash hash_f, htab_eq eq_f, htab_del del_f)
{
  return htab_create_alloc (size, hash_f, eq_f, del_f, calloc, free);
}

/* This function frees all memory allocated for given hash table.
   Naturally the hash table must already exist. */

void
htab_delete (htab_t htab)
{
  size_t size = htab_size (htab);
  PTR *entries = htab->entries;
  int i;

  if (htab->del_f)
    for (i = size - 1; i >= 0; i--)
      if (entries[i] != HTAB_EMPTY_ENTRY && entries[i] != HTAB_DELETED_ENTRY)
	(*htab->del_f) (entries[i]);

  if (htab->free_f != NULL)
    {
      (*htab->free_f) (entries);
      (*htab->free_f) (htab);
    }
  else if (htab->free_with_arg_f != NULL)
    {
      (*htab->free_with_arg_f) (htab->alloc_arg, entries);
      (*htab->free_with_arg_f) (htab->alloc_arg, htab);
    }
}

/* This function clears all entries in the given hash table.  */

void
htab_empty (htab_t htab)
{
  size_t size = htab_size (htab);
  PTR *entries = htab->entries;
  int i;

  if (htab->del_f)
    for (i = size - 1; i >= 0; i--)
      if (entries[i] != HTAB_EMPTY_ENTRY && entries[i] != HTAB_DELETED_ENTRY)
	(*htab->del_f) (entries[i]);

  /* Instead of clearing megabyte, downsize the table.  */
  if (size > 1024*1024 / sizeof (PTR))
    {
      int nindex = higher_prime_index (1024 / sizeof (PTR));
      int nsize = prime_tab[nindex].prime;

      if (htab->free_f != NULL)
	(*htab->free_f) (htab->entries);
      else if (htab->free_with_arg_f != NULL)
	(*htab->free_with_arg_f) (htab->alloc_arg, htab->entries);
      if (htab->alloc_with_arg_f != NULL)
	htab->entries = (PTR *) (*htab->alloc_with_arg_f) (htab->alloc_arg, nsize,
						           sizeof (PTR *));
      else
	htab->entries = (PTR *) (*htab->alloc_f) (nsize, sizeof (PTR *));
     htab->size = nsize;
     htab->size_prime_index = nindex;
    }
  else
    memset (entries, 0, size * sizeof (PTR));
  htab->n_deleted = 0;
  htab->n_elements = 0;
}

/* Similar to htab_find_slot, but without several unwanted side effects:
    - Does not call htab->eq_f when it finds an existing entry.
    - Does not change the count of elements/searches/collisions in the
      hash table.
   This function also assumes there are no deleted entries in the table.
   HASH is the hash value for the element to be inserted.  */

static PTR *
find_empty_slot_for_expand (htab_t htab, hashval_t hash)
{
  hashval_t index = htab_mod (hash, htab);
  size_t size = htab_size (htab);
  PTR *slot = htab->entries + index;
  hashval_t hash2;

  if (*slot == HTAB_EMPTY_ENTRY)
    return slot;
  else if (*slot == HTAB_DELETED_ENTRY)
    abort ();

  hash2 = htab_mod_m2 (hash, htab);
  for (;;)
    {
      index += hash2;
      if (index >= size)
	index -= size;

      slot = htab->entries + index;
      if (*slot == HTAB_EMPTY_ENTRY)
	return slot;
      else if (*slot == HTAB_DELETED_ENTRY)
	abort ();
    }
}

/* The following function changes size of memory allocated for the
   entries and repeatedly inserts the table elements.  The occupancy
   of the table after the call will be about 50%.  Naturally the hash
   table must already exist.  Remember also that the place of the
   table entries is changed.  If memory allocation failures are allowed,
   this function will return zero, indicating that the table could not be
   expanded.  If all goes well, it will return a non-zero value.  */

static int
htab_expand (htab_t htab)
{
  PTR *oentries;
  PTR *olimit;
  PTR *p;
  PTR *nentries;
  size_t nsize, osize, elts;
  unsigned int oindex, nindex;

  oentries = htab->entries;
  oindex = htab->size_prime_index;
  osize = htab->size;
  olimit = oentries + osize;
  elts = htab_elements (htab);

  /* Resize only when table after removal of unused elements is either
     too full or too empty.  */
  if (elts * 2 > osize || (elts * 8 < osize && osize > 32))
    {
      nindex = higher_prime_index (elts * 2);
      nsize = prime_tab[nindex].prime;
    }
  else
    {
      nindex = oindex;
      nsize = osize;
    }

  if (htab->alloc_with_arg_f != NULL)
    nentries = (PTR *) (*htab->alloc_with_arg_f) (htab->alloc_arg, nsize,
						  sizeof (PTR *));
  else
    nentries = (PTR *) (*htab->alloc_f) (nsize, sizeof (PTR *));
  if (nentries == NULL)
    return 0;
  htab->entries = nentries;
  htab->size = nsize;
  htab->size_prime_index = nindex;
  htab->n_elements -= htab->n_deleted;
  htab->n_deleted = 0;

  p = oentries;
  do
    {
      PTR x = *p;

      if (x != HTAB_EMPTY_ENTRY && x != HTAB_DELETED_ENTRY)
	{
	  PTR *q = find_empty_slot_for_expand (htab, (*htab->hash_f) (x));

	  *q = x;
	}

      p++;
    }
  while (p < olimit);

  if (htab->free_f != NULL)
    (*htab->free_f) (oentries);
  else if (htab->free_with_arg_f != NULL)
    (*htab->free_with_arg_f) (htab->alloc_arg, oentries);
  return 1;
}

/* This function searches for a hash table entry equal to the given
   element.  It cannot be used to insert or delete an element.  */

PTR
htab_find_with_hash (htab_t htab, const PTR element, hashval_t hash)
{
  hashval_t index, hash2;
  size_t size;
  PTR entry;

  htab->searches++;
  size = htab_size (htab);
  index = htab_mod (hash, htab);

  entry = htab->entries[index];
  if (entry == HTAB_EMPTY_ENTRY
      || (entry != HTAB_DELETED_ENTRY && (*htab->eq_f) (entry, element)))
    return entry;

  hash2 = htab_mod_m2 (hash, htab);
  for (;;)
    {
      htab->collisions++;
      index += hash2;
      if (index >= size)
	index -= size;

      entry = htab->entries[index];
      if (entry == HTAB_EMPTY_ENTRY
	  || (entry != HTAB_DELETED_ENTRY && (*htab->eq_f) (entry, element)))
	return entry;
    }
}

/* Like htab_find_slot_with_hash, but compute the hash value from the
   element.  */

PTR
htab_find (htab_t htab, const PTR element)
{
  return htab_find_with_hash (htab, element, (*htab->hash_f) (element));
}

/* This function searches for a hash table slot containing an entry
   equal to the given element.  To delete an entry, call this with
   insert=NO_INSERT, then call htab_clear_slot on the slot returned
   (possibly after doing some checks).  To insert an entry, call this
   with insert=INSERT, then write the value you want into the returned
   slot.  When inserting an entry, NULL may be returned if memory
   allocation fails.  */

PTR *
htab_find_slot_with_hash (htab_t htab, const PTR element,
                          hashval_t hash, enum insert_option insert)
{
  PTR *first_deleted_slot;
  hashval_t index, hash2;
  size_t size;
  PTR entry;

  size = htab_size (htab);
  if (insert == INSERT && size * 3 <= htab->n_elements * 4)
    {
      if (htab_expand (htab) == 0)
	return NULL;
      size = htab_size (htab);
    }

  index = htab_mod (hash, htab);

  htab->searches++;
  first_deleted_slot = NULL;

  entry = htab->entries[index];
  if (entry == HTAB_EMPTY_ENTRY)
    goto empty_entry;
  else if (entry == HTAB_DELETED_ENTRY)
    first_deleted_slot = &htab->entries[index];
  else if ((*htab->eq_f) (entry, element))
    return &htab->entries[index];
      
  hash2 = htab_mod_m2 (hash, htab);
  for (;;)
    {
      htab->collisions++;
      index += hash2;
      if (index >= size)
	index -= size;
      
      entry = htab->entries[index];
      if (entry == HTAB_EMPTY_ENTRY)
	goto empty_entry;
      else if (entry == HTAB_DELETED_ENTRY)
	{
	  if (!first_deleted_slot)
	    first_deleted_slot = &htab->entries[index];
	}
      else if ((*htab->eq_f) (entry, element))
	return &htab->entries[index];
    }

 empty_entry:
  if (insert == NO_INSERT)
    return NULL;

  if (first_deleted_slot)
    {
      htab->n_deleted--;
      *first_deleted_slot = HTAB_EMPTY_ENTRY;
      return first_deleted_slot;
    }

  htab->n_elements++;
  return &htab->entries[index];
}

/* Like htab_find_slot_with_hash, but compute the hash value from the
   element.  */

PTR *
htab_find_slot (htab_t htab, const PTR element, enum insert_option insert)
{
  return htab_find_slot_with_hash (htab, element, (*htab->hash_f) (element),
				   insert);
}

/* This function deletes an element with the given value from hash
   table (the hash is computed from the element).  If there is no matching
   element in the hash table, this function does nothing.  */

void
htab_remove_elt (htab_t htab, PTR element)
{
  htab_remove_elt_with_hash (htab, element, (*htab->hash_f) (element));
}


/* This function deletes an element with the given value from hash
   table.  If there is no matching element in the hash table, this
   function does nothing.  */

void
htab_remove_elt_with_hash (htab_t htab, PTR element, hashval_t hash)
{
  PTR *slot;

  slot = htab_find_slot_with_hash (htab, element, hash, NO_INSERT);
  if (*slot == HTAB_EMPTY_ENTRY)
    return;

  if (htab->del_f)
    (*htab->del_f) (*slot);

  *slot = HTAB_DELETED_ENTRY;
  htab->n_deleted++;
}

/* This function clears a specified slot in a hash table.  It is
   useful when you've already done the lookup and don't want to do it
   again.  */

void
htab_clear_slot (htab_t htab, PTR *slot)
{
  if (slot < htab->entries || slot >= htab->entries + htab_size (htab)
      || *slot == HTAB_EMPTY_ENTRY || *slot == HTAB_DELETED_ENTRY)
    abort ();

  if (htab->del_f)
    (*htab->del_f) (*slot);

  *slot = HTAB_DELETED_ENTRY;
  htab->n_deleted++;
}

/* This function scans over the entire hash table calling
   CALLBACK for each live entry.  If CALLBACK returns false,
   the iteration stops.  INFO is passed as CALLBACK's second
   argument.  */

void
htab_traverse_noresize (htab_t htab, htab_trav callback, PTR info)
{
  PTR *slot;
  PTR *limit;
  
  slot = htab->entries;
  limit = slot + htab_size (htab);

  do
    {
      PTR x = *slot;

      if (x != HTAB_EMPTY_ENTRY && x != HTAB_DELETED_ENTRY)
	if (!(*callback) (slot, info))
	  break;
    }
  while (++slot < limit);
}

/* Like htab_traverse_noresize, but does resize the table when it is
   too empty to improve effectivity of subsequent calls.  */

void
htab_traverse (htab_t htab, htab_trav callback, PTR info)
{
  size_t size = htab_size (htab);
  if (htab_elements (htab) * 8 < size && size > 32)
    htab_expand (htab);

  htab_traverse_noresize (htab, callback, info);
}

/* Return the fraction of fixed collisions during all work with given
   hash table. */

double
htab_collisions (htab_t htab)
{
  if (htab->searches == 0)
    return 0.0;

  return (double) htab->collisions / (double) htab->searches;
}

/* Hash P as a null-terminated string.

   Copied from gcc/hashtable.c.  Zack had the following to say with respect
   to applicability, though note that unlike hashtable.c, this hash table
   implementation re-hashes rather than chain buckets.

   http://gcc.gnu.org/ml/gcc-patches/2001-08/msg01021.html
   From: Zack Weinberg <zackw@@panix.com>
   Date: Fri, 17 Aug 2001 02:15:56 -0400

   I got it by extracting all the identifiers from all the source code
   I had lying around in mid-1999, and testing many recurrences of
   the form "H_n = H_{n-1} * K + c_n * L + M" where K, L, M were either
   prime numbers or the appropriate identity.  This was the best one.
   I don't remember exactly what constituted "best", except I was
   looking at bucket-length distributions mostly.
   
   So it should be very good at hashing identifiers, but might not be
   as good at arbitrary strings.
   
   I'll add that it thoroughly trounces the hash functions recommended
   for this use at http://burtleburtle.net/bob/hash/index.html, both
   on speed and bucket distribution.  I haven't tried it against the
   function they just started using for Perl's hashes.  */

hashval_t
htab_hash_string (const PTR p)
{
  const unsigned char *str = (const unsigned char *) p;
  hashval_t r = 0;
  unsigned char c;

  while ((c = *str++) != 0)
    r = r * 67 + c - 113;

  return r;
}

/* DERIVED FROM:
--------------------------------------------------------------------
lookup2.c, by Bob Jenkins, December 1996, Public Domain.
hash(), hash2(), hash3, and mix() are externally useful functions.
Routines to test the hash are included if SELF_TEST is defined.
You can use this free for any purpose.  It has no warranty.
--------------------------------------------------------------------
*/

/*
--------------------------------------------------------------------
mix -- mix 3 32-bit values reversibly.
For every delta with one or two bit set, and the deltas of all three
  high bits or all three low bits, whether the original value of a,b,c
  is almost all zero or is uniformly distributed,
* If mix() is run forward or backward, at least 32 bits in a,b,c
  have at least 1/4 probability of changing.
* If mix() is run forward, every bit of c will change between 1/3 and
  2/3 of the time.  (Well, 22/100 and 78/100 for some 2-bit deltas.)
mix() was built out of 36 single-cycle latency instructions in a 
  structure that could supported 2x parallelism, like so:
      a -= b; 
      a -= c; x = (c>>13);
      b -= c; a ^= x;
      b -= a; x = (a<<8);
      c -= a; b ^= x;
      c -= b; x = (b>>13);
      ...
  Unfortunately, superscalar Pentiums and Sparcs can't take advantage 
  of that parallelism.  They've also turned some of those single-cycle
  latency instructions into multi-cycle latency instructions.  Still,
  this is the fastest good hash I could find.  There were about 2^^68
  to choose from.  I only looked at a billion or so.
--------------------------------------------------------------------
*/
/* same, but slower, works on systems that might have 8 byte hashval_t's */
#define mix(a,b,c) \
{ \
  a -= b; a -= c; a ^= (c>>13); \
  b -= c; b -= a; b ^= (a<< 8); \
  c -= a; c -= b; c ^= ((b&0xffffffff)>>13); \
  a -= b; a -= c; a ^= ((c&0xffffffff)>>12); \
  b -= c; b -= a; b = (b ^ (a<<16)) & 0xffffffff; \
  c -= a; c -= b; c = (c ^ (b>> 5)) & 0xffffffff; \
  a -= b; a -= c; a = (a ^ (c>> 3)) & 0xffffffff; \
  b -= c; b -= a; b = (b ^ (a<<10)) & 0xffffffff; \
  c -= a; c -= b; c = (c ^ (b>>15)) & 0xffffffff; \
}

/*
--------------------------------------------------------------------
hash() -- hash a variable-length key into a 32-bit value
  k     : the key (the unaligned variable-length array of bytes)
  len   : the length of the key, counting by bytes
  level : can be any 4-byte value
Returns a 32-bit value.  Every bit of the key affects every bit of
the return value.  Every 1-bit and 2-bit delta achieves avalanche.
About 36+6len instructions.

The best hash table sizes are powers of 2.  There is no need to do
mod a prime (mod is sooo slow!).  If you need less than 32 bits,
use a bitmask.  For example, if you need only 10 bits, do
  h = (h & hashmask(10));
In which case, the hash table should have hashsize(10) elements.

If you are hashing n strings (ub1 **)k, do it like this:
  for (i=0, h=0; i<n; ++i) h = hash( k[i], len[i], h);

By Bob Jenkins, 1996.  bob_jenkins@@burtleburtle.net.  You may use this
code any way you wish, private, educational, or commercial.  It's free.

See http://burtleburtle.net/bob/hash/evahash.html
Use for hash table lookup, or anything where one collision in 2^32 is
acceptable.  Do NOT use for cryptographic purposes.
--------------------------------------------------------------------
*/

hashval_t
iterative_hash (const PTR k_in /* the key */,
                register size_t  length /* the length of the key */,
                register hashval_t initval /* the previous hash, or
                                              an arbitrary value */)
{
  register const unsigned char *k = (const unsigned char *)k_in;
  register hashval_t a,b,c,len;

  /* Set up the internal state */
  len = length;
  a = b = 0x9e3779b9;  /* the golden ratio; an arbitrary value */
  c = initval;           /* the previous hash value */

  /*---------------------------------------- handle most of the key */
#ifndef WORDS_BIGENDIAN
  /* On a little-endian machine, if the data is 4-byte aligned we can hash
     by word for better speed.  This gives nondeterministic results on
     big-endian machines.  */
  if (sizeof (hashval_t) == 4 && (((size_t)k)&3) == 0)
    while (len >= 12)    /* aligned */
      {
	a += *(hashval_t *)(k+0);
	b += *(hashval_t *)(k+4);
	c += *(hashval_t *)(k+8);
	mix(a,b,c);
	k += 12; len -= 12;
      }
  else /* unaligned */
#endif
    while (len >= 12)
      {
	a += (k[0] +((hashval_t)k[1]<<8) +((hashval_t)k[2]<<16) +((hashval_t)k[3]<<24));
	b += (k[4] +((hashval_t)k[5]<<8) +((hashval_t)k[6]<<16) +((hashval_t)k[7]<<24));
	c += (k[8] +((hashval_t)k[9]<<8) +((hashval_t)k[10]<<16)+((hashval_t)k[11]<<24));
	mix(a,b,c);
	k += 12; len -= 12;
      }

  /*------------------------------------- handle the last 11 bytes */
  c += length;
  switch(len)              /* all the case statements fall through */
    {
    case 11: c+=((hashval_t)k[10]<<24);
    case 10: c+=((hashval_t)k[9]<<16);
    case 9 : c+=((hashval_t)k[8]<<8);
      /* the first byte of c is reserved for the length */
    case 8 : b+=((hashval_t)k[7]<<24);
    case 7 : b+=((hashval_t)k[6]<<16);
    case 6 : b+=((hashval_t)k[5]<<8);
    case 5 : b+=k[4];
    case 4 : a+=((hashval_t)k[3]<<24);
    case 3 : a+=((hashval_t)k[2]<<16);
    case 2 : a+=((hashval_t)k[1]<<8);
    case 1 : a+=k[0];
      /* case 0: nothing left to add */
    }
  mix(a,b,c);
  /*-------------------------------------------- report the result */
  return c;
}

/* Returns a hash code for pointer P. Simplified version of evahash */

static hashval_t
hash_pointer (const PTR p)
{
  intptr_t v = (intptr_t) p;
  unsigned a, b, c;

  a = b = 0x9e3779b9;
  a += v >> (sizeof (intptr_t) * CHAR_BIT / 2);
  b += v & (((intptr_t) 1 << (sizeof (intptr_t) * CHAR_BIT / 2)) - 1);
  c = 0x42135234;
  mix (a, b, c);
  return c;
}
@


1.39
log
@merge from gcc
@
text
@d993 2
a994 11
  if (sizeof (intptr_t) == 4) 
    {
      /* Mix as 16bit for now */
      a += v >> 16;
      b += v & 0xffff;
    }
  else
    {
      a += v >> 32;
      b += v & 0xffffffff;
    }
@


1.38
log
@libiberty: documentation markup and order fixes.

libiberty/:
	* splay-tree.c: Escape wrapping newlines in texinfo markup
	with '@@', to fix function declaration output rendering.
	* gather-docs: Relax and improve macro name matching to actually
	match all current names and to allow input line wrapping.
	* bsearch.c, concat.c, crc32.c, fnmatch.txh, fopen_unlocked.c,
	hashtab.c, insque.c, make-relative-prefix.c, memchr.c, memcmp.c,
	memcpy.c, memmem.c, memmove.c, mempcpy.c, memset.c,
	pexecute.txh, random.c, setenv.c, setproctitle.c,
	simple-object.txh, snprintf.c, stpncpy.c, strncmp.c, strtod.c,
	strtol.c, vasprintf.c, vprintf.c, vsnprintf.c, xmemdup.c:
	Wrap long texinfo input lines.
	* functions.texi: Regenerate.
@
text
@a196 8
/* Returns a hash code for P.  */

static hashval_t
hash_pointer (const PTR p)
{
  return (hashval_t) ((intptr_t)p >> 3);
}

d983 25
@


1.37
log
@merge from gcc
@
text
@d336 3
a338 3
@@deftypefn Supplemental htab_t htab_create_typed_alloc (size_t @@var{size},
htab_hash @@var{hash_f}, htab_eq @@var{eq_f}, htab_del @@var{del_f},
htab_alloc @@var{alloc_tab_f}, htab_alloc @@var{alloc_f},
@


1.36
log
@merge from gcc
@
text
@d2 1
a2 1
   Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2009
d294 13
d313 1
a313 1
  result = (htab_t) (*alloc_f) (1, sizeof (struct htab));
d316 1
a316 1
  result->entries = (PTR *) (*alloc_f) (size, sizeof (PTR));
d320 1
a320 1
	(*free_f) (result);
d328 3
a330 2
  result->alloc_f = alloc_f;
  result->free_f = free_f;
d334 20
a353 2
/* As above, but use the variants of alloc_f and free_f which accept
   an extra argument.  */
d356 3
a358 4
htab_create_alloc_ex (size_t size, htab_hash hash_f, htab_eq eq_f,
                      htab_del del_f, void *alloc_arg,
                      htab_alloc_with_arg alloc_f,
		      htab_free_with_arg free_f)
d366 1
a366 1
  result = (htab_t) (*alloc_f) (alloc_arg, 1, sizeof (struct htab));
d369 1
a369 1
  result->entries = (PTR *) (*alloc_f) (alloc_arg, size, sizeof (PTR));
d373 1
a373 1
	(*free_f) (alloc_arg, result);
d381 2
a382 3
  result->alloc_arg = alloc_arg;
  result->alloc_with_arg_f = alloc_f;
  result->free_with_arg_f = free_f;
d386 1
@


1.35
log
@2009-09-03  Ozkan Sezer  <sezeroz@@gmail.com>

	PR target/39065
	* configure.ac: Also check for intptr_t.
	* config.h.in: Regenerated.
	* configure: Regenerated.
	* hashtab.c (hash_pointer): Cast the pointer argument to intptr_t
	instead of of long.
@
text
@d53 3
@


1.35.2.1
log
@For Tru64.

2009-09-30  Rainer Orth  <ro@@CeBiTec.Uni-Bielefeld.DE>

	* hashtab.c [HAVE_INTTYPES_H]: Include <inttypes.h>.
@
text
@a52 3
#ifdef HAVE_INTTYPES_H
#include <inttypes.h>
#endif
@


1.34
log
@merge from gcc
@
text
@d199 1
a199 1
  return (hashval_t) ((long)p >> 3);
@


1.33
log
@merge from gcc
@
text
@d2 1
a2 1
   Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004
d762 2
a763 1
  if (htab_elements (htab) * 8 < htab_size (htab))
@


1.32
log
@merge from gcc
@
text
@d424 22
a445 1
  memset (entries, 0, size * sizeof (PTR));
@


1.31
log
@merge from gcc
@
text
@a66 9
/* This macro defines reserved value for empty table entry. */

#define EMPTY_ENTRY    ((PTR) 0)

/* This macro defines reserved value for table entry which contained
   a deleted element. */

#define DELETED_ENTRY  ((PTR) 1)

d284 1
a284 1
   hash table entries are EMPTY_ENTRY).  The function returns the
d395 1
a395 1
      if (entries[i] != EMPTY_ENTRY && entries[i] != DELETED_ENTRY)
d421 1
a421 1
      if (entries[i] != EMPTY_ENTRY && entries[i] != DELETED_ENTRY)
d442 1
a442 1
  if (*slot == EMPTY_ENTRY)
d444 1
a444 1
  else if (*slot == DELETED_ENTRY)
d455 1
a455 1
      if (*slot == EMPTY_ENTRY)
d457 1
a457 1
      else if (*slot == DELETED_ENTRY)
d517 1
a517 1
      if (x != EMPTY_ENTRY && x != DELETED_ENTRY)
d550 2
a551 2
  if (entry == EMPTY_ENTRY
      || (entry != DELETED_ENTRY && (*htab->eq_f) (entry, element)))
d563 2
a564 2
      if (entry == EMPTY_ENTRY
	  || (entry != DELETED_ENTRY && (*htab->eq_f) (entry, element)))
d609 1
a609 1
  if (entry == EMPTY_ENTRY)
d611 1
a611 1
  else if (entry == DELETED_ENTRY)
d625 1
a625 1
      if (entry == EMPTY_ENTRY)
d627 1
a627 1
      else if (entry == DELETED_ENTRY)
d643 1
a643 1
      *first_deleted_slot = EMPTY_ENTRY;
d682 1
a682 1
  if (*slot == EMPTY_ENTRY)
d688 1
a688 1
  *slot = DELETED_ENTRY;
d700 1
a700 1
      || *slot == EMPTY_ENTRY || *slot == DELETED_ENTRY)
d706 1
a706 1
  *slot = DELETED_ENTRY;
d720 1
a720 1

d728 1
a728 1
      if (x != EMPTY_ENTRY && x != DELETED_ENTRY)
@


1.30
log
@Update the address and phone number of the FSF organization.
@
text
@a218 1
/* Return the current size of given hash table. */
d220 11
a230 2
inline size_t
htab_size (htab_t htab)
d232 1
a232 1
  return htab->size;
d237 4
a240 2
inline size_t
htab_elements (htab_t htab)
d242 1
a242 1
  return htab->n_elements - htab->n_deleted;
d330 4
a333 9
htab_create_alloc_ex (size, hash_f, eq_f, del_f, alloc_arg, alloc_f,
		      free_f)
     size_t size;
     htab_hash hash_f;
     htab_eq eq_f;
     htab_del del_f;
     PTR alloc_arg;
     htab_alloc_with_arg alloc_f;
     htab_free_with_arg free_f;
@


1.29
log
@merge from gcc
@
text
@d19 2
a20 2
not, write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
Boston, MA 02111-1307, USA.  */
@


1.28
log
@merge from gcc
@
text
@d76 8
a83 8
static unsigned int higher_prime_index PARAMS ((unsigned long));
static hashval_t htab_mod_1 PARAMS ((hashval_t, hashval_t, hashval_t, int));
static hashval_t htab_mod PARAMS ((hashval_t, htab_t));
static hashval_t htab_mod_m2 PARAMS ((hashval_t, htab_t));
static hashval_t hash_pointer PARAMS ((const void *));
static int eq_pointer PARAMS ((const void *, const void *));
static int htab_expand PARAMS ((htab_t));
static PTR *find_empty_slot_for_expand  PARAMS ((htab_t, hashval_t));
d179 1
a179 2
higher_prime_index (n)
     unsigned long n;
d206 1
a206 2
hash_pointer (p)
     const PTR p;
d214 1
a214 3
eq_pointer (p1, p2)
     const PTR p1;
     const PTR p2;
d222 1
a222 2
htab_size (htab)
     htab_t htab;
d230 1
a230 2
htab_elements (htab)
     htab_t htab;
d238 1
a238 3
htab_mod_1 (x, y, inv, shift)
     hashval_t x, y, inv;
     int shift;
d266 1
a266 3
htab_mod (hash, htab)
     hashval_t hash;
     htab_t htab;
d275 1
a275 3
htab_mod_m2 (hash, htab)
     hashval_t hash;
     htab_t htab;
d287 2
a288 7
htab_create_alloc (size, hash_f, eq_f, del_f, alloc_f, free_f)
     size_t size;
     htab_hash hash_f;
     htab_eq eq_f;
     htab_del del_f;
     htab_alloc alloc_f;
     htab_free free_f;
d360 3
a362 8
htab_set_functions_ex (htab, hash_f, eq_f, del_f, alloc_arg, alloc_f, free_f)
     htab_t htab;
     htab_hash hash_f;
     htab_eq eq_f;
     htab_del del_f;
     PTR alloc_arg;
     htab_alloc_with_arg alloc_f;
     htab_free_with_arg free_f;
d376 1
a376 5
htab_create (size, hash_f, eq_f, del_f)
     size_t size;
     htab_hash hash_f;
     htab_eq eq_f;
     htab_del del_f;
d382 1
a382 5
htab_try_create (size, hash_f, eq_f, del_f)
     size_t size;
     htab_hash hash_f;
     htab_eq eq_f;
     htab_del del_f;
d391 1
a391 2
htab_delete (htab)
     htab_t htab;
d417 1
a417 2
htab_empty (htab)
     htab_t htab;
d439 1
a439 3
find_empty_slot_for_expand (htab, hash)
     htab_t htab;
     hashval_t hash;
d475 1
a475 2
htab_expand (htab)
     htab_t htab;
d543 1
a543 4
htab_find_with_hash (htab, element, hash)
     htab_t htab;
     const PTR element;
     hashval_t hash;
d577 1
a577 3
htab_find (htab, element)
     htab_t htab;
     const PTR element;
d591 2
a592 5
htab_find_slot_with_hash (htab, element, hash, insert)
     htab_t htab;
     const PTR element;
     hashval_t hash;
     enum insert_option insert;
d659 1
a659 4
htab_find_slot (htab, element, insert)
     htab_t htab;
     const PTR element;
     enum insert_option insert;
d670 1
a670 3
htab_remove_elt (htab, element)
     htab_t htab;
     PTR element;
d681 1
a681 4
htab_remove_elt_with_hash (htab, element, hash)
     htab_t htab;
     PTR element;
     hashval_t hash;
d701 1
a701 3
htab_clear_slot (htab, slot)
     htab_t htab;
     PTR *slot;
d720 1
a720 4
htab_traverse_noresize (htab, callback, info)
     htab_t htab;
     htab_trav callback;
     PTR info;
d743 1
a743 4
htab_traverse (htab, callback, info)
     htab_t htab;
     htab_trav callback;
     PTR info;
d755 1
a755 2
htab_collisions (htab)
     htab_t htab;
d789 1
a789 2
htab_hash_string (p)
     const PTR p;
d878 5
a882 4
hashval_t iterative_hash (k_in, length, initval)
     const PTR k_in;               /* the key */
     register size_t  length;      /* the length of the key */
     register hashval_t  initval;  /* the previous hash, or an arbitrary value */
@


1.27
log
@merge from gcc
@
text
@d624 5
a628 5
   INSERT = 0, then call htab_clear_slot on the slot returned (possibly
   after doing some checks).  To insert an entry, call this with
   INSERT = 1, then write the value you want into the returned slot.
   When inserting an entry, NULL may be returned if memory allocation
   fails.  */
@


1.26
log
@merge from gcc
@
text
@d2 2
a3 1
   Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.
a43 1

a46 1

d50 6
d60 1
d63 4
d76 4
a79 1
static unsigned long higher_prime_number PARAMS ((unsigned long));
d91 86
a176 2
/* The following function returns a nearest prime number which is
   greater than N, and near a power of two. */
d178 2
a179 2
static unsigned long
higher_prime_number (n)
d182 2
a183 38
  /* These are primes that are near, but slightly smaller than, a
     power of two.  */
  static const unsigned long primes[] = {
    (unsigned long) 7,
    (unsigned long) 13,
    (unsigned long) 31,
    (unsigned long) 61,
    (unsigned long) 127,
    (unsigned long) 251,
    (unsigned long) 509,
    (unsigned long) 1021,
    (unsigned long) 2039,
    (unsigned long) 4093,
    (unsigned long) 8191,
    (unsigned long) 16381,
    (unsigned long) 32749,
    (unsigned long) 65521,
    (unsigned long) 131071,
    (unsigned long) 262139,
    (unsigned long) 524287,
    (unsigned long) 1048573,
    (unsigned long) 2097143,
    (unsigned long) 4194301,
    (unsigned long) 8388593,
    (unsigned long) 16777213,
    (unsigned long) 33554393,
    (unsigned long) 67108859,
    (unsigned long) 134217689,
    (unsigned long) 268435399,
    (unsigned long) 536870909,
    (unsigned long) 1073741789,
    (unsigned long) 2147483647,
					/* 4294967291L */
    ((unsigned long) 2147483647) + ((unsigned long) 2147483644),
  };

  const unsigned long *low = &primes[0];
  const unsigned long *high = &primes[sizeof(primes) / sizeof(primes[0])];
d187 2
a188 2
      const unsigned long *mid = low + (high - low) / 2;
      if (n > *mid)
d195 1
a195 1
  if (n > *low)
d201 1
a201 1
  return *low;
d241 30
d278 2
a279 1
  return hash % htab_size (htab);
d289 2
a290 1
  return 1 + hash % (htab_size (htab) - 2);
d308 4
a312 1
  size = higher_prime_number (size);
d324 1
d348 4
a352 1
  size = higher_prime_number (size);
d364 1
d516 2
a517 1
  size_t nsize;
d520 4
a523 1
  olimit = oentries + htab->size;
d527 5
a531 4
  if ((htab->n_elements - htab->n_deleted) * 2 > htab->size
      || ((htab->n_elements - htab->n_deleted) * 8 < htab->size
	  && htab->size > 32))
    nsize = higher_prime_number ((htab->n_elements - htab->n_deleted) * 2);
d533 4
a536 1
    nsize = htab->size;
d547 1
a547 1

@


1.25
log
@merge from gcc
@
text
@d603 13
d620 1
a620 1
htab_remove_elt (htab, element)
d623 1
d627 1
a627 1
  slot = htab_find_slot (htab, element, NO_INSERT);
@


1.24
log
@merge from gcc
@
text
@d162 38
d323 2
d328 3
a330 4
    for (i = htab->size - 1; i >= 0; i--)
      if (htab->entries[i] != EMPTY_ENTRY
	  && htab->entries[i] != DELETED_ENTRY)
	(*htab->del_f) (htab->entries[i]);
d334 1
a334 1
      (*htab->free_f) (htab->entries);
d339 1
a339 1
      (*htab->free_with_arg_f) (htab->alloc_arg, htab->entries);
d350 2
d355 3
a357 4
    for (i = htab->size - 1; i >= 0; i--)
      if (htab->entries[i] != EMPTY_ENTRY
	  && htab->entries[i] != DELETED_ENTRY)
	(*htab->del_f) (htab->entries[i]);
d359 1
a359 1
  memset (htab->entries, 0, htab->size * sizeof (PTR));
d374 2
a375 2
  size_t size = htab->size;
  unsigned int index = hash % size;
d384 1
a384 1
  hash2 = 1 + hash % (size - 2);
d474 1
a474 2
  unsigned int index;
  hashval_t hash2;
d479 2
a480 2
  size = htab->size;
  index = hash % size;
d487 1
a487 2
  hash2 = 1 + hash % (size - 2);

d529 1
a529 2
  unsigned int index;
  hashval_t hash2;
d533 7
a539 3
  if (insert == INSERT && htab->size * 3 <= htab->n_elements * 4
      && htab_expand (htab) == 0)
    return NULL;
d541 1
a541 2
  size = htab->size;
  index = hash % size;
d554 1
a554 1
  hash2 = 1 + hash % (size - 2);
d633 1
a633 1
  if (slot < htab->entries || slot >= htab->entries + htab->size
d659 1
a659 1
  limit = slot + htab->size;
d681 1
a681 1
  if ((htab->n_elements - htab->n_deleted) * 8 < htab->size)
a684 18
}

/* Return the current size of given hash table. */

size_t
htab_size (htab)
     htab_t htab;
{
  return htab->size;
}

/* Return the current number of elements in given hash table. */

size_t
htab_elements (htab)
     htab_t htab;
{
  return htab->n_elements - htab->n_deleted;
@


1.24.8.1
log
@Merge GDB mainline of 20040402 to intercu branch.
@
text
@a161 38
/* Return the current size of given hash table. */

inline size_t
htab_size (htab)
     htab_t htab;
{
  return htab->size;
}

/* Return the current number of elements in given hash table. */

inline size_t
htab_elements (htab)
     htab_t htab;
{
  return htab->n_elements - htab->n_deleted;
}

/* Compute the primary hash for HASH given HTAB's current size.  */

static inline hashval_t
htab_mod (hash, htab)
     hashval_t hash;
     htab_t htab;
{
  return hash % htab_size (htab);
}

/* Compute the secondary hash for HASH given HTAB's current size.  */

static inline hashval_t
htab_mod_m2 (hash, htab)
     hashval_t hash;
     htab_t htab;
{
  return 1 + hash % (htab_size (htab) - 2);
}

a284 2
  size_t size = htab_size (htab);
  PTR *entries = htab->entries;
d288 4
a291 3
    for (i = size - 1; i >= 0; i--)
      if (entries[i] != EMPTY_ENTRY && entries[i] != DELETED_ENTRY)
	(*htab->del_f) (entries[i]);
d295 1
a295 1
      (*htab->free_f) (entries);
d300 1
a300 1
      (*htab->free_with_arg_f) (htab->alloc_arg, entries);
a310 2
  size_t size = htab_size (htab);
  PTR *entries = htab->entries;
d314 4
a317 3
    for (i = size - 1; i >= 0; i--)
      if (entries[i] != EMPTY_ENTRY && entries[i] != DELETED_ENTRY)
	(*htab->del_f) (entries[i]);
d319 1
a319 1
  memset (entries, 0, size * sizeof (PTR));
d334 2
a335 2
  hashval_t index = htab_mod (hash, htab);
  size_t size = htab_size (htab);
d344 1
a344 1
  hash2 = htab_mod_m2 (hash, htab);
d434 2
a435 1
  hashval_t index, hash2;
d440 2
a441 2
  size = htab_size (htab);
  index = htab_mod (hash, htab);
d448 2
a449 1
  hash2 = htab_mod_m2 (hash, htab);
d491 2
a492 1
  hashval_t index, hash2;
d496 3
a498 7
  size = htab_size (htab);
  if (insert == INSERT && size * 3 <= htab->n_elements * 4)
    {
      if (htab_expand (htab) == 0)
	return NULL;
      size = htab_size (htab);
    }
d500 2
a501 1
  index = htab_mod (hash, htab);
d514 1
a514 1
  hash2 = htab_mod_m2 (hash, htab);
d593 1
a593 1
  if (slot < htab->entries || slot >= htab->entries + htab_size (htab)
d619 1
a619 1
  limit = slot + htab_size (htab);
d641 1
a641 1
  if (htab_elements (htab) * 8 < htab_size (htab))
d645 18
@


1.24.8.2
log
@Merge mainline to intercu branch - 2004-09-15
@
text
@d2 1
a2 2
   Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004
   Free Software Foundation, Inc.
d43 1
d47 1
a50 6
#ifdef HAVE_LIMITS_H
#include <limits.h>
#endif
#ifdef HAVE_STDINT_H
#include <stdint.h>
#endif
a54 1
#include "ansidecl.h"
a56 4
#ifndef CHAR_BIT
#define CHAR_BIT 8
#endif

d66 1
a66 4
static unsigned int higher_prime_index PARAMS ((unsigned long));
static hashval_t htab_mod_1 PARAMS ((hashval_t, hashval_t, hashval_t, int));
static hashval_t htab_mod PARAMS ((hashval_t, htab_t));
static hashval_t htab_mod_m2 PARAMS ((hashval_t, htab_t));
d78 2
a79 1
/* Table of primes and multiplicative inverses.
d81 3
a83 10
   Note that these are not minimally reduced inverses.  Unlike when generating
   code to divide by a constant, we want to be able to use the same algorithm
   all the time.  All of these inverses (are implied to) have bit 32 set.

   For the record, here's the function that computed the table; it's a 
   vastly simplified version of the function of the same name from gcc.  */

#if 0
unsigned int
ceil_log2 (unsigned int x)
d85 35
a119 28
  int i;
  for (i = 31; i >= 0 ; --i)
    if (x > (1u << i))
      return i+1;
  abort ();
}

unsigned int
choose_multiplier (unsigned int d, unsigned int *mlp, unsigned char *shiftp)
{
  unsigned long long mhigh;
  double nx;
  int lgup, post_shift;
  int pow, pow2;
  int n = 32, precision = 32;

  lgup = ceil_log2 (d);
  pow = n + lgup;
  pow2 = n + lgup - precision;

  nx = ldexp (1.0, pow) + ldexp (1.0, pow2);
  mhigh = nx / d;

  *shiftp = lgup - 1;
  *mlp = mhigh;
  return mhigh >> 32;
}
#endif
d121 2
a122 51
struct prime_ent
{
  hashval_t prime;
  hashval_t inv;
  hashval_t inv_m2;	/* inverse of prime-2 */
  hashval_t shift;
};

static struct prime_ent const prime_tab[] = {
  {          7, 0x24924925, 0x9999999b, 2 },
  {         13, 0x3b13b13c, 0x745d1747, 3 },
  {         31, 0x08421085, 0x1a7b9612, 4 },
  {         61, 0x0c9714fc, 0x15b1e5f8, 5 },
  {        127, 0x02040811, 0x0624dd30, 6 },
  {        251, 0x05197f7e, 0x073260a5, 7 },
  {        509, 0x01824366, 0x02864fc8, 8 },
  {       1021, 0x00c0906d, 0x014191f7, 9 },
  {       2039, 0x0121456f, 0x0161e69e, 10 },
  {       4093, 0x00300902, 0x00501908, 11 },
  {       8191, 0x00080041, 0x00180241, 12 },
  {      16381, 0x000c0091, 0x00140191, 13 },
  {      32749, 0x002605a5, 0x002a06e6, 14 },
  {      65521, 0x000f00e2, 0x00110122, 15 },
  {     131071, 0x00008001, 0x00018003, 16 },
  {     262139, 0x00014002, 0x0001c004, 17 },
  {     524287, 0x00002001, 0x00006001, 18 },
  {    1048573, 0x00003001, 0x00005001, 19 },
  {    2097143, 0x00004801, 0x00005801, 20 },
  {    4194301, 0x00000c01, 0x00001401, 21 },
  {    8388593, 0x00001e01, 0x00002201, 22 },
  {   16777213, 0x00000301, 0x00000501, 23 },
  {   33554393, 0x00001381, 0x00001481, 24 },
  {   67108859, 0x00000141, 0x000001c1, 25 },
  {  134217689, 0x000004e1, 0x00000521, 26 },
  {  268435399, 0x00000391, 0x000003b1, 27 },
  {  536870909, 0x00000019, 0x00000029, 28 },
  { 1073741789, 0x0000008d, 0x00000095, 29 },
  { 2147483647, 0x00000003, 0x00000007, 30 },
  /* Avoid "decimal constant so large it is unsigned" for 4294967291.  */
  { 0xfffffffb, 0x00000006, 0x00000008, 31 }
};

/* The following function returns an index into the above table of the
   nearest prime number which is greater than N, and near a power of two. */

static unsigned int
higher_prime_index (n)
     unsigned long n;
{
  unsigned int low = 0;
  unsigned int high = sizeof(prime_tab) / sizeof(prime_tab[0]);
d126 2
a127 2
      unsigned int mid = low + (high - low) / 2;
      if (n > prime_tab[mid].prime)
d134 1
a134 1
  if (n > prime_tab[low].prime)
d140 1
a140 1
  return low;
a179 30
/* Return X % Y.  */

static inline hashval_t
htab_mod_1 (x, y, inv, shift)
     hashval_t x, y, inv;
     int shift;
{
  /* The multiplicative inverses computed above are for 32-bit types, and
     requires that we be able to compute a highpart multiply.  */
#ifdef UNSIGNED_64BIT_TYPE
  __extension__ typedef UNSIGNED_64BIT_TYPE ull;
  if (sizeof (hashval_t) * CHAR_BIT <= 32)
    {
      hashval_t t1, t2, t3, t4, q, r;

      t1 = ((ull)x * inv) >> 32;
      t2 = x - t1;
      t3 = t2 >> 1;
      t4 = t1 + t3;
      q  = t4 >> shift;
      r  = x - (q * y);

      return r;
    }
#endif

  /* Otherwise just use the native division routines.  */
  return x % y;
}

d187 1
a187 2
  const struct prime_ent *p = &prime_tab[htab->size_prime_index];
  return htab_mod_1 (hash, p->prime, p->inv, p->shift);
d197 1
a197 2
  const struct prime_ent *p = &prime_tab[htab->size_prime_index];
  return 1 + htab_mod_1 (hash, p->prime - 2, p->inv_m2, p->shift);
a214 4
  unsigned int size_prime_index;

  size_prime_index = higher_prime_index (size);
  size = prime_tab[size_prime_index].prime;
d216 1
a227 1
  result->size_prime_index = size_prime_index;
a250 4
  unsigned int size_prime_index;

  size_prime_index = higher_prime_index (size);
  size = prime_tab[size_prime_index].prime;
d252 1
a263 1
  result->size_prime_index = size_prime_index;
d415 1
a415 2
  size_t nsize, osize, elts;
  unsigned int oindex, nindex;
d418 1
a418 4
  oindex = htab->size_prime_index;
  osize = htab->size;
  olimit = oentries + osize;
  elts = htab_elements (htab);
d422 4
a425 5
  if (elts * 2 > osize || (elts * 8 < osize && osize > 32))
    {
      nindex = higher_prime_index (elts * 2);
      nsize = prime_tab[nindex].prime;
    }
d427 1
a427 4
    {
      nindex = oindex;
      nsize = osize;
    }
d438 1
a438 1
  htab->size_prime_index = nindex;
a602 13
   table (the hash is computed from the element).  If there is no matching
   element in the hash table, this function does nothing.  */

void
htab_remove_elt (htab, element)
     htab_t htab;
     PTR element;
{
  htab_remove_elt_with_hash (htab, element, (*htab->hash_f) (element));
}


/* This function deletes an element with the given value from hash
d607 1
a607 1
htab_remove_elt_with_hash (htab, element, hash)
a609 1
     hashval_t hash;
d613 1
a613 1
  slot = htab_find_slot_with_hash (htab, element, hash, NO_INSERT);
@


1.23
log
@merge from gcc
@
text
@a537 2
  htab->n_elements++;

d540 1
d545 1
@


1.22
log
@s/burtle/iterative
@
text
@d48 4
@


1.21
log
@libiberty/
        * hashtab.c (burtle_hash): New fn.
        * configure.in: Add AC_C_BIGENDIAN_CROSS.
        * aclocal.m4: Include accross.m4.
        * configure, config.in: Regenerate.
include/
        * hashtab.h (burtle_hash): Prototype.
        (burtle_hash_object): New macro.
@
text
@d790 1
a790 1
hashval_t burtle_hash (k_in, length, initval)
@


1.20
log
@merge from gcc
@
text
@d712 138
@


1.20.2.1
log
@2003-05-18  Mark Kettenis  <kettenis@@gnu.org>

	Merge from mainline.
	* i386-tdep.h (I386_SIZEOF_GREGS, I386_SIZEOF_FREGS,
	I386_SIZEOF_XREGS): Remove defenitions.
	(IS_FP_REGNUM, IS_SSE_REGNUM): Remove definitions.
	* i386-tdep.c (i386_gdbarch_init): Don't set register_bytes,
	register_size, call_dummy_words and sizeof_call_dummy.
	* i386-linux-tdep.c (i386_linux_init_abi): Don't set register_bytes.
	* x86-64-tdep.c (x86_64_init_abi): Don't set register_bytes and
	register_size.
	(x86_64_register_bytes): Remove variable.
	(_initialize_x86_64_tdep): Remove function.

	* i386-linux-tdep.c (i386_linux_sigcontext_addr): Call read_memory
	with correct arguments.
	* config/i386/x86-64linux.mt (TDEPFILES): Add i386-linux-tdep.o.
@
text
@a711 138

/* DERIVED FROM:
--------------------------------------------------------------------
lookup2.c, by Bob Jenkins, December 1996, Public Domain.
hash(), hash2(), hash3, and mix() are externally useful functions.
Routines to test the hash are included if SELF_TEST is defined.
You can use this free for any purpose.  It has no warranty.
--------------------------------------------------------------------
*/

/*
--------------------------------------------------------------------
mix -- mix 3 32-bit values reversibly.
For every delta with one or two bit set, and the deltas of all three
  high bits or all three low bits, whether the original value of a,b,c
  is almost all zero or is uniformly distributed,
* If mix() is run forward or backward, at least 32 bits in a,b,c
  have at least 1/4 probability of changing.
* If mix() is run forward, every bit of c will change between 1/3 and
  2/3 of the time.  (Well, 22/100 and 78/100 for some 2-bit deltas.)
mix() was built out of 36 single-cycle latency instructions in a 
  structure that could supported 2x parallelism, like so:
      a -= b; 
      a -= c; x = (c>>13);
      b -= c; a ^= x;
      b -= a; x = (a<<8);
      c -= a; b ^= x;
      c -= b; x = (b>>13);
      ...
  Unfortunately, superscalar Pentiums and Sparcs can't take advantage 
  of that parallelism.  They've also turned some of those single-cycle
  latency instructions into multi-cycle latency instructions.  Still,
  this is the fastest good hash I could find.  There were about 2^^68
  to choose from.  I only looked at a billion or so.
--------------------------------------------------------------------
*/
/* same, but slower, works on systems that might have 8 byte hashval_t's */
#define mix(a,b,c) \
{ \
  a -= b; a -= c; a ^= (c>>13); \
  b -= c; b -= a; b ^= (a<< 8); \
  c -= a; c -= b; c ^= ((b&0xffffffff)>>13); \
  a -= b; a -= c; a ^= ((c&0xffffffff)>>12); \
  b -= c; b -= a; b = (b ^ (a<<16)) & 0xffffffff; \
  c -= a; c -= b; c = (c ^ (b>> 5)) & 0xffffffff; \
  a -= b; a -= c; a = (a ^ (c>> 3)) & 0xffffffff; \
  b -= c; b -= a; b = (b ^ (a<<10)) & 0xffffffff; \
  c -= a; c -= b; c = (c ^ (b>>15)) & 0xffffffff; \
}

/*
--------------------------------------------------------------------
hash() -- hash a variable-length key into a 32-bit value
  k     : the key (the unaligned variable-length array of bytes)
  len   : the length of the key, counting by bytes
  level : can be any 4-byte value
Returns a 32-bit value.  Every bit of the key affects every bit of
the return value.  Every 1-bit and 2-bit delta achieves avalanche.
About 36+6len instructions.

The best hash table sizes are powers of 2.  There is no need to do
mod a prime (mod is sooo slow!).  If you need less than 32 bits,
use a bitmask.  For example, if you need only 10 bits, do
  h = (h & hashmask(10));
In which case, the hash table should have hashsize(10) elements.

If you are hashing n strings (ub1 **)k, do it like this:
  for (i=0, h=0; i<n; ++i) h = hash( k[i], len[i], h);

By Bob Jenkins, 1996.  bob_jenkins@@burtleburtle.net.  You may use this
code any way you wish, private, educational, or commercial.  It's free.

See http://burtleburtle.net/bob/hash/evahash.html
Use for hash table lookup, or anything where one collision in 2^32 is
acceptable.  Do NOT use for cryptographic purposes.
--------------------------------------------------------------------
*/

hashval_t iterative_hash (k_in, length, initval)
     const PTR k_in;               /* the key */
     register size_t  length;      /* the length of the key */
     register hashval_t  initval;  /* the previous hash, or an arbitrary value */
{
  register const unsigned char *k = (const unsigned char *)k_in;
  register hashval_t a,b,c,len;

  /* Set up the internal state */
  len = length;
  a = b = 0x9e3779b9;  /* the golden ratio; an arbitrary value */
  c = initval;           /* the previous hash value */

  /*---------------------------------------- handle most of the key */
#ifndef WORDS_BIGENDIAN
  /* On a little-endian machine, if the data is 4-byte aligned we can hash
     by word for better speed.  This gives nondeterministic results on
     big-endian machines.  */
  if (sizeof (hashval_t) == 4 && (((size_t)k)&3) == 0)
    while (len >= 12)    /* aligned */
      {
	a += *(hashval_t *)(k+0);
	b += *(hashval_t *)(k+4);
	c += *(hashval_t *)(k+8);
	mix(a,b,c);
	k += 12; len -= 12;
      }
  else /* unaligned */
#endif
    while (len >= 12)
      {
	a += (k[0] +((hashval_t)k[1]<<8) +((hashval_t)k[2]<<16) +((hashval_t)k[3]<<24));
	b += (k[4] +((hashval_t)k[5]<<8) +((hashval_t)k[6]<<16) +((hashval_t)k[7]<<24));
	c += (k[8] +((hashval_t)k[9]<<8) +((hashval_t)k[10]<<16)+((hashval_t)k[11]<<24));
	mix(a,b,c);
	k += 12; len -= 12;
      }

  /*------------------------------------- handle the last 11 bytes */
  c += length;
  switch(len)              /* all the case statements fall through */
    {
    case 11: c+=((hashval_t)k[10]<<24);
    case 10: c+=((hashval_t)k[9]<<16);
    case 9 : c+=((hashval_t)k[8]<<8);
      /* the first byte of c is reserved for the length */
    case 8 : b+=((hashval_t)k[7]<<24);
    case 7 : b+=((hashval_t)k[6]<<16);
    case 6 : b+=((hashval_t)k[5]<<8);
    case 5 : b+=k[4];
    case 4 : a+=((hashval_t)k[3]<<24);
    case 3 : a+=((hashval_t)k[2]<<16);
    case 2 : a+=((hashval_t)k[1]<<8);
    case 1 : a+=k[0];
      /* case 0: nothing left to add */
    }
  mix(a,b,c);
  /*-------------------------------------------- report the result */
  return c;
}
@


1.19
log
@merge from gcc
@
text
@a636 3
  PTR *slot;
  PTR *limit;

@


1.18
log
@merge from gcc
@
text
@d606 1
a606 1
htab_traverse (htab, callback, info)
a613 3
  if ((htab->n_elements - htab->n_deleted) * 8 < htab->size)
    htab_expand (htab);

d626 18
@


1.17
log
@merge from gcc
@
text
@d379 2
a380 2
      || (htab->n_elements - htab->n_deleted) * 8 < htab->size
    && htab->size > 32)
@


1.16
log
@include/
	* hashtab.h (htab_alloc_with_arg, htab_free_with_arg): Add new types.
	(struct htab): Add alloc_arg, alloc_with_arg_f, free_with_arg_f.
	(htab_create_alloc_ex): New prototype.
	(htab_set_functions_ex): New prototype.
libiberty/
	* hashtab.c (htab_create_alloc_ex): New function.
	(hatab_set_functions_ex): New function.
	(htab_delete, htab_expand): Support alternate allocation functions.
@
text
@d376 8
a383 1
  nsize = higher_prime_number (htab->size * 2);
d611 8
a618 2
  PTR *slot = htab->entries;
  PTR *limit = slot + htab->size;
@


1.16.6.1
log
@2003-03-16  Mark Kettenis  <kettenis@@gnu.org>

	Merge with mainline.  Tag is kettenis-i386newframe-20030316-mergepoint.
@
text
@d376 1
a376 8
  /* Resize only when table after removal of unused elements is either
     too full or too empty.  */
  if ((htab->n_elements - htab->n_deleted) * 2 > htab->size
      || ((htab->n_elements - htab->n_deleted) * 8 < htab->size
	  && htab->size > 32))
    nsize = higher_prime_number ((htab->n_elements - htab->n_deleted) * 2);
  else
    nsize = htab->size;
d604 2
a605 8
  PTR *slot;
  PTR *limit;

  if ((htab->n_elements - htab->n_deleted) * 8 < htab->size)
    htab_expand (htab);

  slot = htab->entries;
  limit = slot + htab->size;
@


1.15
log
@merge from gcc
@
text
@d2 1
a2 1
   Copyright (C) 1999, 2000, 2001, 2002 Free Software Foundation, Inc.
d194 57
d294 5
d378 5
a382 1
  nentries = (PTR *) (*htab->alloc_f) (nsize, sizeof (PTR));
d409 2
@


1.14
log
@merge from gcc
@
text
@d309 1
d314 1
a314 1
  htab->size = higher_prime_number (htab->size * 2);
d316 1
a316 1
  nentries = (PTR *) (*htab->alloc_f) (htab->size, sizeof (PTR *));
d320 1
@


1.14.14.1
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@d2 1
a2 1
   Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.
a47 4
#ifdef HAVE_MALLOC_H
#include <malloc.h>
#endif

a193 57
/* As above, but use the variants of alloc_f and free_f which accept
   an extra argument.  */

htab_t
htab_create_alloc_ex (size, hash_f, eq_f, del_f, alloc_arg, alloc_f,
		      free_f)
     size_t size;
     htab_hash hash_f;
     htab_eq eq_f;
     htab_del del_f;
     PTR alloc_arg;
     htab_alloc_with_arg alloc_f;
     htab_free_with_arg free_f;
{
  htab_t result;

  size = higher_prime_number (size);
  result = (htab_t) (*alloc_f) (alloc_arg, 1, sizeof (struct htab));
  if (result == NULL)
    return NULL;
  result->entries = (PTR *) (*alloc_f) (alloc_arg, size, sizeof (PTR));
  if (result->entries == NULL)
    {
      if (free_f != NULL)
	(*free_f) (alloc_arg, result);
      return NULL;
    }
  result->size = size;
  result->hash_f = hash_f;
  result->eq_f = eq_f;
  result->del_f = del_f;
  result->alloc_arg = alloc_arg;
  result->alloc_with_arg_f = alloc_f;
  result->free_with_arg_f = free_f;
  return result;
}

/* Update the function pointers and allocation parameter in the htab_t.  */

void
htab_set_functions_ex (htab, hash_f, eq_f, del_f, alloc_arg, alloc_f, free_f)
     htab_t htab;
     htab_hash hash_f;
     htab_eq eq_f;
     htab_del del_f;
     PTR alloc_arg;
     htab_alloc_with_arg alloc_f;
     htab_free_with_arg free_f;
{
  htab->hash_f = hash_f;
  htab->eq_f = eq_f;
  htab->del_f = del_f;
  htab->alloc_arg = alloc_arg;
  htab->alloc_with_arg_f = alloc_f;
  htab->free_with_arg_f = free_f;
}

a236 5
  else if (htab->free_with_arg_f != NULL)
    {
      (*htab->free_with_arg_f) (htab->alloc_arg, htab->entries);
      (*htab->free_with_arg_f) (htab->alloc_arg, htab);
    }
a308 1
  size_t nsize;
d313 3
a315 14
  /* Resize only when table after removal of unused elements is either
     too full or too empty.  */
  if ((htab->n_elements - htab->n_deleted) * 2 > htab->size
      || ((htab->n_elements - htab->n_deleted) * 8 < htab->size
	  && htab->size > 32))
    nsize = higher_prime_number ((htab->n_elements - htab->n_deleted) * 2);
  else
    nsize = htab->size;

  if (htab->alloc_with_arg_f != NULL)
    nentries = (PTR *) (*htab->alloc_with_arg_f) (htab->alloc_arg, nsize,
						  sizeof (PTR *));
  else
    nentries = (PTR *) (*htab->alloc_f) (nsize, sizeof (PTR *));
a318 1
  htab->size = nsize;
a340 2
  else if (htab->free_with_arg_f != NULL)
    (*htab->free_with_arg_f) (htab->alloc_arg, oentries);
d457 2
a460 1
      htab->n_deleted--;
a464 1
  htab->n_elements++;
d529 1
a529 1
htab_traverse_noresize (htab, callback, info)
d534 2
a535 5
  PTR *slot;
  PTR *limit;

  slot = htab->entries;
  limit = slot + htab->size;
a547 15
/* Like htab_traverse_noresize, but does resize the table when it is
   too empty to improve effectivity of subsequent calls.  */

void
htab_traverse (htab, callback, info)
     htab_t htab;
     htab_trav callback;
     PTR info;
{
  if ((htab->n_elements - htab->n_deleted) * 8 < htab->size)
    htab_expand (htab);

  htab_traverse_noresize (htab, callback, info);
}

a615 138
}

/* DERIVED FROM:
--------------------------------------------------------------------
lookup2.c, by Bob Jenkins, December 1996, Public Domain.
hash(), hash2(), hash3, and mix() are externally useful functions.
Routines to test the hash are included if SELF_TEST is defined.
You can use this free for any purpose.  It has no warranty.
--------------------------------------------------------------------
*/

/*
--------------------------------------------------------------------
mix -- mix 3 32-bit values reversibly.
For every delta with one or two bit set, and the deltas of all three
  high bits or all three low bits, whether the original value of a,b,c
  is almost all zero or is uniformly distributed,
* If mix() is run forward or backward, at least 32 bits in a,b,c
  have at least 1/4 probability of changing.
* If mix() is run forward, every bit of c will change between 1/3 and
  2/3 of the time.  (Well, 22/100 and 78/100 for some 2-bit deltas.)
mix() was built out of 36 single-cycle latency instructions in a 
  structure that could supported 2x parallelism, like so:
      a -= b; 
      a -= c; x = (c>>13);
      b -= c; a ^= x;
      b -= a; x = (a<<8);
      c -= a; b ^= x;
      c -= b; x = (b>>13);
      ...
  Unfortunately, superscalar Pentiums and Sparcs can't take advantage 
  of that parallelism.  They've also turned some of those single-cycle
  latency instructions into multi-cycle latency instructions.  Still,
  this is the fastest good hash I could find.  There were about 2^^68
  to choose from.  I only looked at a billion or so.
--------------------------------------------------------------------
*/
/* same, but slower, works on systems that might have 8 byte hashval_t's */
#define mix(a,b,c) \
{ \
  a -= b; a -= c; a ^= (c>>13); \
  b -= c; b -= a; b ^= (a<< 8); \
  c -= a; c -= b; c ^= ((b&0xffffffff)>>13); \
  a -= b; a -= c; a ^= ((c&0xffffffff)>>12); \
  b -= c; b -= a; b = (b ^ (a<<16)) & 0xffffffff; \
  c -= a; c -= b; c = (c ^ (b>> 5)) & 0xffffffff; \
  a -= b; a -= c; a = (a ^ (c>> 3)) & 0xffffffff; \
  b -= c; b -= a; b = (b ^ (a<<10)) & 0xffffffff; \
  c -= a; c -= b; c = (c ^ (b>>15)) & 0xffffffff; \
}

/*
--------------------------------------------------------------------
hash() -- hash a variable-length key into a 32-bit value
  k     : the key (the unaligned variable-length array of bytes)
  len   : the length of the key, counting by bytes
  level : can be any 4-byte value
Returns a 32-bit value.  Every bit of the key affects every bit of
the return value.  Every 1-bit and 2-bit delta achieves avalanche.
About 36+6len instructions.

The best hash table sizes are powers of 2.  There is no need to do
mod a prime (mod is sooo slow!).  If you need less than 32 bits,
use a bitmask.  For example, if you need only 10 bits, do
  h = (h & hashmask(10));
In which case, the hash table should have hashsize(10) elements.

If you are hashing n strings (ub1 **)k, do it like this:
  for (i=0, h=0; i<n; ++i) h = hash( k[i], len[i], h);

By Bob Jenkins, 1996.  bob_jenkins@@burtleburtle.net.  You may use this
code any way you wish, private, educational, or commercial.  It's free.

See http://burtleburtle.net/bob/hash/evahash.html
Use for hash table lookup, or anything where one collision in 2^32 is
acceptable.  Do NOT use for cryptographic purposes.
--------------------------------------------------------------------
*/

hashval_t iterative_hash (k_in, length, initval)
     const PTR k_in;               /* the key */
     register size_t  length;      /* the length of the key */
     register hashval_t  initval;  /* the previous hash, or an arbitrary value */
{
  register const unsigned char *k = (const unsigned char *)k_in;
  register hashval_t a,b,c,len;

  /* Set up the internal state */
  len = length;
  a = b = 0x9e3779b9;  /* the golden ratio; an arbitrary value */
  c = initval;           /* the previous hash value */

  /*---------------------------------------- handle most of the key */
#ifndef WORDS_BIGENDIAN
  /* On a little-endian machine, if the data is 4-byte aligned we can hash
     by word for better speed.  This gives nondeterministic results on
     big-endian machines.  */
  if (sizeof (hashval_t) == 4 && (((size_t)k)&3) == 0)
    while (len >= 12)    /* aligned */
      {
	a += *(hashval_t *)(k+0);
	b += *(hashval_t *)(k+4);
	c += *(hashval_t *)(k+8);
	mix(a,b,c);
	k += 12; len -= 12;
      }
  else /* unaligned */
#endif
    while (len >= 12)
      {
	a += (k[0] +((hashval_t)k[1]<<8) +((hashval_t)k[2]<<16) +((hashval_t)k[3]<<24));
	b += (k[4] +((hashval_t)k[5]<<8) +((hashval_t)k[6]<<16) +((hashval_t)k[7]<<24));
	c += (k[8] +((hashval_t)k[9]<<8) +((hashval_t)k[10]<<16)+((hashval_t)k[11]<<24));
	mix(a,b,c);
	k += 12; len -= 12;
      }

  /*------------------------------------- handle the last 11 bytes */
  c += length;
  switch(len)              /* all the case statements fall through */
    {
    case 11: c+=((hashval_t)k[10]<<24);
    case 10: c+=((hashval_t)k[9]<<16);
    case 9 : c+=((hashval_t)k[8]<<8);
      /* the first byte of c is reserved for the length */
    case 8 : b+=((hashval_t)k[7]<<24);
    case 7 : b+=((hashval_t)k[6]<<16);
    case 6 : b+=((hashval_t)k[5]<<8);
    case 5 : b+=k[4];
    case 4 : a+=((hashval_t)k[3]<<24);
    case 3 : a+=((hashval_t)k[2]<<16);
    case 2 : a+=((hashval_t)k[1]<<8);
    case 1 : a+=k[0];
      /* case 0: nothing left to add */
    }
  mix(a,b,c);
  /*-------------------------------------------- report the result */
  return c;
@


1.14.12.1
log
@2003-02-07  David Carlton  <carlton@@math.stanford.edu>

	* Merge with mainline; tag is carlton_dictionary-20030207-merge.
@
text
@d2 1
a2 1
   Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.
a193 57
/* As above, but use the variants of alloc_f and free_f which accept
   an extra argument.  */

htab_t
htab_create_alloc_ex (size, hash_f, eq_f, del_f, alloc_arg, alloc_f,
		      free_f)
     size_t size;
     htab_hash hash_f;
     htab_eq eq_f;
     htab_del del_f;
     PTR alloc_arg;
     htab_alloc_with_arg alloc_f;
     htab_free_with_arg free_f;
{
  htab_t result;

  size = higher_prime_number (size);
  result = (htab_t) (*alloc_f) (alloc_arg, 1, sizeof (struct htab));
  if (result == NULL)
    return NULL;
  result->entries = (PTR *) (*alloc_f) (alloc_arg, size, sizeof (PTR));
  if (result->entries == NULL)
    {
      if (free_f != NULL)
	(*free_f) (alloc_arg, result);
      return NULL;
    }
  result->size = size;
  result->hash_f = hash_f;
  result->eq_f = eq_f;
  result->del_f = del_f;
  result->alloc_arg = alloc_arg;
  result->alloc_with_arg_f = alloc_f;
  result->free_with_arg_f = free_f;
  return result;
}

/* Update the function pointers and allocation parameter in the htab_t.  */

void
htab_set_functions_ex (htab, hash_f, eq_f, del_f, alloc_arg, alloc_f, free_f)
     htab_t htab;
     htab_hash hash_f;
     htab_eq eq_f;
     htab_del del_f;
     PTR alloc_arg;
     htab_alloc_with_arg alloc_f;
     htab_free_with_arg free_f;
{
  htab->hash_f = hash_f;
  htab->eq_f = eq_f;
  htab->del_f = del_f;
  htab->alloc_arg = alloc_arg;
  htab->alloc_with_arg_f = alloc_f;
  htab->free_with_arg_f = free_f;
}

a236 5
  else if (htab->free_with_arg_f != NULL)
    {
      (*htab->free_with_arg_f) (htab->alloc_arg, htab->entries);
      (*htab->free_with_arg_f) (htab->alloc_arg, htab);
    }
a308 1
  size_t nsize;
d313 1
a313 1
  nsize = higher_prime_number (htab->size * 2);
d315 1
a315 5
  if (htab->alloc_with_arg_f != NULL)
    nentries = (PTR *) (*htab->alloc_with_arg_f) (htab->alloc_arg, nsize,
						  sizeof (PTR *));
  else
    nentries = (PTR *) (*htab->alloc_f) (nsize, sizeof (PTR *));
a318 1
  htab->size = nsize;
a340 2
  else if (htab->free_with_arg_f != NULL)
    (*htab->free_with_arg_f) (htab->alloc_arg, oentries);
@


1.14.12.2
log
@2003-04-16  David Carlton  <carlton@@bactrian.org>

	* Merge with mainline; tag is carlton_dictionary-20030416-merge.
@
text
@d376 1
a376 8
  /* Resize only when table after removal of unused elements is either
     too full or too empty.  */
  if ((htab->n_elements - htab->n_deleted) * 2 > htab->size
      || ((htab->n_elements - htab->n_deleted) * 8 < htab->size
	  && htab->size > 32))
    nsize = higher_prime_number ((htab->n_elements - htab->n_deleted) * 2);
  else
    nsize = htab->size;
d599 1
a599 1
htab_traverse_noresize (htab, callback, info)
d604 2
a605 5
  PTR *slot;
  PTR *limit;

  slot = htab->entries;
  limit = slot + htab->size;
a615 15
}

/* Like htab_traverse_noresize, but does resize the table when it is
   too empty to improve effectivity of subsequent calls.  */

void
htab_traverse (htab, callback, info)
     htab_t htab;
     htab_trav callback;
     PTR info;
{
  if ((htab->n_elements - htab->n_deleted) * 8 < htab->size)
    htab_expand (htab);

  htab_traverse_noresize (htab, callback, info);
@


1.14.12.3
log
@2003-05-23  David Carlton  <carlton@@bactrian.org>

	* Merge with mainline; tag is carlton_dictionary-20030523-merge.
@
text
@a711 138

/* DERIVED FROM:
--------------------------------------------------------------------
lookup2.c, by Bob Jenkins, December 1996, Public Domain.
hash(), hash2(), hash3, and mix() are externally useful functions.
Routines to test the hash are included if SELF_TEST is defined.
You can use this free for any purpose.  It has no warranty.
--------------------------------------------------------------------
*/

/*
--------------------------------------------------------------------
mix -- mix 3 32-bit values reversibly.
For every delta with one or two bit set, and the deltas of all three
  high bits or all three low bits, whether the original value of a,b,c
  is almost all zero or is uniformly distributed,
* If mix() is run forward or backward, at least 32 bits in a,b,c
  have at least 1/4 probability of changing.
* If mix() is run forward, every bit of c will change between 1/3 and
  2/3 of the time.  (Well, 22/100 and 78/100 for some 2-bit deltas.)
mix() was built out of 36 single-cycle latency instructions in a 
  structure that could supported 2x parallelism, like so:
      a -= b; 
      a -= c; x = (c>>13);
      b -= c; a ^= x;
      b -= a; x = (a<<8);
      c -= a; b ^= x;
      c -= b; x = (b>>13);
      ...
  Unfortunately, superscalar Pentiums and Sparcs can't take advantage 
  of that parallelism.  They've also turned some of those single-cycle
  latency instructions into multi-cycle latency instructions.  Still,
  this is the fastest good hash I could find.  There were about 2^^68
  to choose from.  I only looked at a billion or so.
--------------------------------------------------------------------
*/
/* same, but slower, works on systems that might have 8 byte hashval_t's */
#define mix(a,b,c) \
{ \
  a -= b; a -= c; a ^= (c>>13); \
  b -= c; b -= a; b ^= (a<< 8); \
  c -= a; c -= b; c ^= ((b&0xffffffff)>>13); \
  a -= b; a -= c; a ^= ((c&0xffffffff)>>12); \
  b -= c; b -= a; b = (b ^ (a<<16)) & 0xffffffff; \
  c -= a; c -= b; c = (c ^ (b>> 5)) & 0xffffffff; \
  a -= b; a -= c; a = (a ^ (c>> 3)) & 0xffffffff; \
  b -= c; b -= a; b = (b ^ (a<<10)) & 0xffffffff; \
  c -= a; c -= b; c = (c ^ (b>>15)) & 0xffffffff; \
}

/*
--------------------------------------------------------------------
hash() -- hash a variable-length key into a 32-bit value
  k     : the key (the unaligned variable-length array of bytes)
  len   : the length of the key, counting by bytes
  level : can be any 4-byte value
Returns a 32-bit value.  Every bit of the key affects every bit of
the return value.  Every 1-bit and 2-bit delta achieves avalanche.
About 36+6len instructions.

The best hash table sizes are powers of 2.  There is no need to do
mod a prime (mod is sooo slow!).  If you need less than 32 bits,
use a bitmask.  For example, if you need only 10 bits, do
  h = (h & hashmask(10));
In which case, the hash table should have hashsize(10) elements.

If you are hashing n strings (ub1 **)k, do it like this:
  for (i=0, h=0; i<n; ++i) h = hash( k[i], len[i], h);

By Bob Jenkins, 1996.  bob_jenkins@@burtleburtle.net.  You may use this
code any way you wish, private, educational, or commercial.  It's free.

See http://burtleburtle.net/bob/hash/evahash.html
Use for hash table lookup, or anything where one collision in 2^32 is
acceptable.  Do NOT use for cryptographic purposes.
--------------------------------------------------------------------
*/

hashval_t iterative_hash (k_in, length, initval)
     const PTR k_in;               /* the key */
     register size_t  length;      /* the length of the key */
     register hashval_t  initval;  /* the previous hash, or an arbitrary value */
{
  register const unsigned char *k = (const unsigned char *)k_in;
  register hashval_t a,b,c,len;

  /* Set up the internal state */
  len = length;
  a = b = 0x9e3779b9;  /* the golden ratio; an arbitrary value */
  c = initval;           /* the previous hash value */

  /*---------------------------------------- handle most of the key */
#ifndef WORDS_BIGENDIAN
  /* On a little-endian machine, if the data is 4-byte aligned we can hash
     by word for better speed.  This gives nondeterministic results on
     big-endian machines.  */
  if (sizeof (hashval_t) == 4 && (((size_t)k)&3) == 0)
    while (len >= 12)    /* aligned */
      {
	a += *(hashval_t *)(k+0);
	b += *(hashval_t *)(k+4);
	c += *(hashval_t *)(k+8);
	mix(a,b,c);
	k += 12; len -= 12;
      }
  else /* unaligned */
#endif
    while (len >= 12)
      {
	a += (k[0] +((hashval_t)k[1]<<8) +((hashval_t)k[2]<<16) +((hashval_t)k[3]<<24));
	b += (k[4] +((hashval_t)k[5]<<8) +((hashval_t)k[6]<<16) +((hashval_t)k[7]<<24));
	c += (k[8] +((hashval_t)k[9]<<8) +((hashval_t)k[10]<<16)+((hashval_t)k[11]<<24));
	mix(a,b,c);
	k += 12; len -= 12;
      }

  /*------------------------------------- handle the last 11 bytes */
  c += length;
  switch(len)              /* all the case statements fall through */
    {
    case 11: c+=((hashval_t)k[10]<<24);
    case 10: c+=((hashval_t)k[9]<<16);
    case 9 : c+=((hashval_t)k[8]<<8);
      /* the first byte of c is reserved for the length */
    case 8 : b+=((hashval_t)k[7]<<24);
    case 7 : b+=((hashval_t)k[6]<<16);
    case 6 : b+=((hashval_t)k[5]<<8);
    case 5 : b+=k[4];
    case 4 : a+=((hashval_t)k[3]<<24);
    case 3 : a+=((hashval_t)k[2]<<16);
    case 2 : a+=((hashval_t)k[1]<<8);
    case 1 : a+=k[0];
      /* case 0: nothing left to add */
    }
  mix(a,b,c);
  /*-------------------------------------------- report the result */
  return c;
}
@


1.14.12.4
log
@2003-06-27  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton_dictionary-20030627-merge.
@
text
@a47 4
#ifdef HAVE_MALLOC_H
#include <malloc.h>
#endif

@


1.14.12.5
log
@2003-11-11  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton-dictionary-20031111-merge.
@
text
@d538 2
a541 1
      htab->n_deleted--;
a545 1
  htab->n_elements++;
@


1.13
log
@        * hashtab.c (higher_prime_number): Use 7 as minimum.
        (find_empty_slot_for_expand): Don't compute hash2 unless needed.
        (htab_find_slot_with_hash): Likewise.
@
text
@d161 1
a161 1
   created hash table.  Memory allocation must not fail.  */
d164 1
a164 1
htab_create (size, hash_f, eq_f, del_f)
d169 2
d175 10
a184 2
  result = (htab_t) xcalloc (1, sizeof (struct htab));
  result->entries = (PTR *) xcalloc (size, sizeof (PTR));
d189 2
a190 1
  result->return_allocation_failure = 0;
d194 12
a205 4
/* This function creates table with length slightly longer than given
   source length.  The created hash table is initiated as empty (all the
   hash table entries are EMPTY_ENTRY).  The function returns the created
   hash table.  Memory allocation may fail; it may return NULL.  */
d214 1
a214 20
  htab_t result;

  size = higher_prime_number (size);
  result = (htab_t) calloc (1, sizeof (struct htab));
  if (result == NULL)
    return NULL;

  result->entries = (PTR *) calloc (size, sizeof (PTR));
  if (result->entries == NULL)
    {
      free (result);
      return NULL;
    }

  result->size = size;
  result->hash_f = hash_f;
  result->eq_f = eq_f;
  result->del_f = del_f;
  result->return_allocation_failure = 1;
  return result;
d232 5
a236 2
  free (htab->entries);
  free (htab);
d308 1
d315 4
a318 9
  if (htab->return_allocation_failure)
    {
      PTR *nentries = (PTR *) calloc (htab->size, sizeof (PTR *));
      if (nentries == NULL)
	return 0;
      htab->entries = nentries;
    }
  else
    htab->entries = (PTR *) xcalloc (htab->size, sizeof (PTR *));
d339 2
a340 1
  free (oentries);
@


1.13.6.1
log
@Merge with mainline, kseitz_interps-20020619-merge.
@
text
@d161 1
a161 1
   created hash table, or NULL if memory allocation fails.  */
d164 1
a164 1
htab_create_alloc (size, hash_f, eq_f, del_f, alloc_f, free_f)
a168 2
     htab_alloc alloc_f;
     htab_free free_f;
d173 2
a174 10
  result = (htab_t) (*alloc_f) (1, sizeof (struct htab));
  if (result == NULL)
    return NULL;
  result->entries = (PTR *) (*alloc_f) (size, sizeof (PTR));
  if (result->entries == NULL)
    {
      if (free_f != NULL)
	(*free_f) (result);
      return NULL;
    }
d179 1
a179 2
  result->alloc_f = alloc_f;
  result->free_f = free_f;
d183 4
a186 1
/* These functions exist solely for backward compatibility.  */
a187 1
#undef htab_create
d189 1
a189 1
htab_create (size, hash_f, eq_f, del_f)
d195 13
a207 2
  return htab_create_alloc (size, hash_f, eq_f, del_f, xcalloc, free);
}
d209 6
a214 8
htab_t
htab_try_create (size, hash_f, eq_f, del_f)
     size_t size;
     htab_hash hash_f;
     htab_eq eq_f;
     htab_del del_f;
{
  return htab_create_alloc (size, hash_f, eq_f, del_f, calloc, free);
d232 2
a233 5
  if (htab->free_f != NULL)
    {
      (*htab->free_f) (htab->entries);
      (*htab->free_f) (htab);
    }
a304 1
  PTR *nentries;
d311 9
a319 4
  nentries = (PTR *) (*htab->alloc_f) (htab->size, sizeof (PTR *));
  if (nentries == NULL)
    return 0;
  htab->entries = nentries;
d340 1
a340 2
  if (htab->free_f != NULL)
    (*htab->free_f) (oentries);
@


1.13.4.1
log
@merge from trunk
@
text
@d161 1
a161 1
   created hash table, or NULL if memory allocation fails.  */
d164 1
a164 1
htab_create_alloc (size, hash_f, eq_f, del_f, alloc_f, free_f)
a168 2
     htab_alloc alloc_f;
     htab_free free_f;
d173 2
a174 10
  result = (htab_t) (*alloc_f) (1, sizeof (struct htab));
  if (result == NULL)
    return NULL;
  result->entries = (PTR *) (*alloc_f) (size, sizeof (PTR));
  if (result->entries == NULL)
    {
      if (free_f != NULL)
	(*free_f) (result);
      return NULL;
    }
d179 1
a179 2
  result->alloc_f = alloc_f;
  result->free_f = free_f;
d183 4
a186 1
/* These functions exist solely for backward compatibility.  */
a187 1
#undef htab_create
d189 1
a189 1
htab_create (size, hash_f, eq_f, del_f)
d195 13
a207 2
  return htab_create_alloc (size, hash_f, eq_f, del_f, xcalloc, free);
}
d209 6
a214 8
htab_t
htab_try_create (size, hash_f, eq_f, del_f)
     size_t size;
     htab_hash hash_f;
     htab_eq eq_f;
     htab_del del_f;
{
  return htab_create_alloc (size, hash_f, eq_f, del_f, calloc, free);
d232 2
a233 5
  if (htab->free_f != NULL)
    {
      (*htab->free_f) (htab->entries);
      (*htab->free_f) (htab);
    }
a304 1
  PTR *nentries;
d311 9
a319 4
  nentries = (PTR *) (*htab->alloc_f) (htab->size, sizeof (PTR *));
  if (nentries == NULL)
    return 0;
  htab->entries = nentries;
d340 1
a340 2
  if (htab->free_f != NULL)
    (*htab->free_f) (oentries);
@


1.12
log
@merge from gcc
@
text
@d2 1
a2 1
   Copyright (C) 1999, 2000, 2001 Free Software Foundation, Inc.
a83 1
    (unsigned long) 2,
a265 1
  hashval_t hash2 = 1 + hash % (size - 2);
d267 7
d275 1
d278 3
a280 1
      PTR *slot = htab->entries + index;
d282 1
a286 4

      index += hash2;
      if (index >= size)
	index -= size;
d413 1
a419 1
  hash2 = 1 + hash % (size - 2);
d425 9
d436 6
a441 1
      PTR entry = htab->entries[index];
d443 2
a444 16
	{
	  if (insert == NO_INSERT)
	    return NULL;

	  htab->n_elements++;

	  if (first_deleted_slot)
	    {
	      *first_deleted_slot = EMPTY_ENTRY;
	      return first_deleted_slot;
	    }

	  return &htab->entries[index];
	}

      if (entry == DELETED_ENTRY)
d449 1
a449 1
      else  if ((*htab->eq_f) (entry, element))
a450 5
      
      htab->collisions++;
      index += hash2;
      if (index >= size)
	index -= size;
d452 14
@


1.11
log
@merge from gcc
@
text
@d83 1
a83 1
  static unsigned long primes[] = {
d118 2
a119 2
  unsigned long* low = &primes[0];
  unsigned long* high = &primes[sizeof(primes) / sizeof(primes[0])];
d123 1
a123 1
      unsigned long* mid = low + (high - low) / 2;
@


1.10
log
@merge from gcc
@
text
@d565 24
a588 1
/* Hash P as a null-terminated string.  */
@


1.9
log
@merge from gcc
@
text
@d564 16
@


1.8
log
@merge from gcc
@
text
@d115 1
a115 1
    ((unsigned long) 2147483647) + ((unsigned long) 2147483642),
@


1.7
log
@* hashtab.c (higher_prime_number): Use a table, rather than a
seive, to find the next prime.
@
text
@d2 1
a2 1
   Copyright (C) 1999, 2000 Free Software Foundation, Inc.
d84 32
a115 31
    2,
    7,
    13,
    31,
    61,
    127,
    251,
    509,
    1021,
    2039,
    4093,
    8191,
    16381,
    32749,
    65521,
    131071,
    262139,
    524287,
    1048573,
    2097143,
    4194301,
    8388593,
    16777213,
    33554393,
    67108859,
    134217689,
    268435399,
    536870909,
    1073741789,
    2147483647,
    4294967291
@


1.6
log
@	* hashtab.c (htab_expand): Change to return int.  Use calloc or
 	xcalloc depending on htab->return_allocation_failure.  Return zero
 	if calloc fails.
	(htab_create): Update comment to cover memory allocation.
	(htab_try_create): New.
	(htab_find_slot_with_hash): Return NULL if htab_expand fails.
  	Update comment to cover this.
@
text
@d74 2
a75 2
/* The following function returns the nearest prime number which is
   greater than a given source number, N. */
d81 54
a134 1
  unsigned long i;
d136 1
a136 20
  /* Ensure we have a larger number and then force to odd.  */
  n++;  
  n |= 0x01; 

  /* All odd numbers < 9 are prime.  */
  if (n < 9)
    return n;

  /* Otherwise find the next prime using a sieve.  */

 next:

  for (i = 3; i * i <= n; i += 2)
    if (n % i == 0)
      {
	 n += 2;
	 goto next;
       }

  return n;
@


1.5
log
@	* hashtab.c: Change void * to PTR where necessary.
	(htab_create, htab_expand): Correct formatting of comment before
	function.
@
text
@d65 1
a65 1
static void htab_expand PARAMS ((htab_t));
d127 1
a127 1
   created hash table.  */
d145 35
d254 3
a256 1
   table entries is changed.  */
d258 1
a258 1
static void
d270 10
a279 1
  htab->entries = (PTR *) xcalloc (htab->size, sizeof (PTR *));
d301 1
d358 3
a360 1
   INSERT = 1, then write the value you want into the returned slot.  */
d374 3
a376 2
  if (insert == INSERT && htab->size * 3 <= htab->n_elements * 4)
    htab_expand (htab);
@


1.4
log
@Synced with libiberty in the gcc repository.
@
text
@d55 1
a55 1
#define EMPTY_ENTRY    ((void *) 0)
d60 1
a60 1
#define DELETED_ENTRY  ((void *) 1)
d66 1
a66 1
static void **find_empty_slot_for_expand  PARAMS ((htab_t, hashval_t));
d109 1
a109 1
     const void *p;
d118 2
a119 2
     const void *p1;
     const void *p2;
d127 1
a127 1
   created hash table. */
d140 1
a140 1
  result->entries = (void **) xcalloc (size, sizeof (void *));
d181 1
a181 1
  memset (htab->entries, 0, htab->size * sizeof (void *));
d191 1
a191 1
static void **
d202 1
a202 1
      void **slot = htab->entries + index;
d219 1
a219 1
   table entries is changed. */
d225 3
a227 3
  void **oentries;
  void **olimit;
  void **p;
d233 1
a233 1
  htab->entries = (void **) xcalloc (htab->size, sizeof (void **));
d241 1
a241 1
      void *x = *p;
d245 1
a245 1
	  void **q = find_empty_slot_for_expand (htab, (*htab->hash_f) (x));
d260 1
a260 1
void *
d263 1
a263 1
     const void *element;
d269 1
a269 1
  void *entry;
d299 1
a299 1
void *
d302 1
a302 1
     const void *element;
d313 1
a313 1
void **
d316 1
a316 1
     const void *element;
d320 1
a320 1
  void **first_deleted_slot;
d337 1
a337 1
      void *entry = htab->entries[index];
d372 1
a372 1
void **
d375 1
a375 1
     const void *element;
d389 1
a389 1
     void *element;
d391 1
a391 1
  void **slot;
d411 1
a411 1
     void **slot;
d433 1
a433 1
     void *info;
d435 2
a436 2
  void **slot = htab->entries;
  void **limit = slot + htab->size;
d440 1
a440 1
      void *x = *slot;
@


1.3
log
@	* hashtab.c, partition.c, xmemdup.c: Include string.h
	if HAVE_STRING_H.
	* pexecute.c, xexit.c: Include stdlib.h if HAVE_STDLIB_H.
	* objalloc.c: Include config.h.  Include stdlib.h and don't
	declare malloc or free if HAVE_STDLIB_H.
	* strerror.c, strsignal.c: Include stdlib.h if HAVE_STDLIB_H,
	else declare malloc without prototype.  Include string.h if
	HAVE_STRING_H, else declare memset without prototype.  Don't
	include stddef.h.

	* sort.c: Bring over from GCC.
@
text
@d2 1
a2 1
   Copyright (C) 1999 Free Software Foundation, Inc.
d62 12
d75 1
a75 1
   greater than given source number. */
d83 5
a87 1
  n |= 0x01;  /* Force N to be odd.  */
d89 3
a91 1
    return n; /* All odd numbers < 9 are prime.  */
d94 7
a100 9
  n += 2;
  i = 3;
  do
    {
      if (n % i == 0)
	goto next;
      i += 2;
    }
  while ((i * i) <= n);
d105 19
d156 1
d159 3
a161 5
      {
	if (htab->entries[i] != EMPTY_ENTRY
	    && htab->entries[i] != DELETED_ENTRY)
	  (*htab->del_f) (htab->entries[i]);
      }
d174 1
d177 3
a179 5
      {
	if (htab->entries[i] != EMPTY_ENTRY
	    && htab->entries[i] != DELETED_ENTRY)
	  (*htab->del_f) (htab->entries[i]);
      }
d190 1
d194 1
a194 1
     unsigned int hash;
d197 1
a197 1
  unsigned int hash2 = 1 + hash % (size - 2);
d203 1
d206 1
a206 2

      if (*slot == DELETED_ENTRY)
d233 1
a233 1
  htab->entries = xcalloc (htab->size, sizeof (void **));
d242 1
d246 1
d249 1
d253 1
d264 1
a264 1
     unsigned int hash;
d266 2
a267 1
  unsigned int index, hash2;
d269 1
d273 7
a280 1
  index = hash % size;
a283 6
      void *entry = htab->entries[index];
      if (entry == EMPTY_ENTRY)
	return NULL;
      else if (entry != DELETED_ENTRY && (*htab->eq_f) (entry, element))
	return entry;

d288 5
d298 1
d317 2
a318 2
     unsigned int hash;
     int insert;
d321 2
a322 1
  unsigned int index, hash2;
d325 1
a325 1
  if (insert && htab->size * 3 <= htab->n_elements * 4)
d340 1
a340 1
	  if (!insert)
d359 2
a360 5
      else
	{
	  if ((*htab->eq_f) (entry, element))
	    return &htab->entries[index];
	}
d371 1
d376 1
a376 1
     int insert;
d393 1
a393 1
  slot = htab_find_slot (htab, element, 0);
d416 1
d419 1
d435 3
a437 3
  void **slot, **limit;
  slot = htab->entries;
  limit = slot + htab->size;
d441 1
d449 1
a449 1
/* The following function returns current size of given hash table. */
d458 1
a458 2
/* The following function returns current number of elements in given
   hash table. */
d467 2
a468 2
/* The following function returns number of percents of fixed
   collisions during all work with given hash table. */
d474 2
a475 1
  int searches;
d477 1
a477 4
  searches = htab->searches;
  if (searches == 0)
    return 0.0;
  return (double)htab->collisions / (double)searches;
@


1.2
log
@merge from gcc
@
text
@d44 4
@


1.1
log
@Initial revision
@
text
@a48 16
/* The following variable is used for debugging. Its value is number
   of all calls of `find_hash_table_entry' for all hash tables. */

static int all_searches = 0;

/* The following variable is used for debugging. Its value is number
   of collisions fixed for time of work with all hash tables. */

static int all_collisions = 0;

/* The following variable is used for debugging. Its value is number
   of all table expansions fixed for time of work with all hash
   tables. */

static int all_expansions = 0;

d51 1
a51 1
#define EMPTY_ENTRY    NULL
d62 2
a63 2
higher_prime_number (number)
     unsigned long number;
d67 8
a74 1
  for (number = (number / 2) * 2 + 3;; number += 2)
d76 3
a78 5
      for (i = 3; i * i <= number; i += 2)
        if (number % i == 0)
          break;
      if (i * i > number)
        return number;
d80 3
d90 2
a91 2
hash_table_t
create_hash_table (size, hash_function, eq_function)
d93 3
a95 2
     unsigned (*hash_function) PARAMS ((hash_table_entry_t));
     int (*eq_function) PARAMS ((hash_table_entry_t, hash_table_entry_t));
d97 1
a97 1
  hash_table_t result;
d100 2
a101 3
  result = (hash_table_t) xmalloc (sizeof (*result));
  result->entries
    = (hash_table_entry_t *) xmalloc (size * sizeof (hash_table_entry_t));
d103 3
a105 7
  result->hash_function = hash_function;
  result->eq_function = eq_function;
  result->number_of_elements = 0;
  result->number_of_deleted_elements = 0;
  result->searches = 0;
  result->collisions = 0;
  memset (result->entries, 0, size * sizeof (hash_table_entry_t));
d113 2
a114 2
delete_hash_table (htab)
     hash_table_t htab;
d116 9
d132 2
a133 2
empty_hash_table (htab)
     hash_table_t htab;
d135 40
a174 1
  memset (htab->entries, 0, htab->size * sizeof (hash_table_entry_t));
d184 2
a185 2
expand_hash_table (htab)
     hash_table_t htab;
d187 26
a212 16
  hash_table_t new_htab;
  hash_table_entry_t *entry_ptr;
  hash_table_entry_t *new_entry_ptr;

  new_htab = create_hash_table (htab->number_of_elements * 2,
                                htab->hash_function, htab->eq_function);
  for (entry_ptr = htab->entries; entry_ptr < htab->entries + htab->size;
       entry_ptr++)
    if (*entry_ptr != EMPTY_ENTRY && *entry_ptr != DELETED_ENTRY)
      {
        new_entry_ptr = find_hash_table_entry (new_htab, *entry_ptr, 1);
        *new_entry_ptr = (*entry_ptr);
      }
  free (htab->entries);
  *htab = (*new_htab);
  free (new_htab);
d215 2
a216 21
/* This function searches for hash table entry which contains element
   equal to given value or empty entry in which given value can be
   placed (if the element with given value does not exist in the
   table).  The function works in two regimes.  The first regime is
   used only for search.  The second is used for search and
   reservation empty entry for given value.  The table is expanded if
   occupancy (taking into accout also deleted elements) is more than
   75%.  Naturally the hash table must already exist.  If reservation
   flag is TRUE then the element with given value should be inserted
   into the table entry before another call of
   `find_hash_table_entry'. */

hash_table_entry_t *
find_hash_table_entry (htab, element, reserve)
     hash_table_t htab;
     hash_table_entry_t element;
     int reserve;
{
  hash_table_entry_t *entry_ptr;
  hash_table_entry_t *first_deleted_entry_ptr;
  unsigned index, hash_value, secondary_hash_value;
d218 15
a232 1
  if (htab->size * 3 <= htab->number_of_elements * 4)
d234 10
a243 2
      all_expansions++;
      expand_hash_table (htab);
d245 36
a280 3
  hash_value = (*htab->hash_function) (element);
  secondary_hash_value = 1 + hash_value % (htab->size - 2);
  index = hash_value % htab->size;
d282 3
a284 3
  all_searches++;
  first_deleted_entry_ptr = NULL;
  for (;;htab->collisions++, all_collisions++)
d286 9
a294 4
      entry_ptr = htab->entries + index;
      if (*entry_ptr == EMPTY_ENTRY)
        {
          if (reserve)
d296 2
a297 6
	      htab->number_of_elements++;
	      if (first_deleted_entry_ptr != NULL)
		{
		  entry_ptr = first_deleted_entry_ptr;
		  *entry_ptr = EMPTY_ENTRY;
		}
d299 19
a317 12
          break;
        }
      else if (*entry_ptr != DELETED_ENTRY)
        {
          if ((*htab->eq_function) (*entry_ptr, element))
            break;
        }
      else if (first_deleted_entry_ptr == NULL)
	first_deleted_entry_ptr = entry_ptr;
      index += secondary_hash_value;
      if (index >= htab->size)
        index -= htab->size;
a318 1
  return entry_ptr;
d321 15
a335 4
/* This function deletes element with given value from hash table.
   The hash table entry value will be `DELETED_ENTRY' after the
   function call.  Naturally the hash table must already exist.  Hash
   table entry for given value should be not empty (or deleted). */
d338 12
a349 5
remove_element_from_hash_table_entry (htab, element)
     hash_table_t htab;
     hash_table_entry_t element;
{
  hash_table_entry_t *entry_ptr;
d351 2
a352 3
  entry_ptr = find_hash_table_entry (htab, element, 0);
  *entry_ptr = DELETED_ENTRY;
  htab->number_of_deleted_elements++;
d355 3
a357 3
/* This function clears a specified slot in a hash table.
   It is useful when you've already done the lookup and don't want to
   do it again.  */
d360 3
a362 3
clear_hash_table_slot (htab, slot)
     hash_table_t htab;
     hash_table_entry_t *slot;
d367 2
d370 1
a370 1
  htab->number_of_deleted_elements++;
d379 3
a381 3
traverse_hash_table (htab, callback, info)
     hash_table_t htab;
     int (*callback) PARAMS ((hash_table_entry_t, void *));
d384 11
a394 6
  hash_table_entry_t *entry_ptr;
  for (entry_ptr = htab->entries; entry_ptr < htab->entries + htab->size;
       entry_ptr++)
    if (*entry_ptr != EMPTY_ENTRY && *entry_ptr != DELETED_ENTRY)
      if (!callback (*entry_ptr, info))
	break;
d400 2
a401 2
hash_table_size (htab)
     hash_table_t htab;
d410 2
a411 2
hash_table_elements_number (htab)
     hash_table_t htab;
d413 1
a413 1
  return htab->number_of_elements - htab->number_of_deleted_elements;
d419 3
a421 3
int
hash_table_collisions (htab)
     hash_table_t htab;
d427 2
a428 16
    searches++;
  return htab->collisions * 100 / searches;
}

/* The following function returns number of percents of fixed
   collisions during all work with all hash tables. */

int
all_hash_table_collisions ()
{
  int searches;

  searches = all_searches;
  if (searches == 0)
    searches++;
  return all_collisions * 100 / searches;
@


1.1.1.1
log
@import libiberty from egcs
@
text
@@
