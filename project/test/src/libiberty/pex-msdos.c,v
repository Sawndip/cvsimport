head	1.11;
access;
symbols
	sid-snapshot-20180601:1.11
	sid-snapshot-20180501:1.11
	sid-snapshot-20180401:1.11
	sid-snapshot-20180301:1.11
	sid-snapshot-20180201:1.11
	sid-snapshot-20180101:1.11
	sid-snapshot-20171201:1.11
	sid-snapshot-20171101:1.11
	sid-snapshot-20171001:1.11
	sid-snapshot-20170901:1.11
	sid-snapshot-20170801:1.11
	sid-snapshot-20170701:1.11
	sid-snapshot-20170601:1.11
	sid-snapshot-20170501:1.11
	sid-snapshot-20170401:1.11
	sid-snapshot-20170301:1.11
	sid-snapshot-20170201:1.11
	sid-snapshot-20170101:1.11
	sid-snapshot-20161201:1.11
	sid-snapshot-20161101:1.11
	sid-snapshot-20160901:1.11
	sid-snapshot-20160801:1.11
	sid-snapshot-20160701:1.11
	sid-snapshot-20160601:1.11
	sid-snapshot-20160501:1.11
	sid-snapshot-20160401:1.11
	sid-snapshot-20160301:1.11
	sid-snapshot-20160201:1.11
	sid-snapshot-20160101:1.11
	sid-snapshot-20151201:1.11
	sid-snapshot-20151101:1.11
	sid-snapshot-20151001:1.11
	sid-snapshot-20150901:1.11
	sid-snapshot-20150801:1.11
	sid-snapshot-20150701:1.11
	sid-snapshot-20150601:1.11
	sid-snapshot-20150501:1.11
	sid-snapshot-20150401:1.11
	sid-snapshot-20150301:1.11
	sid-snapshot-20150201:1.11
	sid-snapshot-20150101:1.11
	sid-snapshot-20141201:1.11
	sid-snapshot-20141101:1.11
	sid-snapshot-20141001:1.11
	sid-snapshot-20140901:1.11
	sid-snapshot-20140801:1.11
	sid-snapshot-20140701:1.11
	sid-snapshot-20140601:1.11
	sid-snapshot-20140501:1.11
	sid-snapshot-20140401:1.11
	sid-snapshot-20140301:1.11
	sid-snapshot-20140201:1.11
	sid-snapshot-20140101:1.11
	sid-snapshot-20131201:1.11
	sid-snapshot-20131101:1.11
	sid-snapshot-20131001:1.11
	binutils-2_24-branch:1.11.0.14
	binutils-2_24-branchpoint:1.11
	binutils-2_21_1:1.10
	sid-snapshot-20130901:1.11
	gdb_7_6_1-2013-08-30-release:1.11
	sid-snapshot-20130801:1.11
	sid-snapshot-20130701:1.11
	sid-snapshot-20130601:1.11
	sid-snapshot-20130501:1.11
	gdb_7_6-2013-04-26-release:1.11
	sid-snapshot-20130401:1.11
	binutils-2_23_2:1.11
	gdb_7_6-branch:1.11.0.12
	gdb_7_6-2013-03-12-branchpoint:1.11
	sid-snapshot-20130301:1.11
	sid-snapshot-20130201:1.11
	sid-snapshot-20130101:1.11
	sid-snapshot-20121201:1.11
	gdb_7_5_1-2012-11-29-release:1.11
	binutils-2_23_1:1.11
	sid-snapshot-20121101:1.11
	binutils-2_23:1.11
	sid-snapshot-20121001:1.11
	sid-snapshot-20120901:1.11
	gdb_7_5-2012-08-17-release:1.11
	sid-snapshot-20120801:1.11
	binutils-2_23-branch:1.11.0.10
	binutils-2_23-branchpoint:1.11
	gdb_7_5-branch:1.11.0.8
	gdb_7_5-2012-07-18-branchpoint:1.11
	sid-snapshot-20120701:1.11
	sid-snapshot-20120601:1.11
	sid-snapshot-20120501:1.11
	binutils-2_22_branch:1.11.0.6
	gdb_7_4_1-2012-04-26-release:1.11
	sid-snapshot-20120401:1.11
	sid-snapshot-20120301:1.11
	sid-snapshot-20120201:1.11
	gdb_7_4-2012-01-24-release:1.11
	sid-snapshot-20120101:1.11
	gdb_7_4-branch:1.11.0.4
	gdb_7_4-2011-12-13-branchpoint:1.11
	sid-snapshot-20111201:1.11
	binutils-2_22:1.11
	sid-snapshot-20111101:1.11
	sid-snapshot-20111001:1.11
	binutils-2_22-branch:1.11.0.2
	binutils-2_22-branchpoint:1.11
	gdb_7_3_1-2011-09-04-release:1.10
	sid-snapshot-20110901:1.11
	sid-snapshot-20110801:1.11
	gdb_7_3-2011-07-26-release:1.10
	sid-snapshot-20110701:1.11
	sid-snapshot-20110601:1.11
	sid-snapshot-20110501:1.11
	gdb_7_3-branch:1.10.0.16
	gdb_7_3-2011-04-01-branchpoint:1.10
	sid-snapshot-20110401:1.10
	sid-snapshot-20110301:1.10
	cygwin-1_7_8-release:1.10
	sid-snapshot-20110201:1.10
	sid-snapshot-20110101:1.10
	binutils-2_21:1.10
	sid-snapshot-20101201:1.10
	binutils-2_21-branch:1.10.0.14
	binutils-2_21-branchpoint:1.10
	sid-snapshot-20101101:1.10
	sid-snapshot-20101001:1.10
	binutils-2_20_1:1.10
	gdb_7_2-2010-09-02-release:1.10
	sid-snapshot-20100901:1.10
	cygwin-1_7_7-release:1.10
	sid-snapshot-20100801:1.10
	gdb_7_2-branch:1.10.0.12
	gdb_7_2-2010-07-07-branchpoint:1.10
	sid-snapshot-20100701:1.10
	sid-snapshot-20100601:1.10
	sid-snapshot-20100501:1.10
	sid-snapshot-20100401:1.10
	gdb_7_1-2010-03-18-release:1.10
	sid-snapshot-20100301:1.10
	gdb_7_1-branch:1.10.0.10
	gdb_7_1-2010-02-18-branchpoint:1.10
	sid-snapshot-20100201:1.10
	sid-snapshot-20100101:1.10
	gdb_7_0_1-2009-12-22-release:1.10
	sid-snapshot-20091201:1.10
	sid-snapshot-20091101:1.10
	binutils-2_20:1.10
	gdb_7_0-2009-10-06-release:1.10
	sid-snapshot-20091001:1.10
	gdb_7_0-branch:1.10.0.8
	gdb_7_0-2009-09-16-branchpoint:1.10
	arc-sim-20090309:1.9
	binutils-arc-20081103-branch:1.9.0.24
	binutils-arc-20081103-branchpoint:1.9
	binutils-2_20-branch:1.10.0.6
	binutils-2_20-branchpoint:1.10
	sid-snapshot-20090901:1.10
	sid-snapshot-20090801:1.10
	msnyder-checkpoint-072509-branch:1.10.0.4
	msnyder-checkpoint-072509-branchpoint:1.10
	sid-snapshot-20090701:1.10
	dje-cgen-play1-branch:1.10.0.2
	dje-cgen-play1-branchpoint:1.10
	sid-snapshot-20090601:1.10
	sid-snapshot-20090501:1.10
	sid-snapshot-20090401:1.9
	arc-20081103-branch:1.9.0.22
	arc-20081103-branchpoint:1.9
	arc-insight_6_8-branch:1.9.0.20
	arc-insight_6_8-branchpoint:1.9
	insight_6_8-branch:1.9.0.18
	insight_6_8-branchpoint:1.9
	sid-snapshot-20090301:1.9
	binutils-2_19_1:1.9
	sid-snapshot-20090201:1.9
	sid-snapshot-20090101:1.9
	reverse-20081226-branch:1.9.0.16
	reverse-20081226-branchpoint:1.9
	sid-snapshot-20081201:1.9
	multiprocess-20081120-branch:1.9.0.14
	multiprocess-20081120-branchpoint:1.9
	sid-snapshot-20081101:1.9
	binutils-2_19:1.9
	sid-snapshot-20081001:1.9
	reverse-20080930-branch:1.9.0.12
	reverse-20080930-branchpoint:1.9
	binutils-2_19-branch:1.9.0.10
	binutils-2_19-branchpoint:1.9
	sid-snapshot-20080901:1.9
	sid-snapshot-20080801:1.9
	reverse-20080717-branch:1.9.0.8
	reverse-20080717-branchpoint:1.9
	sid-snapshot-20080701:1.9
	msnyder-reverse-20080609-branch:1.9.0.6
	msnyder-reverse-20080609-branchpoint:1.9
	drow-reverse-20070409-branch:1.8.0.6
	drow-reverse-20070409-branchpoint:1.8
	sid-snapshot-20080601:1.9
	sid-snapshot-20080501:1.9
	sid-snapshot-20080403:1.9
	sid-snapshot-20080401:1.9
	gdb_6_8-2008-03-27-release:1.9
	sid-snapshot-20080301:1.9
	gdb_6_8-branch:1.9.0.4
	gdb_6_8-2008-02-26-branchpoint:1.9
	sid-snapshot-20080201:1.9
	sid-snapshot-20080101:1.9
	sid-snapshot-20071201:1.9
	sid-snapshot-20071101:1.9
	gdb_6_7_1-2007-10-29-release:1.9
	gdb_6_7-2007-10-10-release:1.9
	sid-snapshot-20071001:1.9
	gdb_6_7-branch:1.9.0.2
	gdb_6_7-2007-09-07-branchpoint:1.9
	binutils-2_18:1.8
	binutils-2_18-branch:1.8.0.4
	binutils-2_18-branchpoint:1.8
	insight_6_6-20070208-release:1.8
	binutils-csl-coldfire-4_1-32:1.5.16.2
	binutils-csl-sourcerygxx-4_1-32:1.5.16.2
	gdb_6_6-2006-12-18-release:1.8
	binutils-csl-innovasic-fido-3_4_4-33:1.5.16.2
	binutils-csl-sourcerygxx-3_4_4-32:1.1
	binutils-csl-coldfire-4_1-30:1.5.16.2
	binutils-csl-sourcerygxx-4_1-30:1.5.16.2
	binutils-csl-coldfire-4_1-28:1.5.16.2
	binutils-csl-sourcerygxx-4_1-29:1.5.16.2
	binutils-csl-sourcerygxx-4_1-28:1.5.16.2
	gdb_6_6-branch:1.8.0.2
	gdb_6_6-2006-11-15-branchpoint:1.8
	binutils-csl-arm-2006q3-27:1.5.16.2
	binutils-csl-sourcerygxx-4_1-27:1.5.16.2
	binutils-csl-arm-2006q3-26:1.5.16.2
	binutils-csl-sourcerygxx-4_1-26:1.5.16.2
	binutils-csl-sourcerygxx-4_1-25:1.5.16.2
	binutils-csl-sourcerygxx-4_1-24:1.5.16.2
	binutils-csl-sourcerygxx-4_1-23:1.5.16.2
	insight_6_5-20061003-release:1.6
	gdb-csl-symbian-6_4_50_20060226-12:1.5.12.1
	binutils-csl-sourcerygxx-4_1-21:1.5.16.2
	binutils-csl-arm-2006q3-21:1.5.16.2
	binutils-csl-sourcerygxx-4_1-22:1.5.16.2
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.5.16.2
	binutils-csl-sourcerygxx-4_1-20:1.5.16.1
	binutils-csl-arm-2006q3-19:1.5.16.1
	binutils-csl-sourcerygxx-4_1-19:1.5.16.1
	binutils-csl-sourcerygxx-4_1-18:1.5.16.1
	binutils-csl-renesas-4_1-9:1.5.16.1
	gdb-csl-sourcerygxx-3_4_4-25:1.5
	binutils-csl-sourcerygxx-3_4_4-25:1.1
	nickrob-async-20060828-mergepoint:1.8
	gdb-csl-symbian-6_4_50_20060226-11:1.5.12.1
	binutils-csl-renesas-4_1-8:1.5.16.1
	binutils-csl-renesas-4_1-7:1.5.16.1
	binutils-csl-renesas-4_1-6:1.5.16.1
	gdb-csl-sourcerygxx-4_1-17:1.5.12.1
	binutils-csl-sourcerygxx-4_1-17:1.5.16.1
	gdb-csl-20060226-branch-local-2:1.5.12.1
	cr-0x5f1:1.7.0.2
	gdb-csl-sourcerygxx-4_1-14:1.5.12.1
	binutils-csl-sourcerygxx-4_1-14:1.5.16.1
	binutils-csl-sourcerygxx-4_1-15:1.5.16.1
	gdb-csl-sourcerygxx-4_1-13:1.5.12.1
	binutils-csl-sourcerygxx-4_1-13:1.5.16.1
	binutils-2_17:1.6
	gdb-csl-sourcerygxx-4_1-12:1.5.12.1
	binutils-csl-sourcerygxx-4_1-12:1.5.16.1
	gdb-csl-sourcerygxx-3_4_4-21:1.5.12.1
	binutils-csl-sourcerygxx-3_4_4-21:1.5.16.1
	gdb_6_5-20060621-release:1.6
	binutils-csl-wrs-linux-3_4_4-24:1.1
	binutils-csl-wrs-linux-3_4_4-23:1.1
	gdb-csl-sourcerygxx-4_1-9:1.5.12.1
	binutils-csl-sourcerygxx-4_1-9:1.5.16.1
	gdb-csl-sourcerygxx-4_1-8:1.5.12.1
	binutils-csl-sourcerygxx-4_1-8:1.5.16.1
	gdb-csl-sourcerygxx-4_1-7:1.5.12.1
	binutils-csl-sourcerygxx-4_1-7:1.5.16.1
	gdb-csl-arm-2006q1-6:1.5.12.1
	binutils-csl-arm-2006q1-6:1.5.16.1
	gdb-csl-sourcerygxx-4_1-6:1.5.12.1
	binutils-csl-sourcerygxx-4_1-6:1.5.16.1
	binutils-csl-wrs-linux-3_4_4-22:1.1
	gdb-csl-symbian-6_4_50_20060226-10:1.5.12.1
	gdb-csl-symbian-6_4_50_20060226-9:1.5.12.1
	gdb-csl-symbian-6_4_50_20060226-8:1.5.12.1
	gdb-csl-coldfire-4_1-11:1.5.12.1
	binutils-csl-coldfire-4_1-11:1.5.16.1
	gdb-csl-sourcerygxx-3_4_4-19:1.5.12.1
	binutils-csl-sourcerygxx-3_4_4-19:1.5.16.1
	gdb-csl-coldfire-4_1-10:1.5.12.1
	gdb_6_5-branch:1.6.0.10
	gdb_6_5-2006-05-14-branchpoint:1.6
	binutils-csl-coldfire-4_1-10:1.5.16.1
	gdb-csl-sourcerygxx-4_1-5:1.5.12.1
	binutils-csl-sourcerygxx-4_1-5:1.5.16.1
	nickrob-async-20060513-branch:1.6.0.8
	nickrob-async-20060513-branchpoint:1.6
	gdb-csl-sourcerygxx-4_1-4:1.5.12.1
	binutils-csl-sourcerygxx-4_1-4:1.5.16.1
	msnyder-reverse-20060502-branch:1.6.0.6
	msnyder-reverse-20060502-branchpoint:1.6
	binutils-csl-wrs-linux-3_4_4-21:1.1
	gdb-csl-morpho-4_1-4:1.5.12.1
	binutils-csl-morpho-4_1-4:1.5.16.1
	gdb-csl-sourcerygxx-3_4_4-17:1.5.12.1
	binutils-csl-sourcerygxx-3_4_4-17:1.5.16.1
	binutils-csl-wrs-linux-3_4_4-20:1.1
	readline_5_1-import-branch:1.6.0.4
	readline_5_1-import-branchpoint:1.6
	gdb-csl-20060226-branch-merge-to-csl-symbian-1:1.5.12.1
	binutils-2_17-branch:1.6.0.2
	binutils-2_17-branchpoint:1.6
	gdb-csl-symbian-20060226-branch:1.5.12.1.0.2
	gdb-csl-symbian-20060226-branchpoint:1.5.12.1
	gdb-csl-20060226-branch-merge-to-csl-local-1:1.5.12.1
	msnyder-reverse-20060331-branch:1.5.0.18
	msnyder-reverse-20060331-branchpoint:1.5
	binutils-csl-2_17-branch:1.5.0.16
	binutils-csl-2_17-branchpoint:1.5
	gdb-csl-available-20060303-branch:1.5.0.14
	gdb-csl-available-20060303-branchpoint:1.5
	gdb-csl-20060226-branch:1.5.0.12
	gdb-csl-20060226-branchpoint:1.5
	gdb_6_4-20051202-release:1.5
	msnyder-fork-checkpoint-branch:1.5.0.10
	msnyder-fork-checkpoint-branchpoint:1.5
	gdb-csl-gxxpro-6_3-branch:1.5.0.8
	gdb-csl-gxxpro-6_3-branchpoint:1.5
	gdb_6_4-branch:1.5.0.6
	gdb_6_4-2005-11-01-branchpoint:1.5
	gdb-csl-arm-20051020-branch:1.5.0.4
	gdb-csl-arm-20051020-branchpoint:1.5
	binutils-csl-gxxpro-3_4-branch:1.1.0.72
	binutils-csl-gxxpro-3_4-branchpoint:1.1
	binutils-2_16_1:1.1
	msnyder-tracepoint-checkpoint-branch:1.5.0.2
	msnyder-tracepoint-checkpoint-branchpoint:1.5
	gdb-csl-arm-20050325-2005-q1b:1.1
	binutils-csl-arm-2005q1b:1.1
	binutils-2_16:1.1
	gdb-csl-arm-20050325-2005-q1a:1.1
	binutils-csl-arm-2005q1a:1.1
	csl-arm-20050325-branch:1.1.0.70
	csl-arm-20050325-branchpoint:1.1
	binutils-csl-arm-2005q1-branch:1.1.0.68
	binutils-csl-arm-2005q1-branchpoint:1.1
	binutils-2_16-branch:1.1.0.66
	binutils-2_16-branchpoint:1.1
	csl-arm-2004-q3d:1.1
	gdb_6_3-20041109-release:1.1
	gdb_6_3-branch:1.1.0.62
	gdb_6_3-20041019-branchpoint:1.1
	csl-arm-2004-q3:1.1
	drow_intercu-merge-20040921:1.1
	drow_intercu-merge-20040915:1.1
	jimb-gdb_6_2-e500-branch:1.1.0.64
	jimb-gdb_6_2-e500-branchpoint:1.1
	gdb_6_2-20040730-release:1.1
	gdb_6_2-branch:1.1.0.60
	gdb_6_2-2004-07-10-gmt-branchpoint:1.1
	gdb_6_1_1-20040616-release:1.1
	binutils-2_15:1.1
	binutils-2_15-branchpoint:1.1
	csl-arm-2004-q1a:1.1
	csl-arm-2004-q1:1.1
	gdb_6_1-2004-04-05-release:1.1
	drow_intercu-merge-20040402:1.1
	drow_intercu-merge-20040327:1.1
	ezannoni_pie-20040323-branch:1.1.0.58
	ezannoni_pie-20040323-branchpoint:1.1
	cagney_tramp-20040321-mergepoint:1.1
	cagney_tramp-20040309-branch:1.1.0.56
	cagney_tramp-20040309-branchpoint:1.1
	gdb_6_1-branch:1.1.0.54
	gdb_6_1-2004-03-01-gmt-branchpoint:1.1
	drow_intercu-20040221-branch:1.1.0.52
	drow_intercu-20040221-branchpoint:1.1
	binutils-2_15-branch:1.1.0.50
	cagney_bfdfile-20040213-branch:1.1.0.48
	cagney_bfdfile-20040213-branchpoint:1.1
	drow-cplus-merge-20040208:1.1
	carlton_dictionary-20040126-merge:1.1
	cagney_bigcore-20040122-branch:1.1.0.46
	cagney_bigcore-20040122-branchpoint:1.1
	drow-cplus-merge-20040113:1.1
	csl-arm-2003-q4:1.1
	drow-cplus-merge-20031224:1.1
	drow-cplus-merge-20031220:1.1
	carlton_dictionary-20031215-merge:1.1
	drow-cplus-branch:1.1.0.44
	drow-cplus-merge-20031214:1.1
	carlton-dictionary-20031111-merge:1.1
	gdb_6_0-2003-10-04-release:1.1
	kettenis_sparc-20030918-branch:1.1.0.42
	kettenis_sparc-20030918-branchpoint:1.1
	carlton_dictionary-20030917-merge:1.1
	ezannoni_pie-20030916-branchpoint:1.1
	ezannoni_pie-20030916-branch:1.1.0.40
	cagney_x86i386-20030821-branch:1.1.0.38
	cagney_x86i386-20030821-branchpoint:1.1
	carlton_dictionary-20030805-merge:1.1
	carlton_dictionary-20030627-merge:1.1
	gdb_6_0-branch:1.1.0.36
	gdb_6_0-2003-06-23-branchpoint:1.1
	jimb-ppc64-linux-20030613-branch:1.1.0.34
	jimb-ppc64-linux-20030613-branchpoint:1.1
	binutils-2_14:1.1
	cagney_convert-20030606-branch:1.1.0.32
	cagney_convert-20030606-branchpoint:1.1
	cagney_writestrings-20030508-branch:1.1.0.30
	cagney_writestrings-20030508-branchpoint:1.1
	jimb-ppc64-linux-20030528-branch:1.1.0.28
	jimb-ppc64-linux-20030528-branchpoint:1.1
	carlton_dictionary-20030523-merge:1.1
	cagney_fileio-20030521-branch:1.1.0.26
	cagney_fileio-20030521-branchpoint:1.1
	kettenis_i386newframe-20030517-mergepoint:1.1
	jimb-ppc64-linux-20030509-branch:1.1.0.24
	jimb-ppc64-linux-20030509-branchpoint:1.1
	kettenis_i386newframe-20030504-mergepoint:1.1
	carlton_dictionary-20030430-merge:1.1
	binutils-2_14-branch:1.1.0.22
	binutils-2_14-branchpoint:1.1
	kettenis_i386newframe-20030419-branch:1.1.0.20
	kettenis_i386newframe-20030419-branchpoint:1.1
	carlton_dictionary-20030416-merge:1.1
	cagney_frameaddr-20030409-mergepoint:1.1
	kettenis_i386newframe-20030406-branch:1.1.0.18
	kettenis_i386newframe-20030406-branchpoint:1.1
	cagney_frameaddr-20030403-branchpoint:1.1
	cagney_frameaddr-20030403-branch:1.1.0.16
	cagney_framebase-20030330-mergepoint:1.1
	cagney_framebase-20030326-branch:1.1.0.14
	cagney_framebase-20030326-branchpoint:1.1
	cagney_lazyid-20030317-branch:1.1.0.12
	cagney_lazyid-20030317-branchpoint:1.1
	kettenis-i386newframe-20030316-mergepoint:1.1
	offbyone-20030313-branch:1.1.0.10
	offbyone-20030313-branchpoint:1.1
	kettenis-i386newframe-20030308-branch:1.1.0.8
	kettenis-i386newframe-20030308-branchpoint:1.1
	carlton_dictionary-20030305-merge:1.1
	cagney_offbyone-20030303-branch:1.1.0.6
	cagney_offbyone-20030303-branchpoint:1.1
	w32api-2_2:1.1
	mingw-runtime-2_4:1.1
	carlton_dictionary-branch:1.1.0.4
	carlton_dictionary-20030207-merge:1.1
	binutils_latest_snapshot:1.11
	interps-20030202-branch:1.1.0.2
	interps-20030202-branchpoint:1.1;
locks; strict;
comment	@ * @;


1.11
date	2011.04.20.19.06.46;	author dj;	state Exp;
branches;
next	1.10;

1.10
date	2009.04.13.10.48.27;	author ktietz;	state Exp;
branches;
next	1.9;

1.9
date	2007.08.24.16.08.40;	author dj;	state Exp;
branches;
next	1.8;

1.8
date	2006.08.28.00.56.12;	author dj;	state Exp;
branches;
next	1.7;

1.7
date	2006.06.01.14.57.50;	author dj;	state Exp;
branches;
next	1.6;

1.6
date	2006.04.12.18.42.01;	author dj;	state Exp;
branches;
next	1.5;

1.5
date	2005.05.24.21.01.31;	author dj;	state Exp;
branches
	1.5.12.1
	1.5.16.1;
next	1.4;

1.4
date	2005.05.10.15.33.33;	author nickc;	state Exp;
branches;
next	1.3;

1.3
date	2005.03.29.02.15.22;	author ian;	state Exp;
branches;
next	1.2;

1.2
date	2005.03.28.05.07.08;	author dj;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.24.21.31.35;	author dj;	state Exp;
branches
	1.1.4.1
	1.1.44.1;
next	;

1.5.12.1
date	2006.03.17.20.36.14;	author jimb;	state Exp;
branches;
next	;

1.5.16.1
date	2006.03.31.01.17.06;	author mmitchel;	state Exp;
branches;
next	1.5.16.2;

1.5.16.2
date	2006.09.28.20.41.10;	author shinwell;	state Exp;
branches;
next	;

1.1.4.1
date	2003.02.07.19.18.02;	author carlton;	state Exp;
branches;
next	;

1.1.44.1
date	2003.12.14.20.28.03;	author drow;	state Exp;
branches;
next	;


desc
@@


1.11
log
@merge from gcc
@
text
@/* Utilities to execute a program in a subprocess (possibly linked by pipes
   with other subprocesses), and wait for it.  Generic MSDOS specialization.
   Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2003, 2005
   Free Software Foundation, Inc.

This file is part of the libiberty library.
Libiberty is free software; you can redistribute it and/or
modify it under the terms of the GNU Library General Public
License as published by the Free Software Foundation; either
version 2 of the License, or (at your option) any later version.

Libiberty is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Library General Public License for more details.

You should have received a copy of the GNU Library General Public
License along with libiberty; see the file COPYING.LIB.  If not,
write to the Free Software Foundation, Inc., 51 Franklin Street - Fifth Floor,
Boston, MA 02110-1301, USA.  */

#include "pex-common.h"

#include <stdio.h>
#include <errno.h>
#ifdef NEED_DECLARATION_ERRNO
extern int errno;
#endif
#ifdef HAVE_STRING_H
#include <string.h>
#endif
#ifdef HAVE_STDLIB_H
#include <stdlib.h>
#endif

#include "safe-ctype.h"
#include <process.h>

/* The structure we keep in obj->sysdep.  */

#define PEX_MSDOS_FILE_COUNT 3

#define PEX_MSDOS_FD_OFFSET 10

struct pex_msdos
{
  /* An array of file names.  We refer to these using file descriptors
     of 10 + array index.  */
  const char *files[PEX_MSDOS_FILE_COUNT];
  /* Exit statuses of programs which have been run.  */
  int *statuses;
};

static int pex_msdos_open (struct pex_obj *, const char *, int);
static int pex_msdos_open (struct pex_obj *, const char *, int);
static int pex_msdos_fdindex (struct pex_msdos *, int);
static pid_t pex_msdos_exec_child (struct pex_obj *, int, const char *,
				  char * const *, char * const *,
				  int, int, int, int,
				  int, const char **, int *);
static int pex_msdos_close (struct pex_obj *, int);
static pid_t pex_msdos_wait (struct pex_obj *, pid_t, int *, struct pex_time *,
			   int, const char **, int *);
static void pex_msdos_cleanup (struct pex_obj *);

/* The list of functions we pass to the common routines.  */

const struct pex_funcs funcs =
{
  pex_msdos_open,
  pex_msdos_open,
  pex_msdos_exec_child,
  pex_msdos_close,
  pex_msdos_wait,
  NULL, /* pipe */
  NULL, /* fdopenr */
  NULL, /* fdopenw */
  pex_msdos_cleanup
};

/* Return a newly initialized pex_obj structure.  */

struct pex_obj *
pex_init (int flags, const char *pname, const char *tempbase)
{
  struct pex_obj *ret;
  int i;

  /* MSDOS does not support pipes.  */
  flags &= ~ PEX_USE_PIPES;

  ret = pex_init_common (flags, pname, tempbase, funcs);

  ret->sysdep = XNEW (struct pex_msdos);
  for (i = 0; i < PEX_MSDOS_FILE_COUNT; ++i)
    ret->files[i] = NULL;
  ret->statuses = NULL;

  return ret;
}

/* Open a file.  FIXME: We ignore the binary argument, since we have
   no way to handle it.  */

static int
pex_msdos_open (struct pex_obj *obj, const char *name,
		int binary ATTRIBUTE_UNUSED)
{
  struct pex_msdos *ms;
  int i;

  ms = (struct pex_msdos *) obj->sysdep;

  for (i = 0; i < PEX_MSDOS_FILE_COUNT; ++i)
    {
      if (ms->files[i] == NULL)
	{
	  ms->files[i] = xstrdup (name);
	  return i + PEX_MSDOS_FD_OFFSET;
	}
    }

  abort ();
}

/* Get the index into msdos->files associated with an open file
   descriptor.  */

static int
pex_msdos_fdindex (struct pex_msdos *ms, int fd)
{
  fd -= PEX_MSDOS_FD_OFFSET;
  if (fd < 0 || fd >= PEX_MSDOS_FILE_COUNT || ms->files[fd] == NULL)
    abort ();
  return fd;
}


/* Close a file.  */

static int
pex_msdos_close (struct pex_obj *obj, int fd)
{
  struct pex_msdos *ms;
  int fdinex;

  ms = (struct pex_msdos *) obj->sysdep;
  fdindex = pe_msdos_fdindex (ms, fd);
  free (ms->files[fdindex]);
  ms->files[fdindex] = NULL;
}

/* Execute a child.  */

static pid_t
pex_msdos_exec_child (struct pex_obj *obj, int flags, const char *executable,
		      char * const * argv, char * const * env, int in, int out,
		      int toclose ATTRIBUTE_UNUSED,
		      int errdes ATTRIBUTE_UNUSED, const char **errmsg,
		      int *err)
{
  struct pex_msdos *ms;
  char *temp_base;
  int temp_base_allocated;
  char *rf;
  int inindex;
  char *infile;
  int outindex;
  char *outfile;
  char *scmd;
  FILE *argfile;
  int i;
  int status;

  ms = (struct pex_msdos *) obj->sysdep;

  /* FIXME: I don't know how to redirect stderr, so we ignore ERRDES
     and PEX_STDERR_TO_STDOUT.  */

  temp_base = obj->temp_base;
  if (temp_base != NULL)
    temp_base_allocated = 0;
  else
    {
      temp_base = choose_temp_base ();
      temp_base_allocated = 1;
    }

  rf = concat (temp_base, ".gp", NULL);

  if (temp_base_allocated)
    free (temp_base);

  if (in == STDIN_FILE_NO)
    {
      inindex = -1;
      infile = "";
    }
  else
    {
      inindex = pex_msdos_fdindex (ms, in);
      infile = ms->files[inindex];
    }

  if (out == STDOUT_FILE_NO)
    {
      outindex = -1;
      outfile = "";
    }
  else
    {
      outindex = pex_msdos_fdindex (ms, out);
      outfile = ms->files[outindex];
    }

  scmd = XNEWVEC (char, strlen (program)
		  + ((flags & PEXECUTE_SEARCH) != 0 ? 4 : 0)
		  + strlen (rf)
		  + strlen (infile)
		  + strlen (outfile)
		  + 10);
  sprintf (scmd, "%s%s @@%s%s%s%s%s",
	   program,
	   (flags & PEXECUTE_SEARCH) != 0 ? ".exe" : "",
	   rf,
	   inindex != -1 ? " <" : "",
	   infile,
	   outindex != -1 ? " >" : "",
	   outfile);

  argfile = fopen (rf, "w");
  if (argfile == NULL)
    {
      *err = errno;
      free (scmd);
      free (rf);
      *errmsg = "cannot open temporary command file";
      return (pid_t) -1;
    }

  for (i = 1; argv[i] != NULL; ++i)
    {
      char *p;

      for (p = argv[i]; *p != '\0'; ++p)
	{
	  if (*p == '"' || *p == '\'' || *p == '\\' || ISSPACE (*p))
	    putc ('\\', argfile);
	  putc (*p, argfile);
	}
      putc ('\n', argfile);
    }

  fclose (argfile);

  status = system (scmd);

  if (status == -1)
    {
      *err = errno;
      remove (rf);
      free (scmd);
      free (rf);
      *errmsg = "system";
      return (pid_t) -1;
    }

  remove (rf);
  free (scmd);
  free (rf);

  /* Save the exit status for later.  When we are called, obj->count
     is the number of children which have executed before this
     one.  */
  ms->statuses = XRESIZEVEC(int, ms->statuses, obj->count + 1);
  ms->statuses[obj->count] = status;

  return (pid_t) obj->count;
}

/* Wait for a child process to complete.  Actually the child process
   has already completed, and we just need to return the exit
   status.  */

static pid_t
pex_msdos_wait (struct pex_obj *obj, pid_t pid, int *status,
		struct pex_time *time, int done ATTRIBUTE_UNUSED,
		const char **errmsg ATTRIBUTE_UNUSED,
		int *err ATTRIBUTE_UNUSED)
{
  struct pex_msdos *ms;

  ms = (struct pex_msdos *) obj->sysdep;

  if (time != NULL)
    memset (time, 0, sizeof *time);

  *status = ms->statuses[pid];

  return 0;
}

/* Clean up the pex_msdos structure.  */

static void
pex_msdos_cleanup (struct pex_obj  *obj)
{
  struct pex_msdos *ms;
  int i;

  ms = (struct pex_msdos *) obj->sysdep;
  for (i = 0; i < PEX_MSDOS_FILE_COUNT; ++i)
    free (msdos->files[i]);
  free (msdos->statuses);
  free (msdos);
  obj->sysdep = NULL;
}
@


1.10
log
@Merged from gcc head revision 146001.
2009-04-13  Ozkan Sezer  <sezeroz@@gmail.com>

        PR target/39397
        * pex-common.h (struct pex_obj): Store pid values as pid_t,
        not as long (members *children and (*wait))
        * pex-common.c (pex_run_in_environment): Likewise.
        * pex-win32.c (pex_win32_wait): Return pid_t and properly check
        returned pid value.
        * pex-djgpp.c (pex_djgpp_wait): Return pid_t.
        * pex-msdos.c (pex_msdos_wait): Likewise.
@
text
@d313 2
a314 4
    if (msdos->files[i] != NULL)
      free (msdos->files[i]);
  if (msdos->statuses != NULL)
    free (msdos->statuses);
@


1.9
log
@merge from gcc
@
text
@d62 1
a62 1
static int pex_msdos_wait (struct pex_obj *, pid_t, int *, struct pex_time *,
d285 1
a285 1
static int
@


1.8
log
@merge from gcc
@
text
@d57 1
a57 1
static long pex_msdos_exec_child (struct pex_obj *, int, const char *,
d62 1
a62 1
static int pex_msdos_wait (struct pex_obj *, long, int *, struct pex_time *,
d155 1
a155 1
static long
d238 1
a238 1
      return -1;
d265 1
a265 1
      return -1;
d278 1
a278 1
  return obj->count;
d286 1
a286 1
pex_msdos_wait (struct pex_obj *obj, long pid, int *status,
@


1.7
log
@merge from gcc
@
text
@d59 2
a60 1
                                  int, int, int, const char **, int *);
d158 1
@


1.6
log
@merge from gcc
@
text
@d58 2
a59 2
				  char * const *, int, int, int,
				  const char **, int *);
d156 1
a156 1
		      char * const * argv, int in, int out,
@


1.5
log
@merge from gcc
@
text
@d76 1
@


1.5.16.1
log
@	* libiberty/configure.ac: Add cygpath for mingw hosts.
	* libiberty.configure: Rebuilt.
	* libiberty/Makefile.in: Add cygpath.
	* libiberty/cygpath.c: New.

	* include/libiberty.h (pex_write_input): New declaration.

	* libiberty/pex-common.c (pex_write_input): New function.
	* libiberty/pexecute.txh (pex_write_input): Document it.
	* libiberty/pex-common.h (struct pex_funcs): New function ptr fdopenw.
	* libiberty/pex-unix.c (pex_unix_fdopenw): New function.
	(funcs): List it as our fdopenw function.
	* libiberty/pex-win32.c (pex_win32_fdopenw): New function.
	(funcs): List it as our fdopenw function.
	* libiberty/pex-djgpp.c (funcs): Leave fdopenw null.
	* libiberty/pex-msdos (funcs): Same.
	* libiberty/functions.texi: Regenerated.

	* libiberty/pex-common.h (struct pex_obj): Doc fixes.

	* libiberty/functions.texi: Regenerate.
@
text
@a75 1
  NULL, /* fdopenw */
@


1.5.16.2
log
@	include/
	* libiberty.h: Declare pex_run_in_environment.

	libiberty/
	* pex-common.c: New function pex_run_in_environment.
	* pex-common.h: Add environment parameter to exec_child.
	* pex-msdos.c: Add environment parameter to pex_msdos_exec_child.
	* pex-djgpp.c: Add environment parameter to pex_djgpp_exec_child.
	(pex_djgpp_exec_child): Pass environment to child process.
	* pex-unix.c: Add environment parameter to pex_unix_exec_child.
	(pex_unix_exec_child): Pass environment to child process.
	* pex-win32.c: Add environment parameter to pex_win32_exec_child.
	New function env_compare for comparing VAR=VALUE pairs.
	(win32_spawn): Assemble environment block and pass to CreateProcess.
	(spawn_script): Pass environment through to win32_spawn.
	(pex_win32_exec_child): Pass environment through to spawn_script and
	win32_spawn.
	* functions.texi: Regenerate.
	* pexecute.txh: Document pex_run_in_environment.
@
text
@d58 2
a59 2
				  char * const *, char * const *,
                                  int, int, int, const char **, int *);
d156 1
a156 1
		      char * const * argv, char * const * env, int in, int out,
@


1.5.12.1
log
@gdb/ChangeLog:
2006-03-17  Jim Blandy  <jimb@@codesourcery.com>

	Add support for 'target remote |' on MinGW.
	* ser-mingw.c (struct pipe_state): New structure.
	(make_pipe_state, free_pipe_state, cleanup_pipe_state)
	(pipe_windows_open, pipe_windows_close, pipe_windows_read)
	(pipe_windows_write, pipe_wait_handle): New functions.
	(_initialize_ser_windows): Register a "pipe" interface based on
	them.

include/ChangeLog:
2006-03-15  Jim Blandy  <jimb@@codesourcery.com>

	* libiberty.h (pex_write_input): New declaration.

libiberty/ChangeLog:
2006-03-15  Jim Blandy  <jimb@@codesourcery.com>

	* pex-common.c (pex_write_input): New function.
	* pexecute.txh (pex_write_input): Document it.
	* pex-common.h (struct pex_funcs): New function ptr fdopenw.
	* pex-unix.c (pex_unix_fdopenw): New function.
	(funcs): List it as our fdopenw function.
	* pex-win32.c (pex_win32_fdopenw): New function.
	(funcs): List it as our fdopenw function.
	* pex-djgpp.c (funcs): Leave fdopenw null.
	* pex-msdos (funcs): Same.
	* functions.texi: Regenerated.

2006-03-12  Jim Blandy  <jimb@@red-bean.com>

	* pex-common.h (struct pex_obj): Doc fixes.

2006-03-11  Jim Blandy  <jimb@@red-bean.com>

	* functions.texi: Regenerate.
@
text
@a75 1
  NULL, /* fdopenw */
@


1.4
log
@Update the address and phone number of the FSF organization.
@
text
@d92 1
a92 1
  ret->sysdep = xmalloc (sizeof (struct pex_msdos));
d213 1
a213 1
  scmd = xmalloc (strlen (program)
d272 1
a272 1
  ms->statuses = xrealloc (ms->statuses, (obj->count + 1) * sizeof (int));
@


1.3
log
@libiberty:
	* pex-common.c: New file.
	* pex-one.c: New file.
	* pexecute.c: New file.
	* pex-common.h: Include <stdio.h>.
	(struct pex_obj): Define.
	(struct pex_funcs): Define.
	(pex_init_common): Declare.
	* pex-unix.c: Rewrite.
	* pex-win32.c: Rewrite.
	* pex-djgpp.c: Rewrite.
	* pex-msdos.c: Rewrite.
	* testsuite/text-pexecute.c: New file.
	* pexecute.txh: Rewrite.
	* configure.ac: Check for wait3 and wait4.  Set CHECK to
	really-check rather than check-cplus-dem.
	* functions.texi: Rebuild.
	* Makefile.in: Rebuild dependencies.
	(CFILES): Add pexecute.c, pex-common.c, pex-one.c.
	(REQUIRED_OFILES): Add pexecute.o, pex-common.o, pex-one.o.
	* testsuite/Makefile.in (really-check): New target.
	(check-pexecute, test-pexecute): New targets.
	* configure: Rebuild.
include:
	* libiberty.h: Include <stdio.h>.
	(PEX_RECORD_TIMES, PEX_USE_PIPES, PEX_SAVE_TEMPS): Define.
	(PEX_LAST, PEX_SEARCH, PEX_SUFFIX, PEX_STDERR_TO_STDOUT): Define.
	(PEX_BINARY_INPUT, PEX_BINARY_OUTPUT): Define.
	(pex_init, pex_run, pex_read_output): Declare.
	(pex_get_status, pex_get_times, pex_free, pex_one): Declare.
	(struct pex_time): Define.
@
text
@d19 2
a20 2
write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
Boston, MA 02111-1307, USA.  */
@


1.2
log
@merge from gcc
@
text
@d3 1
a3 1
   Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2003
d39 29
a67 14
/* MSDOS doesn't multitask, but for the sake of a consistent interface
   the code behaves like it does.  pexecute runs the program, tucks the
   exit code away, and returns a "pid".  pwait must be called to fetch the
   exit code.  */

/* For communicating information from pexecute to pwait.  */
static int last_pid = 0;
static int last_status = 0;
static int last_reaped = 0;

int
pexecute (const char *program, char * const *argv, const char *this_pname,
          const char *temp_base, char **errmsg_fmt, char **errmsg_arg,
          int flags)
d69 99
a167 2
  int rc;
  char *scmd, *rf;
d169 21
a189 1
  int i, el = flags & PEXECUTE_SEARCH ? 4 : 0;
d191 21
a211 3
  last_pid++;
  if (last_pid < 0)
    last_pid = 1;
d213 14
a226 2
  if ((flags & PEXECUTE_ONE) != PEXECUTE_ONE)
    abort ();
a227 6
  if (temp_base == 0)
    temp_base = choose_temp_base ();
  scmd = (char *) xmalloc (strlen (program) + strlen (temp_base) + 6 + el);
  rf = scmd + strlen(program) + 2 + el;
  sprintf (scmd, "%s%s @@%s.gp", program,
	   (flags & PEXECUTE_SEARCH ? ".exe" : ""), temp_base);
d229 1
a229 1
  if (argfile == 0)
d231 1
a231 1
      int errno_save = errno;
d233 2
a234 3
      errno = errno_save;
      *errmsg_fmt = "cannot open `%s.gp'";
      *errmsg_arg = temp_base;
d238 1
a238 1
  for (i=1; argv[i]; i++)
d240 3
a242 2
      char *cp;
      for (cp = argv[i]; *cp; cp++)
d244 3
a246 3
	  if (*cp == '"' || *cp == '\'' || *cp == '\\' || ISSPACE (*cp))
	    fputc ('\\', argfile);
	  fputc (*cp, argfile);
d248 1
a248 1
      fputc ('\n', argfile);
d250 1
d253 1
a253 1
  rc = system (scmd);
d255 1
a255 8
  {
    int errno_save = errno;
    remove (rf);
    free (scmd);
    errno = errno_save;
  }

  if (rc == -1)
d257 5
a261 2
      *errmsg_fmt = install_error_msg;
      *errmsg_arg = (char *)program;
d265 33
a297 3
  /* Tuck the status away for pwait, and return a "pid".  */
  last_status = rc << 8;
  return last_pid;
d300 1
a300 6
/* Use ECHILD if available, otherwise use EINVAL.  */
#ifdef ECHILD
#define PWAIT_ERROR ECHILD
#else
#define PWAIT_ERROR EINVAL
#endif
d302 2
a303 2
int
pwait (int pid, int *status, int flags)
d305 11
a315 13
  /* On MSDOS each pexecute must be followed by its associated pwait.  */
  if (pid != last_pid
      /* Called twice for the same child?  */
      || pid == last_reaped)
    {
      errno = PWAIT_ERROR;
      return -1;
    }
  /* ??? Here's an opportunity to canonicalize the values in STATUS.
     Needed?  */
  *status = last_status;
  last_reaped = last_pid;
  return last_pid;
@


1.1
log
@merge from gcc
@
text
@d50 3
a52 7
pexecute (program, argv, this_pname, temp_base, errmsg_fmt, errmsg_arg, flags)
     const char *program;
     char * const *argv;
     const char *this_pname;
     const char *temp_base;
     char **errmsg_fmt, **errmsg_arg;
     int flags;
d125 1
a125 4
pwait (pid, status, flags)
     int pid;
     int *status;
     int flags;
@


1.1.44.1
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@@


1.1.4.1
log
@2003-02-07  David Carlton  <carlton@@math.stanford.edu>

	* Merge with mainline; tag is carlton_dictionary-20030207-merge.
@
text
@@

