head	1.9;
access;
symbols
	sid-snapshot-20180601:1.9
	sid-snapshot-20180501:1.9
	sid-snapshot-20180401:1.9
	sid-snapshot-20180301:1.9
	sid-snapshot-20180201:1.9
	sid-snapshot-20180101:1.9
	sid-snapshot-20171201:1.9
	sid-snapshot-20171101:1.9
	sid-snapshot-20171001:1.9
	sid-snapshot-20170901:1.9
	sid-snapshot-20170801:1.9
	sid-snapshot-20170701:1.9
	sid-snapshot-20170601:1.9
	sid-snapshot-20170501:1.9
	sid-snapshot-20170401:1.9
	sid-snapshot-20170301:1.9
	sid-snapshot-20170201:1.9
	sid-snapshot-20170101:1.9
	sid-snapshot-20161201:1.9
	sid-snapshot-20161101:1.9
	sid-snapshot-20160901:1.9
	sid-snapshot-20160801:1.9
	sid-snapshot-20160701:1.9
	sid-snapshot-20160601:1.9
	sid-snapshot-20160501:1.9
	sid-snapshot-20160401:1.9
	sid-snapshot-20160301:1.9
	sid-snapshot-20160201:1.9
	sid-snapshot-20160101:1.9
	sid-snapshot-20151201:1.9
	sid-snapshot-20151101:1.9
	sid-snapshot-20151001:1.9
	sid-snapshot-20150901:1.9
	sid-snapshot-20150801:1.9
	sid-snapshot-20150701:1.9
	sid-snapshot-20150601:1.9
	sid-snapshot-20150501:1.9
	sid-snapshot-20150401:1.9
	sid-snapshot-20150301:1.9
	sid-snapshot-20150201:1.9
	sid-snapshot-20150101:1.9
	sid-snapshot-20141201:1.9
	sid-snapshot-20141101:1.9
	sid-snapshot-20141001:1.9
	sid-snapshot-20140901:1.9
	sid-snapshot-20140801:1.9
	sid-snapshot-20140701:1.9
	sid-snapshot-20140601:1.9
	sid-snapshot-20140501:1.9
	sid-snapshot-20140401:1.9
	sid-snapshot-20140301:1.9
	sid-snapshot-20140201:1.9
	sid-snapshot-20140101:1.9
	sid-snapshot-20131201:1.9
	sid-snapshot-20131101:1.9
	sid-snapshot-20131001:1.9
	binutils-2_24-branch:1.9.0.16
	binutils-2_24-branchpoint:1.9
	binutils-2_21_1:1.8
	sid-snapshot-20130901:1.9
	gdb_7_6_1-2013-08-30-release:1.9
	sid-snapshot-20130801:1.9
	sid-snapshot-20130701:1.9
	sid-snapshot-20130601:1.9
	sid-snapshot-20130501:1.9
	gdb_7_6-2013-04-26-release:1.9
	sid-snapshot-20130401:1.9
	binutils-2_23_2:1.9
	gdb_7_6-branch:1.9.0.14
	gdb_7_6-2013-03-12-branchpoint:1.9
	sid-snapshot-20130301:1.9
	sid-snapshot-20130201:1.9
	sid-snapshot-20130101:1.9
	sid-snapshot-20121201:1.9
	gdb_7_5_1-2012-11-29-release:1.9
	binutils-2_23_1:1.9
	sid-snapshot-20121101:1.9
	binutils-2_23:1.9
	sid-snapshot-20121001:1.9
	sid-snapshot-20120901:1.9
	gdb_7_5-2012-08-17-release:1.9
	sid-snapshot-20120801:1.9
	binutils-2_23-branch:1.9.0.12
	binutils-2_23-branchpoint:1.9
	gdb_7_5-branch:1.9.0.10
	gdb_7_5-2012-07-18-branchpoint:1.9
	sid-snapshot-20120701:1.9
	sid-snapshot-20120601:1.9
	sid-snapshot-20120501:1.9
	binutils-2_22_branch:1.9.0.8
	gdb_7_4_1-2012-04-26-release:1.9
	sid-snapshot-20120401:1.9
	sid-snapshot-20120301:1.9
	sid-snapshot-20120201:1.9
	gdb_7_4-2012-01-24-release:1.9
	sid-snapshot-20120101:1.9
	gdb_7_4-branch:1.9.0.6
	gdb_7_4-2011-12-13-branchpoint:1.9
	sid-snapshot-20111201:1.9
	binutils-2_22:1.9
	sid-snapshot-20111101:1.9
	sid-snapshot-20111001:1.9
	binutils-2_22-branch:1.9.0.4
	binutils-2_22-branchpoint:1.9
	gdb_7_3_1-2011-09-04-release:1.9
	sid-snapshot-20110901:1.9
	sid-snapshot-20110801:1.9
	gdb_7_3-2011-07-26-release:1.9
	sid-snapshot-20110701:1.9
	sid-snapshot-20110601:1.9
	sid-snapshot-20110501:1.9
	gdb_7_3-branch:1.9.0.2
	gdb_7_3-2011-04-01-branchpoint:1.9
	sid-snapshot-20110401:1.9
	sid-snapshot-20110301:1.9
	cygwin-1_7_8-release:1.9
	sid-snapshot-20110201:1.8
	sid-snapshot-20110101:1.8
	binutils-2_21:1.8
	sid-snapshot-20101201:1.8
	binutils-2_21-branch:1.8.0.38
	binutils-2_21-branchpoint:1.8
	sid-snapshot-20101101:1.8
	sid-snapshot-20101001:1.8
	binutils-2_20_1:1.8
	gdb_7_2-2010-09-02-release:1.8
	sid-snapshot-20100901:1.8
	cygwin-1_7_7-release:1.8
	sid-snapshot-20100801:1.8
	gdb_7_2-branch:1.8.0.36
	gdb_7_2-2010-07-07-branchpoint:1.8
	sid-snapshot-20100701:1.8
	sid-snapshot-20100601:1.8
	sid-snapshot-20100501:1.8
	sid-snapshot-20100401:1.8
	gdb_7_1-2010-03-18-release:1.8
	sid-snapshot-20100301:1.8
	gdb_7_1-branch:1.8.0.34
	gdb_7_1-2010-02-18-branchpoint:1.8
	sid-snapshot-20100201:1.8
	sid-snapshot-20100101:1.8
	gdb_7_0_1-2009-12-22-release:1.8
	sid-snapshot-20091201:1.8
	sid-snapshot-20091101:1.8
	binutils-2_20:1.8
	gdb_7_0-2009-10-06-release:1.8
	sid-snapshot-20091001:1.8
	gdb_7_0-branch:1.8.0.32
	gdb_7_0-2009-09-16-branchpoint:1.8
	arc-sim-20090309:1.8
	binutils-arc-20081103-branch:1.8.0.30
	binutils-arc-20081103-branchpoint:1.8
	binutils-2_20-branch:1.8.0.28
	binutils-2_20-branchpoint:1.8
	sid-snapshot-20090901:1.8
	sid-snapshot-20090801:1.8
	msnyder-checkpoint-072509-branch:1.8.0.26
	msnyder-checkpoint-072509-branchpoint:1.8
	sid-snapshot-20090701:1.8
	dje-cgen-play1-branch:1.8.0.24
	dje-cgen-play1-branchpoint:1.8
	sid-snapshot-20090601:1.8
	sid-snapshot-20090501:1.8
	sid-snapshot-20090401:1.8
	arc-20081103-branch:1.8.0.22
	arc-20081103-branchpoint:1.8
	arc-insight_6_8-branch:1.8.0.20
	arc-insight_6_8-branchpoint:1.8
	insight_6_8-branch:1.8.0.18
	insight_6_8-branchpoint:1.8
	sid-snapshot-20090301:1.8
	binutils-2_19_1:1.8
	sid-snapshot-20090201:1.8
	sid-snapshot-20090101:1.8
	reverse-20081226-branch:1.8.0.16
	reverse-20081226-branchpoint:1.8
	sid-snapshot-20081201:1.8
	multiprocess-20081120-branch:1.8.0.14
	multiprocess-20081120-branchpoint:1.8
	sid-snapshot-20081101:1.8
	binutils-2_19:1.8
	sid-snapshot-20081001:1.8
	reverse-20080930-branch:1.8.0.12
	reverse-20080930-branchpoint:1.8
	binutils-2_19-branch:1.8.0.10
	binutils-2_19-branchpoint:1.8
	sid-snapshot-20080901:1.8
	sid-snapshot-20080801:1.8
	reverse-20080717-branch:1.8.0.8
	reverse-20080717-branchpoint:1.8
	sid-snapshot-20080701:1.8
	msnyder-reverse-20080609-branch:1.8.0.6
	msnyder-reverse-20080609-branchpoint:1.8
	drow-reverse-20070409-branch:1.7.0.4
	drow-reverse-20070409-branchpoint:1.7
	sid-snapshot-20080601:1.8
	sid-snapshot-20080501:1.8
	sid-snapshot-20080403:1.8
	sid-snapshot-20080401:1.8
	gdb_6_8-2008-03-27-release:1.8
	sid-snapshot-20080301:1.8
	gdb_6_8-branch:1.8.0.4
	gdb_6_8-2008-02-26-branchpoint:1.8
	sid-snapshot-20080201:1.8
	sid-snapshot-20080101:1.8
	sid-snapshot-20071201:1.8
	sid-snapshot-20071101:1.8
	gdb_6_7_1-2007-10-29-release:1.8
	gdb_6_7-2007-10-10-release:1.8
	sid-snapshot-20071001:1.8
	gdb_6_7-branch:1.8.0.2
	gdb_6_7-2007-09-07-branchpoint:1.8
	binutils-2_18:1.7
	binutils-2_18-branch:1.7.0.2
	binutils-2_18-branchpoint:1.7
	insight_6_6-20070208-release:1.6
	binutils-csl-coldfire-4_1-32:1.3.16.3
	binutils-csl-sourcerygxx-4_1-32:1.3.16.3
	gdb_6_6-2006-12-18-release:1.6
	binutils-csl-innovasic-fido-3_4_4-33:1.3.16.3
	binutils-csl-sourcerygxx-3_4_4-32:1.1
	binutils-csl-coldfire-4_1-30:1.3.16.3
	binutils-csl-sourcerygxx-4_1-30:1.3.16.3
	binutils-csl-coldfire-4_1-28:1.3.16.3
	binutils-csl-sourcerygxx-4_1-29:1.3.16.3
	binutils-csl-sourcerygxx-4_1-28:1.3.16.3
	gdb_6_6-branch:1.6.0.2
	gdb_6_6-2006-11-15-branchpoint:1.6
	binutils-csl-arm-2006q3-27:1.3.16.3
	binutils-csl-sourcerygxx-4_1-27:1.3.16.3
	binutils-csl-arm-2006q3-26:1.3.16.3
	binutils-csl-sourcerygxx-4_1-26:1.3.16.3
	binutils-csl-sourcerygxx-4_1-25:1.3.16.3
	binutils-csl-sourcerygxx-4_1-24:1.3.16.3
	binutils-csl-sourcerygxx-4_1-23:1.3.16.3
	insight_6_5-20061003-release:1.4
	gdb-csl-symbian-6_4_50_20060226-12:1.3.12.1
	binutils-csl-sourcerygxx-4_1-21:1.3.16.3
	binutils-csl-arm-2006q3-21:1.3.16.3
	binutils-csl-sourcerygxx-4_1-22:1.3.16.3
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.3.16.3
	binutils-csl-sourcerygxx-4_1-20:1.3.16.2
	binutils-csl-arm-2006q3-19:1.3.16.2
	binutils-csl-sourcerygxx-4_1-19:1.3.16.2
	binutils-csl-sourcerygxx-4_1-18:1.3.16.2
	binutils-csl-renesas-4_1-9:1.3.16.2
	gdb-csl-sourcerygxx-3_4_4-25:1.3
	binutils-csl-sourcerygxx-3_4_4-25:1.1
	nickrob-async-20060828-mergepoint:1.5
	gdb-csl-symbian-6_4_50_20060226-11:1.3.12.1
	binutils-csl-renesas-4_1-8:1.3.16.1
	binutils-csl-renesas-4_1-7:1.3.16.1
	binutils-csl-renesas-4_1-6:1.3.16.1
	gdb-csl-sourcerygxx-4_1-17:1.3.12.1
	binutils-csl-sourcerygxx-4_1-17:1.3.16.1
	gdb-csl-20060226-branch-local-2:1.3.12.1
	cr-0x5f1:1.5.0.2
	gdb-csl-sourcerygxx-4_1-14:1.3.12.1
	binutils-csl-sourcerygxx-4_1-14:1.3.16.1
	binutils-csl-sourcerygxx-4_1-15:1.3.16.1
	gdb-csl-sourcerygxx-4_1-13:1.3.12.1
	binutils-csl-sourcerygxx-4_1-13:1.3.16.1
	binutils-2_17:1.4
	gdb-csl-sourcerygxx-4_1-12:1.3.12.1
	binutils-csl-sourcerygxx-4_1-12:1.3.16.1
	gdb-csl-sourcerygxx-3_4_4-21:1.3.12.1
	binutils-csl-sourcerygxx-3_4_4-21:1.3.16.1
	gdb_6_5-20060621-release:1.4
	binutils-csl-wrs-linux-3_4_4-24:1.1
	binutils-csl-wrs-linux-3_4_4-23:1.1
	gdb-csl-sourcerygxx-4_1-9:1.3.12.1
	binutils-csl-sourcerygxx-4_1-9:1.3.16.1
	gdb-csl-sourcerygxx-4_1-8:1.3.12.1
	binutils-csl-sourcerygxx-4_1-8:1.3.16.1
	gdb-csl-sourcerygxx-4_1-7:1.3.12.1
	binutils-csl-sourcerygxx-4_1-7:1.3.16.1
	gdb-csl-arm-2006q1-6:1.3.12.1
	binutils-csl-arm-2006q1-6:1.3.16.1
	gdb-csl-sourcerygxx-4_1-6:1.3.12.1
	binutils-csl-sourcerygxx-4_1-6:1.3.16.1
	binutils-csl-wrs-linux-3_4_4-22:1.1
	gdb-csl-symbian-6_4_50_20060226-10:1.3.12.1
	gdb-csl-symbian-6_4_50_20060226-9:1.3.12.1
	gdb-csl-symbian-6_4_50_20060226-8:1.3.12.1
	gdb-csl-coldfire-4_1-11:1.3.12.1
	binutils-csl-coldfire-4_1-11:1.3.16.1
	gdb-csl-sourcerygxx-3_4_4-19:1.3.12.1
	binutils-csl-sourcerygxx-3_4_4-19:1.3.16.1
	gdb-csl-coldfire-4_1-10:1.3.12.1
	gdb_6_5-branch:1.4.0.10
	gdb_6_5-2006-05-14-branchpoint:1.4
	binutils-csl-coldfire-4_1-10:1.3.16.1
	gdb-csl-sourcerygxx-4_1-5:1.3.12.1
	binutils-csl-sourcerygxx-4_1-5:1.3.16.1
	nickrob-async-20060513-branch:1.4.0.8
	nickrob-async-20060513-branchpoint:1.4
	gdb-csl-sourcerygxx-4_1-4:1.3.12.1
	binutils-csl-sourcerygxx-4_1-4:1.3.16.1
	msnyder-reverse-20060502-branch:1.4.0.6
	msnyder-reverse-20060502-branchpoint:1.4
	binutils-csl-wrs-linux-3_4_4-21:1.1
	gdb-csl-morpho-4_1-4:1.3.12.1
	binutils-csl-morpho-4_1-4:1.3.16.1
	gdb-csl-sourcerygxx-3_4_4-17:1.3.12.1
	binutils-csl-sourcerygxx-3_4_4-17:1.3.16.1
	binutils-csl-wrs-linux-3_4_4-20:1.1
	readline_5_1-import-branch:1.4.0.4
	readline_5_1-import-branchpoint:1.4
	gdb-csl-20060226-branch-merge-to-csl-symbian-1:1.3.12.1
	binutils-2_17-branch:1.4.0.2
	binutils-2_17-branchpoint:1.4
	gdb-csl-symbian-20060226-branch:1.3.12.1.0.2
	gdb-csl-symbian-20060226-branchpoint:1.3.12.1
	gdb-csl-20060226-branch-merge-to-csl-local-1:1.3.12.1
	msnyder-reverse-20060331-branch:1.3.0.18
	msnyder-reverse-20060331-branchpoint:1.3
	binutils-csl-2_17-branch:1.3.0.16
	binutils-csl-2_17-branchpoint:1.3
	gdb-csl-available-20060303-branch:1.3.0.14
	gdb-csl-available-20060303-branchpoint:1.3
	gdb-csl-20060226-branch:1.3.0.12
	gdb-csl-20060226-branchpoint:1.3
	gdb_6_4-20051202-release:1.3
	msnyder-fork-checkpoint-branch:1.3.0.10
	msnyder-fork-checkpoint-branchpoint:1.3
	gdb-csl-gxxpro-6_3-branch:1.3.0.8
	gdb-csl-gxxpro-6_3-branchpoint:1.3
	gdb_6_4-branch:1.3.0.6
	gdb_6_4-2005-11-01-branchpoint:1.3
	gdb-csl-arm-20051020-branch:1.3.0.4
	gdb-csl-arm-20051020-branchpoint:1.3
	binutils-csl-gxxpro-3_4-branch:1.1.0.72
	binutils-csl-gxxpro-3_4-branchpoint:1.1
	binutils-2_16_1:1.1
	msnyder-tracepoint-checkpoint-branch:1.3.0.2
	msnyder-tracepoint-checkpoint-branchpoint:1.3
	gdb-csl-arm-20050325-2005-q1b:1.1
	binutils-csl-arm-2005q1b:1.1
	binutils-2_16:1.1
	gdb-csl-arm-20050325-2005-q1a:1.1
	binutils-csl-arm-2005q1a:1.1
	csl-arm-20050325-branch:1.1.0.70
	csl-arm-20050325-branchpoint:1.1
	binutils-csl-arm-2005q1-branch:1.1.0.68
	binutils-csl-arm-2005q1-branchpoint:1.1
	binutils-2_16-branch:1.1.0.66
	binutils-2_16-branchpoint:1.1
	csl-arm-2004-q3d:1.1
	gdb_6_3-20041109-release:1.1
	gdb_6_3-branch:1.1.0.62
	gdb_6_3-20041019-branchpoint:1.1
	csl-arm-2004-q3:1.1
	drow_intercu-merge-20040921:1.1
	drow_intercu-merge-20040915:1.1
	jimb-gdb_6_2-e500-branch:1.1.0.64
	jimb-gdb_6_2-e500-branchpoint:1.1
	gdb_6_2-20040730-release:1.1
	gdb_6_2-branch:1.1.0.60
	gdb_6_2-2004-07-10-gmt-branchpoint:1.1
	gdb_6_1_1-20040616-release:1.1
	binutils-2_15:1.1
	binutils-2_15-branchpoint:1.1
	csl-arm-2004-q1a:1.1
	csl-arm-2004-q1:1.1
	gdb_6_1-2004-04-05-release:1.1
	drow_intercu-merge-20040402:1.1
	drow_intercu-merge-20040327:1.1
	ezannoni_pie-20040323-branch:1.1.0.58
	ezannoni_pie-20040323-branchpoint:1.1
	cagney_tramp-20040321-mergepoint:1.1
	cagney_tramp-20040309-branch:1.1.0.56
	cagney_tramp-20040309-branchpoint:1.1
	gdb_6_1-branch:1.1.0.54
	gdb_6_1-2004-03-01-gmt-branchpoint:1.1
	drow_intercu-20040221-branch:1.1.0.52
	drow_intercu-20040221-branchpoint:1.1
	binutils-2_15-branch:1.1.0.50
	cagney_bfdfile-20040213-branch:1.1.0.48
	cagney_bfdfile-20040213-branchpoint:1.1
	drow-cplus-merge-20040208:1.1
	carlton_dictionary-20040126-merge:1.1
	cagney_bigcore-20040122-branch:1.1.0.46
	cagney_bigcore-20040122-branchpoint:1.1
	drow-cplus-merge-20040113:1.1
	csl-arm-2003-q4:1.1
	drow-cplus-merge-20031224:1.1
	drow-cplus-merge-20031220:1.1
	carlton_dictionary-20031215-merge:1.1
	drow-cplus-branch:1.1.0.44
	drow-cplus-merge-20031214:1.1
	carlton-dictionary-20031111-merge:1.1
	gdb_6_0-2003-10-04-release:1.1
	kettenis_sparc-20030918-branch:1.1.0.42
	kettenis_sparc-20030918-branchpoint:1.1
	carlton_dictionary-20030917-merge:1.1
	ezannoni_pie-20030916-branchpoint:1.1
	ezannoni_pie-20030916-branch:1.1.0.40
	cagney_x86i386-20030821-branch:1.1.0.38
	cagney_x86i386-20030821-branchpoint:1.1
	carlton_dictionary-20030805-merge:1.1
	carlton_dictionary-20030627-merge:1.1
	gdb_6_0-branch:1.1.0.36
	gdb_6_0-2003-06-23-branchpoint:1.1
	jimb-ppc64-linux-20030613-branch:1.1.0.34
	jimb-ppc64-linux-20030613-branchpoint:1.1
	binutils-2_14:1.1
	cagney_convert-20030606-branch:1.1.0.32
	cagney_convert-20030606-branchpoint:1.1
	cagney_writestrings-20030508-branch:1.1.0.30
	cagney_writestrings-20030508-branchpoint:1.1
	jimb-ppc64-linux-20030528-branch:1.1.0.28
	jimb-ppc64-linux-20030528-branchpoint:1.1
	carlton_dictionary-20030523-merge:1.1
	cagney_fileio-20030521-branch:1.1.0.26
	cagney_fileio-20030521-branchpoint:1.1
	kettenis_i386newframe-20030517-mergepoint:1.1
	jimb-ppc64-linux-20030509-branch:1.1.0.24
	jimb-ppc64-linux-20030509-branchpoint:1.1
	kettenis_i386newframe-20030504-mergepoint:1.1
	carlton_dictionary-20030430-merge:1.1
	binutils-2_14-branch:1.1.0.22
	binutils-2_14-branchpoint:1.1
	kettenis_i386newframe-20030419-branch:1.1.0.20
	kettenis_i386newframe-20030419-branchpoint:1.1
	carlton_dictionary-20030416-merge:1.1
	cagney_frameaddr-20030409-mergepoint:1.1
	kettenis_i386newframe-20030406-branch:1.1.0.18
	kettenis_i386newframe-20030406-branchpoint:1.1
	cagney_frameaddr-20030403-branchpoint:1.1
	cagney_frameaddr-20030403-branch:1.1.0.16
	cagney_framebase-20030330-mergepoint:1.1
	cagney_framebase-20030326-branch:1.1.0.14
	cagney_framebase-20030326-branchpoint:1.1
	cagney_lazyid-20030317-branch:1.1.0.12
	cagney_lazyid-20030317-branchpoint:1.1
	kettenis-i386newframe-20030316-mergepoint:1.1
	offbyone-20030313-branch:1.1.0.10
	offbyone-20030313-branchpoint:1.1
	kettenis-i386newframe-20030308-branch:1.1.0.8
	kettenis-i386newframe-20030308-branchpoint:1.1
	carlton_dictionary-20030305-merge:1.1
	cagney_offbyone-20030303-branch:1.1.0.6
	cagney_offbyone-20030303-branchpoint:1.1
	w32api-2_2:1.1
	mingw-runtime-2_4:1.1
	carlton_dictionary-branch:1.1.0.4
	carlton_dictionary-20030207-merge:1.1
	binutils_latest_snapshot:1.9
	interps-20030202-branch:1.1.0.2
	interps-20030202-branchpoint:1.1;
locks; strict;
comment	@# @;


1.9
date	2011.02.03.07.23.59;	author rwild;	state Exp;
branches;
next	1.8;

1.8
date	2007.09.06.17.22.39;	author dj;	state Exp;
branches;
next	1.7;

1.7
date	2007.01.31.18.49.42;	author vprus;	state Exp;
branches;
next	1.6;

1.6
date	2006.10.25.01.42.44;	author dj;	state Exp;
branches;
next	1.5;

1.5
date	2006.06.01.14.57.50;	author dj;	state Exp;
branches;
next	1.4;

1.4
date	2006.04.12.18.42.01;	author dj;	state Exp;
branches;
next	1.3;

1.3
date	2005.05.15.17.25.43;	author dj;	state Exp;
branches
	1.3.12.1
	1.3.16.1;
next	1.2;

1.2
date	2005.03.29.02.15.22;	author ian;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.24.21.31.35;	author dj;	state Exp;
branches
	1.1.4.1
	1.1.44.1;
next	;

1.3.12.1
date	2006.03.17.20.36.14;	author jimb;	state Exp;
branches;
next	;

1.3.16.1
date	2006.03.31.01.17.06;	author mmitchel;	state Exp;
branches;
next	1.3.16.2;

1.3.16.2
date	2006.08.22.15.08.45;	author jsm28;	state Exp;
branches;
next	1.3.16.3;

1.3.16.3
date	2006.09.28.20.41.10;	author shinwell;	state Exp;
branches;
next	;

1.1.4.1
date	2003.02.07.19.18.02;	author carlton;	state Exp;
branches;
next	;

1.1.44.1
date	2003.12.14.20.28.03;	author drow;	state Exp;
branches;
next	;


desc
@@


1.9
log
@libiberty: documentation markup and order fixes.

libiberty/:
	* splay-tree.c: Escape wrapping newlines in texinfo markup
	with '@@', to fix function declaration output rendering.
	* gather-docs: Relax and improve macro name matching to actually
	match all current names and to allow input line wrapping.
	* bsearch.c, concat.c, crc32.c, fnmatch.txh, fopen_unlocked.c,
	hashtab.c, insque.c, make-relative-prefix.c, memchr.c, memcmp.c,
	memcpy.c, memmem.c, memmove.c, mempcpy.c, memset.c,
	pexecute.txh, random.c, setenv.c, setproctitle.c,
	simple-object.txh, snprintf.c, stpncpy.c, strncmp.c, strtod.c,
	strtol.c, vasprintf.c, vprintf.c, vsnprintf.c, xmemdup.c:
	Wrap long texinfo input lines.
	* functions.texi: Regenerate.
@
text
@@@c -*- mode: texinfo -*-
@@deftypefn Extension {struct pex_obj *} pex_init (int @@var{flags}, @@
  const char *@@var{pname}, const char *@@var{tempbase})

Prepare to execute one or more programs, with standard output of each
program fed to standard input of the next.  This is a system
independent interface to execute a pipeline.

@@var{flags} is a bitwise combination of the following:

@@table @@code

@@vindex PEX_RECORD_TIMES
@@item PEX_RECORD_TIMES
Record subprocess times if possible.

@@vindex PEX_USE_PIPES
@@item PEX_USE_PIPES
Use pipes for communication between processes, if possible.

@@vindex PEX_SAVE_TEMPS
@@item PEX_SAVE_TEMPS
Don't delete temporary files used for communication between
processes.

@@end table

@@var{pname} is the name of program to be executed, used in error
messages.  @@var{tempbase} is a base name to use for any required
temporary files; it may be @@code{NULL} to use a randomly chosen name.

@@end deftypefn

@@deftypefn Extension {const char *} pex_run (struct pex_obj *@@var{obj}, @@
  int @@var{flags}, const char *@@var{executable}, char * const *@@var{argv}, @@
  const char *@@var{outname}, const char *@@var{errname}, int *@@var{err})

Execute one program in a pipeline.  On success this returns
@@code{NULL}.  On failure it returns an error message, a statically
allocated string.

@@var{obj} is returned by a previous call to @@code{pex_init}.

@@var{flags} is a bitwise combination of the following:

@@table @@code

@@vindex PEX_LAST
@@item PEX_LAST
This must be set on the last program in the pipeline.  In particular,
it should be set when executing a single program.  The standard output
of the program will be sent to @@var{outname}, or, if @@var{outname} is
@@code{NULL}, to the standard output of the calling program.  Do @@emph{not}
set this bit if you want to call @@code{pex_read_output}
(described below).  After a call to @@code{pex_run} with this bit set,
@@var{pex_run} may no longer be called with the same @@var{obj}.

@@vindex PEX_SEARCH
@@item PEX_SEARCH
Search for the program using the user's executable search path.

@@vindex PEX_SUFFIX
@@item PEX_SUFFIX
@@var{outname} is a suffix.  See the description of @@var{outname},
below.

@@vindex PEX_STDERR_TO_STDOUT
@@item PEX_STDERR_TO_STDOUT
Send the program's standard error to standard output, if possible.

@@vindex PEX_BINARY_INPUT
@@vindex PEX_BINARY_OUTPUT
@@vindex PEX_BINARY_ERROR
@@item PEX_BINARY_INPUT
@@itemx PEX_BINARY_OUTPUT
@@itemx PEX_BINARY_ERROR
The standard input (output or error) of the program should be read (written) in
binary mode rather than text mode.  These flags are ignored on systems
which do not distinguish binary mode and text mode, such as Unix.  For
proper behavior these flags should match appropriately---a call to
@@code{pex_run} using @@code{PEX_BINARY_OUTPUT} should be followed by a
call using @@code{PEX_BINARY_INPUT}.

@@vindex PEX_STDERR_TO_PIPE
@@item PEX_STDERR_TO_PIPE
Send the program's standard error to a pipe, if possible.  This flag
cannot be specified together with @@code{PEX_STDERR_TO_STDOUT}.  This
flag can be specified only on the last program in pipeline.

@@end table

@@var{executable} is the program to execute.  @@var{argv} is the set of
arguments to pass to the program; normally @@code{@@var{argv}[0]} will
be a copy of @@var{executable}.

@@var{outname} is used to set the name of the file to use for standard
output.  There are two cases in which no output file will be used:

@@enumerate
@@item
if @@code{PEX_LAST} is not set in @@var{flags}, and @@code{PEX_USE_PIPES}
was set in the call to @@code{pex_init}, and the system supports pipes

@@item
if @@code{PEX_LAST} is set in @@var{flags}, and @@var{outname} is
@@code{NULL}
@@end enumerate

@@noindent
Otherwise the code will use a file to hold standard
output.  If @@code{PEX_LAST} is not set, this file is considered to be
a temporary file, and it will be removed when no longer needed, unless
@@code{PEX_SAVE_TEMPS} was set in the call to @@code{pex_init}.

There are two cases to consider when setting the name of the file to
hold standard output.

@@enumerate
@@item
@@code{PEX_SUFFIX} is set in @@var{flags}.  In this case
@@var{outname} may not be @@code{NULL}.  If the @@var{tempbase} parameter
to @@code{pex_init} was not @@code{NULL}, then the output file name is
the concatenation of @@var{tempbase} and @@var{outname}.  If
@@var{tempbase} was @@code{NULL}, then the output file name is a random
file name ending in @@var{outname}.

@@item
@@code{PEX_SUFFIX} was not set in @@var{flags}.  In this
case, if @@var{outname} is not @@code{NULL}, it is used as the output
file name.  If @@var{outname} is @@code{NULL}, and @@var{tempbase} was
not NULL, the output file name is randomly chosen using
@@var{tempbase}.  Otherwise the output file name is chosen completely
at random.
@@end enumerate

@@var{errname} is the file name to use for standard error output.  If
it is @@code{NULL}, standard error is the same as the caller's.
Otherwise, standard error is written to the named file.

On an error return, the code sets @@code{*@@var{err}} to an @@code{errno}
value, or to 0 if there is no relevant @@code{errno}.

@@end deftypefn

@@deftypefn Extension {const char *} pex_run_in_environment (struct pex_obj *@@var{obj}, @@
  int @@var{flags}, const char *@@var{executable}, char * const *@@var{argv}, @@
  char * const *@@var{env}, int @@var{env_size}, const char *@@var{outname}, @@
  const char *@@var{errname}, int *@@var{err})

Execute one program in a pipeline, permitting the environment for the
program to be specified.  Behaviour and parameters not listed below are
as for @@code{pex_run}.

@@var{env} is the environment for the child process, specified as an array of
character pointers.  Each element of the array should point to a string of the
form @@code{VAR=VALUE}, with the exception of the last element that must be
@@code{NULL}.

@@end deftypefn

@@deftypefn Extension {FILE *} pex_input_file (struct pex_obj *@@var{obj}, @@
  int @@var{flags}, const char *@@var{in_name})

Return a stream for a temporary file to pass to the first program in
the pipeline as input.

The name of the input file is chosen according to the same rules
@@code{pex_run} uses to choose output file names, based on
@@var{in_name}, @@var{obj} and the @@code{PEX_SUFFIX} bit in @@var{flags}.

Don't call @@code{fclose} on the returned stream; the first call to
@@code{pex_run} closes it automatically.

If @@var{flags} includes @@code{PEX_BINARY_OUTPUT}, open the stream in
binary mode; otherwise, open it in the default mode.  Including
@@code{PEX_BINARY_OUTPUT} in @@var{flags} has no effect on Unix.
@@end deftypefn

@@deftypefn Extension {FILE *} pex_input_pipe (struct pex_obj *@@var{obj}, @@
  int @@var{binary})

Return a stream @@var{fp} for a pipe connected to the standard input of
the first program in the pipeline; @@var{fp} is opened for writing.
You must have passed @@code{PEX_USE_PIPES} to the @@code{pex_init} call
that returned @@var{obj}.

You must close @@var{fp} using @@code{fclose} yourself when you have
finished writing data to the pipeline.

The file descriptor underlying @@var{fp} is marked not to be inherited
by child processes.

On systems that do not support pipes, this function returns
@@code{NULL}, and sets @@code{errno} to @@code{EINVAL}.  If you would
like to write code that is portable to all systems the @@code{pex}
functions support, consider using @@code{pex_input_file} instead.

There are two opportunities for deadlock using
@@code{pex_input_pipe}:

@@itemize @@bullet
@@item
Most systems' pipes can buffer only a fixed amount of data; a process
that writes to a full pipe blocks.  Thus, if you write to @@file{fp}
before starting the first process, you run the risk of blocking when
there is no child process yet to read the data and allow you to
continue.  @@code{pex_input_pipe} makes no promises about the
size of the pipe's buffer, so if you need to write any data at all
before starting the first process in the pipeline, consider using
@@code{pex_input_file} instead.

@@item
Using @@code{pex_input_pipe} and @@code{pex_read_output} together
may also cause deadlock.  If the output pipe fills up, so that each
program in the pipeline is waiting for the next to read more data, and
you fill the input pipe by writing more data to @@var{fp}, then there
is no way to make progress: the only process that could read data from
the output pipe is you, but you are blocked on the input pipe.

@@end itemize

@@end deftypefn

@@deftypefn Extension {FILE *} pex_read_output (struct pex_obj *@@var{obj}, @@
  int @@var{binary})

Returns a @@code{FILE} pointer which may be used to read the standard
output of the last program in the pipeline.  When this is used,
@@code{PEX_LAST} should not be used in a call to @@code{pex_run}.  After
this is called, @@code{pex_run} may no longer be called with the same
@@var{obj}.  @@var{binary} should be non-zero if the file should be
opened in binary mode.  Don't call @@code{fclose} on the returned file;
it will be closed by @@code{pex_free}.

@@end deftypefn

@@deftypefn Extension {FILE *} pex_read_err (struct pex_obj *@@var{obj}, @@
  int @@var{binary})

Returns a @@code{FILE} pointer which may be used to read the standard
error of the last program in the pipeline.  When this is used,
@@code{PEX_LAST} should not be used in a call to @@code{pex_run}.  After
this is called, @@code{pex_run} may no longer be called with the same
@@var{obj}.  @@var{binary} should be non-zero if the file should be
opened in binary mode.  Don't call @@code{fclose} on the returned file;
it will be closed by @@code{pex_free}.

@@end deftypefn


@@deftypefn Extension int pex_get_status (struct pex_obj *@@var{obj}, @@
  int @@var{count}, int *@@var{vector})

Returns the exit status of all programs run using @@var{obj}.
@@var{count} is the number of results expected.  The results will be
placed into @@var{vector}.  The results are in the order of the calls
to @@code{pex_run}.  Returns 0 on error, 1 on success.

@@end deftypefn

@@deftypefn Extension int pex_get_times (struct pex_obj *@@var{obj}, @@
  int @@var{count}, struct pex_time *@@var{vector})

Returns the process execution times of all programs run using
@@var{obj}.  @@var{count} is the number of results expected.  The
results will be placed into @@var{vector}.  The results are in the
order of the calls to @@code{pex_run}.  Returns 0 on error, 1 on
success.

@@code{struct pex_time} has the following fields of the type
@@code{unsigned long}: @@code{user_seconds},
@@code{user_microseconds}, @@code{system_seconds},
@@code{system_microseconds}.  On systems which do not support reporting
process times, all the fields will be set to @@code{0}.

@@end deftypefn

@@deftypefn Extension void pex_free (struct pex_obj @@var{obj})

Clean up and free all data associated with @@var{obj}.  If you have not
yet called @@code{pex_get_times} or @@code{pex_get_status}, this will
try to kill the subprocesses.

@@end deftypefn

@@deftypefn Extension {const char *} pex_one (int @@var{flags}, @@
  const char *@@var{executable}, char * const *@@var{argv}, @@
  const char *@@var{pname}, const char *@@var{outname}, const char *@@var{errname}, @@
  int *@@var{status}, int *@@var{err})

An interface to permit the easy execution of a
single program.  The return value and most of the parameters are as
for a call to @@code{pex_run}.  @@var{flags} is restricted to a
combination of @@code{PEX_SEARCH}, @@code{PEX_STDERR_TO_STDOUT}, and
@@code{PEX_BINARY_OUTPUT}.  @@var{outname} is interpreted as if
@@code{PEX_LAST} were set.  On a successful return, @@code{*@@var{status}} will
be set to the exit status of the program.

@@end deftypefn

@@deftypefn Extension int pexecute (const char *@@var{program}, @@
  char * const *@@var{argv}, const char *@@var{this_pname}, @@
  const char *@@var{temp_base}, char **@@var{errmsg_fmt}, @@
  char **@@var{errmsg_arg}, int @@var{flags})

This is the old interface to execute one or more programs.  It is
still supported for compatibility purposes, but is no longer
documented.

@@end deftypefn

@@deftypefn Extension int pwait (int @@var{pid}, int *@@var{status}, int @@var{flags})

Another part of the old execution interface.

@@end deftypefn
@


1.8
log
@merge from gcc
@
text
@d2 2
a3 1
@@deftypefn Extension {struct pex_obj *} pex_init (int @@var{flags}, const char *@@var{pname}, const char *@@var{tempbase})
d34 3
a36 1
@@deftypefn Extension {const char *} pex_run (struct pex_obj *@@var{obj}, int @@var{flags}, const char *@@var{executable}, char * const *@@var{argv}, const char *@@var{outname}, const char *@@var{errname}, int *@@var{err})
d145 4
a148 1
@@deftypefn Extension {const char *} pex_run_in_environment (struct pex_obj *@@var{obj}, int @@var{flags}, const char *@@var{executable}, char * const *@@var{argv}, char * const *@@var{env}, int @@var{env_size}, const char *@@var{outname}, const char *@@var{errname}, int *@@var{err})
d161 2
a162 1
@@deftypefn Extension {FILE *} pex_input_file (struct pex_obj *@@var{obj}, int @@var{flags}, const char *@@var{in_name})
d179 2
a180 1
@@deftypefn Extension {FILE *} pex_input_pipe (struct pex_obj *@@var{obj}, int @@var{binary})
d224 2
a225 1
@@deftypefn Extension {FILE *} pex_read_output (struct pex_obj *@@var{obj}, int @@var{binary})
d237 2
a238 1
@@deftypefn Extension {FILE *} pex_read_err (struct pex_obj *@@var{obj}, int @@var{binary})
d251 2
a252 1
@@deftypefn Extension int pex_get_status (struct pex_obj *@@var{obj}, int @@var{count}, int *@@var{vector})
d261 2
a262 1
@@deftypefn Extension int pex_get_times (struct pex_obj *@@var{obj}, int @@var{count}, struct pex_time *@@var{vector})
d286 4
a289 1
@@deftypefn Extension {const char *} pex_one (int @@var{flags}, const char *@@var{executable}, char * const *@@var{argv}, const char *@@var{pname}, const char *@@var{outname}, const char *@@var{errname}, int *@@var{status}, int *@@var{err})
d301 4
a304 1
@@deftypefn Extension int pexecute (const char *@@var{program}, char * const *@@var{argv}, const char *@@var{this_pname}, const char *@@var{temp_base}, char **@@var{errmsg_fmt}, char **@@var{errmsg_arg}, int @@var{flags})
@


1.7
log
@        include/
        * libiberty.h (PEX_STDERR_TO_PIPE): New define.
        (PEX_BINARY_ERROR): New define.
        (pex_read_err): New function.

        libiberty/
        * pex-common.h (struct pex_obj): New fields
        stderr_pipe and read_err.
        * pex-common.c (pex_init_common): Initialize
        stderr_pipe.
        (pex_run_in_environment): Add error checking
        for PEX_STDERR_TO_PIPE.  Create a pipe
        for stderr if necessary.
        (pex_read_err): New.
        (pex_free): Close read_err.
        * pexecute.txh: Document changes.
        * functions.texi: Regenerated.
@
text
@d268 3
a270 1
Clean up and free all data associated with @@var{obj}.
@


1.6
log
@merge from gcc
@
text
@d70 1
d73 2
a74 1
The standard input (output) of the program should be read (written) in
d80 7
d228 13
@


1.5
log
@merge from gcc
@
text
@d262 1
a262 1
@@deftypefn Extension int pexecute (const char *@@var{program}, char * const *@@var{argv}, const char *@@var{this_pname}, const char *@@var{temp_base}, char **@@var{errmsg_fmt}, char **@@var{errmsg_arg}, int flags)
@


1.4
log
@merge from gcc
@
text
@d133 13
@


1.3
log
@merge from gcc
@
text
@d1 1
d133 61
@


1.3.16.1
log
@	* libiberty/configure.ac: Add cygpath for mingw hosts.
	* libiberty.configure: Rebuilt.
	* libiberty/Makefile.in: Add cygpath.
	* libiberty/cygpath.c: New.

	* include/libiberty.h (pex_write_input): New declaration.

	* libiberty/pex-common.c (pex_write_input): New function.
	* libiberty/pexecute.txh (pex_write_input): Document it.
	* libiberty/pex-common.h (struct pex_funcs): New function ptr fdopenw.
	* libiberty/pex-unix.c (pex_unix_fdopenw): New function.
	(funcs): List it as our fdopenw function.
	* libiberty/pex-win32.c (pex_win32_fdopenw): New function.
	(funcs): List it as our fdopenw function.
	* libiberty/pex-djgpp.c (funcs): Leave fdopenw null.
	* libiberty/pex-msdos (funcs): Same.
	* libiberty/functions.texi: Regenerated.

	* libiberty/pex-common.h (struct pex_obj): Doc fixes.

	* libiberty/functions.texi: Regenerate.
@
text
@a0 1
@@c -*- mode: texinfo -*-
a131 28
@@deftypefn Extension {FILE *} pex_write_input (struct pex_obj *@@var{obj}, int @@var{binary})

Return a @@code{FILE} pointer @@var{fp} for the standard input of the
first program in the pipeline; @@var{fp} is opened for writing.  You
must have passed @@code{PEX_USE_PIPES} to the @@code{pex_init} call that
returned @@var{obj}.  You must close @@var{fp} yourself with
@@code{fclose} to indicate that the pipeline's input is complete.

The file descriptor underlying @@var{fp} is marked not to be inherited
by child processes.

This call is not supported on systems which do not support pipes; it
returns with an error.  (We could implement it by writing a temporary
file, but then you would need to write all your data and close
@@var{fp} before your first call to @@code{pex_run} --- and that
wouldn't work on systems that do support pipes: the pipe would fill
up, and you would block.  So there isn't any easy way to conceal the
differences between the two types of systems.)

If you call both @@code{pex_write_input} and @@code{pex_read_output}, be
careful to avoid deadlock.  If the output pipe fills up, so that each
program in the pipeline is waiting for the next to read more data, and
you fill the input pipe by writing more data to @@var{fp}, then there
is no way to make progress: the only process that could read data from
the output pipe is you, but you are blocked on the input pipe.

@@end deftypefn

@


1.3.16.2
log
@Merge changes between binutils-csl-2_17-branchpoint and
binutils-2_17, except for the addition of generated files to CVS.
@
text
@a160 61
@@deftypefn Extension {FILE *} pex_input_file (struct pex_obj *@@var{obj}, int @@var{flags}, const char *@@var{in_name})

Return a stream for a temporary file to pass to the first program in
the pipeline as input.

The name of the input file is chosen according to the same rules
@@code{pex_run} uses to choose output file names, based on
@@var{in_name}, @@var{obj} and the @@code{PEX_SUFFIX} bit in @@var{flags}.

Don't call @@code{fclose} on the returned stream; the first call to
@@code{pex_run} closes it automatically.

If @@var{flags} includes @@code{PEX_BINARY_OUTPUT}, open the stream in
binary mode; otherwise, open it in the default mode.  Including
@@code{PEX_BINARY_OUTPUT} in @@var{flags} has no effect on Unix.
@@end deftypefn

@@deftypefn Extension {FILE *} pex_input_pipe (struct pex_obj *@@var{obj}, int @@var{binary})

Return a stream @@var{fp} for a pipe connected to the standard input of
the first program in the pipeline; @@var{fp} is opened for writing.
You must have passed @@code{PEX_USE_PIPES} to the @@code{pex_init} call
that returned @@var{obj}.

You must close @@var{fp} using @@code{fclose} yourself when you have
finished writing data to the pipeline.

The file descriptor underlying @@var{fp} is marked not to be inherited
by child processes.

On systems that do not support pipes, this function returns
@@code{NULL}, and sets @@code{errno} to @@code{EINVAL}.  If you would
like to write code that is portable to all systems the @@code{pex}
functions support, consider using @@code{pex_input_file} instead.

There are two opportunities for deadlock using
@@code{pex_input_pipe}:

@@itemize @@bullet
@@item
Most systems' pipes can buffer only a fixed amount of data; a process
that writes to a full pipe blocks.  Thus, if you write to @@file{fp}
before starting the first process, you run the risk of blocking when
there is no child process yet to read the data and allow you to
continue.  @@code{pex_input_pipe} makes no promises about the
size of the pipe's buffer, so if you need to write any data at all
before starting the first process in the pipeline, consider using
@@code{pex_input_file} instead.

@@item
Using @@code{pex_input_pipe} and @@code{pex_read_output} together
may also cause deadlock.  If the output pipe fills up, so that each
program in the pipeline is waiting for the next to read more data, and
you fill the input pipe by writing more data to @@var{fp}, then there
is no way to make progress: the only process that could read data from
the output pipe is you, but you are blocked on the input pipe.

@@end itemize

@@end deftypefn

@


1.3.16.3
log
@	include/
	* libiberty.h: Declare pex_run_in_environment.

	libiberty/
	* pex-common.c: New function pex_run_in_environment.
	* pex-common.h: Add environment parameter to exec_child.
	* pex-msdos.c: Add environment parameter to pex_msdos_exec_child.
	* pex-djgpp.c: Add environment parameter to pex_djgpp_exec_child.
	(pex_djgpp_exec_child): Pass environment to child process.
	* pex-unix.c: Add environment parameter to pex_unix_exec_child.
	(pex_unix_exec_child): Pass environment to child process.
	* pex-win32.c: Add environment parameter to pex_win32_exec_child.
	New function env_compare for comparing VAR=VALUE pairs.
	(win32_spawn): Assemble environment block and pass to CreateProcess.
	(spawn_script): Pass environment through to win32_spawn.
	(pex_win32_exec_child): Pass environment through to spawn_script and
	win32_spawn.
	* functions.texi: Regenerate.
	* pexecute.txh: Document pex_run_in_environment.
@
text
@a160 13
@@deftypefn Extension {const char *} pex_run_in_environment (struct pex_obj *@@var{obj}, int @@var{flags}, const char *@@var{executable}, char * const *@@var{argv}, char * const *@@var{env}, int @@var{env_size}, const char *@@var{outname}, const char *@@var{errname}, int *@@var{err})

Execute one program in a pipeline, permitting the environment for the
program to be specified.  Behaviour and parameters not listed below are
as for @@code{pex_run}.

@@var{env} is the environment for the child process, specified as an array of
character pointers.  Each element of the array should point to a string of the
form @@code{VAR=VALUE}, with the exception of the last element that must be
@@code{NULL}.

@@end deftypefn

@


1.3.12.1
log
@gdb/ChangeLog:
2006-03-17  Jim Blandy  <jimb@@codesourcery.com>

	Add support for 'target remote |' on MinGW.
	* ser-mingw.c (struct pipe_state): New structure.
	(make_pipe_state, free_pipe_state, cleanup_pipe_state)
	(pipe_windows_open, pipe_windows_close, pipe_windows_read)
	(pipe_windows_write, pipe_wait_handle): New functions.
	(_initialize_ser_windows): Register a "pipe" interface based on
	them.

include/ChangeLog:
2006-03-15  Jim Blandy  <jimb@@codesourcery.com>

	* libiberty.h (pex_write_input): New declaration.

libiberty/ChangeLog:
2006-03-15  Jim Blandy  <jimb@@codesourcery.com>

	* pex-common.c (pex_write_input): New function.
	* pexecute.txh (pex_write_input): Document it.
	* pex-common.h (struct pex_funcs): New function ptr fdopenw.
	* pex-unix.c (pex_unix_fdopenw): New function.
	(funcs): List it as our fdopenw function.
	* pex-win32.c (pex_win32_fdopenw): New function.
	(funcs): List it as our fdopenw function.
	* pex-djgpp.c (funcs): Leave fdopenw null.
	* pex-msdos (funcs): Same.
	* functions.texi: Regenerated.

2006-03-12  Jim Blandy  <jimb@@red-bean.com>

	* pex-common.h (struct pex_obj): Doc fixes.

2006-03-11  Jim Blandy  <jimb@@red-bean.com>

	* functions.texi: Regenerate.
@
text
@a0 1
@@c -*- mode: texinfo -*-
a131 28
@@deftypefn Extension {FILE *} pex_write_input (struct pex_obj *@@var{obj}, int @@var{binary})

Return a @@code{FILE} pointer @@var{fp} for the standard input of the
first program in the pipeline; @@var{fp} is opened for writing.  You
must have passed @@code{PEX_USE_PIPES} to the @@code{pex_init} call that
returned @@var{obj}.  You must close @@var{fp} yourself with
@@code{fclose} to indicate that the pipeline's input is complete.

The file descriptor underlying @@var{fp} is marked not to be inherited
by child processes.

This call is not supported on systems which do not support pipes; it
returns with an error.  (We could implement it by writing a temporary
file, but then you would need to write all your data and close
@@var{fp} before your first call to @@code{pex_run} --- and that
wouldn't work on systems that do support pipes: the pipe would fill
up, and you would block.  So there isn't any easy way to conceal the
differences between the two types of systems.)

If you call both @@code{pex_write_input} and @@code{pex_read_output}, be
careful to avoid deadlock.  If the output pipe fills up, so that each
program in the pipeline is waiting for the next to read more data, and
you fill the input pipe by writing more data to @@var{fp}, then there
is no way to make progress: the only process that could read data from
the output pipe is you, but you are blocked on the input pipe.

@@end deftypefn

@


1.2
log
@libiberty:
	* pex-common.c: New file.
	* pex-one.c: New file.
	* pexecute.c: New file.
	* pex-common.h: Include <stdio.h>.
	(struct pex_obj): Define.
	(struct pex_funcs): Define.
	(pex_init_common): Declare.
	* pex-unix.c: Rewrite.
	* pex-win32.c: Rewrite.
	* pex-djgpp.c: Rewrite.
	* pex-msdos.c: Rewrite.
	* testsuite/text-pexecute.c: New file.
	* pexecute.txh: Rewrite.
	* configure.ac: Check for wait3 and wait4.  Set CHECK to
	really-check rather than check-cplus-dem.
	* functions.texi: Rebuild.
	* Makefile.in: Rebuild dependencies.
	(CFILES): Add pexecute.c, pex-common.c, pex-one.c.
	(REQUIRED_OFILES): Add pexecute.o, pex-common.o, pex-one.o.
	* testsuite/Makefile.in (really-check): New target.
	(check-pexecute, test-pexecute): New targets.
	* configure: Rebuild.
include:
	* libiberty.h: Include <stdio.h>.
	(PEX_RECORD_TIMES, PEX_USE_PIPES, PEX_SAVE_TEMPS): Define.
	(PEX_LAST, PEX_SEARCH, PEX_SUFFIX, PEX_STDERR_TO_STDOUT): Define.
	(PEX_BINARY_INPUT, PEX_BINARY_OUTPUT): Define.
	(pex_init, pex_run, pex_read_output): Declare.
	(pex_get_status, pex_get_times, pex_free, pex_one): Declare.
	(struct pex_time): Define.
@
text
@d1 1
a1 1
@@deftypefn Extension struct pex_obj *pex_init (int @@var{flags}, const char *@@var{pname}, const char *@@var{tempbase})
d32 1
a32 1
@@deftypefn Extension const char *pex_run (struct pex_obj *@@var{obj}, int @@var{flags}, const char *@@var{executable}, char * const *@@var{argv}, const char *@@var{outname}, const char *@@var{errname}, int *@@var{err})
d49 2
a50 2
@@code{NULL}, to the standard output of the calling program.  This
should not be set if you want to call @@code{pex_read_output}
d74 1
a74 1
proper behavior these flags should match appropriately--a call to
d84 4
a87 1
output.  There are two cases in which no output file will be used: 1)
d89 9
a97 3
was set in the call to @@code{pex_init}, and the system supports pipes;
2) if @@code{PEX_LAST} is set in @@var{flags}, and @@var{outname} is
@@code{NULL}.  Otherwise the code will use a file to hold standard
d105 3
a107 1
First case: @@code{PEX_SUFFIX} is set in @@var{flags}.  In this case
d114 2
a115 1
Second case: @@code{PEX_SUFFIX} was not set in @@var{flags}.  In this
d121 1
d124 1
a124 1
it is @@code{NULL}, standard error is the same as the caller.
d132 1
a132 1
@@deftypefn Extension FILE * pex_read_output (struct pex_obj *@@var{obj}, int @@var{binary})
d161 2
a162 1
@@code{struct pex_time} has the following fields: @@code{user_seconds},
d175 1
a175 1
@@deftypefn Extension const char *pex_one (int @@var{flags}, const char *@@var{executable}, char * const *@@var{argv}, const char *@@var{pname}, const char *@@var{outname}, const char *@@var{errname}, int *@@var{status}, int *@@var{err})
d177 1
a177 1
An interface to @@code{pex_init} to permit the easy execution of a
d182 1
a182 1
@@code{PEX_LAST} were set.  On a successful return, *@@var{status} will
@


1.1
log
@merge from gcc
@
text
@d1 140
a140 1
@@deftypefn Extension int pexecute (const char *@@var{program}, char * const *@@var{argv}, const char *@@var{this_pname}, const char *@@var{temp_base}, char **@@var{errmsg_fmt}, char **@@var{errmsg_arg}, int flags)
d142 10
a151 1
Executes a program.
d153 1
a153 2
@@var{program} and @@var{argv} are the arguments to
@@code{execv}/@@code{execvp}.
d155 1
a155 1
@@var{this_pname} is name of the calling program (i.e., @@code{argv[0]}).
d157 1
a157 26
@@var{temp_base} is the path name, sans suffix, of a temporary file to
use if needed.  This is currently only needed for MS-DOS ports that
don't use @@code{go32} (do any still exist?).  Ports that don't need it
can pass @@code{NULL}.

(@@code{@@var{flags} & PEXECUTE_SEARCH}) is non-zero if @@env{PATH}
should be searched (??? It's not clear that GCC passes this flag
correctly).  (@@code{@@var{flags} & PEXECUTE_FIRST}) is nonzero for the
first process in chain.  (@@code{@@var{flags} & PEXECUTE_FIRST}) is
nonzero for the last process in chain.  The first/last flags could be
simplified to only mark the last of a chain of processes but that
requires the caller to always mark the last one (and not give up
early if some error occurs).  It's more robust to require the caller
to mark both ends of the chain.

The result is the pid on systems like Unix where we
@@code{fork}/@@code{exec} and on systems like WIN32 and OS/2 where we
use @@code{spawn}.  It is up to the caller to wait for the child.

The result is the @@code{WEXITSTATUS} on systems like MS-DOS where we
@@code{spawn} and wait for the child here.

Upon failure, @@var{errmsg_fmt} and @@var{errmsg_arg} are set to the
text of the error message with an optional argument (if not needed,
@@var{errmsg_arg} is set to @@code{NULL}), and @@minus{}1 is returned.
@@code{errno} is available to the caller to use.
d161 1
a161 1
@@deftypefn Extension int pwait (int @@var{pid}, int *@@var{status}, int @@var{flags})
d163 7
a169 1
Waits for a program started by @@code{pexecute} to finish.
d171 1
a171 4
@@var{pid} is the process id of the task to wait for. @@var{status} is
the `status' argument to wait. @@var{flags} is currently unused
(allows future enhancement without breaking upward compatibility).
Pass 0 for now.
d173 1
a173 2
The result is the pid of the child reaped, or -1 for failure
(@@code{errno} says why).
d175 3
a177 4
On systems that don't support waiting for a particular child,
@@var{pid} is ignored.  On systems like MS-DOS that don't really
multitask @@code{pwait} is just a mechanism to provide a consistent
interface for the caller.
d181 1
a181 1
@@undocumented pfinish
d183 1
a183 1
pfinish: finish generation of script
d185 1
a185 2
pfinish is necessary for systems like MPW where a script is generated
that runs the requested programs.
@


1.1.44.1
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@@


1.1.4.1
log
@2003-02-07  David Carlton  <carlton@@math.stanford.edu>

	* Merge with mainline; tag is carlton_dictionary-20030207-merge.
@
text
@@

