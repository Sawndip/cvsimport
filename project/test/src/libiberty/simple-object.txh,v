head	1.2;
access;
symbols
	sid-snapshot-20180601:1.2
	sid-snapshot-20180501:1.2
	sid-snapshot-20180401:1.2
	sid-snapshot-20180301:1.2
	sid-snapshot-20180201:1.2
	sid-snapshot-20180101:1.2
	sid-snapshot-20171201:1.2
	sid-snapshot-20171101:1.2
	sid-snapshot-20171001:1.2
	sid-snapshot-20170901:1.2
	sid-snapshot-20170801:1.2
	sid-snapshot-20170701:1.2
	sid-snapshot-20170601:1.2
	sid-snapshot-20170501:1.2
	sid-snapshot-20170401:1.2
	sid-snapshot-20170301:1.2
	sid-snapshot-20170201:1.2
	sid-snapshot-20170101:1.2
	sid-snapshot-20161201:1.2
	sid-snapshot-20161101:1.2
	sid-snapshot-20160901:1.2
	sid-snapshot-20160801:1.2
	sid-snapshot-20160701:1.2
	sid-snapshot-20160601:1.2
	sid-snapshot-20160501:1.2
	sid-snapshot-20160401:1.2
	sid-snapshot-20160301:1.2
	sid-snapshot-20160201:1.2
	sid-snapshot-20160101:1.2
	sid-snapshot-20151201:1.2
	sid-snapshot-20151101:1.2
	sid-snapshot-20151001:1.2
	sid-snapshot-20150901:1.2
	sid-snapshot-20150801:1.2
	sid-snapshot-20150701:1.2
	sid-snapshot-20150601:1.2
	sid-snapshot-20150501:1.2
	sid-snapshot-20150401:1.2
	sid-snapshot-20150301:1.2
	sid-snapshot-20150201:1.2
	sid-snapshot-20150101:1.2
	sid-snapshot-20141201:1.2
	sid-snapshot-20141101:1.2
	sid-snapshot-20141001:1.2
	sid-snapshot-20140901:1.2
	sid-snapshot-20140801:1.2
	sid-snapshot-20140701:1.2
	sid-snapshot-20140601:1.2
	sid-snapshot-20140501:1.2
	sid-snapshot-20140401:1.2
	sid-snapshot-20140301:1.2
	sid-snapshot-20140201:1.2
	sid-snapshot-20140101:1.2
	sid-snapshot-20131201:1.2
	sid-snapshot-20131101:1.2
	sid-snapshot-20131001:1.2
	binutils-2_24-branch:1.2.0.16
	binutils-2_24-branchpoint:1.2
	binutils-2_21_1:1.1
	sid-snapshot-20130901:1.2
	gdb_7_6_1-2013-08-30-release:1.2
	sid-snapshot-20130801:1.2
	sid-snapshot-20130701:1.2
	sid-snapshot-20130601:1.2
	sid-snapshot-20130501:1.2
	gdb_7_6-2013-04-26-release:1.2
	sid-snapshot-20130401:1.2
	binutils-2_23_2:1.2
	gdb_7_6-branch:1.2.0.14
	gdb_7_6-2013-03-12-branchpoint:1.2
	sid-snapshot-20130301:1.2
	sid-snapshot-20130201:1.2
	sid-snapshot-20130101:1.2
	sid-snapshot-20121201:1.2
	gdb_7_5_1-2012-11-29-release:1.2
	binutils-2_23_1:1.2
	sid-snapshot-20121101:1.2
	binutils-2_23:1.2
	sid-snapshot-20121001:1.2
	sid-snapshot-20120901:1.2
	gdb_7_5-2012-08-17-release:1.2
	sid-snapshot-20120801:1.2
	binutils-2_23-branch:1.2.0.12
	binutils-2_23-branchpoint:1.2
	gdb_7_5-branch:1.2.0.10
	gdb_7_5-2012-07-18-branchpoint:1.2
	sid-snapshot-20120701:1.2
	sid-snapshot-20120601:1.2
	sid-snapshot-20120501:1.2
	binutils-2_22_branch:1.2.0.8
	gdb_7_4_1-2012-04-26-release:1.2
	sid-snapshot-20120401:1.2
	sid-snapshot-20120301:1.2
	sid-snapshot-20120201:1.2
	gdb_7_4-2012-01-24-release:1.2
	sid-snapshot-20120101:1.2
	gdb_7_4-branch:1.2.0.6
	gdb_7_4-2011-12-13-branchpoint:1.2
	sid-snapshot-20111201:1.2
	binutils-2_22:1.2
	sid-snapshot-20111101:1.2
	sid-snapshot-20111001:1.2
	binutils-2_22-branch:1.2.0.4
	binutils-2_22-branchpoint:1.2
	gdb_7_3_1-2011-09-04-release:1.2
	sid-snapshot-20110901:1.2
	sid-snapshot-20110801:1.2
	gdb_7_3-2011-07-26-release:1.2
	sid-snapshot-20110701:1.2
	sid-snapshot-20110601:1.2
	sid-snapshot-20110501:1.2
	gdb_7_3-branch:1.2.0.2
	gdb_7_3-2011-04-01-branchpoint:1.2
	sid-snapshot-20110401:1.2
	sid-snapshot-20110301:1.2
	cygwin-1_7_8-release:1.2
	sid-snapshot-20110201:1.1
	sid-snapshot-20110101:1.1
	binutils-2_21:1.1
	sid-snapshot-20101201:1.1
	binutils-2_21-branch:1.1.0.2
	binutils-2_21-branchpoint:1.1
	binutils_latest_snapshot:1.2;
locks; strict;
comment	@# @;


1.2
date	2011.02.03.07.23.59;	author rwild;	state Exp;
branches;
next	1.1;

1.1
date	2010.11.02.15.20.47;	author dj;	state Exp;
branches;
next	;


desc
@@


1.2
log
@libiberty: documentation markup and order fixes.

libiberty/:
	* splay-tree.c: Escape wrapping newlines in texinfo markup
	with '@@', to fix function declaration output rendering.
	* gather-docs: Relax and improve macro name matching to actually
	match all current names and to allow input line wrapping.
	* bsearch.c, concat.c, crc32.c, fnmatch.txh, fopen_unlocked.c,
	hashtab.c, insque.c, make-relative-prefix.c, memchr.c, memcmp.c,
	memcpy.c, memmem.c, memmove.c, mempcpy.c, memset.c,
	pexecute.txh, random.c, setenv.c, setproctitle.c,
	simple-object.txh, snprintf.c, stpncpy.c, strncmp.c, strtod.c,
	strtol.c, vasprintf.c, vprintf.c, vsnprintf.c, xmemdup.c:
	Wrap long texinfo input lines.
	* functions.texi: Regenerate.
@
text
@@@c -*- mode: texinfo -*-
@@deftypefn Extension {simple_object_read *} simple_object_open_read @@
  (int @@var{descriptor}, off_t @@var{offset}, const char *{segment_name}, @@
  const char **@@var{errmsg}, int *@@var{err})

Opens an object file for reading.  Creates and returns an
@@code{simple_object_read} pointer which may be passed to other
functions to extract data from the object file.

@@var{descriptor} holds a file descriptor which permits reading.

@@var{offset} is the offset into the file; this will be @@code{0} in the
normal case, but may be a different value when reading an object file
in an archive file.

@@var{segment_name} is only used with the Mach-O file format used on
Darwin aka Mac OS X.  It is required on that platform, and means to
only look at sections within the segment with that name.  The
parameter is ignored on other systems.

If an error occurs, this functions returns @@code{NULL} and sets
@@code{*@@var{errmsg}} to an error string and sets @@code{*@@var{err}} to
an errno value or @@code{0} if there is no relevant errno.

@@end deftypefn

@@deftypefn Extension {const char *} simple_object_find_sections @@
  (simple_object_read *@@var{simple_object}, int (*@@var{pfn}) (void *@@var{data}, @@
  const char *@@var{name}, off_t @@var{offset}, off_t @@var{length}), @@
  void *@@var{data}, int *@@var{err})

This function calls @@var{pfn} for each section in @@var{simple_object}.
It calls @@var{pfn} with the section name, the offset within the file
of the section contents, and the length of the section contents.  The
offset within the file is relative to the offset passed to
@@code{simple_object_open_read}.  The @@var{data} argument to this
function is passed along to @@var{pfn}.

If @@var{pfn} returns @@code{0}, the loop over the sections stops and
@@code{simple_object_find_sections} returns.  If @@var{pfn} returns some
other value, the loop continues.

On success @@code{simple_object_find_sections} returns.  On error it
returns an error string, and sets @@code{*@@var{err}} to an errno value
or @@code{0} if there is no relevant errno.

@@end deftypefn

@@deftypefn Extension {int} simple_object_find_section @@
  (simple_object_read *@@var{simple_object} off_t *@@var{offset}, @@
  off_t *@@var{length}, const char **@@var{errmsg}, int *@@var{err})

Look for the section @@var{name} in @@var{simple_object}.  This returns
information for the first section with that name.

If found, return 1 and set @@code{*@@var{offset}} to the offset in the
file of the section contents and set @@code{*@@var{length}} to the
length of the section contents.  The value in @@code{*@@var{offset}}
will be relative to the offset passed to
@@code{simple_object_open_read}.

If the section is not found, and no error occurs,
@@code{simple_object_find_section} returns @@code{0} and set
@@code{*@@var{errmsg}} to @@code{NULL}.

If an error occurs, @@code{simple_object_find_section} returns
@@code{0}, sets @@code{*@@var{errmsg}} to an error message, and sets
@@code{*@@var{err}} to an errno value or @@code{0} if there is no
relevant errno.

@@end deftypefn

@@deftypefn Extension {void} simple_object_release_read @@
  (simple_object_read *@@var{simple_object})

Release all resources associated with @@var{simple_object}.  This does
not close the file descriptor.

@@end deftypefn

@@deftypefn Extension {simple_object_attributes *} simple_object_fetch_attributes @@
  (simple_object_read *@@var{simple_object}, const char **@@var{errmsg}, int *@@var{err})

Fetch the attributes of @@var{simple_object}.  The attributes are
internal information such as the format of the object file, or the
architecture it was compiled for.  This information will persist until
@@code{simple_object_attributes_release} is called, even if
@@var{simple_object} itself is released.

On error this returns @@code{NULL}, sets @@code{*@@var{errmsg}} to an
error message, and sets @@code{*@@var{err}} to an errno value or
@@code{0} if there is no relevant errno.

@@end deftypefn

@@deftypefn Extension {const char *} simple_object_attributes_compare @@
  (simple_object_attributes *@@var{attrs1}, simple_object_attributes *@@var{attrs2}, @@
   int *@@var{err})

Compare @@var{attrs1} and @@var{attrs2}.  If they could be linked
together without error, return @@code{NULL}.  Otherwise, return an
error message and set @@code{*@@var{err}} to an errno value or @@code{0}
if there is no relevant errno.

@@end deftypefn

@@deftypefn Extension {void} simple_object_release_attributes @@
  (simple_object_attributes *@@var{attrs})

Release all resources associated with @@var{attrs}.

@@end deftypefn

@@deftypefn Extension {simple_object_write *} simple_object_start_write @@
  (simple_object_attributes @@var{attrs}, const char *@@var{segment_name}, @@
  const char **@@var{errmsg}, int *@@var{err})

Start creating a new object file using the object file format
described in @@var{attrs}.  You must fetch attribute information from
an existing object file before you can create a new one.  There is
currently no support for creating an object file de novo.

@@var{segment_name} is only used with Mach-O as found on Darwin aka Mac
OS X.  The parameter is required on that target.  It means that all
sections are created within the named segment.  It is ignored for
other object file formats.

On error @@code{simple_object_start_write} returns @@code{NULL}, sets
@@code{*@@var{ERRMSG}} to an error message, and sets @@code{*@@var{err}}
to an errno value or @@code{0} if there is no relevant errno.

@@end deftypefn

@@deftypefn Extension {simple_object_write_section *} simple_object_write_create_section @@
  (simple_object_write *@@var{simple_object}, const char *@@var{name}, @@
  unsigned int @@var{align}, const char **@@var{errmsg}, int *@@var{err})

Add a section to @@var{simple_object}.  @@var{name} is the name of the
new section.  @@var{align} is the required alignment expressed as the
number of required low-order 0 bits (e.g., 2 for alignment to a 32-bit
boundary).

The section is created as containing data, readable, not writable, not
executable, not loaded at runtime.  The section is not written to the
file until @@code{simple_object_write_to_file} is called.

On error this returns @@code{NULL}, sets @@code{*@@var{errmsg}} to an
error message, and sets @@code{*@@var{err}} to an errno value or
@@code{0} if there is no relevant errno.

@@end deftypefn

@@deftypefn Extension {const char *} simple_object_write_add_data @@
  (simple_object_write *@@var{simple_object}, @@
  simple_object_write_section *@@var{section}, const void *@@var{buffer}, @@
  size_t @@var{size}, int @@var{copy}, int *@@var{err})

Add data @@var{buffer}/@@var{size} to @@var{section} in
@@var{simple_object}.  If @@var{copy} is non-zero, the data will be
copied into memory if necessary.  If @@var{copy} is zero, @@var{buffer}
must persist until @@code{simple_object_write_to_file} is called.  is
released.

On success this returns @@code{NULL}.  On error this returns an error
message, and sets @@code{*@@var{err}} to an errno value or 0 if there is
no relevant erro.

@@end deftypefn

@@deftypefn Extension {const char *} simple_object_write_to_file @@
  (simple_object_write *@@var{simple_object}, int @@var{descriptor}, int *@@var{err})

Write the complete object file to @@var{descriptor}, an open file
descriptor.  This writes out all the data accumulated by calls to
@@code{simple_object_write_create_section} and
@@var{simple_object_write_add_data}.

This returns @@code{NULL} on success.  On error this returns an error
message and sets @@code{*@@var{err}} to an errno value or @@code{0} if
there is no relevant errno.

@@end deftypefn

@@deftypefn Extension {void} simple_object_release_write @@
  (simple_object_write *@@var{simple_object})

Release all resources associated with @@var{simple_object}.

@@end deftypefn
@


1.1
log
@merge from gcc
@
text
@d2 3
a4 1
@@deftypefn Extension {simple_object_read *} simple_object_open_read (int @@var{descriptor}, off_t @@var{offset}, const char *{segment_name}, const char **@@var{errmsg}, int *@@var{err})
d27 4
a30 1
@@deftypefn Extension {const char *} simple_object_find_sections (simple_object_read *@@var{simple_object}, int (*@@var{pfn}) (void *@@var{data}, const char *@@var{name}, off_t @@var{offset}, off_t @@var{length}), void *@@var{data}, int *@@var{err})
d49 3
a51 1
@@deftypefn Extension {int} simple_object_find_section (simple_object_read *@@var{simple_object} off_t *@@var{offset}, off_t *@@var{length}, const char **@@var{errmsg}, int *@@var{err})           
d73 2
a74 1
@@deftypefn Extension {void} simple_object_release_read (simple_object_read *@@var{simple_object})
d81 2
a82 1
@@deftypefn Extension {simple_object_attributes *} simple_object_fetch_attributes (simple_object_read *@@var{simple_object}, const char **@@var{errmsg}, int *@@var{err})
d96 3
a98 1
@@deftypefn Extension {const char *} simple_object_attributes_compare (simple_object_attributes *@@var{attrs1}, simple_object_attributes *@@var{attrs2}, int *@@var{err})
d107 2
a108 1
@@deftypefn Extension {void} simple_object_release_attributes (simple_object_attributes *@@var{attrs})
d114 3
a116 1
@@deftypefn Extension {simple_object_write *} simple_object_start_write (simple_object_attributes @@var{attrs}, const char *@@var{segment_name}, const char **@@var{errmsg}, int *@@var{err})
d134 3
a136 1
@@deftypefn Extension {simple_object_write_section *} simple_object_write_create_section (simple_object_write *@@var{simple_object}, const char *@@var{name}, unsigned int @@var{align}, const char **@@var{errmsg}, int *@@var{err})
d153 4
a156 1
@@deftypefn Extension {const char *} simple_object_write_add_data (simple_object_write *@@var{simple_object}, simple_object_write_section *@@var{section}, const void *@@var{buffer}, size_t @@var{size}, int @@var{copy}, int *@@var{err})
d170 2
a171 1
@@deftypefn Extension {const char *} simple_object_write_to_file (simple_object_write *@@var{simple_object}, int @@var{descriptor}, int *@@var{err})
d184 2
a185 1
@@deftypefn Extension {void} simple_object_release_write (simple_object_write *@@var{simple_object})
@

