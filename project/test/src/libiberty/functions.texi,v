head	1.48;
access;
symbols
	sid-snapshot-20180601:1.48
	sid-snapshot-20180501:1.48
	sid-snapshot-20180401:1.48
	sid-snapshot-20180301:1.48
	sid-snapshot-20180201:1.48
	sid-snapshot-20180101:1.48
	sid-snapshot-20171201:1.48
	sid-snapshot-20171101:1.48
	sid-snapshot-20171001:1.48
	sid-snapshot-20170901:1.48
	sid-snapshot-20170801:1.48
	sid-snapshot-20170701:1.48
	sid-snapshot-20170601:1.48
	sid-snapshot-20170501:1.48
	sid-snapshot-20170401:1.48
	sid-snapshot-20170301:1.48
	sid-snapshot-20170201:1.48
	sid-snapshot-20170101:1.48
	sid-snapshot-20161201:1.48
	sid-snapshot-20161101:1.48
	sid-snapshot-20160901:1.48
	sid-snapshot-20160801:1.48
	sid-snapshot-20160701:1.48
	sid-snapshot-20160601:1.48
	sid-snapshot-20160501:1.48
	sid-snapshot-20160401:1.48
	sid-snapshot-20160301:1.48
	sid-snapshot-20160201:1.48
	sid-snapshot-20160101:1.48
	sid-snapshot-20151201:1.48
	sid-snapshot-20151101:1.48
	sid-snapshot-20151001:1.48
	sid-snapshot-20150901:1.48
	sid-snapshot-20150801:1.48
	sid-snapshot-20150701:1.48
	sid-snapshot-20150601:1.48
	sid-snapshot-20150501:1.48
	sid-snapshot-20150401:1.48
	sid-snapshot-20150301:1.48
	sid-snapshot-20150201:1.48
	sid-snapshot-20150101:1.47
	sid-snapshot-20141201:1.46
	sid-snapshot-20141101:1.45
	sid-snapshot-20141001:1.43
	sid-snapshot-20140901:1.43
	sid-snapshot-20140801:1.43
	sid-snapshot-20140701:1.43
	sid-snapshot-20140601:1.43
	sid-snapshot-20140501:1.43
	sid-snapshot-20140401:1.43
	sid-snapshot-20140301:1.43
	sid-snapshot-20140201:1.43
	sid-snapshot-20140101:1.43
	sid-snapshot-20131201:1.43
	sid-snapshot-20131101:1.43
	sid-snapshot-20131001:1.43
	binutils-2_24-branch:1.43.0.4
	binutils-2_24-branchpoint:1.43
	binutils-2_21_1:1.40
	sid-snapshot-20130901:1.43
	gdb_7_6_1-2013-08-30-release:1.43
	sid-snapshot-20130801:1.43
	sid-snapshot-20130701:1.43
	sid-snapshot-20130601:1.43
	sid-snapshot-20130501:1.43
	gdb_7_6-2013-04-26-release:1.43
	sid-snapshot-20130401:1.43
	binutils-2_23_2:1.42
	gdb_7_6-branch:1.43.0.2
	gdb_7_6-2013-03-12-branchpoint:1.43
	sid-snapshot-20130301:1.43
	sid-snapshot-20130201:1.43
	sid-snapshot-20130101:1.43
	sid-snapshot-20121201:1.43
	gdb_7_5_1-2012-11-29-release:1.42
	binutils-2_23_1:1.42
	sid-snapshot-20121101:1.43
	binutils-2_23:1.42
	sid-snapshot-20121001:1.42
	sid-snapshot-20120901:1.42
	gdb_7_5-2012-08-17-release:1.42
	sid-snapshot-20120801:1.42
	binutils-2_23-branch:1.42.0.12
	binutils-2_23-branchpoint:1.42
	gdb_7_5-branch:1.42.0.10
	gdb_7_5-2012-07-18-branchpoint:1.42
	sid-snapshot-20120701:1.42
	sid-snapshot-20120601:1.42
	sid-snapshot-20120501:1.42
	binutils-2_22_branch:1.42.0.8
	gdb_7_4_1-2012-04-26-release:1.42
	sid-snapshot-20120401:1.42
	sid-snapshot-20120301:1.42
	sid-snapshot-20120201:1.42
	gdb_7_4-2012-01-24-release:1.42
	sid-snapshot-20120101:1.42
	gdb_7_4-branch:1.42.0.6
	gdb_7_4-2011-12-13-branchpoint:1.42
	sid-snapshot-20111201:1.42
	binutils-2_22:1.42
	sid-snapshot-20111101:1.42
	sid-snapshot-20111001:1.42
	binutils-2_22-branch:1.42.0.4
	binutils-2_22-branchpoint:1.42
	gdb_7_3_1-2011-09-04-release:1.42
	sid-snapshot-20110901:1.42
	sid-snapshot-20110801:1.42
	gdb_7_3-2011-07-26-release:1.42
	sid-snapshot-20110701:1.42
	sid-snapshot-20110601:1.42
	sid-snapshot-20110501:1.42
	gdb_7_3-branch:1.42.0.2
	gdb_7_3-2011-04-01-branchpoint:1.42
	sid-snapshot-20110401:1.42
	sid-snapshot-20110301:1.42
	cygwin-1_7_8-release:1.41
	sid-snapshot-20110201:1.40
	sid-snapshot-20110101:1.40
	binutils-2_21:1.40
	sid-snapshot-20101201:1.40
	binutils-2_21-branch:1.40.0.2
	binutils-2_21-branchpoint:1.40
	sid-snapshot-20101101:1.39
	sid-snapshot-20101001:1.37
	binutils-2_20_1:1.35
	gdb_7_2-2010-09-02-release:1.37
	sid-snapshot-20100901:1.37
	cygwin-1_7_7-release:1.37
	sid-snapshot-20100801:1.37
	gdb_7_2-branch:1.37.0.2
	gdb_7_2-2010-07-07-branchpoint:1.37
	sid-snapshot-20100701:1.37
	sid-snapshot-20100601:1.36
	sid-snapshot-20100501:1.36
	sid-snapshot-20100401:1.36
	gdb_7_1-2010-03-18-release:1.36
	sid-snapshot-20100301:1.36
	gdb_7_1-branch:1.36.0.2
	gdb_7_1-2010-02-18-branchpoint:1.36
	sid-snapshot-20100201:1.36
	sid-snapshot-20100101:1.36
	gdb_7_0_1-2009-12-22-release:1.35
	sid-snapshot-20091201:1.36
	sid-snapshot-20091101:1.35
	binutils-2_20:1.35
	gdb_7_0-2009-10-06-release:1.35
	sid-snapshot-20091001:1.35
	gdb_7_0-branch:1.35.0.6
	gdb_7_0-2009-09-16-branchpoint:1.35
	arc-sim-20090309:1.32
	binutils-arc-20081103-branch:1.33.0.12
	binutils-arc-20081103-branchpoint:1.33
	binutils-2_20-branch:1.35.0.4
	binutils-2_20-branchpoint:1.35
	sid-snapshot-20090901:1.35
	sid-snapshot-20090801:1.35
	msnyder-checkpoint-072509-branch:1.35.0.2
	msnyder-checkpoint-072509-branchpoint:1.35
	sid-snapshot-20090701:1.34
	dje-cgen-play1-branch:1.34.0.2
	dje-cgen-play1-branchpoint:1.34
	sid-snapshot-20090601:1.34
	sid-snapshot-20090501:1.34
	sid-snapshot-20090401:1.34
	arc-20081103-branch:1.33.0.10
	arc-20081103-branchpoint:1.33
	arc-insight_6_8-branch:1.32.0.14
	arc-insight_6_8-branchpoint:1.32
	insight_6_8-branch:1.32.0.12
	insight_6_8-branchpoint:1.32
	sid-snapshot-20090301:1.33
	binutils-2_19_1:1.33
	sid-snapshot-20090201:1.33
	sid-snapshot-20090101:1.33
	reverse-20081226-branch:1.33.0.8
	reverse-20081226-branchpoint:1.33
	sid-snapshot-20081201:1.33
	multiprocess-20081120-branch:1.33.0.6
	multiprocess-20081120-branchpoint:1.33
	sid-snapshot-20081101:1.33
	binutils-2_19:1.33
	sid-snapshot-20081001:1.33
	reverse-20080930-branch:1.33.0.4
	reverse-20080930-branchpoint:1.33
	binutils-2_19-branch:1.33.0.2
	binutils-2_19-branchpoint:1.33
	sid-snapshot-20080901:1.33
	sid-snapshot-20080801:1.33
	reverse-20080717-branch:1.32.0.10
	reverse-20080717-branchpoint:1.32
	sid-snapshot-20080701:1.32
	msnyder-reverse-20080609-branch:1.32.0.8
	msnyder-reverse-20080609-branchpoint:1.32
	drow-reverse-20070409-branch:1.31.0.2
	drow-reverse-20070409-branchpoint:1.31
	sid-snapshot-20080601:1.32
	sid-snapshot-20080501:1.32
	sid-snapshot-20080403:1.32
	sid-snapshot-20080401:1.32
	gdb_6_8-2008-03-27-release:1.32
	sid-snapshot-20080301:1.32
	gdb_6_8-branch:1.32.0.6
	gdb_6_8-2008-02-26-branchpoint:1.32
	sid-snapshot-20080201:1.32
	sid-snapshot-20080101:1.32
	sid-snapshot-20071201:1.32
	sid-snapshot-20071101:1.32
	gdb_6_7_1-2007-10-29-release:1.32
	gdb_6_7-2007-10-10-release:1.32
	sid-snapshot-20071001:1.32
	gdb_6_7-branch:1.32.0.4
	gdb_6_7-2007-09-07-branchpoint:1.32
	binutils-2_18:1.32
	binutils-2_18-branch:1.32.0.2
	binutils-2_18-branchpoint:1.32
	insight_6_6-20070208-release:1.27
	binutils-csl-coldfire-4_1-32:1.25.2.3
	binutils-csl-sourcerygxx-4_1-32:1.25.2.3
	gdb_6_6-2006-12-18-release:1.27
	binutils-csl-innovasic-fido-3_4_4-33:1.25.2.3
	binutils-csl-sourcerygxx-3_4_4-32:1.16
	binutils-csl-coldfire-4_1-30:1.25.2.3
	binutils-csl-sourcerygxx-4_1-30:1.25.2.3
	binutils-csl-coldfire-4_1-28:1.25.2.3
	binutils-csl-sourcerygxx-4_1-29:1.25.2.3
	binutils-csl-sourcerygxx-4_1-28:1.25.2.3
	gdb_6_6-branch:1.27.0.4
	gdb_6_6-2006-11-15-branchpoint:1.27
	binutils-csl-arm-2006q3-27:1.25.2.3
	binutils-csl-sourcerygxx-4_1-27:1.25.2.3
	binutils-csl-arm-2006q3-26:1.25.2.3
	binutils-csl-sourcerygxx-4_1-26:1.25.2.3
	binutils-csl-sourcerygxx-4_1-25:1.25.2.3
	binutils-csl-sourcerygxx-4_1-24:1.25.2.3
	binutils-csl-sourcerygxx-4_1-23:1.25.2.3
	insight_6_5-20061003-release:1.26
	gdb-csl-symbian-6_4_50_20060226-12:1.24.10.1
	binutils-csl-sourcerygxx-4_1-21:1.25.2.3
	binutils-csl-arm-2006q3-21:1.25.2.3
	binutils-csl-sourcerygxx-4_1-22:1.25.2.3
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.25.2.3
	binutils-csl-sourcerygxx-4_1-20:1.25.2.2
	binutils-csl-arm-2006q3-19:1.25.2.2
	binutils-csl-sourcerygxx-4_1-19:1.25.2.2
	binutils-csl-sourcerygxx-4_1-18:1.25.2.2
	binutils-csl-renesas-4_1-9:1.25.2.2
	gdb-csl-sourcerygxx-3_4_4-25:1.24
	binutils-csl-sourcerygxx-3_4_4-25:1.16
	nickrob-async-20060828-mergepoint:1.27
	gdb-csl-symbian-6_4_50_20060226-11:1.24.10.1
	binutils-csl-renesas-4_1-8:1.25.2.1
	binutils-csl-renesas-4_1-7:1.25.2.1
	binutils-csl-renesas-4_1-6:1.25.2.1
	gdb-csl-sourcerygxx-4_1-17:1.24.10.1
	binutils-csl-sourcerygxx-4_1-17:1.25.2.1
	gdb-csl-20060226-branch-local-2:1.24.10.1
	cr-0x5f1:1.27.0.2
	gdb-csl-sourcerygxx-4_1-14:1.24.10.1
	binutils-csl-sourcerygxx-4_1-14:1.25.2.1
	binutils-csl-sourcerygxx-4_1-15:1.25.2.1
	gdb-csl-sourcerygxx-4_1-13:1.24.10.1
	binutils-csl-sourcerygxx-4_1-13:1.25.2.1
	binutils-2_17:1.26
	gdb-csl-sourcerygxx-4_1-12:1.24.10.1
	binutils-csl-sourcerygxx-4_1-12:1.25.2.1
	gdb-csl-sourcerygxx-3_4_4-21:1.24.10.1
	binutils-csl-sourcerygxx-3_4_4-21:1.25.2.1
	gdb_6_5-20060621-release:1.26
	binutils-csl-wrs-linux-3_4_4-24:1.16
	binutils-csl-wrs-linux-3_4_4-23:1.16
	gdb-csl-sourcerygxx-4_1-9:1.24.10.1
	binutils-csl-sourcerygxx-4_1-9:1.25.2.1
	gdb-csl-sourcerygxx-4_1-8:1.24.10.1
	binutils-csl-sourcerygxx-4_1-8:1.25.2.1
	gdb-csl-sourcerygxx-4_1-7:1.24.10.1
	binutils-csl-sourcerygxx-4_1-7:1.25.2.1
	gdb-csl-arm-2006q1-6:1.24.10.1
	binutils-csl-arm-2006q1-6:1.25.2.1
	gdb-csl-sourcerygxx-4_1-6:1.24.10.1
	binutils-csl-sourcerygxx-4_1-6:1.25.2.1
	binutils-csl-wrs-linux-3_4_4-22:1.16
	gdb-csl-symbian-6_4_50_20060226-10:1.24.10.1
	gdb-csl-symbian-6_4_50_20060226-9:1.24.10.1
	gdb-csl-symbian-6_4_50_20060226-8:1.24.10.1
	gdb-csl-coldfire-4_1-11:1.24.10.1
	binutils-csl-coldfire-4_1-11:1.25.2.1
	gdb-csl-sourcerygxx-3_4_4-19:1.24.10.1
	binutils-csl-sourcerygxx-3_4_4-19:1.25.2.1
	gdb-csl-coldfire-4_1-10:1.24.10.1
	gdb_6_5-branch:1.26.0.10
	gdb_6_5-2006-05-14-branchpoint:1.26
	binutils-csl-coldfire-4_1-10:1.25.2.1
	gdb-csl-sourcerygxx-4_1-5:1.24.10.1
	binutils-csl-sourcerygxx-4_1-5:1.25.2.1
	nickrob-async-20060513-branch:1.26.0.8
	nickrob-async-20060513-branchpoint:1.26
	gdb-csl-sourcerygxx-4_1-4:1.24.10.1
	binutils-csl-sourcerygxx-4_1-4:1.25.2.1
	msnyder-reverse-20060502-branch:1.26.0.6
	msnyder-reverse-20060502-branchpoint:1.26
	binutils-csl-wrs-linux-3_4_4-21:1.16
	gdb-csl-morpho-4_1-4:1.24.10.1
	binutils-csl-morpho-4_1-4:1.25.2.1
	gdb-csl-sourcerygxx-3_4_4-17:1.24.10.1
	binutils-csl-sourcerygxx-3_4_4-17:1.25.2.1
	binutils-csl-wrs-linux-3_4_4-20:1.16
	readline_5_1-import-branch:1.26.0.4
	readline_5_1-import-branchpoint:1.26
	gdb-csl-20060226-branch-merge-to-csl-symbian-1:1.24.10.1
	binutils-2_17-branch:1.26.0.2
	binutils-2_17-branchpoint:1.26
	gdb-csl-symbian-20060226-branch:1.24.10.1.0.2
	gdb-csl-symbian-20060226-branchpoint:1.24.10.1
	gdb-csl-20060226-branch-merge-to-csl-local-1:1.24.10.1
	msnyder-reverse-20060331-branch:1.25.0.4
	msnyder-reverse-20060331-branchpoint:1.25
	binutils-csl-2_17-branch:1.25.0.2
	binutils-csl-2_17-branchpoint:1.25
	gdb-csl-available-20060303-branch:1.24.0.12
	gdb-csl-available-20060303-branchpoint:1.24
	gdb-csl-20060226-branch:1.24.0.10
	gdb-csl-20060226-branchpoint:1.24
	gdb_6_4-20051202-release:1.24
	msnyder-fork-checkpoint-branch:1.24.0.8
	msnyder-fork-checkpoint-branchpoint:1.24
	gdb-csl-gxxpro-6_3-branch:1.24.0.6
	gdb-csl-gxxpro-6_3-branchpoint:1.24
	gdb_6_4-branch:1.24.0.4
	gdb_6_4-2005-11-01-branchpoint:1.24
	gdb-csl-arm-20051020-branch:1.24.0.2
	gdb-csl-arm-20051020-branchpoint:1.24
	binutils-csl-gxxpro-3_4-branch:1.16.0.6
	binutils-csl-gxxpro-3_4-branchpoint:1.16
	binutils-2_16_1:1.16
	msnyder-tracepoint-checkpoint-branch:1.23.0.2
	msnyder-tracepoint-checkpoint-branchpoint:1.23
	gdb-csl-arm-20050325-2005-q1b:1.17
	binutils-csl-arm-2005q1b:1.16
	binutils-2_16:1.16
	gdb-csl-arm-20050325-2005-q1a:1.17
	binutils-csl-arm-2005q1a:1.16
	csl-arm-20050325-branch:1.17.0.2
	csl-arm-20050325-branchpoint:1.17
	binutils-csl-arm-2005q1-branch:1.16.0.4
	binutils-csl-arm-2005q1-branchpoint:1.16
	binutils-2_16-branch:1.16.0.2
	binutils-2_16-branchpoint:1.16
	csl-arm-2004-q3d:1.15
	gdb_6_3-20041109-release:1.15
	gdb_6_3-branch:1.15.0.26
	gdb_6_3-20041019-branchpoint:1.15
	csl-arm-2004-q3:1.15
	drow_intercu-merge-20040921:1.15
	drow_intercu-merge-20040915:1.15
	jimb-gdb_6_2-e500-branch:1.15.0.28
	jimb-gdb_6_2-e500-branchpoint:1.15
	gdb_6_2-20040730-release:1.15
	gdb_6_2-branch:1.15.0.24
	gdb_6_2-2004-07-10-gmt-branchpoint:1.15
	gdb_6_1_1-20040616-release:1.15
	binutils-2_15:1.15
	binutils-2_15-branchpoint:1.15
	csl-arm-2004-q1a:1.15
	csl-arm-2004-q1:1.15
	gdb_6_1-2004-04-05-release:1.15
	drow_intercu-merge-20040402:1.15
	drow_intercu-merge-20040327:1.15
	ezannoni_pie-20040323-branch:1.15.0.22
	ezannoni_pie-20040323-branchpoint:1.15
	cagney_tramp-20040321-mergepoint:1.15
	cagney_tramp-20040309-branch:1.15.0.20
	cagney_tramp-20040309-branchpoint:1.15
	gdb_6_1-branch:1.15.0.18
	gdb_6_1-2004-03-01-gmt-branchpoint:1.15
	drow_intercu-20040221-branch:1.15.0.16
	drow_intercu-20040221-branchpoint:1.15
	binutils-2_15-branch:1.15.0.14
	cagney_bfdfile-20040213-branch:1.15.0.12
	cagney_bfdfile-20040213-branchpoint:1.15
	drow-cplus-merge-20040208:1.15
	carlton_dictionary-20040126-merge:1.15
	cagney_bigcore-20040122-branch:1.15.0.10
	cagney_bigcore-20040122-branchpoint:1.15
	drow-cplus-merge-20040113:1.15
	csl-arm-2003-q4:1.15
	drow-cplus-merge-20031224:1.15
	drow-cplus-merge-20031220:1.15
	carlton_dictionary-20031215-merge:1.15
	drow-cplus-merge-20031214:1.15
	carlton-dictionary-20031111-merge:1.15
	gdb_6_0-2003-10-04-release:1.15
	kettenis_sparc-20030918-branch:1.15.0.8
	kettenis_sparc-20030918-branchpoint:1.15
	carlton_dictionary-20030917-merge:1.15
	ezannoni_pie-20030916-branchpoint:1.15
	ezannoni_pie-20030916-branch:1.15.0.6
	cagney_x86i386-20030821-branch:1.15.0.4
	cagney_x86i386-20030821-branchpoint:1.15
	carlton_dictionary-20030805-merge:1.15
	carlton_dictionary-20030627-merge:1.15
	gdb_6_0-branch:1.15.0.2
	gdb_6_0-2003-06-23-branchpoint:1.15
	jimb-ppc64-linux-20030613-branch:1.14.0.4
	jimb-ppc64-linux-20030613-branchpoint:1.14
	binutils-2_14:1.12
	cagney_convert-20030606-branch:1.14.0.2
	cagney_convert-20030606-branchpoint:1.14
	cagney_writestrings-20030508-branch:1.12.0.8
	cagney_writestrings-20030508-branchpoint:1.12
	jimb-ppc64-linux-20030528-branch:1.13.0.4
	jimb-ppc64-linux-20030528-branchpoint:1.13
	carlton_dictionary-20030523-merge:1.13
	cagney_fileio-20030521-branch:1.13.0.2
	cagney_fileio-20030521-branchpoint:1.13
	kettenis_i386newframe-20030517-mergepoint:1.13
	jimb-ppc64-linux-20030509-branch:1.12.0.6
	jimb-ppc64-linux-20030509-branchpoint:1.12
	kettenis_i386newframe-20030504-mergepoint:1.12
	carlton_dictionary-20030430-merge:1.12
	binutils-2_14-branch:1.12.0.4
	binutils-2_14-branchpoint:1.12
	kettenis_i386newframe-20030419-branch:1.12.0.2
	kettenis_i386newframe-20030419-branchpoint:1.12
	carlton_dictionary-20030416-merge:1.11
	cagney_frameaddr-20030409-mergepoint:1.10
	kettenis_i386newframe-20030406-branch:1.10.0.14
	kettenis_i386newframe-20030406-branchpoint:1.10
	cagney_frameaddr-20030403-branchpoint:1.10
	cagney_frameaddr-20030403-branch:1.10.0.12
	cagney_framebase-20030330-mergepoint:1.10
	cagney_framebase-20030326-branch:1.10.0.10
	cagney_framebase-20030326-branchpoint:1.10
	cagney_lazyid-20030317-branch:1.10.0.8
	cagney_lazyid-20030317-branchpoint:1.10
	kettenis-i386newframe-20030316-mergepoint:1.10
	offbyone-20030313-branch:1.10.0.6
	offbyone-20030313-branchpoint:1.10
	kettenis-i386newframe-20030308-branch:1.10.0.4
	kettenis-i386newframe-20030308-branchpoint:1.10
	carlton_dictionary-20030305-merge:1.10
	cagney_offbyone-20030303-branch:1.10.0.2
	cagney_offbyone-20030303-branchpoint:1.10
	w32api-2_2:1.9
	mingw-runtime-2_4:1.9
	carlton_dictionary-20030207-merge:1.9
	interps-20030202-branch:1.9.0.2
	interps-20030202-branchpoint:1.9
	cagney-unwind-20030108-branch:1.8.0.2
	cagney-unwind-20030108-branchpoint:1.8
	binutils-2_13_2_1:1.7
	binutils-2_13_2:1.7
	carlton_dictionary-20021223-merge:1.8
	gdb_5_3-2002-12-12-release:1.7
	carlton_dictionary-20021115-merge:1.7
	binutils-2_13_1:1.7
	kseitz_interps-20021105-merge:1.7
	kseitz_interps-20021103-merge:1.7
	drow-cplus-merge-20021020:1.7
	drow-cplus-merge-20021025:1.7
	carlton_dictionary-20021025-merge:1.7
	carlton_dictionary-20021011-merge:1.7
	drow-cplus-branch:1.7.0.20
	drow-cplus-branchpoint:1.7
	kseitz_interps-20020930-merge:1.7
	carlton_dictionary-20020927-merge:1.7
	carlton_dictionary-branch:1.7.0.18
	carlton_dictionary-20020920-branchpoint:1.7
	sid-20020905-branchpoint:1.7
	sid-20020905-branch:1.7.0.16
	gdb_5_3-branch:1.7.0.14
	gdb_5_3-2002-09-04-branchpoint:1.7
	kseitz_interps-20020829-merge:1.7
	cagney_sysregs-20020825-branch:1.7.0.12
	cagney_sysregs-20020825-branchpoint:1.7
	readline_4_3-import-branch:1.7.0.10
	readline_4_3-import-branchpoint:1.7
	binutils-2_13:1.7
	gdb_5_2_1-2002-07-23-release:1.6
	binutils-2_13-branchpoint:1.7
	binutils-2_13-branch:1.7.0.8
	kseitz_interps-20020528-branch:1.7.0.6
	kseitz_interps-20020528-branchpoint:1.7
	cagney_regbuf-20020515-branch:1.7.0.4
	cagney_regbuf-20020515-branchpoint:1.7
	binutils-2_12_1:1.6
	jimb-macro-020506-branch:1.7.0.2
	jimb-macro-020506-branchpoint:1.7
	gdb_5_2-2002-04-29-release:1.6
	binutils-2_12:1.6
	gdb_5_2-branch:1.6.0.4
	gdb_5_2-2002-03-03-branchpoint:1.6
	binutils-2_12-branch:1.6.0.2
	binutils-2_12-branchpoint:1.6
	cygnus_cvs_20020108_pre:1.6
	binutils_latest_snapshot:1.43;
locks; strict;
comment	@# @;


1.48
date	2015.01.14.22.03.22;	author dj;	state Exp;
branches;
next	1.47;

1.47
date	2014.12.15.06.56.45;	author dj;	state Exp;
branches;
next	1.46;

1.46
date	2014.11.05.18.23.27;	author dj;	state Exp;
branches;
next	1.45;

1.45
date	2014.10.28.23.25.26;	author dj;	state Exp;
branches;
next	1.44;

1.44
date	2014.10.15.21.13.02;	author dj;	state Exp;
branches;
next	1.43;

1.43
date	2012.10.10.03.11.33;	author dj;	state Exp;
branches;
next	1.42;

1.42
date	2011.02.28.18.30.14;	author ktietz;	state Exp;
branches;
next	1.41;

1.41
date	2011.02.03.07.23.59;	author rwild;	state Exp;
branches;
next	1.40;

1.40
date	2010.11.02.15.20.47;	author dj;	state Exp;
branches;
next	1.39;

1.39
date	2010.10.30.00.01.15;	author dj;	state Exp;
branches;
next	1.38;

1.38
date	2010.10.06.23.01.30;	author dj;	state Exp;
branches;
next	1.37;

1.37
date	2010.06.10.18.30.23;	author dj;	state Exp;
branches;
next	1.36;

1.36
date	2009.11.25.04.54.32;	author bje;	state Exp;
branches;
next	1.35;

1.35
date	2009.07.25.00.01.58;	author dj;	state Exp;
branches;
next	1.34;

1.34
date	2009.03.27.23.07.30;	author dj;	state Exp;
branches;
next	1.33;

1.33
date	2008.07.31.19.06.35;	author dj;	state Exp;
branches;
next	1.32;

1.32
date	2007.07.23.18.01.25;	author dj;	state Exp;
branches;
next	1.31;

1.31
date	2007.03.29.21.03.48;	author dj;	state Exp;
branches;
next	1.30;

1.30
date	2007.01.31.20.25.23;	author dj;	state Exp;
branches;
next	1.29;

1.29
date	2007.01.31.18.49.40;	author vprus;	state Exp;
branches;
next	1.28;

1.28
date	2007.01.30.23.13.04;	author bje;	state Exp;
branches;
next	1.27;

1.27
date	2006.06.01.14.57.50;	author dj;	state Exp;
branches;
next	1.26;

1.26
date	2006.04.12.18.42.01;	author dj;	state Exp;
branches;
next	1.25;

1.25
date	2006.03.13.20.00.44;	author dj;	state Exp;
branches
	1.25.2.1;
next	1.24;

1.24
date	2005.06.21.00.28.25;	author geoffk;	state Exp;
branches
	1.24.10.1;
next	1.23;

1.23
date	2005.05.15.18.31.15;	author dj;	state Exp;
branches;
next	1.22;

1.22
date	2005.04.26.01.02.02;	author dj;	state Exp;
branches;
next	1.21;

1.21
date	2005.04.16.21.49.14;	author dj;	state Exp;
branches;
next	1.20;

1.20
date	2005.04.11.19.32.04;	author dj;	state Exp;
branches;
next	1.19;

1.19
date	2005.03.31.17.03.35;	author dj;	state Exp;
branches;
next	1.18;

1.18
date	2005.03.29.02.15.21;	author ian;	state Exp;
branches;
next	1.17;

1.17
date	2005.03.25.04.57.08;	author dj;	state Exp;
branches;
next	1.16;

1.16
date	2005.01.11.21.01.13;	author dj;	state Exp;
branches;
next	1.15;

1.15
date	2003.06.22.16.35.53;	author dj;	state Exp;
branches;
next	1.14;

1.14
date	2003.06.03.18.17.28;	author nickc;	state Exp;
branches;
next	1.13;

1.13
date	2003.05.15.19.08.25;	author jimb;	state Exp;
branches;
next	1.12;

1.12
date	2003.04.16.23.09.21;	author dj;	state Exp;
branches
	1.12.2.1;
next	1.11;

1.11
date	2003.04.16.03.51.54;	author dj;	state Exp;
branches;
next	1.10;

1.10
date	2003.02.20.22.13.32;	author drow;	state Exp;
branches;
next	1.9;

1.9
date	2003.01.24.21.31.35;	author dj;	state Exp;
branches;
next	1.8;

1.8
date	2002.11.22.21.02.14;	author dj;	state Exp;
branches;
next	1.7;

1.7
date	2002.03.28.04.06.37;	author dj;	state Exp;
branches
	1.7.18.1
	1.7.20.1;
next	1.6;

1.6
date	2001.10.17.22.35.28;	author dj;	state Exp;
branches;
next	1.5;

1.5
date	2001.10.16.02.55.31;	author dj;	state Exp;
branches;
next	1.4;

1.4
date	2001.10.10.00.05.13;	author dj;	state Exp;
branches;
next	1.3;

1.3
date	2001.10.07.22.42.23;	author dj;	state Exp;
branches;
next	1.2;

1.2
date	2001.09.27.20.27.58;	author dj;	state Exp;
branches;
next	1.1;

1.1
date	2001.09.26.18.45.49;	author dj;	state Exp;
branches;
next	;

1.25.2.1
date	2006.03.31.01.17.06;	author mmitchel;	state Exp;
branches;
next	1.25.2.2;

1.25.2.2
date	2006.08.22.15.08.45;	author jsm28;	state Exp;
branches;
next	1.25.2.3;

1.25.2.3
date	2006.09.28.20.41.08;	author shinwell;	state Exp;
branches;
next	;

1.24.10.1
date	2006.03.17.20.36.14;	author jimb;	state Exp;
branches;
next	;

1.12.2.1
date	2003.05.18.09.44.40;	author kettenis;	state Exp;
branches;
next	;

1.7.18.1
date	2002.12.23.19.39.26;	author carlton;	state Exp;
branches;
next	1.7.18.2;

1.7.18.2
date	2003.02.07.19.18.02;	author carlton;	state Exp;
branches;
next	1.7.18.3;

1.7.18.3
date	2003.03.06.00.56.38;	author carlton;	state Exp;
branches;
next	1.7.18.4;

1.7.18.4
date	2003.04.16.19.57.04;	author carlton;	state Exp;
branches;
next	1.7.18.5;

1.7.18.5
date	2003.05.01.00.46.57;	author carlton;	state Exp;
branches;
next	1.7.18.6;

1.7.18.6
date	2003.05.23.18.40.55;	author carlton;	state Exp;
branches;
next	1.7.18.7;

1.7.18.7
date	2003.06.27.21.50.23;	author carlton;	state Exp;
branches;
next	;

1.7.20.1
date	2003.12.14.20.28.03;	author drow;	state Exp;
branches;
next	;


desc
@@


1.48
log
@merge from gcc
@
text
@@@c Automatically generated from *.c and others (the comments before
@@c each entry tell you which file and where in that file).  DO NOT EDIT!
@@c Edit the *.c files, configure with --enable-maintainer-mode,
@@c run 'make stamp-functions' and gather-docs will build a new copy.

@@c alloca.c:26
@@deftypefn Replacement void* alloca (size_t @@var{size})

This function allocates memory which will be automatically reclaimed
after the procedure exits.  The @@libib{} implementation does not free
the memory immediately but will do so eventually during subsequent
calls to this function.  Memory is allocated using @@code{xmalloc} under
normal circumstances.

The header file @@file{alloca-conf.h} can be used in conjunction with the
GNU Autoconf test @@code{AC_FUNC_ALLOCA} to test for and properly make
available this function.  The @@code{AC_FUNC_ALLOCA} test requires that
client code use a block of preprocessor code to be safe (see the Autoconf
manual for more); this header incorporates that logic and more, including
the possibility of a GCC built-in function.

@@end deftypefn

@@c asprintf.c:32
@@deftypefn Extension int asprintf (char **@@var{resptr}, const char *@@var{format}, ...)

Like @@code{sprintf}, but instead of passing a pointer to a buffer, you
pass a pointer to a pointer.  This function will compute the size of
the buffer needed, allocate memory with @@code{malloc}, and store a
pointer to the allocated memory in @@code{*@@var{resptr}}.  The value
returned is the same as @@code{sprintf} would return.  If memory could
not be allocated, minus one is returned and @@code{NULL} is stored in
@@code{*@@var{resptr}}.

@@end deftypefn

@@c atexit.c:6
@@deftypefn Supplemental int atexit (void (*@@var{f})())

Causes function @@var{f} to be called at exit.  Returns 0.

@@end deftypefn

@@c basename.c:6
@@deftypefn Supplemental char* basename (const char *@@var{name})

Returns a pointer to the last component of pathname @@var{name}.
Behavior is undefined if the pathname ends in a directory separator.

@@end deftypefn

@@c bcmp.c:6
@@deftypefn Supplemental int bcmp (char *@@var{x}, char *@@var{y}, int @@var{count})

Compares the first @@var{count} bytes of two areas of memory.  Returns
zero if they are the same, nonzero otherwise.  Returns zero if
@@var{count} is zero.  A nonzero result only indicates a difference,
it does not indicate any sorting order (say, by having a positive
result mean @@var{x} sorts before @@var{y}).

@@end deftypefn

@@c bcopy.c:3
@@deftypefn Supplemental void bcopy (char *@@var{in}, char *@@var{out}, int @@var{length})

Copies @@var{length} bytes from memory region @@var{in} to region
@@var{out}.  The use of @@code{bcopy} is deprecated in new programs.

@@end deftypefn

@@c bsearch.c:33
@@deftypefn Supplemental void* bsearch (const void *@@var{key}, @@
  const void *@@var{base}, size_t @@var{nmemb}, size_t @@var{size}, @@
  int (*@@var{compar})(const void *, const void *))

Performs a search over an array of @@var{nmemb} elements pointed to by
@@var{base} for a member that matches the object pointed to by @@var{key}.
The size of each member is specified by @@var{size}.  The array contents
should be sorted in ascending order according to the @@var{compar}
comparison function.  This routine should take two arguments pointing to
the @@var{key} and to an array member, in that order, and should return an
integer less than, equal to, or greater than zero if the @@var{key} object
is respectively less than, matching, or greater than the array member.

@@end deftypefn

@@c argv.c:135
@@deftypefn Extension char** buildargv (char *@@var{sp})

Given a pointer to a string, parse the string extracting fields
separated by whitespace and optionally enclosed within either single
or double quotes (which are stripped off), and build a vector of
pointers to copies of the string for each field.  The input string
remains unchanged.  The last element of the vector is followed by a
@@code{NULL} element.

All of the memory for the pointer array and copies of the string
is obtained from @@code{xmalloc}.  All of the memory can be returned to the
system with the single function call @@code{freeargv}, which takes the
returned result of @@code{buildargv}, as it's argument.

Returns a pointer to the argument vector if successful.  Returns
@@code{NULL} if @@var{sp} is @@code{NULL} or if there is insufficient
memory to complete building the argument vector.

If the input is a null string (as opposed to a @@code{NULL} pointer),
then buildarg returns an argument vector that has one arg, a null
string.

@@end deftypefn

@@c bzero.c:6
@@deftypefn Supplemental void bzero (char *@@var{mem}, int @@var{count})

Zeros @@var{count} bytes starting at @@var{mem}.  Use of this function
is deprecated in favor of @@code{memset}.

@@end deftypefn

@@c calloc.c:6
@@deftypefn Supplemental void* calloc (size_t @@var{nelem}, size_t @@var{elsize})

Uses @@code{malloc} to allocate storage for @@var{nelem} objects of
@@var{elsize} bytes each, then zeros the memory.

@@end deftypefn

@@c filename_cmp.c:201
@@deftypefn Extension int canonical_filename_eq (const char *@@var{a}, const char *@@var{b})

Return non-zero if file names @@var{a} and @@var{b} are equivalent.
This function compares the canonical versions of the filenames as returned by
@@code{lrealpath()}, so that so that different file names pointing to the same
underlying file are treated as being identical.

@@end deftypefn

@@c choose-temp.c:45
@@deftypefn Extension char* choose_temp_base (void)

Return a prefix for temporary file names or @@code{NULL} if unable to
find one.  The current directory is chosen if all else fails so the
program is exited if a temporary directory can't be found (@@code{mktemp}
fails).  The buffer for the result is obtained with @@code{xmalloc}.

This function is provided for backwards compatibility only.  Its use is
not recommended.

@@end deftypefn

@@c make-temp-file.c:96
@@deftypefn Replacement const char* choose_tmpdir ()

Returns a pointer to a directory path suitable for creating temporary
files in.

@@end deftypefn

@@c clock.c:27
@@deftypefn Supplemental long clock (void)

Returns an approximation of the CPU time used by the process as a
@@code{clock_t}; divide this number by @@samp{CLOCKS_PER_SEC} to get the
number of seconds used.

@@end deftypefn

@@c concat.c:24
@@deftypefn Extension char* concat (const char *@@var{s1}, const char *@@var{s2}, @@
  @@dots{}, @@code{NULL})

Concatenate zero or more of strings and return the result in freshly
@@code{xmalloc}ed memory.  The argument list is terminated by the first
@@code{NULL} pointer encountered.  Pointers to empty strings are ignored.

@@end deftypefn

@@c argv.c:470
@@deftypefn Extension int countargv (char **@@var{argv})

Return the number of elements in @@var{argv}.
Returns zero if @@var{argv} is NULL.

@@end deftypefn

@@c crc32.c:141
@@deftypefn Extension {unsigned int} crc32 (const unsigned char *@@var{buf}, @@
  int @@var{len}, unsigned int @@var{init})

Compute the 32-bit CRC of @@var{buf} which has length @@var{len}.  The
starting value is @@var{init}; this may be used to compute the CRC of
data split across multiple buffers by passing the return value of each
call as the @@var{init} parameter of the next.

This is intended to match the CRC used by the @@command{gdb} remote
protocol for the @@samp{qCRC} command.  In order to get the same
results as gdb for a block of data, you must pass the first CRC
parameter as @@code{0xffffffff}.

This CRC can be specified as:

  Width  : 32
  Poly   : 0x04c11db7
  Init   : parameter, typically 0xffffffff
  RefIn  : false
  RefOut : false
  XorOut : 0

This differs from the "standard" CRC-32 algorithm in that the values
are not reflected, and there is no final XOR value.  These differences
make it easy to compose the values of multiple blocks.

@@end deftypefn

@@c argv.c:52
@@deftypefn Extension char** dupargv (char **@@var{vector})

Duplicate an argument vector.  Simply scans through @@var{vector},
duplicating each argument until the terminating @@code{NULL} is found.
Returns a pointer to the argument vector if successful.  Returns
@@code{NULL} if there is insufficient memory to complete building the
argument vector.

@@end deftypefn

@@c strerror.c:567
@@deftypefn Extension int errno_max (void)

Returns the maximum @@code{errno} value for which a corresponding
symbolic name or message is available.  Note that in the case where we
use the @@code{sys_errlist} supplied by the system, it is possible for
there to be more symbolic names than messages, or vice versa.  In
fact, the manual page for @@code{perror(3C)} explicitly warns that one
should check the size of the table (@@code{sys_nerr}) before indexing
it, since new error codes may be added to the system before they are
added to the table.  Thus @@code{sys_nerr} might be smaller than value
implied by the largest @@code{errno} value defined in @@code{<errno.h>}.

We return the maximum value that can be used to obtain a meaningful
symbolic name or message.

@@end deftypefn

@@c argv.c:341
@@deftypefn Extension void expandargv (int *@@var{argcp}, char ***@@var{argvp})

The @@var{argcp} and @@code{argvp} arguments are pointers to the usual
@@code{argc} and @@code{argv} arguments to @@code{main}.  This function
looks for arguments that begin with the character @@samp{@@@@}.  Any such
arguments are interpreted as ``response files''.  The contents of the
response file are interpreted as additional command line options.  In
particular, the file is separated into whitespace-separated strings;
each such string is taken as a command-line option.  The new options
are inserted in place of the option naming the response file, and
@@code{*argcp} and @@code{*argvp} will be updated.  If the value of
@@code{*argvp} is modified by this function, then the new value has
been dynamically allocated and can be deallocated by the caller with
@@code{freeargv}.  However, most callers will simply call
@@code{expandargv} near the beginning of @@code{main} and allow the
operating system to free the memory when the program exits.

@@end deftypefn

@@c fdmatch.c:23
@@deftypefn Extension int fdmatch (int @@var{fd1}, int @@var{fd2})

Check to see if two open file descriptors refer to the same file.
This is useful, for example, when we have an open file descriptor for
an unnamed file, and the name of a file that we believe to correspond
to that fd.  This can happen when we are exec'd with an already open
file (@@code{stdout} for example) or from the SVR4 @@file{/proc} calls
that return open file descriptors for mapped address spaces.  All we
have to do is open the file by name and check the two file descriptors
for a match, which is done by comparing major and minor device numbers
and inode numbers.

@@end deftypefn

@@c fopen_unlocked.c:49
@@deftypefn Extension {FILE *} fdopen_unlocked (int @@var{fildes}, @@
  const char * @@var{mode})

Opens and returns a @@code{FILE} pointer via @@code{fdopen}.  If the
operating system supports it, ensure that the stream is setup to avoid
any multi-threaded locking.  Otherwise return the @@code{FILE} pointer
unchanged.

@@end deftypefn

@@c ffs.c:3
@@deftypefn Supplemental int ffs (int @@var{valu})

Find the first (least significant) bit set in @@var{valu}.  Bits are
numbered from right to left, starting with bit 1 (corresponding to the
value 1).  If @@var{valu} is zero, zero is returned.

@@end deftypefn

@@c filename_cmp.c:37
@@deftypefn Extension int filename_cmp (const char *@@var{s1}, const char *@@var{s2})

Return zero if the two file names @@var{s1} and @@var{s2} are equivalent.
If not equivalent, the returned value is similar to what @@code{strcmp}
would return.  In other words, it returns a negative value if @@var{s1}
is less than @@var{s2}, or a positive value if @@var{s2} is greater than
@@var{s2}.

This function does not normalize file names.  As a result, this function
will treat filenames that are spelled differently as different even in
the case when the two filenames point to the same underlying file.
However, it does handle the fact that on DOS-like file systems, forward
and backward slashes are equal.

@@end deftypefn

@@c filename_cmp.c:183
@@deftypefn Extension int filename_eq (const void *@@var{s1}, const void *@@var{s2})

Return non-zero if file names @@var{s1} and @@var{s2} are equivalent.
This function is for use with hashtab.c hash tables.

@@end deftypefn

@@c filename_cmp.c:152
@@deftypefn Extension hashval_t filename_hash (const void *@@var{s})

Return the hash value for file name @@var{s} that will be compared
using filename_cmp.
This function is for use with hashtab.c hash tables.

@@end deftypefn

@@c filename_cmp.c:94
@@deftypefn Extension int filename_ncmp (const char *@@var{s1}, const char *@@var{s2}, size_t @@var{n})

Return zero if the two file names @@var{s1} and @@var{s2} are equivalent
in range @@var{n}.
If not equivalent, the returned value is similar to what @@code{strncmp}
would return.  In other words, it returns a negative value if @@var{s1}
is less than @@var{s2}, or a positive value if @@var{s2} is greater than
@@var{s2}.

This function does not normalize file names.  As a result, this function
will treat filenames that are spelled differently as different even in
the case when the two filenames point to the same underlying file.
However, it does handle the fact that on DOS-like file systems, forward
and backward slashes are equal.

@@end deftypefn

@@c fnmatch.txh:1
@@deftypefn Replacement int fnmatch (const char *@@var{pattern}, @@
  const char *@@var{string}, int @@var{flags})

Matches @@var{string} against @@var{pattern}, returning zero if it
matches, @@code{FNM_NOMATCH} if not.  @@var{pattern} may contain the
wildcards @@code{?} to match any one character, @@code{*} to match any
zero or more characters, or a set of alternate characters in square
brackets, like @@samp{[a-gt8]}, which match one character (@@code{a}
through @@code{g}, or @@code{t}, or @@code{8}, in this example) if that one
character is in the set.  A set may be inverted (i.e., match anything
except what's in the set) by giving @@code{^} or @@code{!} as the first
character in the set.  To include those characters in the set, list them
as anything other than the first character of the set.  To include a
dash in the set, list it last in the set.  A backslash character makes
the following character not special, so for example you could match
against a literal asterisk with @@samp{\*}.  To match a literal
backslash, use @@samp{\\}.

@@code{flags} controls various aspects of the matching process, and is a
boolean OR of zero or more of the following values (defined in
@@code{<fnmatch.h>}):

@@table @@code

@@item FNM_PATHNAME
@@itemx FNM_FILE_NAME
@@var{string} is assumed to be a path name.  No wildcard will ever match
@@code{/}.

@@item FNM_NOESCAPE
Do not interpret backslashes as quoting the following special character.

@@item FNM_PERIOD
A leading period (at the beginning of @@var{string}, or if
@@code{FNM_PATHNAME} after a slash) is not matched by @@code{*} or
@@code{?} but must be matched explicitly.

@@item FNM_LEADING_DIR
Means that @@var{string} also matches @@var{pattern} if some initial part
of @@var{string} matches, and is followed by @@code{/} and zero or more
characters.  For example, @@samp{foo*} would match either @@samp{foobar}
or @@samp{foobar/grill}.

@@item FNM_CASEFOLD
Ignores case when performing the comparison.

@@end table

@@end deftypefn

@@c fopen_unlocked.c:39
@@deftypefn Extension {FILE *} fopen_unlocked (const char *@@var{path}, @@
  const char * @@var{mode})

Opens and returns a @@code{FILE} pointer via @@code{fopen}.  If the
operating system supports it, ensure that the stream is setup to avoid
any multi-threaded locking.  Otherwise return the @@code{FILE} pointer
unchanged.

@@end deftypefn

@@c argv.c:90
@@deftypefn Extension void freeargv (char **@@var{vector})

Free an argument vector that was built using @@code{buildargv}.  Simply
scans through @@var{vector}, freeing the memory for each argument until
the terminating @@code{NULL} is found, and then frees @@var{vector}
itself.

@@end deftypefn

@@c fopen_unlocked.c:59
@@deftypefn Extension {FILE *} freopen_unlocked (const char * @@var{path}, @@
  const char * @@var{mode}, FILE * @@var{stream})

Opens and returns a @@code{FILE} pointer via @@code{freopen}.  If the
operating system supports it, ensure that the stream is setup to avoid
any multi-threaded locking.  Otherwise return the @@code{FILE} pointer
unchanged.

@@end deftypefn

@@c getruntime.c:82
@@deftypefn Replacement long get_run_time (void)

Returns the time used so far, in microseconds.  If possible, this is
the time used by this process, else it is the elapsed time since the
process started.

@@end deftypefn

@@c getcwd.c:6
@@deftypefn Supplemental char* getcwd (char *@@var{pathname}, int @@var{len})

Copy the absolute pathname for the current working directory into
@@var{pathname}, which is assumed to point to a buffer of at least
@@var{len} bytes, and return a pointer to the buffer.  If the current
directory's path doesn't fit in @@var{len} characters, the result is
@@code{NULL} and @@code{errno} is set.  If @@var{pathname} is a null pointer,
@@code{getcwd} will obtain @@var{len} bytes of space using
@@code{malloc}.

@@end deftypefn

@@c getpagesize.c:5
@@deftypefn Supplemental int getpagesize (void)

Returns the number of bytes in a page of memory.  This is the
granularity of many of the system memory management routines.  No
guarantee is made as to whether or not it is the same as the basic
memory management hardware page size.

@@end deftypefn

@@c getpwd.c:5
@@deftypefn Supplemental char* getpwd (void)

Returns the current working directory.  This implementation caches the
result on the assumption that the process will not call @@code{chdir}
between calls to @@code{getpwd}.

@@end deftypefn

@@c gettimeofday.c:12
@@deftypefn Supplemental int gettimeofday (struct timeval *@@var{tp}, void *@@var{tz})

Writes the current time to @@var{tp}.  This implementation requires
that @@var{tz} be NULL.  Returns 0 on success, -1 on failure.

@@end deftypefn

@@c hex.c:33
@@deftypefn Extension void hex_init (void)

Initializes the array mapping the current character set to
corresponding hex values.  This function must be called before any
call to @@code{hex_p} or @@code{hex_value}.  If you fail to call it, a
default ASCII-based table will normally be used on ASCII systems.

@@end deftypefn

@@c hex.c:42
@@deftypefn Extension int hex_p (int @@var{c})

Evaluates to non-zero if the given character is a valid hex character,
or zero if it is not.  Note that the value you pass will be cast to
@@code{unsigned char} within the macro.

@@end deftypefn

@@c hex.c:50
@@deftypefn Extension {unsigned int} hex_value (int @@var{c})

Returns the numeric equivalent of the given character when interpreted
as a hexadecimal digit.  The result is undefined if you pass an
invalid hex digit.  Note that the value you pass will be cast to
@@code{unsigned char} within the macro.

The @@code{hex_value} macro returns @@code{unsigned int}, rather than
signed @@code{int}, to make it easier to use in parsing addresses from
hex dump files: a signed @@code{int} would be sign-extended when
converted to a wider unsigned type --- like @@code{bfd_vma}, on some
systems.

@@end deftypefn

@@c safe-ctype.c:25
@@defvr Extension HOST_CHARSET
This macro indicates the basic character set and encoding used by the
host: more precisely, the encoding used for character constants in
preprocessor @@samp{#if} statements (the C "execution character set").
It is defined by @@file{safe-ctype.h}, and will be an integer constant
with one of the following values:

@@ftable @@code
@@item HOST_CHARSET_UNKNOWN
The host character set is unknown - that is, not one of the next two
possibilities.

@@item HOST_CHARSET_ASCII
The host character set is ASCII.

@@item HOST_CHARSET_EBCDIC
The host character set is some variant of EBCDIC.  (Only one of the
nineteen EBCDIC varying characters is tested; exercise caution.)
@@end ftable
@@end defvr

@@c hashtab.c:328
@@deftypefn Supplemental htab_t htab_create_typed_alloc (size_t @@var{size}, @@
htab_hash @@var{hash_f}, htab_eq @@var{eq_f}, htab_del @@var{del_f}, @@
htab_alloc @@var{alloc_tab_f}, htab_alloc @@var{alloc_f}, @@
htab_free @@var{free_f})

This function creates a hash table that uses two different allocators
@@var{alloc_tab_f} and @@var{alloc_f} to use for allocating the table itself
and its entries respectively.  This is useful when variables of different
types need to be allocated with different allocators.

The created hash table is slightly larger than @@var{size} and it is
initially empty (all the hash table entries are @@code{HTAB_EMPTY_ENTRY}).
The function returns the created hash table, or @@code{NULL} if memory
allocation fails.

@@end deftypefn

@@c index.c:5
@@deftypefn Supplemental char* index (char *@@var{s}, int @@var{c})

Returns a pointer to the first occurrence of the character @@var{c} in
the string @@var{s}, or @@code{NULL} if not found.  The use of @@code{index} is
deprecated in new programs in favor of @@code{strchr}.

@@end deftypefn

@@c insque.c:6
@@deftypefn Supplemental void insque (struct qelem *@@var{elem}, @@
  struct qelem *@@var{pred})
@@deftypefnx Supplemental void remque (struct qelem *@@var{elem})

Routines to manipulate queues built from doubly linked lists.  The
@@code{insque} routine inserts @@var{elem} in the queue immediately
after @@var{pred}.  The @@code{remque} routine removes @@var{elem} from
its containing queue.  These routines expect to be passed pointers to
structures which have as their first members a forward pointer and a
back pointer, like this prototype (although no prototype is provided):

@@example
struct qelem @@{
  struct qelem *q_forw;
  struct qelem *q_back;
  char q_data[];
@@};
@@end example

@@end deftypefn

@@c safe-ctype.c:46
@@deffn  Extension ISALPHA  (@@var{c})
@@deffnx Extension ISALNUM  (@@var{c})
@@deffnx Extension ISBLANK  (@@var{c})
@@deffnx Extension ISCNTRL  (@@var{c})
@@deffnx Extension ISDIGIT  (@@var{c})
@@deffnx Extension ISGRAPH  (@@var{c})
@@deffnx Extension ISLOWER  (@@var{c})
@@deffnx Extension ISPRINT  (@@var{c})
@@deffnx Extension ISPUNCT  (@@var{c})
@@deffnx Extension ISSPACE  (@@var{c})
@@deffnx Extension ISUPPER  (@@var{c})
@@deffnx Extension ISXDIGIT (@@var{c})

These twelve macros are defined by @@file{safe-ctype.h}.  Each has the
same meaning as the corresponding macro (with name in lowercase)
defined by the standard header @@file{ctype.h}.  For example,
@@code{ISALPHA} returns true for alphabetic characters and false for
others.  However, there are two differences between these macros and
those provided by @@file{ctype.h}:

@@itemize @@bullet
@@item These macros are guaranteed to have well-defined behavior for all 
values representable by @@code{signed char} and @@code{unsigned char}, and
for @@code{EOF}.

@@item These macros ignore the current locale; they are true for these
fixed sets of characters:
@@multitable {@@code{XDIGIT}} {yada yada yada yada yada yada yada yada}
@@item @@code{ALPHA}  @@tab @@kbd{A-Za-z}
@@item @@code{ALNUM}  @@tab @@kbd{A-Za-z0-9}
@@item @@code{BLANK}  @@tab @@kbd{space tab}
@@item @@code{CNTRL}  @@tab @@code{!PRINT}
@@item @@code{DIGIT}  @@tab @@kbd{0-9}
@@item @@code{GRAPH}  @@tab @@code{ALNUM || PUNCT}
@@item @@code{LOWER}  @@tab @@kbd{a-z}
@@item @@code{PRINT}  @@tab @@code{GRAPH ||} @@kbd{space}
@@item @@code{PUNCT}  @@tab @@kbd{`~!@@@@#$%^&*()_-=+[@@{]@@}\|;:'",<.>/?}
@@item @@code{SPACE}  @@tab @@kbd{space tab \n \r \f \v}
@@item @@code{UPPER}  @@tab @@kbd{A-Z}
@@item @@code{XDIGIT} @@tab @@kbd{0-9A-Fa-f}
@@end multitable

Note that, if the host character set is ASCII or a superset thereof,
all these macros will return false for all values of @@code{char} outside
the range of 7-bit ASCII.  In particular, both ISPRINT and ISCNTRL return
false for characters with numeric values from 128 to 255.
@@end itemize
@@end deffn

@@c safe-ctype.c:95
@@deffn  Extension ISIDNUM         (@@var{c})
@@deffnx Extension ISIDST          (@@var{c})
@@deffnx Extension IS_VSPACE       (@@var{c})
@@deffnx Extension IS_NVSPACE      (@@var{c})
@@deffnx Extension IS_SPACE_OR_NUL (@@var{c})
@@deffnx Extension IS_ISOBASIC     (@@var{c})
These six macros are defined by @@file{safe-ctype.h} and provide
additional character classes which are useful when doing lexical
analysis of C or similar languages.  They are true for the following
sets of characters:

@@multitable {@@code{SPACE_OR_NUL}} {yada yada yada yada yada yada yada yada}
@@item @@code{IDNUM}        @@tab @@kbd{A-Za-z0-9_}
@@item @@code{IDST}         @@tab @@kbd{A-Za-z_}
@@item @@code{VSPACE}       @@tab @@kbd{\r \n}
@@item @@code{NVSPACE}      @@tab @@kbd{space tab \f \v \0}
@@item @@code{SPACE_OR_NUL} @@tab @@code{VSPACE || NVSPACE}
@@item @@code{ISOBASIC}     @@tab @@code{VSPACE || NVSPACE || PRINT}
@@end multitable
@@end deffn

@@c lbasename.c:23
@@deftypefn Replacement {const char*} lbasename (const char *@@var{name})

Given a pointer to a string containing a typical pathname
(@@samp{/usr/src/cmd/ls/ls.c} for example), returns a pointer to the
last component of the pathname (@@samp{ls.c} in this case).  The
returned pointer is guaranteed to lie within the original
string.  This latter fact is not true of many vendor C
libraries, which return special strings or modify the passed
strings for particular input.

In particular, the empty string returns the same empty string,
and a path ending in @@code{/} returns the empty string after it.

@@end deftypefn

@@c lrealpath.c:25
@@deftypefn Replacement {const char*} lrealpath (const char *@@var{name})

Given a pointer to a string containing a pathname, returns a canonical
version of the filename.  Symlinks will be resolved, and ``.'' and ``..''
components will be simplified.  The returned value will be allocated using
@@code{malloc}, or @@code{NULL} will be returned on a memory allocation error.

@@end deftypefn

@@c make-relative-prefix.c:24
@@deftypefn Extension {const char*} make_relative_prefix (const char *@@var{progname}, @@
  const char *@@var{bin_prefix}, const char *@@var{prefix})

Given three paths @@var{progname}, @@var{bin_prefix}, @@var{prefix},
return the path that is in the same position relative to
@@var{progname}'s directory as @@var{prefix} is relative to
@@var{bin_prefix}.  That is, a string starting with the directory
portion of @@var{progname}, followed by a relative pathname of the
difference between @@var{bin_prefix} and @@var{prefix}.

If @@var{progname} does not contain any directory separators,
@@code{make_relative_prefix} will search @@env{PATH} to find a program
named @@var{progname}.  Also, if @@var{progname} is a symbolic link,
the symbolic link will be resolved.

For example, if @@var{bin_prefix} is @@code{/alpha/beta/gamma/gcc/delta},
@@var{prefix} is @@code{/alpha/beta/gamma/omega/}, and @@var{progname} is
@@code{/red/green/blue/gcc}, then this function will return
@@code{/red/green/blue/../../omega/}.

The return value is normally allocated via @@code{malloc}.  If no
relative prefix can be found, return @@code{NULL}.

@@end deftypefn

@@c make-temp-file.c:174
@@deftypefn Replacement char* make_temp_file (const char *@@var{suffix})

Return a temporary file name (as a string) or @@code{NULL} if unable to
create one.  @@var{suffix} is a suffix to append to the file name.  The
string is @@code{malloc}ed, and the temporary file has been created.

@@end deftypefn

@@c memchr.c:3
@@deftypefn Supplemental void* memchr (const void *@@var{s}, int @@var{c}, @@
  size_t @@var{n})

This function searches memory starting at @@code{*@@var{s}} for the
character @@var{c}.  The search only ends with the first occurrence of
@@var{c}, or after @@var{length} characters; in particular, a null
character does not terminate the search.  If the character @@var{c} is
found within @@var{length} characters of @@code{*@@var{s}}, a pointer
to the character is returned.  If @@var{c} is not found, then @@code{NULL} is
returned.

@@end deftypefn

@@c memcmp.c:6
@@deftypefn Supplemental int memcmp (const void *@@var{x}, const void *@@var{y}, @@
  size_t @@var{count})

Compares the first @@var{count} bytes of two areas of memory.  Returns
zero if they are the same, a value less than zero if @@var{x} is
lexically less than @@var{y}, or a value greater than zero if @@var{x}
is lexically greater than @@var{y}.  Note that lexical order is determined
as if comparing unsigned char arrays.

@@end deftypefn

@@c memcpy.c:6
@@deftypefn Supplemental void* memcpy (void *@@var{out}, const void *@@var{in}, @@
  size_t @@var{length})

Copies @@var{length} bytes from memory region @@var{in} to region
@@var{out}.  Returns a pointer to @@var{out}.

@@end deftypefn

@@c memmem.c:20
@@deftypefn Supplemental void* memmem (const void *@@var{haystack}, @@
  size_t @@var{haystack_len} const void *@@var{needle}, size_t @@var{needle_len})

Returns a pointer to the first occurrence of @@var{needle} (length
@@var{needle_len}) in @@var{haystack} (length @@var{haystack_len}).
Returns @@code{NULL} if not found.

@@end deftypefn

@@c memmove.c:6
@@deftypefn Supplemental void* memmove (void *@@var{from}, const void *@@var{to}, @@
  size_t @@var{count})

Copies @@var{count} bytes from memory area @@var{from} to memory area
@@var{to}, returning a pointer to @@var{to}.

@@end deftypefn

@@c mempcpy.c:23
@@deftypefn Supplemental void* mempcpy (void *@@var{out}, const void *@@var{in}, @@
  size_t @@var{length})

Copies @@var{length} bytes from memory region @@var{in} to region
@@var{out}.  Returns a pointer to @@var{out} + @@var{length}.

@@end deftypefn

@@c memset.c:6
@@deftypefn Supplemental void* memset (void *@@var{s}, int @@var{c}, @@
  size_t @@var{count})

Sets the first @@var{count} bytes of @@var{s} to the constant byte
@@var{c}, returning a pointer to @@var{s}.

@@end deftypefn

@@c mkstemps.c:58
@@deftypefn Replacement int mkstemps (char *@@var{pattern}, int @@var{suffix_len})

Generate a unique temporary file name from @@var{pattern}.
@@var{pattern} has the form:

@@example
   @@var{path}/ccXXXXXX@@var{suffix}
@@end example

@@var{suffix_len} tells us how long @@var{suffix} is (it can be zero
length).  The last six characters of @@var{pattern} before @@var{suffix}
must be @@samp{XXXXXX}; they are replaced with a string that makes the
filename unique.  Returns a file descriptor open on the file for
reading and writing.

@@end deftypefn

@@c pexecute.txh:278
@@deftypefn Extension void pex_free (struct pex_obj @@var{obj})

Clean up and free all data associated with @@var{obj}.  If you have not
yet called @@code{pex_get_times} or @@code{pex_get_status}, this will
try to kill the subprocesses.

@@end deftypefn

@@c pexecute.txh:251
@@deftypefn Extension int pex_get_status (struct pex_obj *@@var{obj}, @@
  int @@var{count}, int *@@var{vector})

Returns the exit status of all programs run using @@var{obj}.
@@var{count} is the number of results expected.  The results will be
placed into @@var{vector}.  The results are in the order of the calls
to @@code{pex_run}.  Returns 0 on error, 1 on success.

@@end deftypefn

@@c pexecute.txh:261
@@deftypefn Extension int pex_get_times (struct pex_obj *@@var{obj}, @@
  int @@var{count}, struct pex_time *@@var{vector})

Returns the process execution times of all programs run using
@@var{obj}.  @@var{count} is the number of results expected.  The
results will be placed into @@var{vector}.  The results are in the
order of the calls to @@code{pex_run}.  Returns 0 on error, 1 on
success.

@@code{struct pex_time} has the following fields of the type
@@code{unsigned long}: @@code{user_seconds},
@@code{user_microseconds}, @@code{system_seconds},
@@code{system_microseconds}.  On systems which do not support reporting
process times, all the fields will be set to @@code{0}.

@@end deftypefn

@@c pexecute.txh:2
@@deftypefn Extension {struct pex_obj *} pex_init (int @@var{flags}, @@
  const char *@@var{pname}, const char *@@var{tempbase})

Prepare to execute one or more programs, with standard output of each
program fed to standard input of the next.  This is a system
independent interface to execute a pipeline.

@@var{flags} is a bitwise combination of the following:

@@table @@code

@@vindex PEX_RECORD_TIMES
@@item PEX_RECORD_TIMES
Record subprocess times if possible.

@@vindex PEX_USE_PIPES
@@item PEX_USE_PIPES
Use pipes for communication between processes, if possible.

@@vindex PEX_SAVE_TEMPS
@@item PEX_SAVE_TEMPS
Don't delete temporary files used for communication between
processes.

@@end table

@@var{pname} is the name of program to be executed, used in error
messages.  @@var{tempbase} is a base name to use for any required
temporary files; it may be @@code{NULL} to use a randomly chosen name.

@@end deftypefn

@@c pexecute.txh:161
@@deftypefn Extension {FILE *} pex_input_file (struct pex_obj *@@var{obj}, @@
  int @@var{flags}, const char *@@var{in_name})

Return a stream for a temporary file to pass to the first program in
the pipeline as input.

The name of the input file is chosen according to the same rules
@@code{pex_run} uses to choose output file names, based on
@@var{in_name}, @@var{obj} and the @@code{PEX_SUFFIX} bit in @@var{flags}.

Don't call @@code{fclose} on the returned stream; the first call to
@@code{pex_run} closes it automatically.

If @@var{flags} includes @@code{PEX_BINARY_OUTPUT}, open the stream in
binary mode; otherwise, open it in the default mode.  Including
@@code{PEX_BINARY_OUTPUT} in @@var{flags} has no effect on Unix.
@@end deftypefn

@@c pexecute.txh:179
@@deftypefn Extension {FILE *} pex_input_pipe (struct pex_obj *@@var{obj}, @@
  int @@var{binary})

Return a stream @@var{fp} for a pipe connected to the standard input of
the first program in the pipeline; @@var{fp} is opened for writing.
You must have passed @@code{PEX_USE_PIPES} to the @@code{pex_init} call
that returned @@var{obj}.

You must close @@var{fp} using @@code{fclose} yourself when you have
finished writing data to the pipeline.

The file descriptor underlying @@var{fp} is marked not to be inherited
by child processes.

On systems that do not support pipes, this function returns
@@code{NULL}, and sets @@code{errno} to @@code{EINVAL}.  If you would
like to write code that is portable to all systems the @@code{pex}
functions support, consider using @@code{pex_input_file} instead.

There are two opportunities for deadlock using
@@code{pex_input_pipe}:

@@itemize @@bullet
@@item
Most systems' pipes can buffer only a fixed amount of data; a process
that writes to a full pipe blocks.  Thus, if you write to @@file{fp}
before starting the first process, you run the risk of blocking when
there is no child process yet to read the data and allow you to
continue.  @@code{pex_input_pipe} makes no promises about the
size of the pipe's buffer, so if you need to write any data at all
before starting the first process in the pipeline, consider using
@@code{pex_input_file} instead.

@@item
Using @@code{pex_input_pipe} and @@code{pex_read_output} together
may also cause deadlock.  If the output pipe fills up, so that each
program in the pipeline is waiting for the next to read more data, and
you fill the input pipe by writing more data to @@var{fp}, then there
is no way to make progress: the only process that could read data from
the output pipe is you, but you are blocked on the input pipe.

@@end itemize

@@end deftypefn

@@c pexecute.txh:286
@@deftypefn Extension {const char *} pex_one (int @@var{flags}, @@
  const char *@@var{executable}, char * const *@@var{argv}, @@
  const char *@@var{pname}, const char *@@var{outname}, const char *@@var{errname}, @@
  int *@@var{status}, int *@@var{err})

An interface to permit the easy execution of a
single program.  The return value and most of the parameters are as
for a call to @@code{pex_run}.  @@var{flags} is restricted to a
combination of @@code{PEX_SEARCH}, @@code{PEX_STDERR_TO_STDOUT}, and
@@code{PEX_BINARY_OUTPUT}.  @@var{outname} is interpreted as if
@@code{PEX_LAST} were set.  On a successful return, @@code{*@@var{status}} will
be set to the exit status of the program.

@@end deftypefn

@@c pexecute.txh:237
@@deftypefn Extension {FILE *} pex_read_err (struct pex_obj *@@var{obj}, @@
  int @@var{binary})

Returns a @@code{FILE} pointer which may be used to read the standard
error of the last program in the pipeline.  When this is used,
@@code{PEX_LAST} should not be used in a call to @@code{pex_run}.  After
this is called, @@code{pex_run} may no longer be called with the same
@@var{obj}.  @@var{binary} should be non-zero if the file should be
opened in binary mode.  Don't call @@code{fclose} on the returned file;
it will be closed by @@code{pex_free}.

@@end deftypefn

@@c pexecute.txh:224
@@deftypefn Extension {FILE *} pex_read_output (struct pex_obj *@@var{obj}, @@
  int @@var{binary})

Returns a @@code{FILE} pointer which may be used to read the standard
output of the last program in the pipeline.  When this is used,
@@code{PEX_LAST} should not be used in a call to @@code{pex_run}.  After
this is called, @@code{pex_run} may no longer be called with the same
@@var{obj}.  @@var{binary} should be non-zero if the file should be
opened in binary mode.  Don't call @@code{fclose} on the returned file;
it will be closed by @@code{pex_free}.

@@end deftypefn

@@c pexecute.txh:34
@@deftypefn Extension {const char *} pex_run (struct pex_obj *@@var{obj}, @@
  int @@var{flags}, const char *@@var{executable}, char * const *@@var{argv}, @@
  const char *@@var{outname}, const char *@@var{errname}, int *@@var{err})

Execute one program in a pipeline.  On success this returns
@@code{NULL}.  On failure it returns an error message, a statically
allocated string.

@@var{obj} is returned by a previous call to @@code{pex_init}.

@@var{flags} is a bitwise combination of the following:

@@table @@code

@@vindex PEX_LAST
@@item PEX_LAST
This must be set on the last program in the pipeline.  In particular,
it should be set when executing a single program.  The standard output
of the program will be sent to @@var{outname}, or, if @@var{outname} is
@@code{NULL}, to the standard output of the calling program.  Do @@emph{not}
set this bit if you want to call @@code{pex_read_output}
(described below).  After a call to @@code{pex_run} with this bit set,
@@var{pex_run} may no longer be called with the same @@var{obj}.

@@vindex PEX_SEARCH
@@item PEX_SEARCH
Search for the program using the user's executable search path.

@@vindex PEX_SUFFIX
@@item PEX_SUFFIX
@@var{outname} is a suffix.  See the description of @@var{outname},
below.

@@vindex PEX_STDERR_TO_STDOUT
@@item PEX_STDERR_TO_STDOUT
Send the program's standard error to standard output, if possible.

@@vindex PEX_BINARY_INPUT
@@vindex PEX_BINARY_OUTPUT
@@vindex PEX_BINARY_ERROR
@@item PEX_BINARY_INPUT
@@itemx PEX_BINARY_OUTPUT
@@itemx PEX_BINARY_ERROR
The standard input (output or error) of the program should be read (written) in
binary mode rather than text mode.  These flags are ignored on systems
which do not distinguish binary mode and text mode, such as Unix.  For
proper behavior these flags should match appropriately---a call to
@@code{pex_run} using @@code{PEX_BINARY_OUTPUT} should be followed by a
call using @@code{PEX_BINARY_INPUT}.

@@vindex PEX_STDERR_TO_PIPE
@@item PEX_STDERR_TO_PIPE
Send the program's standard error to a pipe, if possible.  This flag
cannot be specified together with @@code{PEX_STDERR_TO_STDOUT}.  This
flag can be specified only on the last program in pipeline.

@@end table

@@var{executable} is the program to execute.  @@var{argv} is the set of
arguments to pass to the program; normally @@code{@@var{argv}[0]} will
be a copy of @@var{executable}.

@@var{outname} is used to set the name of the file to use for standard
output.  There are two cases in which no output file will be used:

@@enumerate
@@item
if @@code{PEX_LAST} is not set in @@var{flags}, and @@code{PEX_USE_PIPES}
was set in the call to @@code{pex_init}, and the system supports pipes

@@item
if @@code{PEX_LAST} is set in @@var{flags}, and @@var{outname} is
@@code{NULL}
@@end enumerate

@@noindent
Otherwise the code will use a file to hold standard
output.  If @@code{PEX_LAST} is not set, this file is considered to be
a temporary file, and it will be removed when no longer needed, unless
@@code{PEX_SAVE_TEMPS} was set in the call to @@code{pex_init}.

There are two cases to consider when setting the name of the file to
hold standard output.

@@enumerate
@@item
@@code{PEX_SUFFIX} is set in @@var{flags}.  In this case
@@var{outname} may not be @@code{NULL}.  If the @@var{tempbase} parameter
to @@code{pex_init} was not @@code{NULL}, then the output file name is
the concatenation of @@var{tempbase} and @@var{outname}.  If
@@var{tempbase} was @@code{NULL}, then the output file name is a random
file name ending in @@var{outname}.

@@item
@@code{PEX_SUFFIX} was not set in @@var{flags}.  In this
case, if @@var{outname} is not @@code{NULL}, it is used as the output
file name.  If @@var{outname} is @@code{NULL}, and @@var{tempbase} was
not NULL, the output file name is randomly chosen using
@@var{tempbase}.  Otherwise the output file name is chosen completely
at random.
@@end enumerate

@@var{errname} is the file name to use for standard error output.  If
it is @@code{NULL}, standard error is the same as the caller's.
Otherwise, standard error is written to the named file.

On an error return, the code sets @@code{*@@var{err}} to an @@code{errno}
value, or to 0 if there is no relevant @@code{errno}.

@@end deftypefn

@@c pexecute.txh:145
@@deftypefn Extension {const char *} pex_run_in_environment (struct pex_obj *@@var{obj}, @@
  int @@var{flags}, const char *@@var{executable}, char * const *@@var{argv}, @@
  char * const *@@var{env}, int @@var{env_size}, const char *@@var{outname}, @@
  const char *@@var{errname}, int *@@var{err})

Execute one program in a pipeline, permitting the environment for the
program to be specified.  Behaviour and parameters not listed below are
as for @@code{pex_run}.

@@var{env} is the environment for the child process, specified as an array of
character pointers.  Each element of the array should point to a string of the
form @@code{VAR=VALUE}, with the exception of the last element that must be
@@code{NULL}.

@@end deftypefn

@@c pexecute.txh:301
@@deftypefn Extension int pexecute (const char *@@var{program}, @@
  char * const *@@var{argv}, const char *@@var{this_pname}, @@
  const char *@@var{temp_base}, char **@@var{errmsg_fmt}, @@
  char **@@var{errmsg_arg}, int @@var{flags})

This is the old interface to execute one or more programs.  It is
still supported for compatibility purposes, but is no longer
documented.

@@end deftypefn

@@c strsignal.c:541
@@deftypefn Supplemental void psignal (int @@var{signo}, char *@@var{message})

Print @@var{message} to the standard error, followed by a colon,
followed by the description of the signal specified by @@var{signo},
followed by a newline.

@@end deftypefn

@@c putenv.c:21
@@deftypefn Supplemental int putenv (const char *@@var{string})

Uses @@code{setenv} or @@code{unsetenv} to put @@var{string} into
the environment or remove it.  If @@var{string} is of the form
@@samp{name=value} the string is added; if no @@samp{=} is present the
name is unset/removed.

@@end deftypefn

@@c pexecute.txh:312
@@deftypefn Extension int pwait (int @@var{pid}, int *@@var{status}, int @@var{flags})

Another part of the old execution interface.

@@end deftypefn

@@c random.c:39
@@deftypefn Supplement {long int} random (void)
@@deftypefnx Supplement void srandom (unsigned int @@var{seed})
@@deftypefnx Supplement void* initstate (unsigned int @@var{seed}, @@
  void *@@var{arg_state}, unsigned long @@var{n})
@@deftypefnx Supplement void* setstate (void *@@var{arg_state})

Random number functions.  @@code{random} returns a random number in the
range 0 to @@code{LONG_MAX}.  @@code{srandom} initializes the random
number generator to some starting point determined by @@var{seed}
(else, the values returned by @@code{random} are always the same for each
run of the program).  @@code{initstate} and @@code{setstate} allow fine-grained
control over the state of the random number generator.

@@end deftypefn

@@c concat.c:160
@@deftypefn Extension char* reconcat (char *@@var{optr}, const char *@@var{s1}, @@
  @@dots{}, @@code{NULL})

Same as @@code{concat}, except that if @@var{optr} is not @@code{NULL} it
is freed after the string is created.  This is intended to be useful
when you're extending an existing string or building up a string in a
loop:

@@example
  str = reconcat (str, "pre-", str, NULL);
@@end example

@@end deftypefn

@@c rename.c:6
@@deftypefn Supplemental int rename (const char *@@var{old}, const char *@@var{new})

Renames a file from @@var{old} to @@var{new}.  If @@var{new} already
exists, it is removed.

@@end deftypefn

@@c rindex.c:5
@@deftypefn Supplemental char* rindex (const char *@@var{s}, int @@var{c})

Returns a pointer to the last occurrence of the character @@var{c} in
the string @@var{s}, or @@code{NULL} if not found.  The use of @@code{rindex} is
deprecated in new programs in favor of @@code{strrchr}.

@@end deftypefn

@@c setenv.c:23
@@deftypefn Supplemental int setenv (const char *@@var{name}, @@
  const char *@@var{value}, int @@var{overwrite})
@@deftypefnx Supplemental void unsetenv (const char *@@var{name})

@@code{setenv} adds @@var{name} to the environment with value
@@var{value}.  If the name was already present in the environment,
the new value will be stored only if @@var{overwrite} is nonzero.
The companion @@code{unsetenv} function removes @@var{name} from the
environment.  This implementation is not safe for multithreaded code.

@@end deftypefn

@@c setproctitle.c:31
@@deftypefn Supplemental void setproctitle (const char *@@var{fmt}, ...)

Set the title of a process to @@var{fmt}. va args not supported for now,
but defined for compatibility with BSD. 

@@end deftypefn

@@c strsignal.c:348
@@deftypefn Extension int signo_max (void)

Returns the maximum signal value for which a corresponding symbolic
name or message is available.  Note that in the case where we use the
@@code{sys_siglist} supplied by the system, it is possible for there to
be more symbolic names than messages, or vice versa.  In fact, the
manual page for @@code{psignal(3b)} explicitly warns that one should
check the size of the table (@@code{NSIG}) before indexing it, since
new signal codes may be added to the system before they are added to
the table.  Thus @@code{NSIG} might be smaller than value implied by
the largest signo value defined in @@code{<signal.h>}.

We return the maximum value that can be used to obtain a meaningful
symbolic name or message.

@@end deftypefn

@@c sigsetmask.c:8
@@deftypefn Supplemental int sigsetmask (int @@var{set})

Sets the signal mask to the one provided in @@var{set} and returns
the old mask (which, for libiberty's implementation, will always
be the value @@code{1}).

@@end deftypefn

@@c simple-object.txh:96
@@deftypefn Extension {const char *} simple_object_attributes_compare @@
  (simple_object_attributes *@@var{attrs1}, simple_object_attributes *@@var{attrs2}, @@
   int *@@var{err})

Compare @@var{attrs1} and @@var{attrs2}.  If they could be linked
together without error, return @@code{NULL}.  Otherwise, return an
error message and set @@code{*@@var{err}} to an errno value or @@code{0}
if there is no relevant errno.

@@end deftypefn

@@c simple-object.txh:81
@@deftypefn Extension {simple_object_attributes *} simple_object_fetch_attributes @@
  (simple_object_read *@@var{simple_object}, const char **@@var{errmsg}, int *@@var{err})

Fetch the attributes of @@var{simple_object}.  The attributes are
internal information such as the format of the object file, or the
architecture it was compiled for.  This information will persist until
@@code{simple_object_attributes_release} is called, even if
@@var{simple_object} itself is released.

On error this returns @@code{NULL}, sets @@code{*@@var{errmsg}} to an
error message, and sets @@code{*@@var{err}} to an errno value or
@@code{0} if there is no relevant errno.

@@end deftypefn

@@c simple-object.txh:49
@@deftypefn Extension {int} simple_object_find_section @@
  (simple_object_read *@@var{simple_object} off_t *@@var{offset}, @@
  off_t *@@var{length}, const char **@@var{errmsg}, int *@@var{err})

Look for the section @@var{name} in @@var{simple_object}.  This returns
information for the first section with that name.

If found, return 1 and set @@code{*@@var{offset}} to the offset in the
file of the section contents and set @@code{*@@var{length}} to the
length of the section contents.  The value in @@code{*@@var{offset}}
will be relative to the offset passed to
@@code{simple_object_open_read}.

If the section is not found, and no error occurs,
@@code{simple_object_find_section} returns @@code{0} and set
@@code{*@@var{errmsg}} to @@code{NULL}.

If an error occurs, @@code{simple_object_find_section} returns
@@code{0}, sets @@code{*@@var{errmsg}} to an error message, and sets
@@code{*@@var{err}} to an errno value or @@code{0} if there is no
relevant errno.

@@end deftypefn

@@c simple-object.txh:27
@@deftypefn Extension {const char *} simple_object_find_sections @@
  (simple_object_read *@@var{simple_object}, int (*@@var{pfn}) (void *@@var{data}, @@
  const char *@@var{name}, off_t @@var{offset}, off_t @@var{length}), @@
  void *@@var{data}, int *@@var{err})

This function calls @@var{pfn} for each section in @@var{simple_object}.
It calls @@var{pfn} with the section name, the offset within the file
of the section contents, and the length of the section contents.  The
offset within the file is relative to the offset passed to
@@code{simple_object_open_read}.  The @@var{data} argument to this
function is passed along to @@var{pfn}.

If @@var{pfn} returns @@code{0}, the loop over the sections stops and
@@code{simple_object_find_sections} returns.  If @@var{pfn} returns some
other value, the loop continues.

On success @@code{simple_object_find_sections} returns.  On error it
returns an error string, and sets @@code{*@@var{err}} to an errno value
or @@code{0} if there is no relevant errno.

@@end deftypefn

@@c simple-object.txh:2
@@deftypefn Extension {simple_object_read *} simple_object_open_read @@
  (int @@var{descriptor}, off_t @@var{offset}, const char *{segment_name}, @@
  const char **@@var{errmsg}, int *@@var{err})

Opens an object file for reading.  Creates and returns an
@@code{simple_object_read} pointer which may be passed to other
functions to extract data from the object file.

@@var{descriptor} holds a file descriptor which permits reading.

@@var{offset} is the offset into the file; this will be @@code{0} in the
normal case, but may be a different value when reading an object file
in an archive file.

@@var{segment_name} is only used with the Mach-O file format used on
Darwin aka Mac OS X.  It is required on that platform, and means to
only look at sections within the segment with that name.  The
parameter is ignored on other systems.

If an error occurs, this functions returns @@code{NULL} and sets
@@code{*@@var{errmsg}} to an error string and sets @@code{*@@var{err}} to
an errno value or @@code{0} if there is no relevant errno.

@@end deftypefn

@@c simple-object.txh:107
@@deftypefn Extension {void} simple_object_release_attributes @@
  (simple_object_attributes *@@var{attrs})

Release all resources associated with @@var{attrs}.

@@end deftypefn

@@c simple-object.txh:73
@@deftypefn Extension {void} simple_object_release_read @@
  (simple_object_read *@@var{simple_object})

Release all resources associated with @@var{simple_object}.  This does
not close the file descriptor.

@@end deftypefn

@@c simple-object.txh:184
@@deftypefn Extension {void} simple_object_release_write @@
  (simple_object_write *@@var{simple_object})

Release all resources associated with @@var{simple_object}.

@@end deftypefn

@@c simple-object.txh:114
@@deftypefn Extension {simple_object_write *} simple_object_start_write @@
  (simple_object_attributes @@var{attrs}, const char *@@var{segment_name}, @@
  const char **@@var{errmsg}, int *@@var{err})

Start creating a new object file using the object file format
described in @@var{attrs}.  You must fetch attribute information from
an existing object file before you can create a new one.  There is
currently no support for creating an object file de novo.

@@var{segment_name} is only used with Mach-O as found on Darwin aka Mac
OS X.  The parameter is required on that target.  It means that all
sections are created within the named segment.  It is ignored for
other object file formats.

On error @@code{simple_object_start_write} returns @@code{NULL}, sets
@@code{*@@var{ERRMSG}} to an error message, and sets @@code{*@@var{err}}
to an errno value or @@code{0} if there is no relevant errno.

@@end deftypefn

@@c simple-object.txh:153
@@deftypefn Extension {const char *} simple_object_write_add_data @@
  (simple_object_write *@@var{simple_object}, @@
  simple_object_write_section *@@var{section}, const void *@@var{buffer}, @@
  size_t @@var{size}, int @@var{copy}, int *@@var{err})

Add data @@var{buffer}/@@var{size} to @@var{section} in
@@var{simple_object}.  If @@var{copy} is non-zero, the data will be
copied into memory if necessary.  If @@var{copy} is zero, @@var{buffer}
must persist until @@code{simple_object_write_to_file} is called.  is
released.

On success this returns @@code{NULL}.  On error this returns an error
message, and sets @@code{*@@var{err}} to an errno value or 0 if there is
no relevant erro.

@@end deftypefn

@@c simple-object.txh:134
@@deftypefn Extension {simple_object_write_section *} simple_object_write_create_section @@
  (simple_object_write *@@var{simple_object}, const char *@@var{name}, @@
  unsigned int @@var{align}, const char **@@var{errmsg}, int *@@var{err})

Add a section to @@var{simple_object}.  @@var{name} is the name of the
new section.  @@var{align} is the required alignment expressed as the
number of required low-order 0 bits (e.g., 2 for alignment to a 32-bit
boundary).

The section is created as containing data, readable, not writable, not
executable, not loaded at runtime.  The section is not written to the
file until @@code{simple_object_write_to_file} is called.

On error this returns @@code{NULL}, sets @@code{*@@var{errmsg}} to an
error message, and sets @@code{*@@var{err}} to an errno value or
@@code{0} if there is no relevant errno.

@@end deftypefn

@@c simple-object.txh:170
@@deftypefn Extension {const char *} simple_object_write_to_file @@
  (simple_object_write *@@var{simple_object}, int @@var{descriptor}, int *@@var{err})

Write the complete object file to @@var{descriptor}, an open file
descriptor.  This writes out all the data accumulated by calls to
@@code{simple_object_write_create_section} and
@@var{simple_object_write_add_data}.

This returns @@code{NULL} on success.  On error this returns an error
message and sets @@code{*@@var{err}} to an errno value or @@code{0} if
there is no relevant errno.

@@end deftypefn

@@c snprintf.c:28
@@deftypefn Supplemental int snprintf (char *@@var{buf}, size_t @@var{n}, @@
  const char *@@var{format}, ...)

This function is similar to @@code{sprintf}, but it will write to
@@var{buf} at most @@code{@@var{n}-1} bytes of text, followed by a
terminating null byte, for a total of @@var{n} bytes.
On error the return value is -1, otherwise it returns the number of
bytes, not including the terminating null byte, that would have been
written had @@var{n} been sufficiently large, regardless of the actual
value of @@var{n}.  Note some pre-C99 system libraries do not implement
this correctly so users cannot generally rely on the return value if
the system version of this function is used.

@@end deftypefn

@@c spaces.c:22
@@deftypefn Extension char* spaces (int @@var{count})

Returns a pointer to a memory region filled with the specified
number of spaces and null terminated.  The returned pointer is
valid until at least the next call.

@@end deftypefn

@@c splay-tree.c:303
@@deftypefn Supplemental splay_tree splay_tree_new_with_typed_alloc @@
(splay_tree_compare_fn @@var{compare_fn}, @@
splay_tree_delete_key_fn @@var{delete_key_fn}, @@
splay_tree_delete_value_fn @@var{delete_value_fn}, @@
splay_tree_allocate_fn @@var{tree_allocate_fn}, @@
splay_tree_allocate_fn @@var{node_allocate_fn}, @@
splay_tree_deallocate_fn @@var{deallocate_fn}, @@
void * @@var{allocate_data})

This function creates a splay tree that uses two different allocators
@@var{tree_allocate_fn} and @@var{node_allocate_fn} to use for allocating the
tree itself and its nodes respectively.  This is useful when variables of
different types need to be allocated with different allocators.

The splay tree will use @@var{compare_fn} to compare nodes,
@@var{delete_key_fn} to deallocate keys, and @@var{delete_value_fn} to
deallocate values.

@@end deftypefn

@@c stack-limit.c:28
@@deftypefn Extension void stack_limit_increase (unsigned long @@var{pref})

Attempt to increase stack size limit to @@var{pref} bytes if possible.

@@end deftypefn

@@c stpcpy.c:23
@@deftypefn Supplemental char* stpcpy (char *@@var{dst}, const char *@@var{src})

Copies the string @@var{src} into @@var{dst}.  Returns a pointer to
@@var{dst} + strlen(@@var{src}).

@@end deftypefn

@@c stpncpy.c:23
@@deftypefn Supplemental char* stpncpy (char *@@var{dst}, const char *@@var{src}, @@
  size_t @@var{len})

Copies the string @@var{src} into @@var{dst}, copying exactly @@var{len}
and padding with zeros if necessary.  If @@var{len} < strlen(@@var{src})
then return @@var{dst} + @@var{len}, otherwise returns @@var{dst} +
strlen(@@var{src}).

@@end deftypefn

@@c strcasecmp.c:15
@@deftypefn Supplemental int strcasecmp (const char *@@var{s1}, const char *@@var{s2})

A case-insensitive @@code{strcmp}.

@@end deftypefn

@@c strchr.c:6
@@deftypefn Supplemental char* strchr (const char *@@var{s}, int @@var{c})

Returns a pointer to the first occurrence of the character @@var{c} in
the string @@var{s}, or @@code{NULL} if not found.  If @@var{c} is itself the
null character, the results are undefined.

@@end deftypefn

@@c strdup.c:3
@@deftypefn Supplemental char* strdup (const char *@@var{s})

Returns a pointer to a copy of @@var{s} in memory obtained from
@@code{malloc}, or @@code{NULL} if insufficient memory was available.

@@end deftypefn

@@c strerror.c:670
@@deftypefn Replacement {const char*} strerrno (int @@var{errnum})

Given an error number returned from a system call (typically returned
in @@code{errno}), returns a pointer to a string containing the
symbolic name of that error number, as found in @@code{<errno.h>}.

If the supplied error number is within the valid range of indices for
symbolic names, but no name is available for the particular error
number, then returns the string @@samp{Error @@var{num}}, where @@var{num}
is the error number.

If the supplied error number is not within the range of valid
indices, then returns @@code{NULL}.

The contents of the location pointed to are only guaranteed to be
valid until the next call to @@code{strerrno}.

@@end deftypefn

@@c strerror.c:603
@@deftypefn Supplemental char* strerror (int @@var{errnoval})

Maps an @@code{errno} number to an error message string, the contents
of which are implementation defined.  On systems which have the
external variables @@code{sys_nerr} and @@code{sys_errlist}, these
strings will be the same as the ones used by @@code{perror}.

If the supplied error number is within the valid range of indices for
the @@code{sys_errlist}, but no message is available for the particular
error number, then returns the string @@samp{Error @@var{num}}, where
@@var{num} is the error number.

If the supplied error number is not a valid index into
@@code{sys_errlist}, returns @@code{NULL}.

The returned string is only guaranteed to be valid only until the
next call to @@code{strerror}.

@@end deftypefn

@@c strncasecmp.c:15
@@deftypefn Supplemental int strncasecmp (const char *@@var{s1}, const char *@@var{s2})

A case-insensitive @@code{strncmp}.

@@end deftypefn

@@c strncmp.c:6
@@deftypefn Supplemental int strncmp (const char *@@var{s1}, @@
  const char *@@var{s2}, size_t @@var{n})

Compares the first @@var{n} bytes of two strings, returning a value as
@@code{strcmp}.

@@end deftypefn

@@c strndup.c:23
@@deftypefn Extension char* strndup (const char *@@var{s}, size_t @@var{n})

Returns a pointer to a copy of @@var{s} with at most @@var{n} characters
in memory obtained from @@code{malloc}, or @@code{NULL} if insufficient
memory was available.  The result is always NUL terminated.

@@end deftypefn

@@c strnlen.c:6
@@deftypefn Supplemental size_t strnlen (const char *@@var{s}, size_t @@var{maxlen})

Returns the length of @@var{s}, as with @@code{strlen}, but never looks
past the first @@var{maxlen} characters in the string.  If there is no
'\0' character in the first @@var{maxlen} characters, returns
@@var{maxlen}.

@@end deftypefn

@@c strrchr.c:6
@@deftypefn Supplemental char* strrchr (const char *@@var{s}, int @@var{c})

Returns a pointer to the last occurrence of the character @@var{c} in
the string @@var{s}, or @@code{NULL} if not found.  If @@var{c} is itself the
null character, the results are undefined.

@@end deftypefn

@@c strsignal.c:383
@@deftypefn Supplemental {const char *} strsignal (int @@var{signo})

Maps an signal number to an signal message string, the contents of
which are implementation defined.  On systems which have the external
variable @@code{sys_siglist}, these strings will be the same as the
ones used by @@code{psignal()}.

If the supplied signal number is within the valid range of indices for
the @@code{sys_siglist}, but no message is available for the particular
signal number, then returns the string @@samp{Signal @@var{num}}, where
@@var{num} is the signal number.

If the supplied signal number is not a valid index into
@@code{sys_siglist}, returns @@code{NULL}.

The returned string is only guaranteed to be valid only until the next
call to @@code{strsignal}.

@@end deftypefn

@@c strsignal.c:448
@@deftypefn Extension {const char*} strsigno (int @@var{signo})

Given an signal number, returns a pointer to a string containing the
symbolic name of that signal number, as found in @@code{<signal.h>}.

If the supplied signal number is within the valid range of indices for
symbolic names, but no name is available for the particular signal
number, then returns the string @@samp{Signal @@var{num}}, where
@@var{num} is the signal number.

If the supplied signal number is not within the range of valid
indices, then returns @@code{NULL}.

The contents of the location pointed to are only guaranteed to be
valid until the next call to @@code{strsigno}.

@@end deftypefn

@@c strstr.c:6
@@deftypefn Supplemental char* strstr (const char *@@var{string}, const char *@@var{sub})

This function searches for the substring @@var{sub} in the string
@@var{string}, not including the terminating null characters.  A pointer
to the first occurrence of @@var{sub} is returned, or @@code{NULL} if the
substring is absent.  If @@var{sub} points to a string with zero
length, the function returns @@var{string}.

@@end deftypefn

@@c strtod.c:27
@@deftypefn Supplemental double strtod (const char *@@var{string}, @@
  char **@@var{endptr})

This ISO C function converts the initial portion of @@var{string} to a
@@code{double}.  If @@var{endptr} is not @@code{NULL}, a pointer to the
character after the last character used in the conversion is stored in
the location referenced by @@var{endptr}.  If no conversion is
performed, zero is returned and the value of @@var{string} is stored in
the location referenced by @@var{endptr}.

@@end deftypefn

@@c strerror.c:729
@@deftypefn Extension int strtoerrno (const char *@@var{name})

Given the symbolic name of a error number (e.g., @@code{EACCES}), map it
to an errno value.  If no translation is found, returns 0.

@@end deftypefn

@@c strtol.c:33
@@deftypefn Supplemental {long int} strtol (const char *@@var{string}, @@
  char **@@var{endptr}, int @@var{base})
@@deftypefnx Supplemental {unsigned long int} strtoul (const char *@@var{string}, @@
  char **@@var{endptr}, int @@var{base})

The @@code{strtol} function converts the string in @@var{string} to a
long integer value according to the given @@var{base}, which must be
between 2 and 36 inclusive, or be the special value 0.  If @@var{base}
is 0, @@code{strtol} will look for the prefixes @@code{0} and @@code{0x}
to indicate bases 8 and 16, respectively, else default to base 10.
When the base is 16 (either explicitly or implicitly), a prefix of
@@code{0x} is allowed.  The handling of @@var{endptr} is as that of
@@code{strtod} above.  The @@code{strtoul} function is the same, except
that the converted value is unsigned.

@@end deftypefn

@@c strtoll.c:33
@@deftypefn Supplemental {long long int} strtoll (const char *@@var{string}, @@
  char **@@var{endptr}, int @@var{base})
@@deftypefnx Supplemental {unsigned long long int} strtoul (@@
  const char *@@var{string}, char **@@var{endptr}, int @@var{base})

The @@code{strtoll} function converts the string in @@var{string} to a
long long integer value according to the given @@var{base}, which must be
between 2 and 36 inclusive, or be the special value 0.  If @@var{base}
is 0, @@code{strtoll} will look for the prefixes @@code{0} and @@code{0x}
to indicate bases 8 and 16, respectively, else default to base 10.
When the base is 16 (either explicitly or implicitly), a prefix of
@@code{0x} is allowed.  The handling of @@var{endptr} is as that of
@@code{strtod} above.  The @@code{strtoull} function is the same, except
that the converted value is unsigned.

@@end deftypefn

@@c strsignal.c:502
@@deftypefn Extension int strtosigno (const char *@@var{name})

Given the symbolic name of a signal, map it to a signal number.  If no
translation is found, returns 0.

@@end deftypefn

@@c strverscmp.c:25
@@deftypefun int strverscmp (const char *@@var{s1}, const char *@@var{s2})
The @@code{strverscmp} function compares the string @@var{s1} against
@@var{s2}, considering them as holding indices/version numbers.  Return
value follows the same conventions as found in the @@code{strverscmp}
function.  In fact, if @@var{s1} and @@var{s2} contain no digits,
@@code{strverscmp} behaves like @@code{strcmp}.

Basically, we compare strings normally (character by character), until
we find a digit in each string - then we enter a special comparison
mode, where each sequence of digits is taken as a whole.  If we reach the
end of these two parts without noticing a difference, we return to the
standard comparison mode.  There are two types of numeric parts:
"integral" and "fractional" (those  begin with a '0'). The types
of the numeric parts affect the way we sort them:

@@itemize @@bullet
@@item
integral/integral: we compare values as you would expect.

@@item
fractional/integral: the fractional part is less than the integral one.
Again, no surprise.

@@item
fractional/fractional: the things become a bit more complex.
If the common prefix contains only leading zeroes, the longest part is less
than the other one; else the comparison behaves normally.
@@end itemize

@@smallexample
strverscmp ("no digit", "no digit")
    @@result{} 0    // @@r{same behavior as strcmp.}
strverscmp ("item#99", "item#100")
    @@result{} <0   // @@r{same prefix, but 99 < 100.}
strverscmp ("alpha1", "alpha001")
    @@result{} >0   // @@r{fractional part inferior to integral one.}
strverscmp ("part1_f012", "part1_f01")
    @@result{} >0   // @@r{two fractional parts.}
strverscmp ("foo.009", "foo.0")
    @@result{} <0   // @@r{idem, but with leading zeroes only.}
@@end smallexample

This function is especially useful when dealing with filename sorting,
because filenames frequently hold indices/version numbers.
@@end deftypefun

@@c timeval-utils.c:43
@@deftypefn Extension void timeval_add (struct timeval *@@var{a}, @@
  struct timeval *@@var{b}, struct timeval *@@var{result})

Adds @@var{a} to @@var{b} and stores the result in @@var{result}.

@@end deftypefn

@@c timeval-utils.c:67
@@deftypefn Extension void timeval_sub (struct timeval *@@var{a}, @@
  struct timeval *@@var{b}, struct timeval *@@var{result})

Subtracts @@var{b} from @@var{a} and stores the result in @@var{result}.

@@end deftypefn

@@c tmpnam.c:3
@@deftypefn Supplemental char* tmpnam (char *@@var{s})

This function attempts to create a name for a temporary file, which
will be a valid file name yet not exist when @@code{tmpnam} checks for
it.  @@var{s} must point to a buffer of at least @@code{L_tmpnam} bytes,
or be @@code{NULL}.  Use of this function creates a security risk, and it must
not be used in new projects.  Use @@code{mkstemp} instead.

@@end deftypefn

@@c unlink-if-ordinary.c:27
@@deftypefn Supplemental int unlink_if_ordinary (const char*)

Unlinks the named file, unless it is special (e.g. a device file).
Returns 0 when the file was unlinked, a negative value (and errno set) when
there was an error deleting the file, and a positive value if no attempt
was made to unlink the file because it is special.

@@end deftypefn

@@c fopen_unlocked.c:31
@@deftypefn Extension void unlock_std_streams (void)

If the OS supports it, ensure that the standard I/O streams,
@@code{stdin}, @@code{stdout} and @@code{stderr} are setup to avoid any
multi-threaded locking.  Otherwise do nothing.

@@end deftypefn

@@c fopen_unlocked.c:23
@@deftypefn Extension void unlock_stream (FILE * @@var{stream})

If the OS supports it, ensure that the supplied stream is setup to
avoid any multi-threaded locking.  Otherwise leave the @@code{FILE}
pointer unchanged.  If the @@var{stream} is @@code{NULL} do nothing.

@@end deftypefn

@@c vasprintf.c:47
@@deftypefn Extension int vasprintf (char **@@var{resptr}, @@
  const char *@@var{format}, va_list @@var{args})

Like @@code{vsprintf}, but instead of passing a pointer to a buffer,
you pass a pointer to a pointer.  This function will compute the size
of the buffer needed, allocate memory with @@code{malloc}, and store a
pointer to the allocated memory in @@code{*@@var{resptr}}.  The value
returned is the same as @@code{vsprintf} would return.  If memory could
not be allocated, minus one is returned and @@code{NULL} is stored in
@@code{*@@var{resptr}}.

@@end deftypefn

@@c vfork.c:6
@@deftypefn Supplemental int vfork (void)

Emulates @@code{vfork} by calling @@code{fork} and returning its value.

@@end deftypefn

@@c vprintf.c:3
@@deftypefn Supplemental int vprintf (const char *@@var{format}, va_list @@var{ap})
@@deftypefnx Supplemental int vfprintf (FILE *@@var{stream}, @@
  const char *@@var{format}, va_list @@var{ap})
@@deftypefnx Supplemental int vsprintf (char *@@var{str}, @@
  const char *@@var{format}, va_list @@var{ap})

These functions are the same as @@code{printf}, @@code{fprintf}, and
@@code{sprintf}, respectively, except that they are called with a
@@code{va_list} instead of a variable number of arguments.  Note that
they do not call @@code{va_end}; this is the application's
responsibility.  In @@libib{} they are implemented in terms of the
nonstandard but common function @@code{_doprnt}.

@@end deftypefn

@@c vsnprintf.c:28
@@deftypefn Supplemental int vsnprintf (char *@@var{buf}, size_t @@var{n}, @@
  const char *@@var{format}, va_list @@var{ap})

This function is similar to @@code{vsprintf}, but it will write to
@@var{buf} at most @@code{@@var{n}-1} bytes of text, followed by a
terminating null byte, for a total of @@var{n} bytes.  On error the
return value is -1, otherwise it returns the number of characters that
would have been printed had @@var{n} been sufficiently large,
regardless of the actual value of @@var{n}.  Note some pre-C99 system
libraries do not implement this correctly so users cannot generally
rely on the return value if the system version of this function is
used.

@@end deftypefn

@@c waitpid.c:3
@@deftypefn Supplemental int waitpid (int @@var{pid}, int *@@var{status}, int)

This is a wrapper around the @@code{wait} function.  Any ``special''
values of @@var{pid} depend on your implementation of @@code{wait}, as
does the return value.  The third argument is unused in @@libib{}.

@@end deftypefn

@@c argv.c:286
@@deftypefn Extension int writeargv (const char **@@var{argv}, FILE *@@var{file})

Write each member of ARGV, handling all necessary quoting, to the file
named by FILE, separated by whitespace.  Return 0 on success, non-zero
if an error occurred while writing to FILE.

@@end deftypefn

@@c xasprintf.c:31
@@deftypefn Replacement char* xasprintf (const char *@@var{format}, ...)

Print to allocated string without fail.  If @@code{xasprintf} fails,
this will print a message to @@code{stderr} (using the name set by
@@code{xmalloc_set_program_name}, if any) and then call @@code{xexit}.

@@end deftypefn

@@c xatexit.c:11
@@deftypefun int xatexit (void (*@@var{fn}) (void))

Behaves as the standard @@code{atexit} function, but with no limit on
the number of registered functions.  Returns 0 on success, or @@minus{}1 on
failure.  If you use @@code{xatexit} to register functions, you must use
@@code{xexit} to terminate your program.

@@end deftypefun

@@c xmalloc.c:38
@@deftypefn Replacement void* xcalloc (size_t @@var{nelem}, size_t @@var{elsize})

Allocate memory without fail, and set it to zero.  This routine functions
like @@code{calloc}, but will behave the same as @@code{xmalloc} if memory
cannot be found.

@@end deftypefn

@@c xexit.c:22
@@deftypefn Replacement void xexit (int @@var{code})

Terminates the program.  If any functions have been registered with
the @@code{xatexit} replacement function, they will be called first.
Termination is handled via the system's normal @@code{exit} call.

@@end deftypefn

@@c xmalloc.c:22
@@deftypefn Replacement void* xmalloc (size_t)

Allocate memory without fail.  If @@code{malloc} fails, this will print
a message to @@code{stderr} (using the name set by
@@code{xmalloc_set_program_name},
if any) and then call @@code{xexit}.  Note that it is therefore safe for
a program to contain @@code{#define malloc xmalloc} in its source.

@@end deftypefn

@@c xmalloc.c:53
@@deftypefn Replacement void xmalloc_failed (size_t)

This function is not meant to be called by client code, and is listed
here for completeness only.  If any of the allocation routines fail, this
function will be called to print an error message and terminate execution.

@@end deftypefn

@@c xmalloc.c:46
@@deftypefn Replacement void xmalloc_set_program_name (const char *@@var{name})

You can use this to set the name of the program used by
@@code{xmalloc_failed} when printing a failure message.

@@end deftypefn

@@c xmemdup.c:7
@@deftypefn Replacement void* xmemdup (void *@@var{input}, @@
  size_t @@var{copy_size}, size_t @@var{alloc_size})

Duplicates a region of memory without fail.  First, @@var{alloc_size} bytes
are allocated, then @@var{copy_size} bytes from @@var{input} are copied into
it, and the new memory is returned.  If fewer bytes are copied than were
allocated, the remaining memory is zeroed.

@@end deftypefn

@@c xmalloc.c:32
@@deftypefn Replacement void* xrealloc (void *@@var{ptr}, size_t @@var{size})
Reallocate memory without fail.  This routine functions like @@code{realloc},
but will behave the same as @@code{xmalloc} if memory cannot be found.

@@end deftypefn

@@c xstrdup.c:7
@@deftypefn Replacement char* xstrdup (const char *@@var{s})

Duplicates a character string without fail, using @@code{xmalloc} to
obtain memory.

@@end deftypefn

@@c xstrerror.c:7
@@deftypefn Replacement char* xstrerror (int @@var{errnum})

Behaves exactly like the standard @@code{strerror} function, but
will never return a @@code{NULL} pointer.

@@end deftypefn

@@c xstrndup.c:23
@@deftypefn Replacement char* xstrndup (const char *@@var{s}, size_t @@var{n})

Returns a pointer to a copy of @@var{s} with at most @@var{n} characters
without fail, using @@code{xmalloc} to obtain memory.  The result is
always NUL terminated.

@@end deftypefn

@@c xvasprintf.c:38
@@deftypefn Replacement char* xvasprintf (const char *@@var{format}, va_list @@var{args})

Print to allocated string without fail.  If @@code{xvasprintf} fails,
this will print a message to @@code{stderr} (using the name set by
@@code{xmalloc_set_program_name}, if any) and then call @@code{xexit}.

@@end deftypefn


@


1.47
log
@merge from gcc
@
text
@d1926 9
@


1.46
log
@merge from gcc
@
text
@d2025 9
@


1.45
log
@merge from gcc
@
text
@d128 10
d299 1
a299 1
@@c filename_cmp.c:32
d316 1
a316 1
@@c filename_cmp.c:178
d324 1
a324 1
@@c filename_cmp.c:147
d333 1
a333 1
@@c filename_cmp.c:89
@


1.44
log
@merge from gcc
@
text
@d1717 18
@


1.43
log
@merge from gcc
@
text
@d128 1
a128 1
@@c choose-temp.c:46
d142 1
a142 1
@@deftypefn Replacement char* choose_tmpdir ()
d163 2
a164 3
@@code{xmalloc}ed memory.  Returns @@code{NULL} if insufficient memory is
available.  The argument list is terminated by the first @@code{NULL}
pointer encountered.  Pointers to empty strings are ignored.
d530 1
a530 1
@@c hashtab.c:336
d1165 1
a1165 1
@@c concat.c:174
@


1.42
log
@ChangeLog libiberty/
2011-02-28  Kai Tietz  <kai.tietz@@onevision.com>

	* filename_cmp.c (filename_ncmp): New function.
	* functions.texi: Regenerated.

ChangeLog include/
2011-02-28  Kai Tietz  <kai.tietz@@onevision.com>

	* filenames.h (filename_ncmp): New prototype.

ChangeLog bfd/
2011-02-28  Kai Tietz  <kai.tietz@@onevision.com>

	* archive.c (_bfd_find_nested_archive): Use filename_(n)cmp.
	(adjust_relative_path): Likewise.
	(_bfd_construct_extended_name_table): Likewise.
	* corefile.c (generic_core_file_matches_executable_p): Likewise.
	* elf32-bfin.c (bfinfdpic_relocate_section): Likewise.
	* elf32-frv.c (elf32_frv_relocate_section): Likewise.
	* elf32-spu.c (sort_bfds): Likewise.
	(spu_elf_auto_overlay): Likewise.
	* syms.c (_bfd_stab_section_find_nearest_line): Likewise.
	* xcofflink.c (xcoff_set_import_path): Likewise.
	* xtensa-isa.c (xtensa_regfile_lookup): Likewise.
	(xtensa_regfile_lookup_shortname): Likewise.
@
text
@d87 1
a87 1
@@c argv.c:142
d98 1
a98 1
is obtained from @@code{malloc}.  All of the memory can be returned to the
d169 8
d235 1
a235 1
@@c argv.c:361
d307 18
a324 1
@@c filename_cmp.c:81
d404 1
a404 1
@@c argv.c:97
d1493 7
d1609 10
d1773 16
d1890 1
a1890 1
@@c argv.c:306
@


1.41
log
@libiberty: documentation markup and order fixes.

libiberty/:
	* splay-tree.c: Escape wrapping newlines in texinfo markup
	with '@@', to fix function declaration output rendering.
	* gather-docs: Relax and improve macro name matching to actually
	match all current names and to allow input line wrapping.
	* bsearch.c, concat.c, crc32.c, fnmatch.txh, fopen_unlocked.c,
	hashtab.c, insque.c, make-relative-prefix.c, memchr.c, memcmp.c,
	memcpy.c, memmem.c, memmove.c, mempcpy.c, memset.c,
	pexecute.txh, random.c, setenv.c, setproctitle.c,
	simple-object.txh, snprintf.c, stpncpy.c, strncmp.c, strtod.c,
	strtol.c, vasprintf.c, vprintf.c, vsnprintf.c, xmemdup.c:
	Wrap long texinfo input lines.
	* functions.texi: Regenerate.
@
text
@d299 18
@


1.40
log
@merge from gcc
@
text
@a5 41
@@c splay-tree.c:277
@@defvr Extension HOST_CHARSET
This macro indicates the basic character set and encoding used by the
host: more precisely, the encoding used for character constants in
preprocessor @@samp{#if} statements (the C "execution character set").
It is defined by @@file{safe-ctype.h}, and will be an integer constant
with one of the following values:

@@ftable @@code
@@item HOST_CHARSET_UNKNOWN
The host character set is unknown - that is, not one of the next two
possibilities.

@@item HOST_CHARSET_ASCII
The host character set is ASCII.

@@item HOST_CHARSET_EBCDIC
The host character set is some variant of EBCDIC.  (Only one of the
nineteen EBCDIC varying characters is tested; exercise caution.)
@@end ftable
@@end defvr
@@deftypefn Supplemental splay_tree splay_tree_new_with_typed_alloc
(splay_tree_compare_fn @@var{compare_fn},
splay_tree_delete_key_fn @@var{delete_key_fn},
splay_tree_delete_value_fn @@var{delete_value_fn},
splay_tree_allocate_fn @@var{tree_allocate_fn},
splay_tree_allocate_fn @@var{node_allocate_fn},
splay_tree_deallocate_fn @@var{deallocate_fn},
void * @@var{allocate_data})

This function creates a splay tree that uses two different allocators
@@var{tree_allocate_fn} and @@var{node_allocate_fn} to use for allocating the
tree itself and its nodes respectively.  This is useful when variables of
different types need to be allocated with different allocators.

The splay tree will use @@var{compare_fn} to compare nodes,
@@var{delete_key_fn} to deallocate keys, and @@var{delete_value_fn} to
deallocate values.

@@end deftypefn

d72 3
a74 1
@@deftypefn Supplemental void* bsearch (const void *@@var{key}, const void *@@var{base}, size_t @@var{nmemb}, size_t @@var{size}, int (*@@var{compar})(const void *, const void *))
d141 1
a141 1
@@c make-temp-file.c:95
d159 2
a160 1
@@deftypefn Extension char* concat (const char *@@var{s1}, const char *@@var{s2}, @@dots{}, @@code{NULL})
d170 2
a171 1
@@deftypefn Extension unsigned int crc32 (const unsigned char *@@var{buf}, int @@var{len}, unsigned int @@var{init})
d262 3
a264 2
@@c fopen_unlocked.c:48
@@deftypefn Extension {FILE *} fdopen_unlocked (int @@var{fildes}, const char * @@var{mode})
d300 2
a301 1
@@deftypefn Replacement int fnmatch (const char *@@var{pattern}, const char *@@var{string}, int @@var{flags})
d351 2
a352 1
@@deftypefn Extension {FILE *} fopen_unlocked (const char *@@var{path}, const char * @@var{mode})
d371 3
a373 2
@@c fopen_unlocked.c:57
@@deftypefn Extension {FILE *} freopen_unlocked (const char * @@var{path}, const char * @@var{mode}, FILE * @@var{stream})
d466 22
d489 3
a491 3
@@deftypefn Supplemental htab_t htab_create_typed_alloc (size_t @@var{size},
htab_hash @@var{hash_f}, htab_eq @@var{eq_f}, htab_del @@var{del_f},
htab_alloc @@var{alloc_tab_f}, htab_alloc @@var{alloc_f},
d516 2
a517 1
@@deftypefn Supplemental void insque (struct qelem *@@var{elem}, struct qelem *@@var{pred})
d636 2
a637 1
@@deftypefn Extension {const char*} make_relative_prefix (const char *@@var{progname}, const char *@@var{bin_prefix}, const char *@@var{prefix})
d661 1
a661 1
@@c make-temp-file.c:173
d671 2
a672 1
@@deftypefn Supplemental void* memchr (const void *@@var{s}, int @@var{c}, size_t @@var{n})
d685 2
a686 1
@@deftypefn Supplemental int memcmp (const void *@@var{x}, const void *@@var{y}, size_t @@var{count})
d697 2
a698 1
@@deftypefn Supplemental void* memcpy (void *@@var{out}, const void *@@var{in}, size_t @@var{length})
d706 2
a707 1
@@deftypefn Supplemental void* memmem (const void *@@var{haystack}, size_t @@var{haystack_len} const void *@@var{needle}, size_t @@var{needle_len})
d716 2
a717 1
@@deftypefn Supplemental void* memmove (void *@@var{from}, const void *@@var{to}, size_t @@var{count})
d725 2
a726 1
@@deftypefn Supplemental void* mempcpy (void *@@var{out}, const void *@@var{in}, size_t @@var{length})
d734 2
a735 1
@@deftypefn Supplemental void* memset (void *@@var{s}, int @@var{c}, size_t @@var{count})
d760 1
a760 1
@@c pexecute.txh:266
d769 3
a771 2
@@c pexecute.txh:241
@@deftypefn Extension int pex_get_status (struct pex_obj *@@var{obj}, int @@var{count}, int *@@var{vector})
d780 3
a782 2
@@c pexecute.txh:250
@@deftypefn Extension int pex_get_times (struct pex_obj *@@var{obj}, int @@var{count}, struct pex_time *@@var{vector})
d799 2
a800 1
@@deftypefn Extension {struct pex_obj *} pex_init (int @@var{flags}, const char *@@var{pname}, const char *@@var{tempbase})
d831 3
a833 2
@@c pexecute.txh:155
@@deftypefn Extension {FILE *} pex_input_file (struct pex_obj *@@var{obj}, int @@var{flags}, const char *@@var{in_name})
d850 3
a852 2
@@c pexecute.txh:172
@@deftypefn Extension {FILE *} pex_input_pipe (struct pex_obj *@@var{obj}, int @@var{binary})
d896 5
a900 2
@@c pexecute.txh:274
@@deftypefn Extension {const char *} pex_one (int @@var{flags}, const char *@@var{executable}, char * const *@@var{argv}, const char *@@var{pname}, const char *@@var{outname}, const char *@@var{errname}, int *@@var{status}, int *@@var{err})
d912 3
a914 2
@@c pexecute.txh:228
@@deftypefn Extension {FILE *} pex_read_err (struct pex_obj *@@var{obj}, int @@var{binary})
d926 3
a928 2
@@c pexecute.txh:216
@@deftypefn Extension {FILE *} pex_read_output (struct pex_obj *@@var{obj}, int @@var{binary})
d940 4
a943 2
@@c pexecute.txh:33
@@deftypefn Extension {const char *} pex_run (struct pex_obj *@@var{obj}, int @@var{flags}, const char *@@var{executable}, char * const *@@var{argv}, const char *@@var{outname}, const char *@@var{errname}, int *@@var{err})
d1052 5
a1056 2
@@c pexecute.txh:142
@@deftypefn Extension {const char *} pex_run_in_environment (struct pex_obj *@@var{obj}, int @@var{flags}, const char *@@var{executable}, char * const *@@var{argv}, char * const *@@var{env}, int @@var{env_size}, const char *@@var{outname}, const char *@@var{errname}, int *@@var{err})
d1069 5
a1073 2
@@c pexecute.txh:286
@@deftypefn Extension int pexecute (const char *@@var{program}, char * const *@@var{argv}, const char *@@var{this_pname}, const char *@@var{temp_base}, char **@@var{errmsg_fmt}, char **@@var{errmsg_arg}, int @@var{flags})
d1100 1
a1100 1
@@c pexecute.txh:294
d1110 2
a1111 1
@@deftypefnx Supplement void* initstate (unsigned int @@var{seed}, void *@@var{arg_state}, unsigned long @@var{n})
d1123 3
a1125 2
@@c concat.c:173
@@deftypefn Extension char* reconcat (char *@@var{optr}, const char *@@var{s1}, @@dots{}, @@code{NULL})
d1155 3
a1157 2
@@c setenv.c:22
@@deftypefn Supplemental int setenv (const char *@@var{name}, const char *@@var{value}, int @@var{overwrite})
d1168 2
a1169 2
@@c setproctitle.c:30
@@deftypefn Supplemental void setproctitle (const char *@@var{fmt} ...)
d1203 4
a1206 2
@@c simple-object.txh:87
@@deftypefn Extension {const char *} simple_object_attributes_compare (simple_object_attributes *@@var{attrs1}, simple_object_attributes *@@var{attrs2}, int *@@var{err})
d1215 3
a1217 2
@@c simple-object.txh:73
@@deftypefn Extension {simple_object_attributes *} simple_object_fetch_attributes (simple_object_read *@@var{simple_object}, const char **@@var{errmsg}, int *@@var{err})
d1231 4
a1234 2
@@c simple-object.txh:44
@@deftypefn Extension {int} simple_object_find_section (simple_object_read *@@var{simple_object} off_t *@@var{offset}, off_t *@@var{length}, const char **@@var{errmsg}, int *@@var{err})           
d1256 5
a1260 2
@@c simple-object.txh:25
@@deftypefn Extension {const char *} simple_object_find_sections (simple_object_read *@@var{simple_object}, int (*@@var{pfn}) (void *@@var{data}, const char *@@var{name}, off_t @@var{offset}, off_t @@var{length}), void *@@var{data}, int *@@var{err})
d1280 3
a1282 1
@@deftypefn Extension {simple_object_read *} simple_object_open_read (int @@var{descriptor}, off_t @@var{offset}, const char *{segment_name}, const char **@@var{errmsg}, int *@@var{err})
d1305 3
a1307 2
@@c simple-object.txh:96
@@deftypefn Extension {void} simple_object_release_attributes (simple_object_attributes *@@var{attrs})
d1313 3
a1315 2
@@c simple-object.txh:66
@@deftypefn Extension {void} simple_object_release_read (simple_object_read *@@var{simple_object})
d1322 3
a1324 2
@@c simple-object.txh:164
@@deftypefn Extension {void} simple_object_release_write (simple_object_write *@@var{simple_object})
d1330 4
a1333 2
@@c simple-object.txh:102
@@deftypefn Extension {simple_object_write *} simple_object_start_write (simple_object_attributes @@var{attrs}, const char *@@var{segment_name}, const char **@@var{errmsg}, int *@@var{err})
d1351 5
a1355 2
@@c simple-object.txh:137
@@deftypefn Extension {const char *} simple_object_write_add_data (simple_object_write *@@var{simple_object}, simple_object_write_section *@@var{section}, const void *@@var{buffer}, size_t @@var{size}, int @@var{copy}, int *@@var{err})
d1369 4
a1372 2
@@c simple-object.txh:120
@@deftypefn Extension {simple_object_write_section *} simple_object_write_create_section (simple_object_write *@@var{simple_object}, const char *@@var{name}, unsigned int @@var{align}, const char **@@var{errmsg}, int *@@var{err})
d1389 3
a1391 2
@@c simple-object.txh:151
@@deftypefn Extension {const char *} simple_object_write_to_file (simple_object_write *@@var{simple_object}, int @@var{descriptor}, int *@@var{err})
d1405 2
a1406 1
@@deftypefn Supplemental int snprintf (char *@@var{buf}, size_t @@var{n}, const char *@@var{format}, ...)
d1429 21
d1459 2
a1460 1
@@deftypefn Supplemental char* stpncpy (char *@@var{dst}, const char *@@var{src}, size_t @@var{len})
d1542 2
a1543 1
@@deftypefn Supplemental int strncmp (const char *@@var{s1}, const char *@@var{s2}, size_t @@var{n})
d1620 2
a1621 1
@@deftypefn Supplemental double strtod (const char *@@var{string}, char **@@var{endptr})
d1641 4
a1644 2
@@deftypefn Supplemental {long int} strtol (const char *@@var{string}, char **@@var{endptr}, int @@var{base})
@@deftypefnx Supplemental {unsigned long int} strtoul (const char *@@var{string}, char **@@var{endptr}, int @@var{base})
d1753 2
a1754 1
@@deftypefn Extension int vasprintf (char **@@var{resptr}, const char *@@var{format}, va_list @@var{args})
d1775 4
a1778 2
@@deftypefnx Supplemental int vfprintf (FILE *@@var{stream}, const char *@@var{format}, va_list @@var{ap})
@@deftypefnx Supplemental int vsprintf (char *@@var{str}, const char *@@var{format}, va_list @@var{ap})
d1790 2
a1791 1
@@deftypefn Supplemental int vsnprintf (char *@@var{buf}, size_t @@var{n}, const char *@@var{format}, va_list @@var{ap})
d1880 2
a1881 1
@@deftypefn Replacement void* xmemdup (void *@@var{input}, size_t @@var{copy_size}, size_t @@var{alloc_size})
@


1.39
log
@merge from gcc
@
text
@d1184 180
@


1.38
log
@merge from gcc
@
text
@d1150 1
a1150 1
@@deftypefn Supplemental void setproctitle(const char *@@var{fmt} ...)
@


1.37
log
@merge from gcc
@
text
@d670 1
a670 1
@@c make-temp-file.c:168
d1149 8
@


1.36
log
@	* functions.texi: Rebuild.
@
text
@d6 1
a6 1
@@c safe-ctype.c:25
d27 19
d499 18
@


1.35
log
@merge from gcc
@
text
@d4 1
a4 1
@@c and let gather-docs build you a new copy.
d107 1
a107 1
@@c argv.c:124
d148 1
a148 1
@@c choose-temp.c:42
d201 13
d245 1
a245 1
@@c argv.c:348
d633 1
a633 1
@@c make-temp-file.c:163
d1518 1
a1518 1
@@c argv.c:293
@


1.34
log
@merge from gcc
@
text
@d188 15
d1129 9
a1137 7
This function is similar to sprintf, but it will print at most @@var{n}
characters.  On error the return value is -1, otherwise it returns the
number of characters that would have been printed had @@var{n} been
sufficiently large, regardless of the actual value of @@var{n}.  Note
some pre-C99 system libraries do not implement this correctly so users
cannot generally rely on the return value if the system version of
this function is used.
d1484 9
a1492 7
This function is similar to vsprintf, but it will print at most
@@var{n} characters.  On error the return value is -1, otherwise it
returns the number of characters that would have been printed had
@@var{n} been sufficiently large, regardless of the actual value of
@@var{n}.  Note some pre-C99 system libraries do not implement this
correctly so users cannot generally rely on the return value if the
system version of this function is used.
@


1.33
log
@merge from gcc
@
text
@d161 1
a161 1
@@c make-temp-file.c:87
d605 1
a605 1
@@c make-temp-file.c:137
d646 9
@


1.32
log
@merge from gcc
@
text
@d691 3
a693 1
Clean up and free all data associated with @@var{obj}.
d819 1
a819 1
@@c pexecute.txh:272
d982 1
a982 1
@@c pexecute.txh:284
d991 1
a991 1
@@c strsignal.c:539
d1010 1
a1010 1
@@c pexecute.txh:292
d1261 1
a1261 1
@@c strsignal.c:446
d1327 1
a1327 1
@@c strsignal.c:500
@


1.31
log
@merge from gcc
@
text
@d217 1
a217 1
@@c argv.c:293
d271 1
a271 1
@@c filename_cmp.c:28
d274 5
a278 4
Return zero if the two paths @@var{s1} and @@var{s2} are equivalent.
If not equivalent, the returned value is similar to what strcmp would
return.  In other words, it returns a negative value if @@var{s1} is less
than @@var{s2}, or a positive value if @@var{s2} is greater than @@var{s2}.
d280 1
a280 1
This function does not normalize path names. As a result, this function
d1475 9
@


1.30
log
@merge from gcc
@
text
@d271 16
@


1.29
log
@        include/
        * libiberty.h (PEX_STDERR_TO_PIPE): New define.
        (PEX_BINARY_ERROR): New define.
        (pex_read_err): New function.

        libiberty/
        * pex-common.h (struct pex_obj): New fields
        stderr_pipe and read_err.
        * pex-common.c (pex_init_common): Initialize
        stderr_pipe.
        (pex_run_in_environment): Add error checking
        for PEX_STDERR_TO_PIPE.  Create a pipe
        for stderr if necessary.
        (pex_read_err): New.
        (pex_free): Close read_err.
        * pexecute.txh: Document changes.
        * functions.texi: Regenerated.
@
text
@d156 1
a156 1
This function is provided for backwards compatability only.  Its use is
d423 1
a423 1
as a hexidecimal digit.  The result is undefined if you pass an
@


1.28
log
@	* strsignal.c (psignal): Change type of signo to int.
	* functions.texi: Regenerate.
@
text
@d653 1
a653 1
@@c mkstemps.c:54
d671 1
a671 1
@@c pexecute.txh:244
d678 1
a678 1
@@c pexecute.txh:219
d688 1
a688 1
@@c pexecute.txh:228
d737 1
a737 1
@@c pexecute.txh:146
d755 1
a755 1
@@c pexecute.txh:163
d800 1
a800 1
@@c pexecute.txh:250
d813 14
a826 1
@@c pexecute.txh:207
d877 1
d880 2
a881 1
The standard input (output) of the program should be read (written) in
d887 7
d949 1
a949 1
@@c pexecute.txh:133
d963 2
a964 2
@@c pexecute.txh:262
@@deftypefn Extension int pexecute (const char *@@var{program}, char * const *@@var{argv}, const char *@@var{this_pname}, const char *@@var{temp_base}, char **@@var{errmsg_fmt}, char **@@var{errmsg_arg}, int flags)
d991 1
a991 1
@@c pexecute.txh:270
@


1.27
log
@merge from gcc
@
text
@d951 1
a951 1
@@deftypefn Supplemental void psignal (unsigned @@var{signo}, char *@@var{message})
@


1.26
log
@merge from gcc
@
text
@d671 1
a671 1
@@c pexecute.txh:231
d678 1
a678 1
@@c pexecute.txh:206
d688 1
a688 1
@@c pexecute.txh:215
d737 1
a737 1
@@c pexecute.txh:133
d755 1
a755 1
@@c pexecute.txh:150
d800 1
a800 1
@@c pexecute.txh:237
d813 1
a813 1
@@c pexecute.txh:194
d927 15
a941 1
@@c pexecute.txh:249
d969 1
a969 1
@@c pexecute.txh:257
@


1.25
log
@merge from gcc
@
text
@d671 1
a671 1
@@c pexecute.txh:169
d678 1
a678 1
@@c pexecute.txh:144
d688 1
a688 1
@@c pexecute.txh:153
d705 1
a705 1
@@c pexecute.txh:1
d737 64
a800 1
@@c pexecute.txh:175
d813 1
a813 1
@@c pexecute.txh:132
d826 1
a826 1
@@c pexecute.txh:32
d927 1
a927 1
@@c pexecute.txh:187
d955 1
a955 1
@@c pexecute.txh:195
@


1.25.2.1
log
@	* libiberty/configure.ac: Add cygpath for mingw hosts.
	* libiberty.configure: Rebuilt.
	* libiberty/Makefile.in: Add cygpath.
	* libiberty/cygpath.c: New.

	* include/libiberty.h (pex_write_input): New declaration.

	* libiberty/pex-common.c (pex_write_input): New function.
	* libiberty/pexecute.txh (pex_write_input): Document it.
	* libiberty/pex-common.h (struct pex_funcs): New function ptr fdopenw.
	* libiberty/pex-unix.c (pex_unix_fdopenw): New function.
	(funcs): List it as our fdopenw function.
	* libiberty/pex-win32.c (pex_win32_fdopenw): New function.
	(funcs): List it as our fdopenw function.
	* libiberty/pex-djgpp.c (funcs): Leave fdopenw null.
	* libiberty/pex-msdos (funcs): Same.
	* libiberty/functions.texi: Regenerated.

	* libiberty/pex-common.h (struct pex_obj): Doc fixes.

	* libiberty/functions.texi: Regenerate.
@
text
@a236 20
@@c argv.c:293
@@deftypefn Extension void expandargv (int *@@var{argcp}, char ***@@var{argvp})

The @@var{argcp} and @@code{argvp} arguments are pointers to the usual
@@code{argc} and @@code{argv} arguments to @@code{main}.  This function
looks for arguments that begin with the character @@samp{@@@@}.  Any such
arguments are interpreted as ``response files''.  The contents of the
response file are interpreted as additional command line options.  In
particular, the file is separated into whitespace-separated strings;
each such string is taken as a command-line option.  The new options
are inserted in place of the option naming the response file, and
@@code{*argcp} and @@code{*argvp} will be updated.  If the value of
@@code{*argvp} is modified by this function, then the new value has
been dynamically allocated and can be deallocated by the caller with
@@code{freeargv}.  However, most callers will simply call
@@code{expandargv} near the beginning of @@code{main} and allow the
operating system to free the memory when the program exits.

@@end deftypefn

d671 1
a671 1
@@c pexecute.txh:198
d678 1
a678 1
@@c pexecute.txh:173
d688 1
a688 1
@@c pexecute.txh:182
d705 1
a705 1
@@c pexecute.txh:2
d737 1
a737 1
@@c pexecute.txh:204
d750 1
a750 1
@@c pexecute.txh:161
d763 1
a763 1
@@c pexecute.txh:33
d864 1
a864 30
@@c pexecute.txh:133
@@deftypefn Extension {FILE *} pex_write_input (struct pex_obj *@@var{obj}, int @@var{binary})

Return a @@code{FILE} pointer @@var{fp} for the standard input of the
first program in the pipeline; @@var{fp} is opened for writing.  You
must have passed @@code{PEX_USE_PIPES} to the @@code{pex_init} call that
returned @@var{obj}.  You must close @@var{fp} yourself with
@@code{fclose} to indicate that the pipeline's input is complete.

The file descriptor underlying @@var{fp} is marked not to be inherited
by child processes.

This call is not supported on systems which do not support pipes; it
returns with an error.  (We could implement it by writing a temporary
file, but then you would need to write all your data and close
@@var{fp} before your first call to @@code{pex_run} --- and that
wouldn't work on systems that do support pipes: the pipe would fill
up, and you would block.  So there isn't any easy way to conceal the
differences between the two types of systems.)

If you call both @@code{pex_write_input} and @@code{pex_read_output}, be
careful to avoid deadlock.  If the output pipe fills up, so that each
program in the pipeline is waiting for the next to read more data, and
you fill the input pipe by writing more data to @@var{fp}, then there
is no way to make progress: the only process that could read data from
the output pipe is you, but you are blocked on the input pipe.

@@end deftypefn

@@c pexecute.txh:216
d892 1
a892 1
@@c pexecute.txh:224
@


1.25.2.2
log
@Merge changes between binutils-csl-2_17-branchpoint and
binutils-2_17, except for the addition of generated files to CVS.
@
text
@d237 20
d691 1
a691 1
@@c pexecute.txh:259
d698 1
a698 1
@@c pexecute.txh:234
d708 1
a708 1
@@c pexecute.txh:243
d757 1
a757 64
@@c pexecute.txh:161
@@deftypefn Extension {FILE *} pex_input_file (struct pex_obj *@@var{obj}, int @@var{flags}, const char *@@var{in_name})

Return a stream for a temporary file to pass to the first program in
the pipeline as input.

The name of the input file is chosen according to the same rules
@@code{pex_run} uses to choose output file names, based on
@@var{in_name}, @@var{obj} and the @@code{PEX_SUFFIX} bit in @@var{flags}.

Don't call @@code{fclose} on the returned stream; the first call to
@@code{pex_run} closes it automatically.

If @@var{flags} includes @@code{PEX_BINARY_OUTPUT}, open the stream in
binary mode; otherwise, open it in the default mode.  Including
@@code{PEX_BINARY_OUTPUT} in @@var{flags} has no effect on Unix.
@@end deftypefn

@@c pexecute.txh:178
@@deftypefn Extension {FILE *} pex_input_pipe (struct pex_obj *@@var{obj}, int @@var{binary})

Return a stream @@var{fp} for a pipe connected to the standard input of
the first program in the pipeline; @@var{fp} is opened for writing.
You must have passed @@code{PEX_USE_PIPES} to the @@code{pex_init} call
that returned @@var{obj}.

You must close @@var{fp} using @@code{fclose} yourself when you have
finished writing data to the pipeline.

The file descriptor underlying @@var{fp} is marked not to be inherited
by child processes.

On systems that do not support pipes, this function returns
@@code{NULL}, and sets @@code{errno} to @@code{EINVAL}.  If you would
like to write code that is portable to all systems the @@code{pex}
functions support, consider using @@code{pex_input_file} instead.

There are two opportunities for deadlock using
@@code{pex_input_pipe}:

@@itemize @@bullet
@@item
Most systems' pipes can buffer only a fixed amount of data; a process
that writes to a full pipe blocks.  Thus, if you write to @@file{fp}
before starting the first process, you run the risk of blocking when
there is no child process yet to read the data and allow you to
continue.  @@code{pex_input_pipe} makes no promises about the
size of the pipe's buffer, so if you need to write any data at all
before starting the first process in the pipeline, consider using
@@code{pex_input_file} instead.

@@item
Using @@code{pex_input_pipe} and @@code{pex_read_output} together
may also cause deadlock.  If the output pipe fills up, so that each
program in the pipeline is waiting for the next to read more data, and
you fill the input pipe by writing more data to @@var{fp}, then there
is no way to make progress: the only process that could read data from
the output pipe is you, but you are blocked on the input pipe.

@@end itemize

@@end deftypefn

@@c pexecute.txh:265
d770 1
a770 1
@@c pexecute.txh:222
d913 1
a913 1
@@c pexecute.txh:277
d941 1
a941 1
@@c pexecute.txh:285
@


1.25.2.3
log
@	include/
	* libiberty.h: Declare pex_run_in_environment.

	libiberty/
	* pex-common.c: New function pex_run_in_environment.
	* pex-common.h: Add environment parameter to exec_child.
	* pex-msdos.c: Add environment parameter to pex_msdos_exec_child.
	* pex-djgpp.c: Add environment parameter to pex_djgpp_exec_child.
	(pex_djgpp_exec_child): Pass environment to child process.
	* pex-unix.c: Add environment parameter to pex_unix_exec_child.
	(pex_unix_exec_child): Pass environment to child process.
	* pex-win32.c: Add environment parameter to pex_win32_exec_child.
	New function env_compare for comparing VAR=VALUE pairs.
	(win32_spawn): Assemble environment block and pass to CreateProcess.
	(spawn_script): Pass environment through to win32_spawn.
	(pex_win32_exec_child): Pass environment through to spawn_script and
	win32_spawn.
	* functions.texi: Regenerate.
	* pexecute.txh: Document pex_run_in_environment.
@
text
@d671 1
a671 1
@@c pexecute.txh:272
d678 1
a678 1
@@c pexecute.txh:247
d688 1
a688 1
@@c pexecute.txh:256
d737 1
a737 1
@@c pexecute.txh:174
d755 1
a755 1
@@c pexecute.txh:191
d800 1
a800 1
@@c pexecute.txh:278
d813 1
a813 1
@@c pexecute.txh:235
a926 14
@@c pexecute.txh:161
@@deftypefn Extension {const char *} pex_run_in_environment (struct pex_obj *@@var{obj}, int @@var{flags}, const char *@@var{executable}, char * const *@@var{argv}, char * const *@@var{env}, int @@var{env_size}, const char *@@var{outname}, const char *@@var{errname}, int *@@var{err})

Execute one program in a pipeline, permitting the environment for the
program to be specified.  Behaviour and parameters not listed below are
as for @@code{pex_run}.

@@var{env} is the environment for the child process, specified as an array of
character pointers.  Each element of the array should point to a string of the
form @@code{VAR=VALUE}, with the exception of the last element that must be
@@code{NULL}.

@@end deftypefn

d956 1
a956 1
@@c pexecute.txh:290
d984 1
a984 1
@@c pexecute.txh:298
@


1.24
log
@Index: include/ChangeLog
2005-06-20  Geoffrey Keating  <geoffk@@apple.com>

	* libiberty.h (strverscmp): Prototype.

Index: libiberty/ChangeLog
2005-06-20  Geoffrey Keating  <geoffk@@apple.com>

	* strverscmp.c: New.
	* Makefile.in (CFILES): Add strverscmp.c.
	(CONFIGURED_OFILES): Add strverscmp.o.
	(strverscmp.o): New rule.
	(stamp-functions): Add $(srcdir) to files in source directory.
	* configure.ac (funcs): Add strverscmp.
	(AC_CHECK_FUNCS): Add strverscmp.
	* configure: Regenerate.
	* functions.texi: Regenerate.
@
text
@d217 20
d1217 1
a1217 1
@@c strverscmp.c:24
@


1.24.10.1
log
@gdb/ChangeLog:
2006-03-17  Jim Blandy  <jimb@@codesourcery.com>

	Add support for 'target remote |' on MinGW.
	* ser-mingw.c (struct pipe_state): New structure.
	(make_pipe_state, free_pipe_state, cleanup_pipe_state)
	(pipe_windows_open, pipe_windows_close, pipe_windows_read)
	(pipe_windows_write, pipe_wait_handle): New functions.
	(_initialize_ser_windows): Register a "pipe" interface based on
	them.

include/ChangeLog:
2006-03-15  Jim Blandy  <jimb@@codesourcery.com>

	* libiberty.h (pex_write_input): New declaration.

libiberty/ChangeLog:
2006-03-15  Jim Blandy  <jimb@@codesourcery.com>

	* pex-common.c (pex_write_input): New function.
	* pexecute.txh (pex_write_input): Document it.
	* pex-common.h (struct pex_funcs): New function ptr fdopenw.
	* pex-unix.c (pex_unix_fdopenw): New function.
	(funcs): List it as our fdopenw function.
	* pex-win32.c (pex_win32_fdopenw): New function.
	(funcs): List it as our fdopenw function.
	* pex-djgpp.c (funcs): Leave fdopenw null.
	* pex-msdos (funcs): Same.
	* functions.texi: Regenerated.

2006-03-12  Jim Blandy  <jimb@@red-bean.com>

	* pex-common.h (struct pex_obj): Doc fixes.

2006-03-11  Jim Blandy  <jimb@@red-bean.com>

	* functions.texi: Regenerate.
@
text
@a216 20
@@c argv.c:293
@@deftypefn Extension void expandargv (int *@@var{argcp}, char ***@@var{argvp})

The @@var{argcp} and @@code{argvp} arguments are pointers to the usual
@@code{argc} and @@code{argv} arguments to @@code{main}.  This function
looks for arguments that begin with the character @@samp{@@@@}.  Any such
arguments are interpreted as ``response files''.  The contents of the
response file are interpreted as additional command line options.  In
particular, the file is separated into whitespace-separated strings;
each such string is taken as a command-line option.  The new options
are inserted in place of the option naming the response file, and
@@code{*argcp} and @@code{*argvp} will be updated.  If the value of
@@code{*argvp} is modified by this function, then the new value has
been dynamically allocated and can be deallocated by the caller with
@@code{freeargv}.  However, most callers will simply call
@@code{expandargv} near the beginning of @@code{main} and allow the
operating system to free the memory when the program exits.

@@end deftypefn

d651 1
a651 1
@@c pexecute.txh:198
d658 1
a658 1
@@c pexecute.txh:173
d668 1
a668 1
@@c pexecute.txh:182
d685 1
a685 1
@@c pexecute.txh:2
d717 1
a717 1
@@c pexecute.txh:204
d730 1
a730 1
@@c pexecute.txh:161
d743 1
a743 1
@@c pexecute.txh:33
d844 1
a844 30
@@c pexecute.txh:133
@@deftypefn Extension {FILE *} pex_write_input (struct pex_obj *@@var{obj}, int @@var{binary})

Return a @@code{FILE} pointer @@var{fp} for the standard input of the
first program in the pipeline; @@var{fp} is opened for writing.  You
must have passed @@code{PEX_USE_PIPES} to the @@code{pex_init} call that
returned @@var{obj}.  You must close @@var{fp} yourself with
@@code{fclose} to indicate that the pipeline's input is complete.

The file descriptor underlying @@var{fp} is marked not to be inherited
by child processes.

This call is not supported on systems which do not support pipes; it
returns with an error.  (We could implement it by writing a temporary
file, but then you would need to write all your data and close
@@var{fp} before your first call to @@code{pex_run} --- and that
wouldn't work on systems that do support pipes: the pipe would fill
up, and you would block.  So there isn't any easy way to conceal the
differences between the two types of systems.)

If you call both @@code{pex_write_input} and @@code{pex_read_output}, be
careful to avoid deadlock.  If the output pipe fills up, so that each
program in the pipeline is waiting for the next to read more data, and
you fill the input pipe by writing more data to @@var{fp}, then there
is no way to make progress: the only process that could read data from
the output pipe is you, but you are blocked on the input pipe.

@@end deftypefn

@@c pexecute.txh:216
d872 1
a872 1
@@c pexecute.txh:224
d1197 1
a1197 1
@@c strverscmp.c:25
@


1.23
log
@merge from gcc
@
text
@d634 1
a634 1
@@deftypefn Replacement int mkstemps (char *@@var{template}, int @@var{suffix_len})
d636 2
a637 2
Generate a unique temporary file name from @@var{template}.
@@var{template} has the form:
d644 1
a644 1
length).  The last six characters of @@var{template} before @@var{suffix}
d894 1
a894 1
@@c concat.c:167
d1197 47
@


1.22
log
@merge from gcc
@
text
@a27 133
@@c pexecute.txh:1
@@deftypefn Extension struct pex_obj *pex_init (int @@var{flags}, const char *@@var{pname}, const char *@@var{tempbase})

Prepare to execute one or more programs, with standard output of each
program fed to standard input of the next.  This is a system
independent interface to execute a pipeline.

@@var{flags} is a bitwise combination of the following:

@@table @@code

@@vindex PEX_RECORD_TIMES
@@item PEX_RECORD_TIMES
Record subprocess times if possible.

@@vindex PEX_USE_PIPES
@@item PEX_USE_PIPES
Use pipes for communication between processes, if possible.

@@vindex PEX_SAVE_TEMPS
@@item PEX_SAVE_TEMPS
Don't delete temporary files used for communication between
processes.

@@end table

@@var{pname} is the name of program to be executed, used in error
messages.  @@var{tempbase} is a base name to use for any required
temporary files; it may be @@code{NULL} to use a randomly chosen name.

@@end deftypefn

@@c pexecute.txh:161
@@deftypefn Extension const char *pex_one (int @@var{flags}, const char *@@var{executable}, char * const *@@var{argv}, const char *@@var{pname}, const char *@@var{outname}, const char *@@var{errname}, int *@@var{status}, int *@@var{err})

An interface to @@code{pex_init} to permit the easy execution of a
single program.  The return value and most of the parameters are as
for a call to @@code{pex_run}.  @@var{flags} is restricted to a
combination of @@code{PEX_SEARCH}, @@code{PEX_STDERR_TO_STDOUT}, and
@@code{PEX_BINARY_OUTPUT}.  @@var{outname} is interpreted as if
@@code{PEX_LAST} were set.  On a successful return, *@@var{status} will
be set to the exit status of the program.

@@end deftypefn

@@c pexecute.txh:32
@@deftypefn Extension const char *pex_run (struct pex_obj *@@var{obj}, int @@var{flags}, const char *@@var{executable}, char * const *@@var{argv}, const char *@@var{outname}, const char *@@var{errname}, int *@@var{err})

Execute one program in a pipeline.  On success this returns
@@code{NULL}.  On failure it returns an error message, a statically
allocated string.

@@var{obj} is returned by a previous call to @@code{pex_init}.

@@var{flags} is a bitwise combination of the following:

@@table @@code

@@vindex PEX_LAST
@@item PEX_LAST
This must be set on the last program in the pipeline.  In particular,
it should be set when executing a single program.  The standard output
of the program will be sent to @@var{outname}, or, if @@var{outname} is
@@code{NULL}, to the standard output of the calling program.  This
should not be set if you want to call @@code{pex_read_output}
(described below).  After a call to @@code{pex_run} with this bit set,
@@var{pex_run} may no longer be called with the same @@var{obj}.

@@vindex PEX_SEARCH
@@item PEX_SEARCH
Search for the program using the user's executable search path.

@@vindex PEX_SUFFIX
@@item PEX_SUFFIX
@@var{outname} is a suffix.  See the description of @@var{outname},
below.

@@vindex PEX_STDERR_TO_STDOUT
@@item PEX_STDERR_TO_STDOUT
Send the program's standard error to standard output, if possible.

@@vindex PEX_BINARY_INPUT
@@vindex PEX_BINARY_OUTPUT
@@item PEX_BINARY_INPUT
@@itemx PEX_BINARY_OUTPUT
The standard input (output) of the program should be read (written) in
binary mode rather than text mode.  These flags are ignored on systems
which do not distinguish binary mode and text mode, such as Unix.  For
proper behavior these flags should match appropriately--a call to
@@code{pex_run} using @@code{PEX_BINARY_OUTPUT} should be followed by a
call using @@code{PEX_BINARY_INPUT}.
@@end table

@@var{executable} is the program to execute.  @@var{argv} is the set of
arguments to pass to the program; normally @@code{@@var{argv}[0]} will
be a copy of @@var{executable}.

@@var{outname} is used to set the name of the file to use for standard
output.  There are two cases in which no output file will be used: 1)
if @@code{PEX_LAST} is not set in @@var{flags}, and @@code{PEX_USE_PIPES}
was set in the call to @@code{pex_init}, and the system supports pipes;
2) if @@code{PEX_LAST} is set in @@var{flags}, and @@var{outname} is
@@code{NULL}.  Otherwise the code will use a file to hold standard
output.  If @@code{PEX_LAST} is not set, this file is considered to be
a temporary file, and it will be removed when no longer needed, unless
@@code{PEX_SAVE_TEMPS} was set in the call to @@code{pex_init}.

There are two cases to consider when setting the name of the file to
hold standard output.

First case: @@code{PEX_SUFFIX} is set in @@var{flags}.  In this case
@@var{outname} may not be @@code{NULL}.  If the @@var{tempbase} parameter
to @@code{pex_init} was not @@code{NULL}, then the output file name is
the concatenation of @@var{tempbase} and @@var{outname}.  If
@@var{tempbase} was @@code{NULL}, then the output file name is a random
file name ending in @@var{outname}.

Second case: @@code{PEX_SUFFIX} was not set in @@var{flags}.  In this
case, if @@var{outname} is not @@code{NULL}, it is used as the output
file name.  If @@var{outname} is @@code{NULL}, and @@var{tempbase} was
not NULL, the output file name is randomly chosen using
@@var{tempbase}.  Otherwise the output file name is chosen completely
at random.

@@var{errname} is the file name to use for standard error output.  If
it is @@code{NULL}, standard error is the same as the caller.
Otherwise, standard error is written to the named file.

On an error return, the code sets @@code{*@@var{err}} to an @@code{errno}
value, or to 0 if there is no relevant @@code{errno}.

@@end deftypefn

d233 1
a233 1
@@deftypefn Extension FILE * fdopen_unlocked (int @@var{fildes}, const char * @@var{mode})
d302 1
a302 1
@@deftypefn Extension FILE * fopen_unlocked (const char *@@var{path}, const char * @@var{mode})
d322 1
a322 1
@@deftypefn Extension FILE * freopen_unlocked (const char * @@var{path}, const char * @@var{mode}, FILE * @@var{stream})
d651 1
a651 1
@@c pexecute.txh:155
d658 1
a658 1
@@c pexecute.txh:131
d668 1
a668 1
@@c pexecute.txh:140
d677 2
a678 1
@@code{struct pex_time} has the following fields: @@code{user_seconds},
d685 47
a731 2
@@c pexecute.txh:119
@@deftypefn Extension FILE * pex_read_output (struct pex_obj *@@var{obj}, int @@var{binary})
d743 102
a844 1
@@c pexecute.txh:173
d872 1
a872 1
@@c pexecute.txh:181
@


1.21
log
@merge from gcc
@
text
@d179 1
a179 1
@@c asprintf.c:29
d240 1
a240 1
@@c argv.c:121
d321 1
a321 1
@@c argv.c:49
d365 1
a365 1
@@c fopen_unlocked.c:40
d434 1
a434 1
@@c fopen_unlocked.c:31
d444 1
a444 1
@@c argv.c:94
d454 1
a454 1
@@c fopen_unlocked.c:49
d513 1
a513 1
@@c hex.c:30
d523 1
a523 1
@@c hex.c:39
d532 1
a532 1
@@c hex.c:47
d1204 9
@


1.20
log
@merge from gcc
@
text
@d365 1
a365 1
@@c fopen_unlocked.c:32
d434 1
a434 1
@@c fopen_unlocked.c:23
d454 1
a454 1
@@c fopen_unlocked.c:41
d1204 9
@


1.19
log
@merge from gcc
@
text
@d365 10
d434 10
d454 10
@


1.18
log
@libiberty:
	* pex-common.c: New file.
	* pex-one.c: New file.
	* pexecute.c: New file.
	* pex-common.h: Include <stdio.h>.
	(struct pex_obj): Define.
	(struct pex_funcs): Define.
	(pex_init_common): Declare.
	* pex-unix.c: Rewrite.
	* pex-win32.c: Rewrite.
	* pex-djgpp.c: Rewrite.
	* pex-msdos.c: Rewrite.
	* testsuite/text-pexecute.c: New file.
	* pexecute.txh: Rewrite.
	* configure.ac: Check for wait3 and wait4.  Set CHECK to
	really-check rather than check-cplus-dem.
	* functions.texi: Rebuild.
	* Makefile.in: Rebuild dependencies.
	(CFILES): Add pexecute.c, pex-common.c, pex-one.c.
	(REQUIRED_OFILES): Add pexecute.o, pex-common.o, pex-one.o.
	* testsuite/Makefile.in (really-check): New target.
	(check-pexecute, test-pexecute): New targets.
	* configure: Rebuild.
include:
	* libiberty.h: Include <stdio.h>.
	(PEX_RECORD_TIMES, PEX_USE_PIPES, PEX_SAVE_TEMPS): Define.
	(PEX_LAST, PEX_SEARCH, PEX_SUFFIX, PEX_STDERR_TO_STDOUT): Define.
	(PEX_BINARY_INPUT, PEX_BINARY_OUTPUT): Define.
	(pex_init, pex_run, pex_read_output): Declare.
	(pex_get_status, pex_get_times, pex_free, pex_one): Declare.
	(struct pex_time): Define.
@
text
@d476 1
a476 1
@@deftypefn int gettimeofday (struct timeval *@@var{tp}, void *@@var{tz})
@


1.17
log
@merge from gcc
@
text
@d6 1
a6 1
@@c safe-ctype.c:24
d28 133
d179 1
a179 1
@@c asprintf.c:33
d240 1
a240 1
@@c argv.c:139
d294 1
a294 1
@@c make-temp-file.c:88
d321 1
a321 1
@@c argv.c:65
d424 1
a424 1
@@c argv.c:111
d548 1
a548 1
@@c safe-ctype.c:45
d598 1
a598 1
@@c safe-ctype.c:94
d671 1
a671 1
@@c make-temp-file.c:138
d754 19
a772 2
@@c pexecute.txh:1
@@deftypefn Extension int pexecute (const char *@@var{program}, char * const *@@var{argv}, const char *@@var{this_pname}, const char *@@var{temp_base}, char **@@var{errmsg_fmt}, char **@@var{errmsg_arg}, int flags)
d774 5
a778 1
Executes a program.
d780 4
a783 2
@@var{program} and @@var{argv} are the arguments to
@@code{execv}/@@code{execvp}.
d785 1
a785 1
@@var{this_pname} is name of the calling program (i.e., @@code{argv[0]}).
d787 2
a788 4
@@var{temp_base} is the path name, sans suffix, of a temporary file to
use if needed.  This is currently only needed for MS-DOS ports that
don't use @@code{go32} (do any still exist?).  Ports that don't need it
can pass @@code{NULL}.
d790 7
a796 9
(@@code{@@var{flags} & PEXECUTE_SEARCH}) is non-zero if @@env{PATH}
should be searched (??? It's not clear that GCC passes this flag
correctly).  (@@code{@@var{flags} & PEXECUTE_FIRST}) is nonzero for the
first process in chain.  (@@code{@@var{flags} & PEXECUTE_FIRST}) is
nonzero for the last process in chain.  The first/last flags could be
simplified to only mark the last of a chain of processes but that
requires the caller to always mark the last one (and not give up
early if some error occurs).  It's more robust to require the caller
to mark both ends of the chain.
d798 1
a798 3
The result is the pid on systems like Unix where we
@@code{fork}/@@code{exec} and on systems like WIN32 and OS/2 where we
use @@code{spawn}.  It is up to the caller to wait for the child.
d800 2
a801 2
The result is the @@code{WEXITSTATUS} on systems like MS-DOS where we
@@code{spawn} and wait for the child here.
d803 3
a805 4
Upon failure, @@var{errmsg_fmt} and @@var{errmsg_arg} are set to the
text of the error message with an optional argument (if not needed,
@@var{errmsg_arg} is set to @@code{NULL}), and @@minus{}1 is returned.
@@code{errno} is available to the caller to use.
d809 1
a809 1
@@c strsignal.c:546
d828 1
a828 1
@@c pexecute.txh:39
d831 1
a831 14
Waits for a program started by @@code{pexecute} to finish.

@@var{pid} is the process id of the task to wait for. @@var{status} is
the `status' argument to wait. @@var{flags} is currently unused
(allows future enhancement without breaking upward compatibility).
Pass 0 for now.

The result is the pid of the child reaped, or -1 for failure
(@@code{errno} says why).

On systems that don't support waiting for a particular child,
@@var{pid} is ignored.  On systems like MS-DOS that don't really
multitask @@code{pwait} is just a mechanism to provide a consistent
interface for the caller.
d850 1
a850 1
@@c concat.c:177
d893 1
a893 1
@@c strsignal.c:352
d984 1
a984 1
@@c strerror.c:671
d1058 1
a1058 1
@@c strsignal.c:387
d1079 1
a1079 1
@@c strsignal.c:451
d1121 1
a1121 1
@@c strerror.c:731
d1145 1
a1145 1
@@c strsignal.c:506
d1174 1
a1174 1
@@c vasprintf.c:51
@


1.16
log
@merge from gcc
@
text
@d342 8
d904 9
d1028 10
d1183 9
@


1.15
log
@merge from gcc
@
text
@d199 1
a199 1
@@c strerror.c:566
d362 1
a362 1
@@deftypefn Extension unsigned int hex_value (int @@var{c})
d652 1
a652 1
@@c strsignal.c:547
d749 1
a749 1
@@c strsignal.c:353
d840 1
a840 1
@@c strerror.c:670
d860 1
a860 1
@@c strerror.c:602
d905 1
a905 1
@@c strsignal.c:388
d926 1
a926 1
@@c strsignal.c:452
d968 1
a968 1
@@c strerror.c:730
d992 1
a992 1
@@c strsignal.c:507
d1011 1
a1011 1
@@c vasprintf.c:48
@


1.14
log
@asprintf.c: Change comment to note that -1 is returned upon error.
vasprintf.c: Likewise.	(vasprintf): Return -1 upon error.
functions.texi: Document changes to asprintf and vasprintf.
@
text
@d6 22
d342 1
a342 1
@@c hex.c:25
d352 1
a352 1
@@c hex.c:34
d361 1
a361 1
@@c hex.c:42
d406 72
@


1.13
log
@libiberty/ChangeLog:
2003-05-14  Jim Blandy  <jimb@@redhat.com>

	* hex.c (_hex_value): Make this unsigned.
	(hex_value): Update documentation for new return type.  hex_value
	now expands to an unsigned int expression, to avoid unexpected
	sign extension when we store it in a bfd_vma, which is larger than
	int on some platforms.
	* functions.texi: Regenerated.

include/ChangeLog:
2003-05-14  Jim Blandy  <jimb@@redhat.com>

	* libiberty.h (hex_value): Make the value an unsigned int, to
	avoid unexpected sign-extension when cast to unsigned types larger
	than int --- like bfd_vma, on some platforms.
	(_hex_value): Update declaration.
@
text
@d32 1
a32 1
not be allocated, zero is returned and @@code{NULL} is stored in
d925 1
a925 1
not be allocated, zero is returned and @@code{NULL} is stored in
@


1.12
log
@merge from gcc
@
text
@d340 1
a340 1
@@deftypefn Extension int hex_value (int @@var{c})
d346 6
@


1.12.2.1
log
@2003-05-18  Mark Kettenis  <kettenis@@gnu.org>

	Merge from mainline.
	* i386-tdep.h (I386_SIZEOF_GREGS, I386_SIZEOF_FREGS,
	I386_SIZEOF_XREGS): Remove defenitions.
	(IS_FP_REGNUM, IS_SSE_REGNUM): Remove definitions.
	* i386-tdep.c (i386_gdbarch_init): Don't set register_bytes,
	register_size, call_dummy_words and sizeof_call_dummy.
	* i386-linux-tdep.c (i386_linux_init_abi): Don't set register_bytes.
	* x86-64-tdep.c (x86_64_init_abi): Don't set register_bytes and
	register_size.
	(x86_64_register_bytes): Remove variable.
	(_initialize_x86_64_tdep): Remove function.

	* i386-linux-tdep.c (i386_linux_sigcontext_addr): Call read_memory
	with correct arguments.
	* config/i386/x86-64linux.mt (TDEPFILES): Add i386-linux-tdep.o.
@
text
@d340 1
a340 1
@@deftypefn Extension unsigned int hex_value (int @@var{c})
a345 6

The @@code{hex_value} macro returns @@code{unsigned int}, rather than
signed @@code{int}, to make it easier to use in parsing addresses from
hex dump files: a signed @@code{int} would be sign-extended when
converted to a wider unsigned type --- like @@code{bfd_vma}, on some
systems.
@


1.11
log
@merge from gcc
@
text
@d676 13
d942 13
@


1.10
log
@	* Makefile.in (CFILES): Add lrealpath.c.
	(REQUIRED_OFILES): Add lrealpath.o.
	(lrealpath.o): Add rule.
	* aclocal.m4 (libiberty_NEED_DECLARATION): Add.
	* configure.in: Add realpath and canonicalize_file_name to
	checkfuncs and AC_CHECK_FUNCS.  Use libiberty_NEED_DECLARATION
	for canonicalize_file_name.
	* lrealpath.c: New file.
	* make-relative-prefix.c: Update documentation.
	(make_relative_prefix): Simplify.  Use lbasename and lrealpath.
	* config.in: Regenerated.
	* configure: Regenerated.
	* functions.texi: Regenerated.
@
text
@d401 1
a401 1
@@code{xmalloc} or @@code{malloc}.
d479 8
d682 18
@


1.9
log
@merge from gcc
@
text
@d395 10
d408 16
a423 7
Given three strings @@var{progname}, @@var{bin_prefix}, @@var{prefix}, return a string
that gets to @@var{prefix} starting with the directory portion of @@var{progname} and
a relative pathname of the difference between @@var{bin_prefix} and @@var{prefix}.

For example, if @@var{bin_prefix} is @@code{/alpha/beta/gamma/gcc/delta}, @@var{prefix}
is @@code{/alpha/beta/gamma/omega/}, and @@var{progname} is @@code{/red/green/blue/gcc},
then this function will return @@code{/red/green/blue/../../omega/}.
d425 2
a426 2
The return value is normally allocated via @@code{malloc}.  If no relative prefix
can be found, return @@code{NULL}.
@


1.8
log
@merge from gcc
@
text
@d486 1
a486 1
@@c pexecute.c:67
d501 9
a509 8
(@@code{@@var{flags} & PEXECUTE_SEARCH}) is non-zero if @@env{PATH} should be searched
(??? It's not clear that GCC passes this flag correctly).  (@@code{@@var{flags} &
PEXECUTE_FIRST}) is nonzero for the first process in chain.
(@@code{@@var{flags} & PEXECUTE_FIRST}) is nonzero for the last process
in chain.  The first/last flags could be simplified to only mark the
last of a chain of processes but that requires the caller to always
mark the last one (and not give up early if some error occurs).
It's more robust to require the caller to mark both ends of the chain.
d544 1
a544 1
@@c pexecute.c:104
d550 3
a552 2
the `status' argument to wait. @@var{flags} is currently unused (allows
future enhancement without breaking upward compatibility).  Pass 0 for now.
d557 4
a560 3
On systems that don't support waiting for a particular child, @@var{pid} is
ignored.  On systems like MS-DOS that don't really multitask @@code{pwait}
is just a mechanism to provide a consistent interface for the caller.
@


1.7
log
@merge from gcc
@
text
@d279 1
a279 1
@@c getruntime.c:78
d325 2
a326 1
call to @@code{hex_p} or @@code{hex_value}.
d330 1
a330 1
@@c hex.c:33
d339 1
a339 1
@@c hex.c:41
d392 16
@


1.7.20.1
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@a5 22
@@c safe-ctype.c:24
@@defvr Extension HOST_CHARSET
This macro indicates the basic character set and encoding used by the
host: more precisely, the encoding used for character constants in
preprocessor @@samp{#if} statements (the C "execution character set").
It is defined by @@file{safe-ctype.h}, and will be an integer constant
with one of the following values:

@@ftable @@code
@@item HOST_CHARSET_UNKNOWN
The host character set is unknown - that is, not one of the next two
possibilities.

@@item HOST_CHARSET_ASCII
The host character set is ASCII.

@@item HOST_CHARSET_EBCDIC
The host character set is some variant of EBCDIC.  (Only one of the
nineteen EBCDIC varying characters is tested; exercise caution.)
@@end ftable
@@end defvr

d32 1
a32 1
not be allocated, minus one is returned and @@code{NULL} is stored in
d279 1
a279 1
@@c getruntime.c:82
d320 1
a320 1
@@c hex.c:30
d325 1
a325 2
call to @@code{hex_p} or @@code{hex_value}.  If you fail to call it, a
default ASCII-based table will normally be used on ASCII systems.
d329 1
a329 1
@@c hex.c:39
d338 2
a339 2
@@c hex.c:47
@@deftypefn Extension unsigned int hex_value (int @@var{c})
a345 6
The @@code{hex_value} macro returns @@code{unsigned int}, rather than
signed @@code{int}, to make it easier to use in parsing addresses from
hex dump files: a signed @@code{int} would be sign-extended when
converted to a wider unsigned type --- like @@code{bfd_vma}, on some
systems.

a377 72
@@c safe-ctype.c:45
@@deffn  Extension ISALPHA  (@@var{c})
@@deffnx Extension ISALNUM  (@@var{c})
@@deffnx Extension ISBLANK  (@@var{c})
@@deffnx Extension ISCNTRL  (@@var{c})
@@deffnx Extension ISDIGIT  (@@var{c})
@@deffnx Extension ISGRAPH  (@@var{c})
@@deffnx Extension ISLOWER  (@@var{c})
@@deffnx Extension ISPRINT  (@@var{c})
@@deffnx Extension ISPUNCT  (@@var{c})
@@deffnx Extension ISSPACE  (@@var{c})
@@deffnx Extension ISUPPER  (@@var{c})
@@deffnx Extension ISXDIGIT (@@var{c})

These twelve macros are defined by @@file{safe-ctype.h}.  Each has the
same meaning as the corresponding macro (with name in lowercase)
defined by the standard header @@file{ctype.h}.  For example,
@@code{ISALPHA} returns true for alphabetic characters and false for
others.  However, there are two differences between these macros and
those provided by @@file{ctype.h}:

@@itemize @@bullet
@@item These macros are guaranteed to have well-defined behavior for all 
values representable by @@code{signed char} and @@code{unsigned char}, and
for @@code{EOF}.

@@item These macros ignore the current locale; they are true for these
fixed sets of characters:
@@multitable {@@code{XDIGIT}} {yada yada yada yada yada yada yada yada}
@@item @@code{ALPHA}  @@tab @@kbd{A-Za-z}
@@item @@code{ALNUM}  @@tab @@kbd{A-Za-z0-9}
@@item @@code{BLANK}  @@tab @@kbd{space tab}
@@item @@code{CNTRL}  @@tab @@code{!PRINT}
@@item @@code{DIGIT}  @@tab @@kbd{0-9}
@@item @@code{GRAPH}  @@tab @@code{ALNUM || PUNCT}
@@item @@code{LOWER}  @@tab @@kbd{a-z}
@@item @@code{PRINT}  @@tab @@code{GRAPH ||} @@kbd{space}
@@item @@code{PUNCT}  @@tab @@kbd{`~!@@@@#$%^&*()_-=+[@@{]@@}\|;:'",<.>/?}
@@item @@code{SPACE}  @@tab @@kbd{space tab \n \r \f \v}
@@item @@code{UPPER}  @@tab @@kbd{A-Z}
@@item @@code{XDIGIT} @@tab @@kbd{0-9A-Fa-f}
@@end multitable

Note that, if the host character set is ASCII or a superset thereof,
all these macros will return false for all values of @@code{char} outside
the range of 7-bit ASCII.  In particular, both ISPRINT and ISCNTRL return
false for characters with numeric values from 128 to 255.
@@end itemize
@@end deffn

@@c safe-ctype.c:94
@@deffn  Extension ISIDNUM         (@@var{c})
@@deffnx Extension ISIDST          (@@var{c})
@@deffnx Extension IS_VSPACE       (@@var{c})
@@deffnx Extension IS_NVSPACE      (@@var{c})
@@deffnx Extension IS_SPACE_OR_NUL (@@var{c})
@@deffnx Extension IS_ISOBASIC     (@@var{c})
These six macros are defined by @@file{safe-ctype.h} and provide
additional character classes which are useful when doing lexical
analysis of C or similar languages.  They are true for the following
sets of characters:

@@multitable {@@code{SPACE_OR_NUL}} {yada yada yada yada yada yada yada yada}
@@item @@code{IDNUM}        @@tab @@kbd{A-Za-z0-9_}
@@item @@code{IDST}         @@tab @@kbd{A-Za-z_}
@@item @@code{VSPACE}       @@tab @@kbd{\r \n}
@@item @@code{NVSPACE}      @@tab @@kbd{space tab \f \v \0}
@@item @@code{SPACE_OR_NUL} @@tab @@code{VSPACE || NVSPACE}
@@item @@code{ISOBASIC}     @@tab @@code{VSPACE || NVSPACE || PRINT}
@@end multitable
@@end deffn

a393 35
@@c lrealpath.c:25
@@deftypefn Replacement {const char*} lrealpath (const char *@@var{name})

Given a pointer to a string containing a pathname, returns a canonical
version of the filename.  Symlinks will be resolved, and ``.'' and ``..''
components will be simplified.  The returned value will be allocated using
@@code{malloc}, or @@code{NULL} will be returned on a memory allocation error.

@@end deftypefn

@@c make-relative-prefix.c:24
@@deftypefn Extension {const char*} make_relative_prefix (const char *@@var{progname}, const char *@@var{bin_prefix}, const char *@@var{prefix})

Given three paths @@var{progname}, @@var{bin_prefix}, @@var{prefix},
return the path that is in the same position relative to
@@var{progname}'s directory as @@var{prefix} is relative to
@@var{bin_prefix}.  That is, a string starting with the directory
portion of @@var{progname}, followed by a relative pathname of the
difference between @@var{bin_prefix} and @@var{prefix}.

If @@var{progname} does not contain any directory separators,
@@code{make_relative_prefix} will search @@env{PATH} to find a program
named @@var{progname}.  Also, if @@var{progname} is a symbolic link,
the symbolic link will be resolved.

For example, if @@var{bin_prefix} is @@code{/alpha/beta/gamma/gcc/delta},
@@var{prefix} is @@code{/alpha/beta/gamma/omega/}, and @@var{progname} is
@@code{/red/green/blue/gcc}, then this function will return
@@code{/red/green/blue/../../omega/}.

The return value is normally allocated via @@code{malloc}.  If no
relative prefix can be found, return @@code{NULL}.

@@end deftypefn

a442 8
@@c mempcpy.c:23
@@deftypefn Supplemental void* mempcpy (void *@@var{out}, const void *@@var{in}, size_t @@var{length})

Copies @@var{length} bytes from memory region @@var{in} to region
@@var{out}.  Returns a pointer to @@var{out} + @@var{length}.

@@end deftypefn

d469 1
a469 1
@@c pexecute.txh:1
d484 8
a491 9
(@@code{@@var{flags} & PEXECUTE_SEARCH}) is non-zero if @@env{PATH}
should be searched (??? It's not clear that GCC passes this flag
correctly).  (@@code{@@var{flags} & PEXECUTE_FIRST}) is nonzero for the
first process in chain.  (@@code{@@var{flags} & PEXECUTE_FIRST}) is
nonzero for the last process in chain.  The first/last flags could be
simplified to only mark the last of a chain of processes but that
requires the caller to always mark the last one (and not give up
early if some error occurs).  It's more robust to require the caller
to mark both ends of the chain.
d526 1
a526 1
@@c pexecute.txh:39
d532 2
a533 3
the `status' argument to wait. @@var{flags} is currently unused
(allows future enhancement without breaking upward compatibility).
Pass 0 for now.
d538 3
a540 4
On systems that don't support waiting for a particular child,
@@var{pid} is ignored.  On systems like MS-DOS that don't really
multitask @@code{pwait} is just a mechanism to provide a consistent
interface for the caller.
a628 13
@@c snprintf.c:28
@@deftypefn Supplemental int snprintf (char *@@var{buf}, size_t @@var{n}, const char *@@var{format}, ...)

This function is similar to sprintf, but it will print at most @@var{n}
characters.  On error the return value is -1, otherwise it returns the
number of characters that would have been printed had @@var{n} been
sufficiently large, regardless of the actual value of @@var{n}.  Note
some pre-C99 system libraries do not implement this correctly so users
cannot generally rely on the return value if the system version of
this function is used.

@@end deftypefn

a637 18
@@c stpcpy.c:23
@@deftypefn Supplemental char* stpcpy (char *@@var{dst}, const char *@@var{src})

Copies the string @@var{src} into @@var{dst}.  Returns a pointer to
@@var{dst} + strlen(@@var{src}).

@@end deftypefn

@@c stpncpy.c:23
@@deftypefn Supplemental char* stpncpy (char *@@var{dst}, const char *@@var{src}, size_t @@var{len})

Copies the string @@var{src} into @@var{dst}, copying exactly @@var{len}
and padding with zeros if necessary.  If @@var{len} < strlen(@@var{src})
then return @@var{dst} + @@var{len}, otherwise returns @@var{dst} +
strlen(@@var{src}).

@@end deftypefn

d841 1
a841 1
not be allocated, minus one is returned and @@code{NULL} is stored in
a863 13

@@end deftypefn

@@c vsnprintf.c:28
@@deftypefn Supplemental int vsnprintf (char *@@var{buf}, size_t @@var{n}, const char *@@var{format}, va_list @@var{ap})

This function is similar to vsprintf, but it will print at most
@@var{n} characters.  On error the return value is -1, otherwise it
returns the number of characters that would have been printed had
@@var{n} been sufficiently large, regardless of the actual value of
@@var{n}.  Note some pre-C99 system libraries do not implement this
correctly so users cannot generally rely on the return value if the
system version of this function is used.
@


1.7.18.1
log
@2002-12-23  David Carlton  <carlton@@math.stanford.edu>

	* Merge from mainline; tag is carlton_dictionary-20021223-merge.
@
text
@d279 1
a279 1
@@c getruntime.c:82
d325 1
a325 2
call to @@code{hex_p} or @@code{hex_value}.  If you fail to call it, a
default ASCII-based table will normally be used on ASCII systems.
d329 1
a329 1
@@c hex.c:34
d338 1
a338 1
@@c hex.c:42
a390 16

@@end deftypefn

@@c make-relative-prefix.c:24
@@deftypefn Extension {const char*} make_relative_prefix (const char *@@var{progname}, const char *@@var{bin_prefix}, const char *@@var{prefix})

Given three strings @@var{progname}, @@var{bin_prefix}, @@var{prefix}, return a string
that gets to @@var{prefix} starting with the directory portion of @@var{progname} and
a relative pathname of the difference between @@var{bin_prefix} and @@var{prefix}.

For example, if @@var{bin_prefix} is @@code{/alpha/beta/gamma/gcc/delta}, @@var{prefix}
is @@code{/alpha/beta/gamma/omega/}, and @@var{progname} is @@code{/red/green/blue/gcc},
then this function will return @@code{/red/green/blue/../../omega/}.

The return value is normally allocated via @@code{malloc}.  If no relative prefix
can be found, return @@code{NULL}.
@


1.7.18.2
log
@2003-02-07  David Carlton  <carlton@@math.stanford.edu>

	* Merge with mainline; tag is carlton_dictionary-20030207-merge.
@
text
@d486 1
a486 1
@@c pexecute.txh:1
d501 8
a508 9
(@@code{@@var{flags} & PEXECUTE_SEARCH}) is non-zero if @@env{PATH}
should be searched (??? It's not clear that GCC passes this flag
correctly).  (@@code{@@var{flags} & PEXECUTE_FIRST}) is nonzero for the
first process in chain.  (@@code{@@var{flags} & PEXECUTE_FIRST}) is
nonzero for the last process in chain.  The first/last flags could be
simplified to only mark the last of a chain of processes but that
requires the caller to always mark the last one (and not give up
early if some error occurs).  It's more robust to require the caller
to mark both ends of the chain.
d543 1
a543 1
@@c pexecute.txh:39
d549 2
a550 3
the `status' argument to wait. @@var{flags} is currently unused
(allows future enhancement without breaking upward compatibility).
Pass 0 for now.
d555 3
a557 4
On systems that don't support waiting for a particular child,
@@var{pid} is ignored.  On systems like MS-DOS that don't really
multitask @@code{pwait} is just a mechanism to provide a consistent
interface for the caller.
@


1.7.18.3
log
@2003-03-05  David Carlton  <carlton@@math.stanford.edu>

	* Merge with mainline.  Tag is carlton_dictionary-20030305-merge.
@
text
@a394 10
@@c lrealpath.c:25
@@deftypefn Replacement {const char*} lrealpath (const char *@@var{name})

Given a pointer to a string containing a pathname, returns a canonical
version of the filename.  Symlinks will be resolved, and ``.'' and ``..''
components will be simplified.  The returned value will be allocated using
@@code{xmalloc} or @@code{malloc}.

@@end deftypefn

d398 7
a404 16
Given three paths @@var{progname}, @@var{bin_prefix}, @@var{prefix},
return the path that is in the same position relative to
@@var{progname}'s directory as @@var{prefix} is relative to
@@var{bin_prefix}.  That is, a string starting with the directory
portion of @@var{progname}, followed by a relative pathname of the
difference between @@var{bin_prefix} and @@var{prefix}.

If @@var{progname} does not contain any directory separators,
@@code{make_relative_prefix} will search @@env{PATH} to find a program
named @@var{progname}.  Also, if @@var{progname} is a symbolic link,
the symbolic link will be resolved.

For example, if @@var{bin_prefix} is @@code{/alpha/beta/gamma/gcc/delta},
@@var{prefix} is @@code{/alpha/beta/gamma/omega/}, and @@var{progname} is
@@code{/red/green/blue/gcc}, then this function will return
@@code{/red/green/blue/../../omega/}.
d406 2
a407 2
The return value is normally allocated via @@code{malloc}.  If no
relative prefix can be found, return @@code{NULL}.
@


1.7.18.4
log
@2003-04-16  David Carlton  <carlton@@bactrian.org>

	* Merge with mainline; tag is carlton_dictionary-20030416-merge.
@
text
@d401 1
a401 1
@@code{malloc}, or @@code{NULL} will be returned on a memory allocation error.
a478 8
@@c mempcpy.c:23
@@deftypefn Supplemental void* mempcpy (void *@@var{out}, const void *@@var{in}, size_t @@var{length})

Copies @@var{length} bytes from memory region @@var{in} to region
@@var{out}.  Returns a pointer to @@var{out} + @@var{length}.

@@end deftypefn

a673 18

@@end deftypefn

@@c stpcpy.c:23
@@deftypefn Supplemental char* stpcpy (char *@@var{dst}, const char *@@var{src})

Copies the string @@var{src} into @@var{dst}.  Returns a pointer to
@@var{dst} + strlen(@@var{src}).

@@end deftypefn

@@c stpncpy.c:23
@@deftypefn Supplemental char* stpncpy (char *@@var{dst}, const char *@@var{src}, size_t @@var{len})

Copies the string @@var{src} into @@var{dst}, copying exactly @@var{len}
and padding with zeros if necessary.  If @@var{len} < strlen(@@var{src})
then return @@var{dst} + @@var{len}, otherwise returns @@var{dst} +
strlen(@@var{src}).
@


1.7.18.5
log
@2003-04-30  David Carlton  <carlton@@bactrian.org>

	* cp-namespace.c (get_namespace_objfile): Copy the namespace
	objfile's name.

	* block.h (ALL_BLOCK_SYMBOLS): Move here from dictionary.h.
	* dictionary.c: Sync up with mainline version I just posted.
	Specifically, update some commments, and:
	(dict_create_hashed): Fiddle with nsyms updating.
	(dict_create_linear): Ditto.
	(dict_lookup): Delete.
	(iterator_next_hashed): Delete FIXME comment.
	(iter_name_first_hashed): Replace 'sym' by 'sym != NULL'.
	(iter_name_next_hashed): Replate 'next' by 'next != NULL'.
	* dictionary.h: Sync up with mainline version I just posted: add
	inclusion guards, delete declaration of dict_lookup, delete
	ALL_BLOCK_SYMBOLs.

	* Merge with mainline; tag is carlton_dictionary-20030430-merge.
@
text
@a675 13
@@c snprintf.c:28
@@deftypefn Supplemental int snprintf (char *@@var{buf}, size_t @@var{n}, const char *@@var{format}, ...)

This function is similar to sprintf, but it will print at most @@var{n}
characters.  On error the return value is -1, otherwise it returns the
number of characters that would have been printed had @@var{n} been
sufficiently large, regardless of the actual value of @@var{n}.  Note
some pre-C99 system libraries do not implement this correctly so users
cannot generally rely on the return value if the system version of
this function is used.

@@end deftypefn

a928 13

@@end deftypefn

@@c vsnprintf.c:28
@@deftypefn Supplemental int vsnprintf (char *@@var{buf}, size_t @@var{n}, const char *@@var{format}, va_list @@var{ap})

This function is similar to vsprintf, but it will print at most
@@var{n} characters.  On error the return value is -1, otherwise it
returns the number of characters that would have been printed had
@@var{n} been sufficiently large, regardless of the actual value of
@@var{n}.  Note some pre-C99 system libraries do not implement this
correctly so users cannot generally rely on the return value if the
system version of this function is used.
@


1.7.18.6
log
@2003-05-23  David Carlton  <carlton@@bactrian.org>

	* Merge with mainline; tag is carlton_dictionary-20030523-merge.
@
text
@d340 1
a340 1
@@deftypefn Extension unsigned int hex_value (int @@var{c})
a345 6

The @@code{hex_value} macro returns @@code{unsigned int}, rather than
signed @@code{int}, to make it easier to use in parsing addresses from
hex dump files: a signed @@code{int} would be sign-extended when
converted to a wider unsigned type --- like @@code{bfd_vma}, on some
systems.
@


1.7.18.7
log
@2003-06-27  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton_dictionary-20030627-merge.
@
text
@a5 22
@@c safe-ctype.c:24
@@defvr Extension HOST_CHARSET
This macro indicates the basic character set and encoding used by the
host: more precisely, the encoding used for character constants in
preprocessor @@samp{#if} statements (the C "execution character set").
It is defined by @@file{safe-ctype.h}, and will be an integer constant
with one of the following values:

@@ftable @@code
@@item HOST_CHARSET_UNKNOWN
The host character set is unknown - that is, not one of the next two
possibilities.

@@item HOST_CHARSET_ASCII
The host character set is ASCII.

@@item HOST_CHARSET_EBCDIC
The host character set is some variant of EBCDIC.  (Only one of the
nineteen EBCDIC varying characters is tested; exercise caution.)
@@end ftable
@@end defvr

d32 1
a32 1
not be allocated, minus one is returned and @@code{NULL} is stored in
d320 1
a320 1
@@c hex.c:30
d330 1
a330 1
@@c hex.c:39
d339 1
a339 1
@@c hex.c:47
a384 72
@@c safe-ctype.c:45
@@deffn  Extension ISALPHA  (@@var{c})
@@deffnx Extension ISALNUM  (@@var{c})
@@deffnx Extension ISBLANK  (@@var{c})
@@deffnx Extension ISCNTRL  (@@var{c})
@@deffnx Extension ISDIGIT  (@@var{c})
@@deffnx Extension ISGRAPH  (@@var{c})
@@deffnx Extension ISLOWER  (@@var{c})
@@deffnx Extension ISPRINT  (@@var{c})
@@deffnx Extension ISPUNCT  (@@var{c})
@@deffnx Extension ISSPACE  (@@var{c})
@@deffnx Extension ISUPPER  (@@var{c})
@@deffnx Extension ISXDIGIT (@@var{c})

These twelve macros are defined by @@file{safe-ctype.h}.  Each has the
same meaning as the corresponding macro (with name in lowercase)
defined by the standard header @@file{ctype.h}.  For example,
@@code{ISALPHA} returns true for alphabetic characters and false for
others.  However, there are two differences between these macros and
those provided by @@file{ctype.h}:

@@itemize @@bullet
@@item These macros are guaranteed to have well-defined behavior for all 
values representable by @@code{signed char} and @@code{unsigned char}, and
for @@code{EOF}.

@@item These macros ignore the current locale; they are true for these
fixed sets of characters:
@@multitable {@@code{XDIGIT}} {yada yada yada yada yada yada yada yada}
@@item @@code{ALPHA}  @@tab @@kbd{A-Za-z}
@@item @@code{ALNUM}  @@tab @@kbd{A-Za-z0-9}
@@item @@code{BLANK}  @@tab @@kbd{space tab}
@@item @@code{CNTRL}  @@tab @@code{!PRINT}
@@item @@code{DIGIT}  @@tab @@kbd{0-9}
@@item @@code{GRAPH}  @@tab @@code{ALNUM || PUNCT}
@@item @@code{LOWER}  @@tab @@kbd{a-z}
@@item @@code{PRINT}  @@tab @@code{GRAPH ||} @@kbd{space}
@@item @@code{PUNCT}  @@tab @@kbd{`~!@@@@#$%^&*()_-=+[@@{]@@}\|;:'",<.>/?}
@@item @@code{SPACE}  @@tab @@kbd{space tab \n \r \f \v}
@@item @@code{UPPER}  @@tab @@kbd{A-Z}
@@item @@code{XDIGIT} @@tab @@kbd{0-9A-Fa-f}
@@end multitable

Note that, if the host character set is ASCII or a superset thereof,
all these macros will return false for all values of @@code{char} outside
the range of 7-bit ASCII.  In particular, both ISPRINT and ISCNTRL return
false for characters with numeric values from 128 to 255.
@@end itemize
@@end deffn

@@c safe-ctype.c:94
@@deffn  Extension ISIDNUM         (@@var{c})
@@deffnx Extension ISIDST          (@@var{c})
@@deffnx Extension IS_VSPACE       (@@var{c})
@@deffnx Extension IS_NVSPACE      (@@var{c})
@@deffnx Extension IS_SPACE_OR_NUL (@@var{c})
@@deffnx Extension IS_ISOBASIC     (@@var{c})
These six macros are defined by @@file{safe-ctype.h} and provide
additional character classes which are useful when doing lexical
analysis of C or similar languages.  They are true for the following
sets of characters:

@@multitable {@@code{SPACE_OR_NUL}} {yada yada yada yada yada yada yada yada}
@@item @@code{IDNUM}        @@tab @@kbd{A-Za-z0-9_}
@@item @@code{IDST}         @@tab @@kbd{A-Za-z_}
@@item @@code{VSPACE}       @@tab @@kbd{\r \n}
@@item @@code{NVSPACE}      @@tab @@kbd{space tab \f \v \0}
@@item @@code{SPACE_OR_NUL} @@tab @@code{VSPACE || NVSPACE}
@@item @@code{ISOBASIC}     @@tab @@code{VSPACE || NVSPACE || PRINT}
@@end multitable
@@end deffn

d925 1
a925 1
not be allocated, minus one is returned and @@code{NULL} is stored in
@


1.6
log
@merge from gcc
@
text
@d320 28
@


1.5
log
@merge from gcc
@
text
@d25 1
a25 1
@@deftypefn Extension int asprintf (char **@@var{resptr}, char *@@var{format}, ...)
d100 1
a100 1
Returns a pointer to the argument vector if successful. Returns
d127 1
a127 1
@@deftypefn Extension char* choose_temp_base ()
d157 1
a157 1
@@deftypefn Extension char* concat (char *@@var{s1}, char *@@var{s2}, ..., @@code{NULL})
d160 1
a160 1
xmalloc'd memory.  Returns @@code{NULL} if insufficient memory is
d171 1
a171 1
Returns a pointer to the argument vector if successful. Returns
d213 1
a213 1
Find the first (least significant) bit set in @@var{valu}. Bits are
d228 1
a228 1
character is in the set.  A set may be inverted (i.e. match anything
d239 1
a239 1
@@code{<fnmatch.h>}:
d280 1
a280 1
@@deftypefn Replacement long get_run_time ()
d371 1
a371 1
string is malloced, and the temporary file has been created.
d430 1
a430 1
   <path>/ccXXXXXX<suffix>
d433 3
a435 3
@@var{suffix_len} tells us how long <suffix> is (it can be zero
length).  The last six characters of @@var{template} before <suffix>
must be @@code{XXXXXX}; they are replaced with a string that makes the
d449 1
a449 1
@@var{this_pname} is name of the calling program (i.e. @@code{argv[0]}).
d456 4
a459 4
(@@var{flags} & @@code{PEXECUTE_SEARCH}) is non-zero if @@code{$PATH} should be searched
(??? It's not clear that GCC passes this flag correctly). (@@var{flags} &
@@code{PEXECUTE_FIRST}) is nonzero for the first process in chain.
(@@var{flags} & @@code{PEXECUTE_FIRST}) is nonzero for the last process
d469 1
a469 1
The result is the WEXITSTATUS on systems like MS-DOS where we
d474 1
a474 1
@@var{errmsg_arg} is set to @@code{NULL}), and -1 is returned.
d517 1
a517 1
@@deftypefn Supplement {long int} random ()
d523 1
a523 1
range @@code{0..LONG_MAX}.  @@code{srandom} initializes the random
d526 1
a526 1
run of the program).  @@code{initstate} and @@code{setstate} allow fine-grain
d532 1
a532 1
@@deftypefn Extension char* reconcat (char *@@var{optr}, char *@@var{s1}, ..., @@code{NULL})
d575 1
a575 1
@@deftypefn Extension int signo_max ()
d806 1
a806 1
@@deftypefn Extension int vasprintf (char **@@var{resptr}, char *@@var{format}, va_list @@var{args})
@


1.4
log
@merge from gcc
@
text
@d24 13
d85 25
d126 21
d156 21
d178 1
a178 1
@@deftypefn Replacement int errno_max (void)
d195 93
d329 46
d423 65
d498 47
d574 18
d601 9
d635 1
a635 1
@@deftypefn Replacement const char* strerrno (int @@var{errnum})
d643 1
a643 1
number, then returns the string @@samp{"Error @@var{num}"}, where @@var{num}
d655 1
a655 1
@@deftypefn Replacement char* strerror (int @@var{errnoval})
d664 1
a664 1
error number, then returns the string @@samp{"Error @@var{num}"}, where
d699 40
d763 1
a763 1
@@deftypefn Replacement int strtoerrno (const char *@@var{name})
d772 1
d781 10
a790 1
@@code{strtod} above.
d802 13
@


1.3
log
@merge from gcc
@
text
@d43 2
a44 2
zero if they are the same, non-zero otherwise.  Returns zero if
@@var{count} is zero.  A non-zero result only indicates a difference,
d237 1
a237 1
the new value will be stored only if @@var{overwrite} is non-zero.
d355 1
a355 1
This ANSI C function converts the initial portion of @@var{string} to a
@


1.2
log
@merge from gcc
@
text
@d7 1
a7 1
@@deftypefn Replacement void* alloca (size_t)
d20 1
a20 1
the possibility of a GCC builtin function.
d89 1
a89 1
@@deftypefn Supplemental long clock ()
d108 1
a108 1
implied by the largest @@code{errno} value defined in @@file{errno.h}.
d116 1
a116 1
@@deftypefn Supplemental char* getcwd (char *@@var{pathname}, @@var{len})
d122 1
a122 1
NULL and @@var{errno} is set.  If @@var{pathname} is a null pointer,
d129 1
a129 1
@@deftypefn Supplemental int getpagesize ()
d139 1
a139 1
@@deftypefn Supplemental char* getpwd ()
d151 1
a151 1
the string @@var{s}, or NULL if not found.  The use of @@code{index} is
d159 1
a159 1
This function searches memory starting at @@code{*}@@var{src} for the
d163 2
a164 2
found within @@var{length} characters of @@code{*}@@var{src}, a pointer
to the character is returned. If @@var{c} is not found, then NULL is
d209 1
a209 1
@@samp{name=value} the string is added; if no `=' is present the
d226 1
a226 1
the string @@var{s}, or NULL if not found.  The use of @@code{rindex} is
d263 1
a263 1
the string @@var{s}, or NULL if not found.  If @@var{c} is itself the
d272 1
a272 1
@@code{malloc}, or NULL if insufficient memory was available.
d281 1
a281 1
symbolic name of that error number, as found in @@file{errno.h}.
d289 1
a289 1
indices, then returns NULL.
d310 1
a310 1
@@code{sys_errlist}, returns NULL.
d336 1
a336 1
the string @@var{s}, or NULL if not found.  If @@var{c} is itself the
d346 1
a346 1
to the first occurrence of @@var{sub} is returned, or NULL if the
d356 1
a356 1
@@code{double}.  If @@var{endptr} is not NULL, a pointer to the
d367 1
a367 1
Given the symbolic name of a error number (e.g., @@code{EACCESS}), map it
d392 1
a392 1
or be NULL.  Use of this function creates a security risk, and it must
d398 1
a398 1
@@deftypefn Supplemental int vfork ()
d431 1
a431 1
the number of registered functions.  Returns 0 on success, or -1 on
d438 1
a438 1
@@deftypefn Replacement void* xcalloc (size_t, size_t)
d494 1
a494 1
@@deftypefn Replacement void* xrealloc (void*, size_t)
d512 1
a512 1
will never return a NULL pointer.
@


1.1
log
@merge from gcc
@
text
@d68 1
a68 1
is respecitively less than, matching, or greater than the array member.
d75 1
a75 1
Zeros @@var{count} bytes starting at @@var{mem}.  Use if this function
d150 1
a150 1
Returns a pointer to the first occurance of the character @@var{c} in
d225 1
a225 1
Returns a pointer to the last occurance of the character @@var{c} in
d262 1
a262 1
Returns a pointer to the first occurance of the character @@var{c} in
d285 2
a286 2
number, then returns the string @@samp{"Error NUM"}, where NUM is the
error number.
d292 1
a292 1
valid until the next call to strerrno.
d306 2
a307 2
error number, then returns the string @@samp{"Error NUM"}, where NUM is
the error number.
d335 1
a335 1
Returns a pointer to the last occurance of the character @@var{c} in
d345 2
a346 2
@@var{string}, not including the terminating NUL characters.  A pointer
to the first occurance of @@var{sub} is returned, or NULL if the
d381 1
a381 1
@@code{0x} is allowed.  The handling of endptr is as that of
d431 1
a431 1
the number of registered funtions.  Returns 0 on success, or -1 on
d437 1
a437 1
@@c xmalloc.c:37
d450 1
a450 1
the @@code{xatexit} rpelacement function, they will be called first.
d459 2
a460 1
a message to stderr (using the name set by @@code{xmalloc_set_program_name},
d466 1
a466 1
@@c xmalloc.c:52
d475 1
a475 1
@@c xmalloc.c:45
d493 1
a493 1
@@c xmalloc.c:31
@

