head	1.7;
access;
symbols
	sid-snapshot-20180601:1.7
	sid-snapshot-20180501:1.7
	sid-snapshot-20180401:1.7
	sid-snapshot-20180301:1.7
	sid-snapshot-20180201:1.7
	sid-snapshot-20180101:1.7
	sid-snapshot-20171201:1.7
	sid-snapshot-20171101:1.7
	sid-snapshot-20171001:1.7
	sid-snapshot-20170901:1.7
	sid-snapshot-20170801:1.7
	sid-snapshot-20170701:1.7
	sid-snapshot-20170601:1.7
	sid-snapshot-20170501:1.7
	sid-snapshot-20170401:1.7
	sid-snapshot-20170301:1.7
	sid-snapshot-20170201:1.7
	sid-snapshot-20170101:1.7
	sid-snapshot-20161201:1.7
	sid-snapshot-20161101:1.7
	sid-snapshot-20160901:1.7
	sid-snapshot-20160801:1.7
	sid-snapshot-20160701:1.7
	sid-snapshot-20160601:1.7
	sid-snapshot-20160501:1.7
	sid-snapshot-20160401:1.7
	sid-snapshot-20160301:1.7
	sid-snapshot-20160201:1.7
	sid-snapshot-20160101:1.7
	sid-snapshot-20151201:1.7
	sid-snapshot-20151101:1.7
	sid-snapshot-20151001:1.7
	sid-snapshot-20150901:1.7
	sid-snapshot-20150801:1.7
	sid-snapshot-20150701:1.7
	sid-snapshot-20150601:1.7
	sid-snapshot-20150501:1.7
	sid-snapshot-20150401:1.7
	sid-snapshot-20150301:1.7
	sid-snapshot-20150201:1.7
	sid-snapshot-20150101:1.7
	sid-snapshot-20141201:1.7
	sid-snapshot-20141101:1.7
	sid-snapshot-20141001:1.7
	sid-snapshot-20140901:1.7
	sid-snapshot-20140801:1.7
	sid-snapshot-20140701:1.7
	sid-snapshot-20140601:1.7
	sid-snapshot-20140501:1.7
	sid-snapshot-20140401:1.7
	sid-snapshot-20140301:1.7
	sid-snapshot-20140201:1.7
	sid-snapshot-20140101:1.7
	sid-snapshot-20131201:1.7
	sid-snapshot-20131101:1.7
	sid-snapshot-20131001:1.7
	binutils-2_24-branch:1.7.0.92
	binutils-2_24-branchpoint:1.7
	binutils-2_21_1:1.7
	sid-snapshot-20130901:1.7
	gdb_7_6_1-2013-08-30-release:1.7
	sid-snapshot-20130801:1.7
	sid-snapshot-20130701:1.7
	sid-snapshot-20130601:1.7
	sid-snapshot-20130501:1.7
	gdb_7_6-2013-04-26-release:1.7
	sid-snapshot-20130401:1.7
	binutils-2_23_2:1.7
	gdb_7_6-branch:1.7.0.90
	gdb_7_6-2013-03-12-branchpoint:1.7
	sid-snapshot-20130301:1.7
	sid-snapshot-20130201:1.7
	sid-snapshot-20130101:1.7
	sid-snapshot-20121201:1.7
	gdb_7_5_1-2012-11-29-release:1.7
	binutils-2_23_1:1.7
	sid-snapshot-20121101:1.7
	binutils-2_23:1.7
	sid-snapshot-20121001:1.7
	sid-snapshot-20120901:1.7
	gdb_7_5-2012-08-17-release:1.7
	sid-snapshot-20120801:1.7
	binutils-2_23-branch:1.7.0.88
	binutils-2_23-branchpoint:1.7
	gdb_7_5-branch:1.7.0.86
	gdb_7_5-2012-07-18-branchpoint:1.7
	sid-snapshot-20120701:1.7
	sid-snapshot-20120601:1.7
	sid-snapshot-20120501:1.7
	binutils-2_22_branch:1.7.0.84
	gdb_7_4_1-2012-04-26-release:1.7
	sid-snapshot-20120401:1.7
	sid-snapshot-20120301:1.7
	sid-snapshot-20120201:1.7
	gdb_7_4-2012-01-24-release:1.7
	sid-snapshot-20120101:1.7
	gdb_7_4-branch:1.7.0.82
	gdb_7_4-2011-12-13-branchpoint:1.7
	sid-snapshot-20111201:1.7
	binutils-2_22:1.7
	sid-snapshot-20111101:1.7
	sid-snapshot-20111001:1.7
	binutils-2_22-branch:1.7.0.80
	binutils-2_22-branchpoint:1.7
	gdb_7_3_1-2011-09-04-release:1.7
	sid-snapshot-20110901:1.7
	sid-snapshot-20110801:1.7
	gdb_7_3-2011-07-26-release:1.7
	sid-snapshot-20110701:1.7
	sid-snapshot-20110601:1.7
	sid-snapshot-20110501:1.7
	gdb_7_3-branch:1.7.0.78
	gdb_7_3-2011-04-01-branchpoint:1.7
	sid-snapshot-20110401:1.7
	sid-snapshot-20110301:1.7
	cygwin-1_7_8-release:1.7
	sid-snapshot-20110201:1.7
	sid-snapshot-20110101:1.7
	binutils-2_21:1.7
	sid-snapshot-20101201:1.7
	binutils-2_21-branch:1.7.0.76
	binutils-2_21-branchpoint:1.7
	sid-snapshot-20101101:1.7
	sid-snapshot-20101001:1.7
	binutils-2_20_1:1.7
	gdb_7_2-2010-09-02-release:1.7
	sid-snapshot-20100901:1.7
	cygwin-1_7_7-release:1.7
	sid-snapshot-20100801:1.7
	gdb_7_2-branch:1.7.0.74
	gdb_7_2-2010-07-07-branchpoint:1.7
	sid-snapshot-20100701:1.7
	sid-snapshot-20100601:1.7
	sid-snapshot-20100501:1.7
	sid-snapshot-20100401:1.7
	gdb_7_1-2010-03-18-release:1.7
	sid-snapshot-20100301:1.7
	gdb_7_1-branch:1.7.0.72
	gdb_7_1-2010-02-18-branchpoint:1.7
	sid-snapshot-20100201:1.7
	sid-snapshot-20100101:1.7
	gdb_7_0_1-2009-12-22-release:1.7
	sid-snapshot-20091201:1.7
	sid-snapshot-20091101:1.7
	binutils-2_20:1.7
	gdb_7_0-2009-10-06-release:1.7
	sid-snapshot-20091001:1.7
	gdb_7_0-branch:1.7.0.70
	gdb_7_0-2009-09-16-branchpoint:1.7
	arc-sim-20090309:1.7
	binutils-arc-20081103-branch:1.7.0.68
	binutils-arc-20081103-branchpoint:1.7
	binutils-2_20-branch:1.7.0.66
	binutils-2_20-branchpoint:1.7
	sid-snapshot-20090901:1.7
	sid-snapshot-20090801:1.7
	msnyder-checkpoint-072509-branch:1.7.0.64
	msnyder-checkpoint-072509-branchpoint:1.7
	sid-snapshot-20090701:1.7
	dje-cgen-play1-branch:1.7.0.62
	dje-cgen-play1-branchpoint:1.7
	sid-snapshot-20090601:1.7
	sid-snapshot-20090501:1.7
	sid-snapshot-20090401:1.7
	arc-20081103-branch:1.7.0.60
	arc-20081103-branchpoint:1.7
	arc-insight_6_8-branch:1.7.0.58
	arc-insight_6_8-branchpoint:1.7
	insight_6_8-branch:1.7.0.56
	insight_6_8-branchpoint:1.7
	sid-snapshot-20090301:1.7
	binutils-2_19_1:1.7
	sid-snapshot-20090201:1.7
	sid-snapshot-20090101:1.7
	reverse-20081226-branch:1.7.0.54
	reverse-20081226-branchpoint:1.7
	sid-snapshot-20081201:1.7
	multiprocess-20081120-branch:1.7.0.52
	multiprocess-20081120-branchpoint:1.7
	sid-snapshot-20081101:1.7
	binutils-2_19:1.7
	sid-snapshot-20081001:1.7
	reverse-20080930-branch:1.7.0.50
	reverse-20080930-branchpoint:1.7
	binutils-2_19-branch:1.7.0.48
	binutils-2_19-branchpoint:1.7
	sid-snapshot-20080901:1.7
	sid-snapshot-20080801:1.7
	reverse-20080717-branch:1.7.0.46
	reverse-20080717-branchpoint:1.7
	sid-snapshot-20080701:1.7
	msnyder-reverse-20080609-branch:1.7.0.44
	msnyder-reverse-20080609-branchpoint:1.7
	drow-reverse-20070409-branch:1.7.0.42
	drow-reverse-20070409-branchpoint:1.7
	sid-snapshot-20080601:1.7
	sid-snapshot-20080501:1.7
	sid-snapshot-20080403:1.7
	sid-snapshot-20080401:1.7
	gdb_6_8-2008-03-27-release:1.7
	sid-snapshot-20080301:1.7
	gdb_6_8-branch:1.7.0.40
	gdb_6_8-2008-02-26-branchpoint:1.7
	sid-snapshot-20080201:1.7
	sid-snapshot-20080101:1.7
	sid-snapshot-20071201:1.7
	sid-snapshot-20071101:1.7
	gdb_6_7_1-2007-10-29-release:1.7
	gdb_6_7-2007-10-10-release:1.7
	sid-snapshot-20071001:1.7
	gdb_6_7-branch:1.7.0.38
	gdb_6_7-2007-09-07-branchpoint:1.7
	binutils-2_18:1.7
	binutils-2_18-branch:1.7.0.36
	binutils-2_18-branchpoint:1.7
	insight_6_6-20070208-release:1.7
	binutils-csl-coldfire-4_1-32:1.7
	binutils-csl-sourcerygxx-4_1-32:1.7
	gdb_6_6-2006-12-18-release:1.7
	binutils-csl-innovasic-fido-3_4_4-33:1.7
	binutils-csl-sourcerygxx-3_4_4-32:1.5
	binutils-csl-coldfire-4_1-30:1.7
	binutils-csl-sourcerygxx-4_1-30:1.7
	binutils-csl-coldfire-4_1-28:1.7
	binutils-csl-sourcerygxx-4_1-29:1.7
	binutils-csl-sourcerygxx-4_1-28:1.7
	gdb_6_6-branch:1.7.0.34
	gdb_6_6-2006-11-15-branchpoint:1.7
	binutils-csl-arm-2006q3-27:1.7
	binutils-csl-sourcerygxx-4_1-27:1.7
	binutils-csl-arm-2006q3-26:1.7
	binutils-csl-sourcerygxx-4_1-26:1.7
	binutils-csl-sourcerygxx-4_1-25:1.7
	binutils-csl-sourcerygxx-4_1-24:1.7
	binutils-csl-sourcerygxx-4_1-23:1.7
	insight_6_5-20061003-release:1.7
	gdb-csl-symbian-6_4_50_20060226-12:1.7
	binutils-csl-sourcerygxx-4_1-21:1.7
	binutils-csl-arm-2006q3-21:1.7
	binutils-csl-sourcerygxx-4_1-22:1.7
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.7
	binutils-csl-sourcerygxx-4_1-20:1.7
	binutils-csl-arm-2006q3-19:1.7
	binutils-csl-sourcerygxx-4_1-19:1.7
	binutils-csl-sourcerygxx-4_1-18:1.7
	binutils-csl-renesas-4_1-9:1.7
	gdb-csl-sourcerygxx-3_4_4-25:1.7
	binutils-csl-sourcerygxx-3_4_4-25:1.5
	nickrob-async-20060828-mergepoint:1.7
	gdb-csl-symbian-6_4_50_20060226-11:1.7
	binutils-csl-renesas-4_1-8:1.7
	binutils-csl-renesas-4_1-7:1.7
	binutils-csl-renesas-4_1-6:1.7
	gdb-csl-sourcerygxx-4_1-17:1.7
	binutils-csl-sourcerygxx-4_1-17:1.7
	gdb-csl-20060226-branch-local-2:1.7
	cr-0x5f1:1.7.0.32
	gdb-csl-sourcerygxx-4_1-14:1.7
	binutils-csl-sourcerygxx-4_1-14:1.7
	binutils-csl-sourcerygxx-4_1-15:1.7
	gdb-csl-sourcerygxx-4_1-13:1.7
	binutils-csl-sourcerygxx-4_1-13:1.7
	binutils-2_17:1.7
	gdb-csl-sourcerygxx-4_1-12:1.7
	binutils-csl-sourcerygxx-4_1-12:1.7
	gdb-csl-sourcerygxx-3_4_4-21:1.7
	binutils-csl-sourcerygxx-3_4_4-21:1.7
	gdb_6_5-20060621-release:1.7
	binutils-csl-wrs-linux-3_4_4-24:1.5
	binutils-csl-wrs-linux-3_4_4-23:1.5
	gdb-csl-sourcerygxx-4_1-9:1.7
	binutils-csl-sourcerygxx-4_1-9:1.7
	gdb-csl-sourcerygxx-4_1-8:1.7
	binutils-csl-sourcerygxx-4_1-8:1.7
	gdb-csl-sourcerygxx-4_1-7:1.7
	binutils-csl-sourcerygxx-4_1-7:1.7
	gdb-csl-arm-2006q1-6:1.7
	binutils-csl-arm-2006q1-6:1.7
	gdb-csl-sourcerygxx-4_1-6:1.7
	binutils-csl-sourcerygxx-4_1-6:1.7
	binutils-csl-wrs-linux-3_4_4-22:1.5
	gdb-csl-symbian-6_4_50_20060226-10:1.7
	gdb-csl-symbian-6_4_50_20060226-9:1.7
	gdb-csl-symbian-6_4_50_20060226-8:1.7
	gdb-csl-coldfire-4_1-11:1.7
	binutils-csl-coldfire-4_1-11:1.7
	gdb-csl-sourcerygxx-3_4_4-19:1.7
	binutils-csl-sourcerygxx-3_4_4-19:1.7
	gdb-csl-coldfire-4_1-10:1.7
	gdb_6_5-branch:1.7.0.30
	gdb_6_5-2006-05-14-branchpoint:1.7
	binutils-csl-coldfire-4_1-10:1.7
	gdb-csl-sourcerygxx-4_1-5:1.7
	binutils-csl-sourcerygxx-4_1-5:1.7
	nickrob-async-20060513-branch:1.7.0.28
	nickrob-async-20060513-branchpoint:1.7
	gdb-csl-sourcerygxx-4_1-4:1.7
	binutils-csl-sourcerygxx-4_1-4:1.7
	msnyder-reverse-20060502-branch:1.7.0.26
	msnyder-reverse-20060502-branchpoint:1.7
	binutils-csl-wrs-linux-3_4_4-21:1.5
	gdb-csl-morpho-4_1-4:1.7
	binutils-csl-morpho-4_1-4:1.7
	gdb-csl-sourcerygxx-3_4_4-17:1.7
	binutils-csl-sourcerygxx-3_4_4-17:1.7
	binutils-csl-wrs-linux-3_4_4-20:1.5
	readline_5_1-import-branch:1.7.0.24
	readline_5_1-import-branchpoint:1.7
	gdb-csl-20060226-branch-merge-to-csl-symbian-1:1.7
	binutils-2_17-branch:1.7.0.22
	binutils-2_17-branchpoint:1.7
	gdb-csl-symbian-20060226-branch:1.7.0.20
	gdb-csl-symbian-20060226-branchpoint:1.7
	gdb-csl-20060226-branch-merge-to-csl-local-1:1.7
	msnyder-reverse-20060331-branch:1.7.0.18
	msnyder-reverse-20060331-branchpoint:1.7
	binutils-csl-2_17-branch:1.7.0.16
	binutils-csl-2_17-branchpoint:1.7
	gdb-csl-available-20060303-branch:1.7.0.14
	gdb-csl-available-20060303-branchpoint:1.7
	gdb-csl-20060226-branch:1.7.0.12
	gdb-csl-20060226-branchpoint:1.7
	gdb_6_4-20051202-release:1.7
	msnyder-fork-checkpoint-branch:1.7.0.10
	msnyder-fork-checkpoint-branchpoint:1.7
	gdb-csl-gxxpro-6_3-branch:1.7.0.8
	gdb-csl-gxxpro-6_3-branchpoint:1.7
	gdb_6_4-branch:1.7.0.6
	gdb_6_4-2005-11-01-branchpoint:1.7
	gdb-csl-arm-20051020-branch:1.7.0.4
	gdb-csl-arm-20051020-branchpoint:1.7
	binutils-csl-gxxpro-3_4-branch:1.5.0.36
	binutils-csl-gxxpro-3_4-branchpoint:1.5
	binutils-2_16_1:1.5
	msnyder-tracepoint-checkpoint-branch:1.7.0.2
	msnyder-tracepoint-checkpoint-branchpoint:1.7
	gdb-csl-arm-20050325-2005-q1b:1.5
	binutils-csl-arm-2005q1b:1.5
	binutils-2_16:1.5
	gdb-csl-arm-20050325-2005-q1a:1.5
	binutils-csl-arm-2005q1a:1.5
	csl-arm-20050325-branch:1.5.0.34
	csl-arm-20050325-branchpoint:1.5
	binutils-csl-arm-2005q1-branch:1.5.0.32
	binutils-csl-arm-2005q1-branchpoint:1.5
	binutils-2_16-branch:1.5.0.30
	binutils-2_16-branchpoint:1.5
	csl-arm-2004-q3d:1.5
	gdb_6_3-20041109-release:1.5
	gdb_6_3-branch:1.5.0.26
	gdb_6_3-20041019-branchpoint:1.5
	csl-arm-2004-q3:1.5
	drow_intercu-merge-20040921:1.5
	drow_intercu-merge-20040915:1.5
	jimb-gdb_6_2-e500-branch:1.5.0.28
	jimb-gdb_6_2-e500-branchpoint:1.5
	gdb_6_2-20040730-release:1.5
	gdb_6_2-branch:1.5.0.24
	gdb_6_2-2004-07-10-gmt-branchpoint:1.5
	gdb_6_1_1-20040616-release:1.5
	binutils-2_15:1.5
	binutils-2_15-branchpoint:1.5
	csl-arm-2004-q1a:1.5
	csl-arm-2004-q1:1.5
	gdb_6_1-2004-04-05-release:1.5
	drow_intercu-merge-20040402:1.5
	drow_intercu-merge-20040327:1.5
	ezannoni_pie-20040323-branch:1.5.0.22
	ezannoni_pie-20040323-branchpoint:1.5
	cagney_tramp-20040321-mergepoint:1.5
	cagney_tramp-20040309-branch:1.5.0.20
	cagney_tramp-20040309-branchpoint:1.5
	gdb_6_1-branch:1.5.0.18
	gdb_6_1-2004-03-01-gmt-branchpoint:1.5
	drow_intercu-20040221-branch:1.5.0.16
	drow_intercu-20040221-branchpoint:1.5
	binutils-2_15-branch:1.5.0.14
	cagney_bfdfile-20040213-branch:1.5.0.12
	cagney_bfdfile-20040213-branchpoint:1.5
	drow-cplus-merge-20040208:1.5
	carlton_dictionary-20040126-merge:1.5
	cagney_bigcore-20040122-branch:1.5.0.10
	cagney_bigcore-20040122-branchpoint:1.5
	drow-cplus-merge-20040113:1.5
	csl-arm-2003-q4:1.5
	drow-cplus-merge-20031224:1.5
	drow-cplus-merge-20031220:1.5
	carlton_dictionary-20031215-merge:1.5
	drow-cplus-merge-20031214:1.5
	carlton-dictionary-20031111-merge:1.5
	gdb_6_0-2003-10-04-release:1.5
	kettenis_sparc-20030918-branch:1.5.0.8
	kettenis_sparc-20030918-branchpoint:1.5
	carlton_dictionary-20030917-merge:1.5
	ezannoni_pie-20030916-branchpoint:1.5
	ezannoni_pie-20030916-branch:1.5.0.6
	cagney_x86i386-20030821-branch:1.5.0.4
	cagney_x86i386-20030821-branchpoint:1.5
	carlton_dictionary-20030805-merge:1.5
	carlton_dictionary-20030627-merge:1.5
	gdb_6_0-branch:1.5.0.2
	gdb_6_0-2003-06-23-branchpoint:1.5
	jimb-ppc64-linux-20030613-branch:1.3.0.38
	jimb-ppc64-linux-20030613-branchpoint:1.3
	binutils-2_14:1.3
	cagney_convert-20030606-branch:1.3.0.36
	cagney_convert-20030606-branchpoint:1.3
	cagney_writestrings-20030508-branch:1.3.0.34
	cagney_writestrings-20030508-branchpoint:1.3
	jimb-ppc64-linux-20030528-branch:1.3.0.32
	jimb-ppc64-linux-20030528-branchpoint:1.3
	carlton_dictionary-20030523-merge:1.3
	cagney_fileio-20030521-branch:1.3.0.30
	cagney_fileio-20030521-branchpoint:1.3
	kettenis_i386newframe-20030517-mergepoint:1.3
	jimb-ppc64-linux-20030509-branch:1.3.0.28
	jimb-ppc64-linux-20030509-branchpoint:1.3
	kettenis_i386newframe-20030504-mergepoint:1.3
	carlton_dictionary-20030430-merge:1.3
	binutils-2_14-branch:1.3.0.26
	binutils-2_14-branchpoint:1.3
	kettenis_i386newframe-20030419-branch:1.3.0.24
	kettenis_i386newframe-20030419-branchpoint:1.3
	carlton_dictionary-20030416-merge:1.3
	cagney_frameaddr-20030409-mergepoint:1.3
	kettenis_i386newframe-20030406-branch:1.3.0.22
	kettenis_i386newframe-20030406-branchpoint:1.3
	cagney_frameaddr-20030403-branchpoint:1.3
	cagney_frameaddr-20030403-branch:1.3.0.20
	cagney_framebase-20030330-mergepoint:1.3
	cagney_framebase-20030326-branch:1.3.0.18
	cagney_framebase-20030326-branchpoint:1.3
	cagney_lazyid-20030317-branch:1.3.0.16
	cagney_lazyid-20030317-branchpoint:1.3
	kettenis-i386newframe-20030316-mergepoint:1.3
	offbyone-20030313-branch:1.3.0.14
	offbyone-20030313-branchpoint:1.3
	kettenis-i386newframe-20030308-branch:1.3.0.12
	kettenis-i386newframe-20030308-branchpoint:1.3
	carlton_dictionary-20030305-merge:1.3
	cagney_offbyone-20030303-branch:1.3.0.10
	cagney_offbyone-20030303-branchpoint:1.3
	w32api-2_2:1.3
	mingw-runtime-2_4:1.3
	carlton_dictionary-20030207-merge:1.3
	interps-20030202-branch:1.3.0.8
	interps-20030202-branchpoint:1.3
	cagney-unwind-20030108-branch:1.3.0.6
	cagney-unwind-20030108-branchpoint:1.3
	binutils-2_13_2_1:1.2
	binutils-2_13_2:1.2
	carlton_dictionary-20021223-merge:1.3
	gdb_5_3-2002-12-12-release:1.2
	carlton_dictionary-20021115-merge:1.3
	binutils-2_13_1:1.2
	kseitz_interps-20021105-merge:1.3
	kseitz_interps-20021103-merge:1.3
	drow-cplus-merge-20021020:1.3
	drow-cplus-merge-20021025:1.3
	carlton_dictionary-20021025-merge:1.3
	carlton_dictionary-20021011-merge:1.3
	drow-cplus-branch:1.3.0.4
	drow-cplus-branchpoint:1.3
	kseitz_interps-20020930-merge:1.3
	carlton_dictionary-20020927-merge:1.3
	carlton_dictionary-branch:1.3.0.2
	carlton_dictionary-20020920-branchpoint:1.3
	sid-20020905-branchpoint:1.2
	sid-20020905-branch:1.2.0.28
	gdb_5_3-branch:1.2.0.26
	gdb_5_3-2002-09-04-branchpoint:1.2
	kseitz_interps-20020829-merge:1.2
	cagney_sysregs-20020825-branch:1.2.0.24
	cagney_sysregs-20020825-branchpoint:1.2
	readline_4_3-import-branch:1.2.0.22
	readline_4_3-import-branchpoint:1.2
	binutils-2_13:1.2
	gdb_5_2_1-2002-07-23-release:1.2
	binutils-2_13-branchpoint:1.2
	binutils-2_13-branch:1.2.0.20
	kseitz_interps-20020528-branch:1.2.0.18
	kseitz_interps-20020528-branchpoint:1.2
	cagney_regbuf-20020515-branch:1.2.0.16
	cagney_regbuf-20020515-branchpoint:1.2
	binutils-2_12_1:1.2
	jimb-macro-020506-branch:1.2.0.14
	jimb-macro-020506-branchpoint:1.2
	gdb_5_2-2002-04-29-release:1.2
	binutils-2_12:1.2
	gdb_5_2-branch:1.2.0.12
	gdb_5_2-2002-03-03-branchpoint:1.2
	binutils-2_12-branch:1.2.0.10
	binutils-2_12-branchpoint:1.2
	gdb_5_1_1-2002-01-24-release:1.2
	gdb_5_1_0_1-2002-01-03-release:1.2
	cygnus_cvs_20020108_pre:1.2
	gdb_5_1_0_1-2002-01-03-branch:1.2.0.8
	gdb_5_1_0_1-2002-01-03-branchpoint:1.2
	gdb_5_1-2001-11-21-release:1.2
	gdb_s390-2001-09-26-branch:1.2.0.6
	gdb_s390-2001-09-26-branchpoint:1.2
	gdb_5_1-2001-07-29-branch:1.2.0.4
	gdb_5_1-2001-07-29-branchpoint:1.2
	binutils-2_11_2:1.2
	binutils-2_11_1:1.2
	binutils-2_11:1.2
	x86_64versiong3:1.2
	binutils-2_11-branch:1.2.0.2
	insight-precleanup-2001-01-01:1.2
	binutils_latest_snapshot:1.7;
locks; strict;
comment	@ * @;


1.7
date	2005.05.10.15.33.33;	author nickc;	state Exp;
branches;
next	1.6;

1.6
date	2005.03.28.05.07.08;	author dj;	state Exp;
branches;
next	1.5;

1.5
date	2003.06.22.16.35.53;	author dj;	state Exp;
branches;
next	1.4;

1.4
date	2003.06.22.00.06.14;	author dj;	state Exp;
branches;
next	1.3;

1.3
date	2002.09.20.13.45.20;	author dj;	state Exp;
branches
	1.3.2.1
	1.3.4.1;
next	1.2;

1.2
date	2000.12.17.03.07.49;	author dj;	state Exp;
branches
	1.2.18.1;
next	1.1;

1.1
date	2000.12.08.16.37.01;	author dj;	state Exp;
branches;
next	;

1.3.2.1
date	2003.06.27.21.50.23;	author carlton;	state Exp;
branches;
next	;

1.3.4.1
date	2003.12.14.20.28.03;	author drow;	state Exp;
branches;
next	;

1.2.18.1
date	2002.10.01.00.46.42;	author kseitz;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Update the address and phone number of the FSF organization.
@
text
@/* <ctype.h> replacement macros.

   Copyright (C) 2000, 2001, 2002, 2003, 2004,
   2005 Free Software Foundation, Inc.
   Contributed by Zack Weinberg <zackw@@stanford.edu>.

This file is part of the libiberty library.
Libiberty is free software; you can redistribute it and/or
modify it under the terms of the GNU Library General Public
License as published by the Free Software Foundation; either
version 2 of the License, or (at your option) any later version.

Libiberty is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Library General Public License for more details.

You should have received a copy of the GNU Library General Public
License along with libiberty; see the file COPYING.LIB.  If
not, write to the Free Software Foundation, Inc., 51 Franklin Street - Fifth Floor,
Boston, MA 02110-1301, USA.  */

/*

@@defvr Extension HOST_CHARSET
This macro indicates the basic character set and encoding used by the
host: more precisely, the encoding used for character constants in
preprocessor @@samp{#if} statements (the C "execution character set").
It is defined by @@file{safe-ctype.h}, and will be an integer constant
with one of the following values:

@@ftable @@code
@@item HOST_CHARSET_UNKNOWN
The host character set is unknown - that is, not one of the next two
possibilities.

@@item HOST_CHARSET_ASCII
The host character set is ASCII.

@@item HOST_CHARSET_EBCDIC
The host character set is some variant of EBCDIC.  (Only one of the
nineteen EBCDIC varying characters is tested; exercise caution.)
@@end ftable
@@end defvr

@@deffn  Extension ISALPHA  (@@var{c})
@@deffnx Extension ISALNUM  (@@var{c})
@@deffnx Extension ISBLANK  (@@var{c})
@@deffnx Extension ISCNTRL  (@@var{c})
@@deffnx Extension ISDIGIT  (@@var{c})
@@deffnx Extension ISGRAPH  (@@var{c})
@@deffnx Extension ISLOWER  (@@var{c})
@@deffnx Extension ISPRINT  (@@var{c})
@@deffnx Extension ISPUNCT  (@@var{c})
@@deffnx Extension ISSPACE  (@@var{c})
@@deffnx Extension ISUPPER  (@@var{c})
@@deffnx Extension ISXDIGIT (@@var{c})

These twelve macros are defined by @@file{safe-ctype.h}.  Each has the
same meaning as the corresponding macro (with name in lowercase)
defined by the standard header @@file{ctype.h}.  For example,
@@code{ISALPHA} returns true for alphabetic characters and false for
others.  However, there are two differences between these macros and
those provided by @@file{ctype.h}:

@@itemize @@bullet
@@item These macros are guaranteed to have well-defined behavior for all 
values representable by @@code{signed char} and @@code{unsigned char}, and
for @@code{EOF}.

@@item These macros ignore the current locale; they are true for these
fixed sets of characters:
@@multitable {@@code{XDIGIT}} {yada yada yada yada yada yada yada yada}
@@item @@code{ALPHA}  @@tab @@kbd{A-Za-z}
@@item @@code{ALNUM}  @@tab @@kbd{A-Za-z0-9}
@@item @@code{BLANK}  @@tab @@kbd{space tab}
@@item @@code{CNTRL}  @@tab @@code{!PRINT}
@@item @@code{DIGIT}  @@tab @@kbd{0-9}
@@item @@code{GRAPH}  @@tab @@code{ALNUM || PUNCT}
@@item @@code{LOWER}  @@tab @@kbd{a-z}
@@item @@code{PRINT}  @@tab @@code{GRAPH ||} @@kbd{space}
@@item @@code{PUNCT}  @@tab @@kbd{`~!@@@@#$%^&*()_-=+[@@{]@@}\|;:'",<.>/?}
@@item @@code{SPACE}  @@tab @@kbd{space tab \n \r \f \v}
@@item @@code{UPPER}  @@tab @@kbd{A-Z}
@@item @@code{XDIGIT} @@tab @@kbd{0-9A-Fa-f}
@@end multitable

Note that, if the host character set is ASCII or a superset thereof,
all these macros will return false for all values of @@code{char} outside
the range of 7-bit ASCII.  In particular, both ISPRINT and ISCNTRL return
false for characters with numeric values from 128 to 255.
@@end itemize
@@end deffn

@@deffn  Extension ISIDNUM         (@@var{c})
@@deffnx Extension ISIDST          (@@var{c})
@@deffnx Extension IS_VSPACE       (@@var{c})
@@deffnx Extension IS_NVSPACE      (@@var{c})
@@deffnx Extension IS_SPACE_OR_NUL (@@var{c})
@@deffnx Extension IS_ISOBASIC     (@@var{c})
These six macros are defined by @@file{safe-ctype.h} and provide
additional character classes which are useful when doing lexical
analysis of C or similar languages.  They are true for the following
sets of characters:

@@multitable {@@code{SPACE_OR_NUL}} {yada yada yada yada yada yada yada yada}
@@item @@code{IDNUM}        @@tab @@kbd{A-Za-z0-9_}
@@item @@code{IDST}         @@tab @@kbd{A-Za-z_}
@@item @@code{VSPACE}       @@tab @@kbd{\r \n}
@@item @@code{NVSPACE}      @@tab @@kbd{space tab \f \v \0}
@@item @@code{SPACE_OR_NUL} @@tab @@code{VSPACE || NVSPACE}
@@item @@code{ISOBASIC}     @@tab @@code{VSPACE || NVSPACE || PRINT}
@@end multitable
@@end deffn

*/

#include "ansidecl.h"
#include <safe-ctype.h>
#include <stdio.h>  /* for EOF */

#if EOF != -1
 #error "<safe-ctype.h> requires EOF == -1"
#endif

/* Shorthand */
#define bl _sch_isblank
#define cn _sch_iscntrl
#define di _sch_isdigit
#define is _sch_isidst
#define lo _sch_islower
#define nv _sch_isnvsp
#define pn _sch_ispunct
#define pr _sch_isprint
#define sp _sch_isspace
#define up _sch_isupper
#define vs _sch_isvsp
#define xd _sch_isxdigit

/* Masks.  */
#define L  (const unsigned short) (lo|is   |pr)	/* lower case letter */
#define XL (const unsigned short) (lo|is|xd|pr)	/* lowercase hex digit */
#define U  (const unsigned short) (up|is   |pr)	/* upper case letter */
#define XU (const unsigned short) (up|is|xd|pr)	/* uppercase hex digit */
#define D  (const unsigned short) (di   |xd|pr)	/* decimal digit */
#define P  (const unsigned short) (pn      |pr)	/* punctuation */
#define _  (const unsigned short) (pn|is   |pr)	/* underscore */

#define C  (const unsigned short) (         cn)	/* control character */
#define Z  (const unsigned short) (nv      |cn)	/* NUL */
#define M  (const unsigned short) (nv|sp   |cn)	/* cursor movement: \f \v */
#define V  (const unsigned short) (vs|sp   |cn)	/* vertical space: \r \n */
#define T  (const unsigned short) (nv|sp|bl|cn)	/* tab */
#define S  (const unsigned short) (nv|sp|bl|pr)	/* space */

/* Are we ASCII? */
#if HOST_CHARSET == HOST_CHARSET_ASCII

const unsigned short _sch_istable[256] =
{
  Z,  C,  C,  C,   C,  C,  C,  C,   /* NUL SOH STX ETX  EOT ENQ ACK BEL */
  C,  T,  V,  M,   M,  V,  C,  C,   /* BS  HT  LF  VT   FF  CR  SO  SI  */
  C,  C,  C,  C,   C,  C,  C,  C,   /* DLE DC1 DC2 DC3  DC4 NAK SYN ETB */
  C,  C,  C,  C,   C,  C,  C,  C,   /* CAN EM  SUB ESC  FS  GS  RS  US  */
  S,  P,  P,  P,   P,  P,  P,  P,   /* SP  !   "   #    $   %   &   '   */
  P,  P,  P,  P,   P,  P,  P,  P,   /* (   )   *   +    ,   -   .   /   */
  D,  D,  D,  D,   D,  D,  D,  D,   /* 0   1   2   3    4   5   6   7   */
  D,  D,  P,  P,   P,  P,  P,  P,   /* 8   9   :   ;    <   =   >   ?   */
  P, XU, XU, XU,  XU, XU, XU,  U,   /* @@   A   B   C    D   E   F   G   */
  U,  U,  U,  U,   U,  U,  U,  U,   /* H   I   J   K    L   M   N   O   */
  U,  U,  U,  U,   U,  U,  U,  U,   /* P   Q   R   S    T   U   V   W   */
  U,  U,  U,  P,   P,  P,  P,  _,   /* X   Y   Z   [    \   ]   ^   _   */
  P, XL, XL, XL,  XL, XL, XL,  L,   /* `   a   b   c    d   e   f   g   */
  L,  L,  L,  L,   L,  L,  L,  L,   /* h   i   j   k    l   m   n   o   */
  L,  L,  L,  L,   L,  L,  L,  L,   /* p   q   r   s    t   u   v   w   */
  L,  L,  L,  P,   P,  P,  P,  C,   /* x   y   z   {    |   }   ~   DEL */

  /* high half of unsigned char is locale-specific, so all tests are
     false in "C" locale */
  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,
  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,
  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,
  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,

  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,
  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,
  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,
  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,
};

const unsigned char _sch_tolower[256] =
{
   0,  1,  2,  3,   4,  5,  6,  7,   8,  9, 10, 11,  12, 13, 14, 15,
  16, 17, 18, 19,  20, 21, 22, 23,  24, 25, 26, 27,  28, 29, 30, 31,
  32, 33, 34, 35,  36, 37, 38, 39,  40, 41, 42, 43,  44, 45, 46, 47,
  48, 49, 50, 51,  52, 53, 54, 55,  56, 57, 58, 59,  60, 61, 62, 63,
  64,

  'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',
  'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',

  91, 92, 93, 94, 95, 96,

  'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',
  'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',

 123,124,125,126,127,

 128,129,130,131, 132,133,134,135, 136,137,138,139, 140,141,142,143,
 144,145,146,147, 148,149,150,151, 152,153,154,155, 156,157,158,159,
 160,161,162,163, 164,165,166,167, 168,169,170,171, 172,173,174,175,
 176,177,178,179, 180,181,182,183, 184,185,186,187, 188,189,190,191,

 192,193,194,195, 196,197,198,199, 200,201,202,203, 204,205,206,207,
 208,209,210,211, 212,213,214,215, 216,217,218,219, 220,221,222,223,
 224,225,226,227, 228,229,230,231, 232,233,234,235, 236,237,238,239,
 240,241,242,243, 244,245,246,247, 248,249,250,251, 252,253,254,255,
};

const unsigned char _sch_toupper[256] =
{
   0,  1,  2,  3,   4,  5,  6,  7,   8,  9, 10, 11,  12, 13, 14, 15,
  16, 17, 18, 19,  20, 21, 22, 23,  24, 25, 26, 27,  28, 29, 30, 31,
  32, 33, 34, 35,  36, 37, 38, 39,  40, 41, 42, 43,  44, 45, 46, 47,
  48, 49, 50, 51,  52, 53, 54, 55,  56, 57, 58, 59,  60, 61, 62, 63,
  64,

  'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',
  'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',

  91, 92, 93, 94, 95, 96,

  'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',
  'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',

 123,124,125,126,127,

 128,129,130,131, 132,133,134,135, 136,137,138,139, 140,141,142,143,
 144,145,146,147, 148,149,150,151, 152,153,154,155, 156,157,158,159,
 160,161,162,163, 164,165,166,167, 168,169,170,171, 172,173,174,175,
 176,177,178,179, 180,181,182,183, 184,185,186,187, 188,189,190,191,

 192,193,194,195, 196,197,198,199, 200,201,202,203, 204,205,206,207,
 208,209,210,211, 212,213,214,215, 216,217,218,219, 220,221,222,223,
 224,225,226,227, 228,229,230,231, 232,233,234,235, 236,237,238,239,
 240,241,242,243, 244,245,246,247, 248,249,250,251, 252,253,254,255,
};

#else
# if HOST_CHARSET == HOST_CHARSET_EBCDIC
  #error "FIXME: write tables for EBCDIC"
# else
  #error "Unrecognized host character set"
# endif
#endif
@


1.6
log
@merge from gcc
@
text
@d20 2
a21 2
not, write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
Boston, MA 02111-1307, USA.  */
@


1.5
log
@merge from gcc
@
text
@d3 2
a4 1
   Copyright (C) 2000 Free Software Foundation, Inc.
@


1.4
log
@merge from gcc
@
text
@d22 1
a22 2
/* This is a compatible replacement of the standard C library's <ctype.h>
   with the following properties:
d24 92
a115 6
   - Implements all isxxx() macros required by C99.
   - Also implements some character classes useful when
     parsing C-like languages.
   - Does not change behavior depending on the current locale.
   - Behaves properly for all values in the range of a signed or
     unsigned char.  */
d156 1
a156 1
#if HOST_CHARSET == HC_ASCII
d249 1
a249 1
# if HOST_CHARSET == HC_EBCDIC
@


1.3
log
@merge from gcc
@
text
@d36 4
d71 1
a71 3
#if '\n' == 0x0A && ' ' == 0x20 && '0' == 0x30 \
  && 'A' == 0x41 && 'a' == 0x61 && '!' == 0x21 \
  && EOF == -1
d164 6
a169 2
 #error "Unsupported host character set"
#endif /* not ASCII */
@


1.3.4.1
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@d22 2
a23 1
/*
d25 6
a30 92
@@defvr Extension HOST_CHARSET
This macro indicates the basic character set and encoding used by the
host: more precisely, the encoding used for character constants in
preprocessor @@samp{#if} statements (the C "execution character set").
It is defined by @@file{safe-ctype.h}, and will be an integer constant
with one of the following values:

@@ftable @@code
@@item HOST_CHARSET_UNKNOWN
The host character set is unknown - that is, not one of the next two
possibilities.

@@item HOST_CHARSET_ASCII
The host character set is ASCII.

@@item HOST_CHARSET_EBCDIC
The host character set is some variant of EBCDIC.  (Only one of the
nineteen EBCDIC varying characters is tested; exercise caution.)
@@end ftable
@@end defvr

@@deffn  Extension ISALPHA  (@@var{c})
@@deffnx Extension ISALNUM  (@@var{c})
@@deffnx Extension ISBLANK  (@@var{c})
@@deffnx Extension ISCNTRL  (@@var{c})
@@deffnx Extension ISDIGIT  (@@var{c})
@@deffnx Extension ISGRAPH  (@@var{c})
@@deffnx Extension ISLOWER  (@@var{c})
@@deffnx Extension ISPRINT  (@@var{c})
@@deffnx Extension ISPUNCT  (@@var{c})
@@deffnx Extension ISSPACE  (@@var{c})
@@deffnx Extension ISUPPER  (@@var{c})
@@deffnx Extension ISXDIGIT (@@var{c})

These twelve macros are defined by @@file{safe-ctype.h}.  Each has the
same meaning as the corresponding macro (with name in lowercase)
defined by the standard header @@file{ctype.h}.  For example,
@@code{ISALPHA} returns true for alphabetic characters and false for
others.  However, there are two differences between these macros and
those provided by @@file{ctype.h}:

@@itemize @@bullet
@@item These macros are guaranteed to have well-defined behavior for all 
values representable by @@code{signed char} and @@code{unsigned char}, and
for @@code{EOF}.

@@item These macros ignore the current locale; they are true for these
fixed sets of characters:
@@multitable {@@code{XDIGIT}} {yada yada yada yada yada yada yada yada}
@@item @@code{ALPHA}  @@tab @@kbd{A-Za-z}
@@item @@code{ALNUM}  @@tab @@kbd{A-Za-z0-9}
@@item @@code{BLANK}  @@tab @@kbd{space tab}
@@item @@code{CNTRL}  @@tab @@code{!PRINT}
@@item @@code{DIGIT}  @@tab @@kbd{0-9}
@@item @@code{GRAPH}  @@tab @@code{ALNUM || PUNCT}
@@item @@code{LOWER}  @@tab @@kbd{a-z}
@@item @@code{PRINT}  @@tab @@code{GRAPH ||} @@kbd{space}
@@item @@code{PUNCT}  @@tab @@kbd{`~!@@@@#$%^&*()_-=+[@@{]@@}\|;:'",<.>/?}
@@item @@code{SPACE}  @@tab @@kbd{space tab \n \r \f \v}
@@item @@code{UPPER}  @@tab @@kbd{A-Z}
@@item @@code{XDIGIT} @@tab @@kbd{0-9A-Fa-f}
@@end multitable

Note that, if the host character set is ASCII or a superset thereof,
all these macros will return false for all values of @@code{char} outside
the range of 7-bit ASCII.  In particular, both ISPRINT and ISCNTRL return
false for characters with numeric values from 128 to 255.
@@end itemize
@@end deffn

@@deffn  Extension ISIDNUM         (@@var{c})
@@deffnx Extension ISIDST          (@@var{c})
@@deffnx Extension IS_VSPACE       (@@var{c})
@@deffnx Extension IS_NVSPACE      (@@var{c})
@@deffnx Extension IS_SPACE_OR_NUL (@@var{c})
@@deffnx Extension IS_ISOBASIC     (@@var{c})
These six macros are defined by @@file{safe-ctype.h} and provide
additional character classes which are useful when doing lexical
analysis of C or similar languages.  They are true for the following
sets of characters:

@@multitable {@@code{SPACE_OR_NUL}} {yada yada yada yada yada yada yada yada}
@@item @@code{IDNUM}        @@tab @@kbd{A-Za-z0-9_}
@@item @@code{IDST}         @@tab @@kbd{A-Za-z_}
@@item @@code{VSPACE}       @@tab @@kbd{\r \n}
@@item @@code{NVSPACE}      @@tab @@kbd{space tab \f \v \0}
@@item @@code{SPACE_OR_NUL} @@tab @@code{VSPACE || NVSPACE}
@@item @@code{ISOBASIC}     @@tab @@code{VSPACE || NVSPACE || PRINT}
@@end multitable
@@end deffn

*/
a35 4
#if EOF != -1
 #error "<safe-ctype.h> requires EOF == -1"
#endif

d67 3
a69 1
#if HOST_CHARSET == HOST_CHARSET_ASCII
d162 2
a163 6
# if HOST_CHARSET == HOST_CHARSET_EBCDIC
  #error "FIXME: write tables for EBCDIC"
# else
  #error "Unrecognized host character set"
# endif
#endif
@


1.3.2.1
log
@2003-06-27  David Carlton  <carlton@@kealia.com>

	* Merge with mainline; tag is carlton_dictionary-20030627-merge.
@
text
@d22 2
a23 1
/*
d25 6
a30 92
@@defvr Extension HOST_CHARSET
This macro indicates the basic character set and encoding used by the
host: more precisely, the encoding used for character constants in
preprocessor @@samp{#if} statements (the C "execution character set").
It is defined by @@file{safe-ctype.h}, and will be an integer constant
with one of the following values:

@@ftable @@code
@@item HOST_CHARSET_UNKNOWN
The host character set is unknown - that is, not one of the next two
possibilities.

@@item HOST_CHARSET_ASCII
The host character set is ASCII.

@@item HOST_CHARSET_EBCDIC
The host character set is some variant of EBCDIC.  (Only one of the
nineteen EBCDIC varying characters is tested; exercise caution.)
@@end ftable
@@end defvr

@@deffn  Extension ISALPHA  (@@var{c})
@@deffnx Extension ISALNUM  (@@var{c})
@@deffnx Extension ISBLANK  (@@var{c})
@@deffnx Extension ISCNTRL  (@@var{c})
@@deffnx Extension ISDIGIT  (@@var{c})
@@deffnx Extension ISGRAPH  (@@var{c})
@@deffnx Extension ISLOWER  (@@var{c})
@@deffnx Extension ISPRINT  (@@var{c})
@@deffnx Extension ISPUNCT  (@@var{c})
@@deffnx Extension ISSPACE  (@@var{c})
@@deffnx Extension ISUPPER  (@@var{c})
@@deffnx Extension ISXDIGIT (@@var{c})

These twelve macros are defined by @@file{safe-ctype.h}.  Each has the
same meaning as the corresponding macro (with name in lowercase)
defined by the standard header @@file{ctype.h}.  For example,
@@code{ISALPHA} returns true for alphabetic characters and false for
others.  However, there are two differences between these macros and
those provided by @@file{ctype.h}:

@@itemize @@bullet
@@item These macros are guaranteed to have well-defined behavior for all 
values representable by @@code{signed char} and @@code{unsigned char}, and
for @@code{EOF}.

@@item These macros ignore the current locale; they are true for these
fixed sets of characters:
@@multitable {@@code{XDIGIT}} {yada yada yada yada yada yada yada yada}
@@item @@code{ALPHA}  @@tab @@kbd{A-Za-z}
@@item @@code{ALNUM}  @@tab @@kbd{A-Za-z0-9}
@@item @@code{BLANK}  @@tab @@kbd{space tab}
@@item @@code{CNTRL}  @@tab @@code{!PRINT}
@@item @@code{DIGIT}  @@tab @@kbd{0-9}
@@item @@code{GRAPH}  @@tab @@code{ALNUM || PUNCT}
@@item @@code{LOWER}  @@tab @@kbd{a-z}
@@item @@code{PRINT}  @@tab @@code{GRAPH ||} @@kbd{space}
@@item @@code{PUNCT}  @@tab @@kbd{`~!@@@@#$%^&*()_-=+[@@{]@@}\|;:'",<.>/?}
@@item @@code{SPACE}  @@tab @@kbd{space tab \n \r \f \v}
@@item @@code{UPPER}  @@tab @@kbd{A-Z}
@@item @@code{XDIGIT} @@tab @@kbd{0-9A-Fa-f}
@@end multitable

Note that, if the host character set is ASCII or a superset thereof,
all these macros will return false for all values of @@code{char} outside
the range of 7-bit ASCII.  In particular, both ISPRINT and ISCNTRL return
false for characters with numeric values from 128 to 255.
@@end itemize
@@end deffn

@@deffn  Extension ISIDNUM         (@@var{c})
@@deffnx Extension ISIDST          (@@var{c})
@@deffnx Extension IS_VSPACE       (@@var{c})
@@deffnx Extension IS_NVSPACE      (@@var{c})
@@deffnx Extension IS_SPACE_OR_NUL (@@var{c})
@@deffnx Extension IS_ISOBASIC     (@@var{c})
These six macros are defined by @@file{safe-ctype.h} and provide
additional character classes which are useful when doing lexical
analysis of C or similar languages.  They are true for the following
sets of characters:

@@multitable {@@code{SPACE_OR_NUL}} {yada yada yada yada yada yada yada yada}
@@item @@code{IDNUM}        @@tab @@kbd{A-Za-z0-9_}
@@item @@code{IDST}         @@tab @@kbd{A-Za-z_}
@@item @@code{VSPACE}       @@tab @@kbd{\r \n}
@@item @@code{NVSPACE}      @@tab @@kbd{space tab \f \v \0}
@@item @@code{SPACE_OR_NUL} @@tab @@code{VSPACE || NVSPACE}
@@item @@code{ISOBASIC}     @@tab @@code{VSPACE || NVSPACE || PRINT}
@@end multitable
@@end deffn

*/
a35 4
#if EOF != -1
 #error "<safe-ctype.h> requires EOF == -1"
#endif

d67 3
a69 1
#if HOST_CHARSET == HOST_CHARSET_ASCII
d162 2
a163 6
# if HOST_CHARSET == HOST_CHARSET_EBCDIC
  #error "FIXME: write tables for EBCDIC"
# else
  #error "Unrecognized host character set"
# endif
#endif
@


1.2
log
@* safe-ctype.c: #include "ansidecl.h".
* strtod.c: Likewise.
* strtoul.c: Include safe-ctype.h, not ctype.h.
@
text
@d51 7
a57 7
#define L  lo|is   |pr	/* lower case letter */
#define XL lo|is|xd|pr	/* lowercase hex digit */
#define U  up|is   |pr	/* upper case letter */
#define XU up|is|xd|pr	/* uppercase hex digit */
#define D  di   |xd|pr	/* decimal digit */
#define P  pn      |pr	/* punctuation */
#define _  pn|is   |pr	/* underscore */
d59 6
a64 6
#define C           cn	/* control character */
#define Z  nv      |cn	/* NUL */
#define M  nv|sp   |cn	/* cursor movement: \f \v */
#define V  vs|sp   |cn	/* vertical space: \r \n */
#define T  nv|sp|bl|cn	/* tab */
#define S  nv|sp|bl|pr	/* space */
@


1.2.18.1
log
@Merge with kseitz_interps-20020930-merge.
@
text
@d51 7
a57 7
#define L  (const unsigned short) (lo|is   |pr)	/* lower case letter */
#define XL (const unsigned short) (lo|is|xd|pr)	/* lowercase hex digit */
#define U  (const unsigned short) (up|is   |pr)	/* upper case letter */
#define XU (const unsigned short) (up|is|xd|pr)	/* uppercase hex digit */
#define D  (const unsigned short) (di   |xd|pr)	/* decimal digit */
#define P  (const unsigned short) (pn      |pr)	/* punctuation */
#define _  (const unsigned short) (pn|is   |pr)	/* underscore */
d59 6
a64 6
#define C  (const unsigned short) (         cn)	/* control character */
#define Z  (const unsigned short) (nv      |cn)	/* NUL */
#define M  (const unsigned short) (nv|sp   |cn)	/* cursor movement: \f \v */
#define V  (const unsigned short) (vs|sp   |cn)	/* vertical space: \r \n */
#define T  (const unsigned short) (nv|sp|bl|cn)	/* tab */
#define S  (const unsigned short) (nv|sp|bl|pr)	/* space */
@


1.1
log
@* safe-ctype.c: New file.
* Makefile.in (CFILES): Add safe-ctype.c.
(REQUIRED_OFILES): Add safe-ctype.o.

* argv.c: Define ISBLANK and use it, not isspace.
* basename.c, cplus-dem.c, fnmatch.c, pexecute.c, strtod.c,
strtol.c, strtoul.c: Include safe-ctype.h, not ctype.h.  Use
uppercase ctype macros.  Don't test ISUPPER(c)/ISLOWER(c)
before calling TOLOWER(c)/TOUPPER(c).
@
text
@d32 1
@

