head	1.2;
access;
symbols
	win32-x11-2001-03-26:1.1.1.1 SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2001.06.03.20.47.18;	author ssiddiqi;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.25.19.36.53;	author ssiddiqi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.03.25.19.36.53;	author ssiddiqi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Win32-X11 update sources check in, June 3, 2001 - ssiddiqi
@
text
@'\"! eqn | mmdoc
'\"macro stdmacro
.ds Vn Version 1.2
.ds Dt 6 March 1997
.ds Re Release 1.2.0
.ds Dp Apr 04 17:42
.ds Dm  Feb  1 06:4
.ds Xs 16643 18 build1dmipmaplevels.gl
.TH GLUBUILD1DMIPMAPLEVELS 3G
.SH NAME
.B "gluBuild1DMipmapLevels
\- builds a subset of one-dimensional mipmap levels

.SH C SPECIFICATION
GLint \f3gluBuild1DMipmapLevels\fP(
GLenum \fItarget\fP,
.nf
.ta \w'\f3GLint \fPgluBuild1DMipmapLevels( 'u
	GLint \fIinternalFormat\fP,
	GLsizei \fIwidth\fP,
	GLenum \fIformat\fP,
	GLenum \fItype\fP,
	GLint \fIlevel\fP,
	GLint \fIbase\fP,
	GLint \fImax\fP,
	const void \fI*data\fP )
.fi

.EQ
delim $$
.EN
.SH PARAMETERS
.TP \w'\fIinternalFormat\fP\ \ 'u 
\f2target\fP
Specifies the target texture.  Must be \%\f3GL_TEXTURE_1D\fP.
.TP
\f2internalFormat\fP
Requests the internal storage format of the texture image.  The most
current version of the SGI implementation of GLU does not check this
value for validity before passing it on to the underlying OpenGL
implementation.  A value that is not accepted by the OpenGL
implementation will lead to an OpenGL error.  The benefit of not
checking this value at the GLU level is that OpenGL extensions can add
new internal texture formats without requiring a revision of the GLU
implementation.  Older implementations of GLU check this value and
raise a GLU error if it is not 1, 2, 3, or 4 or one of the following
symbolic constants:
\%\f3GL_ALPHA\fP,
\%\f3GL_ALPHA4\fP,
\%\f3GL_ALPHA8\fP,
\%\f3GL_ALPHA12\fP,
\%\f3GL_ALPHA16\fP,
\%\f3GL_LUMINANCE\fP,
\%\f3GL_LUMINANCE4\fP,
\%\f3GL_LUMINANCE8\fP,
\%\f3GL_LUMINANCE12\fP,
\%\f3GL_LUMINANCE16\fP,
\%\f3GL_LUMINANCE_ALPHA\fP,
\%\f3GL_LUMINANCE4_ALPHA4\fP,
\%\f3GL_LUMINANCE6_ALPHA2\fP,
\%\f3GL_LUMINANCE8_ALPHA8\fP,
\%\f3GL_LUMINANCE12_ALPHA4\fP,
\%\f3GL_LUMINANCE12_ALPHA12\fP,
\%\f3GL_LUMINANCE16_ALPHA16\fP,
\%\f3GL_INTENSITY\fP,
\%\f3GL_INTENSITY4\fP,
\%\f3GL_INTENSITY8\fP,
\%\f3GL_INTENSITY12\fP,
\%\f3GL_INTENSITY16\fP,
\%\f3GL_RGB\fP,
\%\f3GL_R3_G3_B2\fP,
\%\f3GL_RGB4\fP,
\%\f3GL_RGB5\fP,
\%\f3GL_RGB8\fP,
\%\f3GL_RGB10\fP,
\%\f3GL_RGB12\fP,
\%\f3GL_RGB16\fP,
\%\f3GL_RGBA\fP,
\%\f3GL_RGBA2\fP,
\%\f3GL_RGBA4\fP,
\%\f3GL_RGB5_A1\fP,
\%\f3GL_RGBA8\fP,
\%\f3GL_RGB10_A2\fP,
\%\f3GL_RGBA12\fP or
\%\f3GL_RGBA16\fP.
.TP
\f2width\fP
Specifies the width in pixels of the texture image. 
This should be a power of 2.
.TP
\f2format\fP
Specifies the format of the pixel data.
Must be one of:
\%\f3GL_COLOR_INDEX\fP,
\%\f3GL_DEPTH_COMPONENT\fP,
\%\f3GL_RED\fP,
\%\f3GL_GREEN\fP,
\%\f3GL_BLUE\fP,
\%\f3GL_ALPHA\fP,
\%\f3GL_RGB\fP,
\%\f3GL_RGBA\fP,
\%\f3GL_BGR\fP,
\%\f3GL_BGRA\fP,
\%\f3GL_LUMINANCE\fP, or
\%\f3GL_LUMINANCE_ALPHA\fP.
.TP
\f2type\fP
Specifies the data type for \f2data\fP.
Must be one of: \%\f3GL_UNSIGNED_BYTE\fP,
\%\f3GL_BYTE\fP,
\%\f3GL_BITMAP\fP,
\%\f3GL_UNSIGNED_SHORT\fP,
\%\f3GL_SHORT\fP,
\%\f3GL_UNSIGNED_INT\fP,
\%\f3GL_INT\fP, 
\%\f3GL_FLOAT\fP, 
\%\f3GL_UNSIGNED_BYTE_3_3_2\fP,
\%\f3GL_UNSIGNED_BYTE_2_3_3_REV\fP,
\%\f3GL_UNSIGNED_SHORT_5_6_5\fP,
\%\f3GL_UNSIGNED_SHORT_5_6_5_REV\fP,
\%\f3GL_UNSIGNED_SHORT_4_4_4_4\fP,
\%\f3GL_UNSIGNED_SHORT_4_4_4_4_REV\fP,
\%\f3GL_UNSIGNED_SHORT_5_5_5_1\fP,
\%\f3GL_UNSIGNED_SHORT_1_5_5_5_REV\fP,
\%\f3GL_UNSIGNED_INT_8_8_8_8\fP,
\%\f3GL_UNSIGNED_INT_8_8_8_8_REV\fP,
\%\f3GL_UNSIGNED_INT_10_10_10_2\fP, or
\%\f3GL_UNSIGNED_INT_2_10_10_10_REV\fP.
.TP
\f2level\fP
Specifies the mipmap level of the image data.
.TP
\f2base\fP
Specifies the minimum mipmap level to pass to \f3glTexImage1D\fP.
.TP
\f2max\fP
Specifies the maximum mipmap level to pass to \f3glTexImage1D\fP.
.TP
\f2data\fP
Specifies a pointer to the image data in memory.
.SH DESCRIPTION
\%\f3gluBuild1DMipmapLevels\fP builds a subset of prefiltered one-dimensional texture maps of decreasing
resolutions called a mipmap. This is used for the antialiasing of
texture mapped primitives.
.P
A return value of zero indicates success, otherwise a GLU error code is
returned (see \%\f3gluErrorString\fP).
.P
A series of mipmap levels from \f2base\fP to \f2max\fP is built by decimating 
\f2data\fP in half 
until size $1 ~times~ 1$ is reached. At each level, each texel in the
halved mipmap level is an average of the corresponding two texels in the larger
mipmap level. 
\f3glTexImage1D\fP is called to load these mipmap levels from \f2base\fP
to \f2max\fP. If \f2max\fP is larger than the highest mipmap level for the
texture of the specified size, then a GLU error code is returned (see
\%\f3gluErrorString\fP) and nothing is loaded.
.P
For example, if \f2level\fP is 2 and \f2width\fP is 16, the
following levels are possible: $16 ~times~ 1$, $8 ~times~ 1$, $4 ~times~ 1$,
$2 ~times~ 1$, $1 ~times~ 1$. These correspond
to levels 2 through 6 respectively.
If \f2base\fP is 3 and \f2max\fP is 5, then only mipmap levels $8 ~times~ 1$,
$4 ~times~ 1$ and $2 ~times~ 1$ are
loaded. However, if \f2max\fP is 7 then an error is returned and nothing is
loaded since \f2max\fP is larger than the highest mipmap level which is, in 
this case, 6.
.P
The highest mipmap level can be derived from the formula
${log sub 2} (\f2width\fP^{2 sup \f2level\fP})$.
.P
See the \f3glTexImage1D\fP reference page for a description of the
acceptable values for \f2type\fP parameter. See the \f3glDrawPixels\fP 
reference page for a description of the acceptable values 
for \f2level\fP parameter.
.bp
.SH NOTES
\%\f3gluBuild1DMipmapLevels\fP is only available if the GLU version is 1.3 or greater.
.P
Formats \%\f3GL_BGR\fP, and \%\f3GL_BGRA\fP, and types 
\%\f3GL_UNSIGNED_BYTE_3_3_2\fP,
\%\f3GL_UNSIGNED_BYTE_2_3_3_REV\fP,
\%\f3GL_UNSIGNED_SHORT_5_6_5\fP,
\%\f3GL_UNSIGNED_SHORT_5_6_5_REV\fP,
\%\f3GL_UNSIGNED_SHORT_4_4_4_4\fP,
\%\f3GL_UNSIGNED_SHORT_4_4_4_4_REV\fP,
\%\f3GL_UNSIGNED_SHORT_5_5_5_1\fP,
\%\f3GL_UNSIGNED_SHORT_1_5_5_5_REV\fP,
\%\f3GL_UNSIGNED_INT_8_8_8_8\fP,
\%\f3GL_UNSIGNED_INT_8_8_8_8_REV\fP,
\%\f3GL_UNSIGNED_INT_10_10_10_2\fP, and
\%\f3GL_UNSIGNED_INT_2_10_10_10_REV\fP are only available if the GL version 
is 1.2 or greater.
.SH ERRORS
\%\f3GLU_INVALID_VALUE\fP is returned if \f2level\fP > \f2base\fP, \f2base\fP < 0,
\f2max\fP < \f2base\fP or \f2max\fP is > the highest mipmap level for \f2data\fP.
.P
\%\f3GLU_INVALID_VALUE\fP is returned if \f2width\fP is < 1.
.P
\%\f3GLU_INVALID_ENUM\fP is returned if \f2internalFormat\fP, \f2format\fP, or \f2type\fP are not 
legal.
.P
\%\f3GLU_INVALID_OPERATION\fP is returned if \f2type\fP is \%\f3GL_UNSIGNED_BYTE_3_3_2\fP or \%\f3GL_UNSIGNED_BYTE_2_3_3_REV\fP
and \f2format\fP is not \%\f3GL_RGB\fP.
.P
\%\f3GLU_INVALID_OPERATION\fP is returned if \f2type\fP is \%\f3GL_UNSIGNED_SHORT_5_6_5\fP or \%\f3GL_UNSIGNED_SHORT_5_6_5_REV\fP
and \f2format\fP is not \%\f3GL_RGB\fP.
.P
\%\f3GLU_INVALID_OPERATION\fP is returned if \f2type\fP is \%\f3GL_UNSIGNED_SHORT_4_4_4_4\fP or \%\f3GL_UNSIGNED_SHORT_4_4_4_4_REV\fP
and \f2format\fP is neither \%\f3GL_RGBA\fP nor \%\f3GL_BGRA\fP.
.P
\%\f3GLU_INVALID_OPERATION\fP is returned if \f2type\fP is \%\f3GL_UNSIGNED_SHORT_5_5_5_1\fP or \%\f3GL_UNSIGNED_SHORT_1_5_5_5_REV\fP
and \f2format\fP is neither \%\f3GL_RGBA\fP nor \%\f3GL_BGRA\fP.
.P
\%\f3GLU_INVALID_OPERATION\fP is returned if \f2type\fP is \%\f3GL_UNSIGNED_INT_8_8_8_8\fP or \%\f3GL_UNSIGNED_INT_8_8_8_8_REV\fP
and \f2format\fP is neither \%\f3GL_RGBA\fP nor \%\f3GL_BGRA\fP.
.P
\%\f3GLU_INVALID_OPERATION\fP is returned if \f2type\fP is \%\f3GL_UNSIGNED_INT_10_10_10_2\fP or \%\f3GL_UNSIGNED_INT_2_10_10_10_REV\fP
and \f2format\fP is neither \%\f3GL_RGBA\fP nor \%\f3GL_BGRA\fP. 
.SH SEE ALSO
\f3glDrawPixels\fP, \f3glTexImage1D\fP, \f3glTexImage2D\fP, 
\f3glTexImage3D\fP,
\%\f3gluBuild1DMipmaps\fP, \%\f3gluBuild2DMipmaps\fP, \%\f3gluBuild3DMipmaps\fP, 
\%\f3gluErrorString\fP, 
\f3glGetTexImage\fP,
\f3glGetTexLevelParameter\fP,
\%\f3gluBuild2DMipmapLevels\fP, \%\f3gluBuild3DMipmapLevels\fP
@


1.1
log
@Initial revision
@
text
@d1 2
d6 23
a28 5
.ds Dp Feb 04 11:06
.ds Dm 7 Feb  1 01:
.ds Xs 15416     9
_header(Build1DMipmapLevels, builds a subset of one-dimensional mipmap levels)
_names(Build1DMipmapLevels)
d33 2
a34 1
_phead(_param1)
d36 2
a37 1
_phead(_param2)
d86 2
a87 1
_phead(_param3)
d90 2
a91 1
_phead(_param4)
d106 3
a108 2
_phead(_param5)
Specifies the data type for _param9.
d129 2
a130 1
_phead(_param6)
d132 8
a139 5
_phead(_param7)
Specifies the minimum mipmap level to pass to _glcmnd(TexImage1D).
_phead(_param8)
Specifies the maximum mipmap level to pass to _glcmnd(TexImage1D).
_phead(_param9)
d142 1
a142 1
_cmnd builds a subset of prefiltered one-dimensional texture maps of decreasing
d147 1
a147 1
returned (see _cmnd(ErrorString)).
d149 2
a150 2
A series of mipmap levels from _param7 to _param8 is built by decimating 
_param9 in half 
d154 2
a155 2
_glcmnd(TexImage1D) is called to load these mipmap levels from _param7
to _param8. If _param8 is larger than the highest mipmap level for the
d157 1
a157 1
_cmnd(ErrorString)) and nothing is loaded.
d159 1
a159 1
For example, if _param6 is 2 and _param3 is 16, the
d163 1
a163 1
If _param7 is 3 and _param8 is 5, then only mipmap levels $8 ~times~ 1$,
d165 2
a166 2
loaded. However, if _param8 is 7 then an error is returned and nothing is
loaded since _param8 is larger than the highest mipmap level which is, in 
d170 1
a170 1
${log sub 2} (_param3^{2 sup _param6})$.
d172 2
a173 2
See the _glcmnd(TexImage1D) reference page for a description of the
acceptable values for _param5 parameter. See the _glcmnd(DrawPixels) 
d175 1
a175 1
for _param6 parameter.
d178 1
a178 1
_cmnd is only available if the GLU version is 1.3 or greater.
d195 2
a196 2
\%\f3GLU_INVALID_VALUE\fP is returned if _param6 > _param7, _param7 < 0,
_param8 < _param7 or _param8 is > the highest mipmap level for _param9.
d198 1
a198 1
\%\f3GLU_INVALID_VALUE\fP is returned if _param3 is < 1.
d200 1
a200 1
\%\f3GLU_INVALID_ENUM\fP is returned if _param2, _param4, or _param5 are not 
d203 2
a204 2
\%\f3GLU_INVALID_OPERATION\fP is returned if _param5 is \%\f3GL_UNSIGNED_BYTE_3_3_2\fP or \%\f3GL_UNSIGNED_BYTE_2_3_3_REV\fP
and _param4 is not \%\f3GL_RGB\fP.
d206 2
a207 2
\%\f3GLU_INVALID_OPERATION\fP is returned if _param5 is \%\f3GL_UNSIGNED_SHORT_5_6_5\fP or \%\f3GL_UNSIGNED_SHORT_5_6_5_REV\fP
and _param4 is not \%\f3GL_RGB\fP.
d209 2
a210 2
\%\f3GLU_INVALID_OPERATION\fP is returned if _param5 is \%\f3GL_UNSIGNED_SHORT_4_4_4_4\fP or \%\f3GL_UNSIGNED_SHORT_4_4_4_4_REV\fP
and _param4 is neither \%\f3GL_RGBA\fP nor \%\f3GL_BGRA\fP.
d212 2
a213 2
\%\f3GLU_INVALID_OPERATION\fP is returned if _param5 is \%\f3GL_UNSIGNED_SHORT_5_5_5_1\fP or \%\f3GL_UNSIGNED_SHORT_1_5_5_5_REV\fP
and _param4 is neither \%\f3GL_RGBA\fP nor \%\f3GL_BGRA\fP.
d215 2
a216 2
\%\f3GLU_INVALID_OPERATION\fP is returned if _param5 is \%\f3GL_UNSIGNED_INT_8_8_8_8\fP or \%\f3GL_UNSIGNED_INT_8_8_8_8_REV\fP
and _param4 is neither \%\f3GL_RGBA\fP nor \%\f3GL_BGRA\fP.
d218 2
a219 2
\%\f3GLU_INVALID_OPERATION\fP is returned if _param5 is \%\f3GL_UNSIGNED_INT_10_10_10_2\fP or \%\f3GL_UNSIGNED_INT_2_10_10_10_REV\fP
and _param4 is neither \%\f3GL_RGBA\fP nor \%\f3GL_BGRA\fP. 
d221 7
a227 7
_glcmnd(DrawPixels), _glcmnd(TexImage1D), _glcmnd(TexImage2D), 
_glcmnd(TexImage3D),
_cmnd(Build1DMipmaps), _cmnd(Build2DMipmaps), _cmnd(Build3DMipmaps), 
_cmnd(ErrorString), 
_glcmnd(GetTexImage),
_glcmnd(GetTexLevelParameter),
_cmnd(Build2DMipmapLevels), _cmnd(Build3DMipmapLevels)
@


1.1.1.1
log
@win32-x11 source tree update March 26, 2001
@
text
@@
