head	1.2;
access;
symbols
	win32-x11-2001-03-26:1.1.1.1 SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2001.06.03.20.47.18;	author ssiddiqi;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.25.19.36.53;	author ssiddiqi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.03.25.19.36.53;	author ssiddiqi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Win32-X11 update sources check in, June 3, 2001 - ssiddiqi
@
text
@'\"! eqn | mmdoc
'\"macro stdmacro
.ds Vn Version 1.2
.ds Dt 6 March 1997
.ds Re Release 1.2.0
.ds Dp Apr 04 17:42
.ds Dm  Feb  1 06:4
.ds Xs 27236 18 build1dmipmaps.gl
.TH GLUBUILD1DMIPMAPS 3G
.SH NAME
.B "gluBuild1DMipmaps
\- builds a one-dimensional mipmap

.SH C SPECIFICATION
GLint \f3gluBuild1DMipmaps\fP(
GLenum \fItarget\fP,
.nf
.ta \w'\f3GLint \fPgluBuild1DMipmaps( 'u
	GLint \fIinternalFormat\fP,
	GLsizei \fIwidth\fP,
	GLenum \fIformat\fP,
	GLenum \fItype\fP,
	const void \fI*data\fP )
.fi

.EQ
delim $$
.EN
.SH PARAMETERS
.TP \w'\fIinternalFormat\fP\ \ 'u 
\f2target\fP
Specifies the target texture.  Must be \%\f3GL_TEXTURE_1D\fP.
.TP
\f2internalFormat\fP
Requests the internal storage format of the texture image.  The most
current version of the SGI implementation of GLU does not check this
value for validity before passing it on to the underlying OpenGL
implementation.  A value that is not accepted by the OpenGL
implementation will lead to an OpenGL error.  The benefit of not
checking this value at the GLU level is that OpenGL extensions can add
new internal texture formats without requiring a revision of the GLU
implementation.  Older implementations of GLU check this value and
raise a GLU error if it is not 1, 2, 3, or 4 or one of the following
symbolic constants:
\%\f3GL_ALPHA\fP,
\%\f3GL_ALPHA4\fP,
\%\f3GL_ALPHA8\fP,
\%\f3GL_ALPHA12\fP,
\%\f3GL_ALPHA16\fP,
\%\f3GL_LUMINANCE\fP,
\%\f3GL_LUMINANCE4\fP,
\%\f3GL_LUMINANCE8\fP,
\%\f3GL_LUMINANCE12\fP,
\%\f3GL_LUMINANCE16\fP,
\%\f3GL_LUMINANCE_ALPHA\fP,
\%\f3GL_LUMINANCE4_ALPHA4\fP,
\%\f3GL_LUMINANCE6_ALPHA2\fP,
\%\f3GL_LUMINANCE8_ALPHA8\fP,
\%\f3GL_LUMINANCE12_ALPHA4\fP,
\%\f3GL_LUMINANCE12_ALPHA12\fP,
\%\f3GL_LUMINANCE16_ALPHA16\fP,
\%\f3GL_INTENSITY\fP,
\%\f3GL_INTENSITY4\fP,
\%\f3GL_INTENSITY8\fP,
\%\f3GL_INTENSITY12\fP,
\%\f3GL_INTENSITY16\fP,
\%\f3GL_RGB\fP,
\%\f3GL_R3_G3_B2\fP,
\%\f3GL_RGB4\fP,
\%\f3GL_RGB5\fP,
\%\f3GL_RGB8\fP,
\%\f3GL_RGB10\fP,
\%\f3GL_RGB12\fP,
\%\f3GL_RGB16\fP,
\%\f3GL_RGBA\fP,
\%\f3GL_RGBA2\fP,
\%\f3GL_RGBA4\fP,
\%\f3GL_RGB5_A1\fP,
\%\f3GL_RGBA8\fP,
\%\f3GL_RGB10_A2\fP,
\%\f3GL_RGBA12\fP, or
\%\f3GL_RGBA16\fP.
.TP
\f2width\fP
Specifies the width, in pixels, of the texture image. 
.TP
\f2format\fP
Specifies the format of the pixel data.
Must be one of
\%\f3GL_COLOR_INDEX\fP,
\%\f3GL_DEPTH_COMPONENT\fP,
\%\f3GL_RED\fP,
\%\f3GL_GREEN\fP,
\%\f3GL_BLUE\fP,
\%\f3GL_ALPHA\fP,
\%\f3GL_RGB\fP,
\%\f3GL_RGBA\fP,
\%\f3GL_BGR\fP,
\%\f3GL_BGRA\fP,
\%\f3GL_LUMINANCE\fP, 
\%\f3GL_LUMINANCE_ALPHA\fP.
.TP
\f2type\fP
Specifies the data type for \f2data\fP.
Must be one of
\%\f3GL_UNSIGNED_BYTE\fP,
\%\f3GL_BYTE\fP,
\%\f3GL_BITMAP\fP,
\%\f3GL_UNSIGNED_SHORT\fP,
\%\f3GL_SHORT\fP,
\%\f3GL_UNSIGNED_INT\fP,
\%\f3GL_INT\fP, 
\%\f3GL_FLOAT\fP, 
\%\f3GL_UNSIGNED_BYTE_3_3_2\fP,
\%\f3GL_UNSIGNED_BYTE_2_3_3_REV\fP,
\%\f3GL_UNSIGNED_SHORT_5_6_5\fP,
\%\f3GL_UNSIGNED_SHORT_5_6_5_REV\fP,
\%\f3GL_UNSIGNED_SHORT_4_4_4_4\fP,
\%\f3GL_UNSIGNED_SHORT_4_4_4_4_REV\fP,
\%\f3GL_UNSIGNED_SHORT_5_5_5_1\fP,
\%\f3GL_UNSIGNED_SHORT_1_5_5_5_REV\fP,
\%\f3GL_UNSIGNED_INT_8_8_8_8\fP,
\%\f3GL_UNSIGNED_INT_8_8_8_8_REV\fP,
\%\f3GL_UNSIGNED_INT_10_10_10_2\fP, or
\%\f3GL_UNSIGNED_INT_2_10_10_10_REV\fP.
.TP
\f2data\fP
Specifies a pointer to the image data in memory.
.SH DESCRIPTION
\%\f3gluBuild1DMipmaps\fP builds a series of prefiltered one-dimensional texture maps of decreasing
resolutions called a mipmap. This is used for the antialiasing of
texture mapped primitives.
.P
A return value of zero indicates success, otherwise a GLU error code is
returned (see \%\f3gluErrorString\fP).
.P
Initially, the \f2width\fP of \f2data\fP is checked to see if it is
a power of 2. If not, a copy of \f2data\fP is scaled up or down to the
nearest power of 2. (If \f2width\fP is exactly between powers of 2, then
the copy of \f2data\fP will scale upwards.)  This copy will be used for
subsequent mipmapping operations described below. 
For example, if \f2width\fP is 57 then a copy of \f2data\fP
will scale up to 64 before mipmapping
takes place.
.P
Then, proxy textures (see \f3glTexImage1D\fP) are used to determine if
the implementation can fit the requested texture. If not, \f2width\fP is
continually halved until it fits.
.P
Next, a series of mipmap levels is built by decimating a copy of
\f2data\fP in half
until size $1 ~times~ 1$ is reached. At each level, each texel in the
halved mipmap level is an average of the corresponding two texels in the larger
mipmap level.
.P
\f3glTexImage1D\fP is called to load each of these mipmap levels.
Level 0 is a copy of \f2data\fP. 
The highest level is ${log sub 2}(\f2width\fP)$.
For example, if \f2width\fP is 64 and the implementation can store a texture of
this size, the following mipmap levels are
built: $64 ~times~ 1$, $32 ~times~ 1$, $16 ~times~ 1$, $8 ~times~ 1$,
$4 ~times~ 1$, $2 ~times~ 1$ and $1 ~times~ 1$. These correspond to 
levels 0 through 6, respectively.
.P
See the \f3glTexImage1D\fP reference page for a description of the
acceptable values for the \f2type\fP parameter. See the \f3glDrawPixels\fP 
reference page for a description of the acceptable values 
for the \f2data\fP parameter.
.SH NOTES
Note that there is no direct way of querying the maximum level. This can
be derived indirectly via \f3glGetTexLevelParameter\fP. First, query
for the
width actually used at level 0. 
(The width may not be equal to \f2width\fP since
proxy textures might have scaled it to fit the implementation.)
Then the maximum
level can be derived from the formula ${log sub 2}(\f2width\fP)$.
.P
Formats \%\f3GL_BGR\fP, and \%\f3GL_BGRA\fP, and types 
\%\f3GL_UNSIGNED_BYTE_3_3_2\fP,
\%\f3GL_UNSIGNED_BYTE_2_3_3_REV\fP,
\%\f3GL_UNSIGNED_SHORT_5_6_5\fP,
\%\f3GL_UNSIGNED_SHORT_5_6_5_REV\fP,
\%\f3GL_UNSIGNED_SHORT_4_4_4_4\fP,
\%\f3GL_UNSIGNED_SHORT_4_4_4_4_REV\fP,
\%\f3GL_UNSIGNED_SHORT_5_5_5_1\fP,
\%\f3GL_UNSIGNED_SHORT_1_5_5_5_REV\fP,
\%\f3GL_UNSIGNED_INT_8_8_8_8\fP,
\%\f3GL_UNSIGNED_INT_8_8_8_8_REV\fP,
\%\f3GL_UNSIGNED_INT_10_10_10_2\fP, and
\%\f3GL_UNSIGNED_INT_2_10_10_10_REV\fP are only available if the GL version 
is 1.2 or greater, and if the GLU version is 1.3 or greater.
.SH ERRORS
\%\f3GLU_INVALID_VALUE\fP is returned if \f2width\fP is < 1.
.P
\%\f3GLU_INVALID_ENUM\fP is returned if \f2format\fP or \f2type\fP are not legal.
.P
\%\f3GLU_INVALID_OPERATION\fP is returned if \f2type\fP is \%\f3GL_UNSIGNED_BYTE_3_3_2\fP or \%\f3GL_UNSIGNED_BYTE_2_3_3_REV\fP
and \f2format\fP is not \%\f3GL_RGB\fP.
.P
\%\f3GLU_INVALID_OPERATION\fP is returned if \f2type\fP is \%\f3GL_UNSIGNED_SHORT_5_6_5\fP or \%\f3GL_UNSIGNED_SHORT_5_6_5_REV\fP
and \f2format\fP is not \%\f3GL_RGB\fP.
.P
\%\f3GLU_INVALID_OPERATION\fP is returned if \f2type\fP is \%\f3GL_UNSIGNED_SHORT_4_4_4_4\fP or \%\f3GL_UNSIGNED_SHORT_4_4_4_4_REV\fP
and \f2format\fP is neither \%\f3GL_RGBA\fP nor \%\f3GL_BGRA\fP.
.P
\%\f3GLU_INVALID_OPERATION\fP is returned if \f2type\fP is \%\f3GL_UNSIGNED_SHORT_5_5_5_1\fP or \%\f3GL_UNSIGNED_SHORT_1_5_5_5_REV\fP
and \f2format\fP is neither \%\f3GL_RGBA\fP nor \%\f3GL_BGRA\fP.
.P
\%\f3GLU_INVALID_OPERATION\fP is returned if \f2type\fP is \%\f3GL_UNSIGNED_INT_8_8_8_8\fP or \%\f3GL_UNSIGNED_INT_8_8_8_8_REV\fP
and \f2format\fP is neither \%\f3GL_RGBA\fP nor \%\f3GL_BGRA\fP.
.P
\%\f3GLU_INVALID_OPERATION\fP is returned if \f2type\fP is \%\f3GL_UNSIGNED_INT_10_10_10_2\fP or \%\f3GL_UNSIGNED_INT_2_10_10_10_REV\fP
and \f2format\fP is neither \%\f3GL_RGBA\fP nor \%\f3GL_BGRA\fP.
.SH SEE ALSO
\f3glDrawPixels\fP,
\f3glTexImage1D\fP,
\f3glTexImage2D\fP, 
\f3glTexImage3D\fP,
\%\f3gluBuild2DMipmaps\fP,
\%\f3gluBuild3DMipmaps\fP,
\%\f3gluErrorString\fP, 
\f3glGetTexImage\fP,
\f3glGetTexLevelParameter\fP, 
\%\f3gluBuild1DMipmapLevels\fP,
\%\f3gluBuild2DMipmapLevels\fP, 
\%\f3gluBuild3DMipmapLevels\fP
@


1.1
log
@Initial revision
@
text
@d1 2
d6 20
a25 5
.ds Dp Feb 04 11:06
.ds Dm 2 Feb  1 01:
.ds Xs 40806     9
_header(Build1DMipmaps, builds a one-dimensional mipmap)
_names(Build1DMipmaps)
d30 2
a31 1
_phead(_param1)
d33 2
a34 1
_phead(_param2)
d83 2
a84 1
_phead(_param3)
d86 2
a87 1
_phead(_param4)
d102 3
a104 2
_phead(_param5)
Specifies the data type for _param6.
d126 2
a127 1
_phead(_param6)
d130 1
a130 1
_cmnd builds a series of prefiltered one-dimensional texture maps of decreasing
d135 1
a135 1
returned (see _cmnd(ErrorString)).
d137 4
a140 4
Initially, the _param3 of _param6 is checked to see if it is
a power of 2. If not, a copy of _param6 is scaled up or down to the
nearest power of 2. (If _param3 is exactly between powers of 2, then
the copy of _param6 will scale upwards.)  This copy will be used for
d142 1
a142 1
For example, if _param3 is 57 then a copy of _param6
d146 2
a147 2
Then, proxy textures (see _glcmnd(TexImage1D)) are used to determine if
the implementation can fit the requested texture. If not, _param3 is
d151 1
a151 1
_param6 in half
d156 4
a159 4
_glcmnd(TexImage1D) is called to load each of these mipmap levels.
Level 0 is a copy of _param6. 
The highest level is ${log sub 2}(_param3)$.
For example, if _param3 is 64 and the implementation can store a texture of
d165 2
a166 2
See the _glcmnd(TexImage1D) reference page for a description of the
acceptable values for the _param5 parameter. See the _glcmnd(DrawPixels) 
d168 1
a168 1
for the _param6 parameter.
d171 1
a171 1
be derived indirectly via _glcmnd(GetTexLevelParameter). First, query
d174 1
a174 1
(The width may not be equal to _param3 since
d177 1
a177 1
level can be derived from the formula ${log sub 2}(_param3)$.
d194 1
a194 1
\%\f3GLU_INVALID_VALUE\fP is returned if _param3 is < 1.
d196 1
a196 1
\%\f3GLU_INVALID_ENUM\fP is returned if _param4 or _param5 are not legal.
d198 2
a199 2
\%\f3GLU_INVALID_OPERATION\fP is returned if _param5 is \%\f3GL_UNSIGNED_BYTE_3_3_2\fP or \%\f3GL_UNSIGNED_BYTE_2_3_3_REV\fP
and _param4 is not \%\f3GL_RGB\fP.
d201 2
a202 2
\%\f3GLU_INVALID_OPERATION\fP is returned if _param5 is \%\f3GL_UNSIGNED_SHORT_5_6_5\fP or \%\f3GL_UNSIGNED_SHORT_5_6_5_REV\fP
and _param4 is not \%\f3GL_RGB\fP.
d204 2
a205 2
\%\f3GLU_INVALID_OPERATION\fP is returned if _param5 is \%\f3GL_UNSIGNED_SHORT_4_4_4_4\fP or \%\f3GL_UNSIGNED_SHORT_4_4_4_4_REV\fP
and _param4 is neither \%\f3GL_RGBA\fP nor \%\f3GL_BGRA\fP.
d207 2
a208 2
\%\f3GLU_INVALID_OPERATION\fP is returned if _param5 is \%\f3GL_UNSIGNED_SHORT_5_5_5_1\fP or \%\f3GL_UNSIGNED_SHORT_1_5_5_5_REV\fP
and _param4 is neither \%\f3GL_RGBA\fP nor \%\f3GL_BGRA\fP.
d210 2
a211 2
\%\f3GLU_INVALID_OPERATION\fP is returned if _param5 is \%\f3GL_UNSIGNED_INT_8_8_8_8\fP or \%\f3GL_UNSIGNED_INT_8_8_8_8_REV\fP
and _param4 is neither \%\f3GL_RGBA\fP nor \%\f3GL_BGRA\fP.
d213 2
a214 2
\%\f3GLU_INVALID_OPERATION\fP is returned if _param5 is \%\f3GL_UNSIGNED_INT_10_10_10_2\fP or \%\f3GL_UNSIGNED_INT_2_10_10_10_REV\fP
and _param4 is neither \%\f3GL_RGBA\fP nor \%\f3GL_BGRA\fP.
d216 12
a227 12
_glcmnd(DrawPixels),
_glcmnd(TexImage1D),
_glcmnd(TexImage2D), 
_glcmnd(TexImage3D),
_cmnd(Build2DMipmaps),
_cmnd(Build3DMipmaps),
_cmnd(ErrorString), 
_glcmnd(GetTexImage),
_glcmnd(GetTexLevelParameter), 
_cmnd(Build1DMipmapLevels),
_cmnd(Build2DMipmapLevels), 
_cmnd(Build3DMipmapLevels)
@


1.1.1.1
log
@win32-x11 source tree update March 26, 2001
@
text
@@
