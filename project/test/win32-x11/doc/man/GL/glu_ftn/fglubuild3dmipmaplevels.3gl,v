head	1.2;
access;
symbols
	win32-x11-2001-03-26:1.1.1.1 SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2001.06.03.20.47.19;	author ssiddiqi;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.25.19.36.53;	author ssiddiqi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.03.25.19.36.53;	author ssiddiqi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Win32-X11 update sources check in, June 3, 2001 - ssiddiqi
@
text
@'\"! eqn | mmdoc
'\"macro stdmacro
.ds Vn Version 1.2
.ds Dt 10 Nov 1998
.ds Re Release 1.0
.ds Dp Apr 04 17:42
.ds Dm  Apr  4  200
.ds Xs 51338 18 fglubuild3dmipmaplevels.gl
.TH FGLUBUILD3DMIPMAPLEVELS 
.SH NAME
.B "fgluBuild3DMipmapLevels
\- builds a subset of three-dimensional mipmap levels

.SH FORTRAN SPECIFICATION
INTEGER*4 \f3fgluBuild3DMipmapLevels\fP(
INTEGER*4 \fItarget\fP,
.nf
.ta \w'\f3INTEGER*4 \fPfgluBuild3DMipmapLevels( 'u
	INTEGER*4 \fIinternalFormat\fP,
	INTEGER*4 \fIwidth\fP,
	INTEGER*4 \fIheight\fP,
	INTEGER*4 \fIdepth\fP,
	INTEGER*4 \fIformat\fP,
	INTEGER*4 \fItype\fP,
	INTEGER*4 \fIlevel\fP,
	INTEGER*4 \fIbase\fP,
	INTEGER*4 \fImax\fP,
	void \fIdata\fP )
.fi

.EQ
delim $$
.EN
.SH PARAMETERS
.TP \w'\fIinternalFormat\fP\ \ 'u 
\f2target\fP
Specifies the target texture.  Must be \f3GL_TEXTURE_3D\fP.
.TP
\f2internalFormat\fP
Requests the internal storage format of the texture image.  The most
current version of the SGI implementation of GLU does not check this
value for validity before passing it on to the underlying OpenGL
implementation.  A value that is not accepted by the OpenGL
implementation will lead to an OpenGL error.  The benefit of not
checking this value at the GLU level is that OpenGL extensions can add
new internal texture formats without requiring a revision of the GLU
implementation.  Older implementations of GLU check this value and
raise a GLU error if it is not 1, 2, 3, or 4 or one of the following
symbolic constants:
\f3GL_ALPHA\fP,
\f3GL_ALPHA4\fP,
\f3GL_ALPHA8\fP,
\f3GL_ALPHA12\fP,
\f3GL_ALPHA16\fP,
\f3GL_LUMINANCE\fP,
\f3GL_LUMINANCE4\fP,
\f3GL_LUMINANCE8\fP,
\f3GL_LUMINANCE12\fP,
\f3GL_LUMINANCE16\fP,
\f3GL_LUMINANCE_ALPHA\fP,
\f3GL_LUMINANCE4_ALPHA4\fP,
\f3GL_LUMINANCE6_ALPHA2\fP,
\f3GL_LUMINANCE8_ALPHA8\fP,
\f3GL_LUMINANCE12_ALPHA4\fP,
\f3GL_LUMINANCE12_ALPHA12\fP,
\f3GL_LUMINANCE16_ALPHA16\fP,
\f3GL_INTENSITY\fP,
\f3GL_INTENSITY4\fP,
\f3GL_INTENSITY8\fP,
\f3GL_INTENSITY12\fP,
\f3GL_INTENSITY16\fP,
\f3GL_RGB\fP,
\f3GL_R3_G3_B2\fP,
\f3GL_RGB4\fP,
\f3GL_RGB5\fP,
\f3GL_RGB8\fP,
\f3GL_RGB10\fP,
\f3GL_RGB12\fP,
\f3GL_RGB16\fP,
\f3GL_RGBA\fP,
\f3GL_RGBA2\fP,
\f3GL_RGBA4\fP,
\f3GL_RGB5_A1\fP,
\f3GL_RGBA8\fP,
\f3GL_RGB10_A2\fP,
\f3GL_RGBA12\fP, or
\f3GL_RGBA16\fP.
.TP
\f2width\fP, \f2height\fP, \f2depth\fP
Specifies in pixels the width, height and depth respectively, of the texture
image. These should be a power of 2.
.TP
\f2format\fP
Specifies the format of the pixel data.
Must be one of
\f3GL_COLOR_INDEX\fP,
\f3GL_DEPTH_COMPONENT\fP,
\f3GL_RED\fP,
\f3GL_GREEN\fP,
\f3GL_BLUE\fP,
\f3GL_ALPHA\fP,
\f3GL_RGB\fP,
\f3GL_RGBA\fP,
\f3GL_BGR\fP,
\f3GL_BGRA\fP,
\f3GL_LUMINANCE\fP, or
\f3GL_LUMINANCE_ALPHA\fP.
.TP
\f2type\fP
Specifies the data type for \f2data\fP.
Must be one of
\f3GL_UNSIGNED_BYTE\fP,
\f3GL_BYTE\fP,
\f3GL_BITMAP\fP,
\f3GL_UNSIGNED_SHORT\fP,
\f3GL_SHORT\fP,
\f3GL_UNSIGNED_INT\fP,
\f3GL_INT\fP, 
\f3GL_FLOAT\fP, 
\f3GL_UNSIGNED_BYTE_3_3_2\fP,
\f3GL_UNSIGNED_BYTE_2_3_3_REV\fP,
\f3GL_UNSIGNED_SHORT_5_6_5\fP,
\f3GL_UNSIGNED_SHORT_5_6_5_REV\fP,
\f3GL_UNSIGNED_SHORT_4_4_4_4\fP,
\f3GL_UNSIGNED_SHORT_4_4_4_4_REV\fP,
\f3GL_UNSIGNED_SHORT_5_5_5_1\fP,
\f3GL_UNSIGNED_SHORT_1_5_5_5_REV\fP,
\f3GL_UNSIGNED_INT_8_8_8_8\fP,
\f3GL_UNSIGNED_INT_8_8_8_8_REV\fP,
\f3GL_UNSIGNED_INT_10_10_10_2\fP, or
\f3GL_UNSIGNED_INT_2_10_10_10_REV\fP.
.TP
\f2level\fP
Specifies the mipmap level of the image data.
.TP
\f2base\fP
Specifies the minimum mipmap level to pass to \f3glTexImage3D\fP.
.TP
\f2max\fP
Specifies the maximum mipmap level to pass to \f3glTexImage3D\fP.
.TP
\f2data\fP
Specifies a pointer to the image data in memory.
.SH DESCRIPTION
\f3fgluBuild3DMipmapLevels\fP builds a subset of prefiltered three-dimensional texture maps of
decreasing resolutions called a mipmap. This is used for the antialiasing of
texture mapped primitives.
.P
A return value of zero indicates success, otherwise a GLU error code is
returned (see \f3fgluErrorString\fP).
.P
A series of mipmap levels from \f2base\fP to \f2max\fP is built by
decimating \f2data\fP in half along both dimensions until size $1 ~times~ 1
~times~ 1$ is reached. At each level, each texel in the halved mipmap
level is an average of the corresponding eight texels in the larger
mipmap level. (If exactly one of the dimensions is 1, four texels are
averaged.  If exactly two of the dimensions are 1, two texels are
averaged.)  \f3glTexImage3D\fP is called to load these mipmap levels
from \f2base\fP to \f2max\fP. If \f2max\fP is larger than the highest mipmap
level for the texture of the specified size, then a GLU error code is
returned (see \f3fgluErrorString\fP) and nothing is loaded.
.P
For example, if \f2level\fP is 2 and \f2width\fP is 16, \f2height\fP is 8 and \f2depth\fP
is 4, the following levels are possible: $16 ~times~ 8 ~times~ 4$, $8 ~times~
4 ~times~ 2$, $4 ~times~ 2 ~times~ 1$, $2 ~times~ 1 ~times~ 1$,
$1 ~times~ 1 ~times~ 1$.
These correspond to levels 2 through 6 respectively.  If \f2base\fP is
3 and \f2max\fP is 5, then only mipmap levels $8 ~times~ 4 ~times~ 2$, $4
~times~ 2 ~times~ 1$ and $2 ~times~ 1 ~times~ 1$ are loaded. However, if
\f2max\fP is 7 then an error is returned and nothing is loaded, since
\f2max\fP is larger than the highest mipmap level which is, in this case,
6.
.P
The highest mipmap level can be derived from the formula
${log sub 2} ( max ("width","height","depth")^{2 sup "level"})$.
.P
See the \f3glTexImage1D\fP reference page for a description of the
acceptable values for \f2format\fP parameter. See the \f3glDrawPixels\fP 
reference page for a description of the acceptable values 
for \f2type\fP parameter.
.SH NOTES
\f3fgluBuild3DMipmapLevels\fP is only available if the GLU version is 1.3 or greater.
.P
Formats \f3GL_BGR\fP, and \f3GL_BGRA\fP, and types 
\f3GL_UNSIGNED_BYTE_3_3_2\fP,
\f3GL_UNSIGNED_BYTE_2_3_3_REV\fP,
\f3GL_UNSIGNED_SHORT_5_6_5\fP,
\f3GL_UNSIGNED_SHORT_5_6_5_REV\fP,
\f3GL_UNSIGNED_SHORT_4_4_4_4\fP,
\f3GL_UNSIGNED_SHORT_4_4_4_4_REV\fP,
\f3GL_UNSIGNED_SHORT_5_5_5_1\fP,
\f3GL_UNSIGNED_SHORT_1_5_5_5_REV\fP,
\f3GL_UNSIGNED_INT_8_8_8_8\fP,
\f3GL_UNSIGNED_INT_8_8_8_8_REV\fP,
\f3GL_UNSIGNED_INT_10_10_10_2\fP, and
\f3GL_UNSIGNED_INT_2_10_10_10_REV\fP are only available if the GL version 
is 1.2 or greater.
.SH ERRORS
\f3GLU_INVALID_VALUE\fP is returned if \f2level\fP > \f2base\fP, \f2base\fP < 0,
\f2max\fP < \f2base\fP or \f2max\fP is > the highest mipmap level for \f2data\fP.
.P
\f3GLU_INVALID_VALUE\fP is returned if \f2width\fP, \f2height\fP, or \f2depth\fP is < 1.
.P
\f3GLU_INVALID_ENUM\fP is returned if \f2internalFormat\fP, \f2format\fP, or \f2type\fP is not 
legal.
.P
\f3GLU_INVALID_OPERATION\fP is returned if \f2type\fP is \f3GL_UNSIGNED_BYTE_3_3_2\fP or \f3GL_UNSIGNED_BYTE_2_3_3_REV\fP
and \f2format\fP is not \f3GL_RGB\fP.
.P
\f3GLU_INVALID_OPERATION\fP is returned if \f2type\fP is \f3GL_UNSIGNED_SHORT_5_6_5\fP or \f3GL_UNSIGNED_SHORT_5_6_5_REV\fP
and \f2format\fP is not \f3GL_RGB\fP.
.P
\f3GLU_INVALID_OPERATION\fP is returned if \f2type\fP is \f3GL_UNSIGNED_SHORT_4_4_4_4\fP or \f3GL_UNSIGNED_SHORT_4_4_4_4_REV\fP
and \f2format\fP is neither \f3GL_RGBA\fP nor \f3GL_BGRA\fP.
.P
\f3GLU_INVALID_OPERATION\fP is returned if \f2type\fP is \f3GL_UNSIGNED_SHORT_5_5_5_1\fP or \f3GL_UNSIGNED_SHORT_1_5_5_5_REV\fP
and \f2format\fP is neither \f3GL_RGBA\fP nor \f3GL_BGRA\fP.
.P
\f3GLU_INVALID_OPERATION\fP is returned if \f2type\fP is \f3GL_UNSIGNED_INT_8_8_8_8\fP or \f3GL_UNSIGNED_INT_8_8_8_8_REV\fP
and \f2format\fP is neither \f3GL_RGBA\fP nor \f3GL_BGRA\fP.
.P
\f3GLU_INVALID_OPERATION\fP is returned if \f2type\fP is \f3GL_UNSIGNED_INT_10_10_10_2\fP or \f3GL_UNSIGNED_INT_2_10_10_10_REV\fP
and \f2format\fP is neither \f3GL_RGBA\fP nor \f3GL_BGRA\fP.
.SH SEE ALSO
\f3glDrawPixels\fP,
\f3glTexImage1D\fP,
\f3glTexImage2D\fP, 
\f3glTexImage3D\fP,
\f3fgluBuild1DMipmaps\fP,
\f3fgluBuild2DMipmaps\fP,
\f3fgluBuild3DMipmaps\fP, 
\f3fgluErrorString\fP, 
\f3glGetTexImage\fP,
\f3glGetTexLevelParameter\fP,
\f3fgluBuild1DMipmapLevels\fP,
\f3fgluBuild2DMipmapLevels\fP
@


1.1
log
@Initial revision
@
text
@d1 2
d6 25
a30 5
.ds Dp Feb 04 11:06
.ds Dm 4 Feb  4 11:
.ds Xs 53966     9
_header(Build3DMipmapLevels, builds a subset of three-dimensional mipmap levels)
_names(Build3DMipmapLevels)
d35 2
a36 1
_phead(_param1)
d38 2
a39 1
_phead(_param2)
d88 2
a89 1
_phead(_param3 _param4 _param5)
d92 2
a93 1
_phead(_param6)
d108 3
a110 2
_phead(_param7)
Specifies the data type for _param11.
d132 2
a133 1
_phead(_param8)
d135 8
a142 5
_phead(_param9)
Specifies the minimum mipmap level to pass to _glcmnd(TexImage3D).
_phead(_param10)
Specifies the maximum mipmap level to pass to _glcmnd(TexImage3D).
_phead(_param11)
d145 1
a145 1
_cmnd builds a subset of prefiltered three-dimensional texture maps of
d150 1
a150 1
returned (see _cmnd(ErrorString)).
d152 2
a153 2
A series of mipmap levels from _param9 to _param10 is built by
decimating _param11 in half along both dimensions until size $1 ~times~ 1
d158 2
a159 2
averaged.)  _glcmnd(TexImage3D) is called to load these mipmap levels
from _param9 to _param10. If _param10 is larger than the highest mipmap
d161 1
a161 1
returned (see _cmnd(ErrorString)) and nothing is loaded.
d163 1
a163 1
For example, if _param8 is 2 and _param3 is 16, _param4 is 8 and _param5
d167 2
a168 2
These correspond to levels 2 through 6 respectively.  If _param9 is
3 and _param10 is 5, then only mipmap levels $8 ~times~ 4 ~times~ 2$, $4
d170 2
a171 2
_param10 is 7 then an error is returned and nothing is loaded, since
_param10 is larger than the highest mipmap level which is, in this case,
d175 1
a175 1
${log sub 2} ( max (_eqnparam3,_eqnparam4,_eqnparam5)^{2 sup _eqnparam8})$.
d177 2
a178 2
See the _glcmnd(TexImage1D) reference page for a description of the
acceptable values for _param6 parameter. See the _glcmnd(DrawPixels) 
d180 1
a180 1
for _param7 parameter.
d182 1
a182 1
_cmnd is only available if the GLU version is 1.3 or greater.
d199 2
a200 2
\f3GLU_INVALID_VALUE\fP is returned if _param8 > _param9, _param9 < 0,
_param10 < _param9 or _param10 is > the highest mipmap level for _param11.
d202 1
a202 1
\f3GLU_INVALID_VALUE\fP is returned if _param3, _param4, or _param5 is < 1.
d204 1
a204 1
\f3GLU_INVALID_ENUM\fP is returned if _param2, _param6, or _param7 is not 
d207 2
a208 2
\f3GLU_INVALID_OPERATION\fP is returned if _param7 is \f3GL_UNSIGNED_BYTE_3_3_2\fP or \f3GL_UNSIGNED_BYTE_2_3_3_REV\fP
and _param6 is not \f3GL_RGB\fP.
d210 2
a211 2
\f3GLU_INVALID_OPERATION\fP is returned if _param7 is \f3GL_UNSIGNED_SHORT_5_6_5\fP or \f3GL_UNSIGNED_SHORT_5_6_5_REV\fP
and _param6 is not \f3GL_RGB\fP.
d213 2
a214 2
\f3GLU_INVALID_OPERATION\fP is returned if _param7 is \f3GL_UNSIGNED_SHORT_4_4_4_4\fP or \f3GL_UNSIGNED_SHORT_4_4_4_4_REV\fP
and _param6 is neither \f3GL_RGBA\fP nor \f3GL_BGRA\fP.
d216 2
a217 2
\f3GLU_INVALID_OPERATION\fP is returned if _param7 is \f3GL_UNSIGNED_SHORT_5_5_5_1\fP or \f3GL_UNSIGNED_SHORT_1_5_5_5_REV\fP
and _param6 is neither \f3GL_RGBA\fP nor \f3GL_BGRA\fP.
d219 2
a220 2
\f3GLU_INVALID_OPERATION\fP is returned if _param7 is \f3GL_UNSIGNED_INT_8_8_8_8\fP or \f3GL_UNSIGNED_INT_8_8_8_8_REV\fP
and _param6 is neither \f3GL_RGBA\fP nor \f3GL_BGRA\fP.
d222 2
a223 2
\f3GLU_INVALID_OPERATION\fP is returned if _param7 is \f3GL_UNSIGNED_INT_10_10_10_2\fP or \f3GL_UNSIGNED_INT_2_10_10_10_REV\fP
and _param6 is neither \f3GL_RGBA\fP nor \f3GL_BGRA\fP.
d225 12
a236 12
_glcmnd(DrawPixels),
_glcmnd(TexImage1D),
_glcmnd(TexImage2D), 
_glcmnd(TexImage3D),
_cmnd(Build1DMipmaps),
_cmnd(Build2DMipmaps),
_cmnd(Build3DMipmaps), 
_cmnd(ErrorString), 
_glcmnd(GetTexImage),
_glcmnd(GetTexLevelParameter),
_cmnd(Build1DMipmapLevels),
_cmnd(Build2DMipmapLevels)
@


1.1.1.1
log
@win32-x11 source tree update March 26, 2001
@
text
@@
