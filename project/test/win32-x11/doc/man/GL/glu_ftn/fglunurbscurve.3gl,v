head	1.2;
access;
symbols
	win32-x11-2001-03-26:1.1.1.1 SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2001.06.03.20.47.19;	author ssiddiqi;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.25.19.36.53;	author ssiddiqi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.03.25.19.36.53;	author ssiddiqi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Win32-X11 update sources check in, June 3, 2001 - ssiddiqi
@
text
@'\"! eqn | mmdoc
'\"macro stdmacro
.ds Vn Version 1.2
.ds Dt 10 Nov 1998
.ds Re Release 1.0
.ds Dp Apr 04 17:42
.ds Dm  Apr  4  200
.ds Xs 16086 10 fglunurbscurve.gl
.TH FGLUNURBSCURVE 
.SH NAME
.B "fgluNurbsCurve
\- define the shape of a NURBS curve

.SH FORTRAN SPECIFICATION
SUBROUTINE \f3fgluNurbsCurve\fP(
CHARACTER*8 \fInurb\fP,
.nf
.ta \w'\f3SUBROUTINE \fPfgluNurbsCurve( 'u
	INTEGER*4 \fIknotCount\fP,
	CHARACTER*8 \fIknots\fP,
	INTEGER*4 \fIstride\fP,
	CHARACTER*8 \fIcontrol\fP,
	INTEGER*4 \fIorder\fP,
	INTEGER*4 \fItype\fP )
.fi

.EQ
delim $$
.EN
.SH PARAMETERS
.TP \w'\fIknotCount\fP\ \ 'u 
\f2nurb\fP
Specifies the NURBS object (created with \f3fgluNewNurbsRenderer\fP).
.TP
\f2knotCount\fP
Specifies the number of knots in \f2knots\fP.
\f2knotCount\fP equals the number of control points plus the order.
.TP
\f2knots\fP
Specifies an array of \f2knotCount\fP nondecreasing knot values.
.TP
\f2stride\fP
Specifies the offset (as a number of single-precision floating-point values)
between successive curve control points.
.TP
\f2control\fP
Specifies a pointer to an array of control points. The coordinates must
agree with \f2type\fP, specified below.
.TP
\f2order\fP
Specifies the order of the NURBS curve. \f2order\fP equals degree + 1, hence
a cubic curve has an order of 4.
.TP
\f2type\fP
Specifies the type of the curve. If this curve is defined within a 
\f3fgluBeginCurve\fP/\f3fgluEndCurve\fP pair, then 
the type can be any of the valid
one-dimensional evaluator types (such as \f3GL_MAP1_VERTEX_3\fP or 
\f3GL_MAP1_COLOR_4\fP). Between a \f3fgluBeginTrim\fP/\f3fgluEndTrim\fP pair,
the only valid types are \f3GLU_MAP1_TRIM_2\fP and \f3GLU_MAP1_TRIM_3\fP.
.SH DESCRIPTION
Use \f3fgluNurbsCurve\fP to describe a NURBS curve.
.P
When \f3fgluNurbsCurve\fP appears between a \f3fgluBeginCurve\fP/\f3fgluEndCurve\fP pair, it is 
used to describe a curve to be rendered.
Positional, texture, and color coordinates are associated
by presenting each as a separate \f3fgluNurbsCurve\fP between a 
\f3fgluBeginCurve\fP/\f3fgluEndCurve\fP pair. No more than
one call to \f3fgluNurbsCurve\fP for each of color, position, and texture
data can be made within a single \f3fgluBeginCurve\fP/\f3fgluEndCurve\fP
pair. Exactly one call must be made to describe the position of the 
curve (a \f2type\fP of \f3GL_MAP1_VERTEX_3\fP or \f3GL_MAP1_VERTEX_4\fP).
.P
When \f3fgluNurbsCurve\fP appears between a \f3fgluBeginTrim\fP/\f3fgluEndTrim\fP pair, it is 
used to describe a trimming curve on a NURBS surface. If \f2type\fP is
\f3GLU_MAP1_TRIM_2\fP, then it describes a curve in two-dimensional (\f2u\fP 
and \f2v\fP)
parameter space. If it is \f3GLU_MAP1_TRIM_3\fP, then it describes a 
curve in two-dimensional homogeneous (\f2u\fP, \f2v\fP, and \f2w\fP) 
parameter space.
See the \f3fgluBeginTrim\fP reference page for more discussion about trimming
curves.
.SH EXAMPLE
The following commands render a textured NURBS curve with normals:
.sp
.Ex
gluBeginCurve(nobj);
   gluNurbsCurve(nobj, ..., GL_MAP1_TEXTURE_COORD_2);
   gluNurbsCurve(nobj, ..., GL_MAP1_NORMAL);
   gluNurbsCurve(nobj, ..., GL_MAP1_VERTEX_4);
gluEndCurve(nobj);
.Ee
.sp
.SH NOTES
To define trim curves which stitch well, use \f3fgluPwlCurve\fP.
.SH SEE ALSO
\f3fgluBeginCurve\fP, \f3fgluBeginTrim\fP, \f3fgluNewNurbsRenderer\fP, \f3fgluPwlCurve\fP

@


1.1
log
@Initial revision
@
text
@d1 2
d6 21
a26 5
.ds Dp Feb 04 11:06
.ds Dm 5 Feb  4 11:
.ds Xs 25594     5
_header(NurbsCurve, define the shape of a NURBS curve)
_names(NurbsCurve)
d31 12
a42 8
_phead(_param1)
Specifies the NURBS object (created with _cmnd(NewNurbsRenderer)).
_phead(_param2)
Specifies the number of knots in _param3.
_param2 equals the number of control points plus the order.
_phead(_param3)
Specifies an array of _param2 nondecreasing knot values.
_phead(_param4)
d45 2
a46 1
_phead(_param5)
d48 4
a51 3
agree with _param7, specified below.
_phead(_param6)
Specifies the order of the NURBS curve. _param6 equals degree + 1, hence
d53 2
a54 1
_phead(_param7)
d56 1
a56 1
_cmnd(BeginCurve)/_cmnd(EndCurve) pair, then 
d59 1
a59 1
\f3GL_MAP1_COLOR_4\fP). Between a _cmnd(BeginTrim)/_cmnd(EndTrim) pair,
d62 1
a62 1
Use _cmnd to describe a NURBS curve.
d64 1
a64 1
When _cmnd appears between a _cmnd(BeginCurve)/_cmnd(EndCurve) pair, it is 
d67 4
a70 4
by presenting each as a separate _cmnd between a 
_cmnd(BeginCurve)/_cmnd(EndCurve) pair. No more than
one call to _cmnd for each of color, position, and texture
data can be made within a single _cmnd(BeginCurve)/_cmnd(EndCurve)
d72 1
a72 1
curve (a _param7 of \f3GL_MAP1_VERTEX_3\fP or \f3GL_MAP1_VERTEX_4\fP).
d74 2
a75 2
When _cmnd appears between a _cmnd(BeginTrim)/_cmnd(EndTrim) pair, it is 
used to describe a trimming curve on a NURBS surface. If _param7 is
d81 1
a81 1
See the _cmnd(BeginTrim) reference page for more discussion about trimming
d95 1
a95 1
To define trim curves which stitch well, use _cmnd(PwlCurve).
d97 1
a97 1
_cmnd(BeginCurve), _cmnd(BeginTrim), _cmnd(NewNurbsRenderer), _cmnd(PwlCurve)
@


1.1.1.1
log
@win32-x11 source tree update March 26, 2001
@
text
@@
