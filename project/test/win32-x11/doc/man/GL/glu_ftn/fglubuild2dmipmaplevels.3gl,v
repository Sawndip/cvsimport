head	1.2;
access;
symbols
	win32-x11-2001-03-26:1.1.1.1 SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2001.06.03.20.47.19;	author ssiddiqi;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.25.19.36.53;	author ssiddiqi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.03.25.19.36.53;	author ssiddiqi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Win32-X11 update sources check in, June 3, 2001 - ssiddiqi
@
text
@'\"! eqn | mmdoc
'\"macro stdmacro
.ds Vn Version 1.2
.ds Dt 10 Nov 1998
.ds Re Release 1.0
.ds Dp Apr 04 17:42
.ds Dm  Apr  4  200
.ds Xs 38429 18 fglubuild2dmipmaplevels.gl
.TH FGLUBUILD2DMIPMAPLEVELS 
.SH NAME
.B "fgluBuild2DMipmapLevels
\- builds a subset of two-dimensional mipmap levels

.SH FORTRAN SPECIFICATION
INTEGER*4 \f3fgluBuild2DMipmapLevels\fP(
INTEGER*4 \fItarget\fP,
.nf
.ta \w'\f3INTEGER*4 \fPfgluBuild2DMipmapLevels( 'u
	INTEGER*4 \fIinternalFormat\fP,
	INTEGER*4 \fIwidth\fP,
	INTEGER*4 \fIheight\fP,
	INTEGER*4 \fIformat\fP,
	INTEGER*4 \fItype\fP,
	INTEGER*4 \fIlevel\fP,
	INTEGER*4 \fIbase\fP,
	INTEGER*4 \fImax\fP,
	void \fIdata\fP )
.fi

.EQ
delim $$
.EN
.SH PARAMETERS
.TP \w'\fIinternalFormat\fP\ \ 'u 
\f2target\fP
Specifies the target texture.  Must be \f3GL_TEXTURE_2D\fP.
.TP
\f2internalFormat\fP
Requests the internal storage format of the texture image.  The most
current version of the SGI implementation of GLU does not check this
value for validity before passing it on to the underlying OpenGL
implementation.  A value that is not accepted by the OpenGL
implementation will lead to an OpenGL error.  The benefit of not
checking this value at the GLU level is that OpenGL extensions can add
new internal texture formats without requiring a revision of the GLU
implementation.  Older implementations of GLU check this value and
raise a GLU error if it is not 1, 2, 3, or 4 or one of the following
symbolic constants:
\f3GL_ALPHA\fP,
\f3GL_ALPHA4\fP,
\f3GL_ALPHA8\fP,
\f3GL_ALPHA12\fP,
\f3GL_ALPHA16\fP,
\f3GL_LUMINANCE\fP,
\f3GL_LUMINANCE4\fP,
\f3GL_LUMINANCE8\fP,
\f3GL_LUMINANCE12\fP,
\f3GL_LUMINANCE16\fP,
\f3GL_LUMINANCE_ALPHA\fP,
\f3GL_LUMINANCE4_ALPHA4\fP,
\f3GL_LUMINANCE6_ALPHA2\fP,
\f3GL_LUMINANCE8_ALPHA8\fP,
\f3GL_LUMINANCE12_ALPHA4\fP,
\f3GL_LUMINANCE12_ALPHA12\fP,
\f3GL_LUMINANCE16_ALPHA16\fP,
\f3GL_INTENSITY\fP,
\f3GL_INTENSITY4\fP,
\f3GL_INTENSITY8\fP,
\f3GL_INTENSITY12\fP,
\f3GL_INTENSITY16\fP,
\f3GL_RGB\fP,
\f3GL_R3_G3_B2\fP,
\f3GL_RGB4\fP,
\f3GL_RGB5\fP,
\f3GL_RGB8\fP,
\f3GL_RGB10\fP,
\f3GL_RGB12\fP,
\f3GL_RGB16\fP,
\f3GL_RGBA\fP,
\f3GL_RGBA2\fP,
\f3GL_RGBA4\fP,
\f3GL_RGB5_A1\fP,
\f3GL_RGBA8\fP,
\f3GL_RGB10_A2\fP,
\f3GL_RGBA12\fP or
\f3GL_RGBA16\fP.
.TP
\f2width\fP, \f2height\fP
Specifies the width and height, respectively, in pixels of the texture image. 
These should be a power of 2.
.TP
\f2format\fP
Specifies the format of the pixel data.
Must be one of
\f3GL_COLOR_INDEX\fP,
\f3GL_DEPTH_COMPONENT\fP,
\f3GL_RED\fP,
\f3GL_GREEN\fP,
\f3GL_BLUE\fP,
\f3GL_ALPHA\fP,
\f3GL_RGB\fP,
\f3GL_RGBA\fP,
\f3GL_BGR\fP,
\f3GL_BGRA\fP,
\f3GL_LUMINANCE\fP, or
\f3GL_LUMINANCE_ALPHA\fP.
.TP
\f2type\fP
Specifies the data type for \f2data\fP.
Must be one of
\f3GL_UNSIGNED_BYTE\fP,
\f3GL_BYTE\fP,
\f3GL_BITMAP\fP,
\f3GL_UNSIGNED_SHORT\fP,
\f3GL_SHORT\fP,
\f3GL_UNSIGNED_INT\fP,
\f3GL_INT\fP, 
\f3GL_FLOAT\fP, 
\f3GL_UNSIGNED_BYTE_3_3_2\fP,
\f3GL_UNSIGNED_BYTE_2_3_3_REV\fP,
\f3GL_UNSIGNED_SHORT_5_6_5\fP,
\f3GL_UNSIGNED_SHORT_5_6_5_REV\fP,
\f3GL_UNSIGNED_SHORT_4_4_4_4\fP,
\f3GL_UNSIGNED_SHORT_4_4_4_4_REV\fP,
\f3GL_UNSIGNED_SHORT_5_5_5_1\fP,
\f3GL_UNSIGNED_SHORT_1_5_5_5_REV\fP,
\f3GL_UNSIGNED_INT_8_8_8_8\fP,
\f3GL_UNSIGNED_INT_8_8_8_8_REV\fP,
\f3GL_UNSIGNED_INT_10_10_10_2\fP or
\f3GL_UNSIGNED_INT_2_10_10_10_REV\fP.
.TP
\f2level\fP
Specifies the mipmap level of the image data.
.TP
\f2base\fP
Specifies the minimum mipmap level to pass to \f3glTexImage2D\fP.
.TP
\f2max\fP
Specifies the maximum mipmap level to pass to \f3glTexImage2D\fP.
.TP
\f2data\fP
Specifies a pointer to the image data in memory.
.SH DESCRIPTION
\f3fgluBuild2DMipmapLevels\fP builds a subset of prefiltered two-dimensional texture maps of decreasing
resolutions called a mipmap. This is used for the antialiasing of
texture mapped primitives.
.P
A return value of zero indicates success, otherwise a GLU error code is
returned (see \f3fgluErrorString\fP).
.P
A series of mipmap levels from \f2base\fP to \f2max\fP is built by decimating 
\f2data\fP in half along
both dimensions until size $1 ~times~ 1$ is reached. At each level, each texel in the
halved mipmap level is an average of the corresponding four texels in the larger
mipmap level. (In the case of rectangular images, the decimation will ultimately 
reach an $N ~times~ 1$ or $1 ~times~ N$ configuration. Here, two texels are
averaged instead.)
\f3glTexImage2D\fP is called to load these mipmap levels from \f2base\fP
to \f2max\fP. If \f2max\fP is larger than the highest mipmap level for the
texture of the specified size, then a GLU error code is returned (see
\f3fgluErrorString\fP) and nothing is loaded.
.P
For example, if \f2level\fP is 2 and \f2width\fP is 16 and \f2height\fP is 8, the
following levels are possible: $16 ~times~ 8$, $8 ~times~ 4$, $4 ~times~ 2$,
$2 ~times~ 1$, $1 ~times~ 1$. These correspond to levels 2 through 6
respectively.  If \f2base\fP is 3 and \f2max\fP is 5, then only mipmap levels
$8 ~times~ 4$, $4 ~times~ 2$ and $2 ~times~ 1$ are loaded. However, if \f2max\fP
is 7 then an error is returned and nothing is loaded since \f2max\fP is
larger than the highest mipmap level which is, in this case, 6.
.P
The highest mipmap level can be derived from the formula
log2(max(\f2width\fP,\f2height\fP)*(2^\f2level\fP)).
.P
See the \f3glTexImage1D\fP reference page for a description of the
acceptable values for \f2format\fP parameter. See the \f3glDrawPixels\fP 
reference page for a description of the acceptable values 
for \f2type\fP parameter.
.SH NOTES
\f3fgluBuild2DMipmapLevels\fP is only available if the GLU version is 1.3 or greater.
.P
Formats \f3GL_BGR\fP, and \f3GL_BGRA\fP, and types 
\f3GL_UNSIGNED_BYTE_3_3_2\fP,
\f3GL_UNSIGNED_BYTE_2_3_3_REV\fP,
\f3GL_UNSIGNED_SHORT_5_6_5\fP,
\f3GL_UNSIGNED_SHORT_5_6_5_REV\fP,
\f3GL_UNSIGNED_SHORT_4_4_4_4\fP,
\f3GL_UNSIGNED_SHORT_4_4_4_4_REV\fP,
\f3GL_UNSIGNED_SHORT_5_5_5_1\fP,
\f3GL_UNSIGNED_SHORT_1_5_5_5_REV\fP,
\f3GL_UNSIGNED_INT_8_8_8_8\fP,
\f3GL_UNSIGNED_INT_8_8_8_8_REV\fP,
\f3GL_UNSIGNED_INT_10_10_10_2\fP, and
\f3GL_UNSIGNED_INT_2_10_10_10_REV\fP are only available if the GL version 
is 1.2 or greater.
.SH ERRORS
\f3GLU_INVALID_VALUE\fP is returned if \f2level\fP > \f2base\fP, \f2base\fP < 0,
\f2max\fP < \f2base\fP or \f2max\fP is > the highest mipmap level for \f2data\fP.
.P
\f3GLU_INVALID_VALUE\fP is returned if \f2width\fP or \f2height\fP is < 1.
.P
\f3GLU_INVALID_ENUM\fP is returned if \f2internalFormat\fP, \f2format\fP, or \f2type\fP is not 
legal.
.P
\f3GLU_INVALID_OPERATION\fP is returned if \f2type\fP is \f3GL_UNSIGNED_BYTE_3_3_2\fP or \f3GL_UNSIGNED_BYTE_2_3_3_REV\fP
and \f2format\fP is not \f3GL_RGB\fP.
.P
\f3GLU_INVALID_OPERATION\fP is returned if \f2type\fP is \f3GL_UNSIGNED_SHORT_5_6_5\fP or \f3GL_UNSIGNED_SHORT_5_6_5_REV\fP
and \f2format\fP is not \f3GL_RGB\fP.
.P
\f3GLU_INVALID_OPERATION\fP is returned if \f2type\fP is \f3GL_UNSIGNED_SHORT_4_4_4_4\fP or \f3GL_UNSIGNED_SHORT_4_4_4_4_REV\fP
and \f2format\fP is neither \f3GL_RGBA\fP nor \f3GL_BGRA\fP.
.P
\f3GLU_INVALID_OPERATION\fP is returned if \f2type\fP is \f3GL_UNSIGNED_SHORT_5_5_5_1\fP or \f3GL_UNSIGNED_SHORT_1_5_5_5_REV\fP
and \f2format\fP is neither \f3GL_RGBA\fP nor \f3GL_BGRA\fP.
.P
\f3GLU_INVALID_OPERATION\fP is returned if \f2type\fP is \f3GL_UNSIGNED_INT_8_8_8_8\fP or \f3GL_UNSIGNED_INT_8_8_8_8_REV\fP
and \f2format\fP is neither \f3GL_RGBA\fP nor \f3GL_BGRA\fP.
.P
\f3GLU_INVALID_OPERATION\fP is returned if \f2type\fP is \f3GL_UNSIGNED_INT_10_10_10_2\fP or \f3GL_UNSIGNED_INT_2_10_10_10_REV\fP
and \f2format\fP is neither \f3GL_RGBA\fP nor \f3GL_BGRA\fP.
.SH SEE ALSO
\f3glDrawPixels\fP,
\f3glTexImage1D\fP,
\f3glTexImage2D\fP, 
\f3glTexImage3D\fP,
\f3fgluBuild1DMipmaps\fP,
\f3fgluBuild2DMipmaps\fP,
\f3fgluBuild3DMipmaps\fP, 
\f3fgluErrorString\fP, 
\f3glGetTexImage\fP,
\f3glGetTexLevelParameter\fP,
\f3fgluBuild1DMipmapLevels\fP,
\f3fgluBuild3DMipmapLevels\fP
@


1.1
log
@Initial revision
@
text
@d1 2
d6 24
a29 5
.ds Dp Feb 04 11:06
.ds Dm 4 Feb  4 11:
.ds Xs 35570     9
_header(Build2DMipmapLevels, builds a subset of two-dimensional mipmap levels)
_names(Build2DMipmapLevels)
d34 2
a35 1
_phead(_param1)
d37 2
a38 1
_phead(_param2)
d87 2
a88 1
_phead(_param3 _param4)
d91 2
a92 1
_phead(_param5)
d107 3
a109 2
_phead(_param6)
Specifies the data type for _param10.
d131 2
a132 1
_phead(_param7)
d134 8
a141 5
_phead(_param8)
Specifies the minimum mipmap level to pass to _glcmnd(TexImage2D).
_phead(_param9)
Specifies the maximum mipmap level to pass to _glcmnd(TexImage2D).
_phead(_param10)
d144 1
a144 1
_cmnd builds a subset of prefiltered two-dimensional texture maps of decreasing
d149 1
a149 1
returned (see _cmnd(ErrorString)).
d151 2
a152 2
A series of mipmap levels from _param8 to _param9 is built by decimating 
_param10 in half along
d158 2
a159 2
_glcmnd(TexImage2D) is called to load these mipmap levels from _param8
to _param9. If _param9 is larger than the highest mipmap level for the
d161 1
a161 1
_cmnd(ErrorString)) and nothing is loaded.
d163 1
a163 1
For example, if _param7 is 2 and _param3 is 16 and _param4 is 8, the
d166 3
a168 3
respectively.  If _param8 is 3 and _param9 is 5, then only mipmap levels
$8 ~times~ 4$, $4 ~times~ 2$ and $2 ~times~ 1$ are loaded. However, if _param9
is 7 then an error is returned and nothing is loaded since _param9 is
d172 1
a172 1
log2(max(_param3,_param4)*(2^_param7)).
d174 2
a175 2
See the _glcmnd(TexImage1D) reference page for a description of the
acceptable values for _param5 parameter. See the _glcmnd(DrawPixels) 
d177 1
a177 1
for _param6 parameter.
d179 1
a179 1
_cmnd is only available if the GLU version is 1.3 or greater.
d196 2
a197 2
\f3GLU_INVALID_VALUE\fP is returned if _param7 > _param8, _param8 < 0,
_param9 < _param8 or _param9 is > the highest mipmap level for _param10.
d199 1
a199 1
\f3GLU_INVALID_VALUE\fP is returned if _param3 or _param4 is < 1.
d201 1
a201 1
\f3GLU_INVALID_ENUM\fP is returned if _param2, _param5, or _param6 is not 
d204 2
a205 2
\f3GLU_INVALID_OPERATION\fP is returned if _param6 is \f3GL_UNSIGNED_BYTE_3_3_2\fP or \f3GL_UNSIGNED_BYTE_2_3_3_REV\fP
and _param5 is not \f3GL_RGB\fP.
d207 2
a208 2
\f3GLU_INVALID_OPERATION\fP is returned if _param6 is \f3GL_UNSIGNED_SHORT_5_6_5\fP or \f3GL_UNSIGNED_SHORT_5_6_5_REV\fP
and _param5 is not \f3GL_RGB\fP.
d210 2
a211 2
\f3GLU_INVALID_OPERATION\fP is returned if _param6 is \f3GL_UNSIGNED_SHORT_4_4_4_4\fP or \f3GL_UNSIGNED_SHORT_4_4_4_4_REV\fP
and _param5 is neither \f3GL_RGBA\fP nor \f3GL_BGRA\fP.
d213 2
a214 2
\f3GLU_INVALID_OPERATION\fP is returned if _param6 is \f3GL_UNSIGNED_SHORT_5_5_5_1\fP or \f3GL_UNSIGNED_SHORT_1_5_5_5_REV\fP
and _param5 is neither \f3GL_RGBA\fP nor \f3GL_BGRA\fP.
d216 2
a217 2
\f3GLU_INVALID_OPERATION\fP is returned if _param6 is \f3GL_UNSIGNED_INT_8_8_8_8\fP or \f3GL_UNSIGNED_INT_8_8_8_8_REV\fP
and _param5 is neither \f3GL_RGBA\fP nor \f3GL_BGRA\fP.
d219 2
a220 2
\f3GLU_INVALID_OPERATION\fP is returned if _param6 is \f3GL_UNSIGNED_INT_10_10_10_2\fP or \f3GL_UNSIGNED_INT_2_10_10_10_REV\fP
and _param5 is neither \f3GL_RGBA\fP nor \f3GL_BGRA\fP.
d222 12
a233 12
_glcmnd(DrawPixels),
_glcmnd(TexImage1D),
_glcmnd(TexImage2D), 
_glcmnd(TexImage3D),
_cmnd(Build1DMipmaps),
_cmnd(Build2DMipmaps),
_cmnd(Build3DMipmaps), 
_cmnd(ErrorString), 
_glcmnd(GetTexImage),
_glcmnd(GetTexLevelParameter),
_cmnd(Build1DMipmapLevels),
_cmnd(Build3DMipmapLevels)
@


1.1.1.1
log
@win32-x11 source tree update March 26, 2001
@
text
@@
