head	1.2;
access;
symbols
	win32-x11-2001-03-26:1.1.1.1 SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2001.06.03.20.47.19;	author ssiddiqi;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.25.19.36.53;	author ssiddiqi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.03.25.19.36.53;	author ssiddiqi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Win32-X11 update sources check in, June 3, 2001 - ssiddiqi
@
text
@'\"! eqn | mmdoc
'\"macro stdmacro
.ds Vn Version 1.2
.ds Dt 10 Nov 1998
.ds Re Release 1.0
.ds Dp Apr 04 17:42
.ds Dm  Apr  4  200
.ds Xs 16595 19 fglubuild2dmipmaps.gl
.TH FGLUBUILD2DMIPMAPS 
.SH NAME
.B "fgluBuild2DMipmaps
\- builds a two-dimensional mipmap

.SH FORTRAN SPECIFICATION
INTEGER*4 \f3fgluBuild2DMipmaps\fP(
INTEGER*4 \fItarget\fP,
.nf
.ta \w'\f3INTEGER*4 \fPfgluBuild2DMipmaps( 'u
	INTEGER*4 \fIinternalFormat\fP,
	INTEGER*4 \fIwidth\fP,
	INTEGER*4 \fIheight\fP,
	INTEGER*4 \fIformat\fP,
	INTEGER*4 \fItype\fP,
	void \fIdata\fP )
.fi

.EQ
delim $$
.EN
.SH PARAMETERS
.TP \w'\fIinternalFormat\fP\ \ 'u 
\f2target\fP
Specifies the target texture.  Must be \f3GL_TEXTURE_2D\fP.
.TP
\f2internalFormat\fP
Requests the internal storage format of the texture image.  The most
current version of the SGI implementation of GLU does not check this
value for validity before passing it on to the underlying OpenGL
implementation.  A value that is not accepted by the OpenGL
implementation will lead to an OpenGL error.  The benefit of not
checking this value at the GLU level is that OpenGL extensions can add
new internal texture formats without requiring a revision of the GLU
implementation.  Older implementations of GLU check this value and
raise a GLU error if it is not 1, 2, 3, or 4 or one of the following
symbolic constants:
\f3GL_ALPHA\fP,
\f3GL_ALPHA4\fP,
\f3GL_ALPHA8\fP,
\f3GL_ALPHA12\fP,
\f3GL_ALPHA16\fP,
\f3GL_LUMINANCE\fP,
\f3GL_LUMINANCE4\fP,
\f3GL_LUMINANCE8\fP,
\f3GL_LUMINANCE12\fP,
\f3GL_LUMINANCE16\fP,
\f3GL_LUMINANCE_ALPHA\fP,
\f3GL_LUMINANCE4_ALPHA4\fP,
\f3GL_LUMINANCE6_ALPHA2\fP,
\f3GL_LUMINANCE8_ALPHA8\fP,
\f3GL_LUMINANCE12_ALPHA4\fP,
\f3GL_LUMINANCE12_ALPHA12\fP,
\f3GL_LUMINANCE16_ALPHA16\fP,
\f3GL_INTENSITY\fP,
\f3GL_INTENSITY4\fP,
\f3GL_INTENSITY8\fP,
\f3GL_INTENSITY12\fP,
\f3GL_INTENSITY16\fP,
\f3GL_RGB\fP,
\f3GL_R3_G3_B2\fP,
\f3GL_RGB4\fP,
\f3GL_RGB5\fP,
\f3GL_RGB8\fP,
\f3GL_RGB10\fP,
\f3GL_RGB12\fP,
\f3GL_RGB16\fP,
\f3GL_RGBA\fP,
\f3GL_RGBA2\fP,
\f3GL_RGBA4\fP,
\f3GL_RGB5_A1\fP,
\f3GL_RGBA8\fP,
\f3GL_RGB10_A2\fP,
\f3GL_RGBA12\fP or
\f3GL_RGBA16\fP.
.TP
\f2width\fP, \f2height\fP
Specifies in pixels the width and height, respectively, of the texture image. 
.TP
\f2format\fP
Specifies the format of the pixel data.
Must be one of
\f3GL_COLOR_INDEX\fP,
\f3GL_DEPTH_COMPONENT\fP,
\f3GL_RED\fP,
\f3GL_GREEN\fP,
\f3GL_BLUE\fP,
\f3GL_ALPHA\fP,
\f3GL_RGB\fP,
\f3GL_RGBA\fP,
\f3GL_BGR\fP,
\f3GL_BGRA\fP,
\f3GL_LUMINANCE\fP, or
\f3GL_LUMINANCE_ALPHA\fP.
.TP
\f2type\fP
Specifies the data type for \f2data\fP.
Must be one of
\f3GL_UNSIGNED_BYTE\fP,
\f3GL_BYTE\fP,
\f3GL_BITMAP\fP,
\f3GL_UNSIGNED_SHORT\fP,
\f3GL_SHORT\fP,
\f3GL_UNSIGNED_INT\fP,
\f3GL_INT\fP, 
\f3GL_FLOAT\fP, 
\f3GL_UNSIGNED_BYTE_3_3_2\fP,
\f3GL_UNSIGNED_BYTE_2_3_3_REV\fP,
\f3GL_UNSIGNED_SHORT_5_6_5\fP,
\f3GL_UNSIGNED_SHORT_5_6_5_REV\fP,
\f3GL_UNSIGNED_SHORT_4_4_4_4\fP,
\f3GL_UNSIGNED_SHORT_4_4_4_4_REV\fP,
\f3GL_UNSIGNED_SHORT_5_5_5_1\fP,
\f3GL_UNSIGNED_SHORT_1_5_5_5_REV\fP,
\f3GL_UNSIGNED_INT_8_8_8_8\fP,
\f3GL_UNSIGNED_INT_8_8_8_8_REV\fP,
\f3GL_UNSIGNED_INT_10_10_10_2\fP, or
\f3GL_UNSIGNED_INT_2_10_10_10_REV\fP.
.TP
\f2data\fP
Specifies a pointer to the image data in memory.


.SH DESCRIPTION
\f3fgluBuild2DMipmaps\fP builds a series of prefiltered two-dimensional texture maps of decreasing
resolutions called a mipmap. This is used for the antialiasing of
texture-mapped primitives.
.P
A return value of zero indicates success, otherwise a GLU error code is
returned (see \f3fgluErrorString\fP).
.P
Initially, the \f2width\fP and \f2height\fP of \f2data\fP are checked to see if they
are a power of 2. If not, a copy of \f2data\fP (not \f2data\fP), is scaled up
or down to the nearest power of 2. This copy will be used for subsequent
mipmapping operations described below. (If \f2width\fP or \f2height\fP is exactly
between powers of 2, then the copy of \f2data\fP will scale upwards.)  For
example, if \f2width\fP is 57 and \f2height\fP is 23 then a copy of \f2data\fP will
scale up to 64 in \f2width\fP and down to 16 in depth, before mipmapping takes
place.
.P
Then, proxy textures (see \f3glTexImage2D\fP) are used to determine if
the implementation can fit the requested texture. If not, both dimensions
are continually halved until it fits. (If the OpenGL version is \(<= 1.0,
both maximum texture dimensions are clamped to the value returned
by \f3glGetIntegerv\fP with the argument \f3GL_MAX_TEXTURE_SIZE\fP.)
.P
Next, a series of mipmap levels is built by decimating a copy of \f2data\fP
in half along both dimensions until size $1 ~times~ 1$ is reached. At
each level,
each texel in the halved mipmap level is an average of the corresponding
four texels in the larger mipmap level. (In the case of rectangular
images, the decimation will ultimately reach an $N ~times~ 1$ or
$1 ~times~ N$ configuration. Here, two texels are averaged instead.)
.P
\f3glTexImage2D\fP is called to load each of these mipmap levels.
Level 0 is a copy of \f2data\fP.  The highest level is
${log sub 2} ( max ("width","height"))$.  For example,
if \f2width\fP is 64 and \f2height\fP is 16
and the implementation can store a texture of this size, the following
mipmap levels are built: $64 ~times~ 16$, $32 ~times~ 8$, $16 ~times~ 4$,
$8 ~times~ 2$, $4 ~times~ 1$, $2 ~times~ 1$ and $1 ~times~ 1$. These correspond to
levels 0 through 6, respectively.
.P
See the \f3glTexImage1D\fP reference page for a description of the
acceptable values for \f2format\fP parameter. See the \f3glDrawPixels\fP 
reference page for a description of the acceptable values 
for \f2type\fP parameter.
.SH NOTES

Note that there is no direct way of querying the maximum level. This can
be derived indirectly via \f3glGetTexLevelParameter\fP. First, query
for the width and height actually used at level 0.  (The width and
height may not be equal to \f2width\fP and \f2height\fP respectively since proxy
textures might have scaled them to fit the implementation.)  Then the
maximum level can be derived from the formula
${log sub 2}( max (\f2width\fP,\f2height\fP))$.
.SH NOTES
Formats \f3GL_BGR\fP, and \f3GL_BGRA\fP, and types 
\f3GL_UNSIGNED_BYTE_3_3_2\fP,
\f3GL_UNSIGNED_BYTE_2_3_3_REV\fP,
\f3GL_UNSIGNED_SHORT_5_6_5\fP,
\f3GL_UNSIGNED_SHORT_5_6_5_REV\fP,
\f3GL_UNSIGNED_SHORT_4_4_4_4\fP,
\f3GL_UNSIGNED_SHORT_4_4_4_4_REV\fP,
\f3GL_UNSIGNED_SHORT_5_5_5_1\fP,
\f3GL_UNSIGNED_SHORT_1_5_5_5_REV\fP,
\f3GL_UNSIGNED_INT_8_8_8_8\fP,
\f3GL_UNSIGNED_INT_8_8_8_8_REV\fP,
\f3GL_UNSIGNED_INT_10_10_10_2\fP, and
\f3GL_UNSIGNED_INT_2_10_10_10_REV\fP are only available if the GL version 
is 1.2 or greater and if the GLU version is 1.3 or greater.
.SH ERRORS
\f3GLU_INVALID_VALUE\fP is returned if \f2width\fP, or \f2height\fP is < 1.
.P
\f3GLU_INVALID_ENUM\fP is returned if \f2internalFormat\fP, \f2format\fP, or \f2type\fP is not 
legal.
.P
\f3GLU_INVALID_OPERATION\fP is returned if \f2type\fP is \f3GL_UNSIGNED_BYTE_3_3_2\fP or \f3GL_UNSIGNED_BYTE_2_3_3_REV\fP
and \f2format\fP is not \f3GL_RGB\fP.
.P
\f3GLU_INVALID_OPERATION\fP is returned if \f2type\fP is \f3GL_UNSIGNED_SHORT_5_6_5\fP or \f3GL_UNSIGNED_SHORT_5_6_5_REV\fP
and \f2format\fP is not \f3GL_RGB\fP.
.P
\f3GLU_INVALID_OPERATION\fP is returned if \f2type\fP is \f3GL_UNSIGNED_SHORT_4_4_4_4\fP or \f3GL_UNSIGNED_SHORT_4_4_4_4_REV\fP
and \f2format\fP is neither \f3GL_RGBA\fP nor \f3GL_BGRA\fP.
.P
\f3GLU_INVALID_OPERATION\fP is returned if \f2type\fP is \f3GL_UNSIGNED_SHORT_5_5_5_1\fP or \f3GL_UNSIGNED_SHORT_1_5_5_5_REV\fP
and \f2format\fP is neither \f3GL_RGBA\fP nor \f3GL_BGRA\fP.
.P
\f3GLU_INVALID_OPERATION\fP is returned if \f2type\fP is \f3GL_UNSIGNED_INT_8_8_8_8\fP or \f3GL_UNSIGNED_INT_8_8_8_8_REV\fP
and \f2format\fP is neither \f3GL_RGBA\fP nor \f3GL_BGRA\fP.
.P
\f3GLU_INVALID_OPERATION\fP is returned if \f2type\fP is \f3GL_UNSIGNED_INT_10_10_10_2\fP or \f3GL_UNSIGNED_INT_2_10_10_10_REV\fP
and \f2format\fP is neither \f3GL_RGBA\fP nor \f3GL_BGRA\fP.
.SH SEE ALSO
\f3glDrawPixels\fP,
\f3glTexImage1D\fP,
\f3glTexImage2D\fP, 
\f3glTexImage3D\fP,
\f3fgluBuild1DMipmaps\fP,
\f3fgluBuild3DMipmaps\fP,
\f3fgluErrorString\fP, 
\f3glGetTexImage\fP,
\f3glGetTexLevelParameter\fP,
\f3fgluBuild1DMipmapLevels\fP,
\f3fgluBuild2DMipmapLevels\fP,
\f3fgluBuild3DMipmapLevels\fP
@


1.1
log
@Initial revision
@
text
@d1 2
d6 21
a26 5
.ds Dp Feb 04 11:06
.ds Dm 9 Feb  4 11:
.ds Xs 21901    10
_header(Build2DMipmaps, builds a two-dimensional mipmap)
_names(Build2DMipmaps)
d31 2
a32 1
_phead(_param1)
d34 2
a35 1
_phead(_param2)
d84 2
a85 1
_phead(_param3 _param4)
d87 2
a88 1
_phead(_param5)
d103 3
a105 2
_phead(_param6)
Specifies the data type for _param7.
d127 2
a128 1
_phead(_param7)
d133 1
a133 1
_cmnd builds a series of prefiltered two-dimensional texture maps of decreasing
d138 1
a138 1
returned (see _cmnd(ErrorString)).
d140 2
a141 2
Initially, the _param3 and _param4 of _param7 are checked to see if they
are a power of 2. If not, a copy of _param7 (not _param7), is scaled up
d143 4
a146 4
mipmapping operations described below. (If _param3 or _param4 is exactly
between powers of 2, then the copy of _param7 will scale upwards.)  For
example, if _param3 is 57 and _param4 is 23 then a copy of _param7 will
scale up to 64 in _param3 and down to 16 in depth, before mipmapping takes
d149 1
a149 1
Then, proxy textures (see _glcmnd(TexImage2D)) are used to determine if
d153 1
a153 1
by _glcmnd(GetIntegerv) with the argument \f3GL_MAX_TEXTURE_SIZE\fP.)
d155 1
a155 1
Next, a series of mipmap levels is built by decimating a copy of _param7
d163 4
a166 4
_glcmnd(TexImage2D) is called to load each of these mipmap levels.
Level 0 is a copy of _param7.  The highest level is
${log sub 2} ( max (_eqnparam3,_eqnparam4))$.  For example,
if _param3 is 64 and _param4 is 16
d172 2
a173 2
See the _glcmnd(TexImage1D) reference page for a description of the
acceptable values for _param5 parameter. See the _glcmnd(DrawPixels) 
d175 1
a175 1
for _param6 parameter.
d179 1
a179 1
be derived indirectly via _glcmnd(GetTexLevelParameter). First, query
d181 1
a181 1
height may not be equal to _param3 and _param4 respectively since proxy
d184 1
a184 1
${log sub 2}( max (_param3,_param4))$.
d201 1
a201 1
\f3GLU_INVALID_VALUE\fP is returned if _param3, or _param4 is < 1.
d203 1
a203 1
\f3GLU_INVALID_ENUM\fP is returned if _param2, _param5, or _param6 is not 
d206 2
a207 2
\f3GLU_INVALID_OPERATION\fP is returned if _param6 is \f3GL_UNSIGNED_BYTE_3_3_2\fP or \f3GL_UNSIGNED_BYTE_2_3_3_REV\fP
and _param5 is not \f3GL_RGB\fP.
d209 2
a210 2
\f3GLU_INVALID_OPERATION\fP is returned if _param6 is \f3GL_UNSIGNED_SHORT_5_6_5\fP or \f3GL_UNSIGNED_SHORT_5_6_5_REV\fP
and _param5 is not \f3GL_RGB\fP.
d212 2
a213 2
\f3GLU_INVALID_OPERATION\fP is returned if _param6 is \f3GL_UNSIGNED_SHORT_4_4_4_4\fP or \f3GL_UNSIGNED_SHORT_4_4_4_4_REV\fP
and _param5 is neither \f3GL_RGBA\fP nor \f3GL_BGRA\fP.
d215 2
a216 2
\f3GLU_INVALID_OPERATION\fP is returned if _param6 is \f3GL_UNSIGNED_SHORT_5_5_5_1\fP or \f3GL_UNSIGNED_SHORT_1_5_5_5_REV\fP
and _param5 is neither \f3GL_RGBA\fP nor \f3GL_BGRA\fP.
d218 2
a219 2
\f3GLU_INVALID_OPERATION\fP is returned if _param6 is \f3GL_UNSIGNED_INT_8_8_8_8\fP or \f3GL_UNSIGNED_INT_8_8_8_8_REV\fP
and _param5 is neither \f3GL_RGBA\fP nor \f3GL_BGRA\fP.
d221 2
a222 2
\f3GLU_INVALID_OPERATION\fP is returned if _param6 is \f3GL_UNSIGNED_INT_10_10_10_2\fP or \f3GL_UNSIGNED_INT_2_10_10_10_REV\fP
and _param5 is neither \f3GL_RGBA\fP nor \f3GL_BGRA\fP.
d224 12
a235 12
_glcmnd(DrawPixels),
_glcmnd(TexImage1D),
_glcmnd(TexImage2D), 
_glcmnd(TexImage3D),
_cmnd(Build1DMipmaps),
_cmnd(Build3DMipmaps),
_cmnd(ErrorString), 
_glcmnd(GetTexImage),
_glcmnd(GetTexLevelParameter),
_cmnd(Build1DMipmapLevels),
_cmnd(Build2DMipmapLevels),
_cmnd(Build3DMipmapLevels)
@


1.1.1.1
log
@win32-x11 source tree update March 26, 2001
@
text
@@
