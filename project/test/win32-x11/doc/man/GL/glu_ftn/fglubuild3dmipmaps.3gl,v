head	1.2;
access;
symbols
	win32-x11-2001-03-26:1.1.1.1 SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2001.06.03.20.47.19;	author ssiddiqi;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.25.19.36.53;	author ssiddiqi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.03.25.19.36.53;	author ssiddiqi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Win32-X11 update sources check in, June 3, 2001 - ssiddiqi
@
text
@'\"! eqn | mmdoc
'\"macro stdmacro
.ds Vn Version 1.2
.ds Dt 10 Nov 1998
.ds Re Release 1.0
.ds Dp Apr 04 17:42
.ds Dm  Apr  4  200
.ds Xs 22063 19 fglubuild3dmipmaps.gl
.TH FGLUBUILD3DMIPMAPS 
.SH NAME
.B "fgluBuild3DMipmaps
\- builds a three-dimensional mipmap

.SH FORTRAN SPECIFICATION
INTEGER*4 \f3fgluBuild3DMipmaps\fP(
INTEGER*4 \fItarget\fP,
.nf
.ta \w'\f3INTEGER*4 \fPfgluBuild3DMipmaps( 'u
	INTEGER*4 \fIinternalFormat\fP,
	INTEGER*4 \fIwidth\fP,
	INTEGER*4 \fIheight\fP,
	INTEGER*4 \fIdepth\fP,
	INTEGER*4 \fIformat\fP,
	INTEGER*4 \fItype\fP,
	void \fIdata\fP )
.fi

.EQ
delim $$
.EN
.SH PARAMETERS
.TP \w'\fIinternalFormat\fP\ \ 'u 
\f2target\fP
Specifies the target texture.  Must be \f3GL_TEXTURE_3D\fP.
.TP
\f2internalFormat\fP
Requests the internal storage format of the texture image.  The most
current version of the SGI implementation of GLU does not check this
value for validity before passing it on to the underlying OpenGL
implementation.  A value that is not accepted by the OpenGL
implementation will lead to an OpenGL error.  The benefit of not
checking this value at the GLU level is that OpenGL extensions can add
new internal texture formats without requiring a revision of the GLU
implementation.  Older implementations of GLU check this value and
raise a GLU error if it is not 1, 2, 3, or 4 or one of the following
symbolic constants:
\f3GL_ALPHA\fP,
\f3GL_ALPHA4\fP,
\f3GL_ALPHA8\fP,
\f3GL_ALPHA12\fP,
\f3GL_ALPHA16\fP,
\f3GL_LUMINANCE\fP,
\f3GL_LUMINANCE4\fP,
\f3GL_LUMINANCE8\fP,
\f3GL_LUMINANCE12\fP,
\f3GL_LUMINANCE16\fP,
\f3GL_LUMINANCE_ALPHA\fP,
\f3GL_LUMINANCE4_ALPHA4\fP,
\f3GL_LUMINANCE6_ALPHA2\fP,
\f3GL_LUMINANCE8_ALPHA8\fP,
\f3GL_LUMINANCE12_ALPHA4\fP,
\f3GL_LUMINANCE12_ALPHA12\fP,
\f3GL_LUMINANCE16_ALPHA16\fP,
\f3GL_INTENSITY\fP,
\f3GL_INTENSITY4\fP,
\f3GL_INTENSITY8\fP,
\f3GL_INTENSITY12\fP,
\f3GL_INTENSITY16\fP,
\f3GL_RGB\fP,
\f3GL_R3_G3_B2\fP,
\f3GL_RGB4\fP,
\f3GL_RGB5\fP,
\f3GL_RGB8\fP,
\f3GL_RGB10\fP,
\f3GL_RGB12\fP,
\f3GL_RGB16\fP,
\f3GL_RGBA\fP,
\f3GL_RGBA2\fP,
\f3GL_RGBA4\fP,
\f3GL_RGB5_A1\fP,
\f3GL_RGBA8\fP,
\f3GL_RGB10_A2\fP,
\f3GL_RGBA12\fP, or
\f3GL_RGBA16\fP.
.TP
\f2width\fP, \f2height\fP, \f2depth\fP
Specifies in pixels the width, height and depth respectively, in pixels
of the texture image. 
.TP
\f2format\fP
Specifies the format of the pixel data.
Must be one of
\f3GL_COLOR_INDEX\fP,
\f3GL_DEPTH_COMPONENT\fP,
\f3GL_RED\fP,
\f3GL_GREEN\fP,
\f3GL_BLUE\fP,
\f3GL_ALPHA\fP,
\f3GL_RGB\fP,
\f3GL_RGBA\fP,
\f3GL_BGR\fP,
\f3GL_BGRA\fP,
\f3GL_LUMINANCE\fP, or
\f3GL_LUMINANCE_ALPHA\fP.
.TP
\f2type\fP
Specifies the data type for \f2data\fP.
Must be one of:
\f3GL_UNSIGNED_BYTE\fP,
\f3GL_BYTE\fP,
\f3GL_BITMAP\fP,
\f3GL_UNSIGNED_SHORT\fP,
\f3GL_SHORT\fP,
\f3GL_UNSIGNED_INT\fP,
\f3GL_INT\fP, 
\f3GL_FLOAT\fP, 
\f3GL_UNSIGNED_BYTE_3_3_2\fP,
\f3GL_UNSIGNED_BYTE_2_3_3_REV\fP,
\f3GL_UNSIGNED_SHORT_5_6_5\fP,
\f3GL_UNSIGNED_SHORT_5_6_5_REV\fP,
\f3GL_UNSIGNED_SHORT_4_4_4_4\fP,
\f3GL_UNSIGNED_SHORT_4_4_4_4_REV\fP,
\f3GL_UNSIGNED_SHORT_5_5_5_1\fP,
\f3GL_UNSIGNED_SHORT_1_5_5_5_REV\fP,
\f3GL_UNSIGNED_INT_8_8_8_8\fP,
\f3GL_UNSIGNED_INT_8_8_8_8_REV\fP,
\f3GL_UNSIGNED_INT_10_10_10_2\fP, or
\f3GL_UNSIGNED_INT_2_10_10_10_REV\fP.
.TP
\f2data\fP
Specifies a pointer to the image data in memory.
.SH DESCRIPTION
\f3fgluBuild3DMipmaps\fP builds a series of prefiltered three-dimensional texture maps of
decreasing resolutions called a mipmap. This is used for the antialiasing of
texture-mapped primitives.
.P
A return value of zero indicates success, otherwise a GLU error code is
returned (see \f3fgluErrorString\fP).
.P
Initially, the \f2width\fP, \f2height\fP and \f2depth\fP of \f2data\fP are checked to
see if they are a power of 2. If not, a copy of \f2data\fP (not \f2data\fP),
is scaled up or down to the nearest power of 2. (If \f2width\fP, \f2height\fP or
\f2depth\fP is exactly between powers of 2, then the copy of \f2data\fP will
scale upwards.) This copy will be used for subsequent mipmapping
operations described below.  For example, if \f2width\fP is 57, \f2height\fP is
23 and \f2depth\fP is 24 then a copy of \f2data\fP will scale up to 64 in
width, down to 16 in height and up to 32 in depth, before mipmapping
takes place.
.P
Then, proxy textures (see \f3glTexImage3D\fP) are used to determine if
the implementation can fit the requested texture. If not, all three dimensions
are continually halved until it fits. 
.P
Next, a series of mipmap levels is built by decimating a copy of \f2data\fP
in half along all three dimensions until size $1 ~times~ 1 ~times~ 1$ is
reached. At each level, each texel in the halved mipmap level is an
average of the corresponding eight texels in the larger mipmap
level. (If exactly one of the dimensions is 1, four texels are averaged.
If exactly two of the dimensions are 1, two texels are averaged.)
.P
\f3glTexImage3D\fP is called to load each of these mipmap levels.
Level 0 is a copy of \f2data\fP.  The highest level is
${log sub 2} ( max ("width","height","depth"))$.
For example, if \f2width\fP is 64, \f2height\fP is
16 and \f2depth\fP is 32, and the implementation can store a texture of this
size, the following mipmap levels are built: $64 ~times~ 16 ~times~ 32$,
$32 ~times~ 8 ~times~ 16$, $16 ~times~ 4 ~times~ 8$,
$8 ~times~ 2 ~times~ 4$, $4 ~times~ 1 ~times~ 2$,
$2 ~times~ 1 ~times~ 1$
and $1 ~times~ 1 ~times~ 1$. These correspond
to levels 0 through 6, respectively.
.P
See the \f3glTexImage1D\fP reference page for a description of the
acceptable values for \f2format\fP parameter. See the \f3glDrawPixels\fP 
reference page for a description of the acceptable values 
for \f2type\fP parameter.
.SH NOTES
Note that there is no direct way of querying the maximum level. This can
be derived indirectly via \f3glGetTexLevelParameter\fP. First, query
for the width, height and depth actually used at level 0.  (The width,
height and depth may not be equal to \f2width\fP, \f2height\fP and \f2depth\fP
respectively since proxy textures might have scaled them to fit the
implementation.)  Then the maximum level can be derived from the formula
${log sub 2} ( max ("width","height","depth"))$.
.P
\f3fgluBuild3DMipmaps\fP is only available if the GLU version is 1.3 or greater.
.P
Formats \f3GL_BGR\fP, and \f3GL_BGRA\fP, and types 
\f3GL_UNSIGNED_BYTE_3_3_2\fP,
\f3GL_UNSIGNED_BYTE_2_3_3_REV\fP,
\f3GL_UNSIGNED_SHORT_5_6_5\fP,
\f3GL_UNSIGNED_SHORT_5_6_5_REV\fP,
\f3GL_UNSIGNED_SHORT_4_4_4_4\fP,
\f3GL_UNSIGNED_SHORT_4_4_4_4_REV\fP,
\f3GL_UNSIGNED_SHORT_5_5_5_1\fP,
\f3GL_UNSIGNED_SHORT_1_5_5_5_REV\fP,
\f3GL_UNSIGNED_INT_8_8_8_8\fP,
\f3GL_UNSIGNED_INT_8_8_8_8_REV\fP,
\f3GL_UNSIGNED_INT_10_10_10_2\fP, and
\f3GL_UNSIGNED_INT_2_10_10_10_REV\fP are only available if the GL version 
is 1.2 or greater.
.SH ERRORS
\f3GLU_INVALID_VALUE\fP is returned if \f2width\fP, \f2height\fP, or \f2depth\fP is < 1.
.P
\f3GLU_INVALID_ENUM\fP is returned if \f2internalFormat\fP, \f2format\fP, or \f2type\fP is not 
legal.
.P
\f3GLU_INVALID_OPERATION\fP is returned if \f2type\fP is \f3GL_UNSIGNED_BYTE_3_3_2\fP or \f3GL_UNSIGNED_BYTE_2_3_3_REV\fP
and \f2format\fP is not \f3GL_RGB\fP.
.P
\f3GLU_INVALID_OPERATION\fP is returned if \f2type\fP is \f3GL_UNSIGNED_SHORT_5_6_5\fP or \f3GL_UNSIGNED_SHORT_5_6_5_REV\fP
and \f2format\fP is not \f3GL_RGB\fP.
.P
\f3GLU_INVALID_OPERATION\fP is returned if \f2type\fP is \f3GL_UNSIGNED_SHORT_4_4_4_4\fP or \f3GL_UNSIGNED_SHORT_4_4_4_4_REV\fP
and \f2format\fP is neither \f3GL_RGBA\fP nor \f3GL_BGRA\fP.
.P
\f3GLU_INVALID_OPERATION\fP is returned if \f2type\fP is \f3GL_UNSIGNED_SHORT_5_5_5_1\fP or \f3GL_UNSIGNED_SHORT_1_5_5_5_REV\fP
and \f2format\fP is neither \f3GL_RGBA\fP nor \f3GL_BGRA\fP.
.P
\f3GLU_INVALID_OPERATION\fP is returned if \f2type\fP is \f3GL_UNSIGNED_INT_8_8_8_8\fP or \f3GL_UNSIGNED_INT_8_8_8_8_REV\fP
and \f2format\fP is neither \f3GL_RGBA\fP nor \f3GL_BGRA\fP.
.P
\f3GLU_INVALID_OPERATION\fP is returned if \f2type\fP is \f3GL_UNSIGNED_INT_10_10_10_2\fP or \f3GL_UNSIGNED_INT_2_10_10_10_REV\fP
and \f2format\fP is neither \f3GL_RGBA\fP nor \f3GL_BGRA\fP.
.SH SEE ALSO
\f3glDrawPixels\fP,
\f3glTexImage1D\fP,
\f3glTexImage2D\fP, 
\f3glTexImage3D\fP,
\f3fgluBuild1DMipmaps\fP,
\f3fgluBuild3DMipmaps\fP,
\f3fgluErrorString\fP, 
\f3glGetTexImage\fP,
\f3glGetTexLevelParameter\fP,
\f3fgluBuild1DMipmapLevels\fP,
\f3fgluBuild2DMipmapLevels\fP,
\f3fgluBuild3DMipmapLevels\fP
@


1.1
log
@Initial revision
@
text
@d1 2
d6 22
a27 5
.ds Dp Feb 04 11:06
.ds Dm 9 Feb  4 11:
.ds Xs 62292    10
_header(Build3DMipmaps, builds a three-dimensional mipmap)
_names(Build3DMipmaps)
d32 2
a33 1
_phead(_param1)
d35 2
a36 1
_phead(_param2)
d85 2
a86 1
_phead(_param3 _param4 _param5)
d89 2
a90 1
_phead(_param6)
d105 3
a107 2
_phead(_param7)
Specifies the data type for _param8.
d129 2
a130 1
_phead(_param8)
d133 1
a133 1
_cmnd builds a series of prefiltered three-dimensional texture maps of
d138 1
a138 1
returned (see _cmnd(ErrorString)).
d140 4
a143 4
Initially, the _param3, _param4 and _param5 of _param8 are checked to
see if they are a power of 2. If not, a copy of _param8 (not _param8),
is scaled up or down to the nearest power of 2. (If _param3, _param4 or
_param5 is exactly between powers of 2, then the copy of _param8 will
d145 2
a146 2
operations described below.  For example, if _param3 is 57, _param4 is
23 and _param5 is 24 then a copy of _param8 will scale up to 64 in
d150 1
a150 1
Then, proxy textures (see _glcmnd(TexImage3D)) are used to determine if
d154 1
a154 1
Next, a series of mipmap levels is built by decimating a copy of _param8
d161 5
a165 5
_glcmnd(TexImage3D) is called to load each of these mipmap levels.
Level 0 is a copy of _param8.  The highest level is
${log sub 2} ( max (_eqnparam3,_eqnparam4,_eqnparam5))$.
For example, if _param3 is 64, _param4 is
16 and _param5 is 32, and the implementation can store a texture of this
d173 2
a174 2
See the _glcmnd(TexImage1D) reference page for a description of the
acceptable values for _param6 parameter. See the _glcmnd(DrawPixels) 
d176 1
a176 1
for _param7 parameter.
d179 1
a179 1
be derived indirectly via _glcmnd(GetTexLevelParameter). First, query
d181 1
a181 1
height and depth may not be equal to _param3, _param4 and _param5
d184 1
a184 1
${log sub 2} ( max (_eqnparam3,_eqnparam4,_eqnparam5))$.
d186 1
a186 1
_cmnd is only available if the GLU version is 1.3 or greater.
d203 1
a203 1
\f3GLU_INVALID_VALUE\fP is returned if _param3, _param4, or _param5 is < 1.
d205 1
a205 1
\f3GLU_INVALID_ENUM\fP is returned if _param2, _param6, or _param7 is not 
d208 2
a209 2
\f3GLU_INVALID_OPERATION\fP is returned if _param7 is \f3GL_UNSIGNED_BYTE_3_3_2\fP or \f3GL_UNSIGNED_BYTE_2_3_3_REV\fP
and _param6 is not \f3GL_RGB\fP.
d211 2
a212 2
\f3GLU_INVALID_OPERATION\fP is returned if _param7 is \f3GL_UNSIGNED_SHORT_5_6_5\fP or \f3GL_UNSIGNED_SHORT_5_6_5_REV\fP
and _param6 is not \f3GL_RGB\fP.
d214 2
a215 2
\f3GLU_INVALID_OPERATION\fP is returned if _param7 is \f3GL_UNSIGNED_SHORT_4_4_4_4\fP or \f3GL_UNSIGNED_SHORT_4_4_4_4_REV\fP
and _param6 is neither \f3GL_RGBA\fP nor \f3GL_BGRA\fP.
d217 2
a218 2
\f3GLU_INVALID_OPERATION\fP is returned if _param7 is \f3GL_UNSIGNED_SHORT_5_5_5_1\fP or \f3GL_UNSIGNED_SHORT_1_5_5_5_REV\fP
and _param6 is neither \f3GL_RGBA\fP nor \f3GL_BGRA\fP.
d220 2
a221 2
\f3GLU_INVALID_OPERATION\fP is returned if _param7 is \f3GL_UNSIGNED_INT_8_8_8_8\fP or \f3GL_UNSIGNED_INT_8_8_8_8_REV\fP
and _param6 is neither \f3GL_RGBA\fP nor \f3GL_BGRA\fP.
d223 2
a224 2
\f3GLU_INVALID_OPERATION\fP is returned if _param7 is \f3GL_UNSIGNED_INT_10_10_10_2\fP or \f3GL_UNSIGNED_INT_2_10_10_10_REV\fP
and _param6 is neither \f3GL_RGBA\fP nor \f3GL_BGRA\fP.
d226 12
a237 12
_glcmnd(DrawPixels),
_glcmnd(TexImage1D),
_glcmnd(TexImage2D), 
_glcmnd(TexImage3D),
_cmnd(Build1DMipmaps),
_cmnd(Build3DMipmaps),
_cmnd(ErrorString), 
_glcmnd(GetTexImage),
_glcmnd(GetTexLevelParameter),
_cmnd(Build1DMipmapLevels),
_cmnd(Build2DMipmapLevels),
_cmnd(Build3DMipmapLevels)
@


1.1.1.1
log
@win32-x11 source tree update March 26, 2001
@
text
@@
