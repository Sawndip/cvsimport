head	1.2;
access;
symbols
	win32-x11-2001-03-26:1.1.1.1 SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2001.06.03.20.47.21;	author ssiddiqi;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.25.19.36.53;	author ssiddiqi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.03.25.19.36.53;	author ssiddiqi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Win32-X11 update sources check in, June 3, 2001 - ssiddiqi
@
text
@'\"! eqn | mmdoc
'\"macro stdmacro
.ds Vn Version 1.2
.ds Dt 6 March 1997
.ds Re Release 1.2.0
.ds Dp Apr 04 17:42
.ds Dm  Apr  5  200
.ds Xs 44902 26 xintro.gl
.TH GLXINTRO 3G
.SH NAME
.B "glXIntro
\- Introduction to OpenGL in the X window system

.SH OVERVIEW
.P
OpenGL (called GL in other pages) is a high-performance 3D-oriented
renderer.  It is available in the X window system through the GLX extension.
To determine whether the GLX extension is supported by an X server, and if
so, what version is supported, call \%\f3glXQueryExtension\fP and
\%\f3glXQueryVersion\fP.
.P
GLX extended X servers make a subset of their visuals available for OpenGL
rendering.  Drawables created with these visual can also be rendered into
using the core X renderer and or any other X extension that is compatible
with all core X visuals.
.P
GLX extends a drawable's standard color buffer with additional buffers.
These buffers include back and auxiliary color buffers, a depth buffer, a
stencil buffer, and a color accumulation buffer.  Some or all of the buffers
listed are included in each X visual that supports OpenGL.
.P
GLX supports rendering into three types of drawables: windows, pixmaps and
pbuffers (pixel buffers). GLX windows and pixmaps are X resources, and
capable of accepting core X rendering as well as OpenGL rendering.  GLX
pbuffers are GLX only resources, and might not accept core X rendering.
.P
To render using OpenGL into a GLX drawable, you must determine the
appropriate GLXFBConfig which supports the rendering features your
application requires. \%\f3glXChooseFBConfig\fP returns a GLXFBConfig matching
the required attributes, or \%\f3NULL\fP if no match is found.  A complete
list of GLXFBConfigs supported by a server can be obtained by calling
\%\f3glXGetFBConfigs\fP.  Attributes of a particular GLXFBConfig can be
queried by calling \%\f3glXGetFBConfigAttrib\fP.
.P
For GLX windows and pixmaps, a suitable X drawable (using either
\f3XCreateWindow\fP or \f3XCreatePixmap\fP, respectively) with a matching
visual must be created first.  Call \%\f3glXGetVisualFromFBConfig\fP to obtain
the necessary XVisualInfo structure for creating the X drawable.  For
pbuffers, no underlying X drawable is required.
.P
To create a GLX window from an X window, call \%\f3glXCreateWindow\fP.
Likewise, to create a GLX pixmap, call \%\f3glXCreatePixmap\fP. Pbuffers are
created by calling \%\f3glXCreatePbuffer\fP.  Use \%\f3glXDestroyWindow\fP,
\%\f3glXDestroyPixmap\fP, and \%\f3glXDestroyPbuffer\fP to release previously
allocated resources.
.P
A GLX context is required to bind OpenGL rendering to a GLX resource.  A GLX
resource and rendering context must have compatible GLXFBConfigs.  To create
a GLX context, call \%\f3glXCreateNewContext\fP.  A context may be bound to a
GLX drawable by using \%\f3glXMakeContextCurrent\fP.  This context/drawable
pair becomes the current context and current drawable, and is used by all
OpenGL rendering commands until \%\f3glXMakeContextCurrent\fP is called with
different arguments.
.P
Both core X and OpenGL commands can be used to operate on drawables,
however, the X and OpenGL command streams are not synchronized.
Synchronization can be explicitly specified using by calling \%\f3glXWaitGL\fP,
\%\f3glXWaitX\fP, \f3XSync\fP, and \f3XFlush\fP.
.P
.SH EXAMPLES
Below is a minimal example of creating an RGBA-format, X window that's
compatible with OpenGL using GLX 1.3 commands.  The window is cleared to
yellow when the program runs.  The program does minimal error checking; all
return values should be checked.
.P
.Ex
#include <stdio.h>
#include <stdlib.h>
#include <GL/gl.h>
#include <GL/glx.h>

int singleBufferAttributess[] = {
    GLX_DRAWABLE_TYPE, GLX_WINDOW_BIT,
    GLX_RENDER_TYPE,   GLX_RGBA_BIT,
    GLX_RED_SIZE,      1,   /* Request a single buffered color buffer */
    GLX_GREEN_SIZE,    1,   /* with the maximum number of color bits  */
    GLX_BLUE_SIZE,     1,   /* for each component                     */
    None
};

int doubleBufferAttributes[] = {
    GLX_DRAWABLE_TYPE, GLX_WINDOW_BIT,
    GLX_RENDER_TYPE,   GLX_RGBA_BIT,
    GLX_DOUBLEBUFFER,  True,  /* Request a double-buffered color buffer with */
    GLX_RED_SIZE,      1,     /* the maximum number of bits per component    */
    GLX_GREEN_SIZE,    1, 
    GLX_BLUE_SIZE,     1,
    None
};


static Bool WaitForNotify( Display *dpy, XEvent *event, XPointer arg ) {
    return (event->type == MapNotify) && (event->xmap.window == (Window) arg);
}
.bp
int main( int argc, char *argv[] )
{
    Display              *dpy;
    Window                xWin;
    XEvent                event;
    XVisualInfo          *vInfo;
    XSetWindowAttributes  swa;
    GLXFBConfig          *fbConfigs;
    GLXContext            context;
    GLXWindow             glxWin;
    int                   swaMask;
    int                   numReturned;
    int                   swapFlag = True;

    /* Open a connection to the X server */
    dpy = XOpenDisplay( NULL );
    if ( dpy == NULL ) {
        printf( "Unable to open a connection to the X server\n" );
        exit( EXIT_FAILURE );
    }

    /* Request a suitable framebuffer configuration - try for a double 
    ** buffered configuration first */
    fbConfigs = glXChooseFBConfig( dpy, DefaultScreen(dpy),
                                   doubleBufferAttributes, &numReturned );

    if ( fbConfigs == NULL ) {  /* no double buffered configs available */
      fbConfigs = glXChooseFBConfig( dpy, DefaultScreen(dpy),
                                     singleBufferAttributess, &numReturned );
      swapFlag = False;
    }

    /* Create an X colormap and window with a visual matching the first
    ** returned framebuffer config */
    vInfo = glXGetVisualFromFBConfig( dpy, fbConfigs[0] );

    swa.border_pixel = 0;
    swa.event_mask = StructureNotifyMask;
    swa.colormap = XCreateColormap( dpy, RootWindow(dpy, vInfo->screen),
                                    vInfo->visual, AllocNone );

    swaMask = CWBorderPixel | CWColormap | CWEventMask;

    xWin = XCreateWindow( dpy, RootWindow(dpy, vInfo->screen), 0, 0, 256, 256,
                          0, vInfo->depth, InputOutput, vInfo->visual,
                          swaMask, &swa );

    /* Create a GLX context for OpenGL rendering */
    context = glXCreateNewContext( dpy, fbConfigs[0], GLX_RGBA_TYPE,
				 NULL, True );

    /* Create a GLX window to associate the frame buffer configuration
    ** with the created X window */
    glxWin = glXCreateWindow( dpy, fbConfigs[0], xWin, NULL );
    
    /* Map the window to the screen, and wait for it to appear */
    XMapWindow( dpy, xWin );
    XIfEvent( dpy, &event, WaitForNotify, (XPointer) xWin );

    /* Bind the GLX context to the Window */
    glXMakeContextCurrent( dpy, glxWin, glxWin, context );

    /* OpenGL rendering ... */
    glClearColor( 1.0, 1.0, 0.0, 1.0 );
    glClear( GL_COLOR_BUFFER_BIT );

    glFlush();
    
    if ( swapFlag )
        glXSwapBuffers( dpy, glxWin );

    sleep( 10 );
    exit( EXIT_SUCCESS );
}
.Ee
.P
.SH NOTES
An X color map must be created and passed to \f3XCreateWindow\fP.
.P
A GLX context must be created and bound to a GLX drawable before OpenGL
commands can be executed.  OpenGL commands executed while no
context/drawable pair is current result in undefined behavior.
.P
Exposure events indicate that \f2all\fP buffers associated with the
specified window may be damaged and should be repainted. Although certain
buffers of some visuals on some systems may never require repainting (the
depth buffer, for example), it is incorrect to write a program assuming that
these buffers will not be damaged.
.P
GLX commands utilize XVisualInfo structures rather than pointers to visuals
or visualIDs directly.  XVisualInfo structures contain \f2visual\fP,
\f2visualID\fP, \f2screen\fP, and \f2depth\fP elements, as well as other
X-specific information.
.P
.SH USING GLX EXTENSIONS
All supported GLX extensions will have a corresponding definition in glx.h
and a token in the extension string returned by
\%\f3glXQueryExtensionsString\fP.  For example, if the
\%\f3EXT_visual_info\fP extension is supported, then this token will be
defined in glx.h and \%\f3EXT_visual_info\fP will appear in the extension
string returned by \%\f3glXQueryExtensionsString\fP. The definitions in glx.h
can be used at compile time to determine if procedure calls corresponding to
an extension exist in the library.
.P
OpenGL itself is capable of being extended.  Refer to \%\f3glIntro\fP for more
information.
.P
.SH GLX 1.1, GLX 1.2, and GLX 1.3
GLX 1.3 is now supported, and is backward compatible with GLX 1.1 and GLX
1.2.  It introduces new functionality (namely GLXFBConfigs) that supersedes
the GLX 1.2 functionality.  GLX 1.2 commands are supported, but their use in
new application development is not recommended.
.P
GLX 1.3 corresponds to OpenGL versions 1.2, and introduces the following new
calls: \%\f3glXGetFBConfigs\fP, \%\f3glXGetFBConfigAttrib\fP,
\%\f3glXGetVisualFromFBConfig\fP, \%\f3glXCreateWindow\fP, \%\f3glXDestroyWindow\fP,
\%\f3glXCreatePixmap\fP, \%\f3glXDestroyPixmap\fP, \%\f3glXCreatePbuffer\fP,
\%\f3glXDestroyPbuffer\fP, \%\f3glXQueryDrawable\fP, \%\f3glXCreateNewContext\fP,
\%\f3glXMakeContextCurrent\fP, \%\f3glXGetCurrentReadDrawable\fP,
\%\f3glXGetCurrentDisplay\fP, \%\f3glXQueryContext\fP, \%\f3glXSelectEvent\fP,
\%\f3glXGetSelectedEvent\fP.
.P
GLX 1.2 corresponds to OpenGL version 1.1 and introduced the following new
call: \%\f3glGetCurrentDisplay\fP.
.P
GLX 1.1 corresponds to OpenGL version 1.0 and introduces the following new
calls: \%\f3glXQueryExtensionsString\fP, \%\f3glXQueryServerString\fP, and
\%\f3glXGetClientString\fP.
.P
Call \%\f3glQueryVersion\fP to determine at runtime what version of GLX is
available. \%\f3glQueryVersion\fP returns the version that is supported on the
connection. Thus if 1.3 is returned, both the client and server support GLX
1.3.  You can also check the GLX version at compile time: GLX_VERSION_1_1
will be defined in glx.h if GLX 1.1 calls are supported, GLX_VERSION_1_2
will be defined if GLX 1.2 calls are supported, and GLX_VERSION_1_3 will be
defined if GLX 1.3 calls are supported.
.P
.SH SEE ALSO
\%\f3glIntro\fP,
\%\f3glFinish\fP,
\%\f3glFlush\fP,
\%\f3glXChooseVisual\fP,
\%\f3glXCopyContext\fP,
\%\f3glXCreateContext\fP,
\%\f3glXCreateGLXPixmap\fP,
\%\f3glXDestroyContext\fP,
\%\f3glXGetClientString\fP,
\%\f3glXGetConfig\fP,
\%\f3glXIsDirect\fP,
\%\f3glXMakeCurrent\fP,
\%\f3glXQueryExtension\fP,
\%\f3glXQueryExtensionsString\fP,
\%\f3glXQueryServerString\fP,
\%\f3glXQueryVersion\fP,
\%\f3glXSwapBuffers\fP,
\%\f3glXUseXFont\fP,
\%\f3glXWaitGL\fP,
\%\f3glXWaitX\fP,
\%\f3glXGetFBConfigs\fP,
\%\f3glXGetFBConfigAttrib\fP,
\%\f3glXGetVisualFromFBConfig\fP,
\%\f3glXCreateWindow\fP,
\%\f3glXDestroyWindow\fP,
\%\f3glXCreatePixmap\fP,
\%\f3glXDestroyPixmap\fP,
\%\f3glXCreatePbuffer\fP,
\%\f3glXDestroyPbuffer\fP,
\%\f3glXQueryDrawable\fP,
\%\f3glXCreateNewContext\fP,
\%\f3glXMakeContextCurrent\fP,
\%\f3glXGetCurrentReadDrawable\fP,
\%\f3glXGetCurrentDisplay\fP,
\%\f3glXQueryContext\fP,
\%\f3glXSelectEvent\fP,
\%\f3glXGetSelectedEvent\fP.
\f3XCreateColormap\fP,
\f3XCreateWindow\fP,
\f3XSync\fP
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
'\" e  
d6 3
a8 3
.ds Dp Feb 04 11:06
.ds Dm 6 Apr  5  20
.ds Xs 34089    13
@


1.1.1.1
log
@win32-x11 source tree update March 26, 2001
@
text
@@
