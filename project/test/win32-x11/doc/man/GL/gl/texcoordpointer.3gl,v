head	1.2;
access;
symbols
	win32-x11-2001-03-26:1.1.1.1 SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2001.06.03.20.47.14;	author ssiddiqi;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.25.19.36.53;	author ssiddiqi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.03.25.19.36.53;	author ssiddiqi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Win32-X11 update sources check in, June 3, 2001 - ssiddiqi
@
text
@'\"! tbl|eqn | mmdoc
'\"macro stdmacro
.ds Vn Version 1.2
.ds Dt 24 September 1999
.ds Re Release 1.2.1
.ds Dp Apr 04 17:39
.ds Dm  Apr  5  200
.ds Xs 42796 13 texcoordpointer.gl
.TH GLTEXCOORDPOINTER 3G
.SH NAME
.B "glTexCoordPointer
\- define an array of texture coordinates

.SH C SPECIFICATION
void \f3glTexCoordPointer\fP(
GLint \fIsize\fP,
.nf
.ta \w'\f3void \fPglTexCoordPointer( 'u
	GLenum \fItype\fP,
	GLsizei \fIstride\fP,
	const GLvoid \fI*pointer\fP )
.fi

.EQ
delim $$
.EN
.SH PARAMETERS
.TP \w'\fIpointer\fP\ \ 'u 
\f2size\fP
Specifies the number of coordinates per array element. Must be 1, 2, 3
or 4. The initial value is 4.
.TP
\f2type\fP
Specifies the data type of each texture coordinate.
Symbolic constants
\%\f3GL_SHORT\fP,
\%\f3GL_INT\fP,
\%\f3GL_FLOAT\fP,
or \%\f3GL_DOUBLE\fP
are accepted. The initial value is \%\f3GL_FLOAT\fP.
.TP
\f2stride\fP
Specifies the byte offset between consecutive array elements.
If \f2stride\fP is 0, the array elements are understood 
to be tightly packed. The initial value is 0.
.TP
\f2pointer\fP
Specifies a pointer to the first coordinate of the first element in the 
array.  The initial value is 0.
.SH DESCRIPTION
\%\f3glTexCoordPointer\fP specifies the location and data format of an array of texture
coordinates to use when rendering.
\f2size\fP specifies the number of coordinates per
element, and must be 1, 2, 3, or 4.
\f2type\fP specifies the data type of each texture coordinate
and \f2stride\fP specifies the byte stride from one
array element to the next allowing vertexes and attributes
to be packed into a single array or stored in separate arrays.
(Single-array storage may be more efficient on some implementations;
see 
.br
\%\f3glInterleavedArrays\fP.)
When a texture
coordinate array is specified, \f2size\fP, \f2type\fP, \f2stride\fP, and \f2pointer\fP
are saved client-side state. 
.P
To enable and disable the texture coordinate array, call 
\%\f3glEnableClientState\fP and \%\f3glDisableClientState\fP with the argument
\%\f3GL_TEXTURE_COORD_ARRAY\fP. If 
enabled, the texture coordinate array is used
when \%\f3glDrawArrays\fP, \%\f3glDrawElements\fP, \%\f3glDrawRangeElements\fP or 
\%\f3glArrayElement\fP is called.
.P
Use \%\f3glDrawArrays\fP to construct a sequence of primitives (all of the
same type) from prespecified vertex and vertex attribute arrays.
Use \%\f3glArrayElement\fP to specify primitives
by indexing vertexes and vertex attributes and \%\f3glDrawElements\fP to
construct a sequence of primitives by indexing vertexes and vertex attributes.
.SH NOTES
\%\f3glTexCoordPointer\fP is available only if the GL version is 1.1 or greater.
.P
The texture coordinate array is initially disabled and it won't be
accessed when 
\%\f3glArrayElement\fP, \%\f3glDrawElements\fP, \%\f3glDrawRangeElements\fP, or
\%\f3glDrawArrays\fP is called. 
.P
Execution of \%\f3glTexCoordPointer\fP is not allowed between the execution of
\%\f3glBegin\fP and the corresponding execution of \%\f3glEnd\fP,
but an error may or may not be generated. If no error is generated,
the operation is undefined.
.P
\%\f3glTexCoordPointer\fP is typically implemented on the client side with no protocol.
.P
The texture coordinate array parameters are client-side state and are
therefore not saved or restored by \%\f3glPushAttrib\fP and \%\f3glPopAttrib\fP.
Use \%\f3glPushClientAttrib\fP and 
\%\f3glPopClientAttrib\fP instead.
.P
When the \%\f3GL_ARB_imaging\fP extension is supported, \%\f3glTexCoordPointer\fP updates the
texture coordinate array state of the active client texture unit,
specified with \%\f3glClientActiveTextureARB\fP.
.SH ERRORS
\%\f3GL_INVALID_VALUE\fP is generated if \f2size\fP is not 1, 2, 3, or 4.
.P
\%\f3GL_INVALID_ENUM\fP is generated if \f2type\fP is not an accepted value.
.P
\%\f3GL_INVALID_VALUE\fP is generated if \f2stride\fP is negative.
.SH ASSOCIATED GETS  
\%\f3glIsEnabled\fP with argument \%\f3GL_TEXTURE_COORD_ARRAY\fP
.br
\%\f3glGet\fP with argument \%\f3GL_TEXTURE_COORD_ARRAY_SIZE\fP
.br
\%\f3glGet\fP with argument \%\f3GL_TEXTURE_COORD_ARRAY_TYPE\fP
.br
\%\f3glGetPointerv\fP with argument \%\f3GL_TEXTURE_COORD_ARRAY_POINTER\fP
.SH SEE ALSO 
\%\f3glArrayElement\fP,
\%\f3glClientActiveTextureARB\fP,
\%\f3glColorPointer\fP,
\%\f3glDrawArrays\fP,
\%\f3glDrawElements\fP,
\%\f3glDrawRangeElements\fP,
\%\f3glEdgeFlagPointer\fP,
\%\f3glEnable\fP,
\%\f3glGetPointerv\fP,
\%\f3glIndexPointer\fP,
\%\f3glNormalPointer\fP,
\%\f3glPopClientAttrib\fP,
\%\f3glPushClientAttrib\fP,
\%\f3glTexCoord\fP,
\%\f3glVertexPointer\fP
@


1.1
log
@Initial revision
@
text
@d1 2
d6 18
a23 5
.ds Dp Feb 04 10:50
.ds Dm 4 Apr  5  20
.ds Xs 21338     7
_header(TexCoordPointer,define an array of texture coordinates)
_names(TexCoordPointer)
d28 2
a29 1
_phead(_param1)
d32 2
a33 1
_phead(_param2)
d41 2
a42 1
_phead(_param3)
d44 1
a44 1
If _param3 is 0, the array elements are understood 
d46 2
a47 1
_phead(_param4)
d51 1
a51 1
_cmnd specifies the location and data  of an array of texture
d53 1
a53 1
_param1 specifies the number of coordinates per
d55 2
a56 2
_param2 specifies the data type of each texture coordinate
and _param3 specifies the byte stride from one
d62 1
a62 1
_cmnd(InterleavedArrays).)
d64 1
a64 1
coordinate array is specified, _param1, _param2, _param3, and _param4
d68 1
a68 1
_cmnd(EnableClientState) and _cmnd(DisableClientState) with the argument
d71 2
a72 2
when _cmnd(DrawArrays), _cmnd(DrawElements), _cmnd(DrawRangeElements) or 
_cmnd(ArrayElement) is called.
d74 1
a74 1
Use _cmnd(DrawArrays) to construct a sequence of primitives (all of the
d76 2
a77 2
Use _cmnd(ArrayElement) to specify primitives
by indexing vertexes and vertex attributes and _cmnd(DrawElements) to
d80 1
a80 1
_cmnd is available only if the GL version is 1.1 or greater.
d84 2
a85 2
_cmnd(ArrayElement), _cmnd(DrawElements), _cmnd(DrawRangeElements), or
_cmnd(DrawArrays) is called. 
d87 2
a88 2
Execution of _cmnd is not allowed between the execution of
_cmnd(Begin) and the corresponding execution of _cmnd(End),
d92 1
a92 1
_cmnd is typically implemented on the client side with no protocol.
d95 3
a97 3
therefore not saved or restored by _cmnd(PushAttrib) and _cmnd(PopAttrib).
Use _cmnd(PushClientAttrib) and 
_cmnd(PopClientAttrib) instead.
d99 1
a99 1
When the \%\f3GL_ARB_imaging\fP extension is supported, _cmnd updates the
d101 1
a101 1
specified with _cmnd(ClientActiveTextureARB).
d103 1
a103 1
\%\f3GL_INVALID_VALUE\fP is generated if _param1 is not 1, 2, 3, or 4.
d105 1
a105 1
\%\f3GL_INVALID_ENUM\fP is generated if _param2 is not an accepted value.
d107 1
a107 1
\%\f3GL_INVALID_VALUE\fP is generated if _param3 is negative.
d109 1
a109 1
_cmnd(IsEnabled) with argument \%\f3GL_TEXTURE_COORD_ARRAY\fP
d111 1
a111 1
_cmnd(Get) with argument \%\f3GL_TEXTURE_COORD_ARRAY_SIZE\fP
d113 1
a113 1
_cmnd(Get) with argument \%\f3GL_TEXTURE_COORD_ARRAY_TYPE\fP
d115 1
a115 1
_cmnd(GetPointerv) with argument \%\f3GL_TEXTURE_COORD_ARRAY_POINTER\fP
d117 15
a131 15
_cmnd(ArrayElement),
_cmnd(ClientActiveTextureARB),
_cmnd(ColorPointer),
_cmnd(DrawArrays),
_cmnd(DrawElements),
_cmnd(DrawRangeElements),
_cmnd(EdgeFlagPointer),
_cmnd(Enable),
_cmnd(GetPointerv),
_cmnd(IndexPointer),
_cmnd(NormalPointer),
_cmnd(PopClientAttrib),
_cmnd(PushClientAttrib),
_cmnd(TexCoord),
_cmnd(VertexPointer)
@


1.1.1.1
log
@win32-x11 source tree update March 26, 2001
@
text
@@
