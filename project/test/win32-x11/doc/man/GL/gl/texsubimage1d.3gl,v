head	1.2;
access;
symbols
	win32-x11-2001-03-26:1.1.1.1 SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2001.06.03.20.47.14;	author ssiddiqi;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.25.19.36.53;	author ssiddiqi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.03.25.19.36.53;	author ssiddiqi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Win32-X11 update sources check in, June 3, 2001 - ssiddiqi
@
text
@'\"! tbl|eqn | mmdoc
'\"macro stdmacro
.ds Vn Version 1.2
.ds Dt 24 September 1999
.ds Re Release 1.2.1
.ds Dp Apr 04 17:39
.ds Dm  Apr  5  200
.ds Xs 61962 16 texsubimage1d.gl
.TH GLTEXSUBIMAGE1D 3G
.SH NAME
.B "glTexSubImage1D
\- specify a one-dimensional texture subimage

.SH C SPECIFICATION
void \f3glTexSubImage1D\fP(
GLenum \fItarget\fP,
.nf
.ta \w'\f3void \fPglTexSubImage1D( 'u
	GLint \fIlevel\fP,
	GLint \fIxoffset\fP,
	GLsizei \fIwidth\fP,
	GLenum \fIformat\fP,
	GLenum \fItype\fP,
	const GLvoid \fI*pixels\fP )
.fi

.EQ
delim $$
.EN
.SH PARAMETERS
.TP \w'\fIxoffset\fP\ \ 'u 
\f2target\fP
Specifies the target texture.
Must be \%\f3GL_TEXTURE_1D\fP.
.TP
\f2level\fP
Specifies the level-of-detail number.
Level 0 is the base image level.
Level \f2n\fP is the \f2n\fPth mipmap reduction image.
.TP
\f2xoffset\fP
Specifies a texel offset in the x direction within the texture array.
.TP
\f2width\fP
Specifies the width of the texture subimage.
.TP
\f2format\fP
Specifies the format of the pixel data.
The following symbolic values are accepted:
\%\f3GL_COLOR_INDEX\fP,
\%\f3GL_RED\fP,
\%\f3GL_GREEN\fP,
\%\f3GL_BLUE\fP,
\%\f3GL_ALPHA\fP,
\%\f3GL_RGB\fP,
\%\f3GL_BGR\fP,
\%\f3GL_RGBA\fP,
\%\f3GL_BGRA\fP,
\%\f3GL_LUMINANCE\fP, and
\%\f3GL_LUMINANCE_ALPHA\fP.
.TP
\f2type\fP
Specifies the data type of the pixel data.
The following symbolic values are accepted:
\%\f3GL_UNSIGNED_BYTE\fP,
\%\f3GL_BYTE\fP,
\%\f3GL_BITMAP\fP,
\%\f3GL_UNSIGNED_SHORT\fP,
\%\f3GL_SHORT\fP,
\%\f3GL_UNSIGNED_INT\fP,
\%\f3GL_INT\fP, 
\%\f3GL_FLOAT\fP,
\%\f3GL_UNSIGNED_BYTE_3_3_2\fP,
\%\f3GL_UNSIGNED_BYTE_2_3_3_REV\fP,
\%\f3GL_UNSIGNED_SHORT_5_6_5\fP,
\%\f3GL_UNSIGNED_SHORT_5_6_5_REV\fP,
\%\f3GL_UNSIGNED_SHORT_4_4_4_4\fP,
\%\f3GL_UNSIGNED_SHORT_4_4_4_4_REV\fP,
\%\f3GL_UNSIGNED_SHORT_5_5_5_1\fP,
\%\f3GL_UNSIGNED_SHORT_1_5_5_5_REV\fP,
\%\f3GL_UNSIGNED_INT_8_8_8_8\fP,
\%\f3GL_UNSIGNED_INT_8_8_8_8_REV\fP,
\%\f3GL_UNSIGNED_INT_10_10_10_2\fP, and
\%\f3GL_UNSIGNED_INT_2_10_10_10_REV\fP.
.TP
\f2pixels\fP
Specifies a pointer to the image data in memory.
.SH DESCRIPTION
Texturing maps a portion of a specified texture image
onto each graphical primitive for which texturing is enabled.
To enable or disable one-dimensional texturing, call \%\f3glEnable\fP
and \%\f3glDisable\fP with argument \%\f3GL_TEXTURE_1D\fP.
.P
\%\f3glTexSubImage1D\fP redefines a contiguous subregion of an existing one-dimensional
texture image.
The texels referenced by \f2pixels\fP replace the portion of the
existing texture array with x indices \f2xoffset\fP and
$"xoffset"~+~"width"~-~1$,inclusive.
This region may not include any texels outside the range of the
texture array as it was originally specified.
It is not an error to specify a subtexture with width of 0, but
such a specification has no effect.
.SH NOTES
\%\f3glTexSubImage1D\fP is available only if the GL version is 1.1 or greater.
.P
Texturing has no effect in color index mode.
.P
\%\f3glPixelStore\fP and \%\f3glPixelTransfer\fP modes affect texture images
in exactly the way they affect \%\f3glDrawPixels\fP.
.P
Formats \%\f3GL_BGR\fP, and \%\f3GL_BGRA\fP and types
\%\f3GL_UNSIGNED_BYTE_3_3_2\fP,
\%\f3GL_UNSIGNED_BYTE_2_3_3_REV\fP,
\%\f3GL_UNSIGNED_SHORT_5_6_5\fP,
\%\f3GL_UNSIGNED_SHORT_5_6_5_REV\fP,
\%\f3GL_UNSIGNED_SHORT_4_4_4_4\fP,
\%\f3GL_UNSIGNED_SHORT_4_4_4_4_REV\fP,
\%\f3GL_UNSIGNED_SHORT_5_5_5_1\fP,
\%\f3GL_UNSIGNED_SHORT_1_5_5_5_REV\fP,
\%\f3GL_UNSIGNED_INT_8_8_8_8\fP,
\%\f3GL_UNSIGNED_INT_8_8_8_8_REV\fP,
\%\f3GL_UNSIGNED_INT_10_10_10_2\fP, and
\%\f3GL_UNSIGNED_INT_2_10_10_10_REV\fP are available only if the GL version 
is 1.2 or greater.
.P
When the \%\f3GL_ARB_multitexture\fP extension is supported, \%\f3glTexSubImage1D\fP
specifies a one-dimensional sub texture for the current texture unit,
specified with \%\f3glActiveTextureARB\fP.
.P
When the \%\f3GL_ARB_imaging\fP extension is supported, the RGBA components
specified in \f2pixels\fP may be processed by the imaging pipeline.  See
\%\f3glTexImage1D\fP for specific details.
.SH ERRORS
\%\f3GL_INVALID_ENUM\fP is generated if \f2target\fP is not one of the
allowable values.
.P
\%\f3GL_INVALID_OPERATION\fP is generated if the texture array has not
been defined by a previous \%\f3glTexImage1D\fP operation.
.P
\%\f3GL_INVALID_VALUE\fP is generated if \f2level\fP is less than 0.
.P 
\%\f3GL_INVALID_VALUE\fP may be generated if \f2level\fP is greater
than $log sub 2$\f2max\fP,
where \f2max\fP is the returned value of \%\f3GL_MAX_TEXTURE_SIZE\fP.
.P
\%\f3GL_INVALID_VALUE\fP is generated if $"xoffset" ~<~ ~-b$,
or if $("xoffset"~+~"width") ~>~ (w ~-~ b)$, 
where $w$ is the \%\f3GL_TEXTURE_WIDTH\fP, and $b$ is 
the width of the \%\f3GL_TEXTURE_BORDER\fP 
of the texture image being modified.
Note that $w$ includes twice the border width.
.P
\%\f3GL_INVALID_VALUE\fP is generated if \f2width\fP is less than 0.
.P
\%\f3GL_INVALID_ENUM\fP is generated if \f2format\fP is not an accepted
format constant.
.P
\%\f3GL_INVALID_ENUM\fP is generated if \f2type\fP is not a type constant.
.P
\%\f3GL_INVALID_ENUM\fP is generated if \f2type\fP is \%\f3GL_BITMAP\fP and
\f2format\fP is not \%\f3GL_COLOR_INDEX\fP.
.P
\%\f3GL_INVALID_OPERATION\fP is generated if \%\f3glTexSubImage1D\fP is executed
between the execution of \%\f3glBegin\fP and the corresponding
execution of \%\f3glEnd\fP.
.P
\%\f3GL_INVALID_OPERATION\fP is generated if \f2type\fP is one of
\%\f3GL_UNSIGNED_BYTE_3_3_2\fP,
\%\f3GL_UNSIGNED_BYTE_2_3_3_REV\fP,
\%\f3GL_UNSIGNED_SHORT_5_6_5\fP, or
\%\f3GL_UNSIGNED_SHORT_5_6_5_REV\fP
and \f2format\fP is not \%\f3GL_RGB\fP.
.P
\%\f3GL_INVALID_OPERATION\fP is generated if \f2type\fP is one of
\%\f3GL_UNSIGNED_SHORT_4_4_4_4\fP,
\%\f3GL_UNSIGNED_SHORT_4_4_4_4_REV\fP,
\%\f3GL_UNSIGNED_SHORT_5_5_5_1\fP,
\%\f3GL_UNSIGNED_SHORT_1_5_5_5_REV\fP,
\%\f3GL_UNSIGNED_INT_8_8_8_8\fP,
\%\f3GL_UNSIGNED_INT_8_8_8_8_REV\fP,
\%\f3GL_UNSIGNED_INT_10_10_10_2\fP, or
\%\f3GL_UNSIGNED_INT_2_10_10_10_REV\fP
and \f2format\fP is neither \%\f3GL_RGBA\fP nor \%\f3GL_BGRA\fP.
.SH ASSOCIATED GETS
\%\f3glGetTexImage\fP
.br
\%\f3glIsEnabled\fP with argument \%\f3GL_TEXTURE_1D\fP
.SH SEE ALSO
\%\f3glActiveTextureARB\fP,
\%\f3glCopyTexImage1D\fP,
\%\f3glCopyTexImage2D\fP,
\%\f3glCopyTexSubImage1D\fP,
\%\f3glCopyTexSubImage2D\fP,
\%\f3glCopyTexSubImage3D\fP,
\%\f3glDrawPixels\fP,
\%\f3glPixelStore\fP,
\%\f3glPixelTransfer\fP,
\%\f3glTexEnv\fP,
\%\f3glTexGen\fP,
\%\f3glTexImage1D\fP,
\%\f3glTexImage2D\fP,
\%\f3glTexImage3D\fP,
\%\f3glTexParameter\fP,
\%\f3glTexSubImage2D\fP,
\%\f3glTexSubImage3D\fP

@


1.1
log
@Initial revision
@
text
@d1 2
d6 21
a26 5
.ds Dp Feb 04 10:50
.ds Dm 4 Apr  5  20
.ds Xs 43886     8
_header(TexSubImage1D,specify a one-dimensional texture subimage)
_names(TexSubImage1D)
d31 2
a32 1
_phead(_param1)
d35 2
a36 1
_phead(_param2)
d40 2
a41 1
_phead(_param3)
d43 2
a44 1
_phead(_param4)
d46 3
a48 2
_phead(_param5)
Specifies the  of the pixel data.
d61 2
a62 1
_phead(_param6)
d85 2
a86 1
_phead(_param7)
d91 2
a92 2
To enable or disable one-dimensional texturing, call _cmnd(Enable)
and _cmnd(Disable) with argument \%\f3GL_TEXTURE_1D\fP.
d94 1
a94 1
_cmnd redefines a contiguous subregion of an existing one-dimensional
d96 3
a98 3
The texels referenced by _param7 replace the portion of the
existing texture array with x indices _param3 and
$_eqnparam3~+~_eqnparam4~-~1$,inclusive.
d104 1
a104 1
_cmnd is available only if the GL version is 1.1 or greater.
d108 2
a109 2
_cmnd(PixelStore) and _cmnd(PixelTransfer) modes affect texture images
in exactly the way they affect _cmnd(DrawPixels).
d126 1
a126 1
When the \%\f3GL_ARB_multitexture\fP extension is supported, _cmnd
d128 1
a128 1
specified with _cmnd(ActiveTextureARB).
d131 2
a132 2
specified in _param7 may be processed by the imaging pipeline.  See
_cmnd(TexImage1D) for specific details.
d134 1
a134 1
\%\f3GL_INVALID_ENUM\fP is generated if _param1 is not one of the
d138 1
a138 1
been defined by a previous _cmnd(TexImage1D) operation.
d140 1
a140 1
\%\f3GL_INVALID_VALUE\fP is generated if _param2 is less than 0.
d142 1
a142 1
\%\f3GL_INVALID_VALUE\fP may be generated if _param2 is greater
d146 2
a147 2
\%\f3GL_INVALID_VALUE\fP is generated if $_eqnparam3 ~<~ ~-b$,
or if $(_eqnparam3~+~_eqnparam4) ~>~ (w ~-~ b)$, 
d153 1
a153 1
\%\f3GL_INVALID_VALUE\fP is generated if _param4 is less than 0.
d155 2
a156 2
\%\f3GL_INVALID_ENUM\fP is generated if _param5 is not an accepted
 constant.
d158 1
a158 1
\%\f3GL_INVALID_ENUM\fP is generated if _param6 is not a type constant.
d160 2
a161 2
\%\f3GL_INVALID_ENUM\fP is generated if _param6 is \%\f3GL_BITMAP\fP and
_param5 is not \%\f3GL_COLOR_INDEX\fP.
d163 3
a165 3
\%\f3GL_INVALID_OPERATION\fP is generated if _cmnd is executed
between the execution of _cmnd(Begin) and the corresponding
execution of _cmnd(End).
d167 1
a167 1
\%\f3GL_INVALID_OPERATION\fP is generated if _param6 is one of
d172 1
a172 1
and _param5 is not \%\f3GL_RGB\fP.
d174 1
a174 1
\%\f3GL_INVALID_OPERATION\fP is generated if _param6 is one of
d183 1
a183 1
and _param5 is neither \%\f3GL_RGBA\fP nor \%\f3GL_BGRA\fP.
d185 1
a185 1
_cmnd(GetTexImage)
d187 1
a187 1
_cmnd(IsEnabled) with argument \%\f3GL_TEXTURE_1D\fP
d189 17
a205 17
_cmnd(ActiveTextureARB),
_cmnd(CopyTexImage1D),
_cmnd(CopyTexImage2D),
_cmnd(CopyTexSubImage1D),
_cmnd(CopyTexSubImage2D),
_cmnd(CopyTexSubImage3D),
_cmnd(DrawPixels),
_cmnd(PixelStore),
_cmnd(PixelTransfer),
_cmnd(TexEnv),
_cmnd(TexGen),
_cmnd(TexImage1D),
_cmnd(TexImage2D),
_cmnd(TexImage3D),
_cmnd(TexParameter),
_cmnd(TexSubImage2D),
_cmnd(TexSubImage3D)
@


1.1.1.1
log
@win32-x11 source tree update March 26, 2001
@
text
@@
