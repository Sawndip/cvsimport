head	1.2;
access;
symbols
	win32-x11-2001-03-26:1.1.1.1 SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2001.06.03.20.47.14;	author ssiddiqi;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.25.19.36.53;	author ssiddiqi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.03.25.19.36.53;	author ssiddiqi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Win32-X11 update sources check in, June 3, 2001 - ssiddiqi
@
text
@'\"! eqn | mmdoc
'\"macro stdmacro
.ds Vn Version 1.2
.ds Dt 24 September 1999
.ds Re Release 1.2.1
.ds Dp Apr 04 17:39
.ds Dm  Apr  5  200
.ds Xs 23578 8 polygonstipple.gl
.TH GLPOLYGONSTIPPLE 3G
.SH NAME
.B "glPolygonStipple
\- set the polygon stippling pattern

.SH C SPECIFICATION
void \f3glPolygonStipple\fP(
const GLubyte \fI*mask\fP )
.nf
.fi

.EQ
delim $$
.EN
.SH PARAMETERS
.TP \w'\f2mask\fP\ \ 'u 
\f2mask\fP
Specifies a pointer to a $32 ~times~ 32$ stipple pattern that will be unpacked
from memory in the same way that \%\f3glDrawPixels\fP unpacks pixels.
.SH DESCRIPTION
Polygon stippling,
like line stippling
(see \%\f3glLineStipple\fP),
masks out certain fragments produced by rasterization,
creating a pattern.
Stippling is independent of polygon antialiasing.
.P
\f2mask\fP is a pointer to a $32 ~times~ 32$ stipple pattern that is stored
in memory just like the pixel data supplied to a \%\f3glDrawPixels\fP
call with 
.I
height
and
.I width
both equal to 32, a pixel format
of \%\f3GL_COLOR_INDEX\fP, and data type 
of \%\f3GL_BITMAP\fP.
That is,
the stipple pattern is represented as a $32 ~times~ 32$ array
of 1-bit color indices packed in unsigned bytes.
\%\f3glPixelStore\fP parameters like \%\f3GL_UNPACK_SWAP_BYTES\fP
and \%\f3GL_UNPACK_LSB_FIRST\fP affect the assembling of the bits into a
stipple pattern.
Pixel transfer operations
(shift, offset, pixel map)
are not applied to the stipple image,
however.
.P
To enable and disable polygon stippling, call
\%\f3glEnable\fP and \%\f3glDisable\fP
with argument \%\f3GL_POLYGON_STIPPLE\fP. Polygon stippling is initially
disabled. If it's enabled,
a rasterized polygon fragment with window coordinates $x sub w$ and $y sub w$
is sent to the next stage of the GL if and only if the
($x sub w~roman mod~32$)th bit in the ($y sub w~roman mod~32$)th row
of the stipple pattern is 1 (one).
When polygon stippling is disabled, it is as if the stipple pattern
consists of all 1's.
.SH ERRORS
\%\f3GL_INVALID_OPERATION\fP is generated if \%\f3glPolygonStipple\fP
is executed between the execution of \%\f3glBegin\fP
and the corresponding execution of \%\f3glEnd\fP.
.SH ASSOCIATED GETS
\%\f3glGetPolygonStipple\fP
.br
\%\f3glIsEnabled\fP with argument \%\f3GL_POLYGON_STIPPLE\fP
.SH SEE ALSO
\%\f3glDrawPixels\fP,
\%\f3glLineStipple\fP,
\%\f3glPixelStore\fP,
\%\f3glPixelTransfer\fP
@


1.1
log
@Initial revision
@
text
@d1 2
d6 14
a19 5
.ds Dp Feb 04 10:50
.ds Dm 8 Apr  5  20
.ds Xs 22714     4
_header(PolygonStipple,set the polygon stippling pattern)
_names(PolygonStipple)
d24 2
a25 1
_phead(_param1)
d27 1
a27 1
from memory in the same way that _cmnd(DrawPixels) unpacks pixels.
d31 1
a31 1
(see _cmnd(LineStipple)),
d36 2
a37 2
_param1 is a pointer to a $32 ~times~ 32$ stipple pattern that is stored
in memory just like the pixel data supplied to a _cmnd(DrawPixels)
d43 1
a43 1
both equal to 32, a pixel 
d49 1
a49 1
_cmnd(PixelStore) parameters like \%\f3GL_UNPACK_SWAP_BYTES\fP
d58 1
a58 1
_cmnd(Enable) and _cmnd(Disable)
d68 3
a70 3
\%\f3GL_INVALID_OPERATION\fP is generated if _cmnd
is executed between the execution of _cmnd(Begin)
and the corresponding execution of _cmnd(End).
d72 1
a72 1
_cmnd(GetPolygonStipple)
d74 1
a74 1
_cmnd(IsEnabled) with argument \%\f3GL_POLYGON_STIPPLE\fP
d76 4
a79 4
_cmnd(DrawPixels),
_cmnd(LineStipple),
_cmnd(PixelStore),
_cmnd(PixelTransfer)
@


1.1.1.1
log
@win32-x11 source tree update March 26, 2001
@
text
@@
