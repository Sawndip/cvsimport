head	1.2;
access;
symbols
	win32-x11-2001-03-26:1.1.1.1 SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2001.06.03.20.47.13;	author ssiddiqi;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.25.19.36.53;	author ssiddiqi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.03.25.19.36.53;	author ssiddiqi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Win32-X11 update sources check in, June 3, 2001 - ssiddiqi
@
text
@'\"! eqn|tbl | mmdoc
'\"macro stdmacro
.ds Vn Version 1.2
.ds Dt 24 September 1999
.ds Re Release 1.2.1
.ds Dp Apr 04 17:39
.ds Dm  Apr  5  200
.ds Xs 51232 14 isenabled.gl
.TH GLISENABLED 3G
.SH NAME
.B "glIsEnabled
\- test whether a capability is enabled

.SH C SPECIFICATION
GLboolean \f3glIsEnabled\fP(
GLenum \fIcap\fP )
.nf
.fi

.SH PARAMETERS
.TP \w'\f2cap\fP\ \ 'u 
\f2cap\fP
Specifies a symbolic constant indicating a GL capability.
.SH DESCRIPTION
\%\f3glIsEnabled\fP returns \%\f3GL_TRUE\fP if \f2cap\fP is an enabled capability
and returns \%\f3GL_FALSE\fP otherwise.
Initially all capabilities except \%\f3GL_DITHER\fP are disabled;
\%\f3GL_DITHER\fP is initially enabled.
.P
The following capabilities are accepted for \f2cap\fP:
.P

.TS
lb lb
l l.
_
Constant	See
_
\%\f3GL_ALPHA_TEST\fP	\%\f3glAlphaFunc\fP
\%\f3GL_AUTO_NORMAL\fP	\%\f3glEvalCoord\fP
\%\f3GL_BLEND\fP	\%\f3glBlendFunc\fP, \%\f3glLogicOp\fP
\%\f3GL_CLIP_PLANE\fP\f2i\fP	\%\f3glClipPlane\fP
\%\f3GL_COLOR_ARRAY\fP	\%\f3glColorPointer\fP
\%\f3GL_COLOR_LOGIC_OP\fP	\%\f3glLogicOp\fP
\%\f3GL_COLOR_MATERIAL\fP	\%\f3glColorMaterial\fP
\%\f3GL_COLOR_TABLE\fP	\%\f3glColorTable\fP
\%\f3GL_CONVOLUTION_1D\fP	\%\f3glConvolutionFilter1D\fP
\%\f3GL_CONVOLUTION_2D\fP	\%\f3glConvolutionFilter2D\fP
\%\f3GL_CULL_FACE\fP	\%\f3glCullFace\fP
\%\f3GL_DEPTH_TEST\fP	\%\f3glDepthFunc\fP, \%\f3glDepthRange\fP
\%\f3GL_DITHER\fP	\%\f3glEnable\fP
\%\f3GL_EDGE_FLAG_ARRAY\fP	\%\f3glEdgeFlagPointer\fP
\%\f3GL_FOG\fP	\%\f3glFog\fP
\%\f3GL_HISTOGRAM\fP	\%\f3glHistogram\fP
\%\f3GL_INDEX_ARRAY\fP	\%\f3glIndexPointer\fP
\%\f3GL_INDEX_LOGIC_OP\fP	\%\f3glLogicOp\fP
\%\f3GL_LIGHT\fP\f2i\fP	\%\f3glLightModel\fP, \%\f3glLight\fP
\%\f3GL_LIGHTING\fP	\%\f3glMaterial\fP, \%\f3glLightModel\fP, \%\f3glLight\fP
\%\f3GL_LINE_SMOOTH\fP	\%\f3glLineWidth\fP
\%\f3GL_LINE_STIPPLE\fP	\%\f3glLineStipple\fP
\%\f3GL_MAP1_COLOR_4\fP	\%\f3glMap1\fP
\%\f3GL_MAP1_INDEX\fP	\%\f3glMap1\fP
\%\f3GL_MAP1_NORMAL\fP	\%\f3glMap1\fP
\%\f3GL_MAP1_TEXTURE_COORD_1\fP	\%\f3glMap1\fP
\%\f3GL_MAP1_TEXTURE_COORD_2\fP	\%\f3glMap1\fP
\%\f3GL_MAP1_TEXTURE_COORD_3\fP	\%\f3glMap1\fP
\%\f3GL_MAP1_TEXTURE_COORD_4\fP	\%\f3glMap1\fP
\%\f3GL_MAP2_COLOR_4\fP	\%\f3glMap2\fP
\%\f3GL_MAP2_INDEX\fP	\%\f3glMap2\fP
\%\f3GL_MAP2_NORMAL\fP	\%\f3glMap2\fP
\%\f3GL_MAP2_TEXTURE_COORD_1\fP	\%\f3glMap2\fP
\%\f3GL_MAP2_TEXTURE_COORD_2\fP	\%\f3glMap2\fP
\%\f3GL_MAP2_TEXTURE_COORD_3\fP	\%\f3glMap2\fP
\%\f3GL_MAP2_TEXTURE_COORD_4\fP	\%\f3glMap2\fP
\%\f3GL_MAP2_VERTEX_3\fP	\%\f3glMap2\fP
\%\f3GL_MAP2_VERTEX_4\fP	\%\f3glMap2\fP
\%\f3GL_MINMAX\fP	\%\f3glMinmax\fP
\%\f3GL_NORMAL_ARRAY\fP	\%\f3glNormalPointer\fP
\%\f3GL_NORMALIZE\fP	\%\f3glNormal\fP
\%\f3GL_POINT_SMOOTH\fP	\%\f3glPointSize\fP
\%\f3GL_POLYGON_SMOOTH\fP	\%\f3glPolygonMode\fP
\%\f3GL_POLYGON_OFFSET_FILL\fP 	\%\f3glPolygonOffset\fP
\%\f3GL_POLYGON_OFFSET_LINE\fP 	\%\f3glPolygonOffset\fP
\%\f3GL_POLYGON_OFFSET_POINT\fP 	\%\f3glPolygonOffset\fP
\%\f3GL_POLYGON_STIPPLE\fP	\%\f3glPolygonStipple\fP
\%\f3GL_POST_COLOR_MATRIX_COLOR_TABLE\fP	\%\f3glColorTable\fP
\%\f3GL_POST_CONVOLUTION_COLOR_TABLE\fP	\%\f3glColorTable\fP
\%\f3GL_RESCALE_NORMAL\fP	\%\f3glNormal\fP
\%\f3GL_SCISSOR_TEST\fP	\%\f3glScissor\fP
\%\f3GL_SEPARABLE_2D\fP	\%\f3glSeparableFilter2D\fP
\%\f3GL_STENCIL_TEST\fP	\%\f3glStencilFunc\fP, \%\f3glStencilOp\fP
\%\f3GL_TEXTURE_1D\fP	\%\f3glTexImage1D\fP
\%\f3GL_TEXTURE_2D\fP	\%\f3glTexImage2D\fP
\%\f3GL_TEXTURE_3D\fP	\%\f3glTexImage3D\fP
\%\f3GL_TEXTURE_COORD_ARRAY\fP	\%\f3glTexCoordPointer\fP
\%\f3GL_TEXTURE_GEN_Q\fP	\%\f3glTexGen\fP
\%\f3GL_TEXTURE_GEN_R\fP	\%\f3glTexGen\fP
\%\f3GL_TEXTURE_GEN_S\fP	\%\f3glTexGen\fP
\%\f3GL_TEXTURE_GEN_T\fP	\%\f3glTexGen\fP
\%\f3GL_VERTEX_ARRAY\fP	\%\f3glVertexPointer\fP
_
.TE

.SH NOTES
If an error is generated,
\%\f3glIsEnabled\fP returns 0.
.P
\%\f3GL_COLOR_LOGIC_OP\fP, 
\%\f3GL_COLOR_ARRAY\fP,
\%\f3GL_EDGE_FLAG_ARRAY\fP,
\%\f3GL_INDEX_ARRAY\fP,
\%\f3GL_INDEX_LOGIC_OP\fP,
\%\f3GL_NORMAL_ARRAY\fP,
\%\f3GL_POLYGON_OFFSET_FILL\fP,  
\%\f3GL_POLYGON_OFFSET_LINE\fP,
\%\f3GL_POLYGON_OFFSET_POINT\fP,
\%\f3GL_TEXTURE_COORD_ARRAY\fP, and
\%\f3GL_VERTEX_ARRAY\fP
are available only
if the GL version is 1.1 or greater
.P
\%\f3GL_RESCALE_NORMAL\fP, and \%\f3GL_TEXTURE_3D\fP are available only if the GL
version is 1.2 or greater.
.P
\%\f3GL_COLOR_TABLE\fP, \%\f3GL_CONVOLUTION_1D\fP, \%\f3GL_CONVOLUTION_2D\fP,
\%\f3GL_HISTOGRAM\fP, \%\f3GL_MINMAX\fP,
\%\f3GL_POST_COLOR_MATRIX_COLOR_TABLE\fP,
\%\f3GL_POST_CONVOLUTION_COLOR_TABLE\fP, and
\%\f3GL_SEPARABLE_2D\fP are available only if \%\f3GL_ARB_imaging\fP is
returned when \%\f3glGet\fP is called with \%\f3GL_EXTENSIONS\fP.
.P
When the \%\f3GL_ARB_multitexture\fP extension is supported, the following
parameters return the associated value for the active texture unit.
\%\f3GL_TEXTURE_1D\fP, \%\f3GL_TEXTURE_BINDING_1D\fP,
\%\f3GL_TEXTURE_2D\fP, \%\f3GL_TEXTURE_BINDING_2D\fP,
\%\f3GL_TEXTURE_3D\fP, \%\f3GL_TEXTURE_BINDING_3D\fP,
\%\f3GL_TEXTURE_GEN_S\fP,
\%\f3GL_TEXTURE_GEN_T\fP,
\%\f3GL_TEXTURE_GEN_R\fP,
\%\f3GL_TEXTURE_GEN_Q\fP,
\%\f3GL_TEXTURE_MATRIX\fP, and
\%\f3GL_TEXTURE_STACK_DEPTH\fP.
Likewise, the following parameters return the associated value for the
active client texture unit:
\%\f3GL_TEXTURE_COORD_ARRAY\fP,
\%\f3GL_TEXTURE_COORD_ARRAY_SIZE\fP,
\%\f3GL_TEXTURE_COORD_ARRAY_STRIDE\fP,
\%\f3GL_TEXTURE_COORD_ARRAY_TYPE\fP.
.SH ERRORS
\%\f3GL_INVALID_ENUM\fP is generated if \f2cap\fP is not an accepted value.
.P
\%\f3GL_INVALID_OPERATION\fP is generated if \%\f3glIsEnabled\fP
is executed between the execution of \%\f3glBegin\fP
and the corresponding execution of \%\f3glEnd\fP.
.SH SEE ALSO
\%\f3glEnable\fP,
\%\f3glEnableClientState\fP,
\%\f3glGet\fP

@


1.1
log
@Initial revision
@
text
@d1 2
d6 14
a19 5
.ds Dp Feb 04 10:50
.ds Dm 9 Apr  5  20
.ds Xs 14538     7
_header(IsEnabled, test whether a capability is enabled)
_names(IsEnabled)
d21 2
a22 1
_phead(_param1)
d25 1
a25 1
_cmnd returns \%\f3GL_TRUE\fP if _param1 is an enabled capability
d30 1
a30 1
The following capabilities are accepted for _param1:
d39 62
a100 62
\%\f3GL_ALPHA_TEST\fP	_cmnd(AlphaFunc)
\%\f3GL_AUTO_NORMAL\fP	_cmnd(EvalCoord)
\%\f3GL_BLEND\fP	_cmnd(BlendFunc), _cmnd(LogicOp)
\%\f3GL_CLIP_PLANE\fP\f2i\fP	_cmnd(ClipPlane)
\%\f3GL_COLOR_ARRAY\fP	_cmnd(ColorPointer)
\%\f3GL_COLOR_LOGIC_OP\fP	_cmnd(LogicOp)
\%\f3GL_COLOR_MATERIAL\fP	_cmnd(ColorMaterial)
\%\f3GL_COLOR_TABLE\fP	_cmnd(ColorTable)
\%\f3GL_CONVOLUTION_1D\fP	_cmnd(ConvolutionFilter1D)
\%\f3GL_CONVOLUTION_2D\fP	_cmnd(ConvolutionFilter2D)
\%\f3GL_CULL_FACE\fP	_cmnd(CullFace)
\%\f3GL_DEPTH_TEST\fP	_cmnd(DepthFunc), _cmnd(DepthRange)
\%\f3GL_DITHER\fP	_cmnd(Enable)
\%\f3GL_EDGE_FLAG_ARRAY\fP	_cmnd(EdgeFlagPointer)
\%\f3GL_FOG\fP	_cmnd(Fog)
\%\f3GL_HISTOGRAM\fP	_cmnd(Histogram)
\%\f3GL_INDEX_ARRAY\fP	_cmnd(IndexPointer)
\%\f3GL_INDEX_LOGIC_OP\fP	_cmnd(LogicOp)
\%\f3GL_LIGHT\fP\f2i\fP	_cmnd(LightModel), _cmnd(Light)
\%\f3GL_LIGHTING\fP	_cmnd(Material), _cmnd(LightModel), _cmnd(Light)
\%\f3GL_LINE_SMOOTH\fP	_cmnd(LineWidth)
\%\f3GL_LINE_STIPPLE\fP	_cmnd(LineStipple)
\%\f3GL_MAP1_COLOR_4\fP	_cmnd(Map1)
\%\f3GL_MAP1_INDEX\fP	_cmnd(Map1)
\%\f3GL_MAP1_NORMAL\fP	_cmnd(Map1)
\%\f3GL_MAP1_TEXTURE_COORD_1\fP	_cmnd(Map1)
\%\f3GL_MAP1_TEXTURE_COORD_2\fP	_cmnd(Map1)
\%\f3GL_MAP1_TEXTURE_COORD_3\fP	_cmnd(Map1)
\%\f3GL_MAP1_TEXTURE_COORD_4\fP	_cmnd(Map1)
\%\f3GL_MAP2_COLOR_4\fP	_cmnd(Map2)
\%\f3GL_MAP2_INDEX\fP	_cmnd(Map2)
\%\f3GL_MAP2_NORMAL\fP	_cmnd(Map2)
\%\f3GL_MAP2_TEXTURE_COORD_1\fP	_cmnd(Map2)
\%\f3GL_MAP2_TEXTURE_COORD_2\fP	_cmnd(Map2)
\%\f3GL_MAP2_TEXTURE_COORD_3\fP	_cmnd(Map2)
\%\f3GL_MAP2_TEXTURE_COORD_4\fP	_cmnd(Map2)
\%\f3GL_MAP2_VERTEX_3\fP	_cmnd(Map2)
\%\f3GL_MAP2_VERTEX_4\fP	_cmnd(Map2)
\%\f3GL_MINMAX\fP	_cmnd(Minmax)
\%\f3GL_NORMAL_ARRAY\fP	_cmnd(NormalPointer)
\%\f3GL_NORMALIZE\fP	_cmnd(Normal)
\%\f3GL_POINT_SMOOTH\fP	_cmnd(PointSize)
\%\f3GL_POLYGON_SMOOTH\fP	_cmnd(PolygonMode)
\%\f3GL_POLYGON_OFFSET_FILL\fP 	_cmnd(PolygonOffset)
\%\f3GL_POLYGON_OFFSET_LINE\fP 	_cmnd(PolygonOffset)
\%\f3GL_POLYGON_OFFSET_POINT\fP 	_cmnd(PolygonOffset)
\%\f3GL_POLYGON_STIPPLE\fP	_cmnd(PolygonStipple)
\%\f3GL_POST_COLOR_MATRIX_COLOR_TABLE\fP	_cmnd(ColorTable)
\%\f3GL_POST_CONVOLUTION_COLOR_TABLE\fP	_cmnd(ColorTable)
\%\f3GL_RESCALE_NORMAL\fP	_cmnd(Normal)
\%\f3GL_SCISSOR_TEST\fP	_cmnd(Scissor)
\%\f3GL_SEPARABLE_2D\fP	_cmnd(SeparableFilter2D)
\%\f3GL_STENCIL_TEST\fP	_cmnd(StencilFunc), _cmnd(StencilOp)
\%\f3GL_TEXTURE_1D\fP	_cmnd(TexImage1D)
\%\f3GL_TEXTURE_2D\fP	_cmnd(TexImage2D)
\%\f3GL_TEXTURE_3D\fP	_cmnd(TexImage3D)
\%\f3GL_TEXTURE_COORD_ARRAY\fP	_cmnd(TexCoordPointer)
\%\f3GL_TEXTURE_GEN_Q\fP	_cmnd(TexGen)
\%\f3GL_TEXTURE_GEN_R\fP	_cmnd(TexGen)
\%\f3GL_TEXTURE_GEN_S\fP	_cmnd(TexGen)
\%\f3GL_TEXTURE_GEN_T\fP	_cmnd(TexGen)
\%\f3GL_VERTEX_ARRAY\fP	_cmnd(VertexPointer)
d106 1
a106 1
_cmnd returns 0.
d130 1
a130 1
returned when _cmnd(Get) is called with \%\f3GL_EXTENSIONS\fP.
d150 1
a150 1
\%\f3GL_INVALID_ENUM\fP is generated if _param1 is not an accepted value.
d152 3
a154 3
\%\f3GL_INVALID_OPERATION\fP is generated if _cmnd
is executed between the execution of _cmnd(Begin)
and the corresponding execution of _cmnd(End).
d156 3
a158 3
_cmnd(Enable),
_cmnd(EnableClientState),
_cmnd(Get)
@


1.1.1.1
log
@win32-x11 source tree update March 26, 2001
@
text
@@
