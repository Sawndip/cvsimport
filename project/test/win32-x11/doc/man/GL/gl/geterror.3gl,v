head	1.2;
access;
symbols
	win32-x11-2001-03-26:1.1.1.1 SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2001.06.03.20.47.13;	author ssiddiqi;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.25.19.36.53;	author ssiddiqi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.03.25.19.36.53;	author ssiddiqi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Win32-X11 update sources check in, June 3, 2001 - ssiddiqi
@
text
@'\"! tbl|eqn | mmdoc
'\"macro stdmacro
.ds Vn Version 1.2
.ds Dt 24 September 1999
.ds Re Release 1.2.1
.ds Dp Apr 04 17:39
.ds Dm  Apr  5  200
.ds Xs 52785 11 geterror.gl
.TH GLGETERROR 3G
.SH NAME
.B "glGetError
\- return error information

.SH C SPECIFICATION
GLenum \f3glGetError\fP( void )
.nf
.fi

.SH DESCRIPTION
\%\f3glGetError\fP returns the value of the error flag.
Each detectable error is assigned a numeric code and symbolic name.
When an error occurs,
the error flag is set to the appropriate error code value.
No other errors are recorded until \%\f3glGetError\fP is called,
the error code is returned,
and the flag is reset to \%\f3GL_NO_ERROR\fP.
If a call to \%\f3glGetError\fP returns \%\f3GL_NO_ERROR\fP,
there has been no detectable error since the last call to \%\f3glGetError\fP,
or since the GL was initialized.
.P
To allow for distributed implementations,
there may be several error flags.
If any single error flag has recorded an error,
the value of that flag is returned
and that flag is reset to \%\f3GL_NO_ERROR\fP
when \%\f3glGetError\fP is called.
If more than one flag has recorded an error,
\%\f3glGetError\fP returns and clears an arbitrary error flag value.
Thus, \%\f3glGetError\fP should always be called in a loop,
until it returns \%\f3GL_NO_ERROR\fP,
if all error flags are to be reset.
.P
Initially, all error flags are set to \%\f3GL_NO_ERROR\fP.
.P
The following errors are currently defined:
.TP 30
\%\f3GL_NO_ERROR\fP
No error has been recorded.
The value of this symbolic constant is guaranteed to be 0.
.TP
\%\f3GL_INVALID_ENUM\fP
An unacceptable value is specified for an enumerated argument.
The offending command is ignored,
and has no other side effect than to set the error flag.
.TP
\%\f3GL_INVALID_VALUE\fP
A numeric argument is out of range.
The offending command is ignored,
and has no other side effect than to set the error flag.
.TP
\%\f3GL_INVALID_OPERATION\fP
The specified operation is not allowed in the current state.
The offending command is ignored,
and has no other side effect than to set the error flag.
.TP
\%\f3GL_STACK_OVERFLOW\fP
This command would cause a stack overflow.
The offending command is ignored,
and has no other side effect than to set the error flag.
.TP
\%\f3GL_STACK_UNDERFLOW\fP
This command would cause a stack underflow.
The offending command is ignored,
and has no other side effect than to set the error flag.
.TP
\%\f3GL_OUT_OF_MEMORY\fP
There is not enough memory left to execute the command.
The state of the GL is undefined,
except for the state of the error flags,
after this error is recorded.
.TP
\%\f3GL_TABLE_TOO_LARGE\fP
The specified table exceeds the implementation's maximum supported table 
size.  The offending command is ignored, and has no other side effect
than to set the error flag.
.P
When an error flag is set,
results of a GL operation are undefined only if \%\f3GL_OUT_OF_MEMORY\fP
has occurred.
In all other cases,
the command generating the error is ignored and has no effect on the GL state
or frame buffer contents.
If the generating command returns a value, it returns 0.  
If \%\f3glGetError\fP itself generates an error, it returns 0. 
.SH NOTES
\%\f3GL_TABLE_TOO_LARGE\fP was introduced in GL version 1.2.
.SH ERRORS
\%\f3GL_INVALID_OPERATION\fP is generated if \%\f3glGetError\fP
is executed between the execution of \%\f3glBegin\fP
and the corresponding execution of \%\f3glEnd\fP.
In this case \%\f3glGetError\fP returns 0.
@


1.1
log
@Initial revision
@
text
@d1 2
d6 13
a18 5
.ds Dp Feb 04 10:50
.ds Dm 4 Apr  5  20
.ds Xs 56466     6
_header(GetError, return error information)
_names(GetError)
d20 1
a20 1
_cmnd returns the value of the error flag.
d24 1
a24 1
No other errors are recorded until _cmnd is called,
d27 2
a28 2
If a call to _cmnd returns \%\f3GL_NO_ERROR\fP,
there has been no detectable error since the last call to _cmnd,
d36 1
a36 1
when _cmnd is called.
d38 2
a39 2
_cmnd returns and clears an arbitrary error flag value.
Thus, _cmnd should always be called in a loop,
d94 1
a94 1
If _cmnd itself generates an error, it returns 0. 
d98 4
a101 4
\%\f3GL_INVALID_OPERATION\fP is generated if _cmnd
is executed between the execution of _cmnd(Begin)
and the corresponding execution of _cmnd(End).
In this case _cmnd returns 0.
@


1.1.1.1
log
@win32-x11 source tree update March 26, 2001
@
text
@@
