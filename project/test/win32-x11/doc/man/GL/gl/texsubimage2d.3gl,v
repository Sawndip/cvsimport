head	1.2;
access;
symbols
	win32-x11-2001-03-26:1.1.1.1 SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2001.06.03.20.47.14;	author ssiddiqi;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.25.19.36.53;	author ssiddiqi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.03.25.19.36.53;	author ssiddiqi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Win32-X11 update sources check in, June 3, 2001 - ssiddiqi
@
text
@'\"! tbl|eqn | mmdoc
'\"macro stdmacro
.ds Vn Version 1.2
.ds Dt 24 September 1999
.ds Re Release 1.2.1
.ds Dp Apr 04 17:39
.ds Dm  Apr  5  200
.ds Xs 23807 16 texsubimage2d.gl
.TH GLTEXSUBIMAGE2D 3G
.SH NAME
.B "glTexSubImage2D
\- specify a two-dimensional texture subimage

.SH C SPECIFICATION
void \f3glTexSubImage2D\fP(
GLenum \fItarget\fP,
.nf
.ta \w'\f3void \fPglTexSubImage2D( 'u
	GLint \fIlevel\fP,
	GLint \fIxoffset\fP,
	GLint \fIyoffset\fP,
	GLsizei \fIwidth\fP,
	GLsizei \fIheight\fP,
	GLenum \fIformat\fP,
	GLenum \fItype\fP,
	const GLvoid \fI*pixels\fP )
.fi

.EQ
delim $$
.EN
.SH PARAMETERS
.TP \w'\fIxoffset\fP\ \ 'u 
\f2target\fP
Specifies the target texture.
Must be \%\f3GL_TEXTURE_2D\fP.
.TP
\f2level\fP
Specifies the level-of-detail number.
Level 0 is the base image level.
Level \f2n\fP is the \f2n\fPth mipmap reduction image.
.TP
\f2xoffset\fP
Specifies a texel offset in the x direction within the texture array.
.TP
\f2yoffset\fP
Specifies a texel offset in the y direction within the texture array.
.TP
\f2width\fP
Specifies the width of the texture subimage.
.TP
\f2height\fP
Specifies the height of the texture subimage.
.TP
\f2format\fP
Specifies the format of the pixel data.
The following symbolic values are accepted:
\%\f3GL_COLOR_INDEX\fP,
\%\f3GL_RED\fP,
\%\f3GL_GREEN\fP,
\%\f3GL_BLUE\fP,
\%\f3GL_ALPHA\fP,
\%\f3GL_RGB\fP,
\%\f3GL_BGR\fP,
\%\f3GL_RGBA\fP,
\%\f3GL_BGRA\fP,
\%\f3GL_LUMINANCE\fP, and
\%\f3GL_LUMINANCE_ALPHA\fP.
.TP
\f2type\fP
Specifies the data type of the pixel data.
The following symbolic values are accepted:
\%\f3GL_UNSIGNED_BYTE\fP,
\%\f3GL_BYTE\fP,
\%\f3GL_BITMAP\fP,
\%\f3GL_UNSIGNED_SHORT\fP,
\%\f3GL_SHORT\fP,
\%\f3GL_UNSIGNED_INT\fP,
\%\f3GL_INT\fP, 
\%\f3GL_FLOAT\fP,
\%\f3GL_UNSIGNED_BYTE_3_3_2\fP,
\%\f3GL_UNSIGNED_BYTE_2_3_3_REV\fP,
\%\f3GL_UNSIGNED_SHORT_5_6_5\fP,
\%\f3GL_UNSIGNED_SHORT_5_6_5_REV\fP,
\%\f3GL_UNSIGNED_SHORT_4_4_4_4\fP,
\%\f3GL_UNSIGNED_SHORT_4_4_4_4_REV\fP,
\%\f3GL_UNSIGNED_SHORT_5_5_5_1\fP,
\%\f3GL_UNSIGNED_SHORT_1_5_5_5_REV\fP,
\%\f3GL_UNSIGNED_INT_8_8_8_8\fP,
\%\f3GL_UNSIGNED_INT_8_8_8_8_REV\fP,
\%\f3GL_UNSIGNED_INT_10_10_10_2\fP, and
\%\f3GL_UNSIGNED_INT_2_10_10_10_REV\fP.
.TP
\f2pixels\fP
Specifies a pointer to the image data in memory.
.SH DESCRIPTION
Texturing maps a portion of a specified texture image
onto each graphical primitive for which texturing is enabled.
To enable and disable two-dimensional texturing, call \%\f3glEnable\fP
and \%\f3glDisable\fP with argument \%\f3GL_TEXTURE_2D\fP.
.P
\%\f3glTexSubImage2D\fP redefines a contiguous subregion of an existing two-dimensional
texture image.
The texels referenced by \f2pixels\fP replace the portion of the
existing texture array with x indices \f2xoffset\fP and $"xoffset"~+~"width"~-~1$,
inclusive,
and y indices \f2yoffset\fP and $"yoffset"~+~"height"~-~1$, inclusive. 
This region may not include any texels outside the range of the
texture array as it was originally specified.
It is not an error to specify a subtexture with zero width or height, but
such a specification has no effect.
.SH NOTES
\%\f3glTexSubImage2D\fP is available only if the GL version is 1.1 or greater.
.P
Texturing has no effect in color index mode.
.P
\%\f3glPixelStore\fP and \%\f3glPixelTransfer\fP modes affect texture images
in exactly the way they affect \%\f3glDrawPixels\fP.
.P
Formats \%\f3GL_BGR\fP, and \%\f3GL_BGRA\fP and types
\%\f3GL_UNSIGNED_BYTE_3_3_2\fP,
\%\f3GL_UNSIGNED_BYTE_2_3_3_REV\fP,
\%\f3GL_UNSIGNED_SHORT_5_6_5\fP,
\%\f3GL_UNSIGNED_SHORT_5_6_5_REV\fP,
\%\f3GL_UNSIGNED_SHORT_4_4_4_4\fP,
\%\f3GL_UNSIGNED_SHORT_4_4_4_4_REV\fP,
\%\f3GL_UNSIGNED_SHORT_5_5_5_1\fP,
\%\f3GL_UNSIGNED_SHORT_1_5_5_5_REV\fP,
\%\f3GL_UNSIGNED_INT_8_8_8_8\fP,
\%\f3GL_UNSIGNED_INT_8_8_8_8_REV\fP,
\%\f3GL_UNSIGNED_INT_10_10_10_2\fP, and
\%\f3GL_UNSIGNED_INT_2_10_10_10_REV\fP are available only if the GL version 
is 1.2 or greater.
.P
When the \%\f3GL_ARB_multitexture\fP extension is supported, \%\f3glTexSubImage2D\fP
specifies a two-dimensional sub texture for the current texture unit,
specified with \%\f3glActiveTextureARB\fP.
.P
When the \%\f3GL_ARB_imaging\fP extension is supported, the RGBA components
specified in \f2pixels\fP may be processed by the imaging pipeline.  See
\%\f3glTexImage1D\fP for specific details.
.SH ERRORS
\%\f3GL_INVALID_ENUM\fP is generated if \f2target\fP is not \%\f3GL_TEXTURE_2D\fP. 
.P
\%\f3GL_INVALID_OPERATION\fP is generated if the texture array has not
been defined by a previous \%\f3glTexImage2D\fP operation.
.P
\%\f3GL_INVALID_VALUE\fP is generated if \f2level\fP is less than 0.
.P 
\%\f3GL_INVALID_VALUE\fP may be generated if \f2level\fP is greater
than $log sub 2$\f2max\fP,
where \f2max\fP is the returned value of \%\f3GL_MAX_TEXTURE_SIZE\fP.
.P
\%\f3GL_INVALID_VALUE\fP is generated if $"xoffset" ~<~ ~-b$,
$("xoffset"~+~"width") ~>~ (w~-~b)$, 
$"yoffset" ~<~ ~-b$, or $("yoffset" ~+~ "height") ~>~ (h~-~b)$,
where $w$ is the \%\f3GL_TEXTURE_WIDTH\fP, 
$h$ is the \%\f3GL_TEXTURE_HEIGHT\fP, and $b$ is the border width 
of the texture image being modified.
Note that $w$ and $h$ include twice the border width.
.P
\%\f3GL_INVALID_VALUE\fP is generated if \f2width\fP or \f2height\fP is less than 0.
.P
\%\f3GL_INVALID_ENUM\fP is generated if \f2format\fP is not an accepted
format constant.
.P
\%\f3GL_INVALID_ENUM\fP is generated if \f2type\fP is not a type constant.
.P
\%\f3GL_INVALID_ENUM\fP is generated if \f2type\fP is \%\f3GL_BITMAP\fP and
\f2format\fP is not \%\f3GL_COLOR_INDEX\fP.
.P
\%\f3GL_INVALID_OPERATION\fP is generated if \%\f3glTexSubImage2D\fP is executed
between the execution of \%\f3glBegin\fP and the corresponding
execution of \%\f3glEnd\fP.
.P
\%\f3GL_INVALID_OPERATION\fP is generated if \f2type\fP is one of
\%\f3GL_UNSIGNED_BYTE_3_3_2\fP,
\%\f3GL_UNSIGNED_BYTE_2_3_3_REV\fP,
\%\f3GL_UNSIGNED_SHORT_5_6_5\fP, or
\%\f3GL_UNSIGNED_SHORT_5_6_5_REV\fP
and \f2format\fP is not \%\f3GL_RGB\fP.
.P
\%\f3GL_INVALID_OPERATION\fP is generated if \f2type\fP is one of
\%\f3GL_UNSIGNED_SHORT_4_4_4_4\fP,
\%\f3GL_UNSIGNED_SHORT_4_4_4_4_REV\fP,
\%\f3GL_UNSIGNED_SHORT_5_5_5_1\fP,
\%\f3GL_UNSIGNED_SHORT_1_5_5_5_REV\fP,
\%\f3GL_UNSIGNED_INT_8_8_8_8\fP,
\%\f3GL_UNSIGNED_INT_8_8_8_8_REV\fP,
\%\f3GL_UNSIGNED_INT_10_10_10_2\fP, or
\%\f3GL_UNSIGNED_INT_2_10_10_10_REV\fP
and \f2format\fP is neither \%\f3GL_RGBA\fP nor \%\f3GL_BGRA\fP.
.SH ASSOCIATED GETS
\%\f3glGetTexImage\fP
.br
\%\f3glIsEnabled\fP with argument \%\f3GL_TEXTURE_2D\fP
.SH SEE ALSO
\%\f3glActiveTextureARB\fP,
\%\f3glCopyTexImage1D\fP,
\%\f3glCopyTexImage2D\fP,
\%\f3glCopyTexSubImage1D\fP,
\%\f3glCopyTexSubImage2D\fP,
\%\f3glCopyTexSubImage3D\fP,
\%\f3glDrawPixels\fP,
\%\f3glPixelStore\fP,
\%\f3glPixelTransfer\fP,
\%\f3glTexEnv\fP,
\%\f3glTexGen\fP,
\%\f3glTexImage1D\fP,
\%\f3glTexImage2D\fP,
\%\f3glTexImage3D\fP,
\%\f3glTexSubImage1D\fP,
\%\f3glTexSubImage3D\fP,
\%\f3glTexParameter\fP

@


1.1
log
@Initial revision
@
text
@d1 2
d6 23
a28 5
.ds Dp Feb 04 10:50
.ds Dm 5 Apr  5  20
.ds Xs 33804     8
_header(TexSubImage2D,specify a two-dimensional texture subimage)
_names(TexSubImage2D)
d33 2
a34 1
_phead(_param1)
d37 2
a38 1
_phead(_param2)
d42 2
a43 1
_phead(_param3)
d45 2
a46 1
_phead(_param4)
d48 2
a49 1
_phead(_param5)
d51 2
a52 1
_phead(_param6)
d54 3
a56 2
_phead(_param7)
Specifies the  of the pixel data.
d69 2
a70 1
_phead(_param8)
d93 2
a94 1
_phead(_param9)
d99 2
a100 2
To enable and disable two-dimensional texturing, call _cmnd(Enable)
and _cmnd(Disable) with argument \%\f3GL_TEXTURE_2D\fP.
d102 1
a102 1
_cmnd redefines a contiguous subregion of an existing two-dimensional
d104 2
a105 2
The texels referenced by _param9 replace the portion of the
existing texture array with x indices _param3 and $_eqnparam3~+~_eqnparam5~-~1$,
d107 1
a107 1
and y indices _param4 and $_eqnparam4~+~_eqnparam6~-~1$, inclusive. 
d113 1
a113 1
_cmnd is available only if the GL version is 1.1 or greater.
d117 2
a118 2
_cmnd(PixelStore) and _cmnd(PixelTransfer) modes affect texture images
in exactly the way they affect _cmnd(DrawPixels).
d135 1
a135 1
When the \%\f3GL_ARB_multitexture\fP extension is supported, _cmnd
d137 1
a137 1
specified with _cmnd(ActiveTextureARB).
d140 2
a141 2
specified in _param9 may be processed by the imaging pipeline.  See
_cmnd(TexImage1D) for specific details.
d143 1
a143 1
\%\f3GL_INVALID_ENUM\fP is generated if _param1 is not \%\f3GL_TEXTURE_2D\fP. 
d146 1
a146 1
been defined by a previous _cmnd(TexImage2D) operation.
d148 1
a148 1
\%\f3GL_INVALID_VALUE\fP is generated if _param2 is less than 0.
d150 1
a150 1
\%\f3GL_INVALID_VALUE\fP may be generated if _param2 is greater
d154 3
a156 3
\%\f3GL_INVALID_VALUE\fP is generated if $_eqnparam3 ~<~ ~-b$,
$(_eqnparam3~+~_eqnparam5) ~>~ (w~-~b)$, 
$_eqnparam4 ~<~ ~-b$, or $(_eqnparam4 ~+~ _eqnparam6) ~>~ (h~-~b)$,
d162 1
a162 1
\%\f3GL_INVALID_VALUE\fP is generated if _param5 or _param6 is less than 0.
d164 2
a165 2
\%\f3GL_INVALID_ENUM\fP is generated if _param7 is not an accepted
 constant.
d167 1
a167 1
\%\f3GL_INVALID_ENUM\fP is generated if _param8 is not a type constant.
d169 2
a170 2
\%\f3GL_INVALID_ENUM\fP is generated if _param8 is \%\f3GL_BITMAP\fP and
_param7 is not \%\f3GL_COLOR_INDEX\fP.
d172 3
a174 3
\%\f3GL_INVALID_OPERATION\fP is generated if _cmnd is executed
between the execution of _cmnd(Begin) and the corresponding
execution of _cmnd(End).
d176 1
a176 1
\%\f3GL_INVALID_OPERATION\fP is generated if _param8 is one of
d181 1
a181 1
and _param7 is not \%\f3GL_RGB\fP.
d183 1
a183 1
\%\f3GL_INVALID_OPERATION\fP is generated if _param8 is one of
d192 1
a192 1
and _param7 is neither \%\f3GL_RGBA\fP nor \%\f3GL_BGRA\fP.
d194 1
a194 1
_cmnd(GetTexImage)
d196 1
a196 1
_cmnd(IsEnabled) with argument \%\f3GL_TEXTURE_2D\fP
d198 17
a214 17
_cmnd(ActiveTextureARB),
_cmnd(CopyTexImage1D),
_cmnd(CopyTexImage2D),
_cmnd(CopyTexSubImage1D),
_cmnd(CopyTexSubImage2D),
_cmnd(CopyTexSubImage3D),
_cmnd(DrawPixels),
_cmnd(PixelStore),
_cmnd(PixelTransfer),
_cmnd(TexEnv),
_cmnd(TexGen),
_cmnd(TexImage1D),
_cmnd(TexImage2D),
_cmnd(TexImage3D),
_cmnd(TexSubImage1D),
_cmnd(TexSubImage3D),
_cmnd(TexParameter)
@


1.1.1.1
log
@win32-x11 source tree update March 26, 2001
@
text
@@
