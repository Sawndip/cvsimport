head	1.2;
access;
symbols
	win32-x11-2001-03-26:1.1.1.1 SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2001.06.03.20.47.12;	author ssiddiqi;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.25.19.36.53;	author ssiddiqi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.03.25.19.36.53;	author ssiddiqi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Win32-X11 update sources check in, June 3, 2001 - ssiddiqi
@
text
@'\"! tbl|eqn | mmdoc
'\"macro stdmacro
.ds Vn Version 1.2
.ds Dt 24 September 1999
.ds Re Release 1.2.1
.ds Dp Apr 04 17:39
.ds Dm  Apr  5  200
.ds Xs 64469 117 get.gl
.TH GLGET 3G
.SH NAME
.B "glGetBooleanv, glGetDoublev, glGetFloatv, glGetIntegerv
\- return the value or values of a selected parameter

.SH C SPECIFICATION
void \f3glGetBooleanv\fP(
GLenum \fIpname\fP,
.nf
.ta \w'\f3void \fPglGetBooleanv( 'u
	GLboolean \fI*params\fP )
.fi

.SH C SPECIFICATION
void \f3glGetDoublev\fP(
GLenum \fIpname\fP,
.nf
.ta \w'\f3void \fPglGetDoublev( 'u
	GLdouble \fI*params\fP )
.fi

.SH C SPECIFICATION
void \f3glGetFloatv\fP(
GLenum \fIpname\fP,
.nf
.ta \w'\f3void \fPglGetFloatv( 'u
	GLfloat \fI*params\fP )
.fi

.SH C SPECIFICATION
void \f3glGetIntegerv\fP(
GLenum \fIpname\fP,
.nf
.ta \w'\f3void \fPglGetIntegerv( 'u
	GLint \fI*params\fP )
.fi

.EQ
delim $$
.EN
.SH PARAMETERS
.TP \w'\fIparams\fP\ \ 'u 
\f2pname\fP
Specifies the parameter value to be returned.
The symbolic constants in the list below are accepted.
.TP
\f2params\fP
Returns the value or values of the specified parameter.
.SH DESCRIPTION
These four commands return values for simple state variables in GL. 
\f2pname\fP is a symbolic constant indicating the state variable to be returned, 
and \f2params\fP is a pointer to an array of the indicated type in 
which to place the returned data.
.P
Type conversion is performed if \f2params\fP has a different type than 
the state variable value being requested.
If \%\f3glGetBooleanv\fP is called,
a floating-point (or integer) value is converted to \%\f3GL_FALSE\fP if 
and only if it is 0.0 (or 0).
Otherwise,
it is converted to \%\f3GL_TRUE\fP.
If \%\f3glGetIntegerv\fP is called, boolean values are returned as
\%\f3GL_TRUE\fP or \%\f3GL_FALSE\fP, and most floating-point values are
rounded to the nearest integer value. Floating-point colors and
normals, however, are returned with a linear mapping that maps 1.0 to
the most positive representable integer value,
and \-1.0 to the most negative representable integer value.
If \%\f3glGetFloatv\fP or \%\f3glGetDoublev\fP is called,
boolean values are returned as \%\f3GL_TRUE\fP or \%\f3GL_FALSE\fP,
and integer values are converted to floating-point values.
.P
The following symbolic constants are accepted by \f2pname\fP:
.TP 25
\%\f3GL_ACCUM_ALPHA_BITS\fP
\f2params\fP returns one value,
the number of alpha bitplanes in the accumulation buffer.
.TP
\%\f3GL_ACCUM_BLUE_BITS\fP
\f2params\fP returns one value,
the number of blue bitplanes in the accumulation buffer.
.TP
\%\f3GL_ACCUM_CLEAR_VALUE\fP
\f2params\fP returns four values:
the red, green, blue, and alpha values used to clear the accumulation buffer.
Integer values,
if requested,
are linearly mapped from the internal floating-point representation such
that 1.0 returns the most positive representable integer value,
and \-1.0 returns the most negative representable integer
value. The initial value is (0, 0, 0, 0). 
See \%\f3glClearAccum\fP.
.TP
\%\f3GL_ACCUM_GREEN_BITS\fP
\f2params\fP returns one value,
the number of green bitplanes in the accumulation buffer.
.TP
\%\f3GL_ACCUM_RED_BITS\fP
\f2params\fP returns one value,
the number of red bitplanes in the accumulation buffer.
.TP
\%\f3GL_ACTIVE_TEXTURE_ARB\fP
\f2params\fP returns a single value indicating the active multitexture unit.
The initial value is \%\f3GL_TEXTURE0_ARB\fP.
See \%\f3glActiveTextureARB\fP.
.TP
\%\f3GL_ALIASED_POINT_SIZE_RANGE\fP
\f2params\fP returns two values, 
the smallest and largest supported sizes for aliased points.
.TP
\%\f3GL_ALIASED_LINE_WIDTH_RANGE\fP
\f2params\fP returns two values, 
the smallest and largest supported widths for aliased lines.
.TP
\%\f3GL_ALPHA_BIAS\fP
\f2params\fP returns one value,
the alpha bias factor used during pixel transfers. The initial value is 0.
See \%\f3glPixelTransfer\fP.
.TP
\%\f3GL_ALPHA_BITS\fP
\f2params\fP returns one value,
the number of alpha bitplanes in each color buffer.
.TP
\%\f3GL_ALPHA_SCALE\fP
\f2params\fP returns one value,
the alpha scale factor used during pixel transfers. The initial value is 1.
See \%\f3glPixelTransfer\fP.
.TP
\%\f3GL_ALPHA_TEST\fP
\f2params\fP returns a single boolean value indicating whether alpha testing
of fragments is enabled. The initial value is \%\f3GL_FALSE\fP. 
See \%\f3glAlphaFunc\fP.
.TP
\%\f3GL_ALPHA_TEST_FUNC\fP
\f2params\fP returns one value,
the symbolic name of the alpha test function. The initial value is
\%\f3GL_ALWAYS\fP. 
See \%\f3glAlphaFunc\fP.
.TP
\%\f3GL_ALPHA_TEST_REF\fP
\f2params\fP returns one value,
the reference value for the alpha test. The initial value is 0. 
See \%\f3glAlphaFunc\fP.
An integer value,
if requested,
is linearly mapped from the internal floating-point representation such
that 1.0 returns the most positive representable integer value,
and \-1.0 returns the most negative representable integer value.
.TP
\%\f3GL_ATTRIB_STACK_DEPTH\fP
\f2params\fP returns one value,
the depth of the attribute stack.
If the stack is empty,
0 is returned. The initial value is 0. 
See \%\f3glPushAttrib\fP.
.TP
\%\f3GL_AUTO_NORMAL\fP
\f2params\fP returns a single boolean value indicating whether 2D map evaluation
automatically generates surface normals. The initial value is \%\f3GL_FALSE\fP. 
See \%\f3glMap2\fP.
.TP
\%\f3GL_AUX_BUFFERS\fP
\f2params\fP returns one value,
the number of auxiliary color buffers. The initial value is 0.
.TP
\%\f3GL_BLEND\fP
\f2params\fP returns a single boolean value indicating whether blending is
enabled. The initial value is \%\f3GL_FALSE\fP. 
See \%\f3glBlendFunc\fP.
.TP
\%\f3GL_BLEND_COLOR\fP
\f2params\fP returns four values,
the red, green, blue, and alpha values which are the components of
the blend color.
See \%\f3glBlendColor\fP.
.TP
\%\f3GL_BLEND_DST\fP
\f2params\fP returns one value,
the symbolic constant identifying the destination blend
function. The initial value is \%\f3GL_ZERO\fP. 
See \%\f3glBlendFunc\fP.
.TP
\%\f3GL_BLEND_EQUATION\fP
\f2params\fP returns one value, a symbolic constant indicating whether
the blend equation is \%\f3GL_FUNC_ADD\fP, \%\f3GL_MIN\fP or 
\%\f3GL_MAX\fP. See \%\f3glBlendEquation\fP.
.TP
\%\f3GL_BLEND_SRC\fP
\f2params\fP returns one value,
the symbolic constant identifying the source blend function. The initial
value is \%\f3GL_ONE\fP. 
See \%\f3glBlendFunc\fP.
.TP
\%\f3GL_BLUE_BIAS\fP
\f2params\fP returns one value,
the blue bias factor used during pixel transfers. The initial value is 0.
See 
\%\f3glPixelTransfer\fP.
.TP
\%\f3GL_BLUE_BITS\fP
\f2params\fP returns one value,
the number of blue bitplanes in each color buffer.
.TP
\%\f3GL_BLUE_SCALE\fP
\f2params\fP returns one value,
the blue scale factor used during pixel transfers. The initial value is 1.
See 
\%\f3glPixelTransfer\fP.
.TP
\%\f3GL_CLIENT_ACTIVE_TEXTURE_ARB\fP
\f2params\fP returns a single integer value indicating the current client active
multitexture unit. The initial value is \%\f3GL_TEXTURE0_ARB\fP.
See \%\f3glClientActiveTextureARB\fP.
.TP
\%\f3GL_CLIENT_ATTRIB_STACK_DEPTH\fP
\f2params\fP returns one value indicating the depth of the
attribute stack. The initial value is 0.
See \%\f3glPushClientAttrib\fP.
.TP
\%\f3GL_CLIP_PLANE\fP\f2i\fP
\f2params\fP returns a single boolean value indicating whether the specified
clipping plane is enabled. The initial value is \%\f3GL_FALSE\fP. 
See \%\f3glClipPlane\fP.
.TP
\%\f3GL_COLOR_ARRAY\fP
\f2params\fP returns a single boolean value indicating whether the color array is enabled. The initial value is \%\f3GL_FALSE\fP. 
See \%\f3glColorPointer\fP.
.TP
\%\f3GL_COLOR_ARRAY_SIZE\fP
\f2params\fP returns one value,
the number of components per color in the color array. The initial value
is 4. See \%\f3glColorPointer\fP. 
.TP
\%\f3GL_COLOR_ARRAY_STRIDE\fP
\f2params\fP returns one value,
the byte offset between consecutive colors in the color array. The initial
value is 0. 
See \%\f3glColorPointer\fP.
.TP
\%\f3GL_COLOR_ARRAY_TYPE\fP
\f2params\fP returns one value,
the data type of each component in the color array. The initial value
is \%\f3GL_FLOAT\fP. See \%\f3glColorPointer\fP. 
.TP
\%\f3GL_COLOR_CLEAR_VALUE\fP
\f2params\fP returns four values:
the red, green, blue, and alpha values used to clear the color buffers.
Integer values,
if requested,
are linearly mapped from the internal floating-point representation such
that 1.0 returns the most positive representable integer value,
and \-1.0 returns the most negative representable integer
value. The initial value is (0, 0, 0, 0). 
See \%\f3glClearColor\fP.
.TP
\%\f3GL_COLOR_LOGIC_OP\fP
\f2params\fP returns a single boolean value indicating whether a fragment's
RGBA color values are merged into the framebuffer using a logical
operation. The initial value is \%\f3GL_FALSE\fP.
See \%\f3glLogicOp\fP.
.TP
\%\f3GL_COLOR_MATERIAL\fP
\f2params\fP returns a single boolean value indicating whether one or more
material parameters are tracking the current color. The initial value
is \%\f3GL_FALSE\fP. 
See \%\f3glColorMaterial\fP.
.TP
\%\f3GL_COLOR_MATERIAL_FACE\fP
\f2params\fP returns one value,
a symbolic constant indicating which materials have a parameter that is
tracking the current color. The initial value is \%\f3GL_FRONT_AND_BACK\fP. 
See \%\f3glColorMaterial\fP.
.TP
\%\f3GL_COLOR_MATERIAL_PARAMETER\fP
\f2params\fP returns one value,
a symbolic constant indicating which material parameters are
tracking the current color. The initial value is
\%\f3GL_AMBIENT_AND_DIFFUSE\fP. 
See \%\f3glColorMaterial\fP.
.TP
\%\f3GL_COLOR_MATRIX\fP
\f2params\fP returns sixteen values:
the color matrix on the top of the color matrix stack. Initially
this matrix is the identity matrix. See \%\f3glPushMatrix\fP.
.TP
\%\f3GL_COLOR_MATRIX_STACK_DEPTH\fP
\f2params\fP returns one value,
the maximum supported depth of the projection matrix stack. The value must
be at least 2.
See \%\f3glPushMatrix\fP.
.TP
\%\f3GL_COLOR_TABLE\fP
\f2params\fP returns a single boolean value indicating whether the color table
lookup is enabled.
See \%\f3glColorTable\fP.
.TP
\%\f3GL_COLOR_WRITEMASK\fP
\f2params\fP returns four boolean values:
the red, green, blue, and alpha write enables for the color
buffers. The initial value is (\%\f3GL_TRUE\fP, \%\f3GL_TRUE\fP,
\%\f3GL_TRUE\fP, \%\f3GL_TRUE\fP). 
See \%\f3glColorMask\fP.
.TP
\%\f3GL_CONVOLUTION_1D\fP
\f2params\fP returns a single boolean value indicating whether 1D convolution
is enabled. The initial value is \%\f3GL_FALSE\fP.
See \%\f3glConvolutionFilter1D\fP.
.TP
\%\f3GL_CONVOLUTION_2D\fP
\f2params\fP returns a single boolean value indicating whether 2D convolution
is enabled. The initial value is \%\f3GL_FALSE\fP.
See \%\f3glConvolutionFilter2D\fP.
.TP
\%\f3GL_CULL_FACE\fP
\f2params\fP returns a single boolean value indicating whether polygon culling
is enabled. The initial value is \%\f3GL_FALSE\fP. 
See \%\f3glCullFace\fP.
.TP
\%\f3GL_CULL_FACE_MODE\fP
\f2params\fP returns one value,
a symbolic constant indicating which polygon faces are to be
culled. The initial value is \%\f3GL_BACK\fP. 
See \%\f3glCullFace\fP.
.TP
\%\f3GL_CURRENT_COLOR\fP
\f2params\fP returns four values:
the red, green, blue, and alpha values of the current color.
Integer values,
if requested,
are linearly mapped from the internal floating-point representation such
that 1.0 returns the most positive representable integer value,
and \-1.0 returns the most negative representable integer value.
See \%\f3glColor\fP. The initial value is (1, 1, 1, 1). 
.TP
\%\f3GL_CURRENT_INDEX\fP
\f2params\fP returns one value,
the current color index. The initial value is 1. 
See \%\f3glIndex\fP.
.TP
\%\f3GL_CURRENT_NORMAL\fP
\f2params\fP returns three values:
the \f2x\fP, \f2y\fP, and \f2z\fP values of the current normal.
Integer values,
if requested,
are linearly mapped from the internal floating-point representation such
that 1.0 returns the most positive representable integer value,
and \-1.0 returns the most negative representable integer value.
The initial value is (0, 0, 1). See \%\f3glNormal\fP.
.TP
\%\f3GL_CURRENT_RASTER_COLOR\fP
\f2params\fP returns four values:
the red, green, blue, and alpha values of the current raster position.
Integer values,
if requested,
are linearly mapped from the internal floating-point representation such
that 1.0 returns the most positive representable integer value,
and \-1.0 returns the most negative representable integer
value. The initial value is (1, 1, 1, 1). 
See \%\f3glRasterPos\fP.
.TP
\%\f3GL_CURRENT_RASTER_DISTANCE\fP
\f2params\fP returns one value,
the distance from the eye to the current raster position. The initial
value is 0.
See \%\f3glRasterPos\fP.
.TP
\%\f3GL_CURRENT_RASTER_INDEX\fP
\f2params\fP returns one value,
the color index of the current raster position. The initial value is 1. 
See \%\f3glRasterPos\fP.
.TP
\%\f3GL_CURRENT_RASTER_POSITION\fP
\f2params\fP returns four values:
the \f2x\fP, \f2y\fP, \f2z\fP, and \f2w\fP components of the current
raster position.
\f2x\fP, \f2y\fP, and \f2z\fP are in window coordinates,
and \f2w\fP is in clip coordinates. The initial value is (0, 0, 0, 1). 
See \%\f3glRasterPos\fP.
.TP
\%\f3GL_CURRENT_RASTER_POSITION_VALID\fP
\f2params\fP returns a single boolean value indicating whether the current
raster position is valid. The initial value is \%\f3GL_TRUE\fP.
See \%\f3glRasterPos\fP.
.TP
\%\f3GL_CURRENT_RASTER_TEXTURE_COORDS\fP
\f2params\fP returns four values:
the \f2s\fP, \f2t\fP, \f2r\fP, and \f2q\fP
current raster texture coordinates. The initial value is (0, 0, 0, 1).
See \%\f3glRasterPos\fP and \%\f3glTexCoord\fP.
.TP
\%\f3GL_CURRENT_TEXTURE_COORDS\fP
\f2params\fP returns four values:
the \f2s\fP, \f2t\fP, \f2r\fP, and \f2q\fP current texture
coordinates. The initial value is (0, 0, 0, 1).
See
\%\f3glTexCoord\fP.
.TP
\%\f3GL_DEPTH_BIAS\fP
\f2params\fP returns one value,
the depth bias factor used during pixel transfers. The initial value is 0.
See \%\f3glPixelTransfer\fP.
.TP
\%\f3GL_DEPTH_BITS\fP
\f2params\fP returns one value,
the number of bitplanes in the depth buffer.
.TP
\%\f3GL_DEPTH_CLEAR_VALUE\fP
\f2params\fP returns one value,
the value that is used to clear the depth buffer.
Integer values,
if requested,
are linearly mapped from the internal floating-point representation such
that 1.0 returns the most positive representable integer value,
and \-1.0 returns the most negative representable integer
value. The initial value is 1. 
See \%\f3glClearDepth\fP. 
.TP
\%\f3GL_DEPTH_FUNC\fP
\f2params\fP returns one value,
the symbolic constant that indicates the depth comparison
function. The initial value is \%\f3GL_LESS\fP. 
See \%\f3glDepthFunc\fP.
.TP
\%\f3GL_DEPTH_RANGE\fP
\f2params\fP returns two values:
the near and far mapping limits for the depth buffer.
Integer values,
if requested,
are linearly mapped from the internal floating-point representation such
that 1.0 returns the most positive representable integer value,
and \-1.0 returns the most negative representable integer
value. The initial value is (0, 1).
See \%\f3glDepthRange\fP.
.TP
\%\f3GL_DEPTH_SCALE\fP
\f2params\fP returns one value,
the depth scale factor used during pixel transfers. The initial value is 1.
See \%\f3glPixelTransfer\fP.
.TP
\%\f3GL_DEPTH_TEST\fP
\f2params\fP returns a single boolean value indicating whether depth testing
of fragments is enabled. The initial value is \%\f3GL_FALSE\fP. 
See \%\f3glDepthFunc\fP and \%\f3glDepthRange\fP.
.TP
\%\f3GL_DEPTH_WRITEMASK\fP
\f2params\fP returns a single boolean value indicating if the depth buffer
is enabled for writing. The initial value is \%\f3GL_TRUE\fP. 
See \%\f3glDepthMask\fP.
.TP
\%\f3GL_DITHER\fP
\f2params\fP returns a single boolean value indicating whether dithering of
fragment colors and indices is enabled. The initial value is \%\f3GL_TRUE\fP. 
.TP
\%\f3GL_DOUBLEBUFFER\fP
\f2params\fP returns a single boolean value indicating whether double buffering
is supported.
.TP
\%\f3GL_DRAW_BUFFER\fP
\f2params\fP returns one value,
a symbolic constant indicating which buffers are being drawn to. 
See \%\f3glDrawBuffer\fP. The initial value is \%\f3GL_BACK\fP if there
are back buffers, otherwise it is \%\f3GL_FRONT\fP.
.TP
\%\f3GL_EDGE_FLAG\fP
\f2params\fP returns a single boolean value indicating whether the current
edge flag is \%\f3GL_TRUE\fP or \%\f3GL_FALSE\fP. The initial value is \%\f3GL_TRUE\fP. 
See \%\f3glEdgeFlag\fP. 
.TP
\%\f3GL_EDGE_FLAG_ARRAY\fP
\f2params\fP returns a single boolean value indicating whether the edge
flag array is enabled. The initial value is \%\f3GL_FALSE\fP. 
See \%\f3glEdgeFlagPointer\fP.
.TP
\%\f3GL_EDGE_FLAG_ARRAY_STRIDE\fP
\f2params\fP returns one value,
the byte offset between consecutive edge flags in the edge flag
array. The initial value is 0.
See \%\f3glEdgeFlagPointer\fP.
.TP
\%\f3GL_FEEDBACK_BUFFER_SIZE\fP
\f2params\fP returns one value, the size of the feedback buffer.  See
\%\f3glFeedbackBuffer\fP.
.TP
\%\f3GL_FEEDBACK_BUFFER_TYPE\fP
\f2params\fP returns one value, the type of the feedback buffer.  See
\%\f3glFeedbackBuffer\fP.
.TP
\%\f3GL_FOG\fP
\f2params\fP returns a single boolean value indicating whether fogging is
enabled. The initial value is \%\f3GL_FALSE\fP. 
See \%\f3glFog\fP.
.TP
\%\f3GL_FOG_COLOR\fP
\f2params\fP returns four values:
the red, green, blue, and alpha components of the fog color.
Integer values,
if requested,
are linearly mapped from the internal floating-point representation such
that 1.0 returns the most positive representable integer value,
and \-1.0 returns the most negative representable integer
value. The initial value is (0, 0, 0, 0). 
See \%\f3glFog\fP.
.TP
\%\f3GL_FOG_DENSITY\fP
\f2params\fP returns one value,
the fog density parameter. The initial value is 1. 
See \%\f3glFog\fP.
.TP
\%\f3GL_FOG_END\fP
\f2params\fP returns one value,
the end factor for the linear fog equation. The initial value is 1. 
See \%\f3glFog\fP.
.TP
\%\f3GL_FOG_HINT\fP
\f2params\fP returns one value,
a symbolic constant indicating the mode of the fog hint. The initial value
is \%\f3GL_DONT_CARE\fP.
See \%\f3glHint\fP.
.TP
\%\f3GL_FOG_INDEX\fP
\f2params\fP returns one value,
the fog color index. The initial value is 0. 
See \%\f3glFog\fP.
.TP
\%\f3GL_FOG_MODE\fP
\f2params\fP returns one value,
a symbolic constant indicating which fog equation is selected. The initial
value is \%\f3GL_EXP\fP. 
See \%\f3glFog\fP.
.TP
\%\f3GL_FOG_START\fP
\f2params\fP returns one value,
the start factor for the linear fog equation. The initial value is 0. 
See \%\f3glFog\fP.
.TP
\%\f3GL_FRONT_FACE\fP
\f2params\fP returns one value,
a symbolic constant indicating whether clockwise or counterclockwise
polygon winding is treated as front-facing. The initial value is
\%\f3GL_CCW\fP. 
See \%\f3glFrontFace\fP.
.TP
\%\f3GL_GREEN_BIAS\fP
\f2params\fP returns one value,
the green bias factor used during pixel transfers. The initial value is 0.
.TP
\%\f3GL_GREEN_BITS\fP
\f2params\fP returns one value,
the number of green bitplanes in each color buffer.
.TP
\%\f3GL_GREEN_SCALE\fP
\f2params\fP returns one value,
the green scale factor used during pixel transfers. The initial value is 1.
See \%\f3glPixelTransfer\fP.
.TP
\%\f3GL_HISTOGRAM\fP
\f2params\fP returns a single boolean value indicating whether histogram is
enabled. The initial value is \%\f3GL_FALSE\fP.
See \%\f3glHistogram\fP.
.TP
\%\f3GL_INDEX_ARRAY\fP
\f2params\fP returns a single boolean value indicating whether the color
index array is enabled. The initial value is \%\f3GL_FALSE\fP. 
See \%\f3glIndexPointer\fP.
.TP
\%\f3GL_INDEX_ARRAY_STRIDE\fP
\f2params\fP returns one value,
the byte offset between consecutive color indexes in the color index
array. The initial value is 0. 
See \%\f3glIndexPointer\fP.
.TP
\%\f3GL_INDEX_ARRAY_TYPE\fP
\f2params\fP returns one value,
the data type of indexes in the color index array. The initial value is
\%\f3GL_FLOAT\fP. 
See \%\f3glIndexPointer\fP.
.TP
\%\f3GL_INDEX_BITS\fP
\f2params\fP returns one value,
the number of bitplanes in each color index buffer.
.TP
\%\f3GL_INDEX_CLEAR_VALUE\fP
\f2params\fP returns one value,
the color index used to clear the color index buffers. The initial value
is 0. 
See \%\f3glClearIndex\fP.
.TP
\%\f3GL_INDEX_LOGIC_OP\fP
\f2params\fP returns a single boolean value indicating whether a fragment's index
values are merged into the framebuffer using a logical
operation. The initial value is \%\f3GL_FALSE\fP. 
See \%\f3glLogicOp\fP.
.TP
\%\f3GL_INDEX_MODE\fP
\f2params\fP returns a single boolean value indicating whether the GL is in
color index mode (\%\f3GL_TRUE\fP) or RGBA mode (\%\f3GL_FALSE\fP).
.TP
\%\f3GL_INDEX_OFFSET\fP
\f2params\fP returns one value,
the offset added to color and stencil indices during pixel
transfers. The initial value is 0. 
See \%\f3glPixelTransfer\fP.
.TP
\%\f3GL_INDEX_SHIFT\fP
\f2params\fP returns one value,
the amount that color and stencil indices are shifted during pixel
transfers. The initial value is 0. 
See \%\f3glPixelTransfer\fP.
.TP
\%\f3GL_INDEX_WRITEMASK\fP
\f2params\fP returns one value,
a mask indicating which bitplanes of each color index buffer can be
written. The initial value is all 1's. 
See \%\f3glIndexMask\fP.
.TP
\%\f3GL_LIGHT\fP\f2i\fP
\f2params\fP returns a single boolean value indicating whether the specified
light is enabled. The initial value is \%\f3GL_FALSE\fP. 
See \%\f3glLight\fP and \%\f3glLightModel\fP.
.TP
\%\f3GL_LIGHTING\fP
\f2params\fP returns a single boolean value indicating whether lighting is
enabled. The initial value is \%\f3GL_FALSE\fP. 
See \%\f3glLightModel\fP.
.TP
\%\f3GL_LIGHT_MODEL_AMBIENT\fP
\f2params\fP returns four values:
the red, green, blue, and alpha components of the ambient intensity of
the entire scene.
Integer values,
if requested,
are linearly mapped from the internal floating-point representation such
that 1.0 returns the most positive representable integer value,
and \-1.0 returns the most negative representable integer
value. The initial value is (0.2, 0.2, 0.2, 1.0). 
See \%\f3glLightModel\fP.
.TP
\%\f3GL_LIGHT_MODEL_COLOR_CONTROL\fP
\f2params\fP returns single enumerated value indicating whether specular
reflection calculations are separated from normal lighting computations.
The initial value is \%\f3GL_SINGLE_COLOR\fP.
.TP
\%\f3GL_LIGHT_MODEL_LOCAL_VIEWER\fP
\f2params\fP returns a single boolean value indicating whether specular reflection
calculations treat the viewer as being local to the scene. The initial
value is \%\f3GL_FALSE\fP. 
See \%\f3glLightModel\fP.
.TP
\%\f3GL_LIGHT_MODEL_TWO_SIDE\fP
\f2params\fP returns a single boolean value indicating whether separate materials
are used to compute lighting for front- and back-facing
polygons. The initial value is \%\f3GL_FALSE\fP. 
See \%\f3glLightModel\fP.
.TP
\%\f3GL_LINE_SMOOTH\fP
\f2params\fP returns a single boolean value indicating whether antialiasing of
lines is enabled. The initial value is \%\f3GL_FALSE\fP. 
See \%\f3glLineWidth\fP.
.TP
\%\f3GL_LINE_SMOOTH_HINT\fP
\f2params\fP returns one value,
a symbolic constant indicating the mode of the line antialiasing
hint. The initial value is \%\f3GL_DONT_CARE\fP. 
See \%\f3glHint\fP.
.TP
\%\f3GL_LINE_STIPPLE\fP
\f2params\fP returns a single boolean value indicating whether stippling of lines
is enabled. The initial value is \%\f3GL_FALSE\fP.
See \%\f3glLineStipple\fP.
.TP
\%\f3GL_LINE_STIPPLE_PATTERN\fP
\f2params\fP returns one value,
the 16-bit line stipple pattern. The initial value is all 1's. 
See \%\f3glLineStipple\fP.
.TP
\%\f3GL_LINE_STIPPLE_REPEAT\fP
\f2params\fP returns one value,
the line stipple repeat factor. The initial value is 1. 
See \%\f3glLineStipple\fP.
.TP
\%\f3GL_LINE_WIDTH\fP
\f2params\fP returns one value,
the line width as specified with \%\f3glLineWidth\fP. The initial value is
1. 
.TP
\%\f3GL_LINE_WIDTH_GRANULARITY\fP
\f2params\fP returns one value,
the width difference between adjacent supported widths for antialiased lines.
See \%\f3glLineWidth\fP.
.TP
\%\f3GL_LINE_WIDTH_RANGE\fP
\f2params\fP returns two values:
the smallest and largest supported widths for antialiased
lines. 
See \%\f3glLineWidth\fP.
.TP
\%\f3GL_LIST_BASE\fP
\f2params\fP returns one value,
the base offset added to all names in arrays presented to
\%\f3glCallLists\fP. The initial value is 0. 
See \%\f3glListBase\fP.
.TP
\%\f3GL_LIST_INDEX\fP
\f2params\fP returns one value,
the name of the display list currently under construction.
0 is returned if no display list is currently under
construction. The initial value is 0.
See \%\f3glNewList\fP.
.TP
\%\f3GL_LIST_MODE\fP
\f2params\fP returns one value,
a symbolic constant indicating the construction mode of the display list
currently under construction. The initial value is 0.
See \%\f3glNewList\fP.
.TP
\%\f3GL_LOGIC_OP_MODE\fP
\f2params\fP returns one value,
a symbolic constant indicating the selected logic operation
mode. The initial value is \%\f3GL_COPY\fP. 
See \%\f3glLogicOp\fP.
.TP
\%\f3GL_MAP1_COLOR_4\fP
\f2params\fP returns a single boolean value indicating whether
1D evaluation generates colors. The initial value is \%\f3GL_FALSE\fP.
See \%\f3glMap1\fP.
.TP
\%\f3GL_MAP1_GRID_DOMAIN\fP
\f2params\fP returns two values:
the endpoints of the 1D map's grid domain. The initial value is (0, 1). 
See \%\f3glMapGrid\fP.
.TP
\%\f3GL_MAP1_GRID_SEGMENTS\fP
\f2params\fP returns one value,
the number of partitions in the 1D map's grid domain. The initial value
is 1. 
See \%\f3glMapGrid\fP.
.TP
\%\f3GL_MAP1_INDEX\fP
\f2params\fP returns a single boolean value indicating whether
1D evaluation generates color indices. The initial value is \%\f3GL_FALSE\fP.
See \%\f3glMap1\fP.
.TP
\%\f3GL_MAP1_NORMAL\fP
\f2params\fP returns a single boolean value indicating whether
1D evaluation generates normals. The initial value is \%\f3GL_FALSE\fP.
See \%\f3glMap1\fP.
.TP
\%\f3GL_MAP1_TEXTURE_COORD_1\fP
\f2params\fP returns a single boolean value indicating whether
1D evaluation generates 1D texture coordinates. The initial value is
\%\f3GL_FALSE\fP. 
See \%\f3glMap1\fP.
.TP
\%\f3GL_MAP1_TEXTURE_COORD_2\fP
\f2params\fP returns a single boolean value indicating whether
1D evaluation generates 2D texture coordinates. The initial value is
\%\f3GL_FALSE\fP. 
See \%\f3glMap1\fP.
.TP
\%\f3GL_MAP1_TEXTURE_COORD_3\fP
\f2params\fP returns a single boolean value indicating whether
1D evaluation generates 3D texture coordinates. The initial value is
\%\f3GL_FALSE\fP. 
See \%\f3glMap1\fP.
.TP
\%\f3GL_MAP1_TEXTURE_COORD_4\fP
\f2params\fP returns a single boolean value indicating whether
1D evaluation generates 4D texture coordinates. The initial value is
\%\f3GL_FALSE\fP.
See \%\f3glMap1\fP.
.TP
\%\f3GL_MAP1_VERTEX_3\fP
\f2params\fP returns a single boolean value indicating whether
1D evaluation generates 3D vertex coordinates. The initial value is
\%\f3GL_FALSE\fP. 
See \%\f3glMap1\fP.
.TP
\%\f3GL_MAP1_VERTEX_4\fP
\f2params\fP returns a single boolean value indicating whether
1D evaluation generates 4D vertex coordinates. The initial value is
\%\f3GL_FALSE\fP. 
See \%\f3glMap1\fP.
.TP
\%\f3GL_MAP2_COLOR_4\fP
\f2params\fP returns a single boolean value indicating whether
2D evaluation generates colors. The initial value is \%\f3GL_FALSE\fP.
See \%\f3glMap2\fP.
.TP
\%\f3GL_MAP2_GRID_DOMAIN\fP
\f2params\fP returns four values:
the endpoints of the 2D map's $i$ and $j$ grid domains. The initial value
is (0,1; 0,1). 
See \%\f3glMapGrid\fP.
.TP
\%\f3GL_MAP2_GRID_SEGMENTS\fP
\f2params\fP returns two values:
the number of partitions in the 2D map's $i$ and $j$ grid
domains. The initial value is (1,1). 
See \%\f3glMapGrid\fP.
.TP
\%\f3GL_MAP2_INDEX\fP
\f2params\fP returns a single boolean value indicating whether
2D evaluation generates color indices. The initial value is \%\f3GL_FALSE\fP.
See \%\f3glMap2\fP.
.TP
\%\f3GL_MAP2_NORMAL\fP
\f2params\fP returns a single boolean value indicating whether
2D evaluation generates normals. The initial value is \%\f3GL_FALSE\fP.
See \%\f3glMap2\fP.
.TP
\%\f3GL_MAP2_TEXTURE_COORD_1\fP
\f2params\fP returns a single boolean value indicating whether
2D evaluation generates 1D texture coordinates. The initial value is
\%\f3GL_FALSE\fP. 
See \%\f3glMap2\fP.
.TP
\%\f3GL_MAP2_TEXTURE_COORD_2\fP
\f2params\fP returns a single boolean value indicating whether
2D evaluation generates 2D texture coordinates. The initial value is
\%\f3GL_FALSE\fP. 
See \%\f3glMap2\fP.
.TP
\%\f3GL_MAP2_TEXTURE_COORD_3\fP
\f2params\fP returns a single boolean value indicating whether
2D evaluation generates 3D texture coordinates. The initial value is
\%\f3GL_FALSE\fP. 
See \%\f3glMap2\fP.
.TP
\%\f3GL_MAP2_TEXTURE_COORD_4\fP
\f2params\fP returns a single boolean value indicating whether
2D evaluation generates 4D texture coordinates. The initial value is
\%\f3GL_FALSE\fP. 
See \%\f3glMap2\fP.
.TP
\%\f3GL_MAP2_VERTEX_3\fP
\f2params\fP returns a single boolean value indicating whether
2D evaluation generates 3D vertex coordinates. The initial value is
\%\f3GL_FALSE\fP. 
See \%\f3glMap2\fP.
.TP
\%\f3GL_MAP2_VERTEX_4\fP
\f2params\fP returns a single boolean value indicating whether
2D evaluation generates 4D vertex coordinates. The initial value is
\%\f3GL_FALSE\fP. 
See \%\f3glMap2\fP.
.TP
\%\f3GL_MAP_COLOR\fP
\f2params\fP returns a single boolean value indicating if colors and
color indices are to be replaced by table lookup during pixel
transfers. The initial value is \%\f3GL_FALSE\fP. 
See \%\f3glPixelTransfer\fP.
.TP
\%\f3GL_MAP_STENCIL\fP
\f2params\fP returns a single boolean value indicating if stencil indices
are to be replaced by table lookup during pixel transfers. The initial
value is \%\f3GL_FALSE\fP. 
See \%\f3glPixelTransfer\fP.
.TP
\%\f3GL_MATRIX_MODE\fP
\f2params\fP returns one value,
a symbolic constant indicating which matrix stack is currently the
target of all matrix operations. The initial value is \%\f3GL_MODELVIEW\fP.
See \%\f3glMatrixMode\fP.
.TP
\%\f3GL_MAX_3D_TEXTURE_SIZE\fP
\f2params\fP returns one value,
a rough estimate of the largest 3D texture that the GL can handle.
If the GL version is 1.2 or greater, use
\%\f3GL_PROXY_TEXTURE_3D\fP to determine if a texture is too large.
See \%\f3glTexImage3D\fP.
.TP
\%\f3GL_MAX_CLIENT_ATTRIB_STACK_DEPTH\fP
\f2params\fP returns one value indicating the maximum supported depth
of the client attribute stack.
See \%\f3glPushClientAttrib\fP.
.TP
\%\f3GL_MAX_ATTRIB_STACK_DEPTH\fP
\f2params\fP returns one value,
the maximum supported depth of the attribute stack. The value must be at least 16.
See \%\f3glPushAttrib\fP.
.TP
\%\f3GL_MAX_CLIP_PLANES\fP
\f2params\fP returns one value,
the maximum number of application-defined clipping planes. The value must be at least 6.
See \%\f3glClipPlane\fP.
.TP
\%\f3GL_MAX_COLOR_MATRIX_STACK_DEPTH\fP
\f2params\fP returns one value, the maximum supported depth of the color matrix
stack.  The value must be at least 2.
See \%\f3glPushMatrix\fP.
.TP
\%\f3GL_MAX_ELEMENTS_INDICES\fP
\f2params\fP returns one value,
the recommended maximum number of vertex array indices.  See \%\f3glDrawRangeElements\fP.
.TP
\%\f3GL_MAX_ELEMENTS_VERTICES\fP
\f2params\fP returns one value,
the recommended maximum number of vertex array vertices.  See \%\f3glDrawRangeElements\fP.
.TP
\%\f3GL_MAX_EVAL_ORDER\fP
\f2params\fP returns one value,
the maximum equation order supported by 1D and 2D
evaluators. The value must be at least 8.
See \%\f3glMap1\fP and \%\f3glMap2\fP.
.TP
\%\f3GL_MAX_LIGHTS\fP
\f2params\fP returns one value,
the maximum number of lights. The value must be at least 8.
See \%\f3glLight\fP.
.TP
\%\f3GL_MAX_LIST_NESTING\fP
\f2params\fP returns one value,
the maximum recursion depth allowed during display-list
traversal. The value must be at least 64.
See \%\f3glCallList\fP.
.TP
\%\f3GL_MAX_MODELVIEW_STACK_DEPTH\fP
\f2params\fP returns one value,
the maximum supported depth of the modelview matrix stack. The value must
be at least 32.
See \%\f3glPushMatrix\fP.
.TP
\%\f3GL_MAX_NAME_STACK_DEPTH\fP
\f2params\fP returns one value,
the maximum supported depth of the selection name stack. The value must be at least 64.
See \%\f3glPushName\fP.
.TP
\%\f3GL_MAX_PIXEL_MAP_TABLE\fP
\f2params\fP returns one value,
the maximum supported size of a \%\f3glPixelMap\fP lookup table. 
The value must be at least 32.
See \%\f3glPixelMap\fP.
.TP
\%\f3GL_MAX_PROJECTION_STACK_DEPTH\fP
\f2params\fP returns one value,
the maximum supported depth of the projection matrix stack. The value must be at least 2.
See \%\f3glPushMatrix\fP.
.TP
\%\f3GL_MAX_TEXTURE_SIZE\fP
\f2params\fP returns one value.
The value gives a rough estimate of the largest texture that
the GL can handle.
If the GL version is 1.1 or greater, use
\%\f3GL_PROXY_TEXTURE_1D\fP or \%\f3GL_PROXY_TEXTURE_2D\fP
to determine if a texture is too large.
See \%\f3glTexImage1D\fP and \%\f3glTexImage2D\fP.
.TP
\%\f3GL_MAX_TEXTURE_STACK_DEPTH\fP
\f2params\fP returns one value,
the maximum supported depth of the texture matrix stack. The value must be at least 2.
See \%\f3glPushMatrix\fP.
.TP
\%\f3GL_MAX_TEXTURE_UNITS_ARB\fP
\f2params\fP returns a single value indicating the number of texture units
supported. The value must be at least 1.
See \%\f3glActiveTextureARB\fP.
.TP
\%\f3GL_MAX_VIEWPORT_DIMS\fP
\f2params\fP returns two values:
the maximum supported width and height of the viewport.
These must be at least as large as the visible dimensions of the display
being rendered to.
See \%\f3glViewport\fP.
.TP
\%\f3GL_MINMAX\fP
\f2params\fP returns a single boolean value indicating whether pixel minmax
values are computed.  The initial value is \%\f3GL_FALSE\fP.
See \%\f3glMinmax\fP.
.TP
\%\f3GL_MODELVIEW_MATRIX\fP
\f2params\fP returns sixteen values:
the modelview matrix on the top of the modelview matrix stack. Initially
this matrix is the identity matrix. See \%\f3glPushMatrix\fP.
.TP
\%\f3GL_MODELVIEW_STACK_DEPTH\fP
\f2params\fP returns one value,
the number of matrices on the modelview matrix stack.
The initial value is 1.
See \%\f3glPushMatrix\fP.
.TP
\%\f3GL_NAME_STACK_DEPTH\fP
\f2params\fP returns one value,
the number of names on the selection name stack. The initial value is 0. 
See \%\f3glPushName\fP.
.TP
\%\f3GL_NORMAL_ARRAY\fP
\f2params\fP returns a single boolean value, indicating whether the normal
array is enabled. The initial value is \%\f3GL_FALSE\fP. 
See \%\f3glNormalPointer\fP.
.TP
\%\f3GL_NORMAL_ARRAY_STRIDE\fP
\f2params\fP returns one value,
the byte offset between consecutive normals in the normal
array. The initial value is 0. 
See \%\f3glNormalPointer\fP.
.TP
\%\f3GL_NORMAL_ARRAY_TYPE\fP
\f2params\fP returns one value,
the data type of each coordinate in the normal array. The initial value is
\%\f3GL_FLOAT\fP. 
See \%\f3glNormalPointer\fP.
.TP
\%\f3GL_NORMALIZE\fP
\f2params\fP returns a single boolean value indicating whether normals are
automatically scaled to unit length after they have been transformed to
eye coordinates. The initial value is \%\f3GL_FALSE\fP. 
See \%\f3glNormal\fP.
.TP
\%\f3GL_PACK_ALIGNMENT\fP
\f2params\fP returns one value,
the byte alignment used for writing pixel data to memory. The initial
value is 4. 
See \%\f3glPixelStore\fP.
.TP
\%\f3GL_PACK_IMAGE_HEIGHT\fP
\f2params\fP returns one value,
the image height used for writing pixel data to memory.  The initial
value is 0.
See \%\f3glPixelStore\fP.
.TP
\%\f3GL_PACK_LSB_FIRST\fP
\f2params\fP returns a single boolean value indicating whether single-bit
pixels being written to memory are written first to the least significant
bit of each unsigned byte. The initial value is \%\f3GL_FALSE\fP. 
See \%\f3glPixelStore\fP.
.TP
\%\f3GL_PACK_ROW_LENGTH\fP
\f2params\fP returns one value,
the row length used for writing pixel data to memory. The initial value is
0. 
See \%\f3glPixelStore\fP.
.TP
\%\f3GL_PACK_SKIP_IMAGES\fP
\f2params\fP returns one value,
the number of pixel images skipped before the first pixel is written
into memory. The initial value is 0. 
See \%\f3glPixelStore\fP.
.TP
\%\f3GL_PACK_SKIP_PIXELS\fP
\f2params\fP returns one value,
the number of pixel locations skipped before the first pixel is written
into memory. The initial value is 0. 
See \%\f3glPixelStore\fP.
.TP
\%\f3GL_PACK_SKIP_ROWS\fP
\f2params\fP returns one value,
the number of rows of pixel locations skipped before the first pixel is written
into memory. The initial value is 0. 
See \%\f3glPixelStore\fP.
.TP
\%\f3GL_PACK_SWAP_BYTES\fP
\f2params\fP returns a single boolean value indicating whether the bytes of
two-byte and four-byte pixel indices and components are swapped before being
written to memory. The initial value is \%\f3GL_FALSE\fP. 
See \%\f3glPixelStore\fP.
.TP
\%\f3GL_PERSPECTIVE_CORRECTION_HINT\fP
\f2params\fP returns one value,
a symbolic constant indicating the mode of the perspective correction
hint. The initial value is \%\f3GL_DONT_CARE\fP. 
See \%\f3glHint\fP.
.TP
\%\f3GL_PIXEL_MAP_A_TO_A_SIZE\fP
\f2params\fP returns one value,
the size of the alpha-to-alpha pixel translation table.
The initial value is 1.
See \%\f3glPixelMap\fP.
.TP
\%\f3GL_PIXEL_MAP_B_TO_B_SIZE\fP
\f2params\fP returns one value,
the size of the blue-to-blue pixel translation table.
The initial value is 1.
See \%\f3glPixelMap\fP.
.TP
\%\f3GL_PIXEL_MAP_G_TO_G_SIZE\fP
\f2params\fP returns one value,
the size of the green-to-green pixel translation table.
The initial value is 1.
See \%\f3glPixelMap\fP.
.TP
\%\f3GL_PIXEL_MAP_I_TO_A_SIZE\fP
\f2params\fP returns one value,
the size of the index-to-alpha pixel translation table.
The initial value is 1.
See \%\f3glPixelMap\fP.
.TP
\%\f3GL_PIXEL_MAP_I_TO_B_SIZE\fP
\f2params\fP returns one value,
the size of the index-to-blue pixel translation table.
The initial value is 1.
See \%\f3glPixelMap\fP.
.TP
\%\f3GL_PIXEL_MAP_I_TO_G_SIZE\fP
\f2params\fP returns one value,
the size of the index-to-green pixel translation table.
The initial value is 1.
See \%\f3glPixelMap\fP.
.TP
\%\f3GL_PIXEL_MAP_I_TO_I_SIZE\fP
\f2params\fP returns one value,
the size of the index-to-index pixel translation table.
The initial value is 1.
See \%\f3glPixelMap\fP.
.TP
\%\f3GL_PIXEL_MAP_I_TO_R_SIZE\fP
\f2params\fP returns one value,
the size of the index-to-red pixel translation table.
The initial value is 1.
See \%\f3glPixelMap\fP.
.TP
\%\f3GL_PIXEL_MAP_R_TO_R_SIZE\fP
\f2params\fP returns one value,
the size of the red-to-red pixel translation table.
The initial value is 1.
See \%\f3glPixelMap\fP.
.TP
\%\f3GL_PIXEL_MAP_S_TO_S_SIZE\fP
\f2params\fP returns one value,
the size of the stencil-to-stencil pixel translation table.
The initial value is 1.
See \%\f3glPixelMap\fP.
.TP
\%\f3GL_POINT_SIZE\fP
\f2params\fP returns one value,
the point size as specified by \%\f3glPointSize\fP. The initial value is 1. 
.TP
\%\f3GL_POINT_SIZE_GRANULARITY\fP
\f2params\fP returns one value,
the size difference between adjacent supported sizes for antialiased points.
See \%\f3glPointSize\fP.
.TP
\%\f3GL_POINT_SIZE_RANGE\fP
\f2params\fP returns two values:
the smallest and largest supported sizes for antialiased
points. The smallest size must be at most 1, and the largest size must
be at least 1.
See \%\f3glPointSize\fP.
.TP
\%\f3GL_POINT_SMOOTH\fP
\f2params\fP returns a single boolean value indicating whether antialiasing of
points is enabled. The initial value is \%\f3GL_FALSE\fP. 
See \%\f3glPointSize\fP.
.TP
\%\f3GL_POINT_SMOOTH_HINT\fP
\f2params\fP returns one value,
a symbolic constant indicating the mode of the point antialiasing
hint. The initial value is \%\f3GL_DONT_CARE\fP.
See \%\f3glHint\fP.
.TP
\%\f3GL_POLYGON_MODE\fP
\f2params\fP returns two values:
symbolic constants indicating whether front-facing and back-facing polygons
are rasterized as points, lines, or filled polygons. The initial value is
\%\f3GL_FILL\fP. 
See \%\f3glPolygonMode\fP.
.TP
\%\f3GL_POLYGON_OFFSET_FACTOR\fP
\f2params\fP returns one value,
the scaling factor used to determine the variable offset that is added
to the depth value of each fragment generated when a polygon is
rasterized. The initial value is 0. 
See \%\f3glPolygonOffset\fP.
.TP
\%\f3GL_POLYGON_OFFSET_UNITS\fP
\f2params\fP returns one value.
This value is multiplied by an implementation-specific value and then
added to the depth value of each fragment
generated when a polygon is rasterized. The initial value is 0. 
See \%\f3glPolygonOffset\fP.
.TP
\%\f3GL_POLYGON_OFFSET_FILL\fP
\f2params\fP returns a single boolean value indicating whether polygon offset
is enabled for polygons in fill mode. The initial value is \%\f3GL_FALSE\fP.
See \%\f3glPolygonOffset\fP.
.TP
\%\f3GL_POLYGON_OFFSET_LINE\fP
\f2params\fP returns a single boolean value indicating whether polygon offset
is enabled for polygons in line mode. The initial value is \%\f3GL_FALSE\fP.
See \%\f3glPolygonOffset\fP.
.TP
\%\f3GL_POLYGON_OFFSET_POINT\fP
\f2params\fP returns a single boolean value indicating whether polygon offset
is enabled for polygons in point mode. The initial value is \%\f3GL_FALSE\fP. 
See \%\f3glPolygonOffset\fP.
.TP
\%\f3GL_POLYGON_SMOOTH\fP
\f2params\fP returns a single boolean value indicating whether antialiasing of
polygons is enabled. The initial value is \%\f3GL_FALSE\fP. 
See \%\f3glPolygonMode\fP.
.TP
\%\f3GL_POLYGON_SMOOTH_HINT\fP
\f2params\fP returns one value,
a symbolic constant indicating the mode of the polygon antialiasing
hint. The initial value is \%\f3GL_DONT_CARE\fP.
See \%\f3glHint\fP.
.TP
\%\f3GL_POLYGON_STIPPLE\fP
\f2params\fP returns a single boolean value indicating whether polygon
stippling is enabled. The initial value is \%\f3GL_FALSE\fP. 
See \%\f3glPolygonStipple\fP.
.TP
\%\f3GL_POST_COLOR_MATRIX_COLOR_TABLE\fP
\f2params\fP returns a single boolean value indicating whether post color
matrix transformation lookup is enabled. The initial value is
\%\f3GL_FALSE\fP.
See \%\f3glColorTable\fP.
.TP
\%\f3GL_POST_COLOR_MATRIX_RED_BIAS\fP
\f2params\fP returns one value, the red bias factor applied to RGBA fragments
after color matrix transformations. The initial value is 0.
See \%\f3glPixelTransfer\fP.
.TP
\%\f3GL_POST_COLOR_MATRIX_GREEN_BIAS\fP
\f2params\fP returns one value, the green bias factor applied to RGBA fragments
after color matrix transformations. The initial value is 0.
See \%\f3glPixelTransfer\fP
.TP
\%\f3GL_POST_COLOR_MATRIX_BLUE_BIAS\fP
\f2params\fP returns one value, the blue bias factor applied to RGBA fragments
after color matrix transformations. The initial value is 0.
See \%\f3glPixelTransfer\fP.
.TP
\%\f3GL_POST_COLOR_MATRIX_ALPHA_BIAS\fP
\f2params\fP returns one value, the alpha bias factor applied to RGBA fragments
after color matrix transformations. The initial value is 0.
See \%\f3glPixelTransfer\fP.
.TP
\%\f3GL_POST_COLOR_MATRIX_RED_SCALE\fP
\f2params\fP returns one value, the red scale factor applied to RGBA fragments
after color matrix transformations. The initial value is 1.
See \%\f3glPixelTransfer\fP.
.TP
\%\f3GL_POST_COLOR_MATRIX_GREEN_SCALE\fP
\f2params\fP returns one value, the green scale factor applied to RGBA fragments
after color matrix transformations. The initial value is 1.
See \%\f3glPixelTransfer\fP.
.TP
\%\f3GL_POST_COLOR_MATRIX_BLUE_SCALE\fP
\f2params\fP returns one value, the blue scale factor applied to RGBA fragments
after color matrix transformations. The initial value is 1.
See \%\f3glPixelTransfer\fP.
.TP
\%\f3GL_POST_COLOR_MATRIX_ALPHA_SCALE\fP
\f2params\fP returns one value, the alpha scale factor applied to RGBA fragments
after color matrix transformations. The initial value is 1.
See \%\f3glPixelTransfer\fP.
.TP
\%\f3GL_POST_CONVOLUTION_COLOR_TABLE\fP
\f2params\fP returns a single boolean value indicating whether post convolution
lookup is enabled. The initial value is \%\f3GL_FALSE\fP.
See \%\f3glColorTable\fP.
.TP
\%\f3GL_POST_CONVOLUTION_RED_BIAS\fP
\f2params\fP returns one value, the red bias factor applied to RGBA fragments
after convolution. The initial value is 0.
See \%\f3glPixelTransfer\fP.
.TP
\%\f3GL_POST_CONVOLUTION_GREEN_BIAS\fP
\f2params\fP returns one value, the green bias factor applied to RGBA fragments
after convolution. The initial value is 0.
See \%\f3glPixelTransfer\fP.
.TP
\%\f3GL_POST_CONVOLUTION_BLUE_BIAS\fP
\f2params\fP returns one value, the blue bias factor applied to RGBA fragments
after convolution. The initial value is 0.
See \%\f3glPixelTransfer\fP.
.TP
\%\f3GL_POST_CONVOLUTION_ALPHA_BIAS\fP
\f2params\fP returns one value, the alpha bias factor applied to RGBA fragments
after convolution. The initial value is 0.
See \%\f3glPixelTransfer\fP.
.TP
\%\f3GL_POST_CONVOLUTION_RED_SCALE\fP
\f2params\fP returns one value, the red scale factor applied to RGBA fragments
after convolution. The initial value is 1.
See \%\f3glPixelTransfer\fP.
.TP
\%\f3GL_POST_CONVOLUTION_GREEN_SCALE\fP
\f2params\fP returns one value, the green scale factor applied to RGBA fragments
after convolution. The initial value is 1.
See \%\f3glPixelTransfer\fP.
.TP
\%\f3GL_POST_CONVOLUTION_BLUE_SCALE\fP
\f2params\fP returns one value, the blue scale factor applied to RGBA fragments
after convolution. The initial value is 1.
See \%\f3glPixelTransfer\fP.
.TP
\%\f3GL_POST_CONVOLUTION_ALPHA_SCALE\fP
\f2params\fP returns one value, the alpha scale factor applied to RGBA fragments
after convolution. The initial value is 1.
See \%\f3glPixelTransfer\fP.
.TP
\%\f3GL_PROJECTION_MATRIX\fP
\f2params\fP returns sixteen values:
the projection matrix on the top of the projection matrix
stack. Initially this matrix is the identity matrix.
See \%\f3glPushMatrix\fP.
.TP
\%\f3GL_PROJECTION_STACK_DEPTH\fP
\f2params\fP returns one value,
the number of matrices on the projection matrix stack.
The initial value is 1.
See \%\f3glPushMatrix\fP.
.TP
\%\f3GL_READ_BUFFER\fP
\f2params\fP returns one value,
a symbolic constant indicating which color buffer is selected for
reading. The initial value is \%\f3GL_BACK\fP if there is a back buffer,
otherwise it is \%\f3GL_FRONT\fP.
See
\%\f3glReadPixels\fP and \%\f3glAccum\fP.
.TP
\%\f3GL_RED_BIAS\fP
\f2params\fP returns one value,
the red bias factor used during pixel transfers. The initial value is 0.
.TP
\%\f3GL_RED_BITS\fP
\f2params\fP returns one value,
the number of red bitplanes in each color buffer.
.TP
\%\f3GL_RED_SCALE\fP
\f2params\fP returns one value,
the red scale factor used during pixel transfers. The initial value is 1. 
See \%\f3glPixelTransfer\fP.
.TP
\%\f3GL_RENDER_MODE\fP
\f2params\fP returns one value,
a symbolic constant indicating whether the GL is in render,
select,
or feedback mode. The initial value is \%\f3GL_RENDER\fP. 
See \%\f3glRenderMode\fP.
.TP
\%\f3GL_RESCALE_NORMAL\fP
\f2params\fP returns single boolean value
indicating whether normal rescaling is enabled.
See \%\f3glEnable\fP.
.TP
\%\f3GL_RGBA_MODE\fP
\f2params\fP returns a single boolean value indicating whether the GL is in RGBA
mode (true) or color index mode (false).
See \%\f3glColor\fP.
.TP
\%\f3GL_SCISSOR_BOX\fP
\f2params\fP returns four values:
the $x$ and $y$ window coordinates of the scissor box,
followed by its width and height. 
Initially the $x$ and $y$ window coordinates are both 0 and the 
width and height are set to the size of the window.
See \%\f3glScissor\fP.
.TP
\%\f3GL_SCISSOR_TEST\fP
\f2params\fP returns a single boolean value indicating whether scissoring is
enabled. The initial value is \%\f3GL_FALSE\fP.
See \%\f3glScissor\fP.
.TP
\%\f3GL_SELECTION_BUFFER_SIZE\fP
\f2params\fP return one value,
the size of the selection buffer.
See \%\f3glSelectBuffer\fP.
.TP
\%\f3GL_SEPARABLE_2D\fP
\f2params\fP returns a single boolean value indicating whether 2D separable
convolution is enabled. The initial value is \%\f3GL_FALSE\fP.
See \%\f3glSeparableFilter2D\fP.
.TP
\%\f3GL_SHADE_MODEL\fP
\f2params\fP returns one value,
a symbolic constant indicating whether the shading mode is flat or
smooth. The initial value is \%\f3GL_SMOOTH\fP. 
See \%\f3glShadeModel\fP.
.TP
\%\f3GL_SMOOTH_LINE_WIDTH_RANGE\fP
\f2params\fP returns two values,
the smallest and largest supported widths for antialiased lines.
See \%\f3glLineWidth\fP.
.TP
\%\f3GL_SMOOTH_LINE_WIDTH_GRANULARITY\fP
\f2params\fP returns one value,
the granularity of widths for antialiased lines.
See \%\f3glLineWidth\fP.
.TP
\%\f3GL_SMOOTH_POINT_SIZE_RANGE\fP
\f2params\fP returns two values,
the smallest and largest supported widths for antialiased points.
See \%\f3glPointSize\fP.
.TP
\%\f3GL_SMOOTH_POINT_SIZE_GRANULARITY\fP
\f2params\fP returns one value,
the granularity of sizes for antialiased points.
See \%\f3glPointSize\fP.
.TP
\%\f3GL_STENCIL_BITS\fP
\f2params\fP returns one value,
the number of bitplanes in the stencil buffer.
.TP
\%\f3GL_STENCIL_CLEAR_VALUE\fP
\f2params\fP returns one value,
the index to which the stencil bitplanes are cleared. The initial value is
0. 
See \%\f3glClearStencil\fP.
.TP
\%\f3GL_STENCIL_FAIL\fP
\f2params\fP returns one value,
a symbolic constant indicating what action is taken when the stencil
test fails. The initial value is \%\f3GL_KEEP\fP. 
See \%\f3glStencilOp\fP.
.TP
\%\f3GL_STENCIL_FUNC\fP
\f2params\fP returns one value,
a symbolic constant indicating what function is used to compare the
stencil reference value with the stencil buffer value. The initial value
is \%\f3GL_ALWAYS\fP. 
See \%\f3glStencilFunc\fP.
.TP
\%\f3GL_STENCIL_PASS_DEPTH_FAIL\fP
\f2params\fP returns one value,
a symbolic constant indicating what action is taken when the stencil
test passes, 
but the depth test fails. The initial value is \%\f3GL_KEEP\fP. 
See \%\f3glStencilOp\fP.
.TP
\%\f3GL_STENCIL_PASS_DEPTH_PASS\fP
\f2params\fP returns one value,
a symbolic constant indicating what action is taken when the stencil
test passes and the depth test passes. The initial value is \%\f3GL_KEEP\fP. 
See \%\f3glStencilOp\fP.
.TP
\%\f3GL_STENCIL_REF\fP
\f2params\fP returns one value,
the reference value that is compared with the contents of the stencil
buffer. The initial value is 0. 
See \%\f3glStencilFunc\fP.
.TP
\%\f3GL_STENCIL_TEST\fP
\f2params\fP returns a single boolean value indicating whether stencil testing
of fragments is enabled. The initial value is \%\f3GL_FALSE\fP.
See \%\f3glStencilFunc\fP and \%\f3glStencilOp\fP.
.TP
\%\f3GL_STENCIL_VALUE_MASK\fP
\f2params\fP returns one value,
the mask that is used to mask both the stencil reference value and the
stencil buffer value before they are compared. The initial value is all 1's.
See \%\f3glStencilFunc\fP.
.TP
\%\f3GL_STENCIL_WRITEMASK\fP
\f2params\fP returns one value,
the mask that controls writing of the stencil bitplanes. The initial value
is all 1's. See \%\f3glStencilMask\fP.
.TP
\%\f3GL_STEREO\fP
\f2params\fP returns a single boolean value indicating whether stereo buffers
(left and right) are supported.
.TP
\%\f3GL_SUBPIXEL_BITS\fP
\f2params\fP returns one value,
an estimate of the number of bits of subpixel resolution that are used to
position rasterized geometry in window coordinates. The initial value
.br
is 4.
.TP
\%\f3GL_TEXTURE_1D\fP
\f2params\fP returns a single boolean value indicating whether 1D texture
mapping is enabled. The initial value is \%\f3GL_FALSE\fP.
See \%\f3glTexImage1D\fP.
.TP
\%\f3GL_TEXTURE_BINDING_1D\fP
\f2params\fP returns a single value, the name of the texture
currently bound to the target \%\f3GL_TEXTURE_1D\fP. The initial value is 0.
See \%\f3glBindTexture\fP.
.TP
\%\f3GL_TEXTURE_2D\fP
\f2params\fP returns a single boolean value indicating whether 2D texture
mapping is enabled. The initial value is \%\f3GL_FALSE\fP.
See \%\f3glTexImage2D\fP.
.TP
\%\f3GL_TEXTURE_BINDING_2D\fP
\f2params\fP returns a single value, the name of the texture
currently bound to the target \%\f3GL_TEXTURE_2D\fP. The initial value is 0.
See \%\f3glBindTexture\fP.
.TP
\%\f3GL_TEXTURE_3D\fP
\f2params\fP returns a single boolean value indicating whether 3D texture
mapping is enabled. The initial value is \%\f3GL_FALSE\fP.
See \%\f3glTexImage3D\fP.
.TP
\%\f3GL_TEXTURE_BINDING_3D\fP
\f2params\fP returns a single value, the name of the texture
currently bound to the target \%\f3GL_TEXTURE_3D\fP. The initial value is 0.
See \%\f3glBindTexture\fP.
.TP
\%\f3GL_TEXTURE_COORD_ARRAY\fP
\f2params\fP returns a single boolean value indicating whether the texture
coordinate array is enabled. The initial value is \%\f3GL_FALSE\fP. 
See \%\f3glTexCoordPointer\fP.
.TP
\%\f3GL_TEXTURE_COORD_ARRAY_SIZE\fP
\f2params\fP returns one value,
the number of coordinates per element in the texture coordinate
array. The initial value is 4. 
See \%\f3glTexCoordPointer\fP.
.TP
\%\f3GL_TEXTURE_COORD_ARRAY_STRIDE\fP
\f2params\fP returns one value,
the byte offset between consecutive elements in the texture coordinate
array. The initial value is 0. 
See \%\f3glTexCoordPointer\fP.
.TP
\%\f3GL_TEXTURE_COORD_ARRAY_TYPE\fP
\f2params\fP returns one value,
the data type of the coordinates in the texture coordinate
array. The initial value is \%\f3GL_FLOAT\fP. 
See \%\f3glTexCoordPointer\fP.
.TP
\%\f3GL_TEXTURE_GEN_Q\fP
\f2params\fP returns a single boolean value indicating whether automatic generation
of the \f2q\fP texture coordinate is enabled. The initial value is \%\f3GL_FALSE\fP. 
See \%\f3glTexGen\fP.
.TP
\%\f3GL_TEXTURE_GEN_R\fP
\f2params\fP returns a single boolean value indicating whether automatic generation
of the \f2r\fP texture coordinate is enabled. The initial value is \%\f3GL_FALSE\fP. 
See \%\f3glTexGen\fP.
.TP
\%\f3GL_TEXTURE_GEN_S\fP
\f2params\fP returns a single boolean value indicating whether automatic generation
of the \f2S\fP texture coordinate is enabled. The initial value is \%\f3GL_FALSE\fP. 
See \%\f3glTexGen\fP.
.TP
\%\f3GL_TEXTURE_GEN_T\fP
\f2params\fP returns a single boolean value indicating whether automatic generation
of the T texture coordinate is enabled. The initial value is \%\f3GL_FALSE\fP. 
See \%\f3glTexGen\fP.
.TP
\%\f3GL_TEXTURE_MATRIX\fP
\f2params\fP returns sixteen values:
the texture matrix on the top of the texture matrix stack. Initially this
matrix is the identity matrix.
See \%\f3glPushMatrix\fP.
.TP
\%\f3GL_TEXTURE_STACK_DEPTH\fP
\f2params\fP returns one value,
the number of matrices on the texture matrix stack.
The initial value is 1.
See \%\f3glPushMatrix\fP.
.TP
\%\f3GL_UNPACK_ALIGNMENT\fP
\f2params\fP returns one value,
the byte alignment used for reading pixel data from memory. The initial
value is 4. 
See \%\f3glPixelStore\fP.
.TP
\%\f3GL_UNPACK_IMAGE_HEIGHT\fP
\f2params\fP returns one value,
the image height used for reading pixel data from memory.  The initial
is 0.
See \%\f3glPixelStore\fP.
.TP
\%\f3GL_UNPACK_LSB_FIRST\fP
\f2params\fP returns a single boolean value indicating whether single-bit
pixels being read from memory are read first from the least significant
bit of each unsigned byte. The initial value is \%\f3GL_FALSE\fP. 
See \%\f3glPixelStore\fP.
.TP
\%\f3GL_UNPACK_ROW_LENGTH\fP
\f2params\fP returns one value,
the row length used for reading pixel data from memory. The initial value
is 0. 
See \%\f3glPixelStore\fP.
.TP
\%\f3GL_UNPACK_SKIP_IMAGES\fP
\f2params\fP returns one value,
the number of pixel images skipped before the first pixel is read
from memory. The initial value is 0. 
See \%\f3glPixelStore\fP.
.TP
\%\f3GL_UNPACK_SKIP_PIXELS\fP
\f2params\fP returns one value,
the number of pixel locations skipped before the first pixel is read
from memory. The initial value is 0. 
See \%\f3glPixelStore\fP.
.TP
\%\f3GL_UNPACK_SKIP_ROWS\fP
\f2params\fP returns one value,
the number of rows of pixel locations skipped before the first pixel is read
from memory. The initial value is 0. 
See \%\f3glPixelStore\fP.
.TP
\%\f3GL_UNPACK_SWAP_BYTES\fP
\f2params\fP returns a single boolean value indicating whether the bytes of
two-byte and four-byte pixel indices and components are swapped after being
read from memory. The initial value is \%\f3GL_FALSE\fP. 
See \%\f3glPixelStore\fP.
.TP
\%\f3GL_VERTEX_ARRAY\fP
\f2params\fP returns a single boolean value indicating whether the vertex
array is enabled. The initial value is \%\f3GL_FALSE\fP.
See \%\f3glVertexPointer\fP.
.TP
\%\f3GL_VERTEX_ARRAY_SIZE\fP
\f2params\fP returns one value,
the number of coordinates per vertex in the vertex array. The initial
value is 4.
See \%\f3glVertexPointer\fP.
.TP
\%\f3GL_VERTEX_ARRAY_STRIDE\fP
\f2params\fP returns one value,
the byte offset between consecutive vertexes in the vertex
array. The initial value is 0. 
See \%\f3glVertexPointer\fP.
.TP
\%\f3GL_VERTEX_ARRAY_TYPE\fP
\f2params\fP returns one value,
the data type of each coordinate in the vertex array. The initial value is
\%\f3GL_FLOAT\fP. 
See \%\f3glVertexPointer\fP.
.TP
\%\f3GL_VIEWPORT\fP
\f2params\fP returns four values:
the $x$ and $y$ window coordinates of the viewport,
followed by its width and height. 
Initially the $x$ and $y$ window coordinates are both set to 0,
and the width and height are set to the width and height of the window into
which the GL will do its rendering.
See \%\f3glViewport\fP.
.TP
\%\f3GL_ZOOM_X\fP
\f2params\fP returns one value,
the $x$ pixel zoom factor. The initial value is 1. 
See \%\f3glPixelZoom\fP.
.TP
\%\f3GL_ZOOM_Y\fP
\f2params\fP returns one value,
the $y$ pixel zoom factor. The initial value is 1.
See \%\f3glPixelZoom\fP.
.P
Many of the boolean parameters can also be queried more easily using
\%\f3glIsEnabled\fP.
.SH NOTES
\%\f3GL_COLOR_LOGIC_OP\fP, 
\%\f3GL_COLOR_ARRAY\fP,
\%\f3GL_COLOR_ARRAY_SIZE\fP,
\%\f3GL_COLOR_ARRAY_STRIDE\fP,
\%\f3GL_COLOR_ARRAY_TYPE\fP,
\%\f3GL_EDGE_FLAG_ARRAY\fP,
\%\f3GL_EDGE_FLAG_ARRAY_STRIDE\fP,
\%\f3GL_INDEX_ARRAY\fP,
\%\f3GL_INDEX_ARRAY_STRIDE\fP,
\%\f3GL_INDEX_ARRAY_TYPE\fP,
\%\f3GL_INDEX_LOGIC_OP\fP,
\%\f3GL_NORMAL_ARRAY\fP,
\%\f3GL_NORMAL_ARRAY_STRIDE\fP,
\%\f3GL_NORMAL_ARRAY_TYPE\fP,
\%\f3GL_POLYGON_OFFSET_UNITS\fP,  
\%\f3GL_POLYGON_OFFSET_FACTOR\fP,
\%\f3GL_POLYGON_OFFSET_FILL\fP,  
\%\f3GL_POLYGON_OFFSET_LINE\fP,  
\%\f3GL_POLYGON_OFFSET_POINT\fP,
\%\f3GL_TEXTURE_COORD_ARRAY\fP,
\%\f3GL_TEXTURE_COORD_ARRAY_SIZE\fP,
\%\f3GL_TEXTURE_COORD_ARRAY_STRIDE\fP,
\%\f3GL_TEXTURE_COORD_ARRAY_TYPE\fP,
\%\f3GL_VERTEX_ARRAY\fP,
\%\f3GL_VERTEX_ARRAY_SIZE\fP,
\%\f3GL_VERTEX_ARRAY_STRIDE\fP, and
\%\f3GL_VERTEX_ARRAY_TYPE\fP
are available only if the GL version is 1.1 or greater.  
.P
\%\f3GL_ALIASED_POINT_SIZE_RANGE\fP,
\%\f3GL_ALIASED_POINT_SIZE_GRANULARITY\fP,
\%\f3GL_FEEDBACK_BUFFER_SIZE\fP,
\%\f3GL_FEEDBACK_BUFFER_TYPE\fP,
\%\f3GL_LIGHT_MODEL_AMBIENT\fP,
\%\f3GL_LIGHT_MODEL_COLOR_CONTROL\fP,
\%\f3GL_MAX_3D_TEXTURE_SIZE\fP,
\%\f3GL_MAX_ELEMENTS_INDICES\fP,
\%\f3GL_MAX_ELEMENTS_VERTICES\fP,
\%\f3GL_PACK_IMAGE_HEIGHT\fP,
\%\f3GL_PACK_SKIP_IMAGES\fP,
\%\f3GL_RESCALE_NORMAL\fP,
\%\f3GL_SELECTION_BUFFER_SIZE\fP,
\%\f3GL_SMOOTH_LINE_WIDTH_GRANULARITY\fP,
\%\f3GL_SMOOTH_LINE_WIDTH_RANGE\fP,
\%\f3GL_SMOOTH_POINT_SIZE_GRANULARITY\fP,
\%\f3GL_SMOOTH_POINT_SIZE_RANGE\fP,
\%\f3GL_TEXTURE_3D\fP, 
\%\f3GL_TEXTURE_BINDING_3D\fP,
\%\f3GL_UNPACK_IMAGE_HEIGHT\fP, and
\%\f3GL_UNPACK_SKIP_IMAGES\fP
are available only if the GL version is 1.2 or greater.  
.P
\%\f3GL_LINE_WIDTH_GRANULARITY\fP was deprecated in GL version 1.2.  Its
functionality was replaced by \%\f3GL_SMOOTH_LINE_WIDTH_GRANULARITY\fP.
.P
\%\f3GL_LINE_WIDTH_RANGE\fP was deprecated in GL version 1.2.  Its
functionality was replaced by \%\f3GL_SMOOTH_LINE_WIDTH_RANGE\fP.
.P
\%\f3GL_POINT_SIZE_GRANULARITY\fP was deprecated in GL version 1.2.  Its
functionality was replaced by \%\f3GL_SMOOTH_POINT_SIZE_GRANULARITY\fP.
.P
\%\f3GL_POINT_SIZE_RANGE\fP was deprecated in GL version 1.2.  Its
functionality was replaced by \%\f3GL_SMOOTH_POINT_SIZE_RANGE\fP.
.P
\%\f3GL_BLEND_COLOR\fP,
\%\f3GL_BLEND_EQUATION\fP,
\%\f3GL_COLOR_MATRIX\fP,
\%\f3GL_COLOR_MATRIX_STACK_DEPTH\fP,
\%\f3GL_COLOR_TABLE\fP,
\%\f3GL_CONVOLUTION_1D\fP,
\%\f3GL_CONVOLUTION_2D\fP,
\%\f3GL_HISTOGRAM\fP,
\%\f3GL_MAX_COLOR_MATRIX_STACK_DEPTH\fP,
\%\f3GL_MINMAX\fP,
\%\f3GL_POST_COLOR_MATRIX_COLOR_TABLE\fP,
\%\f3GL_POST_COLOR_MATRIX_RED_BIAS\fP,
\%\f3GL_POST_COLOR_MATRIX_GREEN_BIAS\fP,
\%\f3GL_POST_COLOR_MATRIX_BLUE_BIAS\fP,
\%\f3GL_POST_COLOR_MATRIX_ALPHA_BIAS\fP,
\%\f3GL_POST_COLOR_MATRIX_RED_SCALE\fP,
\%\f3GL_POST_COLOR_MATRIX_GREEN_SCALE\fP,
\%\f3GL_POST_COLOR_MATRIX_BLUE_SCALE\fP,
\%\f3GL_POST_COLOR_MATRIX_ALPHA_SCALE\fP,
\%\f3GL_POST_CONVOLUTION_COLOR_TABLE\fP,
\%\f3GL_POST_CONVOLUTION_RED_BIAS\fP,
\%\f3GL_POST_CONVOLUTION_GREEN_BIAS\fP,
\%\f3GL_POST_CONVOLUTION_BLUE_BIAS\fP,
\%\f3GL_POST_CONVOLUTION_ALPHA_BIAS\fP,
\%\f3GL_POST_CONVOLUTION_RED_SCALE\fP,
\%\f3GL_POST_CONVOLUTION_GREEN_SCALE\fP,
\%\f3GL_POST_CONVOLUTION_BLUE_SCALE\fP,
\%\f3GL_POST_CONVOLUTION_ALPHA_SCALE\fP, and
\%\f3GL_SEPARABLE_2D\fP
are available only if \%\f3GL_ARB_imaging\fP is returned from \%\f3glGet\fP
when called with the argument \%\f3GL_EXTENSIONS\fP.
.P
\%\f3GL_ACTIVE_TEXTURE_ARB\fP,
\%\f3GL_CLIENT_ACTIVE_TEXTURE_ARB\fP, and
\%\f3GL_MAX_TEXTURE_UNITS_ARB\fP are available only if
\%\f3GL_ARB_multitexture\fP is returned from \%\f3glGet\fP when called with the
argument \%\f3GL_EXTENSIONS\fP.
.P
When the \%\f3GL_ARB_multitexture\fP extension is supported, the following
parameters return the associated value for the active texture unit:
\%\f3GL_CURRENT_RASTER_TEXTURE_COORDS\fP,
\%\f3GL_TEXTURE_1D\fP, \%\f3GL_TEXTURE_BINDING_1D\fP,
\%\f3GL_TEXTURE_2D\fP, \%\f3GL_TEXTURE_BINDING_2D\fP,
\%\f3GL_TEXTURE_3D\fP, \%\f3GL_TEXTURE_BINDING_3D\fP,
\%\f3GL_TEXTURE_GEN_S\fP,
\%\f3GL_TEXTURE_GEN_T\fP,
\%\f3GL_TEXTURE_GEN_R\fP,
\%\f3GL_TEXTURE_GEN_Q\fP,
\%\f3GL_TEXTURE_MATRIX\fP, and
\%\f3GL_TEXTURE_STACK_DEPTH\fP.
Likewise, the following parameters return the associated value for the
active client texture unit:
\%\f3GL_TEXTURE_COORD_ARRAY\fP,
\%\f3GL_TEXTURE_COORD_ARRAY_SIZE\fP,
\%\f3GL_TEXTURE_COORD_ARRAY_STRIDE\fP,
\%\f3GL_TEXTURE_COORD_ARRAY_TYPE\fP.
.SH ERRORS
\%\f3GL_INVALID_ENUM\fP is generated if \f2pname\fP is not an accepted value.
.P
\%\f3GL_INVALID_OPERATION\fP is generated if \%\f3glGet\fP
is executed between the execution of \%\f3glBegin\fP
and the corresponding execution of \%\f3glEnd\fP.
.P
.SH SEE ALSO
\%\f3glGetClipPlane\fP,
\%\f3glGetColorTable\fP,
\%\f3glGetColorTableParameter\fP,
\%\f3glGetConvolutionFilter\fP,
\%\f3glGetConvolutionParameter\fP,
\%\f3glGetError\fP,
\%\f3glGetHistogram\fP,
\%\f3glGetHistogramParameter\fP,
\%\f3glGetLight\fP,
\%\f3glGetMap\fP,
\%\f3glGetMaterial\fP,
\%\f3glGetMinmax\fP,
\%\f3glGetMinmaxParameter\fP,
\%\f3glGetPixelMap\fP,
\%\f3glGetPointerv\fP,
\%\f3glGetPolygonStipple\fP,
\%\f3glGetSeparableFilter\fP,
\%\f3glGetString\fP,
\%\f3glGetTexEnv\fP,
\%\f3glGetTexGen\fP,
\%\f3glGetTexImage\fP,
\%\f3glGetTexLevelParameter\fP,
\%\f3glGetTexParameter\fP,
\%\f3glIsEnabled\fP
@


1.1
log
@Initial revision
@
text
@d1 2
d6 40
a45 8
.ds Dp Feb 04 10:50
.ds Dm 3 Apr  5  20
.ds Xs 26768    59
_header(Get,return the value or values of a selected parameter)
_names(GetBooleanv)
_names(GetDoublev)
_names(GetFloatv)
_names(GetIntegerv)
d50 2
a51 1
_phead(_param1)
d54 2
a55 1
_phead(_param2)
d59 2
a60 2
_param1 is a symbolic constant indicating the state variable to be returned, 
and _param2 is a pointer to an array of the indicated type in 
d63 1
a63 1
Type conversion is performed if _param2 has a different type than 
d65 1
a65 1
If _cmnd(GetBooleanv) is called,
d70 1
a70 1
If _cmnd(GetIntegerv) is called, boolean values are returned as
d76 1
a76 1
If _cmnd(GetFloatv) or _cmnd(GetDoublev) is called,
d80 1
a80 1
The following symbolic constants are accepted by _param1:
d83 1
a83 1
_param2 returns one value,
d87 1
a87 1
_param2 returns one value,
d91 1
a91 1
_param2 returns four values:
d99 1
a99 1
See _cmnd(ClearAccum).
d102 1
a102 1
_param2 returns one value,
d106 1
a106 1
_param2 returns one value,
d110 1
a110 1
_param2 returns a single value indicating the active multitexture unit.
d112 1
a112 1
See _cmnd(ActiveTextureARB).
d115 1
a115 1
_param2 returns two values, 
d119 1
a119 1
_param2 returns two values, 
d123 1
a123 1
_param2 returns one value,
d125 1
a125 1
See _cmnd(PixelTransfer).
d128 1
a128 1
_param2 returns one value,
d132 1
a132 1
_param2 returns one value,
d134 1
a134 1
See _cmnd(PixelTransfer).
d137 1
a137 1
_param2 returns a single boolean value indicating whether alpha testing
d139 1
a139 1
See _cmnd(AlphaFunc).
d142 1
a142 1
_param2 returns one value,
d145 1
a145 1
See _cmnd(AlphaFunc).
d148 1
a148 1
_param2 returns one value,
d150 1
a150 1
See _cmnd(AlphaFunc).
d158 1
a158 1
_param2 returns one value,
d162 1
a162 1
See _cmnd(PushAttrib).
d165 1
a165 1
_param2 returns a single boolean value indicating whether 2D map evaluation
d167 1
a167 1
See _cmnd(Map2).
d170 1
a170 1
_param2 returns one value,
d174 1
a174 1
_param2 returns a single boolean value indicating whether blending is
d176 1
a176 1
See _cmnd(BlendFunc).
d179 1
a179 1
_param2 returns four values,
d182 1
a182 1
See _cmnd(BlendColor).
d185 1
a185 1
_param2 returns one value,
d188 1
a188 1
See _cmnd(BlendFunc).
d191 1
a191 1
_param2 returns one value, a symbolic constant indicating whether
d193 1
a193 1
\%\f3GL_MAX\fP. See _cmnd(BlendEquation).
d196 1
a196 1
_param2 returns one value,
d199 1
a199 1
See _cmnd(BlendFunc).
d202 1
a202 1
_param2 returns one value,
d205 1
a205 1
_cmnd(PixelTransfer).
d208 1
a208 1
_param2 returns one value,
d212 1
a212 1
_param2 returns one value,
d215 1
a215 1
_cmnd(PixelTransfer).
d218 1
a218 1
_param2 returns a single integer value indicating the current client active
d220 1
a220 1
See _cmnd(ClientActiveTextureARB).
d223 1
a223 1
_param2 returns one value indicating the depth of the
d225 1
a225 1
See _cmnd(PushClientAttrib).
d228 1
a228 1
_param2 returns a single boolean value indicating whether the specified
d230 1
a230 1
See _cmnd(ClipPlane).
d233 2
a234 2
_param2 returns a single boolean value indicating whether the color array is enabled. The initial value is \%\f3GL_FALSE\fP. 
See _cmnd(ColorPointer).
d237 1
a237 1
_param2 returns one value,
d239 1
a239 1
is 4. See _cmnd(ColorPointer). 
d242 1
a242 1
_param2 returns one value,
d245 1
a245 1
See _cmnd(ColorPointer).
d248 1
a248 1
_param2 returns one value,
d250 1
a250 1
is \%\f3GL_FLOAT\fP. See _cmnd(ColorPointer). 
d253 1
a253 1
_param2 returns four values:
d261 1
a261 1
See _cmnd(ClearColor).
d264 1
a264 1
_param2 returns a single boolean value indicating whether a fragment's
d267 1
a267 1
See _cmnd(LogicOp).
d270 1
a270 1
_param2 returns a single boolean value indicating whether one or more
d273 1
a273 1
See _cmnd(ColorMaterial).
d276 1
a276 1
_param2 returns one value,
d279 1
a279 1
See _cmnd(ColorMaterial).
d282 1
a282 1
_param2 returns one value,
d286 1
a286 1
See _cmnd(ColorMaterial).
d289 1
a289 1
_param2 returns sixteen values:
d291 1
a291 1
this matrix is the identity matrix. See _cmnd(PushMatrix).
d294 1
a294 1
_param2 returns one value,
d297 1
a297 1
See _cmnd(PushMatrix).
d300 1
a300 1
_param2 returns a single boolean value indicating whether the color table
d302 1
a302 1
See _cmnd(ColorTable).
d305 1
a305 1
_param2 returns four boolean values:
d309 1
a309 1
See _cmnd(ColorMask).
d312 1
a312 1
_param2 returns a single boolean value indicating whether 1D convolution
d314 1
a314 1
See _cmnd(ConvolutionFilter1D).
d317 1
a317 1
_param2 returns a single boolean value indicating whether 2D convolution
d319 1
a319 1
See _cmnd(ConvolutionFilter2D).
d322 1
a322 1
_param2 returns a single boolean value indicating whether polygon culling
d324 1
a324 1
See _cmnd(CullFace).
d327 1
a327 1
_param2 returns one value,
d330 1
a330 1
See _cmnd(CullFace).
d333 1
a333 1
_param2 returns four values:
d340 1
a340 1
See _cmnd(Color). The initial value is (1, 1, 1, 1). 
d343 1
a343 1
_param2 returns one value,
d345 1
a345 1
See _cmnd(Index).
d348 1
a348 1
_param2 returns three values:
d355 1
a355 1
The initial value is (0, 0, 1). See _cmnd(Normal).
d358 1
a358 1
_param2 returns four values:
d366 1
a366 1
See _cmnd(RasterPos).
d369 1
a369 1
_param2 returns one value,
d372 1
a372 1
See _cmnd(RasterPos).
d375 1
a375 1
_param2 returns one value,
d377 1
a377 1
See _cmnd(RasterPos).
d380 1
a380 1
_param2 returns four values:
d385 1
a385 1
See _cmnd(RasterPos).
d388 1
a388 1
_param2 returns a single boolean value indicating whether the current
d390 1
a390 1
See _cmnd(RasterPos).
d393 1
a393 1
_param2 returns four values:
d396 1
a396 1
See _cmnd(RasterPos) and _cmnd(TexCoord).
d399 1
a399 1
_param2 returns four values:
d403 1
a403 1
_cmnd(TexCoord).
d406 1
a406 1
_param2 returns one value,
d408 1
a408 1
See _cmnd(PixelTransfer).
d411 1
a411 1
_param2 returns one value,
d415 1
a415 1
_param2 returns one value,
d423 1
a423 1
See _cmnd(ClearDepth). 
d426 1
a426 1
_param2 returns one value,
d429 1
a429 1
See _cmnd(DepthFunc).
d432 1
a432 1
_param2 returns two values:
d440 1
a440 1
See _cmnd(DepthRange).
d443 1
a443 1
_param2 returns one value,
d445 1
a445 1
See _cmnd(PixelTransfer).
d448 1
a448 1
_param2 returns a single boolean value indicating whether depth testing
d450 1
a450 1
See _cmnd(DepthFunc) and _cmnd(DepthRange).
d453 1
a453 1
_param2 returns a single boolean value indicating if the depth buffer
d455 1
a455 1
See _cmnd(DepthMask).
d458 1
a458 1
_param2 returns a single boolean value indicating whether dithering of
d462 1
a462 1
_param2 returns a single boolean value indicating whether double buffering
d466 1
a466 1
_param2 returns one value,
d468 1
a468 1
See _cmnd(DrawBuffer). The initial value is \%\f3GL_BACK\fP if there
d472 1
a472 1
_param2 returns a single boolean value indicating whether the current
d474 1
a474 1
See _cmnd(EdgeFlag). 
d477 1
a477 1
_param2 returns a single boolean value indicating whether the edge
d479 1
a479 1
See _cmnd(EdgeFlagPointer).
d482 1
a482 1
_param2 returns one value,
d485 1
a485 1
See _cmnd(EdgeFlagPointer).
d488 2
a489 2
_param2 returns one value, the size of the feedback buffer.  See
_cmnd(FeedbackBuffer).
d492 2
a493 2
_param2 returns one value, the type of the feedback buffer.  See
_cmnd(FeedbackBuffer).
d496 1
a496 1
_param2 returns a single boolean value indicating whether fogging is
d498 1
a498 1
See _cmnd(Fog).
d501 1
a501 1
_param2 returns four values:
d509 1
a509 1
See _cmnd(Fog).
d512 1
a512 1
_param2 returns one value,
d514 1
a514 1
See _cmnd(Fog).
d517 1
a517 1
_param2 returns one value,
d519 1
a519 1
See _cmnd(Fog).
d522 1
a522 1
_param2 returns one value,
d525 1
a525 1
See _cmnd(Hint).
d528 1
a528 1
_param2 returns one value,
d530 1
a530 1
See _cmnd(Fog).
d533 1
a533 1
_param2 returns one value,
d536 1
a536 1
See _cmnd(Fog).
d539 1
a539 1
_param2 returns one value,
d541 1
a541 1
See _cmnd(Fog).
d544 1
a544 1
_param2 returns one value,
d548 1
a548 1
See _cmnd(FrontFace).
d551 1
a551 1
_param2 returns one value,
d555 1
a555 1
_param2 returns one value,
d559 1
a559 1
_param2 returns one value,
d561 1
a561 1
See _cmnd(PixelTransfer).
d564 1
a564 1
_param2 returns a single boolean value indicating whether histogram is
d566 1
a566 1
See _cmnd(Histogram).
d569 1
a569 1
_param2 returns a single boolean value indicating whether the color
d571 1
a571 1
See _cmnd(IndexPointer).
d574 1
a574 1
_param2 returns one value,
d577 1
a577 1
See _cmnd(IndexPointer).
d580 1
a580 1
_param2 returns one value,
d583 1
a583 1
See _cmnd(IndexPointer).
d586 1
a586 1
_param2 returns one value,
d590 1
a590 1
_param2 returns one value,
d593 1
a593 1
See _cmnd(ClearIndex).
d596 1
a596 1
_param2 returns a single boolean value indicating whether a fragment's index
d599 1
a599 1
See _cmnd(LogicOp).
d602 1
a602 1
_param2 returns a single boolean value indicating whether the GL is in
d606 1
a606 1
_param2 returns one value,
d609 1
a609 1
See _cmnd(PixelTransfer).
d612 1
a612 1
_param2 returns one value,
d615 1
a615 1
See _cmnd(PixelTransfer).
d618 1
a618 1
_param2 returns one value,
d621 1
a621 1
See _cmnd(IndexMask).
d624 1
a624 1
_param2 returns a single boolean value indicating whether the specified
d626 1
a626 1
See _cmnd(Light) and _cmnd(LightModel).
d629 1
a629 1
_param2 returns a single boolean value indicating whether lighting is
d631 1
a631 1
See _cmnd(LightModel).
d634 1
a634 1
_param2 returns four values:
d643 1
a643 1
See _cmnd(LightModel).
d646 1
a646 1
_param2 returns single enumerated value indicating whether specular
d651 1
a651 1
_param2 returns a single boolean value indicating whether specular reflection
d654 1
a654 1
See _cmnd(LightModel).
d657 1
a657 1
_param2 returns a single boolean value indicating whether separate materials
d660 1
a660 1
See _cmnd(LightModel).
d663 1
a663 1
_param2 returns a single boolean value indicating whether antialiasing of
d665 1
a665 1
See _cmnd(LineWidth).
d668 1
a668 1
_param2 returns one value,
d671 1
a671 1
See _cmnd(Hint).
d674 1
a674 1
_param2 returns a single boolean value indicating whether stippling of lines
d676 1
a676 1
See _cmnd(LineStipple).
d679 1
a679 1
_param2 returns one value,
d681 1
a681 1
See _cmnd(LineStipple).
d684 1
a684 1
_param2 returns one value,
d686 1
a686 1
See _cmnd(LineStipple).
d689 2
a690 2
_param2 returns one value,
the line width as specified with _cmnd(LineWidth). The initial value is
d694 1
a694 1
_param2 returns one value,
d696 1
a696 1
See _cmnd(LineWidth).
d699 1
a699 1
_param2 returns two values:
d702 1
a702 1
See _cmnd(LineWidth).
d705 1
a705 1
_param2 returns one value,
d707 2
a708 2
_cmnd(CallLists). The initial value is 0. 
See _cmnd(ListBase).
d711 1
a711 1
_param2 returns one value,
d715 1
a715 1
See _cmnd(NewList).
d718 1
a718 1
_param2 returns one value,
d721 1
a721 1
See _cmnd(NewList).
d724 1
a724 1
_param2 returns one value,
d727 1
a727 1
See _cmnd(LogicOp).
d730 1
a730 1
_param2 returns a single boolean value indicating whether
d732 1
a732 1
See _cmnd(Map1).
d735 1
a735 1
_param2 returns two values:
d737 1
a737 1
See _cmnd(MapGrid).
d740 1
a740 1
_param2 returns one value,
d743 1
a743 1
See _cmnd(MapGrid).
d746 1
a746 1
_param2 returns a single boolean value indicating whether
d748 1
a748 1
See _cmnd(Map1).
d751 1
a751 1
_param2 returns a single boolean value indicating whether
d753 1
a753 1
See _cmnd(Map1).
d756 1
a756 1
_param2 returns a single boolean value indicating whether
d759 1
a759 1
See _cmnd(Map1).
d762 1
a762 1
_param2 returns a single boolean value indicating whether
d765 1
a765 1
See _cmnd(Map1).
d768 1
a768 1
_param2 returns a single boolean value indicating whether
d771 1
a771 1
See _cmnd(Map1).
d774 1
a774 1
_param2 returns a single boolean value indicating whether
d777 1
a777 1
See _cmnd(Map1).
d780 1
a780 1
_param2 returns a single boolean value indicating whether
d783 1
a783 1
See _cmnd(Map1).
d786 1
a786 1
_param2 returns a single boolean value indicating whether
d789 1
a789 1
See _cmnd(Map1).
d792 1
a792 1
_param2 returns a single boolean value indicating whether
d794 1
a794 1
See _cmnd(Map2).
d797 1
a797 1
_param2 returns four values:
d800 1
a800 1
See _cmnd(MapGrid).
d803 1
a803 1
_param2 returns two values:
d806 1
a806 1
See _cmnd(MapGrid).
d809 1
a809 1
_param2 returns a single boolean value indicating whether
d811 1
a811 1
See _cmnd(Map2).
d814 1
a814 1
_param2 returns a single boolean value indicating whether
d816 1
a816 1
See _cmnd(Map2).
d819 1
a819 1
_param2 returns a single boolean value indicating whether
d822 1
a822 1
See _cmnd(Map2).
d825 1
a825 1
_param2 returns a single boolean value indicating whether
d828 1
a828 1
See _cmnd(Map2).
d831 1
a831 1
_param2 returns a single boolean value indicating whether
d834 1
a834 1
See _cmnd(Map2).
d837 1
a837 1
_param2 returns a single boolean value indicating whether
d840 1
a840 1
See _cmnd(Map2).
d843 1
a843 1
_param2 returns a single boolean value indicating whether
d846 1
a846 1
See _cmnd(Map2).
d849 1
a849 1
_param2 returns a single boolean value indicating whether
d852 1
a852 1
See _cmnd(Map2).
d855 1
a855 1
_param2 returns a single boolean value indicating if colors and
d858 1
a858 1
See _cmnd(PixelTransfer).
d861 1
a861 1
_param2 returns a single boolean value indicating if stencil indices
d864 1
a864 1
See _cmnd(PixelTransfer).
d867 1
a867 1
_param2 returns one value,
d870 1
a870 1
See _cmnd(MatrixMode).
d873 1
a873 1
_param2 returns one value,
d877 1
a877 1
See _cmnd(TexImage3D).
d880 1
a880 1
_param2 returns one value indicating the maximum supported depth
d882 1
a882 1
See _cmnd(PushClientAttrib).
d885 1
a885 1
_param2 returns one value,
d887 1
a887 1
See _cmnd(PushAttrib).
d890 1
a890 1
_param2 returns one value,
d892 1
a892 1
See _cmnd(ClipPlane).
d895 1
a895 1
_param2 returns one value, the maximum supported depth of the color matrix
d897 1
a897 1
See _cmnd(PushMatrix).
d900 2
a901 2
_param2 returns one value,
the recommended maximum number of vertex array indices.  See _cmnd(DrawRangeElements).
d904 2
a905 2
_param2 returns one value,
the recommended maximum number of vertex array vertices.  See _cmnd(DrawRangeElements).
d908 1
a908 1
_param2 returns one value,
d911 1
a911 1
See _cmnd(Map1) and _cmnd(Map2).
d914 1
a914 1
_param2 returns one value,
d916 1
a916 1
See _cmnd(Light).
d919 1
a919 1
_param2 returns one value,
d922 1
a922 1
See _cmnd(CallList).
d925 1
a925 1
_param2 returns one value,
d928 1
a928 1
See _cmnd(PushMatrix).
d931 1
a931 1
_param2 returns one value,
d933 1
a933 1
See _cmnd(PushName).
d936 2
a937 2
_param2 returns one value,
the maximum supported size of a _cmnd(PixelMap) lookup table. 
d939 1
a939 1
See _cmnd(PixelMap).
d942 1
a942 1
_param2 returns one value,
d944 1
a944 1
See _cmnd(PushMatrix).
d947 1
a947 1
_param2 returns one value.
d953 1
a953 1
See _cmnd(TexImage1D) and _cmnd(TexImage2D).
d956 1
a956 1
_param2 returns one value,
d958 1
a958 1
See _cmnd(PushMatrix).
d961 1
a961 1
_param2 returns a single value indicating the number of texture units
d963 1
a963 1
See _cmnd(ActiveTextureARB).
d966 1
a966 1
_param2 returns two values:
d970 1
a970 1
See _cmnd(Viewport).
d973 1
a973 1
_param2 returns a single boolean value indicating whether pixel minmax
d975 1
a975 1
See _cmnd(Minmax).
d978 1
a978 1
_param2 returns sixteen values:
d980 1
a980 1
this matrix is the identity matrix. See _cmnd(PushMatrix).
d983 1
a983 1
_param2 returns one value,
d986 1
a986 1
See _cmnd(PushMatrix).
d989 1
a989 1
_param2 returns one value,
d991 1
a991 1
See _cmnd(PushName).
d994 1
a994 1
_param2 returns a single boolean value, indicating whether the normal
d996 1
a996 1
See _cmnd(NormalPointer).
d999 1
a999 1
_param2 returns one value,
d1002 1
a1002 1
See _cmnd(NormalPointer).
d1005 1
a1005 1
_param2 returns one value,
d1008 1
a1008 1
See _cmnd(NormalPointer).
d1011 1
a1011 1
_param2 returns a single boolean value indicating whether normals are
d1014 1
a1014 1
See _cmnd(Normal).
d1017 1
a1017 1
_param2 returns one value,
d1020 1
a1020 1
See _cmnd(PixelStore).
d1023 1
a1023 1
_param2 returns one value,
d1026 1
a1026 1
See _cmnd(PixelStore).
d1029 1
a1029 1
_param2 returns a single boolean value indicating whether single-bit
d1032 1
a1032 1
See _cmnd(PixelStore).
d1035 1
a1035 1
_param2 returns one value,
d1038 1
a1038 1
See _cmnd(PixelStore).
d1041 1
a1041 1
_param2 returns one value,
d1044 1
a1044 1
See _cmnd(PixelStore).
d1047 1
a1047 1
_param2 returns one value,
d1050 1
a1050 1
See _cmnd(PixelStore).
d1053 1
a1053 1
_param2 returns one value,
d1056 1
a1056 1
See _cmnd(PixelStore).
d1059 1
a1059 1
_param2 returns a single boolean value indicating whether the bytes of
d1062 1
a1062 1
See _cmnd(PixelStore).
d1065 1
a1065 1
_param2 returns one value,
d1068 1
a1068 1
See _cmnd(Hint).
d1071 1
a1071 1
_param2 returns one value,
d1074 1
a1074 1
See _cmnd(PixelMap).
d1077 1
a1077 1
_param2 returns one value,
d1080 1
a1080 1
See _cmnd(PixelMap).
d1083 1
a1083 1
_param2 returns one value,
d1086 1
a1086 1
See _cmnd(PixelMap).
d1089 1
a1089 1
_param2 returns one value,
d1092 1
a1092 1
See _cmnd(PixelMap).
d1095 1
a1095 1
_param2 returns one value,
d1098 1
a1098 1
See _cmnd(PixelMap).
d1101 1
a1101 1
_param2 returns one value,
d1104 1
a1104 1
See _cmnd(PixelMap).
d1107 1
a1107 1
_param2 returns one value,
d1110 1
a1110 1
See _cmnd(PixelMap).
d1113 1
a1113 1
_param2 returns one value,
d1116 1
a1116 1
See _cmnd(PixelMap).
d1119 1
a1119 1
_param2 returns one value,
d1122 1
a1122 1
See _cmnd(PixelMap).
d1125 1
a1125 1
_param2 returns one value,
d1128 1
a1128 1
See _cmnd(PixelMap).
d1131 2
a1132 2
_param2 returns one value,
the point size as specified by _cmnd(PointSize). The initial value is 1. 
d1135 1
a1135 1
_param2 returns one value,
d1137 1
a1137 1
See _cmnd(PointSize).
d1140 1
a1140 1
_param2 returns two values:
d1144 1
a1144 1
See _cmnd(PointSize).
d1147 1
a1147 1
_param2 returns a single boolean value indicating whether antialiasing of
d1149 1
a1149 1
See _cmnd(PointSize).
d1152 1
a1152 1
_param2 returns one value,
d1155 1
a1155 1
See _cmnd(Hint).
d1158 1
a1158 1
_param2 returns two values:
d1162 1
a1162 1
See _cmnd(PolygonMode).
d1165 1
a1165 1
_param2 returns one value,
d1169 1
a1169 1
See _cmnd(PolygonOffset).
d1172 1
a1172 1
_param2 returns one value.
d1176 1
a1176 1
See _cmnd(PolygonOffset).
d1179 1
a1179 1
_param2 returns a single boolean value indicating whether polygon offset
d1181 1
a1181 1
See _cmnd(PolygonOffset).
d1184 1
a1184 1
_param2 returns a single boolean value indicating whether polygon offset
d1186 1
a1186 1
See _cmnd(PolygonOffset).
d1189 1
a1189 1
_param2 returns a single boolean value indicating whether polygon offset
d1191 1
a1191 1
See _cmnd(PolygonOffset).
d1194 1
a1194 1
_param2 returns a single boolean value indicating whether antialiasing of
d1196 1
a1196 1
See _cmnd(PolygonMode).
d1199 1
a1199 1
_param2 returns one value,
d1202 1
a1202 1
See _cmnd(Hint).
d1205 1
a1205 1
_param2 returns a single boolean value indicating whether polygon
d1207 1
a1207 1
See _cmnd(PolygonStipple).
d1210 1
a1210 1
_param2 returns a single boolean value indicating whether post color
d1213 1
a1213 1
See _cmnd(ColorTable).
d1216 1
a1216 1
_param2 returns one value, the red bias factor applied to RGBA fragments
d1218 1
a1218 1
See _cmnd(PixelTransfer).
d1221 1
a1221 1
_param2 returns one value, the green bias factor applied to RGBA fragments
d1223 1
a1223 1
See _cmnd(PixelTransfer)
d1226 1
a1226 1
_param2 returns one value, the blue bias factor applied to RGBA fragments
d1228 1
a1228 1
See _cmnd(PixelTransfer).
d1231 1
a1231 1
_param2 returns one value, the alpha bias factor applied to RGBA fragments
d1233 1
a1233 1
See _cmnd(PixelTransfer).
d1236 1
a1236 1
_param2 returns one value, the red scale factor applied to RGBA fragments
d1238 1
a1238 1
See _cmnd(PixelTransfer).
d1241 1
a1241 1
_param2 returns one value, the green scale factor applied to RGBA fragments
d1243 1
a1243 1
See _cmnd(PixelTransfer).
d1246 1
a1246 1
_param2 returns one value, the blue scale factor applied to RGBA fragments
d1248 1
a1248 1
See _cmnd(PixelTransfer).
d1251 1
a1251 1
_param2 returns one value, the alpha scale factor applied to RGBA fragments
d1253 1
a1253 1
See _cmnd(PixelTransfer).
d1256 1
a1256 1
_param2 returns a single boolean value indicating whether post convolution
d1258 1
a1258 1
See _cmnd(ColorTable).
d1261 1
a1261 1
_param2 returns one value, the red bias factor applied to RGBA fragments
d1263 1
a1263 1
See _cmnd(PixelTransfer).
d1266 1
a1266 1
_param2 returns one value, the green bias factor applied to RGBA fragments
d1268 1
a1268 1
See _cmnd(PixelTransfer).
d1271 1
a1271 1
_param2 returns one value, the blue bias factor applied to RGBA fragments
d1273 1
a1273 1
See _cmnd(PixelTransfer).
d1276 1
a1276 1
_param2 returns one value, the alpha bias factor applied to RGBA fragments
d1278 1
a1278 1
See _cmnd(PixelTransfer).
d1281 1
a1281 1
_param2 returns one value, the red scale factor applied to RGBA fragments
d1283 1
a1283 1
See _cmnd(PixelTransfer).
d1286 1
a1286 1
_param2 returns one value, the green scale factor applied to RGBA fragments
d1288 1
a1288 1
See _cmnd(PixelTransfer).
d1291 1
a1291 1
_param2 returns one value, the blue scale factor applied to RGBA fragments
d1293 1
a1293 1
See _cmnd(PixelTransfer).
d1296 1
a1296 1
_param2 returns one value, the alpha scale factor applied to RGBA fragments
d1298 1
a1298 1
See _cmnd(PixelTransfer).
d1301 1
a1301 1
_param2 returns sixteen values:
d1304 1
a1304 1
See _cmnd(PushMatrix).
d1307 1
a1307 1
_param2 returns one value,
d1310 1
a1310 1
See _cmnd(PushMatrix).
d1313 1
a1313 1
_param2 returns one value,
d1318 1
a1318 1
_cmnd(ReadPixels) and _cmnd(Accum).
d1321 1
a1321 1
_param2 returns one value,
d1325 1
a1325 1
_param2 returns one value,
d1329 1
a1329 1
_param2 returns one value,
d1331 1
a1331 1
See _cmnd(PixelTransfer).
d1334 1
a1334 1
_param2 returns one value,
d1338 1
a1338 1
See _cmnd(RenderMode).
d1341 1
a1341 1
_param2 returns single boolean value
d1343 1
a1343 1
See _cmnd(Enable).
d1346 1
a1346 1
_param2 returns a single boolean value indicating whether the GL is in RGBA
d1348 1
a1348 1
See _cmnd(Color).
d1351 1
a1351 1
_param2 returns four values:
d1356 1
a1356 1
See _cmnd(Scissor).
d1359 1
a1359 1
_param2 returns a single boolean value indicating whether scissoring is
d1361 1
a1361 1
See _cmnd(Scissor).
d1364 1
a1364 1
_param2 return one value,
d1366 1
a1366 1
See _cmnd(SelectBuffer).
d1369 1
a1369 1
_param2 returns a single boolean value indicating whether 2D separable
d1371 1
a1371 1
See _cmnd(SeparableFilter2D).
d1374 1
a1374 1
_param2 returns one value,
d1377 1
a1377 1
See _cmnd(ShadeModel).
d1380 1
a1380 1
_param2 returns two values,
d1382 1
a1382 1
See _cmnd(LineWidth).
d1385 1
a1385 1
_param2 returns one value,
d1387 1
a1387 1
See _cmnd(LineWidth).
d1390 1
a1390 1
_param2 returns two values,
d1392 1
a1392 1
See _cmnd(PointSize).
d1395 1
a1395 1
_param2 returns one value,
d1397 1
a1397 1
See _cmnd(PointSize).
d1400 1
a1400 1
_param2 returns one value,
d1404 1
a1404 1
_param2 returns one value,
d1407 1
a1407 1
See _cmnd(ClearStencil).
d1410 1
a1410 1
_param2 returns one value,
d1413 1
a1413 1
See _cmnd(StencilOp).
d1416 1
a1416 1
_param2 returns one value,
d1420 1
a1420 1
See _cmnd(StencilFunc).
d1423 1
a1423 1
_param2 returns one value,
d1427 1
a1427 1
See _cmnd(StencilOp).
d1430 1
a1430 1
_param2 returns one value,
d1433 1
a1433 1
See _cmnd(StencilOp).
d1436 1
a1436 1
_param2 returns one value,
d1439 1
a1439 1
See _cmnd(StencilFunc).
d1442 1
a1442 1
_param2 returns a single boolean value indicating whether stencil testing
d1444 1
a1444 1
See _cmnd(StencilFunc) and _cmnd(StencilOp).
d1447 1
a1447 1
_param2 returns one value,
d1450 1
a1450 1
See _cmnd(StencilFunc).
d1453 1
a1453 1
_param2 returns one value,
d1455 1
a1455 1
is all 1's. See _cmnd(StencilMask).
d1458 1
a1458 1
_param2 returns a single boolean value indicating whether stereo buffers
d1462 1
a1462 1
_param2 returns one value,
d1469 1
a1469 1
_param2 returns a single boolean value indicating whether 1D texture
d1471 1
a1471 1
See _cmnd(TexImage1D).
d1474 1
a1474 1
_param2 returns a single value, the name of the texture
d1476 1
a1476 1
See _cmnd(BindTexture).
d1479 1
a1479 1
_param2 returns a single boolean value indicating whether 2D texture
d1481 1
a1481 1
See _cmnd(TexImage2D).
d1484 1
a1484 1
_param2 returns a single value, the name of the texture
d1486 1
a1486 1
See _cmnd(BindTexture).
d1489 1
a1489 1
_param2 returns a single boolean value indicating whether 3D texture
d1491 1
a1491 1
See _cmnd(TexImage3D).
d1494 1
a1494 1
_param2 returns a single value, the name of the texture
d1496 1
a1496 1
See _cmnd(BindTexture).
d1499 1
a1499 1
_param2 returns a single boolean value indicating whether the texture
d1501 1
a1501 1
See _cmnd(TexCoordPointer).
d1504 1
a1504 1
_param2 returns one value,
d1507 1
a1507 1
See _cmnd(TexCoordPointer).
d1510 1
a1510 1
_param2 returns one value,
d1513 1
a1513 1
See _cmnd(TexCoordPointer).
d1516 1
a1516 1
_param2 returns one value,
d1519 1
a1519 1
See _cmnd(TexCoordPointer).
d1522 1
a1522 1
_param2 returns a single boolean value indicating whether automatic generation
d1524 1
a1524 1
See _cmnd(TexGen).
d1527 1
a1527 1
_param2 returns a single boolean value indicating whether automatic generation
d1529 1
a1529 1
See _cmnd(TexGen).
d1532 1
a1532 1
_param2 returns a single boolean value indicating whether automatic generation
d1534 1
a1534 1
See _cmnd(TexGen).
d1537 1
a1537 1
_param2 returns a single boolean value indicating whether automatic generation
d1539 1
a1539 1
See _cmnd(TexGen).
d1542 1
a1542 1
_param2 returns sixteen values:
d1545 1
a1545 1
See _cmnd(PushMatrix).
d1548 1
a1548 1
_param2 returns one value,
d1551 1
a1551 1
See _cmnd(PushMatrix).
d1554 1
a1554 1
_param2 returns one value,
d1557 1
a1557 1
See _cmnd(PixelStore).
d1560 1
a1560 1
_param2 returns one value,
d1563 1
a1563 1
See _cmnd(PixelStore).
d1566 1
a1566 1
_param2 returns a single boolean value indicating whether single-bit
d1569 1
a1569 1
See _cmnd(PixelStore).
d1572 1
a1572 1
_param2 returns one value,
d1575 1
a1575 1
See _cmnd(PixelStore).
d1578 1
a1578 1
_param2 returns one value,
d1581 1
a1581 1
See _cmnd(PixelStore).
d1584 1
a1584 1
_param2 returns one value,
d1587 1
a1587 1
See _cmnd(PixelStore).
d1590 1
a1590 1
_param2 returns one value,
d1593 1
a1593 1
See _cmnd(PixelStore).
d1596 1
a1596 1
_param2 returns a single boolean value indicating whether the bytes of
d1599 1
a1599 1
See _cmnd(PixelStore).
d1602 1
a1602 1
_param2 returns a single boolean value indicating whether the vertex
d1604 1
a1604 1
See _cmnd(VertexPointer).
d1607 1
a1607 1
_param2 returns one value,
d1610 1
a1610 1
See _cmnd(VertexPointer).
d1613 1
a1613 1
_param2 returns one value,
d1616 1
a1616 1
See _cmnd(VertexPointer).
d1619 1
a1619 1
_param2 returns one value,
d1622 1
a1622 1
See _cmnd(VertexPointer).
d1625 1
a1625 1
_param2 returns four values:
d1631 1
a1631 1
See _cmnd(Viewport).
d1634 1
a1634 1
_param2 returns one value,
d1636 1
a1636 1
See _cmnd(PixelZoom).
d1639 1
a1639 1
_param2 returns one value,
d1641 1
a1641 1
See _cmnd(PixelZoom).
d1644 1
a1644 1
_cmnd(IsEnabled).
d1739 1
a1739 1
are available only if \%\f3GL_ARB_imaging\fP is returned from _cmnd(Get)
d1745 1
a1745 1
\%\f3GL_ARB_multitexture\fP is returned from _cmnd(Get) when called with the
d1767 1
a1767 1
\%\f3GL_INVALID_ENUM\fP is generated if _param1 is not an accepted value.
d1769 3
a1771 3
\%\f3GL_INVALID_OPERATION\fP is generated if _cmnd
is executed between the execution of _cmnd(Begin)
and the corresponding execution of _cmnd(End).
d1774 24
a1797 24
_cmnd(GetClipPlane),
_cmnd(GetColorTable),
_cmnd(GetColorTableParameter),
_cmnd(GetConvolutionFilter),
_cmnd(GetConvolutionParameter),
_cmnd(GetError),
_cmnd(GetHistogram),
_cmnd(GetHistogramParameter),
_cmnd(GetLight),
_cmnd(GetMap),
_cmnd(GetMaterial),
_cmnd(GetMinmax),
_cmnd(GetMinmaxParameter),
_cmnd(GetPixelMap),
_cmnd(GetPointerv),
_cmnd(GetPolygonStipple),
_cmnd(GetSeparableFilter),
_cmnd(GetString),
_cmnd(GetTexEnv),
_cmnd(GetTexGen),
_cmnd(GetTexImage),
_cmnd(GetTexLevelParameter),
_cmnd(GetTexParameter),
_cmnd(IsEnabled)
@


1.1.1.1
log
@win32-x11 source tree update March 26, 2001
@
text
@@
