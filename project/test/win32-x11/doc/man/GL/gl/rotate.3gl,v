head	1.2;
access;
symbols
	win32-x11-2001-03-26:1.1.1.1 SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2001.06.03.20.47.14;	author ssiddiqi;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.25.19.36.53;	author ssiddiqi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.03.25.19.36.53;	author ssiddiqi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Win32-X11 update sources check in, June 3, 2001 - ssiddiqi
@
text
@'\"! eqn | mmdoc
'\"macro stdmacro
.ds Vn Version 1.2
.ds Dt 24 September 1999
.ds Re Release 1.2.1
.ds Dp Apr 04 17:39
.ds Dm  Apr  5  200
.ds Xs 49722 9 rotate.gl
.TH GLROTATE 3G
.SH NAME
.B "glRotated, glRotatef
\- multiply the current matrix by a rotation matrix

.SH C SPECIFICATION
void \f3glRotated\fP(
GLdouble \fIangle\fP,
.nf
.ta \w'\f3void \fPglRotated( 'u
	GLdouble \fIx\fP,
	GLdouble \fIy\fP,
	GLdouble \fIz\fP )
.fi
void \f3glRotatef\fP(
GLfloat \fIangle\fP,
.nf
.ta \w'\f3void \fPglRotatef( 'u
	GLfloat \fIx\fP,
	GLfloat \fIy\fP,
	GLfloat \fIz\fP )
.fi

.EQ
delim $$
.EN
.SH PARAMETERS
.TP \w'\f2angle\fP\ \ 'u 
\f2angle\fP
Specifies the angle of rotation, in degrees.
.TP
\f2x\fP, \f2y\fP, \f2z\fP
Specify the \f2x\fP, \f2y\fP, and \f2z\fP coordinates of a vector, respectively. 
.SH DESCRIPTION
\%\f3glRotate\fP produces a rotation of \f2angle\fP degrees around 
the vector $("x", "y", "z")$.
The current matrix (see \%\f3glMatrixMode\fP) is multiplied by a rotation 
matrix with the product
replacing the current matrix, as if \%\f3glMultMatrix\fP were called
with the following matrix as its argument:
.P
.ce
.EQ 
left ( ~ down 20 matrix {
 ccol { 
   "x" sup 2 (1 ^-^ c)~+~ c above
   "y" "x" (1 ^-^ c)~+~ "z" s above
   "x" "z" (1 ^-^ c)~-~"y" s above
   ~0 
 } 
 ccol {
   ~~ "x" "y" (1 ^-^ c)~-~"z" s above
   ~~ "y" sup 2 (1 ^-^ c)~+~ c above
   ~~ "y" "z" (1 ^-^ c)~+~ "x" s above
   ~~ ~0
 } 
 ccol {
   ~~ "x" "z" (1 ^-^ c)~+~ "y" s above
   ~~ "y" "z" (1 ^-^ c)~-~ "x" s above
   ~~ "z" sup 2 (1 ^-^ c) ~+~  c above
   ~~ ~0
 } 
 ccol { ~0 above ~0 above ~0 above ~1}
} ~~ right )
.EN
.P
.sp
Where $c ~=~ cos ("angle")$, $s ~=~ sin ("angle")$, and 
$||(~"x", "y", "z"~)|| ~=~ 1$ (if not, the GL 
will normalize this vector).
.sp
.sp
.P
If the matrix mode is either \%\f3GL_MODELVIEW\fP or \%\f3GL_PROJECTION\fP,
all objects drawn after \%\f3glRotate\fP is called are rotated.
Use \%\f3glPushMatrix\fP and \%\f3glPopMatrix\fP to save and restore
the unrotated coordinate system.
.SH NOTES
This rotation follows the right-hand rule, so
if the vector $("x", "y", "z")$ points toward the
user, the rotation will be counterclockwise.
.SH ERRORS
\%\f3GL_INVALID_OPERATION\fP is generated if \%\f3glRotate\fP
is executed between the execution of \%\f3glBegin\fP
and the corresponding execution of \%\f3glEnd\fP.
.SH ASSOCIATED GETS
\%\f3glGet\fP with argument \%\f3GL_MATRIX_MODE\fP
.br
\%\f3glGet\fP with argument \%\f3GL_COLOR_MATRIX\fP
.br
\%\f3glGet\fP with argument \%\f3GL_MODELVIEW_MATRIX\fP
.br
\%\f3glGet\fP with argument \%\f3GL_PROJECTION_MATRIX\fP
.br
\%\f3glGet\fP with argument \%\f3GL_TEXTURE_MATRIX\fP
.SH SEE ALSO
\%\f3glMatrixMode\fP,
\%\f3glMultMatrix\fP,
\%\f3glPushMatrix\fP,
\%\f3glScale\fP,
\%\f3glTranslate\fP
@


1.1
log
@Initial revision
@
text
@d1 2
d6 26
a31 5
.ds Dp Feb 04 10:50
.ds Dm 3 Apr  5  20
.ds Xs 52762     5
_header(Rotate,multiply the current matrix by a rotation matrix)
_names(Rotate,[df])
d36 2
a37 1
_phead(_param1)
d39 2
a40 1
_phead(_param2 _param3 _param4)
d43 3
a45 3
_cmnd produces a rotation of _param1 degrees around 
the vector $(_eqnparam2, _eqnparam3, _eqnparam4)$.
The current matrix (see _cmnd(MatrixMode)) is multiplied by a rotation 
d47 1
a47 1
replacing the current matrix, as if _cmnd(MultMatrix) were called
d54 3
a56 3
   _eqnparam2 sup 2 (1 ^-^ c)~+~ c above
   _eqnparam3 _eqnparam2 (1 ^-^ c)~+~ _eqnparam4 s above
   _eqnparam2 _eqnparam4 (1 ^-^ c)~-~_eqnparam3 s above
d60 3
a62 3
   ~~ _eqnparam2 _eqnparam3 (1 ^-^ c)~-~_eqnparam4 s above
   ~~ _eqnparam3 sup 2 (1 ^-^ c)~+~ c above
   ~~ _eqnparam3 _eqnparam4 (1 ^-^ c)~+~ _eqnparam2 s above
d66 3
a68 3
   ~~ _eqnparam2 _eqnparam4 (1 ^-^ c)~+~ _eqnparam3 s above
   ~~ _eqnparam3 _eqnparam4 (1 ^-^ c)~-~ _eqnparam2 s above
   ~~ _eqnparam4 sup 2 (1 ^-^ c) ~+~  c above
d76 2
a77 2
Where $c ~=~ cos (_eqnparam1)$, $s ~=~ sin (_eqnparam1)$, and 
$||(~_eqnparam2, _eqnparam3, _eqnparam4~)|| ~=~ 1$ (if not, the GL 
d83 2
a84 2
all objects drawn after _cmnd is called are rotated.
Use _cmnd(PushMatrix) and _cmnd(PopMatrix) to save and restore
d88 1
a88 1
if the vector $(_eqnparam2, _eqnparam3, _eqnparam4)$ points toward the
d91 3
a93 3
\%\f3GL_INVALID_OPERATION\fP is generated if _cmnd
is executed between the execution of _cmnd(Begin)
and the corresponding execution of _cmnd(End).
d95 1
a95 1
_cmnd(Get) with argument \%\f3GL_MATRIX_MODE\fP
d97 1
a97 1
_cmnd(Get) with argument \%\f3GL_COLOR_MATRIX\fP
d99 1
a99 1
_cmnd(Get) with argument \%\f3GL_MODELVIEW_MATRIX\fP
d101 1
a101 1
_cmnd(Get) with argument \%\f3GL_PROJECTION_MATRIX\fP
d103 1
a103 1
_cmnd(Get) with argument \%\f3GL_TEXTURE_MATRIX\fP
d105 5
a109 5
_cmnd(MatrixMode),
_cmnd(MultMatrix),
_cmnd(PushMatrix),
_cmnd(Scale),
_cmnd(Translate)
@


1.1.1.1
log
@win32-x11 source tree update March 26, 2001
@
text
@@
