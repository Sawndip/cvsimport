head	1.2;
access;
symbols
	win32-x11-2001-03-26:1.1.1.1 SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2001.06.03.20.47.14;	author ssiddiqi;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.25.19.36.53;	author ssiddiqi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.03.25.19.36.53;	author ssiddiqi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Win32-X11 update sources check in, June 3, 2001 - ssiddiqi
@
text
@'\"! tbl|eqn | mmdoc
'\"macro stdmacro
.ds Vn Version 1.2
.ds Dt 24 September 1999
.ds Re Release 1.2.1
.ds Dp Apr 04 17:39
.ds Dm  Apr  5  200
.ds Xs 53754 24 map2.gl
.TH GLMAP2 3G
.SH NAME
.B "glMap2d, glMap2f
\- define a two-dimensional evaluator

.SH C SPECIFICATION
void \f3glMap2d\fP(
GLenum \fItarget\fP,
.nf
.ta \w'\f3void \fPglMap2d( 'u
	GLdouble \fIu1\fP,
	GLdouble \fIu2\fP,
	GLint \fIustride\fP,
	GLint \fIuorder\fP,
	GLdouble \fIv1\fP,
	GLdouble \fIv2\fP,
	GLint \fIvstride\fP,
	GLint \fIvorder\fP,
	const GLdouble \fI*points\fP )
.fi
void \f3glMap2f\fP(
GLenum \fItarget\fP,
.nf
.ta \w'\f3void \fPglMap2f( 'u
	GLfloat \fIu1\fP,
	GLfloat \fIu2\fP,
	GLint \fIustride\fP,
	GLint \fIuorder\fP,
	GLfloat \fIv1\fP,
	GLfloat \fIv2\fP,
	GLint \fIvstride\fP,
	GLint \fIvorder\fP,
	const GLfloat \fI*points\fP )
.fi

.EQ
delim $$
.EN
.SH PARAMETERS
.TP \w'\fIustride\fP\ \ 'u 
\f2target\fP
Specifies the kind of values that are generated by the evaluator.
Symbolic constants
\%\f3GL_MAP2_VERTEX_3\fP,
\%\f3GL_MAP2_VERTEX_4\fP,
\%\f3GL_MAP2_INDEX\fP,
\%\f3GL_MAP2_COLOR_4\fP,
\%\f3GL_MAP2_NORMAL\fP,
\%\f3GL_MAP2_TEXTURE_COORD_1\fP,
\%\f3GL_MAP2_TEXTURE_COORD_2\fP,
\%\f3GL_MAP2_TEXTURE_COORD_3\fP, and
\%\f3GL_MAP2_TEXTURE_COORD_4\fP are accepted.
.TP
\f2u1\fP, \f2u2\fP
Specify a linear mapping of $u$,
as presented to \%\f3glEvalCoord2\fP,
to $u hat$,
one of the two variables that are evaluated by the equations specified
by this command. Initially, \f2u1\fP is 0 and \f2u2\fP is 1.
.TP
\f2ustride\fP
Specifies the number of floats or doubles between
the beginning of control point
$R sub ij$
and the beginning of control point
$R sub { (i+1) j }$,
where $i$ and $j$ are the $u$ and $v$ control point indices, respectively.
This allows control points to be embedded in arbitrary data structures.
The only constraint is that the values for a particular control point
must occupy contiguous memory locations. The initial value of \f2ustride\fP is 0. 
.TP
\f2uorder\fP
Specifies the dimension of the control point array in the $u$ axis.
Must be positive. The initial value is 1.
.TP
\f2v1\fP, \f2v2\fP
Specify a linear mapping of $v$,
as presented to \%\f3glEvalCoord2\fP,
to $v hat$,
one of the two variables that are evaluated by the equations specified
by this command. Initially, \f2v1\fP is 0 and \f2v2\fP is 1. 
.TP
\f2vstride\fP
Specifies the number of floats or doubles between
the beginning of control point
$R sub ij$
and the beginning of control point
$R sub { i (j+1) }$,
where $i$ and $j$ are the $u$ and $v$ control point indices, respectively.
This allows control points to be embedded in arbitrary data structures.
The only constraint is that the values for a particular control point
must occupy contiguous memory locations. The initial value of \f2vstride\fP is 0.
.TP
\f2vorder\fP
Specifies the dimension of the control point array in the $v$ axis.
Must be positive. The initial value is 1. 
.TP
\f2points\fP
Specifies a pointer to the array of control points.
.SH DESCRIPTION
Evaluators provide a way to use polynomial or rational polynomial mapping
to produce vertices,
normals,
texture coordinates,
and colors.
The values produced by an evaluator are sent on to further stages
of GL processing just as if they had been presented using
\%\f3glVertex\fP,
\%\f3glNormal\fP,
\%\f3glTexCoord\fP, and
\%\f3glColor\fP commands,
except that the generated values do not update the current normal,
texture coordinates,
or color.
.P
All polynomial or rational polynomial splines of any degree
(up to the maximum degree supported by the GL implementation)
can be described using evaluators.
These include almost all surfaces used in computer graphics,
including B-spline surfaces,
NURBS surfaces,
Bezier surfaces, and so on.  
.P
Evaluators define surfaces based on bivariate Bernstein polynomials.
Define $p ( u hat , v hat ) $ as
.ce
.sp
.EQ 
p ( u hat , v hat ) ~~=~~
 down 30 {{size 18 {sum}} from {size 8 {i~=~0}} to {size 9 {n}} } ~
 {{size 18 {sum}} from {size 8 {j~=~0}} to {size 9 {m}} } ~
 up 15 { B sub i sup n ( u hat ) ~ B sub j sup m ( v hat ) ~ R sub ij }
.EN
.sp
.P
where $R sub ij$ is a control point,
$B sub i sup n ( u hat )$
is the $i$th Bernstein polynomial of degree 
.br
$n$ (\f2uorder\fP = $n ~+~ 1$)
.ce
.sp
.EQ 
B sub i sup n ( u hat ) ~~=~~ left ( down 20 {cpile { n above i }} ~ right
) u hat sup i ( 1 - u hat ) sup { n - i }
.EN
.sp
and $B sub j sup m ( v hat )$
is the $j$th Bernstein polynomial of degree $m$ (\f2vorder\fP = $m ~+~ 1$)
.ce
.sp
.EQ 
B sub j sup m ( v hat ) ~~=~~ left ( ^down 20 {cpile { m above j }} ~^ right ) v hat sup j ( 1 - v hat ) sup { m - j }
.EN
.sp
Recall that 
.ce
$0 sup 0 ~==~ 1 $ and $ left ( ^ down 20 {cpile { n above 0 }} ~^ right ) ~~==~~ 1 $
.sp
\%\f3glMap2\fP is used to define the basis and to specify what kind of values
are produced.
Once defined,
a map can be enabled and disabled by calling \%\f3glEnable\fP and \%\f3glDisable\fP
with the map name, one of the nine predefined values for \f2target\fP,
described below.
When \%\f3glEvalCoord2\fP presents values $u$ and $v$,
the bivariate Bernstein polynomials are evaluated using $u hat$ and $v hat$,
where
.sp
.ce
$u hat ~~=~~ {u ~-~ "u1"} over {"u2" ~-~ "u1"}$
.sp
.ce
$v hat ~~=~~ {v ~-~ "v1"} over {"v2" ~-~ "v1"}$
.sp
\f2target\fP is a symbolic constant that indicates what kind of control points
are provided in \f2points\fP,
and what output is generated when the map is evaluated.
It can assume one of nine predefined values:
.TP 25
\%\f3GL_MAP2_VERTEX_3\fP
Each control point is three floating-point values representing
$x$, $y$, and $z$.
Internal \%\f3glVertex3\fP commands are generated when the map is evaluated.
.TP
\%\f3GL_MAP2_VERTEX_4\fP
Each control point is four floating-point values representing
$x$, $y$, $z$, and $w$.
Internal \%\f3glVertex4\fP commands are generated when the map is evaluated.
.TP
\%\f3GL_MAP2_INDEX\fP
Each control point is a single floating-point value representing a color index.
Internal \%\f3glIndex\fP commands are generated when the map is evaluated
but the current index is not updated with the value of these
\%\f3glIndex\fP commands. 
.TP
\%\f3GL_MAP2_COLOR_4\fP
Each control point is four floating-point values representing
red, green, blue, and alpha.
Internal \%\f3glColor4\fP commands are generated when the map is
evaluated but the current color is not updated with the value of
these \%\f3glColor4\fP commands.
.TP
\%\f3GL_MAP2_NORMAL\fP
Each control point is three floating-point values representing
the $x$, $y$, and $z$ components of a normal vector.
Internal \%\f3glNormal\fP commands are generated when the map is
evaluated but the current normal is not updated with the value of
these \%\f3glNormal\fP commands.
.TP 
\%\f3GL_MAP2_TEXTURE_COORD_1\fP
Each control point is a single floating-point value representing
the $s$ texture coordinate.
Internal 
.br
\%\f3glTexCoord1\fP commands are generated when the map is evaluated but
the current texture coordinates are not updated with the value 
of these \%\f3glTexCoord\fP commands. 
.TP
\%\f3GL_MAP2_TEXTURE_COORD_2\fP
Each control point is two floating-point values representing
the $s$ and $t$ texture coordinates.
Internal 
.br
\%\f3glTexCoord2\fP commands are generated when the map is evaluated but
the current texture coordinates are not updated with the value 
of these \%\f3glTexCoord\fP commands.
.TP
\%\f3GL_MAP2_TEXTURE_COORD_3\fP
Each control point is three floating-point values representing
the $s$, $t$, and $r$ texture coordinates.
Internal \%\f3glTexCoord3\fP commands are generated when the map is
evaluated but the current texture coordinates are not updated with the value
of these \%\f3glTexCoord\fP commands.
.TP
\%\f3GL_MAP2_TEXTURE_COORD_4\fP
Each control point is four floating-point values representing
the $s$, $t$, $r$, and $q$ texture coordinates.
Internal 
.br
\%\f3glTexCoord4\fP commands are generated when the map is evaluated but the current texture coordinates are not updated with the value
of these \%\f3glTexCoord\fP commands.
.P
\f2ustride\fP,
\f2uorder\fP,
\f2vstride\fP,
\f2vorder\fP, and
\f2points\fP define the array addressing for accessing the control points.
\f2points\fP is the location of the first control point,
which occupies one, two, three, or four contiguous memory locations,
depending on which map is being defined.
There are $ "uorder" ~times~ "vorder" $ control points in the array.
\f2ustride\fP specifies how many float or double locations are skipped to advance
the internal memory pointer from control point
$R sub {i j} $ to control point $R sub {(i+1) j} $.
\f2vstride\fP specifies how many float or double locations are skipped to advance
the internal memory pointer from control point
$R sub {i j} $ to control point $R sub {i (j+1) } $.
.SH NOTES
As is the case with all GL commands that accept pointers to data,
it is as if the contents of \f2points\fP were copied by \%\f3glMap2\fP before \%\f3glMap2\fP
returns.
Changes to the contents of \f2points\fP have no effect after \%\f3glMap2\fP is called.
.P
Initially, \%\f3GL_AUTO_NORMAL\fP is enabled. If \%\f3GL_AUTO_NORMAL\fP is enabled,
normal vectors are generated when either
\%\f3GL_MAP2_VERTEX_3\fP or \%\f3GL_MAP2_VERTEX_4\fP is used to generate
vertices.
.SH ERRORS
\%\f3GL_INVALID_ENUM\fP is generated if \f2target\fP is not an accepted value.
.P
\%\f3GL_INVALID_VALUE\fP is generated if \f2u1\fP is equal to \f2u2\fP,
or if \f2v1\fP is equal to \f2v2\fP.
.P
\%\f3GL_INVALID_VALUE\fP is generated if either \f2ustride\fP or \f2vstride\fP
is less than the number of values in a control point.
.P
\%\f3GL_INVALID_VALUE\fP is generated if either \f2uorder\fP or \f2vorder\fP
is less than 1 or greater than the return value of \%\f3GL_MAX_EVAL_ORDER\fP.
.P
\%\f3GL_INVALID_OPERATION\fP is generated if \%\f3glMap2\fP
is executed between the execution of
\%\f3glBegin\fP
and the corresponding execution of \%\f3glEnd\fP.
.P
When the \%\f3GL_ARB_multitexture\fP extension is supported,
\%\f3GL_INVALID_OPERATION\fP is generated if \%\f3glMap2\fP is called and the value
of \%\f3GL_ACTIVE_TEXTURE_ARB\fP is not \%\f3GL_TEXTURE0_ARB\fP.
.SH ASSOCIATED GETS
\%\f3glGetMap\fP
.br
\%\f3glGet\fP with argument \%\f3GL_MAX_EVAL_ORDER\fP
.br
\%\f3glIsEnabled\fP with argument \%\f3GL_MAP2_VERTEX_3\fP
.br
\%\f3glIsEnabled\fP with argument \%\f3GL_MAP2_VERTEX_4\fP
.br
\%\f3glIsEnabled\fP with argument \%\f3GL_MAP2_INDEX\fP
.br
\%\f3glIsEnabled\fP with argument \%\f3GL_MAP2_COLOR_4\fP
.br
\%\f3glIsEnabled\fP with argument \%\f3GL_MAP2_NORMAL\fP
.br
\%\f3glIsEnabled\fP with argument \%\f3GL_MAP2_TEXTURE_COORD_1\fP
.br
\%\f3glIsEnabled\fP with argument \%\f3GL_MAP2_TEXTURE_COORD_2\fP
.br
\%\f3glIsEnabled\fP with argument \%\f3GL_MAP2_TEXTURE_COORD_3\fP
.br
\%\f3glIsEnabled\fP with argument \%\f3GL_MAP2_TEXTURE_COORD_4\fP
.SH SEE ALSO
\%\f3glBegin\fP,
\%\f3glColor\fP,
\%\f3glEnable\fP,
\%\f3glEvalCoord\fP,
\%\f3glEvalMesh\fP,
\%\f3glEvalPoint\fP,
\%\f3glMap1\fP,
\%\f3glMapGrid\fP,
\%\f3glNormal\fP,
\%\f3glTexCoord\fP,
\%\f3glVertex\fP
@


1.1
log
@Initial revision
@
text
@d1 2
d6 38
a43 5
.ds Dp Feb 04 10:50
.ds Dm 9 Apr  5  20
.ds Xs 16004    12
_header(Map2,define a two-dimensional evaluator)
_names(Map2,[fd])
d48 2
a49 1
_phead(_param1)
d61 2
a62 1
_phead(_param2 _param3)
d64 1
a64 1
as presented to _cmnd(EvalCoord2),
d67 3
a69 2
by this command. Initially, _param2 is 0 and _param3 is 1.
_phead(_param4)
d78 3
a80 2
must occupy contiguous memory locations. The initial value of _param4 is 0. 
_phead(_param5)
d83 2
a84 1
_phead(_param6 _param7)
d86 1
a86 1
as presented to _cmnd(EvalCoord2),
d89 3
a91 2
by this command. Initially, _param6 is 0 and _param7 is 1. 
_phead(_param8)
d100 3
a102 2
must occupy contiguous memory locations. The initial value of _param8 is 0.
_phead(_param9)
d105 2
a106 1
_phead(_param10)
d116 4
a119 4
_cmnd(Vertex),
_cmnd(Normal),
_cmnd(TexCoord), and
_cmnd(Color) commands,
d148 1
a148 1
$n$ (_param5 = $n ~+~ 1$)
d157 1
a157 1
is the $j$th Bernstein polynomial of degree $m$ (_param9 = $m ~+~ 1$)
d168 1
a168 1
_cmnd is used to define the basis and to specify what kind of values
d171 2
a172 2
a map can be enabled and disabled by calling _cmnd(Enable) and _cmnd(Disable)
with the map name, one of the nine predefined values for _param1,
d174 1
a174 1
When _cmnd(EvalCoord2) presents values $u$ and $v$,
d179 1
a179 1
$u hat ~~=~~ {u ~-~ _eqnparam2} over {_eqnparam3 ~-~ _eqnparam2}$
d182 1
a182 1
$v hat ~~=~~ {v ~-~ _eqnparam6} over {_eqnparam7 ~-~ _eqnparam6}$
d184 2
a185 2
_param1 is a symbolic constant that indicates what kind of control points
are provided in _param10,
d192 1
a192 1
Internal _cmnd(Vertex3) commands are generated when the map is evaluated.
d197 1
a197 1
Internal _cmnd(Vertex4) commands are generated when the map is evaluated.
d201 1
a201 1
Internal _cmnd(Index) commands are generated when the map is evaluated
d203 1
a203 1
_cmnd(Index) commands. 
d208 1
a208 1
Internal _cmnd(Color4) commands are generated when the map is
d210 1
a210 1
these _cmnd(Color4) commands.
d215 1
a215 1
Internal _cmnd(Normal) commands are generated when the map is
d217 1
a217 1
these _cmnd(Normal) commands.
d224 1
a224 1
_cmnd(TexCoord1) commands are generated when the map is evaluated but
d226 1
a226 1
of these _cmnd(TexCoord) commands. 
d233 1
a233 1
_cmnd(TexCoord2) commands are generated when the map is evaluated but
d235 1
a235 1
of these _cmnd(TexCoord) commands.
d240 1
a240 1
Internal _cmnd(TexCoord3) commands are generated when the map is
d242 1
a242 1
of these _cmnd(TexCoord) commands.
d249 2
a250 2
_cmnd(TexCoord4) commands are generated when the map is evaluated but the current texture coordinates are not updated with the value
of these _cmnd(TexCoord) commands.
d252 6
a257 6
_param4,
_param5,
_param8,
_param9, and
_param10 define the array addressing for accessing the control points.
_param10 is the location of the first control point,
d260 2
a261 2
There are $ _eqnparam5 ~times~ _eqnparam9 $ control points in the array.
_param4 specifies how many float or double locations are skipped to advance
d264 1
a264 1
_param8 specifies how many float or double locations are skipped to advance
d269 1
a269 1
it is as if the contents of _param10 were copied by _cmnd before _cmnd
d271 1
a271 1
Changes to the contents of _param10 have no effect after _cmnd is called.
d278 1
a278 1
\%\f3GL_INVALID_ENUM\fP is generated if _param1 is not an accepted value.
d280 2
a281 2
\%\f3GL_INVALID_VALUE\fP is generated if _param2 is equal to _param3,
or if _param6 is equal to _param7.
d283 1
a283 1
\%\f3GL_INVALID_VALUE\fP is generated if either _param4 or _param8
d286 1
a286 1
\%\f3GL_INVALID_VALUE\fP is generated if either _param5 or _param9
d289 1
a289 1
\%\f3GL_INVALID_OPERATION\fP is generated if _cmnd
d291 2
a292 2
_cmnd(Begin)
and the corresponding execution of _cmnd(End).
d295 1
a295 1
\%\f3GL_INVALID_OPERATION\fP is generated if _cmnd is called and the value
d298 1
a298 1
_cmnd(GetMap)
d300 1
a300 1
_cmnd(Get) with argument \%\f3GL_MAX_EVAL_ORDER\fP
d302 1
a302 1
_cmnd(IsEnabled) with argument \%\f3GL_MAP2_VERTEX_3\fP
d304 1
a304 1
_cmnd(IsEnabled) with argument \%\f3GL_MAP2_VERTEX_4\fP
d306 1
a306 1
_cmnd(IsEnabled) with argument \%\f3GL_MAP2_INDEX\fP
d308 1
a308 1
_cmnd(IsEnabled) with argument \%\f3GL_MAP2_COLOR_4\fP
d310 1
a310 1
_cmnd(IsEnabled) with argument \%\f3GL_MAP2_NORMAL\fP
d312 1
a312 1
_cmnd(IsEnabled) with argument \%\f3GL_MAP2_TEXTURE_COORD_1\fP
d314 1
a314 1
_cmnd(IsEnabled) with argument \%\f3GL_MAP2_TEXTURE_COORD_2\fP
d316 1
a316 1
_cmnd(IsEnabled) with argument \%\f3GL_MAP2_TEXTURE_COORD_3\fP
d318 1
a318 1
_cmnd(IsEnabled) with argument \%\f3GL_MAP2_TEXTURE_COORD_4\fP
d320 11
a330 11
_cmnd(Begin),
_cmnd(Color),
_cmnd(Enable),
_cmnd(EvalCoord),
_cmnd(EvalMesh),
_cmnd(EvalPoint),
_cmnd(Map1),
_cmnd(MapGrid),
_cmnd(Normal),
_cmnd(TexCoord),
_cmnd(Vertex)
@


1.1.1.1
log
@win32-x11 source tree update March 26, 2001
@
text
@@
