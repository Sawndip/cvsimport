head	1.2;
access;
symbols
	win32-x11-2001-03-26:1.1.1.1 SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2001.06.03.20.47.14;	author ssiddiqi;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.25.19.36.53;	author ssiddiqi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.03.25.19.36.53;	author ssiddiqi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Win32-X11 update sources check in, June 3, 2001 - ssiddiqi
@
text
@'\"! eqn | mmdoc
'\"macro stdmacro
.ds Vn Version 1.2
.ds Dt 24 September 1999
.ds Re Release 1.2.1
.ds Dp Apr 04 17:39
.ds Dm  Apr  5  200
.ds Xs 39776 34 teximage2d.gl
.TH GLTEXIMAGE2D 3G
.SH NAME
.B "glTexImage2D
\- specify a two-dimensional texture image

.SH C SPECIFICATION
void \f3glTexImage2D\fP(
GLenum \fItarget\fP,
.nf
.ta \w'\f3void \fPglTexImage2D( 'u
	GLint \fIlevel\fP,
	GLint \fIinternalformat\fP,
	GLsizei \fIwidth\fP,
	GLsizei \fIheight\fP,
	GLint \fIborder\fP,
	GLenum \fIformat\fP,
	GLenum \fItype\fP,
	const GLvoid \fI*pixels\fP )
.fi

.EQ
delim $$
.EN
.SH PARAMETERS
.TP \w'\fIinternalformat\fP\ \ 'u 
\f2target\fP
Specifies the target texture.
Must be \%\f3GL_TEXTURE_2D\fP or \%\f3GL_PROXY_TEXTURE_2D\fP.
.TP
\f2level\fP
Specifies the level-of-detail number.
Level 0 is the base image level.
Level \f2n\fP is the \f2n\fPth mipmap reduction image.
.TP
\f2internalformat\fP
Specifies the number of color components in the texture.
Must be 1, 2, 3, or 4, or one of the following symbolic constants:
\%\f3GL_ALPHA\fP,
\%\f3GL_ALPHA4\fP,
\%\f3GL_ALPHA8\fP,
\%\f3GL_ALPHA12\fP,
\%\f3GL_ALPHA16\fP,
\%\f3GL_LUMINANCE\fP,
\%\f3GL_LUMINANCE4\fP,
\%\f3GL_LUMINANCE8\fP,
\%\f3GL_LUMINANCE12\fP,
\%\f3GL_LUMINANCE16\fP,
\%\f3GL_LUMINANCE_ALPHA\fP,
\%\f3GL_LUMINANCE4_ALPHA4\fP,
\%\f3GL_LUMINANCE6_ALPHA2\fP,
\%\f3GL_LUMINANCE8_ALPHA8\fP,
\%\f3GL_LUMINANCE12_ALPHA4\fP,
\%\f3GL_LUMINANCE12_ALPHA12\fP,
\%\f3GL_LUMINANCE16_ALPHA16\fP,
\%\f3GL_INTENSITY\fP,
\%\f3GL_INTENSITY4\fP,
\%\f3GL_INTENSITY8\fP,
\%\f3GL_INTENSITY12\fP,
\%\f3GL_INTENSITY16\fP,
\%\f3GL_R3_G3_B2\fP,
\%\f3GL_RGB\fP,
\%\f3GL_RGB4\fP,
\%\f3GL_RGB5\fP,
\%\f3GL_RGB8\fP,
\%\f3GL_RGB10\fP,
\%\f3GL_RGB12\fP,
\%\f3GL_RGB16\fP,
\%\f3GL_RGBA\fP,
\%\f3GL_RGBA2\fP,
\%\f3GL_RGBA4\fP,
\%\f3GL_RGB5_A1\fP,
\%\f3GL_RGBA8\fP,
\%\f3GL_RGB10_A2\fP,
\%\f3GL_RGBA12\fP, or
\%\f3GL_RGBA16\fP.
.TP
\f2width\fP
Specifies the width of the texture image.
Must be $2 sup n ~+~ 2 ( "border" )$ for some integer $n$. All
implementations support texture images that are at least 64 texels
wide.
.TP
\f2height\fP
Specifies the height of the texture image.
Must be $2 sup m ~+~ 2 ( "border" )$ for some integer $m$. All
implementations support texture images that are at least 64 texels
high.
.TP
\f2border\fP
Specifies the width of the border.
Must be either 0 or 1.
.TP
\f2format\fP
Specifies the format of the pixel data.
The following symbolic values are accepted:
\%\f3GL_COLOR_INDEX\fP,
\%\f3GL_RED\fP,
\%\f3GL_GREEN\fP,
\%\f3GL_BLUE\fP,
\%\f3GL_ALPHA\fP,
\%\f3GL_RGB\fP,
\%\f3GL_BGR\fP
\%\f3GL_RGBA\fP,
\%\f3GL_BGRA\fP,
\%\f3GL_LUMINANCE\fP, and
\%\f3GL_LUMINANCE_ALPHA\fP.
.TP
\f2type\fP
Specifies the data type of the pixel data.
The following symbolic values are accepted:
\%\f3GL_UNSIGNED_BYTE\fP,
\%\f3GL_BYTE\fP,
\%\f3GL_BITMAP\fP,
\%\f3GL_UNSIGNED_SHORT\fP,
\%\f3GL_SHORT\fP,
\%\f3GL_UNSIGNED_INT\fP,
\%\f3GL_INT\fP,
\%\f3GL_FLOAT\fP,
\%\f3GL_UNSIGNED_BYTE_3_3_2\fP,
\%\f3GL_UNSIGNED_BYTE_2_3_3_REV\fP,
\%\f3GL_UNSIGNED_SHORT_5_6_5\fP,
\%\f3GL_UNSIGNED_SHORT_5_6_5_REV\fP,
\%\f3GL_UNSIGNED_SHORT_4_4_4_4\fP,
\%\f3GL_UNSIGNED_SHORT_4_4_4_4_REV\fP,
\%\f3GL_UNSIGNED_SHORT_5_5_5_1\fP,
\%\f3GL_UNSIGNED_SHORT_1_5_5_5_REV\fP,
\%\f3GL_UNSIGNED_INT_8_8_8_8\fP,
\%\f3GL_UNSIGNED_INT_8_8_8_8_REV\fP,
\%\f3GL_UNSIGNED_INT_10_10_10_2\fP, and
\%\f3GL_UNSIGNED_INT_2_10_10_10_REV\fP.
.TP
\f2pixels\fP
Specifies a pointer to the image data in memory.
.SH DESCRIPTION
Texturing maps a portion of a specified texture image
onto each graphical primitive for which texturing is enabled.
To enable and disable two-dimensional texturing, call \%\f3glEnable\fP
and \%\f3glDisable\fP with argument \%\f3GL_TEXTURE_2D\fP.
.P
To define texture images, call \%\f3glTexImage2D\fP. 
The arguments describe the parameters of the texture image,
such as height,
width,
width of the border,
level-of-detail number
(see \%\f3glTexParameter\fP),
and number of color components provided.
The last three arguments describe how the image is represented in memory;
they are identical to the pixel formats used for \%\f3glDrawPixels\fP.
.P
If \f2target\fP is \%\f3GL_PROXY_TEXTURE_2D\fP, no data is read from \f2pixels\fP, but
all of the texture image state is recalculated, checked for
consistency, and checked 
against the implementation's capabilities. If the implementation cannot
handle a texture of the requested texture size, it sets
all of the image state to 0,
but does not generate an error (see \%\f3glGetError\fP). To query for an
entire mipmap array, use an image array level greater than or equal to
1. 
.P 
If \f2target\fP is \%\f3GL_TEXTURE_2D\fP,
data is read from \f2pixels\fP as a sequence of signed or unsigned bytes,
shorts,
or longs,
or single-precision floating-point values,
depending on \f2type\fP. 
These values are grouped into sets of one,
two,
three,
or four values,
depending on \f2format\fP,
to form elements. 
If \f2type\fP is \%\f3GL_BITMAP\fP,
the data is considered as a string of unsigned bytes (and
\f2format\fP must be \%\f3GL_COLOR_INDEX\fP). 
.bp
Each data byte is treated as eight 1-bit elements,
with bit ordering determined by \%\f3GL_UNPACK_LSB_FIRST\fP
(see \%\f3glPixelStore\fP).
.P
The first element corresponds to the lower left corner of the texture
image.
Subsequent elements progress left-to-right through the remaining texels
in the lowest row of the texture image, and then in successively higher
rows of the texture image.
The final element corresponds to the upper right corner of the texture
image.
.P
\f2format\fP determines the composition of each element in \f2pixels\fP.
It can assume one of eleven symbolic values:
.TP 10
\%\f3GL_COLOR_INDEX\fP
Each element is a single value,
a color index. 
The GL converts it to fixed point
(with an unspecified number of zero bits to the right of the binary point),
shifted left or right depending on the value and sign of \%\f3GL_INDEX_SHIFT\fP,
and added to \%\f3GL_INDEX_OFFSET\fP
(see 
.br
\%\f3glPixelTransfer\fP). 
The resulting index is converted to a set of color components
using the
\%\f3GL_PIXEL_MAP_I_TO_R\fP,
\%\f3GL_PIXEL_MAP_I_TO_G\fP,
\%\f3GL_PIXEL_MAP_I_TO_B\fP, and
\%\f3GL_PIXEL_MAP_I_TO_A\fP tables,
and clamped to the range [0,1].
.TP
\%\f3GL_RED\fP
Each element is a single red component. 
The GL converts it to floating point and assembles it into an RGBA element
by attaching 0 for green and blue, and 1 for alpha. 
Each component is then multiplied by the signed scale factor \%\f3GL_c_SCALE\fP,
added to the signed bias \%\f3GL_c_BIAS\fP,
and clamped to the range [0,1]
(see \%\f3glPixelTransfer\fP).
.TP
\%\f3GL_GREEN\fP
Each element is a single green component. 
The GL converts it to floating point and assembles it into an RGBA element
by attaching 0 for red and blue, and 1 for alpha. 
Each component is then multiplied by the signed scale factor \%\f3GL_c_SCALE\fP,
added to the signed bias \%\f3GL_c_BIAS\fP,
and clamped to the range [0,1]
(see \%\f3glPixelTransfer\fP).
.TP
\%\f3GL_BLUE\fP
Each element is a single blue component. 
The GL converts it to floating point and assembles it into an RGBA element
by attaching 0 for red and green, and 1 for alpha. 
Each component is then multiplied by the signed scale factor \%\f3GL_c_SCALE\fP,
added to the signed bias \%\f3GL_c_BIAS\fP,
and clamped to the range [0,1]
(see \%\f3glPixelTransfer\fP).
.TP
\%\f3GL_ALPHA\fP
Each element is a single alpha component. 
The GL converts it to floating point and assembles it into an RGBA element
by attaching 0 for red, green, and blue.
Each component is then multiplied by the signed scale factor \%\f3GL_c_SCALE\fP,
added to the signed bias \%\f3GL_c_BIAS\fP,
and clamped to the range [0,1]
(see \%\f3glPixelTransfer\fP).
.TP
\%\f3GL_RGB\fP
.TP
\%\f3GL_BGR\fP
Each element is an RGB triple.
The GL converts it to floating point and assembles it into an RGBA element
by attaching 1 for alpha.
Each component is then multiplied by the signed scale factor \%\f3GL_c_SCALE\fP,
added to the signed bias \%\f3GL_c_BIAS\fP,
and clamped to the range [0,1]
(see 
.br
\%\f3glPixelTransfer\fP).
.TP
\%\f3GL_RGBA\fP
.TP
\%\f3GL_BGRA\fP
Each element contains all four components.
Each component is multiplied by the signed scale factor \%\f3GL_c_SCALE\fP,
added to the signed bias \%\f3GL_c_BIAS\fP,
and clamped to the range [0,1]
(see \%\f3glPixelTransfer\fP).
.TP
\%\f3GL_LUMINANCE\fP
Each element is a single luminance value.
The GL converts it to floating point,
then assembles it into an RGBA element by replicating the luminance value
three times for red, green, and blue and attaching 1 for alpha. 
Each component is then multiplied by the signed scale factor \%\f3GL_c_SCALE\fP,
added to the signed bias \%\f3GL_c_BIAS\fP,
and clamped to the range [0,1]
(see \%\f3glPixelTransfer\fP).
.TP
\%\f3GL_LUMINANCE_ALPHA\fP
Each element is a luminance/alpha pair.
The GL converts it to floating point,
then assembles it into an RGBA element by replicating the luminance value
three times for red, green, and blue.
Each component is then multiplied by the signed scale factor \%\f3GL_c_SCALE\fP,
added to the signed bias \%\f3GL_c_BIAS\fP,
and clamped to the range [0,1]
(see 
.br
\%\f3glPixelTransfer\fP).
.P
Refer to the \%\f3glDrawPixels\fP reference page for a description of
the acceptable values for the \f2type\fP parameter.
.P
If an application wants to store the texture at a certain
resolution or in a certain format, it can request the resolution
and format with \f2internalformat\fP. The GL will choose an internal
representation that closely approximates that requested by \f2internalformat\fP, but
it may not match exactly.
(The representations specified by \%\f3GL_LUMINANCE\fP,
\%\f3GL_LUMINANCE_ALPHA\fP, \%\f3GL_RGB\fP,
and \%\f3GL_RGBA\fP must match exactly. The numeric values 1, 2, 3, and 4
may also be used to specify the above representations.)
.P
Use the \%\f3GL_PROXY_TEXTURE_2D\fP target to try out a resolution and
format. The implementation will
update and recompute its best match for the requested storage resolution
and format. To then query this state, call
\%\f3glGetTexLevelParameter\fP.
If the texture cannot be accommodated, texture state is set to 0.
.P
A one-component texture image uses only the red component of the RGBA
color extracted from \f2pixels\fP. 
A two-component image uses the R and A values.
A three-component image uses the R, G, and B values.
A four-component image uses all of the RGBA components. 
.SH NOTES
Texturing has no effect in color index mode.
.P
If the \%\f3GL_ARB_imaging\fP extension is supported, RGBA elements may
also be processed by the imaging pipeline.  The following stages may be
applied to an RGBA color before color component clamping to the range
[0,\ 1]:
.TP 3
1. Color component replacement by the color table specified for
\%\f3GL_COLOR_TABLE\fP, if enabled. See \%\f3glColorTable\fP.
.TP
2. Two-dimensional Convolution filtering, if enabled. See
\%\f3glConvolutionFilter1D\fP.
.IP
If a convolution filter changes the __width of the texture (by
processing with a \%\f3GL_CONVOLUTION_BORDER_MODE\fP of \%\f3GL_REDUCE\fP, for 
example), the \f2width\fP must $2 sup n + 2 ( "height" )$, for some
integer $n$, and \f2height\fP must be $2 sup m + ( "border" )$, for some
integer $m$,  after filtering.
.TP
3. RGBA components may be multiplied by \%\f3GL_POST_CONVOLUTION_c_SCALE\fP, 
and added to \%\f3GL_POST_CONVOLUTION_c_BIAS\fP, if enabled.  See 
\%\f3glPixelTransfer\fP.
.TP
4. Color component replacement by the color table specified for
\%\f3GL_POST_CONVOLUTION_COLOR_TABLE\fP, if enabled.  See \%\f3glColorTable\fP.
.TP
5. Transformation by the color matrix.  See \%\f3glMatrixMode\fP.
.TP
6. RGBA components may be multiplied by \%\f3GL_POST_COLOR_MATRIX_c_SCALE\fP, 
and added to \%\f3GL_POST_COLOR_MATRIX_c_BIAS\fP, if enabled.  See 
\%\f3glPixelTransfer\fP.
.TP
7. Color component replacement by the color table specified for
\%\f3GL_POST_COLOR_MATRIX_COLOR_TABLE\fP, if enabled.  See
\%\f3glColorTable\fP.
.P
The texture image can be represented by the same data formats
as the pixels in a \%\f3glDrawPixels\fP command,
except that \%\f3GL_STENCIL_INDEX\fP and \%\f3GL_DEPTH_COMPONENT\fP
cannot be used.
\%\f3glPixelStore\fP and \%\f3glPixelTransfer\fP modes affect texture images
in exactly the way they affect \%\f3glDrawPixels\fP.
.P
.P
\%\f3glTexImage2D\fP and \%\f3GL_PROXY_TEXTURE_2D\fP are available only if the GL
version is 1.1 or greater. 
.P
Internal formats other than 1, 2, 3, or 4 may be used only if the GL
version is 1.1 or greater.
.P
In GL version 1.1 or greater, \f2pixels\fP may be a null pointer. 
In this case texture memory is
allocated to accommodate a texture of width \f2width\fP and height \f2height\fP.
You can then download subtextures to initialize this
texture memory. 
The image is undefined if the user tries to apply
an uninitialized portion of the texture image to a primitive.
.P
Formats \%\f3GL_BGR\fP, and \%\f3GL_BGRA\fP and types
\%\f3GL_UNSIGNED_BYTE_3_3_2\fP,
\%\f3GL_UNSIGNED_BYTE_2_3_3_REV\fP,
\%\f3GL_UNSIGNED_SHORT_5_6_5\fP,
\%\f3GL_UNSIGNED_SHORT_5_6_5_REV\fP,
\%\f3GL_UNSIGNED_SHORT_4_4_4_4\fP,
\%\f3GL_UNSIGNED_SHORT_4_4_4_4_REV\fP,
\%\f3GL_UNSIGNED_SHORT_5_5_5_1\fP,
\%\f3GL_UNSIGNED_SHORT_1_5_5_5_REV\fP,
\%\f3GL_UNSIGNED_INT_8_8_8_8\fP,
\%\f3GL_UNSIGNED_INT_8_8_8_8_REV\fP,
\%\f3GL_UNSIGNED_INT_10_10_10_2\fP, and
\%\f3GL_UNSIGNED_INT_2_10_10_10_REV\fP are available only if the GL version 
is 1.2 or greater.
.P
When the \%\f3GL_ARB_multitexture\fP extension is supported, \%\f3glTexImage2D\fP
specifies the two-dimensional texture for the current texture unit,
specified with \%\f3glActiveTextureARB\fP.
.SH ERRORS
\%\f3GL_INVALID_ENUM\fP is generated if \f2target\fP is not \%\f3GL_TEXTURE_2D\fP
or \%\f3GL_PROXY_TEXTURE_2D\fP.
.P
\%\f3GL_INVALID_ENUM\fP is generated if \f2format\fP is not an accepted
format constant.
Format constants other than \%\f3GL_STENCIL_INDEX\fP and \%\f3GL_DEPTH_COMPONENT\fP
are accepted.
.P
\%\f3GL_INVALID_ENUM\fP is generated if \f2type\fP is not a type constant.
.P
\%\f3GL_INVALID_ENUM\fP is generated if \f2type\fP is \%\f3GL_BITMAP\fP and
\f2format\fP is not \%\f3GL_COLOR_INDEX\fP.
.P
\%\f3GL_INVALID_VALUE\fP is generated if \f2level\fP is less than 0.
.P 
\%\f3GL_INVALID_VALUE\fP may be generated if \f2level\fP is greater than $log
sub 2$\f2max\fP,
where \f2max\fP is the returned value of \%\f3GL_MAX_TEXTURE_SIZE\fP.
.P
\%\f3GL_INVALID_VALUE\fP is generated if \f2internalformat\fP is not 1, 2, 3, 4, or one of the 
accepted resolution and format symbolic constants.
.P
\%\f3GL_INVALID_VALUE\fP is generated if \f2width\fP or \f2height\fP is less than 0
or greater than 2 + \%\f3GL_MAX_TEXTURE_SIZE\fP,
or if either cannot be represented as $2 sup k ~+~ 2("border")$ for some
integer value of \f2k\fP.
.P
\%\f3GL_INVALID_VALUE\fP is generated if \f2border\fP is not 0 or 1.
.P
\%\f3GL_INVALID_OPERATION\fP is generated if \%\f3glTexImage2D\fP
is executed between the execution of \%\f3glBegin\fP
and the corresponding execution of \%\f3glEnd\fP.
.P
\%\f3GL_INVALID_OPERATION\fP is generated if \f2type\fP is one of
\%\f3GL_UNSIGNED_BYTE_3_3_2\fP,
\%\f3GL_UNSIGNED_BYTE_2_3_3_REV\fP,
\%\f3GL_UNSIGNED_SHORT_5_6_5\fP, or
\%\f3GL_UNSIGNED_SHORT_5_6_5_REV\fP
and \f2format\fP is not \%\f3GL_RGB\fP.
.P
\%\f3GL_INVALID_OPERATION\fP is generated if \f2type\fP is one of
\%\f3GL_UNSIGNED_SHORT_4_4_4_4\fP,
\%\f3GL_UNSIGNED_SHORT_4_4_4_4_REV\fP,
\%\f3GL_UNSIGNED_SHORT_5_5_5_1\fP,
\%\f3GL_UNSIGNED_SHORT_1_5_5_5_REV\fP,
\%\f3GL_UNSIGNED_INT_8_8_8_8\fP,
\%\f3GL_UNSIGNED_INT_8_8_8_8_REV\fP,
\%\f3GL_UNSIGNED_INT_10_10_10_2\fP, or
\%\f3GL_UNSIGNED_INT_2_10_10_10_REV\fP
and \f2format\fP is neither \%\f3GL_RGBA\fP nor \%\f3GL_BGRA\fP.
.SH ASSOCIATED GETS
\%\f3glGetTexImage\fP
.br
\%\f3glIsEnabled\fP with argument \%\f3GL_TEXTURE_2D\fP
.SH SEE ALSO
\%\f3glColorTable\fP,
\%\f3glConvolutionFilter2D\fP,
\%\f3glCopyPixels\fP,
\%\f3glCopyTexImage1D\fP,
\%\f3glCopyTexImage2D\fP,
\%\f3glCopyTexSubImage1D\fP,
\%\f3glCopyTexSubImage2D\fP,
\%\f3glCopyTexSubImage3D\fP,
\%\f3glDrawPixels\fP,
\%\f3glMatrixMode\fP,
\%\f3glPixelStore\fP,
\%\f3glPixelTransfer\fP,
\%\f3glSeparableFilter2D\fP,
\%\f3glTexEnv\fP,
\%\f3glTexGen\fP,
\%\f3glTexImage1D\fP,
\%\f3glTexImage3D\fP,
\%\f3glTexSubImage1D\fP,
\%\f3glTexSubImage2D\fP,
\%\f3glTexSubImage3D\fP,
\%\f3glTexParameter\fP

@


1.1
log
@Initial revision
@
text
@d1 2
d6 23
a28 5
.ds Dp Feb 04 10:50
.ds Dm 2 Apr  5  20
.ds Xs 14330    17
_header(TexImage2D,specify a two-dimensional texture image)
_names(TexImage2D)
d33 2
a34 1
_phead(_param1)
d37 2
a38 1
_phead(_param2)
d42 2
a43 1
_phead(_param3)
d84 2
a85 1
_phead(_param4)
d87 1
a87 1
Must be $2 sup n ~+~ 2 ( _eqnparam6 )$ for some integer $n$. All
d90 2
a91 1
_phead(_param5)
d93 1
a93 1
Must be $2 sup m ~+~ 2 ( _eqnparam6 )$ for some integer $m$. All
d96 2
a97 1
_phead(_param6)
d100 3
a102 2
_phead(_param7)
Specifies the  of the pixel data.
d115 2
a116 1
_phead(_param8)
d139 2
a140 1
_phead(_param9)
d145 2
a146 2
To enable and disable two-dimensional texturing, call _cmnd(Enable)
and _cmnd(Disable) with argument \%\f3GL_TEXTURE_2D\fP.
d148 1
a148 1
To define texture images, call _cmnd. 
d154 1
a154 1
(see _cmnd(TexParameter)),
d157 1
a157 1
they are identical to the pixel formats used for _cmnd(DrawPixels).
d159 1
a159 1
If _param1 is \%\f3GL_PROXY_TEXTURE_2D\fP, no data is read from _param9, but
d165 1
a165 1
but does not generate an error (see _cmnd(GetError)). To query for an
d169 2
a170 2
If _param1 is \%\f3GL_TEXTURE_2D\fP,
data is read from _param9 as a sequence of signed or unsigned bytes,
d174 1
a174 1
depending on _param8. 
d179 1
a179 1
depending on _param7,
d181 1
a181 1
If _param8 is \%\f3GL_BITMAP\fP,
d183 1
a183 1
_param7 must be \%\f3GL_COLOR_INDEX\fP). 
d187 1
a187 1
(see _cmnd(PixelStore)).
d197 1
a197 1
_param7 determines the composition of each element in _param9.
d209 1
a209 1
_cmnd(PixelTransfer)). 
d225 1
a225 1
(see _cmnd(PixelTransfer)).
d234 1
a234 1
(see _cmnd(PixelTransfer)).
d243 1
a243 1
(see _cmnd(PixelTransfer)).
d252 1
a252 1
(see _cmnd(PixelTransfer)).
d265 1
a265 1
_cmnd(PixelTransfer)).
d274 1
a274 1
(see _cmnd(PixelTransfer)).
d284 1
a284 1
(see _cmnd(PixelTransfer)).
d296 1
a296 1
_cmnd(PixelTransfer)).
d298 2
a299 2
Refer to the _cmnd(DrawPixels) reference page for a description of
the acceptable values for the _param8 parameter.
d302 3
a304 3
resolution or in a certain , it can request the resolution
and  with _param3. The GL will choose an internal
representation that closely approximates that requested by _param3, but
d312 1
a312 1
. The implementation will
d314 2
a315 2
and . To then query this state, call
_cmnd(GetTexLevelParameter).
d319 1
a319 1
color extracted from _param9. 
d332 1
a332 1
\%\f3GL_COLOR_TABLE\fP, if enabled. See _cmnd(ColorTable).
d335 1
a335 1
_cmnd(ConvolutionFilter1D).
d339 2
a340 2
example), the _param4 must $2 sup n + 2 ( _eqnparam5 )$, for some
integer $n$, and _param5 must be $2 sup m + ( _eqnparam6 )$, for some
d345 1
a345 1
_cmnd(PixelTransfer).
d348 1
a348 1
\%\f3GL_POST_CONVOLUTION_COLOR_TABLE\fP, if enabled.  See _cmnd(ColorTable).
d350 1
a350 1
5. Transformation by the color matrix.  See _cmnd(MatrixMode).
d354 1
a354 1
_cmnd(PixelTransfer).
d358 1
a358 1
_cmnd(ColorTable).
d361 1
a361 1
as the pixels in a _cmnd(DrawPixels) command,
d364 2
a365 2
_cmnd(PixelStore) and _cmnd(PixelTransfer) modes affect texture images
in exactly the way they affect _cmnd(DrawPixels).
d368 1
a368 1
_cmnd and \%\f3GL_PROXY_TEXTURE_2D\fP are available only if the GL
d374 1
a374 1
In GL version 1.1 or greater, _param9 may be a null pointer. 
d376 1
a376 1
allocated to accommodate a texture of width _param4 and height _param5.
d397 1
a397 1
When the \%\f3GL_ARB_multitexture\fP extension is supported, _cmnd
d399 1
a399 1
specified with _cmnd(ActiveTextureARB).
d401 1
a401 1
\%\f3GL_INVALID_ENUM\fP is generated if _param1 is not \%\f3GL_TEXTURE_2D\fP
d404 2
a405 2
\%\f3GL_INVALID_ENUM\fP is generated if _param7 is not an accepted
 constant.
d409 1
a409 1
\%\f3GL_INVALID_ENUM\fP is generated if _param8 is not a type constant.
d411 2
a412 2
\%\f3GL_INVALID_ENUM\fP is generated if _param8 is \%\f3GL_BITMAP\fP and
_param7 is not \%\f3GL_COLOR_INDEX\fP.
d414 1
a414 1
\%\f3GL_INVALID_VALUE\fP is generated if _param2 is less than 0.
d416 1
a416 1
\%\f3GL_INVALID_VALUE\fP may be generated if _param2 is greater than $log
d420 2
a421 2
\%\f3GL_INVALID_VALUE\fP is generated if _param3 is not 1, 2, 3, 4, or one of the 
accepted resolution and  symbolic constants.
d423 1
a423 1
\%\f3GL_INVALID_VALUE\fP is generated if _param4 or _param5 is less than 0
d425 1
a425 1
or if either cannot be represented as $2 sup k ~+~ 2(_eqnparam6)$ for some
d428 1
a428 1
\%\f3GL_INVALID_VALUE\fP is generated if _param6 is not 0 or 1.
d430 3
a432 3
\%\f3GL_INVALID_OPERATION\fP is generated if _cmnd
is executed between the execution of _cmnd(Begin)
and the corresponding execution of _cmnd(End).
d434 1
a434 1
\%\f3GL_INVALID_OPERATION\fP is generated if _param8 is one of
d439 1
a439 1
and _param7 is not \%\f3GL_RGB\fP.
d441 1
a441 1
\%\f3GL_INVALID_OPERATION\fP is generated if _param8 is one of
d450 1
a450 1
and _param7 is neither \%\f3GL_RGBA\fP nor \%\f3GL_BGRA\fP.
d452 1
a452 1
_cmnd(GetTexImage)
d454 1
a454 1
_cmnd(IsEnabled) with argument \%\f3GL_TEXTURE_2D\fP
d456 21
a476 21
_cmnd(ColorTable),
_cmnd(ConvolutionFilter2D),
_cmnd(CopyPixels),
_cmnd(CopyTexImage1D),
_cmnd(CopyTexImage2D),
_cmnd(CopyTexSubImage1D),
_cmnd(CopyTexSubImage2D),
_cmnd(CopyTexSubImage3D),
_cmnd(DrawPixels),
_cmnd(MatrixMode),
_cmnd(PixelStore),
_cmnd(PixelTransfer),
_cmnd(SeparableFilter2D),
_cmnd(TexEnv),
_cmnd(TexGen),
_cmnd(TexImage1D),
_cmnd(TexImage3D),
_cmnd(TexSubImage1D),
_cmnd(TexSubImage2D),
_cmnd(TexSubImage3D),
_cmnd(TexParameter)
@


1.1.1.1
log
@win32-x11 source tree update March 26, 2001
@
text
@@
