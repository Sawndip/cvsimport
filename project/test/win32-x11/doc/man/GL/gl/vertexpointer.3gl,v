head	1.2;
access;
symbols
	win32-x11-2001-03-26:1.1.1.1 SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2001.06.03.20.47.14;	author ssiddiqi;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.25.19.36.53;	author ssiddiqi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.03.25.19.36.53;	author ssiddiqi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Win32-X11 update sources check in, June 3, 2001 - ssiddiqi
@
text
@'\"! tbl|eqn | mmdoc
'\"macro stdmacro
.ds Vn Version 1.2
.ds Dt 24 September 1999
.ds Re Release 1.2.1
.ds Dp Apr 04 17:39
.ds Dm  Apr  5  200
.ds Xs 57972 12 vertexpointer.gl
.TH GLVERTEXPOINTER 3G
.SH NAME
.B "glVertexPointer
\- define an array of vertex data
 
.SH C SPECIFICATION
void \f3glVertexPointer\fP(
GLint \fIsize\fP,
.nf
.ta \w'\f3void \fPglVertexPointer( 'u
	GLenum \fItype\fP,
	GLsizei \fIstride\fP,
	const GLvoid \fI*pointer\fP )
.fi

.EQ
delim $$
.EN
.SH PARAMETERS
.TP \w'\fIpointer\fP\ \ 'u 
\f2size\fP
Specifies the number of coordinates per vertex; must be 2, 3, or
4. The initial value is 4.
.TP
\f2type\fP
Specifies the data type of each coordinate in the array.
Symbolic constants
\%\f3GL_SHORT\fP,
\%\f3GL_INT\fP,
\%\f3GL_FLOAT\fP,
and \%\f3GL_DOUBLE\fP 
are accepted. The initial value is \%\f3GL_FLOAT\fP. 
.TP
\f2stride\fP 
Specifies the byte offset between consecutive 
vertexes. If \f2stride\fP is 0, the vertexes are understood to be tightly packed in 
the array. The initial value
is 0. 
.TP
\f2pointer\fP 
Specifies a pointer to the first coordinate of the first vertex in the
array. The initial value is 0.
.SH DESCRIPTION
\%\f3glVertexPointer\fP specifies the location and data format of an array of vertex coordinates
to use when rendering.
\f2size\fP specifies the number of coordinates per vertex and
\f2type\fP the data type of
the coordinates. \f2stride\fP specifies the byte stride from one
vertex to the next allowing vertexes and attributes
to be packed into a single array or stored in separate arrays.
(Single-array storage may be more efficient on some implementations;
see \%\f3glInterleavedArrays\fP.)
When a vertex array is
specified, \f2size\fP, \f2type\fP, \f2stride\fP, and \f2pointer\fP are saved as client-side
state.
.P
To enable and disable the vertex array, call \%\f3glEnableClientState\fP and
.br 
\%\f3glDisableClientState\fP with the argument \%\f3GL_VERTEX_ARRAY\fP. If
enabled, the vertex array is used when 
\%\f3glDrawArrays\fP, \%\f3glDrawElements\fP, or \%\f3glArrayElement\fP is called.
.P
Use \%\f3glDrawArrays\fP to construct a sequence of primitives (all of
the same type)
from prespecified vertex and vertex attribute arrays.
Use \%\f3glArrayElement\fP to specify primitives
by indexing vertexes and vertex attributes  and \%\f3glDrawElements\fP to
construct a sequence of primitives by indexing vertexes and vertex attributes.
.SH NOTES
\%\f3glVertexPointer\fP is available only if the GL version is 1.1 or greater.
.P
The vertex array is initially disabled and isn't accessed when
\%\f3glArrayElement\fP, \%\f3glDrawElements\fP or \%\f3glDrawArrays\fP is called.
.P
Execution of \%\f3glVertexPointer\fP is not allowed between the execution of
\%\f3glBegin\fP and the corresponding execution of \%\f3glEnd\fP,
but an error may or may not be generated. If no error is generated,
the operation is undefined.
.P
\%\f3glVertexPointer\fP is typically implemented on the client side.
.P
Vertex array parameters are client-side state and are therefore not
saved or restored by \%\f3glPushAttrib\fP and \%\f3glPopAttrib\fP.
Use \%\f3glPushClientAttrib\fP and \%\f3glPopClientAttrib\fP instead.
.SH ERRORS
\%\f3GL_INVALID_VALUE\fP is generated if \f2size\fP is not 2, 3, or 4.
.P
\%\f3GL_INVALID_ENUM\fP is generated if \f2type\fP is is not an accepted value.
.P
\%\f3GL_INVALID_VALUE\fP is generated if \f2stride\fP is negative.
.SH ASSOCIATED GETS  
\%\f3glIsEnabled\fP with argument \%\f3GL_VERTEX_ARRAY\fP
.br
\%\f3glGet\fP with argument \%\f3GL_VERTEX_ARRAY_SIZE\fP
.br
\%\f3glGet\fP with argument \%\f3GL_VERTEX_ARRAY_TYPE\fP
.br
\%\f3glGet\fP with argument \%\f3GL_VERTEX_ARRAY_STRIDE\fP
.br
\%\f3glGetPointerv\fP with argument \%\f3GL_VERTEX_ARRAY_POINTER\fP
.SH SEE ALSO 
\%\f3glArrayElement\fP,
\%\f3glColorPointer\fP,
\%\f3glDrawArrays\fP,
\%\f3glDrawElements\fP,
\%\f3glDrawRangeElements\fP,
\%\f3glEdgeFlagPointer\fP,
\%\f3glEnable\fP,
\%\f3glGetPointerv\fP,
\%\f3glIndexPointer\fP,
\%\f3glInterleavedArrays\fP,
\%\f3glNormalPointer\fP,
\%\f3glPopClientAttrib\fP,
\%\f3glPushClientAttrib\fP,
\%\f3glTexCoordPointer\fP
@


1.1
log
@Initial revision
@
text
@d1 2
d6 18
a23 5
.ds Dp Feb 04 10:58
.ds Dm 2 Apr  5  20
.ds Xs 37797     6
_header(VertexPointer,define an array of vertex data) 
_names(VertexPointer)
d28 2
a29 1
_phead(_param1)
d32 2
a33 1
_phead(_param2)
d41 2
a42 1
_phead(_param3) 
d44 1
a44 1
vertexes. If _param3 is 0, the vertexes are understood to be tightly packed in 
d47 2
a48 1
_phead(_param4) 
d52 1
a52 1
_cmnd specifies the location and data  of an array of vertex coordinates
d54 3
a56 3
_param1 specifies the number of coordinates per vertex and
_param2 the data type of
the coordinates. _param3 specifies the byte stride from one
d60 1
a60 1
see _cmnd(InterleavedArrays).)
d62 1
a62 1
specified, _param1, _param2, _param3, and _param4 are saved as client-side
d65 1
a65 1
To enable and disable the vertex array, call _cmnd(EnableClientState) and
d67 1
a67 1
_cmnd(DisableClientState) with the argument \%\f3GL_VERTEX_ARRAY\fP. If
d69 1
a69 1
_cmnd(DrawArrays), _cmnd(DrawElements), or _cmnd(ArrayElement) is called.
d71 1
a71 1
Use _cmnd(DrawArrays) to construct a sequence of primitives (all of
d74 2
a75 2
Use _cmnd(ArrayElement) to specify primitives
by indexing vertexes and vertex attributes  and _cmnd(DrawElements) to
d78 1
a78 1
_cmnd is available only if the GL version is 1.1 or greater.
d81 1
a81 1
_cmnd(ArrayElement), _cmnd(DrawElements) or _cmnd(DrawArrays) is called.
d83 2
a84 2
Execution of _cmnd is not allowed between the execution of
_cmnd(Begin) and the corresponding execution of _cmnd(End),
d88 1
a88 1
_cmnd is typically implemented on the client side.
d91 2
a92 2
saved or restored by _cmnd(PushAttrib) and _cmnd(PopAttrib).
Use _cmnd(PushClientAttrib) and _cmnd(PopClientAttrib) instead.
d94 1
a94 1
\%\f3GL_INVALID_VALUE\fP is generated if _param1 is not 2, 3, or 4.
d96 1
a96 1
\%\f3GL_INVALID_ENUM\fP is generated if _param2 is is not an accepted value.
d98 1
a98 1
\%\f3GL_INVALID_VALUE\fP is generated if _param3 is negative.
d100 1
a100 1
_cmnd(IsEnabled) with argument \%\f3GL_VERTEX_ARRAY\fP
d102 1
a102 1
_cmnd(Get) with argument \%\f3GL_VERTEX_ARRAY_SIZE\fP
d104 1
a104 1
_cmnd(Get) with argument \%\f3GL_VERTEX_ARRAY_TYPE\fP
d106 1
a106 1
_cmnd(Get) with argument \%\f3GL_VERTEX_ARRAY_STRIDE\fP
d108 1
a108 1
_cmnd(GetPointerv) with argument \%\f3GL_VERTEX_ARRAY_POINTER\fP
d110 14
a123 14
_cmnd(ArrayElement),
_cmnd(ColorPointer),
_cmnd(DrawArrays),
_cmnd(DrawElements),
_cmnd(DrawRangeElements),
_cmnd(EdgeFlagPointer),
_cmnd(Enable),
_cmnd(GetPointerv),
_cmnd(IndexPointer),
_cmnd(InterleavedArrays),
_cmnd(NormalPointer),
_cmnd(PopClientAttrib),
_cmnd(PushClientAttrib),
_cmnd(TexCoordPointer)
@


1.1.1.1
log
@win32-x11 source tree update March 26, 2001
@
text
@@
