head	1.2;
access;
symbols
	win32-x11-2001-03-26:1.1.1.1 SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2001.06.03.20.47.12;	author ssiddiqi;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.25.19.36.53;	author ssiddiqi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.03.25.19.36.53;	author ssiddiqi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Win32-X11 update sources check in, June 3, 2001 - ssiddiqi
@
text
@'\"! tbl|eqn | mmdoc
'\"macro stdmacro
.ds Vn Version 1.2
.ds Dt 24 September 1999
.ds Re Release 1.2.1
.ds Dp Apr 04 17:39
.ds Dm  Apr  5  200
.ds Xs 37360 15 evalcoord.gl
.TH GLEVALCOORD 3G
.SH NAME
.B "glEvalCoord1d, glEvalCoord1f, glEvalCoord2d, glEvalCoord2f, glEvalCoord1dv, glEvalCoord1fv, glEvalCoord2dv, glEvalCoord2fv
\- evaluate enabled one- and two-dimensional maps

.EQ
delim $$
.EN
.SH C SPECIFICATION
void \f3glEvalCoord1d\fP(
GLdouble \fIu\fP )
.nf
.fi
void \f3glEvalCoord1f\fP(
GLfloat \fIu\fP )
.nf
.fi
void \f3glEvalCoord2d\fP(
GLdouble \fIu\fP,
.nf
.ta \w'\f3void \fPglEvalCoord2d( 'u
	GLdouble \fIv\fP )
.fi
void \f3glEvalCoord2f\fP(
GLfloat \fIu\fP,
.nf
.ta \w'\f3void \fPglEvalCoord2f( 'u
	GLfloat \fIv\fP )
.fi

.SH PARAMETERS
.TP \w'\f2u\fP\ \ 'u 
\f2u\fP
Specifies a value that is the domain coordinate $u$ to the basis function
defined in a previous \%\f3glMap1\fP or \%\f3glMap2\fP command.
.TP
\f2v\fP
Specifies a value that is the domain coordinate $v$ to the basis function
defined in a previous \%\f3glMap2\fP command.
This argument is not present in a \%\f3glEvalCoord1\fP command.
.SH C SPECIFICATION
void \f3glEvalCoord1dv\fP(
const GLdouble \fI*u\fP )
.nf
.fi
void \f3glEvalCoord1fv\fP(
const GLfloat \fI*u\fP )
.nf
.fi
void \f3glEvalCoord2dv\fP(
const GLdouble \fI*u\fP )
.nf
.fi
void \f3glEvalCoord2fv\fP(
const GLfloat \fI*u\fP )
.nf
.fi

.SH PARAMETERS
.TP
\f2u\fP
Specifies a pointer to an array containing
either one or two domain coordinates.
The first coordinate is $u$.
The second coordinate is $v$,
which is present only in \%\f3glEvalCoord2\fP versions.
.SH DESCRIPTION
\%\f3glEvalCoord1\fP evaluates enabled one-dimensional maps at argument
\f2u\fP.
\%\f3glEvalCoord2\fP does the same for two-dimensional maps using
two domain values,
\f2u\fP and \f2v\fP.
To define a map, call \%\f3glMap1\fP and \%\f3glMap2\fP; to enable and
disable it, call \%\f3glEnable\fP and \%\f3glDisable\fP.
.P
When one of the \%\f3glEvalCoord\fP commands is issued,
all currently enabled maps of the indicated dimension are evaluated.
Then,
for each enabled map,
it is as if the corresponding GL command had been issued with the
computed value.
That is,
if \%\f3GL_MAP1_INDEX\fP or
\%\f3GL_MAP2_INDEX\fP is enabled,
a \%\f3glIndex\fP command is simulated.
If \%\f3GL_MAP1_COLOR_4\fP or
\%\f3GL_MAP2_COLOR_4\fP is enabled,
a \%\f3glColor\fP command is simulated.
If \%\f3GL_MAP1_NORMAL\fP or \%\f3GL_MAP2_NORMAL\fP is enabled,
a normal vector is produced,
and if any of
\%\f3GL_MAP1_TEXTURE_COORD_1\fP,
\%\f3GL_MAP1_TEXTURE_COORD_2\fP,
\%\f3GL_MAP1_TEXTURE_COORD_3\fP, 
\%\f3GL_MAP1_TEXTURE_COORD_4\fP,
\%\f3GL_MAP2_TEXTURE_COORD_1\fP,
\%\f3GL_MAP2_TEXTURE_COORD_2\fP,
\%\f3GL_MAP2_TEXTURE_COORD_3\fP, or
\%\f3GL_MAP2_TEXTURE_COORD_4\fP is enabled, then an appropriate \%\f3glTexCoord\fP command is simulated.
.P
For color,
color index,
normal,
and texture coordinates the GL uses evaluated values instead of current values for those evaluations
that are enabled,
and current values otherwise,
However,
the evaluated values do not update the current values.
Thus, if \%\f3glVertex\fP commands are interspersed with \%\f3glEvalCoord\fP
commands, the color,
normal,
and texture coordinates associated with the \%\f3glVertex\fP commands are not
affected by the values generated by the \%\f3glEvalCoord\fP commands,
but only by the most recent
\%\f3glColor\fP,
\%\f3glIndex\fP,
\%\f3glNormal\fP, and
\%\f3glTexCoord\fP commands.
.P
No commands are issued for maps that are not enabled.
If more than one texture evaluation is enabled for a particular dimension
(for example, \%\f3GL_MAP2_TEXTURE_COORD_1\fP and
\%\f3GL_MAP2_TEXTURE_COORD_2\fP),
then only the evaluation of the map that produces the larger
number of coordinates
(in this case, \%\f3GL_MAP2_TEXTURE_COORD_2\fP)
is carried out.
\%\f3GL_MAP1_VERTEX_4\fP overrides \%\f3GL_MAP1_VERTEX_3\fP,
and
\%\f3GL_MAP2_VERTEX_4\fP overrides \%\f3GL_MAP2_VERTEX_3\fP,
in the same manner.
If neither a three- nor a four-component vertex map is enabled for the
specified dimension,
the \%\f3glEvalCoord\fP command is ignored.
.P
If you have enabled automatic normal generation,
by calling \%\f3glEnable\fP with argument \%\f3GL_AUTO_NORMAL\fP,
\%\f3glEvalCoord2\fP generates surface normals analytically,
regardless of the contents or enabling of the \%\f3GL_MAP2_NORMAL\fP map.
Let
.sp
.ce
.EQ
bold m ~=~ {partial bold p} over {partial u} ~times~
  {partial bold p} over {partial v}
.EN 
.ce 0
.sp
.br
Then the generated normal $ bold n $ is 
.br
.ce
$bold n ~=~ bold m over { || bold m || }$
.ce 0
.sp
.br
If automatic normal generation is disabled,
the corresponding normal map \%\f3GL_MAP2_NORMAL\fP,
if enabled,
is used to produce a normal.
If neither automatic normal generation nor a normal map is enabled,
no normal is generated for 
\%\f3glEvalCoord2\fP commands.
.SH ASSOCIATED GETS
.nf
\%\f3glIsEnabled\fP with argument \%\f3GL_MAP1_VERTEX_3\fP
.br
\%\f3glIsEnabled\fP with argument \%\f3GL_MAP1_VERTEX_4\fP
.br
\%\f3glIsEnabled\fP with argument \%\f3GL_MAP1_INDEX\fP
.br
\%\f3glIsEnabled\fP with argument \%\f3GL_MAP1_COLOR_4\fP
.br
\%\f3glIsEnabled\fP with argument \%\f3GL_MAP1_NORMAL\fP
.br
\%\f3glIsEnabled\fP with argument \%\f3GL_MAP1_TEXTURE_COORD_1\fP
.br
\%\f3glIsEnabled\fP with argument \%\f3GL_MAP1_TEXTURE_COORD_2\fP
.br
\%\f3glIsEnabled\fP with argument \%\f3GL_MAP1_TEXTURE_COORD_3\fP
.br
\%\f3glIsEnabled\fP with argument \%\f3GL_MAP1_TEXTURE_COORD_4\fP
.br
\%\f3glIsEnabled\fP with argument \%\f3GL_MAP2_VERTEX_3\fP
.br
\%\f3glIsEnabled\fP with argument \%\f3GL_MAP2_VERTEX_4\fP
.br
\%\f3glIsEnabled\fP with argument \%\f3GL_MAP2_INDEX\fP
.br
\%\f3glIsEnabled\fP with argument \%\f3GL_MAP2_COLOR_4\fP
.br
\%\f3glIsEnabled\fP with argument \%\f3GL_MAP2_NORMAL\fP
.br
\%\f3glIsEnabled\fP with argument \%\f3GL_MAP2_TEXTURE_COORD_1\fP
.br
\%\f3glIsEnabled\fP with argument \%\f3GL_MAP2_TEXTURE_COORD_2\fP
.br
\%\f3glIsEnabled\fP with argument \%\f3GL_MAP2_TEXTURE_COORD_3\fP
.br
\%\f3glIsEnabled\fP with argument \%\f3GL_MAP2_TEXTURE_COORD_4\fP
.br
\%\f3glIsEnabled\fP with argument \%\f3GL_AUTO_NORMAL\fP
.br
\%\f3glGetMap\fP
.SH SEE ALSO
\%\f3glBegin\fP,
\%\f3glColor\fP,
\%\f3glEnable\fP,
\%\f3glEvalMesh\fP,
\%\f3glEvalPoint\fP,
\%\f3glIndex\fP,
\%\f3glMap1\fP,
\%\f3glMap2\fP, 
\%\f3glMapGrid\fP,
\%\f3glNormal\fP,
\%\f3glTexCoord\fP,
\%\f3glVertex\fP
@


1.1
log
@Initial revision
@
text
@d1 2
d6 8
a13 4
.ds Dp Feb 04 10:50
.ds Dm 7 Apr  5  20
.ds Xs 42414     8
_header(EvalCoord,evaluate enabled one- and two-dimensional maps)
d17 22
a38 1
_names(EvalCoord,[1-2][fd])
d40 2
a41 1
_phead(_param1)
d43 3
a45 2
defined in a previous _cmnd(Map1) or _cmnd(Map2) command.
_phead(_param2)
d47 20
a66 3
defined in a previous _cmnd(Map2) command.
This argument is not present in a _cmnd(EvalCoord1) command.
_names(EvalCoord,[1-2][fd]v)
d68 2
a69 1
_phead(_param1)
d74 1
a74 1
which is present only in _cmnd(EvalCoord2) versions.
d76 3
a78 3
_cmnd(EvalCoord1) evaluates enabled one-dimensional maps at argument
_param1(1).
_cmnd(EvalCoord2) does the same for two-dimensional maps using
d80 3
a82 3
_param1(1) and _param2(1).
To define a map, call _cmnd(Map1) and _cmnd(Map2); to enable and
disable it, call _cmnd(Enable) and _cmnd(Disable).
d84 1
a84 1
When one of the _cmnd(EvalCoord) commands is issued,
d93 1
a93 1
a _cmnd(Index) command is simulated.
d96 1
a96 1
a _cmnd(Color) command is simulated.
d107 1
a107 1
\%\f3GL_MAP2_TEXTURE_COORD_4\fP is enabled, then an appropriate _cmnd(TexCoord) command is simulated.
d117 1
a117 1
Thus, if _cmnd(Vertex) commands are interspersed with _cmnd(EvalCoord)
d120 2
a121 2
and texture coordinates associated with the _cmnd(Vertex) commands are not
affected by the values generated by the _cmnd(EvalCoord) commands,
d123 4
a126 4
_cmnd(Color),
_cmnd(Index),
_cmnd(Normal), and
_cmnd(TexCoord) commands.
d142 1
a142 1
the _cmnd(EvalCoord) command is ignored.
d145 2
a146 2
by calling _cmnd(Enable) with argument \%\f3GL_AUTO_NORMAL\fP,
_cmnd(EvalCoord2) generates surface normals analytically,
d171 1
a171 1
_cmnd(EvalCoord2) commands.
d174 1
a174 1
_cmnd(IsEnabled) with argument \%\f3GL_MAP1_VERTEX_3\fP
d176 1
a176 1
_cmnd(IsEnabled) with argument \%\f3GL_MAP1_VERTEX_4\fP
d178 1
a178 1
_cmnd(IsEnabled) with argument \%\f3GL_MAP1_INDEX\fP
d180 1
a180 1
_cmnd(IsEnabled) with argument \%\f3GL_MAP1_COLOR_4\fP
d182 1
a182 1
_cmnd(IsEnabled) with argument \%\f3GL_MAP1_NORMAL\fP
d184 1
a184 1
_cmnd(IsEnabled) with argument \%\f3GL_MAP1_TEXTURE_COORD_1\fP
d186 1
a186 1
_cmnd(IsEnabled) with argument \%\f3GL_MAP1_TEXTURE_COORD_2\fP
d188 1
a188 1
_cmnd(IsEnabled) with argument \%\f3GL_MAP1_TEXTURE_COORD_3\fP
d190 1
a190 1
_cmnd(IsEnabled) with argument \%\f3GL_MAP1_TEXTURE_COORD_4\fP
d192 1
a192 1
_cmnd(IsEnabled) with argument \%\f3GL_MAP2_VERTEX_3\fP
d194 1
a194 1
_cmnd(IsEnabled) with argument \%\f3GL_MAP2_VERTEX_4\fP
d196 1
a196 1
_cmnd(IsEnabled) with argument \%\f3GL_MAP2_INDEX\fP
d198 1
a198 1
_cmnd(IsEnabled) with argument \%\f3GL_MAP2_COLOR_4\fP
d200 1
a200 1
_cmnd(IsEnabled) with argument \%\f3GL_MAP2_NORMAL\fP
d202 1
a202 1
_cmnd(IsEnabled) with argument \%\f3GL_MAP2_TEXTURE_COORD_1\fP
d204 1
a204 1
_cmnd(IsEnabled) with argument \%\f3GL_MAP2_TEXTURE_COORD_2\fP
d206 1
a206 1
_cmnd(IsEnabled) with argument \%\f3GL_MAP2_TEXTURE_COORD_3\fP
d208 1
a208 1
_cmnd(IsEnabled) with argument \%\f3GL_MAP2_TEXTURE_COORD_4\fP
d210 1
a210 1
_cmnd(IsEnabled) with argument \%\f3GL_AUTO_NORMAL\fP
d212 1
a212 1
_cmnd(GetMap)
d214 12
a225 12
_cmnd(Begin),
_cmnd(Color),
_cmnd(Enable),
_cmnd(EvalMesh),
_cmnd(EvalPoint),
_cmnd(Index),
_cmnd(Map1),
_cmnd(Map2), 
_cmnd(MapGrid),
_cmnd(Normal),
_cmnd(TexCoord),
_cmnd(Vertex)
@


1.1.1.1
log
@win32-x11 source tree update March 26, 2001
@
text
@@
