head	1.2;
access;
symbols
	win32-x11-2001-03-26:1.1.1.1 SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2001.06.03.20.47.16;	author ssiddiqi;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.25.19.36.54;	author ssiddiqi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.03.25.19.36.54;	author ssiddiqi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Win32-X11 update sources check in, June 3, 2001 - ssiddiqi
@
text
@'\"! tbl|eqn | mmdoc
'\"macro stdmacro
.ds Vn Version 1.2
.ds Dt 10 Nov 1998
.ds Re Release 1.0
.ds Dp Apr 04 17:40
.ds Dm  Apr  4  200
.ds Xs 46379 18 fglfeedbackbuffer.gl
.TH FGLFEEDBACKBUFFER 
.SH NAME
.B "fglFeedbackBuffer
\- controls feedback mode

.SH FORTRAN SPECIFICATION
SUBROUTINE \f3fglFeedbackBuffer\fP(
INTEGER*4 \fIsize\fP,
.nf
.ta \w'\f3SUBROUTINE \fPfglFeedbackBuffer( 'u
	INTEGER*4 \fItype\fP,
	CHARACTER*8 \fIbuffer\fP )
.fi

.EQ
delim $$
.EN
.SH PARAMETERS
.TP \w'\fIbuffer\fP\ \ 'u 
\f2size\fP
Specifies the maximum number of values that can be written into \f2buffer\fP.
.TP
\f2type\fP 
Specifies a symbolic constant that describes the information
that will be returned for each vertex.
\f3GL_2D\fP,
\f3GL_3D\fP,
\f3GL_3D_COLOR\fP,
\f3GL_3D_COLOR_TEXTURE\fP, and
\f3GL_4D_COLOR_TEXTURE\fP are accepted.
.TP
\f2buffer\fP
Returns the feedback data.
.SH DESCRIPTION
The \f3fglFeedbackBuffer\fP function controls feedback.
Feedback, like selection, is a GL mode.
The mode is selected by calling
\f3fglRenderMode\fP with \f3GL_FEEDBACK\fP.
When the GL is in feedback mode,
no pixels are produced by rasterization.
Instead, information about primitives that would have been
rasterized is fed back to the application using the GL.
.P
\f3fglFeedbackBuffer\fP has three arguments:
\f2buffer\fP is a pointer to an array of floating-point values
into which feedback information is placed.
\f2size\fP indicates the size of the array.
\f2type\fP is a symbolic constant describing the information
that is fed back for each vertex.
\f3fglFeedbackBuffer\fP must be issued before feedback mode is enabled
(by calling \f3fglRenderMode\fP with argument \f3GL_FEEDBACK\fP).
Setting \f3GL_FEEDBACK\fP without establishing the feedback buffer,
or calling \f3fglFeedbackBuffer\fP while the GL is in feedback mode,
is an error.
.P
When \f3fglRenderMode\fP is called while in feedback mode, it returns the number of entries
placed in the feedback array, and resets the feedback array pointer to the base
of the feedback buffer. The returned value never exceeds \f2size\fP. If the feedback
data required more room than was available in \f2buffer\fP, 
\f3fglRenderMode\fP returns a negative value.
To take the GL out of feedback mode, call
\f3fglRenderMode\fP with a parameter value other than \f3GL_FEEDBACK\fP.
.P
While in feedback mode,
each primitive, bitmap, or pixel rectangle that would be rasterized
generates a block of values that are copied into the feedback array.
If doing so would cause the number of entries to exceed the maximum,
the block is partially written so as to fill the array
(if there is any room left at all),
and an overflow flag is set.
Each block begins with a code indicating the primitive type,
followed by values that describe the primitive's vertices and
associated data.
Entries are also written for bitmaps and pixel rectangles.
Feedback occurs after polygon culling and \f3fglPolygonMode\fP interpretation
of polygons has taken place,
so polygons that are culled are not returned in the feedback buffer.
It can also occur after polygons with more than three edges are broken up
into triangles,
if the GL implementation renders polygons by performing this decomposition.
.P
The \f3fglPassThrough\fP command can be used to insert a marker
into the feedback buffer.
See \f3fglPassThrough\fP.
.P
Following is the grammar for the blocks of values written
into the feedback buffer.
Each primitive is indicated with a unique identifying value
followed by some number of vertices.
Polygon entries include an integer value indicating how many vertices follow.
A vertex is fed back as some number of floating-point values,
as determined by \f2type\fP.
Colors are fed back as four values in RGBA mode and one value
in color index mode. 
.RS
.na
.sp
feedbackList \(<- feedbackItem feedbackList | feedbackItem
.sp
feedbackItem \(<- point | lineSegment | polygon | bitmap | pixelRectangle | passThru
.sp
point \(<- \f3GL_POINT_TOKEN\fP vertex
.sp
lineSegment \(<- \f3GL_LINE_TOKEN\fP vertex vertex | \f3GL_LINE_RESET_TOKEN\fP vertex vertex
.sp
polygon \(<- \f3GL_POLYGON_TOKEN\fP n polySpec
.sp
polySpec \(<- polySpec vertex | vertex vertex vertex
.sp
bitmap \(<- \f3GL_BITMAP_TOKEN\fP vertex 
.sp
pixelRectangle \(<- \f3GL_DRAW_PIXEL_TOKEN\fP vertex | \f3GL_COPY_PIXEL_TOKEN\fP vertex
.sp
passThru \(<- \f3GL_PASS_THROUGH_TOKEN\fP value
.sp
vertex \(<- 2d | 3d | 3dColor | 3dColorTexture | 4dColorTexture
.sp
2d \(<- value value
.sp
3d \(<- value value value
.sp
3dColor  \(<- value value value color
.sp
3dColorTexture \(<- value value value color tex
.sp
4dColorTexture \(<- value value value value color tex
.sp
color \(<- rgba | index
.sp
rgba \(<- value value value value
.sp
index \(<- value
.sp
tex \(<- value value value value
.sp
.RE
.P
.I value
is a floating-point number, 
and
.I n
is a floating-point integer giving the number of vertices in the polygon.
\f3GL_POINT_TOKEN\fP, 
\f3GL_LINE_TOKEN\fP,
\f3GL_LINE_RESET_TOKEN\fP,
\f3GL_POLYGON_TOKEN\fP,
\f3GL_BITMAP_TOKEN\fP,
\f3GL_DRAW_PIXEL_TOKEN\fP,
\f3GL_COPY_PIXEL_TOKEN\fP and
\f3GL_PASS_THROUGH_TOKEN\fP are symbolic floating-point constants.
\f3GL_LINE_RESET_TOKEN\fP is returned whenever the line stipple pattern
is reset.
The data returned as a vertex depends on the feedback \f2type\fP.
.P
The following table gives the correspondence between \f2type\fP
and the number of values per vertex.
\f2k\fP is 1 in color index mode and 4 in RGBA mode.
.sp
.ne
.TS
center tab(:);
lb lb cb cb cb
l l c c c.
_
Type:Coordinates:Color:Texture:Total Number of Values
_
\f3GL_2D\fP:\f2x\fP, \f2y\fP:::2
\f3GL_3D\fP:\f2x\fP, \f2y\fP, \f2z\fP:::3
\f3GL_3D_COLOR\fP:\f2x\fP, \f2y\fP, \f2z\fP:$k$::$3 ~+~ k$
\f3GL_3D_COLOR_TEXTURE\fP:\f2x\fP, \f2y\fP, \f2z\fP,:$k$:4:$7 ~+~ k$
\f3GL_4D_COLOR_TEXTURE\fP:\f2x\fP, \f2y\fP, \f2z\fP, \f2w\fP:$k$:4:$8 ~+~ k$
_
.TE

.P
Feedback vertex coordinates are in window coordinates,
except \f2w\fP,
which is in clip coordinates.
Feedback colors are lighted, if lighting is enabled.
Feedback texture coordinates are generated,
if texture coordinate generation is enabled.
They are always transformed by the texture matrix.
.SH NOTES
\f3fglFeedbackBuffer\fP, when used in a display list, is not compiled into the display list 
but is executed immediately. 
.P
When the _arbstring(multitexture) extension is supported, \f3fglFeedbackBuffer\fP
returns only the texture coordinates of texture unit _arbconst(TEXTURE0).
.SH ERRORS
\f3GL_INVALID_ENUM\fP is generated if \f2type\fP is not an accepted value.
.P
\f3GL_INVALID_VALUE\fP is generated if \f2size\fP is negative.
.P
\f3GL_INVALID_OPERATION\fP is generated if \f3fglFeedbackBuffer\fP is called while the
render mode is \f3GL_FEEDBACK\fP,
or if \f3fglRenderMode\fP is called with argument \f3GL_FEEDBACK\fP before
\f3fglFeedbackBuffer\fP is called at least once.
.P
\f3GL_INVALID_OPERATION\fP is generated if \f3fglFeedbackBuffer\fP
is executed between the execution of \f3fglBegin\fP
and the corresponding execution of \f3fglEnd\fP.
.SH ASSOCIATED GETS
\f3fglGet\fP with argument \f3GL_RENDER_MODE\fP
.br
\f3fglGet\fP with argument \f3GL_FEEDBACK_BUFFER_POINTER\fP
.br
\f3fglGet\fP with argument \f3GL_FEEDBACK_BUFFER_SIZE\fP
.br
\f3fglGet\fP with argument \f3GL_FEEDBACK_BUFFER_TYPE\fP
.SH SEE ALSO
\f3fglBegin\fP,
\f3fglLineStipple\fP,
\f3fglPassThrough\fP,
\f3fglPolygonMode\fP,
\f3fglRenderMode\fP,
\f3fglSelectBuffer\fP
@


1.1
log
@Initial revision
@
text
@d1 2
d6 17
a22 5
.ds Dp Feb 04 11:05
.ds Dm 9 Feb  4 11:
.ds Xs 26060     9
_header(FeedbackBuffer,controls feedback mode)
_names(FeedbackBuffer)
d27 5
a31 3
_phead(_param1)
Specifies the maximum number of values that can be written into _param3.
_phead(_param2) 
d39 2
a40 1
_phead(_param3)
d43 1
a43 1
The _cmnd function controls feedback.
d46 1
a46 1
_cmnd(RenderMode) with \f3GL_FEEDBACK\fP.
d52 2
a53 2
_cmnd has three arguments:
_param3 is a pointer to an array of floating-point values
d55 2
a56 2
_param1 indicates the size of the array.
_param2 is a symbolic constant describing the information
d58 2
a59 2
_cmnd must be issued before feedback mode is enabled
(by calling _cmnd(RenderMode) with argument \f3GL_FEEDBACK\fP).
d61 1
a61 1
or calling _cmnd while the GL is in feedback mode,
d64 1
a64 1
When _cmnd(RenderMode) is called while in feedback mode, it returns the number of entries
d66 3
a68 3
of the feedback buffer. The returned value never exceeds _param1. If the feedback
data required more room than was available in _param3, 
_cmnd(RenderMode) returns a negative value.
d70 1
a70 1
_cmnd(RenderMode) with a parameter value other than \f3GL_FEEDBACK\fP.
d83 1
a83 1
Feedback occurs after polygon culling and _cmnd(PolygonMode) interpretation
d90 1
a90 1
The _cmnd(PassThrough) command can be used to insert a marker
d92 1
a92 1
See _cmnd(PassThrough).
d100 1
a100 1
as determined by _param2.
d161 1
a161 1
The data returned as a vertex depends on the feedback _param2.
d163 1
a163 1
The following table gives the correspondence between _param2
d192 1
a192 1
_cmnd, when used in a display list, is not compiled into the display list 
d195 1
a195 1
When the _arbstring(multitexture) extension is supported, _cmnd
d198 1
a198 1
\f3GL_INVALID_ENUM\fP is generated if _param2 is not an accepted value.
d200 1
a200 1
\f3GL_INVALID_VALUE\fP is generated if _param1 is negative.
d202 1
a202 1
\f3GL_INVALID_OPERATION\fP is generated if _cmnd is called while the
d204 2
a205 2
or if _cmnd(RenderMode) is called with argument \f3GL_FEEDBACK\fP before
_cmnd is called at least once.
d207 3
a209 3
\f3GL_INVALID_OPERATION\fP is generated if _cmnd
is executed between the execution of _cmnd(Begin)
and the corresponding execution of _cmnd(End).
d211 1
a211 1
_cmnd(Get) with argument \f3GL_RENDER_MODE\fP
d213 1
a213 1
_cmnd(Get) with argument \f3GL_FEEDBACK_BUFFER_POINTER\fP
d215 1
a215 1
_cmnd(Get) with argument \f3GL_FEEDBACK_BUFFER_SIZE\fP
d217 1
a217 1
_cmnd(Get) with argument \f3GL_FEEDBACK_BUFFER_TYPE\fP
d219 6
a224 6
_cmnd(Begin),
_cmnd(LineStipple),
_cmnd(PassThrough),
_cmnd(PolygonMode),
_cmnd(RenderMode),
_cmnd(SelectBuffer)
@


1.1.1.1
log
@win32-x11 source tree update March 26, 2001
@
text
@@
