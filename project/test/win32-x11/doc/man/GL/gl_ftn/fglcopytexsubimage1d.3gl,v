head	1.2;
access;
symbols
	win32-x11-2001-03-26:1.1.1.1 SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2001.06.03.20.47.15;	author ssiddiqi;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.25.19.36.53;	author ssiddiqi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.03.25.19.36.53;	author ssiddiqi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Win32-X11 update sources check in, June 3, 2001 - ssiddiqi
@
text
@'\"! tbl|eqn | mmdoc
'\"macro stdmacro
.ds Vn Version 1.2
.ds Dt 10 Nov 1998
.ds Re Release 1.0
.ds Dp Apr 04 17:40
.ds Dm  Apr  4  200
.ds Xs 39909 12 fglcopytexsubimage1d.gl
.TH FGLCOPYTEXSUBIMAGE1D 
.SH NAME
.B "fglCopyTexSubImage1D
\- copy a one-dimensional texture subimage

.SH FORTRAN SPECIFICATION
SUBROUTINE \f3fglCopyTexSubImage1D\fP(
INTEGER*4 \fItarget\fP,
.nf
.ta \w'\f3SUBROUTINE \fPfglCopyTexSubImage1D( 'u
	INTEGER*4 \fIlevel\fP,
	INTEGER*4 \fIxoffset\fP,
	INTEGER*4 \fIx\fP,
	INTEGER*4 \fIy\fP,
	INTEGER*4 \fIwidth\fP )
.fi

.EQ
delim $$
.EN
.SH PARAMETERS
.TP \w'\fIxoffset\fP\ \ 'u 
\f2target\fP
Specifies the target texture.
Must be \f3GL_TEXTURE_1D\fP.
.TP
\f2level\fP
Specifies the level-of-detail number.
Level 0 is the base image level.
Level \f2n\fP is the \f2n\fPth mipmap reduction image.
.TP
\f2xoffset\fP
Specifies the texel offset within the texture array.
.TP
\f2x\fP, \f2y\fP
Specify the window coordinates of the left corner
of the row of pixels to be copied.
.TP
\f2width\fP
Specifies the width of the texture subimage.
.SH DESCRIPTION
\f3fglCopyTexSubImage1D\fP replaces a portion of a one-dimensional
texture image with pixels from the current \f3GL_READ_BUFFER\fP (rather
than from main memory, as is the case for \f3fglTexSubImage1D\fP).
.P
The screen-aligned pixel row with left corner at (\f2x\fP,\ \f2y\fP), and with
length \f2width\fP replaces the portion of the
texture array with x indices \f2xoffset\fP through $"xoffset" ~+~ "width" ~-~ 1$,
inclusive. The destination in the texture array may not 
include any texels outside the texture array as it was 
originally specified.
.P
The pixels in the row are processed exactly as if
\f3fglCopyPixels\fP had been called, but the process stops just before
final conversion.
At this point all pixel component values are clamped to the range [0,\ 1]
and then converted to the texture's internal format for storage in the texel
array.
.P
It is not an error to specify a subtexture with zero width, but
such a specification has no effect.
If any of the pixels within the specified row of the current
\f3GL_READ_BUFFER\fP are outside the read window associated with the current
rendering context, then the values obtained for those pixels are undefined.
.P
No change is made to the \f2internalformat\fP, \f2width\fP,
or \f2border\fP parameters of the specified texture
array or to texel values outside the specified subregion.
.SH NOTES
\f3fglCopyTexSubImage1D\fP is available only if the GL version is 1.1 or greater.
.P
Texturing has no effect in color index mode.
.P
\f3fglPixelStore\fP and \f3fglPixelTransfer\fP modes affect texture images
in exactly the way they affect \f3fglDrawPixels\fP.
.P
When the _arbstring(imaging) extension is supported, the RGBA components
copied from the framebuffer may be processed by the imaging pipeline.  See
\f3fglTexImage1D\fP for specific details.
.SH ERRORS
\f3GL_INVALID_ENUM\fP is generated if \f2target\fP is not \f3GL_TEXTURE_1D\fP.
.P
\f3GL_INVALID_OPERATION\fP is generated if the texture array has not
been defined by a previous \f3fglTexImage1D\fP or \f3fglCopyTexImage1D\fP operation.
.P
\f3GL_INVALID_VALUE\fP is generated if \f2level\fP is less than 0.
.P 
\f3GL_INVALID_VALUE\fP may be generated if \f2level\fP$>log sub 2$\f2 max\fP,
where \f2max\fP is the returned value of \f3GL_MAX_TEXTURE_SIZE\fP.
.P
\f3GL_INVALID_VALUE\fP is generated if \f2y\fP$ ~<~ ~-b$
or if \f2width\fP$ ~<~ ~-b$, where $b$ 
is the border width of the texture array.
.P
\f3GL_INVALID_VALUE\fP is generated if $"xoffset" ~<~ ~-b$, or 
$("xoffset"~+~"width") ~>~ (w-b)$,
where $w$ is the \f3GL_TEXTURE_WIDTH\fP, and $b$ is the \f3GL_TEXTURE_BORDER\fP 
of the texture image being modified.
Note that $w$ includes twice the border width.
.P
.SH ASSOCIATED GETS
\f3fglGetTexImage\fP
.br
\f3fglIsEnabled\fP with argument \f3GL_TEXTURE_1D\fP
.SH SEE ALSO
\f3fglCopyPixels\fP,
\f3fglCopyTexImage1D\fP,
\f3fglCopyTexImage2D\fP,
\f3fglCopyTexSubImage2D\fP,
\f3fglCopyTexSubImage3D\fP,
\f3fglPixelStore\fP,
\f3fglPixelTransfer\fP,
\f3fglReadBuffer\fP,
\f3fglTexEnv\fP,
\f3fglTexGen\fP,
\f3fglTexImage1D\fP,
\f3fglTexImage2D\fP,
\f3fglTexImage3D\fP,
\f3fglTexParameter\fP,
\f3fglTexSubImage1D\fP,
\f3fglTexSubImage2D\fP,
\f3fglTexSubImage3D\fP
@


1.1
log
@Initial revision
@
text
@d1 2
d6 20
a25 5
.ds Dp Feb 04 11:05
.ds Dm 2 Feb  4 11:
.ds Xs 28384     6
_header(CopyTexSubImage1D,copy a one-dimensional texture subimage)
_names(CopyTexSubImage1D)
d30 2
a31 1
_phead(_param1)
d34 2
a35 1
_phead(_param2)
d39 2
a40 1
_phead(_param3)
d42 2
a43 1
_phead(_param4 _param5)
d46 2
a47 1
_phead(_param6)
d50 1
a50 1
_cmnd replaces a portion of a one-dimensional
d52 1
a52 1
than from main memory, as is the case for _cmnd(TexSubImage1D)).
d54 3
a56 3
The screen-aligned pixel row with left corner at (_param4,\ _param5), and with
length _param6 replaces the portion of the
texture array with x indices _param3 through $_eqnparam3 ~+~ _eqnparam6 ~-~ 1$,
d62 1
a62 1
_cmnd(CopyPixels) had been called, but the process stops just before
d78 1
a78 1
_cmnd is available only if the GL version is 1.1 or greater.
d82 2
a83 2
_cmnd(PixelStore) and _cmnd(PixelTransfer) modes affect texture images
in exactly the way they affect _cmnd(DrawPixels).
d87 1
a87 1
_cmnd(TexImage1D) for specific details.
d89 1
a89 1
\f3GL_INVALID_ENUM\fP is generated if _param1 is not \f3GL_TEXTURE_1D\fP.
d92 1
a92 1
been defined by a previous _cmnd(TexImage1D) or _cmnd(CopyTexImage1D) operation.
d94 1
a94 1
\f3GL_INVALID_VALUE\fP is generated if _param2 is less than 0.
d96 1
a96 1
\f3GL_INVALID_VALUE\fP may be generated if _param2$>log sub 2$\f2 max\fP,
d99 2
a100 2
\f3GL_INVALID_VALUE\fP is generated if _param5$ ~<~ ~-b$
or if _param6$ ~<~ ~-b$, where $b$ 
d103 2
a104 2
\f3GL_INVALID_VALUE\fP is generated if $_eqnparam3 ~<~ ~-b$, or 
$(_eqnparam3~+~_eqnparam6) ~>~ (w-b)$,
d110 1
a110 1
_cmnd(GetTexImage)
d112 1
a112 1
_cmnd(IsEnabled) with argument \f3GL_TEXTURE_1D\fP
d114 17
a130 17
_cmnd(CopyPixels),
_cmnd(CopyTexImage1D),
_cmnd(CopyTexImage2D),
_cmnd(CopyTexSubImage2D),
_cmnd(CopyTexSubImage3D),
_cmnd(PixelStore),
_cmnd(PixelTransfer),
_cmnd(ReadBuffer),
_cmnd(TexEnv),
_cmnd(TexGen),
_cmnd(TexImage1D),
_cmnd(TexImage2D),
_cmnd(TexImage3D),
_cmnd(TexParameter),
_cmnd(TexSubImage1D),
_cmnd(TexSubImage2D),
_cmnd(TexSubImage3D)
@


1.1.1.1
log
@win32-x11 source tree update March 26, 2001
@
text
@@
