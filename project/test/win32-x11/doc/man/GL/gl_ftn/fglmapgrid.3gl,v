head	1.2;
access;
symbols
	win32-x11-2001-03-26:1.1.1.1 SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2001.06.03.20.47.16;	author ssiddiqi;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.25.19.36.54;	author ssiddiqi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.03.25.19.36.54;	author ssiddiqi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Win32-X11 update sources check in, June 3, 2001 - ssiddiqi
@
text
@'\"! tbl|eqn | mmdoc
'\"macro stdmacro
.ds Vn Version 1.2
.ds Dt 10 Nov 1998
.ds Re Release 1.0
.ds Dp Apr 04 17:40
.ds Dm  Apr  4  200
.ds Xs 19550 10 fglmapgrid.gl
.TH FGLMAPGRID 
.SH NAME
.B "fglMapGrid1d, fglMapGrid1f, fglMapGrid2d, fglMapGrid2f
\- define a one- or two-dimensional mesh

.SH FORTRAN SPECIFICATION
SUBROUTINE \f3fglMapGrid1d\fP(
INTEGER*4 \fIun\fP,
.nf
.ta \w'\f3SUBROUTINE \fPfglMapGrid1d( 'u
	REAL*8 \fIu1\fP,
	REAL*8 \fIu2\fP )
.fi
SUBROUTINE \f3fglMapGrid1f\fP(
INTEGER*4 \fIun\fP,
.nf
.ta \w'\f3SUBROUTINE \fPfglMapGrid1f( 'u
	REAL*4 \fIu1\fP,
	REAL*4 \fIu2\fP )
.fi
SUBROUTINE \f3fglMapGrid2d\fP(
INTEGER*4 \fIun\fP,
.nf
.ta \w'\f3SUBROUTINE \fPfglMapGrid2d( 'u
	REAL*8 \fIu1\fP,
	REAL*8 \fIu2\fP,
	INTEGER*4 \fIvn\fP,
	REAL*8 \fIv1\fP,
	REAL*8 \fIv2\fP )
.fi
SUBROUTINE \f3fglMapGrid2f\fP(
INTEGER*4 \fIun\fP,
.nf
.ta \w'\f3SUBROUTINE \fPfglMapGrid2f( 'u
	REAL*4 \fIu1\fP,
	REAL*4 \fIu2\fP,
	INTEGER*4 \fIvn\fP,
	REAL*4 \fIv1\fP,
	REAL*4 \fIv2\fP )
.fi

.EQ
delim $$
.EN
.SH PARAMETERS
.TP \w'\f2un\fP\ \ 'u 
\f2un\fP
Specifies the number of partitions in the grid range interval
[\f2u1\fP, \f2u2\fP].
Must be positive.
.TP
\f2u1\fP, \f2u2\fP
Specify the mappings for integer grid domain values $i~=~0$ and $i~=~"un"$.
.TP
\f2vn\fP
Specifies the number of partitions in the grid range interval
[\f2v1\fP, \f2v2\fP]
.br
(\f3fglMapGrid2\fP only).
.TP
\f2v1\fP, \f2v2\fP
Specify the mappings for integer grid domain values $j~=~0$ and $j~=~"vn"$
.br
(\f3fglMapGrid2\fP only).
.SH DESCRIPTION
\f3fglMapGrid\fP and \f3fglEvalMesh\fP are used together to efficiently
generate and evaluate a series of evenly-spaced map domain values.
\f3fglEvalMesh\fP steps through the integer domain
of a one- or two-dimensional grid,
whose range is the domain of the evaluation maps specified by
\f3fglMap1\fP and \f3fglMap2\fP.
.P
\f3fglMapGrid1\fP and \f3fglMapGrid2\fP specify the linear grid mappings
between the $i$
(or $i$ and $j$)
integer grid coordinates,
to the $u$
(or $u$ and $v$)
floating-point evaluation map coordinates.
See \f3fglMap1\fP and \f3fglMap2\fP for details of how $u$ and $v$ coordinates
are evaluated.
.P
\f3fglMapGrid1\fP specifies a single linear mapping
such that integer grid coordinate 0 maps exactly to \f2u1\fP,
and integer grid coordinate \f2un\fP maps exactly to \f2u2\fP.
All other integer grid coordinates $i$ are mapped so that
.sp
.ce
.EQ
u ~=~ i ("u2" - "u1") / "un" ~+~ "u1"
.EN
.sp
\f3fglMapGrid2\fP specifies two such linear mappings.
One maps integer grid coordinate $i~=~0$ exactly to \f2u1\fP,
and integer grid coordinate $i~=~"un"$ exactly to \f2u2\fP.
The other maps integer grid coordinate $j~=~0$ exactly to \f2v1\fP,
and integer grid coordinate $j~=~"vn"$ exactly to \f2v2\fP.
Other integer grid coordinates $i$ and $j$ are mapped such that
.P
.ce
.EQ
u ~=~ i ("u2" - "u1") / "un" ~+~ "u1"
.EN
.P
.ce
.EQ
v ~=~ j ("v2" - "v1") / "vn" ~+~ "v1"
.EN
.P
The mappings specified by \f3fglMapGrid\fP are used identically by
\f3fglEvalMesh\fP and \f3fglEvalPoint\fP.
.SH ERRORS
\f3GL_INVALID_VALUE\fP is generated if either \f2un\fP or \f2vn\fP is not
positive.
.P
\f3GL_INVALID_OPERATION\fP is generated if \f3fglMapGrid\fP
is executed between the execution of \f3fglBegin\fP
and the corresponding execution of \f3fglEnd\fP.
.SH ASSOCIATED GETS
\f3fglGet\fP with argument \f3GL_MAP1_GRID_DOMAIN\fP
.br
\f3fglGet\fP with argument \f3GL_MAP2_GRID_DOMAIN\fP
.br
\f3fglGet\fP with argument \f3GL_MAP1_GRID_SEGMENTS\fP
.br
\f3fglGet\fP with argument \f3GL_MAP2_GRID_SEGMENTS\fP
.SH SEE ALSO
\f3fglEvalCoord\fP,
\f3fglEvalMesh\fP,
\f3fglEvalPoint\fP,
\f3fglMap1\fP,
\f3fglMap2\fP
@


1.1
log
@Initial revision
@
text
@d1 2
d6 44
a49 5
.ds Dp Feb 04 11:05
.ds Dm 2 Feb  4 11:
.ds Xs 53033     5
_header(MapGrid,define a one- or two-dimensional mesh)
_names(MapGrid,[12]u*[df])
d54 2
a55 1
_phead(_param1)
d57 1
a57 1
[_param2, _param3].
d59 5
a63 3
_phead(_param2 _param3)
Specify the mappings for integer grid domain values $i~=~0$ and $i~=~_eqnparam1$.
_phead(_param4)
d65 1
a65 1
[_param5, _param6]
d67 4
a70 3
(_cmnd(MapGrid2) only).
_phead(_param5 _param6)
Specify the mappings for integer grid domain values $j~=~0$ and $j~=~_eqnparam4$
d72 1
a72 1
(_cmnd(MapGrid2) only).
d74 1
a74 1
_cmnd and _cmnd(EvalMesh) are used together to efficiently
d76 1
a76 1
_cmnd(EvalMesh) steps through the integer domain
d79 1
a79 1
_cmnd(Map1) and _cmnd(Map2).
d81 1
a81 1
_cmnd(MapGrid1) and _cmnd(MapGrid2) specify the linear grid mappings
d88 1
a88 1
See _cmnd(Map1) and _cmnd(Map2) for details of how $u$ and $v$ coordinates
d91 3
a93 3
_cmnd(MapGrid1) specifies a single linear mapping
such that integer grid coordinate 0 maps exactly to _param2,
and integer grid coordinate _param1 maps exactly to _param3.
d98 1
a98 1
u ~=~ i (_eqnparam3 - _eqnparam2) / _eqnparam1 ~+~ _eqnparam2
d101 5
a105 5
_cmnd(MapGrid2) specifies two such linear mappings.
One maps integer grid coordinate $i~=~0$ exactly to _param2,
and integer grid coordinate $i~=~_eqnparam1$ exactly to _param3.
The other maps integer grid coordinate $j~=~0$ exactly to _param5,
and integer grid coordinate $j~=~_eqnparam4$ exactly to _param6.
d110 1
a110 1
u ~=~ i (_eqnparam3 - _eqnparam2) / _eqnparam1 ~+~ _eqnparam2
d115 1
a115 1
v ~=~ j (_eqnparam6 - _eqnparam5) / _eqnparam4 ~+~ _eqnparam5
d118 2
a119 2
The mappings specified by _cmnd are used identically by
_cmnd(EvalMesh) and _cmnd(EvalPoint).
d121 1
a121 1
\f3GL_INVALID_VALUE\fP is generated if either _param1 or _param4 is not
d124 3
a126 3
\f3GL_INVALID_OPERATION\fP is generated if _cmnd
is executed between the execution of _cmnd(Begin)
and the corresponding execution of _cmnd(End).
d128 1
a128 1
_cmnd(Get) with argument \f3GL_MAP1_GRID_DOMAIN\fP
d130 1
a130 1
_cmnd(Get) with argument \f3GL_MAP2_GRID_DOMAIN\fP
d132 1
a132 1
_cmnd(Get) with argument \f3GL_MAP1_GRID_SEGMENTS\fP
d134 1
a134 1
_cmnd(Get) with argument \f3GL_MAP2_GRID_SEGMENTS\fP
d136 5
a140 5
_cmnd(EvalCoord),
_cmnd(EvalMesh),
_cmnd(EvalPoint),
_cmnd(Map1),
_cmnd(Map2)
@


1.1.1.1
log
@win32-x11 source tree update March 26, 2001
@
text
@@
