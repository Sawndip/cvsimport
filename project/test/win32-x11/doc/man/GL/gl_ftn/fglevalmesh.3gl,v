head	1.2;
access;
symbols
	win32-x11-2001-03-26:1.1.1.1 SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2001.06.03.20.47.16;	author ssiddiqi;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.25.19.36.53;	author ssiddiqi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.03.25.19.36.53;	author ssiddiqi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Win32-X11 update sources check in, June 3, 2001 - ssiddiqi
@
text
@'\"! eqn | mmdoc
'\"macro stdmacro
.ds Vn Version 1.2
.ds Dt 10 Nov 1998
.ds Re Release 1.0
.ds Dp Apr 04 17:40
.ds Dm  Apr  4  200
.ds Xs 2934 13 fglevalmesh.gl
.TH FGLEVALMESH 
.SH NAME
.B "fglEvalMesh1, fglEvalMesh2
\- compute a one- or two-dimensional grid of points or lines

.SH FORTRAN SPECIFICATION
SUBROUTINE \f3fglEvalMesh1\fP(
INTEGER*4 \fImode\fP,
.nf
.ta \w'\f3SUBROUTINE \fPfglEvalMesh1( 'u
	INTEGER*4 \fIi1\fP,
	INTEGER*4 \fIi2\fP )
.fi

.EQ
delim $$
.EN
.SH PARAMETERS
.TP \w'\f2mode\fP\ \ 'u 
\f2mode\fP
In \f3fglEvalMesh1\fP, specifies whether to compute a one-dimensional mesh of points or lines.
Symbolic constants
\f3GL_POINT\fP and
\f3GL_LINE\fP are accepted.
.TP
\f2i1\fP, \f2i2\fP
Specify the first and last integer values for grid domain variable $i$.
.SH FORTRAN SPECIFICATION
SUBROUTINE \f3fglEvalMesh2\fP(
INTEGER*4 \fImode\fP,
.nf
.ta \w'\f3SUBROUTINE \fPfglEvalMesh2( 'u
	INTEGER*4 \fIi1\fP,
	INTEGER*4 \fIi2\fP,
	INTEGER*4 \fIj1\fP,
	INTEGER*4 \fIj2\fP )
.fi

.SH PARAMETERS
.TP
\f2mode\fP
In \f3fglEvalMesh2\fP, specifies whether to compute a two-dimensional mesh of points, lines,
or polygons.
Symbolic constants
\f3GL_POINT\fP,
\f3GL_LINE\fP, and
\f3GL_FILL\fP are accepted.
.TP
\f2i1\fP, \f2i2\fP
Specify the first and last integer values for grid domain variable $i$.
.TP
\f2j1\fP, \f2j2\fP
Specify the first and last integer values for grid domain variable $j$.
.SH DESCRIPTION
\f3fglMapGrid\fP and \f3fglEvalMesh\fP are used in tandem to efficiently
generate and evaluate a series of evenly-spaced map domain values.
\f3fglEvalMesh\fP steps through the integer domain of a one- or two-dimensional grid,
whose range is the domain of the evaluation maps specified by
\f3fglMap1\fP and \f3fglMap2\fP.
\f2mode\fP determines whether the resulting vertices are connected as
points,
lines,
or filled polygons.
.P
In the one-dimensional case,
\f3fglEvalMesh1\fP,
the mesh is generated as if the following code fragment were executed:
.nf
.IP
\f7
glBegin( \f2type\f7 );
for ( i = \f2i1\fP; i <= \f2i2\fP; i += 1 )
   glEvalCoord1( i$^cdot^DELTA u ~+~ u sub 1$ );
glEnd();
\fP
.RE
.fi
where
.sp
.in
$ DELTA u ~=~ (u sub 2 ~-~ u sub 1 ) ^/^ n$
.sp
.in 0
.P
and $n$, $u sub 1$, and $u sub 2$ are the arguments to the most recent
\f3fglMapGrid1\fP command.
\f2type\fP is \f3GL_POINTS\fP if \f2mode\fP is \f3GL_POINT\fP,
or \f3GL_LINES\fP if \f2mode\fP is \f3GL_LINE\fP.
.P
The one absolute numeric requirement is that if $i ~=~ n$, then the
value computed from $ i^cdot^DELTA u ~+~ u sub 1$ is exactly $u sub 2$.
.P
In the two-dimensional case, \f3fglEvalMesh2\fP, let 
.nf
.IP
$ DELTA u ~=~ mark ( u sub 2 ~-~ u sub 1 ) ^/^ n$
.sp
$ DELTA v ~=~ lineup ( v sub 2 ~-~ v sub 1 ) ^/^ m$,
.fi
.RE
.P
where $n$, $u sub 1$, $u sub 2$, $m$, $v sub 1$, and $v sub 2$ are the
arguments to the most recent \f3fglMapGrid2\fP command.  Then, if
\f2mode\fP is \f3GL_FILL\fP, the \f3fglEvalMesh2\fP command is equivalent
to:
.nf
.IP
\f7
for ( j = \f2j1\fP; j < \f2j2\fP; j += 1 ) {
   glBegin( GL_QUAD_STRIP );
   for ( i = \f2i1\fP; i <= \f2i2\fP; i += 1 ) {
      glEvalCoord2( i$^cdot^DELTA u ~+~ u sub 1$, j$^cdot^DELTA v ~+~ v sub 1$ );
      glEvalCoord2( i$^cdot^DELTA u ~+~ u sub 1$, (j+1)$^cdot^DELTA v ~+~ v sub 1$ );
   }
   glEnd();
}
\fP
.RE
.fi
.P
If \f2mode\fP is \f3GL_LINE\fP, then a call to \f3fglEvalMesh2\fP is equivalent to:
.nf
.IP
\f7
for ( j = \f2j1\fP; j <= \f2j2\fP; j += 1 ) {
   glBegin( GL_LINE_STRIP );
   for ( i = \f2i1\fP; i <= \f2i2\fP; i += 1 )
      glEvalCoord2( i$^cdot^DELTA u ~+~ u sub 1$, j$^cdot^DELTA v ~+~ v sub 1$ );
   glEnd();
}
.sp
for ( i = \f2i1\fP;  i <= \f2i2\fP; i += 1 ) {
   glBegin( GL_LINE_STRIP );
   for ( j = \f2j1\fP; j <= \f2j1\fP; j += 1 )
      glEvalCoord2( i$^cdot^DELTA u ~+~ u sub 1$, j$^cdot^DELTA v ~+~ v sub 1 $ );
   glEnd();
}
\fP
.RE
.fi
.P
And finally, if \f2mode\fP is \f3GL_POINT\fP, then a call to
\f3fglEvalMesh2\fP is equivalent to:
.nf
.IP
\f7
glBegin( GL_POINTS );
for ( j = \f2j1\fP; j <= \f2j2\fP; j += 1 )
   for ( i = \f2i1\fP; i <= \f2i2\fP; i += 1 )
      glEvalCoord2( i$^cdot^DELTA u ~+~ u sub 1$, j$^cdot^DELTA v ~+~ v sub 1$ );
glEnd();
\fP
.RE
.fi
.P
In all three cases, the only absolute numeric requirements are that if $i~=~n$,
then the value computed from $i^cdot^DELTA u ~+~ u sub 1$ is exactly $u
sub 2$, and if $j~=~m$, then the value computed from
$j ^cdot^ DELTA v ~+~ v sub 1$ is exactly $v sub 2$.
.SH ERRORS
\f3GL_INVALID_ENUM\fP is generated if \f2mode\fP is not an accepted value.
.P
\f3GL_INVALID_OPERATION\fP is generated if \f3fglEvalMesh\fP
is executed between the execution of \f3fglBegin\fP
and the corresponding execution of \f3fglEnd\fP.
.SH ASSOCIATED GETS
\f3fglGet\fP with argument \f3GL_MAP1_GRID_DOMAIN\fP
.br
\f3fglGet\fP with argument \f3GL_MAP2_GRID_DOMAIN\fP
.br
\f3fglGet\fP with argument \f3GL_MAP1_GRID_SEGMENTS\fP
.br
\f3fglGet\fP with argument \f3GL_MAP2_GRID_SEGMENTS\fP
.SH SEE ALSO
\f3fglBegin\fP,
\f3fglEvalCoord\fP,
\f3fglEvalPoint\fP,
\f3fglMap1\fP,
\f3fglMap2\fP,
\f3fglMapGrid\fP
@


1.1
log
@Initial revision
@
text
@d1 2
d6 17
a22 5
.ds Dp Feb 04 11:05
.ds Dm 3 Feb  4 11:
.ds Xs 32277     7
_header(EvalMesh, compute a one- or two-dimensional grid of points or lines)
_names(EvalMesh1)
d27 3
a29 2
_phead(_param1)
In _cmnd(EvalMesh1), specifies whether to compute a one-dimensional mesh of points or lines.
d33 2
a34 1
_phead(_param2 _param3)
d36 11
a46 1
_names(EvalMesh2)
d48 3
a50 2
_phead(_param1)
In _cmnd(EvalMesh2), specifies whether to compute a two-dimensional mesh of points, lines,
d56 2
a57 1
_phead(_param2 _param3)
d59 2
a60 1
_phead(_param4 _param5)
d63 1
a63 1
_cmnd(MapGrid) and _cmnd are used in tandem to efficiently
d65 1
a65 1
_cmnd steps through the integer domain of a one- or two-dimensional grid,
d67 2
a68 2
_cmnd(Map1) and _cmnd(Map2).
_param1(1) determines whether the resulting vertices are connected as
d74 1
a74 1
_cmnd(EvalMesh1),
d80 1
a80 1
for ( i = _param2; i <= _param3; i += 1 )
d94 3
a96 3
_cmnd(MapGrid1) command.
\f2type\fP is \f3GL_POINTS\fP if _param1(1) is \f3GL_POINT\fP,
or \f3GL_LINES\fP if _param1(1) is \f3GL_LINE\fP.
d101 1
a101 1
In the two-dimensional case, _cmnd(EvalMesh2), let 
d111 2
a112 2
arguments to the most recent _cmnd(MapGrid2) command.  Then, if
_param1(2) is \f3GL_FILL\fP, the _cmnd(EvalMesh2) command is equivalent
d117 1
a117 1
for ( j = _param4; j < _param5; j += 1 ) {
d119 1
a119 1
   for ( i = _param2; i <= _param3; i += 1 ) {
d129 1
a129 1
If _param1 is \f3GL_LINE\fP, then a call to _cmnd(EvalMesh2) is equivalent to:
d133 1
a133 1
for ( j = _param4; j <= _param5; j += 1 ) {
d135 1
a135 1
   for ( i = _param2; i <= _param3; i += 1 )
d140 1
a140 1
for ( i = _param2;  i <= _param3; i += 1 ) {
d142 1
a142 1
   for ( j = _param4; j <= _param4; j += 1 )
d150 2
a151 2
And finally, if _param1 is \f3GL_POINT\fP, then a call to
_cmnd(EvalMesh2) is equivalent to:
d156 2
a157 2
for ( j = _param4; j <= _param5; j += 1 )
   for ( i = _param2; i <= _param3; i += 1 )
d169 1
a169 1
\f3GL_INVALID_ENUM\fP is generated if _param1 is not an accepted value.
d171 3
a173 3
\f3GL_INVALID_OPERATION\fP is generated if _cmnd
is executed between the execution of _cmnd(Begin)
and the corresponding execution of _cmnd(End).
d175 1
a175 1
_cmnd(Get) with argument \f3GL_MAP1_GRID_DOMAIN\fP
d177 1
a177 1
_cmnd(Get) with argument \f3GL_MAP2_GRID_DOMAIN\fP
d179 1
a179 1
_cmnd(Get) with argument \f3GL_MAP1_GRID_SEGMENTS\fP
d181 1
a181 1
_cmnd(Get) with argument \f3GL_MAP2_GRID_SEGMENTS\fP
d183 6
a188 6
_cmnd(Begin),
_cmnd(EvalCoord),
_cmnd(EvalPoint),
_cmnd(Map1),
_cmnd(Map2),
_cmnd(MapGrid)
@


1.1.1.1
log
@win32-x11 source tree update March 26, 2001
@
text
@@
