head	1.2;
access;
symbols
	win32-x11-2001-03-26:1.1.1.1 SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2001.06.03.20.47.16;	author ssiddiqi;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.25.19.36.54;	author ssiddiqi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.03.25.19.36.54;	author ssiddiqi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Win32-X11 update sources check in, June 3, 2001 - ssiddiqi
@
text
@'\"! tbl|eqn | mmdoc
'\"macro stdmacro
.ds Vn Version 1.2
.ds Dt 10 Nov 1998
.ds Re Release 1.0
.ds Dp Apr 04 17:40
.ds Dm  Apr  4  200
.ds Xs 7144 20 fgllight.gl
.TH FGLLIGHT 
.SH NAME
.B "fglLightf, fglLighti, fglLightfv, fglLightiv
\- set light source parameters

.SH FORTRAN SPECIFICATION
SUBROUTINE \f3fglLightf\fP(
INTEGER*4 \fIlight\fP,
.nf
.ta \w'\f3SUBROUTINE \fPfglLightf( 'u
	INTEGER*4 \fIpname\fP,
	REAL*4 \fIparam\fP )
.fi
SUBROUTINE \f3fglLighti\fP(
INTEGER*4 \fIlight\fP,
.nf
.ta \w'\f3SUBROUTINE \fPfglLighti( 'u
	INTEGER*4 \fIpname\fP,
	INTEGER*4 \fIparam\fP )
.fi

.EQ
delim $$
.EN
.SH PARAMETERS
.TP \w'\fIparams\fP\ \ 'u 
\f2light\fP
Specifies a light.
The number of lights depends on the implementation,
but at least eight lights are supported.
They are identified by symbolic names of the form \f3GL_LIGHT\fP$i$
where 0 \(<= $ i $ < \f3GL_MAX_LIGHTS\fP.
.TP
\f2pname\fP
Specifies a single-valued light source parameter for \f2light\fP.
\f3GL_SPOT_EXPONENT\fP,
\f3GL_SPOT_CUTOFF\fP,
\f3GL_CONSTANT_ATTENUATION\fP,
\f3GL_LINEAR_ATTENUATION\fP, and
\f3GL_QUADRATIC_ATTENUATION\fP are accepted.
.TP
\f2param\fP
Specifies the value that parameter \f2pname\fP of light source \f2light\fP
will be set to.
.SH FORTRAN SPECIFICATION
SUBROUTINE \f3fglLightfv\fP(
INTEGER*4 \fIlight\fP,
.nf
.ta \w'\f3SUBROUTINE \fPfglLightfv( 'u
	INTEGER*4 \fIpname\fP,
	CHARACTER*8 \fIparams\fP )
.fi
SUBROUTINE \f3fglLightiv\fP(
INTEGER*4 \fIlight\fP,
.nf
.ta \w'\f3SUBROUTINE \fPfglLightiv( 'u
	INTEGER*4 \fIpname\fP,
	CHARACTER*8 \fIparams\fP )
.fi

.SH PARAMETERS
.TP
\f2light\fP
Specifies a light.
The number of lights depends on the implementation, but
at least eight lights are supported.
They are identified by symbolic names of the form \f3GL_LIGHT\fP$i$
where 0 \(<= $ i $ < \f3GL_MAX_LIGHTS\fP.
.TP
\f2pname\fP
Specifies a light source parameter for \f2light\fP.
\f3GL_AMBIENT\fP,
\f3GL_DIFFUSE\fP,
\f3GL_SPECULAR\fP,
\f3GL_POSITION\fP,
\f3GL_SPOT_CUTOFF\fP,
\f3GL_SPOT_DIRECTION\fP,
\f3GL_SPOT_EXPONENT\fP,
\f3GL_CONSTANT_ATTENUATION\fP,
\f3GL_LINEAR_ATTENUATION\fP, and
\f3GL_QUADRATIC_ATTENUATION\fP are accepted.
.TP
\f2params\fP
Specifies a pointer to the value or values that parameter \f2pname\fP
of light source \f2light\fP will be set to.
.SH DESCRIPTION
\f3fglLight\fP sets the values of individual light source parameters.
\f2light\fP names the light and is a symbolic name of the form \f3GL_LIGHT\fP$i$,
where 0 \(<= i < \f3GL_MAX_LIGHTS\fP.
\f2pname\fP specifies one of ten light source parameters,
again by symbolic name.
\f2params\fP is either a single value or a pointer to an array that contains
the new values.
.P
To enable and disable lighting calculation, call \f3fglEnable\fP
and \f3fglDisable\fP with argument \f3GL_LIGHTING\fP. Lighting is
initially disabled.
When it is enabled,
light sources that are enabled contribute to the lighting calculation.
Light source $i$ is enabled and disabled using \f3fglEnable\fP and
\f3fglDisable\fP with argument \f3GL_LIGHT\fP$i$. 
.P
The ten light parameters are as follows:
.TP 20
\f3GL_AMBIENT\fP
\f2params\fP contains four integer or floating-point values that specify
the ambient RGBA intensity of the light.
Integer values are mapped linearly such that the most positive representable
value maps to 1.0,
and the most negative representable value maps to \-1.0.
Floating-point values are mapped directly.
Neither integer nor floating-point values are clamped.
The initial ambient light intensity is (0, 0, 0, 1).
.TP
\f3GL_DIFFUSE\fP
\f2params\fP contains four integer or floating-point values that specify
the diffuse RGBA intensity of the light.
Integer values are mapped linearly such that the most positive representable
value maps to 1.0,
and the most negative representable value maps to \-1.0.
Floating-point values are mapped directly.
Neither integer nor floating-point values are clamped.
The initial value
for \f3GL_LIGHT0\fP is (1, 1, 1, 1); for other lights, the
initial value is (0, 0, 0, 0). 
.TP
\f3GL_SPECULAR\fP
\f2params\fP contains four integer or floating-point values that specify
the specular RGBA intensity of the light.
Integer values are mapped linearly such that the most positive representable
value maps to 1.0,
and the most negative representable value maps to \-1.0.
Floating-point values are mapped directly.
Neither integer nor floating-point values are clamped.
The initial value
for \f3GL_LIGHT0\fP is (1, 1, 1, 1); for other lights, the
initial value is (0, 0, 0, 0). 
.TP
\f3GL_POSITION\fP
\f2params\fP contains four integer or floating-point values that specify
the position of the light in homogeneous object coordinates.
Both integer and floating-point values are mapped directly.
Neither integer nor floating-point values are clamped.
.IP
The position is transformed by the modelview matrix when
\f3fglLight\fP is called (just as if it were a point),
and it is stored in eye coordinates.
If the $w$ component of the position is 0,
the light is treated as a directional source.
Diffuse and specular lighting calculations take the light's direction,
but not its actual position,
into account,
and attenuation is disabled.
Otherwise,
diffuse and specular lighting calculations are based on the actual location
of the light in eye coordinates,
and attenuation is enabled.
The initial position is (0, 0, 1, 0);
thus, the initial light source is directional,
parallel to, and in the direction of the $-z$ axis.
.TP
\f3GL_SPOT_DIRECTION\fP
\f2params\fP contains three integer or floating-point values that specify
the direction of the light in homogeneous object coordinates.
Both integer and floating-point values are mapped directly.
Neither integer nor floating-point values are clamped.
.IP
The spot direction is transformed by the inverse of the modelview matrix when
\f3fglLight\fP is called (just as if it were a normal),
and it is stored in eye coordinates.
It is significant only when \f3GL_SPOT_CUTOFF\fP is not 180,
which it is initially.
The initial direction is (0, 0, \-1).
.TP
\f3GL_SPOT_EXPONENT\fP
\f2params\fP is a single integer or floating-point value that specifies
the intensity distribution of the light.
Integer and floating-point values are mapped directly.
Only values in the range [0,128] are accepted.
.IP
Effective light intensity is attenuated by the cosine of the angle between
the direction of the light and the direction from the light to the vertex
being lighted,
raised to the power of the spot exponent.
Thus, higher spot exponents result in a more focused light source,
regardless of the spot cutoff angle (see \f3GL_SPOT_CUTOFF\fP, next paragraph).
The initial spot exponent is 0,
resulting in uniform light distribution.
.TP
\f3GL_SPOT_CUTOFF\fP
\f2params\fP is a single integer or floating-point value that specifies
the maximum spread angle of a light source.
Integer and floating-point values are mapped directly.
Only values in the range [0,90] and the special value 180
are accepted.
If the angle between the direction of the light and the direction from the
light to the vertex being lighted is greater than the spot cutoff angle,
the light is completely masked.
.BP
Otherwise, its intensity is controlled by the spot exponent and the
attenuation factors.
The initial spot cutoff is 180,
resulting in uniform light distribution.
.TP
\f3GL_CONSTANT_ATTENUATION\fP
.TP
\f3GL_LINEAR_ATTENUATION \fP
.TP
\f3GL_QUADRATIC_ATTENUATION\fP
\f2params\fP is a single integer or floating-point value that specifies
one of the three light attenuation factors.
Integer and floating-point values are mapped directly.
Only nonnegative values are accepted.
If the light is positional,
rather than directional,
its intensity is attenuated by the reciprocal of the sum of the constant
factor, the linear factor times the distance between the light
and the vertex being lighted,
and the quadratic factor times the square of the same distance.
The initial attenuation factors are (1, 0, 0),
resulting in no attenuation.
.SH NOTES
It is always the case that \f3GL_LIGHT\fP$i$ = \f3GL_LIGHT0\fP + $i$.
.SH ERRORS
\f3GL_INVALID_ENUM\fP is generated if either \f2light\fP or \f2pname\fP
is not an accepted value.
.P
\f3GL_INVALID_VALUE\fP is generated if a spot exponent value is specified
outside the range [0,128],
or if spot cutoff is specified outside the range [0,90] (except for the
special value 180),
or if a negative attenuation factor is specified.
.P
\f3GL_INVALID_OPERATION\fP is generated if \f3fglLight\fP is executed between
the execution of
\f3fglBegin\fP and the corresponding execution of \f3fglEnd\fP.
.SH ASSOCIATED GETS
\f3fglGetLight\fP
.br
\f3fglIsEnabled\fP with argument \f3GL_LIGHTING\fP
.SH SEE ALSO
\f3fglColorMaterial\fP,
\f3fglLightModel\fP,
\f3fglMaterial\fP
@


1.1
log
@Initial revision
@
text
@d1 2
d6 24
a29 5
.ds Dp Feb 04 11:05
.ds Dm 0 Feb  4 11:
.ds Xs 33725    10
_header(Light,set light source parameters)
_names(Light,[fi])
d34 2
a35 1
_phead(_param1)
d41 3
a43 2
_phead(_param2)
Specifies a single-valued light source parameter for _param1.
d49 3
a51 2
_phead(_param3)
Specifies the value that parameter _param2 of light source _param1
d53 16
a68 1
_names(Light,[fi]v)
d70 2
a71 1
_phead(_param1)
d77 3
a79 2
_phead(_param2)
Specifies a light source parameter for _param1.
d90 4
a93 3
_phead(_param3)
Specifies a pointer to the value or values that parameter _param2
of light source _param1 will be set to.
d95 2
a96 2
_cmnd sets the values of individual light source parameters.
_param1 names the light and is a symbolic name of the form \f3GL_LIGHT\fP$i$,
d98 1
a98 1
_param2 specifies one of ten light source parameters,
d100 1
a100 1
_param3 is either a single value or a pointer to an array that contains
d103 2
a104 2
To enable and disable lighting calculation, call _cmnd(Enable)
and _cmnd(Disable) with argument \f3GL_LIGHTING\fP. Lighting is
d108 2
a109 2
Light source $i$ is enabled and disabled using _cmnd(Enable) and
_cmnd(Disable) with argument \f3GL_LIGHT\fP$i$. 
d114 1
a114 1
_param3 contains four integer or floating-point values that specify
d124 1
a124 1
_param3 contains four integer or floating-point values that specify
d136 1
a136 1
_param3 contains four integer or floating-point values that specify
d148 1
a148 1
_param3 contains four integer or floating-point values that specify
d154 1
a154 1
_cmnd is called (just as if it were a point),
d171 1
a171 1
_param3 contains three integer or floating-point values that specify
d177 1
a177 1
_cmnd is called (just as if it were a normal),
d184 1
a184 1
_param3 is a single integer or floating-point value that specifies
d199 1
a199 1
_param3 is a single integer or floating-point value that specifies
d218 1
a218 1
_param3 is a single integer or floating-point value that specifies
d233 1
a233 1
\f3GL_INVALID_ENUM\fP is generated if either _param1 or _param2
d242 1
a242 1
\f3GL_INVALID_OPERATION\fP is generated if _cmnd is executed between
d244 1
a244 1
_cmnd(Begin) and the corresponding execution of _cmnd(End).
d246 1
a246 1
_cmnd(GetLight)
d248 1
a248 1
_cmnd(IsEnabled) with argument \f3GL_LIGHTING\fP
d250 3
a252 3
_cmnd(ColorMaterial),
_cmnd(LightModel),
_cmnd(Material)
@


1.1.1.1
log
@win32-x11 source tree update March 26, 2001
@
text
@@
