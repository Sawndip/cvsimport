head	1.2;
access;
symbols
	win32-x11-2001-03-26:1.1.1.1 SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2001.06.03.20.47.17;	author ssiddiqi;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.25.19.36.54;	author ssiddiqi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.03.25.19.36.54;	author ssiddiqi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Win32-X11 update sources check in, June 3, 2001 - ssiddiqi
@
text
@'\"! eqn | mmdoc
'\"macro stdmacro
.ds Vn Version 1.2
.ds Dt 10 Nov 1998
.ds Re Release 1.0
.ds Dp Apr 04 17:40
.ds Dm  Apr  4  200
.ds Xs 23578 8 fglpolygonstipple.gl
.TH FGLPOLYGONSTIPPLE 
.SH NAME
.B "fglPolygonStipple
\- set the polygon stippling pattern

.SH FORTRAN SPECIFICATION
SUBROUTINE \f3fglPolygonStipple\fP(
CHARACTER*256 \fImask\fP )
.nf
.fi

.EQ
delim $$
.EN
.SH PARAMETERS
.TP \w'\f2mask\fP\ \ 'u 
\f2mask\fP
Specifies a pointer to a $32 ~times~ 32$ stipple pattern that will be unpacked
from memory in the same way that \f3fglDrawPixels\fP unpacks pixels.
.SH DESCRIPTION
Polygon stippling,
like line stippling
(see \f3fglLineStipple\fP),
masks out certain fragments produced by rasterization,
creating a pattern.
Stippling is independent of polygon antialiasing.
.P
\f2mask\fP is a pointer to a $32 ~times~ 32$ stipple pattern that is stored
in memory just like the pixel data supplied to a \f3fglDrawPixels\fP
call with 
.I
height
and
.I width
both equal to 32, a pixel format
of \f3GL_COLOR_INDEX\fP, and data type 
of \f3GL_BITMAP\fP.
That is,
the stipple pattern is represented as a $32 ~times~ 32$ array
of 1-bit color indices packed in unsigned bytes.
\f3fglPixelStore\fP parameters like \f3GL_UNPACK_SWAP_BYTES\fP
and \f3GL_UNPACK_LSB_FIRST\fP affect the assembling of the bits into a
stipple pattern.
Pixel transfer operations
(shift, offset, pixel map)
are not applied to the stipple image,
however.
.P
To enable and disable polygon stippling, call
\f3fglEnable\fP and \f3fglDisable\fP
with argument \f3GL_POLYGON_STIPPLE\fP. Polygon stippling is initially
disabled. If it's enabled,
a rasterized polygon fragment with window coordinates $x sub w$ and $y sub w$
is sent to the next stage of the GL if and only if the
($x sub w~roman mod~32$)th bit in the ($y sub w~roman mod~32$)th row
of the stipple pattern is 1 (one).
When polygon stippling is disabled, it is as if the stipple pattern
consists of all 1's.
.SH ERRORS
\f3GL_INVALID_OPERATION\fP is generated if \f3fglPolygonStipple\fP
is executed between the execution of \f3fglBegin\fP
and the corresponding execution of \f3fglEnd\fP.
.SH ASSOCIATED GETS
\f3fglGetPolygonStipple\fP
.br
\f3fglIsEnabled\fP with argument \f3GL_POLYGON_STIPPLE\fP
.SH SEE ALSO
\f3fglDrawPixels\fP,
\f3fglLineStipple\fP,
\f3fglPixelStore\fP,
\f3fglPixelTransfer\fP
@


1.1
log
@Initial revision
@
text
@d1 2
d6 14
a19 5
.ds Dp Feb 04 11:05
.ds Dm 9 Feb  4 11:
.ds Xs 22714     4
_header(PolygonStipple,set the polygon stippling pattern)
_names(PolygonStipple)
d24 2
a25 1
_phead(_param1)
d27 1
a27 1
from memory in the same way that _cmnd(DrawPixels) unpacks pixels.
d31 1
a31 1
(see _cmnd(LineStipple)),
d36 2
a37 2
_param1 is a pointer to a $32 ~times~ 32$ stipple pattern that is stored
in memory just like the pixel data supplied to a _cmnd(DrawPixels)
d49 1
a49 1
_cmnd(PixelStore) parameters like \f3GL_UNPACK_SWAP_BYTES\fP
d58 1
a58 1
_cmnd(Enable) and _cmnd(Disable)
d68 3
a70 3
\f3GL_INVALID_OPERATION\fP is generated if _cmnd
is executed between the execution of _cmnd(Begin)
and the corresponding execution of _cmnd(End).
d72 1
a72 1
_cmnd(GetPolygonStipple)
d74 1
a74 1
_cmnd(IsEnabled) with argument \f3GL_POLYGON_STIPPLE\fP
d76 4
a79 4
_cmnd(DrawPixels),
_cmnd(LineStipple),
_cmnd(PixelStore),
_cmnd(PixelTransfer)
@


1.1.1.1
log
@win32-x11 source tree update March 26, 2001
@
text
@@
