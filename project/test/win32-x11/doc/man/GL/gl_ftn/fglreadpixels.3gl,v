head	1.2;
access;
symbols
	win32-x11-2001-03-26:1.1.1.1 SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2001.06.03.20.47.17;	author ssiddiqi;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.25.19.36.54;	author ssiddiqi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.03.25.19.36.54;	author ssiddiqi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Win32-X11 update sources check in, June 3, 2001 - ssiddiqi
@
text
@'\"! tbl|eqn | mmdoc
'\"macro stdmacro
.ds Vn Version 1.2
.ds Dt 10 Nov 1998
.ds Re Release 1.0
.ds Dp Apr 04 17:40
.ds Dm  Apr  4  200
.ds Xs 59212 25 fglreadpixels.gl
.TH FGLREADPIXELS 
.SH NAME
.B "fglReadPixels
\- read a block of pixels from the frame buffer

.SH FORTRAN SPECIFICATION
SUBROUTINE \f3fglReadPixels\fP(
INTEGER*4 \fIx\fP,
.nf
.ta \w'\f3SUBROUTINE \fPfglReadPixels( 'u
	INTEGER*4 \fIy\fP,
	INTEGER*4 \fIwidth\fP,
	INTEGER*4 \fIheight\fP,
	INTEGER*4 \fIformat\fP,
	INTEGER*4 \fItype\fP,
	CHARACTER*8 \fIpixels\fP )
.fi

.EQ
delim $$
.EN
.SH PARAMETERS
.TP \w'\f2x\fP\ \f2y\fP\ \ 'u 
\f2x\fP, \f2y\fP
Specify the window coordinates of the first pixel
that is read from the frame buffer.
This location is the lower left corner of a rectangular block of pixels.
.TP
\f2width\fP, \f2height\fP
Specify the dimensions of the pixel rectangle.
\f2width\fP and \f2height\fP of one correspond to a single pixel.
.TP
\f2format\fP
Specifies the format of the pixel data.
The following symbolic values are accepted:
\f3GL_COLOR_INDEX\fP,
\f3GL_STENCIL_INDEX\fP,
\f3GL_DEPTH_COMPONENT\fP,
\f3GL_RED\fP,
\f3GL_GREEN\fP,
\f3GL_BLUE\fP,
\f3GL_ALPHA\fP,
\f3GL_RGB\fP,
\f3GL_BGR\fP,
\f3GL_RGBA\fP,
\f3GL_BGRA\fP,
\f3GL_LUMINANCE\fP, and
\f3GL_LUMINANCE_ALPHA\fP.
.TP
\f2type\fP
Specifies the data type of the pixel data.
Must be one of
\f3GL_UNSIGNED_BYTE\fP,
\f3GL_BYTE\fP,
\f3GL_BITMAP\fP,
\f3GL_UNSIGNED_SHORT\fP,
\f3GL_SHORT\fP,
\f3GL_UNSIGNED_INT\fP,
\f3GL_INT\fP,
\f3GL_FLOAT\fP,
\f3GL_UNSIGNED_BYTE_3_3_2\fP,
\f3GL_UNSIGNED_BYTE_2_3_3_REV\fP,
\f3GL_UNSIGNED_SHORT_5_6_5\fP,
\f3GL_UNSIGNED_SHORT_5_6_5_REV\fP,
\f3GL_UNSIGNED_SHORT_4_4_4_4\fP,
\f3GL_UNSIGNED_SHORT_4_4_4_4_REV\fP,
\f3GL_UNSIGNED_SHORT_5_5_5_1\fP,
\f3GL_UNSIGNED_SHORT_1_5_5_5_REV\fP,
\f3GL_UNSIGNED_INT_8_8_8_8\fP,
\f3GL_UNSIGNED_INT_8_8_8_8_REV\fP,
\f3GL_UNSIGNED_INT_10_10_10_2\fP, or
\f3GL_UNSIGNED_INT_2_10_10_10_REV\fP.
.TP
\f2pixels\fP
Returns the pixel data.
.SH DESCRIPTION
\f3fglReadPixels\fP returns pixel data from the frame buffer,
starting with the pixel whose lower left corner
is at location (\f2x\fP, \f2y\fP),
into client memory starting at location \f2pixels\fP.
Several parameters control the processing of the pixel data before
it is placed into client memory.
These parameters are set with three commands:
\f3fglPixelStore\fP,
\f3fglPixelTransfer\fP, and
\f3fglPixelMap\fP.
This reference page describes the effects on \f3fglReadPixels\fP of most,
but not all of the parameters specified by these three commands.
.P
When the _arbstring(imaging) extension is supported, the pixel data may
be processed by additional operations including color table lookup,
color matrix tranformations, convolutions, histograms and minimum and
maximun pixel value computations.
.P
\f3fglReadPixels\fP returns values from each pixel with lower left corner at
(\f2x\fP + $i$, \f2y\fP + $j$) for 0 \(<= $i$ < \f2width\fP and 
0 \(<= $j$ < \f2height\fP.
This pixel is said to be the $i$th pixel in the $j$th row. 
Pixels are returned in row order from the lowest to the highest row,
left to right in each row.
.P
\f2format\fP specifies the format for the returned pixel values;
accepted values are:
.TP 10
\f3GL_COLOR_INDEX\fP
Color indices are read from the color buffer
selected by \f3fglReadBuffer\fP.
Each index is converted to fixed point,
shifted left or right depending on the value and sign of \f3GL_INDEX_SHIFT\fP,
and added to \f3GL_INDEX_OFFSET\fP. 
If \f3GL_MAP_COLOR\fP is \f3GL_TRUE\fP,
indices are replaced by their mappings in the table \f3GL_PIXEL_MAP_I_TO_I\fP.
.TP
\f3GL_STENCIL_INDEX\fP
Stencil values are read from the stencil buffer.
Each index is converted to fixed point,
shifted left or right depending on the value and sign of \f3GL_INDEX_SHIFT\fP,
and added to \f3GL_INDEX_OFFSET\fP. 
If \f3GL_MAP_STENCIL\fP is \f3GL_TRUE\fP,
indices are replaced by their mappings in the table \f3GL_PIXEL_MAP_S_TO_S\fP.
.TP
\f3GL_DEPTH_COMPONENT\fP
Depth values are read from the depth buffer.
Each component is converted to floating point such that the minimum depth
value maps to 0 and the maximum value maps to 1.
Each component is then multiplied by \f3GL_DEPTH_SCALE\fP,
added to \f3GL_DEPTH_BIAS\fP,
and finally clamped to the range [0,1].
.TP
\f3GL_RED\fP
.TP
\f3GL_GREEN\fP
.TP
\f3GL_BLUE\fP
.TP
\f3GL_ALPHA\fP
.TP
\f3GL_RGB\fP
.TP
\f3GL_BGR\fP
.TP
\f3GL_RGBA\fP
.TP
\f3GL_BGRA\fP
.TP
\f3GL_LUMINANCE\fP
.TP
\f3GL_LUMINANCE_ALPHA\fP
Processing differs depending on whether color buffers store color indices
or RGBA color components.
If color indices are stored,
they are read from the color buffer selected by \f3fglReadBuffer\fP.
Each index is converted to fixed point,
shifted left or right depending on the value and sign of \f3GL_INDEX_SHIFT\fP,
and added to \f3GL_INDEX_OFFSET\fP. 
Indices are then replaced by the red,
green,
blue,
and alpha values obtained by indexing the tables
\f3GL_PIXEL_MAP_I_TO_R\fP,
\f3GL_PIXEL_MAP_I_TO_G\fP,
\f3GL_PIXEL_MAP_I_TO_B\fP, and
\f3GL_PIXEL_MAP_I_TO_A\fP.
Each table must be of size $2 sup n$, but $n$ may be different for 
different tables. 
Before an index is used to look up a value in a table of
size $2 sup n$, it must be masked against $2 sup n - 1$.
.IP
If RGBA color components are stored in the color buffers,
they are read from the color buffer selected by \f3fglReadBuffer\fP.
Each color component is converted to floating point such that zero intensity
maps to 0.0 and full intensity maps to 1.0.
Each component is then multiplied by \f3GL_c_SCALE\fP and
added to \f3GL_c_BIAS\fP,
where \f2c\fP is RED, GREEN, BLUE, or ALPHA. 
Finally,
if \f3GL_MAP_COLOR\fP is \f3GL_TRUE\fP,
each component is clamped to the range [0,\ 1],
scaled to the size of its corresponding table, and is then 
replaced by its mapping in the table
\f3GL_PIXEL_MAP_c_TO_c\fP,
where \f2c\fP is R, G, B, or A.
.IP
Unneeded data is then discarded.
For example,
\f3GL_RED\fP discards the green, blue, and alpha components,
while \f3GL_RGB\fP discards only the alpha component.
\f3GL_LUMINANCE\fP computes a single-component value as the sum of
the red,
green,
and blue components,
and \f3GL_LUMINANCE_ALPHA\fP does the same,
while keeping alpha as a second value.
The final values are clamped to the range [0,\ 1].
.P
The shift,
scale,
bias,
and lookup factors just described are all specified by 
.br
\f3fglPixelTransfer\fP.
The lookup table contents themselves are specified by \f3fglPixelMap\fP.
.P 
Finally, the indices or components
are converted to the proper format,
as specified by \f2type\fP.
If \f2format\fP is \f3GL_COLOR_INDEX\fP or \f3GL_STENCIL_INDEX\fP
and \f2type\fP is not \f3GL_FLOAT\fP,
each index is masked with the mask value given in the following table.
If \f2type\fP is \f3GL_FLOAT\fP, then each integer index is converted to
single-precision floating-point format.
.P 
If \f2format\fP is
\f3GL_RED\fP,
\f3GL_GREEN\fP,
\f3GL_BLUE\fP,
\f3GL_ALPHA\fP,
\f3GL_RGB\fP,
\f3GL_BGR\fP,
\f3GL_RGBA\fP,
\f3GL_BGRA\fP,
\f3GL_LUMINANCE\fP, or
\f3GL_LUMINANCE_ALPHA\fP and \f2type\fP is not \f3GL_FLOAT\fP,
each component is multiplied by the multiplier shown in the following table.
If type is \f3GL_FLOAT\fP, then each component is passed as is
(or converted to the client's single-precision floating-point format if
it is different from the one used by the GL).
.P
.TS
center tab(:);
l cb cb
l c c.
_
\f2type\fP:index mask:component conversion
_
.sp .5
\f3GL_UNSIGNED_BYTE\fP:$2"^"8 - 1$:$(2"^"8 - 1)  c$
\f3GL_BYTE\fP:$2"^"7 - 1$:$[(2"^"8 - 1) c - 1] / 2$
\f3GL_BITMAP\fP:$1$:$1$
\f3GL_UNSIGNED_SHORT\fP:$2"^"16 - 1$:$(2"^"16 - 1) c$
\f3GL_SHORT\fP:$2"^"15 - 1$:$[(2"^"16 - 1) c - 1] / 2$
\f3GL_UNSIGNED_INT\fP:$2"^"32 - 1$:$(2"^"32 - 1) c$
\f3GL_INT\fP:$2"^"31 - 1$:$[(2"^"32 - 1) c - 1] / 2$
\f3GL_FLOAT\fP:none:$c$
_
.TE
.P
Return values are placed in memory as follows.
If \f2format\fP is
\f3GL_COLOR_INDEX\fP,
\f3GL_STENCIL_INDEX\fP,
\f3GL_DEPTH_COMPONENT\fP,
\f3GL_RED\fP,
\f3GL_GREEN\fP,
\f3GL_BLUE\fP,
\f3GL_ALPHA\fP, or 
\f3GL_LUMINANCE\fP,
a single value is returned and the data for the $i$th pixel in the $j$th row
is placed in location $(j)~"width"~+~i$.
\f3GL_RGB\fP and \f3GL_BGR\fP return three values,
\f3GL_RGBA\fP and \f3GL_BGRA\fP return four values,
and \f3GL_LUMINANCE_ALPHA\fP returns two values for each pixel,
with all values corresponding to a single pixel occupying contiguous space
in \f2pixels\fP.
Storage parameters set by \f3fglPixelStore\fP,
such as \f3GL_PACK_LSB_FIRST\fP and \f3GL_PACK_SWAP_BYTES\fP,
affect the way that data is written into memory.
See \f3fglPixelStore\fP for a description.
.SH NOTES
Values for pixels that lie outside the window
connected to the current GL context are undefined.
.P
If an error is generated,
no change is made to the contents of \f2pixels\fP.
.SH ERRORS
\f3GL_INVALID_ENUM\fP is generated if \f2format\fP or \f2type\fP is not an
accepted value.
.P
\f3GL_INVALID_ENUM\fP is generated if \f2type\fP is \f3GL_BITMAP\fP and \f2format\fP is
not \f3GL_COLOR_INDEX\fP or \f3GL_STENCIL_INDEX\fP.
.P
\f3GL_INVALID_VALUE\fP is generated if either \f2width\fP or \f2height\fP is negative.
.P
\f3GL_INVALID_OPERATION\fP is generated if \f2format\fP is \f3GL_COLOR_INDEX\fP
and the color buffers store RGBA color components.
.P
\f3GL_INVALID_OPERATION\fP is generated if \f2format\fP is \f3GL_STENCIL_INDEX\fP
and there is no stencil buffer.
.P
\f3GL_INVALID_OPERATION\fP is generated if \f2format\fP is \f3GL_DEPTH_COMPONENT\fP
and there is no depth buffer.
.P
\f3GL_INVALID_OPERATION\fP is generated if \f3fglReadPixels\fP
is executed between the execution of \f3fglBegin\fP
and the corresponding execution of \f3fglEnd\fP.
.P
\f3GL_INVALID_OPERATION\fP is generated if \f2type\fP is one of
\f3GL_UNSIGNED_BYTE_3_3_2\fP,
\f3GL_UNSIGNED_BYTE_2_3_3_REV\fP,
\f3GL_UNSIGNED_SHORT_5_6_5\fP, or
\f3GL_UNSIGNED_SHORT_5_6_5_REV\fP
and \f2format\fP is not \f3GL_RGB\fP.
.P
\f3GL_INVALID_OPERATION\fP is generated if \f2type\fP is one of
\f3GL_UNSIGNED_SHORT_4_4_4_4\fP,
\f3GL_UNSIGNED_SHORT_4_4_4_4_REV\fP,
\f3GL_UNSIGNED_SHORT_5_5_5_1\fP,
\f3GL_UNSIGNED_SHORT_1_5_5_5_REV\fP,
\f3GL_UNSIGNED_INT_8_8_8_8\fP,
\f3GL_UNSIGNED_INT_8_8_8_8_REV\fP,
\f3GL_UNSIGNED_INT_10_10_10_2\fP, or
\f3GL_UNSIGNED_INT_2_10_10_10_REV\fP
and \f2format\fP is neither \f3GL_RGBA\fP nor \f3GL_BGRA\fP.
.P
The formats \f3GL_BGR\fP, and \f3GL_BGRA\fP and types 
\f3GL_UNSIGNED_BYTE_3_3_2\fP,
\f3GL_UNSIGNED_BYTE_2_3_3_REV\fP,
\f3GL_UNSIGNED_SHORT_5_6_5\fP,
\f3GL_UNSIGNED_SHORT_5_6_5_REV\fP,
\f3GL_UNSIGNED_SHORT_4_4_4_4\fP,
\f3GL_UNSIGNED_SHORT_4_4_4_4_REV\fP,
\f3GL_UNSIGNED_SHORT_5_5_5_1\fP,
\f3GL_UNSIGNED_SHORT_1_5_5_5_REV\fP,
\f3GL_UNSIGNED_INT_8_8_8_8\fP,
\f3GL_UNSIGNED_INT_8_8_8_8_REV\fP,
\f3GL_UNSIGNED_INT_10_10_10_2\fP, and
\f3GL_UNSIGNED_INT_2_10_10_10_REV\fP are available only if the GL version 
is 1.2 or greater.
.SH ASSOCIATED GETS
\f3fglGet\fP with argument \f3GL_INDEX_MODE\fP
.SH SEE ALSO
\f3fglCopyPixels\fP,
\f3fglDrawPixels\fP,
\f3fglPixelMap\fP,
\f3fglPixelStore\fP,
\f3fglPixelTransfer\fP,
.br
\f3fglReadBuffer\fP
@


1.1
log
@Initial revision
@
text
@d1 2
d6 21
a26 5
.ds Dp Feb 04 11:05
.ds Dm 5 Feb  4 11:
.ds Xs 11505    13
_header(ReadPixels,read a block of pixels from the frame buffer)
_names(ReadPixels)
d31 2
a32 1
_phead(_param1 _param2)
d36 2
a37 1
_phead(_param3 _param4)
d39 3
a41 2
_param3 and _param4 of one correspond to a single pixel.
_phead(_param5)
d57 2
a58 1
_phead(_param6)
d81 2
a82 1
_phead(_param7)
d85 1
a85 1
_cmnd returns pixel data from the frame buffer,
d87 2
a88 2
is at location (_param1, _param2),
into client memory starting at location _param7.
d92 4
a95 4
_cmnd(PixelStore),
_cmnd(PixelTransfer), and
_cmnd(PixelMap).
This reference page describes the effects on _cmnd of most,
d103 3
a105 3
_cmnd returns values from each pixel with lower left corner at
(_param1 + $i$, _param2 + $j$) for 0 \(<= $i$ < _param3 and 
0 \(<= $j$ < _param4.
d110 1
a110 1
_param5 specifies the format for the returned pixel values;
d115 1
a115 1
selected by _cmnd(ReadBuffer).
d160 1
a160 1
they are read from the color buffer selected by _cmnd(ReadBuffer).
d178 1
a178 1
they are read from the color buffer selected by _cmnd(ReadBuffer).
d209 2
a210 2
_cmnd(PixelTransfer).
The lookup table contents themselves are specified by _cmnd(PixelMap).
d214 3
a216 3
as specified by _param6.
If _param5 is \f3GL_COLOR_INDEX\fP or \f3GL_STENCIL_INDEX\fP
and _param6 is not \f3GL_FLOAT\fP,
d218 1
a218 1
If _param6 is \f3GL_FLOAT\fP, then each integer index is converted to
d221 1
a221 1
If _param5 is
d231 1
a231 1
\f3GL_LUMINANCE_ALPHA\fP and _param6 is not \f3GL_FLOAT\fP,
d242 1
a242 1
_param6:index mask:component conversion
d257 1
a257 1
If _param5 is
d267 1
a267 1
is placed in location $(j)~_eqnparam3~+~i$.
d272 2
a273 2
in _param7.
Storage parameters set by _cmnd(PixelStore),
d276 1
a276 1
See _cmnd(PixelStore) for a description.
d282 1
a282 1
no change is made to the contents of _param7.
d284 1
a284 1
\f3GL_INVALID_ENUM\fP is generated if _param5 or _param6 is not an
d287 1
a287 1
\f3GL_INVALID_ENUM\fP is generated if _param6 is \f3GL_BITMAP\fP and _param5 is
d290 1
a290 1
\f3GL_INVALID_VALUE\fP is generated if either _param3 or _param4 is negative.
d292 1
a292 1
\f3GL_INVALID_OPERATION\fP is generated if _param5 is \f3GL_COLOR_INDEX\fP
d295 1
a295 1
\f3GL_INVALID_OPERATION\fP is generated if _param5 is \f3GL_STENCIL_INDEX\fP
d298 1
a298 1
\f3GL_INVALID_OPERATION\fP is generated if _param5 is \f3GL_DEPTH_COMPONENT\fP
d301 3
a303 3
\f3GL_INVALID_OPERATION\fP is generated if _cmnd
is executed between the execution of _cmnd(Begin)
and the corresponding execution of _cmnd(End).
d305 1
a305 1
\f3GL_INVALID_OPERATION\fP is generated if _param6 is one of
d310 1
a310 1
and _param5 is not \f3GL_RGB\fP.
d312 1
a312 1
\f3GL_INVALID_OPERATION\fP is generated if _param6 is one of
d321 1
a321 1
and _param5 is neither \f3GL_RGBA\fP nor \f3GL_BGRA\fP.
d338 1
a338 1
_cmnd(Get) with argument \f3GL_INDEX_MODE\fP
d340 5
a344 5
_cmnd(CopyPixels),
_cmnd(DrawPixels),
_cmnd(PixelMap),
_cmnd(PixelStore),
_cmnd(PixelTransfer),
d346 1
a346 1
_cmnd(ReadBuffer)
@


1.1.1.1
log
@win32-x11 source tree update March 26, 2001
@
text
@@
