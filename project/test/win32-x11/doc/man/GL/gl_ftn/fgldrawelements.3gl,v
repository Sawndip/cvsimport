head	1.2;
access;
symbols
	win32-x11-2001-03-26:1.1.1.1 SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2001.06.03.20.47.16;	author ssiddiqi;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.25.19.36.53;	author ssiddiqi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.03.25.19.36.53;	author ssiddiqi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Win32-X11 update sources check in, June 3, 2001 - ssiddiqi
@
text
@'\"! tbl|eqn | mmdoc
'\"macro stdmacro
.ds Vn Version 1.2
.ds Dt 10 Nov 1998
.ds Re Release 1.0
.ds Dp Apr 04 17:40
.ds Dm  Apr  4  200
.ds Xs 49717 10 fgldrawelements.gl
.TH FGLDRAWELEMENTS 
.SH NAME
.B "fglDrawElements
\- render primitives from array data

.SH FORTRAN SPECIFICATION
SUBROUTINE \f3fglDrawElements\fP(
INTEGER*4 \fImode\fP,
.nf
.ta \w'\f3SUBROUTINE \fPfglDrawElements( 'u
	INTEGER*4 \fIcount\fP,
	INTEGER*4 \fItype\fP,
	CHARACTER*8 \fIindices\fP )
.fi

.EQ
delim $$
.EN
.SH PARAMETERS
.TP \w'\fIindices\fP\ \ 'u 
\f2mode\fP
Specifies what kind of primitives to render.
Symbolic constants
\f3GL_POINTS\fP,
\f3GL_LINE_STRIP\fP,
\f3GL_LINE_LOOP\fP,
\f3GL_LINES\fP,
\f3GL_TRIANGLE_STRIP\fP,
\f3GL_TRIANGLE_FAN\fP,
\f3GL_TRIANGLES\fP,
\f3GL_QUAD_STRIP\fP,
\f3GL_QUADS\fP,
and \f3GL_POLYGON\fP are accepted. 
.TP
\f2count\fP
Specifies the number of elements to be rendered.
.TP
\f2type\fP
Specifies the type of the values in \f2indices\fP. Must be one of
\f3GL_UNSIGNED_BYTE\fP, \f3GL_UNSIGNED_SHORT\fP, or
\f3GL_UNSIGNED_INT\fP. 
.TP
\f2indices\fP
Specifies a pointer to the location where the indices are stored. 
.SH DESCRIPTION
\f3fglDrawElements\fP specifies multiple geometric primitives
with very few subroutine calls. Instead of calling a GL function
to pass each individual vertex, normal, texture coordinate, edge
flag, or color, you can prespecify
separate arrays of vertexes, normals, and so on and use them to
construct a sequence of primitives with a single
call to \f3fglDrawElements\fP.
.P
When \f3fglDrawElements\fP is called, it uses \f2count\fP sequential elements from an
enabled array, starting at \f2indices\fP to construct a sequence of
geometric primitives. \f2mode\fP specifies what kind of primitives are
constructed, and how the array elements construct these primitives. If
more than one array is enabled, each is used. If
\f3GL_VERTEX_ARRAY\fP is not enabled, no geometric primitives are
constructed.
.P
Vertex attributes that are modified by \f3fglDrawElements\fP have an
unspecified value after \f3fglDrawElements\fP returns. For example, if
\f3GL_COLOR_ARRAY\fP is enabled, the value of the current color is
undefined after \f3fglDrawElements\fP executes. Attributes that aren't
modified maintain their previous values.
.SH NOTES
\f3fglDrawElements\fP is available only if the GL version is 1.1 or greater.
.P
\f3fglDrawElements\fP is included in display lists. If \f3fglDrawElements\fP is entered into a
display list, 
the necessary array data (determined by the array pointers and
enables) is also 
entered into the display list. Because the array pointers and
enables are client-side state, their values affect display lists
when the lists are created, not when the lists are executed.
.SH ERRORS
\f3GL_INVALID_ENUM\fP is generated if \f2mode\fP is not an accepted value.
.P
\f3GL_INVALID_VALUE\fP is generated if \f2count\fP is negative.
.P
\f3GL_INVALID_OPERATION\fP is generated if \f3fglDrawElements\fP is executed between
the execution of \f3fglBegin\fP and the corresponding \f3fglEnd\fP.
.SH SEE ALSO 
\f3fglArrayElement\fP,
\f3fglColorPointer\fP,
\f3fglDrawArrays\fP,
\f3fglDrawRangeElements\fP,
\f3fglEdgeFlagPointer\fP,
\f3fglGetPointerv\fP,
\f3fglIndexPointer\fP,
\f3fglInterleavedArrays\fP,
\f3fglNormalPointer\fP,
\f3fglTexCoordPointer\fP,
\f3fglVertexPointer\fP

@


1.1
log
@Initial revision
@
text
@d1 2
d6 18
a23 5
.ds Dp Feb 04 11:05
.ds Dm 7 Feb  4 11:
.ds Xs 56507     5
_header(DrawElements, render primitives from array data)
_names(DrawElements)
d28 2
a29 1
_phead(_param1)
d42 2
a43 1
_phead(_param2)
d45 3
a47 2
_phead(_param3)
Specifies the type of the values in _param4. Must be one of
d50 2
a51 1
_phead(_param4)
d54 1
a54 1
_cmnd specifies multiple geometric primitives
d60 1
a60 1
call to _cmnd.
d62 3
a64 3
When _cmnd is called, it uses _param2 sequential elements from an
enabled array, starting at _param4 to construct a sequence of
geometric primitives. _param1 specifies what kind of primitives are
d70 2
a71 2
Vertex attributes that are modified by _cmnd have an
unspecified value after _cmnd returns. For example, if
d73 1
a73 1
undefined after _cmnd executes. Attributes that aren't
d76 1
a76 1
_cmnd is available only if the GL version is 1.1 or greater.
d78 1
a78 1
_cmnd is included in display lists. If _cmnd is entered into a
d86 1
a86 1
\f3GL_INVALID_ENUM\fP is generated if _param1 is not an accepted value.
d88 1
a88 1
\f3GL_INVALID_VALUE\fP is generated if _param2 is negative.
d90 2
a91 2
\f3GL_INVALID_OPERATION\fP is generated if _cmnd is executed between
the execution of _cmnd(Begin) and the corresponding _cmnd(End).
d93 11
a103 11
_cmnd(ArrayElement),
_cmnd(ColorPointer),
_cmnd(DrawArrays),
_cmnd(DrawRangeElements),
_cmnd(EdgeFlagPointer),
_cmnd(GetPointerv),
_cmnd(IndexPointer),
_cmnd(InterleavedArrays),
_cmnd(NormalPointer),
_cmnd(TexCoordPointer),
_cmnd(VertexPointer)
@


1.1.1.1
log
@win32-x11 source tree update March 26, 2001
@
text
@@
