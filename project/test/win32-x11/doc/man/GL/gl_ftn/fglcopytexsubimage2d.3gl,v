head	1.2;
access;
symbols
	win32-x11-2001-03-26:1.1.1.1 SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2001.06.03.20.47.15;	author ssiddiqi;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.25.19.36.53;	author ssiddiqi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.03.25.19.36.53;	author ssiddiqi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Win32-X11 update sources check in, June 3, 2001 - ssiddiqi
@
text
@'\"! tbl|eqn | mmdoc
'\"macro stdmacro
.ds Vn Version 1.2
.ds Dt 10 Nov 1998
.ds Re Release 1.0
.ds Dp Apr 04 17:40
.ds Dm  Apr  4  200
.ds Xs 29444 13 fglcopytexsubimage2d.gl
.TH FGLCOPYTEXSUBIMAGE2D 
.SH NAME
.B "fglCopyTexSubImage2D
\- copy a two-dimensional texture subimage

.SH FORTRAN SPECIFICATION
SUBROUTINE \f3fglCopyTexSubImage2D\fP(
INTEGER*4 \fItarget\fP,
.nf
.ta \w'\f3SUBROUTINE \fPfglCopyTexSubImage2D( 'u
	INTEGER*4 \fIlevel\fP,
	INTEGER*4 \fIxoffset\fP,
	INTEGER*4 \fIyoffset\fP,
	INTEGER*4 \fIx\fP,
	INTEGER*4 \fIy\fP,
	INTEGER*4 \fIwidth\fP,
	INTEGER*4 \fIheight\fP )
.fi

.EQ
delim $$
.EN
.SH PARAMETERS
.TP \w'\fIxoffset\fP\ \ 'u 
\f2target\fP
Specifies the target texture.
Must be \f3GL_TEXTURE_2D\fP.
.TP
\f2level\fP
Specifies the level-of-detail number.
Level 0 is the base image level.
Level \f2n\fP is the \f2n\fPth mipmap reduction image.
.TP
\f2xoffset\fP
Specifies a texel offset in the x direction within the texture array.
.TP
\f2yoffset\fP
Specifies a texel offset in the y direction within the texture array.
.TP
\f2x\fP, \f2y\fP
Specify the window coordinates of the lower left corner
of the rectangular region of pixels to be copied.
.TP
\f2width\fP
Specifies the width of the texture subimage.
.TP
\f2height\fP
Specifies the height of the texture subimage.
.SH DESCRIPTION
\f3fglCopyTexSubImage2D\fP replaces a rectangular portion of a two-dimensional
texture image with pixels from the current \f3GL_READ_BUFFER\fP (rather
than from main memory, as is the case for \f3fglTexSubImage2D\fP).
.P
The screen-aligned pixel rectangle with lower left corner at
(\f2x\fP,\ \f2y\fP) and with
width \f2width\fP and height \f2height\fP replaces the portion of the
texture array with x indices \f2xoffset\fP through \f2xoffset\fP$~+~$\f2width\fP$~-~$1,
inclusive, and y indices \f2yoffset\fP through \f2yoffset\fP$~+~$\f2height\fP$~-~$1,
inclusive, at the mipmap level specified by \f2level\fP.
.P
The pixels in the rectangle are processed exactly as if
\f3fglCopyPixels\fP had been called, but the process stops just before
final conversion.
At this point, all pixel component values are clamped to the range [0,\ 1]
and then converted to the texture's internal format for storage in the texel
array.
.P
The destination rectangle in the texture array may not include any texels
outside the texture array as it was originally specified.
It is not an error to specify a subtexture with zero width or height, but
such a specification has no effect.
.P
If any of the pixels within the specified rectangle of the current
\f3GL_READ_BUFFER\fP are outside the read window associated with the current
rendering context, then the values obtained for those pixels are undefined.
.P
No change is made to the \f2internalformat\fP, \f2width\fP,
\f2height\fP, or \f2border\fP parameters of the specified texture
array or to texel values outside the specified subregion.
.SH NOTES
\f3fglCopyTexSubImage2D\fP is available only if the GL version is 1.1 or greater. 
.P
Texturing has no effect in color index mode.
.P
\f3fglPixelStore\fP and \f3fglPixelTransfer\fP modes affect texture images
in exactly the way they affect \f3fglDrawPixels\fP.
.P
When the _arbstring(imaging) extension is supported, the RGBA components
read from the framebuffer may be processed by the imaging pipeline.  See
\f3fglTexImage1D\fP for specific details.
.SH ERRORS
\f3GL_INVALID_ENUM\fP is generated if \f2target\fP is not \f3GL_TEXTURE_2D\fP. 
.P
\f3GL_INVALID_OPERATION\fP is generated if the texture array has not
been defined by a previous \f3fglTexImage2D\fP or \f3fglCopyTexImage2D\fP operation.
.P
\f3GL_INVALID_VALUE\fP is generated if \f2level\fP is less than 0.
.P 
\f3GL_INVALID_VALUE\fP may be generated if \f2level\fP is greater
than $log sub 2 max$,
where $max$ is the returned value of \f3GL_MAX_TEXTURE_SIZE\fP.
.P
\f3GL_INVALID_VALUE\fP is generated if \f2x\fP$ ~<~ ~-b$ or if
\f2y\fP$ ~<~ ~-b$, 
where $b$ is the border width of the texture array.
.P
\f3GL_INVALID_VALUE\fP is generated if $"xoffset" ~<~ -b$,
(\f2xoffset\fP$~+~$\f2width\fP)$~>~(w ~-~b)$, 
\f2yoffset\fP$~<~ ~-b$, or 
(\f2yoffset\fP$~+~$\f2height\fP)$~>~(h ~-~b)$,
where $w$ is the \f3GL_TEXTURE_WIDTH\fP, 
$h$ is the  \f3GL_TEXTURE_HEIGHT\fP, 
and $b$ is the \f3GL_TEXTURE_BORDER\fP
of the texture image being modified.
Note that $w$ and $h$
include twice the border width.
.P
\f3GL_INVALID_OPERATION\fP is generated if \f3fglCopyTexSubImage2D\fP is executed
between the execution of \f3fglBegin\fP and the corresponding
execution of \f3fglEnd\fP.
.SH ASSOCIATED GETS
\f3fglGetTexImage\fP
.br
\f3fglIsEnabled\fP with argument \f3GL_TEXTURE_2D\fP
.SH SEE ALSO
\f3fglCopyPixels\fP,
\f3fglCopyTexImage1D\fP,
\f3fglCopyTexImage2D\fP,
\f3fglCopyTexSubImage1D\fP,
\f3fglCopyTexSubImage3D\fP,
\f3fglPixelStore\fP,
\f3fglPixelTransfer\fP,
\f3fglReadBuffer\fP,
\f3fglTexEnv\fP,
\f3fglTexGen\fP,
\f3fglTexImage1D\fP,
\f3fglTexImage2D\fP,
\f3fglTexImage3D\fP,
\f3fglTexParameter\fP,
\f3fglTexSubImage1D\fP,
\f3fglTexSubImage2D\fP,
\f3fglTexSubImage3D\fP
@


1.1
log
@Initial revision
@
text
@d1 2
d6 22
a27 5
.ds Dp Feb 04 11:05
.ds Dm 2 Feb  4 11:
.ds Xs 21640     7
_header(CopyTexSubImage2D,copy a two-dimensional texture subimage)
_names(CopyTexSubImage2D)
d32 2
a33 1
_phead(_param1)
d36 2
a37 1
_phead(_param2)
d41 2
a42 1
_phead(_param3)
d44 2
a45 1
_phead(_param4)
d47 2
a48 1
_phead(_param5 _param6)
d51 2
a52 1
_phead(_param7)
d54 2
a55 1
_phead(_param8)
d58 1
a58 1
_cmnd replaces a rectangular portion of a two-dimensional
d60 1
a60 1
than from main memory, as is the case for _cmnd(TexSubImage2D)).
d63 5
a67 5
(_param5,\ _param6) and with
width _param7 and height _param8 replaces the portion of the
texture array with x indices _param3 through _param3$~+~$_param7$~-~$1,
inclusive, and y indices _param4 through _param4$~+~$_param8$~-~$1,
inclusive, at the mipmap level specified by _param2.
d70 1
a70 1
_cmnd(CopyPixels) had been called, but the process stops just before
d89 1
a89 1
_cmnd is available only if the GL version is 1.1 or greater. 
d93 2
a94 2
_cmnd(PixelStore) and _cmnd(PixelTransfer) modes affect texture images
in exactly the way they affect _cmnd(DrawPixels).
d98 1
a98 1
_cmnd(TexImage1D) for specific details.
d100 1
a100 1
\f3GL_INVALID_ENUM\fP is generated if _param1 is not \f3GL_TEXTURE_2D\fP. 
d103 1
a103 1
been defined by a previous _cmnd(TexImage2D) or _cmnd(CopyTexImage2D) operation.
d105 1
a105 1
\f3GL_INVALID_VALUE\fP is generated if _param2 is less than 0.
d107 1
a107 1
\f3GL_INVALID_VALUE\fP may be generated if _param2 is greater
d111 2
a112 2
\f3GL_INVALID_VALUE\fP is generated if _param5$ ~<~ ~-b$ or if
_param6$ ~<~ ~-b$, 
d115 4
a118 4
\f3GL_INVALID_VALUE\fP is generated if $_eqnparam3 ~<~ -b$,
(_param3$~+~$_param7)$~>~(w ~-~b)$, 
_param4$~<~ ~-b$, or 
(_param4$~+~$_param8)$~>~(h ~-~b)$,
d126 3
a128 3
\f3GL_INVALID_OPERATION\fP is generated if _cmnd is executed
between the execution of _cmnd(Begin) and the corresponding
execution of _cmnd(End).
d130 1
a130 1
_cmnd(GetTexImage)
d132 1
a132 1
_cmnd(IsEnabled) with argument \f3GL_TEXTURE_2D\fP
d134 17
a150 17
_cmnd(CopyPixels),
_cmnd(CopyTexImage1D),
_cmnd(CopyTexImage2D),
_cmnd(CopyTexSubImage1D),
_cmnd(CopyTexSubImage3D),
_cmnd(PixelStore),
_cmnd(PixelTransfer),
_cmnd(ReadBuffer),
_cmnd(TexEnv),
_cmnd(TexGen),
_cmnd(TexImage1D),
_cmnd(TexImage2D),
_cmnd(TexImage3D),
_cmnd(TexParameter),
_cmnd(TexSubImage1D),
_cmnd(TexSubImage2D),
_cmnd(TexSubImage3D)
@


1.1.1.1
log
@win32-x11 source tree update March 26, 2001
@
text
@@
