head	1.2;
access;
symbols
	win32-x11-2001-03-26:1.1.1.1 SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2001.06.03.20.47.16;	author ssiddiqi;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.25.19.36.54;	author ssiddiqi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.03.25.19.36.54;	author ssiddiqi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Win32-X11 update sources check in, June 3, 2001 - ssiddiqi
@
text
@'\"! eqn | mmdoc
'\"macro stdmacro
.ds Vn Version 1.2
.ds Dt 10 Nov 1998
.ds Re Release 1.0
.ds Dp Apr 04 17:40
.ds Dm  Apr  4  200
.ds Xs 14443 9 fglevalpoint.gl
.TH FGLEVALPOINT 
.SH NAME
.B "fglEvalPoint1, fglEvalPoint2
\- generate and evaluate a single point in a mesh

.SH FORTRAN SPECIFICATION
SUBROUTINE \f3fglEvalPoint1\fP(
INTEGER*4 \fIi\fP )
.nf
.fi
SUBROUTINE \f3fglEvalPoint2\fP(
INTEGER*4 \fIi\fP,
.nf
.ta \w'\f3SUBROUTINE \fPfglEvalPoint2( 'u
	INTEGER*4 \fIj\fP )
.fi

.EQ
delim $$
.EN
.SH PARAMETERS
.TP \w'\f2i\fP\ \ 'u 
\f2i\fP
Specifies the integer value for grid domain variable $i$.
.TP
\f2j\fP
Specifies the integer value for grid domain variable $j$
(\f3fglEvalPoint2\fP only).
.SH DESCRIPTION
\f3fglMapGrid\fP and \f3fglEvalMesh\fP are used in tandem to efficiently
generate and evaluate a series of evenly spaced map domain values.
\f3fglEvalPoint\fP can be used to evaluate a single grid point in the same gridspace
that is traversed by \f3fglEvalMesh\fP.
Calling \f3fglEvalPoint1\fP is equivalent to calling
.nf
.IP
\f7
glEvalCoord1( i$^cdot^DELTA u ~+~ u sub 1$ );
\fP
.RE
.fi
where
.sp
.in
$DELTA u ~=~ ( u sub 2 - u sub 1 ) ^/^ n$
.in 0
.sp
.P
and $n$, $u sub 1$, and $u sub 2$
are the arguments to the most recent \f3fglMapGrid1\fP command.
The one absolute numeric requirement is that if $i~=~n$,
then the value computed from 
$i ^cdot^ DELTA u ~+~ u sub 1$ is exactly $u sub 2$.
.P
In the two-dimensional case, \f3fglEvalPoint2\fP, let 
.nf
.IP
$DELTA u ~=~ mark ( u sub 2 - u sub 1 ) ^/^ n$
.sp
$DELTA v ~=~ mark ( v sub 2 - v sub 1 ) ^/^ m,$
.RE
.fi
.P
where $n$, $u sub 1$, $u sub 2$, $m$, $v sub 1$, and $v sub 2$
are the arguments to the most recent \f3fglMapGrid2\fP command.
Then the \f3fglEvalPoint2\fP command is equivalent to calling
.nf
.IP
\f7
glEvalCoord2( i$^cdot^DELTA u ~+~ u sub 1$, j$^cdot^DELTA v ~+~ v sub 1$ );
\fP
.RE
.fi
The only absolute numeric requirements are that if $i~=~n$,
then the value computed from
$i ^cdot^DELTA u ~+~ u sub 1$ is exactly $u sub 2$,
and if $j~=~m$, then the value computed from 
$i ^cdot^DELTA v ~+~ v sub 1$ is exactly $v sub 2$.
.SH ASSOCIATED GETS
\f3fglGet\fP with argument \f3GL_MAP1_GRID_DOMAIN\fP
.br
\f3fglGet\fP with argument \f3GL_MAP2_GRID_DOMAIN\fP
.br
\f3fglGet\fP with argument \f3GL_MAP1_GRID_SEGMENTS\fP
.br
\f3fglGet\fP with argument \f3GL_MAP2_GRID_SEGMENTS\fP
.SH SEE ALSO
\f3fglEvalCoord\fP,
\f3fglEvalMesh\fP,
\f3fglMap1\fP,
\f3fglMap2\fP,
\f3fglMapGrid\fP
@


1.1
log
@Initial revision
@
text
@d1 2
d6 20
a25 5
.ds Dp Feb 04 11:05
.ds Dm 4 Feb  4 11:
.ds Xs 57169     5
_header(EvalPoint,generate and evaluate a single point in a mesh)
_names(EvalPoint,[12])
d30 2
a31 1
_phead(_param1)
d33 2
a34 1
_phead(_param2)
d36 1
a36 1
(_cmnd(EvalPoint2) only).
d38 1
a38 1
_cmnd(MapGrid) and _cmnd(EvalMesh) are used in tandem to efficiently
d40 3
a42 3
_cmnd can be used to evaluate a single grid point in the same gridspace
that is traversed by _cmnd(EvalMesh).
Calling _cmnd(EvalPoint1) is equivalent to calling
d58 1
a58 1
are the arguments to the most recent _cmnd(MapGrid1) command.
d63 1
a63 1
In the two-dimensional case, _cmnd(EvalPoint2), let 
d73 2
a74 2
are the arguments to the most recent _cmnd(MapGrid2) command.
Then the _cmnd(EvalPoint2) command is equivalent to calling
d88 1
a88 1
_cmnd(Get) with argument \f3GL_MAP1_GRID_DOMAIN\fP
d90 1
a90 1
_cmnd(Get) with argument \f3GL_MAP2_GRID_DOMAIN\fP
d92 1
a92 1
_cmnd(Get) with argument \f3GL_MAP1_GRID_SEGMENTS\fP
d94 1
a94 1
_cmnd(Get) with argument \f3GL_MAP2_GRID_SEGMENTS\fP
d96 5
a100 5
_cmnd(EvalCoord),
_cmnd(EvalMesh),
_cmnd(Map1),
_cmnd(Map2),
_cmnd(MapGrid)
@


1.1.1.1
log
@win32-x11 source tree update March 26, 2001
@
text
@@
