head	1.2;
access;
symbols
	win32-x11-2001-03-26:1.1.1.1 SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2001.06.03.20.47.15;	author ssiddiqi;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.25.19.36.53;	author ssiddiqi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.03.25.19.36.53;	author ssiddiqi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Win32-X11 update sources check in, June 3, 2001 - ssiddiqi
@
text
@'\"! eqn | mmdoc
'\"macro stdmacro
.ds Vn Version 1.2
.ds Dt 10 Nov 1998
.ds Re Release 1.0
.ds Dp Apr 04 17:40
.ds Dm  Apr  4  200
.ds Xs 16554 13 fglcopyteximage2d.gl
.TH FGLCOPYTEXIMAGE2D 
.SH NAME
.B "fglCopyTexImage2D
\- copy pixels into a 2D texture image

.SH FORTRAN SPECIFICATION
SUBROUTINE \f3fglCopyTexImage2D\fP(
INTEGER*4 \fItarget\fP,
.nf
.ta \w'\f3SUBROUTINE \fPfglCopyTexImage2D( 'u
	INTEGER*4 \fIlevel\fP,
	INTEGER*4 \fIinternalformat\fP,
	INTEGER*4 \fIx\fP,
	INTEGER*4 \fIy\fP,
	INTEGER*4 \fIwidth\fP,
	INTEGER*4 \fIheight\fP,
	INTEGER*4 \fIborder\fP )
.fi

.EQ
delim $$
.EN
.SH PARAMETERS
.TP \w'\fIinternalformat\fP\ \ 'u 
\f2target\fP
Specifies the target texture.
Must be \f3GL_TEXTURE_2D\fP.
.TP
\f2level\fP
Specifies the level-of-detail number.
Level 0 is the base image level.
Level \f2n\fP is the \f2n\fPth mipmap reduction image.
.TP
\f2internalformat\fP
Specifies the internal format of the texture.
Must be one of the following symbolic constants:
\f3GL_ALPHA\fP,
\f3GL_ALPHA4\fP,
\f3GL_ALPHA8\fP,
\f3GL_ALPHA12\fP,
\f3GL_ALPHA16\fP,
\f3GL_LUMINANCE\fP,
\f3GL_LUMINANCE4\fP,
\f3GL_LUMINANCE8\fP,
\f3GL_LUMINANCE12\fP,
\f3GL_LUMINANCE16\fP,
\f3GL_LUMINANCE_ALPHA\fP,
\f3GL_LUMINANCE4_ALPHA4\fP,
\f3GL_LUMINANCE6_ALPHA2\fP,
\f3GL_LUMINANCE8_ALPHA8\fP,
\f3GL_LUMINANCE12_ALPHA4\fP,
\f3GL_LUMINANCE12_ALPHA12\fP,
\f3GL_LUMINANCE16_ALPHA16\fP,
\f3GL_INTENSITY\fP,
\f3GL_INTENSITY4\fP,
\f3GL_INTENSITY8\fP,
\f3GL_INTENSITY12\fP,
\f3GL_INTENSITY16\fP,
\f3GL_RGB\fP,
\f3GL_R3_G3_B2\fP,
\f3GL_RGB4\fP,
\f3GL_RGB5\fP,
\f3GL_RGB8\fP,
\f3GL_RGB10\fP,
\f3GL_RGB12\fP,
\f3GL_RGB16\fP,
\f3GL_RGBA\fP,
\f3GL_RGBA2\fP,
\f3GL_RGBA4\fP,
\f3GL_RGB5_A1\fP,
\f3GL_RGBA8\fP,
\f3GL_RGB10_A2\fP,
\f3GL_RGBA12\fP, or
\f3GL_RGBA16\fP.
.TP
\f2x\fP, \f2y\fP
Specify the window coordinates of the lower left corner
of the rectangular region of pixels to be copied.
.TP
\f2width\fP
Specifies the width of the texture image.
Must be 0 or $2 sup n ~+~ 2*$\f2border\fP for some integer $n$.
.TP
\f2height\fP
Specifies the height of the texture image.
Must be 0 or $2 sup m ~+~ 2*$\f2border\fP for some integer $m$.
.TP
\f2border\fP
Specifies the width of the border.
Must be either 0 or 1.
.SH DESCRIPTION
\f3fglCopyTexImage2D\fP defines a two-dimensional texture image with pixels from the current
\f3GL_READ_BUFFER\fP.
.P
The screen-aligned pixel rectangle with lower left corner at (\f2x\fP,
\f2y\fP) and with a width of \f2width\fP$~+~2~*~$\f2border\fP and a height of
\f2height\fP$~+~2~*~$\f2border\fP 
defines the texture array
at the mipmap level specified by \f2level\fP.
\f2internalformat\fP specifies the internal format of the texture array.
.P
The pixels in the rectangle are processed exactly as if
\f3fglCopyPixels\fP had been called, but the process stops just before
final conversion.
At this point all pixel component values are clamped to the range $[0,1]$
and then converted to the texture's internal format for storage in the texel
array.
.P
Pixel ordering is such that lower $x$ and $y$ screen coordinates correspond to 
lower $s$ and $t$ texture coordinates.
.P
If any of the pixels within the specified rectangle of the current
\f3GL_READ_BUFFER\fP are outside the window associated with the current
rendering context, then the values obtained for those pixels are undefined.
.P
.SH NOTES
\f3fglCopyTexImage2D\fP is available only if the GL version is 1.1 or greater.
.P
Texturing has no effect in color index mode.
.P
1, 2, 3, and 4 are not accepted values for \f2internalformat\fP.
.P 
An image with height or width of 0 indicates a NULL texture. 
.P
When the _arbstring(imaging) extension is supported, the RGBA components
read from the framebuffer may be processed by the imaging pipeline.  See
\f3fglTexImage1D\fP for specific details.
.SH ERRORS
\f3GL_INVALID_ENUM\fP is generated if \f2target\fP is not \f3GL_TEXTURE_2D\fP.
.P
\f3GL_INVALID_VALUE\fP is generated if \f2level\fP is less than 0.
.P 
\f3GL_INVALID_VALUE\fP may be generated if \f2level\fP is greater
than $log sub 2 max$,
where $max$ is the returned value of \f3GL_MAX_TEXTURE_SIZE\fP.
.P
\f3GL_INVALID_VALUE\fP is generated if \f2width\fP or \f2height\fP is less than 0,
greater than $2~+~$\f3GL_MAX_TEXTURE_SIZE\fP, or if \f2width\fP or \f2height\fP cannot be
represented as $2 sup k ~+~ 2~*~$\f2border\fP for some integer
$k$.
.P
\f3GL_INVALID_VALUE\fP is generated if \f2border\fP is not 0 or 1.
.P
\f3GL_INVALID_VALUE\fP is generated if \f2internalformat\fP is not one of the
allowable values.
.P
\f3GL_INVALID_OPERATION\fP is generated if \f3fglCopyTexImage2D\fP is executed
between the execution of \f3fglBegin\fP and the corresponding
execution of \f3fglEnd\fP.
.SH ASSOCIATED GETS
\f3fglGetTexImage\fP
.br
\f3fglIsEnabled\fP with argument \f3GL_TEXTURE_2D\fP
.SH SEE ALSO
\f3fglCopyPixels\fP,
\f3fglCopyTexImage1D\fP,
\f3fglCopyTexSubImage1D\fP,
\f3fglCopyTexSubImage2D\fP,
\f3fglPixelStore\fP,
\f3fglPixelTransfer\fP,
\f3fglTexEnv\fP,
\f3fglTexGen\fP,
\f3fglTexImage1D\fP,
\f3fglTexImage2D\fP,
\f3fglTexSubImage1D\fP,
\f3fglTexSubImage2D\fP,
.br
\f3fglTexParameter\fP


@


1.1
log
@Initial revision
@
text
@d1 2
d6 22
a27 5
.ds Dp Feb 04 11:05
.ds Dm 9 Feb  4 11:
.ds Xs 15515     7
_header(CopyTexImage2D,copy pixels into a 2D texture image)
_names(CopyTexImage2D)
d32 2
a33 1
_phead(_param1)
d36 2
a37 1
_phead(_param2)
d41 2
a42 1
_phead(_param3)
d83 2
a84 1
_phead(_param4 _param5)
d87 2
a88 1
_phead(_param6)
d90 3
a92 2
Must be 0 or $2 sup n ~+~ 2*$_param8 for some integer $n$.
_phead(_param7)
d94 3
a96 2
Must be 0 or $2 sup m ~+~ 2*$_param8 for some integer $m$.
_phead(_param8)
d100 1
a100 1
_cmnd defines a two-dimensional texture image with pixels from the current
d103 3
a105 3
The screen-aligned pixel rectangle with lower left corner at (_param4,
_param5) and with a width of _param6$~+~2~*~$_param8 and a height of
_param7$~+~2~*~$_param8 
d107 2
a108 2
at the mipmap level specified by _param2.
_param3 specifies the internal format of the texture array.
d111 1
a111 1
_cmnd(CopyPixels) had been called, but the process stops just before
d125 1
a125 1
_cmnd is available only if the GL version is 1.1 or greater.
d129 1
a129 1
1, 2, 3, and 4 are not accepted values for _param3.
d135 1
a135 1
_cmnd(TexImage1D) for specific details.
d137 1
a137 1
\f3GL_INVALID_ENUM\fP is generated if _param1 is not \f3GL_TEXTURE_2D\fP.
d139 1
a139 1
\f3GL_INVALID_VALUE\fP is generated if _param2 is less than 0.
d141 1
a141 1
\f3GL_INVALID_VALUE\fP may be generated if _param2 is greater
d145 3
a147 3
\f3GL_INVALID_VALUE\fP is generated if _param6 or _param7 is less than 0,
greater than $2~+~$\f3GL_MAX_TEXTURE_SIZE\fP, or if _param6 or _param7 cannot be
represented as $2 sup k ~+~ 2~*~$_param8 for some integer
d150 1
a150 1
\f3GL_INVALID_VALUE\fP is generated if _param8 is not 0 or 1.
d152 1
a152 1
\f3GL_INVALID_VALUE\fP is generated if _param3 is not one of the
d155 3
a157 3
\f3GL_INVALID_OPERATION\fP is generated if _cmnd is executed
between the execution of _cmnd(Begin) and the corresponding
execution of _cmnd(End).
d159 1
a159 1
_cmnd(GetTexImage)
d161 1
a161 1
_cmnd(IsEnabled) with argument \f3GL_TEXTURE_2D\fP
d163 12
a174 12
_cmnd(CopyPixels),
_cmnd(CopyTexImage1D),
_cmnd(CopyTexSubImage1D),
_cmnd(CopyTexSubImage2D),
_cmnd(PixelStore),
_cmnd(PixelTransfer),
_cmnd(TexEnv),
_cmnd(TexGen),
_cmnd(TexImage1D),
_cmnd(TexImage2D),
_cmnd(TexSubImage1D),
_cmnd(TexSubImage2D),
d176 1
a176 1
_cmnd(TexParameter)
@


1.1.1.1
log
@win32-x11 source tree update March 26, 2001
@
text
@@
