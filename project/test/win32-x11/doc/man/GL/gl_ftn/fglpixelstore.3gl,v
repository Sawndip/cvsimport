head	1.2;
access;
symbols
	win32-x11-2001-03-26:1.1.1.1 SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2001.06.03.20.47.17;	author ssiddiqi;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.25.19.36.54;	author ssiddiqi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.03.25.19.36.54;	author ssiddiqi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Win32-X11 update sources check in, June 3, 2001 - ssiddiqi
@
text
@'\"! tbl|eqn | mmdoc
'\"macro stdmacro
.ds Vn Version 1.2
.ds Dt 10 Nov 1998
.ds Re Release 1.0
.ds Dp Apr 04 17:40
.ds Dm  Apr  4  200
.ds Xs 45917 34 fglpixelstore.gl
.TH FGLPIXELSTORE 
.SH NAME
.B "fglPixelStoref, fglPixelStorei
\- set pixel storage modes

.SH FORTRAN SPECIFICATION
SUBROUTINE \f3fglPixelStoref\fP(
INTEGER*4 \fIpname\fP,
.nf
.ta \w'\f3SUBROUTINE \fPfglPixelStoref( 'u
	REAL*4 \fIparam\fP )
.fi
SUBROUTINE \f3fglPixelStorei\fP(
INTEGER*4 \fIpname\fP,
.nf
.ta \w'\f3SUBROUTINE \fPfglPixelStorei( 'u
	INTEGER*4 \fIparam\fP )
.fi

.EQ
delim $$
.EN
.SH PARAMETERS
.TP \w'\f2pname\fP\ \ 'u 
\f2pname\fP
Specifies the symbolic name of the parameter to be set.
Six values affect the packing of pixel data into memory:
\f3GL_PACK_SWAP_BYTES\fP,
\f3GL_PACK_LSB_FIRST\fP,
\f3GL_PACK_ROW_LENGTH\fP,
\f3GL_PACK_IMAGE_HEIGHT\fP,
\f3GL_PACK_SKIP_PIXELS\fP, 
\f3GL_PACK_SKIP_ROWS\fP,
\f3GL_PACK_SKIP_IMAGES\fP, and
\f3GL_PACK_ALIGNMENT\fP.
Six more affect the unpacking of pixel data \f2from\fP memory:
\f3GL_UNPACK_SWAP_BYTES\fP,
\f3GL_UNPACK_LSB_FIRST\fP,
\f3GL_UNPACK_ROW_LENGTH\fP,
\f3GL_UNPACK_IMAGE_HEIGHT\fP,
\f3GL_UNPACK_SKIP_PIXELS\fP, 
\f3GL_UNPACK_SKIP_ROWS\fP, 
\f3GL_UNPACK_SKIP_IMAGES\fP, and
\f3GL_UNPACK_ALIGNMENT\fP.
.TP
\f2param\fP
Specifies the value that \f2pname\fP is set to.
.SH DESCRIPTION

\f3fglPixelStore\fP sets pixel storage modes that affect the operation of subsequent
\f3fglDrawPixels\fP and \f3fglReadPixels\fP as well as the unpacking of
polygon stipple patterns (see \f3fglPolygonStipple\fP), bitmaps (see
\f3fglBitmap\fP), texture patterns (see \f3fglTexImage1D\fP,
\f3fglTexImage2D\fP, \f3fglTexImage3D\fP, \f3fglTexSubImage1D\fP,
\f3fglTexSubImage2D\fP, \f3fglTexSubImage3D\fP).
Additionally, if the _arbstring(imaging) extension is supported, pixle
storage modes affect convlution filters
(see \f3fglConvolutionFilter1D\fP, \f3fglConvolutionFilter2D\fP, and
\f3fglSeparableFilter2D\fP, color table (see \f3fglColorTable\fP, and 
\f3fglColorSubTable\fP, and unpacking histogram (See \f3fglHistogram\fP),
and minmax (See \f3fglMinmax\fP) data.
.P
\f2pname\fP is a symbolic constant indicating the parameter to be set, and
\f2param\fP is the new value.  Six of the twelve storage parameters affect
how pixel data is returned to client memory.
They are as follows:
.TP 10
\f3GL_PACK_SWAP_BYTES\fP
If true,
byte ordering for multibyte color components,
depth components,
color indices,
or stencil indices
is reversed.
That is,
if a four-byte component consists of bytes
$b sub 0$,
$b sub 1$,
$b sub 2$,
$b sub 3$,
it is stored in memory as
$b sub 3$,
$b sub 2$,
$b sub 1$,
$b sub 0$
if \f3GL_PACK_SWAP_BYTES\fP is true.
\f3GL_PACK_SWAP_BYTES\fP has no effect on the memory order of components
within a pixel,
only on the order of bytes within components or indices.
For example,
the three components of a \f3GL_RGB\fP format pixel are always stored with
red first,
green second,
and blue third,
regardless of the value of \f3GL_PACK_SWAP_BYTES\fP.
.TP
\f3GL_PACK_LSB_FIRST\fP
If true,
bits are ordered within a byte from least significant to most significant;
otherwise,
the first bit in each byte is the most significant one.
This parameter is significant for bitmap data only.
.TP
\f3GL_PACK_ROW_LENGTH\fP
If greater than 0,
\f3GL_PACK_ROW_LENGTH\fP defines the number of pixels in a row.
If the first pixel of a row is placed at location $p$ in memory,
then the location of the first pixel of the next row is obtained by skipping
.sp
.ce
$k ~=~~ left  { ^ lpile { n l above {a over s left ceiling { s n l } over a right ceiling}} ~~ lpile {s ~>=~ a above s ~<~ a }$
.sp
components or indices,
where $n$ is the number of components or indices in a pixel,
$l$ is the number of pixels in a row
(\f3GL_PACK_ROW_LENGTH\fP if it is greater than 0,
the $width$ argument to the pixel routine otherwise),
$a$ is the value of \f3GL_PACK_ALIGNMENT\fP, and
$s$ is the size, in bytes, of a single component
(if $ a < s$, then it is as if $a ~=~ s$).
In the case of 1-bit values,
the location of the next row is obtained by skipping
.sp
.ce
$k ~=~ 8 a left ceiling { n l } over { 8 a } ^ right ceiling$
.sp
components or indices.
.IP
The word \f2component\fP in this description refers to the nonindex values
red,
green,
blue,
alpha,
and depth.
Storage format \f3GL_RGB\fP,
for example,
has three components per pixel:
first red,
then green,
and finally blue.
.TP
\f3GL_PACK_IMAGE_HEIGHT\fP
If greater than 0,
\f3GL_PACK_IMAGE_HEIGHT\fP defines the number of pixels in an image
three-dimensional texture volume.
Where ``image'' is defined by all pixels sharing the same third
dimension index.
If the first pixel of a row is placed at location $p$ in memory,
then the location of the first pixel of the next row is obtained by skipping
.sp
.ce
$k ~=~~ left  { ~ lpile { n l h above {a over s left ceiling { s n l h }
over a ^ right ceiling}} ~~ lpile {s ~>=~  a above s ~<~  a }$
.sp
components or indices, where $n$ is the number of components or indices
in a pixel, $l$ is the number of pixels in a row
(\f3GL_PACK_ROW_LENGTH\fP if it is greater than 0,  the
$width$ argument to \f3fglTexImage3d\fP otherwise), $h$ is the number of
rows in a pixel image (\f3GL_PACK_IMAGE_HEIGHT\fP if it is greater than
0, the $height$ arguemnt to the \f3fglTexImage3D\fP routine otherwise),
$a$ is the value of
\f3GL_PACK_ALIGNMENT\fP, and $s$ is the size, in bytes, of a single
component (if $ a < s$, then it is as if $a = s$).
.IP
The word \f2component\fP in this description refers to the nonindex values
red,
green,
blue,
alpha,
and depth.
Storage format \f3GL_RGB\fP,
for example,
has three components per pixel:
first red,
then green,
and finally blue.
.TP
\f3GL_PACK_SKIP_PIXELS\fP, \f3GL_PACK_SKIP_ROWS\fP, and \f3GL_PACK_SKIP_IMAGES\fP
These values are provided as a convenience to the programmer;
they provide no functionality that cannot be duplicated simply by
incrementing the pointer passed to \f3fglReadPixels\fP.
Setting \f3GL_PACK_SKIP_PIXELS\fP to $i$ is equivalent to incrementing
the pointer by $i n$ components or indices,
where $n$ is the number of components or indices in each pixel.
Setting \f3GL_PACK_SKIP_ROWS\fP to $j$ is equivalent to incrementing
the pointer by $j m$ components or indices,
where $m$ is the number of components or indices per row,
as just computed in the \f3GL_PACK_ROW_LENGTH\fP section.
Setting \f3GL_PACK_SKIP_IMAGES\fP to $k$ is equivalent to incrementing
the pointer by $k p$, where $p$ is the number of components or indices
per image, as computed in the \f3GL_PACK_IMAGE_HEIGHT\fP section.
.TP
\f3GL_PACK_ALIGNMENT\fP
Specifies the alignment requirements for the start of each pixel row in memory.
The allowable values are 
1 (byte-alignment),
2 (rows aligned to even-numbered bytes),
4 (word-alignment), and
8 (rows start on double-word boundaries).
.P
The other six of the twelve storage parameters affect how pixel data is
read from client memory.
These values are significant for \f3fglDrawPixels\fP,
\f3fglTexImage1D\fP,
\f3fglTexImage2D\fP,
\f3fglTexImage3D\fP,
\f3fglTexSubImage1D\fP,
\f3fglTexSubImage2D\fP,
\f3fglTexSubImage3D\fP,
\f3fglBitmap\fP, and
\f3fglPolygonStipple\fP.
.P
Additionally, if the _arbstring(imaging) extension is supported,
\f3fglColorTable\fP,
\f3fglColorSubTable\fP,
\f3fglConvolutionFilter1D\fP,
\f3fglConvolutionFilter2D\fP, and
\f3fglSeparableFilter2D\fP.
They are as follows:
.TP
\f3GL_UNPACK_SWAP_BYTES\fP
If true,
byte ordering for multibyte color components,
depth components,
color indices,
or stencil indices
is reversed.
That is,
if a four-byte component consists of bytes
$b sub 0$,
$b sub 1$,
$b sub 2$,
$b sub 3$,
it is taken from memory as
$b sub 3$,
$b sub 2$,
$b sub 1$,
$b sub 0$
if \f3GL_UNPACK_SWAP_BYTES\fP is true.
\f3GL_UNPACK_SWAP_BYTES\fP has no effect on the memory order of components
within a pixel,
only on the order of bytes within components or indices.
For example,
the three components of a \f3GL_RGB\fP format pixel are always stored with
red first,
green second,
and blue third,
regardless of the value of \f3GL_UNPACK_SWAP_BYTES\fP.
.TP
\f3GL_UNPACK_LSB_FIRST\fP
If true,
bits are ordered within a byte from least significant to most significant;
otherwise,
the first bit in each byte is the most significant one.
This is relevant only for bitmap data.
.TP
\f3GL_UNPACK_ROW_LENGTH\fP
If greater than 0,
\f3GL_UNPACK_ROW_LENGTH\fP defines the number of pixels in a row.
If the first pixel of a row is placed at location $p$ in memory,
then the location of the first pixel of the next row is obtained by skipping
.sp
.ce
$k ~=~~ left  { ~ lpile { n l above {a over s left ceiling { s n l }
over a ^ right ceiling}} ~~ lpile {s  ~>=~ a above s ~<~  a }$
.sp
components or indices,
where $n$ is the number of components or indices in a pixel,
$l$ is the number of pixels in a row
(\f3GL_UNPACK_ROW_LENGTH\fP if it is greater than 0,
the $width$ argument to the pixel routine otherwise),
$a$ is the value of \f3GL_UNPACK_ALIGNMENT\fP, and
$s$ is the size, in bytes, of a single component
(if $ a < s$, then it is as if $a = s$).
In the case of 1-bit values,
the location of the next row is obtained by skipping
.sp
.ce
$k ~=~ 8 a left ceiling { n l } over { 8 a } right ceiling$
.sp
components or indices.
.IP
The word \f2component\fP in this description refers to the nonindex values
red,
green,
blue,
alpha,
and depth.
Storage format \f3GL_RGB\fP,
for example,
has three components per pixel:
first red,
then green,
and finally blue.
.TP
\f3GL_UNPACK_IMAGE_HEIGHT\fP
If greater than 0,
\f3GL_UNPACK_IMAGE_HEIGHT\fP defines the number of pixels in an image of
a three-dimensional texture volume.  Where ``image'' is defined by all
pixel sharing the same third dimension index.
If the first pixel of a row is placed at location $p$ in memory,
then the location of the first pixel of the next row is obtained by skipping
.sp
.ce
$k ~=~~ left  {~ lpile { n l h above {a over s left ceiling { s n l h }
over a ^ right ceiling}} ~~ lpile {s ~ >=~  a above s  ~<~  a }$
.sp
components or indices,
where $n$ is the number of components or indices in a pixel,
$l$ is the number of pixels in a row
(\f3GL_UNPACK_ROW_LENGTH\fP if it is greater than 0,
the $width$ argument to \f3fglTexImage3D\fP otherwise),
$h$ is the number of rows in an image (\f3GL_UNPACK_IMAGE_HEIGHT\fP if
it is greater than 0, the $height$ argument to \f3fglTexImage3D\fP otherwise),
$a$ is the value of \f3GL_UNPACK_ALIGNMENT\fP, and
$s$ is the size, in bytes, of a single component
(if $ a < s$, then it is as if $a ~=~ s$).
.IP
The word \f2component\fP in this description refers to the nonindex values
red,
green,
blue,
alpha,
and depth.
Storage format \f3GL_RGB\fP,
for example,
has three components per pixel:
first red,
then green,
and finally blue.
.TP
\f3GL_UNPACK_SKIP_PIXELS\fP and \f3GL_UNPACK_SKIP_ROWS\fP
These values are provided as a convenience to the programmer;
they provide no functionality that cannot be duplicated by
incrementing the pointer passed to
\f3fglDrawPixels\fP,
\f3fglTexImage1D\fP,
\f3fglTexImage2D\fP,
\f3fglTexSubImage1D\fP,
\f3fglTexSubImage2D\fP,
\f3fglBitmap\fP, or
\f3fglPolygonStipple\fP.
Setting \f3GL_UNPACK_SKIP_PIXELS\fP to $i$ is equivalent to incrementing
the pointer by $i n$ components or indices,
where $n$ is the number of components or indices in each pixel.
Setting \f3GL_UNPACK_SKIP_ROWS\fP to $j$ is equivalent to incrementing
the pointer by $j k$ components or indices,
where $k$ is the number of components or indices per row,
as just computed in the \f3GL_UNPACK_ROW_LENGTH\fP section.
.TP
\f3GL_UNPACK_ALIGNMENT\fP
Specifies the alignment requirements for the start of each pixel row in memory.
The allowable values are
1 (byte-alignment),
2 (rows aligned to even-numbered bytes),
4 (word-alignment), and
8 (rows start on double-word boundaries).
.P
The following table gives the type,
initial value,
and range of valid values for each storage parameter
that can be set with \f3fglPixelStore\fP.
.sp

.TS
center tab(:) delim($$) ;
lb cb cb cb
l c c c.
_
\f2pname\fP:Type:Initial Value:Valid Range
_
\f3GL_PACK_SWAP_BYTES\fP:boolean:false:true or false
\f3GL_PACK_LSB_FIRST\fP:boolean:false:true or false
\f3GL_PACK_ROW_LENGTH\fP:integer:0:[0,\(if)
\f3GL_PACK_IMAGE_HEIGHT\fP:integer:0:[0, \(if)
\f3GL_PACK_SKIP_ROWS\fP:integer:0:[0,\(if)
\f3GL_PACK_SKIP_PIXELS\fP:integer:0:[0,\(if)
\f3GL_PACK_SKIP_IMAGES\fP:integer:0:[0,\(if)
\f3GL_PACK_ALIGNMENT\fP:integer:4:1, 2, 4, or 8
_
\f3GL_UNPACK_SWAP_BYTES\fP:boolean:false:true or false
\f3GL_UNPACK_LSB_FIRST\fP:boolean:false:true or false
\f3GL_UNPACK_ROW_LENGTH\fP:integer:0:[0,\(if)
\f3GL_UNPACK_IMAGE_HEIGHT\fP:integer:0:[0,\(if)
\f3GL_UNPACK_SKIP_ROWS\fP:integer:0:[0,\(if)
\f3GL_UNPACK_SKIP_PIXELS\fP:integer:0:[0,\(if)
\f3GL_UNPACK_SKIP_IMAGES\fP:integer:0:[0,\(if)
\f3GL_UNPACK_ALIGNMENT\fP:integer:4:1, 2, 4, or 8
_
.TE

.sp
\f3fglPixelStoref\fP can be used to set any pixel store parameter.
If the parameter type is boolean,
then if \f2param\fP is 0,
the parameter is false;
otherwise it is set to true.
If \f2pname\fP is a integer type parameter,
\f2param\fP is rounded to the nearest integer.
.P
Likewise, \f3fglPixelStorei\fP can also be used to set any of the
pixel store parameters.
Boolean parameters are set to false if \f2param\fP is 0 and true otherwise.
.SH NOTES
The pixel storage modes in effect when
\f3fglDrawPixels\fP,
\f3fglReadPixels\fP,
\f3fglTexImage1D\fP,
\f3fglTexImage2D\fP,
\f3fglTexImage3D\fP,
\f3fglTexSubImage1D\fP,
\f3fglTexSubImage2D\fP,
\f3fglTexSubImage3D\fP,
\f3fglBitmap\fP,
or \f3fglPolygonStipple\fP is placed in a display list control the interpretation
of memory data.
Likewise, if the _arbstring(imaging) extension is supported, the pixel
storage modes in effect when
\f3fglColorTable\fP,
\f3fglColorSubTable\fP,
\f3fglConvolutionFilter1D\fP,
\f3fglConvolutionFilter2D\fP, of
\f3fglSeparableFilter2D\fP is placed in a display list control the
intrepretation of memory data.
The pixel storage modes in effect when a display list is executed are
not significant.
.P
Pixel storage modes are client state and must be pushed and restored
using 
.br
\f3fglPushClientAttrib\fP and \f3fglPopClientAttrib\fP.
.SH ERRORS
\f3GL_INVALID_ENUM\fP is generated if \f2pname\fP is not an accepted value.
.P
\f3GL_INVALID_VALUE\fP is generated if a negative row length,
pixel skip,
or row skip value is specified,
or if alignment is specified as other than 1, 2, 4, or 8.
.P
\f3GL_INVALID_OPERATION\fP is generated if \f3fglPixelStore\fP
is executed between the execution of \f3fglBegin\fP
and the corresponding execution of \f3fglEnd\fP.
.SH ASSOCIATED GETS
\f3fglGet\fP with argument \f3GL_PACK_SWAP_BYTES\fP
.br
\f3fglGet\fP with argument \f3GL_PACK_LSB_FIRST\fP
.br
\f3fglGet\fP with argument \f3GL_PACK_ROW_LENGTH\fP
.br
\f3fglGet\fP with argument \f3GL_PACK_IMAGE_HEIGHT\fP
.br
\f3fglGet\fP with argument \f3GL_PACK_SKIP_ROWS\fP
.br
\f3fglGet\fP with argument \f3GL_PACK_SKIP_PIXELS\fP
.br
\f3fglGet\fP with argument \f3GL_PACK_SKIP_IMAGES\fP
.br
\f3fglGet\fP with argument \f3GL_PACK_ALIGNMENT\fP
.br
\f3fglGet\fP with argument \f3GL_UNPACK_SWAP_BYTES\fP
.br
\f3fglGet\fP with argument \f3GL_UNPACK_LSB_FIRST\fP
.br
\f3fglGet\fP with argument \f3GL_UNPACK_ROW_LENGTH\fP
.br
\f3fglGet\fP with argument \f3GL_UNPACK_IMAGE_HEIGHT\fP
.br
\f3fglGet\fP with argument \f3GL_UNPACK_SKIP_ROWS\fP
.br
\f3fglGet\fP with argument \f3GL_UNPACK_SKIP_PIXELS\fP
.br
\f3fglGet\fP with argument \f3GL_UNPACK_SKIP_IMAGES\fP
.br
\f3fglGet\fP with argument \f3GL_UNPACK_ALIGNMENT\fP
.SH SEE ALSO
\f3fglBitmap\fP,
\f3fglColorTable\fP,
\f3fglColorSubTable\fP,
\f3fglConvolutionFilter1D\fP,
\f3fglConvolutionFilter2D\fP,
\f3fglSeparableFilter2D\fP,
\f3fglDrawPixels\fP,
\f3fglHistogram\fP,
\f3fglMinmax\fP,
\f3fglPixelMap\fP,
\f3fglPixelTransfer\fP,
\f3fglPixelZoom\fP,
\f3fglPolygonStipple\fP,
\f3fglPushClientAttrib\fP,
\f3fglReadPixels\fP,
\f3fglTexImage1D\fP,
\f3fglTexImage2D\fP,
\f3fglTexImage3D\fP,
\f3fglTexSubImage1D\fP,
\f3fglTexSubImage2D\fP,
\f3fglTexSubImage3D\fP
@


1.1
log
@Initial revision
@
text
@d1 2
d6 22
a27 5
.ds Dp Feb 04 11:05
.ds Dm 5 Feb  4 11:
.ds Xs 12758    17
_header(PixelStore,set pixel storage modes)
_names(PixelStore,[fi])
d32 2
a33 1
_phead(_param1)
d53 3
a55 2
_phead(_param2)
Specifies the value that _param1 is set to.
d58 6
a63 6
_cmnd sets pixel storage modes that affect the operation of subsequent
_cmnd(DrawPixels) and _cmnd(ReadPixels) as well as the unpacking of
polygon stipple patterns (see _cmnd(PolygonStipple)), bitmaps (see
_cmnd(Bitmap)), texture patterns (see _cmnd(TexImage1D),
_cmnd(TexImage2D), _cmnd(TexImage3D), _cmnd(TexSubImage1D),
_cmnd(TexSubImage2D), _cmnd(TexSubImage3D)).
d66 4
a69 4
(see _cmnd(ConvolutionFilter1D), _cmnd(ConvolutionFilter2D), and
_cmnd(SeparableFilter2D), color table (see _cmnd(ColorTable), and 
_cmnd(ColorSubTable), and unpacking histogram (See _cmnd(Histogram)),
and minmax (See _cmnd(Minmax)) data.
d71 2
a72 2
_param1 is a symbolic constant indicating the parameter to be set, and
_param2 is the new value.  Six of the twelve storage parameters affect
d166 1
a166 1
$width$ argument to _cmnd(TexImage3d) otherwise), $h$ is the number of
d168 1
a168 1
0, the $height$ arguemnt to the _cmnd(TexImage3D) routine otherwise),
d189 1
a189 1
incrementing the pointer passed to _cmnd(ReadPixels).
d211 9
a219 9
These values are significant for _cmnd(DrawPixels),
_cmnd(TexImage1D),
_cmnd(TexImage2D),
_cmnd(TexImage3D),
_cmnd(TexSubImage1D),
_cmnd(TexSubImage2D),
_cmnd(TexSubImage3D),
_cmnd(Bitmap), and
_cmnd(PolygonStipple).
d222 5
a226 5
_cmnd(ColorTable),
_cmnd(ColorSubTable),
_cmnd(ConvolutionFilter1D),
_cmnd(ConvolutionFilter2D), and
_cmnd(SeparableFilter2D).
d320 1
a320 1
the $width$ argument to _cmnd(TexImage3D) otherwise),
d322 1
a322 1
it is greater than 0, the $height$ argument to _cmnd(TexImage3D) otherwise),
d344 7
a350 7
_cmnd(DrawPixels),
_cmnd(TexImage1D),
_cmnd(TexImage2D),
_cmnd(TexSubImage1D),
_cmnd(TexSubImage2D),
_cmnd(Bitmap), or
_cmnd(PolygonStipple).
d370 1
a370 1
that can be set with _cmnd.
d378 1
a378 1
_param1:Type:Initial Value:Valid Range
d401 1
a401 1
_cmnd(PixelStoref) can be used to set any pixel store parameter.
d403 1
a403 1
then if _param2 is 0,
d406 2
a407 2
If _param1 is a integer type parameter,
_param2 is rounded to the nearest integer.
d409 1
a409 1
Likewise, _cmnd(PixelStorei) can also be used to set any of the
d411 1
a411 1
Boolean parameters are set to false if _param2 is 0 and true otherwise.
d414 10
a423 10
_cmnd(DrawPixels),
_cmnd(ReadPixels),
_cmnd(TexImage1D),
_cmnd(TexImage2D),
_cmnd(TexImage3D),
_cmnd(TexSubImage1D),
_cmnd(TexSubImage2D),
_cmnd(TexSubImage3D),
_cmnd(Bitmap),
or _cmnd(PolygonStipple) is placed in a display list control the interpretation
d427 5
a431 5
_cmnd(ColorTable),
_cmnd(ColorSubTable),
_cmnd(ConvolutionFilter1D),
_cmnd(ConvolutionFilter2D), of
_cmnd(SeparableFilter2D) is placed in a display list control the
d439 1
a439 1
_cmnd(PushClientAttrib) and _cmnd(PopClientAttrib).
d441 1
a441 1
\f3GL_INVALID_ENUM\fP is generated if _param1 is not an accepted value.
d448 3
a450 3
\f3GL_INVALID_OPERATION\fP is generated if _cmnd
is executed between the execution of _cmnd(Begin)
and the corresponding execution of _cmnd(End).
d452 1
a452 1
_cmnd(Get) with argument \f3GL_PACK_SWAP_BYTES\fP
d454 1
a454 1
_cmnd(Get) with argument \f3GL_PACK_LSB_FIRST\fP
d456 1
a456 1
_cmnd(Get) with argument \f3GL_PACK_ROW_LENGTH\fP
d458 1
a458 1
_cmnd(Get) with argument \f3GL_PACK_IMAGE_HEIGHT\fP
d460 1
a460 1
_cmnd(Get) with argument \f3GL_PACK_SKIP_ROWS\fP
d462 1
a462 1
_cmnd(Get) with argument \f3GL_PACK_SKIP_PIXELS\fP
d464 1
a464 1
_cmnd(Get) with argument \f3GL_PACK_SKIP_IMAGES\fP
d466 1
a466 1
_cmnd(Get) with argument \f3GL_PACK_ALIGNMENT\fP
d468 1
a468 1
_cmnd(Get) with argument \f3GL_UNPACK_SWAP_BYTES\fP
d470 1
a470 1
_cmnd(Get) with argument \f3GL_UNPACK_LSB_FIRST\fP
d472 1
a472 1
_cmnd(Get) with argument \f3GL_UNPACK_ROW_LENGTH\fP
d474 1
a474 1
_cmnd(Get) with argument \f3GL_UNPACK_IMAGE_HEIGHT\fP
d476 1
a476 1
_cmnd(Get) with argument \f3GL_UNPACK_SKIP_ROWS\fP
d478 1
a478 1
_cmnd(Get) with argument \f3GL_UNPACK_SKIP_PIXELS\fP
d480 1
a480 1
_cmnd(Get) with argument \f3GL_UNPACK_SKIP_IMAGES\fP
d482 1
a482 1
_cmnd(Get) with argument \f3GL_UNPACK_ALIGNMENT\fP
d484 21
a504 21
_cmnd(Bitmap),
_cmnd(ColorTable),
_cmnd(ColorSubTable),
_cmnd(ConvolutionFilter1D),
_cmnd(ConvolutionFilter2D),
_cmnd(SeparableFilter2D),
_cmnd(DrawPixels),
_cmnd(Histogram),
_cmnd(Minmax),
_cmnd(PixelMap),
_cmnd(PixelTransfer),
_cmnd(PixelZoom),
_cmnd(PolygonStipple),
_cmnd(PushClientAttrib),
_cmnd(ReadPixels),
_cmnd(TexImage1D),
_cmnd(TexImage2D),
_cmnd(TexImage3D),
_cmnd(TexSubImage1D),
_cmnd(TexSubImage2D),
_cmnd(TexSubImage3D)
@


1.1.1.1
log
@win32-x11 source tree update March 26, 2001
@
text
@@
