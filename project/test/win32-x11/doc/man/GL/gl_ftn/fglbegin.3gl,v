head	1.2;
access;
symbols
	win32-x11-2001-03-26:1.1.1.1 SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2001.06.03.20.47.14;	author ssiddiqi;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.25.19.36.53;	author ssiddiqi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.03.25.19.36.53;	author ssiddiqi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Win32-X11 update sources check in, June 3, 2001 - ssiddiqi
@
text
@'\"! tbl|eqn | mmdoc
'\"macro stdmacro
.ds Vn Version 1.2
.ds Dt 10 Nov 1998
.ds Re Release 1.0
.ds Dp Apr 04 17:39
.ds Dm  Apr  4  200
.ds Xs 64986 15 fglbegin.gl
.TH FGLBEGIN 
.SH NAME
.B "fglBegin, fglEnd
\- delimit the vertices of a primitive or a group of like primitives

.SH FORTRAN SPECIFICATION
SUBROUTINE \f3fglBegin\fP(
INTEGER*4 \fImode\fP )
.nf
.fi

.EQ
delim $$
.EN
.SH PARAMETERS
.TP \w'\f2mode\fP\ \ 'u 
\f2mode\fP
Specifies the primitive or primitives that will be created from vertices
presented between \f3fglBegin\fP and the subsequent \f3fglEnd\fP.
Ten symbolic constants are accepted:
\f3GL_POINTS\fP,
\f3GL_LINES\fP,
\f3GL_LINE_STRIP\fP,
\f3GL_LINE_LOOP\fP,
\f3GL_TRIANGLES\fP,
\f3GL_TRIANGLE_STRIP\fP,
\f3GL_TRIANGLE_FAN\fP,
\f3GL_QUADS\fP,
\f3GL_QUAD_STRIP\fP, and
\f3GL_POLYGON\fP.
.SH FORTRAN SPECIFICATION
SUBROUTINE \f3fglEnd\fP( )
.nf
.fi

.SH DESCRIPTION
\f3fglBegin\fP and \f3fglEnd\fP delimit the vertices that define a primitive or
a group of like primitives.
\f3fglBegin\fP accepts a single argument that specifies in which of ten ways the
vertices are interpreted.
Taking $n$ as an integer count starting at one,
and $N$ as the total number of vertices specified,
the interpretations are as follows:
.TP 23
\f3GL_POINTS\fP
Treats each vertex as a single point.
Vertex $n$ defines point $n$.
$N$ points are drawn.
.TP
\f3GL_LINES\fP
Treats each pair of vertices as an independent line segment.
Vertices $2n^-^1$ and $2n$ define line $n$.
$N/2$ lines are drawn.
.TP
\f3GL_LINE_STRIP\fP
Draws a connected group of line segments from the first vertex
to the last.
Vertices $n$ and $n~+~1$ define line $n$.
$N^-^1$ lines are drawn.
.TP
\f3GL_LINE_LOOP\fP
Draws a connected group of line segments from the first vertex
to the last,
then back to the first.
Vertices $n$ and $n~+~1$ define line $n$.
The last line, however, is defined by vertices $N$ and $1$.
$N$ lines are drawn.
.TP
\f3GL_TRIANGLES\fP
Treats each triplet of vertices as an independent triangle.
Vertices $3n^-^2$, $3n^-^1$, and $3n$ define triangle $n$.
$N/3$ triangles are drawn.
.BP
.TP
\f3GL_TRIANGLE_STRIP\fP
Draws a connected group of triangles.  One triangle is defined for each
vertex presented after the first two vertices.  For odd $n$, vertices
$n$, $n~+~1$, and $n~+~2$ define triangle $n$.  For even $n$, vertices
$n~+~1$, $n$, and $n~+~2$ define triangle $n$.  $N^-^2$ triangles are
drawn.
.TP
\f3GL_TRIANGLE_FAN\fP
Draws a connected group of triangles.
One triangle is defined for each vertex presented after the first two vertices.
Vertices $1$,
$n~+~1$,
and $n~+~2$ define triangle $n$.
$N^-^2$ triangles are drawn.
.TP
\f3GL_QUADS\fP
Treats each group of four vertices as an independent quadrilateral.
Vertices $4n^-^3$, $4n^-^2$, $4n^-^1$, and $4n$
define quadrilateral $n$.
$N/4$ quadrilaterals are drawn.
.TP
\f3GL_QUAD_STRIP\fP
Draws a connected group of quadrilaterals.
One quadrilateral is defined for each pair of vertices presented
after the first pair.
Vertices $2n^-^1$, $2n$, $2n~+~2$, and $2n~+~1$ define quadrilateral $n$.
$N/2^-^1$ quadrilaterals are drawn.
Note that the order in which vertices are used to construct a quadrilateral
from strip data is different from that used with independent data.
.TP
\f3GL_POLYGON\fP
Draws a single,
convex polygon.
Vertices $1$ through $N$ define this polygon.
.P
Only a subset of GL commands can be used between \f3fglBegin\fP and \f3fglEnd\fP.
The commands are
\f3fglVertex\fP,
\f3fglColor\fP,
\f3fglIndex\fP,
\f3fglNormal\fP,
\f3fglTexCoord\fP,
\f3fglEvalCoord\fP,
\f3fglEvalPoint\fP,
\f3fglArrayElement\fP,
\f3fglMaterial\fP, and
\f3fglEdgeFlag\fP.
Also,
it is acceptable to use
\f3fglCallList\fP or
\f3fglCallLists\fP to execute
display lists that include only the preceding commands.
If any other GL command is executed between \f3fglBegin\fP and \f3fglEnd\fP,
the error flag is set and the command is ignored.
.P
Regardless of the value chosen for \f2mode\fP,
there is no limit to the number of vertices that can be defined
between \f3fglBegin\fP and \f3fglEnd\fP.
Lines,
triangles,
quadrilaterals,
and polygons that are incompletely specified are not drawn.
Incomplete specification results when either too few vertices are
provided to specify even a single primitive or when an incorrect multiple 
of vertices is specified. The incomplete primitive is ignored; the rest are drawn.
.P
The minimum specification of vertices
for each primitive is as follows:
1 for a point,
2 for a line,
3 for a triangle,
4 for a quadrilateral,
and 3 for a polygon.
Modes that require a certain multiple of vertices are
\f3GL_LINES\fP (2),
\f3GL_TRIANGLES\fP (3),
\f3GL_QUADS\fP (4),
and \f3GL_QUAD_STRIP\fP (2).
.SH ERRORS
\f3GL_INVALID_ENUM\fP is generated if \f2mode\fP is set to an unaccepted value.
.P
\f3GL_INVALID_OPERATION\fP is generated if \f3fglBegin\fP is executed between a 
\f3fglBegin\fP
and the corresponding execution of \f3fglEnd\fP.
.P
\f3GL_INVALID_OPERATION\fP is generated if \f3fglEnd\fP is executed without being
preceded by a \f3fglBegin\fP.
.P
\f3GL_INVALID_OPERATION\fP is generated if a command other than
\f3fglVertex\fP,
\f3fglColor\fP,
\f3fglIndex\fP,
\f3fglNormal\fP,
\f3fglTexCoord\fP,
\f3fglEvalCoord\fP,
\f3fglEvalPoint\fP,
\f3fglArrayElement\fP,
\f3fglMaterial\fP,
\f3fglEdgeFlag\fP,
\f3fglCallList\fP, or
\f3fglCallLists\fP is executed between
the execution of \f3fglBegin\fP and the corresponding
execution \f3fglEnd\fP.
.P
Execution of 
\f3fglEnableClientState\fP,
\f3fglDisableClientState\fP,
\f3fglEdgeFlagPointer\fP,
\f3fglTexCoordPointer\fP,
\f3fglColorPointer\fP,
\f3fglIndexPointer\fP,
\f3fglNormalPointer\fP,
.br
\f3fglVertexPointer\fP,
\f3fglInterleavedArrays\fP, or
\f3fglPixelStore\fP is not allowed after a call to \f3fglBegin\fP and before
the corresponding call to \f3fglEnd\fP,
but an error may or may not be generated.
.SH SEE ALSO
\f3fglArrayElement\fP,
\f3fglCallList\fP,
\f3fglCallLists\fP,
\f3fglColor\fP,
\f3fglEdgeFlag\fP,
\f3fglEvalCoord\fP,
.br
\f3fglEvalPoint\fP,
\f3fglIndex\fP,
\f3fglMaterial\fP,
\f3fglNormal\fP,
\f3fglTexCoord\fP,
\f3fglVertex\fP


@


1.1
log
@Initial revision
@
text
@d1 2
d6 14
a19 5
.ds Dp Feb 04 11:04
.ds Dm 0 Feb  4 11:
.ds Xs 05437     8
_header(Begin,delimit the vertices of a primitive or a group of like primitives)
_names(Begin)
d24 2
a25 1
_phead(_param1)
d27 1
a27 1
presented between _cmnd(Begin) and the subsequent _cmnd(End).
d39 5
a43 1
_names(End)
d45 1
a45 1
_cmnd(Begin) and _cmnd(End) delimit the vertices that define a primitive or
d47 1
a47 1
_cmnd(Begin) accepts a single argument that specifies in which of ten ways the
d118 1
a118 1
Only a subset of GL commands can be used between _cmnd(Begin) and _cmnd(End).
d120 10
a129 10
_cmnd(Vertex),
_cmnd(Color),
_cmnd(Index),
_cmnd(Normal),
_cmnd(TexCoord),
_cmnd(EvalCoord),
_cmnd(EvalPoint),
_cmnd(ArrayElement),
_cmnd(Material), and
_cmnd(EdgeFlag).
d132 2
a133 2
_cmnd(CallList) or
_cmnd(CallLists) to execute
d135 1
a135 1
If any other GL command is executed between _cmnd(Begin) and _cmnd(End),
d138 1
a138 1
Regardless of the value chosen for _param1(1),
d140 1
a140 1
between _cmnd(Begin) and _cmnd(End).
d162 1
a162 1
\f3GL_INVALID_ENUM\fP is generated if _param1(1) is set to an unaccepted value.
d164 3
a166 3
\f3GL_INVALID_OPERATION\fP is generated if _cmnd(Begin) is executed between a 
_cmnd(Begin)
and the corresponding execution of _cmnd(End).
d168 2
a169 2
\f3GL_INVALID_OPERATION\fP is generated if _cmnd(End) is executed without being
preceded by a _cmnd(Begin).
d172 14
a185 14
_cmnd(Vertex),
_cmnd(Color),
_cmnd(Index),
_cmnd(Normal),
_cmnd(TexCoord),
_cmnd(EvalCoord),
_cmnd(EvalPoint),
_cmnd(ArrayElement),
_cmnd(Material),
_cmnd(EdgeFlag),
_cmnd(CallList), or
_cmnd(CallLists) is executed between
the execution of _cmnd(Begin) and the corresponding
execution _cmnd(End).
d188 7
a194 7
_cmnd(EnableClientState),
_cmnd(DisableClientState),
_cmnd(EdgeFlagPointer),
_cmnd(TexCoordPointer),
_cmnd(ColorPointer),
_cmnd(IndexPointer),
_cmnd(NormalPointer),
d196 4
a199 4
_cmnd(VertexPointer),
_cmnd(InterleavedArrays), or
_cmnd(PixelStore) is not allowed after a call to _cmnd(Begin) and before
the corresponding call to _cmnd(End),
d202 6
a207 6
_cmnd(ArrayElement),
_cmnd(CallList),
_cmnd(CallLists),
_cmnd(Color),
_cmnd(EdgeFlag),
_cmnd(EvalCoord),
d209 6
a214 6
_cmnd(EvalPoint),
_cmnd(Index),
_cmnd(Material),
_cmnd(Normal),
_cmnd(TexCoord),
_cmnd(Vertex)
@


1.1.1.1
log
@win32-x11 source tree update March 26, 2001
@
text
@@
