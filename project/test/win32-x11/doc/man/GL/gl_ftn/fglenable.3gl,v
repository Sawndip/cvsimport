head	1.2;
access;
symbols
	win32-x11-2001-03-26:1.1.1.1 SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2001.06.03.20.47.16;	author ssiddiqi;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.25.19.36.53;	author ssiddiqi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.03.25.19.36.53;	author ssiddiqi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Win32-X11 update sources check in, June 3, 2001 - ssiddiqi
@
text
@'\"! eqn|tbl | mmdoc
'\"macro stdmacro
.ds Vn Version 1.2
.ds Dt 10 Nov 1998
.ds Re Release 1.0
.ds Dp Apr 04 17:40
.ds Dm  Apr  4  200
.ds Xs 24530 28 fglenable.gl
.TH FGLENABLE 
.SH NAME
.B "fglEnable, fglDisable
\- enable or disable server-side GL capabilities

.SH FORTRAN SPECIFICATION
SUBROUTINE \f3fglEnable\fP(
INTEGER*4 \fIcap\fP )
.nf
.fi

.SH PARAMETERS
.TP \w'\f2cap\fP\ \ 'u 
\f2cap\fP
Specifies a symbolic constant indicating a GL capability.
.SH FORTRAN SPECIFICATION
SUBROUTINE \f3fglDisable\fP(
INTEGER*4 \fIcap\fP )
.nf
.fi

.SH PARAMETERS
.TP
\f2cap\fP
Specifies a symbolic constant indicating a GL capability.
.SH DESCRIPTION
\f3fglEnable\fP and \f3fglDisable\fP enable and disable various capabilities.
Use \f3fglIsEnabled\fP or \f3fglGet\fP to determine the current setting
of any capability. The initial value for each capability with the
exception of \f3GL_DITHER\fP is \f3GL_FALSE\fP. The initial value for
\f3GL_DITHER\fP is \f3GL_TRUE\fP. 
.P
Both \f3fglEnable\fP and \f3fglDisable\fP take a single argument, \f2cap\fP,
which can assume one of the following values:
.TP 25
\f3GL_ALPHA_TEST\fP
If enabled,
do alpha testing. See
\f3fglAlphaFunc\fP.
.TP
\f3GL_AUTO_NORMAL\fP
If enabled,
generate normal vectors when either
\f3GL_MAP2_VERTEX_3\fP or
\f3GL_MAP2_VERTEX_4\fP is used to generate vertices. 
See \f3fglMap2\fP.
.TP
\f3GL_BLEND\fP
If enabled,
blend the incoming RGBA color values with the values in the color
buffers. See \f3fglBlendFunc\fP.
.TP
\f3GL_CLIP_PLANE\fP\f2i\fP
If enabled,
clip geometry against user-defined clipping plane \f2i\fP.
See \f3fglClipPlane\fP.
.TP
\f3GL_COLOR_LOGIC_OP\fP
If enabled,
apply the currently selected logical operation to the incoming RGBA
color and color buffer values. See \f3fglLogicOp\fP.
.TP
\f3GL_COLOR_MATERIAL\fP
If enabled,
have one or more material parameters track the current color.
See \f3fglColorMaterial\fP.
.TP
\f3GL_COLOR_TABLE\fP
If enabled,
preform a color table lookup on the incoming RGBA color values.
See \f3fglColorTable\fP.
.TP
\f3GL_CONVOLUTION_1D\fP
If enabled,
perform a 1D convolution operation on incoming RGBA color values.
See \f3fglConvolutionFilter1D\fP.
.TP
\f3GL_CONVOLUTION_2D\fP
If enabled,
perform a 2D convolution operation on incoming RGBA color values.
See \f3fglConvolutionFilter2D\fP.
.TP
\f3GL_CULL_FACE\fP
If enabled,
cull polygons based on their winding in window coordinates. 
See \f3fglCullFace\fP.
.TP
\f3GL_DEPTH_TEST\fP
If enabled,
do depth comparisons and update the depth buffer. Note that even if
the depth buffer exists and the depth mask is non-zero, the 
depth buffer is not updated if the depth test is disabled. See
\f3fglDepthFunc\fP and 
.br
\f3fglDepthRange\fP. 
.TP
\f3GL_DITHER\fP	
If enabled,
dither color components or indices before they are written to the
color buffer.
.TP
\f3GL_FOG\fP
If enabled,
blend a fog color into the posttexturing color.
See \f3fglFog\fP.
.TP
\f3GL_HISTOGRAM\fP
If enabled,
histogram incoming RGBA color values.
See \f3fglHistogram\fP.
.TP
\f3GL_INDEX_LOGIC_OP\fP
If enabled,
apply the currently selected logical operation to the incoming index and color
buffer indices. See 
.br
\f3fglLogicOp\fP.
.TP
\f3GL_LIGHT\fP\f2i\fP
If enabled,
include light \f2i\fP in the evaluation of the lighting
equation. See \f3fglLightModel\fP and \f3fglLight\fP.
.TP
\f3GL_LIGHTING\fP
If enabled,
use the current lighting parameters to compute the vertex color or index.
Otherwise, simply associate the current color or index with each
vertex. See 
.br
\f3fglMaterial\fP, \f3fglLightModel\fP, and \f3fglLight\fP.
.TP
\f3GL_LINE_SMOOTH\fP
If enabled,
draw lines with correct filtering.
Otherwise,
draw aliased lines.
See \f3fglLineWidth\fP.
.TP
\f3GL_LINE_STIPPLE\fP
If enabled,
use the current line stipple pattern when drawing lines. See
\f3fglLineStipple\fP. 
.TP
\f3GL_MAP1_COLOR_4\fP
If enabled,
calls to
\f3fglEvalCoord1\fP,
\f3fglEvalMesh1\fP, and
\f3fglEvalPoint1\fP generate RGBA values.
See \f3fglMap1\fP.
.TP
\f3GL_MAP1_INDEX\fP
If enabled,
calls to
\f3fglEvalCoord1\fP,
\f3fglEvalMesh1\fP, and
\f3fglEvalPoint1\fP generate color indices.
See \f3fglMap1\fP.
.TP
\f3GL_MAP1_NORMAL\fP
If enabled,
calls to
\f3fglEvalCoord1\fP,
\f3fglEvalMesh1\fP, and
\f3fglEvalPoint1\fP generate normals.
See \f3fglMap1\fP.
.TP
\f3GL_MAP1_TEXTURE_COORD_1\fP
If enabled,
calls to
\f3fglEvalCoord1\fP,
\f3fglEvalMesh1\fP, and
\f3fglEvalPoint1\fP generate
\f2s\fP
texture coordinates.
See \f3fglMap1\fP.
.TP
\f3GL_MAP1_TEXTURE_COORD_2\fP
If enabled,
calls to
\f3fglEvalCoord1\fP,
\f3fglEvalMesh1\fP, and
\f3fglEvalPoint1\fP generate
\f2s\fP and
\f2t\fP texture coordinates.
See \f3fglMap1\fP.
.TP
\f3GL_MAP1_TEXTURE_COORD_3\fP
If enabled,
calls to
\f3fglEvalCoord1\fP,
\f3fglEvalMesh1\fP, and
\f3fglEvalPoint1\fP generate
\f2s\fP,
\f2t\fP, and
\f2r\fP texture coordinates.
See \f3fglMap1\fP.
.TP
\f3GL_MAP1_TEXTURE_COORD_4\fP
If enabled,
calls to
\f3fglEvalCoord1\fP,
\f3fglEvalMesh1\fP, and
\f3fglEvalPoint1\fP generate
\f2s\fP,
\f2t\fP,
\f2r\fP, and
\f2q\fP texture coordinates.
See \f3fglMap1\fP.
.TP
\f3GL_MAP1_VERTEX_3\fP
If enabled,
calls to
\f3fglEvalCoord1\fP,
\f3fglEvalMesh1\fP, and
\f3fglEvalPoint1\fP generate
\f2x\fP, \f2y\fP, and \f2z\fP vertex coordinates.
See \f3fglMap1\fP.
.TP
\f3GL_MAP1_VERTEX_4\fP
If enabled,
calls to
\f3fglEvalCoord1\fP,
\f3fglEvalMesh1\fP, and
\f3fglEvalPoint1\fP generate
homogeneous
\f2x\fP,
\f2y\fP,
\f2z\fP, and
\f2w\fP vertex coordinates.
See \f3fglMap1\fP.
.TP
\f3GL_MAP2_COLOR_4\fP
If enabled,
calls to
\f3fglEvalCoord2\fP,
\f3fglEvalMesh2\fP, and
\f3fglEvalPoint2\fP generate RGBA values.
See \f3fglMap2\fP.
.TP
\f3GL_MAP2_INDEX\fP
If enabled,
calls to
\f3fglEvalCoord2\fP,
\f3fglEvalMesh2\fP, and
\f3fglEvalPoint2\fP generate color indices.
See \f3fglMap2\fP.
.TP
\f3GL_MAP2_NORMAL\fP
If enabled,
calls to
\f3fglEvalCoord2\fP,
\f3fglEvalMesh2\fP, and
\f3fglEvalPoint2\fP generate normals.
See \f3fglMap2\fP.
.TP
\f3GL_MAP2_TEXTURE_COORD_1\fP
If enabled,
calls to
\f3fglEvalCoord2\fP,
\f3fglEvalMesh2\fP, and
\f3fglEvalPoint2\fP generate
\f2s\fP
texture coordinates.
See \f3fglMap2\fP.
.TP
\f3GL_MAP2_TEXTURE_COORD_2\fP
If enabled,
calls to
\f3fglEvalCoord2\fP,
\f3fglEvalMesh2\fP, and
\f3fglEvalPoint2\fP generate
\f2s\fP and
\f2t\fP texture coordinates.
See \f3fglMap2\fP.
.TP
\f3GL_MAP2_TEXTURE_COORD_3\fP
If enabled,
calls to
\f3fglEvalCoord2\fP,
\f3fglEvalMesh2\fP, and
\f3fglEvalPoint2\fP generate
\f2s\fP,
\f2t\fP, and
\f2r\fP texture coordinates.
See \f3fglMap2\fP.
.TP
\f3GL_MAP2_TEXTURE_COORD_4\fP
If enabled,
calls to
\f3fglEvalCoord2\fP,
\f3fglEvalMesh2\fP, and
\f3fglEvalPoint2\fP generate
\f2s\fP,
\f2t\fP,
\f2r\fP, and
\f2q\fP texture coordinates.
See \f3fglMap2\fP.
.TP
\f3GL_MAP2_VERTEX_3\fP
If enabled,
calls to
\f3fglEvalCoord2\fP,
\f3fglEvalMesh2\fP, and
\f3fglEvalPoint2\fP generate
\f2x\fP, \f2y\fP, and \f2z\fP vertex coordinates.
See \f3fglMap2\fP.
.TP
\f3GL_MAP2_VERTEX_4\fP
If enabled,
calls to
\f3fglEvalCoord2\fP,
\f3fglEvalMesh2\fP, and
\f3fglEvalPoint2\fP generate
homogeneous
\f2x\fP,
\f2y\fP,
\f2z\fP, and
\f2w\fP vertex coordinates.
See \f3fglMap2\fP.
.TP
\f3GL_MINMAX\fP
If enabled,
compute the minimum and maximum values of incoming RGBA color values.
See \f3fglMinmax\fP.
.TP
\f3GL_NORMALIZE\fP
If enabled,
normal vectors specified with \f3fglNormal\fP are scaled to unit length
after transformation. See \f3fglNormal\fP.
.TP
\f3GL_POINT_SMOOTH\fP
If enabled,
draw points with proper filtering.
Otherwise,
draw aliased points.
See \f3fglPointSize\fP.
.TP
\f3GL_POLYGON_OFFSET_FILL\fP
If enabled, and if the polygon is rendered in
\f3GL_FILL\fP mode, an offset is added to depth values of a polygon's
fragments before the depth comparison is performed. 
See \f3fglPolygonOffset\fP. 
.TP
\f3GL_POLYGON_OFFSET_LINE\fP
If enabled, and if the polygon is rendered in
\f3GL_LINE\fP mode, an offset is added to depth values of a polygon's
fragments before the depth comparison is performed. See \f3fglPolygonOffset\fP. 
.TP
\f3GL_POLYGON_OFFSET_POINT\fP
If enabled, an offset is added to depth values of a polygon's fragments
before the depth comparison is performed, if the polygon is rendered in 
\f3GL_POINT\fP mode. See \f3fglPolygonOffset\fP. 
.TP
\f3GL_POLYGON_SMOOTH\fP
If enabled, draw polygons with proper filtering.
Otherwise, draw aliased polygons. For correct anti-aliased polygons,
an alpha buffer is needed and the polygons must be sorted front to
back. 
.TP
\f3GL_POLYGON_STIPPLE\fP
If enabled,
use the current polygon stipple pattern when rendering
polygons. See \f3fglPolygonStipple\fP.
.TP
\f3GL_POST_COLOR_MATRIX_COLOR_TABLE\fP
If enabled,
preform a color table lookup on RGBA color values after color matrix 
transformation.
See \f3fglColorTable\fP.
.TP
\f3GL_POST_CONVOLUTION_COLOR_TABLE\fP
If enabled,
preform a color table lookup on RGBA color values after convolution.
See \f3fglColorTable\fP.
.TP
\f3GL_RESCALE_NORMAL\fP
If enabled, normal vectors specified with \f3fglNormal\fP are scaled to
unit length after transformation. See \f3fglNormal\fP.
.TP
\f3GL_SEPARABLE_2D\fP
If enabled, perform a two-dimensional convolution operation using a separable
convolution filter on incoming RGBA color values.
See \f3fglSeparableFilter2D\fP.
.TP
\f3GL_SCISSOR_TEST\fP
If enabled,
discard fragments that are outside the scissor rectangle. 
See \f3fglScissor\fP.
.TP
\f3GL_STENCIL_TEST\fP
If enabled,
do stencil testing and update the stencil buffer. 
See \f3fglStencilFunc\fP and \f3fglStencilOp\fP.
.TP
\f3GL_TEXTURE_1D\fP
If enabled, one-dimensional texturing is performed
(unless two- or three-dimensional texturing is also enabled).
See \f3fglTexImage1D\fP.
.TP
\f3GL_TEXTURE_2D\fP
If enabled, two-dimensional texturing is performed
(unless three-dimensional texturing is also enabled). See \f3fglTexImage2D\fP.
.TP
\f3GL_TEXTURE_3D\fP
If enabled, three-dimensional texturing is performed. See \f3fglTexImage3D\fP.
.TP
\f3GL_TEXTURE_GEN_Q\fP
If enabled,
the \f2q\fP texture coordinate is computed using
the texture generation function defined with \f3fglTexGen\fP.
Otherwise, the current \f2q\fP texture coordinate is used.
See \f3fglTexGen\fP.
.TP
\f3GL_TEXTURE_GEN_R\fP
If enabled,
the \f2r\fP texture coordinate is computed using
the texture generation function defined with \f3fglTexGen\fP.
Otherwise, the current \f2r\fP texture coordinate is used.
See \f3fglTexGen\fP.
.TP
\f3GL_TEXTURE_GEN_S\fP
If enabled,
the \f2s\fP texture coordinate is computed using
the texture generation function defined with \f3fglTexGen\fP.
Otherwise, the current \f2s\fP texture coordinate is used. 
See \f3fglTexGen\fP.
.TP
\f3GL_TEXTURE_GEN_T\fP
If enabled,
the \f2t\fP texture coordinate is computed using
the texture generation function defined with \f3fglTexGen\fP.
Otherwise, the current \f2t\fP texture coordinate is used.
See \f3fglTexGen\fP.
.SH NOTES
\f3GL_POLYGON_OFFSET_FILL\fP, \f3GL_POLYGON_OFFSET_LINE\fP,
\f3GL_POLYGON_OFFSET_POINT\fP,
\f3GL_COLOR_LOGIC_OP\fP, and \f3GL_INDEX_LOGIC_OP\fP are available
only if the GL version is 1.1 or greater. 
.P
\f3GL_RESCALE_NORMAL\fP, and \f3GL_TEXTURE_3D\fP are available only if the
GL version is 1.2 or greater.
.P
\f3GL_COLOR_TABLE\fP, \f3GL_CONVOLUTION_1D\fP, \f3GL_CONVOLUTION_2D\fP,
\f3GL_HISTOGRAM\fP, \f3GL_MINMAX\fP,
\f3GL_POST_COLOR_MATRIX_COLOR_TABLE\fP,
\f3GL_POST_CONVOLUTION_COLOR_TABLE\fP, and
\f3GL_SEPARABLE_2D\fP are available only if _arbstring(imaging) is returned
from \f3fglGet\fP with an argument of \f3GL_EXTENSIONS\fP.
.P
If _arbstring(multitexture) is supported, \f3GL_TEXTURE_1D\fP,
\f3GL_TEXTURE_2D\fP, \f3GL_TEXTURE_3D\fP, \f3GL_TEXTURE_GEN_S\fP,
\f3GL_TEXTURE_GEN_T\fP, \f3GL_TEXTURE_GEN_R\fP, and \f3GL_TEXTURE_GEN_Q\fP
enable or disable the respective state for the active texture unit
specified with \f3fglActiveTextureARB\fP.
.SH ERRORS
\f3GL_INVALID_ENUM\fP is generated if \f2cap\fP is not one of the values
listed previously.
.P
\f3GL_INVALID_OPERATION\fP is generated if \f3fglEnable\fP or \f3fglDisable\fP
is executed between the execution of \f3fglBegin\fP
and the corresponding execution of \f3fglEnd\fP.
.SH SEE ALSO
\f3fglActiveTextureARB\fP,
\f3fglAlphaFunc\fP,
\f3fglBlendFunc\fP,
\f3fglClipPlane\fP,
\f3fglColorMaterial\fP,
\f3fglCullFace\fP,
\f3fglDepthFunc\fP,
\f3fglDepthRange\fP,
\f3fglEnableClientState\fP,
\f3fglFog\fP,
\f3fglGet\fP,
\f3fglIsEnabled\fP,
\f3fglLight\fP,
\f3fglLightModel\fP,
\f3fglLineWidth\fP,
\f3fglLineStipple\fP,
\f3fglLogicOp\fP,
\f3fglMap1\fP,
\f3fglMap2\fP,
\f3fglMaterial\fP,
\f3fglNormal\fP,
\f3fglPointSize\fP,
\f3fglPolygonMode\fP,
\f3fglPolygonOffset\fP,
\f3fglPolygonStipple\fP,
\f3fglScissor\fP,
\f3fglStencilFunc\fP,
\f3fglStencilOp\fP,
\f3fglTexGen\fP,
\f3fglTexImage1D\fP,
\f3fglTexImage2D\fP,
\f3fglTexImage3D\fP

@


1.1
log
@Initial revision
@
text
@d1 2
d6 14
a19 5
.ds Dp Feb 04 11:05
.ds Dm 1 Feb  4 11:
.ds Xs 48946    14
_header(Enable, enable or disable server-side GL capabilities)
_names(Enable)
d21 2
a22 1
_phead(_param1)
d24 6
a29 1
_names(Disable)
d31 2
a32 1
_phead(_param1)
d35 2
a36 2
_cmnd and _cmnd(Disable) enable and disable various capabilities.
Use _cmnd(IsEnabled) or _cmnd(Get) to determine the current setting
d41 1
a41 1
Both _cmnd(Enable) and _cmnd(Disable) take a single argument, _param1,
d47 1
a47 1
_cmnd(AlphaFunc).
d54 1
a54 1
See _cmnd(Map2).
d59 1
a59 1
buffers. See _cmnd(BlendFunc).
d64 1
a64 1
See _cmnd(ClipPlane).
d69 1
a69 1
color and color buffer values. See _cmnd(LogicOp).
d74 1
a74 1
See _cmnd(ColorMaterial).
d79 1
a79 1
See _cmnd(ColorTable).
d84 1
a84 1
See _cmnd(ConvolutionFilter1D).
d89 1
a89 1
See _cmnd(ConvolutionFilter2D).
d94 1
a94 1
See _cmnd(CullFace).
d101 1
a101 1
_cmnd(DepthFunc) and 
d103 1
a103 1
_cmnd(DepthRange). 
d113 1
a113 1
See _cmnd(Fog).
d118 1
a118 1
See _cmnd(Histogram).
d125 1
a125 1
_cmnd(LogicOp).
d130 1
a130 1
equation. See _cmnd(LightModel) and _cmnd(Light).
d138 1
a138 1
_cmnd(Material), _cmnd(LightModel), and _cmnd(Light).
d145 1
a145 1
See _cmnd(LineWidth).
d150 1
a150 1
_cmnd(LineStipple). 
d155 4
a158 4
_cmnd(EvalCoord1),
_cmnd(EvalMesh1), and
_cmnd(EvalPoint1) generate RGBA values.
See _cmnd(Map1).
d163 4
a166 4
_cmnd(EvalCoord1),
_cmnd(EvalMesh1), and
_cmnd(EvalPoint1) generate color indices.
See _cmnd(Map1).
d171 4
a174 4
_cmnd(EvalCoord1),
_cmnd(EvalMesh1), and
_cmnd(EvalPoint1) generate normals.
See _cmnd(Map1).
d179 3
a181 3
_cmnd(EvalCoord1),
_cmnd(EvalMesh1), and
_cmnd(EvalPoint1) generate
d184 1
a184 1
See _cmnd(Map1).
d189 3
a191 3
_cmnd(EvalCoord1),
_cmnd(EvalMesh1), and
_cmnd(EvalPoint1) generate
d194 1
a194 1
See _cmnd(Map1).
d199 3
a201 3
_cmnd(EvalCoord1),
_cmnd(EvalMesh1), and
_cmnd(EvalPoint1) generate
d205 1
a205 1
See _cmnd(Map1).
d210 3
a212 3
_cmnd(EvalCoord1),
_cmnd(EvalMesh1), and
_cmnd(EvalPoint1) generate
d217 1
a217 1
See _cmnd(Map1).
d222 3
a224 3
_cmnd(EvalCoord1),
_cmnd(EvalMesh1), and
_cmnd(EvalPoint1) generate
d226 1
a226 1
See _cmnd(Map1).
d231 3
a233 3
_cmnd(EvalCoord1),
_cmnd(EvalMesh1), and
_cmnd(EvalPoint1) generate
d239 1
a239 1
See _cmnd(Map1).
d244 4
a247 4
_cmnd(EvalCoord2),
_cmnd(EvalMesh2), and
_cmnd(EvalPoint2) generate RGBA values.
See _cmnd(Map2).
d252 4
a255 4
_cmnd(EvalCoord2),
_cmnd(EvalMesh2), and
_cmnd(EvalPoint2) generate color indices.
See _cmnd(Map2).
d260 4
a263 4
_cmnd(EvalCoord2),
_cmnd(EvalMesh2), and
_cmnd(EvalPoint2) generate normals.
See _cmnd(Map2).
d268 3
a270 3
_cmnd(EvalCoord2),
_cmnd(EvalMesh2), and
_cmnd(EvalPoint2) generate
d273 1
a273 1
See _cmnd(Map2).
d278 3
a280 3
_cmnd(EvalCoord2),
_cmnd(EvalMesh2), and
_cmnd(EvalPoint2) generate
d283 1
a283 1
See _cmnd(Map2).
d288 3
a290 3
_cmnd(EvalCoord2),
_cmnd(EvalMesh2), and
_cmnd(EvalPoint2) generate
d294 1
a294 1
See _cmnd(Map2).
d299 3
a301 3
_cmnd(EvalCoord2),
_cmnd(EvalMesh2), and
_cmnd(EvalPoint2) generate
d306 1
a306 1
See _cmnd(Map2).
d311 3
a313 3
_cmnd(EvalCoord2),
_cmnd(EvalMesh2), and
_cmnd(EvalPoint2) generate
d315 1
a315 1
See _cmnd(Map2).
d320 3
a322 3
_cmnd(EvalCoord2),
_cmnd(EvalMesh2), and
_cmnd(EvalPoint2) generate
d328 1
a328 1
See _cmnd(Map2).
d333 1
a333 1
See _cmnd(Minmax).
d337 2
a338 2
normal vectors specified with _cmnd(Normal) are scaled to unit length
after transformation. See _cmnd(Normal).
d345 1
a345 1
See _cmnd(PointSize).
d351 1
a351 1
See _cmnd(PolygonOffset). 
d356 1
a356 1
fragments before the depth comparison is performed. See _cmnd(PolygonOffset). 
d361 1
a361 1
\f3GL_POINT\fP mode. See _cmnd(PolygonOffset). 
d372 1
a372 1
polygons. See _cmnd(PolygonStipple).
d378 1
a378 1
See _cmnd(ColorTable).
d383 1
a383 1
See _cmnd(ColorTable).
d386 2
a387 2
If enabled, normal vectors specified with _cmnd(Normal) are scaled to
unit length after transformation. See _cmnd(Normal).
d392 1
a392 1
See _cmnd(SeparableFilter2D).
d397 1
a397 1
See _cmnd(Scissor).
d402 1
a402 1
See _cmnd(StencilFunc) and _cmnd(StencilOp).
d407 1
a407 1
See _cmnd(TexImage1D).
d411 1
a411 1
(unless three-dimensional texturing is also enabled). See _cmnd(TexImage2D).
d414 1
a414 1
If enabled, three-dimensional texturing is performed. See _cmnd(TexImage3D).
d419 1
a419 1
the texture generation function defined with _cmnd(TexGen).
d421 1
a421 1
See _cmnd(TexGen).
d426 1
a426 1
the texture generation function defined with _cmnd(TexGen).
d428 1
a428 1
See _cmnd(TexGen).
d433 1
a433 1
the texture generation function defined with _cmnd(TexGen).
d435 1
a435 1
See _cmnd(TexGen).
d440 1
a440 1
the texture generation function defined with _cmnd(TexGen).
d442 1
a442 1
See _cmnd(TexGen).
d457 1
a457 1
from _cmnd(Get) with an argument of \f3GL_EXTENSIONS\fP.
d463 1
a463 1
specified with _cmnd(ActiveTextureARB).
d465 1
a465 1
\f3GL_INVALID_ENUM\fP is generated if _param1 is not one of the values
d468 3
a470 3
\f3GL_INVALID_OPERATION\fP is generated if _cmnd(Enable) or _cmnd(Disable)
is executed between the execution of _cmnd(Begin)
and the corresponding execution of _cmnd(End).
d472 32
a503 32
_cmnd(ActiveTextureARB),
_cmnd(AlphaFunc),
_cmnd(BlendFunc),
_cmnd(ClipPlane),
_cmnd(ColorMaterial),
_cmnd(CullFace),
_cmnd(DepthFunc),
_cmnd(DepthRange),
_cmnd(EnableClientState),
_cmnd(Fog),
_cmnd(Get),
_cmnd(IsEnabled),
_cmnd(Light),
_cmnd(LightModel),
_cmnd(LineWidth),
_cmnd(LineStipple),
_cmnd(LogicOp),
_cmnd(Map1),
_cmnd(Map2),
_cmnd(Material),
_cmnd(Normal),
_cmnd(PointSize),
_cmnd(PolygonMode),
_cmnd(PolygonOffset),
_cmnd(PolygonStipple),
_cmnd(Scissor),
_cmnd(StencilFunc),
_cmnd(StencilOp),
_cmnd(TexGen),
_cmnd(TexImage1D),
_cmnd(TexImage2D),
_cmnd(TexImage3D)
@


1.1.1.1
log
@win32-x11 source tree update March 26, 2001
@
text
@@
