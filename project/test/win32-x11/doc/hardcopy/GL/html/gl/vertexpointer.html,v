head	1.2;
access;
symbols
	win32-x11-2001-03-26:1.1.1.1 SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2001.06.03.20.47.07;	author ssiddiqi;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.25.19.36.50;	author ssiddiqi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.03.25.19.36.50;	author ssiddiqi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Win32-X11 update sources check in, June 3, 2001 - ssiddiqi
@
text
@<HTML>
<BODY>
<PRE>
<!-- Manpage converted by man2html 3.0.1 -->
</PRE>
<HR>
<ADDRESS>
Man(1) output converted with
<a href="http://www.oac.uci.edu/indiv/ehood/man2html.html">man2html</a>
</ADDRESS>
</BODY>
</HTML>
@


1.1
log
@Initial revision
@
text
@a4 70
vertexes. If _param3 is 0, the  vertexes  are  understood  to  be
tightly   packed   in   the   array.  The  initial  value  is  0.
_phead(_param4) Specifies a pointer to the  first  coordinate  of
the  first  vertex  in  the array. The initial value is 0.  _cmnd
specifies the location and data  of an array  of  vertex  coordi­
nates to use when rendering.  _param1 specifies the number of co­
ordinates per vertex and _param2 the data  type  of  the  coordi­
nates.  _param3  specifies the byte stride from one vertex to the
next allowing vertexes and attributes to be packed into a  single
array or stored in separate arrays.  (Single-array storage may be
more efficient on some implementations; see  _cmnd(InterleavedAr­
rays).)   When  a  vertex  array  is specified, _param1, _param2,
_param3, and _param4 are saved as client-side state.   To  enable
and disable the vertex array, call _cmnd(EnableClientState) and

</PRE>
<H2>_cmnd(DisableClientState)  with  the argument GL_VERTEX_ARRAY. If</H2><PRE>
enabled, the vertex array is used  when  _cmnd(DrawArrays),  _cm­
nd(DrawElements),  or  _cmnd(ArrayElement)  is  called.  Use _cm­
nd(DrawArrays) to construct a sequence of primitives (all of  the
same  type) from prespecified vertex and vertex attribute arrays.
Use _cmnd(ArrayElement) to specify primitives by indexing vertex­
es  and vertex attributes  and _cmnd(DrawElements) to construct a
sequence of  primitives  by  indexing  vertexes  and  vertex  at­
tributes.   _cmnd  is  available only if the GL version is 1.1 or
greater.  The vertex array is initially disabled  and  isn't  ac­
cessed  when  _cmnd(ArrayElement),  _cmnd(DrawElements)  or  _cm­
nd(DrawArrays) is called.  Execution of _cmnd is not allowed  be­
tween  the execution of _cmnd(Begin) and the corresponding execu­
tion of _cmnd(End), but an error may or may not be generated.  If
no error is generated, the operation is undefined.  _cmnd is typ­
ically implemented on the client side.  Vertex  array  parameters
are  client-side state and are therefore not saved or restored by
_cmnd(PushAttrib) and _cmnd(PopAttrib).  Use  _cmnd(PushClientAt­

</PRE>
<H2>trib)  and  _cmnd(PopClientAttrib)  instead.  GL_INVALID_VALUE is</H2><PRE>

</PRE>
<H2>generated if _param1 is not 2, 3, or 4.  GL_INVALID_ENUM is  gen­</H2><PRE>

</PRE>
<H2>erated  if _param2 is is not an accepted value.  GL_INVALID_VALUE</H2><PRE>
is generated if _param3 is negative.  _cmnd(IsEnabled) with argu­

</PRE>
<H2>ment GL_VERTEX_ARRAY</H2><PRE>

</PRE>
<H2>_cmnd(Get) with argument GL_VERTEX_ARRAY_SIZE</H2><PRE>

</PRE>
<H2>_cmnd(Get) with argument GL_VERTEX_ARRAY_TYPE</H2><PRE>

</PRE>
<H2>_cmnd(Get) with argument GL_VERTEX_ARRAY_STRIDE</H2><PRE>

</PRE>
<H2>_cmnd(GetPointerv)  with  argument  GL_VERTEX_ARRAY_POINTER  _cm­</H2><PRE>
nd(ArrayElement),  _cmnd(ColorPointer),  _cmnd(DrawArrays),  _cm­
nd(DrawElements),  _cmnd(DrawRangeElements), _cmnd(EdgeFlagPoint­
er), _cmnd(Enable), _cmnd(GetPointerv), _cmnd(IndexPointer), _cm­
nd(InterleavedArrays),  _cmnd(NormalPointer),  _cmnd(PopClientAt­
trib), _cmnd(PushClientAttrib), _cmnd(TexCoordPointer)






@


1.1.1.1
log
@win32-x11 source tree update March 26, 2001
@
text
@@
