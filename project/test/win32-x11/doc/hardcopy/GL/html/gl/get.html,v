head	1.2;
access;
symbols
	win32-x11-2001-03-26:1.1.1.1 SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2001.06.03.20.47.06;	author ssiddiqi;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.25.19.36.50;	author ssiddiqi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.03.25.19.36.50;	author ssiddiqi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Win32-X11 update sources check in, June 3, 2001 - ssiddiqi
@
text
@<HTML>
<BODY>
<PRE>
<!-- Manpage converted by man2html 3.0.1 -->
</PRE>
<HR>
<ADDRESS>
Man(1) output converted with
<a href="http://www.oac.uci.edu/indiv/ehood/man2html.html">man2html</a>
</ADDRESS>
</BODY>
</HTML>
@


1.1
log
@Initial revision
@
text
@a4 1402
indicating the state variable to be returned, and  _param2  is  a
pointer  to  an array of the indicated type in which to place the
returned data.  Type conversion is performed  if  _param2  has  a
different type than the state variable value being requested.  If
_cmnd(GetBooleanv) is called, a floating-point (or integer) value

</PRE>
<H2>is converted to GL_FALSE if and only if it is 0.0 (or 0).  Other­</H2><PRE>

</PRE>
<H2>wise, it is  converted  to  GL_TRUE.   If  _cmnd(GetIntegerv)  is</H2><PRE>

</PRE>
<H2>called,  boolean  values are returned as GL_TRUE or GL_FALSE, and</H2><PRE>
most floating-point values are rounded  to  the  nearest  integer
value.  Floating-point  colors and normals, however, are returned
with a linear mapping that maps 1.0 to the most  positive  repre­
sentable  integer  value,  and  -1.0  to the most negative repre­
sentable integer value.  If _cmnd(GetFloatv) or _cmnd(GetDoublev)

</PRE>
<H2>is  called,  boolean  values are returned as GL_TRUE or GL_FALSE,</H2><PRE>
and integer values are converted to floating-point  values.   The
following   symbolic   constants   are   accepted   by   _param1:

</PRE>
<H2>GL_ACCUM_ALPHA_BITS _param2 returns one value, the number of  al­</H2><PRE>

</PRE>
<H2>pha  bitplanes  in  the  accumulation buffer.  GL_ACCUM_BLUE_BITS</H2><PRE>
_param2 returns one value, the number of blue  bitplanes  in  the

</PRE>
<H2>accumulation  buffer.   GL_ACCUM_CLEAR_VALUE _param2 returns four</H2><PRE>
values: the red, green, blue, and alpha values used to clear  the
accumulation  buffer.  Integer values, if requested, are linearly
mapped from the internal floating-point representation such  that
1.0  returns  the  most positive representable integer value, and
-1.0 returns the most negative representable integer  value.  The
initial   value   is   (0,  0,  0,  0).   See  _cmnd(ClearAccum).

</PRE>
<H2>GL_ACCUM_GREEN_BITS _param2 returns  one  value,  the  number  of</H2><PRE>

</PRE>
<H2>green  bitplanes  in  the accumulation buffer.  GL_ACCUM_RED_BITS</H2><PRE>
_param2 returns one value, the number of red bitplanes in the ac­

</PRE>
<H2>cumulation  buffer.  GL_ACTIVE_TEXTURE_ARB _param2 returns a sin­</H2><PRE>
gle value indicating the active multitexture unit.   The  initial

</PRE>
<H2>value    is    GL_TEXTURE0_ARB.    See   _cmnd(ActiveTextureARB).</H2><PRE>

</PRE>
<H2>GL_ALIASED_POINT_SIZE_RANGE  _param2  returns  two  values,   the</H2><PRE>
smallest   and   largest  supported  sizes  for  aliased  points.

</PRE>
<H2>GL_ALIASED_LINE_WIDTH_RANGE  _param2  returns  two  values,   the</H2><PRE>
smallest   and   largest  supported  widths  for  aliased  lines.

</PRE>
<H2>GL_ALPHA_BIAS _param2 returns one value, the  alpha  bias  factor</H2><PRE>
used  during  pixel  transfers. The initial value is 0.  See _cm­

</PRE>
<H2>nd(PixelTransfer).  GL_ALPHA_BITS _param2 returns one value,  the</H2><PRE>

</PRE>
<H2>number  of  alpha bitplanes in each color buffer.  GL_ALPHA_SCALE</H2><PRE>
_param2 returns one value, the alpha  scale  factor  used  during
pixel  transfers.  The initial value is 1.  See _cmnd(PixelTrans­

</PRE>
<H2>fer).  GL_ALPHA_TEST _param2 returns a single boolean value indi­</H2><PRE>
cating whether alpha testing of fragments is enabled. The initial

</PRE>
<H2>value is  GL_FALSE.   See  _cmnd(AlphaFunc).   GL_ALPHA_TEST_FUNC</H2><PRE>
_param2  returns  one  value, the symbolic name of the alpha test

</PRE>
<H2>function. The initial value is GL_ALWAYS.  See  _cmnd(AlphaFunc).</H2><PRE>

</PRE>
<H2>GL_ALPHA_TEST_REF  _param2 returns one value, the reference value</H2><PRE>
for the alpha test. The initial value  is  0.   See  _cmnd(Alpha­
Func).   An  integer value, if requested, is linearly mapped from
the internal floating-point representation such that 1.0  returns
the  most  positive representable integer value, and -1.0 returns
identifying the destination blend function. The initial value  is

</PRE>
<H2>GL_ZERO.   See  _cmnd(BlendFunc).   GL_BLEND_EQUATION _param2 re­</H2><PRE>
turns one value, a symbolic constant indicating whether the blend

</PRE>
<H2>equation  is  GL_FUNC_ADD, GL_MIN or GL_MAX. See _cmnd(BlendEqua­</H2><PRE>

</PRE>
<H2>tion).  GL_BLEND_SRC _param2 returns one value, the symbolic con­</H2><PRE>
stant identifying the source blend function. The initial value is

</PRE>
<H2>GL_ONE.  See _cmnd(BlendFunc).  GL_BLUE_BIAS _param2 returns  one</H2><PRE>
value, the blue bias factor used during pixel transfers. The ini­

</PRE>
<H2>tial value is 0.  See _cmnd(PixelTransfer).  GL_BLUE_BITS _param2</H2><PRE>
returns  one  value,  the  number of blue bitplanes in each color

</PRE>
<H2>buffer.  GL_BLUE_SCALE _param2 returns one value, the blue  scale</H2><PRE>
factor  used during pixel transfers. The initial value is 1.  See

</PRE>
<H2>_cmnd(PixelTransfer).  GL_CLIENT_ACTIVE_TEXTURE_ARB  _param2  re­</H2><PRE>
turns a single integer value indicating the current client active

</PRE>
<H2>multitexture unit. The initial  value  is  GL_TEXTURE0_ARB.   See</H2><PRE>

</PRE>
<H2>_cmnd(ClientActiveTextureARB).       GL_CLIENT_ATTRIB_STACK_DEPTH</H2><PRE>
_param2 returns one value indicating the depth of  the  attribute
stack.  The  initial  value  is  0.  See _cmnd(PushClientAttrib).

</PRE>
<H2>GL_CLIP_PLANEi _param2 returns a single boolean value  indicating</H2><PRE>
whether the specified clipping plane is enabled. The initial val­

</PRE>
<H2>ue is GL_FALSE.  See  _cmnd(ClipPlane).   GL_COLOR_ARRAY  _param2</H2><PRE>
returns a single boolean value indicating whether the color array

</PRE>
<H2>is enabled. The initial value is GL_FALSE.  See _cmnd(ColorPoint­</H2><PRE>

</PRE>
<H2>er).   GL_COLOR_ARRAY_SIZE  _param2 returns one value, the number</H2><PRE>
of components per color in the color array. The initial value  is

</PRE>
<H2>4.  See  _cmnd(ColorPointer).   GL_COLOR_ARRAY_STRIDE _param2 re­</H2><PRE>
turns one value, the byte offset between  consecutive  colors  in
the  color  array. The initial value is 0.  See _cmnd(ColorPoint­

</PRE>
<H2>er).  GL_COLOR_ARRAY_TYPE _param2 returns  one  value,  the  data</H2><PRE>
type  of  each component in the color array. The initial value is

</PRE>
<H2>GL_FLOAT. See _cmnd(ColorPointer).  GL_COLOR_CLEAR_VALUE  _param2</H2><PRE>
returns  four values: the red, green, blue, and alpha values used
to clear the color buffers.  Integer values,  if  requested,  are
linearly  mapped  from the internal floating-point representation
such that 1.0 returns the  most  positive  representable  integer
value,  and  -1.0 returns the most negative representable integer
value. The initial value is (0, 0, 0, 0).  See _cmnd(ClearColor).

</PRE>
<H2>GL_COLOR_LOGIC_OP _param2 returns a single boolean value indicat­</H2><PRE>
ing whether a fragment's RGBA color values are  merged  into  the
framebuffer  using  a  logical  operation.  The  initial value is

</PRE>
<H2>GL_FALSE.  See _cmnd(LogicOp).  GL_COLOR_MATERIAL _param2 returns</H2><PRE>
a  single  boolean  value indicating whether one or more material
parameters are tracking the current color. The initial  value  is

</PRE>
<H2>GL_FALSE.    See   _cmnd(ColorMaterial).   GL_COLOR_MATERIAL_FACE</H2><PRE>
_param2 returns one value, a symbolic constant  indicating  which
materials  have  a  parameter that is tracking the current color.

</PRE>
<H2>The initial value is GL_FRONT_AND_BACK.   See  _cmnd(ColorMateri­</H2><PRE>

</PRE>
<H2>al).   GL_COLOR_MATERIAL_PARAMETER  _param2  returns one value, a</H2><PRE>
symbolic constant indicating which material parameters are track­
ing     the    current    color.    The    initial    value    is

</PRE>
<H2>GL_AMBIENT_AND_DIFFUSE.         See         _cmnd(ColorMaterial).</H2><PRE>

</PRE>
<H2>GL_COLOR_MATRIX  _param2 returns sixteen values: the color matrix</H2><PRE>
ing whether 2D convolution  is  enabled.  The  initial  value  is

</PRE>
<H2>GL_FALSE.   See _cmnd(ConvolutionFilter2D).  GL_CULL_FACE _param2</H2><PRE>
returns a single boolean value indicating whether polygon culling

</PRE>
<H2>is  enabled. The initial value is GL_FALSE.  See _cmnd(CullFace).</H2><PRE>

</PRE>
<H2>GL_CULL_FACE_MODE _param2 returns one value, a symbolic  constant</H2><PRE>
indicating which polygon faces are to be culled. The initial val­

</PRE>
<H2>ue is GL_BACK.  See  _cmnd(CullFace).   GL_CURRENT_COLOR  _param2</H2><PRE>
returns  four  values:  the red, green, blue, and alpha values of
the current color.  Integer values, if  requested,  are  linearly
mapped  from the internal floating-point representation such that
1.0 returns the most positive representable  integer  value,  and
-1.0  returns the most negative representable integer value.  See
_cmnd(Color).   The   initial   value   is   (1,   1,   1,    1).

</PRE>
<H2>GL_CURRENT_INDEX _param2 returns one value, the current color in­</H2><PRE>
dex.   The   initial   value    is    1.     See    _cmnd(Index).

</PRE>
<H2>GL_CURRENT_NORMAL  _param2  returns three values: the x, y, and z</H2><PRE>
values of the current normal.  Integer values, if requested,  are
linearly  mapped  from the internal floating-point representation
such that 1.0 returns the  most  positive  representable  integer
value,  and  -1.0 returns the most negative representable integer
value.  The initial  value  is  (0,  0,  1).  See  _cmnd(Normal).

</PRE>
<H2>GL_CURRENT_RASTER_COLOR  _param2  returns  four  values: the red,</H2><PRE>
green, blue, and alpha values of  the  current  raster  position.
Integer values, if requested, are linearly mapped from the inter­
nal floating-point representation such that 1.0 returns the  most
positive  representable  integer value, and -1.0 returns the most
negative representable integer value. The initial value is (1, 1,

</PRE>
<H2>1, 1).  See _cmnd(RasterPos).  GL_CURRENT_RASTER_DISTANCE _param2</H2><PRE>
returns one value, the distance  from  the  eye  to  the  current
raster  position.  The initial value is 0.  See _cmnd(RasterPos).

</PRE>
<H2>GL_CURRENT_RASTER_INDEX _param2 returns one value, the color  in­</H2><PRE>
dex  of the current raster position. The initial value is 1.  See

</PRE>
<H2>_cmnd(RasterPos).   GL_CURRENT_RASTER_POSITION  _param2   returns</H2><PRE>
four  values: the <I>x</I>, <I>y</I>, <I>z</I>, and <I>w</I> components of the current raster
position.  <I>x</I>, <I>y</I>, and <I>z</I> are in window coordinates,  and  <I>w</I>  is  in
clip  coordinates.  The  initial value is (0, 0, 0, 1).  See _cm­

</PRE>
<H2>nd(RasterPos).  GL_CURRENT_RASTER_POSITION_VALID _param2  returns</H2><PRE>
a  single boolean value indicating whether the current raster po­

</PRE>
<H2>sition is valid. The initial value is GL_TRUE.  See _cmnd(Raster­</H2><PRE>

</PRE>
<H2>Pos).  GL_CURRENT_RASTER_TEXTURE_COORDS _param2 returns four val­</H2><PRE>
ues: the <I>s</I>, <I>t</I>, <I>r</I>, and <I>q</I> current raster texture  coordinates.  The
initial  value  is  (0,  0, 0, 1).  See _cmnd(RasterPos) and _cm­

</PRE>
<H2>nd(TexCoord).   GL_CURRENT_TEXTURE_COORDS  _param2  returns  four</H2><PRE>
values:  the <I>s</I>, <I>t</I>, <I>r</I>, and <I>q</I> current texture coordinates. The ini­

</PRE>
<H2>tial value is (0, 0, 0, 1).  See _cmnd(TexCoord).   GL_DEPTH_BIAS</H2><PRE>
_param2 returns one value, the depth bias factor used during pix­
el transfers. The initial value is 0.  See  _cmnd(PixelTransfer).

</PRE>
<H2>GL_DEPTH_BITS  _param2 returns one value, the number of bitplanes</H2><PRE>

</PRE>
<H2>in the depth buffer.  GL_DEPTH_CLEAR_VALUE  _param2  returns  one</H2><PRE>
value, the value that is used to clear the depth buffer.  Integer
values, if requested,  are  linearly  mapped  from  the  internal
floating-point representation such that 1.0 returns the most pos­
boolean value indicating whether depth testing  of  fragments  is

</PRE>
<H2>enabled. The initial value is GL_FALSE.  See _cmnd(DepthFunc) and</H2><PRE>

</PRE>
<H2>_cmnd(DepthRange).  GL_DEPTH_WRITEMASK _param2 returns  a  single</H2><PRE>
boolean value indicating if the depth buffer is enabled for writ­

</PRE>
<H2>ing.  The  initial  value  is  GL_TRUE.   See   _cmnd(DepthMask).</H2><PRE>

</PRE>
<H2>GL_DITHER  _param2  returns  a  single  boolean  value indicating</H2><PRE>
whether dithering of fragment colors and indices is enabled.  The

</PRE>
<H2>initial value is GL_TRUE.  GL_DOUBLEBUFFER _param2 returns a sin­</H2><PRE>
gle boolean value indicating whether double buffering is support­

</PRE>
<H2>ed.   GL_DRAW_BUFFER  _param2  returns one value, a symbolic con­</H2><PRE>
stant indicating which buffers are  being  drawn  to.   See  _cm­

</PRE>
<H2>nd(DrawBuffer).  The  initial  value is GL_BACK if there are back</H2><PRE>

</PRE>
<H2>buffers, otherwise it is GL_FRONT.  GL_EDGE_FLAG _param2  returns</H2><PRE>
a  single  boolean value indicating whether the current edge flag

</PRE>
<H2>is GL_TRUE or GL_FALSE. The initial value is GL_TRUE.   See  _cm­</H2><PRE>

</PRE>
<H2>nd(EdgeFlag).    GL_EDGE_FLAG_ARRAY   _param2  returns  a  single</H2><PRE>
boolean value indicating whether the edge flag array is  enabled.

</PRE>
<H2>The  initial  value  is  GL_FALSE.   See  _cmnd(EdgeFlagPointer).</H2><PRE>

</PRE>
<H2>GL_EDGE_FLAG_ARRAY_STRIDE _param2 returns  one  value,  the  byte</H2><PRE>
offset between consecutive edge flags in the edge flag array. The
initial    value    is    0.      See     _cmnd(EdgeFlagPointer).

</PRE>
<H2>GL_FEEDBACK_BUFFER_SIZE  _param2  returns  one value, the size of</H2><PRE>
the     feedback     buffer.      See      _cmnd(FeedbackBuffer).

</PRE>
<H2>GL_FEEDBACK_BUFFER_TYPE  _param2  returns  one value, the type of</H2><PRE>

</PRE>
<H2>the feedback buffer.  See _cmnd(FeedbackBuffer).  GL_FOG  _param2</H2><PRE>
returns  a single boolean value indicating whether fogging is en­

</PRE>
<H2>abled.  The  initial  value   is   GL_FALSE.    See   _cmnd(Fog).</H2><PRE>

</PRE>
<H2>GL_FOG_COLOR  _param2  returns four values: the red, green, blue,</H2><PRE>
and alpha components of the fog color.  Integer  values,  if  re­
quested,  are  linearly  mapped  from the internal floating-point
representation such that 1.0 returns  the  most  positive  repre­
sentable integer value, and -1.0 returns the most negative repre­
sentable integer value. The initial value is (0, 0, 0,  0).   See

</PRE>
<H2>_cmnd(Fog).   GL_FOG_DENSITY  _param2  returns one value, the fog</H2><PRE>
density parameter. The  initial  value  is  1.   See  _cmnd(Fog).

</PRE>
<H2>GL_FOG_END _param2 returns one value, the end factor for the lin­</H2><PRE>
ear fog equation.  The  initial  value  is  1.   See  _cmnd(Fog).

</PRE>
<H2>GL_FOG_HINT  _param2 returns one value, a symbolic constant indi­</H2><PRE>
cating  the  mode  of  the  fog  hint.  The  initial   value   is

</PRE>
<H2>GL_DONT_CARE.  See _cmnd(Hint).  GL_FOG_INDEX _param2 returns one</H2><PRE>
value, the fog color index. The initial value  is  0.   See  _cm­

</PRE>
<H2>nd(Fog).   GL_FOG_MODE _param2 returns one value, a symbolic con­</H2><PRE>
stant indicating which fog equation is selected. The initial val­

</PRE>
<H2>ue  is GL_EXP.  See _cmnd(Fog).  GL_FOG_START _param2 returns one</H2><PRE>
value, the start factor for the linear fog equation. The  initial

</PRE>
<H2>value  is  0.  See _cmnd(Fog).  GL_FRONT_FACE _param2 returns one</H2><PRE>
value, a symbolic constant indicating whether clockwise or  coun­
terclockwise polygon winding is treated as front-facing. The ini­

</PRE>
<H2>tial  value  is  GL_CCW.   See  _cmnd(FrontFace).   GL_GREEN_BIAS</H2><PRE>
_param2 returns one value, the green bias factor used during pix­

</PRE>
<H2>el transfers. The initial value is 0.  GL_GREEN_BITS _param2  re­</H2><PRE>
turns  one  value,  the  number  of green bitplanes in each color

</PRE>
<H2>buffer.  GL_INDEX_CLEAR_VALUE _param2 returns one value, the col­</H2><PRE>
or index used to clear the color index buffers. The initial value

</PRE>
<H2>is 0.  See _cmnd(ClearIndex).  GL_INDEX_LOGIC_OP _param2  returns</H2><PRE>
a single boolean value indicating whether a fragment's index val­
ues are merged into the framebuffer using  a  logical  operation.

</PRE>
<H2>The    initial    value   is   GL_FALSE.    See   _cmnd(LogicOp).</H2><PRE>

</PRE>
<H2>GL_INDEX_MODE _param2 returns a single boolean  value  indicating</H2><PRE>

</PRE>
<H2>whether  the  GL is in color index mode (GL_TRUE) or RGBA mode (­</H2><PRE>

</PRE>
<H2>GL_FALSE).  GL_INDEX_OFFSET _param2 returns one value, the offset</H2><PRE>
added  to  color  and stencil indices during pixel transfers. The

</PRE>
<H2>initial value is 0.   See  _cmnd(PixelTransfer).   GL_INDEX_SHIFT</H2><PRE>
_param2  returns one value, the amount that color and stencil in­
dices are shifted during pixel transfers. The initial value is 0.

</PRE>
<H2>See _cmnd(PixelTransfer).  GL_INDEX_WRITEMASK _param2 returns one</H2><PRE>
value, a mask indicating which  bitplanes  of  each  color  index
buffer  can  be  written. The initial value is all 1's.  See _cm­

</PRE>
<H2>nd(IndexMask).  GL_LIGHTi _param2 returns a single boolean  value</H2><PRE>
indicating  whether  the  specified light is enabled. The initial

</PRE>
<H2>value  is  GL_FALSE.   See  _cmnd(Light)  and  _cmnd(LightModel).</H2><PRE>

</PRE>
<H2>GL_LIGHTING  _param2  returns  a  single boolean value indicating</H2><PRE>

</PRE>
<H2>whether lighting is enabled. The initial value is GL_FALSE.   See</H2><PRE>

</PRE>
<H2>_cmnd(LightModel).   GL_LIGHT_MODEL_AMBIENT  _param2 returns four</H2><PRE>
values: the red, green, blue, and alpha components of the ambient
intensity of the entire scene.  Integer values, if requested, are
linearly mapped from the internal  floating-point  representation
such  that  1.0  returns  the most positive representable integer
value, and -1.0 returns the most negative  representable  integer
value.  The  initial  value  is  (0.2,  0.2, 0.2, 1.0).  See _cm­

</PRE>
<H2>nd(LightModel).   GL_LIGHT_MODEL_COLOR_CONTROL  _param2   returns</H2><PRE>
single  enumerated  value  indicating whether specular reflection
calculations are separated  from  normal  lighting  computations.

</PRE>
<H2>The        initial        value        is        GL_SINGLE_COLOR.</H2><PRE>

</PRE>
<H2>GL_LIGHT_MODEL_LOCAL_VIEWER _param2 returns a single boolean val­</H2><PRE>
ue  indicating whether specular reflection calculations treat the
viewer as  being  local  to  the  scene.  The  initial  value  is

</PRE>
<H2>GL_FALSE.     See   _cmnd(LightModel).    GL_LIGHT_MODEL_TWO_SIDE</H2><PRE>
_param2 returns a single boolean value indicating  whether  sepa­
rate  materials are used to compute lighting for front- and back-

</PRE>
<H2>facing polygons. The initial value is GL_FALSE.  See _cmnd(Light­</H2><PRE>

</PRE>
<H2>Model).   GL_LINE_SMOOTH  _param2  returns a single boolean value</H2><PRE>
indicating whether antialiasing of lines is enabled. The  initial

</PRE>
<H2>value  is  GL_FALSE.   See _cmnd(LineWidth).  GL_LINE_SMOOTH_HINT</H2><PRE>
_param2 returns one value, a  symbolic  constant  indicating  the
mode  of  the  line  antialiasing  hint.  The  initial  value  is

</PRE>
<H2>GL_DONT_CARE.  See _cmnd(Hint).  GL_LINE_STIPPLE _param2  returns</H2><PRE>
a  single  boolean value indicating whether stippling of lines is

</PRE>
<H2>enabled. The initial value is GL_FALSE.  See  _cmnd(LineStipple).</H2><PRE>

</PRE>
<H2>GL_LINE_STIPPLE_PATTERN  _param2  returns  one  value, the 16-bit</H2><PRE>
line stipple pattern. The initial value is  all  1's.   See  _cm­

</PRE>
<H2>nd(LineStipple).  GL_LINE_STIPPLE_REPEAT _param2 returns one val­</H2><PRE>
ue, the line stipple repeat factor. The initial value is 1.   See

</PRE>
<H2>_cmnd(LineStipple).  GL_LINE_WIDTH _param2 returns one value, the</H2><PRE>
construction.  The  initial  value  is  0.   See  _cmnd(NewList).

</PRE>
<H2>GL_LOGIC_OP_MODE  _param2  returns one value, a symbolic constant</H2><PRE>
indicating the selected logic operation mode. The  initial  value

</PRE>
<H2>is GL_COPY.  See _cmnd(LogicOp).  GL_MAP1_COLOR_4 _param2 returns</H2><PRE>
a single boolean value indicating whether 1D evaluation generates

</PRE>
<H2>colors.   The   initial  value  is  GL_FALSE.   See  _cmnd(Map1).</H2><PRE>

</PRE>
<H2>GL_MAP1_GRID_DOMAIN _param2 returns two values: the endpoints  of</H2><PRE>
the  1D map's grid domain. The initial value is (0, 1).  See _cm­

</PRE>
<H2>nd(MapGrid).  GL_MAP1_GRID_SEGMENTS _param2  returns  one  value,</H2><PRE>
the number of partitions in the 1D map's grid domain. The initial

</PRE>
<H2>value is 1.  See _cmnd(MapGrid).  GL_MAP1_INDEX _param2 returns a</H2><PRE>
single  boolean  value indicating whether 1D evaluation generates

</PRE>
<H2>color indices. The initial value is GL_FALSE.   See  _cmnd(Map1).</H2><PRE>

</PRE>
<H2>GL_MAP1_NORMAL  _param2 returns a single boolean value indicating</H2><PRE>
whether 1D evaluation generates normals.  The  initial  value  is

</PRE>
<H2>GL_FALSE.   See _cmnd(Map1).  GL_MAP1_TEXTURE_COORD_1 _param2 re­</H2><PRE>
turns a single boolean value  indicating  whether  1D  evaluation

</PRE>
<H2>generates  1D texture coordinates. The initial value is GL_FALSE.</H2><PRE>

</PRE>
<H2>See _cmnd(Map1).  GL_MAP1_TEXTURE_COORD_2 _param2 returns a  sin­</H2><PRE>
gle  boolean  value indicating whether 1D evaluation generates 2D

</PRE>
<H2>texture coordinates. The initial value  is  GL_FALSE.   See  _cm­</H2><PRE>

</PRE>
<H2>nd(Map1).    GL_MAP1_TEXTURE_COORD_3  _param2  returns  a  single</H2><PRE>
boolean value indicating whether 1D evaluation generates 3D  tex­

</PRE>
<H2>ture  coordinates.  The  initial  value  is  GL_FALSE.   See _cm­</H2><PRE>

</PRE>
<H2>nd(Map1).   GL_MAP1_TEXTURE_COORD_4  _param2  returns  a   single</H2><PRE>
boolean  value indicating whether 1D evaluation generates 4D tex­

</PRE>
<H2>ture coordinates.  The  initial  value  is  GL_FALSE.   See  _cm­</H2><PRE>

</PRE>
<H2>nd(Map1).  GL_MAP1_VERTEX_3 _param2 returns a single boolean val­</H2><PRE>
ue indicating whether 1D evaluation generates 3D  vertex  coordi­

</PRE>
<H2>nates.   The   initial   value  is  GL_FALSE.   See  _cmnd(Map1).</H2><PRE>

</PRE>
<H2>GL_MAP1_VERTEX_4 _param2 returns a single boolean value  indicat­</H2><PRE>
ing  whether  1D  evaluation generates 4D vertex coordinates. The

</PRE>
<H2>initial value is  GL_FALSE.   See  _cmnd(Map1).   GL_MAP2_COLOR_4</H2><PRE>
_param2  returns  a  single  boolean  value indicating whether 2D

</PRE>
<H2>evaluation generates colors. The initial value is GL_FALSE.   See</H2><PRE>

</PRE>
<H2>_cmnd(Map2).   GL_MAP2_GRID_DOMAIN  _param2  returns four values:</H2><PRE>
the endpoints of the 2D map's $i$ and $j$ grid domains. The  ini­
tial     value    is    (0,1;    0,1).     See    _cmnd(MapGrid).

</PRE>
<H2>GL_MAP2_GRID_SEGMENTS _param2 returns two values: the  number  of</H2><PRE>
partitions  in the 2D map's $i$ and $j$ grid domains. The initial

</PRE>
<H2>value is (1,1).  See _cmnd(MapGrid).  GL_MAP2_INDEX  _param2  re­</H2><PRE>
turns  a  single  boolean  value indicating whether 2D evaluation

</PRE>
<H2>generates color indices. The initial value is GL_FALSE.  See _cm­</H2><PRE>

</PRE>
<H2>nd(Map2).   GL_MAP2_NORMAL _param2 returns a single boolean value</H2><PRE>
indicating whether 2D evaluation generates normals.  The  initial

</PRE>
<H2>value  is  GL_FALSE.   See  _cmnd(Map2).  GL_MAP2_TEXTURE_COORD_1</H2><PRE>
_param2 returns a single  boolean  value  indicating  whether  2D
evaluation generates 1D texture coordinates. The initial value is

</PRE>
<H2>GL_FALSE.  See _cmnd(Map2).  GL_MAP2_TEXTURE_COORD_2 _param2  re­</H2><PRE>
turns  a  single  boolean  value indicating whether 2D evaluation

</PRE>
<H2>generates 2D texture coordinates. The initial value is  GL_FALSE.</H2><PRE>

</PRE>
<H2>See  _cmnd(Map2).  GL_MAP2_TEXTURE_COORD_3 _param2 returns a sin­</H2><PRE>

</PRE>
<H2>fer).  GL_MAP_STENCIL _param2 returns a single boolean value  in­</H2><PRE>
dicating  if  stencil  indices are to be replaced by table lookup

</PRE>
<H2>during pixel transfers. The initial value is GL_FALSE.  See  _cm­</H2><PRE>

</PRE>
<H2>nd(PixelTransfer).   GL_MATRIX_MODE  _param2 returns one value, a</H2><PRE>
symbolic constant indicating which matrix stack is currently  the
target   of   all   matrix   operations.  The  initial  value  is

</PRE>
<H2>GL_MODELVIEW.   See  _cmnd(MatrixMode).    GL_MAX_3D_TEXTURE_SIZE</H2><PRE>
_param2  returns  one  value,  a rough estimate of the largest 3D
texture that the GL can handle.  If the  GL  version  is  1.2  or

</PRE>
<H2>greater, use GL_PROXY_TEXTURE_3D to determine if a texture is too</H2><PRE>

</PRE>
<H2>large.  See _cmnd(TexImage3D).   GL_MAX_CLIENT_ATTRIB_STACK_DEPTH</H2><PRE>
_param2  returns one value indicating the maximum supported depth
of the  client  attribute  stack.   See  _cmnd(PushClientAttrib).

</PRE>
<H2>GL_MAX_ATTRIB_STACK_DEPTH  _param2 returns one value, the maximum</H2><PRE>
supported depth of the attribute stack.  The  value  must  be  at

</PRE>
<H2>least 16.  See _cmnd(PushAttrib).  GL_MAX_CLIP_PLANES _param2 re­</H2><PRE>
turns one value, the maximum number of application-defined  clip­
ping planes. The value must be at least 6.  See _cmnd(ClipPlane).

</PRE>
<H2>GL_MAX_COLOR_MATRIX_STACK_DEPTH _param2 returns  one  value,  the</H2><PRE>
maximum  supported  depth  of  the color matrix stack.  The value
must    be    at     least     2.      See     _cmnd(PushMatrix).

</PRE>
<H2>GL_MAX_ELEMENTS_INDICES _param2 returns one value, the recommend­</H2><PRE>
ed  maximum  number  of   vertex   array   indices.    See   _cm­

</PRE>
<H2>nd(DrawRangeElements).   GL_MAX_ELEMENTS_VERTICES _param2 returns</H2><PRE>
one value, the recommended maximum number of  vertex  array  ver­

</PRE>
<H2>tices.   See _cmnd(DrawRangeElements).  GL_MAX_EVAL_ORDER _param2</H2><PRE>
returns one value, the maximum equation order supported by 1D and
2D evaluators. The value must be at least 8.  See _cmnd(Map1) and

</PRE>
<H2>_cmnd(Map2).  GL_MAX_LIGHTS _param2 returns one value, the  maxi­</H2><PRE>
mum  number  of  lights.  The value must be at least 8.  See _cm­

</PRE>
<H2>nd(Light).  GL_MAX_LIST_NESTING _param2 returns  one  value,  the</H2><PRE>
maximum  recursion  depth  allowed during display-list traversal.
The  value  must  be   at   least   64.    See   _cmnd(CallList).

</PRE>
<H2>GL_MAX_MODELVIEW_STACK_DEPTH _param2 returns one value, the maxi­</H2><PRE>
mum supported depth of the modelview matrix stack. The value must

</PRE>
<H2>be  at least 32.  See _cmnd(PushMatrix).  GL_MAX_NAME_STACK_DEPTH</H2><PRE>
_param2 returns one value, the maximum supported depth of the se­
lection  name  stack.  The  value  must be at least 64.  See _cm­

</PRE>
<H2>nd(PushName).  GL_MAX_PIXEL_MAP_TABLE _param2 returns one  value,</H2><PRE>
the  maximum  supported  size  of a _cmnd(PixelMap) lookup table.
The  value  must  be   at   least   32.    See   _cmnd(PixelMap).

</PRE>
<H2>GL_MAX_PROJECTION_STACK_DEPTH _param2 returns one value, the max­</H2><PRE>
imum supported depth of the projection matrix  stack.  The  value

</PRE>
<H2>must  be at least 2.  See _cmnd(PushMatrix).  GL_MAX_TEXTURE_SIZE</H2><PRE>
_param2 returns one value.  The value gives a rough  estimate  of
the largest texture that the GL can handle.  If the GL version is

</PRE>
<H2>1.1 or greater, use GL_PROXY_TEXTURE_1D or GL_PROXY_TEXTURE_2D to</H2><PRE>
determine  if  a texture is too large.  See _cmnd(TexImage1D) and

</PRE>
<H2>_cmnd(TexImage2D).   GL_MAX_TEXTURE_STACK_DEPTH  _param2  returns</H2><PRE>
one  value,  the  maximum  supported  depth of the texture matrix
stack. The value must be  at  least  2.   See  _cmnd(PushMatrix).

</PRE>
<H2>GL_MAX_TEXTURE_UNITS_ARB  _param2 returns a single value indicat­</H2><PRE>
of names on the selection name stack. The  initial  value  is  0.

</PRE>
<H2>See  _cmnd(PushName).   GL_NORMAL_ARRAY  _param2 returns a single</H2><PRE>
boolean value, indicating whether the normal  array  is  enabled.

</PRE>
<H2>The   initial   value  is  GL_FALSE.   See  _cmnd(NormalPointer).</H2><PRE>

</PRE>
<H2>GL_NORMAL_ARRAY_STRIDE _param2 returns one value, the byte offset</H2><PRE>
between consecutive normals in the normal array. The initial val­

</PRE>
<H2>ue is 0.  See _cmnd(NormalPointer).  GL_NORMAL_ARRAY_TYPE _param2</H2><PRE>
returns one value, the data type of each coordinate in the normal

</PRE>
<H2>array. The initial value is GL_FLOAT.  See  _cmnd(NormalPointer).</H2><PRE>

</PRE>
<H2>GL_NORMALIZE  _param2  returns  a single boolean value indicating</H2><PRE>
whether normals are automatically scaled  to  unit  length  after
they  have been transformed to eye coordinates. The initial value

</PRE>
<H2>is GL_FALSE.  See _cmnd(Normal).  GL_PACK_ALIGNMENT  _param2  re­</H2><PRE>
turns  one  value, the byte alignment used for writing pixel data
to memory.  The  initial  value  is  4.   See  _cmnd(PixelStore).

</PRE>
<H2>GL_PACK_IMAGE_HEIGHT  _param2 returns one value, the image height</H2><PRE>
used for writing pixel data to memory.  The initial value  is  0.

</PRE>
<H2>See  _cmnd(PixelStore).  GL_PACK_LSB_FIRST _param2 returns a sin­</H2><PRE>
gle boolean value  indicating  whether  single-bit  pixels  being
written  to memory are written first to the least significant bit

</PRE>
<H2>of each unsigned byte. The initial value is GL_FALSE.   See  _cm­</H2><PRE>

</PRE>
<H2>nd(PixelStore).   GL_PACK_ROW_LENGTH  _param2  returns one value,</H2><PRE>
the row length used for writing pixel data to memory. The initial

</PRE>
<H2>value  is 0.  See _cmnd(PixelStore).  GL_PACK_SKIP_IMAGES _param2</H2><PRE>
returns one value, the number of pixel images skipped before  the
first  pixel is written into memory. The initial value is 0.  See

</PRE>
<H2>_cmnd(PixelStore).  GL_PACK_SKIP_PIXELS _param2 returns one  val­</H2><PRE>
ue,  the number of pixel locations skipped before the first pixel
is written into memory. The initial value is 0.  See _cmnd(Pixel­

</PRE>
<H2>Store).   GL_PACK_SKIP_ROWS _param2 returns one value, the number</H2><PRE>
of rows of pixel locations skipped  before  the  first  pixel  is
written  into  memory.  The initial value is 0.  See _cmnd(Pixel­

</PRE>
<H2>Store).  GL_PACK_SWAP_BYTES _param2 returns a single boolean val­</H2><PRE>
ue  indicating  whether the bytes of two-byte and four-byte pixel
indices and components are swapped before being written to  memo­

</PRE>
<H2>ry.  The  initial  value  is  GL_FALSE.   See  _cmnd(PixelStore).</H2><PRE>

</PRE>
<H2>GL_PERSPECTIVE_CORRECTION_HINT _param2 returns one value, a  sym­</H2><PRE>
bolic  constant indicating the mode of the perspective correction

</PRE>
<H2>hint.  The  initial  value  is  GL_DONT_CARE.   See  _cmnd(Hint).</H2><PRE>

</PRE>
<H2>GL_PIXEL_MAP_A_TO_A_SIZE  _param2  returns one value, the size of</H2><PRE>
the alpha-to-alpha pixel translation table.  The initial value is

</PRE>
<H2>1.   See  _cmnd(PixelMap).   GL_PIXEL_MAP_B_TO_B_SIZE _param2 re­</H2><PRE>
turns one value, the size of the blue-to-blue  pixel  translation
table.    The   initial   value   is   1.   See  _cmnd(PixelMap).

</PRE>
<H2>GL_PIXEL_MAP_G_TO_G_SIZE _param2 returns one value, the  size  of</H2><PRE>
the green-to-green pixel translation table.  The initial value is

</PRE>
<H2>1.  See _cmnd(PixelMap).   GL_PIXEL_MAP_I_TO_A_SIZE  _param2  re­</H2><PRE>
turns one value, the size of the index-to-alpha pixel translation
table.   The  initial   value   is   1.    See   _cmnd(PixelMap).

</PRE>
<H2>GL_PIXEL_MAP_I_TO_B_SIZE  _param2  returns one value, the size of</H2><PRE>
the index-to-blue pixel translation table.  The initial value  is

</PRE>
<H2>1.   See  _cmnd(PixelMap).   GL_PIXEL_MAP_I_TO_G_SIZE _param2 re­</H2><PRE>

</PRE>
<H2>GL_POINT_SIZE_GRANULARITY _param2 returns  one  value,  the  size</H2><PRE>
difference  between  adjacent  supported  sizes  for  antialiased

</PRE>
<H2>points.  See _cmnd(PointSize).  GL_POINT_SIZE_RANGE  _param2  re­</H2><PRE>
turns  two  values:  the smallest and largest supported sizes for
antialiased points. The smallest size must be at most 1, and  the
largest   size   must  be  at  least  1.   See  _cmnd(PointSize).

</PRE>
<H2>GL_POINT_SMOOTH _param2 returns a single boolean value indicating</H2><PRE>
whether  antialiasing  of points is enabled. The initial value is

</PRE>
<H2>GL_FALSE.  See  _cmnd(PointSize).   GL_POINT_SMOOTH_HINT  _param2</H2><PRE>
returns one value, a symbolic constant indicating the mode of the

</PRE>
<H2>point antialiasing hint. The initial value is GL_DONT_CARE.   See</H2><PRE>

</PRE>
<H2>_cmnd(Hint).  GL_POLYGON_MODE _param2 returns two values: symbol­</H2><PRE>
ic constants  indicating  whether  front-facing  and  back-facing
polygons are rasterized as points, lines, or filled polygons. The

</PRE>
<H2>initial    value    is    GL_FILL.     See    _cmnd(PolygonMode).</H2><PRE>

</PRE>
<H2>GL_POLYGON_OFFSET_FACTOR  _param2  returns one value, the scaling</H2><PRE>
factor used to determine the variable offset that is added to the
depth  value of each fragment generated when a polygon is raster­
ized.  The  initial  value  is  0.    See   _cmnd(PolygonOffset).

</PRE>
<H2>GL_POLYGON_OFFSET_UNITS _param2 returns one value.  This value is</H2><PRE>
multiplied by an implementation-specific value and then added  to
the depth value of each fragment generated when a polygon is ras­
terized. The  initial  value  is  0.   See  _cmnd(PolygonOffset).

</PRE>
<H2>GL_POLYGON_OFFSET_FILL _param2 returns a single boolean value in­</H2><PRE>
dicating whether polygon offset is enabled for polygons  in  fill

</PRE>
<H2>mode.  The  initial value is GL_FALSE.  See _cmnd(PolygonOffset).</H2><PRE>

</PRE>
<H2>GL_POLYGON_OFFSET_LINE _param2 returns a single boolean value in­</H2><PRE>
dicating  whether  polygon offset is enabled for polygons in line

</PRE>
<H2>mode. The initial value is GL_FALSE.   See  _cmnd(PolygonOffset).</H2><PRE>

</PRE>
<H2>GL_POLYGON_OFFSET_POINT  _param2  returns  a single boolean value</H2><PRE>
indicating whether polygon offset  is  enabled  for  polygons  in

</PRE>
<H2>point mode. The initial value is GL_FALSE.  See _cmnd(PolygonOff­</H2><PRE>

</PRE>
<H2>set).  GL_POLYGON_SMOOTH _param2 returns a single  boolean  value</H2><PRE>
indicating  whether antialiasing of polygons is enabled. The ini­

</PRE>
<H2>tial    value    is    GL_FALSE.      See     _cmnd(PolygonMode).</H2><PRE>

</PRE>
<H2>GL_POLYGON_SMOOTH_HINT _param2 returns one value, a symbolic con­</H2><PRE>
stant indicating the mode of the polygon antialiasing  hint.  The

</PRE>
<H2>initial     value     is    GL_DONT_CARE.     See    _cmnd(Hint).</H2><PRE>

</PRE>
<H2>GL_POLYGON_STIPPLE _param2 returns a single boolean  value  indi­</H2><PRE>
cating whether polygon stippling is enabled. The initial value is

</PRE>
<H2>GL_FALSE.                See               _cmnd(PolygonStipple).</H2><PRE>

</PRE>
<H2>GL_POST_COLOR_MATRIX_COLOR_TABLE _param2 returns a single boolean</H2><PRE>
value indicating whether post color matrix transformation  lookup

</PRE>
<H2>is  enabled.  The  initial  value  is  GL_FALSE.   See _cmnd(Col­</H2><PRE>

</PRE>
<H2>orTable).  GL_POST_COLOR_MATRIX_RED_BIAS _param2 returns one val­</H2><PRE>
ue, the red bias factor applied to RGBA fragments after color ma­
trix transformations. The initial value is 0.   See  _cmnd(Pixel­

</PRE>
<H2>Transfer).   GL_POST_COLOR_MATRIX_GREEN_BIAS  _param2 returns one</H2><PRE>
value, the green bias factor applied to RGBA fragments after col­
or  matrix  transformations.  The  initial  value is 0.  See _cm­

</PRE>
<H2>nd(PixelTransfer) GL_POST_COLOR_MATRIX_BLUE_BIAS _param2  returns</H2><PRE>
one  value,  the blue bias factor applied to RGBA fragments after

</PRE>
<H2>GL_POST_COLOR_MATRIX_ALPHA_SCALE _param2 returns one  value,  the</H2><PRE>
alpha  scale  factor applied to RGBA fragments after color matrix
transformations. The initial value is 1.   See  _cmnd(PixelTrans­

</PRE>
<H2>fer).   GL_POST_CONVOLUTION_COLOR_TABLE  _param2 returns a single</H2><PRE>
boolean value indicating whether post convolution lookup  is  en­

</PRE>
<H2>abled.  The  initial  value  is GL_FALSE.  See _cmnd(ColorTable).</H2><PRE>

</PRE>
<H2>GL_POST_CONVOLUTION_RED_BIAS _param2 returns one value,  the  red</H2><PRE>
bias factor applied to RGBA fragments after convolution. The ini­
tial     value     is     0.       See      _cmnd(PixelTransfer).

</PRE>
<H2>GL_POST_CONVOLUTION_GREEN_BIAS  _param2  returns  one  value, the</H2><PRE>
green bias factor applied to RGBA  fragments  after  convolution.
The    initial    value    is   0.    See   _cmnd(PixelTransfer).

</PRE>
<H2>GL_POST_CONVOLUTION_BLUE_BIAS _param2 returns one value, the blue</H2><PRE>
bias factor applied to RGBA fragments after convolution. The ini­
tial     value     is     0.       See      _cmnd(PixelTransfer).

</PRE>
<H2>GL_POST_CONVOLUTION_ALPHA_BIAS _param2 returns one value, the al­</H2><PRE>
pha bias factor applied to RGBA fragments after convolution.  The
initial     value     is     0.      See    _cmnd(PixelTransfer).

</PRE>
<H2>GL_POST_CONVOLUTION_RED_SCALE _param2 returns one value, the  red</H2><PRE>
scale  factor  applied  to  RGBA fragments after convolution. The
initial    value     is     1.      See     _cmnd(PixelTransfer).

</PRE>
<H2>GL_POST_CONVOLUTION_GREEN_SCALE  _param2  returns  one value, the</H2><PRE>
green scale factor applied to RGBA fragments  after  convolution.
The    initial    value    is   1.    See   _cmnd(PixelTransfer).

</PRE>
<H2>GL_POST_CONVOLUTION_BLUE_SCALE _param2  returns  one  value,  the</H2><PRE>
blue  scale  factor  applied to RGBA fragments after convolution.
The   initial   value   is    1.     See    _cmnd(PixelTransfer).

</PRE>
<H2>GL_POST_CONVOLUTION_ALPHA_SCALE  _param2  returns  one value, the</H2><PRE>
alpha scale factor applied to RGBA fragments  after  convolution.
The    initial    value    is   1.    See   _cmnd(PixelTransfer).

</PRE>
<H2>GL_PROJECTION_MATRIX _param2 returns sixteen values: the  projec­</H2><PRE>
tion  matrix on the top of the projection matrix stack. Initially
this matrix  is  the  identity  matrix.   See  _cmnd(PushMatrix).

</PRE>
<H2>GL_PROJECTION_STACK_DEPTH  _param2  returns one value, the number</H2><PRE>
of matrices on the projection matrix stack.  The initial value is

</PRE>
<H2>1.   See  _cmnd(PushMatrix).   GL_READ_BUFFER _param2 returns one</H2><PRE>
value, a symbolic constant indicating which color buffer  is  se­

</PRE>
<H2>lected  for  reading.  The initial value is GL_BACK if there is a</H2><PRE>

</PRE>
<H2>back buffer, otherwise it is GL_FRONT.  See _cmnd(ReadPixels) and</H2><PRE>

</PRE>
<H2>_cmnd(Accum).   GL_RED_BIAS  _param2  returns  one value, the red</H2><PRE>
bias factor used during pixel transfers. The initial value is  0.

</PRE>
<H2>GL_RED_BITS  _param2  returns  one  value, the number of red bit­</H2><PRE>

</PRE>
<H2>planes in each color buffer.  GL_RED_SCALE  _param2  returns  one</H2><PRE>
value, the red scale factor used during pixel transfers. The ini­

</PRE>
<H2>tial  value  is  1.   See  _cmnd(PixelTransfer).   GL_RENDER_MODE</H2><PRE>
_param2 returns one value, a symbolic constant indicating whether
the GL is in render, select, or feedback mode. The initial  value

</PRE>
<H2>is  GL_RENDER.  See _cmnd(RenderMode).  GL_RESCALE_NORMAL _param2</H2><PRE>
returns single boolean value indicating whether normal  rescaling

</PRE>
<H2>is  enabled.   See _cmnd(Enable).  GL_RGBA_MODE _param2 returns a</H2><PRE>
single boolean value indicating whether the GL is  in  RGBA  mode
(true)   or   color   index   mode  (false).   See  _cmnd(Color).

</PRE>
<H2>GL_SMOOTH_LINE_WIDTH_RANGE _param2 returns two values, the small­</H2><PRE>
est and largest supported widths for antialiased lines.  See _cm­

</PRE>
<H2>nd(LineWidth).  GL_SMOOTH_LINE_WIDTH_GRANULARITY _param2  returns</H2><PRE>
one  value, the granularity of widths for antialiased lines.  See

</PRE>
<H2>_cmnd(LineWidth).  GL_SMOOTH_POINT_SIZE_RANGE _param2 returns two</H2><PRE>
values, the smallest and largest supported widths for antialiased

</PRE>
<H2>points.  See _cmnd(PointSize).   GL_SMOOTH_POINT_SIZE_GRANULARITY</H2><PRE>
_param2  returns  one  value,  the  granularity  of sizes for an­

</PRE>
<H2>tialiased points.  See _cmnd(PointSize).  GL_STENCIL_BITS _param2</H2><PRE>
returns one value, the number of bitplanes in the stencil buffer.

</PRE>
<H2>GL_STENCIL_CLEAR_VALUE _param2 returns one value,  the  index  to</H2><PRE>
which  the stencil bitplanes are cleared. The initial value is 0.

</PRE>
<H2>See _cmnd(ClearStencil).   GL_STENCIL_FAIL  _param2  returns  one</H2><PRE>
value,  a  symbolic constant indicating what action is taken when

</PRE>
<H2>the stencil test fails. The initial value is GL_KEEP.   See  _cm­</H2><PRE>

</PRE>
<H2>nd(StencilOp).  GL_STENCIL_FUNC _param2 returns one value, a sym­</H2><PRE>
bolic constant indicating what function is used  to  compare  the
stencil  reference  value with the stencil buffer value. The ini­

</PRE>
<H2>tial    value    is    GL_ALWAYS.     See     _cmnd(StencilFunc).</H2><PRE>

</PRE>
<H2>GL_STENCIL_PASS_DEPTH_FAIL  _param2 returns one value, a symbolic</H2><PRE>
constant indicating what action is taken when  the  stencil  test

</PRE>
<H2>passes,  but  the depth test fails. The initial value is GL_KEEP.</H2><PRE>

</PRE>
<H2>See _cmnd(StencilOp).  GL_STENCIL_PASS_DEPTH_PASS _param2 returns</H2><PRE>
one  value,  a  symbolic constant indicating what action is taken
when the stencil test passes and the depth test passes. The  ini­

</PRE>
<H2>tial  value  is  GL_KEEP.   See _cmnd(StencilOp).  GL_STENCIL_REF</H2><PRE>
_param2 returns one value, the reference value that  is  compared
with  the contents of the stencil buffer. The initial value is 0.

</PRE>
<H2>See _cmnd(StencilFunc).  GL_STENCIL_TEST _param2 returns a single</H2><PRE>
boolean  value indicating whether stencil testing of fragments is

</PRE>
<H2>enabled. The initial value is GL_FALSE.   See  _cmnd(StencilFunc)</H2><PRE>

</PRE>
<H2>and  _cmnd(StencilOp).  GL_STENCIL_VALUE_MASK _param2 returns one</H2><PRE>
value, the mask that is used to mask both the  stencil  reference
value  and the stencil buffer value before they are compared. The
initial   value   is   all    1's.     See    _cmnd(StencilFunc).

</PRE>
<H2>GL_STENCIL_WRITEMASK  _param2  returns  one  value, the mask that</H2><PRE>
controls writing of the stencil bitplanes. The initial  value  is

</PRE>
<H2>all  1's.  See  _cmnd(StencilMask).   GL_STEREO _param2 returns a</H2><PRE>
single boolean value indicating whether stereo buffers (left  and

</PRE>
<H2>right)  are supported.  GL_SUBPIXEL_BITS _param2 returns one val­</H2><PRE>
ue, an estimate of the number of bits of subpixel resolution that
are  used  to position rasterized geometry in window coordinates.
The initial value

</PRE>
<H2>is 4.  GL_TEXTURE_1D _param2 returns a single boolean value indi­</H2><PRE>
cating  whether  1D texture mapping is enabled. The initial value

</PRE>
<H2>is  GL_FALSE.   See   _cmnd(TexImage1D).    GL_TEXTURE_BINDING_1D</H2><PRE>
_param2 returns a single value, the name of the texture currently

</PRE>
<H2>bound to the target GL_TEXTURE_1D. The initial value is  0.   See</H2><PRE>

</PRE>
<H2>_cmnd(BindTexture).    GL_TEXTURE_2D  _param2  returns  a  single</H2><PRE>
boolean value indicating whether 2D texture mapping  is  enabled.

</PRE>
<H2>The   initial   value   is   GL_FALSE.    See  _cmnd(TexImage2D).</H2><PRE>

</PRE>
<H2>GL_TEXTURE_BINDING_2D _param2 returns a single value, the name of</H2><PRE>
offset between consecutive elements in the texture coordinate ar­
ray.  The  initial  value  is  0.   See   _cmnd(TexCoordPointer).

</PRE>
<H2>GL_TEXTURE_COORD_ARRAY_TYPE  _param2  returns one value, the data</H2><PRE>
type of the coordinates in the texture coordinate array. The ini­

</PRE>
<H2>tial    value    is    GL_FLOAT.    See   _cmnd(TexCoordPointer).</H2><PRE>

</PRE>
<H2>GL_TEXTURE_GEN_Q _param2 returns a single boolean value  indicat­</H2><PRE>
ing  whether  automatic generation of the <I>q</I> texture coordinate is

</PRE>
<H2>enabled. The  initial  value  is  GL_FALSE.   See  _cmnd(TexGen).</H2><PRE>

</PRE>
<H2>GL_TEXTURE_GEN_R  _param2 returns a single boolean value indicat­</H2><PRE>
ing whether automatic generation of the <I>r</I> texture  coordinate  is

</PRE>
<H2>enabled.  The  initial  value  is  GL_FALSE.   See _cmnd(TexGen).</H2><PRE>

</PRE>
<H2>GL_TEXTURE_GEN_S _param2 returns a single boolean value  indicat­</H2><PRE>
ing  whether  automatic generation of the <I>S</I> texture coordinate is

</PRE>
<H2>enabled. The  initial  value  is  GL_FALSE.   See  _cmnd(TexGen).</H2><PRE>

</PRE>
<H2>GL_TEXTURE_GEN_T  _param2 returns a single boolean value indicat­</H2><PRE>
ing whether automatic generation of the T texture  coordinate  is

</PRE>
<H2>enabled.  The  initial  value  is  GL_FALSE.   See _cmnd(TexGen).</H2><PRE>

</PRE>
<H2>GL_TEXTURE_MATRIX _param2 returns sixteen values: the texture ma­</H2><PRE>
trix  on  the top of the texture matrix stack. Initially this ma­
trix   is   the   identity   matrix.    See    _cmnd(PushMatrix).

</PRE>
<H2>GL_TEXTURE_STACK_DEPTH  _param2  returns one value, the number of</H2><PRE>
matrices on the texture matrix stack.  The initial  value  is  1.

</PRE>
<H2>See  _cmnd(PushMatrix).   GL_UNPACK_ALIGNMENT _param2 returns one</H2><PRE>
value, the byte alignment used for reading pixel data from  memo­
ry.   The   initial   value   is   4.    See   _cmnd(PixelStore).

</PRE>
<H2>GL_UNPACK_IMAGE_HEIGHT  _param2  returns  one  value,  the  image</H2><PRE>
height  used  for reading pixel data from memory.  The initial is

</PRE>
<H2>0.  See _cmnd(PixelStore).  GL_UNPACK_LSB_FIRST _param2 returns a</H2><PRE>
single  boolean  value indicating whether single-bit pixels being
read from memory are read first from the least significant bit of

</PRE>
<H2>each  unsigned  byte.  The  initial  value is GL_FALSE.  See _cm­</H2><PRE>

</PRE>
<H2>nd(PixelStore).  GL_UNPACK_ROW_LENGTH _param2 returns one  value,</H2><PRE>
the  row length used for reading pixel data from memory. The ini­

</PRE>
<H2>tial value is 0.  See  _cmnd(PixelStore).   GL_UNPACK_SKIP_IMAGES</H2><PRE>
_param2 returns one value, the number of pixel images skipped be­
fore the first pixel is read from memory. The initial value is 0.

</PRE>
<H2>See _cmnd(PixelStore).  GL_UNPACK_SKIP_PIXELS _param2 returns one</H2><PRE>
value, the number of pixel locations  skipped  before  the  first
pixel  is  read  from  memory.  The initial value is 0.  See _cm­

</PRE>
<H2>nd(PixelStore).  GL_UNPACK_SKIP_ROWS _param2 returns  one  value,</H2><PRE>
the  number  of  rows of pixel locations skipped before the first
pixel is read from memory. The initial  value  is  0.   See  _cm­

</PRE>
<H2>nd(PixelStore).   GL_UNPACK_SWAP_BYTES  _param2  returns a single</H2><PRE>
boolean value indicating whether the bytes of two-byte and  four-
byte  pixel  indices  and components are swapped after being read

</PRE>
<H2>from memory. The initial value  is  GL_FALSE.   See  _cmnd(Pixel­</H2><PRE>

</PRE>
<H2>Store).   GL_VERTEX_ARRAY  _param2 returns a single boolean value</H2><PRE>
indicating whether the vertex array is enabled. The initial value

</PRE>
<H2>is  GL_FALSE.   See  _cmnd(VertexPointer).   GL_VERTEX_ARRAY_SIZE</H2><PRE>
_param2 returns one value, the number of coordinates  per  vertex
in  the  vertex array. The initial value is 4.  See _cmnd(Vertex­

</PRE>
<H2>Pointer).  GL_VERTEX_ARRAY_STRIDE _param2 returns one value,  the</H2><PRE>

</PRE>
<H2>queried  more  easily using _cmnd(IsEnabled).  GL_COLOR_LOGIC_OP,</H2><PRE>

</PRE>
<H2>GL_COLOR_ARRAY,    GL_COLOR_ARRAY_SIZE,    GL_COLOR_ARRAY_STRIDE,</H2><PRE>

</PRE>
<H2>GL_COLOR_ARRAY_TYPE,                          GL_EDGE_FLAG_ARRAY,</H2><PRE>

</PRE>
<H2>GL_EDGE_FLAG_ARRAY_STRIDE, GL_INDEX_ARRAY, GL_INDEX_ARRAY_STRIDE,</H2><PRE>

</PRE>
<H2>GL_INDEX_ARRAY_TYPE,      GL_INDEX_LOGIC_OP,     GL_NORMAL_ARRAY,</H2><PRE>

</PRE>
<H2>GL_NORMAL_ARRAY_STRIDE,                     GL_NORMAL_ARRAY_TYPE,</H2><PRE>

</PRE>
<H2>GL_POLYGON_OFFSET_UNITS,                GL_POLYGON_OFFSET_FACTOR,</H2><PRE>

</PRE>
<H2>GL_POLYGON_OFFSET_FILL,                   GL_POLYGON_OFFSET_LINE,</H2><PRE>

</PRE>
<H2>GL_POLYGON_OFFSET_POINT,                  GL_TEXTURE_COORD_ARRAY,</H2><PRE>

</PRE>
<H2>GL_TEXTURE_COORD_ARRAY_SIZE,       GL_TEXTURE_COORD_ARRAY_STRIDE,</H2><PRE>

</PRE>
<H2>GL_TEXTURE_COORD_ARRAY_TYPE,                     GL_VERTEX_ARRAY,</H2><PRE>

</PRE>
<H2>GL_VERTEX_ARRAY_SIZE,         GL_VERTEX_ARRAY_STRIDE,         and</H2><PRE>

</PRE>
<H2>GL_VERTEX_ARRAY_TYPE  are available only if the GL version is 1.1</H2><PRE>

</PRE>
<H2>or             greater.              GL_ALIASED_POINT_SIZE_RANGE,</H2><PRE>

</PRE>
<H2>GL_ALIASED_POINT_SIZE_GRANULARITY,       GL_FEEDBACK_BUFFER_SIZE,</H2><PRE>

</PRE>
<H2>GL_FEEDBACK_BUFFER_TYPE,                  GL_LIGHT_MODEL_AMBIENT,</H2><PRE>

</PRE>
<H2>GL_LIGHT_MODEL_COLOR_CONTROL,             GL_MAX_3D_TEXTURE_SIZE,</H2><PRE>

</PRE>
<H2>GL_MAX_ELEMENTS_INDICES,                GL_MAX_ELEMENTS_VERTICES,</H2><PRE>

</PRE>
<H2>GL_PACK_IMAGE_HEIGHT,   GL_PACK_SKIP_IMAGES,   GL_RESCALE_NORMAL,</H2><PRE>

</PRE>
<H2>GL_SELECTION_BUFFER_SIZE,       GL_SMOOTH_LINE_WIDTH_GRANULARITY,</H2><PRE>

</PRE>
<H2>GL_SMOOTH_LINE_WIDTH_RANGE,     GL_SMOOTH_POINT_SIZE_GRANULARITY,</H2><PRE>

</PRE>
<H2>GL_SMOOTH_POINT_SIZE_RANGE, GL_TEXTURE_3D, GL_TEXTURE_BINDING_3D,</H2><PRE>

</PRE>
<H2>GL_UNPACK_IMAGE_HEIGHT,  and  GL_UNPACK_SKIP_IMAGES are available</H2><PRE>
only    if    the    GL    version    is    1.2    or    greater.

</PRE>
<H2>GL_LINE_WIDTH_GRANULARITY  was deprecated in GL version 1.2.  Its</H2><PRE>

</PRE>
<H2>functionality was replaced  by  GL_SMOOTH_LINE_WIDTH_GRANULARITY.</H2><PRE>

</PRE>
<H2>GL_LINE_WIDTH_RANGE  was deprecated in GL version 1.2.  Its func­</H2><PRE>

</PRE>
<H2>tionality    was    replaced    by    GL_SMOOTH_LINE_WIDTH_RANGE.</H2><PRE>

</PRE>
<H2>GL_POINT_SIZE_GRANULARITY  was deprecated in GL version 1.2.  Its</H2><PRE>

</PRE>
<H2>functionality was replaced  by  GL_SMOOTH_POINT_SIZE_GRANULARITY.</H2><PRE>

</PRE>
<H2>GL_POINT_SIZE_RANGE  was deprecated in GL version 1.2.  Its func­</H2><PRE>

</PRE>
<H2>tionality    was    replaced    by    GL_SMOOTH_POINT_SIZE_RANGE.</H2><PRE>

</PRE>
<H2>GL_BLEND_COLOR,        GL_BLEND_EQUATION,        GL_COLOR_MATRIX,</H2><PRE>

</PRE>
<H2>GL_COLOR_MATRIX_STACK_DEPTH,  GL_COLOR_TABLE,  GL_CONVOLUTION_1D,</H2><PRE>

</PRE>
<H2>GL_CONVOLUTION_2D, GL_HISTOGRAM, GL_MAX_COLOR_MATRIX_STACK_DEPTH,</H2><PRE>

</PRE>
<H2>GL_MINMAX,                      GL_POST_COLOR_MATRIX_COLOR_TABLE,</H2><PRE>

</PRE>
<H2>GL_POST_COLOR_MATRIX_RED_BIAS,   GL_POST_COLOR_MATRIX_GREEN_BIAS,</H2><PRE>

</PRE>
<H2>GL_POST_COLOR_MATRIX_BLUE_BIAS,  GL_POST_COLOR_MATRIX_ALPHA_BIAS,</H2><PRE>

</PRE>
<H2>GL_POST_COLOR_MATRIX_RED_SCALE, GL_POST_COLOR_MATRIX_GREEN_SCALE,</H2><PRE>

</PRE>
<H2>GL_POST_COLOR_MATRIX_BLUE_SCALE,</H2><PRE>

</PRE>
<H2>GL_POST_COLOR_MATRIX_ALPHA_SCALE,</H2><PRE>

</PRE>
<H2>GL_POST_CONVOLUTION_COLOR_TABLE,    GL_POST_CONVOLUTION_RED_BIAS,</H2><PRE>

</PRE>
<H2>GL_POST_CONVOLUTION_GREEN_BIAS,    GL_POST_CONVOLUTION_BLUE_BIAS,</H2><PRE>

</PRE>
<H2>GL_POST_CONVOLUTION_ALPHA_BIAS,    GL_POST_CONVOLUTION_RED_SCALE,</H2><PRE>

</PRE>
<H2>GL_POST_CONVOLUTION_GREEN_SCALE,  GL_POST_CONVOLUTION_BLUE_SCALE,</H2><PRE>

</PRE>
<H2>GL_POST_CONVOLUTION_ALPHA_SCALE, and GL_SEPARABLE_2D  are  avail­</H2><PRE>

</PRE>
<H2>able  only  if  GL_ARB_imaging  is  returned from _cmnd(Get) when</H2><PRE>

</PRE>
<H2>called with the argument  GL_EXTENSIONS.   GL_ACTIVE_TEXTURE_ARB,</H2><PRE>

</PRE>
<H2>GL_CLIENT_ACTIVE_TEXTURE_ARB,  and  GL_MAX_TEXTURE_UNITS_ARB  are</H2><PRE>

</PRE>
<H2>available only if GL_ARB_multitexture is returned from _cmnd(Get)</H2><PRE>

</PRE>
<H2>when   called   with   the   argument  GL_EXTENSIONS.   When  the</H2><PRE>

</PRE>
<H2>GL_ARB_multitexture extension is supported, the following parame­</H2><PRE>
nd(GetConvolutionFilter),   _cmnd(GetConvolutionParameter),  _cm­
nd(GetError), _cmnd(GetHistogram),  _cmnd(GetHistogramParameter),
_cmnd(GetLight), _cmnd(GetMap), _cmnd(GetMaterial), _cmnd(GetMin­
max), _cmnd(GetMinmaxParameter),  _cmnd(GetPixelMap),  _cmnd(Get­
Pointerv),  _cmnd(GetPolygonStipple),  _cmnd(GetSeparableFilter),
_cmnd(GetString), _cmnd(GetTexEnv), _cmnd(GetTexGen),  _cmnd(Get­
TexImage),  _cmnd(GetTexLevelParameter),  _cmnd(GetTexParameter),
_cmnd(IsEnabled)












































@


1.1.1.1
log
@win32-x11 source tree update March 26, 2001
@
text
@@
