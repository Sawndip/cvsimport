head	1.2;
access;
symbols
	win32-x11-2001-03-26:1.1.1.1 SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2001.06.03.20.47.07;	author ssiddiqi;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.25.19.36.50;	author ssiddiqi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.03.25.19.36.50;	author ssiddiqi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Win32-X11 update sources check in, June 3, 2001 - ssiddiqi
@
text
@<HTML>
<BODY>
<PRE>
<!-- Manpage converted by man2html 3.0.1 -->
</PRE>
<HR>
<ADDRESS>
Man(1) output converted with
<a href="http://www.oac.uci.edu/indiv/ehood/man2html.html">man2html</a>
</ADDRESS>
</BODY>
</HTML>
@


1.1
log
@Initial revision
@
text
@a4 420

</PRE>
<H2>if the GL_ARB_imaging extension is supported, the following  sym­</H2><PRE>

</PRE>
<H2>bolic   names   are   accepted:   GL_POST_COLOR_MATRIX_RED_SCALE,</H2><PRE>

</PRE>
<H2>GL_POST_COLOR_MATRIX_GREEN_SCALE,</H2><PRE>

</PRE>
<H2>GL_POST_COLOR_MATRIX_BLUE_SCALE,</H2><PRE>

</PRE>
<H2>GL_POST_COLOR_MATRIX_ALPHA_SCALE,  GL_POST_COLOR_MATRIX_RED_BIAS,</H2><PRE>

</PRE>
<H2>GL_POST_COLOR_MATRIX_GREEN_BIAS,  GL_POST_COLOR_MATRIX_BLUE_BIAS,</H2><PRE>

</PRE>
<H2>GL_POST_COLOR_MATRIX_ALPHA_BIAS,   GL_POST_CONVOLUTION_RED_SCALE,</H2><PRE>

</PRE>
<H2>GL_POST_CONVOLUTION_GREEN_SCALE,  GL_POST_CONVOLUTION_BLUE_SCALE,</H2><PRE>

</PRE>
<H2>GL_POST_CONVOLUTION_ALPHA_SCALE,    GL_POST_CONVOLUTION_RED_BIAS,</H2><PRE>

</PRE>
<H2>GL_POST_CONVOLUTION_GREEN_BIAS,    GL_POST_CONVOLUTION_BLUE_BIAS,</H2><PRE>

</PRE>
<H2>and  GL_POST_CONVOLUTION_ALPHA_BIAS.   _phead(_param2)  Specifies</H2><PRE>
the  value  that  _param1  is  set to.  _cmnd sets pixel transfer
modes that affect the operation of subsequent  _cmnd(CopyPixels),
_cmnd(CopyTexImage1D), _cmnd(CopyTexImage2D), _cmnd(CopyTexSubIm­
age1D), _cmnd(CopyTexSubImage2D), _cmnd(CopyTexSubImage3D),  _cm­
nd(DrawPixels),  _cmnd(ReadPixels), _cmnd(TexImage1D), _cmnd(Tex­
Image2D),  _cmnd(TexImage3D),  _cmnd(TexSubImage1D),   _cmnd(Tex­
SubImage2D), and _cmnd(TexSubImage3D) commands.  Additionally, if

</PRE>
<H2>the GL_ARB_imaging subset is supported, the  routines  _cmnd(Col­</H2><PRE>
orTable),  _cmnd(ColorSubTable), _cmnd(ConvolutionFilter1D), _cm­
nd(ConvolutionFilter2D),  _cmnd(Histogram),  _cmnd(Minmax),   and
_cmnd(SeparableFilter2D)  are also affected.  The algorithms that
are specified by pixel transfer modes  operate  on  pixels  after
they  are  read  from  the  frame  buffer (_cmnd(CopyPixels) _cm­
nd(CopyTexImage1D),  _cmnd(CopyTexImage2D),   _cmnd(CopyTexSubIm­
age1D),  _cmnd(CopyTexSubImage2D),  _cmnd(CopyTexSubImage3D), and
_cmnd(ReadPixels)), or unpacked from client  memory  (_cmnd(Draw­
Pixels), _cmnd(TexImage1D), _cmnd(TexImage2D), _cmnd(TexImage3D),
_cmnd(TexSubImage1D), _cmnd(TexSubImage2D),  and  _cmnd(TexSubIm­
age3D)).  Pixel transfer operations happen in the same order, and
in the same manner, regardless of the command  that  resulted  in
the pixel operation.  Pixel storage modes (see _cmnd(PixelStore))
control the unpacking of pixels being read  from  client  memory,
and  the packing of pixels being written back into client memory.
Pixel transfer operations handle four  fundamental  pixel  types:
<I>color</I>,  <I>color</I> <I>index</I>, <I>depth</I>, and <I>stencil</I>.  <I>Color</I> pixels consist of
four floating-point values with unspecified mantissa and exponent
sizes,  scaled such that 0 represents zero intensity and 1 repre­
sents full intensity.  <I>Color</I> <I>indices</I>  comprise  a  single  fixed-
point value, with unspecified precision to the right of the bina­
ry point.  <I>Depth</I> pixels comprise a single  floating-point  value,
with  unspecified  mantissa  and exponent sizes, scaled such that
0.0 represents the minimum depth buffer value, and 1.0 represents
the maximum depth buffer value.  Finally, <I>stencil</I> pixels comprise
a single fixed-point value, with  unspecified  precision  to  the
right  of  the  binary point.  The pixel transfer operations per­
formed on the four basic pixel types are as follows:  Color  Each
of  the  four  color  components is multiplied by a scale factor,
then added to a bias factor.  That is, the red component is  mul­

</PRE>
<H2>tiplied  by  GL_RED_SCALE,  then  added to GL_RED_BIAS; the green</H2><PRE>

</PRE>
<H2>component  is  multiplied  by  GL_GREEN_SCALE,  then   added   to</H2><PRE>

</PRE>
<H2>GL_GREEN_BIAS; the blue component is multiplied by GL_BLUE_SCALE,</H2><PRE>

</PRE>
<H2>nent is scaled by GL_PIXEL_MAP_A_TO_A_SIZE, then replaced by  the</H2><PRE>

</PRE>
<H2>contents  of  GL_PIXEL_MAP_A_TO_A  indexed by itself.  All compo­</H2><PRE>
nents taken from the maps are then clamped to  the  range  [0,1].

</PRE>
<H2>GL_MAP_COLOR  is specified with _cmnd.  The contents of the vari­</H2><PRE>
ous  maps   are   specified   with   _cmnd(PixelMap).    If   the

</PRE>
<H2>GL_ARB_imaging  extension  is  supported,  each of the four color</H2><PRE>
components may be scaled and biased after  tranformation  by  the
color  matrix.   That  is,  the  red  component  is multiplied by

</PRE>
<H2>GL_POST_COLOR_MATRIX_RED_SCALE,       then        added        to</H2><PRE>

</PRE>
<H2>GL_POST_COLOR_MATRIX_RED_BIAS;  the green component is multiplied</H2><PRE>

</PRE>
<H2>by    GL_POST_COLOR_MATRIX_GREEN_SCALE,     then     added     to</H2><PRE>

</PRE>
<H2>GL_POST_COLOR_MATRIX_GREEN_BIAS; the blue component is multiplied</H2><PRE>

</PRE>
<H2>by     GL_POST_COLOR_MATRIX_BLUE_SCALE,     then     added     to</H2><PRE>

</PRE>
<H2>GL_POST_COLOR_MATRIX_BLUE_BIAS; and the alpha component is multi­</H2><PRE>

</PRE>
<H2>plied  by   GL_POST_COLOR_MATRIX_ALPHA_SCALE,   then   added   to</H2><PRE>

</PRE>
<H2>GL_POST_COLOR_MATRIX_ALPHA_BIAS.  After all four color components</H2><PRE>
are scaled and biased, each is clamped to the range [0,1].   Sim­

</PRE>
<H2>iliarly,  if  the  GL_ARB_imaging extension is supported, each of</H2><PRE>
the four color components may be scaled and biased after process­
ing  by  the enabled convolution filter.  That is, the red compo­

</PRE>
<H2>nent is multiplied by GL_POST_CONVOLUTION_RED_SCALE,  then  added</H2><PRE>

</PRE>
<H2>to  GL_POST_CONVOLUTION_RED_BIAS;  the  green component is multi­</H2><PRE>

</PRE>
<H2>plied   by   GL_POST_CONVOLUTION_GREEN_SCALE,   then   added   to</H2><PRE>

</PRE>
<H2>GL_POST_CONVOLUTION_GREEN_BIAS;  the blue component is multiplied</H2><PRE>

</PRE>
<H2>by     GL_POST_CONVOLUTION_BLUE_SCALE,     then     added      to</H2><PRE>

</PRE>
<H2>GL_POST_CONVOLUTION_BLUE_BIAS;  and the alpha component is multi­</H2><PRE>

</PRE>
<H2>plied   by   GL_POST_CONVOLUTION_ALPHA_SCALE,   then   added   to</H2><PRE>

</PRE>
<H2>GL_POST_CONVOLUTION_ALPHA_BIAS.   After all four color components</H2><PRE>
are scaled and biased, each is clamped to the range [0,1].  Color

</PRE>
<H2>index  Each  color  index is shifted left by GL_INDEX_SHIFT bits;</H2><PRE>
any bits beyond the number of fraction bits carried by the fixed-

</PRE>
<H2>point  index  are  filled with zeros.  If GL_INDEX_SHIFT is nega­</H2><PRE>
tive, the shift  is  to  the  right,  again  zero  filled.   Then

</PRE>
<H2>GL_INDEX_OFFSET  is  added  to  the  index.   GL_INDEX_SHIFT  and</H2><PRE>

</PRE>
<H2>GL_INDEX_OFFSET are specified with</H2><PRE>
_cmnd.  From this point, operation diverges depending on the  re­
quired   of the resulting pixels.  If the resulting pixels are to
be written to a color index buffer, or if  they  are  being  read

</PRE>
<H2>back  to client memory in GL_COLOR_INDEX , the pixels continue to</H2><PRE>

</PRE>
<H2>be treated as indices.  If GL_MAP_COLOR is true,  each  index  is</H2><PRE>

</PRE>
<H2>masked by $2 sup n ~-~ 1$, where $n$ is GL_PIXEL_MAP_I_TO_I_SIZE,</H2><PRE>

</PRE>
<H2>then replaced by the contents of GL_PIXEL_MAP_I_TO_I  indexed  by</H2><PRE>

</PRE>
<H2>the  masked  value.   GL_MAP_COLOR  is specified with _cmnd.  The</H2><PRE>
contents of the index map is specified with _cmnd(PixelMap).   If
the  resulting  pixels are to be written to an RGBA color buffer,
or if they are read back  to  client  memory  in  a   other  than

</PRE>
<H2>GL_COLOR_INDEX,  the  pixels are converted from indices to colors</H2><PRE>

</PRE>
<H2>by    referencing    the    four    maps     GL_PIXEL_MAP_I_TO_R,</H2><PRE>

</PRE>
<H2>GL_PIXEL_MAP_I_TO_G,           GL_PIXEL_MAP_I_TO_B,           and</H2><PRE>

</PRE>
<H2>GL_PIXEL_MAP_I_TO_A.  Before being  dereferenced,  the  index  is</H2><PRE>

</PRE>
<H2>masked  by $2 sup n ~-~ 1$, where $n$ is GL_PIXEL_MAP_I_TO_R_SIZE</H2><PRE>

</PRE>
<H2>for the red map,  GL_PIXEL_MAP_I_TO_G_SIZE  for  the  green  map,</H2><PRE>


-------------------------------------------------------------------------

</PRE>
<H2>_param1                             Type     Initial Value   Valid Range</H2><PRE>
-------------------------------------------------------------------------

</PRE>
<H2>GL_MAP_COLOR                       boolean       false       true/false</H2><PRE>

</PRE>
<H2>GL_MAP_STENCIL                     boolean       false       true/false</H2><PRE>

</PRE>
<H2>GL_INDEX_SHIFT                     integer         0            (-,)</H2><PRE>

</PRE>
<H2>GL_INDEX_OFFSET                    integer         0            (-,)</H2><PRE>

</PRE>
<H2>GL_RED_SCALE                        float          1            (-,)</H2><PRE>

</PRE>
<H2>GL_GREEN_SCALE                      float          1            (-,)</H2><PRE>

</PRE>
<H2>GL_BLUE_SCALE                       float          1            (-,)</H2><PRE>

</PRE>
<H2>GL_ALPHA_SCALE                      float          1            (-,)</H2><PRE>

</PRE>
<H2>GL_DEPTH_SCALE                      float          1            (-,)</H2><PRE>

</PRE>
<H2>GL_RED_BIAS                         float          0            (-,)</H2><PRE>

</PRE>
<H2>GL_GREEN_BIAS                       float          0            (-,)</H2><PRE>

</PRE>
<H2>GL_BLUE_BIAS                        float          0            (-,)</H2><PRE>

</PRE>
<H2>GL_ALPHA_BIAS                       float          0            (-,)</H2><PRE>

</PRE>
<H2>GL_DEPTH_BIAS                       float          0            (-,)</H2><PRE>

</PRE>
<H2>GL_POST_COLOR_MATRIX_RED_SCALE      float          1            (-,)</H2><PRE>

</PRE>
<H2>GL_POST_COLOR_MATRIX_GREEN_SCALE    float          1            (-,)</H2><PRE>

</PRE>
<H2>GL_POST_COLOR_MATRIX_BLUE_SCALE     float          1            (-,)</H2><PRE>

</PRE>
<H2>GL_POST_COLOR_MATRIX_ALPHA_SCALE    float          1            (-,)</H2><PRE>

</PRE>
<H2>GL_POST_COLOR_MATRIX_RED_BIAS       float          0            (-,)</H2><PRE>

</PRE>
<H2>GL_POST_COLOR_MATRIX_GREEN_BIAS     float          0            (-,)</H2><PRE>

</PRE>
<H2>GL_POST_COLOR_MATRIX_BLUE_BIAS      float          0            (-,)</H2><PRE>

</PRE>
<H2>GL_POST_COLOR_MATRIX_ALPHA_BIAS     float          0            (-,)</H2><PRE>

</PRE>
<H2>GL_POST_CONVOLUTION_RED_SCALE       float          1            (-,)</H2><PRE>

</PRE>
<H2>GL_POST_CONVOLUTION_GREEN_SCALE     float          1            (-,)</H2><PRE>

</PRE>
<H2>GL_POST_CONVOLUTION_BLUE_SCALE      float          1            (-,)</H2><PRE>

</PRE>
<H2>GL_POST_CONVOLUTION_ALPHA_SCALE     float          1            (-,)</H2><PRE>

</PRE>
<H2>GL_POST_CONVOLUTION_RED_BIAS        float          0            (-,)</H2><PRE>

</PRE>
<H2>GL_POST_CONVOLUTION_GREEN_BIAS      float          0            (-,)</H2><PRE>

</PRE>
<H2>GL_POST_CONVOLUTION_BLUE_BIAS       float          0            (-,)</H2><PRE>

</PRE>
<H2>GL_POST_CONVOLUTION_ALPHA_BIAS      float          0            (-,)</H2><PRE>
-------------------------------------------------------------------------


_cmnd(PixelTransferf) can be used to set any pixel  transfer  pa­
rameter.   If  the parameter type is boolean, 0 implies false and
any other value implies true.  If _param1 is an  integer  parame­
ter,  _param2  is rounded to the nearest integer.  Likewise, _cm­
nd(PixelTransferi) can be used to set any of the  pixel  transfer
parameters.   Boolean parameters are set to false if _param2 is 0
and to true otherwise.  _param2 is converted  to  floating  point
before being assigned to real-valued parameters.  If a _cmnd(Col­
orTable), _cmnd(ColorSubTable), _cmnd(ConvolutionFilter1D),  _cm­
nd(ConvolutionFilter2D),    _cmnd(CopyPixels),   _cmnd(CopyTexIm­
age1D),  _cmnd(CopyTexImage2D),  _cmnd(CopyTexSubImage1D),   _cm­
nd(CopyTexSubImage2D),  _cmnd(CopyTexSubImage3D),  _cmnd(DrawPix­
els), _cmnd(ReadPixels),  _cmnd(SeparableFilter2D),  _cmnd(TexIm­
age1D),   _cmnd(TexImage2D),  _cmnd(TexImage3D),  _cmnd(TexSubIm­

</PRE>
<H2>_cmnd(Get) with argument GL_GREEN_SCALE</H2><PRE>

</PRE>
<H2>_cmnd(Get) with argument GL_GREEN_BIAS</H2><PRE>

</PRE>
<H2>_cmnd(Get) with argument GL_BLUE_SCALE</H2><PRE>

</PRE>
<H2>_cmnd(Get) with argument GL_BLUE_BIAS</H2><PRE>

</PRE>
<H2>_cmnd(Get) with argument GL_ALPHA_SCALE</H2><PRE>

</PRE>
<H2>_cmnd(Get) with argument GL_ALPHA_BIAS</H2><PRE>

</PRE>
<H2>_cmnd(Get) with argument GL_DEPTH_SCALE</H2><PRE>

</PRE>
<H2>_cmnd(Get) with argument GL_DEPTH_BIAS</H2><PRE>

</PRE>
<H2>_cmnd(Get) with argument GL_POST_COLOR_MATRIX_RED_SCALE</H2><PRE>

</PRE>
<H2>_cmnd(Get) with argument GL_POST_COLOR_MATRIX_RED_BIAS</H2><PRE>

</PRE>
<H2>_cmnd(Get) with argument GL_POST_COLOR_MATRIX_GREEN_SCALE</H2><PRE>

</PRE>
<H2>_cmnd(Get) with argument GL_POST_COLOR_MATRIX_GREEN_BIAS</H2><PRE>

</PRE>
<H2>_cmnd(Get) with argument GL_POST_COLOR_MATRIX_BLUE_SCALE</H2><PRE>

</PRE>
<H2>_cmnd(Get) with argument GL_POST_COLOR_MATRIX_BLUE_BIAS</H2><PRE>

</PRE>
<H2>_cmnd(Get) with argument GL_POST_COLOR_MATRIX_ALPHA_SCALE</H2><PRE>

</PRE>
<H2>_cmnd(Get) with argument GL_POST_COLOR_MATRIX_ALPHA_BIAS</H2><PRE>

</PRE>
<H2>_cmnd(Get) with argument GL_POST_CONVOLUTION_RED_SCALE</H2><PRE>

</PRE>
<H2>_cmnd(Get) with argument GL_POST_CONVOLUTION_RED_BIAS</H2><PRE>

</PRE>
<H2>_cmnd(Get) with argument GL_POST_CONVOLUTION_GREEN_SCALE</H2><PRE>

</PRE>
<H2>_cmnd(Get) with argument GL_POST_CONVOLUTION_GREEN_BIAS</H2><PRE>

</PRE>
<H2>_cmnd(Get) with argument GL_POST_CONVOLUTION_BLUE_SCALE</H2><PRE>

</PRE>
<H2>_cmnd(Get) with argument GL_POST_CONVOLUTION_BLUE_BIAS</H2><PRE>

</PRE>
<H2>_cmnd(Get) with argument GL_POST_CONVOLUTION_ALPHA_SCALE</H2><PRE>

</PRE>
<H2>_cmnd(Get)  with  argument  GL_POST_CONVOLUTION_ALPHA_BIAS   _cm­</H2><PRE>
nd(CallList), _cmnd(ColorTable), _cmnd(ColorSubTable), _cmnd(Con­
volutionFilter1D), _cmnd(ConvolutionFilter2D), _cmnd(CopyPixels),
_cmnd(CopyTexImage1D), _cmnd(CopyTexImage2D), _cmnd(CopyTexSubIm­
age1D), _cmnd(CopyTexSubImage2D), _cmnd(CopyTexSubImage3D),  _cm­
nd(DrawPixels),   _cmnd(NewList),  _cmnd(PixelMap),  _cmnd(Pixel­
Store), _cmnd(PixelZoom),  _cmnd(ReadPixels),  _cmnd(TexImage1D),
_cmnd(TexImage2D),  _cmnd(TexImage3D), _cmnd(TexSubImage1D), _cm­
nd(TexSubImage2D), _cmnd(TexSubImage3D)




















@


1.1.1.1
log
@win32-x11 source tree update March 26, 2001
@
text
@@
