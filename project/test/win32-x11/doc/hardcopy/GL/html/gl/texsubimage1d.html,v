head	1.2;
access;
symbols
	win32-x11-2001-03-26:1.1.1.1 SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2001.06.03.20.47.07;	author ssiddiqi;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.25.19.36.50;	author ssiddiqi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.03.25.19.36.50;	author ssiddiqi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Win32-X11 update sources check in, June 3, 2001 - ssiddiqi
@
text
@<HTML>
<BODY>
<PRE>
<!-- Manpage converted by man2html 3.0.1 -->
</PRE>
<HR>
<ADDRESS>
Man(1) output converted with
<a href="http://www.oac.uci.edu/indiv/ehood/man2html.html">man2html</a>
</ADDRESS>
</BODY>
</HTML>
@


1.1
log
@Initial revision
@
text
@a4 170
_phead(_param5) Specifies the  of the pixel data.  The  following

</PRE>
<H2>symbolic  values  are accepted: GL_COLOR_INDEX, GL_RED, GL_GREEN,</H2><PRE>

</PRE>
<H2>GL_BLUE,   GL_ALPHA,   GL_RGB,    GL_BGR,    GL_RGBA,    GL_BGRA,</H2><PRE>

</PRE>
<H2>GL_LUMINANCE,  and GL_LUMINANCE_ALPHA.  _phead(_param6) Specifies</H2><PRE>
the data type of the pixel data.  The following  symbolic  values

</PRE>
<H2>are     accepted:     GL_UNSIGNED_BYTE,    GL_BYTE,    GL_BITMAP,</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT,  GL_INT,  GL_FLOAT,</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_BYTE_3_3_2,               GL_UNSIGNED_BYTE_2_3_3_REV,</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_SHORT_5_6_5,             GL_UNSIGNED_SHORT_5_6_5_REV,</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_SHORT_4_4_4_4,         GL_UNSIGNED_SHORT_4_4_4_4_REV,</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_SHORT_5_5_5_1,         GL_UNSIGNED_SHORT_1_5_5_5_REV,</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_INT_8_8_8_8,             GL_UNSIGNED_INT_8_8_8_8_REV,</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_INT_10_10_10_2,  and  GL_UNSIGNED_INT_2_10_10_10_REV.</H2><PRE>
_phead(_param7)  Specifies a pointer to the image data in memory.
Texturing maps a portion of a specified texture image  onto  each
graphical primitive for which texturing is enabled.  To enable or
disable one-dimensional texturing, call  _cmnd(Enable)  and  _cm­

</PRE>
<H2>nd(Disable)  with argument GL_TEXTURE_1D.  _cmnd redefines a con­</H2><PRE>
tiguous subregion of an existing one-dimensional  texture  image.
The  texels  referenced by _param7 replace the portion of the ex­
isting  texture  array  with  x  indices   _param3   and   $_eqn­
param3~+~_eqnparam4~-~1$,inclusive.   This region may not include
any texels outside the range of the texture array as it was orig­
inally  specified.   It  is  not an error to specify a subtexture
with width of 0, but such a specification has no  effect.   _cmnd
is available only if the GL version is 1.1 or greater.  Texturing
has no effect in color index mode.   _cmnd(PixelStore)  and  _cm­
nd(PixelTransfer)  modes affect texture images in exactly the way

</PRE>
<H2>they affect _cmnd(DrawPixels).  Formats GL_BGR, and  GL_BGRA  and</H2><PRE>

</PRE>
<H2>types     GL_UNSIGNED_BYTE_3_3_2,     GL_UNSIGNED_BYTE_2_3_3_REV,</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_SHORT_5_6_5,             GL_UNSIGNED_SHORT_5_6_5_REV,</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_SHORT_4_4_4_4,         GL_UNSIGNED_SHORT_4_4_4_4_REV,</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_SHORT_5_5_5_1,         GL_UNSIGNED_SHORT_1_5_5_5_REV,</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_INT_8_8_8_8,             GL_UNSIGNED_INT_8_8_8_8_REV,</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_INT_10_10_10_2,  and   GL_UNSIGNED_INT_2_10_10_10_REV</H2><PRE>
are available only if the GL version is 1.2 or greater.  When the

</PRE>
<H2>GL_ARB_multitexture extension is  supported,  _cmnd  specifies  a</H2><PRE>
one-dimensional  sub texture for the current texture unit, speci­

</PRE>
<H2>fied with _cmnd(ActiveTextureARB).  When the  GL_ARB_imaging  ex­</H2><PRE>
tension  is  supported,  the RGBA components specified in _param7
may be processed by the imaging pipeline.  See  _cmnd(TexImage1D)

</PRE>
<H2>for specific details.  GL_INVALID_ENUM is generated if _param1 is</H2><PRE>

</PRE>
<H2>not one of the allowable values.  GL_INVALID_OPERATION is  gener­</H2><PRE>
ated if the texture array has not been defined by a previous _cm­

</PRE>
<H2>nd(TexImage1D)  operation.   GL_INVALID_VALUE  is  generated   if</H2><PRE>

</PRE>
<H2>_param2  is  less  than  0.  GL_INVALID_VALUE may be generated if</H2><PRE>
_param2 is greater than $log sub 2$<I>max</I>, where <I>max</I> is the returned

</PRE>
<H2>value  of  GL_MAX_TEXTURE_SIZE.  GL_INVALID_VALUE is generated if</H2><PRE>
$_eqnparam3 ~&lt;~ ~-b$, or if $(_eqnparam3~+~_eqnparam4) ~&gt;~ (w ~-~

</PRE>
<H2>b)$,  where  $w$ is the GL_TEXTURE_WIDTH, and $b$ is the width of</H2><PRE>

</PRE>
<H2>the GL_TEXTURE_BORDER of the texture image being modified.   Note</H2><PRE>

</PRE>
<H2>that  $w$  includes  twice the border width.  GL_INVALID_VALUE is</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_INT_8_8_8_8_REV,    GL_UNSIGNED_INT_10_10_10_2,    or</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_INT_2_10_10_10_REV and _param5 is neither GL_RGBA nor</H2><PRE>

</PRE>
<H2>GL_BGRA.  _cmnd(GetTexImage)</H2><PRE>

</PRE>
<H2>_cmnd(IsEnabled)  with  argument  GL_TEXTURE_1D  _cmnd(ActiveTex­</H2><PRE>
tureARB),  _cmnd(CopyTexImage1D),   _cmnd(CopyTexImage2D),   _cm­
nd(CopyTexSubImage1D),  _cmnd(CopyTexSubImage2D),  _cmnd(CopyTex­
SubImage3D), _cmnd(DrawPixels),  _cmnd(PixelStore),  _cmnd(Pixel­
Transfer),  _cmnd(TexEnv), _cmnd(TexGen), _cmnd(TexImage1D), _cm­
nd(TexImage2D),  _cmnd(TexImage3D),   _cmnd(TexParameter),   _cm­
nd(TexSubImage2D), _cmnd(TexSubImage3D)










































@


1.1.1.1
log
@win32-x11 source tree update March 26, 2001
@
text
@@
