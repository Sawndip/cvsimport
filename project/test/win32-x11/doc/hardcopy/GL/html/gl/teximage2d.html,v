head	1.2;
access;
symbols
	win32-x11-2001-03-26:1.1.1.1 SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2001.06.03.20.47.07;	author ssiddiqi;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.25.19.36.50;	author ssiddiqi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.03.25.19.36.50;	author ssiddiqi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Win32-X11 update sources check in, June 3, 2001 - ssiddiqi
@
text
@<HTML>
<BODY>
<PRE>
<!-- Manpage converted by man2html 3.0.1 -->
</PRE>
<HR>
<ADDRESS>
Man(1) output converted with
<a href="http://www.oac.uci.edu/indiv/ehood/man2html.html">man2html</a>
</ADDRESS>
</BODY>
</HTML>
@


1.1
log
@Initial revision
@
text
@a4 376

</PRE>
<H2>constants:   GL_ALPHA,    GL_ALPHA4,    GL_ALPHA8,    GL_ALPHA12,</H2><PRE>

</PRE>
<H2>GL_ALPHA16,     GL_LUMINANCE,    GL_LUMINANCE4,    GL_LUMINANCE8,</H2><PRE>

</PRE>
<H2>GL_LUMINANCE12,        GL_LUMINANCE16,        GL_LUMINANCE_ALPHA,</H2><PRE>

</PRE>
<H2>GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8,</H2><PRE>

</PRE>
<H2>GL_LUMINANCE12_ALPHA4,                    GL_LUMINANCE12_ALPHA12,</H2><PRE>

</PRE>
<H2>GL_LUMINANCE16_ALPHA16,        GL_INTENSITY,       GL_INTENSITY4,</H2><PRE>

</PRE>
<H2>GL_INTENSITY8,   GL_INTENSITY12,   GL_INTENSITY16,   GL_R3_G3_B2,</H2><PRE>

</PRE>
<H2>GL_RGB,  GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16,</H2><PRE>

</PRE>
<H2>GL_RGBA, GL_RGBA2, GL_RGBA4, GL_RGB5_A1,  GL_RGBA8,  GL_RGB10_A2,</H2><PRE>

</PRE>
<H2>GL_RGBA12,  or GL_RGBA16.  _phead(_param4) Specifies the width of</H2><PRE>
the texture image.  Must be $2 sup n ~+~ 2 (  _eqnparam6  )$  for
some integer $n$. All implementations support texture images that
are at least  64  texels  wide.   _phead(_param5)  Specifies  the
height of the texture image.  Must be $2 sup m ~+~ 2 ( _eqnparam6
)$ for some integer $m$. All implementations support texture  im­
ages that are at least 64 texels high.  _phead(_param6) Specifies
the width of the border.  Must be either 0 or 1.  _phead(_param7)
Specifies  the  of the pixel data.  The following symbolic values

</PRE>
<H2>are  accepted:   GL_COLOR_INDEX,   GL_RED,   GL_GREEN,   GL_BLUE,</H2><PRE>

</PRE>
<H2>GL_ALPHA,  GL_RGB,  GL_BGR  GL_RGBA,  GL_BGRA,  GL_LUMINANCE, and</H2><PRE>

</PRE>
<H2>GL_LUMINANCE_ALPHA.  _phead(_param8) Specifies the data  type  of</H2><PRE>
the  pixel  data.   The  following  symbolic values are accepted:

</PRE>
<H2>GL_UNSIGNED_BYTE,    GL_BYTE,    GL_BITMAP,    GL_UNSIGNED_SHORT,</H2><PRE>

</PRE>
<H2>GL_SHORT,        GL_UNSIGNED_INT,        GL_INT,        GL_FLOAT,</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_BYTE_3_3_2,               GL_UNSIGNED_BYTE_2_3_3_REV,</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_SHORT_5_6_5,             GL_UNSIGNED_SHORT_5_6_5_REV,</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_SHORT_4_4_4_4,         GL_UNSIGNED_SHORT_4_4_4_4_REV,</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_SHORT_5_5_5_1,         GL_UNSIGNED_SHORT_1_5_5_5_REV,</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_INT_8_8_8_8,             GL_UNSIGNED_INT_8_8_8_8_REV,</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_INT_10_10_10_2,  and  GL_UNSIGNED_INT_2_10_10_10_REV.</H2><PRE>
_phead(_param9) Specifies a pointer to the image data in  memory.
Texturing  maps  a portion of a specified texture image onto each
graphical primitive for which texturing is  enabled.   To  enable
and  disable  two-dimensional  texturing,  call _cmnd(Enable) and

</PRE>
<H2>_cmnd(Disable) with argument GL_TEXTURE_2D.   To  define  texture</H2><PRE>
images, call _cmnd.  The arguments describe the parameters of the
texture image, such as height, width, width of the border, level-
of-detail  number  (see _cmnd(TexParameter)), and number of color
components provided.  The last three arguments describe  how  the
image  is  represented in memory; they are identical to the pixel
formats   used   for   _cmnd(DrawPixels).     If    _param1    is

</PRE>
<H2>GL_PROXY_TEXTURE_2D, no data is read from _param9, but all of the</H2><PRE>
texture image state is recalculated, checked for consistency, and
checked  against the implementation's capabilities. If the imple­
mentation cannot handle a texture of the requested texture  size,
it sets all of the image state to 0, but does not generate an er­
ror (see _cmnd(GetError)). To query for an entire  mipmap  array,
use  an image array level greater than or equal to 1.  If _param1

</PRE>
<H2>is GL_TEXTURE_2D, data is read from  _param9  as  a  sequence  of</H2><PRE>
signed  or  unsigned bytes, shorts, or longs, or single-precision
floating-point values, depending on _param8.   These  values  are
grouped  into  sets of one, two, three, or four values, depending
texture  image.   _param7 determines the composition of each ele­
ment in _param9.  It can assume one of  eleven  symbolic  values:

</PRE>
<H2>GL_COLOR_INDEX  Each  element  is  a single value, a color index.</H2><PRE>
The GL converts it to fixed point (with an unspecified number  of
zero  bits  to  the  right  of the binary point), shifted left or

</PRE>
<H2>right depending on the value  and  sign  of  GL_INDEX_SHIFT,  and</H2><PRE>

</PRE>
<H2>added to GL_INDEX_OFFSET (see</H2><PRE>
_cmnd(PixelTransfer)).  The resulting index is converted to a set

</PRE>
<H2>of    color    components    using    the    GL_PIXEL_MAP_I_TO_R,</H2><PRE>

</PRE>
<H2>GL_PIXEL_MAP_I_TO_G, GL_PIXEL_MAP_I_TO_B, and GL_PIXEL_MAP_I_TO_A</H2><PRE>

</PRE>
<H2>tables, and clamped to the range [0,1].  GL_RED Each element is a</H2><PRE>
single  red  component.  The GL converts it to floating point and
assembles it into an RGBA element by attaching 0  for  green  and
blue,  and 1 for alpha.  Each component is then multiplied by the

</PRE>
<H2>signed  scale  factor  GL_c_SCALE,  added  to  the  signed   bias</H2><PRE>

</PRE>
<H2>GL_c_BIAS,  and clamped to the range [0,1] (see _cmnd(PixelTrans­</H2><PRE>

</PRE>
<H2>fer)).  GL_GREEN Each element is a single green  component.   The</H2><PRE>
GL  converts  it  to floating point and assembles it into an RGBA
element by attaching 0 for red and blue, and 1 for  alpha.   Each
component   is   then  multiplied  by  the  signed  scale  factor

</PRE>
<H2>GL_c_SCALE, added to the signed bias GL_c_BIAS,  and  clamped  to</H2><PRE>

</PRE>
<H2>the range [0,1] (see _cmnd(PixelTransfer)).  GL_BLUE Each element</H2><PRE>
is a single blue component.  The GL converts it to floating point
and  assembles it into an RGBA element by attaching 0 for red and
green, and 1 for alpha.  Each component is then multiplied by the

</PRE>
<H2>signed   scale  factor  GL_c_SCALE,  added  to  the  signed  bias</H2><PRE>

</PRE>
<H2>GL_c_BIAS, and clamped to the range [0,1] (see  _cmnd(PixelTrans­</H2><PRE>

</PRE>
<H2>fer)).   GL_ALPHA  Each element is a single alpha component.  The</H2><PRE>
GL converts it to floating point and assembles it  into  an  RGBA
element  by attaching 0 for red, green, and blue.  Each component

</PRE>
<H2>is then multiplied by the signed scale factor  GL_c_SCALE,  added</H2><PRE>

</PRE>
<H2>to the signed bias GL_c_BIAS, and clamped to the range [0,1] (see</H2><PRE>

</PRE>
<H2>_cmnd(PixelTransfer)).  GL_RGB GL_BGR  Each  element  is  an  RGB</H2><PRE>
triple.   The  GL  converts it to floating point and assembles it
into an RGBA element by attaching 1 for alpha.  Each component is

</PRE>
<H2>then  multiplied  by the signed scale factor GL_c_SCALE, added to</H2><PRE>

</PRE>
<H2>the signed bias GL_c_BIAS, and clamped to the range [0,1] (see</H2><PRE>

</PRE>
<H2>_cmnd(PixelTransfer)).  GL_RGBA GL_BGRA Each element contains all</H2><PRE>
four  components.   Each  component  is  multiplied by the signed

</PRE>
<H2>scale factor GL_c_SCALE, added to the signed bias GL_c_BIAS,  and</H2><PRE>
clamped   to   the   range   [0,1]   (see  _cmnd(PixelTransfer)).

</PRE>
<H2>GL_LUMINANCE Each element is a single luminance  value.   The  GL</H2><PRE>
converts it to floating point, then assembles it into an RGBA el­
ement by replicating the luminance value  three  times  for  red,
green,  and  blue  and  attaching 1 for alpha.  Each component is

</PRE>
<H2>then multiplied by the signed scale factor GL_c_SCALE,  added  to</H2><PRE>

</PRE>
<H2>the  signed  bias  GL_c_BIAS, and clamped to the range [0,1] (see</H2><PRE>

</PRE>
<H2>_cmnd(PixelTransfer)).  GL_LUMINANCE_ALPHA Each element is a  lu­</H2><PRE>
minance/alpha  pair.   The GL converts it to floating point, then
assembles it into an RGBA element by  replicating  the  luminance
value  three  times  for red, green, and blue.  Each component is

</PRE>
<H2>then multiplied by the signed scale factor GL_c_SCALE,  added  to</H2><PRE>
cannot be accommodated, texture state is set to 0.  A  one-compo­
nent  texture image uses only the red component of the RGBA color
extracted from _param9.  A two-component image uses the R  and  A
values.   A three-component image uses the R, G, and B values.  A
four-component image uses all of the RGBA components.   Texturing

</PRE>
<H2>has  no effect in color index mode.  If the GL_ARB_imaging exten­</H2><PRE>
sion is supported, RGBA elements may also  be  processed  by  the
imaging pipeline.  The following stages may be applied to an RGBA
color before color component clamping to  the  range  [0, 1]:  1.
Color  component  replacement  by  the  color table specified for

</PRE>
<H2>GL_COLOR_TABLE, if enabled. See _cmnd(ColorTable).  2. Two-dimen­</H2><PRE>
sional  Convolution filtering, if enabled. See _cmnd(Convolution­
Filter1D).  If a convolution filter changes the  __width  of  the

</PRE>
<H2>texture  (by  processing  with  a  GL_CONVOLUTION_BORDER_MODE  of</H2><PRE>

</PRE>
<H2>GL_REDUCE, for example), the _param4 must $2 sup n +  2  (  _eqn­</H2><PRE>
param5 )$, for some integer $n$, and _param5 must be $2 sup m + (
_eqnparam6 )$, for some integer $m$,  after filtering.   3.  RGBA

</PRE>
<H2>components  may be multiplied by GL_POST_CONVOLUTION_c_SCALE, and</H2><PRE>

</PRE>
<H2>added to GL_POST_CONVOLUTION_c_BIAS, if enabled.  See  _cmnd(Pix­</H2><PRE>
elTransfer).   4.  Color component replacement by the color table

</PRE>
<H2>specified for GL_POST_CONVOLUTION_COLOR_TABLE, if  enabled.   See</H2><PRE>
_cmnd(ColorTable).   5.  Transformation by the color matrix.  See
_cmnd(MatrixMode).  6.  RGBA  components  may  be  multiplied  by

</PRE>
<H2>GL_POST_COLOR_MATRIX_c_SCALE,         and         added        to</H2><PRE>

</PRE>
<H2>GL_POST_COLOR_MATRIX_c_BIAS, if enabled.   See  _cmnd(PixelTrans­</H2><PRE>
fer).   7.  Color component replacement by the color table speci­

</PRE>
<H2>fied for GL_POST_COLOR_MATRIX_COLOR_TABLE, if enabled.  See  _cm­</H2><PRE>
nd(ColorTable).  The texture image can be represented by the same
data formats as the pixels in a _cmnd(DrawPixels) command, except

</PRE>
<H2>that  GL_STENCIL_INDEX  and  GL_DEPTH_COMPONENT  cannot  be used.</H2><PRE>
_cmnd(PixelStore) and _cmnd(PixelTransfer) modes  affect  texture
images  in  exactly the way they affect _cmnd(DrawPixels).  _cmnd

</PRE>
<H2>and GL_PROXY_TEXTURE_2D are available only if the GL  version  is</H2><PRE>
1.1 or greater.  Internal formats other than 1, 2, 3, or 4 may be
used only if the GL version is 1.1 or greater.  In GL version 1.1
or  greater, _param9 may be a null pointer.  In this case texture
memory is allocated to accommodate a texture of width _param4 and
height  _param5.  You can then download subtextures to initialize
this texture memory.  The image is undefined if the user tries to
apply  an  uninitialized portion of the texture image to a primi­

</PRE>
<H2>tive.     Formats    GL_BGR,    and     GL_BGRA     and     types</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_BYTE_3_3_2,               GL_UNSIGNED_BYTE_2_3_3_REV,</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_SHORT_5_6_5,             GL_UNSIGNED_SHORT_5_6_5_REV,</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_SHORT_4_4_4_4,         GL_UNSIGNED_SHORT_4_4_4_4_REV,</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_SHORT_5_5_5_1,         GL_UNSIGNED_SHORT_1_5_5_5_REV,</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_INT_8_8_8_8,             GL_UNSIGNED_INT_8_8_8_8_REV,</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_INT_10_10_10_2,  and   GL_UNSIGNED_INT_2_10_10_10_REV</H2><PRE>
are available only if the GL version is 1.2 or greater.  When the

</PRE>
<H2>GL_ARB_multitexture extension is supported, _cmnd  specifies  the</H2><PRE>
two-dimensional  texture  for the current texture unit, specified

</PRE>
<H2>with _cmnd(ActiveTextureARB).  GL_INVALID_ENUM  is  generated  if</H2><PRE>

</PRE>
<H2>_param1    is    not    GL_TEXTURE_2D   or   GL_PROXY_TEXTURE_2D.</H2><PRE>

</PRE>
<H2>_param6 is not 0 or 1.  GL_INVALID_OPERATION is generated if _cm­</H2><PRE>
nd is executed between the execution of _cmnd(Begin) and the cor­

</PRE>
<H2>responding execution of _cmnd(End).  GL_INVALID_OPERATION is gen­</H2><PRE>

</PRE>
<H2>erated   if   _param8   is   one    of    GL_UNSIGNED_BYTE_3_3_2,</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_BYTE_2_3_3_REV,      GL_UNSIGNED_SHORT_5_6_5,      or</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_SHORT_5_6_5_REV   and   _param7   is   not    GL_RGB.</H2><PRE>

</PRE>
<H2>GL_INVALID_OPERATION   is   generated   if   _param8  is  one  of</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_SHORT_4_4_4_4,         GL_UNSIGNED_SHORT_4_4_4_4_REV,</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_SHORT_5_5_5_1,         GL_UNSIGNED_SHORT_1_5_5_5_REV,</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_INT_8_8_8_8,             GL_UNSIGNED_INT_8_8_8_8_REV,</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_INT_10_10_10_2, or GL_UNSIGNED_INT_2_10_10_10_REV and</H2><PRE>

</PRE>
<H2>_param7 is neither GL_RGBA nor GL_BGRA.  _cmnd(GetTexImage)</H2><PRE>

</PRE>
<H2>_cmnd(IsEnabled) with argument  GL_TEXTURE_2D  _cmnd(ColorTable),</H2><PRE>
_cmnd(ConvolutionFilter2D),  _cmnd(CopyPixels),  _cmnd(CopyTexIm­
age1D),  _cmnd(CopyTexImage2D),  _cmnd(CopyTexSubImage1D),   _cm­
nd(CopyTexSubImage2D),  _cmnd(CopyTexSubImage3D),  _cmnd(DrawPix­
els), _cmnd(MatrixMode), _cmnd(PixelStore), _cmnd(PixelTransfer),
_cmnd(SeparableFilter2D),   _cmnd(TexEnv),   _cmnd(TexGen),  _cm­
nd(TexImage1D),  _cmnd(TexImage3D),  _cmnd(TexSubImage1D),   _cm­
nd(TexSubImage2D), _cmnd(TexSubImage3D), _cmnd(TexParameter)
































@


1.1.1.1
log
@win32-x11 source tree update March 26, 2001
@
text
@@
