head	1.2;
access;
symbols
	win32-x11-2001-03-26:1.1.1.1 SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2001.06.03.20.47.06;	author ssiddiqi;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.25.19.36.50;	author ssiddiqi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.03.25.19.36.50;	author ssiddiqi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Win32-X11 update sources check in, June 3, 2001 - ssiddiqi
@
text
@<HTML>
<BODY>
<PRE>
<!-- Manpage converted by man2html 3.0.1 -->
</PRE>
<HR>
<ADDRESS>
Man(1) output converted with
<a href="http://www.oac.uci.edu/indiv/ehood/man2html.html">man2html</a>
</ADDRESS>
</BODY>
</HTML>
@


1.1
log
@Initial revision
@
text
@a4 152
mand.  _names(EvalCoord,[1-2][fd]v) _phead(_param1)  Specifies  a
pointer  to  an array containing either one or two domain coordi­
nates.  The first coordinate is $u$.  The  second  coordinate  is
$v$,  which  is present only in _cmnd(EvalCoord2) versions.  _cm­
nd(EvalCoord1) evaluates enabled one-dimensional maps at argument
<B>_param1(1)</B>.   _cmnd(EvalCoord2) does the same for two-dimensional
maps using two domain values, <B>_param1(1)</B> and <B>_param2(1)</B>.  To  de­
fine  a map, call _cmnd(Map1) and _cmnd(Map2); to enable and dis­
able it, call _cmnd(Enable) and _cmnd(Disable).  When one of  the
_cmnd(EvalCoord)  commands  is issued, all currently enabled maps
of the indicated dimension are evaluated.  Then, for each enabled
map,  it  is  as  if the corresponding GL command had been issued

</PRE>
<H2>with  the  computed  value.   That  is,   if   GL_MAP1_INDEX   or</H2><PRE>

</PRE>
<H2>GL_MAP2_INDEX  is  enabled,  a _cmnd(Index) command is simulated.</H2><PRE>

</PRE>
<H2>If GL_MAP1_COLOR_4 or GL_MAP2_COLOR_4 is enabled, a  _cmnd(Color)</H2><PRE>

</PRE>
<H2>command is simulated.  If GL_MAP1_NORMAL or GL_MAP2_NORMAL is en­</H2><PRE>
abled,  a  normal   vector   is   produced,   and   if   any   of

</PRE>
<H2>GL_MAP1_TEXTURE_COORD_1,                 GL_MAP1_TEXTURE_COORD_2,</H2><PRE>

</PRE>
<H2>GL_MAP1_TEXTURE_COORD_3,                 GL_MAP1_TEXTURE_COORD_4,</H2><PRE>

</PRE>
<H2>GL_MAP2_TEXTURE_COORD_1,                 GL_MAP2_TEXTURE_COORD_2,</H2><PRE>

</PRE>
<H2>GL_MAP2_TEXTURE_COORD_3, or GL_MAP2_TEXTURE_COORD_4  is  enabled,</H2><PRE>
then  an  appropriate  _cmnd(TexCoord) command is simulated.  For
color, color index, normal, and texture coordinates the  GL  uses
evaluated  values instead of current values for those evaluations
that are enabled, and  current  values  otherwise,  However,  the
evaluated values do not update the current values.  Thus, if _cm­
nd(Vertex) commands are interspersed with  _cmnd(EvalCoord)  com­
mands, the color, normal, and texture coordinates associated with
the _cmnd(Vertex) commands are not affected by the values  gener­
ated  by  the _cmnd(EvalCoord) commands, but only by the most re­
cent _cmnd(Color), _cmnd(Index), _cmnd(Normal), and  _cmnd(TexCo­
ord)  commands.  No commands are issued for maps that are not en­
abled.  If more than one texture evaluation is enabled for a par­

</PRE>
<H2>ticular   dimension  (for  example,  GL_MAP2_TEXTURE_COORD_1  and</H2><PRE>

</PRE>
<H2>GL_MAP2_TEXTURE_COORD_2), then only the  evaluation  of  the  map</H2><PRE>
that  produces  the  larger  number of coordinates (in this case,

</PRE>
<H2>GL_MAP2_TEXTURE_COORD_2) is carried out.  GL_MAP1_VERTEX_4  over­</H2><PRE>

</PRE>
<H2>rides    GL_MAP1_VERTEX_3,    and    GL_MAP2_VERTEX_4   overrides</H2><PRE>

</PRE>
<H2>GL_MAP2_VERTEX_3, in the same manner.  If neither a three- nor  a</H2><PRE>
four-component vertex map is enabled for the specified dimension,
the _cmnd(EvalCoord) command is ignored.  If you have enabled au­
tomatic normal generation, by calling _cmnd(Enable) with argument

</PRE>
<H2>GL_AUTO_NORMAL, _cmnd(EvalCoord2) generates surface normals  ana­</H2><PRE>
lytically,   regardless  of  the  contents  or  enabling  of  the

</PRE>
<H2>GL_MAP2_NORMAL map.  Let</H2><PRE>

      bold m ~=~ {partial bold p} over {partial u} ~times~
  {partial bold p} over {partial v}

Then the generated normal $ bold n $ is
            $bold n ~=~ bold m over { || bold m || }$


</PRE>
<H2>_cmnd(IsEnabled) with argument GL_MAP2_VERTEX_4</H2><PRE>

</PRE>
<H2>_cmnd(IsEnabled) with argument GL_MAP2_INDEX</H2><PRE>

</PRE>
<H2>_cmnd(IsEnabled) with argument GL_MAP2_COLOR_4</H2><PRE>

</PRE>
<H2>_cmnd(IsEnabled) with argument GL_MAP2_NORMAL</H2><PRE>

</PRE>
<H2>_cmnd(IsEnabled) with argument GL_MAP2_TEXTURE_COORD_1</H2><PRE>

</PRE>
<H2>_cmnd(IsEnabled) with argument GL_MAP2_TEXTURE_COORD_2</H2><PRE>

</PRE>
<H2>_cmnd(IsEnabled) with argument GL_MAP2_TEXTURE_COORD_3</H2><PRE>

</PRE>
<H2>_cmnd(IsEnabled) with argument GL_MAP2_TEXTURE_COORD_4</H2><PRE>

</PRE>
<H2>_cmnd(IsEnabled) with argument GL_AUTO_NORMAL</H2><PRE>
_cmnd(GetMap)
_cmnd(Begin),
_cmnd(Color),
_cmnd(Enable),
_cmnd(EvalMesh),
_cmnd(EvalPoint),
_cmnd(Index),
_cmnd(Map1),
_cmnd(Map2),
_cmnd(MapGrid),
_cmnd(Normal),
_cmnd(TexCoord),
_cmnd(Vertex)






























@


1.1.1.1
log
@win32-x11 source tree update March 26, 2001
@
text
@@
