head	1.2;
access;
symbols
	win32-x11-2001-03-26:1.1.1.1 SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2001.06.03.20.47.06;	author ssiddiqi;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.25.19.36.50;	author ssiddiqi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.03.25.19.36.50;	author ssiddiqi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Win32-X11 update sources check in, June 3, 2001 - ssiddiqi
@
text
@<HTML>
<BODY>
<PRE>
<!-- Manpage converted by man2html 3.0.1 -->
</PRE>
<HR>
<ADDRESS>
Man(1) output converted with
<a href="http://www.oac.uci.edu/indiv/ehood/man2html.html">man2html</a>
</ADDRESS>
</BODY>
</HTML>
@


1.1
log
@Initial revision
@
text
@a4 126
Rather, images rendered into one of the color buffers  are  added
to  the contents of the accumulation buffer after rendering.  Ef­
fects such as antialiasing (of points, lines, and polygons),  mo­
tion  blur, and depth of field can be created by accumulating im­
ages generated with different transformation matrices.  Each pix­
el  in  the accumulation buffer consists of red, green, blue, and
alpha values.  The number of bits per component in the  accumula­
tion  buffer  depends on the implementation. You can examine this
number by calling _cmnd(GetIntegerv) four times,  with  arguments

</PRE>
<H2>GL_ACCUM_RED_BITS,  GL_ACCUM_GREEN_BITS,  GL_ACCUM_BLUE_BITS, and</H2><PRE>

</PRE>
<H2>GL_ACCUM_ALPHA_BITS.  Regardless of the number of bits per compo­</H2><PRE>
nent,  the  range  of values stored by each component is [-1, 1].
The accumulation buffer pixels are mapped one-to-one  with  frame
buffer  pixels.   _cmnd operates on the accumulation buffer.  The
first argument, _param1, is a symbolic constant that  selects  an
accumulation  buffer operation.  The second argument, _param2, is
a floating-point value to be used in that operation.  Five opera­

</PRE>
<H2>tions  are  specified:  GL_ACCUM,  GL_LOAD,  GL_ADD, GL_MULT, and</H2><PRE>

</PRE>
<H2>GL_RETURN.  All accumulation buffer operations are limited to the</H2><PRE>
area  of  the  current scissor box and applied identically to the
red, green, blue, and alpha components of each pixel.  If a _cmnd
operation  results in a value outside the range [-1, 1], the con­
tents of an accumulation buffer pixel  component  are  undefined.

</PRE>
<H2>The  operations  are  as follows: GL_ACCUM Obtains R, G, B, and A</H2><PRE>
values from the buffer currently selected for reading  (see  _cm­
nd(ReadBuffer)).   Each  component  value  is  divided  by $2 sup
n^-^1$, where $n$ is the number of bits allocated to  each  color
component  in  the  currently  selected  buffer.  The result is a
floating-point value in the range [0, 1], which is multiplied  by
_param2 and added to the corresponding pixel component in the ac­
cumulation buffer,  thereby  updating  the  accumulation  buffer.

</PRE>
<H2>GL_LOAD Similar to GL_ACCUM, except that the current value in the</H2><PRE>
accumulation buffer is not used in the  calculation  of  the  new
value.  That is, the R, G, B, and A values from the currently se­
lected buffer  are  divided  by  $2  sup  n^-^1$,  multiplied  by
_param2, and then stored in the corresponding accumulation buffer

</PRE>
<H2>cell, overwriting the current value.  GL_ADD Adds _param2 to each</H2><PRE>

</PRE>
<H2>R,  G,  B,  and A in the accumulation buffer.  GL_MULT Multiplies</H2><PRE>
each R, G, B, and A in the accumulation buffer by _param2 and re­
turns  the  scaled  component  to  its corresponding accumulation

</PRE>
<H2>buffer location.  GL_RETURN Transfers accumulation buffer  values</H2><PRE>
to  the  color  buffer or buffers currently selected for writing.
Each R, G, B, and A component is multiplied by _param2, then mul­
tiplied  by  $2 sup n^-^1$, clamped to the range [0,$~2 sup n^-^1
$], and stored in the corresponding display buffer cell.  The on­
ly fragment operations that are applied to this transfer are pix­
el ownership, scissor, dithering, and color writemasks.  To clear
the accumulation buffer, call _cmnd(ClearAccum) with R, G, B, and
A values to set it to, then call _cmnd(Clear) with the  accumula­
tion  buffer enabled.  Only pixels within the current scissor box

</PRE>
<H2>are updated by a _cmnd operation.  GL_INVALID_ENUM  is  generated</H2><PRE>

</PRE>
<H2>if  _param1  is  not  an accepted value.  GL_INVALID_OPERATION is</H2><PRE>




















































@


1.1.1.1
log
@win32-x11 source tree update March 26, 2001
@
text
@@
