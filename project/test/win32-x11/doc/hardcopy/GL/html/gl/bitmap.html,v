head	1.2;
access;
symbols
	win32-x11-2001-03-26:1.1.1.1 SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2001.06.03.20.47.06;	author ssiddiqi;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.25.19.36.50;	author ssiddiqi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.03.25.19.36.50;	author ssiddiqi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Win32-X11 update sources check in, June 3, 2001 - ssiddiqi
@
text
@<HTML>
<BODY>
<PRE>
<!-- Manpage converted by man2html 3.0.1 -->
</PRE>
<HR>
<ADDRESS>
Man(1) output converted with
<a href="http://www.oac.uci.edu/indiv/ehood/man2html.html">man2html</a>
</ADDRESS>
</BODY>
</HTML>
@


1.1
log
@Initial revision
@
text
@a4 68
drawn.  _phead(_param7) Specifies the address of the  bitmap  im­
age.   A bitmap is a binary image.  When drawn, the bitmap is po­
sitioned relative to  the  current  raster  position,  and  frame
buffer  pixels corresponding to 1's in the bitmap are written us­
ing the current raster color or index.  Frame buffer pixels  cor­
responding  to  0's  in the bitmap are not modified.  _cmnd takes
seven arguments.  The first pair specifies the width  and  height
of  the  bitmap image.  The second pair specifies the location of
the bitmap origin relative to the lower left corner of the bitmap
image.   The third pair of arguments specifies <I>x</I> and <I>y</I> offsets to
be added to the current raster position after the bitmap has been
drawn.   The  final argument is a pointer to the bitmap image it­
self.  The bitmap image is interpreted like image  data  for  the
_cmnd(DrawPixels) command, with _param1 and _param2 corresponding
to the width and height arguments of that command, and with  <I>type</I>

</PRE>
<H2>set  to GL_BITMAP and format set to GL_COLOR_INDEX.  Modes speci­</H2><PRE>
fied using _cmnd(PixelStore) affect the interpretation of  bitmap
image  data;  modes  specified using _cmnd(PixelTransfer) do not.
If the current raster position  is  invalid,  _cmnd  is  ignored.
Otherwise,  the  lower  left  corner of the bitmap image is posi­
tioned at the window coordinates

           $ x sub w ~=~ | ~ x sub r ~-~ x sub o ~ | $

           $ y sub w ~=~ | ~ y sub r ~-~ y sub o ~ | $

where $ ( x sub r , y sub r ) $ is the raster position and $ (  x
sub  o  ,  y  sub o ) $ is the bitmap origin.  Fragments are then
generated for each pixel corresponding to a 1 (one) in the bitmap
image.   These fragments are generated using the current raster <I>z</I>
coordinate, color or color index, and current raster texture  co­
ordinates.  They are then treated just as if they had been gener­
ated by a point, line, or polygon, including texture mapping,
fogging, and all per-fragment operations such as alpha and  depth
testing.   After  the  bitmap has been drawn, the <I>x</I> and <I>y</I> coordi­
nates of the current raster position are offset  by  _param5  and
_param6.   No  change  is made to the <I>z</I> coordinate of the current
raster position, or to the current raster color, texture  coordi­
nates,  or  index.   To  set  a valid raster position outside the
viewport, first set a valid raster position inside the  viewport,
then  call  _cmnd(Bitmap)  with NULL as the _param7 parameter and
with _param5 and _param6 set to the offsets of the new raster po­
sition. This technique is useful when panning an image around the

</PRE>
<H2>viewport.  GL_INVALID_VALUE is generated if _param1 or _param2 is</H2><PRE>

</PRE>
<H2>negative.  GL_INVALID_OPERATION is generated if _cmnd is executed</H2><PRE>
between the execution of _cmnd(Begin) and the corresponding  exe­
cution     of     _cmnd(End).      _cmnd(Get)    with    argument

</PRE>
<H2>GL_CURRENT_RASTER_POSITION</H2><PRE>

</PRE>
<H2>_cmnd(Get) with argument GL_CURRENT_RASTER_COLOR</H2><PRE>

</PRE>
<H2>_cmnd(Get) with argument GL_CURRENT_RASTER_DISTANCE</H2><PRE>

</PRE>
<H2>_cmnd(Get) with argument GL_CURRENT_RASTER_INDEX</H2><PRE>

</PRE>
<H2>_cmnd(Get) with argument GL_CURRENT_RASTER_TEXTURE_COORDS</H2><PRE>
@


1.1.1.1
log
@win32-x11 source tree update March 26, 2001
@
text
@@
