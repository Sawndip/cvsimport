head	1.2;
access;
symbols
	win32-x11-2001-03-26:1.1.1.1 SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2001.06.03.20.47.06;	author ssiddiqi;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.25.19.36.50;	author ssiddiqi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.03.25.19.36.50;	author ssiddiqi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Win32-X11 update sources check in, June 3, 2001 - ssiddiqi
@
text
@<HTML>
<BODY>
<PRE>
<!-- Manpage converted by man2html 3.0.1 -->
</PRE>
<HR>
<ADDRESS>
Man(1) output converted with
<a href="http://www.oac.uci.edu/indiv/ehood/man2html.html">man2html</a>
</ADDRESS>
</BODY>
</HTML>
@


1.1
log
@Initial revision
@
text
@a4 124
_names(End) _cmnd(Begin) and _cmnd(End) delimit the vertices that
define  a  primitive or a group of like primitives.  _cmnd(Begin)
accepts a single argument that specifies in which of ten ways the
vertices  are interpreted.  Taking $n$ as an integer count start­
ing at one, and $N$ as the total number  of  vertices  specified,

</PRE>
<H2>the  interpretations are as follows: GL_POINTS Treats each vertex</H2><PRE>
as a single point.  Vertex $n$ defines point $n$.  $N$ points are

</PRE>
<H2>drawn.   GL_LINES  Treats each pair of vertices as an independent</H2><PRE>
line segment.  Vertices $2n^-^1$ and $2n$ define line $n$.  $N/2$

</PRE>
<H2>lines  are  drawn.  GL_LINE_STRIP Draws a connected group of line</H2><PRE>
segments from the first vertex to the  last.   Vertices  $n$  and

</PRE>
<H2>$n~+~1$  define line $n$.  $N^-^1$ lines are drawn.  GL_LINE_LOOP</H2><PRE>
Draws a connected group of line segments from the first vertex to
the  last,  then back to the first.  Vertices $n$ and $n~+~1$ de­
fine line $n$.  The last line, however, is  defined  by  vertices

</PRE>
<H2>$N$  and  $1$.   $N$  lines  are drawn.  GL_TRIANGLES Treats each</H2><PRE>
triplet  of  vertices  as  an  independent  triangle.    Vertices
$3n^-^2$,  $3n^-^1$,  and $3n$ define triangle $n$.  $N/3$ trian­

</PRE>
<H2>gles are drawn.  GL_TRIANGLE_STRIP Draws  a  connected  group  of</H2><PRE>
triangles.  One triangle is defined for each vertex presented af­
ter the first two vertices.  For odd $n$, vertices $n$,  $n~+~1$,
and $n~+~2$ define triangle $n$.  For even $n$, vertices $n~+~1$,
$n$, and $n~+~2$ define  triangle  $n$.   $N^-^2$  triangles  are

</PRE>
<H2>drawn.   GL_TRIANGLE_FAN  Draws  a  connected group of triangles.</H2><PRE>
One triangle is defined for each vertex presented after the first
two vertices.  Vertices $1$, $n~+~1$, and $n~+~2$ define triangle

</PRE>
<H2>$n$.  $N^-^2$ triangles are drawn.  GL_QUADS Treats each group of</H2><PRE>
four   vertices   as   an  independent  quadrilateral.   Vertices
$4n^-^3$, $4n^-^2$, $4n^-^1$, and $4n$ define quadrilateral  $n$.

</PRE>
<H2>$N/4$  quadrilaterals are drawn.  GL_QUAD_STRIP Draws a connected</H2><PRE>
group of quadrilaterals.  One quadrilateral is defined  for  each
pair  of  vertices  presented  after  the  first  pair.  Vertices
$2n^-^1$, $2n$, $2n~+~2$, and $2n~+~1$ define quadrilateral  $n$.
$N/2^-^1$ quadrilaterals are drawn.  Note that the order in which
vertices are used to construct a quadrilateral from strip data is

</PRE>
<H2>different from that used with independent data.  GL_POLYGON Draws</H2><PRE>
a single, convex polygon.  Vertices $1$ through $N$  define  this
polygon.   Only  a subset of GL commands can be used between _cm­
nd(Begin) and _cmnd(End).  The commands are  _cmnd(Vertex),  _cm­
nd(Color),  _cmnd(Index),  _cmnd(Normal),  _cmnd(TexCoord),  _cm­
nd(EvalCoord), _cmnd(EvalPoint), _cmnd(ArrayElement), _cmnd(Mate­
rial),  and  _cmnd(EdgeFlag).  Also, it is acceptable to use _cm­
nd(CallList) or _cmnd(CallLists) to execute  display  lists  that
include  only the preceding commands.  If any other GL command is
executed between _cmnd(Begin) and _cmnd(End), the error  flag  is
set  and  the command is ignored.  Regardless of the value chosen
for <B>_param1(1)</B>, there is no limit to the number of vertices  that
can  be defined between _cmnd(Begin) and _cmnd(End).  Lines, tri­
angles, quadrilaterals, and polygons that are incompletely speci­
fied are not drawn.  Incomplete specification results when either
too few vertices are provided to specify even a single  primitive
or  when  an incorrect multiple of vertices is specified. The in­
or _cmnd(CallLists) is executed between  the  execution  of  _cm­
nd(Begin)  and the corresponding execution _cmnd(End).  Execution
of  _cmnd(EnableClientState),   _cmnd(DisableClientState),   _cm­
nd(EdgeFlagPointer), _cmnd(TexCoordPointer), _cmnd(ColorPointer),
_cmnd(IndexPointer), _cmnd(NormalPointer),
_cmnd(VertexPointer), _cmnd(InterleavedArrays),  or  _cmnd(Pixel­
Store) is not allowed after a call to _cmnd(Begin) and before the
corresponding call to _cmnd(End), but an error may or may not  be
generated.    _cmnd(ArrayElement),  _cmnd(CallList),  _cmnd(Call­
Lists), _cmnd(Color), _cmnd(EdgeFlag), _cmnd(EvalCoord),
_cmnd(EvalPoint), _cmnd(Index),  _cmnd(Material),  _cmnd(Normal),
_cmnd(TexCoord), _cmnd(Vertex)








































@


1.1.1.1
log
@win32-x11 source tree update March 26, 2001
@
text
@@
