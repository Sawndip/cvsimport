head	1.2;
access;
symbols
	win32-x11-2001-03-26:1.1.1.1 SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2001.06.03.20.47.07;	author ssiddiqi;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.25.19.36.50;	author ssiddiqi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.03.25.19.36.50;	author ssiddiqi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Win32-X11 update sources check in, June 3, 2001 - ssiddiqi
@
text
@<HTML>
<BODY>
<PRE>
<!-- Manpage converted by man2html 3.0.1 -->
</PRE>
<HR>
<ADDRESS>
Man(1) output converted with
<a href="http://www.oac.uci.edu/indiv/ehood/man2html.html">man2html</a>
</ADDRESS>
</BODY>
</HTML>
@


1.1
log
@Initial revision
@
text
@a4 174
in the texture array.  _phead(_param5) Specifies the width of the
texture  subimage.   _phead(_param6)  Specifies the height of the
texture subimage.  _phead(_param7) Specifies the   of  the  pixel
data.     The    following    symbolic   values   are   accepted:

</PRE>
<H2>GL_COLOR_INDEX,  GL_RED,  GL_GREEN,  GL_BLUE,  GL_ALPHA,  GL_RGB,</H2><PRE>

</PRE>
<H2>GL_BGR,  GL_RGBA,  GL_BGRA, GL_LUMINANCE, and GL_LUMINANCE_ALPHA.</H2><PRE>
_phead(_param8) Specifies the data type of the pixel  data.   The

</PRE>
<H2>following   symbolic   values   are  accepted:  GL_UNSIGNED_BYTE,</H2><PRE>

</PRE>
<H2>GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT,</H2><PRE>

</PRE>
<H2>GL_INT,             GL_FLOAT,             GL_UNSIGNED_BYTE_3_3_2,</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_BYTE_2_3_3_REV,              GL_UNSIGNED_SHORT_5_6_5,</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_SHORT_5_6_5_REV,           GL_UNSIGNED_SHORT_4_4_4_4,</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_SHORT_4_4_4_4_REV,         GL_UNSIGNED_SHORT_5_5_5_1,</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_SHORT_1_5_5_5_REV,           GL_UNSIGNED_INT_8_8_8_8,</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_INT_8_8_8_8_REV,   GL_UNSIGNED_INT_10_10_10_2,    and</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_INT_2_10_10_10_REV.    _phead(_param9)   Specifies  a</H2><PRE>
pointer to the image data in memory.  Texturing maps a portion of
a specified texture image onto each graphical primitive for which
texturing is enabled.  To enable and disable two-dimensional tex­
turing,  call  _cmnd(Enable)  and  _cmnd(Disable)  with  argument

</PRE>
<H2>GL_TEXTURE_2D.  _cmnd redefines a contiguous subregion of an  ex­</H2><PRE>
isting  two-dimensional  texture image.  The texels referenced by
_param9 replace the portion of the existing texture array with  x
indices _param3 and $_eqnparam3~+~_eqnparam5~-~1$, inclusive, and
y indices _param4 and  $_eqnparam4~+~_eqnparam6~-~1$,  inclusive.
This  region  may not include any texels outside the range of the
texture array as it was originally specified.  It is not an error
to  specify  a  subtexture  with zero width or height, but such a
specification has no effect.  _cmnd is available only if  the  GL
version  is 1.1 or greater.  Texturing has no effect in color in­
dex mode.  _cmnd(PixelStore) and _cmnd(PixelTransfer)  modes  af­
fect texture images in exactly the way they affect _cmnd(DrawPix­

</PRE>
<H2>els).     Formats    GL_BGR,    and     GL_BGRA     and     types</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_BYTE_3_3_2,               GL_UNSIGNED_BYTE_2_3_3_REV,</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_SHORT_5_6_5,             GL_UNSIGNED_SHORT_5_6_5_REV,</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_SHORT_4_4_4_4,         GL_UNSIGNED_SHORT_4_4_4_4_REV,</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_SHORT_5_5_5_1,         GL_UNSIGNED_SHORT_1_5_5_5_REV,</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_INT_8_8_8_8,             GL_UNSIGNED_INT_8_8_8_8_REV,</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_INT_10_10_10_2,  and   GL_UNSIGNED_INT_2_10_10_10_REV</H2><PRE>
are available only if the GL version is 1.2 or greater.  When the

</PRE>
<H2>GL_ARB_multitexture extension is  supported,  _cmnd  specifies  a</H2><PRE>
two-dimensional  sub texture for the current texture unit, speci­

</PRE>
<H2>fied with _cmnd(ActiveTextureARB).  When the  GL_ARB_imaging  ex­</H2><PRE>
tension  is  supported,  the RGBA components specified in _param9
may be processed by the imaging pipeline.  See  _cmnd(TexImage1D)

</PRE>
<H2>for specific details.  GL_INVALID_ENUM is generated if _param1 is</H2><PRE>

</PRE>
<H2>not GL_TEXTURE_2D.  GL_INVALID_OPERATION is generated if the tex­</H2><PRE>
ture  array  has not been defined by a previous _cmnd(TexImage2D)

</PRE>
<H2>operation.  GL_INVALID_VALUE is generated if _param2 is less than</H2><PRE>

</PRE>
<H2>0.   GL_INVALID_VALUE may be generated if _param2 is greater than</H2><PRE>
$log  sub  2$<I>max</I>,  where   <I>max</I>   is   the   returned   value   of

</PRE>
<H2>GL_MAX_TEXTURE_SIZE.   GL_INVALID_VALUE  is  generated  if $_eqn­</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_SHORT_5_6_5,   or   GL_UNSIGNED_SHORT_5_6_5_REV   and</H2><PRE>

</PRE>
<H2>_param7 is not  GL_RGB.   GL_INVALID_OPERATION  is  generated  if</H2><PRE>

</PRE>
<H2>_param8       is      one      of      GL_UNSIGNED_SHORT_4_4_4_4,</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_SHORT_4_4_4_4_REV,         GL_UNSIGNED_SHORT_5_5_5_1,</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_SHORT_1_5_5_5_REV,           GL_UNSIGNED_INT_8_8_8_8,</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_INT_8_8_8_8_REV,    GL_UNSIGNED_INT_10_10_10_2,    or</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_INT_2_10_10_10_REV and _param7 is neither GL_RGBA nor</H2><PRE>

</PRE>
<H2>GL_BGRA.  _cmnd(GetTexImage)</H2><PRE>

</PRE>
<H2>_cmnd(IsEnabled)  with  argument  GL_TEXTURE_2D  _cmnd(ActiveTex­</H2><PRE>
tureARB),   _cmnd(CopyTexImage1D),   _cmnd(CopyTexImage2D),  _cm­
nd(CopyTexSubImage1D),  _cmnd(CopyTexSubImage2D),  _cmnd(CopyTex­
SubImage3D),  _cmnd(DrawPixels),  _cmnd(PixelStore), _cmnd(Pixel­
Transfer), _cmnd(TexEnv), _cmnd(TexGen), _cmnd(TexImage1D),  _cm­
nd(TexImage2D),   _cmnd(TexImage3D),  _cmnd(TexSubImage1D),  _cm­
nd(TexSubImage3D), _cmnd(TexParameter)





































@


1.1.1.1
log
@win32-x11 source tree update March 26, 2001
@
text
@@
