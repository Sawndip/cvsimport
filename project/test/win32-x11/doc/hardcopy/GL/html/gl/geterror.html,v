head	1.2;
access;
symbols
	win32-x11-2001-03-26:1.1.1.1 SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2001.06.03.20.47.06;	author ssiddiqi;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.25.19.36.50;	author ssiddiqi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.03.25.19.36.50;	author ssiddiqi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Win32-X11 update sources check in, June 3, 2001 - ssiddiqi
@
text
@<HTML>
<BODY>
<PRE>
<!-- Manpage converted by man2html 3.0.1 -->
</PRE>
<HR>
<ADDRESS>
Man(1) output converted with
<a href="http://www.oac.uci.edu/indiv/ehood/man2html.html">man2html</a>
</ADDRESS>
</BODY>
</HTML>
@


1.1
log
@Initial revision
@
text
@a4 80
since the last call to _cmnd, or since the  GL  was  initialized.
To  allow  for  distributed implementations, there may be several
error flags.  If any single error flag has recorded an error, the
value  of  that  flag  is  returned  and  that  flag  is reset to

</PRE>
<H2>GL_NO_ERROR when _cmnd is called.  If  more  than  one  flag  has</H2><PRE>
recorded  an  error,  _cmnd returns and clears an arbitrary error
flag value.  Thus, _cmnd should always be called in a loop, until

</PRE>
<H2>it returns GL_NO_ERROR, if all error flags are to be reset.  Ini­</H2><PRE>

</PRE>
<H2>tially, all error flags are set to  GL_NO_ERROR.   The  following</H2><PRE>

</PRE>
<H2>errors  are  currently  defined:  GL_NO_ERROR  No  error has been</H2><PRE>
recorded.  The value of this symbolic constant is  guaranteed  to

</PRE>
<H2>be  0.  GL_INVALID_ENUM An unacceptable value is specified for an</H2><PRE>
enumerated argument.  The offending command is ignored,  and  has
no   other   side   effect   than   to   set   the   error  flag.

</PRE>
<H2>GL_INVALID_VALUE A numeric argument is out of range.  The offend­</H2><PRE>
ing  command is ignored, and has no other side effect than to set

</PRE>
<H2>the error flag.  GL_INVALID_OPERATION The specified operation  is</H2><PRE>
not  allowed  in the current state.  The offending command is ig­
nored, and has no other side effect than to set the  error  flag.

</PRE>
<H2>GL_STACK_OVERFLOW This command would cause a stack overflow.  The</H2><PRE>
offending command is ignored, and has no other side  effect  than

</PRE>
<H2>to  set  the  error  flag.  GL_STACK_UNDERFLOW This command would</H2><PRE>
cause a stack underflow.  The offending command is  ignored,  and
has   no   other   side  effect  than  to  set  the  error  flag.

</PRE>
<H2>GL_OUT_OF_MEMORY There is not enough memory left to  execute  the</H2><PRE>
command.   The state of the GL is undefined, except for the state
of   the   error   flags,   after   this   error   is   recorded.

</PRE>
<H2>GL_TABLE_TOO_LARGE  The  specified  table exceeds the implementa­</H2><PRE>
tion's maximum supported table size.  The  offending  command  is
ignored, and has no other side effect than to set the error flag.
When an error flag is set, results of a GL  operation  are  unde­

</PRE>
<H2>fined only if GL_OUT_OF_MEMORY has occurred.  In all other cases,</H2><PRE>
the command generating the error is ignored and has no effect  on
the GL state or frame buffer contents.  If the generating command
returns a value, it returns 0.  If _cmnd itself generates an  er­

</PRE>
<H2>ror,  it returns 0.  GL_TABLE_TOO_LARGE was introduced in GL ver­</H2><PRE>

</PRE>
<H2>sion 1.2.  GL_INVALID_OPERATION is generated if _cmnd is executed</H2><PRE>
between  the execution of _cmnd(Begin) and the corresponding exe­
cution of _cmnd(End).  In this case _cmnd returns 0.













@


1.1.1.1
log
@win32-x11 source tree update March 26, 2001
@
text
@@
