head	1.2;
access;
symbols
	win32-x11-2001-03-26:1.1.1.1 SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2001.06.03.20.47.07;	author ssiddiqi;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.25.19.36.50;	author ssiddiqi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.03.25.19.36.50;	author ssiddiqi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Win32-X11 update sources check in, June 3, 2001 - ssiddiqi
@
text
@<HTML>
<BODY>
<PRE>
<!-- Manpage converted by man2html 3.0.1 -->
</PRE>
<HR>
<ADDRESS>
Man(1) output converted with
<a href="http://www.oac.uci.edu/indiv/ehood/man2html.html">man2html</a>
</ADDRESS>
</BODY>
</HTML>
@


1.1
log
@Initial revision
@
text
@a4 212
Specify a linear mapping of $u$, as  presented  to  _cmnd(EvalCo­
ord2), to $u hat$, one of the two variables that are evaluated by
the equations specified by this command. Initially, _param2 is  0
and _param3 is 1.  _phead(_param4) Specifies the number of floats
or doubles between the beginning of control point $R sub ij$  and
the beginning of control point $R sub { (i+1) j }$, where $i$ and
$j$ are the $u$ and  $v$  control  point  indices,  respectively.
This  allows  control  points  to  be  embedded in arbitrary data
structures.  The only constraint is that the values for a partic­
ular  control  point must occupy contiguous memory locations. The
initial value of _param4 is 0.  _phead(_param5) Specifies the di­
mension of the control point array in the $u$ axis.  Must be pos­
itive. The initial value is 1.  _phead(_param6 _param7) Specify a
linear  mapping  of $v$, as presented to _cmnd(EvalCoord2), to $v
hat$, one of the two variables that are evaluated  by  the  equa­
tions  specified  by  this  command.  Initially, _param6 is 0 and
_param7 is 1.  _phead(_param8) Specifies the number of floats  or
doubles between the beginning of control point $R sub ij$ and the
beginning of control point $R sub { i (j+1) }$, where $i$ and $j$
are  the  $u$  and $v$ control point indices, respectively.  This
allows control points to be embedded  in  arbitrary  data  struc­
tures.   The  only constraint is that the values for a particular
control point must occupy contiguous memory locations.  The  ini­
tial value of _param8 is 0.  _phead(_param9) Specifies the dimen­
sion of the control point array in the $v$ axis.  Must  be  posi­
tive.  The  initial  value  is  1.   _phead(_param10) Specifies a
pointer to the array of control points.  Evaluators provide a way
to  use polynomial or rational polynomial mapping to produce ver­
tices, normals, texture coordinates, and colors.  The values pro­
duced  by  an  evaluator are sent on to further stages of GL pro­
cessing just as if they had been presented  using  _cmnd(Vertex),
_cmnd(Normal), _cmnd(TexCoord), and _cmnd(Color) commands, except
that the generated values do not update the current normal,  tex­
ture coordinates, or color.  All polynomial or rational polynomi­
al splines of any degree (up to the maximum degree  supported  by
the  GL implementation) can be described using evaluators.  These
include almost all surfaces used in computer graphics,  including
B-spline  surfaces,  NURBS  surfaces, Bezier surfaces, and so on.
Evaluators define surfaces based on bivariate Bernstein polynomi­
als.  Define $p ( u hat , v hat ) $ as

                    p ( u hat , v hat ) ~~=~~
 down 30 {{size 18 {sum}} from {size 8 {i~=~0}} to {size 9 {n}} }
~
 {{size 18 {sum}} from {size 8 {j~=~0}} to {size 9 {m}} } ~
 up 15 { B sub i sup n ( u hat ) ~ B sub j sup m ( v hat  )  ~  R
sub ij }

where $R sub ij$ is a control point, $B sub i sup n ( u hat )$ is
the $i$th Bernstein polynomial of degree
$n$ (_param5 = $n ~+~ 1$)

_cmnd is used to define the basis and to  specify  what  kind  of
values are produced.  Once defined, a map can be enabled and dis­
abled by calling _cmnd(Enable) and _cmnd(Disable)  with  the  map
name,  one  of  the nine predefined values for _param1, described
below.  When _cmnd(EvalCoord2) presents values $u$ and  $v$,  the
bivariate  Bernstein  polynomials are evaluated using $u hat$ and
$v hat$, where

$u hat ~~=~~ {u ~-~ _eqnparam2} over {_eqnparam3 ~-~ _eqnparam2}$

$v hat ~~=~~ {v ~-~ _eqnparam6} over {_eqnparam7 ~-~ _eqnparam6}$

_param1 is a symbolic constant that indicates what kind  of  con­
trol points are provided in _param10, and what output is generat­
ed when the map is evaluated.  It can assume one of  nine  prede­

</PRE>
<H2>fined values: GL_MAP2_VERTEX_3 Each control point is three float­</H2><PRE>
ing-point values representing $x$, $y$, and $z$.   Internal  _cm­
nd(Vertex3)  commands  are  generated  when the map is evaluated.

</PRE>
<H2>GL_MAP2_VERTEX_4 Each control point is four floating-point values</H2><PRE>
representing  $x$,  $y$,  $z$,  and $w$.  Internal _cmnd(Vertex4)

</PRE>
<H2>commands are generated when the map is evaluated.   GL_MAP2_INDEX</H2><PRE>
Each  control point is a single floating-point value representing
a color index.  Internal _cmnd(Index) commands are generated when
the  map  is  evaluated but the current index is not updated with

</PRE>
<H2>the value of these _cmnd(Index) commands.   GL_MAP2_COLOR_4  Each</H2><PRE>
control  point  is  four  floating-point values representing red,
green, blue, and alpha.  Internal _cmnd(Color4) commands are gen­
erated when the map is evaluated but the current color is not up­
dated  with  the   value   of   these   _cmnd(Color4)   commands.

</PRE>
<H2>GL_MAP2_NORMAL  Each control point is three floating-point values</H2><PRE>
representing the $x$, $y$, and $z$ components of a normal vector.
Internal  _cmnd(Normal)  commands  are  generated when the map is
evaluated but the current normal is not updated with the value of

</PRE>
<H2>these  _cmnd(Normal) commands.  GL_MAP2_TEXTURE_COORD_1 Each con­</H2><PRE>
trol point is a single floating-point value representing the  $s$
texture coordinate.  Internal
_cmnd(TexCoord1) commands are generated when the map is evaluated
but the current texture coordinates are not updated with the val­

</PRE>
<H2>ue  of  these  _cmnd(TexCoord) commands.  GL_MAP2_TEXTURE_COORD_2</H2><PRE>
Each control point is two floating-point values representing  the
$s$ and $t$ texture coordinates.  Internal
_cmnd(TexCoord2) commands are generated when the map is evaluated
but the current texture coordinates are not updated with the val­

</PRE>
<H2>ue  of  these  _cmnd(TexCoord) commands.  GL_MAP2_TEXTURE_COORD_3</H2><PRE>
Each control point is three  floating-point  values  representing
the $s$, $t$, and $r$ texture coordinates.  Internal _cmnd(TexCo­
ord3) commands are generated when the map is  evaluated  but  the
current  texture  coordinates  are  not updated with the value of

</PRE>
<H2>these  _cmnd(TexCoord)  commands.   GL_MAP2_TEXTURE_COORD_4  Each</H2><PRE>
control point is four floating-point values representing the $s$,
$t$, $r$, and $q$ texture coordinates.  Internal
_cmnd(TexCoord4) commands are generated when the map is evaluated
tents  of  _param10  were  copied  by _cmnd before _cmnd returns.
Changes to the contents of _param10 have no effect after _cmnd is

</PRE>
<H2>called.   Initially, GL_AUTO_NORMAL is enabled. If GL_AUTO_NORMAL</H2><PRE>
is  enabled,   normal   vectors   are   generated   when   either

</PRE>
<H2>GL_MAP2_VERTEX_3  or  GL_MAP2_VERTEX_4  is  used to generate ver­</H2><PRE>

</PRE>
<H2>tices.  GL_INVALID_ENUM is generated if _param1 is not an accept­</H2><PRE>

</PRE>
<H2>ed  value.   GL_INVALID_VALUE is generated if _param2 is equal to</H2><PRE>

</PRE>
<H2>_param3, or if _param6 is equal to _param7.  GL_INVALID_VALUE  is</H2><PRE>
generated if either _param4 or _param8 is less than the number of

</PRE>
<H2>values in a control point.  GL_INVALID_VALUE is generated if  ei­</H2><PRE>
ther _param5 or _param9 is less than 1 or greater than the return

</PRE>
<H2>value of GL_MAX_EVAL_ORDER.  GL_INVALID_OPERATION is generated if</H2><PRE>
_cmnd  is  executed between the execution of _cmnd(Begin) and the
corresponding    execution    of    _cmnd(End).      When     the

</PRE>
<H2>GL_ARB_multitexture  extension is supported, GL_INVALID_OPERATION</H2><PRE>
is  generated   if   _cmnd   is   called   and   the   value   of

</PRE>
<H2>GL_ACTIVE_TEXTURE_ARB is not GL_TEXTURE0_ARB.  _cmnd(GetMap)</H2><PRE>

</PRE>
<H2>_cmnd(Get) with argument GL_MAX_EVAL_ORDER</H2><PRE>

</PRE>
<H2>_cmnd(IsEnabled) with argument GL_MAP2_VERTEX_3</H2><PRE>

</PRE>
<H2>_cmnd(IsEnabled) with argument GL_MAP2_VERTEX_4</H2><PRE>

</PRE>
<H2>_cmnd(IsEnabled) with argument GL_MAP2_INDEX</H2><PRE>

</PRE>
<H2>_cmnd(IsEnabled) with argument GL_MAP2_COLOR_4</H2><PRE>

</PRE>
<H2>_cmnd(IsEnabled) with argument GL_MAP2_NORMAL</H2><PRE>

</PRE>
<H2>_cmnd(IsEnabled) with argument GL_MAP2_TEXTURE_COORD_1</H2><PRE>

</PRE>
<H2>_cmnd(IsEnabled) with argument GL_MAP2_TEXTURE_COORD_2</H2><PRE>

</PRE>
<H2>_cmnd(IsEnabled) with argument GL_MAP2_TEXTURE_COORD_3</H2><PRE>

</PRE>
<H2>_cmnd(IsEnabled)  with argument GL_MAP2_TEXTURE_COORD_4 _cmnd(Be­</H2><PRE>
gin),   _cmnd(Color),   _cmnd(Enable),   _cmnd(EvalCoord),   _cm­
nd(EvalMesh), _cmnd(EvalPoint), _cmnd(Map1), _cmnd(MapGrid), _cm­
nd(Normal), _cmnd(TexCoord), _cmnd(Vertex)






















@


1.1.1.1
log
@win32-x11 source tree update March 26, 2001
@
text
@@
