head	1.2;
access;
symbols
	win32-x11-2001-03-26:1.1.1.1 SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2001.06.03.20.47.06;	author ssiddiqi;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.25.19.36.50;	author ssiddiqi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.03.25.19.36.50;	author ssiddiqi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Win32-X11 update sources check in, June 3, 2001 - ssiddiqi
@
text
@<HTML>
<BODY>
<PRE>
<!-- Manpage converted by man2html 3.0.1 -->
</PRE>
<HR>
<ADDRESS>
Man(1) output converted with
<a href="http://www.oac.uci.edu/indiv/ehood/man2html.html">man2html</a>
</ADDRESS>
</BODY>
</HTML>
@


1.1
log
@Initial revision
@
text
@a4 78
in the y direction  within  the  texture  array.   _phead(_param5
_param6)  Specify the window coordinates of the lower left corner
of   the   rectangular   region   of   pixels   to   be   copied.
_phead(_param7)  Specifies  the  width  of  the texture subimage.
_phead(_param8) Specifies the height  of  the  texture  subimage.
_cmnd replaces a rectangular portion of a two-dimensional texture

</PRE>
<H2>image with pixels from the current  GL_READ_BUFFER  (rather  than</H2><PRE>
from  main memory, as is the case for _cmnd(TexSubImage2D)).  The
screen-aligned  pixel  rectangle  with  lower  left   corner   at
(_param5, _param6)  and with width _param7 and height _param8 re­
places the portion of the texture array with  x  indices  _param3
through   _param3$~+~$_param7$~-~$1,  inclusive,  and  y  indices
_param4  through  _param4$~+~$_param8$~-~$1,  inclusive,  at  the
mipmap  level  specified by _param2.  The pixels in the rectangle
are processed exactly as if _cmnd(CopyPixels)  had  been  called,
but  the  process  stops  just  before final conversion.  At this
point, all pixel component values are clamped to the range [0, 1]
and  then converted to the texture's internal  for storage in the
texel array.  The destination rectangle in the texture array  may
not include any texels outside the texture array as it was origi­
nally specified.  It is not an error to specify a subtexture with
zero width or height, but such a specification has no effect.  If
any of the pixels within the specified rectangle of  the  current

</PRE>
<H2>GL_READ_BUFFER  are  outside  the read window associated with the</H2><PRE>
current rendering context, then the  values  obtained  for  those
pixels  are  undefined.  No change is made to the <I>internalformat</I>,
<I>width</I>, <I>height</I>, or <I>border</I> parameters of the specified texture  ar­
ray or to texel values outside the specified subregion.  _cmnd is
available only if the GL version is 1.1  or  greater.   Texturing
has  no  effect  in color index mode.  _cmnd(PixelStore) and _cm­
nd(PixelTransfer) modes affect texture images in exactly the  way

</PRE>
<H2>they affect _cmnd(DrawPixels).  When the GL_ARB_imaging extension</H2><PRE>
is supported, the RGBA components read from the  framebuffer  may
be  processed by the imaging pipeline.  See _cmnd(TexImage1D) for

</PRE>
<H2>specific details.  GL_INVALID_ENUM is generated if _param1 is not</H2><PRE>

</PRE>
<H2>GL_TEXTURE_2D.   GL_INVALID_OPERATION is generated if the texture</H2><PRE>
array has not been defined by  a  previous  _cmnd(TexImage2D)  or

</PRE>
<H2>_cmnd(CopyTexImage2D)  operation.   GL_INVALID_VALUE is generated</H2><PRE>

</PRE>
<H2>if _param2 is less than 0.  GL_INVALID_VALUE may be generated  if</H2><PRE>
_param2  is  greater than $log sub 2 max$, where $max$ is the re­

</PRE>
<H2>turned value of GL_MAX_TEXTURE_SIZE.  GL_INVALID_VALUE is  gener­</H2><PRE>
ated  if  _param5$ ~&lt;~ ~-b$ or if _param6$ ~&lt;~ ~-b$, where $b$ is

</PRE>
<H2>the border width of the texture array.  GL_INVALID_VALUE is  gen­</H2><PRE>
erated   if   $_eqnparam3  ~&lt;~  -b$,  (_param3$~+~$_param7)$~&gt;~(w
~-~b)$, _param4$~&lt;~ ~-b$, or (_param4$~+~$_param8)$~&gt;~(h  ~-~b)$,

</PRE>
<H2>where $w$ is the GL_TEXTURE_WIDTH, $h$ is the  GL_TEXTURE_HEIGHT,</H2><PRE>

</PRE>
<H2>and $b$ is the GL_TEXTURE_BORDER of the texture image being modi­</H2><PRE>
fied.   Note  that  $w$  and  $h$ include twice the border width.

</PRE>
<H2>GL_INVALID_OPERATION is generated if _cmnd  is  executed  between</H2><PRE>
the  execution of _cmnd(Begin) and the corresponding execution of
_cmnd(End).  _cmnd(GetTexImage)

</PRE>
<H2>_cmnd(IsEnabled) with argument  GL_TEXTURE_2D  _cmnd(CopyPixels),</H2><PRE>
@


1.1.1.1
log
@win32-x11 source tree update March 26, 2001
@
text
@@
