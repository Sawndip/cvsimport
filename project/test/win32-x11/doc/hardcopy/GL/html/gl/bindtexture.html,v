head	1.2;
access;
symbols
	win32-x11-2001-03-26:1.1.1.1 SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2001.06.03.20.47.06;	author ssiddiqi;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.25.19.36.50;	author ssiddiqi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.03.25.19.36.50;	author ssiddiqi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Win32-X11 update sources check in, June 3, 2001 - ssiddiqi
@
text
@<HTML>
<BODY>
<PRE>
<!-- Manpage converted by man2html 3.0.1 -->
</PRE>
<HR>
<ADDRESS>
Man(1) output converted with
<a href="http://www.oac.uci.edu/indiv/ehood/man2html.html">man2html</a>
</ADDRESS>
</BODY>
</HTML>
@


1.1
log
@Initial revision
@
text
@a4 72
_param2  set to the name of the newtexture binds the texture name
to the target.  When a texture is bound to a target, the previous
binding  for  that target is automatically broken.  Texture names
are unsigned integers. The value zero is  reserved  to  represent
the  default  texture for each texture target.  Texture names and
the corresponding texture contents are local to the  shared  dis­
play-list  space  (see  _cmnd(XCreateContext))  of the current GL
rendering context; two rendering contexts share texture names on­
ly  if  they also share display lists.  You may use _cmnd(GenTex­
tures) to generate a set of new texture names.  When a texture is
first bound, it assumes the dimensionality of its target:  A tex­

</PRE>
<H2>ture first bound to GL_TEXTURE_1D becomes one-dimensional, and  a</H2><PRE>

</PRE>
<H2>texture first bound to GL_TEXTURE_2D becomes two-dimensional, and</H2><PRE>

</PRE>
<H2>a texture first bound to GL_TEXTURE_3D becomes a three-dimension­</H2><PRE>
al  texture.  The  state of a one-dimensional texture immediately
after it is first bound is equivalent to the state of the default

</PRE>
<H2>GL_TEXTURE_1D  at  GL initialization, and similarly for two-, and</H2><PRE>
three-dimensional textures.  While a texture is bound, GL  opera­
tions  on  the  target to which it is bound affect the bound tex­
ture, and queries of the target to which it is bound return state
from  the bound texture. If texture mapping of the dimensionality
of the target to which a texture is bound is  active,  the  bound
texture  is  used.  In effect, the texture targets become aliases
for the textures currently bound to them, and  the  texture  name
zero  refers  to  the default textures that were bound to them at
initialization.  A texture binding created with _cmnd remains ac­
tive  until  a  different texture is bound to the same target, or
until the bound texture is  deleted  with  _cmnd(DeleteTextures).
Once  created,  a  named texture may be re-bound to the target of
the matching dimensionality as often as needed.   It  is  usually
much faster to use _cmnd to bind an existing named texture to one
of the texture targets than it is to reload the texture image us­
ing  _cmnd(TexImage1D),  _cmnd(TexImage2D), or _cmnd(TexImage3D).
For additional control over performance, use _cmnd(PrioritizeTex­
tures).   _cmnd is included in display lists.  _cmnd is available

</PRE>
<H2>only if the GL version is 1.1  or  greater.   GL_INVALID_ENUM  is</H2><PRE>
generated  if  _param1  is  not  one  of  the  allowable  values.

</PRE>
<H2>GL_INVALID_OPERATION is generated if _param2 has a dimensionality</H2><PRE>

</PRE>
<H2>that doesn't match that of _param1.  GL_INVALID_OPERATION is gen­</H2><PRE>
erated if _cmnd is executed between the execution of _cmnd(Begin)
and  the  corresponding execution of _cmnd(End).  _cmnd(Get) with

</PRE>
<H2>argument GL_TEXTURE_BINDING_1D</H2><PRE>

</PRE>
<H2>_cmnd(Get) with argument GL_TEXTURE_BINDING_2D</H2><PRE>

</PRE>
<H2>_cmnd(Get) with argument GL_TEXTURE_BINDING_3D _cmnd(AreTextures­</H2><PRE>
Resident), _cmnd(DeleteTextures), _cmnd(GenTextures), _cmnd(Get),
_cmnd(GetTexParameter),  _cmnd(IsTexture),   _cmnd(PrioritizeTex­
tures), _cmnd(TexImage1D), _cmnd(TexImage2D), _cmnd(TexParameter)





@


1.1.1.1
log
@win32-x11 source tree update March 26, 2001
@
text
@@
