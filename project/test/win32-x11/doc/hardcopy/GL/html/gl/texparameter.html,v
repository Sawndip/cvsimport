head	1.2;
access;
symbols
	win32-x11-2001-03-26:1.1.1.1 SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2001.06.03.20.47.07;	author ssiddiqi;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.25.19.36.50;	author ssiddiqi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.03.25.19.36.50;	author ssiddiqi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Win32-X11 update sources check in, June 3, 2001 - ssiddiqi
@
text
@<HTML>
<BODY>
<PRE>
<!-- Manpage converted by man2html 3.0.1 -->
</PRE>
<HR>
<ADDRESS>
Man(1) output converted with
<a href="http://www.oac.uci.edu/indiv/ehood/man2html.html">man2html</a>
</ADDRESS>
</BODY>
</HTML>
@


1.1
log
@Initial revision
@
text
@a4 246

</PRE>
<H2>GL_TEXTURE_MAX_LEVEL,    GL_TEXTURE_WRAP_S,    GL_TEXTURE_WRAP_T,</H2><PRE>

</PRE>
<H2>GL_TEXTURE_WRAP_R, or GL_TEXTURE_PRIORITY.  _phead(_param3) Spec­</H2><PRE>
ifies   the   value   of   _param2.    _names(TexParameter,[fi]v)
_phead(_param1)  Specifies  the target texture, which must be ei­

</PRE>
<H2>ther    GL_TEXTURE_1D,    GL_TEXTURE_2D     or     GL_TEXTURE_3D.</H2><PRE>
_phead(_param2)  Specifies the symbolic name of a texture parame­

</PRE>
<H2>ter.  _param2 can be one of the following: GL_TEXTURE_MIN_FILTER,</H2><PRE>

</PRE>
<H2>GL_TEXTURE_MAG_FILTER,   GL_TEXTURE_MIN_LOD,  GL_TEXTURE_MAX_LOD,</H2><PRE>

</PRE>
<H2>GL_TEXTURE_BASE_LEVEL,  GL_TEXTURE_MAX_LEVEL,  GL_TEXTURE_WRAP_S,</H2><PRE>

</PRE>
<H2>GL_TEXTURE_WRAP_T, GL_TEXTURE_WRAP_R, GL_TEXTURE_BORDER_COLOR, or</H2><PRE>

</PRE>
<H2>GL_TEXTURE_PRIORITY.  _phead(_param3) Specifies a pointer  to  an</H2><PRE>
array  where  the value or values of _param2 are stored.  Texture
mapping is a technique that applies an  image  onto  an  object's
surface  as  if the image were a decal or cellophane shrink-wrap.
The image is created in texture space, with an ($s$, $t$) coordi­
nate  system.  A texture is a one- or two-dimensional image and a
set of parameters that determine how samples are derived from the
image.   _cmnd assigns the value or values in _param3 to the tex­
ture parameter specified as _param2.  _param1 defines the  target

</PRE>
<H2>texture,  either  GL_TEXTURE_1D, GL_TEXTURE_2D, or GL_TEXTURE_3D.</H2><PRE>
The    following    symbols    are    accepted    in     _param2:

</PRE>
<H2>GL_TEXTURE_MIN_FILTER  The  texture  minifying  function  is used</H2><PRE>
whenever the pixel being textured maps to an  area  greater  than
one  texture element.  There are six defined minifying functions.
Two of them use the nearest one or nearest four texture  elements
to  compute  the  texture  value.  The other four use mipmaps.  A
mipmap is an ordered set of arrays representing the same image at
progressively  lower  resolutions.  If the texture has dimensions
$2 sup n ~times~ 2 sup m$, there are $ bold max ( n, m )  +  1  $
mipmaps.   The  first mipmap is the original texture, with dimen­
sions $2 sup n ~times~ 2 sup m$.  Each subsequent mipmap has  di­
mensions  $2 sup { k - 1 } ~times~ 2 sup { l - 1 }$, where $2 sup
k ~times~ 2 sup l$ are the dimensions of the previous mipmap, un­
til  either  $k  ~=~  0$  or  $l~=~0$.  At that point, subsequent
mipmaps have dimension $ 1 ~times~ 2 sup { l - 1 } $ or $ 2 sup {
k - 1} ~times~ 1 $ until the final mipmap, which has dimension $1
~times~ 1$.  To define the mipmaps, call _cmnd(TexImage1D),  _cm­
nd(TexImage2D), _cmnd(TexImage3D), _cmnd(CopyTexImage1D), or _cm­
nd(CopyTexImage2D) with the <I>level</I> argument indicating  the  order
of  the  mipmaps.   Level 0 is the original texture; level $ bold
max ( n, m ) $ is the final $1 ~times~ 1$ mipmap.   _param3  sup­
plies  a function for minifying the texture as one of the follow­

</PRE>
<H2>ing: GL_NEAREST Returns the value of the texture element that  is</H2><PRE>
nearest  (in Manhattan distance) to the center of the pixel being

</PRE>
<H2>textured.  GL_LINEAR Returns the weighted  average  of  the  four</H2><PRE>
texture  elements that are closest to the center of the pixel be­
ing textured.  These can include border texture elements, depend­

</PRE>
<H2>ing on the values of GL_TEXTURE_WRAP_S and GL_TEXTURE_WRAP_T, and</H2><PRE>

</PRE>
<H2>on the  exact  mapping.   GL_NEAREST_MIPMAP_NEAREST  Chooses  the</H2><PRE>
mipmap that most closely matches the size of the pixel being tex­

</PRE>
<H2>tured and uses the  GL_NEAREST  criterion  (the  texture  element</H2><PRE>
nearest  to  the center of the pixel) to produce a texture value.
weighted average of those two values.  As more  texture  elements
are sampled in the minification process, fewer aliasing artifacts

</PRE>
<H2>will be apparent.  While the GL_NEAREST and  GL_LINEAR  minifica­</H2><PRE>
tion functions can be faster than the other four, they sample on­
ly one or four texture elements to determine the texture value of
the pixel being rendered and can produce moire patterns or ragged

</PRE>
<H2>transitions.   The  initial  value  of  GL_TEXTURE_MIN_FILTER  is</H2><PRE>

</PRE>
<H2>GL_NEAREST_MIPMAP_LINEAR.  GL_TEXTURE_MAG_FILTER The texture mag­</H2><PRE>
nification function is used when the pixel being textured maps to
an  area  less than or equal to one texture element.  It sets the

</PRE>
<H2>texture magnification function to either GL_NEAREST or  GL_LINEAR</H2><PRE>

</PRE>
<H2>(see  below).  GL_NEAREST is generally faster than GL_LINEAR, but</H2><PRE>
it can produce textured images with  sharper  edges  because  the
transition  between  texture elements is not as smooth.  The ini­

</PRE>
<H2>tial value of GL_TEXTURE_MAG_FILTER is GL_LINEAR.  GL_NEAREST Re­</H2><PRE>
turns  the  value of the texture element that is nearest (in Man­
hattan distance) to the  center  of  the  pixel  being  textured.

</PRE>
<H2>GL_LINEAR  Returns  the weighted average of the four texture ele­</H2><PRE>
ments that are closest to the center of the pixel being textured.
These  can include border texture elements, depending on the val­

</PRE>
<H2>ues of GL_TEXTURE_WRAP_S and GL_TEXTURE_WRAP_T, and on the  exact</H2><PRE>

</PRE>
<H2>mapping.  GL_TEXTURE_MIN_LOD Sets the minimum level-of-detail pa­</H2><PRE>
rameter.  This floating-point value limits the selection of high­
est resolution mipmap (lowest mipmap level). The initial value is

</PRE>
<H2>-1000.  GL_TEXTURE_MAX_LOD Sets the maximum  level-of-detail  pa­</H2><PRE>
rameter.   This  floating-point value limits the selection of the
lowest resolution mipmap (highest mipmap level). The initial val­

</PRE>
<H2>ue  is  1000.   GL_TEXTURE_BASE_LEVEL  Specifies the index of the</H2><PRE>
lowest defined mipmap level. This is an integer value.  The  ini­

</PRE>
<H2>tial  value  is  0.   GL_TEXTURE_MAX_LEVEL  Sets the index of the</H2><PRE>
highest defined mipmap level. This is an integer value. The  ini­

</PRE>
<H2>tial  value  is  1000.  GL_TEXTURE_WRAP_S Sets the wrap parameter</H2><PRE>

</PRE>
<H2>for texture coordinate $s$ to either GL_CLAMP,  GL_CLAMP_TO_EDGE,</H2><PRE>

</PRE>
<H2>or  GL_REPEAT.   GL_CLAMP causes $s$ coordinates to be clamped to</H2><PRE>
the range [0,1] and is useful for preventing  wrapping  artifacts

</PRE>
<H2>when  mapping  a  single  image onto an object.  GL_CLAMP_TO_EDGE</H2><PRE>
causes $s$ coordinates to be clamped to the range $left [ {1 over
2N},  1 - {1 over 2N} right ]$, where $N$ is the size of the tex­

</PRE>
<H2>ture in the direction of clamping.  GL_REPEAT causes the  integer</H2><PRE>
part  of  the  $s$ coordinate to be ignored; the GL uses only the
fractional part, thereby creating a  repeating  pattern.   Border
texture  elements  are  accessed  only  if  wrapping  is  set  to

</PRE>
<H2>GL_CLAMP.  Initially,  GL_TEXTURE_WRAP_S  is  set  to  GL_REPEAT.</H2><PRE>

</PRE>
<H2>GL_TEXTURE_WRAP_T  Sets the wrap parameter for texture coordinate</H2><PRE>

</PRE>
<H2>$t$ to either GL_CLAMP, GL_CLAMP_TO_EDGE, or GL_REPEAT.  See  the</H2><PRE>

</PRE>
<H2>discussion under GL_TEXTURE_WRAP_S.  Initially, GL_TEXTURE_WRAP_T</H2><PRE>

</PRE>
<H2>is set to GL_REPEAT.  GL_TEXTURE_WRAP_R Sets the  wrap  parameter</H2><PRE>

</PRE>
<H2>for  texture coordinate $r$ to either GL_CLAMP, GL_CLAMP_TO_EDGE,</H2><PRE>

</PRE>
<H2>or GL_REPEAT.  See the discussion under GL_TEXTURE_WRAP_S.   Ini­</H2><PRE>

</PRE>
<H2>tially,     GL_TEXTURE_WRAP_R     is     set     to    GL_REPEAT.</H2><PRE>

</PRE>
<H2>GL_TEXTURE_BORDER_COLOR Sets a border  color.   _param3  contains</H2><PRE>
four  values  that comprise the RGBA color of the texture border.
the texture images currently defined (with previous calls to _cm­
nd(TexImage1D), _cmnd(TexImage2D), _cmnd(TexImage3D), _cmnd(Copy­
TexImage1D), or _cmnd(CopyTexImage2D)) do not follow  the  proper
sequence  for  mipmaps (described above), or there are fewer tex­
ture images defined than are needed, or the set of texture images
have  differing  numbers  of texture components, then it is as if
texture mapping were disabled.   Linear  filtering  accesses  the
four  nearest  texture  elements only in 2D textures.  In 1D tex­
tures, linear filtering accesses the  two  nearest  texture  ele­

</PRE>
<H2>ments.  When the GL_ARB_multitexture extension is supported, _cm­</H2><PRE>
nd specifies the texture parameters for the active texture  unit,

</PRE>
<H2>specified by calling _cmnd(ActiveTextureARB).  GL_INVALID_ENUM is</H2><PRE>
generated if _param1 or _param2 is not one of  the  accepted  de­

</PRE>
<H2>fined  values.   GL_INVALID_ENUM  is  generated if _param3 should</H2><PRE>
have a defined constant value (based on the value of _param2) and

</PRE>
<H2>does not.  GL_INVALID_OPERATION is generated if _cmnd is executed</H2><PRE>
between the execution of _cmnd(Begin) and the corresponding  exe­
cution of _cmnd(End).  _cmnd(GetTexParameter)
_cmnd(GetTexLevelParameter)  _cmnd(ActiveTextureARB), _cmnd(Bind­
Texture), _cmnd(CopyPixels),  _cmnd(CopyTexImage1D),  _cmnd(Copy­
TexImage2D),  _cmnd(CopyTexSubImage1D), _cmnd(CopyTexSubImage2D),
_cmnd(CopyTexSubImage3D),  _cmnd(DrawPixels),  _cmnd(PixelStore),
_cmnd(PixelTransfer),  _cmnd(PrioritizeTextures),  _cmnd(TexEnv),
_cmnd(TexGen), _cmnd(TexImage1D), _cmnd(TexImage2D), _cmnd(TexIm­
age3D),  _cmnd(TexSubImage1D),  _cmnd(TexSubImage2D),  _cmnd(Tex­
SubImage3D)


























@


1.1.1.1
log
@win32-x11 source tree update March 26, 2001
@
text
@@
