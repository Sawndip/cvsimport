head	1.2;
access;
symbols
	win32-x11-2001-03-26:1.1.1.1 SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2001.06.03.20.47.06;	author ssiddiqi;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.25.19.36.50;	author ssiddiqi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.03.25.19.36.50;	author ssiddiqi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Win32-X11 update sources check in, June 3, 2001 - ssiddiqi
@
text
@<HTML>
<BODY>
<PRE>
<!-- Manpage converted by man2html 3.0.1 -->
</PRE>
<HR>
<ADDRESS>
Man(1) output converted with
<a href="http://www.oac.uci.edu/indiv/ehood/man2html.html">man2html</a>
</ADDRESS>
</BODY>
</HTML>
@


1.1
log
@Initial revision
@
text
@a4 154
a two-dimensional mesh of points, lines, or  polygons.   Symbolic

</PRE>
<H2>constants   GL_POINT,   GL_LINE,   and   GL_FILL   are  accepted.</H2><PRE>
_phead(_param2 _param3) Specify the first and last integer values
for  grid  domain  variable $i$.  _phead(_param4 _param5) Specify
the first and last integer values for grid domain  variable  $j$.
_cmnd(MapGrid) and _cmnd are used in tandem to efficiently gener­
ate and evaluate a series of  evenly-spaced  map  domain  values.
_cmnd  steps  through  the integer domain of a one- or two-dimen­
sional grid, whose range is the domain  of  the  evaluation  maps
specified  by _cmnd(Map1) and _cmnd(Map2).  <B>_param1(1)</B> determines
whether the resulting vertices are connected as points, lines, or
filled  polygons.  In the one-dimensional case, _cmnd(EvalMesh1),
the mesh is generated as if the following code fragment were exe­
cuted:

glBegin( <I>type</I> <I>);</I>

</PRE>
<H2>for ( i = _param2; i </= _param3; i += 1 )<H2><PRE>
   <I>glEvalCoord1(</I> <I>i$^cdot^DELTA</I> <I>u</I> <I>~+~</I> <I>u</I> <I>sub</I> <I>1$</I> <I>);</I>
<I>glEnd();</I>

where

$ DELTA u ~=~ (u sub 2 ~-~ u sub 1 ) ^/^ n$

and  $n$,  $u sub 1$, and $u sub 2$ are the arguments to the most

</PRE>
<H2>recent _cmnd(MapGrid1) command.  type is GL_POINTS if  _param1(1)</H2><PRE>

</PRE>
<H2>is GL_POINT, or GL_LINES if _param1(1) is GL_LINE.  The one abso­</H2><PRE>
lute numeric requirement is that if $i ~=~  n$,  then  the  value
computed from $ i^cdot^DELTA u ~+~ u sub 1$ is exactly $u sub 2$.
In the two-dimensional case, _cmnd(EvalMesh2), let
$ DELTA u ~=~ mark ( u sub 2 ~-~ u sub 1 ) ^/^ n$

$ DELTA v ~=~ lineup ( v sub 2 ~-~ v sub 1 ) ^/^ m$,
where $n$, $u sub 1$, $u sub 2$, $m$, $v sub 1$, and  $v  sub  2$
are  the  arguments  to  the most recent _cmnd(MapGrid2) command.

</PRE>
<H2>Then, if _param1(2) is GL_FILL, the _cmnd(EvalMesh2)  command  is</H2><PRE>
equivalent to:

for ( j = _param4; j &lt; _param5; j += 1 ) {
   glBegin( GL_QUAD_STRIP );
   for ( i = _param2; i &lt;= _param3; i += 1 ) {
      glEvalCoord2( i$^cdot^DELTA u ~+~ u sub 1$, j$^cdot^DELTA v ~+~ v sub 1$ );
      glEvalCoord2( i$^cdot^DELTA u ~+~ u sub 1$, (j+1)$^cdot^DELTA v ~+~ v sub 1$ );
   }
   glEnd();
}


</PRE>
<H2>If _param1 is GL_LINE, then a call to _cmnd(EvalMesh2) is equiva­</H2><PRE>

</PRE>
<H2>lent to:</H2><PRE>


</PRE>
<H2>for ( j = _param4; j </= _param5; j += 1 ) {<H2><PRE>
   <B>glBegin(</B> <B>GL_LINE_STRIP</B> <B>);</B>


</PRE>
<H2>glBegin( GL_POINTS );</H2><PRE>

</PRE>
<H2>for ( j = _param4; j </= _param5; j += 1 )<H2><PRE>
   <B>for</B> <B>(</B> <B>i</B> <B>=</B> <B>_param2;</B> <B>i</B> <B>&lt;=</B> <B>_param3;</B> <B>i</B> <B>+=</B> <B>1</B> <B>)</B>
      <B>glEvalCoord2(</B> <B>i$^cdot^DELTA</B> <B>u</B> <B>~+~</B> <B>u</B> <B>sub</B> <B>1$,</B> <B>j$^cdot^DELTA</B> <B>v</B> <B>~+~</B> <B>v</B> <B>sub</B> <B>1$</B> <B>);</B>

</PRE>
<H2>glEnd();</H2><PRE>


</PRE>
<H2>In  all  three  cases, the only absolute numeric requirements are</H2><PRE>

</PRE>
<H2>that if $i~=~n$, then the value computed from $i^cdot^DELTA u ~+~</H2><PRE>

</PRE>
<H2>u  sub  1$  is  exactly $u sub 2$, and if $j~=~m$, then the value</H2><PRE>

</PRE>
<H2>computed from $j ^cdot^ DELTA v ~+~ v sub 1$ is  exactly  $v  sub</H2><PRE>

</PRE>
<H2>2$.   GL_INVALID_ENUM  is generated if _param1 is not an accepted</H2><PRE>

</PRE>
<H2>value.  GL_INVALID_OPERATION is generated if  _cmnd  is  executed</H2><PRE>

</PRE>
<H2>between  the execution of _cmnd(Begin) and the corresponding exe­</H2><PRE>

</PRE>
<H2>cution    of    _cmnd(End).      _cmnd(Get)     with     argument</H2><PRE>

</PRE>
<H2>GL_MAP1_GRID_DOMAIN</H2><PRE>

</PRE>
<H2>_cmnd(Get) with argument GL_MAP2_GRID_DOMAIN</H2><PRE>

</PRE>
<H2>_cmnd(Get) with argument GL_MAP1_GRID_SEGMENTS</H2><PRE>

</PRE>
<H2>_cmnd(Get) with argument GL_MAP2_GRID_SEGMENTS _cmnd(Begin), _cm­</H2><PRE>

</PRE>
<H2>nd(EvalCoord), _cmnd(EvalPoint), _cmnd(Map1),  _cmnd(Map2),  _cm­</H2><PRE>

</PRE>
<H2>nd(MapGrid)</H2><PRE>































@


1.1.1.1
log
@win32-x11 source tree update March 26, 2001
@
text
@@
