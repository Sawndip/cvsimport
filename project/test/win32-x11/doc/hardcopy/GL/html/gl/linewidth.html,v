head	1.2;
access;
symbols
	win32-x11-2001-03-26:1.1.1.1 SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2001.06.03.20.47.07;	author ssiddiqi;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.25.19.36.50;	author ssiddiqi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.03.25.19.36.50;	author ssiddiqi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Win32-X11 update sources check in, June 3, 2001 - ssiddiqi
@
text
@<HTML>
<BODY>
<PRE>
<!-- Manpage converted by man2html 3.0.1 -->
</PRE>
<HR>
<ADDRESS>
Man(1) output converted with
<a href="http://www.oac.uci.edu/indiv/ehood/man2html.html">man2html</a>
</ADDRESS>
</BODY>
</HTML>
@


1.1
log
@Initial revision
@
text
@a4 76

</PRE>
<H2>GL_LINE_SMOOTH. Line antialiasing is initially disabled.  If line</H2><PRE>
antialiasing  is  disabled,  the  actual  width  is determined by
rounding the supplied width to  the  nearest  integer.   (If  the
rounding  results in the value 0, it is as if the line width were
1.)  If $| DELTA x | ~&gt;=~ | DELTA y |$, <I>i</I> pixels  are  filled  in
each  column  that is rasterized, where <I>i</I> is the rounded value of
_param1.  Otherwise, <I>i</I> pixels are filled in each row that is ras­
terized.  If antialiasing is enabled, line rasterization produces
a fragment for each pixel square that intersects the region lying
within  the  rectangle  having  width  equal  to the current line
width, length equal to the actual length of the  line,  and  cen­
tered  on  the mathematical line segment.  The coverage value for
each fragment is the window coordinate area of  the  intersection
of  the  rectangular  region with the corresponding pixel square.
This value is saved and used in  the  final  rasterization  step.
Not  all  widths  can  be supported when line antialiasing is en­
abled. If an unsupported width is requested, the nearest support­
ed  width  is  used.  Only width 1 is guaranteed to be supported;
others depend on the implementation.  Likewise, there is a  range
for aliased line widths as well.  To query the range of supported
widths and the size difference between  supported  widths  within
the      range,      call      _cmnd(Get)      with     arguments

</PRE>
<H2>GL_ALIASED_LINE_WIDTH_RANGE,          GL_SMOOTH_LINE_WIDTH_RANGE,</H2><PRE>

</PRE>
<H2>GL_SMOOTH_LINE_WIDTH_GRANULARITY.   The  line  width specified by</H2><PRE>

</PRE>
<H2>_cmnd is always returned when GL_LINE_WIDTH is queried.  Clamping</H2><PRE>
and  rounding for aliased and antialiased lines have no effect on
the specified value.  Nonantialiased line width may be clamped to
an   implementation-dependent   maximum.   Call  _cmnd(Get)  with

</PRE>
<H2>GL_ALIASED_LINE_WIDTH_RANGE  to  determine  the  maximum   width.</H2><PRE>

</PRE>
<H2>GL_INVALID_VALUE is generated if _param1 is less than or equal to</H2><PRE>

</PRE>
<H2>0.  GL_INVALID_OPERATION is generated if _cmnd  is  executed  be­</H2><PRE>
tween  the execution of _cmnd(Begin) and the corresponding execu­

</PRE>
<H2>tion of _cmnd(End).  _cmnd(Get) with argument GL_LINE_WIDTH</H2><PRE>

</PRE>
<H2>_cmnd(Get) with argument GL_ALIASED_LINE_WIDTH_RANGE</H2><PRE>

</PRE>
<H2>_cmnd(Get) with argument GL_SMOOTH_LINE_WIDTH_RANGE</H2><PRE>

</PRE>
<H2>_cmnd(Get) with argument GL_SMOOTH_LINE_WIDTH_GRANULARITY</H2><PRE>

</PRE>
<H2>_cmnd(IsEnabled) with argument GL_LINE_SMOOTH _cmnd(Enable)</H2><PRE>















@


1.1.1.1
log
@win32-x11 source tree update March 26, 2001
@
text
@@
