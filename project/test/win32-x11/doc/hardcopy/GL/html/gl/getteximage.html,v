head	1.2;
access;
symbols
	win32-x11-2001-03-26:1.1.1.1 SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2001.06.03.20.47.07;	author ssiddiqi;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.25.19.36.50;	author ssiddiqi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.03.25.19.36.50;	author ssiddiqi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Win32-X11 update sources check in, June 3, 2001 - ssiddiqi
@
text
@<HTML>
<BODY>
<PRE>
<!-- Manpage converted by man2html 3.0.1 -->
</PRE>
<HR>
<ADDRESS>
Man(1) output converted with
<a href="http://www.oac.uci.edu/indiv/ehood/man2html.html">man2html</a>
</ADDRESS>
</BODY>
</HTML>
@


1.1
log
@Initial revision
@
text
@a4 168

</PRE>
<H2>GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB,  GL_BGR,  GL_RGBA,  GL_BGRA,</H2><PRE>

</PRE>
<H2>GL_LUMINANCE,  and GL_LUMINANCE_ALPHA.  _phead(_param4) Specifies</H2><PRE>
a pixel type for the returned  data.   The  supported  types  are

</PRE>
<H2>GL_UNSIGNED_BYTE,     GL_BYTE,    GL_UNSIGNED_SHORT,    GL_SHORT,</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_INT,   GL_INT,   GL_FLOAT,    GL_UNSIGNED_BYTE_3_3_2,</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_BYTE_2_3_3_REV,              GL_UNSIGNED_SHORT_5_6_5,</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_SHORT_5_6_5_REV,           GL_UNSIGNED_SHORT_4_4_4_4,</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_SHORT_4_4_4_4_REV,         GL_UNSIGNED_SHORT_5_5_5_1,</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_SHORT_1_5_5_5_REV,           GL_UNSIGNED_INT_8_8_8_8,</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_INT_8_8_8_8_REV,    GL_UNSIGNED_INT_10_10_10_2,   and</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_INT_2_10_10_10_REV.  _phead(_param5) Returns the tex­</H2><PRE>
ture  image.   Should be a pointer to an array of the type speci­
fied by _param4.  _cmnd returns a  texture  image  into  _param5.
_param1 specifies whether the desired texture image is one speci­

</PRE>
<H2>fied by _cmnd(TexImage1D) (GL_TEXTURE_1D),  _cmnd(TexImage2D)  (­</H2><PRE>

</PRE>
<H2>GL_TEXTURE_2D),  or  _cmnd(TexImage3D)  (GL_TEXTURE_3D).  _param2</H2><PRE>
specifies  the  level-of-detail  number  of  the  desired  image.
_param3  and  _param4  specify the  and type of the desired image
array.  See the reference pages _cmnd(TexImage1D) and _cmnd(Draw­
Pixels)  for  a  description  of  the  acceptable  values for the
_param3 and _param4 parameters, respectively.  To understand  the
operation of _cmnd, consider the selected internal four-component
texture image to be an RGBA color buffer the size of  the  image.
The semantics of _cmnd are then identical to those of _cmnd(Read­
Pixels), with the exception that no pixel transfer operations are
performed,  when called with the same _param3 and _param4, with <I>x</I>
and <I>y</I> set to 0, <I>width</I> set to the width of the texture image  (in­
cluding  border if one was specified), and <I>height</I> set to 1 for 1D
images, or to the height of the texture image  (including  border
if  one  was specified) for 2D images.  Because the internal tex­

</PRE>
<H2>ture image  is  an  RGBA  image,  pixel  formats  GL_COLOR_INDEX,</H2><PRE>

</PRE>
<H2>GL_STENCIL_INDEX,  and  GL_DEPTH_COMPONENT  are not accepted, and</H2><PRE>

</PRE>
<H2>pixel type GL_BITMAP is not accepted.  If  the  selected  texture</H2><PRE>
image  does  not  contain four components, the following mappings
are applied.   Single-component  textures  are  treated  as  RGBA
buffers  with red set to the single-component value, green set to
0,  blue set to 0, and alpha set to  1.   Two-component  textures
are  treated  as RGBA buffers with red set to the value of compo­
nent zero, alpha set to the value of component one, and green and
blue  set to 0.  Finally, three-component textures are treated as
RGBA buffers with red set to component zero, green set to  compo­
nent  one, blue set to component two, and alpha set to 1.  To de­
termine the required size of _param5, use _cmnd(GetTexLevelParam­
eter)  to determine the dimensions of the internal texture image,
then scale the required number of pixels by the storage  required
for  each  pixel,  based on _param3 and _param4.  Be sure to take
the   pixel   storage   parameters   into   account,   especially

</PRE>
<H2>GL_PACK_ALIGNMENT.   If  an error is generated, no change is made</H2><PRE>

</PRE>
<H2>to the contents of _param5.  When the GL_ARB_multitexture  exten­</H2><PRE>
sion is supported, _cmnd returns the texture image for the active

</PRE>
<H2>texture     unit.      The     types      GL_UNSIGNED_BYTE_3_3_2,</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_BYTE_2_3_3_REV,              GL_UNSIGNED_SHORT_5_6_5,</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_BYTE_2_3_3_REV,      GL_UNSIGNED_SHORT_5_6_5,      or</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_SHORT_5_6_5_REV    and   _param3   is   not   GL_RGB.</H2><PRE>

</PRE>
<H2>GL_INVALID_OPERATION  is  returned   if   _param4   is   one   of</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_SHORT_4_4_4_4,         GL_UNSIGNED_SHORT_4_4_4_4_REV,</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_SHORT_5_5_5_1,         GL_UNSIGNED_SHORT_1_5_5_5_REV,</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_INT_8_8_8_8,             GL_UNSIGNED_INT_8_8_8_8_REV,</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_INT_10_10_10_2,  or   GL_UNSIGNED_INT_2_10_10_10_REV,</H2><PRE>

</PRE>
<H2>and  _param3 is neither GL_RGBA or GL_BGRA.  _cmnd(GetTexLevelPa­</H2><PRE>

</PRE>
<H2>rameter) with argument GL_TEXTURE_WIDTH</H2><PRE>

</PRE>
<H2>_cmnd(GetTexLevelParameter) with argument GL_TEXTURE_HEIGHT</H2><PRE>

</PRE>
<H2>_cmnd(GetTexLevelParameter) with argument GL_TEXTURE_BORDER</H2><PRE>
_cmnd(GetTexLevelParameter)             with             argument

</PRE>
<H2>GL_TEXTURE_INTERNALFORMAT</H2><PRE>

</PRE>
<H2>_cmnd(Get)  with arguments GL_PACK_ALIGNMENT and others _cmnd(Ac­</H2><PRE>
tiveTextureARB), _cmnd(DrawPixels), _cmnd(ReadPixels), _cmnd(Tex­
Env),  _cmnd(TexGen),  _cmnd(TexImage1D), _cmnd(TexImage2D), _cm­
nd(TexImage3D), _cmnd(TexSubImage1D), _cmnd(TexSubImage2D),  _cm­
nd(TexSubImage3D), _cmnd(TexParameter)


































@


1.1.1.1
log
@win32-x11 source tree update March 26, 2001
@
text
@@
