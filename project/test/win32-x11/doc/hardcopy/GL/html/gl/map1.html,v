head	1.2;
access;
symbols
	win32-x11-2001-03-26:1.1.1.1 SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2001.06.03.20.47.07;	author ssiddiqi;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.25.19.36.50;	author ssiddiqi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.03.25.19.36.50;	author ssiddiqi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Win32-X11 update sources check in, June 3, 2001 - ssiddiqi
@
text
@<HTML>
<BODY>
<PRE>
<!-- Manpage converted by man2html 3.0.1 -->
</PRE>
<HR>
<ADDRESS>
Man(1) output converted with
<a href="http://www.oac.uci.edu/indiv/ehood/man2html.html">man2html</a>
</ADDRESS>
</BODY>
</HTML>
@


1.1
log
@Initial revision
@
text
@a4 188
Specify a linear mapping of $u$, as  presented  to  _cmnd(EvalCo­
ord1),  to  $u  hat$, the variable that is evaluated by the equa­
tions specified by this command.  _phead(_param4)  Specifies  the
number  of floats or doubles between the beginning of one control
point and the beginning of the next one  in  the  data  structure
referenced in _param6.  This allows control points to be embedded
in arbitrary data structures.  The only constraint  is  that  the
values for a particular control point must occupy contiguous mem­
ory locations.  _phead(_param5) Specifies the number  of  control
points.   Must  be positive.  _phead(_param6) Specifies a pointer
to the array of control points.

Evaluators provide a way to use polynomial or rational polynomial
mapping  to  produce  vertices, normals, texture coordinates, and
colors.  The values produced by an evaluator are sent to  further
stages  of GL processing just as if they had been presented using
_cmnd(Vertex), _cmnd(Normal), _cmnd(TexCoord),  and  _cmnd(Color)
commands, except that the generated values do not update the cur­
rent normal, texture coordinates, or color.   All  polynomial  or
rational  polynomial splines of any degree (up to the maximum de­
gree supported by the GL implementation) can be  described  using
evaluators.   These  include  almost all splines used in computer
graphics: B-splines, Bezier curves, Hermite splines, and  so  on.
Evaluators  define curves based on Bernstein polynomials.  Define
$p ( u hat ^) $ as

$p ( u hat ^) ~~=~~ up 10 { sum from i=0 to n } B sub i sup n ( u
                         hat ^) R sub i$

where $R sub i$ is a control point and $B sub i sup n ( u hat ^)$
is the $i$th Bernstein polynomial of degree $n$ (_param5 = $n ~+~
1$):

$B sub i sup n ( u hat ^) ~~=~~ left ( down 20 {cpile { n above i
     }} ~~ right ) u hat sup i ( 1 - u hat ^) sup { n - i }$

Recall that

$0 sup 0 ~==~ 1 $ and $ left ( down 20 {cpile { n above ~0 }}  ~~
                       right ) ~~==~~ 1 $
_cmnd  is  used  to  define the basis and to specify what kind of
values are produced.  Once defined, a map can be enabled and dis­
abled  by  calling  _cmnd(Enable) and _cmnd(Disable) with the map
name, one of the nine predefined values for _param1 described be­
low.   _cmnd(EvalCoord1)  evaluates the one-dimensional maps that
are enabled.  When
_cmnd(EvalCoord1) presents a value $u$, the  Bernstein  functions
are evaluated using $u hat$, where

$u hat ~~=~~ {u ~-~ _eqnparam2} over {_eqnparam3 ~-~ _eqnparam2}$

_param1  is  a symbolic constant that indicates what kind of con­
erated when the map is evaluated but the current color is not up­
dated   with   the   value   of   these  _cmnd(Color4)  commands.

</PRE>
<H2>GL_MAP1_NORMAL Each control point is three floating-point  values</H2><PRE>
representing the $x$, $y$, and $z$ components of a normal vector.
Internal _cmnd(Normal) commands are generated  when  the  map  is
evaluated but the current normal is not updated with the value of

</PRE>
<H2>these _cmnd(Normal) commands.  GL_MAP1_TEXTURE_COORD_1 Each  con­</H2><PRE>
trol  point is a single floating-point value representing the $s$
texture coordinate.  Internal
_cmnd(TexCoord1) commands are generated when the map is evaluated
but the current texture coordinates are not updated with the val­

</PRE>
<H2>ue of these  _cmnd(TexCoord)  commands.   GL_MAP1_TEXTURE_COORD_2</H2><PRE>
Each  control point is two floating-point values representing the
$s$ and $t$ texture coordinates.  Internal
_cmnd(TexCoord2) commands are generated when the map is evaluated
but the current texture coordinates are not updated with the val­

</PRE>
<H2>ue of these  _cmnd(TexCoord)  commands.   GL_MAP1_TEXTURE_COORD_3</H2><PRE>
Each  control  point  is three floating-point values representing
the $s$, $t$, and $r$ texture coordinates.  Internal _cmnd(TexCo­
ord3)  commands  are  generated when the map is evaluated but the
current texture coordinates are not updated  with  the  value  of

</PRE>
<H2>these  _cmnd(TexCoord)  commands.   GL_MAP1_TEXTURE_COORD_4  Each</H2><PRE>
control point is four floating-point values representing the $s$,
$t$, $r$, and $q$ texture coordinates.  Internal
_cmnd(TexCoord4) commands are generated when the map is evaluated
but the current texture coordinates are not updated with the val­
ue  of  these  _cmnd(TexCoord)  commands.   _param4, _param5, and
_param6 define the array addressing  for  accessing  the  control
points.   _param6  is  the  location  of the first control point,
which occupies one, two, three, or four contiguous  memory  loca­
tions,  depending  on which map is being defined.  _param5 is the
number of control points in the  array.   _param4  specifies  how
many  float  or  double  locations to advance the internal memory
pointer to reach the next control point.  As is the case with all
GL  commands  that  accept pointers to data, it is as if the con­
tents of _param6 were  copied  by  _cmnd  before  _cmnd  returns.
Changes  to the contents of _param6 have no effect after _cmnd is

</PRE>
<H2>called.  GL_INVALID_ENUM is generated if _param1 is  not  an  ac­</H2><PRE>

</PRE>
<H2>cepted  value.  GL_INVALID_VALUE is generated if _param2 is equal</H2><PRE>

</PRE>
<H2>to _param3.  GL_INVALID_VALUE is generated  if  _param4  is  less</H2><PRE>

</PRE>
<H2>than  the  number of values in a control point.  GL_INVALID_VALUE</H2><PRE>
is generated if _param5 is less than 1 or greater than the return

</PRE>
<H2>value of GL_MAX_EVAL_ORDER.  GL_INVALID_OPERATION is generated if</H2><PRE>
_cmnd is executed between the execution of _cmnd(Begin)  and  the
corresponding     execution     of    _cmnd(End).     When    the

</PRE>
<H2>GL_ARB_multitexture extension is supported,  GL_INVALID_OPERATION</H2><PRE>
is   generated   if   _cmnd   is   called   and   the   value  of

</PRE>
<H2>GL_ACTIVE_TEXTURE_ARB is not GL_TEXTURE0_ARB.  _cmnd(GetMap)</H2><PRE>

</PRE>
<H2>_cmnd(Get) with argument GL_MAX_EVAL_ORDER</H2><PRE>

</PRE>
<H2>_cmnd(IsEnabled) with argument GL_MAP1_VERTEX_3</H2><PRE>

</PRE>
<H2>_cmnd(IsEnabled) with argument GL_MAP1_VERTEX_4</H2><PRE>

</PRE>
<H2>_cmnd(IsEnabled) with argument GL_MAP1_INDEX</H2><PRE>




















































@


1.1.1.1
log
@win32-x11 source tree update March 26, 2001
@
text
@@
