head	1.2;
access;
symbols
	win32-x11-2001-03-26:1.1.1.1 SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2001.06.03.20.47.10;	author ssiddiqi;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.25.19.36.50;	author ssiddiqi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.03.25.19.36.50;	author ssiddiqi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Win32-X11 update sources check in, June 3, 2001 - ssiddiqi
@
text
@<HTML>
<BODY>
<PRE>
<!-- Manpage converted by man2html 3.0.1 -->
</PRE>
<HR>
<ADDRESS>
Man(1) output converted with
<a href="http://www.oac.uci.edu/indiv/ehood/man2html.html">man2html</a>
</ADDRESS>
</BODY>
</HTML>
@


1.1
log
@Initial revision
@
text
@a4 116
in a tessellation object. These properties affect  the  way  that
the  polygons are interpreted and rendered.  The legal values for

</PRE>
<H2>_param2 are as follows:  GLU_TESS_WINDING_RULE  Determines  which</H2><PRE>
parts  of  the polygon are on the "interior".  _param3 may be set

</PRE>
<H2>to   one   of   GLU_TESS_WINDING_ODD,   GLU_TESS_WINDING_NONZERO,</H2><PRE>

</PRE>
<H2>GLU_TESS_WINDING_POSITIVE,   or   GLU_TESS_WINDING_NEGATIVE,   or</H2><PRE>

</PRE>
<H2>GLU_TESS_WINDING_ABS_GEQ_TWO.  To understand how the winding rule</H2><PRE>
works,  consider that the input contours partition the plane into
regions. The winding rule determines which of these  regions  are
inside  the  polygon.  For a single contour C, the winding number
of a point x is simply the signed number of revolutions  we  make
around x as we travel once around C (where CCW is positive). When
there are several contours, the individual  winding  numbers  are
summed.  This  procedure  associates  a signed integer value with
each point x in the plane. Note that the winding  number  is  the
same for all points in a single region.




































to GL_TRUE or GL_FALSE). When set to GL_TRUE,  a  set  of  closed
contours  separating  the  polygon  interior and exterior are re­
turned instead of a tessellation. Exterior contours are  oriented
CCW  with  respect  to the normal; interior contours are oriented

</PRE>
<H2>CW. The GLU_TESS_BEGIN and GLU_TESS_BEGIN_DATA callbacks use  the</H2><PRE>

</PRE>
<H2>type GL_LINE_LOOP for each contour.  GLU_TESS_TOLERANCE Specifies</H2><PRE>
a tolerance for merging features to reduce the size of  the  out­
put.  For example, two vertices that are very close to each other
might be replaced by a single vertex. The tolerance is multiplied
by  the  largest  coordinate  magnitude of any input vertex; this
specifies the maximum distance that any feature can move  as  the
result  of  a  single  merge operation. If a single feature takes
part in several merge operations, the total distance moved  could
be larger.  Feature merging is completely optional; the tolerance
is only a hint.  The implementation is free to merge in some cas­
es and not in others, or to never merge features at all. The ini­
tial tolerance is 0.  The current implementation merges  vertices
only  if  they  are exactly coincident, regardless of the current
tolerance. A vertex is spliced into an edge only if the implemen­
tation is unable to distinguish which side of the edge the vertex
lies on. Two edges are merged only when both endpoints are  iden­
tical.  _cmnd(GetTessProperty), _cmnd(NewTess)






























@


1.1.1.1
log
@win32-x11 source tree update March 26, 2001
@
text
@@
