head	1.2;
access;
symbols
	win32-x11-2001-03-26:1.1.1.1 SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2001.06.03.20.47.10;	author ssiddiqi;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.25.19.36.50;	author ssiddiqi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.03.25.19.36.50;	author ssiddiqi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Win32-X11 update sources check in, June 3, 2001 - ssiddiqi
@
text
@<HTML>
<BODY>
<PRE>
<!-- Manpage converted by man2html 3.0.1 -->
</PRE>
<HR>
<ADDRESS>
Man(1) output converted with
<a href="http://www.oac.uci.edu/indiv/ehood/man2html.html">man2html</a>
</ADDRESS>
</BODY>
</HTML>
@


1.1
log
@Initial revision
@
text
@a4 200
value that is not accepted by the OpenGL implementation will lead
to  an  OpenGL  error.  The benefit of not checking this value at
the GLU level is that OpenGL extensions can add new internal tex­
ture  formats without requiring a revision of the GLU implementa­
tion.  Older implementations of GLU check this value and raise  a
GLU error if it is not 1, 2, 3, or 4 or one of the following sym­

</PRE>
<H2>bolic  constants:  GL_ALPHA,  GL_ALPHA4,  GL_ALPHA8,  GL_ALPHA12,</H2><PRE>

</PRE>
<H2>GL_ALPHA16,     GL_LUMINANCE,    GL_LUMINANCE4,    GL_LUMINANCE8,</H2><PRE>

</PRE>
<H2>GL_LUMINANCE12,        GL_LUMINANCE16,        GL_LUMINANCE_ALPHA,</H2><PRE>

</PRE>
<H2>GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8,</H2><PRE>

</PRE>
<H2>GL_LUMINANCE12_ALPHA4,                    GL_LUMINANCE12_ALPHA12,</H2><PRE>

</PRE>
<H2>GL_LUMINANCE16_ALPHA16,        GL_INTENSITY,       GL_INTENSITY4,</H2><PRE>

</PRE>
<H2>GL_INTENSITY8,    GL_INTENSITY12,     GL_INTENSITY16,     GL_RGB,</H2><PRE>

</PRE>
<H2>GL_R3_G3_B2,   GL_RGB4,  GL_RGB5,  GL_RGB8,  GL_RGB10,  GL_RGB12,</H2><PRE>

</PRE>
<H2>GL_RGB16,  GL_RGBA,  GL_RGBA2,  GL_RGBA4,  GL_RGB5_A1,  GL_RGBA8,</H2><PRE>

</PRE>
<H2>GL_RGB10_A2,  GL_RGBA12,  or  GL_RGBA16.   _phead(_param3 _param4</H2><PRE>
_param5) Specifies in pixels the width, height and depth  respec­
tively,  of  the  texture  image.  These  should be a power of 2.
_phead(_param6) Specifies the format of the pixel data.  Must  be

</PRE>
<H2>one  of  GL_COLOR_INDEX,  GL_DEPTH_COMPONENT,  GL_RED,  GL_GREEN,</H2><PRE>

</PRE>
<H2>GL_BLUE,   GL_ALPHA,   GL_RGB,    GL_RGBA,    GL_BGR,    GL_BGRA,</H2><PRE>

</PRE>
<H2>GL_LUMINANCE,  or  GL_LUMINANCE_ALPHA.  _phead(_param7) Specifies</H2><PRE>

</PRE>
<H2>the data type for _param11.  Must  be  one  of  GL_UNSIGNED_BYTE,</H2><PRE>

</PRE>
<H2>GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT,</H2><PRE>

</PRE>
<H2>GL_INT,             GL_FLOAT,             GL_UNSIGNED_BYTE_3_3_2,</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_BYTE_2_3_3_REV,              GL_UNSIGNED_SHORT_5_6_5,</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_SHORT_5_6_5_REV,           GL_UNSIGNED_SHORT_4_4_4_4,</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_SHORT_4_4_4_4_REV,         GL_UNSIGNED_SHORT_5_5_5_1,</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_SHORT_1_5_5_5_REV,           GL_UNSIGNED_INT_8_8_8_8,</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_INT_8_8_8_8_REV,    GL_UNSIGNED_INT_10_10_10_2,    or</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_INT_2_10_10_10_REV.   _phead(_param8)  Specifies  the</H2><PRE>
mipmap  level  of  the image data.  _phead(_param9) Specifies the
minimum   mipmap   level   to   pass   to    _glcmnd(TexImage3D).
_phead(_param10)  Specifies  the  maximum mipmap level to pass to
_glcmnd(TexImage3D).  _phead(_param11) Specifies a pointer to the
image  data  in  memory.   _cmnd  builds  a subset of prefiltered
three-dimensional texture maps of decreasing resolutions called a
mipmap. This is used for the antialiasing of texture mapped prim­
itives.  A return value of zero indicates  success,  otherwise  a
GLU error code is returned (see _cmnd(ErrorString)).  A series of
mipmap levels from _param9 to _param10  is  built  by  decimating
_param11  in  half  along both dimensions until size $1 ~times~ 1
~times~ 1$ is reached. At each level, each texel  in  the  halved
mipmap  level  is an average of the corresponding eight texels in
the larger mipmap level. (If exactly one of the dimensions is  1,
four  texels  are averaged.  If exactly two of the dimensions are
1, two texels are averaged.)  _glcmnd(TexImage3D)  is  called  to
load these mipmap levels from _param9 to _param10. If _param10 is
larger than the highest mipmap level for the texture of the spec­
ified  size,  then  a  GLU  error code is returned (see _cmnd(Er­
rorString)) and nothing is loaded.  For example, if _param8 is  2
and  _param3  is 16, _param4 is 8 and _param5 is 4, the following

</PRE>
<H2>if the GLU version  is  1.3  or  greater.   Formats  GL_BGR,  and</H2><PRE>

</PRE>
<H2>GL_BGRA,         and         types        GL_UNSIGNED_BYTE_3_3_2,</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_BYTE_2_3_3_REV,              GL_UNSIGNED_SHORT_5_6_5,</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_SHORT_5_6_5_REV,           GL_UNSIGNED_SHORT_4_4_4_4,</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_SHORT_4_4_4_4_REV,         GL_UNSIGNED_SHORT_5_5_5_1,</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_SHORT_1_5_5_5_REV,           GL_UNSIGNED_INT_8_8_8_8,</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_INT_8_8_8_8_REV,   GL_UNSIGNED_INT_10_10_10_2,    and</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_INT_2_10_10_10_REV  are only available if the GL ver­</H2><PRE>

</PRE>
<H2>sion is 1.2 or greater.  GLU_INVALID_VALUE is returned if _param8</H2><PRE>
>  _param9,  _param9 &lt; 0, _param10 &lt; _param9 or _param10 is &gt; the

</PRE>
<H2>highest mipmap level for _param11.  GLU_INVALID_VALUE is returned</H2><PRE>

</PRE>
<H2>if  _param3, _param4, or _param5 is </ 1.  GLU_INVALID_ENUM is re­<H2><PRE>
turned  if  _param2,  _param6,   or   _param7   is   not   legal.

</PRE>
<H2>GLU_INVALID_OPERATION     is     returned     if    _param7    is</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_BYTE_3_3_2 or GL_UNSIGNED_BYTE_2_3_3_REV and  _param6</H2><PRE>

</PRE>
<H2>is  not  GL_RGB.  GLU_INVALID_OPERATION is returned if _param7 is</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_SHORT_5_6_5   or   GL_UNSIGNED_SHORT_5_6_5_REV    and</H2><PRE>

</PRE>
<H2>_param6  is  not  GL_RGB.   GLU_INVALID_OPERATION  is returned if</H2><PRE>

</PRE>
<H2>_param7         is          GL_UNSIGNED_SHORT_4_4_4_4          or</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_SHORT_4_4_4_4_REV  and _param6 is neither GL_RGBA nor</H2><PRE>

</PRE>
<H2>GL_BGRA.   GLU_INVALID_OPERATION  is  returned  if   _param7   is</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_SHORT_5_5_5_1  or  GL_UNSIGNED_SHORT_1_5_5_5_REV  and</H2><PRE>

</PRE>
<H2>_param6 is neither GL_RGBA nor GL_BGRA.  GLU_INVALID_OPERATION is</H2><PRE>

</PRE>
<H2>returned     if    _param7    is    GL_UNSIGNED_INT_8_8_8_8    or</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_INT_8_8_8_8_REV and _param6 is  neither  GL_RGBA  nor</H2><PRE>

</PRE>
<H2>GL_BGRA.    GLU_INVALID_OPERATION   is  returned  if  _param7  is</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_INT_10_10_10_2 or GL_UNSIGNED_INT_2_10_10_10_REV  and</H2><PRE>

</PRE>
<H2>_param6  is  neither  GL_RGBA  nor GL_BGRA.  _glcmnd(DrawPixels),</H2><PRE>
_glcmnd(TexImage1D),  _glcmnd(TexImage2D),   _glcmnd(TexImage3D),
_cmnd(Build1DMipmaps),         _cmnd(Build2DMipmaps),        _cm­
nd(Build3DMipmaps),   _cmnd(ErrorString),   _glcmnd(GetTexImage),
_glcmnd(GetTexLevelParameter),  _cmnd(Build1DMipmapLevels),  _cm­
nd(Build2DMipmapLevels)



















@


1.1.1.1
log
@win32-x11 source tree update March 26, 2001
@
text
@@
