head	1.2;
access;
symbols
	win32-x11-2001-03-26:1.1.1.1 SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2001.06.03.20.47.10;	author ssiddiqi;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.25.19.36.50;	author ssiddiqi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.03.25.19.36.50;	author ssiddiqi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Win32-X11 update sources check in, June 3, 2001 - ssiddiqi
@
text
@<HTML>
<BODY>
<PRE>
<!-- Manpage converted by man2html 3.0.1 -->
</PRE>
<HR>
<ADDRESS>
Man(1) output converted with
<a href="http://www.oac.uci.edu/indiv/ehood/man2html.html">man2html</a>
</ADDRESS>
</BODY>
</HTML>
@


1.1
log
@Initial revision
@
text
@a4 274

</PRE>
<H2>GLU_NURBS_NORMAL_DATA,                      GLU_NURBS_COLOR_DATA,</H2><PRE>

</PRE>
<H2>GLU_NURBS_TEXTURE_COORD_DATA,       GLU_NURBS_END_DATA,       and</H2><PRE>

</PRE>
<H2>GLU_NURBS_ERROR.  _phead(_param3) Specifies the function that the</H2><PRE>
callback calls.  _cmnd is used to define a callback to be used by
a NURBS object.  If the specified callback  is  already  defined,
then it is replaced.  If _param3 is NULL, then this callback will
not get invoked and the related data, if any, will be lost.   Ex­
cept  the  error callback, these callbacks are used by NURBS tes­

</PRE>
<H2>sellator (when GLU_NURBS_MODE is set to be GLU_NURBS_TESSELLATOR)</H2><PRE>
to  return  back the OpenGL polygon primitives resulting from the
tessellation. Note that there are two versions of each  callback:
one  with  a  user data pointer and one without. If both versions
for a particular callback are specified then  the  callback  with
the  user  data pointer will be used. Note that ``userData'' is a
copy of the pointer that was specified at the last call  to  _cm­
nd(NurbsCallbackData).   The error callback function is effective

</PRE>
<H2>no matter which value that GLU_NURBS_MODE is set to.   All  other</H2><PRE>

</PRE>
<H2>callback  functions are effective only when GLU_NURBS_MODE is set</H2><PRE>

</PRE>
<H2>to GLU_NURBS_TESSELLATOR.  The legal callbacks  are  as  follows:</H2><PRE>

</PRE>
<H2>GLU_NURBS_BEGIN The begin callback indicates the start of a prim­</H2><PRE>
itive. The function takes a single argument of type GLenum, which

</PRE>
<H2>can   be   one   of   GL_LINES,  GL_LINE_STRIP,  GL_TRIANGLE_FAN,</H2><PRE>

</PRE>
<H2>GL_TRIANGLE_STRIP, GL_TRIANGLES, or  GL_QUAD_STRIP.  The  default</H2><PRE>
begin  callback function is NULL. The function prototype for this
callback   looks   like:   void   begin   (   GLenum   type    );

</PRE>
<H2>GLU_NURBS_BEGIN_DATA The same as the GLU_NURBS_BEGIN callback ex­</H2><PRE>
cept that it takes an additional pointer argument.  This  pointer
is  a  copy of the pointer that was specified at the last call to
_cmnd(NurbsCallbackData).  The default callback function is NULL.
The  function  prototype  for  this callback function looks like:

</PRE>
<H2>void beginData (GLenum type,  void  *userData);  GLU_NURBS_VERTEX</H2><PRE>
The  vertex callback indicates a vertex of the primitive. The co­
ordinates of the vertex are stored in the  parameter  ``vertex''.
All the generated vertices have dimension 3, that is, homogeneous
coordinates have been transformed into  affine  coordinates.  The
default  vertex callback function is NULL. The function prototype
for this callback function looks  like:  void  vertex  (  GLfloat

</PRE>
<H2>*vertex   );  GLU_NURBS_VERTEX_DATA  This  is  the  same  as  the</H2><PRE>

</PRE>
<H2>GLU_NURBS_VERTEX callback, except that  it  takes  an  additional</H2><PRE>
pointer  argument. This pointer is a copy of the pointer that was
specified at the last call to _cmnd(NurbsCallbackData).  The  de­
fault  callback function is NULL. The function prototype for this
callback function looks like: void vertexData ( GLfloat  *vertex,

</PRE>
<H2>void *userData ); GLU_NURBS_NORMAL The normal callback is invoked</H2><PRE>
as the vertex normal is generated.  The components of the  normal
are  stored  in the parameter ``normal''.  In the case of a NURBS
curve, the callback function is effective only when the user pro­

</PRE>
<H2>vides a normal map (GL_MAP1_NORMAL).  In the case of a NURBS sur­</H2><PRE>

</PRE>
<H2>face, if a normal map (GL_MAP2_NORMAL) is provided, then the gen­</H2><PRE>
erated  normal  is computed from the normal map.  If a normal map
is not provided then a surface normal is  computed  in  a  manner

</PRE>
<H2>similar  to  that described for evaluators when GL_AUTO_NORMAL is</H2><PRE>
tion looks like: void normalData ( GLfloat *normal, void *userDa­

</PRE>
<H2>ta ); GLU_NURBS_COLOR The color callback is invoked as the  color</H2><PRE>
of a vertex is generated.  The components of the color are stored
in the parameter ``color''.  This callback is effective only when

</PRE>
<H2>the    user    provides   a   color   map   (GL_MAP1_COLOR_4   or</H2><PRE>

</PRE>
<H2>GL_MAP2_COLOR_4). ``color'' contains  four  components:  R,G,B,A.</H2><PRE>
The  default  color  callback function is NULL. The prototype for
this callback function looks like: void color ( GLfloat *color );

</PRE>
<H2>GLU_NURBS_COLOR_DATA The same as the GLU_NURBS_COLOR callback ex­</H2><PRE>
cept that it takes an additional pointer argument.  This  pointer
is  a  copy of the pointer that was specified at the last call to
_cmnd(NurbsCallbackData).  The default callback function is NULL.
The  function  prototype  for  this callback function looks like:
void   colorData   (   GLfloat   *color,   void   *userData    );

</PRE>
<H2>GLU_NURBS_TEXTURE_COORD  The  texture  callback is invoked as the</H2><PRE>
texture coordinates of a vertex are generated. These  coordinates
are  stored  in the parameter ``texCoord''. The number of texture
coordinates can be 1, 2, 3, or 4 depending on which type of  tex­

</PRE>
<H2>ture      map      is     specified     (GL_MAP1_TEXTURE_COORD_1,</H2><PRE>

</PRE>
<H2>GL_MAP1_TEXTURE_COORD_2,                 GL_MAP1_TEXTURE_COORD_3,</H2><PRE>

</PRE>
<H2>GL_MAP1_TEXTURE_COORD_4,                 GL_MAP2_TEXTURE_COORD_1,</H2><PRE>

</PRE>
<H2>GL_MAP2_TEXTURE_COORD_2,                 GL_MAP2_TEXTURE_COORD_3,</H2><PRE>

</PRE>
<H2>GL_MAP2_TEXTURE_COORD_4).   If  no texture map is specified, this</H2><PRE>
callback function will not be called.




























The default callback function is NULL. The function prototype for
this  callback  function  looks  like: void texCoordData (GLfloat

</PRE>
<H2>*texCoord, void *userData); GLU_NURBS_END The end callback is in­</H2><PRE>
voked  at  the end of a primitive. The default end callback func­
tion is NULL. The function prototype for this  callback  function

</PRE>
<H2>looks  like:  void  end  ( void ); GLU_NURBS_END_DATA This is the</H2><PRE>

</PRE>
<H2>same as the GLU_NURBS_END callback, except that it takes an addi­</H2><PRE>
tional  pointer  argument.  This pointer is a copy of the pointer
that was specified at the last call to  _cmnd(NurbsCallbackData).
The default callback function is NULL. The function prototype for
this callback function looks like: void endData ( void  *userData

</PRE>
<H2>);  GLU_NURBS_ERROR The error function is called when an error is</H2><PRE>
encountered.  Its single argument is of type GLenum, and it indi­
cates  the  specific  error  that  occurred.  There are 37 errors

</PRE>
<H2>unique to NURBS named GLU_NURBS_ERROR1 through GLU_NURBS_ERROR37.</H2><PRE>
Character  strings  describing these errors can be retrieved with
_cmnd(ErrorString).























































































@


1.1.1.1
log
@win32-x11 source tree update March 26, 2001
@
text
@@
