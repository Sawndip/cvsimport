head	1.2;
access;
symbols
	win32-x11-2001-03-26:1.1.1.1 SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2001.06.03.20.47.10;	author ssiddiqi;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.25.19.36.50;	author ssiddiqi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.03.25.19.36.50;	author ssiddiqi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Win32-X11 update sources check in, June 3, 2001 - ssiddiqi
@
text
@<HTML>
<BODY>
<PRE>
<!-- Manpage converted by man2html 3.0.1 -->
</PRE>
<HR>
<ADDRESS>
Man(1) output converted with
<a href="http://www.oac.uci.edu/indiv/ehood/man2html.html">man2html</a>
</ADDRESS>
</BODY>
</HTML>
@


1.1
log
@Initial revision
@
text
@a4 52
surface. You include these trimming loops in the definition of  a
NURBS  surface,  between  calls  to  _cmnd(BeginSurface) and _cm­
nd(EndSurface).  The definition for a NURBS surface  can  contain
many trimming loops. For example, if you wrote a definition for a
NURBS surface that resembled a rectangle with a hole punched out,
the  definition  would contain two trimming loops. One loop would
define the outer edge of the rectangle; the  other  would  define
the hole punched out of the rectangle. The definitions of each of
these  trimming  loops  would  be  bracketed   by   a   _cmnd(Be­
ginTrim)/_cmnd(EndTrim)  pair.  The definition of a single closed
trimming loop can consist of multiple curve  segments,  each  de­
scribed as a piecewise linear curve (see _cmnd(PwlCurve)) or as a
single NURBS curve (see _cmnd(NurbsCurve)), or as  a  combination
of both in any order. The only library calls that can appear in a
trimming loop definition (between the calls  to  _cmnd(BeginTrim)
and  _cmnd(EndTrim))  are  _cmnd(PwlCurve) and _cmnd(NurbsCurve).
The area of the NURBS surface that is displayed is the region  in
the domain to the left of the trimming curve as the curve parame­
ter increases. Thus, the retained region of the NURBS surface  is
inside  a  counterclockwise trimming loop and outside a clockwise
trimming loop. For the rectangle mentioned earlier, the  trimming
loop  for  the outer edge of the rectangle runs counterclockwise,
while the trimming loop for the punched-out hole runs  clockwise.
If  you use more than one curve to define a single trimming loop,
the curve segments must form a closed loop (that is, the endpoint
of  each  curve must be the starting point of the next curve, and
the endpoint of the final curve must be the starting point of the
first  curve).  If  the  endpoints  of the curve are sufficiently
close together but not exactly coincident, they will  be  coerced
to  match.  If the endpoints are not sufficiently close, an error
results (see _cmnd(NurbsCallback)).  If a trimming  loop  defini­
tion  contains  multiple curves, the direction of the curves must
be consistent (that is, the inside must be to the left of all  of
the curves). Nested trimming loops are legal as long as the curve
orientations alternate correctly.  If trimming curves  are  self-
intersecting,  or intersect one another, an error results.  If no
trimming information is given for a  NURBS  surface,  the  entire
surface  is  drawn.   This  code fragment defines a trimming loop
that consists of  one  piecewise  linear  curve,  and  two  NURBS
curves:

gluBeginTrim(nobj);
   gluPwlCurve(..., GLU_MAP1_TRIM_2);
   gluNurbsCurve(..., GLU_MAP1_TRIM_2);
   gluNurbsCurve(...,  GLU_MAP1_TRIM_3);  gluEndTrim(nobj);  _cm­
nd(BeginSurface), _cmnd(NewNurbsRenderer),  _cmnd(NurbsCallback),
_cmnd(NurbsCurve), _cmnd(PwlCurve)





@


1.1.1.1
log
@win32-x11 source tree update March 26, 2001
@
text
@@
