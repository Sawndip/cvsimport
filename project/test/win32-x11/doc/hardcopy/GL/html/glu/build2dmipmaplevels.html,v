head	1.2;
access;
symbols
	win32-x11-2001-03-26:1.1.1.1 SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2001.06.03.20.47.10;	author ssiddiqi;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.25.19.36.50;	author ssiddiqi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.03.25.19.36.50;	author ssiddiqi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Win32-X11 update sources check in, June 3, 2001 - ssiddiqi
@
text
@<HTML>
<BODY>
<PRE>
<!-- Manpage converted by man2html 3.0.1 -->
</PRE>
<HR>
<ADDRESS>
Man(1) output converted with
<a href="http://www.oac.uci.edu/indiv/ehood/man2html.html">man2html</a>
</ADDRESS>
</BODY>
</HTML>
@


1.1
log
@Initial revision
@
text
@a4 194
value that is not accepted by the OpenGL implementation will lead
to  an  OpenGL  error.  The benefit of not checking this value at
the GLU level is that OpenGL extensions can add new internal tex­
ture  formats without requiring a revision of the GLU implementa­
tion.  Older implementations of GLU check this value and raise  a
GLU error if it is not 1, 2, 3, or 4 or one of the following sym­

</PRE>
<H2>bolic  constants:  GL_ALPHA,  GL_ALPHA4,  GL_ALPHA8,  GL_ALPHA12,</H2><PRE>

</PRE>
<H2>GL_ALPHA16,     GL_LUMINANCE,    GL_LUMINANCE4,    GL_LUMINANCE8,</H2><PRE>

</PRE>
<H2>GL_LUMINANCE12,        GL_LUMINANCE16,        GL_LUMINANCE_ALPHA,</H2><PRE>

</PRE>
<H2>GL_LUMINANCE4_ALPHA4, GL_LUMINANCE6_ALPHA2, GL_LUMINANCE8_ALPHA8,</H2><PRE>

</PRE>
<H2>GL_LUMINANCE12_ALPHA4,                    GL_LUMINANCE12_ALPHA12,</H2><PRE>

</PRE>
<H2>GL_LUMINANCE16_ALPHA16,        GL_INTENSITY,       GL_INTENSITY4,</H2><PRE>

</PRE>
<H2>GL_INTENSITY8,    GL_INTENSITY12,     GL_INTENSITY16,     GL_RGB,</H2><PRE>

</PRE>
<H2>GL_R3_G3_B2,   GL_RGB4,  GL_RGB5,  GL_RGB8,  GL_RGB10,  GL_RGB12,</H2><PRE>

</PRE>
<H2>GL_RGB16,  GL_RGBA,  GL_RGBA2,  GL_RGBA4,  GL_RGB5_A1,  GL_RGBA8,</H2><PRE>

</PRE>
<H2>GL_RGB10_A2,  GL_RGBA12  or  GL_RGBA16.   _phead(_param3 _param4)</H2><PRE>
Specifies the width and height, respectively, in  pixels  of  the
texture  image.   These  should be a power of 2.  _phead(_param5)
Specifies  the  format  of  the  pixel  data.   Must  be  one  of

</PRE>
<H2>GL_COLOR_INDEX,  GL_DEPTH_COMPONENT,  GL_RED,  GL_GREEN, GL_BLUE,</H2><PRE>

</PRE>
<H2>GL_ALPHA, GL_RGB,  GL_RGBA,  GL_BGR,  GL_BGRA,  GL_LUMINANCE,  or</H2><PRE>

</PRE>
<H2>GL_LUMINANCE_ALPHA.   _phead(_param6) Specifies the data type for</H2><PRE>

</PRE>
<H2>_param10.  Must be one of GL_UNSIGNED_BYTE,  GL_BYTE,  GL_BITMAP,</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_SHORT,  GL_SHORT,  GL_UNSIGNED_INT, GL_INT, GL_FLOAT,</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_BYTE_3_3_2,               GL_UNSIGNED_BYTE_2_3_3_REV,</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_SHORT_5_6_5,             GL_UNSIGNED_SHORT_5_6_5_REV,</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_SHORT_4_4_4_4,         GL_UNSIGNED_SHORT_4_4_4_4_REV,</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_SHORT_5_5_5_1,         GL_UNSIGNED_SHORT_1_5_5_5_REV,</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_INT_8_8_8_8,             GL_UNSIGNED_INT_8_8_8_8_REV,</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_INT_10_10_10_2   or   GL_UNSIGNED_INT_2_10_10_10_REV.</H2><PRE>
_phead(_param7) Specifies the mipmap level  of  the  image  data.
_phead(_param8)  Specifies  the  minimum  mipmap level to pass to
_glcmnd(TexImage2D).   _phead(_param9)  Specifies   the   maximum
mipmap  level  to  pass to _glcmnd(TexImage2D).  _phead(_param10)
Specifies a pointer to the image data in memory.  _cmnd builds  a
subset  of prefiltered two-dimensional texture maps of decreasing
resolutions called a mipmap. This is used for the antialiasing of
texture mapped primitives.  A return value of zero indicates suc­
cess, otherwise a GLU  error  code  is  returned  (see  _cmnd(Er­
rorString)).   A  series of mipmap levels from _param8 to _param9
is built by decimating _param10 in half along both dimensions un­
til  size  $1 ~times~ 1$ is reached. At each level, each texel in
the halved mipmap level is an average of the  corresponding  four
texels  in  the  larger mipmap level. (In the case of rectangular
images, the decimation will ultimately reach an $N ~times~ 1$  or
$1  ~times~  N$  configuration. Here, two texels are averaged in­
stead.)  _glcmnd(TexImage2D) is called to load these mipmap  lev­
els  from _param8 to _param9. If _param9 is larger than the high­
est mipmap level for the texture of the specified  size,  then  a
GLU  error  code is returned (see _cmnd(ErrorString)) and nothing
is loaded.  For example, if _param7 is 2 and _param3  is  16  and
_param4  is 8, the following levels are possible: $16 ~times~ 8$,

</PRE>
<H2>GL_UNSIGNED_SHORT_5_6_5_REV,           GL_UNSIGNED_SHORT_4_4_4_4,</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_SHORT_4_4_4_4_REV,         GL_UNSIGNED_SHORT_5_5_5_1,</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_SHORT_1_5_5_5_REV,           GL_UNSIGNED_INT_8_8_8_8,</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_INT_8_8_8_8_REV,    GL_UNSIGNED_INT_10_10_10_2,   and</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_INT_2_10_10_10_REV are only available if the GL  ver­</H2><PRE>

</PRE>
<H2>sion is 1.2 or greater.  GLU_INVALID_VALUE is returned if _param7</H2><PRE>
> _param8, _param8 &lt; 0, _param9 &lt; _param8 or  _param9  is  &gt;  the

</PRE>
<H2>highest mipmap level for _param10.  GLU_INVALID_VALUE is returned</H2><PRE>

</PRE>
<H2>if _param3 or _param4 is </ 1.  GLU_INVALID_ENUM  is  returned  if<H2><PRE>

</PRE>
<H2>_param2, _param5, or _param6 is not legal.  GLU_INVALID_OPERATION</H2><PRE>

</PRE>
<H2>is   returned   if   _param6   is    GL_UNSIGNED_BYTE_3_3_2    or</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_BYTE_2_3_3_REV    and    _param5   is   not   GL_RGB.</H2><PRE>

</PRE>
<H2>GLU_INVALID_OPERATION    is    returned     if     _param6     is</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_SHORT_5_6_5    or   GL_UNSIGNED_SHORT_5_6_5_REV   and</H2><PRE>

</PRE>
<H2>_param5 is not  GL_RGB.   GLU_INVALID_OPERATION  is  returned  if</H2><PRE>

</PRE>
<H2>_param6          is          GL_UNSIGNED_SHORT_4_4_4_4         or</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_SHORT_4_4_4_4_REV and _param5 is neither GL_RGBA  nor</H2><PRE>

</PRE>
<H2>GL_BGRA.    GLU_INVALID_OPERATION   is  returned  if  _param6  is</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_SHORT_5_5_5_1  or  GL_UNSIGNED_SHORT_1_5_5_5_REV  and</H2><PRE>

</PRE>
<H2>_param5 is neither GL_RGBA nor GL_BGRA.  GLU_INVALID_OPERATION is</H2><PRE>

</PRE>
<H2>returned    if    _param6    is    GL_UNSIGNED_INT_8_8_8_8     or</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_INT_8_8_8_8_REV  and  _param5  is neither GL_RGBA nor</H2><PRE>

</PRE>
<H2>GL_BGRA.   GLU_INVALID_OPERATION  is  returned  if   _param6   is</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_INT_10_10_10_2  or GL_UNSIGNED_INT_2_10_10_10_REV and</H2><PRE>

</PRE>
<H2>_param5 is neither  GL_RGBA  nor  GL_BGRA.   _glcmnd(DrawPixels),</H2><PRE>
_glcmnd(TexImage1D),   _glcmnd(TexImage2D),  _glcmnd(TexImage3D),
_cmnd(Build1DMipmaps),        _cmnd(Build2DMipmaps),         _cm­
nd(Build3DMipmaps),   _cmnd(ErrorString),   _glcmnd(GetTexImage),
_glcmnd(GetTexLevelParameter),  _cmnd(Build1DMipmapLevels),  _cm­
nd(Build3DMipmapLevels)






















@


1.1.1.1
log
@win32-x11 source tree update March 26, 2001
@
text
@@
