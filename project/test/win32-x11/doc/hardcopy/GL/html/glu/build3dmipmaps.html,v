head	1.2;
access;
symbols
	win32-x11-2001-03-26:1.1.1.1 SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2001.06.03.20.47.10;	author ssiddiqi;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.25.19.36.50;	author ssiddiqi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.03.25.19.36.50;	author ssiddiqi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Win32-X11 update sources check in, June 3, 2001 - ssiddiqi
@
text
@<HTML>
<BODY>
<PRE>
<!-- Manpage converted by man2html 3.0.1 -->
</PRE>
<HR>
<ADDRESS>
Man(1) output converted with
<a href="http://www.oac.uci.edu/indiv/ehood/man2html.html">man2html</a>
</ADDRESS>
</BODY>
</HTML>
@


1.1
log
@Initial revision
@
text
@a4 194
plementation will lead to an OpenGL error.  The  benefit  of  not
checking  this  value  at the GLU level is that OpenGL extensions
can add new internal texture formats without requiring a revision
of  the  GLU  implementation.  Older implementations of GLU check
this value and raise a GLU error if it is not 1, 2, 3,  or  4  or

</PRE>
<H2>one  of  the  following  symbolic constants: GL_ALPHA, GL_ALPHA4,</H2><PRE>

</PRE>
<H2>GL_ALPHA8, GL_ALPHA12, GL_ALPHA16,  GL_LUMINANCE,  GL_LUMINANCE4,</H2><PRE>

</PRE>
<H2>GL_LUMINANCE8,           GL_LUMINANCE12,          GL_LUMINANCE16,</H2><PRE>

</PRE>
<H2>GL_LUMINANCE_ALPHA,  GL_LUMINANCE4_ALPHA4,  GL_LUMINANCE6_ALPHA2,</H2><PRE>

</PRE>
<H2>GL_LUMINANCE8_ALPHA8,                      GL_LUMINANCE12_ALPHA4,</H2><PRE>

</PRE>
<H2>GL_LUMINANCE12_ALPHA12,   GL_LUMINANCE16_ALPHA16,   GL_INTENSITY,</H2><PRE>

</PRE>
<H2>GL_INTENSITY4,   GL_INTENSITY8,  GL_INTENSITY12,  GL_INTENSITY16,</H2><PRE>

</PRE>
<H2>GL_RGB,  GL_R3_G3_B2,  GL_RGB4,   GL_RGB5,   GL_RGB8,   GL_RGB10,</H2><PRE>

</PRE>
<H2>GL_RGB12,  GL_RGB16,  GL_RGBA,  GL_RGBA2,  GL_RGBA4,  GL_RGB5_A1,</H2><PRE>

</PRE>
<H2>GL_RGBA8, GL_RGB10_A2, GL_RGBA12, or  GL_RGBA16.   _phead(_param3</H2><PRE>
_param4  _param5) Specifies in pixels the width, height and depth
respectively, in pixels of the  texture  image.   _phead(_param6)
Specifies  the  format  of  the  pixel  data.   Must  be  one  of

</PRE>
<H2>GL_COLOR_INDEX, GL_DEPTH_COMPONENT,  GL_RED,  GL_GREEN,  GL_BLUE,</H2><PRE>

</PRE>
<H2>GL_ALPHA,  GL_RGB,  GL_RGBA,  GL_BGR,  GL_BGRA,  GL_LUMINANCE, or</H2><PRE>

</PRE>
<H2>GL_LUMINANCE_ALPHA.  _phead(_param7) Specifies the data type  for</H2><PRE>

</PRE>
<H2>_param8.   Must  be one of: GL_UNSIGNED_BYTE, GL_BYTE, GL_BITMAP,</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT,  GL_INT,  GL_FLOAT,</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_BYTE_3_3_2,               GL_UNSIGNED_BYTE_2_3_3_REV,</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_SHORT_5_6_5,             GL_UNSIGNED_SHORT_5_6_5_REV,</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_SHORT_4_4_4_4,         GL_UNSIGNED_SHORT_4_4_4_4_REV,</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_SHORT_5_5_5_1,         GL_UNSIGNED_SHORT_1_5_5_5_REV,</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_INT_8_8_8_8,             GL_UNSIGNED_INT_8_8_8_8_REV,</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_INT_10_10_10_2,  or   GL_UNSIGNED_INT_2_10_10_10_REV.</H2><PRE>
_phead(_param8)  Specifies a pointer to the image data in memory.
_cmnd builds a series of  prefiltered  three-dimensional  texture
maps  of decreasing resolutions called a mipmap. This is used for
the antialiasing of texture-mapped primitives.  A return value of
zero  indicates  success,  otherwise a GLU error code is returned
(see _cmnd(ErrorString)).  Initially, the  _param3,  _param4  and
_param5  of  _param8 are checked to see if they are a power of 2.
If not, a copy of _param8 (not _param8), is scaled up or down  to
the nearest power of 2. (If _param3, _param4 or _param5 is exact­
ly between powers of 2, then the copy of _param8 will  scale  up­
wards.)  This  copy will be used for subsequent mipmapping opera­
tions described below.  For example, if _param3 is 57, _param4 is
23  and  _param5 is 24 then a copy of _param8 will scale up to 64
in width, down to 16 in height and up  to  32  in  depth,  before
mipmapping takes place.  Then, proxy textures (see _glcmnd(TexIm­
age3D)) are used to determine if the implementation can  fit  the
requested  texture.  If not, all three dimensions are continually
halved until it fits.  Next, a series of mipmap levels  is  built
by  decimating  a  copy of _param8 in half along all three dimen­
sions until size $1 ~times~ 1 ~times~ 1$ is reached. At each lev­
el,  each  texel  in the halved mipmap level is an average of the
corresponding eight texels in the larger mipmap level. (If exact­
ly  one of the dimensions is 1, four texels are averaged.  If ex­
of querying the maximum level. This can be derived indirectly via
_glcmnd(GetTexLevelParameter). First, query for the width, height
and depth actually used at level 0.  (The width, height and depth
may  not  be  equal  to _param3, _param4 and _param5 respectively
since proxy textures might have scaled them to fit the  implemen­
tation.)   Then the maximum level can be derived from the formula
${log sub 2} ( max  (_eqnparam3,_eqnparam4,_eqnparam5))$.   _cmnd
is  only available if the GLU version is 1.3 or greater.  Formats

</PRE>
<H2>GL_BGR,   and   GL_BGRA,   and   types    GL_UNSIGNED_BYTE_3_3_2,</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_BYTE_2_3_3_REV,              GL_UNSIGNED_SHORT_5_6_5,</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_SHORT_5_6_5_REV,           GL_UNSIGNED_SHORT_4_4_4_4,</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_SHORT_4_4_4_4_REV,         GL_UNSIGNED_SHORT_5_5_5_1,</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_SHORT_1_5_5_5_REV,           GL_UNSIGNED_INT_8_8_8_8,</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_INT_8_8_8_8_REV,    GL_UNSIGNED_INT_10_10_10_2,   and</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_INT_2_10_10_10_REV are only available if the GL  ver­</H2><PRE>

</PRE>
<H2>sion  is  1.2  or  greater.   GLU_INVALID_VALUE  is  returned  if</H2><PRE>

</PRE>
<H2>_param3, _param4, or _param5 is </  1.   GLU_INVALID_ENUM  is  re­<H2><PRE>
turned   if   _param2,   _param6,   or   _param7  is  not  legal.

</PRE>
<H2>GLU_INVALID_OPERATION    is    returned     if     _param7     is</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_BYTE_3_3_2  or GL_UNSIGNED_BYTE_2_3_3_REV and _param6</H2><PRE>

</PRE>
<H2>is not GL_RGB.  GLU_INVALID_OPERATION is returned if  _param7  is</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_SHORT_5_6_5    or   GL_UNSIGNED_SHORT_5_6_5_REV   and</H2><PRE>

</PRE>
<H2>_param6 is not  GL_RGB.   GLU_INVALID_OPERATION  is  returned  if</H2><PRE>

</PRE>
<H2>_param7          is          GL_UNSIGNED_SHORT_4_4_4_4         or</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_SHORT_4_4_4_4_REV and _param6 is neither GL_RGBA  nor</H2><PRE>

</PRE>
<H2>GL_BGRA.    GLU_INVALID_OPERATION   is  returned  if  _param7  is</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_SHORT_5_5_5_1  or  GL_UNSIGNED_SHORT_1_5_5_5_REV  and</H2><PRE>

</PRE>
<H2>_param6 is neither GL_RGBA nor GL_BGRA.  GLU_INVALID_OPERATION is</H2><PRE>

</PRE>
<H2>returned    if    _param7    is    GL_UNSIGNED_INT_8_8_8_8     or</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_INT_8_8_8_8_REV  and  _param6  is neither GL_RGBA nor</H2><PRE>

</PRE>
<H2>GL_BGRA.   GLU_INVALID_OPERATION  is  returned  if   _param7   is</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_INT_10_10_10_2  or GL_UNSIGNED_INT_2_10_10_10_REV and</H2><PRE>

</PRE>
<H2>_param6 is neither  GL_RGBA  nor  GL_BGRA.   _glcmnd(DrawPixels),</H2><PRE>
_glcmnd(TexImage1D),   _glcmnd(TexImage2D),  _glcmnd(TexImage3D),
_cmnd(Build1DMipmaps), _cmnd(Build3DMipmaps), _cmnd(ErrorString),
_glcmnd(GetTexImage),     _glcmnd(GetTexLevelParameter),     _cm­
nd(Build1DMipmapLevels),     _cmnd(Build2DMipmapLevels),     _cm­
nd(Build3DMipmapLevels)














@


1.1.1.1
log
@win32-x11 source tree update March 26, 2001
@
text
@@
