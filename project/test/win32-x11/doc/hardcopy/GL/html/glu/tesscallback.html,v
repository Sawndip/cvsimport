head	1.2;
access;
symbols
	win32-x11-2001-03-26:1.1.1.1 SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2001.06.03.20.47.10;	author ssiddiqi;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.25.19.36.50;	author ssiddiqi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.03.25.19.36.50;	author ssiddiqi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Win32-X11 update sources check in, June 3, 2001 - ssiddiqi
@
text
@<HTML>
<BODY>
<PRE>
<!-- Manpage converted by man2html 3.0.1 -->
</PRE>
<HR>
<ADDRESS>
Man(1) output converted with
<a href="http://www.oac.uci.edu/indiv/ehood/man2html.html">man2html</a>
</ADDRESS>
</BODY>
</HTML>
@


1.1
log
@Initial revision
@
text
@a4 212

</PRE>
<H2>GLU_TESS_COMBINE,  GLU_TESS_COMBINE_DATA,   GLU_TESS_ERROR,   and</H2><PRE>

</PRE>
<H2>GLU_TESS_ERROR_DATA.   _phead(_param3)  Specifies the function to</H2><PRE>
be called.  _cmnd is used to indicate a callback to be used by  a
tessellation  object.   If  the specified callback is already de­
fined, then it is replaced. If _param3 is NULL, then the existing
callback becomes undefined.  These callbacks are used by the tes­
sellation object to describe how a polygon specified by the  user
is  broken  into  triangles.  Note that there are two versions of
each callback: one with user-specified polygon data and one with­
out.  If  both  versions  of a particular callback are specified,
then the callback with user-specified polygon data will be  used.

</PRE>
<H2>Note  that  the  polygon_data parameter used by some of the func­</H2><PRE>
tions is a copy of the  pointer  that  was  specified  when  _cm­
nd(TessBeginPolygon)  was called. The legal callbacks are as fol­

</PRE>
<H2>lows: GLU_TESS_BEGIN The begin callback is  invoked  like  _glcm­</H2><PRE>
nd(Begin)  to  indicate  the start of a (triangle) primitive. The
function  takes  a  single  argument  of  type  GLenum.  If   the

</PRE>
<H2>GLU_TESS_BOUNDARY_ONLY  property is set to GL_FALSE, then the ar­</H2><PRE>

</PRE>
<H2>gument is set to either  GL_TRIANGLE_FAN,  GL_TRIANGLE_STRIP,  or</H2><PRE>

</PRE>
<H2>GL_TRIANGLES.  If  the  GLU_TESS_BOUNDARY_ONLY property is set to</H2><PRE>

</PRE>
<H2>GL_TRUE, then the argument will be set to GL_LINE_LOOP. The func­</H2><PRE>
tion  prototype for this callback is: void begin ( GLenum type );

</PRE>
<H2>GLU_TESS_BEGIN_DATA The same as the GLU_TESS_BEGIN  callback  ex­</H2><PRE>
cept  that  it takes an additional pointer argument. This pointer
is identical to the opaque pointer provided when _cmnd(TessBegin­
Polygon) was called. The function prototype for this callback is:
void   beginData   (   GLenum   type,   void   *polygon_data   );

</PRE>
<H2>GLU_TESS_EDGE_FLAG  The  edge  flag callback is similar to _glcm­</H2><PRE>
nd(EdgeFlag). The function takes a single boolean flag that indi­
cates  which  edges  lie  on the polygon boundary. If the flag is

</PRE>
<H2>GL_TRUE, then each vertex that follows begins an edge  that  lies</H2><PRE>
on the polygon boundary, that is, an edge that separates an inte­

</PRE>
<H2>rior region from an exterior one.  If the flag is GL_FALSE,  then</H2><PRE>
each  vertex that follows begins an edge that lies in the polygon
interior. The edge flag callback (if defined) is  invoked  before
the  first  vertex  callback.   Since  triangle fans and triangle
strips do not support edge  flags,  the  begin  callback  is  not

</PRE>
<H2>called  with  GL_TRIANGLE_FAN  or GL_TRIANGLE_STRIP if a non-NULL</H2><PRE>
edge flag callback is provided. (If the callback  is  initialized
to  NULL,  there  is no impact on performance). Instead, the fans
and strips are converted to independent triangles.  The  function
prototype for this callback is: void edgeFlag ( GLboolean flag );

</PRE>
<H2>GLU_TESS_EDGE_FLAG_DATA The same as the GLU_TESS_EDGE_FLAG  call­</H2><PRE>
back  except  that  it takes an additional pointer argument. This
pointer is identical to the opaque  pointer  provided  when  _cm­
nd(TessBeginPolygon)  was called. The function prototype for this
callback is: void edgeFlagData  (  GLboolean  flag,  void  *poly­

</PRE>
<H2>gon_data  );  GLU_TESS_VERTEX  The vertex callback is invoked be­</H2><PRE>
tween the begin and end callbacks.  It is similar to _glcmnd(Ver­
tex), and it defines the vertices of the triangles created by the
tessellation process. The function takes a pointer  as  its  only
argument.   This  pointer is identical to the opaque pointer pro­
prototype for this callback is: void endData ( void  *polygon_da­

</PRE>
<H2>ta);  GLU_TESS_COMBINE The combine callback is called to create a</H2><PRE>
new vertex when the  tessellation  detects  an  intersection,  or
wishes  to  merge features. The function takes four arguments: an
array of three elements each of type GLdouble, an array  of  four
pointers,  an  array of four elements each of type GLfloat, and a
pointer to a pointer. The prototype is:  void  combine(  GLdouble
coords[3], void *vertex_data[4],
              GLfloat  weight[4], void **outData ); The vertex is
defined as a linear combination of up to four existing  vertices,

</PRE>
<H2>stored in vertex_data. The coefficients of the linear combination</H2><PRE>
are given by <I>weight</I>; these weights always add up to 1.  All  ver­
tex  pointers are valid even when some of the weights are 0.  <I>co­</I>
<I>ords</I> gives the location of the new vertex.  The user  must  allo­

</PRE>
<H2>cate another vertex, interpolate parameters using vertex_data and</H2><PRE>
<I>weight</I>, and return the new vertex pointer in <I>outData</I>. This handle
is  supplied during rendering callbacks.  The user is responsible
for freeing the memory some time after  _cmnd(TessEndPolygon)  is
called.   For  example, if the polygon lies in an arbitrary plane
in 3-space, and a color  is  associated  with  each  vertex,  the

</PRE>
<H2>GLU_TESS_COMBINE  callback  might look like this: void myCombine(</H2><PRE>
GLdouble coords[3], VERTEX *d[4],
                GLfloat w[4], VERTEX **dataOut ) {
   VERTEX *new = new_vertex();

   new-&gt;x = coords[0];
   new-&gt;y = coords[1];
   new-&gt;z = coords[2];
   new-&gt;r  =  w[0]*d[0]-&gt;r  +  w[1]*d[1]-&gt;r  +   w[2]*d[2]-&gt;r   +
w[3]*d[3]-&gt;r;
   new-&gt;g   =   w[0]*d[0]-&gt;g  +  w[1]*d[1]-&gt;g  +  w[2]*d[2]-&gt;g  +
w[3]*d[3]-&gt;g;
   new-&gt;b  =  w[0]*d[0]-&gt;b  +  w[1]*d[1]-&gt;b  +   w[2]*d[2]-&gt;b   +
w[3]*d[3]-&gt;b;
   new-&gt;a   =   w[0]*d[0]-&gt;a  +  w[1]*d[1]-&gt;a  +  w[2]*d[2]-&gt;a  +
w[3]*d[3]-&gt;a;
   *dataOut = new; } If the tessellation detects an intersection,

</PRE>
<H2>then  the GLU_TESS_COMBINE or GLU_TESS_COMBINE_DATA callback (see</H2><PRE>
below) must be defined, and it must write a non-NULL pointer into

</PRE>
<H2>dataOut.  Otherwise  the GLU_TESS_NEED_COMBINE_CALLBACK error oc­</H2><PRE>

</PRE>
<H2>curs, and no output is generated.  GLU_TESS_COMBINE_DATA The same</H2><PRE>

</PRE>
<H2>as  the  GLU_TESS_COMBINE  callback except that it takes an addi­</H2><PRE>
tional pointer argument. This pointer is identical to the  opaque
pointer  provided  when  _cmnd(TessBeginPolygon)  was called. The
function prototype for  this  callback  is:  void  combineData  (
GLdouble coords[3], void *vertex_data[4],
                   GLfloat weight[4], void **outData,
                   void *polygon_data ); <B>GLU_TESS_ERROR</B> The error
callback is called when an error is encountered. The one argument
is  of type GLenum; it indicates the specific error that occurred

</PRE>
<H2>and  will  be  set  to  one  of   GLU_TESS_MISSING_BEGIN_POLYGON,</H2><PRE>

</PRE>
<H2>GLU_TESS_MISSING_END_POLYGON,     GLU_TESS_MISSING_BEGIN_CONTOUR,</H2><PRE>

</PRE>
<H2>GLU_OUT_OF_MEMORY indicates that there is not enough memory so no</H2><PRE>

</PRE>
<H2>output   is  generated.   GLU_TESS_ERROR_DATA  The  same  as  the</H2><PRE>

</PRE>
<H2>GLU_TESS_ERROR callback except that it takes an additional point­</H2><PRE>
er argument. This pointer is identical to the opaque pointer pro­
vided when _cmnd(TessBeginPolygon) was called. The function  pro­
totype  for this callback is: void errorData ( GLenum errno, void
*polygon_data ); Polygons tessellated can  be  rendered  directly
like this:

gluTessCallback(tobj,   GLU_TESS_BEGIN,   glBegin);  gluTessCall­
back(tobj, GLU_TESS_VERTEX,  glVertex3dv);  gluTessCallback(tobj,
GLU_TESS_END, glEnd); gluTessCallback(tobj, GLU_TESS_COMBINE, my­
Combine); gluTessBeginPolygon(tobj, NULL);
  gluTessBeginContour(tobj);
    gluTessVertex(tobj, v, v);
    ...
  gluTessEndContour(tobj); gluTessEndPolygon(tobj);

Typically, the tessellated polygon should be stored in a  display
list  so  that it does not need to be retessellated every time it
is rendered.  _glcmnd(Begin), _glcmnd(EdgeFlag), _glcmnd(Vertex),
_cmnd(NewTess),   _cmnd(ErrorString),   _cmnd(TessVertex),   _cm­
nd(TessBeginPolygon), _cmnd(TessBeginContour),  _cmnd(TessProper­
ty), _cmnd(TessNormal)




























@


1.1.1.1
log
@win32-x11 source tree update March 26, 2001
@
text
@@
