head	1.2;
access;
symbols
	win32-x11-2001-03-26:1.1.1.1 SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2001.06.03.20.47.10;	author ssiddiqi;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.25.19.36.50;	author ssiddiqi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.03.25.19.36.50;	author ssiddiqi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Win32-X11 update sources check in, June 3, 2001 - ssiddiqi
@
text
@<HTML>
<BODY>
<PRE>
<!-- Manpage converted by man2html 3.0.1 -->
</PRE>
<HR>
<ADDRESS>
Man(1) output converted with
<a href="http://www.oac.uci.edu/indiv/ehood/man2html.html">man2html</a>
</ADDRESS>
</BODY>
</HTML>
@


1.1
log
@Initial revision
@
text
@a4 198
value of the indicated property.  It may be a numeric  value,  or

</PRE>
<H2>one of GLU_OUTLINE_POLYGON, GLU_FILL, GLU_OUTLINE_PATCH, GL_TRUE,</H2><PRE>

</PRE>
<H2>GL_FALSE,         GLU_PATH_LENGTH,          GLU_PARAMETRIC_ERROR,</H2><PRE>

</PRE>
<H2>GLU_DOMAIN_DISTANCE,            GLU_NURBS_RENDERER,            or</H2><PRE>

</PRE>
<H2>GLU_NURBS_TESSELLATOR.   _cmnd  is  used  to  control  properties</H2><PRE>
stored  in a NURBS object. These properties affect the way that a
NURBS curve is rendered. The accepted values for _param2  are  as

</PRE>
<H2>follows:  GLU_NURBS_MODE  _param3  should  be  set  to  be either</H2><PRE>

</PRE>
<H2>GLU_NURBS_RENDERER  or   GLU_NURBS_TESSELLATOR.   When   set   to</H2><PRE>

</PRE>
<H2>GLU_NURBS_RENDERER,  NURBS  objects  are  tessellated into OpenGL</H2><PRE>
primitives and sent to the pipeline for rendering.  When  set  to

</PRE>
<H2>GLU_NURBS_TESSELLATOR,  NURBS objects are tessellated into OpenGL</H2><PRE>
primitives but the vertices, normals, colors, and/or textures are
retrieved back through a callback interface (see _cmnd(NurbsCall­
back)). This allows the user to cache the tessellated results for

</PRE>
<H2>further  processing.   The  initial  value is GLU_NURBS_RENDERER.</H2><PRE>

</PRE>
<H2>GLU_SAMPLING_METHOD Specifies how a NURBS surface should be  tes­</H2><PRE>

</PRE>
<H2>sellated.     _param3    may    be    one   of   GLU_PATH_LENGTH,</H2><PRE>

</PRE>
<H2>GLU_PARAMETRIC_ERROR,                        GLU_DOMAIN_DISTANCE,</H2><PRE>

</PRE>
<H2>GLU_OBJECT_PATH_LENGTH, or GLU_OBJECT_PARAMETRIC_ERROR.  When set</H2><PRE>

</PRE>
<H2>to GLU_PATH_LENGTH, the surface is rendered so that  the  maximum</H2><PRE>
length,  in  pixels, of the edges of the tessellation polygons is

</PRE>
<H2>no greater than  what  is  specified  by  GLU_SAMPLING_TOLERANCE.</H2><PRE>

</PRE>
<H2>GLU_PARAMETRIC_ERROR  specifies  that  the surface is rendered in</H2><PRE>

</PRE>
<H2>such a way that the value specified  by  GLU_PARAMETRIC_TOLERANCE</H2><PRE>
describes  the maximum distance, in pixels, between the tessella­
tion   polygons    and    the    surfaces    they    approximate.

</PRE>
<H2>GLU_DOMAIN_DISTANCE  allows users to specify, in parametric coor­</H2><PRE>
dinates, how many sample points per unit length are taken in <I>u</I>, <I>v</I>

</PRE>
<H2>direction.  GLU_OBJECT_PATH_LENGTH  is similar to GLU_PATH_LENGTH</H2><PRE>
except that it is view independent, that is, the surface is  ren­
dered  so  that  the maximum length, in object space, of edges of
the tessellation polygons is no greater than what is specified by

</PRE>
<H2>GLU_SAMPLING_TOLERANCE.   GLU_OBJECT_PARAMETRIC_ERROR  is similar</H2><PRE>

</PRE>
<H2>to  GLU_PARAMETRIC_ERROR except that it is view independent, that</H2><PRE>
is,  the  surface is rendered in such a way that the value speci­

</PRE>
<H2>fied by GLU_PARAMETRIC_TOLERANCE describes the maximum  distance,</H2><PRE>
in  object  space, between the tessellation polygons and the sur­

</PRE>
<H2>faces they approximate.  The initial value of GLU_SAMPLING_METHOD</H2><PRE>

</PRE>
<H2>is GLU_PATH_LENGTH.  GLU_SAMPLING_TOLERANCE Specifies the maximum</H2><PRE>
length, in pixels or in object space length unit, to use when the

</PRE>
<H2>sampling     method     is     set    to    GLU_PATH_LENGTH    or</H2><PRE>

</PRE>
<H2>GLU_OBJECT_PATH_LENGTH.  The NURBS code is conservative when ren­</H2><PRE>
dering  a  curve or surface, so the actual length can be somewhat
shorter.    The     initial     value     is     50.0     pixels.

</PRE>
<H2>GLU_PARAMETRIC_TOLERANCE  Specifies the maximum distance, in pix­</H2><PRE>
els or in object space length unit,  to  use  when  the  sampling

</PRE>
<H2>method  is  GLU_PARAMETRIC_ERROR  or GLU_OBJECT_PARAMETRIC_ERROR.</H2><PRE>

</PRE>
<H2>The initial value is 0.5.  GLU_U_STEP  Specifies  the  number  of</H2><PRE>
sample  points per unit length taken along the <I>u</I> axis in paramet­

</PRE>
<H2>ric coordinates. It is needed when GLU_SAMPLING_METHOD is set  to</H2><PRE>

</PRE>
<H2>GLU_DOMAIN_DISTANCE.  The initial value is 100.  GLU_V_STEP Spec­</H2><PRE>

</PRE>
<H2>GLU_DISPLAY_MODE is set to GLU_FILL or  GLU_OUTLINE_POLYGON,  the</H2><PRE>
NURBS  surface  is  tessellated  into  OpenGL triangle primitives
which can be  retrieved  back   through  callback  functions.  If

</PRE>
<H2>GLU_DISPLAY_MODE  is  set to GLU_OUTLINE_PATCH, only the outlines</H2><PRE>
of the patches and trim curves are generated  as  a  sequence  of
line  strips  which  can be retrieved back through callback func­

</PRE>
<H2>tions.  The initial value is GLU_FILL.  GLU_CULLING _param3 is  a</H2><PRE>

</PRE>
<H2>boolean  value  that, when set to GL_TRUE, indicates that a NURBS</H2><PRE>
curve should be discarded prior to tessellation  if  its  control
points  lie  outside  the  current viewport. The initial value is

</PRE>
<H2>GL_FALSE.  GLU_AUTO_LOAD_MATRIX _param3 is a boolean value.  When</H2><PRE>

</PRE>
<H2>set  to  GL_TRUE, the NURBS code downloads the projection matrix,</H2><PRE>
the modelview matrix, and the viewport from the GL server to com­
pute  sampling  and culling matrices for each NURBS curve that is
rendered. Sampling and culling matrices are required to determine
the  tessellation  of a NURBS surface into line segments or poly­
gons and to cull a NURBS surface if it lies outside the viewport.

</PRE>
<H2>If  this  mode is set to GL_FALSE, then the program needs to pro­</H2><PRE>
vide a projection matrix, a modelview matrix, and a viewport  for
the  NURBS  renderer to use to construct sampling and culling ma­
trices.  This can be done  with  the  _cmnd(LoadSamplingMatrices)

</PRE>
<H2>function.   This  mode  is initially set to GL_TRUE.  Changing it</H2><PRE>

</PRE>
<H2>from GL_TRUE to GL_FALSE does not affect the sampling and culling</H2><PRE>
matrices   until   _cmnd(LoadSamplingMatrices)   is  called.   If

</PRE>
<H2>GLU_AUTO_LOAD_MATRIX is true, sampling and culling may be execut­</H2><PRE>
ed  incorrectly  if  NURBS  routines  are compiled into a display

</PRE>
<H2>list.       A      _param2      of      GLU_PARAMETRIC_TOLERANCE,</H2><PRE>

</PRE>
<H2>GLU_SAMPLING_METHOD,  GLU_U_STEP,  or GLU_V_STEP, or a _param3 of</H2><PRE>

</PRE>
<H2>GLU_PATH_LENGTH,  GLU_PARAMETRIC_ERROR,  GLU_DOMAIN_DISTANCE  are</H2><PRE>
only available if the GLU version is 1.1 or greater. They are not
valid parameters in GLU 1.0.  _cmnd(GetString) can be used to de­

</PRE>
<H2>termine  the GLU version.  GLU_NURBS_MODE is only availble if the</H2><PRE>

</PRE>
<H2>GLU version is 1.3 or greater.   The  GLU_OBJECT_PATH_LENGTH  and</H2><PRE>

</PRE>
<H2>GLU_OBJECT_PARAMETRIC_ERROR  values  for  the GLU_SAMPLING_METHOD</H2><PRE>
property are only available if the GLU version is 1.3 or greater.
_cmnd(GetNurbsProperty),     _cmnd(LoadSamplingMatrices),    _cm­
nd(NewNurbsRenderer), _cmnd(GetString), _cmnd(NurbsCallback)















@


1.1.1.1
log
@win32-x11 source tree update March 26, 2001
@
text
@@
