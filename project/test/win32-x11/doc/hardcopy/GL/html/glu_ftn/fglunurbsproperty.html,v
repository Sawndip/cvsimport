head	1.2;
access;
symbols
	win32-x11-2001-03-26:1.1.1.1 SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2001.06.03.20.47.11;	author ssiddiqi;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.25.19.36.50;	author ssiddiqi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.03.25.19.36.50;	author ssiddiqi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Win32-X11 update sources check in, June 3, 2001 - ssiddiqi
@
text
@<HTML>
<BODY>
<PRE>
<!-- Manpage converted by man2html 3.0.1 -->
</PRE>
<HR>
<ADDRESS>
Man(1) output converted with
<a href="http://www.oac.uci.edu/indiv/ehood/man2html.html">man2html</a>
</ADDRESS>
</BODY>
</HTML>
@


1.1
log
@Initial revision
@
text
@a4 204

</PRE>
<H2>cated property.  It may be a numeric value, or  one  of  GLU_OUT­</H2><PRE>

</PRE>
<H2>LINE_POLYGON,  GLU_FILL,  GLU_OUTLINE_PATCH,  GL_TRUE,  GL_FALSE,</H2><PRE>

</PRE>
<H2>GLU_PATH_LENGTH,    GLU_PARAMETRIC_ERROR,    GLU_DOMAIN_DISTANCE,</H2><PRE>

</PRE>
<H2>GLU_NURBS_RENDERER,  or  GLU_NURBS_TESSELLATOR.  _cmnd is used to</H2><PRE>
control properties stored in a NURBS object. These properties af­
fect  the way that a NURBS curve is rendered. The accepted values

</PRE>
<H2>for _param2 are as follows: GLU_NURBS_MODE _param3 should be  set</H2><PRE>

</PRE>
<H2>to  be  either  GLU_NURBS_RENDERER or GLU_NURBS_TESSELLATOR. When</H2><PRE>

</PRE>
<H2>set to GLU_NURBS_RENDERER, NURBS  objects  are  tessellated  into</H2><PRE>
OpenGL  primitives  and  sent to the pipeline for rendering. When

</PRE>
<H2>set to GLU_NURBS_TESSELLATOR, NURBS objects are tessellated  into</H2><PRE>
OpenGL  primitives but the vertices, normals, colors, and/or tex­
tures are retrieved back through a callback interface  (see  _cm­
nd(NurbsCallback)). This allows the user to cache the tessellated
results  for  further   processing.    The   initial   value   is

</PRE>
<H2>GLU_NURBS_RENDERER.   GLU_SAMPLING_METHOD  Specifies  how a NURBS</H2><PRE>
surface  should  be  tessellated.   _param3   may   be   one   of

</PRE>
<H2>GLU_PATH_LENGTH,    GLU_PARAMETRIC_ERROR,    GLU_DOMAIN_DISTANCE,</H2><PRE>

</PRE>
<H2>GLU_OBJECT_PATH_LENGTH, or GLU_OBJECT_PARAMETRIC_ERROR.  When set</H2><PRE>

</PRE>
<H2>to  GLU_PATH_LENGTH,  the surface is rendered so that the maximum</H2><PRE>
length, in pixels, of the edges of the tessellation  polygons  is

</PRE>
<H2>no  greater  than  what  is  specified by GLU_SAMPLING_TOLERANCE.</H2><PRE>

</PRE>
<H2>GLU_PARAMETRIC_ERROR specifies that the surface  is  rendered  in</H2><PRE>

</PRE>
<H2>such  a  way that the value specified by GLU_PARAMETRIC_TOLERANCE</H2><PRE>
describes the maximum distance, in pixels, between the  tessella­

</PRE>
<H2>tion polygons and the surfaces they approximate.  GLU_DOMAIN_DIS­</H2><PRE>

</PRE>
<H2>TANCE allows users to specify,  in  parametric  coordinates,  how</H2><PRE>
many  sample  points per unit length are taken in <I>u</I>, <I>v</I> direction.

</PRE>
<H2>GLU_OBJECT_PATH_LENGTH  is similar to GLU_PATH_LENGTH except that</H2><PRE>
it  is view independent, that is, the surface is rendered so that
the maximum length, in object space, of edges of the tessellation

</PRE>
<H2>polygons  is  no  greater  than  what  is  specified  by GLU_SAM­</H2><PRE>

</PRE>
<H2>PLING_TOLERANCE.   GLU_OBJECT_PARAMETRIC_ERROR  is   similar   to</H2><PRE>

</PRE>
<H2>GLU_PARAMETRIC_ERROR except that it is view independent, that is,</H2><PRE>
the surface is rendered in such a way that the value specified by

</PRE>
<H2>GLU_PARAMETRIC_TOLERANCE  describes  the maximum distance, in ob­</H2><PRE>
ject space, between the tessellation polygons  and  the  surfaces

</PRE>
<H2>they  approximate.   The  initial value of GLU_SAMPLING_METHOD is</H2><PRE>

</PRE>
<H2>GLU_PATH_LENGTH.  GLU_SAMPLING_TOLERANCE  Specifies  the  maximum</H2><PRE>
length, in pixels or in object space length unit, to use when the

</PRE>
<H2>sampling  method   is   set   to   GLU_PATH_LENGTH   or   GLU_OB­</H2><PRE>

</PRE>
<H2>JECT_PATH_LENGTH.   The NURBS code is conservative when rendering</H2><PRE>
a curve or surface, so the actual length can be somewhat shorter.

</PRE>
<H2>The initial value is 50.0 pixels.  GLU_PARAMETRIC_TOLERANCE Spec­</H2><PRE>
ifies the maximum distance, in pixels or in object  space  length

</PRE>
<H2>unit,  to use when the sampling method is GLU_PARAMETRIC_ERROR or</H2><PRE>

</PRE>
<H2>GLU_OBJECT_PARAMETRIC_ERROR.    The   initial   value   is   0.5.</H2><PRE>

</PRE>
<H2>GLU_U_STEP  Specifies the number of sample points per unit length</H2><PRE>
taken along the <I>u</I> axis in parametric coordinates.  It  is  needed

</PRE>
<H2>when GLU_SAMPLING_METHOD is set to GLU_DOMAIN_DISTANCE.  The ini­</H2><PRE>

</PRE>
<H2>tial value is 100.  GLU_V_STEP Specifies  the  number  of  sample</H2><PRE>
points per unit length taken along the <I>v</I> axis in parametric coor­

</PRE>
<H2>be  retrieved  back   through  callback  functions.  If  GLU_DIS­</H2><PRE>

</PRE>
<H2>PLAY_MODE  is  set to GLU_OUTLINE_PATCH, only the outlines of the</H2><PRE>
patches and trim curves are  generated  as  a  sequence  of  line
strips  which  can  be retrieved back through callback functions.

</PRE>
<H2>The initial value is GLU_FILL.  GLU_CULLING _param3 is a  boolean</H2><PRE>

</PRE>
<H2>value  that,  when  set  to GL_TRUE, indicates that a NURBS curve</H2><PRE>
should be discarded prior to tessellation if its  control  points

</PRE>
<H2>lie  outside the current viewport. The initial value is GL_FALSE.</H2><PRE>

</PRE>
<H2>GLU_AUTO_LOAD_MATRIX _param3 is a  boolean  value.  When  set  to</H2><PRE>

</PRE>
<H2>GL_TRUE, the NURBS code downloads the projection matrix, the mod­</H2><PRE>
elview matrix, and the viewport from the  GL  server  to  compute
sampling  and  culling matrices for each NURBS curve that is ren­
dered. Sampling and culling matrices are  required  to  determine
the  tessellation  of a NURBS surface into line segments or poly­
gons and to cull a NURBS surface if it lies outside the viewport.

</PRE>
<H2>If  this  mode is set to GL_FALSE, then the program needs to pro­</H2><PRE>
vide a projection matrix, a modelview matrix, and a viewport  for
the  NURBS  renderer to use to construct sampling and culling ma­
trices.  This can be done  with  the  _cmnd(LoadSamplingMatrices)

</PRE>
<H2>function.   This  mode  is initially set to GL_TRUE.  Changing it</H2><PRE>

</PRE>
<H2>from GL_TRUE to GL_FALSE does not affect the sampling and culling</H2><PRE>

</PRE>
<H2>matrices until _cmnd(LoadSamplingMatrices) is called.  If GLU_AU­</H2><PRE>

</PRE>
<H2>TO_LOAD_MATRIX is true, sampling and culling may be executed  in­</H2><PRE>
correctly  if NURBS routines are compiled into a display list.  A

</PRE>
<H2>_param2   of    GLU_PARAMETRIC_TOLERANCE,    GLU_SAMPLING_METHOD,</H2><PRE>

</PRE>
<H2>GLU_U_STEP,  or  GLU_V_STEP,  or  a  _param3  of GLU_PATH_LENGTH,</H2><PRE>

</PRE>
<H2>GLU_PARAMETRIC_ERROR, GLU_DOMAIN_DISTANCE are only  available  if</H2><PRE>
the  GLU version is 1.1 or greater. They are not valid parameters
in GLU 1.0.  _cmnd(GetString) can be used to  determine  the  GLU

</PRE>
<H2>version.   GLU_NURBS_MODE  is only availble if the GLU version is</H2><PRE>

</PRE>
<H2>1.3 or greater.  The GLU_OBJECT_PATH_LENGTH and  GLU_OBJECT_PARA­</H2><PRE>

</PRE>
<H2>METRIC_ERROR values for the GLU_SAMPLING_METHOD property are only</H2><PRE>
available if the GLU version is 1.3 or  greater.   _cmnd(GetNurb­
sProperty), _cmnd(LoadSamplingMatrices), _cmnd(NewNurbsRenderer),
_cmnd(GetString), _cmnd(NurbsCallback)

















@


1.1.1.1
log
@win32-x11 source tree update March 26, 2001
@
text
@@
