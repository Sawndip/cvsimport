head	1.2;
access;
symbols
	win32-x11-2001-03-26:1.1.1.1 SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2001.06.03.20.47.11;	author ssiddiqi;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.25.19.36.50;	author ssiddiqi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.03.25.19.36.50;	author ssiddiqi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Win32-X11 update sources check in, June 3, 2001 - ssiddiqi
@
text
@<HTML>
<BODY>
<PRE>
<!-- Manpage converted by man2html 3.0.1 -->
</PRE>
<HR>
<ADDRESS>
Man(1) output converted with
<a href="http://www.oac.uci.edu/indiv/ehood/man2html.html">man2html</a>
</ADDRESS>
</BODY>
</HTML>
@


1.1
log
@Initial revision
@
text
@a4 278

</PRE>
<H2>TA,      GLU_NURBS_COLOR_DATA,      GLU_NURBS_TEXTURE_COORD_DATA,</H2><PRE>

</PRE>
<H2>GLU_NURBS_END_DATA,  and GLU_NURBS_ERROR.  _phead(_param3) Speci­</H2><PRE>
fies the function that the callback calls.  _cmnd is used to  de­
fine  a  callback to be used by a NURBS object.  If the specified
callback is already defined, then it is replaced.  If _param3  is
NULL, then this callback will not get invoked and the related da­
ta, if any, will be lost.  Except the error callback, these call­

</PRE>
<H2>backs  are  used by NURBS tessellator (when GLU_NURBS_MODE is set</H2><PRE>

</PRE>
<H2>to be GLU_NURBS_TESSELLATOR) to return back  the  OpenGL  polygon</H2><PRE>
primitives  resulting  from the tessellation. Note that there are
two versions of each callback: one with a user data  pointer  and
one without. If both versions for a particular callback are spec­
ified then the callback with the user data pointer will be  used.
Note  that  ``userData'' is a copy of the pointer that was speci­
fied at the last call  to  _cmnd(NurbsCallbackData).   The  error
callback  function  is  effective  no  matter  which  value  that

</PRE>
<H2>GLU_NURBS_MODE is set to.  All other callback functions  are  ef­</H2><PRE>

</PRE>
<H2>fective only when GLU_NURBS_MODE is set to GLU_NURBS_TESSELLATOR.</H2><PRE>

</PRE>
<H2>The legal callbacks are as  follows:  GLU_NURBS_BEGIN  The  begin</H2><PRE>
callback indicates the start of a primitive. The function takes a

</PRE>
<H2>single argument of type GLenum, which can  be  one  of  GL_LINES,</H2><PRE>

</PRE>
<H2>GL_LINE_STRIP,  GL_TRIANGLE_FAN, GL_TRIANGLE_STRIP, GL_TRIANGLES,</H2><PRE>

</PRE>
<H2>or GL_QUAD_STRIP. The default begin callback  function  is  NULL.</H2><PRE>
The function prototype for this callback looks like: void begin (

</PRE>
<H2>GLenum type ); GLU_NURBS_BEGIN_DATA The same as the GLU_NURBS_BE­</H2><PRE>

</PRE>
<H2>GIN callback except that it takes an additional pointer argument.</H2><PRE>
This pointer is a copy of the pointer that was specified  at  the
last  call  to  _cmnd(NurbsCallbackData).   The  default callback
function is NULL. The function prototype for this callback  func­
tion  looks  like:  void beginData (GLenum type, void *userData);

</PRE>
<H2>GLU_NURBS_VERTEX The vertex callback indicates a  vertex  of  the</H2><PRE>
primitive. The coordinates of the vertex are stored in the param­
eter ``vertex''. All the generated  vertices  have  dimension  3,
that  is,  homogeneous  coordinates  have  been  transformed into
affine coordinates. The default vertex callback function is NULL.
The  function  prototype  for  this callback function looks like:

</PRE>
<H2>void vertex ( GLfloat *vertex );  GLU_NURBS_VERTEX_DATA  This  is</H2><PRE>

</PRE>
<H2>the  same  as the GLU_NURBS_VERTEX callback, except that it takes</H2><PRE>
an additional pointer argument. This pointer is  a  copy  of  the
pointer  that  was specified at the last call to _cmnd(NurbsCall­
backData).  The default callback function is NULL.  The  function
prototype  for this callback function looks like: void vertexData

</PRE>
<H2>( GLfloat *vertex, void *userData ); GLU_NURBS_NORMAL The  normal</H2><PRE>
callback  is invoked as the vertex normal is generated.  The com­
ponents of the normal are stored in the parameter ``normal''.  In
the case of a NURBS curve, the callback function is effective on­

</PRE>
<H2>ly when the user provides a normal map (GL_MAP1_NORMAL).  In  the</H2><PRE>

</PRE>
<H2>case of a NURBS surface, if a normal map (GL_MAP2_NORMAL) is pro­</H2><PRE>
vided, then the generated normal is computed from the normal map.
If a normal map is not provided then a surface normal is computed

</PRE>
<H2>in a manner similar to that described for evaluators when  GL_AU­</H2><PRE>

</PRE>
<H2>TO_NORMAL is enabled.</H2><PRE>
tion looks like: void normalData ( GLfloat *normal, void *userDa­

</PRE>
<H2>ta  ); GLU_NURBS_COLOR The color callback is invoked as the color</H2><PRE>
of a vertex is generated.  The components of the color are stored
in the parameter ``color''.  This callback is effective only when

</PRE>
<H2>the user provides a color map  (GL_MAP1_COLOR_4  or  GL_MAP2_COL­</H2><PRE>

</PRE>
<H2>OR_4).  ``color''  contains four components: R,G,B,A. The default</H2><PRE>
color callback function is NULL. The prototype for this  callback
function   looks   like:   void   color   (   GLfloat  *color  );

</PRE>
<H2>GLU_NURBS_COLOR_DATA The same as the GLU_NURBS_COLOR callback ex­</H2><PRE>
cept  that  it takes an additional pointer argument. This pointer
is a copy of the pointer that was specified at the last  call  to
_cmnd(NurbsCallbackData).  The default callback function is NULL.
The function prototype for this  callback  function  looks  like:

</PRE>
<H2>void colorData ( GLfloat *color, void *userData ); GLU_NURBS_TEX­</H2><PRE>

</PRE>
<H2>TURE_COORD The texture callback is invoked as the texture coordi­</H2><PRE>
nates  of a vertex are generated. These coordinates are stored in
the parameter ``texCoord''. The number of texture coordinates can
be 1, 2, 3, or 4 depending on which type of texture map is speci­

</PRE>
<H2>fied      (GL_MAP1_TEXTURE_COORD_1,      GL_MAP1_TEXTURE_COORD_2,</H2><PRE>

</PRE>
<H2>GL_MAP1_TEXTURE_COORD_3,   GL_MAP1_TEXTURE_COORD_4,  GL_MAP2_TEX­</H2><PRE>

</PRE>
<H2>TURE_COORD_1,  GL_MAP2_TEXTURE_COORD_2,  GL_MAP2_TEXTURE_COORD_3,</H2><PRE>

</PRE>
<H2>GL_MAP2_TEXTURE_COORD_4).   If  no texture map is specified, this</H2><PRE>
callback function will not be called.





























The default callback function is NULL. The function prototype for
this  callback  function  looks  like: void texCoordData (GLfloat

</PRE>
<H2>*texCoord, void *userData); GLU_NURBS_END The end callback is in­</H2><PRE>
voked  at  the end of a primitive. The default end callback func­
tion is NULL. The function prototype for this  callback  function

</PRE>
<H2>looks  like:  void  end  ( void ); GLU_NURBS_END_DATA This is the</H2><PRE>

</PRE>
<H2>same as the GLU_NURBS_END callback, except that it takes an addi­</H2><PRE>
tional  pointer  argument.  This pointer is a copy of the pointer
that was specified at the last call to  _cmnd(NurbsCallbackData).
The default callback function is NULL. The function prototype for
this callback function looks like: void endData ( void  *userData

</PRE>
<H2>);  GLU_NURBS_ERROR The error function is called when an error is</H2><PRE>
encountered.  Its single argument is of type GLenum, and it indi­
cates  the  specific  error  that  occurred.  There are 37 errors

</PRE>
<H2>unique to NURBS named GLU_NURBS_ERROR1 through GLU_NURBS_ERROR37.</H2><PRE>
Character  strings  describing these errors can be retrieved with
_cmnd(ErrorString).























































































@


1.1.1.1
log
@win32-x11 source tree update March 26, 2001
@
text
@@
