head	1.2;
access;
symbols
	win32-x11-2001-03-26:1.1.1.1 SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2001.06.03.20.47.11;	author ssiddiqi;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.25.19.36.50;	author ssiddiqi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.03.25.19.36.50;	author ssiddiqi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Win32-X11 update sources check in, June 3, 2001 - ssiddiqi
@
text
@<HTML>
<BODY>
<PRE>
<!-- Manpage converted by man2html 3.0.1 -->
</PRE>
<HR>
<ADDRESS>
Man(1) output converted with
<a href="http://www.oac.uci.edu/indiv/ehood/man2html.html">man2html</a>
</ADDRESS>
</BODY>
</HTML>
@


1.1
log
@Initial revision
@
text
@a4 192
is not accepted by the OpenGL  implementation  will  lead  to  an
OpenGL  error.  The benefit of not checking this value at the GLU
level is that OpenGL extensions can add new internal texture for­
mats  without  requiring  a  revision  of the GLU implementation.
Older implementations of GLU check this value and raise a GLU er­
ror  if  it is not 1, 2, 3, or 4 or one of the following symbolic

</PRE>
<H2>constants: GL_ALPHA,  GL_ALPHA4,  GL_ALPHA8,  GL_ALPHA12,  GL_AL­</H2><PRE>

</PRE>
<H2>PHA16,   GL_LUMINANCE,   GL_LUMINANCE4,  GL_LUMINANCE8,  GL_LUMI­</H2><PRE>

</PRE>
<H2>NANCE12,  GL_LUMINANCE16,  GL_LUMINANCE_ALPHA,  GL_LUMINANCE4_AL­</H2><PRE>

</PRE>
<H2>PHA4,    GL_LUMINANCE6_ALPHA2,   GL_LUMINANCE8_ALPHA8,   GL_LUMI­</H2><PRE>

</PRE>
<H2>NANCE12_ALPHA4,  GL_LUMINANCE12_ALPHA12,  GL_LUMINANCE16_ALPHA16,</H2><PRE>

</PRE>
<H2>GL_INTENSITY,   GL_INTENSITY4,   GL_INTENSITY8,   GL_INTENSITY12,</H2><PRE>

</PRE>
<H2>GL_INTENSITY16, GL_RGB, GL_R3_G3_B2, GL_RGB4,  GL_RGB5,  GL_RGB8,</H2><PRE>

</PRE>
<H2>GL_RGB10,   GL_RGB12,   GL_RGB16,  GL_RGBA,  GL_RGBA2,  GL_RGBA4,</H2><PRE>

</PRE>
<H2>GL_RGB5_A1,  GL_RGBA8,  GL_RGB10_A2,  GL_RGBA12   or   GL_RGBA16.</H2><PRE>
_phead(_param3  _param4)  Specifies the width and height, respec­
tively, in pixels of the texture image.  These should be a  power
of  2.   _phead(_param5)  Specifies the format of the pixel data.

</PRE>
<H2>Must  be  one  of  GL_COLOR_INDEX,  GL_DEPTH_COMPONENT,   GL_RED,</H2><PRE>

</PRE>
<H2>GL_GREEN,  GL_BLUE,  GL_ALPHA,  GL_RGB, GL_RGBA, GL_BGR, GL_BGRA,</H2><PRE>

</PRE>
<H2>GL_LUMINANCE, or GL_LUMINANCE_ALPHA.   _phead(_param6)  Specifies</H2><PRE>

</PRE>
<H2>the  data  type  for  _param10.  Must be one of GL_UNSIGNED_BYTE,</H2><PRE>

</PRE>
<H2>GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT,</H2><PRE>

</PRE>
<H2>GL_INT,       GL_FLOAT,       GL_UNSIGNED_BYTE_3_3_2,      GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_BYTE_2_3_3_REV,      GL_UNSIGNED_SHORT_5_6_5,       GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_SHORT_5_6_5_REV,     GL_UNSIGNED_SHORT_4_4_4_4,     GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_SHORT_4_4_4_4_REV,    GL_UNSIGNED_SHORT_5_5_5_1,    GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_SHORT_1_5_5_5_REV,     GL_UNSIGNED_INT_8_8_8_8,     GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_INT_8_8_8_8_REV,  GL_UNSIGNED_INT_10_10_10_2   or   GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_INT_2_10_10_10_REV.   _phead(_param7) Specifies the mipmap</H2><PRE>
level of the image data.  _phead(_param8) Specifies  the  minimum
mipmap  level  to  pass  to _glcmnd(TexImage2D).  _phead(_param9)
Specifies the maximum mipmap  level  to  pass  to  _glcmnd(TexIm­
age2D).   _phead(_param10)  Specifies a pointer to the image data
in memory.  _cmnd builds a subset of prefiltered  two-dimensional
texture  maps  of decreasing resolutions called a mipmap. This is
used for the antialiasing of texture mapped primitives.  A return
value  of  zero  indicates success, otherwise a GLU error code is
returned (see _cmnd(ErrorString)).  A  series  of  mipmap  levels
from  _param8  to _param9 is built by decimating _param10 in half
along both dimensions until size $1 ~times~  1$  is  reached.  At
each  level,  each texel in the halved mipmap level is an average
of the corresponding four texels in the larger mipmap level.  (In
the  case  of  rectangular images, the decimation will ultimately
reach an $N ~times~ 1$ or $1 ~times~ N$ configuration. Here,  two
texels  are  averaged instead.)  _glcmnd(TexImage2D) is called to
load these mipmap levels from _param8 to _param9. If  _param9  is
larger than the highest mipmap level for the texture of the spec­
ified size, then a GLU error  code  is  returned  (see  _cmnd(Er­
rorString))  and nothing is loaded.  For example, if _param7 is 2
and _param3 is 16 and _param4 is 8, the following levels are pos­
sible:  $16  ~times~ 8$, $8 ~times~ 4$, $4 ~times~ 2$, $2 ~times~

</PRE>
<H2>SIGNED_SHORT_4_4_4_4,    GL_UNSIGNED_SHORT_4_4_4_4_REV,    GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_SHORT_5_5_5_1,    GL_UNSIGNED_SHORT_1_5_5_5_REV,    GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_INT_8_8_8_8,      GL_UNSIGNED_INT_8_8_8_8_REV,      GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are on­</H2><PRE>

</PRE>
<H2>ly available if the  GL  version  is  1.2  or  greater.   GLU_IN­</H2><PRE>

</PRE>
<H2>VALID_VALUE  is  returned  if  _param7  >  _param8,  _param8 </ 0,<H2><PRE>
_param9 &lt; _param8 or _param9 is &gt; the highest  mipmap  level  for

</PRE>
<H2>_param10.  GLU_INVALID_VALUE is returned if _param3 or _param4 is</H2><PRE>

</PRE>
<H2></ 1.   GLU_INVALID_ENUM  is  returned  if  _param2,  _param5,  or<H2><PRE>

</PRE>
<H2>_param6  is  not  legal.   GLU_INVALID_OPERATION  is  returned if</H2><PRE>

</PRE>
<H2>_param6 is GL_UNSIGNED_BYTE_3_3_2  or  GL_UNSIGNED_BYTE_2_3_3_REV</H2><PRE>

</PRE>
<H2>and  _param5 is not GL_RGB.  GLU_INVALID_OPERATION is returned if</H2><PRE>

</PRE>
<H2>_param6 is GL_UNSIGNED_SHORT_5_6_5 or GL_UNSIGNED_SHORT_5_6_5_REV</H2><PRE>

</PRE>
<H2>and  _param5 is not GL_RGB.  GLU_INVALID_OPERATION is returned if</H2><PRE>

</PRE>
<H2>_param6     is      GL_UNSIGNED_SHORT_4_4_4_4      or      GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_SHORT_4_4_4_4_REV  and  _param5  is  neither  GL_RGBA  nor</H2><PRE>

</PRE>
<H2>GL_BGRA.  GLU_INVALID_OPERATION is returned if _param6 is  GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_SHORT_5_5_5_1 or GL_UNSIGNED_SHORT_1_5_5_5_REV and _param5</H2><PRE>

</PRE>
<H2>is neither GL_RGBA nor  GL_BGRA.   GLU_INVALID_OPERATION  is  re­</H2><PRE>

</PRE>
<H2>turned   if   _param6   is   GL_UNSIGNED_INT_8_8_8_8   or  GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_INT_8_8_8_8_REV  and  _param5  is  neither   GL_RGBA   nor</H2><PRE>

</PRE>
<H2>GL_BGRA.   GLU_INVALID_OPERATION is returned if _param6 is GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_INT_10_10_10_2   or   GL_UNSIGNED_INT_2_10_10_10_REV   and</H2><PRE>

</PRE>
<H2>_param5  is  neither  GL_RGBA  nor GL_BGRA.  _glcmnd(DrawPixels),</H2><PRE>
_glcmnd(TexImage1D),  _glcmnd(TexImage2D),   _glcmnd(TexImage3D),
_cmnd(Build1DMipmaps),         _cmnd(Build2DMipmaps),        _cm­
nd(Build3DMipmaps),   _cmnd(ErrorString),   _glcmnd(GetTexImage),
_glcmnd(GetTexLevelParameter),  _cmnd(Build1DMipmapLevels),  _cm­
nd(Build3DMipmapLevels)























@


1.1.1.1
log
@win32-x11 source tree update March 26, 2001
@
text
@@
