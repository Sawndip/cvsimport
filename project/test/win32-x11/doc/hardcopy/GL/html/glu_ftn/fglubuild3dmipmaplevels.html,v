head	1.2;
access;
symbols
	win32-x11-2001-03-26:1.1.1.1 SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2001.06.03.20.47.11;	author ssiddiqi;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.25.19.36.50;	author ssiddiqi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.03.25.19.36.50;	author ssiddiqi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Win32-X11 update sources check in, June 3, 2001 - ssiddiqi
@
text
@<HTML>
<BODY>
<PRE>
<!-- Manpage converted by man2html 3.0.1 -->
</PRE>
<HR>
<ADDRESS>
Man(1) output converted with
<a href="http://www.oac.uci.edu/indiv/ehood/man2html.html">man2html</a>
</ADDRESS>
</BODY>
</HTML>
@


1.1
log
@Initial revision
@
text
@a4 198
is not accepted by the OpenGL  implementation  will  lead  to  an
OpenGL  error.  The benefit of not checking this value at the GLU
level is that OpenGL extensions can add new internal texture for­
mats  without  requiring  a  revision  of the GLU implementation.
Older implementations of GLU check this value and raise a GLU er­
ror  if  it is not 1, 2, 3, or 4 or one of the following symbolic

</PRE>
<H2>constants: GL_ALPHA,  GL_ALPHA4,  GL_ALPHA8,  GL_ALPHA12,  GL_AL­</H2><PRE>

</PRE>
<H2>PHA16,   GL_LUMINANCE,   GL_LUMINANCE4,  GL_LUMINANCE8,  GL_LUMI­</H2><PRE>

</PRE>
<H2>NANCE12,  GL_LUMINANCE16,  GL_LUMINANCE_ALPHA,  GL_LUMINANCE4_AL­</H2><PRE>

</PRE>
<H2>PHA4,    GL_LUMINANCE6_ALPHA2,   GL_LUMINANCE8_ALPHA8,   GL_LUMI­</H2><PRE>

</PRE>
<H2>NANCE12_ALPHA4,  GL_LUMINANCE12_ALPHA12,  GL_LUMINANCE16_ALPHA16,</H2><PRE>

</PRE>
<H2>GL_INTENSITY,   GL_INTENSITY4,   GL_INTENSITY8,   GL_INTENSITY12,</H2><PRE>

</PRE>
<H2>GL_INTENSITY16, GL_RGB, GL_R3_G3_B2, GL_RGB4,  GL_RGB5,  GL_RGB8,</H2><PRE>

</PRE>
<H2>GL_RGB10,   GL_RGB12,   GL_RGB16,  GL_RGBA,  GL_RGBA2,  GL_RGBA4,</H2><PRE>

</PRE>
<H2>GL_RGB5_A1,  GL_RGBA8,  GL_RGB10_A2,  GL_RGBA12,  or   GL_RGBA16.</H2><PRE>
_phead(_param3  _param4  _param5)  Specifies in pixels the width,
height and depth respectively, of the texture image. These should
be  a  power  of  2.  _phead(_param6) Specifies the format of the

</PRE>
<H2>pixel data.  Must be one of  GL_COLOR_INDEX,  GL_DEPTH_COMPONENT,</H2><PRE>

</PRE>
<H2>GL_RED,  GL_GREEN,  GL_BLUE,  GL_ALPHA,  GL_RGB, GL_RGBA, GL_BGR,</H2><PRE>

</PRE>
<H2>GL_BGRA, GL_LUMINANCE,  or  GL_LUMINANCE_ALPHA.   _phead(_param7)</H2><PRE>

</PRE>
<H2>Specifies  the  data  type  for  _param11.  Must be one of GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_BYTE,  GL_BYTE,  GL_BITMAP,  GL_UNSIGNED_SHORT,  GL_SHORT,</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_BYTE_2_3_3_REV,      GL_UNSIGNED_SHORT_5_6_5,       GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_SHORT_5_6_5_REV,     GL_UNSIGNED_SHORT_4_4_4_4,     GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_SHORT_4_4_4_4_REV,    GL_UNSIGNED_SHORT_5_5_5_1,    GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_SHORT_1_5_5_5_REV,     GL_UNSIGNED_INT_8_8_8_8,     GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_INT_8_8_8_8_REV,  GL_UNSIGNED_INT_10_10_10_2,  or   GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_INT_2_10_10_10_REV.   _phead(_param8) Specifies the mipmap</H2><PRE>
level of the image data.  _phead(_param9) Specifies  the  minimum
mipmap  level  to  pass to _glcmnd(TexImage3D).  _phead(_param10)
Specifies the maximum mipmap  level  to  pass  to  _glcmnd(TexIm­
age3D).   _phead(_param11)  Specifies a pointer to the image data
in memory.  _cmnd builds a subset of prefiltered three-dimension­
al  texture  maps of decreasing resolutions called a mipmap. This
is used for the antialiasing of texture mapped primitives.  A re­
turn  value of zero indicates success, otherwise a GLU error code
is returned (see _cmnd(ErrorString)).  A series of mipmap  levels
from  _param9 to _param10 is built by decimating _param11 in half
along both dimensions until size  $1  ~times~  1  ~times~  1$  is
reached.  At each level, each texel in the halved mipmap level is
an average of the corresponding eight texels in the larger mipmap
level.  (If  exactly  one of the dimensions is 1, four texels are
averaged.  If exactly two of the dimensions are 1, two texels are
averaged.)   _glcmnd(TexImage3D)  is  called to load these mipmap
levels from _param9 to _param10. If _param10 is larger  than  the
highest  mipmap level for the texture of the specified size, then
a GLU error code is returned (see _cmnd(ErrorString)) and nothing
is  loaded.   For  example,  if  _param8  is 2 and _param3 is 16,
_param4 is 8 and _param5 is 4, the following levels are possible:
$16  ~times~  8 ~times~ 4$, $8 ~times~ 4 ~times~ 2$, $4 ~times~ 2

</PRE>
<H2>GL_UNSIGNED_BYTE_3_3_2,    GL_UNSIGNED_BYTE_2_3_3_REV,     GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_SHORT_5_6_5,      GL_UNSIGNED_SHORT_5_6_5_REV,      GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_SHORT_4_4_4_4,    GL_UNSIGNED_SHORT_4_4_4_4_REV,    GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_SHORT_5_5_5_1,    GL_UNSIGNED_SHORT_1_5_5_5_REV,    GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_INT_8_8_8_8,      GL_UNSIGNED_INT_8_8_8_8_REV,      GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are on­</H2><PRE>

</PRE>
<H2>ly available if the  GL  version  is  1.2  or  greater.   GLU_IN­</H2><PRE>

</PRE>
<H2>VALID_VALUE  is  returned  if  _param8  >  _param9,  _param9 </ 0,<H2><PRE>
_param10 &lt; _param9 or _param10 is &gt; the highest mipmap level  for

</PRE>
<H2>_param11.   GLU_INVALID_VALUE is returned if _param3, _param4, or</H2><PRE>

</PRE>
<H2>_param5  is  </  1.   GLU_INVALID_ENUM  is  returned  if  _param2,<H2><PRE>

</PRE>
<H2>_param6,  or  _param7 is not legal.  GLU_INVALID_OPERATION is re­</H2><PRE>

</PRE>
<H2>turned   if   _param7   is   GL_UNSIGNED_BYTE_3_3_2   or   GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_BYTE_2_3_3_REV and _param6 is not GL_RGB.  GLU_INVALID_OP­</H2><PRE>

</PRE>
<H2>ERATION is returned  if  _param7  is  GL_UNSIGNED_SHORT_5_6_5  or</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_SHORT_5_6_5_REV  and  _param6 is not GL_RGB.  GLU_IN­</H2><PRE>

</PRE>
<H2>VALID_OPERATION   is    returned    if    _param7    is    GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_SHORT_4_4_4_4 or GL_UNSIGNED_SHORT_4_4_4_4_REV and _param6</H2><PRE>

</PRE>
<H2>is neither GL_RGBA nor  GL_BGRA.   GLU_INVALID_OPERATION  is  re­</H2><PRE>

</PRE>
<H2>turned   if   _param7   is  GL_UNSIGNED_SHORT_5_5_5_1  or  GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_SHORT_1_5_5_5_REV  and  _param6  is  neither  GL_RGBA  nor</H2><PRE>

</PRE>
<H2>GL_BGRA.   GLU_INVALID_OPERATION is returned if _param7 is GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_INT_8_8_8_8 or GL_UNSIGNED_INT_8_8_8_8_REV and _param6  is</H2><PRE>

</PRE>
<H2>neither  GL_RGBA  nor GL_BGRA.  GLU_INVALID_OPERATION is returned</H2><PRE>

</PRE>
<H2>if    _param7    is    GL_UNSIGNED_INT_10_10_10_2    or    GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_INT_2_10_10_10_REV  and  _param6  is  neither  GL_RGBA nor</H2><PRE>

</PRE>
<H2>GL_BGRA.  _glcmnd(DrawPixels), _glcmnd(TexImage1D),  _glcmnd(Tex­</H2><PRE>
Image2D),    _glcmnd(TexImage3D),   _cmnd(Build1DMipmaps),   _cm­
nd(Build2DMipmaps),  _cmnd(Build3DMipmaps),   _cmnd(ErrorString),
_glcmnd(GetTexImage),     _glcmnd(GetTexLevelParameter),     _cm­
nd(Build1DMipmapLevels), _cmnd(Build2DMipmapLevels)





















@


1.1.1.1
log
@win32-x11 source tree update March 26, 2001
@
text
@@
