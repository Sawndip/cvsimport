head	1.2;
access;
symbols
	win32-x11-2001-03-26:1.1.1.1 SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2001.06.03.20.47.11;	author ssiddiqi;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.25.19.36.50;	author ssiddiqi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.03.25.19.36.50;	author ssiddiqi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Win32-X11 update sources check in, June 3, 2001 - ssiddiqi
@
text
@<HTML>
<BODY>
<PRE>
<!-- Manpage converted by man2html 3.0.1 -->
</PRE>
<HR>
<ADDRESS>
Man(1) output converted with
<a href="http://www.oac.uci.edu/indiv/ehood/man2html.html">man2html</a>
</ADDRESS>
</BODY>
</HTML>
@


1.1
log
@Initial revision
@
text
@a4 198
plementation will lead to an OpenGL error.  The  benefit  of  not
checking  this  value  at the GLU level is that OpenGL extensions
can add new internal texture formats without requiring a revision
of  the  GLU  implementation.  Older implementations of GLU check
this value and raise a GLU error if it is not 1, 2, 3,  or  4  or

</PRE>
<H2>one  of  the  following  symbolic constants: GL_ALPHA, GL_ALPHA4,</H2><PRE>

</PRE>
<H2>GL_ALPHA8, GL_ALPHA12, GL_ALPHA16,  GL_LUMINANCE,  GL_LUMINANCE4,</H2><PRE>

</PRE>
<H2>GL_LUMINANCE8,  GL_LUMINANCE12,  GL_LUMINANCE16, GL_LUMINANCE_AL­</H2><PRE>

</PRE>
<H2>PHA,   GL_LUMINANCE4_ALPHA4,    GL_LUMINANCE6_ALPHA2,    GL_LUMI­</H2><PRE>

</PRE>
<H2>NANCE8_ALPHA8,   GL_LUMINANCE12_ALPHA4,   GL_LUMINANCE12_ALPHA12,</H2><PRE>

</PRE>
<H2>GL_LUMINANCE16_ALPHA16, GL_INTENSITY, GL_INTENSITY4,  GL_INTENSI­</H2><PRE>

</PRE>
<H2>TY8,   GL_INTENSITY12,   GL_INTENSITY16,   GL_RGB,   GL_R3_G3_B2,</H2><PRE>

</PRE>
<H2>GL_RGB4, GL_RGB5, GL_RGB8, GL_RGB10, GL_RGB12, GL_RGB16, GL_RGBA,</H2><PRE>

</PRE>
<H2>GL_RGBA2, GL_RGBA4, GL_RGB5_A1, GL_RGBA8, GL_RGB10_A2, GL_RGBA12,</H2><PRE>

</PRE>
<H2>or GL_RGBA16.  _phead(_param3 _param4 _param5) Specifies in  pix­</H2><PRE>
els  the  width,  height and depth respectively, in pixels of the
texture image.  _phead(_param6) Specifies the format of the pixel

</PRE>
<H2>data.  Must be one of GL_COLOR_INDEX, GL_DEPTH_COMPONENT, GL_RED,</H2><PRE>

</PRE>
<H2>GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB,  GL_RGBA,  GL_BGR,  GL_BGRA,</H2><PRE>

</PRE>
<H2>GL_LUMINANCE,  or  GL_LUMINANCE_ALPHA.  _phead(_param7) Specifies</H2><PRE>

</PRE>
<H2>the data type for _param8.  Must  be  one  of:  GL_UNSIGNED_BYTE,</H2><PRE>

</PRE>
<H2>GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT,</H2><PRE>

</PRE>
<H2>GL_INT,      GL_FLOAT,       GL_UNSIGNED_BYTE_3_3_2,       GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_BYTE_2_3_3_REV,       GL_UNSIGNED_SHORT_5_6_5,      GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_SHORT_5_6_5_REV,     GL_UNSIGNED_SHORT_4_4_4_4,     GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_SHORT_4_4_4_4_REV,    GL_UNSIGNED_SHORT_5_5_5_1,    GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_SHORT_1_5_5_5_REV,     GL_UNSIGNED_INT_8_8_8_8,     GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_INT_8_8_8_8_REV,   GL_UNSIGNED_INT_10_10_10_2,  or  GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_INT_2_10_10_10_REV.  _phead(_param8) Specifies  a  pointer</H2><PRE>
to  the  image  data  in  memory.   _cmnd builds a series of pre­
filtered three-dimensional texture maps of decreasing resolutions
called  a  mipmap.  This is used for the antialiasing of texture-
mapped primitives.  A return value  of  zero  indicates  success,
otherwise  a GLU error code is returned (see _cmnd(ErrorString)).
Initially, the  _param3,  _param4  and  _param5  of  _param8  are
checked  to  see  if  they  are  a  power of 2. If not, a copy of
_param8 (not _param8), is scaled up or down to the nearest  power
of  2.  (If _param3, _param4 or _param5 is exactly between powers
of 2, then the copy of _param8 will  scale  upwards.)  This  copy
will  be  used for subsequent mipmapping operations described be­
low.  For example, if _param3 is 57, _param4 is 23 and _param5 is
24  then  a copy of _param8 will scale up to 64 in width, down to
16 in height and up to  32  in  depth,  before  mipmapping  takes
place.   Then,  proxy textures (see _glcmnd(TexImage3D)) are used
to determine if the implementation can fit the requested texture.
If  not,  all  three  dimensions  are continually halved until it
fits.  Next, a series of mipmap levels is built by  decimating  a
copy  of _param8 in half along all three dimensions until size $1
~times~ 1 ~times~ 1$ is reached. At each level, each texel in the
halved mipmap level is an average of the corresponding eight tex­
els in the larger mipmap level. (If exactly one of the dimensions
is 1, four texels are averaged.  If exactly two of the dimensions
querying the maximum level. This can be  derived  indirectly  via
_glcmnd(GetTexLevelParameter). First, query for the width, height
and depth actually used at level 0.  (The width, height and depth
may  not  be  equal  to _param3, _param4 and _param5 respectively
since proxy textures might have scaled them to fit the  implemen­
tation.)   Then the maximum level can be derived from the formula
${log sub 2} ( max  (_eqnparam3,_eqnparam4,_eqnparam5))$.   _cmnd
is  only available if the GLU version is 1.3 or greater.  Formats

</PRE>
<H2>GL_BGR, and GL_BGRA,  and  types  GL_UNSIGNED_BYTE_3_3_2,  GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_BYTE_2_3_3_REV,       GL_UNSIGNED_SHORT_5_6_5,      GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_SHORT_5_6_5_REV,     GL_UNSIGNED_SHORT_4_4_4_4,     GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_SHORT_4_4_4_4_REV,    GL_UNSIGNED_SHORT_5_5_5_1,    GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_SHORT_1_5_5_5_REV,     GL_UNSIGNED_INT_8_8_8_8,     GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_INT_8_8_8_8_REV,  GL_UNSIGNED_INT_10_10_10_2,  and  GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_INT_2_10_10_10_REV are only available if the GL version is</H2><PRE>

</PRE>
<H2>1.2  or  greater.   GLU_INVALID_VALUE  is  returned  if  _param3,</H2><PRE>

</PRE>
<H2>_param4, or _param5 is </  1.   GLU_INVALID_ENUM  is  returned  if<H2><PRE>

</PRE>
<H2>_param2, _param6, or _param7 is not legal.  GLU_INVALID_OPERATION</H2><PRE>

</PRE>
<H2>is  returned  if  _param7  is  GL_UNSIGNED_BYTE_3_3_2  or  GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_BYTE_2_3_3_REV and _param6 is not GL_RGB.  GLU_INVALID_OP­</H2><PRE>

</PRE>
<H2>ERATION is returned  if  _param7  is  GL_UNSIGNED_SHORT_5_6_5  or</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_SHORT_5_6_5_REV  and  _param6 is not GL_RGB.  GLU_IN­</H2><PRE>

</PRE>
<H2>VALID_OPERATION   is    returned    if    _param7    is    GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_SHORT_4_4_4_4 or GL_UNSIGNED_SHORT_4_4_4_4_REV and _param6</H2><PRE>

</PRE>
<H2>is neither GL_RGBA nor  GL_BGRA.   GLU_INVALID_OPERATION  is  re­</H2><PRE>

</PRE>
<H2>turned   if   _param7   is  GL_UNSIGNED_SHORT_5_5_5_1  or  GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_SHORT_1_5_5_5_REV  and  _param6  is  neither  GL_RGBA  nor</H2><PRE>

</PRE>
<H2>GL_BGRA.   GLU_INVALID_OPERATION is returned if _param7 is GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_INT_8_8_8_8 or GL_UNSIGNED_INT_8_8_8_8_REV and _param6  is</H2><PRE>

</PRE>
<H2>neither  GL_RGBA  nor GL_BGRA.  GLU_INVALID_OPERATION is returned</H2><PRE>

</PRE>
<H2>if    _param7    is    GL_UNSIGNED_INT_10_10_10_2    or    GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_INT_2_10_10_10_REV  and  _param6  is  neither  GL_RGBA nor</H2><PRE>

</PRE>
<H2>GL_BGRA.  _glcmnd(DrawPixels), _glcmnd(TexImage1D),  _glcmnd(Tex­</H2><PRE>
Image2D),    _glcmnd(TexImage3D),   _cmnd(Build1DMipmaps),   _cm­
nd(Build3DMipmaps),   _cmnd(ErrorString),   _glcmnd(GetTexImage),
_glcmnd(GetTexLevelParameter),  _cmnd(Build1DMipmapLevels),  _cm­
nd(Build2DMipmapLevels), _cmnd(Build3DMipmapLevels)















@


1.1.1.1
log
@win32-x11 source tree update March 26, 2001
@
text
@@
