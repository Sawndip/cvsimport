head	1.2;
access;
symbols
	win32-x11-2001-03-26:1.1.1.1 SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2001.06.03.20.47.08;	author ssiddiqi;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.25.19.36.50;	author ssiddiqi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.03.25.19.36.50;	author ssiddiqi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Win32-X11 update sources check in, June 3, 2001 - ssiddiqi
@
text
@<HTML>
<BODY>
<PRE>
<!-- Manpage converted by man2html 3.0.1 -->
</PRE>
<HR>
<ADDRESS>
Man(1) output converted with
<a href="http://www.oac.uci.edu/indiv/ehood/man2html.html">man2html</a>
</ADDRESS>
</BODY>
</HTML>
@


1.1
log
@Initial revision
@
text
@a4 80
in the y direction  within  the  texture  array.   _phead(_param5
_param6)  Specify the window coordinates of the lower left corner
of   the   rectangular   region   of   pixels   to   be   copied.
_phead(_param7)  Specifies  the  width  of  the texture subimage.
_phead(_param8) Specifies the height  of  the  texture  subimage.
_cmnd replaces a rectangular portion of a two-dimensional texture

</PRE>
<H2>image with pixels from the current  GL_READ_BUFFER  (rather  than</H2><PRE>
from  main memory, as is the case for _cmnd(TexSubImage2D)).  The
screen-aligned  pixel  rectangle  with  lower  left   corner   at
(_param5, _param6)  and with width _param7 and height _param8 re­
places the portion of the texture array with  x  indices  _param3
through   _param3$~+~$_param7$~-~$1,  inclusive,  and  y  indices
_param4  through  _param4$~+~$_param8$~-~$1,  inclusive,  at  the
mipmap  level  specified by _param2.  The pixels in the rectangle
are processed exactly as if _cmnd(CopyPixels)  had  been  called,
but  the  process  stops  just  before final conversion.  At this
point, all pixel component values are clamped to the range [0, 1]
and  then  converted to the texture's internal format for storage
in the texel array.  The destination rectangle in the texture ar­
ray  may  not  include any texels outside the texture array as it
was originally specified.  It is not an error to specify  a  sub­
texture  with  zero width or height, but such a specification has
no effect.  If any of the pixels within the  specified  rectangle

</PRE>
<H2>of the current GL_READ_BUFFER are outside the read window associ­</H2><PRE>
ated with the current rendering context, then the values obtained
for  those pixels are undefined.  No change is made to the <I>inter­</I>
<I>nalformat</I>, <I>width</I>, <I>height</I>, or <I>border</I> parameters of  the  specified
texture array or to texel values outside the specified subregion.
_cmnd is available only if the GL  version  is  1.1  or  greater.
Texturing  has  no effect in color index mode.  _cmnd(PixelStore)
and _cmnd(PixelTransfer) modes affect texture images  in  exactly
the way they affect _cmnd(DrawPixels).  When the _arbstring(imag­
ing) extension is supported, the RGBA components  read  from  the
framebuffer  may  be processed by the imaging pipeline.  See _cm­

</PRE>
<H2>nd(TexImage1D) for specific details.  GL_INVALID_ENUM is generat­</H2><PRE>

</PRE>
<H2>ed if _param1 is not GL_TEXTURE_2D.  GL_INVALID_OPERATION is gen­</H2><PRE>
erated if the texture array has not been defined  by  a  previous

</PRE>
<H2>_cmnd(TexImage2D)  or  _cmnd(CopyTexImage2D)  operation.   GL_IN­</H2><PRE>

</PRE>
<H2>VALID_VALUE is generated if  _param2  is  less  than  0.   GL_IN­</H2><PRE>

</PRE>
<H2>VALID_VALUE  may be generated if _param2 is greater than $log sub</H2><PRE>

</PRE>
<H2>2 max$, where $max$ is the returned value of GL_MAX_TEXTURE_SIZE.</H2><PRE>

</PRE>
<H2>GL_INVALID_VALUE is generated if _param5$ ~</~ ~-b$ or if _param6$<H2><PRE>
~&lt;~ ~-b$, where $b$ is the border width  of  the  texture  array.

</PRE>
<H2>GL_INVALID_VALUE   is   generated   if   $_eqnparam3   ~</~   -b$,<H2><PRE>
(_param3$~+~$_param7)$~&gt;~(w   ~-~b)$,   _param4$~&lt;~   ~-b$,    or

</PRE>
<H2>(_param4$~+~$_param8)$~>~(h  ~-~b)$,  where  $w$  is  the GL_TEX­</H2><PRE>

</PRE>
<H2>TURE_WIDTH, $h$ is the  GL_TEXTURE_HEIGHT, and $b$ is the GL_TEX­</H2><PRE>

</PRE>
<H2>TURE_BORDER  of  the texture image being modified.  Note that $w$</H2><PRE>

</PRE>
<H2>and $h$ include twice the border width.  GL_INVALID_OPERATION  is</H2><PRE>
generated if _cmnd is executed between the execution of _cmnd(Be­
gin) and the corresponding execution of  _cmnd(End).   _cmnd(Get­
TexImage)
@


1.1.1.1
log
@win32-x11 source tree update March 26, 2001
@
text
@@
