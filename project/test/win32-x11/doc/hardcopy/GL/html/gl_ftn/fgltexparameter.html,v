head	1.2;
access;
symbols
	win32-x11-2001-03-26:1.1.1.1 SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2001.06.03.20.47.09;	author ssiddiqi;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.25.19.36.51;	author ssiddiqi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.03.25.19.36.51;	author ssiddiqi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Win32-X11 update sources check in, June 3, 2001 - ssiddiqi
@
text
@<HTML>
<BODY>
<PRE>
<!-- Manpage converted by man2html 3.0.1 -->
</PRE>
<HR>
<ADDRESS>
Man(1) output converted with
<a href="http://www.oac.uci.edu/indiv/ehood/man2html.html">man2html</a>
</ADDRESS>
</BODY>
</HTML>
@


1.1
log
@Initial revision
@
text
@a4 254

</PRE>
<H2>TURE_MAX_LEVEL,  GL_TEXTURE_WRAP_S,  GL_TEXTURE_WRAP_T,   GL_TEX­</H2><PRE>

</PRE>
<H2>TURE_WRAP_R,  or  GL_TEXTURE_PRIORITY.  _phead(_param3) Specifies</H2><PRE>
the value of _param2.  _names(TexParameter,[fi]v) _phead(_param1)

</PRE>
<H2>Specifies the target texture, which must be either GL_TEXTURE_1D,</H2><PRE>

</PRE>
<H2>GL_TEXTURE_2D or GL_TEXTURE_3D.   _phead(_param2)  Specifies  the</H2><PRE>
symbolic  name of a texture parameter.  _param2 can be one of the

</PRE>
<H2>following: GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER,  GL_TEX­</H2><PRE>

</PRE>
<H2>TURE_MIN_LOD,  GL_TEXTURE_MAX_LOD, GL_TEXTURE_BASE_LEVEL, GL_TEX­</H2><PRE>

</PRE>
<H2>TURE_MAX_LEVEL,  GL_TEXTURE_WRAP_S,  GL_TEXTURE_WRAP_T,   GL_TEX­</H2><PRE>

</PRE>
<H2>TURE_WRAP_R,   GL_TEXTURE_BORDER_COLOR,  or  GL_TEXTURE_PRIORITY.</H2><PRE>
_phead(_param3) Specifies a pointer to an array where  the  value
or  values of _param2 are stored.  Texture mapping is a technique
that applies an image onto an object's surface as  if  the  image
were  a decal or cellophane shrink-wrap.  The image is created in
texture space, with an ($s$, $t$) coordinate system.   A  texture
is  a  one- or two-dimensional image and a set of parameters that
determine how samples are derived from the image.  _cmnd  assigns
the value or values in _param3 to the texture parameter specified

</PRE>
<H2>as _param2.  _param1 defines the target texture,  either  GL_TEX­</H2><PRE>

</PRE>
<H2>TURE_1D,  GL_TEXTURE_2D, or GL_TEXTURE_3D.  The following symbols</H2><PRE>

</PRE>
<H2>are accepted in _param2: GL_TEXTURE_MIN_FILTER The texture  mini­</H2><PRE>
fying  function is used whenever the pixel being textured maps to
an area greater than one texture element.  There are six  defined
minifying  functions.  Two of them use the nearest one or nearest
four texture elements to compute the texture  value.   The  other
four  use  mipmaps.   A mipmap is an ordered set of arrays repre­
senting the same image at progressively  lower  resolutions.   If
the texture has dimensions $2 sup n ~times~ 2 sup m$, there are $
bold max ( n, m ) + 1 $ mipmaps.  The first mipmap is the  origi­
nal  texture,  with  dimensions  $2 sup n ~times~ 2 sup m$.  Each
subsequent mipmap has dimensions $2 sup { k - 1 } ~times~ 2 sup {
l  -  1 }$, where $2 sup k ~times~ 2 sup l$ are the dimensions of
the previous mipmap, until either $k ~=~ 0$ or $l~=~0$.  At  that
point,  subsequent mipmaps have dimension $ 1 ~times~ 2 sup { l -
1 } $ or $ 2 sup { k - 1} ~times~ 1 $  until  the  final  mipmap,
which  has  dimension $1 ~times~ 1$.  To define the mipmaps, call
_cmnd(TexImage1D),  _cmnd(TexImage2D),  _cmnd(TexImage3D),   _cm­
nd(CopyTexImage1D), or _cmnd(CopyTexImage2D) with the <I>level</I> argu­
ment indicating the order of the mipmaps.  Level 0 is the  origi­
nal  texture; level $ bold max ( n, m ) $ is the final $1 ~times~
1$ mipmap.  _param3 supplies a function for minifying the texture

</PRE>
<H2>as one of the following: GL_NEAREST Returns the value of the tex­</H2><PRE>
ture element that is nearest (in Manhattan distance) to the  cen­

</PRE>
<H2>ter  of the pixel being textured.  GL_LINEAR Returns the weighted</H2><PRE>
average of the four texture elements that are closest to the cen­
ter  of  the pixel being textured.  These can include border tex­

</PRE>
<H2>ture elements, depending on the values of  GL_TEXTURE_WRAP_S  and</H2><PRE>

</PRE>
<H2>GL_TEXTURE_WRAP_T,   and   on   the   exact   mapping.   GL_NEAR­</H2><PRE>

</PRE>
<H2>EST_MIPMAP_NEAREST Chooses the mipmap that most  closely  matches</H2><PRE>

</PRE>
<H2>the size of the pixel being textured and uses the GL_NEAREST cri­</H2><PRE>
terion (the texture element nearest to the center of  the  pixel)

</PRE>
<H2>to produce a texture value.  GL_LINEAR_MIPMAP_NEAREST Chooses the</H2><PRE>
texture elements are sampled in the minification  process,  fewer

</PRE>
<H2>aliasing  artifacts  will  be apparent.  While the GL_NEAREST and</H2><PRE>

</PRE>
<H2>GL_LINEAR minification functions can be  faster  than  the  other</H2><PRE>
four,  they sample only one or four texture elements to determine
the texture value of the pixel being  rendered  and  can  produce
moire  patterns  or  ragged  transitions.   The  initial value of

</PRE>
<H2>GL_TEXTURE_MIN_FILTER   is   GL_NEAREST_MIPMAP_LINEAR.    GL_TEX­</H2><PRE>

</PRE>
<H2>TURE_MAG_FILTER  The  texture magnification function is used when</H2><PRE>
the pixel being textured maps to an area less than  or  equal  to
one  texture element.  It sets the texture magnification function

</PRE>
<H2>to either GL_NEAREST or GL_LINEAR (see below). GL_NEAREST is gen­</H2><PRE>

</PRE>
<H2>erally  faster than GL_LINEAR, but it can produce textured images</H2><PRE>
with sharper edges because the transition  between  texture  ele­

</PRE>
<H2>ments is not as smooth.  The initial value of GL_TEXTURE_MAG_FIL­</H2><PRE>

</PRE>
<H2>TER is GL_LINEAR.  GL_NEAREST Returns the value  of  the  texture</H2><PRE>
element  that is nearest (in Manhattan distance) to the center of

</PRE>
<H2>the pixel being textured.  GL_LINEAR Returns the weighted average</H2><PRE>
of  the  four  texture elements that are closest to the center of
the pixel being textured.  These can include border texture  ele­

</PRE>
<H2>ments,  depending  on the values of GL_TEXTURE_WRAP_S and GL_TEX­</H2><PRE>

</PRE>
<H2>TURE_WRAP_T, and on the exact mapping.   GL_TEXTURE_MIN_LOD  Sets</H2><PRE>
the minimum level-of-detail parameter.  This floating-point value
limits the selection of highest resolution mipmap (lowest  mipmap

</PRE>
<H2>level).  The initial value is -1000.  GL_TEXTURE_MAX_LOD Sets the</H2><PRE>
maximum level-of-detail  parameter.   This  floating-point  value
limits  the  selection  of  the lowest resolution mipmap (highest

</PRE>
<H2>mipmap level). The initial value is 1000.   GL_TEXTURE_BASE_LEVEL</H2><PRE>
Specifies  the  index of the lowest defined mipmap level. This is

</PRE>
<H2>an integer value. The initial value is  0.   GL_TEXTURE_MAX_LEVEL</H2><PRE>
Sets  the  index  of the highest defined mipmap level. This is an

</PRE>
<H2>integer value. The initial value is 1000.  GL_TEXTURE_WRAP_S Sets</H2><PRE>

</PRE>
<H2>the wrap parameter for texture coordinate $s$ to either GL_CLAMP,</H2><PRE>

</PRE>
<H2>GL_CLAMP_TO_EDGE, or GL_REPEAT.  GL_CLAMP causes $s$  coordinates</H2><PRE>
to  be  clamped  to  the range [0,1] and is useful for preventing
wrapping artifacts when mapping a single image  onto  an  object.

</PRE>
<H2>GL_CLAMP_TO_EDGE  causes  $s$  coordinates  to  be clamped to the</H2><PRE>
range $left [ {1 over 2N}, 1 - {1 over 2N} right ]$, where $N$ is

</PRE>
<H2>the  size of the texture in the direction of clamping.  GL_REPEAT</H2><PRE>
causes the integer part of the $s$ coordinate to be ignored;  the
GL  uses  only  the fractional part, thereby creating a repeating
pattern.  Border texture elements are accessed only  if  wrapping

</PRE>
<H2>is  set  to  GL_CLAMP.   Initially,  GL_TEXTURE_WRAP_S  is set to</H2><PRE>

</PRE>
<H2>GL_REPEAT.  GL_TEXTURE_WRAP_T Sets the wrap parameter for texture</H2><PRE>

</PRE>
<H2>coordinate  $t$  to  either GL_CLAMP, GL_CLAMP_TO_EDGE, or GL_RE­</H2><PRE>

</PRE>
<H2>PEAT.  See the discussion  under  GL_TEXTURE_WRAP_S.   Initially,</H2><PRE>

</PRE>
<H2>GL_TEXTURE_WRAP_T  is  set  to GL_REPEAT.  GL_TEXTURE_WRAP_R Sets</H2><PRE>

</PRE>
<H2>the wrap parameter for texture coordinate $r$ to either GL_CLAMP,</H2><PRE>

</PRE>
<H2>GL_CLAMP_TO_EDGE, or GL_REPEAT.  See the discussion under GL_TEX­</H2><PRE>

</PRE>
<H2>TURE_WRAP_S.  Initially, GL_TEXTURE_WRAP_R is set  to  GL_REPEAT.</H2><PRE>

</PRE>
<H2>GL_TEXTURE_BORDER_COLOR  Sets  a  border color.  _param3 contains</H2><PRE>
four values that comprise the RGBA color of the  texture  border.
Integer  color  components are interpreted linearly such that the
age2D), _cmnd(TexImage3D), _cmnd(CopyTexImage1D), or  _cmnd(Copy­
TexImage2D))  do  not follow the proper sequence for mipmaps (de­
scribed above), or there are fewer texture  images  defined  than
are  needed,  or the set of texture images have differing numbers
of texture components, then it is as if texture mapping were dis­
abled.   Linear  filtering accesses the four nearest texture ele­
ments only in 2D textures.  In 1D textures, linear filtering  ac­
cesses   the  two  nearest  texture  elements.   When  the  _arb­
string(multitexture) extension is supported, _cmnd specifies  the
texture  parameters  for  the  active  texture unit, specified by

</PRE>
<H2>calling _cmnd(ActiveTextureARB).  GL_INVALID_ENUM is generated if</H2><PRE>
_param1  or  _param2  is  not one of the accepted defined values.

</PRE>
<H2>GL_INVALID_ENUM is generated if _param3  should  have  a  defined</H2><PRE>
constant  value  (based  on  the  value of _param2) and does not.

</PRE>
<H2>GL_INVALID_OPERATION is generated if _cmnd  is  executed  between</H2><PRE>
the  execution of _cmnd(Begin) and the corresponding execution of
_cmnd(End).  _cmnd(GetTexParameter)
_cmnd(GetTexLevelParameter) _cmnd(ActiveTextureARB),  _cmnd(Bind­
Texture),  _cmnd(CopyPixels),  _cmnd(CopyTexImage1D), _cmnd(Copy­
TexImage2D), _cmnd(CopyTexSubImage1D),  _cmnd(CopyTexSubImage2D),
_cmnd(CopyTexSubImage3D),  _cmnd(DrawPixels),  _cmnd(PixelStore),
_cmnd(PixelTransfer),  _cmnd(PrioritizeTextures),  _cmnd(TexEnv),
_cmnd(TexGen), _cmnd(TexImage1D), _cmnd(TexImage2D), _cmnd(TexIm­
age3D),  _cmnd(TexSubImage1D),  _cmnd(TexSubImage2D),  _cmnd(Tex­
SubImage3D)



























@


1.1.1.1
log
@win32-x11 source tree update March 26, 2001
@
text
@@
