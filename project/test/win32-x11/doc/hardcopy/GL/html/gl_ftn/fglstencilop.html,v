head	1.2;
access;
symbols
	win32-x11-2001-03-26:1.1.1.1 SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2001.06.03.20.47.09;	author ssiddiqi;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.25.19.36.51;	author ssiddiqi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.03.25.19.36.51;	author ssiddiqi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Win32-X11 update sources check in, June 3, 2001 - ssiddiqi
@
text
@<HTML>
<BODY>
<PRE>
<!-- Manpage converted by man2html 3.0.1 -->
</PRE>
<HR>
<ADDRESS>
Man(1) output converted with
<a href="http://www.oac.uci.edu/indiv/ehood/man2html.html">man2html</a>
</ADDRESS>
</BODY>
</HTML>
@


1.1
log
@Initial revision
@
text
@a4 90

</PRE>
<H2>The initial value  is  GL_KEEP.   _phead(_param3)  Specifies  the</H2><PRE>
stencil  action  when  both  the  stencil test and the depth test
pass, or when the stencil test passes  and  either  there  is  no
depth  buffer  or  depth testing is not enabled.  _param3 accepts
the same symbolic constants as  _param1.  The  initial  value  is

</PRE>
<H2>GL_KEEP.   Stenciling, like depth-buffering, enables and disables</H2><PRE>
drawing on a per-pixel basis.  You draw into the  stencil  planes
using GL drawing primitives, then render geometry and images, us­
ing the stencil planes to mask out portions of the screen.  Sten­
ciling  is  typically  used  in multipass rendering algorithms to
achieve special effects, such as decals, outlining, and construc­
tive  solid  geometry  rendering.  The stencil test conditionally
eliminates a pixel based on the outcome of a  comparison  between
the  value in the stencil buffer and a reference value. To enable
and disable the test, call _cmnd(Enable) and _cmnd(Disable)  with

</PRE>
<H2>argument GL_STENCIL_TEST; to control it, call _cmnd(StencilFunc).</H2><PRE>
_cmnd takes three arguments that indicate  what  happens  to  the
stored stencil value while stenciling is enabled.  If the stencil
test fails, no change is made  to  the  pixel's  color  or  depth
buffers, and _param1 specifies what happens to the stencil buffer

</PRE>
<H2>contents.  The following six actions are possible.  GL_KEEP Keeps</H2><PRE>

</PRE>
<H2>the  current  value.  GL_ZERO Sets the stencil buffer value to 0.</H2><PRE>

</PRE>
<H2>GL_REPLACE Sets the stencil buffer value to ref, as specified  by</H2><PRE>

</PRE>
<H2>_cmnd(StencilFunc).    GL_INCR  Increments  the  current  stencil</H2><PRE>
buffer value.  Clamps to the maximum representable unsigned  val­

</PRE>
<H2>ue.  GL_DECR Decrements the current stencil buffer value.  Clamps</H2><PRE>

</PRE>
<H2>to 0.  GL_INVERT Bitwise inverts the current stencil buffer  val­</H2><PRE>
ue.   Stencil  buffer  values  are  treated as unsigned integers.
When incremented and decremented, values are clamped to 0 and  $2

</PRE>
<H2>sup  n - 1$, where $n$ is the value returned by querying GL_STEN­</H2><PRE>

</PRE>
<H2>CIL_BITS.  The other  two  arguments  to  _cmnd  specify  stencil</H2><PRE>
buffer  actions  that  depend  on whether subsequent depth buffer
tests succeed (_param3) or fail (_param2) (see
_cmnd(DepthFunc)).  The actions are specified using the same  six
symbolic constants as _param1.  Note that _param2 is ignored when
there is no depth buffer, or when the depth  buffer  is  not  en­
abled.   In  these cases, _param1 and _param3 specify stencil ac­
tion when the stencil test fails and passes, respectively.   Ini­
tially  the  stencil  test  is  disabled.  If there is no stencil
buffer, no stencil modification can occur and it  is  as  if  the
stencil  tests  always  pass,  regardless  of  any call to _cmnd.

</PRE>
<H2>GL_INVALID_ENUM is generated if _param1, _param2, or  _param3  is</H2><PRE>

</PRE>
<H2>any  value  other  than  the six defined constant values.  GL_IN­</H2><PRE>

</PRE>
<H2>VALID_OPERATION is generated if _cmnd is executed between the ex­</H2><PRE>
ecution  of  _cmnd(Begin) and the corresponding execution of _cm­

</PRE>
<H2>nd(End).  _cmnd(Get) with argument GL_STENCIL_FAIL</H2><PRE>

</PRE>
<H2>_cmnd(Get) with argument GL_STENCIL_PASS_DEPTH_PASS</H2><PRE>

</PRE>
<H2>_cmnd(Get) with argument GL_STENCIL_PASS_DEPTH_FAIL</H2><PRE>

</PRE>
<H2>_cmnd(Get) with argument GL_STENCIL_BITS</H2><PRE>

</PRE>
<H2>_cmnd(IsEnabled) with argument GL_STENCIL_TEST  _cmnd(AlphaFunc),</H2><PRE>
_cmnd(BlendFunc),  _cmnd(DepthFunc),  _cmnd(Enable),  _cmnd(Logi­
cOp), _cmnd(StencilFunc)
@


1.1.1.1
log
@win32-x11 source tree update March 26, 2001
@
text
@@
