head	1.2;
access;
symbols
	win32-x11-2001-03-26:1.1.1.1 SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2001.06.03.20.47.08;	author ssiddiqi;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.25.19.36.51;	author ssiddiqi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.03.25.19.36.51;	author ssiddiqi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Win32-X11 update sources check in, June 3, 2001 - ssiddiqi
@
text
@<HTML>
<BODY>
<PRE>
<!-- Manpage converted by man2html 3.0.1 -->
</PRE>
<HR>
<ADDRESS>
Man(1) output converted with
<a href="http://www.oac.uci.edu/indiv/ehood/man2html.html">man2html</a>
</ADDRESS>
</BODY>
</HTML>
@


1.1
log
@Initial revision
@
text
@a4 401

</PRE>
<H2>PACK_SWAP_BYTES,    GL_UNPACK_LSB_FIRST,    GL_UNPACK_ROW_LENGTH,</H2><PRE>

</PRE>
<H2>GL_UNPACK_IMAGE_HEIGHT,       GL_UNPACK_SKIP_PIXELS,       GL_UN­</H2><PRE>

</PRE>
<H2>PACK_SKIP_ROWS, GL_UNPACK_SKIP_IMAGES,  and  GL_UNPACK_ALIGNMENT.</H2><PRE>
_phead(_param2) Specifies the value that _param1 is set to.

_cmnd  sets pixel storage modes that affect the operation of sub­
sequent _cmnd(DrawPixels) and _cmnd(ReadPixels) as  well  as  the
unpacking  of  polygon  stipple  patterns (see _cmnd(PolygonStip­
ple)), bitmaps (see _cmnd(Bitmap)), texture  patterns  (see  _cm­
nd(TexImage1D),  _cmnd(TexImage2D), _cmnd(TexImage3D), _cmnd(Tex­
SubImage1D), _cmnd(TexSubImage2D), _cmnd(TexSubImage3D)).   Addi­
tionally,  if  the  _arbstring(imaging)  extension  is supported,
pixle storage modes affect convlution filters (see _cmnd(Convolu­
tionFilter1D),  _cmnd(ConvolutionFilter2D),  and _cmnd(Separable­
Filter2D), color table (see _cmnd(ColorTable),  and  _cmnd(Color­
SubTable),  and  unpacking  histogram (See _cmnd(Histogram)), and
minmax (See _cmnd(Minmax)) data.  _param1 is a symbolic  constant
indicating the parameter to be set, and _param2 is the new value.
Six of the twelve storage parameters affect how pixel data is re­

</PRE>
<H2>turned to client memory.  They are as follows: GL_PACK_SWAP_BYTES</H2><PRE>
If true, byte ordering for multibyte color components, depth com­
ponents, color indices, or stencil indices is reversed.  That is,
if a four-byte component consists of bytes $b sub 0$, $b sub  1$,
$b sub 2$, $b sub 3$, it is stored in memory as $b sub 3$, $b sub

</PRE>
<H2>2$,  $b  sub  1$,  $b  sub  0$  if  GL_PACK_SWAP_BYTES  is  true.</H2><PRE>

</PRE>
<H2>GL_PACK_SWAP_BYTES  has  no  effect on the memory order of compo­</H2><PRE>
nents within a pixel, only on the order of  bytes  within  compo­

</PRE>
<H2>nents  or indices.  For example, the three components of a GL_RGB</H2><PRE>
format pixel are always stored with red first, green second,  and

</PRE>
<H2>blue  third,  regardless  of  the  value  of  GL_PACK_SWAP_BYTES.</H2><PRE>

</PRE>
<H2>GL_PACK_LSB_FIRST If true, bits are ordered within  a  byte  from</H2><PRE>
least  significant  to most significant; otherwise, the first bit
in each byte is the most significant one.  This parameter is sig­

</PRE>
<H2>nificant  for  bitmap  data  only.  GL_PACK_ROW_LENGTH If greater</H2><PRE>

</PRE>
<H2>than 0, GL_PACK_ROW_LENGTH defines the number of pixels in a row.</H2><PRE>
If  the first pixel of a row is placed at location $p$ in memory,
then the location of the first pixel of the next row is  obtained
by skipping

$k  ~=~~ left  { ^ lpile { n l above {a over s left ceiling { s n
 l } over a right ceiling}} ~~ lpile {s ~&gt;=~ a above s ~&lt;~ a }$

components or indices, where $n$ is the number of  components  or
indices  in  a  pixel,  $l$  is  the  number  of  pixels in a row

</PRE>
<H2>(GL_PACK_ROW_LENGTH if it is greater than 0, the $width$ argument</H2><PRE>
to   the   pixel   routine   otherwise),  $a$  is  the  value  of

</PRE>
<H2>GL_PACK_ALIGNMENT, and $s$ is the size, in  bytes,  of  a  single</H2><PRE>
component (if $ a &lt; s$, then it is as if $a ~=~ s$).  In the case
of 1-bit values, the location of the  next  row  is  obtained  by
skipping

  $k ~=~ 8 a left ceiling { n l } over { 8 a } ^ right ceiling$

over a ^ right ceiling}} ~~ lpile {s ~&gt;=~  a above s ~&lt;~  a }$

components  or  indices, where $n$ is the number of components or
indices in a pixel,  $l$  is  the  number  of  pixels  in  a  row

</PRE>
<H2>(GL_PACK_ROW_LENGTH  if  it is greater than 0,  the $width$ argu­</H2><PRE>
ment to _cmnd(TexImage3d) otherwise), $h$ is the number  of  rows

</PRE>
<H2>in  a  pixel image (GL_PACK_IMAGE_HEIGHT if it is greater than 0,</H2><PRE>
the $height$ arguemnt to  the  _cmnd(TexImage3D)  routine  other­

</PRE>
<H2>wise),  $a$  is  the  value  of GL_PACK_ALIGNMENT, and $s$ is the</H2><PRE>
size, in bytes, of a single component (if $ a &lt; s$, then it is as
if  $a  =  s$).  The word <I>component</I> in this description refers to
the nonindex values red, green, blue, alpha, and depth.   Storage

</PRE>
<H2>format GL_RGB, for example, has three components per pixel: first</H2><PRE>

</PRE>
<H2>red,  then  green,  and   finally   blue.    GL_PACK_SKIP_PIXELS,</H2><PRE>

</PRE>
<H2>GL_PACK_SKIP_ROWS,  and GL_PACK_SKIP_IMAGES These values are pro­</H2><PRE>
vided as a convenience to the programmer; they provide  no  func­
tionality  that  cannot  be duplicated simply by incrementing the

</PRE>
<H2>pointer passed to _cmnd(ReadPixels).  Setting GL_PACK_SKIP_PIXELS</H2><PRE>
to  $i$ is equivalent to incrementing the pointer by $i n$ compo­
nents or indices, where $n$ is the number of  components  or  in­

</PRE>
<H2>dices in each pixel.  Setting GL_PACK_SKIP_ROWS to $j$ is equiva­</H2><PRE>
lent to incrementing the pointer by $j m$ components or  indices,
where $m$ is the number of components or indices per row, as just

</PRE>
<H2>computed   in   the    GL_PACK_ROW_LENGTH    section.     Setting</H2><PRE>

</PRE>
<H2>GL_PACK_SKIP_IMAGES  to  $k$  is  equivalent  to incrementing the</H2><PRE>
pointer by $k p$, where $p$ is the number of  components  or  in­

</PRE>
<H2>dices per image, as computed in the GL_PACK_IMAGE_HEIGHT section.</H2><PRE>

</PRE>
<H2>GL_PACK_ALIGNMENT Specifies the alignment  requirements  for  the</H2><PRE>
start  of  each  pixel row in memory.  The allowable values are 1
(byte-alignment), 2 (rows  aligned  to  even-numbered  bytes),  4
(word-alignment),  and  8 (rows start on double-word boundaries).
The other six of the twelve storage parameters affect  how  pixel
data  is  read  from client memory.  These values are significant
for _cmnd(DrawPixels), _cmnd(TexImage1D), _cmnd(TexImage2D), _cm­
nd(TexImage3D),  _cmnd(TexSubImage1D), _cmnd(TexSubImage2D), _cm­
nd(TexSubImage3D), _cmnd(Bitmap), and _cmnd(PolygonStipple).  Ad­
ditionally,  if  the  _arbstring(imaging) extension is supported,
_cmnd(ColorTable),  _cmnd(ColorSubTable),   _cmnd(ConvolutionFil­
ter1D), _cmnd(ConvolutionFilter2D), and _cmnd(SeparableFilter2D).

</PRE>
<H2>They are as follows: GL_UNPACK_SWAP_BYTES If true, byte  ordering</H2><PRE>
for  multibyte color components, depth components, color indices,
or stencil indices is reversed.  That is, if a  four-byte  compo­
nent  consists  of  bytes $b sub 0$, $b sub 1$, $b sub 2$, $b sub
3$, it is taken from memory as $b sub 3$, $b sub 2$, $b  sub  1$,

</PRE>
<H2>$b  sub 0$ if GL_UNPACK_SWAP_BYTES is true.  GL_UNPACK_SWAP_BYTES</H2><PRE>
has no effect on the memory order of components within  a  pixel,
only on the order of bytes within components or indices.  For ex­

</PRE>
<H2>ample, the three components of a GL_RGB format pixel  are  always</H2><PRE>
stored  with  red first, green second, and blue third, regardless

</PRE>
<H2>of the value  of  GL_UNPACK_SWAP_BYTES.   GL_UNPACK_LSB_FIRST  If</H2><PRE>
true,  bits  are  ordered within a byte from least significant to
most significant; otherwise, the first bit in each  byte  is  the

</PRE>
<H2>PACK_ALIGNMENT, and $s$ is the size, in bytes, of a single compo­</H2><PRE>
nent  (if  $  a  &lt; s$, then it is as if $a = s$).  In the case of
1-bit values, the location of the next row is obtained  by  skip­
ping

   $k ~=~ 8 a left ceiling { n l } over { 8 a } right ceiling$

components  or  indices.   The word <I>component</I> in this description
refers to the nonindex values red, green, blue, alpha, and depth.

</PRE>
<H2>Storage format GL_RGB, for example, has three components per pix­</H2><PRE>

</PRE>
<H2>el: first red,  then  green,  and  finally  blue.   GL_UNPACK_IM­</H2><PRE>

</PRE>
<H2>AGE_HEIGHT  If greater than 0, GL_UNPACK_IMAGE_HEIGHT defines the</H2><PRE>
number of pixels in an image of a three-dimensional texture  vol­
ume.   Where  ``image''  is defined by all pixel sharing the same
third dimension index.  If the first pixel of a row is placed  at
location  $p$  in memory, then the location of the first pixel of
the next row is obtained by skipping

$k ~=~~ left  {~ lpile { n l h above {a over s left ceiling { s n
                              l h }
over a ^ right ceiling}} ~~ lpile {s ~ &gt;=~  a above s  ~&lt;~  a }$

components  or  indices, where $n$ is the number of components or

</PRE>
<H2>indices in a pixel, $l$ is the number of pixels in a row  (GL_UN­</H2><PRE>

</PRE>
<H2>PACK_ROW_LENGTH  if it is greater than 0, the $width$ argument to</H2><PRE>
_cmnd(TexImage3D) otherwise), $h$ is the number of rows in an im­

</PRE>
<H2>age (GL_UNPACK_IMAGE_HEIGHT if it is greater than 0, the $height$</H2><PRE>
argument to _cmnd(TexImage3D) otherwise), $a$  is  the  value  of

</PRE>
<H2>GL_UNPACK_ALIGNMENT,  and  $s$ is the size, in bytes, of a single</H2><PRE>
component (if $ a &lt; s$, then it is as if $a ~=~  s$).   The  word
<I>component</I>  in this description refers to the nonindex values red,

</PRE>
<H2>green, blue, alpha, and depth.  Storage format GL_RGB, for  exam­</H2><PRE>
ple,  has  three components per pixel: first red, then green, and

</PRE>
<H2>finally  blue.   GL_UNPACK_SKIP_PIXELS  and   GL_UNPACK_SKIP_ROWS</H2><PRE>
These  values  are  provided  as a convenience to the programmer;
they provide no functionality that cannot be duplicated by incre­
menting  the  pointer  passed  to _cmnd(DrawPixels), _cmnd(TexIm­
age1D), _cmnd(TexImage2D), _cmnd(TexSubImage1D),  _cmnd(TexSubIm­

</PRE>
<H2>age2D),  _cmnd(Bitmap), or _cmnd(PolygonStipple).  Setting GL_UN­</H2><PRE>

</PRE>
<H2>PACK_SKIP_PIXELS to $i$ is equivalent to incrementing the pointer</H2><PRE>
by $i n$ components or indices, where $n$ is the number of compo­

</PRE>
<H2>nents or indices in each pixel.  Setting  GL_UNPACK_SKIP_ROWS  to</H2><PRE>
$j$ is equivalent to incrementing the pointer by $j k$ components
or indices, where $k$ is the number of components or indices  per

</PRE>
<H2>row,  as  just  computed  in  the  GL_UNPACK_ROW_LENGTH  section.</H2><PRE>

</PRE>
<H2>GL_UNPACK_ALIGNMENT Specifies the alignment requirements for  the</H2><PRE>
start  of  each  pixel row in memory.  The allowable values are 1
(byte-alignment), 2 (rows  aligned  to  even-numbered  bytes),  4
(word-alignment),  and  8 (rows start on double-word boundaries).
The following table gives the type, initial value, and  range  of
valid values for each storage parameter that can be set with _cm­
nd.
-----------------------------------------------------------------

</PRE>
<H2>GL_UNPACK_SWAP_BYTES     boolean       false       true or false</H2><PRE>

</PRE>
<H2>GL_UNPACK_LSB_FIRST      boolean       false       true or false</H2><PRE>

</PRE>
<H2>GL_UNPACK_ROW_LENGTH     integer         0             [0,)</H2><PRE>

</PRE>
<H2>GL_UNPACK_IMAGE_HEIGHT   integer         0             [0,)</H2><PRE>

</PRE>
<H2>GL_UNPACK_SKIP_ROWS      integer         0             [0,)</H2><PRE>

</PRE>
<H2>GL_UNPACK_SKIP_PIXELS    integer         0             [0,)</H2><PRE>

</PRE>
<H2>GL_UNPACK_SKIP_IMAGES    integer         0             [0,)</H2><PRE>

</PRE>
<H2>GL_UNPACK_ALIGNMENT      integer         4         1, 2, 4, or 8</H2><PRE>
-----------------------------------------------------------------


_cmnd(PixelStoref) can be used to set any pixel store  parameter.
If  the  parameter type is boolean, then if _param2 is 0, the pa­
rameter is false; otherwise it is set to true.  If _param1  is  a
integer  type  parameter, _param2 is rounded to the nearest inte­
ger.  Likewise, _cmnd(PixelStorei) can also be used to set any of
the  pixel store parameters.  Boolean parameters are set to false
if _param2 is 0 and true otherwise.  The pixel storage  modes  in
effect  when  _cmnd(DrawPixels),  _cmnd(ReadPixels), _cmnd(TexIm­
age1D),  _cmnd(TexImage2D),  _cmnd(TexImage3D),   _cmnd(TexSubIm­
age1D),    _cmnd(TexSubImage2D),    _cmnd(TexSubImage3D),    _cm­
nd(Bitmap), or _cmnd(PolygonStipple) is placed in a display  list
control  the  interpretation  of  memory  data.  Likewise, if the
_arbstring(imaging) extension is  supported,  the  pixel  storage
modes  in  effect  when  _cmnd(ColorTable), _cmnd(ColorSubTable),
_cmnd(ConvolutionFilter1D), _cmnd(ConvolutionFilter2D),  of  _cm­
nd(SeparableFilter2D) is placed in a display list control the in­
trepretation of memory data.  The pixel storage modes  in  effect
when a display list is executed are not significant.  Pixel stor­
age modes are client state and must be pushed and restored using

</PRE>
<H2>_cmnd(PushClientAttrib)   and   _cmnd(PopClientAttrib).    GL_IN­</H2><PRE>

</PRE>
<H2>VALID_ENUM  is  generated  if  _param1  is not an accepted value.</H2><PRE>

</PRE>
<H2>GL_INVALID_VALUE is generated if a  negative  row  length,  pixel</H2><PRE>
skip,  or  row skip value is specified, or if alignment is speci­

</PRE>
<H2>fied as other than 1, 2, 4, or 8.  GL_INVALID_OPERATION is gener­</H2><PRE>
ated  if  _cmnd is executed between the execution of _cmnd(Begin)
and the corresponding execution of _cmnd(End).   _cmnd(Get)  with

</PRE>
<H2>argument GL_PACK_SWAP_BYTES</H2><PRE>

</PRE>
<H2>_cmnd(Get) with argument GL_PACK_LSB_FIRST</H2><PRE>

</PRE>
<H2>_cmnd(Get) with argument GL_PACK_ROW_LENGTH</H2><PRE>

</PRE>
<H2>_cmnd(Get) with argument GL_PACK_IMAGE_HEIGHT</H2><PRE>

</PRE>
<H2>_cmnd(Get) with argument GL_PACK_SKIP_ROWS</H2><PRE>

</PRE>
<H2>_cmnd(Get) with argument GL_PACK_SKIP_PIXELS</H2><PRE>

</PRE>
<H2>_cmnd(Get) with argument GL_PACK_SKIP_IMAGES</H2><PRE>

</PRE>
<H2>_cmnd(Get) with argument GL_PACK_ALIGNMENT</H2><PRE>

</PRE>
<H2>_cmnd(Get) with argument GL_UNPACK_SWAP_BYTES</H2><PRE>

</PRE>
<H2>_cmnd(Get) with argument GL_UNPACK_LSB_FIRST</H2><PRE>

</PRE>
<H2>_cmnd(Get) with argument GL_UNPACK_ROW_LENGTH</H2><PRE>

</PRE>
<H2>_cmnd(Get) with argument GL_UNPACK_IMAGE_HEIGHT</H2><PRE>

</PRE>
<H2>_cmnd(Get) with argument GL_UNPACK_SKIP_ROWS</H2><PRE>

</PRE>
<H2>_cmnd(Get) with argument GL_UNPACK_SKIP_PIXELS</H2><PRE>




















































@


1.1.1.1
log
@win32-x11 source tree update March 26, 2001
@
text
@@
