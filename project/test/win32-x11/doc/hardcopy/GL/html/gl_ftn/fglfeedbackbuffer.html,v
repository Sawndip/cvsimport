head	1.2;
access;
symbols
	win32-x11-2001-03-26:1.1.1.1 SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2001.06.03.20.47.08;	author ssiddiqi;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.25.19.36.50;	author ssiddiqi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.03.25.19.36.50;	author ssiddiqi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Win32-X11 update sources check in, June 3, 2001 - ssiddiqi
@
text
@<HTML>
<BODY>
<PRE>
<!-- Manpage converted by man2html 3.0.1 -->
</PRE>
<HR>
<ADDRESS>
Man(1) output converted with
<a href="http://www.oac.uci.edu/indiv/ehood/man2html.html">man2html</a>
</ADDRESS>
</BODY>
</HTML>
@


1.1
log
@Initial revision
@
text
@a4 200
controls feedback.  Feedback, like selection, is a GL mode.   The

</PRE>
<H2>mode  is  selected by calling _cmnd(RenderMode) with GL_FEEDBACK.</H2><PRE>
When the GL is in feedback mode, no pixels are produced  by  ras­
terization.   Instead,  information  about  primitives that would
have been rasterized is fed back to the application using the GL.
_cmnd  has  three  arguments: _param3 is a pointer to an array of
floating-point values into which feedback information is  placed.
_param1  indicates  the size of the array.  _param2 is a symbolic
constant describing the information that is  fed  back  for  each
vertex.  _cmnd must be issued before feedback mode is enabled (by

</PRE>
<H2>calling _cmnd(RenderMode) with  argument  GL_FEEDBACK).   Setting</H2><PRE>

</PRE>
<H2>GL_FEEDBACK  without establishing the feedback buffer, or calling</H2><PRE>
_cmnd while the GL is in feedback mode, is an error.   When  _cm­
nd(RenderMode)  is  called while in feedback mode, it returns the
number of entries placed in the feedback array,  and  resets  the
feedback  array  pointer  to the base of the feedback buffer. The
returned value never exceeds _param1. If the  feedback  data  re­
quired more room than was available in _param3, _cmnd(RenderMode)
returns a negative value.  To take the GL out of  feedback  mode,

</PRE>
<H2>call _cmnd(RenderMode) with a parameter value other than GL_FEED­</H2><PRE>

</PRE>
<H2>BACK.  While in feedback mode, each primitive, bitmap,  or  pixel</H2><PRE>
rectangle  that  would  be rasterized generates a block of values
that are copied into the feedback array.  If doing so would cause
the  number  of  entries to exceed the maximum, the block is par­
tially written so as to fill the array (if there is any room left
at  all),  and an overflow flag is set.  Each block begins with a
code indicating the primitive type, followed by values  that  de­
scribe the primitive's vertices and associated data.  Entries are
also written for bitmaps and pixel rectangles.   Feedback  occurs
after  polygon  culling  and _cmnd(PolygonMode) interpretation of
polygons has taken place, so polygons that are culled are not re­
turned  in the feedback buffer.  It can also occur after polygons
with more than three edges are broken up into triangles,  if  the
GL  implementation renders polygons by performing this decomposi­
tion.  The _cmnd(PassThrough) command can be  used  to  insert  a
marker  into  the feedback buffer.  See _cmnd(PassThrough).  Fol­
lowing is the grammar for the blocks of values written  into  the
feedback buffer.  Each primitive is indicated with a unique iden­
tifying value followed by some number of vertices.   Polygon  en­
tries  include an integer value indicating how many vertices fol­
low.  A vertex is fed back as some number of floating-point  val­
ues,  as determined by _param2.  Colors are fed back as four val­
ues in RGBA mode and one value in color index mode.

feedbackList &lt;- feedbackItem feedbackList | feedbackItem

feedbackItem &lt;- point | lineSegment | polygon | bitmap | pixel­
Rectangle | passThru


</PRE>
<H2>point </- GL_POINT_TOKEN vertex<H2><PRE>


</PRE>
<H2>lineSegment </- GL_LINE_TOKEN vertex vertex | GL_LINE_RESET_TOKEN<H2><PRE>

2d &lt;- value value

3d &lt;- value value value

3dColor  &lt;- value value value color

3dColorTexture &lt;- value value value color tex

4dColorTexture &lt;- value value value value color tex

color &lt;- rgba | index

rgba &lt;- value value value value

index &lt;- value

tex &lt;- value value value value

is a floating-point number, and is a floating-point integer giv­

</PRE>
<H2>ing the number of vertices in the polygon.  GL_POINT_TOKEN,</H2><PRE>

</PRE>
<H2>GL_LINE_TOKEN, GL_LINE_RESET_TOKEN, GL_POLYGON_TOKEN,</H2><PRE>

</PRE>
<H2>GL_BITMAP_TOKEN, GL_DRAW_PIXEL_TOKEN, GL_COPY_PIXEL_TOKEN and</H2><PRE>

</PRE>
<H2>GL_PASS_THROUGH_TOKEN are symbolic floating-point constants.</H2><PRE>

</PRE>
<H2>GL_LINE_RESET_TOKEN is returned whenever the line stipple pattern</H2><PRE>
is reset.  The data returned as a vertex depends on the feedback
_param2.  The following table gives the correspondence between
_param2 and the number of values per vertex.  <I>k</I> is 1 in color in­
dex mode and 4 in RGBA mode.

-----------------------------------------------------------------------------

</PRE>
<H2>Type                  Coordinates   Color   Texture   Total Number of Values</H2><PRE>
-----------------------------------------------------------------------------

</PRE>
<H2>GL_2D                 x, y                                      2</H2><PRE>

</PRE>
<H2>GL_3D                 x, y, z                                   3</H2><PRE>

</PRE>
<H2>GL_3D_COLOR           x, y, z        $k$                    $3 ~+~ k$</H2><PRE>

</PRE>
<H2>GL_3D_COLOR_TEXTURE   x, y, z,       $k$       4            $7 ~+~ k$</H2><PRE>

</PRE>
<H2>GL_4D_COLOR_TEXTURE   x, y, z, w     $k$       4            $8 ~+~ k$</H2><PRE>
-----------------------------------------------------------------------------

Feedback vertex coordinates are in window coordinates, except <I>w</I>,
which is in clip coordinates.  Feedback colors are lighted, if
lighting is enabled.  Feedback texture coordinates are generated,
if texture coordinate generation is enabled.  They are always
transformed by the texture matrix.  _cmnd, when used in a display
list, is not compiled into the display list but is executed imme­
diately.  When the _arbstring(multitexture) extension is support­
ed, _cmnd returns only the texture coordinates of texture unit

</PRE>
<H2>_arbconst(TEXTURE0).  GL_INVALID_ENUM is generated if _param2 is</H2><PRE>

</PRE>
<H2>not an accepted value.  GL_INVALID_VALUE is generated if _param1</H2><PRE>

</PRE>
<H2>is negative.  GL_INVALID_OPERATION is generated if _cmnd is</H2><PRE>

</PRE>
<H2>called while the render mode is GL_FEEDBACK, or if _cmnd(Render­</H2><PRE>




















































@


1.1.1.1
log
@win32-x11 source tree update March 26, 2001
@
text
@@
