head	1.2;
access;
symbols
	win32-x11-2001-03-26:1.1.1.1 SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2001.06.03.20.47.08;	author ssiddiqi;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.25.19.36.51;	author ssiddiqi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.03.25.19.36.51;	author ssiddiqi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Win32-X11 update sources check in, June 3, 2001 - ssiddiqi
@
text
@<HTML>
<BODY>
<PRE>
<!-- Manpage converted by man2html 3.0.1 -->
</PRE>
<HR>
<ADDRESS>
Man(1) output converted with
<a href="http://www.oac.uci.edu/indiv/ehood/man2html.html">man2html</a>
</ADDRESS>
</BODY>
</HTML>
@


1.1
log
@Initial revision
@
text
@a4 74
nd(EndList) is called.  _cmnd has two arguments.  The first argu­
ment,  <B>_param1(1)</B>,  is a positive integer that becomes the unique
name for the display list.  Names can  be  created  and  reserved
with  _cmnd(GenLists)  and  tested  for uniqueness with _cmnd(Is­
List).  The second argument, <B>_param2(1)</B>, is a  symbolic  constant

</PRE>
<H2>that can assume one of two values: GL_COMPILE Commands are merely</H2><PRE>

</PRE>
<H2>compiled.  GL_COMPILE_AND_EXECUTE Commands are executed  as  they</H2><PRE>
are  compiled  into  the  display list.  Certain commands are not
compiled into the display list but are executed immediately,  re­
gardless of the display-list mode.  These commands are _cmnd(Are­
TexturesResident), _cmnd(ColorPointer), _cmnd(DeleteLists),  _cm­
nd(DeleteTextures),   _cmnd(DisableClientState),  _cmnd(EdgeFlag­
Pointer), _cmnd(EnableClientState),  _cmnd(FeedbackBuffer),  _cm­
nd(Finish),  _cmnd(Flush),  _cmnd(GenLists),  _cmnd(GenTextures),
_cmnd(IndexPointer), _cmnd(InterleavedArrays),  _cmnd(IsEnabled),
_cmnd(IsList), _cmnd(IsTexture), _cmnd(NormalPointer), _cmnd(Pop­
ClientAttrib), _cmnd(PixelStore),  _cmnd(PushClientAttrib),  _cm­
nd(ReadPixels),   _cmnd(RenderMode),   _cmnd(SelectBuffer),  _cm­
nd(TexCoordPointer), _cmnd(VertexPointer), and all  of  the  _cm­
nd(Get)  commands.   Similarly,  _cmnd(TexImage1D),  _cmnd(TexIm­
age2D), and _cmnd(TexImage3D) are executed  immediately  and  not
compiled  into  the  display  list  when  their first argument is

</PRE>
<H2>GL_PROXY_TEXTURE_1D, GL_PROXY_TEXTURE_1D, or GL_PROXY_TEXTURE_3D,</H2><PRE>
respectively.  When the _arbstring(imaging) extension is support­
ed, _cmnd(Histogram) executes immediately when  its  argument  is

</PRE>
<H2>GL_PROXY_HISTOGRAM.   Similarly, _cmnd(ColorTable) executes imme­</H2><PRE>
diately when its first argument is _cmnd(PROXY_COLOR_TABLE), _cm­
nd(PROXY_POST_CONVOLUTION_COLOR_TABLE),  or _cmnd(PROXY_POST_COL­
OR_MATRIX_COLOR_TABLE).  When the _arbstring(multitexture) exten­
sion  is supported, _cmnd(ClientActiveTextureARB) is not compiled
into  display  lists,  but  executed  immediately.    When   _cm­
nd(EndList)  is  encountered, the display-list definition is com­
pleted by associating the list with the  unique  name  <B>_param1(1)</B>
(specified  in  the  _cmnd(NewList)  command).  If a display list
with name <B>_param1(1)</B> already exists, it  is  replaced  only  when
_cmnd(EndList)  is  called.  _cmnd(CallList) and _cmnd(CallLists)
can be entered into display lists.  Commands in the display  list
or  lists executed by _cmnd(CallList) or _cmnd(CallLists) are not
included in the display list being created, even if the list cre­

</PRE>
<H2>ation  mode  is GL_COMPILE_AND_EXECUTE.  A display list is just a</H2><PRE>
group of commands and arguments, so errors generated by  commands
in a display list must be generated when the list is executed. If

</PRE>
<H2>the list is created in GL_COMPILE mode, errors are not  generated</H2><PRE>

</PRE>
<H2>until  the  list  is  executed.  GL_INVALID_VALUE is generated if</H2><PRE>

</PRE>
<H2>_param1(1) is 0.  GL_INVALID_ENUM is generated if  _param2(1)  is</H2><PRE>

</PRE>
<H2>not an accepted value.  GL_INVALID_OPERATION is generated if _cm­</H2><PRE>
nd(EndList) is called without a preceding _cmnd(NewList),  or  if
_cmnd(NewList)  is  called while a display list is being defined.

</PRE>
<H2>GL_INVALID_OPERATION  is  generated  if  _cmnd(NewList)  or  _cm­</H2><PRE>
nd(EndList) is executed between the execution of _cmnd(Begin) and

</PRE>
<H2>the corresponding execution of _cmnd(End).   GL_OUT_OF_MEMORY  is</H2><PRE>
generated  if there is insufficient memory to compile the display
@


1.1.1.1
log
@win32-x11 source tree update March 26, 2001
@
text
@@
