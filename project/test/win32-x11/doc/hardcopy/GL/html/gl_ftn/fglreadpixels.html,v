head	1.2;
access;
symbols
	win32-x11-2001-03-26:1.1.1.1 SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2001.06.03.20.47.09;	author ssiddiqi;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.25.19.36.51;	author ssiddiqi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.03.25.19.36.51;	author ssiddiqi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Win32-X11 update sources check in, June 3, 2001 - ssiddiqi
@
text
@<HTML>
<BODY>
<PRE>
<!-- Manpage converted by man2html 3.0.1 -->
</PRE>
<HR>
<ADDRESS>
Man(1) output converted with
<a href="http://www.oac.uci.edu/indiv/ehood/man2html.html">man2html</a>
</ADDRESS>
</BODY>
</HTML>
@


1.1
log
@Initial revision
@
text
@a4 270

</PRE>
<H2>el data.  The following symbolic  values  are  accepted:  GL_COL­</H2><PRE>

</PRE>
<H2>OR_INDEX, GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_RED, GL_GREEN,</H2><PRE>

</PRE>
<H2>GL_BLUE, GL_ALPHA, GL_RGB,  GL_BGR,  GL_RGBA,  GL_BGRA,  GL_LUMI­</H2><PRE>

</PRE>
<H2>NANCE, and GL_LUMINANCE_ALPHA.  _phead(_param6) Specifies the da­</H2><PRE>

</PRE>
<H2>ta type of the pixel data.   Must  be  one  of  GL_UNSIGNED_BYTE,</H2><PRE>

</PRE>
<H2>GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT,</H2><PRE>

</PRE>
<H2>GL_INT,      GL_FLOAT,       GL_UNSIGNED_BYTE_3_3_2,       GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_BYTE_2_3_3_REV,       GL_UNSIGNED_SHORT_5_6_5,      GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_SHORT_5_6_5_REV,     GL_UNSIGNED_SHORT_4_4_4_4,     GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_SHORT_4_4_4_4_REV,    GL_UNSIGNED_SHORT_5_5_5_1,    GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_SHORT_1_5_5_5_REV,     GL_UNSIGNED_INT_8_8_8_8,     GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_INT_8_8_8_8_REV,   GL_UNSIGNED_INT_10_10_10_2,  or  GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_INT_2_10_10_10_REV.  _phead(_param7) Returns the pixel da­</H2><PRE>
ta.   _cmnd  returns  pixel  data from the frame buffer, starting
with the pixel whose lower left corner is at  location  (_param1,
_param2),  into client memory starting at location _param7.  Sev­
eral parameters control the processing of the pixel  data  before
it  is  placed into client memory.  These parameters are set with
three commands: _cmnd(PixelStore), _cmnd(PixelTransfer), and _cm­
nd(PixelMap).  This reference page describes the effects on _cmnd
of most, but not all of the parameters specified by  these  three
commands.   When  the _arbstring(imaging) extension is supported,
the pixel data may be processed by additional operations  includ­
ing  color  table  lookup,  color matrix tranformations, convolu­
tions, histograms and minimum and maximun  pixel  value  computa­
tions.  _cmnd returns values from each pixel with lower left cor­
ner at (_param1 + $i$, _param2 + $j$) for 0 &lt;= $i$ &lt; _param3  and
0  &lt;= $j$ &lt; _param4.  This pixel is said to be the $i$th pixel in
the $j$th row.  Pixels are returned in row order from the  lowest
to the highest row, left to right in each row.  _param5 specifies
the format for the returned pixel values;  accepted  values  are:

</PRE>
<H2>GL_COLOR_INDEX  Color  indices are read from the color buffer se­</H2><PRE>
lected by _cmnd(ReadBuffer).  Each index is  converted  to  fixed
point,  shifted  left or right depending on the value and sign of

</PRE>
<H2>GL_INDEX_SHIFT, and added to GL_INDEX_OFFSET.  If GL_MAP_COLOR is</H2><PRE>

</PRE>
<H2>GL_TRUE,  indices  are  replaced  by  their mappings in the table</H2><PRE>

</PRE>
<H2>GL_PIXEL_MAP_I_TO_I.  GL_STENCIL_INDEX Stencil  values  are  read</H2><PRE>
from the stencil buffer.  Each index is converted to fixed point,

</PRE>
<H2>shifted left or right depending on the value and sign  of  GL_IN­</H2><PRE>

</PRE>
<H2>DEX_SHIFT,  and  added  to GL_INDEX_OFFSET.  If GL_MAP_STENCIL is</H2><PRE>

</PRE>
<H2>GL_TRUE, indices are replaced by  their  mappings  in  the  table</H2><PRE>

</PRE>
<H2>GL_PIXEL_MAP_S_TO_S.   GL_DEPTH_COMPONENT  Depth  values are read</H2><PRE>
from the depth buffer.  Each component is converted  to  floating
point such that the minimum depth value maps to 0 and the maximum
value  maps  to  1.   Each  component  is  then   multiplied   by

</PRE>
<H2>GL_DEPTH_SCALE,  added  to  GL_DEPTH_BIAS, and finally clamped to</H2><PRE>

</PRE>
<H2>the range [0,1].  GL_RED GL_GREEN GL_BLUE GL_ALPHA GL_RGB  GL_BGR</H2><PRE>

</PRE>
<H2>GL_RGBA  GL_BGRA  GL_LUMINANCE GL_LUMINANCE_ALPHA Processing dif­</H2><PRE>
fers depending on whether color buffers store  color  indices  or
RGBA  color  components.   If  color indices are stored, they are
read from the color buffer selected by  _cmnd(ReadBuffer).   Each
index  is converted to fixed point, shifted left or right depend­
clamped to the range [0, 1], scaled to the  size  of  its  corre­
sponding  table, and is then replaced by its mapping in the table

</PRE>
<H2>GL_PIXEL_MAP_c_TO_c, where c is R, G, B, or A.  Unneeded data  is</H2><PRE>

</PRE>
<H2>then  discarded.   For  example, GL_RED discards the green, blue,</H2><PRE>

</PRE>
<H2>and alpha components, while GL_RGB discards only the alpha compo­</H2><PRE>

</PRE>
<H2>nent.   GL_LUMINANCE computes a single-component value as the sum</H2><PRE>

</PRE>
<H2>of the red, green, and blue  components,  and  GL_LUMINANCE_ALPHA</H2><PRE>
does  the same, while keeping alpha as a second value.  The final
values are clamped to the range [0, 1].  The shift, scale,  bias,
and lookup factors just described are all specified by
_cmnd(PixelTransfer).   The  lookup table contents themselves are
specified by _cmnd(PixelMap).  Finally, the indices or components
are  converted to the proper format, as specified by _param6.  If

</PRE>
<H2>_param5 is GL_COLOR_INDEX or GL_STENCIL_INDEX and _param6 is  not</H2><PRE>

</PRE>
<H2>GL_FLOAT,  each  index is masked with the mask value given in the</H2><PRE>

</PRE>
<H2>following table.  If _param6 is GL_FLOAT, then each integer index</H2><PRE>
is  converted  to  single-precision  floating-point  format.   If

</PRE>
<H2>_param5 is GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA,  GL_RGB,  GL_BGR,</H2><PRE>

</PRE>
<H2>GL_RGBA, GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA and _param6</H2><PRE>

</PRE>
<H2>is not GL_FLOAT, each component is multiplied by  the  multiplier</H2><PRE>

</PRE>
<H2>shown  in  the  following  table.  If type is GL_FLOAT, then each</H2><PRE>
component is passed as is (or converted to the  client's  single-
precision  floating-point  format if it is different from the one
used by the GL).
  --------------------------------------------------------------
  _param6              <B>index</B> <B>mask</B>       <B>component</B> <B>conversion</B>
  --------------------------------------------------------------
  <B>GL_UNSIGNED_BYTE</B>    $2"^"8 - 1$         $(2"^"8 - 1)  c$
  <B>GL_BYTE</B>             $2"^"7 - 1$    $[(2"^"8 - 1) c - 1] / 2$
  <B>GL_BITMAP</B>               $1$                   $1$
  <B>GL_UNSIGNED_SHORT</B>   $2"^"16 - 1$        $(2"^"16 - 1) c$
  <B>GL_SHORT</B>            $2"^"15 - 1$   $[(2"^"16 - 1) c - 1] / 2$
  <B>GL_UNSIGNED_INT</B>     $2"^"32 - 1$        $(2"^"32 - 1) c$
  <B>GL_INT</B>              $2"^"31 - 1$   $[(2"^"32 - 1) c - 1] / 2$
  <B>GL_FLOAT</B>                none                  $c$
  --------------------------------------------------------------
Return values are placed in memory as  follows.   If  _param5  is

</PRE>
<H2>GL_COLOR_INDEX,   GL_STENCIL_INDEX,  GL_DEPTH_COMPONENT,  GL_RED,</H2><PRE>

</PRE>
<H2>GL_GREEN, GL_BLUE, GL_ALPHA, or GL_LUMINANCE, a single  value  is</H2><PRE>
returned  and  the  data  for the $i$th pixel in the $j$th row is

</PRE>
<H2>placed in location $(j)~_eqnparam3~+~i$.  GL_RGB and  GL_BGR  re­</H2><PRE>

</PRE>
<H2>turn  three  values,  GL_RGBA and GL_BGRA return four values, and</H2><PRE>

</PRE>
<H2>GL_LUMINANCE_ALPHA returns two values for each  pixel,  with  all</H2><PRE>
values corresponding to a single pixel occupying contiguous space
in _param7.  Storage parameters set by _cmnd(PixelStore), such as

</PRE>
<H2>GL_PACK_LSB_FIRST and GL_PACK_SWAP_BYTES, affect the way that da­</H2><PRE>
ta is written into memory.  See _cmnd(PixelStore) for a  descrip­
tion.  Values for pixels that lie outside the window connected to
the current GL context are undefined.  If an error is  generated,

</PRE>
<H2>no change is made to the contents of _param7.  GL_INVALID_ENUM is</H2><PRE>

</PRE>
<H2>generated if _param5 or _param6 is not an accepted value.  GL_IN­</H2><PRE>

</PRE>
<H2>VALID_ENUM  is  generated  if _param6 is GL_BITMAP and _param5 is</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV,  GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_INT_8_8_8_8,      GL_UNSIGNED_INT_8_8_8_8_REV,      GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_INT_10_10_10_2,  or   GL_UNSIGNED_INT_2_10_10_10_REV   and</H2><PRE>

</PRE>
<H2>_param5  is neither GL_RGBA nor GL_BGRA.  The formats GL_BGR, and</H2><PRE>

</PRE>
<H2>GL_BGRA     and     types     GL_UNSIGNED_BYTE_3_3_2,      GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_BYTE_2_3_3_REV,       GL_UNSIGNED_SHORT_5_6_5,      GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_SHORT_5_6_5_REV,     GL_UNSIGNED_SHORT_4_4_4_4,     GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_SHORT_4_4_4_4_REV,    GL_UNSIGNED_SHORT_5_5_5_1,    GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_SHORT_1_5_5_5_REV,     GL_UNSIGNED_INT_8_8_8_8,     GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_INT_8_8_8_8_REV,  GL_UNSIGNED_INT_10_10_10_2,  and  GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_INT_2_10_10_10_REV are available only if the GL version is</H2><PRE>

</PRE>
<H2>1.2  or  greater.   _cmnd(Get)  with  argument GL_INDEX_MODE _cm­</H2><PRE>
nd(CopyPixels), _cmnd(DrawPixels), _cmnd(PixelMap),  _cmnd(Pixel­
Store), _cmnd(PixelTransfer),
_cmnd(ReadBuffer)





































@


1.1.1.1
log
@win32-x11 source tree update March 26, 2001
@
text
@@
