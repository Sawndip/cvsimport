head	1.2;
access;
symbols
	win32-x11-2001-03-26:1.1.1.1 SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2001.06.03.20.47.08;	author ssiddiqi;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.25.19.36.51;	author ssiddiqi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.03.25.19.36.51;	author ssiddiqi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Win32-X11 update sources check in, June 3, 2001 - ssiddiqi
@
text
@<HTML>
<BODY>
<PRE>
<!-- Manpage converted by man2html 3.0.1 -->
</PRE>
<HR>
<ADDRESS>
Man(1) output converted with
<a href="http://www.oac.uci.edu/indiv/ehood/man2html.html">man2html</a>
</ADDRESS>
</BODY>
</HTML>
@


1.1
log
@Initial revision
@
text
@a4 64
the projection matrix, modelview matrix, or the  texture  matrix.
If  the  current  matrix is $C$, and the coordinates to be trans­
formed are, $v ~=~ (v[0], v[1], v[2], v[3])$.  Then  the  current
transformation is $C ~times~ v$, or

                            down 130
{{ left (  matrix {
   ccol { c[0] above c[1] above c[2] above c[3] }
   ccol { c[4] above c[5] above c[6] above c[7] }
   ccol { c[8] above c[9] above c[10] above c[11] }
   ccol { c[12]~ above c[13]~ above c[14]~ above c[15]~ } } right
) } ~~ times ~~ {left ( matrix { ccol { v[0]~ above  v[1]~  above
v[2]~ above v[3]~ } } right )} }

Calling  _cmnd  with  an  argument of $_eqnparam1 ~=~ m[0], m[1],
..., m[15]$ replaces the current transformation with $(C  ~times~
M) ~times~ v$, or

                            down 130
{{ left (  matrix {
   ccol { c[0] above c[1] above c[2] above c[3] }
   ccol { c[4] above c[5] above c[6] above c[7] }
   ccol { c[8] above c[9] above c[10] above c[11] }
   ccol { c[12]~ above c[13]~ above c[14]~ above c[15]~ } } right
) } ~~ times ~~ { left (  matrix {
   ccol { m[0] above m[1] above m[2] above m[3] }
   ccol { m[4] above m[5] above m[6] above m[7] }
   ccol { m[8] above m[9] above m[10] above m[11] }
   ccol { m[12]~ above m[13]~ above m[14]~ above m[15]~ } } right
)  }  ~~ times ~~ {left ( matrix { ccol { v[0]~ above v[1]~ above
v[2]~ above v[3]~ } } right )} }

Where '$times$' denotes matrix multiplication, and $v$ is  repre­
sented as a $4 ~times~ 1$ matrix.
While  the elements of the matrix may be specified with single or
double precision, the GL may store or operate on these values  in
less  than  single  precision.   In  many  computer  languages $4
~times~ 4$ arrays are represented in row-major order. The  trans­
formations  just described represent these matrices in column-ma­
jor order.  The order of the multiplication is important. For ex­
ample,  if the current transformation is a rotation, and _cmnd is
called with a translation matrix, the translation is done direct­
ly  on  the  coordinates to be transformed, while the rotation is

</PRE>
<H2>done on the results of that translation.  GL_INVALID_OPERATION is</H2><PRE>
generated if _cmnd is executed between the execution of _cmnd(Be­
gin) and the corresponding execution of  _cmnd(End).   _cmnd(Get)

</PRE>
<H2>with argument GL_MATRIX_MODE</H2><PRE>

</PRE>
<H2>_cmnd(Get) with argument GL_COLOR_MATRIX</H2><PRE>

</PRE>
<H2>_cmnd(Get) with argument GL_MODELVIEW_MATRIX</H2><PRE>

</PRE>
<H2>_cmnd(Get) with argument GL_PROJECTION_MATRIX</H2><PRE>

</PRE>
<H2>_cmnd(Get)  with  argument GL_TEXTURE_MATRIX _cmnd(LoadIdentity),</H2><PRE>
_cmnd(LoadMatrix), _cmnd(MatrixMode), _cmnd(PushMatrix)
@


1.1.1.1
log
@win32-x11 source tree update March 26, 2001
@
text
@@
