head	1.2;
access;
symbols
	win32-x11-2001-03-26:1.1.1.1 SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2001.06.03.20.47.08;	author ssiddiqi;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.25.19.36.50;	author ssiddiqi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.03.25.19.36.50;	author ssiddiqi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Win32-X11 update sources check in, June 3, 2001 - ssiddiqi
@
text
@<HTML>
<BODY>
<PRE>
<!-- Manpage converted by man2html 3.0.1 -->
</PRE>
<HR>
<ADDRESS>
Man(1) output converted with
<a href="http://www.oac.uci.edu/indiv/ehood/man2html.html">man2html</a>
</ADDRESS>
</BODY>
</HTML>
@


1.1
log
@Initial revision
@
text
@a4 453
are  accepted.   _phead(_param4)  Specifies  the  data  type  for

</PRE>
<H2>_param5.     Symbolic    constants   GL_UNSIGNED_BYTE,   GL_BYTE,</H2><PRE>

</PRE>
<H2>GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT,  GL_INT,</H2><PRE>

</PRE>
<H2>GL_FLOAT,   GL_UNSIGNED_BYTE_3_3_2,   GL_UNSIGNED_BYTE_2_3_3_REV,</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_SHORT_5_6_5,   GL_UNSIGNED_SHORT_5_6_5_REV,    GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_SHORT_4_4_4_4,    GL_UNSIGNED_SHORT_4_4_4_4_REV,    GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_SHORT_5_5_5_1,    GL_UNSIGNED_SHORT_1_5_5_5_REV,    GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_INT_8_8_8_8,      GL_UNSIGNED_INT_8_8_8_8_REV,      GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are ac­</H2><PRE>
cepted.   _phead(_param5)  Specifies a pointer to the pixel data.
_cmnd reads pixel data from memory and writes it into  the  frame
buffer
relative to the current raster position, provided that the raster
position is valid.  Use
_cmnd(RasterPos) to set the current  raster  position;  use  _cm­

</PRE>
<H2>nd(Get)  with argument GL_CURRENT_RASTER_POSITION_VALID to deter­</H2><PRE>
mine if the specified raster position is  valid,  and  _cmnd(Get)

</PRE>
<H2>with  argument GL_CURRENT_RASTER_POSITION to query the raster po­</H2><PRE>
sition.  Several parameters define the encoding of pixel data  in
memory  and control the processing of the pixel data before it is
placed in the frame buffer.  These parameters are set  with  four
commands:   _cmnd(PixelStore),  _cmnd(PixelTransfer),  _cmnd(Pix­
elMap), and _cmnd(PixelZoom).  This reference page describes  the
effects  on  _cmnd of many, but not all, of the parameters speci­
fied by these four commands.  Data is read from _param5 as a  se­
quence  of  signed  or unsigned bytes, signed or unsigned shorts,
signed or unsigned integers, or  single-precision  floating-point

</PRE>
<H2>values,  depending  on  _param4.   When  _param4 is one of GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_BYTE,   GL_BYTE,   GL_UNSIGNED_SHORT,   GL_SHORT,   GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_INT,  GL_INT, or GL_FLOAT each of these bytes, shorts, in­</H2><PRE>
tegers, or floating-point values is interpreted as one  color  or
depth  component,  or  one  index,  depending  on  _param3.  When

</PRE>
<H2>_param4    is    one    of     GL_UNSIGNED_BYTE_3_3_2,     GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_SHORT_5_6_5,       GL_UNSIGNED_SHORT_4_4_4_4,       GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_SHORT_5_5_5_1,       GL_UNSIGNED_INT_8_8_8_8,       GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_INT_10_10_10_2, each unsigned value is interpreted as con­</H2><PRE>
taining all the components for a single  pixel,  with  the  color
components arranged according to _param3.  When _param4 is one of

</PRE>
<H2>GL_UNSIGNED_BYTE_2_3_3_REV,  GL_UNSIGNED_SHORT_5_6_5_REV,  GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_SHORT_4_4_4_4_REV,  GL_UNSIGNED_SHORT_1_5_5_5_REV,  GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_2_10_10_10_REV, each  un­</H2><PRE>
signed  value  is interpreted as containing all color components,
specified by _param3, for a single pixel in a reversed order. In­
dices  are  always  treated  individually.   Color components are
treated as groups of one, two, three, or four values, again based
on  _param3. Both individual indices and groups of components are

</PRE>
<H2>referred to as pixels.  If _param4 is GL_BITMAP, the data must be</H2><PRE>

</PRE>
<H2>unsigned  bytes,  and  _param3  must  be either GL_COLOR_INDEX or</H2><PRE>

</PRE>
<H2>GL_STENCIL_INDEX.  Each unsigned byte is treated as  eight  1-bit</H2><PRE>

</PRE>
<H2>pixels,  with bit ordering determined by GL_UNPACK_LSB_FIRST (see</H2><PRE>
_cmnd(PixelStore)).  _param1$~ times ~$_param2  pixels  are  read
from  memory,  starting  at  location _param5.  By default, these

</PRE>
<H2>_param3 can assume one of 13 symbolic values: GL_COLOR_INDEX Each</H2><PRE>
pixel  is  a  single  value,  a  color index.  It is converted to
fixed-point format, with an unspecified number  of  bits  to  the
right  of  the  binary point, regardless of the memory data type.
Floating-point values convert to true fixed-point values.  Signed
and unsigned integer data is converted with all fraction bits set
to 0.  Bitmap data convert to either 0 or  1.   Each  fixed-point

</PRE>
<H2>index  is  then  shifted left by GL_INDEX_SHIFT bits and added to</H2><PRE>

</PRE>
<H2>GL_INDEX_OFFSET.  If GL_INDEX_SHIFT is negative, the shift is  to</H2><PRE>
the  right.  In either case, zero bits fill otherwise unspecified
bit locations in the result.  If the GL is in RGBA mode, the  re­
sulting  index is converted to an RGBA pixel with the help of the

</PRE>
<H2>GL_PIXEL_MAP_I_TO_R,  GL_PIXEL_MAP_I_TO_G,   GL_PIXEL_MAP_I_TO_B,</H2><PRE>

</PRE>
<H2>and  GL_PIXEL_MAP_I_TO_A  tables.   If  the  GL is in color index</H2><PRE>

</PRE>
<H2>mode, and if GL_MAP_COLOR is true, the index is replaced with the</H2><PRE>

</PRE>
<H2>value  that  it  references  in lookup table GL_PIXEL_MAP_I_TO_I.</H2><PRE>
Whether the lookup replacement of the index is done or  not,  the
integer  part of the index is then ANDed with $2 sup b -1$, where
$b$ is the number of bits in a color index buffer.  The  GL  then
converts the resulting indices or RGBA colors to fragments by at­
taching the current raster position <I>z</I> coordinate and texture  co­
ordinates  to each pixel, then assigning $x$ and $y$ window coor­
dinates to the $n$th fragment such that

      $x sub n ~=~ x sub r ~+~ n ~ roman mod ~ _eqnparam1$

        $y sub n ~=~ y sub r ~+~ | n ^/^ _eqnparam1 ~ |$

where ($x sub r , y sub  r$)  is  the  current  raster  position.
These  pixel  fragments  are then treated just like the fragments
generated by rasterizing points,  lines,  or  polygons.   Texture
mapping,  fog, and all the fragment operations are applied before

</PRE>
<H2>the fragments are written to the frame buffer.   GL_STENCIL_INDEX</H2><PRE>
Each  pixel  is a single value, a stencil index.  It is converted
to fixed-point format, with an unspecified number of bits to  the
right  of  the  binary point, regardless of the memory data type.
Floating-point values convert to true fixed-point values.  Signed
and unsigned integer data is converted with all fraction bits set
to 0.  Bitmap data convert to either 0 or  1.   Each  fixed-point

</PRE>
<H2>index  is  then shifted left by GL_INDEX_SHIFT bits, and added to</H2><PRE>

</PRE>
<H2>GL_INDEX_OFFSET.  If GL_INDEX_SHIFT is negative, the shift is  to</H2><PRE>
the  right.  In either case, zero bits fill otherwise unspecified

</PRE>
<H2>bit locations in the result.  If GL_MAP_STENCIL is true, the  in­</H2><PRE>
dex is replaced with the value that it references in lookup table

</PRE>
<H2>GL_PIXEL_MAP_S_TO_S.  Whether the lookup replacement of the index</H2><PRE>
is  done or not, the integer part of the index is then ANDed with
$2 sup b -1$, where $b$ is the number  of  bits  in  the  stencil
buffer.   The  resulting  stencil indices are then written to the
stencil buffer such that the $n$th index is written to location
      $x sub n ~=~ x sub r ~+~ n ~ roman mod ~ _eqnparam1$

        $y sub n ~=~ y sub r ~+~ | ~ n / _eqnparam1 ~ |$

depth components to fragments by attaching the current raster po­
sition color or color index and texture coordinates to each  pix­
el,  then  assigning  $x$ and $y$ window coordinates to the $n$th
fragment such that
      $x sub n ~=~ x sub r ~+~ n ~ roman mod ~ _eqnparam1$

        $y sub n ~=~ y sub r ~+~ | ~ n / _eqnparam1 ~ |$

where ($x sub r , y sub  r$)  is  the  current  raster  position.
These  pixel  fragments  are then treated just like the fragments
generated by rasterizing points,  lines,  or  polygons.   Texture
mapping,  fog, and all the fragment operations are applied before

</PRE>
<H2>the fragments are written to the frame buffer.   GL_RGBA  GL_BGRA</H2><PRE>

</PRE>
<H2>Each pixel is a four-component group: for GL_RGBA, the red compo­</H2><PRE>
nent is first, followed by green, followed by blue,  followed  by

</PRE>
<H2>alpha;  for GL_BGRA the order is blue, green, red and then alpha.</H2><PRE>
Floating-point values  are  converted  directly  to  an  internal
floating-point format with unspecified precision.  Signed integer
values are mapped linearly to the internal floating-point  format
such  that  the most positive representable integer value maps to
1.0, and the most negative  representable  value  maps  to  -1.0.
(Note  that  this  mapping  does not convert 0 precisely to 0.0.)
Unsigned integer data is mapped similarly:  the  largest  integer
value  maps  to  1.0, and 0 maps to 0.0.  The resulting floating-

</PRE>
<H2>point color values are then multiplied by GL_c_SCALE and added to</H2><PRE>

</PRE>
<H2>GL_c_BIAS, where c is RED, GREEN, BLUE, and ALPHA for the respec­</H2><PRE>
tive color components.  The results  are  clamped  to  the  range

</PRE>
<H2>[0,1].   If  GL_MAP_COLOR is true, each color component is scaled</H2><PRE>

</PRE>
<H2>by the size of lookup table GL_PIXEL_MAP_c_TO_c, then replaced by</H2><PRE>
the  value  that it references in that table.  <I>c</I> is R, G, B, or A
respectively.  The GL then converts the resulting RGBA colors  to
fragments  by  attaching the current raster position <I>z</I> coordinate
and texture coordinates to each pixel, then assigning $x$ and $y$
window coordinates to the $n$th fragment such that
      $x sub n ~=~ x sub r ~+~ n ~ roman mod ~ _eqnparam1$

        $y sub n ~=~ y sub r ~+~ | ~ n / _eqnparam1 ~ |$

where  ($x  sub  r  ,  y  sub r$) is the current raster position.
These pixel fragments are then treated just  like  the  fragments
generated  by  rasterizing  points,  lines, or polygons.  Texture
mapping, fog, and all the fragment operations are applied  before

</PRE>
<H2>the fragments are written to the frame buffer.  GL_RED Each pixel</H2><PRE>
is a single red component.  This component is  converted  to  the
internal  floating-point format in the same way the red component
of an RGBA pixel is. It is then converted to an RGBA  pixel  with
green  and blue set to 0, and alpha set to 1.  After this conver­
sion, the pixel is treated as if it had been read as an RGBA pix­

</PRE>
<H2>el.   GL_GREEN Each pixel is a single green component.  This com­</H2><PRE>
ponent is converted to the internal floating-point format in  the
same  way  the  green  component of an RGBA pixel is.  It is then
converted to an RGBA pixel with red and blue set to 0, and  alpha

</PRE>
<H2>GL_BGR,  the  first component is blue, followed by green and then</H2><PRE>
red.  Each component is converted to the internal  floating-point
format  in the same way the red, green, and blue components of an
RGBA pixel are.  The color triple is converted to an  RGBA  pixel
with alpha set to 1.  After this conversion, the pixel is treated

</PRE>
<H2>as if it had been read as an RGBA pixel.  GL_LUMINANCE Each pixel</H2><PRE>
is  a single luminance component.  This component is converted to
the internal floating-point format in the same way the red compo­
nent  of an RGBA pixel is.  It is then converted to an RGBA pixel
with red, green, and blue set to the converted  luminance  value,
and  alpha set to 1.  After this conversion, the pixel is treated

</PRE>
<H2>as if it had been read as an RGBA pixel.  GL_LUMINANCE_ALPHA Each</H2><PRE>
pixel  is a two-component group: luminance first, followed by al­
pha.  The two components are converted to the internal  floating-
point  format  in the same way the red component of an RGBA pixel
is.  They are then converted to an RGBA pixel  with  red,  green,
and  blue  set to the converted luminance value, and alpha set to
the converted alpha value.  After this conversion, the  pixel  is
treated  as  if it had been read as an RGBA pixel.  The following
table summarizes the meaning of the valid constants for the  <I>type</I>
parameter:


------------------------------------------------------------------------------------------

</PRE>
<H2>Type                             Corresponding Type</H2><PRE>
------------------------------------------------------------------------------------------

</PRE>
<H2>GL_UNSIGNED_BYTE                 unsigned 8-bit integer</H2><PRE>

</PRE>
<H2>GL_BYTE                          signed 8-bit integer</H2><PRE>

</PRE>
<H2>GL_BITMAP                        single bits in unsigned 8-bit integers</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_SHORT                unsigned 16-bit integer</H2><PRE>

</PRE>
<H2>GL_SHORT                         signed 16-bit integer</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_INT                  unsigned 32-bit integer</H2><PRE>

</PRE>
<H2>GL_INT                           32-bit integer</H2><PRE>

</PRE>
<H2>GL_FLOAT                         single-precision floating-point</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_BYTE_3_3_2           unsigned 8-bit integer</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_BYTE_2_3_3_REV       unsigned 8-bit integer with reversed component ordering</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_SHORT_5_6_5          unsigned 16-bit integer</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_SHORT_5_6_5_REV      unsigned 16-bit integer with reversed component ordering</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_SHORT_4_4_4_4        unsigned 16-bit integer</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_SHORT_4_4_4_4_REV    unsigned 16-bit integer with reversed component ordering</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_SHORT_5_5_5_1        unsigned 16-bit integer</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_SHORT_1_5_5_5_REV    unsigned 16-bit integer with reversed component ordering</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_INT_8_8_8_8          unsigned 32-bit integer</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_INT_8_8_8_8_REV      unsigned 32-bit integer with reversed component ordering</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_INT_10_10_10_2       unsigned 32-bit integer</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_INT_2_10_10_10_REV   unsigned 32-bit integer with reversed component ordering</H2><PRE>
------------------------------------------------------------------------------------------

The  rasterization described so far assumes pixel zoom factors of
1.  If
_cmnd(PixelZoom) is used to change the $x$  and  $y$  pixel  zoom
factors,  pixels  are  converted to fragments as follows.  If ($x

</PRE>
<H2>SIGNED_SHORT_5_6_5,      GL_UNSIGNED_SHORT_5_6_5_REV,      GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_SHORT_4_4_4_4,    GL_UNSIGNED_SHORT_4_4_4_4_REV,    GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_SHORT_5_5_5_1,    GL_UNSIGNED_SHORT_1_5_5_5_REV,    GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_INT_8_8_8_8,      GL_UNSIGNED_INT_8_8_8_8_REV,      GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV are on­</H2><PRE>

</PRE>
<H2>ly valid for _param4 if the GL version is 1.2 or greater.  GL_IN­</H2><PRE>

</PRE>
<H2>VALID_VALUE is generated if either _param1 or  _param2  is  nega­</H2><PRE>

</PRE>
<H2>tive.   GL_INVALID_ENUM is generated if _param3 or _param4 is not</H2><PRE>

</PRE>
<H2>one of the accepted values.  GL_INVALID_OPERATION is generated if</H2><PRE>

</PRE>
<H2>_param3  is GL_RED, GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB, GL_RGBA,</H2><PRE>

</PRE>
<H2>GL_BGR, GL_BGRA, GL_LUMINANCE, or GL_LUMINANCE_ALPHA, and the  GL</H2><PRE>

</PRE>
<H2>is  in color index mode.  GL_INVALID_ENUM is generated if _param4</H2><PRE>

</PRE>
<H2>is GL_BITMAP and _param3 is not either GL_COLOR_INDEX or GL_STEN­</H2><PRE>

</PRE>
<H2>CIL_INDEX.   GL_INVALID_OPERATION  is  generated  if  _param3  is</H2><PRE>

</PRE>
<H2>GL_STENCIL_INDEX and there is no stencil buffer.   GL_INVALID_OP­</H2><PRE>

</PRE>
<H2>ERATION  is  generated if _cmnd is executed between the execution</H2><PRE>
of _cmnd(Begin) and the corresponding  execution  of  _cmnd(End).

</PRE>
<H2>GL_INVALID_OPERATION  is  generated  if  _param3  is  one  GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_BYTE_3_3_2,       GL_UNSIGNED_BYTE_2_3_3_REV,       GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_SHORT_5_6_5, of GL_UNSIGNED_SHORT_5_6_5_REV and _param3 is</H2><PRE>

</PRE>
<H2>not GL_RGB.  GL_INVALID_OPERATION is generated if _param3 is  one</H2><PRE>

</PRE>
<H2>of    GL_UNSIGNED_SHORT_4_4_4_4,   GL_UNSIGNED_SHORT_4_4_4_4_REV,</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV,  GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_INT_8_8_8_8,      GL_UNSIGNED_INT_8_8_8_8_REV,      GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_INT_10_10_10_2,  or   GL_UNSIGNED_INT_2_10_10_10_REV   and</H2><PRE>

</PRE>
<H2>_param3 is neither GL_RGBA nor GL_BGRA.  _cmnd(Get) with argument</H2><PRE>

</PRE>
<H2>GL_CURRENT_RASTER_POSITION</H2><PRE>

</PRE>
<H2>_cmnd(Get) with  argument  GL_CURRENT_RASTER_POSITION_VALID  _cm­</H2><PRE>
nd(AlphaFunc),  _cmnd(BlendFunc), _cmnd(CopyPixels), _cmnd(Depth­
Func), _cmnd(LogicOp), _cmnd(PixelMap),  _cmnd(PixelStore),  _cm­
nd(PixelTransfer),   _cmnd(PixelZoom),   _cmnd(RasterPos),   _cm­
nd(ReadPixels), _cmnd(Scissor), _cmnd(StencilFunc)




















@


1.1.1.1
log
@win32-x11 source tree update March 26, 2001
@
text
@@
