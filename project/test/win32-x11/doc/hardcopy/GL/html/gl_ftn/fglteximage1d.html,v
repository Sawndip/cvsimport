head	1.2;
access;
symbols
	win32-x11-2001-03-26:1.1.1.1 SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2001.06.03.20.47.09;	author ssiddiqi;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.25.19.36.51;	author ssiddiqi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.03.25.19.36.51;	author ssiddiqi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Win32-X11 update sources check in, June 3, 2001 - ssiddiqi
@
text
@<HTML>
<BODY>
<PRE>
<!-- Manpage converted by man2html 3.0.1 -->
</PRE>
<HR>
<ADDRESS>
Man(1) output converted with
<a href="http://www.oac.uci.edu/indiv/ehood/man2html.html">man2html</a>
</ADDRESS>
</BODY>
</HTML>
@


1.1
log
@Initial revision
@
text
@a4 358

</PRE>
<H2>constants: GL_ALPHA,  GL_ALPHA4,  GL_ALPHA8,  GL_ALPHA12,  GL_AL­</H2><PRE>

</PRE>
<H2>PHA16,   GL_LUMINANCE,   GL_LUMINANCE4,  GL_LUMINANCE8,  GL_LUMI­</H2><PRE>

</PRE>
<H2>NANCE12,  GL_LUMINANCE16,  GL_LUMINANCE_ALPHA,  GL_LUMINANCE4_AL­</H2><PRE>

</PRE>
<H2>PHA4,    GL_LUMINANCE6_ALPHA2,   GL_LUMINANCE8_ALPHA8,   GL_LUMI­</H2><PRE>

</PRE>
<H2>NANCE12_ALPHA4,  GL_LUMINANCE12_ALPHA12,  GL_LUMINANCE16_ALPHA16,</H2><PRE>

</PRE>
<H2>GL_INTENSITY,   GL_INTENSITY4,   GL_INTENSITY8,   GL_INTENSITY12,</H2><PRE>

</PRE>
<H2>GL_INTENSITY16, GL_RGB, GL_R3_G3_B2, GL_RGB4,  GL_RGB5,  GL_RGB8,</H2><PRE>

</PRE>
<H2>GL_RGB10,   GL_RGB12,   GL_RGB16,  GL_RGBA,  GL_RGBA2,  GL_RGBA4,</H2><PRE>

</PRE>
<H2>GL_RGB5_A1,  GL_RGBA8,  GL_RGB10_A2,  GL_RGBA12,  or   GL_RGBA16.</H2><PRE>
_phead(_param4)  Specifies  the width of the texture image.  Must
be $2 sup n + 2 ( _eqnparam5 )$ for some integer $n$. All  imple­
mentations  support  texture  images  that are at least 64 texels
wide. The height of the 1D texture image is  1.   _phead(_param5)
Specifies  the  width  of  the  border.   Must  be either 0 or 1.
_phead(_param6) Specifies the format of the pixel data.  The fol­

</PRE>
<H2>lowing  symbolic  values  are  accepted:  GL_COLOR_INDEX, GL_RED,</H2><PRE>

</PRE>
<H2>GL_GREEN, GL_BLUE, GL_ALPHA, GL_RGB,  GL_BGR,  GL_RGBA,  GL_BGRA,</H2><PRE>

</PRE>
<H2>GL_LUMINANCE,  and GL_LUMINANCE_ALPHA.  _phead(_param7) Specifies</H2><PRE>
the data type of the pixel data.  The following  symbolic  values

</PRE>
<H2>are   accepted:   GL_UNSIGNED_BYTE,  GL_BYTE,  GL_BITMAP,  GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_BYTE_3_3_2,       GL_UNSIGNED_BYTE_2_3_3_REV,       GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_SHORT_5_6_5,      GL_UNSIGNED_SHORT_5_6_5_REV,      GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_SHORT_4_4_4_4,    GL_UNSIGNED_SHORT_4_4_4_4_REV,    GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_SHORT_5_5_5_1,    GL_UNSIGNED_SHORT_1_5_5_5_REV,    GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_INT_8_8_8_8,      GL_UNSIGNED_INT_8_8_8_8_REV,      GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_INT_10_10_10_2,    and     GL_UNSIGNED_INT_2_10_10_10_REV.</H2><PRE>
_phead(_param8)  Specifies a pointer to the image data in memory.
Texturing maps a portion of a specified texture image  onto  each
graphical  primitive  for  which texturing is enabled.  To enable
and disable one-dimensional  texturing,  call  _cmnd(Enable)  and

</PRE>
<H2>_cmnd(Disable)  with  argument GL_TEXTURE_1D.  Texture images are</H2><PRE>
defined with _cmnd.  The arguments describe the parameters of the
texture  image,  such as width, width of the border, level-of-de­
tail number (see _cmnd(TexParameter)), and the  internal  resolu­
tion  and  format  used to store the image.  The last three argu­
ments describe how the image is represented in memory;  they  are
identical  to  the  pixel formats used for _cmnd(DrawPixels).  If

</PRE>
<H2>_param1 is GL_PROXY_TEXTURE_1D, no data is read from _param8, but</H2><PRE>
all  of the texture image state is recalculated, checked for con­
sistency, and checked against the implementation's  capabilities.
If  the  implementation  cannot handle a texture of the requested
texture size, it sets all of the image state to 0, but  does  not
generate  an  error (see _cmnd(GetError)). To query for an entire
mipmap array, use an image array level greater than or  equal  to

</PRE>
<H2>1.   If  _param1 is GL_TEXTURE_1D, data is read from _param8 as a</H2><PRE>
sequence of signed or unsigned bytes, shorts, or longs,  or  sin­
gle-precision floating-point values, depending on _param7.  These
values are grouped into sets of one, two, three, or four  values,

</PRE>
<H2>depending on _param6, to form elements.  If _param7 is GL_BITMAP,</H2><PRE>
the data is considered as a string of unsigned bytes (and _param6

</PRE>
<H2>must  be  GL_COLOR_INDEX).   Each  data  byte is treated as eight</H2><PRE>

</PRE>
<H2>and GL_PIXEL_MAP_I_TO_A tables, and clamped to the  range  [0,1].</H2><PRE>

</PRE>
<H2>GL_RED  Each  element is a single red component.  The GL converts</H2><PRE>
it to floating point and assembles it into an RGBA element by at­
taching 0 for green and blue, and 1 for alpha.  Each component is

</PRE>
<H2>then multiplied by the signed scale factor GL_c_SCALE,  added  to</H2><PRE>

</PRE>
<H2>the  signed  bias GL_c_BIAS.  and clamped to the range [0,1] (see</H2><PRE>

</PRE>
<H2>_cmnd(PixelTransfer)).  GL_GREEN Each element is a  single  green</H2><PRE>
component.  The GL converts it to floating point and assembles it
into an RGBA element by attaching 0 for red and blue, and  1  for
alpha.   Each  component  is  then multiplied by the signed scale

</PRE>
<H2>factor GL_c_SCALE,  added  to  the  signed  bias  GL_c_BIAS,  and</H2><PRE>

</PRE>
<H2>clamped  to  the range [0,1] (see _cmnd(PixelTransfer)).  GL_BLUE</H2><PRE>
Each element is a single blue component.  The GL converts  it  to
floating point and assembles it into an RGBA element by attaching
0 for red and green, and 1 for alpha.   Each  component  is  then

</PRE>
<H2>multiplied  by  the  signed scale factor GL_c_SCALE, added to the</H2><PRE>

</PRE>
<H2>signed bias GL_c_BIAS, and clamped to the range [0,1]  (see  _cm­</H2><PRE>

</PRE>
<H2>nd(PixelTransfer)).  GL_ALPHA Each element is a single alpha com­</H2><PRE>
ponent.  The GL converts it to floating point  and  assembles  it
into  an  RGBA  element  by attaching 0 for red, green, and blue.
Each component is then multiplied  by  the  signed  scale  factor

</PRE>
<H2>GL_c_SCALE,  added  to  the signed bias GL_c_BIAS, and clamped to</H2><PRE>

</PRE>
<H2>the range [0,1] (see _cmnd(PixelTransfer)).  GL_RGB  GL_BGR  Each</H2><PRE>
element  is  an RGB triple.  The GL converts it to floating point
and assembles it into an RGBA element by attaching 1  for  alpha.
Each  component  is  then  multiplied  by the signed scale factor

</PRE>
<H2>GL_c_SCALE, added to the signed bias GL_c_BIAS,  and  clamped  to</H2><PRE>

</PRE>
<H2>the range [0,1] (see _cmnd(PixelTransfer)).  GL_RGBA GL_BGRA Each</H2><PRE>
element contains all four components.   Each  component  is  then

</PRE>
<H2>multiplied  by  the  signed scale factor GL_c_SCALE, added to the</H2><PRE>

</PRE>
<H2>signed bias GL_c_BIAS, and clamped to the range [0,1]  (see  _cm­</H2><PRE>

</PRE>
<H2>nd(PixelTransfer)).   GL_LUMINANCE Each element is a single lumi­</H2><PRE>
nance value.  The GL converts it to floating point,  then  assem­
bles  it  into an RGBA element by replicating the luminance value
three times for red, green, and blue and attaching 1  for  alpha.
Each  component  is  then  multiplied  by the signed scale factor

</PRE>
<H2>GL_c_SCALE, added to the signed bias GL_c_BIAS,  and  clamped  to</H2><PRE>

</PRE>
<H2>the  range  [0,1] (see _cmnd(PixelTransfer)).  GL_LUMINANCE_ALPHA</H2><PRE>
Each element is a luminance/alpha pair.  The GL  converts  it  to
floating  point, then assembles it into an RGBA element by repli­
cating the luminance value three times for red, green, and  blue.
Each  component  is  then  multiplied  by the signed scale factor

</PRE>
<H2>GL_c_SCALE, added to the signed bias GL_c_BIAS,  and  clamped  to</H2><PRE>
the  range  [0,1]  (see _cmnd(PixelTransfer)).  If an application
wants to store the texture at a certain resolution or in  a  cer­
tain  format,  it  can  request  the  resolution  and format with
_param3. The GL  will  choose  an  internal  representation  that
closely  approximates  that  requested by _param3, but it may not

</PRE>
<H2>match exactly.  (The representations specified  by  GL_LUMINANCE,</H2><PRE>

</PRE>
<H2>GL_LUMINANCE_ALPHA,  GL_RGB,  and GL_RGBA must match exactly. The</H2><PRE>
numeric values 1, 2, 3, and 4 may also be  used  to  specify  the

</PRE>
<H2>preceding  representations.)   Use the GL_PROXY_TEXTURE_1D target</H2><PRE>
orTable).  2. One-dimensional convolution filtering, if  enabled.
See  _cmnd(ConvolutionFilter1D).  If a convolution filter changes

</PRE>
<H2>the __width of the texture  (by  processing  with  a  GL_CONVOLU­</H2><PRE>

</PRE>
<H2>TION_BORDER_MODE  of GL_REDUCE, for example), the _param4 must $2</H2><PRE>
sup n + 2 ( _eqnparam5 )$, for some integer $n$, after filtering.

</PRE>
<H2>3.   RGBA   components  may  be  multiplied  by  GL_POST_CONVOLU­</H2><PRE>

</PRE>
<H2>TION_c_SCALE, and added  to  GL_POST_CONVOLUTION_c_BIAS,  if  en­</H2><PRE>
abled.  See _cmnd(PixelTransfer).  4. Color component replacement

</PRE>
<H2>by the color table specified for GL_POST_CONVOLUTION_COLOR_TABLE,</H2><PRE>
if  enabled.   See  _cmnd(ColorTable).   5. Transformation by the
color matrix.  See _cmnd(MatrixMode).  6. RGBA components may  be

</PRE>
<H2>multiplied   by   GL_POST_COLOR_MATRIX_c_SCALE,   and   added  to</H2><PRE>

</PRE>
<H2>GL_POST_COLOR_MATRIX_c_BIAS, if enabled.   See  _cmnd(PixelTrans­</H2><PRE>
fer).   7.  Color component replacement by the color table speci­

</PRE>
<H2>fied for GL_POST_COLOR_MATRIX_COLOR_TABLE, if enabled.  See  _cm­</H2><PRE>
nd(ColorTable).  The texture image can be represented by the same
data formats as the pixels in a _cmnd(DrawPixels) command, except

</PRE>
<H2>that  GL_STENCIL_INDEX  and  GL_DEPTH_COMPONENT  cannot  be used.</H2><PRE>
_cmnd(PixelStore) and _cmnd(PixelTransfer) modes  affect  texture
images   in   exactly  the  way  they  affect  _cmnd(DrawPixels).

</PRE>
<H2>GL_PROXY_TEXTURE_1D may be used only if the GL version is 1.1  or</H2><PRE>
greater.   Internal  formats other than 1, 2, 3, or 4 may be used
only if the GL version is 1.1 or greater.  In GL version  1.1  or
greater, _param8 may be a null pointer. In this case texture mem­
ory is allocated to accommodate a texture of width _param4.   You
can  then  download subtextures to initialize the texture memory.
The image is undefined if the program tries to  apply  an  unini­
tialized  portion  of  the texture image to a primitive.  Formats

</PRE>
<H2>GL_BGR, and  GL_BGRA  and  types  GL_UNSIGNED_BYTE_3_3_2,  GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_BYTE_2_3_3_REV,       GL_UNSIGNED_SHORT_5_6_5,      GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_SHORT_5_6_5_REV,     GL_UNSIGNED_SHORT_4_4_4_4,     GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_SHORT_4_4_4_4_REV,    GL_UNSIGNED_SHORT_5_5_5_1,    GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_SHORT_1_5_5_5_REV,     GL_UNSIGNED_INT_8_8_8_8,     GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_INT_8_8_8_8_REV,  GL_UNSIGNED_INT_10_10_10_2,  and  GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_INT_2_10_10_10_REV are available only if the GL version is</H2><PRE>
1.2  or  greater.  When the _arbstring(multitexture) extension is
supported, _cmnd specifies the one-dimensional  texture  for  the
current  texture  unit,  specified  with _cmnd(ActiveTextureARB).

</PRE>
<H2>GL_INVALID_ENUM is generated if _param1 is not  GL_TEXTURE_1D  or</H2><PRE>

</PRE>
<H2>GL_PROXY_TEXTURE_1D.   GL_INVALID_ENUM is generated if _param6 is</H2><PRE>
not an accepted format constant.   Format  constants  other  than

</PRE>
<H2>GL_STENCIL_INDEX  and  GL_DEPTH_COMPONENT  are  accepted.  GL_IN­</H2><PRE>

</PRE>
<H2>VALID_ENUM is generated  if  _param7  is  not  a  type  constant.</H2><PRE>

</PRE>
<H2>GL_INVALID_ENUM  is generated if _param7 is GL_BITMAP and _param6</H2><PRE>

</PRE>
<H2>is not GL_COLOR_INDEX.  GL_INVALID_VALUE is generated if  _param2</H2><PRE>

</PRE>
<H2>is  less than 0.  GL_INVALID_VALUE may be generated if _param2 is</H2><PRE>
greater than $log sub 2$<I>max</I>, where <I>max</I> is the returned  value  of

</PRE>
<H2>GL_MAX_TEXTURE_SIZE.  GL_INVALID_VALUE is generated if _param3 is</H2><PRE>
not 1, 2, 3, 4, or one of the accepted resolution and format sym­

</PRE>
<H2>bolic  constants.   GL_INVALID_VALUE  is  generated if _param4 is</H2><PRE>

</PRE>
<H2>less than 0 or greater than 2 +  GL_MAX_TEXTURE_SIZE,  or  if  it</H2><PRE>
cannot be represented as $2 sup n ~+~ 2(_eqnparam5)$ for some in­
tureARB),   _cmnd(ColorTable),  _cmnd(ConvolutionFilter1D),  _cm­
nd(CopyPixels),   _cmnd(CopyTexImage1D),   _cmnd(CopyTexImage2D),
_cmnd(CopyTexSubImage1D),  _cmnd(CopyTexSubImage2D),  _cmnd(Copy­
TexSubImage3D), _cmnd(DrawPixels), _cmnd(MatrixMode),  _cmnd(Pix­
elStore),   _cmnd(PixelTransfer),  _cmnd(TexEnv),  _cmnd(TexGen),
_cmnd(TexImage2D), _cmnd(TexImage3D), _cmnd(TexSubImage1D),  _cm­
nd(TexSubImage2D), _cmnd(TexSubImage3D), _cmnd(TexParameter)













































@


1.1.1.1
log
@win32-x11 source tree update March 26, 2001
@
text
@@
