head	1.2;
access;
symbols
	win32-x11-2001-03-26:1.1.1.1 SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2001.06.03.20.47.08;	author ssiddiqi;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.25.19.36.50;	author ssiddiqi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.03.25.19.36.50;	author ssiddiqi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Win32-X11 update sources check in, June 3, 2001 - ssiddiqi
@
text
@<HTML>
<BODY>
<PRE>
<!-- Manpage converted by man2html 3.0.1 -->
</PRE>
<HR>
<ADDRESS>
Man(1) output converted with
<a href="http://www.oac.uci.edu/indiv/ehood/man2html.html">man2html</a>
</ADDRESS>
</BODY>
</HTML>
@


1.1
log
@Initial revision
@
text
@a4 178

Additionally,  if the _arbstring(imaging) extension is supported,

</PRE>
<H2>the  following   constants   are   accepted:   GL_CONSTANT_COLOR,</H2><PRE>

</PRE>
<H2>GL_ONE_MINUS_CONSTANT_COLOR, GL_CONSTANT_ALPHA, GL_ONE_MINUS_CON­</H2><PRE>

</PRE>
<H2>STANT_ALPHA.  _phead(_param2) Specifies how the red, green, blue,</H2><PRE>
and  alpha destination blending factors are computed.  Eight sym­

</PRE>
<H2>bolic constants  are  accepted:  GL_ZERO,  GL_ONE,  GL_SRC_COLOR,</H2><PRE>

</PRE>
<H2>GL_ONE_MINUS_SRC_COLOR,   GL_SRC_ALPHA,   GL_ONE_MINUS_SRC_ALPHA,</H2><PRE>

</PRE>
<H2>GL_DST_ALPHA, and GL_ONE_MINUS_DST_ALPHA.  The initial  value  is</H2><PRE>

</PRE>
<H2>GL_ZERO.</H2><PRE>

Additionally,  if the _arbstring(imaging) extension is supported,

</PRE>
<H2>the  following   constants   are   accepted:   GL_CONSTANT_COLOR,</H2><PRE>

</PRE>
<H2>GL_ONE_MINUS_CONSTANT_COLOR, GL_CONSTANT_ALPHA, GL_ONE_MINUS_CON­</H2><PRE>

</PRE>
<H2>STANT_ALPHA.  In RGBA mode, pixels can be drawn using a  function</H2><PRE>
that  blends the incoming (source) RGBA values with the RGBA val­
ues that are already in the frame buffer  (the  destination  val­
ues).   Blending  is  initially  disabled.  Use _cmnd(Enable) and

</PRE>
<H2>_cmnd(Disable) with  argument  GL_BLEND  to  enable  and  disable</H2><PRE>
blending.  _cmnd defines the operation of blending when it is en­
abled.  _param1 specifies which of nine methods is used to  scale
the  source  color  components.  _param2 specifies which of eight
methods is used to scale the destination color  components.   The
eleven  possible  methods  are  described in the following table.
Each method defines four scale factors, one each for red,  green,
blue,  and  alpha.   In  the  table  and in subsequent equations,
source and destination color components are referred  to  as  $(R
sub  s , G sub s , B sub s , A sub s )$ and $(R sub d , G sub d ,
B sub d , A sub d )$.  The color specified  by  _cmnd(BlendColor)
is  referred  to  as  $(R sub c , G sub c , B sub c , A sub c )$.
They are understood to have integer values between 0 and $(k  sub
R , k sub G , k sub B , k sub A )$, where
                 $k sub c ~=~ 2 sup m sub c - 1$
and  $(m  sub R , m sub G , m sub B , m sub A )$ is the number of
red, green, blue, and alpha bitplanes.   Source  and  destination
scale  factors are referred to as $(s sub R , s sub G , s sub B ,
s sub A )$ and $(d sub R , d sub G , d sub B , d sub A  )$.   The
scale factors described in the table, denoted $(f sub R , f sub G
, f sub B , f sub A )$, represent either  source  or  destination
factors.  All scale factors have range [0, 1].
-----------------------------------------------------------------------------------------------------------------------------------------

</PRE>
<H2>Parameter                                                $(f sub R , ~~ f sub G , ~~ f sub B , ~~ f sub A )$</H2><PRE>
-----------------------------------------------------------------------------------------------------------------------------------------

</PRE>
<H2>GL_ZERO                                                                   $(0, ~0, ~0, ~0 )$</H2><PRE>

</PRE>
<H2>GL_ONE                                                                    $(1, ~1, ~1, ~1 )$</H2><PRE>

</PRE>
<H2>GL_SRC_COLOR                            $(R sub s / k sub R , ~G sub s / k sub G , ~B sub s / k sub B , ~A sub s / k sub A )$</H2><PRE>

</PRE>
<H2>GL_ONE_MINUS_SRC_COLOR        $(1, ~1, ~1, ~1 ) ~-~ (R sub s / k sub R , ~G sub s / k sub G , ~B sub s / k sub B , ~A sub s / k sub A )$</H2><PRE>

</PRE>
<H2>GL_DST_COLOR                            $(R sub d / k sub R , ~G sub d / k sub G , ~B sub d / k sub B , ~A sub d / k sub A )$</H2><PRE>

</PRE>
<H2>GL_ONE_MINUS_DST_COLOR        $(1, ~1, ~1, ~1 ) ~-~ (R sub d / k sub R , ~G sub d / k sub G , ~B sub d / k sub B , ~A sub d / k sub A )$</H2><PRE>

</PRE>
<H2>GL_SRC_ALPHA                            $(A sub s / k sub A , ~A sub s / k sub A , ~A sub s / k sub A , ~A sub s / k sub A )$</H2><PRE>

</PRE>
<H2>GL_ONE_MINUS_SRC_ALPHA        $(1, ~1, ~1, ~1 ) ~-~ (A sub s / k sub A , ~A sub s / k sub A , ~A sub s / k sub A , ~A sub s / k sub A )$</H2><PRE>

</PRE>
<H2>GL_DST_ALPHA                            $(A sub d / k sub A , ~A sub d / k sub A , ~A sub d / k sub A , ~A sub d / k sub A )$</H2><PRE>
$R sub d ~=~ mark   min ( k sub R, ~R sub s~s sub R~+~R sub d~d sub R )$
$G sub d ~=~ lineup min ( k sub G, ~G sub s~s sub G~+~G sub d~d sub G )$
$B sub d ~=~ lineup min ( k sub B, ~B sub s~s sub B~+~B sub d~d sub B )$
$A sub d ~=~ lineup min ( k sub A, ~A sub s~s sub A~+~A sub d~d sub A )$
Despite the apparent precision of the above  equations,  blending
arithmetic  is  not  exactly specified, because blending operates
with imprecise integer color values.   However,  a  blend  factor
that  should be equal to 1 is guaranteed not to modify its multi­
plicand, and a blend factor equal to 0 reduces  its  multiplicand

</PRE>
<H2>to  0.   For  example,  when  _param1 is GL_SRC_ALPHA, _param2 is</H2><PRE>

</PRE>
<H2>GL_ONE_MINUS_SRC_ALPHA, and $A sub s$ is equal to $k sub A$,  the</H2><PRE>
equations reduce to simple replacement:
$R sub d ~=~ mark   R sub s$
$G sub d ~=~ lineup G sub s$
$B sub d ~=~ lineup B sub s$
$A sub d ~=~ lineup A sub s$

</PRE>
<H2>Transparency is best implemented using blend function (GL_SRC_AL­</H2><PRE>

</PRE>
<H2>PHA, GL_ONE_MINUS_SRC_ALPHA) with primitives sorted from farthest</H2><PRE>
to nearest.  Note that this transparency calculation does not re­
quire the presence of alpha bitplanes in the frame buffer.  Blend

</PRE>
<H2>function  (GL_SRC_ALPHA,  GL_ONE_MINUS_SRC_ALPHA)  is also useful</H2><PRE>
for rendering antialiased points and lines  in  arbitrary  order.
Polygon antialiasing is optimized using blend function

</PRE>
<H2>(GL_SRC_ALPHA_SATURATE, GL_ONE) with polygons sorted from nearest</H2><PRE>
to farthest.  (See the  _cmnd(Enable),  _cmnd(Disable)  reference

</PRE>
<H2>page  and the GL_POLYGON_SMOOTH argument for information on poly­</H2><PRE>
gon antialiasing.)  Destination alpha bitplanes,  which  must  be
present  for  this blend function to operate correctly, store the
accumulated  coverage.   Incoming  (source)  alpha  is  correctly
thought  of  as a material opacity, ranging from 1.0 ($K sub A$),
representing complete opacity, to 0.0 (0), representing  complete
transparency.   When  more  than  one color buffer is enabled for
drawing, the GL performs blending  separately  for  each  enabled
buffer,  using the contents of that buffer for destination color.
(See _cmnd(DrawBuffer).)  Blending affects only  RGBA  rendering.

</PRE>
<H2>It  is  ignored  by  color  index  renderers.  GL_CONSTANT_COLOR,</H2><PRE>

</PRE>
<H2>GL_ONE_MINUS_CONSTANT_COLOR, GL_CONSTANT_ALPHA, GL_ONE_MINUS_CON­</H2><PRE>

</PRE>
<H2>STANT_ALPHA are only available if the _arbstring(imaging) is sup­</H2><PRE>

</PRE>
<H2>ported by your implementation.  GL_INVALID_ENUM is  generated  if</H2><PRE>

</PRE>
<H2>either  _param1  or  _param2  is  not  an accepted value.  GL_IN­</H2><PRE>

</PRE>
<H2>VALID_OPERATION is generated if _cmnd is executed between the ex­</H2><PRE>
ecution  of  _cmnd(Begin) and the corresponding execution of _cm­

</PRE>
<H2>nd(End).  _cmnd(Get) with argument GL_BLEND_SRC</H2><PRE>

</PRE>
<H2>_cmnd(Get) with argument GL_BLEND_DST</H2><PRE>

</PRE>
<H2>_cmnd(IsEnabled) with argument GL_BLEND</H2><PRE>
_cmnd(AlphaFunc), _cmnd(BlendColor),  _cmnd(BlendEquation),  _cm­
nd(Clear), _cmnd(DrawBuffer), _cmnd(Enable), _cmnd(LogicOp), _cm­
nd(StencilFunc)




@


1.1.1.1
log
@win32-x11 source tree update March 26, 2001
@
text
@@
