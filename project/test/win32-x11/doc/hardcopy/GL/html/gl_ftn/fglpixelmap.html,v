head	1.2;
access;
symbols
	win32-x11-2001-03-26:1.1.1.1 SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2001.06.03.20.47.08;	author ssiddiqi;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.25.19.36.51;	author ssiddiqi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.03.25.19.36.51;	author ssiddiqi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Win32-X11 update sources check in, June 3, 2001 - ssiddiqi
@
text
@<HTML>
<BODY>
<PRE>
<!-- Manpage converted by man2html 3.0.1 -->
</PRE>
<HR>
<ADDRESS>
Man(1) output converted with
<a href="http://www.oac.uci.edu/indiv/ehood/man2html.html">man2html</a>
</ADDRESS>
</BODY>
</HTML>
@


1.1
log
@Initial revision
@
text
@a4 180
_phead(_param3) Specifies an array of _param2 values.  _cmnd sets
up translation tables, or <I>maps</I>, used by _cmnd(CopyPixels), _cm­
nd(CopyTexImage1D), _cmnd(CopyTexImage2D), _cmnd(CopyTexSubIm­
age1D), _cmnd(CopyTexSubImage2D), _cmnd(CopyTexSubImage3D), _cm­
nd(DrawPixels), _cmnd(ReadPixels), _cmnd(TexImage1D), _cmnd(Tex­
Image2D), _cmnd(TexImage3D), _cmnd(TexSubImage1D), _cmnd(Tex­
SubImage2D), and _cmnd(TexSubImage3D).  Additionally, if the
_arbstring(imaging) subset is supported, the routines _cmnd(Col­
orTable), _cmnd(ColorSubTable), _cmnd(ConvolutionFilter1D), _cm­
nd(ConvolutionFilter2D), _cmnd(Histogram), _cmnd(Minmax), and
_cmnd(SeparableFilter2D).  Use of these maps is described com­
pletely in the _cmnd(PixelTransfer) reference page, and partly in
the reference pages for the pixel and texture image commands.
Only the specification of the maps is described in this reference
page.  _param1 is a symbolic map name, indicating one of ten maps
to set.  _param2 specifies the number of entries in the map, and
_param3 is a pointer to an array of _param2 map values.  The ten

</PRE>
<H2>maps are as follows: GL_PIXEL_MAP_I_TO_I Maps color indices to</H2><PRE>

</PRE>
<H2>color indices.  GL_PIXEL_MAP_S_TO_S Maps stencil indices to sten­</H2><PRE>

</PRE>
<H2>cil indices.  GL_PIXEL_MAP_I_TO_R Maps color indices to red com­</H2><PRE>

</PRE>
<H2>ponents.  GL_PIXEL_MAP_I_TO_G Maps color indices to green compo­</H2><PRE>

</PRE>
<H2>nents.  GL_PIXEL_MAP_I_TO_B Maps color indices to blue compo­</H2><PRE>

</PRE>
<H2>nents.  GL_PIXEL_MAP_I_TO_A Maps color indices to alpha compo­</H2><PRE>

</PRE>
<H2>nents.  GL_PIXEL_MAP_R_TO_R Maps red components to red compo­</H2><PRE>

</PRE>
<H2>nents.  GL_PIXEL_MAP_G_TO_G Maps green components to green compo­</H2><PRE>

</PRE>
<H2>nents.  GL_PIXEL_MAP_B_TO_B Maps blue components to blue compo­</H2><PRE>

</PRE>
<H2>nents.  GL_PIXEL_MAP_A_TO_A Maps alpha components to alpha compo­</H2><PRE>
nents.  The entries in a map can be specified as single-precision
floating-point numbers, unsigned short integers, or unsigned long
integers.  Maps that store color component values (all but

</PRE>
<H2>GL_PIXEL_MAP_I_TO_I and GL_PIXEL_MAP_S_TO_S) retain their values</H2><PRE>
in floating-point format, with unspecified mantissa and exponent
sizes.  Floating-point values specified by _cmnd(PixelMapfv) are
converted directly to the internal floating-point format of these
maps, then clamped to the range [0,1].  Unsigned integer values
specified by _cmnd(PixelMapusv) and _cmnd(PixelMapuiv) are con­
verted linearly such that the largest representable integer maps

</PRE>
<H2>to 1.0, and 0 maps to 0.0.  Maps that store indices, GL_PIX­</H2><PRE>

</PRE>
<H2>EL_MAP_I_TO_I and GL_PIXEL_MAP_S_TO_S, retain their values in</H2><PRE>
fixed-point format, with an unspecified number of bits to the
right of the binary point.  Floating-point values specified by
_cmnd(PixelMapfv) are converted directly to the internal fixed-
point format of these maps.  Unsigned integer values specified by
_cmnd(PixelMapusv) and _cmnd(PixelMapuiv) specify integer values,
with all 0's to the right of the binary point.  The following
table shows the initial sizes and values for each of the maps.
Maps that are indexed by either color or stencil indices must
have _param2 = $2 sup n$ for some $n$ or the results are unde­
fined.  The maximum allowable size for each map depends on the
implementation and can be determined by calling _cmnd(Get) with

</PRE>
<H2>argument GL_MAX_PIXEL_MAP_TABLE.  The single maximum applies to</H2><PRE>
all maps; it is at least 32.

</PRE>
<H2>GL_PIXEL_MAP_I_TO_B    color index           B               1               0</H2><PRE>

</PRE>
<H2>GL_PIXEL_MAP_I_TO_A    color index           A               1               0</H2><PRE>

</PRE>
<H2>GL_PIXEL_MAP_R_TO_R         R                R               1               0</H2><PRE>

</PRE>
<H2>GL_PIXEL_MAP_G_TO_G         G                G               1               0</H2><PRE>

</PRE>
<H2>GL_PIXEL_MAP_B_TO_B         B                B               1               0</H2><PRE>

</PRE>
<H2>GL_PIXEL_MAP_A_TO_A         A                A               1               0</H2><PRE>
-------------------------------------------------------------------------------------


</PRE>
<H2>GL_INVALID_ENUM is generated if _param1 is not an accepted value.</H2><PRE>

</PRE>
<H2>GL_INVALID_VALUE is generated if _param2 is less than one or</H2><PRE>

</PRE>
<H2>larger than GL_MAX_PIXEL_MAP_TABLE.  GL_INVALID_VALUE is generat­</H2><PRE>

</PRE>
<H2>ed if _param1 is GL_PIXEL_MAP_I_TO_I, GL_PIXEL_MAP_S_TO_S,</H2><PRE>

</PRE>
<H2>GL_PIXEL_MAP_I_TO_R, GL_PIXEL_MAP_I_TO_G, GL_PIXEL_MAP_I_TO_B, or</H2><PRE>

</PRE>
<H2>GL_PIXEL_MAP_I_TO_A, and _param2 is not a power of two.  GL_IN­</H2><PRE>

</PRE>
<H2>VALID_OPERATION is generated if _cmnd is executed between the ex­</H2><PRE>
ecution of _cmnd(Begin) and the corresponding execution of _cm­
nd(End).  _cmnd(GetPixelMap)

</PRE>
<H2>_cmnd(Get) with argument GL_PIXEL_MAP_I_TO_I_SIZE</H2><PRE>

</PRE>
<H2>_cmnd(Get) with argument GL_PIXEL_MAP_S_TO_S_SIZE</H2><PRE>

</PRE>
<H2>_cmnd(Get) with argument GL_PIXEL_MAP_I_TO_R_SIZE</H2><PRE>

</PRE>
<H2>_cmnd(Get) with argument GL_PIXEL_MAP_I_TO_G_SIZE</H2><PRE>

</PRE>
<H2>_cmnd(Get) with argument GL_PIXEL_MAP_I_TO_B_SIZE</H2><PRE>

</PRE>
<H2>_cmnd(Get) with argument GL_PIXEL_MAP_I_TO_A_SIZE</H2><PRE>

</PRE>
<H2>_cmnd(Get) with argument GL_PIXEL_MAP_R_TO_R_SIZE</H2><PRE>

</PRE>
<H2>_cmnd(Get) with argument GL_PIXEL_MAP_G_TO_G_SIZE</H2><PRE>

</PRE>
<H2>_cmnd(Get) with argument GL_PIXEL_MAP_B_TO_B_SIZE</H2><PRE>

</PRE>
<H2>_cmnd(Get) with argument GL_PIXEL_MAP_A_TO_A_SIZE</H2><PRE>

</PRE>
<H2>_cmnd(Get) with argument GL_MAX_PIXEL_MAP_TABLE _cmnd(Col­</H2><PRE>
orTable), _cmnd(ColorSubTable), _cmnd(ConvolutionFilter1D), _cm­
nd(ConvolutionFilter2D), _cmnd(CopyPixels), _cmnd(CopyTexIm­
age1D), _cmnd(CopyTexImage2D), _cmnd(CopyTexSubImage1D), _cm­
nd(CopyTexSubImage2D), _cmnd(DrawPixels), _cmnd(Histogram), _cm­
nd(Minmax), _cmnd(PixelStore), _cmnd(PixelTransfer), _cmnd(Read­
Pixels), _cmnd(SeparableFilter2D), _cmnd(TexImage1D), _cmnd(Tex­
Image2D), _cmnd(TexImage3D), _cmnd(TexSubImage1D), _cmnd(Tex­
SubImage2D), _cmnd(TexSubImage3D)
















@


1.1.1.1
log
@win32-x11 source tree update March 26, 2001
@
text
@@
