head	1.2;
access;
symbols
	win32-x11-2001-03-26:1.1.1.1 SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2001.06.03.20.47.08;	author ssiddiqi;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.25.19.36.50;	author ssiddiqi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.03.25.19.36.50;	author ssiddiqi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Win32-X11 update sources check in, June 3, 2001 - ssiddiqi
@
text
@<HTML>
<BODY>
<PRE>
<!-- Manpage converted by man2html 3.0.1 -->
</PRE>
<HR>
<ADDRESS>
Man(1) output converted with
<a href="http://www.oac.uci.edu/indiv/ehood/man2html.html">man2html</a>
</ADDRESS>
</BODY>
</HTML>
@


1.1
log
@Initial revision
@
text
@a4 82
since the last call to _cmnd, or since the  GL  was  initialized.
To  allow  for  distributed implementations, there may be several
error flags.  If any single error flag has recorded an error, the
value  of  that  flag  is  returned  and  that  flag  is reset to

</PRE>
<H2>GL_NO_ERROR when _cmnd is called.  If  more  than  one  flag  has</H2><PRE>
recorded  an  error,  _cmnd returns and clears an arbitrary error
flag value.  Thus, _cmnd should always be called in a loop, until

</PRE>
<H2>it returns GL_NO_ERROR, if all error flags are to be reset.  Ini­</H2><PRE>

</PRE>
<H2>tially, all error flags are set to  GL_NO_ERROR.   The  following</H2><PRE>

</PRE>
<H2>errors  are  currently  defined:  GL_NO_ERROR  No  error has been</H2><PRE>
recorded.  The value of this symbolic constant is  guaranteed  to

</PRE>
<H2>be  0.  GL_INVALID_ENUM An unacceptable value is specified for an</H2><PRE>
enumerated argument.  The offending command is ignored,  and  has

</PRE>
<H2>no other side effect than to set the error flag.  GL_INVALID_VAL­</H2><PRE>

</PRE>
<H2>UE A numeric argument is out of range.  The offending command  is</H2><PRE>
ignored, and has no other side effect than to set the error flag.

</PRE>
<H2>GL_INVALID_OPERATION The specified operation is  not  allowed  in</H2><PRE>
the  current state.  The offending command is ignored, and has no

</PRE>
<H2>other side effect than to set the error flag.   GL_STACK_OVERFLOW</H2><PRE>
This command would cause a stack overflow.  The offending command
is ignored, and has no other side effect than to  set  the  error

</PRE>
<H2>flag.  GL_STACK_UNDERFLOW This command would cause a stack under­</H2><PRE>
flow.  The offending command is ignored, and has  no  other  side

</PRE>
<H2>effect than to set the error flag.  GL_OUT_OF_MEMORY There is not</H2><PRE>
enough memory left to execute the command.  The state of  the  GL
is undefined, except for the state of the error flags, after this

</PRE>
<H2>error is recorded.  GL_TABLE_TOO_LARGE The  specified  table  ex­</H2><PRE>
ceeds the implementation's maximum supported table size.  The of­
fending command is ignored, and has no other side effect than  to
set  the  error flag.  When an error flag is set, results of a GL

</PRE>
<H2>operation are undefined only if  GL_OUT_OF_MEMORY  has  occurred.</H2><PRE>
In  all  other cases, the command generating the error is ignored
and has no effect on the GL state or frame buffer  contents.   If
the  generating  command returns a value, it returns 0.  If _cmnd

</PRE>
<H2>itself generates an error, it returns 0.  GL_TABLE_TOO_LARGE  was</H2><PRE>

</PRE>
<H2>introduced  in GL version 1.2.  GL_INVALID_OPERATION is generated</H2><PRE>
if _cmnd is executed between the execution  of  _cmnd(Begin)  and
the  corresponding  execution  of _cmnd(End).  In this case _cmnd
returns 0.













@


1.1.1.1
log
@win32-x11 source tree update March 26, 2001
@
text
@@
