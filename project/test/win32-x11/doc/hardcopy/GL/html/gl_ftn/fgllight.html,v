head	1.2;
access;
symbols
	win32-x11-2001-03-26:1.1.1.1 SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2001.06.03.20.47.08;	author ssiddiqi;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.25.19.36.51;	author ssiddiqi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.03.25.19.36.51;	author ssiddiqi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Win32-X11 update sources check in, June 3, 2001 - ssiddiqi
@
text
@<HTML>
<BODY>
<PRE>
<!-- Manpage converted by man2html 3.0.1 -->
</PRE>
<HR>
<ADDRESS>
Man(1) output converted with
<a href="http://www.oac.uci.edu/indiv/ehood/man2html.html">man2html</a>
</ADDRESS>
</BODY>
</HTML>
@


1.1
log
@Initial revision
@
text
@a4 158

</PRE>
<H2>GL_LINEAR_ATTENUATION, and GL_QUADRATIC_ATTENUATION are accepted.</H2><PRE>
_phead(_param3)  Specifies  the  value  that parameter _param2 of
light  source  _param1  will  be  set  to.    _names(Light,[fi]v)
_phead(_param1)  Specifies a light.  The number of lights depends
on the implementation, but at least eight lights  are  supported.

</PRE>
<H2>They  are  identified  by  symbolic names of the form GL_LIGHT$i$</H2><PRE>

</PRE>
<H2>where 0 </= $ i $ < GL_MAX_LIGHTS.   _phead(_param2)  Specifies  a<H2><PRE>

</PRE>
<H2>light  source  parameter  for  _param1.   GL_AMBIENT, GL_DIFFUSE,</H2><PRE>

</PRE>
<H2>GL_SPECULAR,  GL_POSITION,   GL_SPOT_CUTOFF,   GL_SPOT_DIRECTION,</H2><PRE>

</PRE>
<H2>GL_SPOT_EXPONENT, GL_CONSTANT_ATTENUATION, GL_LINEAR_ATTENUATION,</H2><PRE>

</PRE>
<H2>and GL_QUADRATIC_ATTENUATION are accepted.  _phead(_param3) Spec­</H2><PRE>
ifies  a pointer to the value or values that parameter _param2 of
light source _param1 will be set to.  _cmnd sets  the  values  of
individual  light source parameters.  _param1 names the light and

</PRE>
<H2>is a symbolic name of the  form  GL_LIGHT$i$,  where  0  </=  i  <<H2><PRE>

</PRE>
<H2>GL_MAX_LIGHTS.  _param2 specifies one of ten light source parame­</H2><PRE>
ters, again by symbolic name.  _param3 is either a  single  value
or a pointer to an array that contains the new values.  To enable
and disable lighting calculation,  call  _cmnd(Enable)  and  _cm­

</PRE>
<H2>nd(Disable) with argument GL_LIGHTING. Lighting is initially dis­</H2><PRE>
abled.  When it is enabled, light sources that are  enabled  con­
tribute to the lighting calculation.  Light source $i$ is enabled
and disabled using _cmnd(Enable) and _cmnd(Disable) with argument

</PRE>
<H2>GL_LIGHT$i$.  The ten light parameters are as follows: GL_AMBIENT</H2><PRE>
_param3 contains four integer or floating-point values that spec­
ify  the ambient RGBA intensity of the light.  Integer values are
mapped linearly such that the most positive  representable  value
maps  to  1.0,  and the most negative representable value maps to
-1.0.  Floating-point values are mapped directly.  Neither  inte­
ger  nor  floating-point values are clamped.  The initial ambient

</PRE>
<H2>light intensity is (0, 0, 0,  1).   GL_DIFFUSE  _param3  contains</H2><PRE>
four  integer  or  floating-point values that specify the diffuse
RGBA intensity of the light.  Integer values are mapped  linearly
such  that the most positive representable value maps to 1.0, and
the most negative representable value maps  to  -1.0.   Floating-
point  values are mapped directly.  Neither integer nor floating-

</PRE>
<H2>point values are clamped.  The initial value for GL_LIGHT0 is (1,</H2><PRE>
1,  1,  1);  for other lights, the initial value is (0, 0, 0, 0).

</PRE>
<H2>GL_SPECULAR _param3 contains four integer or floating-point  val­</H2><PRE>
ues that specify the specular RGBA intensity of the light.  Inte­
ger values are mapped linearly such that the most positive repre­
sentable  value  maps to 1.0, and the most negative representable
value maps to -1.0.  Floating-point values are  mapped  directly.
Neither  integer nor floating-point values are clamped.  The ini­

</PRE>
<H2>tial value for GL_LIGHT0 is (1, 1, 1, 1); for other  lights,  the</H2><PRE>

</PRE>
<H2>initial value is (0, 0, 0, 0).  GL_POSITION _param3 contains four</H2><PRE>
integer or floating-point values that specify the position of the
light in homogeneous object coordinates.  Both integer and float­
ing-point values are mapped directly.  Neither integer nor float­
ing-point values are clamped.  The position is transformed by the
modelview matrix when _cmnd is called  (just  as  if  it  were  a
point),  and  it is stored in eye coordinates.  If the $w$ compo­
normal), and it is stored in eye coordinates.  It is  significant

</PRE>
<H2>only  when GL_SPOT_CUTOFF is not 180, which it is initially.  The</H2><PRE>

</PRE>
<H2>initial direction is (0, 0, -1).  GL_SPOT_EXPONENT _param3  is  a</H2><PRE>
single  integer or floating-point value that specifies the inten­
sity distribution of the light.  Integer and floating-point  val­
ues  are  mapped  directly.  Only values in the range [0,128] are
accepted.  Effective light intensity is attenuated by the  cosine
of the angle between the direction of the light and the direction
from the light to the vertex being lighted, raised to  the  power
of  the  spot  exponent.  Thus, higher spot exponents result in a
more focused light source, regardless of the  spot  cutoff  angle

</PRE>
<H2>(see  GL_SPOT_CUTOFF, next paragraph).  The initial spot exponent</H2><PRE>

</PRE>
<H2>is 0, resulting in uniform  light  distribution.   GL_SPOT_CUTOFF</H2><PRE>
_param3  is  a single integer or floating-point value that speci­
fies the maximum spread angle of a  light  source.   Integer  and
floating-point  values  are  mapped directly.  Only values in the
range [0,90] and the special value 180 are accepted.  If the  an­
gle between the direction of the light and the direction from the
light to the vertex being lighted is greater than the spot cutoff
angle,  the light is completely masked.  Otherwise, its intensity
is controlled by the spot exponent and the  attenuation  factors.
The  initial  spot cutoff is 180, resulting in uniform light dis­

</PRE>
<H2>tribution.      GL_CONSTANT_ATTENUATION     GL_LINEAR_ATTENUATION</H2><PRE>

</PRE>
<H2>GL_QUADRATIC_ATTENUATION _param3 is a single integer or floating-</H2><PRE>
point value that specifies one of  the  three  light  attenuation
factors.   Integer and floating-point values are mapped directly.
Only nonnegative values are accepted.  If the light is  position­
al,  rather  than directional, its intensity is attenuated by the
reciprocal of the sum of the constant factor, the  linear  factor
times  the distance between the light and the vertex being light­
ed, and the quadratic factor times the square of  the  same  dis­
tance.   The initial attenuation factors are (1, 0, 0), resulting

</PRE>
<H2>in no attenuation.  It is always  the  case  that  GL_LIGHT$i$  =</H2><PRE>

</PRE>
<H2>GL_LIGHT0  + $i$.  GL_INVALID_ENUM is generated if either _param1</H2><PRE>

</PRE>
<H2>or _param2 is not an accepted value.  GL_INVALID_VALUE is  gener­</H2><PRE>
ated  if  a  spot  exponent  value is specified outside the range
[0,128], or if spot cutoff is specified outside the range  [0,90]
(except  for the special value 180), or if a negative attenuation

</PRE>
<H2>factor is specified.  GL_INVALID_OPERATION is generated if  _cmnd</H2><PRE>
is  executed between the execution of _cmnd(Begin) and the corre­
sponding execution of _cmnd(End).  _cmnd(GetLight)

</PRE>
<H2>_cmnd(IsEnabled) with argument GL_LIGHTING  _cmnd(ColorMaterial),</H2><PRE>
_cmnd(LightModel), _cmnd(Material)









@


1.1.1.1
log
@win32-x11 source tree update March 26, 2001
@
text
@@
