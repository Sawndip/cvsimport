head	1.2;
access;
symbols
	win32-x11-2001-03-26:1.1.1.1 SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2001.06.03.20.47.09;	author ssiddiqi;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.25.19.36.51;	author ssiddiqi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.03.25.19.36.51;	author ssiddiqi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Win32-X11 update sources check in, June 3, 2001 - ssiddiqi
@
text
@<HTML>
<BODY>
<PRE>
<!-- Manpage converted by man2html 3.0.1 -->
</PRE>
<HR>
<ADDRESS>
Man(1) output converted with
<a href="http://www.oac.uci.edu/indiv/ehood/man2html.html">man2html</a>
</ADDRESS>
</BODY>
</HTML>
@


1.1
log
@Initial revision
@
text
@a4 135

</PRE>
<H2>texture environment.  Must  be  GL_TEXTURE_ENV.   _phead(_param2)</H2><PRE>
Specifies  the  symbolic name of a texture environment parameter.

</PRE>
<H2>Accepted values are GL_TEXTURE_ENV_MODE and GL_TEXTURE_ENV_COLOR.</H2><PRE>
_phead(_param3)  Specifies  a  pointer  to a parameter array that
contains either a single symbolic constant or an RGBA  color.   A
texture  environment specifies how texture values are interpreted

</PRE>
<H2>when a fragment is textured.   _param1  must  be  GL_TEXTURE_ENV.</H2><PRE>

</PRE>
<H2>_param2  can be either GL_TEXTURE_ENV_MODE or GL_TEXTURE_ENV_COL­</H2><PRE>

</PRE>
<H2>OR.  If _param2  is  GL_TEXTURE_ENV_MODE,  then  _param3  is  (or</H2><PRE>
points to) the symbolic name of a texture function.  Four texture

</PRE>
<H2>functions may be specified: GL_MODULATE, GL_DECAL, GL_BLEND,  and</H2><PRE>

</PRE>
<H2>GL_REPLACE.   A  texture function acts on the fragment to be tex­</H2><PRE>
tured using the texture image value that applies to the  fragment
(see  _cmnd(TexParameter))  and  produces  an RGBA color for that
fragment.  The following table shows how the RGBA color  is  pro­
duced for each of the three texture functions that can be chosen.
$C$ is a triple of color values (RGB) and $A$ is  the  associated
alpha  value.   RGBA values extracted from a texture image are in
the range [0,1].  The subscript $f$ refers to the incoming  frag­
ment,  the  subscript $t$ to the texture image, the subscript $c$
to the texture environment color, and subscript $v$  indicates  a
value produced by the texture function.  A texture image can have
up to four components per texture element (see _cmnd(TexImage1D),
_cmnd(TexImage2D),  _cmnd(TexImage3D), _cmnd(CopyTexImage1D), and
_cmnd(CopyTexImage2D)).  In a one-component image, $L sub t$  in­
dicates that single component.  A two-component image uses $L sub
t$ and $A sub t$.  A three-component image has only a color  val­
ue,  $C sub t$.  A four-component image has both a color value $C
sub t$ and an alpha value $A sub t$.

--------------------------------------------------------------------------------------------------------------------------------------------------------

</PRE>
<H2>Base internal                                                          Texture functions</H2><PRE>
   <I>format</I>                <B>GL_MODULATE</B>                           <B>GL_DECAL</B>                                 <B>GL_BLEND</B>                       <B>GL_REPLACE</B>
--------------------------------------------------------------------------------------------------------------------------------------------------------
  <B>GL_ALPHA</B>          $C sub v ~=~ C sub f$                     undefined                          $C sub v ~=~  C sub f$           $C sub v ~=~ C sub f$
                $A sub v ~=~ A sub f A sub t$                                                    $A sub v ~=~ A sub f$            $A sub v ~=~ A sub t$
--------------------------------------------------------------------------------------------------------------------------------------------------------

</PRE>
<H2>GL_LUMINANCE    $C sub v ~=~ L sub t C sub f$                 undefined                  $C sub v ~=~ ( 1 - L sub t ) C sub f$    $C sub v ~=~ L sub t$</H2><PRE>
                                                                                                  $+ L sub t C sub c$
      1             $A sub v ~=~ A sub f$                                                         $A sub v ~=~ A sub f$           $A sub v ~=~ A sub f$
--------------------------------------------------------------------------------------------------------------------------------------------------------

</PRE>
<H2>GL_LUMINANCE    $C sub v ~=~ L sub t C sub f$                 undefined                  $C sub v ~=~ ( 1 - L sub t ) C sub f $   $C sub v ~=~ L sub t$</H2><PRE>
  \f3_ALPHA                                                                                        <B>$+</B> <B>L</B> <B>sub</B> <B>t</B> <B>C</B> <B>sub</B> <B>c$</B>
      <B>2</B>         <B>$A</B> <B>sub</B> <B>v</B> <B>~=~</B> <B>A</B> <B>sub</B> <B>t</B> <B>A</B> <B>sub</B> <B>f$</B>                                                <B>$A</B> <B>sub</B> <B>v</B> <B>~=~</B> <B>A</B> <B>sub</B> <B>t</B> <B>A</B> <B>sub</B> <B>f$</B>        <B>$A</B> <B>sub</B> <B>v</B> <B>~=~</B> <B>A</B> <B>sub</B> <B>t$</B>
--------------------------------------------------------------------------------------------------------------------------------------------------------

</PRE>
<H2>GL_INTENSITY    $C sub v ~=~ C sub f I sub t$                 undefined                  $C sub v ~=~ ( 1 - I sub t ) C sub f$    $C sub v ~=~ I sub t$</H2><PRE>
                                                                                                  <B>$+</B> <B>I</B> <B>sub</B> <B>t</B> <B>C</B> <B>sub</B> <B>c$</B>
     <B>c</B>          <B>$A</B> <B>sub</B> <B>v</B> <B>~=~</B> <B>A</B> <B>sub</B> <B>f</B> <B>I</B> <B>sub</B> <B>t$</B>                                            <B>$A</B> <B>sub</B> <B>v</B> <B>~=~</B> <B>(</B> <B>1</B> <B>-</B> <B>I</B> <B>sub</B> <B>t</B> <B>)</B> <B>A</B> <B>sub</B> <B>f</B> <B>$</B>   <B>$A</B> <B>sub</B> <B>v</B> <B>~=~</B> <B>I</B> <B>sub</B> <B>t$</B>
                                                                                                  <B>$+</B> <B>I</B> <B>sub</B> <B>t</B> <B>A</B> <B>sub</B> <B>c$</B>
--------------------------------------------------------------------------------------------------------------------------------------------------------
   <B>GL_RGB</B>       <B>$C</B> <B>sub</B> <B>v</B> <B>~=~</B> <B>C</B> <B>sub</B> <B>t</B> <B>C</B> <B>sub</B> <B>f$</B>           <B>$C</B> <B>sub</B> <B>v</B> <B>~=~</B> <B>C</B> <B>sub</B> <B>t$</B>             <B>$C</B> <B>sub</B> <B>v</B> <B>~=~</B> <B>(1</B> <B>-</B> <B>C</B> <B>sub</B> <B>t)</B> <B>C</B> <B>sub</B> <B>f</B> <B>$</B>    <B>$C</B> <B>sub</B> <B>v</B> <B>~=~</B> <B>C</B> <B>sub</B> <B>t$</B>
                                                                                                   <B>$+</B> <B>C</B> <B>sub</B> <B>t</B> <B>C</B> <B>sub</B> <B>c$</B>


</PRE>
<H2>defaults  to (0, 0, 0, 0).  GL_REPLACE may only be used if the GL</H2><PRE>
version is 1.1 or greater.  Internal formats other than 1, 2,  3,
or  4 may only be used if the GL version is 1.1 or greater.  When
the _arbstring(multitexture) extension is supported,  _cmnd  con­
trols  the  texture  environment  for  the current active texture

</PRE>
<H2>unit, selected by  _cmnd(ActiveTextureARB).   GL_INVALID_ENUM  is</H2><PRE>
generated  when _param1 or _param2 is not one of the accepted de­
fined values, or when _param3 should have a defined constant val­

</PRE>
<H2>ue  (based on the value of _param2) and does not.  GL_INVALID_OP­</H2><PRE>

</PRE>
<H2>ERATION is generated if _cmnd is executed between  the  execution</H2><PRE>
of  _cmnd(Begin)  and  the corresponding execution of _cmnd(End).
_cmnd(GetTexEnv) _cmnd(ActiveTextureARB), _cmnd(CopyPixels), _cm­
nd(CopyTexImage1D),   _cmnd(CopyTexImage2D),  _cmnd(CopyTexSubIm­
age1D), _cmnd(CopyTexSubImage2D), _cmnd(CopyTexSubImage3D),  _cm­
nd(TexImage1D),  _cmnd(TexImage2D), _cmnd(TexImage3D), _cmnd(Tex­
Parameter),  _cmnd(TexSubImage1D),   _cmnd(TexSubImage2D),   _cm­
nd(TexSubImage3D)



































@


1.1.1.1
log
@win32-x11 source tree update March 26, 2001
@
text
@@
