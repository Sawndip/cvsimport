head	1.2;
access;
symbols
	win32-x11-2001-03-26:1.1.1.1 SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2001.06.03.20.47.09;	author ssiddiqi;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.25.19.36.51;	author ssiddiqi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.03.25.19.36.51;	author ssiddiqi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Win32-X11 update sources check in, June 3, 2001 - ssiddiqi
@
text
@<HTML>
<BODY>
<PRE>
<!-- Manpage converted by man2html 3.0.1 -->
</PRE>
<HR>
<ADDRESS>
Man(1) output converted with
<a href="http://www.oac.uci.edu/indiv/ehood/man2html.html">man2html</a>
</ADDRESS>
</BODY>
</HTML>
@


1.1
log
@Initial revision
@
text
@a4 374

</PRE>
<H2>constants: GL_ALPHA,  GL_ALPHA4,  GL_ALPHA8,  GL_ALPHA12,  GL_AL­</H2><PRE>

</PRE>
<H2>PHA16,   GL_LUMINANCE,   GL_LUMINANCE4,  GL_LUMINANCE8,  GL_LUMI­</H2><PRE>

</PRE>
<H2>NANCE12,  GL_LUMINANCE16,  GL_LUMINANCE_ALPHA,  GL_LUMINANCE4_AL­</H2><PRE>

</PRE>
<H2>PHA4,    GL_LUMINANCE6_ALPHA2,   GL_LUMINANCE8_ALPHA8,   GL_LUMI­</H2><PRE>

</PRE>
<H2>NANCE12_ALPHA4,  GL_LUMINANCE12_ALPHA12,  GL_LUMINANCE16_ALPHA16,</H2><PRE>

</PRE>
<H2>GL_INTENSITY,   GL_INTENSITY4,   GL_INTENSITY8,   GL_INTENSITY12,</H2><PRE>

</PRE>
<H2>GL_INTENSITY16, GL_R3_G3_B2, GL_RGB, GL_RGB4,  GL_RGB5,  GL_RGB8,</H2><PRE>

</PRE>
<H2>GL_RGB10,   GL_RGB12,   GL_RGB16,  GL_RGBA,  GL_RGBA2,  GL_RGBA4,</H2><PRE>

</PRE>
<H2>GL_RGB5_A1,  GL_RGBA8,  GL_RGB10_A2,  GL_RGBA12,  or   GL_RGBA16.</H2><PRE>
_phead(_param4)  Specifies  the width of the texture image.  Must
be $2 sup n ~+~ 2 ( _eqnparam6 )$ for some integer $n$.  All  im­
plementations  support texture images that are at least 64 texels
wide.  _phead(_param5) Specifies the height of the texture image.
Must  be $2 sup m ~+~ 2 ( _eqnparam6 )$ for some integer $m$. All
implementations support texture images that are at least 64  tex­
els  high.   _phead(_param6)  Specifies  the width of the border.
Must be either 0 or 1.  _phead(_param7) Specifies the  format  of
the  pixel  data.   The  following  symbolic values are accepted:

</PRE>
<H2>GL_COLOR_INDEX,  GL_RED,  GL_GREEN,  GL_BLUE,  GL_ALPHA,  GL_RGB,</H2><PRE>

</PRE>
<H2>GL_BGR  GL_RGBA,  GL_BGRA,  GL_LUMINANCE, and GL_LUMINANCE_ALPHA.</H2><PRE>
_phead(_param8) Specifies the data type of the pixel  data.   The

</PRE>
<H2>following   symbolic   values   are  accepted:  GL_UNSIGNED_BYTE,</H2><PRE>

</PRE>
<H2>GL_BYTE, GL_BITMAP, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT,</H2><PRE>

</PRE>
<H2>GL_INT,       GL_FLOAT,       GL_UNSIGNED_BYTE_3_3_2,      GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_BYTE_2_3_3_REV,      GL_UNSIGNED_SHORT_5_6_5,       GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_SHORT_5_6_5_REV,     GL_UNSIGNED_SHORT_4_4_4_4,     GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_SHORT_4_4_4_4_REV,    GL_UNSIGNED_SHORT_5_5_5_1,    GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_SHORT_1_5_5_5_REV,     GL_UNSIGNED_INT_8_8_8_8,     GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_INT_8_8_8_8_REV,  GL_UNSIGNED_INT_10_10_10_2,  and  GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_INT_2_10_10_10_REV.   _phead(_param9)  Specifies a pointer</H2><PRE>
to the image data in memory.  Texturing maps a portion of a spec­
ified  texture image onto each graphical primitive for which tex­
turing is enabled.  To enable and disable two-dimensional textur­

</PRE>
<H2>ing,  call _cmnd(Enable) and _cmnd(Disable) with argument GL_TEX­</H2><PRE>

</PRE>
<H2>TURE_2D.  To define texture images, call  _cmnd.   The  arguments</H2><PRE>
describe  the  parameters  of  the texture image, such as height,
width, width of the  border,  level-of-detail  number  (see  _cm­
nd(TexParameter)),  and number of color components provided.  The
last three arguments describe how the  image  is  represented  in
memory;  they  are  identical  to the pixel formats used for _cm­

</PRE>
<H2>nd(DrawPixels).  If _param1 is GL_PROXY_TEXTURE_2D,  no  data  is</H2><PRE>
read from _param9, but all of the texture image state is recalcu­
lated, checked for consistency, and checked against the implemen­
tation's capabilities. If the implementation cannot handle a tex­
ture of the requested texture size, it  sets  all  of  the  image
state to 0, but does not generate an error (see _cmnd(GetError)).
To query for an entire mipmap array, use  an  image  array  level

</PRE>
<H2>greater than or equal to 1.  If _param1 is GL_TEXTURE_2D, data is</H2><PRE>
read from _param9 as a sequence  of  signed  or  unsigned  bytes,
shorts,  or longs, or single-precision floating-point values, de­
pending on _param8.  These values are grouped into sets  of  one,
two,  three,  or  four values, depending on _param7, to form ele­
texture image.  _param7 determines the composition of  each  ele­
ment  in  _param9.   It can assume one of eleven symbolic values:

</PRE>
<H2>GL_COLOR_INDEX Each element is a single  value,  a  color  index.</H2><PRE>
The  GL converts it to fixed point (with an unspecified number of
zero bits to the right of the  binary  point),  shifted  left  or

</PRE>
<H2>right  depending  on  the  value  and sign of GL_INDEX_SHIFT, and</H2><PRE>

</PRE>
<H2>added to GL_INDEX_OFFSET (see</H2><PRE>
_cmnd(PixelTransfer)).  The resulting index is converted to a set

</PRE>
<H2>of   color  components  using  the  GL_PIXEL_MAP_I_TO_R,  GL_PIX­</H2><PRE>

</PRE>
<H2>EL_MAP_I_TO_G, GL_PIXEL_MAP_I_TO_B, and  GL_PIXEL_MAP_I_TO_A  ta­</H2><PRE>

</PRE>
<H2>bles,  and  clamped to the range [0,1].  GL_RED Each element is a</H2><PRE>
single red component.  The GL converts it to floating  point  and
assembles  it  into  an RGBA element by attaching 0 for green and
blue, and 1 for alpha.  Each component is then multiplied by  the

</PRE>
<H2>signed   scale  factor  GL_c_SCALE,  added  to  the  signed  bias</H2><PRE>

</PRE>
<H2>GL_c_BIAS, and clamped to the range [0,1] (see  _cmnd(PixelTrans­</H2><PRE>

</PRE>
<H2>fer)).   GL_GREEN  Each element is a single green component.  The</H2><PRE>
GL converts it to floating point and assembles it  into  an  RGBA
element  by  attaching 0 for red and blue, and 1 for alpha.  Each
component  is  then  multiplied  by  the  signed   scale   factor

</PRE>
<H2>GL_c_SCALE,  added  to  the signed bias GL_c_BIAS, and clamped to</H2><PRE>

</PRE>
<H2>the range [0,1] (see _cmnd(PixelTransfer)).  GL_BLUE Each element</H2><PRE>
is a single blue component.  The GL converts it to floating point
and assembles it into an RGBA element by attaching 0 for red  and
green, and 1 for alpha.  Each component is then multiplied by the

</PRE>
<H2>signed  scale  factor  GL_c_SCALE,  added  to  the  signed   bias</H2><PRE>

</PRE>
<H2>GL_c_BIAS,  and clamped to the range [0,1] (see _cmnd(PixelTrans­</H2><PRE>

</PRE>
<H2>fer)).  GL_ALPHA Each element is a single alpha  component.   The</H2><PRE>
GL  converts  it  to floating point and assembles it into an RGBA
element by attaching 0 for red, green, and blue.  Each  component

</PRE>
<H2>is  then  multiplied by the signed scale factor GL_c_SCALE, added</H2><PRE>

</PRE>
<H2>to the signed bias GL_c_BIAS, and clamped to the range [0,1] (see</H2><PRE>

</PRE>
<H2>_cmnd(PixelTransfer)).   GL_RGB  GL_BGR  Each  element  is an RGB</H2><PRE>
triple.  The GL converts it to floating point  and  assembles  it
into an RGBA element by attaching 1 for alpha.  Each component is

</PRE>
<H2>then multiplied by the signed scale factor GL_c_SCALE,  added  to</H2><PRE>

</PRE>
<H2>the signed bias GL_c_BIAS, and clamped to the range [0,1] (see</H2><PRE>

</PRE>
<H2>_cmnd(PixelTransfer)).  GL_RGBA GL_BGRA Each element contains all</H2><PRE>
four components.  Each component  is  multiplied  by  the  signed

</PRE>
<H2>scale  factor GL_c_SCALE, added to the signed bias GL_c_BIAS, and</H2><PRE>

</PRE>
<H2>clamped to the range [0,1] (see _cmnd(PixelTransfer)).   GL_LUMI­</H2><PRE>

</PRE>
<H2>NANCE  Each element is a single luminance value.  The GL converts</H2><PRE>
it to floating point, then assembles it into an RGBA  element  by
replicating  the  luminance value three times for red, green, and
blue and attaching 1 for alpha.  Each component  is  then  multi­

</PRE>
<H2>plied  by the signed scale factor GL_c_SCALE, added to the signed</H2><PRE>

</PRE>
<H2>bias GL_c_BIAS, and clamped to the range [0,1] (see  _cmnd(Pixel­</H2><PRE>

</PRE>
<H2>Transfer)).  GL_LUMINANCE_ALPHA Each element is a luminance/alpha</H2><PRE>
pair.  The GL converts it to floating point,  then  assembles  it
into  an  RGBA  element  by replicating the luminance value three
times for red, green, and blue.  Each component  is  then  multi­

</PRE>
<H2>plied  by the signed scale factor GL_c_SCALE, added to the signed</H2><PRE>
state,  call  _cmnd(GetTexLevelParameter).  If the texture cannot
be accommodated, texture state is set to 0.  A one-component tex­
ture image uses only the red component of the RGBA color extract­
ed from _param9.  A two-component image uses the R and A  values.
A three-component image uses the R, G, and B values.  A four-com­
ponent image uses all of the RGBA components.  Texturing  has  no
effect in color index mode.  If the _arbstring(imaging) extension
is supported, RGBA elements may also be processed by the  imaging
pipeline.   The  following stages may be applied to an RGBA color
before color component clamping to the  range  [0, 1]:  1.  Color

</PRE>
<H2>component  replacement  by  the color table specified for GL_COL­</H2><PRE>

</PRE>
<H2>OR_TABLE, if enabled. See _cmnd(ColorTable).  2.  Two-dimensional</H2><PRE>
Convolution  filtering,  if  enabled.  See  _cmnd(ConvolutionFil­
ter1D).  If a convolution filter changes the __width of the  tex­

</PRE>
<H2>ture  (by  processing with a GL_CONVOLUTION_BORDER_MODE of GL_RE­</H2><PRE>

</PRE>
<H2>DUCE, for example), the _param4 must $2 sup n +  2  (  _eqnparam5</H2><PRE>
)$,  for some integer $n$, and _param5 must be $2 sup m + ( _eqn­
param6 )$, for some integer $m$,  after filtering.  3. RGBA  com­

</PRE>
<H2>ponents  may  be  multiplied  by GL_POST_CONVOLUTION_c_SCALE, and</H2><PRE>

</PRE>
<H2>added to GL_POST_CONVOLUTION_c_BIAS, if enabled.  See  _cmnd(Pix­</H2><PRE>
elTransfer).   4.  Color component replacement by the color table

</PRE>
<H2>specified for GL_POST_CONVOLUTION_COLOR_TABLE, if  enabled.   See</H2><PRE>
_cmnd(ColorTable).   5.  Transformation by the color matrix.  See
_cmnd(MatrixMode).  6.  RGBA  components  may  be  multiplied  by

</PRE>
<H2>GL_POST_COLOR_MATRIX_c_SCALE,   and  added  to  GL_POST_COLOR_MA­</H2><PRE>

</PRE>
<H2>TRIX_c_BIAS, if enabled.   See  _cmnd(PixelTransfer).   7.  Color</H2><PRE>
component   replacement   by   the   color  table  specified  for

</PRE>
<H2>GL_POST_COLOR_MATRIX_COLOR_TABLE,  if  enabled.   See  _cmnd(Col­</H2><PRE>
orTable).   The texture image can be represented by the same data
formats as the pixels in a _cmnd(DrawPixels) command, except that

</PRE>
<H2>GL_STENCIL_INDEX  and  GL_DEPTH_COMPONENT  cannot  be used.  _cm­</H2><PRE>
nd(PixelStore) and _cmnd(PixelTransfer) modes affect texture  im­
ages in exactly the way they affect _cmnd(DrawPixels).  _cmnd and

</PRE>
<H2>GL_PROXY_TEXTURE_2D are available only if the GL version  is  1.1</H2><PRE>
or  greater.   Internal  formats  other than 1, 2, 3, or 4 may be
used only if the GL version is 1.1 or greater.  In GL version 1.1
or  greater, _param9 may be a null pointer.  In this case texture
memory is allocated to accommodate a texture of width _param4 and
height  _param5.  You can then download subtextures to initialize
this texture memory.  The image is undefined if the user tries to
apply  an  uninitialized portion of the texture image to a primi­

</PRE>
<H2>tive.    Formats   GL_BGR,   and   GL_BGRA   and   types   GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_BYTE_3_3_2,       GL_UNSIGNED_BYTE_2_3_3_REV,       GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_SHORT_5_6_5,      GL_UNSIGNED_SHORT_5_6_5_REV,      GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_SHORT_4_4_4_4,    GL_UNSIGNED_SHORT_4_4_4_4_REV,    GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_SHORT_5_5_5_1,    GL_UNSIGNED_SHORT_1_5_5_5_REV,    GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_INT_8_8_8_8,      GL_UNSIGNED_INT_8_8_8_8_REV,      GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_INT_10_10_10_2,  and  GL_UNSIGNED_INT_2_10_10_10_REV   are</H2><PRE>
available  only  if  the  GL version is 1.2 or greater.  When the
_arbstring(multitexture) extension is supported, _cmnd  specifies
the  two-dimensional texture for the current texture unit, speci­

</PRE>
<H2>fied with _cmnd(ActiveTextureARB).  GL_INVALID_ENUM is  generated</H2><PRE>

</PRE>
<H2>of  k.   GL_INVALID_VALUE  is generated if _param6 is not 0 or 1.</H2><PRE>

</PRE>
<H2>GL_INVALID_OPERATION is generated if _cmnd  is  executed  between</H2><PRE>
the  execution of _cmnd(Begin) and the corresponding execution of

</PRE>
<H2>_cmnd(End).  GL_INVALID_OPERATION is generated if _param8 is  one</H2><PRE>

</PRE>
<H2>of   GL_UNSIGNED_BYTE_3_3_2,  GL_UNSIGNED_BYTE_2_3_3_REV,  GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_SHORT_5_6_5, or GL_UNSIGNED_SHORT_5_6_5_REV and _param7 is</H2><PRE>

</PRE>
<H2>not  GL_RGB.  GL_INVALID_OPERATION is generated if _param8 is one</H2><PRE>

</PRE>
<H2>of   GL_UNSIGNED_SHORT_4_4_4_4,    GL_UNSIGNED_SHORT_4_4_4_4_REV,</H2><PRE>

</PRE>
<H2>GL_UNSIGNED_SHORT_5_5_5_1,  GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_INT_8_8_8_8,      GL_UNSIGNED_INT_8_8_8_8_REV,      GL_UN­</H2><PRE>

</PRE>
<H2>SIGNED_INT_10_10_10_2,   or   GL_UNSIGNED_INT_2_10_10_10_REV  and</H2><PRE>

</PRE>
<H2>_param7 is neither GL_RGBA nor GL_BGRA.  _cmnd(GetTexImage)</H2><PRE>

</PRE>
<H2>_cmnd(IsEnabled) with argument  GL_TEXTURE_2D  _cmnd(ColorTable),</H2><PRE>
_cmnd(ConvolutionFilter2D),  _cmnd(CopyPixels),  _cmnd(CopyTexIm­
age1D),  _cmnd(CopyTexImage2D),  _cmnd(CopyTexSubImage1D),   _cm­
nd(CopyTexSubImage2D),  _cmnd(CopyTexSubImage3D),  _cmnd(DrawPix­
els), _cmnd(MatrixMode), _cmnd(PixelStore), _cmnd(PixelTransfer),
_cmnd(SeparableFilter2D),   _cmnd(TexEnv),   _cmnd(TexGen),  _cm­
nd(TexImage1D),  _cmnd(TexImage3D),  _cmnd(TexSubImage1D),   _cm­
nd(TexSubImage2D), _cmnd(TexSubImage3D), _cmnd(TexParameter)
































@


1.1.1.1
log
@win32-x11 source tree update March 26, 2001
@
text
@@
