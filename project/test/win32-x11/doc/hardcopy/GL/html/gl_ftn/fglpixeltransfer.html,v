head	1.2;
access;
symbols
	win32-x11-2001-03-26:1.1.1.1 SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2001.06.03.20.47.08;	author ssiddiqi;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.25.19.36.51;	author ssiddiqi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.03.25.19.36.51;	author ssiddiqi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Win32-X11 update sources check in, June 3, 2001 - ssiddiqi
@
text
@<HTML>
<BODY>
<PRE>
<!-- Manpage converted by man2html 3.0.1 -->
</PRE>
<HR>
<ADDRESS>
Man(1) output converted with
<a href="http://www.oac.uci.edu/indiv/ehood/man2html.html">man2html</a>
</ADDRESS>
</BODY>
</HTML>
@


1.1
log
@Initial revision
@
text
@a4 410
if the _arbstring(imaging) extension is supported, the  following

</PRE>
<H2>symbolic   names  are  accepted:  GL_POST_COLOR_MATRIX_RED_SCALE,</H2><PRE>

</PRE>
<H2>GL_POST_COLOR_MATRIX_GREEN_SCALE,               GL_POST_COLOR_MA­</H2><PRE>

</PRE>
<H2>TRIX_BLUE_SCALE,  GL_POST_COLOR_MATRIX_ALPHA_SCALE,  GL_POST_COL­</H2><PRE>

</PRE>
<H2>OR_MATRIX_RED_BIAS, GL_POST_COLOR_MATRIX_GREEN_BIAS, GL_POST_COL­</H2><PRE>

</PRE>
<H2>OR_MATRIX_BLUE_BIAS,             GL_POST_COLOR_MATRIX_ALPHA_BIAS,</H2><PRE>

</PRE>
<H2>GL_POST_CONVOLUTION_RED_SCALE,   GL_POST_CONVOLUTION_GREEN_SCALE,</H2><PRE>

</PRE>
<H2>GL_POST_CONVOLUTION_BLUE_SCALE,  GL_POST_CONVOLUTION_ALPHA_SCALE,</H2><PRE>

</PRE>
<H2>GL_POST_CONVOLUTION_RED_BIAS,     GL_POST_CONVOLUTION_GREEN_BIAS,</H2><PRE>

</PRE>
<H2>GL_POST_CONVOLUTION_BLUE_BIAS,     and    GL_POST_CONVOLUTION_AL­</H2><PRE>

</PRE>
<H2>PHA_BIAS.  _phead(_param2) Specifies the value  that  _param1  is</H2><PRE>
set  to.   _cmnd sets pixel transfer modes that affect the opera­
tion of subsequent _cmnd(CopyPixels), _cmnd(CopyTexImage1D), _cm­
nd(CopyTexImage2D), _cmnd(CopyTexSubImage1D), _cmnd(CopyTexSubIm­
age2D), _cmnd(CopyTexSubImage3D), _cmnd(DrawPixels),  _cmnd(Read­
Pixels), _cmnd(TexImage1D), _cmnd(TexImage2D), _cmnd(TexImage3D),
_cmnd(TexSubImage1D), _cmnd(TexSubImage2D),  and  _cmnd(TexSubIm­
age3D) commands.  Additionally, if the _arbstring(imaging) subset
is supported,  the  routines  _cmnd(ColorTable),  _cmnd(ColorSub­
Table),  _cmnd(ConvolutionFilter1D),  _cmnd(ConvolutionFilter2D),
_cmnd(Histogram), _cmnd(Minmax), and _cmnd(SeparableFilter2D) are
also affected.  The algorithms that are specified by pixel trans­
fer modes operate on pixels after they are read  from  the  frame
buffer (_cmnd(CopyPixels) _cmnd(CopyTexImage1D), _cmnd(CopyTexIm­
age2D), _cmnd(CopyTexSubImage1D), _cmnd(CopyTexSubImage2D),  _cm­
nd(CopyTexSubImage3D),  and  _cmnd(ReadPixels)), or unpacked from
client memory (_cmnd(DrawPixels), _cmnd(TexImage1D), _cmnd(TexIm­
age2D),  _cmnd(TexImage3D), _cmnd(TexSubImage1D), _cmnd(TexSubIm­
age2D), and  _cmnd(TexSubImage3D)).   Pixel  transfer  operations
happen  in  the same order, and in the same manner, regardless of
the command that resulted in the pixel operation.  Pixel  storage
modes (see _cmnd(PixelStore)) control the unpacking of pixels be­
ing read from client memory, and  the  packing  of  pixels  being
written  back into client memory.  Pixel transfer operations han­
dle four fundamental pixel types: <I>color</I>, <I>color</I> <I>index</I>, <I>depth</I>,  and
<I>stencil</I>.  <I>Color</I> pixels consist of four floating-point values with
unspecified mantissa and exponent sizes, scaled such that 0  rep­
resents  zero  intensity  and 1 represents full intensity.  <I>Color</I>
<I>indices</I> comprise a single  fixed-point  value,  with  unspecified
precision  to  the  right of the binary point.  <I>Depth</I> pixels com­
prise a single floating-point value,  with  unspecified  mantissa
and  exponent  sizes, scaled such that 0.0 represents the minimum
depth buffer value, and 1.0 represents the maximum  depth  buffer
value.   Finally,  <I>stencil</I>  pixels  comprise a single fixed-point
value, with unspecified precision to  the  right  of  the  binary
point.  The pixel transfer operations performed on the four basic
pixel types are as follows: Color Each of the four  color  compo­
nents  is multiplied by a scale factor, then added to a bias fac­

</PRE>
<H2>tor.  That is, the red component is multiplied  by  GL_RED_SCALE,</H2><PRE>

</PRE>
<H2>then  added  to GL_RED_BIAS; the green component is multiplied by</H2><PRE>

</PRE>
<H2>GL_GREEN_SCALE, then added to GL_GREEN_BIAS; the  blue  component</H2><PRE>

</PRE>
<H2>is  multiplied  by GL_BLUE_SCALE, then added to GL_BLUE_BIAS; and</H2><PRE>

</PRE>
<H2>placed by the contents of GL_PIXEL_MAP_A_TO_A indexed by  itself.</H2><PRE>
All  components taken from the maps are then clamped to the range

</PRE>
<H2>[0,1].  GL_MAP_COLOR is specified with _cmnd.   The  contents  of</H2><PRE>
the  various  maps  are  specified  with _cmnd(PixelMap).  If the
_arbstring(imaging) extension is supported, each of the four col­
or components may be scaled and biased after tranformation by the
color matrix.  That  is,  the  red  component  is  multiplied  by

</PRE>
<H2>GL_POST_COLOR_MATRIX_RED_SCALE,  then  added to GL_POST_COLOR_MA­</H2><PRE>

</PRE>
<H2>TRIX_RED_BIAS; the green component is multiplied by  GL_POST_COL­</H2><PRE>

</PRE>
<H2>OR_MATRIX_GREEN_SCALE,    then    added    to   GL_POST_COLOR_MA­</H2><PRE>

</PRE>
<H2>TRIX_GREEN_BIAS; the blue component is multiplied by GL_POST_COL­</H2><PRE>

</PRE>
<H2>OR_MATRIX_BLUE_SCALE,    then    added    to    GL_POST_COLOR_MA­</H2><PRE>

</PRE>
<H2>TRIX_BLUE_BIAS;  and  the  alpha  component  is   multiplied   by</H2><PRE>

</PRE>
<H2>GL_POST_COLOR_MATRIX_ALPHA_SCALE, then added to GL_POST_COLOR_MA­</H2><PRE>

</PRE>
<H2>TRIX_ALPHA_BIAS.  After all four color components are scaled  and</H2><PRE>
biased,  each  is clamped to the range [0,1].  Similiarly, if the
_arbstring(imaging) extension is supported, each of the four col­
or  components  may  be scaled and biased after processing by the
enabled convolution filter.  That is, the red component is multi­

</PRE>
<H2>plied    by    GL_POST_CONVOLUTION_RED_SCALE,   then   added   to</H2><PRE>

</PRE>
<H2>GL_POST_CONVOLUTION_RED_BIAS; the green component  is  multiplied</H2><PRE>

</PRE>
<H2>by  GL_POST_CONVOLUTION_GREEN_SCALE, then added to GL_POST_CONVO­</H2><PRE>

</PRE>
<H2>LUTION_GREEN_BIAS;  the   blue   component   is   multiplied   by</H2><PRE>

</PRE>
<H2>GL_POST_CONVOLUTION_BLUE_SCALE,  then  added  to GL_POST_CONVOLU­</H2><PRE>

</PRE>
<H2>TION_BLUE_BIAS;  and  the  alpha  component  is   multiplied   by</H2><PRE>

</PRE>
<H2>GL_POST_CONVOLUTION_ALPHA_SCALE,  then  added to GL_POST_CONVOLU­</H2><PRE>

</PRE>
<H2>TION_ALPHA_BIAS.  After all four color components are scaled  and</H2><PRE>
biased,  each  is  clamped  to the range [0,1].  Color index Each

</PRE>
<H2>color index is shifted left by GL_INDEX_SHIFT bits; any bits  be­</H2><PRE>
yond the number of fraction bits carried by the fixed-point index

</PRE>
<H2>are filled with zeros.  If GL_INDEX_SHIFT is negative, the  shift</H2><PRE>

</PRE>
<H2>is  to  the  right,  again  zero filled.  Then GL_INDEX_OFFSET is</H2><PRE>

</PRE>
<H2>added to the index.  GL_INDEX_SHIFT and GL_INDEX_OFFSET are spec­</H2><PRE>
ified with
_cmnd.   From this point, operation diverges depending on the re­
quired format of the resulting pixels.  If the  resulting  pixels
are  to  be written to a color index buffer, or if they are being

</PRE>
<H2>read back to client memory in GL_COLOR_INDEX format,  the  pixels</H2><PRE>

</PRE>
<H2>continue to be treated as indices.  If GL_MAP_COLOR is true, each</H2><PRE>

</PRE>
<H2>index is masked by  $2  sup  n  ~-~  1$,  where  $n$  is  GL_PIX­</H2><PRE>

</PRE>
<H2>EL_MAP_I_TO_I_SIZE,  then  replaced  by  the  contents of GL_PIX­</H2><PRE>

</PRE>
<H2>EL_MAP_I_TO_I indexed by the masked value.  GL_MAP_COLOR is spec­</H2><PRE>
ified  with  _cmnd.   The  contents of the index map is specified
with _cmnd(PixelMap).  If the resulting pixels are to be  written
to an RGBA color buffer, or if they are read back to client memo­

</PRE>
<H2>ry in a format other than GL_COLOR_INDEX, the pixels are convert­</H2><PRE>

</PRE>
<H2>ed  from  indices  to colors by referencing the four maps GL_PIX­</H2><PRE>

</PRE>
<H2>EL_MAP_I_TO_R,  GL_PIXEL_MAP_I_TO_G,   GL_PIXEL_MAP_I_TO_B,   and</H2><PRE>

</PRE>
<H2>GL_PIXEL_MAP_I_TO_A.   Before  being  dereferenced,  the index is</H2><PRE>

</PRE>
<H2>masked by $2 sup n ~-~ 1$, where $n$ is  GL_PIXEL_MAP_I_TO_R_SIZE</H2><PRE>

</PRE>
<H2>for  the  red  map,  GL_PIXEL_MAP_I_TO_G_SIZE  for the green map,</H2><PRE>

</PRE>
<H2>GL_PIXEL_MAP_I_TO_B_SIZE  for   the   blue   map,   and   GL_PIX­</H2><PRE>
-------------------------------------------------------------------------

</PRE>
<H2>_param1                             Type     Initial Value   Valid Range</H2><PRE>
-------------------------------------------------------------------------

</PRE>
<H2>GL_MAP_COLOR                       boolean       false       true/false</H2><PRE>

</PRE>
<H2>GL_MAP_STENCIL                     boolean       false       true/false</H2><PRE>

</PRE>
<H2>GL_INDEX_SHIFT                     integer         0            (-,)</H2><PRE>

</PRE>
<H2>GL_INDEX_OFFSET                    integer         0            (-,)</H2><PRE>

</PRE>
<H2>GL_RED_SCALE                        float          1            (-,)</H2><PRE>

</PRE>
<H2>GL_GREEN_SCALE                      float          1            (-,)</H2><PRE>

</PRE>
<H2>GL_BLUE_SCALE                       float          1            (-,)</H2><PRE>

</PRE>
<H2>GL_ALPHA_SCALE                      float          1            (-,)</H2><PRE>

</PRE>
<H2>GL_DEPTH_SCALE                      float          1            (-,)</H2><PRE>

</PRE>
<H2>GL_RED_BIAS                         float          0            (-,)</H2><PRE>

</PRE>
<H2>GL_GREEN_BIAS                       float          0            (-,)</H2><PRE>

</PRE>
<H2>GL_BLUE_BIAS                        float          0            (-,)</H2><PRE>

</PRE>
<H2>GL_ALPHA_BIAS                       float          0            (-,)</H2><PRE>

</PRE>
<H2>GL_DEPTH_BIAS                       float          0            (-,)</H2><PRE>

</PRE>
<H2>GL_POST_COLOR_MATRIX_RED_SCALE      float          1            (-,)</H2><PRE>

</PRE>
<H2>GL_POST_COLOR_MATRIX_GREEN_SCALE    float          1            (-,)</H2><PRE>

</PRE>
<H2>GL_POST_COLOR_MATRIX_BLUE_SCALE     float          1            (-,)</H2><PRE>

</PRE>
<H2>GL_POST_COLOR_MATRIX_ALPHA_SCALE    float          1            (-,)</H2><PRE>

</PRE>
<H2>GL_POST_COLOR_MATRIX_RED_BIAS       float          0            (-,)</H2><PRE>

</PRE>
<H2>GL_POST_COLOR_MATRIX_GREEN_BIAS     float          0            (-,)</H2><PRE>

</PRE>
<H2>GL_POST_COLOR_MATRIX_BLUE_BIAS      float          0            (-,)</H2><PRE>

</PRE>
<H2>GL_POST_COLOR_MATRIX_ALPHA_BIAS     float          0            (-,)</H2><PRE>

</PRE>
<H2>GL_POST_CONVOLUTION_RED_SCALE       float          1            (-,)</H2><PRE>

</PRE>
<H2>GL_POST_CONVOLUTION_GREEN_SCALE     float          1            (-,)</H2><PRE>

</PRE>
<H2>GL_POST_CONVOLUTION_BLUE_SCALE      float          1            (-,)</H2><PRE>

</PRE>
<H2>GL_POST_CONVOLUTION_ALPHA_SCALE     float          1            (-,)</H2><PRE>

</PRE>
<H2>GL_POST_CONVOLUTION_RED_BIAS        float          0            (-,)</H2><PRE>

</PRE>
<H2>GL_POST_CONVOLUTION_GREEN_BIAS      float          0            (-,)</H2><PRE>

</PRE>
<H2>GL_POST_CONVOLUTION_BLUE_BIAS       float          0            (-,)</H2><PRE>

</PRE>
<H2>GL_POST_CONVOLUTION_ALPHA_BIAS      float          0            (-,)</H2><PRE>
-------------------------------------------------------------------------


_cmnd(PixelTransferf) can be used to set any pixel  transfer  pa­
rameter.   If  the parameter type is boolean, 0 implies false and
any other value implies true.  If _param1 is an  integer  parame­
ter,  _param2  is rounded to the nearest integer.  Likewise, _cm­
nd(PixelTransferi) can be used to set any of the  pixel  transfer
parameters.   Boolean parameters are set to false if _param2 is 0
and to true otherwise.  _param2 is converted  to  floating  point
before being assigned to real-valued parameters.  If a _cmnd(Col­
orTable), _cmnd(ColorSubTable), _cmnd(ConvolutionFilter1D),  _cm­
nd(ConvolutionFilter2D),    _cmnd(CopyPixels),   _cmnd(CopyTexIm­
age1D),  _cmnd(CopyTexImage2D),  _cmnd(CopyTexSubImage1D),   _cm­
nd(CopyTexSubImage2D),  _cmnd(CopyTexSubImage3D),  _cmnd(DrawPix­
els), _cmnd(ReadPixels),  _cmnd(SeparableFilter2D),  _cmnd(TexIm­
age1D),   _cmnd(TexImage2D),  _cmnd(TexImage3D),  _cmnd(TexSubIm­
age1D), _cmnd(TexSubImage2D), or  _cmnd(TexSubImage3D).   command
is  placed  in a display list (see _cmnd(NewList) and _cmnd(Call­

</PRE>
<H2>_cmnd(Get) with argument GL_BLUE_SCALE</H2><PRE>

</PRE>
<H2>_cmnd(Get) with argument GL_BLUE_BIAS</H2><PRE>

</PRE>
<H2>_cmnd(Get) with argument GL_ALPHA_SCALE</H2><PRE>

</PRE>
<H2>_cmnd(Get) with argument GL_ALPHA_BIAS</H2><PRE>

</PRE>
<H2>_cmnd(Get) with argument GL_DEPTH_SCALE</H2><PRE>

</PRE>
<H2>_cmnd(Get) with argument GL_DEPTH_BIAS</H2><PRE>

</PRE>
<H2>_cmnd(Get) with argument GL_POST_COLOR_MATRIX_RED_SCALE</H2><PRE>

</PRE>
<H2>_cmnd(Get) with argument GL_POST_COLOR_MATRIX_RED_BIAS</H2><PRE>

</PRE>
<H2>_cmnd(Get) with argument GL_POST_COLOR_MATRIX_GREEN_SCALE</H2><PRE>

</PRE>
<H2>_cmnd(Get) with argument GL_POST_COLOR_MATRIX_GREEN_BIAS</H2><PRE>

</PRE>
<H2>_cmnd(Get) with argument GL_POST_COLOR_MATRIX_BLUE_SCALE</H2><PRE>

</PRE>
<H2>_cmnd(Get) with argument GL_POST_COLOR_MATRIX_BLUE_BIAS</H2><PRE>

</PRE>
<H2>_cmnd(Get) with argument GL_POST_COLOR_MATRIX_ALPHA_SCALE</H2><PRE>

</PRE>
<H2>_cmnd(Get) with argument GL_POST_COLOR_MATRIX_ALPHA_BIAS</H2><PRE>

</PRE>
<H2>_cmnd(Get) with argument GL_POST_CONVOLUTION_RED_SCALE</H2><PRE>

</PRE>
<H2>_cmnd(Get) with argument GL_POST_CONVOLUTION_RED_BIAS</H2><PRE>

</PRE>
<H2>_cmnd(Get) with argument GL_POST_CONVOLUTION_GREEN_SCALE</H2><PRE>

</PRE>
<H2>_cmnd(Get) with argument GL_POST_CONVOLUTION_GREEN_BIAS</H2><PRE>

</PRE>
<H2>_cmnd(Get) with argument GL_POST_CONVOLUTION_BLUE_SCALE</H2><PRE>

</PRE>
<H2>_cmnd(Get) with argument GL_POST_CONVOLUTION_BLUE_BIAS</H2><PRE>

</PRE>
<H2>_cmnd(Get) with argument GL_POST_CONVOLUTION_ALPHA_SCALE</H2><PRE>

</PRE>
<H2>_cmnd(Get)  with  argument  GL_POST_CONVOLUTION_ALPHA_BIAS   _cm­</H2><PRE>
nd(CallList), _cmnd(ColorTable), _cmnd(ColorSubTable), _cmnd(Con­
volutionFilter1D), _cmnd(ConvolutionFilter2D), _cmnd(CopyPixels),
_cmnd(CopyTexImage1D), _cmnd(CopyTexImage2D), _cmnd(CopyTexSubIm­
age1D), _cmnd(CopyTexSubImage2D), _cmnd(CopyTexSubImage3D),  _cm­
nd(DrawPixels),   _cmnd(NewList),  _cmnd(PixelMap),  _cmnd(Pixel­
Store), _cmnd(PixelZoom),  _cmnd(ReadPixels),  _cmnd(TexImage1D),
_cmnd(TexImage2D),  _cmnd(TexImage3D), _cmnd(TexSubImage1D), _cm­
nd(TexSubImage2D), _cmnd(TexSubImage3D)






















@


1.1.1.1
log
@win32-x11 source tree update March 26, 2001
@
text
@@
