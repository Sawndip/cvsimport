head	1.2;
access;
symbols
	win32-x11-2001-03-26:1.1.1.1 SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2001.06.03.20.47.08;	author ssiddiqi;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.25.19.36.50;	author ssiddiqi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.03.25.19.36.50;	author ssiddiqi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Win32-X11 update sources check in, June 3, 2001 - ssiddiqi
@
text
@<HTML>
<BODY>
<PRE>
<!-- Manpage converted by man2html 3.0.1 -->
</PRE>
<HR>
<ADDRESS>
Man(1) output converted with
<a href="http://www.oac.uci.edu/indiv/ehood/man2html.html">man2html</a>
</ADDRESS>
</BODY>
</HTML>
@


1.1
log
@Initial revision
@
text
@a4 1428
indicating the state variable to be returned, and  _param2  is  a
pointer  to  an array of the indicated type in which to place the
returned data.  Type conversion is performed  if  _param2  has  a
different type than the state variable value being requested.  If
_cmnd(GetBooleanv) is called, a floating-point (or integer) value

</PRE>
<H2>is converted to GL_FALSE if and only if it is 0.0 (or 0).  Other­</H2><PRE>

</PRE>
<H2>wise, it is  converted  to  GL_TRUE.   If  _cmnd(GetIntegerv)  is</H2><PRE>

</PRE>
<H2>called,  boolean  values are returned as GL_TRUE or GL_FALSE, and</H2><PRE>
most floating-point values are rounded  to  the  nearest  integer
value.  Floating-point  colors and normals, however, are returned
with a linear mapping that maps 1.0 to the most  positive  repre­
sentable  integer  value,  and  -1.0  to the most negative repre­
sentable integer value.  If _cmnd(GetFloatv) or _cmnd(GetDoublev)

</PRE>
<H2>is  called,  boolean  values are returned as GL_TRUE or GL_FALSE,</H2><PRE>
and integer values are converted to floating-point  values.   The

</PRE>
<H2>following  symbolic  constants  are  accepted  by _param1: GL_AC­</H2><PRE>

</PRE>
<H2>CUM_ALPHA_BITS _param2 returns one value,  the  number  of  alpha</H2><PRE>

</PRE>
<H2>bitplanes in the accumulation buffer.  GL_ACCUM_BLUE_BITS _param2</H2><PRE>
returns one value, the number of blue bitplanes in the  accumula­

</PRE>
<H2>tion  buffer.   GL_ACCUM_CLEAR_VALUE _param2 returns four values:</H2><PRE>
the red, green, blue, and alpha values used to clear the  accumu­
lation buffer.  Integer values, if requested, are linearly mapped
from the internal floating-point representation such that 1.0 re­
turns the most positive representable integer value, and -1.0 re­
turns the most negative representable integer value. The  initial

</PRE>
<H2>value   is   (0,   0,  0,  0).   See  _cmnd(ClearAccum).   GL_AC­</H2><PRE>

</PRE>
<H2>CUM_GREEN_BITS _param2 returns one value,  the  number  of  green</H2><PRE>

</PRE>
<H2>bitplanes  in the accumulation buffer.  GL_ACCUM_RED_BITS _param2</H2><PRE>
returns one value, the number of red bitplanes in  the  accumula­
tion  buffer.  _arbconst(ACTIVE_TEXTURE) _param2 returns a single
value indicating the active multitexture unit.  The initial value
is     _arbconst(TEXTURE0).      See     _cmnd(ActiveTextureARB).

</PRE>
<H2>GL_ALIASED_POINT_SIZE_RANGE  _param2  returns  two  values,   the</H2><PRE>
smallest   and   largest  supported  sizes  for  aliased  points.

</PRE>
<H2>GL_ALIASED_LINE_WIDTH_RANGE  _param2  returns  two  values,   the</H2><PRE>

</PRE>
<H2>smallest  and largest supported widths for aliased lines.  GL_AL­</H2><PRE>

</PRE>
<H2>PHA_BIAS _param2 returns one value, the alpha  bias  factor  used</H2><PRE>
during pixel transfers. The initial value is 0.  See _cmnd(Pixel­

</PRE>
<H2>Transfer).  GL_ALPHA_BITS _param2 returns one value,  the  number</H2><PRE>

</PRE>
<H2>of  alpha bitplanes in each color buffer.  GL_ALPHA_SCALE _param2</H2><PRE>
returns one value, the  alpha  scale  factor  used  during  pixel
transfers.  The  initial  value  is 1.  See _cmnd(PixelTransfer).

</PRE>
<H2>GL_ALPHA_TEST _param2 returns a single boolean  value  indicating</H2><PRE>
whether  alpha testing of fragments is enabled. The initial value

</PRE>
<H2>is GL_FALSE.  See _cmnd(AlphaFunc).   GL_ALPHA_TEST_FUNC  _param2</H2><PRE>
returns  one value, the symbolic name of the alpha test function.

</PRE>
<H2>The initial value is GL_ALWAYS.   See  _cmnd(AlphaFunc).   GL_AL­</H2><PRE>

</PRE>
<H2>PHA_TEST_REF  _param2  returns one value, the reference value for</H2><PRE>
the alpha test. The initial value is  0.   See  _cmnd(AlphaFunc).
An  integer  value, if requested, is linearly mapped from the in­
ternal floating-point representation such that  1.0  returns  the
most  positive  representable integer value, and -1.0 returns the

</PRE>
<H2>tion blend function. The initial  value  is  GL_ZERO.   See  _cm­</H2><PRE>

</PRE>
<H2>nd(BlendFunc).   GL_BLEND_EQUATION  _param2  returns one value, a</H2><PRE>
symbolic  constant  indicating  whether  the  blend  equation  is

</PRE>
<H2>GL_FUNC_ADD,   GL_MIN   or   GL_MAX.   See  _cmnd(BlendEquation).</H2><PRE>

</PRE>
<H2>GL_BLEND_SRC _param2 returns one  value,  the  symbolic  constant</H2><PRE>
identifying  the  source  blend  function.  The  initial value is

</PRE>
<H2>GL_ONE.  See _cmnd(BlendFunc).  GL_BLUE_BIAS _param2 returns  one</H2><PRE>
value, the blue bias factor used during pixel transfers. The ini­

</PRE>
<H2>tial value is 0.  See _cmnd(PixelTransfer).  GL_BLUE_BITS _param2</H2><PRE>
returns  one  value,  the  number of blue bitplanes in each color

</PRE>
<H2>buffer.  GL_BLUE_SCALE _param2 returns one value, the blue  scale</H2><PRE>
factor  used during pixel transfers. The initial value is 1.  See
_cmnd(PixelTransfer).   _arbconst(CLIENT_ACTIVE_TEXTURE)  _param2
returns  a single integer value indicating the current client ac­
tive multitexture unit. The initial value is _arbconst(TEXTURE0).

</PRE>
<H2>See  _cmnd(ClientActiveTextureARB).  GL_CLIENT_ATTRIB_STACK_DEPTH</H2><PRE>
_param2 returns one value indicating the depth of  the  attribute
stack.  The  initial  value  is  0.  See _cmnd(PushClientAttrib).

</PRE>
<H2>GL_CLIP_PLANEi _param2 returns a single boolean value  indicating</H2><PRE>
whether the specified clipping plane is enabled. The initial val­

</PRE>
<H2>ue is GL_FALSE.  See  _cmnd(ClipPlane).   GL_COLOR_ARRAY  _param2</H2><PRE>
returns a single boolean value indicating whether the color array

</PRE>
<H2>is enabled. The initial value is GL_FALSE.  See _cmnd(ColorPoint­</H2><PRE>

</PRE>
<H2>er).   GL_COLOR_ARRAY_SIZE  _param2 returns one value, the number</H2><PRE>
of components per color in the color array. The initial value  is

</PRE>
<H2>4.  See  _cmnd(ColorPointer).   GL_COLOR_ARRAY_STRIDE _param2 re­</H2><PRE>
turns one value, the byte offset between  consecutive  colors  in
the  color  array. The initial value is 0.  See _cmnd(ColorPoint­

</PRE>
<H2>er).  GL_COLOR_ARRAY_TYPE _param2 returns  one  value,  the  data</H2><PRE>
type  of  each component in the color array. The initial value is

</PRE>
<H2>GL_FLOAT. See _cmnd(ColorPointer).  GL_COLOR_CLEAR_VALUE  _param2</H2><PRE>
returns  four values: the red, green, blue, and alpha values used
to clear the color buffers.  Integer values,  if  requested,  are
linearly  mapped  from the internal floating-point representation
such that 1.0 returns the  most  positive  representable  integer
value,  and  -1.0 returns the most negative representable integer
value. The initial value is (0, 0, 0, 0).  See _cmnd(ClearColor).

</PRE>
<H2>GL_COLOR_LOGIC_OP _param2 returns a single boolean value indicat­</H2><PRE>
ing whether a fragment's RGBA color values are  merged  into  the
framebuffer  using  a  logical  operation.  The  initial value is

</PRE>
<H2>GL_FALSE.  See _cmnd(LogicOp).  GL_COLOR_MATERIAL _param2 returns</H2><PRE>
a  single  boolean  value indicating whether one or more material
parameters are tracking the current color. The initial  value  is

</PRE>
<H2>GL_FALSE.    See   _cmnd(ColorMaterial).   GL_COLOR_MATERIAL_FACE</H2><PRE>
_param2 returns one value, a symbolic constant  indicating  which
materials  have  a  parameter that is tracking the current color.

</PRE>
<H2>The initial value is GL_FRONT_AND_BACK.   See  _cmnd(ColorMateri­</H2><PRE>

</PRE>
<H2>al).   GL_COLOR_MATERIAL_PARAMETER  _param2  returns one value, a</H2><PRE>
symbolic constant indicating which material parameters are track­

</PRE>
<H2>ing  the  current color. The initial value is GL_AMBIENT_AND_DIF­</H2><PRE>

</PRE>
<H2>FUSE.  See _cmnd(ColorMaterial).  GL_COLOR_MATRIX _param2 returns</H2><PRE>
sixteen  values:  the color matrix on the top of the color matrix

</PRE>
<H2>value is GL_FALSE.  See _cmnd(ConvolutionFilter2D).  GL_CULL_FACE</H2><PRE>
_param2 returns a single boolean value indicating whether polygon

</PRE>
<H2>culling is enabled. The initial  value  is  GL_FALSE.   See  _cm­</H2><PRE>

</PRE>
<H2>nd(CullFace).   GL_CULL_FACE_MODE  _param2  returns  one value, a</H2><PRE>
symbolic constant  indicating  which  polygon  faces  are  to  be

</PRE>
<H2>culled.  The  initial  value  is  GL_BACK.   See _cmnd(CullFace).</H2><PRE>

</PRE>
<H2>GL_CURRENT_COLOR _param2 returns four  values:  the  red,  green,</H2><PRE>
blue,  and alpha values of the current color.  Integer values, if
requested, are linearly mapped from the  internal  floating-point
representation  such  that  1.0  returns the most positive repre­
sentable integer value, and -1.0 returns the most negative repre­
sentable  integer  value.  See _cmnd(Color). The initial value is

</PRE>
<H2>(1, 1, 1, 1).  GL_CURRENT_INDEX _param2 returns  one  value,  the</H2><PRE>
current  color  index. The initial value is 1.  See _cmnd(Index).

</PRE>
<H2>GL_CURRENT_NORMAL _param2 returns three values: the x, y,  and  z</H2><PRE>
values  of the current normal.  Integer values, if requested, are
linearly mapped from the internal  floating-point  representation
such  that  1.0  returns  the most positive representable integer
value, and -1.0 returns the most negative  representable  integer
value.   The  initial  value  is  (0,  0,  1). See _cmnd(Normal).

</PRE>
<H2>GL_CURRENT_RASTER_COLOR _param2 returns  four  values:  the  red,</H2><PRE>
green,  blue,  and  alpha  values of the current raster position.
Integer values, if requested, are linearly mapped from the inter­
nal  floating-point representation such that 1.0 returns the most
positive representable integer value, and -1.0 returns  the  most
negative representable integer value. The initial value is (1, 1,

</PRE>
<H2>1, 1).  See _cmnd(RasterPos).  GL_CURRENT_RASTER_DISTANCE _param2</H2><PRE>
returns  one  value,  the  distance  from  the eye to the current
raster position. The initial value is 0.   See  _cmnd(RasterPos).

</PRE>
<H2>GL_CURRENT_RASTER_INDEX  _param2 returns one value, the color in­</H2><PRE>
dex of the current raster position. The initial value is 1.   See

</PRE>
<H2>_cmnd(RasterPos).    GL_CURRENT_RASTER_POSITION  _param2  returns</H2><PRE>
four values: the <I>x</I>, <I>y</I>, <I>z</I>, and <I>w</I> components of the current  raster
position.   <I>x</I>,  <I>y</I>,  and  <I>z</I> are in window coordinates, and <I>w</I> is in
clip coordinates. The initial value is (0, 0, 0,  1).   See  _cm­

</PRE>
<H2>nd(RasterPos).   GL_CURRENT_RASTER_POSITION_VALID _param2 returns</H2><PRE>
a single boolean value indicating whether the current raster  po­

</PRE>
<H2>sition is valid. The initial value is GL_TRUE.  See _cmnd(Raster­</H2><PRE>

</PRE>
<H2>Pos).  GL_CURRENT_RASTER_TEXTURE_COORDS _param2 returns four val­</H2><PRE>
ues:  the  <I>s</I>, <I>t</I>, <I>r</I>, and <I>q</I> current raster texture coordinates. The
initial value is (0, 0, 0, 1).   See  _cmnd(RasterPos)  and  _cm­

</PRE>
<H2>nd(TexCoord).   GL_CURRENT_TEXTURE_COORDS  _param2  returns  four</H2><PRE>
values: the <I>s</I>, <I>t</I>, <I>r</I>, and <I>q</I> current texture coordinates. The  ini­

</PRE>
<H2>tial  value is (0, 0, 0, 1).  See _cmnd(TexCoord).  GL_DEPTH_BIAS</H2><PRE>
_param2 returns one value, the depth bias factor used during pix­
el  transfers. The initial value is 0.  See _cmnd(PixelTransfer).

</PRE>
<H2>GL_DEPTH_BITS _param2 returns one value, the number of  bitplanes</H2><PRE>

</PRE>
<H2>in  the  depth  buffer.  GL_DEPTH_CLEAR_VALUE _param2 returns one</H2><PRE>
value, the value that is used to clear the depth buffer.  Integer
values,  if  requested,  are  linearly  mapped  from the internal
floating-point representation such that 1.0 returns the most pos­
itive representable integer value, and -1.0 returns the most neg­

</PRE>
<H2>enabled. The initial value is GL_FALSE.  See _cmnd(DepthFunc) and</H2><PRE>

</PRE>
<H2>_cmnd(DepthRange).   GL_DEPTH_WRITEMASK  _param2 returns a single</H2><PRE>
boolean value indicating if the depth buffer is enabled for writ­

</PRE>
<H2>ing.   The  initial  value  is  GL_TRUE.   See  _cmnd(DepthMask).</H2><PRE>

</PRE>
<H2>GL_DITHER _param2  returns  a  single  boolean  value  indicating</H2><PRE>
whether  dithering of fragment colors and indices is enabled. The

</PRE>
<H2>initial value is GL_TRUE.  GL_DOUBLEBUFFER _param2 returns a sin­</H2><PRE>
gle boolean value indicating whether double buffering is support­

</PRE>
<H2>ed.  GL_DRAW_BUFFER _param2 returns one value,  a  symbolic  con­</H2><PRE>
stant  indicating  which  buffers  are  being drawn to.  See _cm­

</PRE>
<H2>nd(DrawBuffer). The initial value is GL_BACK if  there  are  back</H2><PRE>

</PRE>
<H2>buffers,  otherwise it is GL_FRONT.  GL_EDGE_FLAG _param2 returns</H2><PRE>
a single boolean value indicating whether the current  edge  flag

</PRE>
<H2>is  GL_TRUE  or GL_FALSE. The initial value is GL_TRUE.  See _cm­</H2><PRE>

</PRE>
<H2>nd(EdgeFlag).   GL_EDGE_FLAG_ARRAY  _param2  returns   a   single</H2><PRE>
boolean  value indicating whether the edge flag array is enabled.

</PRE>
<H2>The  initial  value  is  GL_FALSE.   See  _cmnd(EdgeFlagPointer).</H2><PRE>

</PRE>
<H2>GL_EDGE_FLAG_ARRAY_STRIDE  _param2  returns  one  value, the byte</H2><PRE>
offset between consecutive edge flags in the edge flag array. The

</PRE>
<H2>initial   value  is  0.   See  _cmnd(EdgeFlagPointer).   GL_FEED­</H2><PRE>

</PRE>
<H2>BACK_BUFFER_SIZE _param2 returns one value, the size of the feed­</H2><PRE>

</PRE>
<H2>back buffer.  See _cmnd(FeedbackBuffer).  GL_FEEDBACK_BUFFER_TYPE</H2><PRE>
_param2 returns one value, the type of the feedback buffer.   See

</PRE>
<H2>_cmnd(FeedbackBuffer).   GL_FOG  _param2 returns a single boolean</H2><PRE>
value indicating whether fogging is enabled. The initial value is

</PRE>
<H2>GL_FALSE.   See  _cmnd(Fog).   GL_FOG_COLOR  _param2 returns four</H2><PRE>
values: the red, green, blue, and alpha  components  of  the  fog
color.   Integer  values,  if requested, are linearly mapped from
the internal floating-point representation such that 1.0  returns
the  most  positive representable integer value, and -1.0 returns
the most negative representable integer value. The initial  value

</PRE>
<H2>is (0, 0, 0, 0).  See _cmnd(Fog).  GL_FOG_DENSITY _param2 returns</H2><PRE>
one value, the fog density parameter. The  initial  value  is  1.

</PRE>
<H2>See  _cmnd(Fog).   GL_FOG_END  _param2 returns one value, the end</H2><PRE>
factor for the linear fog equation. The initial value is 1.   See

</PRE>
<H2>_cmnd(Fog).   GL_FOG_HINT  _param2  returns one value, a symbolic</H2><PRE>
constant indicating the mode of the fog hint. The  initial  value

</PRE>
<H2>is  GL_DONT_CARE.  See _cmnd(Hint).  GL_FOG_INDEX _param2 returns</H2><PRE>
one value, the fog color index. The initial value is 0.  See _cm­

</PRE>
<H2>nd(Fog).   GL_FOG_MODE _param2 returns one value, a symbolic con­</H2><PRE>
stant indicating which fog equation is selected. The initial val­

</PRE>
<H2>ue  is GL_EXP.  See _cmnd(Fog).  GL_FOG_START _param2 returns one</H2><PRE>
value, the start factor for the linear fog equation. The  initial

</PRE>
<H2>value  is  0.  See _cmnd(Fog).  GL_FRONT_FACE _param2 returns one</H2><PRE>
value, a symbolic constant indicating whether clockwise or  coun­
terclockwise polygon winding is treated as front-facing. The ini­

</PRE>
<H2>tial  value  is  GL_CCW.   See  _cmnd(FrontFace).   GL_GREEN_BIAS</H2><PRE>
_param2 returns one value, the green bias factor used during pix­

</PRE>
<H2>el transfers. The initial value is 0.  GL_GREEN_BITS _param2  re­</H2><PRE>
turns  one  value,  the  number  of green bitplanes in each color

</PRE>
<H2>buffer.  GL_GREEN_SCALE _param2  returns  one  value,  the  green</H2><PRE>
scale factor used during pixel transfers. The initial value is 1.

</PRE>
<H2>is 0.  See _cmnd(ClearIndex).  GL_INDEX_LOGIC_OP _param2  returns</H2><PRE>
a single boolean value indicating whether a fragment's index val­
ues are merged into the framebuffer using  a  logical  operation.

</PRE>
<H2>The  initial  value  is  GL_FALSE.   See  _cmnd(LogicOp).  GL_IN­</H2><PRE>

</PRE>
<H2>DEX_MODE  _param2  returns  a  single  boolean  value  indicating</H2><PRE>

</PRE>
<H2>whether  the  GL  is  in  color index mode (GL_TRUE) or RGBA mode</H2><PRE>

</PRE>
<H2>(GL_FALSE).  GL_INDEX_OFFSET _param2 returns one value, the  off­</H2><PRE>
set  added  to  color and stencil indices during pixel transfers.

</PRE>
<H2>The  initial  value  is  0.   See  _cmnd(PixelTransfer).   GL_IN­</H2><PRE>

</PRE>
<H2>DEX_SHIFT  _param2  returns  one value, the amount that color and</H2><PRE>
stencil indices are shifted during pixel transfers.  The  initial

</PRE>
<H2>value   is   0.   See  _cmnd(PixelTransfer).   GL_INDEX_WRITEMASK</H2><PRE>
_param2 returns one value, a mask indicating which  bitplanes  of
each  color index buffer can be written. The initial value is all

</PRE>
<H2>1's.  See _cmnd(IndexMask).  GL_LIGHTi _param2 returns  a  single</H2><PRE>
boolean  value indicating whether the specified light is enabled.

</PRE>
<H2>The initial value is GL_FALSE.  See _cmnd(Light) and _cmnd(Light­</H2><PRE>

</PRE>
<H2>Model).  GL_LIGHTING _param2 returns a single boolean value indi­</H2><PRE>
cating  whether  lighting  is  enabled.  The  initial  value   is

</PRE>
<H2>GL_FALSE.  See _cmnd(LightModel).  GL_LIGHT_MODEL_AMBIENT _param2</H2><PRE>
returns four values: the red, green, blue, and  alpha  components
of the ambient intensity of the entire scene.  Integer values, if
requested, are linearly mapped from the  internal  floating-point
representation  such  that  1.0  returns the most positive repre­
sentable integer value, and -1.0 returns the most negative repre­
sentable  integer  value.  The  initial  value is (0.2, 0.2, 0.2,

</PRE>
<H2>1.0).    See   _cmnd(LightModel).    GL_LIGHT_MODEL_COLOR_CONTROL</H2><PRE>
_param2 returns single enumerated value indicating whether specu­
lar reflection calculations are separated  from  normal  lighting

</PRE>
<H2>computations.     The    initial    value   is   GL_SINGLE_COLOR.</H2><PRE>

</PRE>
<H2>GL_LIGHT_MODEL_LOCAL_VIEWER _param2 returns a single boolean val­</H2><PRE>
ue  indicating whether specular reflection calculations treat the
viewer as  being  local  to  the  scene.  The  initial  value  is

</PRE>
<H2>GL_FALSE.     See   _cmnd(LightModel).    GL_LIGHT_MODEL_TWO_SIDE</H2><PRE>
_param2 returns a single boolean value indicating  whether  sepa­
rate  materials are used to compute lighting for front- and back-

</PRE>
<H2>facing polygons. The initial value is GL_FALSE.  See _cmnd(Light­</H2><PRE>

</PRE>
<H2>Model).   GL_LINE_SMOOTH  _param2  returns a single boolean value</H2><PRE>
indicating whether antialiasing of lines is enabled. The  initial

</PRE>
<H2>value  is  GL_FALSE.   See _cmnd(LineWidth).  GL_LINE_SMOOTH_HINT</H2><PRE>
_param2 returns one value, a  symbolic  constant  indicating  the
mode  of  the  line  antialiasing  hint.  The  initial  value  is

</PRE>
<H2>GL_DONT_CARE.  See _cmnd(Hint).  GL_LINE_STIPPLE _param2  returns</H2><PRE>
a  single  boolean value indicating whether stippling of lines is

</PRE>
<H2>enabled. The initial value is GL_FALSE.  See  _cmnd(LineStipple).</H2><PRE>

</PRE>
<H2>GL_LINE_STIPPLE_PATTERN  _param2  returns  one  value, the 16-bit</H2><PRE>
line stipple pattern. The initial value is  all  1's.   See  _cm­

</PRE>
<H2>nd(LineStipple).  GL_LINE_STIPPLE_REPEAT _param2 returns one val­</H2><PRE>
ue, the line stipple repeat factor. The initial value is 1.   See

</PRE>
<H2>_cmnd(LineStipple).  GL_LINE_WIDTH _param2 returns one value, the</H2><PRE>
line width as specified with _cmnd(LineWidth). The initial  value

</PRE>
<H2>is  1.   GL_LINE_WIDTH_GRANULARITY _param2 returns one value, the</H2><PRE>
indicating the selected logic operation mode. The  initial  value

</PRE>
<H2>is GL_COPY.  See _cmnd(LogicOp).  GL_MAP1_COLOR_4 _param2 returns</H2><PRE>
a single boolean value indicating whether 1D evaluation generates

</PRE>
<H2>colors.   The   initial  value  is  GL_FALSE.   See  _cmnd(Map1).</H2><PRE>

</PRE>
<H2>GL_MAP1_GRID_DOMAIN _param2 returns two values: the endpoints  of</H2><PRE>
the  1D map's grid domain. The initial value is (0, 1).  See _cm­

</PRE>
<H2>nd(MapGrid).  GL_MAP1_GRID_SEGMENTS _param2  returns  one  value,</H2><PRE>
the number of partitions in the 1D map's grid domain. The initial

</PRE>
<H2>value is 1.  See _cmnd(MapGrid).  GL_MAP1_INDEX _param2 returns a</H2><PRE>
single  boolean  value indicating whether 1D evaluation generates

</PRE>
<H2>color indices. The initial value is GL_FALSE.   See  _cmnd(Map1).</H2><PRE>

</PRE>
<H2>GL_MAP1_NORMAL  _param2 returns a single boolean value indicating</H2><PRE>
whether 1D evaluation generates normals.  The  initial  value  is

</PRE>
<H2>GL_FALSE.   See _cmnd(Map1).  GL_MAP1_TEXTURE_COORD_1 _param2 re­</H2><PRE>
turns a single boolean value  indicating  whether  1D  evaluation

</PRE>
<H2>generates  1D texture coordinates. The initial value is GL_FALSE.</H2><PRE>

</PRE>
<H2>See _cmnd(Map1).  GL_MAP1_TEXTURE_COORD_2 _param2 returns a  sin­</H2><PRE>
gle  boolean  value indicating whether 1D evaluation generates 2D

</PRE>
<H2>texture coordinates. The initial value  is  GL_FALSE.   See  _cm­</H2><PRE>

</PRE>
<H2>nd(Map1).    GL_MAP1_TEXTURE_COORD_3  _param2  returns  a  single</H2><PRE>
boolean value indicating whether 1D evaluation generates 3D  tex­

</PRE>
<H2>ture  coordinates.  The  initial  value  is  GL_FALSE.   See _cm­</H2><PRE>

</PRE>
<H2>nd(Map1).   GL_MAP1_TEXTURE_COORD_4  _param2  returns  a   single</H2><PRE>
boolean  value indicating whether 1D evaluation generates 4D tex­

</PRE>
<H2>ture coordinates.  The  initial  value  is  GL_FALSE.   See  _cm­</H2><PRE>

</PRE>
<H2>nd(Map1).  GL_MAP1_VERTEX_3 _param2 returns a single boolean val­</H2><PRE>
ue indicating whether 1D evaluation generates 3D  vertex  coordi­

</PRE>
<H2>nates.   The   initial   value  is  GL_FALSE.   See  _cmnd(Map1).</H2><PRE>

</PRE>
<H2>GL_MAP1_VERTEX_4 _param2 returns a single boolean value  indicat­</H2><PRE>
ing  whether  1D  evaluation generates 4D vertex coordinates. The

</PRE>
<H2>initial value is  GL_FALSE.   See  _cmnd(Map1).   GL_MAP2_COLOR_4</H2><PRE>
_param2  returns  a  single  boolean  value indicating whether 2D

</PRE>
<H2>evaluation generates colors. The initial value is GL_FALSE.   See</H2><PRE>

</PRE>
<H2>_cmnd(Map2).   GL_MAP2_GRID_DOMAIN  _param2  returns four values:</H2><PRE>
the endpoints of the 2D map's $i$ and $j$ grid domains. The  ini­

</PRE>
<H2>tial value is (0,1; 0,1).  See _cmnd(MapGrid).  GL_MAP2_GRID_SEG­</H2><PRE>

</PRE>
<H2>MENTS _param2 returns two values: the number of partitions in the</H2><PRE>
2D  map's  $i$  and $j$ grid domains. The initial value is (1,1).

</PRE>
<H2>See  _cmnd(MapGrid).   GL_MAP2_INDEX  _param2  returns  a  single</H2><PRE>
boolean  value  indicating  whether 2D evaluation generates color

</PRE>
<H2>indices.  The  initial  value  is  GL_FALSE.   See   _cmnd(Map2).</H2><PRE>

</PRE>
<H2>GL_MAP2_NORMAL  _param2 returns a single boolean value indicating</H2><PRE>
whether 2D evaluation generates normals.  The  initial  value  is

</PRE>
<H2>GL_FALSE.   See _cmnd(Map2).  GL_MAP2_TEXTURE_COORD_1 _param2 re­</H2><PRE>
turns a single boolean value  indicating  whether  2D  evaluation

</PRE>
<H2>generates  1D texture coordinates. The initial value is GL_FALSE.</H2><PRE>

</PRE>
<H2>See _cmnd(Map2).  GL_MAP2_TEXTURE_COORD_2 _param2 returns a  sin­</H2><PRE>
gle  boolean  value indicating whether 2D evaluation generates 2D

</PRE>
<H2>texture coordinates. The initial value  is  GL_FALSE.   See  _cm­</H2><PRE>

</PRE>
<H2>nd(Map2).    GL_MAP2_TEXTURE_COORD_3  _param2  returns  a  single</H2><PRE>
boolean value indicating whether 2D evaluation generates 3D  tex­

</PRE>
<H2>ture  coordinates.  The  initial  value  is  GL_FALSE.   See _cm­</H2><PRE>

</PRE>
<H2>during pixel transfers. The initial value is GL_FALSE.  See  _cm­</H2><PRE>

</PRE>
<H2>nd(PixelTransfer).   GL_MATRIX_MODE  _param2 returns one value, a</H2><PRE>
symbolic constant indicating which matrix stack is currently  the

</PRE>
<H2>target  of  all  matrix  operations. The initial value is GL_MOD­</H2><PRE>

</PRE>
<H2>ELVIEW.  See _cmnd(MatrixMode).   GL_MAX_3D_TEXTURE_SIZE  _param2</H2><PRE>
returns  one  value,  a  rough estimate of the largest 3D texture
that the GL can handle.  If the GL version is 1.2 or greater, use

</PRE>
<H2>GL_PROXY_TEXTURE_3D  to determine if a texture is too large.  See</H2><PRE>

</PRE>
<H2>_cmnd(TexImage3D).  GL_MAX_CLIENT_ATTRIB_STACK_DEPTH _param2  re­</H2><PRE>
turns  one  value  indicating  the maximum supported depth of the

</PRE>
<H2>client attribute stack.  See _cmnd(PushClientAttrib).  GL_MAX_AT­</H2><PRE>

</PRE>
<H2>TRIB_STACK_DEPTH _param2 returns one value, the maximum supported</H2><PRE>
depth of the attribute stack. The value must be at least 16.  See

</PRE>
<H2>_cmnd(PushAttrib).  GL_MAX_CLIP_PLANES _param2 returns one value,</H2><PRE>
the maximum number of application-defined  clipping  planes.  The

</PRE>
<H2>value  must  be  at  least 6.  See _cmnd(ClipPlane).  GL_MAX_COL­</H2><PRE>

</PRE>
<H2>OR_MATRIX_STACK_DEPTH _param2 returns one value, the maximum sup­</H2><PRE>
ported  depth  of  the  color matrix stack.  The value must be at

</PRE>
<H2>least 2.  See _cmnd(PushMatrix).  GL_MAX_ELEMENTS_INDICES _param2</H2><PRE>
returns one value, the recommended maximum number of vertex array

</PRE>
<H2>indices.  See _cmnd(DrawRangeElements).  GL_MAX_ELEMENTS_VERTICES</H2><PRE>
_param2 returns one value, the recommended maximum number of ver­
tex    array     vertices.      See     _cmnd(DrawRangeElements).

</PRE>
<H2>GL_MAX_EVAL_ORDER _param2 returns one value, the maximum equation</H2><PRE>
order supported by 1D and 2D evaluators. The  value  must  be  at

</PRE>
<H2>least 8.  See _cmnd(Map1) and _cmnd(Map2).  GL_MAX_LIGHTS _param2</H2><PRE>
returns one value, the maximum number of lights. The  value  must

</PRE>
<H2>be  at  least  8.  See _cmnd(Light).  GL_MAX_LIST_NESTING _param2</H2><PRE>
returns one value, the maximum  recursion  depth  allowed  during
display-list  traversal. The value must be at least 64.  See _cm­

</PRE>
<H2>nd(CallList).  GL_MAX_MODELVIEW_STACK_DEPTH _param2  returns  one</H2><PRE>
value, the maximum supported depth of the modelview matrix stack.
The  value  must  be  at  least   32.    See   _cmnd(PushMatrix).

</PRE>
<H2>GL_MAX_NAME_STACK_DEPTH  _param2  returns  one value, the maximum</H2><PRE>
supported depth of the selection name stack. The value must be at

</PRE>
<H2>least  64.   See _cmnd(PushName).  GL_MAX_PIXEL_MAP_TABLE _param2</H2><PRE>
returns one value, the maximum supported  size  of  a  _cmnd(Pix­
elMap)  lookup  table.   The value must be at least 32.  See _cm­

</PRE>
<H2>nd(PixelMap).  GL_MAX_PROJECTION_STACK_DEPTH _param2 returns  one</H2><PRE>
value,  the  maximum  supported  depth  of  the projection matrix
stack. The value must be  at  least  2.   See  _cmnd(PushMatrix).

</PRE>
<H2>GL_MAX_TEXTURE_SIZE _param2 returns one value.  The value gives a</H2><PRE>
rough estimate of the largest texture that the GL can handle.  If

</PRE>
<H2>the  GL  version  is  1.1  or greater, use GL_PROXY_TEXTURE_1D or</H2><PRE>

</PRE>
<H2>GL_PROXY_TEXTURE_2D to determine if a texture is too large.   See</H2><PRE>

</PRE>
<H2>_cmnd(TexImage1D)     and     _cmnd(TexImage2D).      GL_MAX_TEX­</H2><PRE>

</PRE>
<H2>TURE_STACK_DEPTH _param2 returns one value, the maximum supported</H2><PRE>
depth  of the texture matrix stack. The value must be at least 2.
See _cmnd(PushMatrix).  _arbconst(MAX_TEXTURE_UNITS) _param2  re­
turns  a single value indicating the number of texture units sup­
ported. The value must  be  at  least  1.   See  _cmnd(ActiveTex­

</PRE>
<H2>tureARB).   GL_MAX_VIEWPORT_DIMS  _param2 returns two values: the</H2><PRE>

</PRE>
<H2>ray is enabled. The initial value is GL_FALSE.  See _cmnd(Normal­</H2><PRE>

</PRE>
<H2>Pointer).   GL_NORMAL_ARRAY_STRIDE _param2 returns one value, the</H2><PRE>
byte offset between consecutive normals in the normal array.  The

</PRE>
<H2>initial  value  is  0.   See _cmnd(NormalPointer).  GL_NORMAL_AR­</H2><PRE>

</PRE>
<H2>RAY_TYPE _param2 returns one value, the data type of each coordi­</H2><PRE>

</PRE>
<H2>nate  in  the  normal  array. The initial value is GL_FLOAT.  See</H2><PRE>

</PRE>
<H2>_cmnd(NormalPointer).   GL_NORMALIZE  _param2  returns  a  single</H2><PRE>
boolean value indicating whether normals are automatically scaled
to unit length after they have been transformed  to  eye  coordi­

</PRE>
<H2>nates.   The  initial  value  is  GL_FALSE.   See  _cmnd(Normal).</H2><PRE>

</PRE>
<H2>GL_PACK_ALIGNMENT _param2 returns one value, the  byte  alignment</H2><PRE>
used  for  writing  pixel data to memory. The initial value is 4.

</PRE>
<H2>See _cmnd(PixelStore).  GL_PACK_IMAGE_HEIGHT _param2 returns  one</H2><PRE>
value,  the  image  height used for writing pixel data to memory.
The    initial    value    is    0.     See    _cmnd(PixelStore).

</PRE>
<H2>GL_PACK_LSB_FIRST _param2 returns a single boolean value indicat­</H2><PRE>
ing whether single-bit pixels being written to memory are written
first  to  the  least  significant bit of each unsigned byte. The

</PRE>
<H2>initial    value    is    GL_FALSE.     See    _cmnd(PixelStore).</H2><PRE>

</PRE>
<H2>GL_PACK_ROW_LENGTH _param2 returns one value, the row length used</H2><PRE>
for writing pixel data to memory. The initial value  is  0.   See

</PRE>
<H2>_cmnd(PixelStore).   GL_PACK_SKIP_IMAGES _param2 returns one val­</H2><PRE>
ue, the number of pixel images skipped before the first pixel  is
written  into  memory.  The initial value is 0.  See _cmnd(Pixel­

</PRE>
<H2>Store).  GL_PACK_SKIP_PIXELS _param2 returns one value, the  num­</H2><PRE>
ber  of pixel locations skipped before the first pixel is written
into memory. The initial  value  is  0.   See  _cmnd(PixelStore).

</PRE>
<H2>GL_PACK_SKIP_ROWS  _param2  returns one value, the number of rows</H2><PRE>
of pixel locations skipped before the first pixel is written into
memory.   The   initial   value  is  0.   See  _cmnd(PixelStore).

</PRE>
<H2>GL_PACK_SWAP_BYTES _param2 returns a single boolean  value  indi­</H2><PRE>
cating  whether the bytes of two-byte and four-byte pixel indices
and components are swapped before being written  to  memory.  The

</PRE>
<H2>initial  value  is GL_FALSE.  See _cmnd(PixelStore).  GL_PERSPEC­</H2><PRE>

</PRE>
<H2>TIVE_CORRECTION_HINT _param2 returns one value, a  symbolic  con­</H2><PRE>
stant indicating the mode of the perspective correction hint. The

</PRE>
<H2>initial  value  is  GL_DONT_CARE.   See   _cmnd(Hint).    GL_PIX­</H2><PRE>

</PRE>
<H2>EL_MAP_A_TO_A_SIZE _param2 returns one value, the size of the al­</H2><PRE>
pha-to-alpha pixel translation table.  The initial  value  is  1.

</PRE>
<H2>See  _cmnd(PixelMap).   GL_PIXEL_MAP_B_TO_B_SIZE  _param2 returns</H2><PRE>
one value, the size of the blue-to-blue pixel translation  table.

</PRE>
<H2>The   initial   value   is   1.   See  _cmnd(PixelMap).   GL_PIX­</H2><PRE>

</PRE>
<H2>EL_MAP_G_TO_G_SIZE _param2 returns one value,  the  size  of  the</H2><PRE>
green-to-green  pixel translation table.  The initial value is 1.

</PRE>
<H2>See _cmnd(PixelMap).   GL_PIXEL_MAP_I_TO_A_SIZE  _param2  returns</H2><PRE>
one  value,  the  size  of  the  index-to-alpha pixel translation

</PRE>
<H2>table.  The initial value is 1.   See  _cmnd(PixelMap).   GL_PIX­</H2><PRE>

</PRE>
<H2>EL_MAP_I_TO_B_SIZE _param2 returns one value, the size of the in­</H2><PRE>
dex-to-blue pixel translation table.  The  initial  value  is  1.

</PRE>
<H2>See  _cmnd(PixelMap).   GL_PIXEL_MAP_I_TO_G_SIZE  _param2 returns</H2><PRE>
one value, the  size  of  the  index-to-green  pixel  translation

</PRE>
<H2>table.   The  initial  value is 1.  See _cmnd(PixelMap).  GL_PIX­</H2><PRE>

</PRE>
<H2>points.  See _cmnd(PointSize).  GL_POINT_SIZE_RANGE  _param2  re­</H2><PRE>
turns  two  values:  the smallest and largest supported sizes for
antialiased points. The smallest size must be at most 1, and  the
largest   size   must  be  at  least  1.   See  _cmnd(PointSize).

</PRE>
<H2>GL_POINT_SMOOTH _param2 returns a single boolean value indicating</H2><PRE>
whether  antialiasing  of points is enabled. The initial value is

</PRE>
<H2>GL_FALSE.  See  _cmnd(PointSize).   GL_POINT_SMOOTH_HINT  _param2</H2><PRE>
returns one value, a symbolic constant indicating the mode of the

</PRE>
<H2>point antialiasing hint. The initial value is GL_DONT_CARE.   See</H2><PRE>

</PRE>
<H2>_cmnd(Hint).  GL_POLYGON_MODE _param2 returns two values: symbol­</H2><PRE>
ic constants  indicating  whether  front-facing  and  back-facing
polygons are rasterized as points, lines, or filled polygons. The

</PRE>
<H2>initial value  is  GL_FILL.   See  _cmnd(PolygonMode).   GL_POLY­</H2><PRE>

</PRE>
<H2>GON_OFFSET_FACTOR  _param2  returns one value, the scaling factor</H2><PRE>
used to determine the variable offset that is added to the  depth
value  of  each  fragment generated when a polygon is rasterized.

</PRE>
<H2>The initial value  is  0.   See  _cmnd(PolygonOffset).   GL_POLY­</H2><PRE>

</PRE>
<H2>GON_OFFSET_UNITS _param2 returns one value.  This value is multi­</H2><PRE>
plied by an implementation-specific value and then added  to  the
depth  value of each fragment generated when a polygon is raster­
ized.  The  initial  value  is  0.    See   _cmnd(PolygonOffset).

</PRE>
<H2>GL_POLYGON_OFFSET_FILL _param2 returns a single boolean value in­</H2><PRE>
dicating whether polygon offset is enabled for polygons  in  fill

</PRE>
<H2>mode.  The  initial value is GL_FALSE.  See _cmnd(PolygonOffset).</H2><PRE>

</PRE>
<H2>GL_POLYGON_OFFSET_LINE _param2 returns a single boolean value in­</H2><PRE>
dicating  whether  polygon offset is enabled for polygons in line

</PRE>
<H2>mode. The initial value is GL_FALSE.   See  _cmnd(PolygonOffset).</H2><PRE>

</PRE>
<H2>GL_POLYGON_OFFSET_POINT  _param2  returns  a single boolean value</H2><PRE>
indicating whether polygon offset  is  enabled  for  polygons  in

</PRE>
<H2>point mode. The initial value is GL_FALSE.  See _cmnd(PolygonOff­</H2><PRE>

</PRE>
<H2>set).  GL_POLYGON_SMOOTH _param2 returns a single  boolean  value</H2><PRE>
indicating  whether antialiasing of polygons is enabled. The ini­

</PRE>
<H2>tial  value  is  GL_FALSE.   See  _cmnd(PolygonMode).    GL_POLY­</H2><PRE>

</PRE>
<H2>GON_SMOOTH_HINT  _param2  returns  one value, a symbolic constant</H2><PRE>
indicating the mode of the polygon antialiasing hint. The initial

</PRE>
<H2>value  is  GL_DONT_CARE.   See  _cmnd(Hint).   GL_POLYGON_STIPPLE</H2><PRE>
_param2 returns a single boolean value indicating whether polygon

</PRE>
<H2>stippling  is  enabled.  The initial value is GL_FALSE.  See _cm­</H2><PRE>

</PRE>
<H2>nd(PolygonStipple).  GL_POST_COLOR_MATRIX_COLOR_TABLE _param2 re­</H2><PRE>
turns a single boolean value indicating whether post color matrix

</PRE>
<H2>transformation lookup is enabled. The initial value is  GL_FALSE.</H2><PRE>

</PRE>
<H2>See _cmnd(ColorTable).  GL_POST_COLOR_MATRIX_RED_BIAS _param2 re­</H2><PRE>
turns one value, the red bias factor applied  to  RGBA  fragments
after  color matrix transformations. The initial value is 0.  See

</PRE>
<H2>_cmnd(PixelTransfer).   GL_POST_COLOR_MATRIX_GREEN_BIAS   _param2</H2><PRE>
returns  one  value,  the green bias factor applied to RGBA frag­
ments after color matrix transformations. The initial value is 0.

</PRE>
<H2>See  _cmnd(PixelTransfer)  GL_POST_COLOR_MATRIX_BLUE_BIAS _param2</H2><PRE>
returns one value, the blue bias factor applied to RGBA fragments
after  color matrix transformations. The initial value is 0.  See

</PRE>
<H2>_cmnd(PixelTransfer).   GL_POST_COLOR_MATRIX_ALPHA_BIAS   _param2</H2><PRE>
returns  one  value,  the alpha bias factor applied to RGBA frag­

</PRE>
<H2>TION_COLOR_TABLE _param2 returns a single boolean value  indicat­</H2><PRE>
ing whether post convolution lookup is enabled. The initial value

</PRE>
<H2>is   GL_FALSE.     See    _cmnd(ColorTable).     GL_POST_CONVOLU­</H2><PRE>

</PRE>
<H2>TION_RED_BIAS  _param2 returns one value, the red bias factor ap­</H2><PRE>
plied to RGBA fragments after convolution. The initial  value  is

</PRE>
<H2>0.    See  _cmnd(PixelTransfer).   GL_POST_CONVOLUTION_GREEN_BIAS</H2><PRE>
_param2 returns one value, the green bias factor applied to  RGBA
fragments  after  convolution.  The initial value is 0.  See _cm­

</PRE>
<H2>nd(PixelTransfer).  GL_POST_CONVOLUTION_BLUE_BIAS _param2 returns</H2><PRE>
one  value,  the blue bias factor applied to RGBA fragments after
convolution. The initial value is 0.   See  _cmnd(PixelTransfer).

</PRE>
<H2>GL_POST_CONVOLUTION_ALPHA_BIAS _param2 returns one value, the al­</H2><PRE>
pha bias factor applied to RGBA fragments after convolution.  The

</PRE>
<H2>initial  value is 0.  See _cmnd(PixelTransfer).  GL_POST_CONVOLU­</H2><PRE>

</PRE>
<H2>TION_RED_SCALE _param2 returns one value, the  red  scale  factor</H2><PRE>
applied to RGBA fragments after convolution. The initial value is

</PRE>
<H2>1.   See  _cmnd(PixelTransfer).   GL_POST_CONVOLUTION_GREEN_SCALE</H2><PRE>
_param2 returns one value, the green scale factor applied to RGBA
fragments after convolution. The initial value is  1.   See  _cm­

</PRE>
<H2>nd(PixelTransfer).   GL_POST_CONVOLUTION_BLUE_SCALE  _param2  re­</H2><PRE>
turns one value, the blue scale factor applied to RGBA  fragments
after convolution. The initial value is 1.  See _cmnd(PixelTrans­

</PRE>
<H2>fer).  GL_POST_CONVOLUTION_ALPHA_SCALE _param2 returns one value,</H2><PRE>
the  alpha  scale factor applied to RGBA fragments after convolu­

</PRE>
<H2>tion. The initial value is 1.  See _cmnd(PixelTransfer).  GL_PRO­</H2><PRE>

</PRE>
<H2>JECTION_MATRIX _param2 returns sixteen values: the projection ma­</H2><PRE>
trix on the top of the projection matrix  stack.  Initially  this

</PRE>
<H2>matrix  is  the identity matrix.  See _cmnd(PushMatrix).  GL_PRO­</H2><PRE>

</PRE>
<H2>JECTION_STACK_DEPTH _param2 returns one value, the number of  ma­</H2><PRE>
trices  on  the projection matrix stack.  The initial value is 1.

</PRE>
<H2>See _cmnd(PushMatrix).  GL_READ_BUFFER _param2 returns one value,</H2><PRE>
a symbolic constant indicating which color buffer is selected for

</PRE>
<H2>reading. The initial value is GL_BACK if there is a back  buffer,</H2><PRE>

</PRE>
<H2>otherwise  it  is  GL_FRONT.  See _cmnd(ReadPixels) and _cmnd(Ac­</H2><PRE>

</PRE>
<H2>cum).  GL_RED_BIAS _param2 returns one value, the red bias factor</H2><PRE>

</PRE>
<H2>used during pixel transfers. The initial value is 0.  GL_RED_BITS</H2><PRE>
_param2 returns one value, the number of red  bitplanes  in  each

</PRE>
<H2>color  buffer.   GL_RED_SCALE  _param2 returns one value, the red</H2><PRE>
scale factor used during pixel transfers. The initial value is 1.

</PRE>
<H2>See  _cmnd(PixelTransfer).   GL_RENDER_MODE  _param2  returns one</H2><PRE>
value, a symbolic constant indicating whether the GL is  in  ren­

</PRE>
<H2>der,  select,  or  feedback mode. The initial value is GL_RENDER.</H2><PRE>

</PRE>
<H2>See _cmnd(RenderMode).  GL_RESCALE_NORMAL _param2 returns  single</H2><PRE>
boolean  value  indicating  whether  normal rescaling is enabled.

</PRE>
<H2>See _cmnd(Enable).  GL_RGBA_MODE _param2 returns a single boolean</H2><PRE>
value  indicating  whether the GL is in RGBA mode (true) or color

</PRE>
<H2>index mode (false).  See  _cmnd(Color).   GL_SCISSOR_BOX  _param2</H2><PRE>
returns  four  values:  the $x$ and $y$ window coordinates of the
scissor box, followed by its width and height.  Initially the $x$
and  $y$  window  coordinates are both 0 and the width and height

</PRE>
<H2>are set to the size of the window.  See _cmnd(Scissor).  GL_SCIS­</H2><PRE>

</PRE>
<H2>SOR_TEST  _param2  returns  a  single  boolean  value  indicating</H2><PRE>
values, the smallest and largest supported widths for antialiased

</PRE>
<H2>points.   See _cmnd(PointSize).  GL_SMOOTH_POINT_SIZE_GRANULARITY</H2><PRE>
_param2 returns one value,  the  granularity  of  sizes  for  an­

</PRE>
<H2>tialiased points.  See _cmnd(PointSize).  GL_STENCIL_BITS _param2</H2><PRE>
returns one value, the number of bitplanes in the stencil buffer.

</PRE>
<H2>GL_STENCIL_CLEAR_VALUE  _param2  returns  one value, the index to</H2><PRE>
which the stencil bitplanes are cleared. The initial value is  0.

</PRE>
<H2>See  _cmnd(ClearStencil).   GL_STENCIL_FAIL  _param2  returns one</H2><PRE>
value, a symbolic constant indicating what action is  taken  when

</PRE>
<H2>the  stencil  test fails. The initial value is GL_KEEP.  See _cm­</H2><PRE>

</PRE>
<H2>nd(StencilOp).  GL_STENCIL_FUNC _param2 returns one value, a sym­</H2><PRE>
bolic  constant  indicating  what function is used to compare the
stencil reference value with the stencil buffer value.  The  ini­

</PRE>
<H2>tial  value  is  GL_ALWAYS.   See  _cmnd(StencilFunc).   GL_STEN­</H2><PRE>

</PRE>
<H2>CIL_PASS_DEPTH_FAIL _param2 returns one value,  a  symbolic  con­</H2><PRE>
stant indicating what action is taken when the stencil test pass­

</PRE>
<H2>es, but the depth test fails. The initial value is GL_KEEP.   See</H2><PRE>

</PRE>
<H2>_cmnd(StencilOp).  GL_STENCIL_PASS_DEPTH_PASS _param2 returns one</H2><PRE>
value, a symbolic constant indicating what action is  taken  when
the  stencil  test  passes and the depth test passes. The initial

</PRE>
<H2>value is GL_KEEP.  See _cmnd(StencilOp).  GL_STENCIL_REF  _param2</H2><PRE>
returns  one value, the reference value that is compared with the
contents of the stencil buffer. The initial value is 0.  See _cm­

</PRE>
<H2>nd(StencilFunc).    GL_STENCIL_TEST   _param2  returns  a  single</H2><PRE>
boolean value indicating whether stencil testing of fragments  is

</PRE>
<H2>enabled.  The  initial value is GL_FALSE.  See _cmnd(StencilFunc)</H2><PRE>

</PRE>
<H2>and _cmnd(StencilOp).  GL_STENCIL_VALUE_MASK _param2 returns  one</H2><PRE>
value,  the  mask that is used to mask both the stencil reference
value and the stencil buffer value before they are compared.  The

</PRE>
<H2>initial  value  is  all  1's.   See _cmnd(StencilFunc).  GL_STEN­</H2><PRE>

</PRE>
<H2>CIL_WRITEMASK _param2 returns one value, the mask  that  controls</H2><PRE>
writing  of  the stencil bitplanes. The initial value is all 1's.

</PRE>
<H2>See  _cmnd(StencilMask).   GL_STEREO  _param2  returns  a  single</H2><PRE>
boolean  value indicating whether stereo buffers (left and right)

</PRE>
<H2>are supported.  GL_SUBPIXEL_BITS _param2 returns  one  value,  an</H2><PRE>
estimate  of  the  number of bits of subpixel resolution that are
used to position rasterized geometry in window  coordinates.  The
initial value

</PRE>
<H2>is 4.  GL_TEXTURE_1D _param2 returns a single boolean value indi­</H2><PRE>
cating whether 1D texture mapping is enabled. The  initial  value

</PRE>
<H2>is   GL_FALSE.    See  _cmnd(TexImage1D).   GL_TEXTURE_BINDING_1D</H2><PRE>
_param2 returns a single value, the name of the texture currently

</PRE>
<H2>bound  to  the target GL_TEXTURE_1D. The initial value is 0.  See</H2><PRE>

</PRE>
<H2>_cmnd(BindTexture).   GL_TEXTURE_2D  _param2  returns  a   single</H2><PRE>
boolean  value  indicating whether 2D texture mapping is enabled.

</PRE>
<H2>The initial value is GL_FALSE.  See  _cmnd(TexImage2D).   GL_TEX­</H2><PRE>

</PRE>
<H2>TURE_BINDING_2D  _param2  returns a single value, the name of the</H2><PRE>

</PRE>
<H2>texture currently bound to the target GL_TEXTURE_2D. The  initial</H2><PRE>

</PRE>
<H2>value  is  0.  See _cmnd(BindTexture).  GL_TEXTURE_3D _param2 re­</H2><PRE>
turns a single boolean value indicating whether 3D  texture  map­

</PRE>
<H2>ping is enabled. The initial value is GL_FALSE.  See _cmnd(TexIm­</H2><PRE>

</PRE>
<H2>age3D).  GL_TEXTURE_BINDING_3D _param2 returns  a  single  value,</H2><PRE>
returns  a single boolean value indicating whether automatic gen­
eration of the <I>q</I> texture coordinate is enabled. The initial value

</PRE>
<H2>is  GL_FALSE.   See  _cmnd(TexGen).  GL_TEXTURE_GEN_R _param2 re­</H2><PRE>
turns a single boolean value indicating whether automatic genera­
tion of the <I>r</I> texture coordinate is enabled. The initial value is

</PRE>
<H2>GL_FALSE.  See _cmnd(TexGen).  GL_TEXTURE_GEN_S _param2 returns a</H2><PRE>
single  boolean  value indicating whether automatic generation of
the <I>S</I>  texture  coordinate  is  enabled.  The  initial  value  is

</PRE>
<H2>GL_FALSE.  See _cmnd(TexGen).  GL_TEXTURE_GEN_T _param2 returns a</H2><PRE>
single boolean value indicating whether automatic  generation  of
the  T  texture  coordinate  is  enabled.  The  initial  value is

</PRE>
<H2>GL_FALSE.  See _cmnd(TexGen).  GL_TEXTURE_MATRIX _param2  returns</H2><PRE>
sixteen  values: the texture matrix on the top of the texture ma­
trix stack. Initially this matrix is the  identity  matrix.   See

</PRE>
<H2>_cmnd(PushMatrix).   GL_TEXTURE_STACK_DEPTH  _param2  returns one</H2><PRE>
value, the number of matrices on the texture matrix  stack.   The

</PRE>
<H2>initial  value is 1.  See _cmnd(PushMatrix).  GL_UNPACK_ALIGNMENT</H2><PRE>
_param2 returns one value, the byte alignment  used  for  reading
pixel data from memory. The initial value is 4.  See _cmnd(Pixel­

</PRE>
<H2>Store).  GL_UNPACK_IMAGE_HEIGHT _param2 returns  one  value,  the</H2><PRE>
image  height  used for reading pixel data from memory.  The ini­

</PRE>
<H2>tial is 0.  See _cmnd(PixelStore).   GL_UNPACK_LSB_FIRST  _param2</H2><PRE>
returns a single boolean value indicating whether single-bit pix­
els being read from memory are read first from the least signifi­

</PRE>
<H2>cant  bit  of  each unsigned byte. The initial value is GL_FALSE.</H2><PRE>

</PRE>
<H2>See _cmnd(PixelStore).  GL_UNPACK_ROW_LENGTH _param2 returns  one</H2><PRE>
value,  the  row  length used for reading pixel data from memory.

</PRE>
<H2>The  initial  value  is  0.    See   _cmnd(PixelStore).    GL_UN­</H2><PRE>

</PRE>
<H2>PACK_SKIP_IMAGES  _param2  returns one value, the number of pixel</H2><PRE>
images skipped before the first pixel is read  from  memory.  The

</PRE>
<H2>initial  value is 0.  See _cmnd(PixelStore).  GL_UNPACK_SKIP_PIX­</H2><PRE>

</PRE>
<H2>ELS _param2 returns one value,  the  number  of  pixel  locations</H2><PRE>
skipped  before  the first pixel is read from memory. The initial

</PRE>
<H2>value is 0.  See _cmnd(PixelStore).  GL_UNPACK_SKIP_ROWS  _param2</H2><PRE>
returns  one value, the number of rows of pixel locations skipped
before the first pixel is read from memory. The initial value  is

</PRE>
<H2>0.   See _cmnd(PixelStore).  GL_UNPACK_SWAP_BYTES _param2 returns</H2><PRE>
a single boolean value indicating whether the bytes  of  two-byte
and  four-byte pixel indices and components are swapped after be­

</PRE>
<H2>ing read from memory. The initial value is  GL_FALSE.   See  _cm­</H2><PRE>

</PRE>
<H2>nd(PixelStore).  GL_VERTEX_ARRAY _param2 returns a single boolean</H2><PRE>
value indicating whether the vertex array is enabled. The initial

</PRE>
<H2>value  is  GL_FALSE.   See  _cmnd(VertexPointer).   GL_VERTEX_AR­</H2><PRE>

</PRE>
<H2>RAY_SIZE _param2 returns one value, the number of coordinates per</H2><PRE>
vertex  in  the  vertex  array. The initial value is 4.  See _cm­

</PRE>
<H2>nd(VertexPointer).  GL_VERTEX_ARRAY_STRIDE  _param2  returns  one</H2><PRE>
value, the byte offset between consecutive vertexes in the vertex
array.  The  initial  value  is  0.   See   _cmnd(VertexPointer).

</PRE>
<H2>GL_VERTEX_ARRAY_TYPE  _param2 returns one value, the data type of</H2><PRE>
each coordinate  in  the  vertex  array.  The  initial  value  is

</PRE>
<H2>GL_FLOAT.  See _cmnd(VertexPointer).  GL_VIEWPORT _param2 returns</H2><PRE>
four values: the $x$ and $y$ window coordinates of the  viewport,

</PRE>
<H2>GL_POLYGON_OFFSET_FACTOR, GL_POLYGON_OFFSET_FILL, GL_POLYGON_OFF­</H2><PRE>

</PRE>
<H2>SET_LINE,    GL_POLYGON_OFFSET_POINT,     GL_TEXTURE_COORD_ARRAY,</H2><PRE>

</PRE>
<H2>GL_TEXTURE_COORD_ARRAY_SIZE,       GL_TEXTURE_COORD_ARRAY_STRIDE,</H2><PRE>

</PRE>
<H2>GL_TEXTURE_COORD_ARRAY_TYPE,    GL_VERTEX_ARRAY,    GL_VERTEX_AR­</H2><PRE>

</PRE>
<H2>RAY_SIZE,  GL_VERTEX_ARRAY_STRIDE,  and  GL_VERTEX_ARRAY_TYPE are</H2><PRE>
available  only  if  the  GL   version   is   1.1   or   greater.

</PRE>
<H2>GL_ALIASED_POINT_SIZE_RANGE,   GL_ALIASED_POINT_SIZE_GRANULARITY,</H2><PRE>

</PRE>
<H2>GL_FEEDBACK_BUFFER_SIZE,  GL_FEEDBACK_BUFFER_TYPE,  GL_LIGHT_MOD­</H2><PRE>

</PRE>
<H2>EL_AMBIENT, GL_LIGHT_MODEL_COLOR_CONTROL, GL_MAX_3D_TEXTURE_SIZE,</H2><PRE>

</PRE>
<H2>GL_MAX_ELEMENTS_INDICES,  GL_MAX_ELEMENTS_VERTICES,   GL_PACK_IM­</H2><PRE>

</PRE>
<H2>AGE_HEIGHT,   GL_PACK_SKIP_IMAGES,  GL_RESCALE_NORMAL,  GL_SELEC­</H2><PRE>

</PRE>
<H2>TION_BUFFER_SIZE,               GL_SMOOTH_LINE_WIDTH_GRANULARITY,</H2><PRE>

</PRE>
<H2>GL_SMOOTH_LINE_WIDTH_RANGE,     GL_SMOOTH_POINT_SIZE_GRANULARITY,</H2><PRE>

</PRE>
<H2>GL_SMOOTH_POINT_SIZE_RANGE, GL_TEXTURE_3D, GL_TEXTURE_BINDING_3D,</H2><PRE>

</PRE>
<H2>GL_UNPACK_IMAGE_HEIGHT,  and  GL_UNPACK_SKIP_IMAGES are available</H2><PRE>

</PRE>
<H2>only if the GL version is 1.2 or  greater.   GL_LINE_WIDTH_GRANU­</H2><PRE>

</PRE>
<H2>LARITY  was  deprecated in GL version 1.2.  Its functionality was</H2><PRE>

</PRE>
<H2>replaced           by           GL_SMOOTH_LINE_WIDTH_GRANULARITY.</H2><PRE>

</PRE>
<H2>GL_LINE_WIDTH_RANGE  was deprecated in GL version 1.2.  Its func­</H2><PRE>

</PRE>
<H2>tionality    was    replaced    by    GL_SMOOTH_LINE_WIDTH_RANGE.</H2><PRE>

</PRE>
<H2>GL_POINT_SIZE_GRANULARITY  was deprecated in GL version 1.2.  Its</H2><PRE>

</PRE>
<H2>functionality was replaced  by  GL_SMOOTH_POINT_SIZE_GRANULARITY.</H2><PRE>

</PRE>
<H2>GL_POINT_SIZE_RANGE  was deprecated in GL version 1.2.  Its func­</H2><PRE>

</PRE>
<H2>tionality    was    replaced    by    GL_SMOOTH_POINT_SIZE_RANGE.</H2><PRE>

</PRE>
<H2>GL_BLEND_COLOR,  GL_BLEND_EQUATION, GL_COLOR_MATRIX, GL_COLOR_MA­</H2><PRE>

</PRE>
<H2>TRIX_STACK_DEPTH, GL_COLOR_TABLE, GL_CONVOLUTION_1D,  GL_CONVOLU­</H2><PRE>

</PRE>
<H2>TION_2D,  GL_HISTOGRAM,  GL_MAX_COLOR_MATRIX_STACK_DEPTH, GL_MIN­</H2><PRE>

</PRE>
<H2>MAX,     GL_POST_COLOR_MATRIX_COLOR_TABLE,      GL_POST_COLOR_MA­</H2><PRE>

</PRE>
<H2>TRIX_RED_BIAS, GL_POST_COLOR_MATRIX_GREEN_BIAS, GL_POST_COLOR_MA­</H2><PRE>

</PRE>
<H2>TRIX_BLUE_BIAS,   GL_POST_COLOR_MATRIX_ALPHA_BIAS,   GL_POST_COL­</H2><PRE>

</PRE>
<H2>OR_MATRIX_RED_SCALE,            GL_POST_COLOR_MATRIX_GREEN_SCALE,</H2><PRE>

</PRE>
<H2>GL_POST_COLOR_MATRIX_BLUE_SCALE,         GL_POST_COLOR_MATRIX_AL­</H2><PRE>

</PRE>
<H2>PHA_SCALE,    GL_POST_CONVOLUTION_COLOR_TABLE,   GL_POST_CONVOLU­</H2><PRE>

</PRE>
<H2>TION_RED_BIAS,  GL_POST_CONVOLUTION_GREEN_BIAS,  GL_POST_CONVOLU­</H2><PRE>

</PRE>
<H2>TION_BLUE_BIAS,  GL_POST_CONVOLUTION_ALPHA_BIAS, GL_POST_CONVOLU­</H2><PRE>

</PRE>
<H2>TION_RED_SCALE, GL_POST_CONVOLUTION_GREEN_SCALE, GL_POST_CONVOLU­</H2><PRE>

</PRE>
<H2>TION_BLUE_SCALE,  GL_POST_CONVOLUTION_ALPHA_SCALE, and GL_SEPARA­</H2><PRE>

</PRE>
<H2>BLE_2D are available only if _arbstring(imaging) is returned from</H2><PRE>

</PRE>
<H2>_cmnd(Get) when called with the argument GL_EXTENSIONS.  _arbcon­</H2><PRE>
st(ACTIVE_TEXTURE), _arbconst(CLIENT_ACTIVE_TEXTURE),  and  _arb­
const(MAX_TEXTURE_UNITS)  are available only if _arbstring(multi­
texture) is returned from _cmnd(Get) when called with  the  argu­

</PRE>
<H2>ment  GL_EXTENSIONS.  When the _arbstring(multitexture) extension</H2><PRE>
is supported, the following parameters return the associated val­

</PRE>
<H2>ue for the active texture unit: GL_CURRENT_RASTER_TEXTURE_COORDS,</H2><PRE>

</PRE>
<H2>GL_TEXTURE_1D,  GL_TEXTURE_BINDING_1D,   GL_TEXTURE_2D,   GL_TEX­</H2><PRE>

</PRE>
<H2>TURE_BINDING_2D,  GL_TEXTURE_3D,  GL_TEXTURE_BINDING_3D,  GL_TEX­</H2><PRE>

</PRE>
<H2>TURE_GEN_S, GL_TEXTURE_GEN_T, GL_TEXTURE_GEN_R, GL_TEXTURE_GEN_Q,</H2><PRE>

</PRE>
<H2>GL_TEXTURE_MATRIX,  and  GL_TEXTURE_STACK_DEPTH.   Likewise,  the</H2><PRE>
following parameters return the associated value for  the  active

</PRE>
<H2>client texture unit: GL_TEXTURE_COORD_ARRAY, GL_TEXTURE_COORD_AR­</H2><PRE>

</PRE>
<H2>RAY_SIZE,   GL_TEXTURE_COORD_ARRAY_STRIDE,   GL_TEXTURE_COORD_AR­</H2><PRE>




















































@


1.1.1.1
log
@win32-x11 source tree update March 26, 2001
@
text
@@
