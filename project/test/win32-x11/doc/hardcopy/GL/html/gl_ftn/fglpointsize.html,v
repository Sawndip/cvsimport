head	1.2;
access;
symbols
	win32-x11-2001-03-26:1.1.1.1 SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2001.06.03.20.47.08;	author ssiddiqi;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.25.19.36.51;	author ssiddiqi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.03.25.19.36.51;	author ssiddiqi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Win32-X11 update sources check in, June 3, 2001 - ssiddiqi
@
text
@<HTML>
<BODY>
<PRE>
<!-- Manpage converted by man2html 3.0.1 -->
</PRE>
<HR>
<ADDRESS>
Man(1) output converted with
<a href="http://www.oac.uci.edu/indiv/ehood/man2html.html">man2html</a>
</ADDRESS>
</BODY>
</HTML>
@


1.1
log
@Initial revision
@
text
@a4 70

</PRE>
<H2>argument GL_POINT_SMOOTH. Point antialiasing  is  initially  dis­</H2><PRE>
abled.  If point antialiasing is disabled, the actual size is de­
termined by rounding the supplied size to  the  nearest  integer.
(If  the  rounding  results in the value 0, it is as if the point
size were 1.)  If the rounded size is odd, then the center  point
($ x $, $ y $) of the pixel fragment that represents the point is
computed as

    ( $ | ~ x sub w ~ | ~+~ .5 $, $ | ~ y sub w ~ | ~+~ .5 $)

where $w$ subscripts indicate  window  coordinates.   All  pixels
that  lie  within the square grid of the rounded size centered at
($ x $, $ y $) make up the fragment.  If the size  is  even,  the
center point is

    ( $ | ~ x sub w ~+~ .5 ~ |$, $ | ~ y sub w ~+~ .5 ~ | $)

and the rasterized fragment's centers are the half-integer window
coordinates within the square of the rounded size centered at  ($
x  $,  $  y  $).   All  pixel fragments produced in rasterizing a
nonantialiased point are assigned the same associated data,  that
of the vertex corresponding to the point.  If antialiasing is en­
abled, then point rasterization produces a fragment for each pix­
el square that intersects the region lying within the circle hav­
ing diameter equal to the current point size and centered at  the
point's  ($ x sub w $, $ y sub w $).  The coverage value for each
fragment is the window coordinate area of the intersection of the
circular  region with the corresponding pixel square.  This value
is saved and used in the final rasterization step.  The data  as­
sociated with each fragment is the data associated with the point
being rasterized.  Not all sizes are  supported  when  point  an­
tialiasing  is enabled.  If an unsupported size is requested, the
nearest supported size is used.  Only size 1 is guaranteed to  be
supported;  others  depend  on  the implementation.  To query the
range of supported sizes and the size difference between support­
ed  sizes  within  the  range,  call  _cmnd(Get)  with  arguments

</PRE>
<H2>GL_SMOOTH_POINT_SIZE_RANGE and  GL_SMOOTH_POINT_SIZE_GRANULARITY.</H2><PRE>
For  aliased  points,  query the supported ranges and granularity

</PRE>
<H2>with _cmnd(Get) with  arguments  GL_ALIASED_POINT_SIZE_RANGE  and</H2><PRE>

</PRE>
<H2>GL_ALIASED_POINT_SIZE_GRANULARITY.   The  point size specified by</H2><PRE>

</PRE>
<H2>_cmnd is always returned when GL_POINT_SIZE is queried.  Clamping</H2><PRE>
and rounding for aliased and antialiased points have no effect on
the specified value.  A non-antialiased point size may be clamped
to  an  implementation-dependent  maximum.  Although this maximum
cannot be queried, it must be no less than the maximum value  for
antialiased   points,  rounded  to  the  nearest  integer  value.

</PRE>
<H2>GL_POINT_SIZE_RANGE and GL_POINT_SIZE_GRANULARITY are  deprecated</H2><PRE>
in GL versions 1.2 and greater.  Their functionality has been re­

</PRE>
<H2>placed         by         GL_SMOOTH_POINT_SIZE_RANGE          and</H2><PRE>

</PRE>
<H2>GL_SMOOTH_POINT_SIZE_GRANULARITY.   GL_INVALID_VALUE is generated</H2><PRE>

</PRE>
<H2>if _param1 is less than or equal to 0.   GL_INVALID_OPERATION  is</H2><PRE>
generated if _cmnd is executed between the execution of _cmnd(Be­
@


1.1.1.1
log
@win32-x11 source tree update March 26, 2001
@
text
@@
