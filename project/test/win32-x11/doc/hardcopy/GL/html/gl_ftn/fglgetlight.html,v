head	1.2;
access;
symbols
	win32-x11-2001-03-26:1.1.1.1 SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2001.06.03.20.47.08;	author ssiddiqi;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.25.19.36.50;	author ssiddiqi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.03.25.19.36.50;	author ssiddiqi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Win32-X11 update sources check in, June 3, 2001 - ssiddiqi
@
text
@<HTML>
<BODY>
<PRE>
<!-- Manpage converted by man2html 3.0.1 -->
</PRE>
<HR>
<ADDRESS>
Man(1) output converted with
<a href="http://www.oac.uci.edu/indiv/ehood/man2html.html">man2html</a>
</ADDRESS>
</BODY>
</HTML>
@


1.1
log
@Initial revision
@
text
@a4 138

</PRE>
<H2>FUSE, GL_SPECULAR, GL_POSITION, GL_SPOT_DIRECTION,  GL_SPOT_EXPO­</H2><PRE>

</PRE>
<H2>NENT, GL_SPOT_CUTOFF, GL_CONSTANT_ATTENUATION, GL_LINEAR_ATTENUA­</H2><PRE>

</PRE>
<H2>TION, and GL_QUADRATIC_ATTENUATION.  _phead(_param3) Returns  the</H2><PRE>
requested  data.  _cmnd returns in _param3 the value or values of
a light source parameter.  _param1 names the light and is a  sym­

</PRE>
<H2>bolic  name of the form GL_LIGHT$i$ for 0 </= $i$ < GL_MAX_LIGHTS,<H2><PRE>

</PRE>
<H2>where GL_MAX_LIGHTS is an implementation dependent constant  that</H2><PRE>
is  greater than or equal to eight.  _param2 specifies one of ten
light source parameters, again by symbolic name.   The  following

</PRE>
<H2>parameters  are  defined: GL_AMBIENT _param3 returns four integer</H2><PRE>
or floating-point values representing the  ambient  intensity  of
the  light  source.  Integer values, when requested, are linearly
mapped from the internal floating-point representation such  that
1.0  maps  to  the most positive representable integer value, and
-1.0 maps to the most negative representable integer  value.   If
the  internal value is outside the range [-1, 1], the correspond­
ing integer return value is undefined. The initial value  is  (0,

</PRE>
<H2>0,  0,  1).  GL_DIFFUSE _param3 returns four integer or floating-</H2><PRE>
point values representing the  diffuse  intensity  of  the  light
source.  Integer values, when requested, are linearly mapped from
the internal floating-point representation such that 1.0 maps  to
the  most  positive representable integer value, and -1.0 maps to
the most negative representable integer value.  If  the  internal
value is outside the range [-1, 1], the corresponding integer re­

</PRE>
<H2>turn value is undefined. The initial value for GL_LIGHT0  is  (1,</H2><PRE>
1,  1,  1);  for other lights, the initial value is (0, 0, 0, 0).

</PRE>
<H2>GL_SPECULAR _param3 returns four integer or floating-point values</H2><PRE>
representing the specular intensity of the light source.  Integer
values, when requested, are linearly  mapped  from  the  internal
floating-point representation such that 1.0 maps to the most pos­
itive representable integer value, and -1.0 maps to the most neg­
ative representable integer value.  If the internal value is out­
side the range [-1, 1], the corresponding integer return value is

</PRE>
<H2>undefined.  The  initial value for GL_LIGHT0 is (1, 1, 1, 1); for</H2><PRE>

</PRE>
<H2>other lights, the initial value is (0,  0,  0,  0).   GL_POSITION</H2><PRE>
_param3  returns four integer or floating-point values represent­
ing the position of the light source.  Integer values,  when  re­
quested,  are  computed  by  rounding the internal floating-point
values to the nearest integer value.   The  returned  values  are
those  maintained  in eye coordinates.  They will not be equal to
the values specified using _cmnd(Light), unless the modelview ma­
trix  was  identity at the time _cmnd(Light) was called. The ini­

</PRE>
<H2>tial value is (0, 0, 1, 0).   GL_SPOT_DIRECTION  _param3  returns</H2><PRE>
three integer or floating-point values representing the direction
of the light source.  Integer values, when requested, are comput­
ed  by rounding the internal floating-point values to the nearest
integer value.  The returned values are those maintained  in  eye
coordinates.   They will not be equal to the values specified us­
ing _cmnd(Light), unless the modelview matrix was identity at the
time _cmnd(Light) was called.  Although spot direction is normal­
ized before being used in the  lighting  equation,  the  returned
values are the transformed versions of the specified values prior

</PRE>
<H2>ue is 1.  GL_LINEAR_ATTENUATION _param3 returns a single  integer</H2><PRE>
or  floating-point  value  representing the linear attenuation of
the light.  An integer value,  when  requested,  is  computed  by
rounding  the internal floating-point representation to the near­

</PRE>
<H2>est integer. The initial value  is  0.   GL_QUADRATIC_ATTENUATION</H2><PRE>
_param3  returns  a single integer or floating-point value repre­
senting the quadratic attenuation of the light.  An integer  val­
ue,  when  requested, is computed by rounding the internal float­
ing-point representation to the nearest integer. The initial val­

</PRE>
<H2>ue  is  0.   It is always the case that GL_LIGHT$i$ = GL_LIGHT0 +</H2><PRE>
$i$.  If an error is generated, no change is made to the contents

</PRE>
<H2>of  _param3.   GL_INVALID_ENUM is generated if _param1 or _param2</H2><PRE>

</PRE>
<H2>is not an accepted value.  GL_INVALID_OPERATION is  generated  if</H2><PRE>
_cmnd  is  executed between the execution of _cmnd(Begin) and the
corresponding execution of _cmnd(End).  _cmnd(Light)





































@


1.1.1.1
log
@win32-x11 source tree update March 26, 2001
@
text
@@
