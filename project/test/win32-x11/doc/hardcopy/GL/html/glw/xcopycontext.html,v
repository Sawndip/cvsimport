head	1.2;
access;
symbols
	win32-x11-2001-03-26:1.1.1.1 SNAPSHOT:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2001.06.03.20.47.11;	author ssiddiqi;	state Exp;
branches;
next	1.1;

1.1
date	2001.03.25.19.36.50;	author ssiddiqi;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.03.25.19.36.50;	author ssiddiqi;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Win32-X11 update sources check in, June 3, 2001 - ssiddiqi
@
text
@<HTML>
<BODY>
<PRE>
<!-- Manpage converted by man2html 3.0.1 -->
</PRE>
<HR>
<ADDRESS>
Man(1) output converted with
<a href="http://www.oac.uci.edu/indiv/ehood/man2html.html">man2html</a>
</ADDRESS>
</BODY>
</HTML>
@


1.1
log
@Initial revision
@
text
@a4 116
       <B>glXCopyContext</B>  - copy state from one rendering context to
       another



</PRE>
<H2>C SPECIFICATION</H2><PRE>
       void <B>glXCopyContext</B>( Display <I>*dpy</I>,
                            GLXContext <I>src</I>,
                            GLXContext <I>dst</I>,
                            unsigned long <I>mask</I> )



</PRE>
<H2>PARAMETERS</H2><PRE>
       <I>dpy</I>   Specifies the connection to the X server.

       <I>src</I>   Specifies the source context.

       <I>dst</I>   Specifies the destination context.

       <I>mask</I>  Specifies which portions of  <I>src</I>  state  are  to  be
             copied to <I>dst</I>.


</PRE>
<H2>DESCRIPTION</H2><PRE>
       <B>glXCopyContext</B>  copies  selected groups of state variables
       from <I>src</I> to <I>dst</I>.  <I>mask</I> indicates  which  groups  of  state
       variables  are to be copied.  <I>mask</I> contains the bitwise OR
       of the same symbolic names that are passed to the GL  com­
       mand   <B>glPushAttrib</B>.    The   single   symbolic   constant
       <B>GL_ALL_ATTRIB_BITS</B> can be used to copy the maximum  possi­
       ble portion of rendering state.

       The  copy  can  be done only if the renderers named by <I>src</I>
       and <I>dst</I> share an address space.   Two  rendering  contexts
       share  an  address  space  if both are nondirect using the
       same server, or if both are direct and owned by  a  single
       process.  Note that in the nondirect case it is not neces­
       sary for the calling threads to share  an  address  space,
       only  for  their  related  rendering  contexts to share an
       address space.

       Not all values for GL state can be copied.   For  example,
       pixel pack and unpack state, render mode state, and select
       and feedback state are not copied.  The state that can  be
       copied  is exactly the state that is manipulated by the GL
       command
       <B>glPushAttrib</B>.

       An implicit <B>glFlush</B> is done by <B>glXCopyContext</B>  if  <I>src</I>  is
       the current context for the calling thread.


</PRE>
<H2>NOTES</H2><PRE>
       A  <I>process</I>  is a single execution environment, implemented
       in a single address  space,  consisting  of  one  or  more
       gle address space, but maintain separate program counters,
       stack  spaces,  and  other  related global data.  A <I>thread</I>
       that is the only member of its subprocess group is equiva­
       lent to a <I>process</I>.


</PRE>
<H2>ERRORS</H2><PRE>
       <B>BadMatch</B> is generated if rendering contexts <I>src</I> and <I>dst</I> do
       not share an  address  space  or  were  not  created  with
       respect to the same screen.

       <B>BadAccess</B>  is  generated  if  <I>dst</I> is current to any thread
       (including the calling thread) at the time  <B>glXCopyContext</B>
       is called.

       <B>GLXBadCurrentWindow</B>  is  generated  if  <I>src</I> is the current
       context and the current drawable is a window  that  is  no
       longer valid.

       <B>GLXBadContext</B>  is  generated if either <I>src</I> or <I>dst</I> is not a
       valid GLX context.


</PRE>
<H2>SEE ALSO</H2><PRE>
       <B>glPushAttrib</B>, <B>glXCreateContext</B>, <B>glXIsDirect</B>





























@


1.1.1.1
log
@win32-x11 source tree update March 26, 2001
@
text
@@
